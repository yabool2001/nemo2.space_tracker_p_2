
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013da4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020ec  08013e60  08013e60  00023e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f4c  08015f4c  000306d8  2**0
                  CONTENTS
  4 .ARM          00000008  08015f4c  08015f4c  00025f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015f54  08015f54  000306d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015f54  08015f54  00025f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015f5c  08015f5c  00025f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d8  20000000  08015f60  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000087c  200006d8  08016638  000306d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f54  08016638  00030f54  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d3ed  00000000  00000000  00030743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e33  00000000  00000000  0004db30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c70  00000000  00000000  00051968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001618  00000000  00000000  000535d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223c8  00000000  00000000  00054bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000211dd  00000000  00000000  00076fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc9ff  00000000  00000000  00098195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008318  00000000  00000000  00164b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016ceac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d8 	.word	0x200006d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08013e48 	.word	0x08013e48

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006dc 	.word	0x200006dc
 8000100:	08013e48 	.word	0x08013e48

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	080159bc 	.word	0x080159bc
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	46ce      	mov	lr, r9
 80025ac:	4647      	mov	r7, r8
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b087      	sub	sp, #28
 80025b2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b4:	f001 fee4 	bl	8004380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b8:	f000 f9fc 	bl	80029b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025bc:	f000 fc8e 	bl	8002edc <MX_GPIO_Init>
  MX_RTC_Init();
 80025c0:	f000 fa4e 	bl	8002a60 <MX_RTC_Init>
  MX_TIM6_Init();
 80025c4:	f000 fb2e 	bl	8002c24 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c8:	f000 faee 	bl	8002ba8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025cc:	f000 fb68 	bl	8002ca0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025d0:	f000 fbb4 	bl	8002d3c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025d4:	f000 fc00 	bl	8002dd8 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d8:	f000 fc4c 	bl	8002e74 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  send_debug_logs ( hello ) ;
 80025dc:	4bdd      	ldr	r3, [pc, #884]	; (8002954 <main+0x3ac>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fd87 	bl	80030f4 <send_debug_logs>

  my_sys_init () ;
 80025e6:	f000 fdb5 	bl	8003154 <my_sys_init>
  sprintf ( dbg_payload , "System mode: %u" , (uint16_t) sys_mode ) ;
 80025ea:	4bdb      	ldr	r3, [pc, #876]	; (8002958 <main+0x3b0>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	001a      	movs	r2, r3
 80025f0:	49da      	ldr	r1, [pc, #872]	; (800295c <main+0x3b4>)
 80025f2:	4bdb      	ldr	r3, [pc, #876]	; (8002960 <main+0x3b8>)
 80025f4:	0018      	movs	r0, r3
 80025f6:	f00a fe4d 	bl	800d294 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 80025fa:	4bd9      	ldr	r3, [pc, #868]	; (8002960 <main+0x3b8>)
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 fd79 	bl	80030f4 <send_debug_logs>

  my_tim_init () ;
 8002602:	f001 fabf 	bl	8003b84 <my_tim_init>
  my_ant_sw_pos ( 2 ) ;
 8002606:	2002      	movs	r0, #2
 8002608:	f001 f912 	bl	8003830 <my_ant_sw_pos>

  // my_gnss_verbose ( 15 ) ;

  my_gnss_sw_on () ;
 800260c:	f001 f942 	bl	8003894 <my_gnss_sw_on>
  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002610:	4bd4      	ldr	r3, [pc, #848]	; (8002964 <main+0x3bc>)
 8002612:	0018      	movs	r0, r3
 8002614:	f008 fa42 	bl	800aa9c <my_gnss_acq_coordinates>
 8002618:	0003      	movs	r3, r0
 800261a:	001a      	movs	r2, r3
 800261c:	4bd2      	ldr	r3, [pc, #840]	; (8002968 <main+0x3c0>)
 800261e:	701a      	strb	r2, [r3, #0]
  my_gnss_sw_off () ;
 8002620:	f001 f952 	bl	80038c8 <my_gnss_sw_off>
  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002624:	4bd1      	ldr	r3, [pc, #836]	; (800296c <main+0x3c4>)
 8002626:	0018      	movs	r0, r3
 8002628:	f008 fbbe 	bl	800ada8 <my_rtc_get_dt_s>
  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 800262c:	4bcd      	ldr	r3, [pc, #820]	; (8002964 <main+0x3bc>)
 800262e:	7c1b      	ldrb	r3, [r3, #16]
 8002630:	001e      	movs	r6, r3
 8002632:	4bcc      	ldr	r3, [pc, #816]	; (8002964 <main+0x3bc>)
 8002634:	689c      	ldr	r4, [r3, #8]
 8002636:	68dd      	ldr	r5, [r3, #12]
 8002638:	4bca      	ldr	r3, [pc, #808]	; (8002964 <main+0x3bc>)
 800263a:	8a5b      	ldrh	r3, [r3, #18]
 800263c:	4698      	mov	r8, r3
 800263e:	4bc9      	ldr	r3, [pc, #804]	; (8002964 <main+0x3bc>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	213c      	movs	r1, #60	; 0x3c
 8002644:	0018      	movs	r0, r3
 8002646:	f7fd fd79 	bl	800013c <__udivsi3>
 800264a:	0003      	movs	r3, r0
 800264c:	4ac8      	ldr	r2, [pc, #800]	; (8002970 <main+0x3c8>)
 800264e:	49c9      	ldr	r1, [pc, #804]	; (8002974 <main+0x3cc>)
 8002650:	48c3      	ldr	r0, [pc, #780]	; (8002960 <main+0x3b8>)
 8002652:	9305      	str	r3, [sp, #20]
 8002654:	4643      	mov	r3, r8
 8002656:	9304      	str	r3, [sp, #16]
 8002658:	9402      	str	r4, [sp, #8]
 800265a:	9503      	str	r5, [sp, #12]
 800265c:	9601      	str	r6, [sp, #4]
 800265e:	4bc3      	ldr	r3, [pc, #780]	; (800296c <main+0x3c4>)
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	23c0      	movs	r3, #192	; 0xc0
 8002664:	f00a fe16 	bl	800d294 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 8002668:	4bbd      	ldr	r3, [pc, #756]	; (8002960 <main+0x3b8>)
 800266a:	0018      	movs	r0, r3
 800266c:	f000 fd42 	bl	80030f4 <send_debug_logs>
  if ( !my_gnss_3dfix_flag )
 8002670:	4bbd      	ldr	r3, [pc, #756]	; (8002968 <main+0x3c0>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	4053      	eors	r3, r2
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d027      	beq.n	80026ce <main+0x126>
  {
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 800267e:	4bbe      	ldr	r3, [pc, #760]	; (8002978 <main+0x3d0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	0018      	movs	r0, r3
 8002684:	f008 fbd2 	bl	800ae2c <my_rtc_set_alarm>
 8002688:	1e03      	subs	r3, r0, #0
 800268a:	d020      	beq.n	80026ce <main+0x126>
	  {
		  sprintf ( dbg_payload , "%s,%d,HAL_PWR_EnterSTANDBYMode" , __FILE__ , __LINE__ ) ;
 800268c:	4ab8      	ldr	r2, [pc, #736]	; (8002970 <main+0x3c8>)
 800268e:	49bb      	ldr	r1, [pc, #748]	; (800297c <main+0x3d4>)
 8002690:	48b3      	ldr	r0, [pc, #716]	; (8002960 <main+0x3b8>)
 8002692:	23c6      	movs	r3, #198	; 0xc6
 8002694:	f00a fdfe 	bl	800d294 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002698:	4bb1      	ldr	r3, [pc, #708]	; (8002960 <main+0x3b8>)
 800269a:	0018      	movs	r0, r3
 800269c:	f000 fd2a 	bl	80030f4 <send_debug_logs>
		  my_tim_stop () ;
 80026a0:	f001 fa8c 	bl	8003bbc <my_tim_stop>
		  my_rtc_alarm_flag = false ;
 80026a4:	4bb6      	ldr	r3, [pc, #728]	; (8002980 <main+0x3d8>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTANDBYMode () ;
 80026aa:	f002 fb31 	bl	8004d10 <HAL_PWR_EnterSTANDBYMode>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80026ae:	4baf      	ldr	r3, [pc, #700]	; (800296c <main+0x3c4>)
 80026b0:	0018      	movs	r0, r3
 80026b2:	f008 fb79 	bl	800ada8 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80026b6:	4aae      	ldr	r2, [pc, #696]	; (8002970 <main+0x3c8>)
 80026b8:	49b2      	ldr	r1, [pc, #712]	; (8002984 <main+0x3dc>)
 80026ba:	48a9      	ldr	r0, [pc, #676]	; (8002960 <main+0x3b8>)
 80026bc:	4bab      	ldr	r3, [pc, #684]	; (800296c <main+0x3c4>)
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	23cc      	movs	r3, #204	; 0xcc
 80026c2:	f00a fde7 	bl	800d294 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026c6:	4ba6      	ldr	r3, [pc, #664]	; (8002960 <main+0x3b8>)
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 fd13 	bl	80030f4 <send_debug_logs>
	  }
  }
  if ( !my_acc_init () )
 80026ce:	f001 f943 	bl	8003958 <my_acc_init>
 80026d2:	0003      	movs	r3, r0
 80026d4:	001a      	movs	r2, r3
 80026d6:	2301      	movs	r3, #1
 80026d8:	4053      	eors	r3, r2
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <main+0x13e>
  	  my_st_acc_health_flag = 0 ;
 80026e0:	4ba9      	ldr	r3, [pc, #676]	; (8002988 <main+0x3e0>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	801a      	strh	r2, [r3, #0]

  if ( !my_astro_init () )
 80026e6:	f008 f926 	bl	800a936 <my_astro_init>
 80026ea:	0003      	movs	r3, r0
 80026ec:	001a      	movs	r2, r3
 80026ee:	2301      	movs	r3, #1
 80026f0:	4053      	eors	r3, r2
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00e      	beq.n	8002716 <main+0x16e>
	  my_sys_restart () ;
 80026f8:	f000 fdca 	bl	8003290 <my_sys_restart>
 80026fc:	e087      	b.n	800280e <main+0x266>
  else
  {
	  while ( my_astro_evt_pin () )
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80026fe:	4a9c      	ldr	r2, [pc, #624]	; (8002970 <main+0x3c8>)
 8002700:	49a2      	ldr	r1, [pc, #648]	; (800298c <main+0x3e4>)
 8002702:	4897      	ldr	r0, [pc, #604]	; (8002960 <main+0x3b8>)
 8002704:	23d9      	movs	r3, #217	; 0xd9
 8002706:	f00a fdc5 	bl	800d294 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 800270a:	4b95      	ldr	r3, [pc, #596]	; (8002960 <main+0x3b8>)
 800270c:	0018      	movs	r0, r3
 800270e:	f000 fcf1 	bl	80030f4 <send_debug_logs>
		  my_astro_handle_evt () ;
 8002712:	f008 f971 	bl	800a9f8 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 8002716:	f001 f9a3 	bl	8003a60 <my_astro_evt_pin>
 800271a:	1e03      	subs	r3, r0, #0
 800271c:	d1ef      	bne.n	80026fe <main+0x156>
	  }
	  if ( sys_mode == 0 ) // Present sys_mode if other than production
 800271e:	4b8e      	ldr	r3, [pc, #568]	; (8002958 <main+0x3b0>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d11d      	bne.n	8002762 <main+0x1ba>
		  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s" , uplink_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv ) ;
 8002726:	4b9a      	ldr	r3, [pc, #616]	; (8002990 <main+0x3e8>)
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	4698      	mov	r8, r3
 800272c:	4b8d      	ldr	r3, [pc, #564]	; (8002964 <main+0x3bc>)
 800272e:	689c      	ldr	r4, [r3, #8]
 8002730:	68dd      	ldr	r5, [r3, #12]
 8002732:	4b8c      	ldr	r3, [pc, #560]	; (8002964 <main+0x3bc>)
 8002734:	8a5b      	ldrh	r3, [r3, #18]
 8002736:	001e      	movs	r6, r3
 8002738:	4b8a      	ldr	r3, [pc, #552]	; (8002964 <main+0x3bc>)
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	213c      	movs	r1, #60	; 0x3c
 800273e:	0018      	movs	r0, r3
 8002740:	f7fd fcfc 	bl	800013c <__udivsi3>
 8002744:	0003      	movs	r3, r0
 8002746:	001a      	movs	r2, r3
 8002748:	4b92      	ldr	r3, [pc, #584]	; (8002994 <main+0x3ec>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4992      	ldr	r1, [pc, #584]	; (8002998 <main+0x3f0>)
 800274e:	4893      	ldr	r0, [pc, #588]	; (800299c <main+0x3f4>)
 8002750:	9304      	str	r3, [sp, #16]
 8002752:	9203      	str	r2, [sp, #12]
 8002754:	9602      	str	r6, [sp, #8]
 8002756:	9400      	str	r4, [sp, #0]
 8002758:	9501      	str	r5, [sp, #4]
 800275a:	4642      	mov	r2, r8
 800275c:	f00a fd9a 	bl	800d294 <sprintf>
 8002760:	e020      	b.n	80027a4 <main+0x1fc>
	  else
		  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s,%u" , uplink_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv , (uint16_t) sys_mode ) ;
 8002762:	4b8b      	ldr	r3, [pc, #556]	; (8002990 <main+0x3e8>)
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	4698      	mov	r8, r3
 8002768:	4b7e      	ldr	r3, [pc, #504]	; (8002964 <main+0x3bc>)
 800276a:	689c      	ldr	r4, [r3, #8]
 800276c:	68dd      	ldr	r5, [r3, #12]
 800276e:	4b7d      	ldr	r3, [pc, #500]	; (8002964 <main+0x3bc>)
 8002770:	8a5b      	ldrh	r3, [r3, #18]
 8002772:	001e      	movs	r6, r3
 8002774:	4b7b      	ldr	r3, [pc, #492]	; (8002964 <main+0x3bc>)
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	213c      	movs	r1, #60	; 0x3c
 800277a:	0018      	movs	r0, r3
 800277c:	f7fd fcde 	bl	800013c <__udivsi3>
 8002780:	0003      	movs	r3, r0
 8002782:	469c      	mov	ip, r3
 8002784:	4b83      	ldr	r3, [pc, #524]	; (8002994 <main+0x3ec>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a73      	ldr	r2, [pc, #460]	; (8002958 <main+0x3b0>)
 800278a:	7812      	ldrb	r2, [r2, #0]
 800278c:	4984      	ldr	r1, [pc, #528]	; (80029a0 <main+0x3f8>)
 800278e:	4883      	ldr	r0, [pc, #524]	; (800299c <main+0x3f4>)
 8002790:	9205      	str	r2, [sp, #20]
 8002792:	9304      	str	r3, [sp, #16]
 8002794:	4663      	mov	r3, ip
 8002796:	9303      	str	r3, [sp, #12]
 8002798:	9602      	str	r6, [sp, #8]
 800279a:	9400      	str	r4, [sp, #0]
 800279c:	9501      	str	r5, [sp, #4]
 800279e:	4642      	mov	r2, r8
 80027a0:	f00a fd78 	bl	800d294 <sprintf>
	  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80027a4:	4a72      	ldr	r2, [pc, #456]	; (8002970 <main+0x3c8>)
 80027a6:	497f      	ldr	r1, [pc, #508]	; (80029a4 <main+0x3fc>)
 80027a8:	486d      	ldr	r0, [pc, #436]	; (8002960 <main+0x3b8>)
 80027aa:	4b7c      	ldr	r3, [pc, #496]	; (800299c <main+0x3f4>)
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	23e1      	movs	r3, #225	; 0xe1
 80027b0:	f00a fd70 	bl	800d294 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 80027b4:	4b6a      	ldr	r3, [pc, #424]	; (8002960 <main+0x3b8>)
 80027b6:	0018      	movs	r0, r3
 80027b8:	f000 fc9c 	bl	80030f4 <send_debug_logs>
	  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80027bc:	4b69      	ldr	r3, [pc, #420]	; (8002964 <main+0x3bc>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b68      	ldr	r3, [pc, #416]	; (8002964 <main+0x3bc>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	0019      	movs	r1, r3
 80027c6:	0010      	movs	r0, r2
 80027c8:	f008 f958 	bl	800aa7c <my_astro_write_coordinates>
	  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80027cc:	4b70      	ldr	r3, [pc, #448]	; (8002990 <main+0x3e8>)
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	b291      	uxth	r1, r2
 80027d4:	4a6e      	ldr	r2, [pc, #440]	; (8002990 <main+0x3e8>)
 80027d6:	8011      	strh	r1, [r2, #0]
 80027d8:	4a70      	ldr	r2, [pc, #448]	; (800299c <main+0x3f4>)
 80027da:	0011      	movs	r1, r2
 80027dc:	0018      	movs	r0, r3
 80027de:	f008 f8e3 	bl	800a9a8 <my_astro_add_payload_2_queue>
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 80027e2:	4b65      	ldr	r3, [pc, #404]	; (8002978 <main+0x3d0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0018      	movs	r0, r3
 80027e8:	f008 fb20 	bl	800ae2c <my_rtc_set_alarm>
 80027ec:	1e03      	subs	r3, r0, #0
 80027ee:	d00e      	beq.n	800280e <main+0x266>
	  {
		  my_sys_deepsleep () ;
 80027f0:	f000 fd72 	bl	80032d8 <my_sys_deepsleep>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( my_astro_evt_pin () )
 80027f4:	e00b      	b.n	800280e <main+0x266>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80027f6:	4a5e      	ldr	r2, [pc, #376]	; (8002970 <main+0x3c8>)
 80027f8:	4964      	ldr	r1, [pc, #400]	; (800298c <main+0x3e4>)
 80027fa:	4859      	ldr	r0, [pc, #356]	; (8002960 <main+0x3b8>)
 80027fc:	23f3      	movs	r3, #243	; 0xf3
 80027fe:	f00a fd49 	bl	800d294 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002802:	4b57      	ldr	r3, [pc, #348]	; (8002960 <main+0x3b8>)
 8002804:	0018      	movs	r0, r3
 8002806:	f000 fc75 	bl	80030f4 <send_debug_logs>
		  my_astro_handle_evt () ;
 800280a:	f008 f8f5 	bl	800a9f8 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 800280e:	f001 f927 	bl	8003a60 <my_astro_evt_pin>
 8002812:	1e03      	subs	r3, r0, #0
 8002814:	d1ef      	bne.n	80027f6 <main+0x24e>
	  }
	  if ( astro_rcv_cmd_flag )
 8002816:	4b64      	ldr	r3, [pc, #400]	; (80029a8 <main+0x400>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <main+0x286>
	  {
		  astro_rcv_cmd_flag = false ;
 800281e:	4b62      	ldr	r3, [pc, #392]	; (80029a8 <main+0x400>)
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
		  my_tracker_handle_cmd () ;
 8002824:	f000 fe2c 	bl	8003480 <my_tracker_handle_cmd>
		  my_astro_rcv_cmd[0] = 0 ;
 8002828:	4b60      	ldr	r3, [pc, #384]	; (80029ac <main+0x404>)
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
	  }
	  if ( my_rtc_alarm_flag )
 800282e:	4b54      	ldr	r3, [pc, #336]	; (8002980 <main+0x3d8>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d100      	bne.n	8002838 <main+0x290>
 8002836:	e081      	b.n	800293c <main+0x394>
	  {
		  my_rtc_alarm_flag = false ;
 8002838:	4b51      	ldr	r3, [pc, #324]	; (8002980 <main+0x3d8>)
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_on () ;
 800283e:	f001 f829 	bl	8003894 <my_gnss_sw_on>
		  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002842:	4b48      	ldr	r3, [pc, #288]	; (8002964 <main+0x3bc>)
 8002844:	0018      	movs	r0, r3
 8002846:	f008 f929 	bl	800aa9c <my_gnss_acq_coordinates>
 800284a:	0003      	movs	r3, r0
 800284c:	001a      	movs	r2, r3
 800284e:	4b46      	ldr	r3, [pc, #280]	; (8002968 <main+0x3c0>)
 8002850:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_off () ;
 8002852:	f001 f839 	bl	80038c8 <my_gnss_sw_off>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002856:	4b45      	ldr	r3, [pc, #276]	; (800296c <main+0x3c4>)
 8002858:	0018      	movs	r0, r3
 800285a:	f008 faa5 	bl	800ada8 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 800285e:	4b41      	ldr	r3, [pc, #260]	; (8002964 <main+0x3bc>)
 8002860:	7c1b      	ldrb	r3, [r3, #16]
 8002862:	4698      	mov	r8, r3
 8002864:	4b3f      	ldr	r3, [pc, #252]	; (8002964 <main+0x3bc>)
 8002866:	689c      	ldr	r4, [r3, #8]
 8002868:	68dd      	ldr	r5, [r3, #12]
 800286a:	4b3e      	ldr	r3, [pc, #248]	; (8002964 <main+0x3bc>)
 800286c:	8a5b      	ldrh	r3, [r3, #18]
 800286e:	4699      	mov	r9, r3
 8002870:	4b3c      	ldr	r3, [pc, #240]	; (8002964 <main+0x3bc>)
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	213c      	movs	r1, #60	; 0x3c
 8002876:	0018      	movs	r0, r3
 8002878:	f7fd fc60 	bl	800013c <__udivsi3>
 800287c:	0003      	movs	r3, r0
 800287e:	469c      	mov	ip, r3
 8002880:	2382      	movs	r3, #130	; 0x82
 8002882:	005e      	lsls	r6, r3, #1
 8002884:	4a3a      	ldr	r2, [pc, #232]	; (8002970 <main+0x3c8>)
 8002886:	493b      	ldr	r1, [pc, #236]	; (8002974 <main+0x3cc>)
 8002888:	4835      	ldr	r0, [pc, #212]	; (8002960 <main+0x3b8>)
 800288a:	4663      	mov	r3, ip
 800288c:	9305      	str	r3, [sp, #20]
 800288e:	464b      	mov	r3, r9
 8002890:	9304      	str	r3, [sp, #16]
 8002892:	9402      	str	r4, [sp, #8]
 8002894:	9503      	str	r5, [sp, #12]
 8002896:	4643      	mov	r3, r8
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	4b34      	ldr	r3, [pc, #208]	; (800296c <main+0x3c4>)
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	0033      	movs	r3, r6
 80028a0:	f00a fcf8 	bl	800d294 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80028a4:	4b2e      	ldr	r3, [pc, #184]	; (8002960 <main+0x3b8>)
 80028a6:	0018      	movs	r0, r3
 80028a8:	f000 fc24 	bl	80030f4 <send_debug_logs>
		  if ( my_gnss_3dfix_flag )
 80028ac:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <main+0x3c0>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d043      	beq.n	800293c <main+0x394>
		  {
			  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80028b4:	4b2b      	ldr	r3, [pc, #172]	; (8002964 <main+0x3bc>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <main+0x3bc>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	0019      	movs	r1, r3
 80028be:	0010      	movs	r0, r2
 80028c0:	f008 f8dc 	bl	800aa7c <my_astro_write_coordinates>
			  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%ld,%ld" , uplink_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80028c4:	4b32      	ldr	r3, [pc, #200]	; (8002990 <main+0x3e8>)
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	4698      	mov	r8, r3
 80028ca:	4b26      	ldr	r3, [pc, #152]	; (8002964 <main+0x3bc>)
 80028cc:	689c      	ldr	r4, [r3, #8]
 80028ce:	68dd      	ldr	r5, [r3, #12]
 80028d0:	4b24      	ldr	r3, [pc, #144]	; (8002964 <main+0x3bc>)
 80028d2:	8a5b      	ldrh	r3, [r3, #18]
 80028d4:	001e      	movs	r6, r3
 80028d6:	4b23      	ldr	r3, [pc, #140]	; (8002964 <main+0x3bc>)
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	213c      	movs	r1, #60	; 0x3c
 80028dc:	0018      	movs	r0, r3
 80028de:	f7fd fc2d 	bl	800013c <__udivsi3>
 80028e2:	0003      	movs	r3, r0
 80028e4:	469c      	mov	ip, r3
 80028e6:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <main+0x3bc>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <main+0x3bc>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4930      	ldr	r1, [pc, #192]	; (80029b0 <main+0x408>)
 80028f0:	482a      	ldr	r0, [pc, #168]	; (800299c <main+0x3f4>)
 80028f2:	9305      	str	r3, [sp, #20]
 80028f4:	9204      	str	r2, [sp, #16]
 80028f6:	4663      	mov	r3, ip
 80028f8:	9303      	str	r3, [sp, #12]
 80028fa:	9602      	str	r6, [sp, #8]
 80028fc:	9400      	str	r4, [sp, #0]
 80028fe:	9501      	str	r5, [sp, #4]
 8002900:	4642      	mov	r2, r8
 8002902:	f00a fcc7 	bl	800d294 <sprintf>
			  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8002906:	4b22      	ldr	r3, [pc, #136]	; (8002990 <main+0x3e8>)
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	b291      	uxth	r1, r2
 800290e:	4a20      	ldr	r2, [pc, #128]	; (8002990 <main+0x3e8>)
 8002910:	8011      	strh	r1, [r2, #0]
 8002912:	4a22      	ldr	r2, [pc, #136]	; (800299c <main+0x3f4>)
 8002914:	0011      	movs	r1, r2
 8002916:	0018      	movs	r0, r3
 8002918:	f008 f846 	bl	800a9a8 <my_astro_add_payload_2_queue>
			  my_astro_turn_payload_id_counter () ;
 800291c:	f001 f8b2 	bl	8003a84 <my_astro_turn_payload_id_counter>
			  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ;
 8002920:	2386      	movs	r3, #134	; 0x86
 8002922:	005c      	lsls	r4, r3, #1
 8002924:	4a12      	ldr	r2, [pc, #72]	; (8002970 <main+0x3c8>)
 8002926:	491f      	ldr	r1, [pc, #124]	; (80029a4 <main+0x3fc>)
 8002928:	480d      	ldr	r0, [pc, #52]	; (8002960 <main+0x3b8>)
 800292a:	4b1c      	ldr	r3, [pc, #112]	; (800299c <main+0x3f4>)
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	0023      	movs	r3, r4
 8002930:	f00a fcb0 	bl	800d294 <sprintf>
			  send_debug_logs ( dbg_payload ) ;
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <main+0x3b8>)
 8002936:	0018      	movs	r0, r3
 8002938:	f000 fbdc 	bl	80030f4 <send_debug_logs>
		  }
	  }
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 800293c:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <main+0x3d0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	0018      	movs	r0, r3
 8002942:	f008 fa73 	bl	800ae2c <my_rtc_set_alarm>
 8002946:	1e03      	subs	r3, r0, #0
 8002948:	d100      	bne.n	800294c <main+0x3a4>
 800294a:	e760      	b.n	800280e <main+0x266>
	  {
		  my_sys_deepsleep () ;
 800294c:	f000 fcc4 	bl	80032d8 <my_sys_deepsleep>
	  while ( my_astro_evt_pin () )
 8002950:	e75d      	b.n	800280e <main+0x266>
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	20000000 	.word	0x20000000
 8002958:	20000a22 	.word	0x20000a22
 800295c:	08013e90 	.word	0x08013e90
 8002960:	20000b20 	.word	0x20000b20
 8002964:	20000ae8 	.word	0x20000ae8
 8002968:	20000b01 	.word	0x20000b01
 800296c:	20000a24 	.word	0x20000a24
 8002970:	08013ea0 	.word	0x08013ea0
 8002974:	08013eb4 	.word	0x08013eb4
 8002978:	2000000c 	.word	0x2000000c
 800297c:	08013ef4 	.word	0x08013ef4
 8002980:	20000b00 	.word	0x20000b00
 8002984:	08013f14 	.word	0x08013f14
 8002988:	2000001a 	.word	0x2000001a
 800298c:	08013f20 	.word	0x08013f20
 8002990:	20000ae4 	.word	0x20000ae4
 8002994:	20000004 	.word	0x20000004
 8002998:	08013f38 	.word	0x08013f38
 800299c:	20000a38 	.word	0x20000a38
 80029a0:	08013f4c 	.word	0x08013f4c
 80029a4:	08013f64 	.word	0x08013f64
 80029a8:	20000c1a 	.word	0x20000c1a
 80029ac:	20000c1c 	.word	0x20000c1c
 80029b0:	08013f78 	.word	0x08013f78

080029b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b095      	sub	sp, #84	; 0x54
 80029b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ba:	2414      	movs	r4, #20
 80029bc:	193b      	adds	r3, r7, r4
 80029be:	0018      	movs	r0, r3
 80029c0:	233c      	movs	r3, #60	; 0x3c
 80029c2:	001a      	movs	r2, r3
 80029c4:	2100      	movs	r1, #0
 80029c6:	f00a fcfb 	bl	800d3c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	0018      	movs	r0, r3
 80029ce:	2310      	movs	r3, #16
 80029d0:	001a      	movs	r2, r3
 80029d2:	2100      	movs	r1, #0
 80029d4:	f00a fcf4 	bl	800d3c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	0018      	movs	r0, r3
 80029de:	f002 f9b1 	bl	8004d44 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80029e2:	f002 f94f 	bl	8004c84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80029e6:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <SystemClock_Config+0xa8>)
 80029e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029ea:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <SystemClock_Config+0xa8>)
 80029ec:	2118      	movs	r1, #24
 80029ee:	438a      	bics	r2, r1
 80029f0:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80029f2:	193b      	adds	r3, r7, r4
 80029f4:	2206      	movs	r2, #6
 80029f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029f8:	193b      	adds	r3, r7, r4
 80029fa:	2201      	movs	r2, #1
 80029fc:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029fe:	193b      	adds	r3, r7, r4
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	0052      	lsls	r2, r2, #1
 8002a04:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	2240      	movs	r2, #64	; 0x40
 8002a10:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	2200      	movs	r2, #0
 8002a16:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a18:	193b      	adds	r3, r7, r4
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f002 f9de 	bl	8004ddc <HAL_RCC_OscConfig>
 8002a20:	1e03      	subs	r3, r0, #0
 8002a22:	d001      	beq.n	8002a28 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002a24:	f001 f910 	bl	8003c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	2207      	movs	r2, #7
 8002a2c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	2200      	movs	r2, #0
 8002a32:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	2100      	movs	r1, #0
 8002a44:	0018      	movs	r0, r3
 8002a46:	f002 fd29 	bl	800549c <HAL_RCC_ClockConfig>
 8002a4a:	1e03      	subs	r3, r0, #0
 8002a4c:	d001      	beq.n	8002a52 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002a4e:	f001 f8fb 	bl	8003c48 <Error_Handler>
  }
}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b015      	add	sp, #84	; 0x54
 8002a58:	bd90      	pop	{r4, r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	40021000 	.word	0x40021000

08002a60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b090      	sub	sp, #64	; 0x40
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002a66:	232c      	movs	r3, #44	; 0x2c
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	2314      	movs	r3, #20
 8002a6e:	001a      	movs	r2, r3
 8002a70:	2100      	movs	r1, #0
 8002a72:	f00a fca5 	bl	800d3c0 <memset>
  RTC_DateTypeDef sDate = {0};
 8002a76:	2328      	movs	r3, #40	; 0x28
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002a7e:	003b      	movs	r3, r7
 8002a80:	0018      	movs	r0, r3
 8002a82:	2328      	movs	r3, #40	; 0x28
 8002a84:	001a      	movs	r2, r3
 8002a86:	2100      	movs	r1, #0
 8002a88:	f00a fc9a 	bl	800d3c0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a8c:	4b44      	ldr	r3, [pc, #272]	; (8002ba0 <MX_RTC_Init+0x140>)
 8002a8e:	4a45      	ldr	r2, [pc, #276]	; (8002ba4 <MX_RTC_Init+0x144>)
 8002a90:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a92:	4b43      	ldr	r3, [pc, #268]	; (8002ba0 <MX_RTC_Init+0x140>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002a98:	4b41      	ldr	r3, [pc, #260]	; (8002ba0 <MX_RTC_Init+0x140>)
 8002a9a:	227f      	movs	r2, #127	; 0x7f
 8002a9c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002a9e:	4b40      	ldr	r3, [pc, #256]	; (8002ba0 <MX_RTC_Init+0x140>)
 8002aa0:	22ff      	movs	r2, #255	; 0xff
 8002aa2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002aa4:	4b3e      	ldr	r3, [pc, #248]	; (8002ba0 <MX_RTC_Init+0x140>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002aaa:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <MX_RTC_Init+0x140>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ab0:	4b3b      	ldr	r3, [pc, #236]	; (8002ba0 <MX_RTC_Init+0x140>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ab6:	4b3a      	ldr	r3, [pc, #232]	; (8002ba0 <MX_RTC_Init+0x140>)
 8002ab8:	2280      	movs	r2, #128	; 0x80
 8002aba:	05d2      	lsls	r2, r2, #23
 8002abc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002abe:	4b38      	ldr	r3, [pc, #224]	; (8002ba0 <MX_RTC_Init+0x140>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ac4:	4b36      	ldr	r3, [pc, #216]	; (8002ba0 <MX_RTC_Init+0x140>)
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f003 f8ce 	bl	8005c68 <HAL_RTC_Init>
 8002acc:	1e03      	subs	r3, r0, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002ad0:	f001 f8ba 	bl	8003c48 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	2200      	movs	r2, #0
 8002ae0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	2200      	movs	r2, #0
 8002aec:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002aee:	187b      	adds	r3, r7, r1
 8002af0:	2200      	movs	r2, #0
 8002af2:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002afa:	1879      	adds	r1, r7, r1
 8002afc:	4b28      	ldr	r3, [pc, #160]	; (8002ba0 <MX_RTC_Init+0x140>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	0018      	movs	r0, r3
 8002b02:	f003 f953 	bl	8005dac <HAL_RTC_SetTime>
 8002b06:	1e03      	subs	r3, r0, #0
 8002b08:	d001      	beq.n	8002b0e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002b0a:	f001 f89d 	bl	8003c48 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002b0e:	2128      	movs	r1, #40	; 0x28
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	2206      	movs	r2, #6
 8002b14:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002b16:	187b      	adds	r3, r7, r1
 8002b18:	2201      	movs	r2, #1
 8002b1a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	2201      	movs	r2, #1
 8002b20:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002b22:	187b      	adds	r3, r7, r1
 8002b24:	2200      	movs	r2, #0
 8002b26:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b28:	1879      	adds	r1, r7, r1
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <MX_RTC_Init+0x140>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f003 fa40 	bl	8005fb4 <HAL_RTC_SetDate>
 8002b34:	1e03      	subs	r3, r0, #0
 8002b36:	d001      	beq.n	8002b3c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002b38:	f001 f886 	bl	8003c48 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002b3c:	003b      	movs	r3, r7
 8002b3e:	2200      	movs	r2, #0
 8002b40:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002b42:	003b      	movs	r3, r7
 8002b44:	2200      	movs	r2, #0
 8002b46:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002b48:	003b      	movs	r3, r7
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002b4e:	003b      	movs	r3, r7
 8002b50:	2200      	movs	r2, #0
 8002b52:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b54:	003b      	movs	r3, r7
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b5a:	003b      	movs	r3, r7
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002b60:	003b      	movs	r3, r7
 8002b62:	2200      	movs	r2, #0
 8002b64:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002b66:	003b      	movs	r3, r7
 8002b68:	2200      	movs	r2, #0
 8002b6a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002b6c:	003b      	movs	r3, r7
 8002b6e:	2200      	movs	r2, #0
 8002b70:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002b72:	003b      	movs	r3, r7
 8002b74:	2220      	movs	r2, #32
 8002b76:	2101      	movs	r1, #1
 8002b78:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002b7a:	003b      	movs	r3, r7
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	0052      	lsls	r2, r2, #1
 8002b80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b82:	0039      	movs	r1, r7
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <MX_RTC_Init+0x140>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f003 faf3 	bl	8006174 <HAL_RTC_SetAlarm_IT>
 8002b8e:	1e03      	subs	r3, r0, #0
 8002b90:	d001      	beq.n	8002b96 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002b92:	f001 f859 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b010      	add	sp, #64	; 0x40
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	200006f4 	.word	0x200006f4
 8002ba4:	40002800 	.word	0x40002800

08002ba8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <MX_SPI1_Init+0x74>)
 8002bae:	4a1c      	ldr	r2, [pc, #112]	; (8002c20 <MX_SPI1_Init+0x78>)
 8002bb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bb2:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <MX_SPI1_Init+0x74>)
 8002bb4:	2282      	movs	r2, #130	; 0x82
 8002bb6:	0052      	lsls	r2, r2, #1
 8002bb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bba:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <MX_SPI1_Init+0x74>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bc0:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <MX_SPI1_Init+0x74>)
 8002bc2:	22e0      	movs	r2, #224	; 0xe0
 8002bc4:	00d2      	lsls	r2, r2, #3
 8002bc6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bc8:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <MX_SPI1_Init+0x74>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bce:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <MX_SPI1_Init+0x74>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bd4:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <MX_SPI1_Init+0x74>)
 8002bd6:	2280      	movs	r2, #128	; 0x80
 8002bd8:	0092      	lsls	r2, r2, #2
 8002bda:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <MX_SPI1_Init+0x74>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002be2:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <MX_SPI1_Init+0x74>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002be8:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <MX_SPI1_Init+0x74>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <MX_SPI1_Init+0x74>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <MX_SPI1_Init+0x74>)
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bfa:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <MX_SPI1_Init+0x74>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <MX_SPI1_Init+0x74>)
 8002c02:	2208      	movs	r2, #8
 8002c04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c06:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <MX_SPI1_Init+0x74>)
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f003 fd93 	bl	8006734 <HAL_SPI_Init>
 8002c0e:	1e03      	subs	r3, r0, #0
 8002c10:	d001      	beq.n	8002c16 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002c12:	f001 f819 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000720 	.word	0x20000720
 8002c20:	40013000 	.word	0x40013000

08002c24 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	230c      	movs	r3, #12
 8002c30:	001a      	movs	r2, r3
 8002c32:	2100      	movs	r1, #0
 8002c34:	f00a fbc4 	bl	800d3c0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c38:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <MX_TIM6_Init+0x6c>)
 8002c3a:	4a16      	ldr	r2, [pc, #88]	; (8002c94 <MX_TIM6_Init+0x70>)
 8002c3c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002c3e:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <MX_TIM6_Init+0x6c>)
 8002c40:	4a15      	ldr	r2, [pc, #84]	; (8002c98 <MX_TIM6_Init+0x74>)
 8002c42:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c44:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <MX_TIM6_Init+0x6c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <MX_TIM6_Init+0x6c>)
 8002c4c:	4a13      	ldr	r2, [pc, #76]	; (8002c9c <MX_TIM6_Init+0x78>)
 8002c4e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <MX_TIM6_Init+0x6c>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <MX_TIM6_Init+0x6c>)
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f004 fc8b 	bl	8007574 <HAL_TIM_Base_Init>
 8002c5e:	1e03      	subs	r3, r0, #0
 8002c60:	d001      	beq.n	8002c66 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002c62:	f000 fff1 	bl	8003c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c66:	1d3b      	adds	r3, r7, #4
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c72:	1d3a      	adds	r2, r7, #4
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <MX_TIM6_Init+0x6c>)
 8002c76:	0011      	movs	r1, r2
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f004 ff23 	bl	8007ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c7e:	1e03      	subs	r3, r0, #0
 8002c80:	d001      	beq.n	8002c86 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002c82:	f000 ffe1 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b004      	add	sp, #16
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	20000784 	.word	0x20000784
 8002c94:	40001000 	.word	0x40001000
 8002c98:	00003e7f 	.word	0x00003e7f
 8002c9c:	000003e7 	.word	0x000003e7

08002ca0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ca4:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <MX_USART1_UART_Init+0x94>)
 8002ca6:	4a24      	ldr	r2, [pc, #144]	; (8002d38 <MX_USART1_UART_Init+0x98>)
 8002ca8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002caa:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <MX_USART1_UART_Init+0x94>)
 8002cac:	22e1      	movs	r2, #225	; 0xe1
 8002cae:	0252      	lsls	r2, r2, #9
 8002cb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cb2:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <MX_USART1_UART_Init+0x94>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cb8:	4b1e      	ldr	r3, [pc, #120]	; (8002d34 <MX_USART1_UART_Init+0x94>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <MX_USART1_UART_Init+0x94>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <MX_USART1_UART_Init+0x94>)
 8002cc6:	220c      	movs	r2, #12
 8002cc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cca:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <MX_USART1_UART_Init+0x94>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd0:	4b18      	ldr	r3, [pc, #96]	; (8002d34 <MX_USART1_UART_Init+0x94>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cd6:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <MX_USART1_UART_Init+0x94>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cdc:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <MX_USART1_UART_Init+0x94>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ce2:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <MX_USART1_UART_Init+0x94>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ce8:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <MX_USART1_UART_Init+0x94>)
 8002cea:	0018      	movs	r0, r3
 8002cec:	f004 ff78 	bl	8007be0 <HAL_UART_Init>
 8002cf0:	1e03      	subs	r3, r0, #0
 8002cf2:	d001      	beq.n	8002cf8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002cf4:	f000 ffa8 	bl	8003c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cf8:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <MX_USART1_UART_Init+0x94>)
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f005 ff53 	bl	8008ba8 <HAL_UARTEx_SetTxFifoThreshold>
 8002d02:	1e03      	subs	r3, r0, #0
 8002d04:	d001      	beq.n	8002d0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d06:	f000 ff9f 	bl	8003c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <MX_USART1_UART_Init+0x94>)
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f005 ff8a 	bl	8008c28 <HAL_UARTEx_SetRxFifoThreshold>
 8002d14:	1e03      	subs	r3, r0, #0
 8002d16:	d001      	beq.n	8002d1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d18:	f000 ff96 	bl	8003c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <MX_USART1_UART_Init+0x94>)
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f005 ff08 	bl	8008b34 <HAL_UARTEx_DisableFifoMode>
 8002d24:	1e03      	subs	r3, r0, #0
 8002d26:	d001      	beq.n	8002d2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d28:	f000 ff8e 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d2c:	46c0      	nop			; (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	200007d0 	.word	0x200007d0
 8002d38:	40013800 	.word	0x40013800

08002d3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d40:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <MX_USART2_UART_Init+0x94>)
 8002d42:	4a24      	ldr	r2, [pc, #144]	; (8002dd4 <MX_USART2_UART_Init+0x98>)
 8002d44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d46:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <MX_USART2_UART_Init+0x94>)
 8002d48:	22e1      	movs	r2, #225	; 0xe1
 8002d4a:	0252      	lsls	r2, r2, #9
 8002d4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <MX_USART2_UART_Init+0x94>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d54:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <MX_USART2_UART_Init+0x94>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <MX_USART2_UART_Init+0x94>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d60:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <MX_USART2_UART_Init+0x94>)
 8002d62:	220c      	movs	r2, #12
 8002d64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d66:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <MX_USART2_UART_Init+0x94>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d6c:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <MX_USART2_UART_Init+0x94>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d72:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <MX_USART2_UART_Init+0x94>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d78:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <MX_USART2_UART_Init+0x94>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d7e:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <MX_USART2_UART_Init+0x94>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <MX_USART2_UART_Init+0x94>)
 8002d86:	0018      	movs	r0, r3
 8002d88:	f004 ff2a 	bl	8007be0 <HAL_UART_Init>
 8002d8c:	1e03      	subs	r3, r0, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002d90:	f000 ff5a 	bl	8003c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d94:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <MX_USART2_UART_Init+0x94>)
 8002d96:	2100      	movs	r1, #0
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f005 ff05 	bl	8008ba8 <HAL_UARTEx_SetTxFifoThreshold>
 8002d9e:	1e03      	subs	r3, r0, #0
 8002da0:	d001      	beq.n	8002da6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002da2:	f000 ff51 	bl	8003c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <MX_USART2_UART_Init+0x94>)
 8002da8:	2100      	movs	r1, #0
 8002daa:	0018      	movs	r0, r3
 8002dac:	f005 ff3c 	bl	8008c28 <HAL_UARTEx_SetRxFifoThreshold>
 8002db0:	1e03      	subs	r3, r0, #0
 8002db2:	d001      	beq.n	8002db8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002db4:	f000 ff48 	bl	8003c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <MX_USART2_UART_Init+0x94>)
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f005 feba 	bl	8008b34 <HAL_UARTEx_DisableFifoMode>
 8002dc0:	1e03      	subs	r3, r0, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002dc4:	f000 ff40 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	20000864 	.word	0x20000864
 8002dd4:	40004400 	.word	0x40004400

08002dd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ddc:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <MX_USART3_UART_Init+0x94>)
 8002dde:	4a24      	ldr	r2, [pc, #144]	; (8002e70 <MX_USART3_UART_Init+0x98>)
 8002de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002de2:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <MX_USART3_UART_Init+0x94>)
 8002de4:	2296      	movs	r2, #150	; 0x96
 8002de6:	0192      	lsls	r2, r2, #6
 8002de8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dea:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <MX_USART3_UART_Init+0x94>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002df0:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <MX_USART3_UART_Init+0x94>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002df6:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <MX_USART3_UART_Init+0x94>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <MX_USART3_UART_Init+0x94>)
 8002dfe:	220c      	movs	r2, #12
 8002e00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e02:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <MX_USART3_UART_Init+0x94>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e08:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <MX_USART3_UART_Init+0x94>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e0e:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <MX_USART3_UART_Init+0x94>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e14:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <MX_USART3_UART_Init+0x94>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e1a:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <MX_USART3_UART_Init+0x94>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <MX_USART3_UART_Init+0x94>)
 8002e22:	0018      	movs	r0, r3
 8002e24:	f004 fedc 	bl	8007be0 <HAL_UART_Init>
 8002e28:	1e03      	subs	r3, r0, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e2c:	f000 ff0c 	bl	8003c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e30:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <MX_USART3_UART_Init+0x94>)
 8002e32:	2100      	movs	r1, #0
 8002e34:	0018      	movs	r0, r3
 8002e36:	f005 feb7 	bl	8008ba8 <HAL_UARTEx_SetTxFifoThreshold>
 8002e3a:	1e03      	subs	r3, r0, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e3e:	f000 ff03 	bl	8003c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <MX_USART3_UART_Init+0x94>)
 8002e44:	2100      	movs	r1, #0
 8002e46:	0018      	movs	r0, r3
 8002e48:	f005 feee 	bl	8008c28 <HAL_UARTEx_SetRxFifoThreshold>
 8002e4c:	1e03      	subs	r3, r0, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e50:	f000 fefa 	bl	8003c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <MX_USART3_UART_Init+0x94>)
 8002e56:	0018      	movs	r0, r3
 8002e58:	f005 fe6c 	bl	8008b34 <HAL_UARTEx_DisableFifoMode>
 8002e5c:	1e03      	subs	r3, r0, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002e60:	f000 fef2 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	200008f8 	.word	0x200008f8
 8002e70:	40004800 	.word	0x40004800

08002e74 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002e78:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <MX_USART5_UART_Init+0x60>)
 8002e7a:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <MX_USART5_UART_Init+0x64>)
 8002e7c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <MX_USART5_UART_Init+0x60>)
 8002e80:	2296      	movs	r2, #150	; 0x96
 8002e82:	0192      	lsls	r2, r2, #6
 8002e84:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <MX_USART5_UART_Init+0x60>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <MX_USART5_UART_Init+0x60>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <MX_USART5_UART_Init+0x60>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e98:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <MX_USART5_UART_Init+0x60>)
 8002e9a:	220c      	movs	r2, #12
 8002e9c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <MX_USART5_UART_Init+0x60>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <MX_USART5_UART_Init+0x60>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <MX_USART5_UART_Init+0x60>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002eb0:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <MX_USART5_UART_Init+0x60>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <MX_USART5_UART_Init+0x60>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <MX_USART5_UART_Init+0x60>)
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f004 fe8e 	bl	8007be0 <HAL_UART_Init>
 8002ec4:	1e03      	subs	r3, r0, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002ec8:	f000 febe 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	2000098c 	.word	0x2000098c
 8002ed8:	40005000 	.word	0x40005000

08002edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b08b      	sub	sp, #44	; 0x2c
 8002ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee2:	2414      	movs	r4, #20
 8002ee4:	193b      	adds	r3, r7, r4
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	2314      	movs	r3, #20
 8002eea:	001a      	movs	r2, r3
 8002eec:	2100      	movs	r1, #0
 8002eee:	f00a fa67 	bl	800d3c0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef2:	4b7a      	ldr	r3, [pc, #488]	; (80030dc <MX_GPIO_Init+0x200>)
 8002ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef6:	4b79      	ldr	r3, [pc, #484]	; (80030dc <MX_GPIO_Init+0x200>)
 8002ef8:	2104      	movs	r1, #4
 8002efa:	430a      	orrs	r2, r1
 8002efc:	635a      	str	r2, [r3, #52]	; 0x34
 8002efe:	4b77      	ldr	r3, [pc, #476]	; (80030dc <MX_GPIO_Init+0x200>)
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f02:	2204      	movs	r2, #4
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	4b74      	ldr	r3, [pc, #464]	; (80030dc <MX_GPIO_Init+0x200>)
 8002f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f0e:	4b73      	ldr	r3, [pc, #460]	; (80030dc <MX_GPIO_Init+0x200>)
 8002f10:	2101      	movs	r1, #1
 8002f12:	430a      	orrs	r2, r1
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34
 8002f16:	4b71      	ldr	r3, [pc, #452]	; (80030dc <MX_GPIO_Init+0x200>)
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f22:	4b6e      	ldr	r3, [pc, #440]	; (80030dc <MX_GPIO_Init+0x200>)
 8002f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f26:	4b6d      	ldr	r3, [pc, #436]	; (80030dc <MX_GPIO_Init+0x200>)
 8002f28:	2102      	movs	r1, #2
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f2e:	4b6b      	ldr	r3, [pc, #428]	; (80030dc <MX_GPIO_Init+0x200>)
 8002f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f32:	2202      	movs	r2, #2
 8002f34:	4013      	ands	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f3a:	4b68      	ldr	r3, [pc, #416]	; (80030dc <MX_GPIO_Init+0x200>)
 8002f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f3e:	4b67      	ldr	r3, [pc, #412]	; (80030dc <MX_GPIO_Init+0x200>)
 8002f40:	2108      	movs	r1, #8
 8002f42:	430a      	orrs	r2, r1
 8002f44:	635a      	str	r2, [r3, #52]	; 0x34
 8002f46:	4b65      	ldr	r3, [pc, #404]	; (80030dc <MX_GPIO_Init+0x200>)
 8002f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	607b      	str	r3, [r7, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002f52:	23a0      	movs	r3, #160	; 0xa0
 8002f54:	05db      	lsls	r3, r3, #23
 8002f56:	2200      	movs	r2, #0
 8002f58:	2110      	movs	r1, #16
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f001 fe41 	bl	8004be2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002f60:	495f      	ldr	r1, [pc, #380]	; (80030e0 <MX_GPIO_Init+0x204>)
 8002f62:	4b60      	ldr	r3, [pc, #384]	; (80030e4 <MX_GPIO_Init+0x208>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	0018      	movs	r0, r3
 8002f68:	f001 fe3b 	bl	8004be2 <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	485c      	ldr	r0, [pc, #368]	; (80030e4 <MX_GPIO_Init+0x208>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	0019      	movs	r1, r3
 8002f76:	f001 fe34 	bl	8004be2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8002f7a:	4b5b      	ldr	r3, [pc, #364]	; (80030e8 <MX_GPIO_Init+0x20c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2103      	movs	r1, #3
 8002f80:	0018      	movs	r0, r3
 8002f82:	f001 fe2e 	bl	8004be2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8002f86:	193b      	adds	r3, r7, r4
 8002f88:	2201      	movs	r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f8c:	193b      	adds	r3, r7, r4
 8002f8e:	2288      	movs	r2, #136	; 0x88
 8002f90:	0352      	lsls	r2, r2, #13
 8002f92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	193b      	adds	r3, r7, r4
 8002f96:	2200      	movs	r2, #0
 8002f98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8002f9a:	193a      	adds	r2, r7, r4
 8002f9c:	23a0      	movs	r3, #160	; 0xa0
 8002f9e:	05db      	lsls	r3, r3, #23
 8002fa0:	0011      	movs	r1, r2
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f001 fbbc 	bl	8004720 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8002fa8:	193b      	adds	r3, r7, r4
 8002faa:	2202      	movs	r2, #2
 8002fac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fae:	193b      	adds	r3, r7, r4
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	193b      	adds	r3, r7, r4
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8002fba:	193a      	adds	r2, r7, r4
 8002fbc:	23a0      	movs	r3, #160	; 0xa0
 8002fbe:	05db      	lsls	r3, r3, #23
 8002fc0:	0011      	movs	r1, r2
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f001 fbac 	bl	8004720 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8002fc8:	193b      	adds	r3, r7, r4
 8002fca:	2210      	movs	r2, #16
 8002fcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fce:	193b      	adds	r3, r7, r4
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	193b      	adds	r3, r7, r4
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fda:	193b      	adds	r3, r7, r4
 8002fdc:	2200      	movs	r2, #0
 8002fde:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002fe0:	193a      	adds	r2, r7, r4
 8002fe2:	23a0      	movs	r3, #160	; 0xa0
 8002fe4:	05db      	lsls	r3, r3, #23
 8002fe6:	0011      	movs	r1, r2
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f001 fb99 	bl	8004720 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	4a3e      	ldr	r2, [pc, #248]	; (80030ec <MX_GPIO_Init+0x210>)
 8002ff2:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff4:	193b      	adds	r3, r7, r4
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	193b      	adds	r3, r7, r4
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003000:	193b      	adds	r3, r7, r4
 8003002:	2200      	movs	r2, #0
 8003004:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003006:	193b      	adds	r3, r7, r4
 8003008:	4a36      	ldr	r2, [pc, #216]	; (80030e4 <MX_GPIO_Init+0x208>)
 800300a:	0019      	movs	r1, r3
 800300c:	0010      	movs	r0, r2
 800300e:	f001 fb87 	bl	8004720 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8003012:	0021      	movs	r1, r4
 8003014:	187b      	adds	r3, r7, r1
 8003016:	2224      	movs	r2, #36	; 0x24
 8003018:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800301a:	187b      	adds	r3, r7, r1
 800301c:	2288      	movs	r2, #136	; 0x88
 800301e:	0352      	lsls	r2, r2, #13
 8003020:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	187b      	adds	r3, r7, r1
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003028:	000c      	movs	r4, r1
 800302a:	187b      	adds	r3, r7, r1
 800302c:	4a2d      	ldr	r2, [pc, #180]	; (80030e4 <MX_GPIO_Init+0x208>)
 800302e:	0019      	movs	r1, r3
 8003030:	0010      	movs	r0, r2
 8003032:	f001 fb75 	bl	8004720 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8003036:	0021      	movs	r1, r4
 8003038:	187b      	adds	r3, r7, r1
 800303a:	2280      	movs	r2, #128	; 0x80
 800303c:	0192      	lsls	r2, r2, #6
 800303e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003040:	000c      	movs	r4, r1
 8003042:	193b      	adds	r3, r7, r4
 8003044:	2211      	movs	r2, #17
 8003046:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003048:	193b      	adds	r3, r7, r4
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304e:	193b      	adds	r3, r7, r4
 8003050:	2200      	movs	r2, #0
 8003052:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8003054:	193b      	adds	r3, r7, r4
 8003056:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <MX_GPIO_Init+0x208>)
 8003058:	0019      	movs	r1, r3
 800305a:	0010      	movs	r0, r2
 800305c:	f001 fb60 	bl	8004720 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8003060:	193b      	adds	r3, r7, r4
 8003062:	4a23      	ldr	r2, [pc, #140]	; (80030f0 <MX_GPIO_Init+0x214>)
 8003064:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003066:	193b      	adds	r3, r7, r4
 8003068:	2200      	movs	r2, #0
 800306a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306c:	193b      	adds	r3, r7, r4
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003072:	193b      	adds	r3, r7, r4
 8003074:	4a1b      	ldr	r2, [pc, #108]	; (80030e4 <MX_GPIO_Init+0x208>)
 8003076:	0019      	movs	r1, r3
 8003078:	0010      	movs	r0, r2
 800307a:	f001 fb51 	bl	8004720 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 800307e:	193b      	adds	r3, r7, r4
 8003080:	2203      	movs	r2, #3
 8003082:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003084:	193b      	adds	r3, r7, r4
 8003086:	2201      	movs	r2, #1
 8003088:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	193b      	adds	r3, r7, r4
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003090:	193b      	adds	r3, r7, r4
 8003092:	2200      	movs	r2, #0
 8003094:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003096:	193b      	adds	r3, r7, r4
 8003098:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <MX_GPIO_Init+0x20c>)
 800309a:	0019      	movs	r1, r3
 800309c:	0010      	movs	r0, r2
 800309e:	f001 fb3f 	bl	8004720 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80030a2:	0021      	movs	r1, r4
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	220c      	movs	r2, #12
 80030a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030aa:	187b      	adds	r3, r7, r1
 80030ac:	2200      	movs	r2, #0
 80030ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	2201      	movs	r2, #1
 80030b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030b6:	187b      	adds	r3, r7, r1
 80030b8:	4a0b      	ldr	r2, [pc, #44]	; (80030e8 <MX_GPIO_Init+0x20c>)
 80030ba:	0019      	movs	r1, r3
 80030bc:	0010      	movs	r0, r2
 80030be:	f001 fb2f 	bl	8004720 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80030c2:	2200      	movs	r2, #0
 80030c4:	2100      	movs	r1, #0
 80030c6:	2006      	movs	r0, #6
 80030c8:	f001 faf4 	bl	80046b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80030cc:	2006      	movs	r0, #6
 80030ce:	f001 fb06 	bl	80046de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b00b      	add	sp, #44	; 0x2c
 80030d8:	bd90      	pop	{r4, r7, pc}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	40021000 	.word	0x40021000
 80030e0:	0000a403 	.word	0x0000a403
 80030e4:	50000400 	.word	0x50000400
 80030e8:	50000c00 	.word	0x50000c00
 80030ec:	00008c03 	.word	0x00008c03
 80030f0:	00004040 	.word	0x00004040

080030f4 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	0018      	movs	r0, r3
 8003100:	f7fd f800 	bl	8000104 <strlen>
 8003104:	0003      	movs	r3, r0
 8003106:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2bfa      	cmp	r3, #250	; 0xfa
 800310c:	d908      	bls.n	8003120 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 800310e:	23fa      	movs	r3, #250	; 0xfa
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	490d      	ldr	r1, [pc, #52]	; (8003148 <send_debug_logs+0x54>)
 8003114:	480d      	ldr	r0, [pc, #52]	; (800314c <send_debug_logs+0x58>)
 8003116:	222a      	movs	r2, #42	; 0x2a
 8003118:	f004 fdf8 	bl	8007d0c <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 800311c:	23fa      	movs	r3, #250	; 0xfa
 800311e:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	b29a      	uxth	r2, r3
 8003124:	23fa      	movs	r3, #250	; 0xfa
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4808      	ldr	r0, [pc, #32]	; (800314c <send_debug_logs+0x58>)
 800312c:	f004 fdee 	bl	8007d0c <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8003130:	23fa      	movs	r3, #250	; 0xfa
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4906      	ldr	r1, [pc, #24]	; (8003150 <send_debug_logs+0x5c>)
 8003136:	4805      	ldr	r0, [pc, #20]	; (800314c <send_debug_logs+0x58>)
 8003138:	2201      	movs	r2, #1
 800313a:	f004 fde7 	bl	8007d0c <HAL_UART_Transmit>
}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	46bd      	mov	sp, r7
 8003142:	b004      	add	sp, #16
 8003144:	bd80      	pop	{r7, pc}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	08013f90 	.word	0x08013f90
 800314c:	20000864 	.word	0x20000864
 8003150:	08013fbc 	.word	0x08013fbc

08003154 <my_sys_init>:
// SYS functions
void my_sys_init ( void )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
	fix3d.acq_time = 0 ;
 8003158:	4b43      	ldr	r3, [pc, #268]	; (8003268 <my_sys_init+0x114>)
 800315a:	2200      	movs	r2, #0
 800315c:	825a      	strh	r2, [r3, #18]
	fix3d.acq_total_time = 0 ;
 800315e:	4b42      	ldr	r3, [pc, #264]	; (8003268 <my_sys_init+0x114>)
 8003160:	2200      	movs	r2, #0
 8003162:	615a      	str	r2, [r3, #20]
	sw1 = HAL_GPIO_ReadPin ( SW1_GPIO_Port , SW1_Pin ) ;
 8003164:	4b41      	ldr	r3, [pc, #260]	; (800326c <my_sys_init+0x118>)
 8003166:	2104      	movs	r1, #4
 8003168:	0018      	movs	r0, r3
 800316a:	f001 fd1d 	bl	8004ba8 <HAL_GPIO_ReadPin>
 800316e:	0003      	movs	r3, r0
 8003170:	1e5a      	subs	r2, r3, #1
 8003172:	4193      	sbcs	r3, r2
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4b3e      	ldr	r3, [pc, #248]	; (8003270 <my_sys_init+0x11c>)
 8003178:	701a      	strb	r2, [r3, #0]
	sw2 = HAL_GPIO_ReadPin ( SW2_GPIO_Port , SW2_Pin ) ;
 800317a:	4b3c      	ldr	r3, [pc, #240]	; (800326c <my_sys_init+0x118>)
 800317c:	2108      	movs	r1, #8
 800317e:	0018      	movs	r0, r3
 8003180:	f001 fd12 	bl	8004ba8 <HAL_GPIO_ReadPin>
 8003184:	0003      	movs	r3, r0
 8003186:	1e5a      	subs	r2, r3, #1
 8003188:	4193      	sbcs	r3, r2
 800318a:	b2da      	uxtb	r2, r3
 800318c:	4b39      	ldr	r3, [pc, #228]	; (8003274 <my_sys_init+0x120>)
 800318e:	701a      	strb	r2, [r3, #0]
	if ( !sw1 && !sw2 )
 8003190:	4b37      	ldr	r3, [pc, #220]	; (8003270 <my_sys_init+0x11c>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2201      	movs	r2, #1
 8003196:	4053      	eors	r3, r2
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d019      	beq.n	80031d2 <my_sys_init+0x7e>
 800319e:	4b35      	ldr	r3, [pc, #212]	; (8003274 <my_sys_init+0x120>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2201      	movs	r2, #1
 80031a4:	4053      	eors	r3, r2
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d012      	beq.n	80031d2 <my_sys_init+0x7e>
	{
		sys_mode = 0 ;
 80031ac:	4b32      	ldr	r3, [pc, #200]	; (8003278 <my_sys_init+0x124>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 80031b2:	4b32      	ldr	r3, [pc, #200]	; (800327c <my_sys_init+0x128>)
 80031b4:	22e1      	movs	r2, #225	; 0xe1
 80031b6:	0112      	lsls	r2, r2, #4
 80031b8:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 80031ba:	4b31      	ldr	r3, [pc, #196]	; (8003280 <my_sys_init+0x12c>)
 80031bc:	2278      	movs	r2, #120	; 0x78
 80031be:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 80031c0:	4b30      	ldr	r3, [pc, #192]	; (8003284 <my_sys_init+0x130>)
 80031c2:	221e      	movs	r2, #30
 80031c4:	801a      	strh	r2, [r3, #0]
		pdop_ths = PDOP_THS ;
 80031c6:	4930      	ldr	r1, [pc, #192]	; (8003288 <my_sys_init+0x134>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	05db      	lsls	r3, r3, #23
 80031ce:	600a      	str	r2, [r1, #0]
 80031d0:	604b      	str	r3, [r1, #4]
	}
	if ( sw1 && !sw2 )
 80031d2:	4b27      	ldr	r3, [pc, #156]	; (8003270 <my_sys_init+0x11c>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d019      	beq.n	800320e <my_sys_init+0xba>
 80031da:	4b26      	ldr	r3, [pc, #152]	; (8003274 <my_sys_init+0x120>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2201      	movs	r2, #1
 80031e0:	4053      	eors	r3, r2
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d012      	beq.n	800320e <my_sys_init+0xba>
	{
		sys_mode = 1 ;
 80031e8:	4b23      	ldr	r3, [pc, #140]	; (8003278 <my_sys_init+0x124>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 80031ee:	4b23      	ldr	r3, [pc, #140]	; (800327c <my_sys_init+0x128>)
 80031f0:	22e1      	movs	r2, #225	; 0xe1
 80031f2:	0112      	lsls	r2, r2, #4
 80031f4:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 80031f6:	4b22      	ldr	r3, [pc, #136]	; (8003280 <my_sys_init+0x12c>)
 80031f8:	2278      	movs	r2, #120	; 0x78
 80031fa:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 80031fc:	4b21      	ldr	r3, [pc, #132]	; (8003284 <my_sys_init+0x130>)
 80031fe:	221e      	movs	r2, #30
 8003200:	801a      	strh	r2, [r3, #0]
		pdop_ths = PDOP_THS ;
 8003202:	4921      	ldr	r1, [pc, #132]	; (8003288 <my_sys_init+0x134>)
 8003204:	2200      	movs	r2, #0
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	05db      	lsls	r3, r3, #23
 800320a:	600a      	str	r2, [r1, #0]
 800320c:	604b      	str	r3, [r1, #4]
	}
	if ( !sw1 && sw2 )
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <my_sys_init+0x11c>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2201      	movs	r2, #1
 8003214:	4053      	eors	r3, r2
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d016      	beq.n	800324a <my_sys_init+0xf6>
 800321c:	4b15      	ldr	r3, [pc, #84]	; (8003274 <my_sys_init+0x120>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d012      	beq.n	800324a <my_sys_init+0xf6>
	{
		sys_mode = 2 ;
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <my_sys_init+0x124>)
 8003226:	2202      	movs	r2, #2
 8003228:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_5_MIN ;
 800322a:	4b14      	ldr	r3, [pc, #80]	; (800327c <my_sys_init+0x128>)
 800322c:	2296      	movs	r2, #150	; 0x96
 800322e:	0052      	lsls	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_10_MIN ;
 8003232:	4b13      	ldr	r3, [pc, #76]	; (8003280 <my_sys_init+0x12c>)
 8003234:	2296      	movs	r2, #150	; 0x96
 8003236:	0092      	lsls	r2, r2, #2
 8003238:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_1_MIN ;
 800323a:	4b12      	ldr	r3, [pc, #72]	; (8003284 <my_sys_init+0x130>)
 800323c:	223c      	movs	r2, #60	; 0x3c
 800323e:	801a      	strh	r2, [r3, #0]
		pdop_ths = 10 ;
 8003240:	4911      	ldr	r1, [pc, #68]	; (8003288 <my_sys_init+0x134>)
 8003242:	2200      	movs	r2, #0
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <my_sys_init+0x138>)
 8003246:	600a      	str	r2, [r1, #0]
 8003248:	604b      	str	r3, [r1, #4]
	}
	if ( sw1 && sw2 )
 800324a:	4b09      	ldr	r3, [pc, #36]	; (8003270 <my_sys_init+0x11c>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d006      	beq.n	8003260 <my_sys_init+0x10c>
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <my_sys_init+0x120>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <my_sys_init+0x10c>
	{
		sys_mode = 3 ;
 800325a:	4b07      	ldr	r3, [pc, #28]	; (8003278 <my_sys_init+0x124>)
 800325c:	2203      	movs	r2, #3
 800325e:	701a      	strb	r2, [r3, #0]
	}
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	20000ae8 	.word	0x20000ae8
 800326c:	50000c00 	.word	0x50000c00
 8003270:	20000a20 	.word	0x20000a20
 8003274:	20000a21 	.word	0x20000a21
 8003278:	20000a22 	.word	0x20000a22
 800327c:	2000000c 	.word	0x2000000c
 8003280:	2000001c 	.word	0x2000001c
 8003284:	2000001e 	.word	0x2000001e
 8003288:	20000020 	.word	0x20000020
 800328c:	40240000 	.word	0x40240000

08003290 <my_sys_restart>:
	send_debug_logs ( rtc_dt_s ) ;
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
}

void my_sys_restart ( void )
{
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b083      	sub	sp, #12
 8003294:	af02      	add	r7, sp, #8
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 8003296:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <my_sys_restart+0x38>)
 8003298:	0018      	movs	r0, r3
 800329a:	f007 fd85 	bl	800ada8 <my_rtc_get_dt_s>
	sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800329e:	23d1      	movs	r3, #209	; 0xd1
 80032a0:	009c      	lsls	r4, r3, #2
 80032a2:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <my_sys_restart+0x3c>)
 80032a4:	490a      	ldr	r1, [pc, #40]	; (80032d0 <my_sys_restart+0x40>)
 80032a6:	480b      	ldr	r0, [pc, #44]	; (80032d4 <my_sys_restart+0x44>)
 80032a8:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <my_sys_restart+0x38>)
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	0023      	movs	r3, r4
 80032ae:	f009 fff1 	bl	800d294 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <my_sys_restart+0x44>)
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7ff ff1d 	bl	80030f4 <send_debug_logs>
	HAL_NVIC_SystemReset () ;
 80032ba:	f001 fa20 	bl	80046fe <HAL_NVIC_SystemReset>
}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b001      	add	sp, #4
 80032c4:	bd90      	pop	{r4, r7, pc}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	20000a24 	.word	0x20000a24
 80032cc:	08013ea0 	.word	0x08013ea0
 80032d0:	08013fc0 	.word	0x08013fc0
 80032d4:	20000b20 	.word	0x20000b20

080032d8 <my_sys_deepsleep>:
	sprintf ( dbg_payload , "%s,%d,%s, Wake-up after Standby" , __FILE__ , __LINE__ , rtc_dt_s ) ;
	send_debug_logs ( dbg_payload ) ;
}

void my_sys_deepsleep ( void )
{
 80032d8:	b590      	push	{r4, r7, lr}
 80032da:	b083      	sub	sp, #12
 80032dc:	af02      	add	r7, sp, #8
	sprintf ( dbg_payload , "%s,%d,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE" , __FILE__ , __LINE__ ) ;
 80032de:	4b17      	ldr	r3, [pc, #92]	; (800333c <my_sys_deepsleep+0x64>)
 80032e0:	4a17      	ldr	r2, [pc, #92]	; (8003340 <my_sys_deepsleep+0x68>)
 80032e2:	4918      	ldr	r1, [pc, #96]	; (8003344 <my_sys_deepsleep+0x6c>)
 80032e4:	4818      	ldr	r0, [pc, #96]	; (8003348 <my_sys_deepsleep+0x70>)
 80032e6:	f009 ffd5 	bl	800d294 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 80032ea:	4b17      	ldr	r3, [pc, #92]	; (8003348 <my_sys_deepsleep+0x70>)
 80032ec:	0018      	movs	r0, r3
 80032ee:	f7ff ff01 	bl	80030f4 <send_debug_logs>
	my_tim_stop () ;
 80032f2:	f000 fc63 	bl	8003bbc <my_tim_stop>
	HAL_SuspendTick () ;
 80032f6:	f001 f8ed 	bl	80044d4 <HAL_SuspendTick>
	my_rtc_alarm_flag = false ;
 80032fa:	4b14      	ldr	r3, [pc, #80]	; (800334c <my_sys_deepsleep+0x74>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
	HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	01db      	lsls	r3, r3, #7
 8003304:	2102      	movs	r1, #2
 8003306:	0018      	movs	r0, r3
 8003308:	f001 fcca 	bl	8004ca0 <HAL_PWR_EnterSTOPMode>
	HAL_ResumeTick () ;
 800330c:	f001 f8f0 	bl	80044f0 <HAL_ResumeTick>
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <my_sys_deepsleep+0x78>)
 8003312:	0018      	movs	r0, r3
 8003314:	f007 fd48 	bl	800ada8 <my_rtc_get_dt_s>
	sprintf ( dbg_payload , "%s,%d,%s,Wake-up after deepsleep" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8003318:	4c0e      	ldr	r4, [pc, #56]	; (8003354 <my_sys_deepsleep+0x7c>)
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <my_sys_deepsleep+0x68>)
 800331c:	490e      	ldr	r1, [pc, #56]	; (8003358 <my_sys_deepsleep+0x80>)
 800331e:	480a      	ldr	r0, [pc, #40]	; (8003348 <my_sys_deepsleep+0x70>)
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <my_sys_deepsleep+0x78>)
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	0023      	movs	r3, r4
 8003326:	f009 ffb5 	bl	800d294 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 800332a:	4b07      	ldr	r3, [pc, #28]	; (8003348 <my_sys_deepsleep+0x70>)
 800332c:	0018      	movs	r0, r3
 800332e:	f7ff fee1 	bl	80030f4 <send_debug_logs>
}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	b001      	add	sp, #4
 8003338:	bd90      	pop	{r4, r7, pc}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	00000357 	.word	0x00000357
 8003340:	08013ea0 	.word	0x08013ea0
 8003344:	08014000 	.word	0x08014000
 8003348:	20000b20 	.word	0x20000b20
 800334c:	20000b00 	.word	0x20000b00
 8003350:	20000a24 	.word	0x20000a24
 8003354:	0000035f 	.word	0x0000035f
 8003358:	08014034 	.word	0x08014034

0800335c <my_sys_change_watchdog_time_ths>:

void my_sys_change_watchdog_time_ths ( uint32_t t )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_1_H )
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	2396      	movs	r3, #150	; 0x96
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	429a      	cmp	r2, r3
 800336c:	d30b      	bcc.n	8003386 <my_sys_change_watchdog_time_ths+0x2a>
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	23e1      	movs	r3, #225	; 0xe1
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	429a      	cmp	r2, r3
 8003376:	d806      	bhi.n	8003386 <my_sys_change_watchdog_time_ths+0x2a>
	{
		sys_watchdog_time_ths = t ;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	b29a      	uxth	r2, r3
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <my_sys_change_watchdog_time_ths+0x34>)
 800337e:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 8003380:	4b04      	ldr	r3, [pc, #16]	; (8003394 <my_sys_change_watchdog_time_ths+0x38>)
 8003382:	2201      	movs	r2, #1
 8003384:	721a      	strb	r2, [r3, #8]
	}
}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	46bd      	mov	sp, r7
 800338a:	b002      	add	sp, #8
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	20000008 	.word	0x20000008
 8003394:	20000ad8 	.word	0x20000ad8

08003398 <my_sys_change_AlarmA_time>:
void my_sys_change_AlarmA_time ( uint32_t t )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_100_D )
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	2396      	movs	r3, #150	; 0x96
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d309      	bcc.n	80033be <my_sys_change_AlarmA_time+0x26>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a06      	ldr	r2, [pc, #24]	; (80033c8 <my_sys_change_AlarmA_time+0x30>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d805      	bhi.n	80033be <my_sys_change_AlarmA_time+0x26>
	{
		my_rtc_alarmA_time = t ;
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <my_sys_change_AlarmA_time+0x34>)
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	601a      	str	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <my_sys_change_AlarmA_time+0x38>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	721a      	strb	r2, [r3, #8]
	}
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b002      	add	sp, #8
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	0083d600 	.word	0x0083d600
 80033cc:	2000000c 	.word	0x2000000c
 80033d0:	20000ad8 	.word	0x20000ad8

080033d4 <my_sys_change_fix_acq_ths>:
void my_sys_change_fix_acq_ths ( uint32_t t )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_45_SEC && t <= TIME_THS_10_MIN )
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b2c      	cmp	r3, #44	; 0x2c
 80033e0:	d90b      	bls.n	80033fa <my_sys_change_fix_acq_ths+0x26>
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	2396      	movs	r3, #150	; 0x96
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d806      	bhi.n	80033fa <my_sys_change_fix_acq_ths+0x26>
	{
		fix_acq_ths = t ;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <my_sys_change_fix_acq_ths+0x30>)
 80033f2:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <my_sys_change_fix_acq_ths+0x34>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	721a      	strb	r2, [r3, #8]
	}
}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b002      	add	sp, #8
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	2000001c 	.word	0x2000001c
 8003408:	20000ad8 	.word	0x20000ad8

0800340c <my_sys_change_min_tns_time_ths>:
void my_sys_change_min_tns_time_ths ( uint32_t t )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_15_SEC && t <= TIME_THS_10_MIN )
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b0e      	cmp	r3, #14
 8003418:	d90b      	bls.n	8003432 <my_sys_change_min_tns_time_ths+0x26>
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	2396      	movs	r3, #150	; 0x96
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	429a      	cmp	r2, r3
 8003422:	d806      	bhi.n	8003432 <my_sys_change_min_tns_time_ths+0x26>
	{
		min_tns_time_ths = t ;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	b29a      	uxth	r2, r3
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <my_sys_change_min_tns_time_ths+0x30>)
 800342a:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 800342c:	4b04      	ldr	r3, [pc, #16]	; (8003440 <my_sys_change_min_tns_time_ths+0x34>)
 800342e:	2201      	movs	r2, #1
 8003430:	721a      	strb	r2, [r3, #8]
	}
}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	46bd      	mov	sp, r7
 8003436:	b002      	add	sp, #8
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	2000001e 	.word	0x2000001e
 8003440:	20000ad8 	.word	0x20000ad8

08003444 <my_sys_change_pdop_ths>:
void my_sys_change_pdop_ths ( uint32_t p )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	if ( p >= 0.01 && p <= 100 )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00d      	beq.n	800346e <my_sys_change_pdop_ths+0x2a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b64      	cmp	r3, #100	; 0x64
 8003456:	d80a      	bhi.n	800346e <my_sys_change_pdop_ths+0x2a>
	{
		pdop_ths = p ;
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7fe ffcf 	bl	80023fc <__aeabi_ui2d>
 800345e:	0002      	movs	r2, r0
 8003460:	000b      	movs	r3, r1
 8003462:	4905      	ldr	r1, [pc, #20]	; (8003478 <my_sys_change_pdop_ths+0x34>)
 8003464:	600a      	str	r2, [r1, #0]
 8003466:	604b      	str	r3, [r1, #4]
		my_astro_cmd.is_executed = true ;
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <my_sys_change_pdop_ths+0x38>)
 800346a:	2201      	movs	r2, #1
 800346c:	721a      	strb	r2, [r3, #8]
	}
}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	46bd      	mov	sp, r7
 8003472:	b002      	add	sp, #8
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	20000020 	.word	0x20000020
 800347c:	20000ad8 	.word	0x20000ad8

08003480 <my_tracker_handle_cmd>:
bool my_tracker_handle_cmd ( void )
{
 8003480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003482:	46d6      	mov	lr, sl
 8003484:	464f      	mov	r7, r9
 8003486:	4646      	mov	r6, r8
 8003488:	b5c0      	push	{r6, r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af08      	add	r7, sp, #32
	if ( my_tracker_api_is_cmd ( my_astro_rcv_cmd ) )
 800348e:	4bd1      	ldr	r3, [pc, #836]	; (80037d4 <my_tracker_handle_cmd+0x354>)
 8003490:	0018      	movs	r0, r3
 8003492:	f008 fbc1 	bl	800bc18 <my_tracker_api_is_cmd>
 8003496:	1e03      	subs	r3, r0, #0
 8003498:	d100      	bne.n	800349c <my_tracker_handle_cmd+0x1c>
 800349a:	e192      	b.n	80037c2 <my_tracker_handle_cmd+0x342>
	{
		if ( my_tracker_api_parse_cmd ( &my_astro_cmd , my_astro_rcv_cmd ) )
 800349c:	4acd      	ldr	r2, [pc, #820]	; (80037d4 <my_tracker_handle_cmd+0x354>)
 800349e:	4bce      	ldr	r3, [pc, #824]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 80034a0:	0011      	movs	r1, r2
 80034a2:	0018      	movs	r0, r3
 80034a4:	f008 fc22 	bl	800bcec <my_tracker_api_parse_cmd>
 80034a8:	1e03      	subs	r3, r0, #0
 80034aa:	d100      	bne.n	80034ae <my_tracker_handle_cmd+0x2e>
 80034ac:	e189      	b.n	80037c2 <my_tracker_handle_cmd+0x342>
		{
			switch ( my_astro_cmd.code )
 80034ae:	4bca      	ldr	r3, [pc, #808]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b09      	cmp	r3, #9
 80034b4:	d900      	bls.n	80034b8 <my_tracker_handle_cmd+0x38>
 80034b6:	e151      	b.n	800375c <my_tracker_handle_cmd+0x2dc>
 80034b8:	009a      	lsls	r2, r3, #2
 80034ba:	4bc8      	ldr	r3, [pc, #800]	; (80037dc <my_tracker_handle_cmd+0x35c>)
 80034bc:	18d3      	adds	r3, r2, r3
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	469f      	mov	pc, r3
			{
			  case 1:
				  my_sys_change_watchdog_time_ths ( my_astro_cmd.value ) ;
 80034c2:	4bc5      	ldr	r3, [pc, #788]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	0018      	movs	r0, r3
 80034c8:	f7ff ff48 	bl	800335c <my_sys_change_watchdog_time_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80034cc:	4bc4      	ldr	r3, [pc, #784]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	001c      	movs	r4, r3
 80034d2:	4bc1      	ldr	r3, [pc, #772]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 80034d4:	7a1b      	ldrb	r3, [r3, #8]
 80034d6:	001d      	movs	r5, r3
 80034d8:	4bbf      	ldr	r3, [pc, #764]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	001a      	movs	r2, r3
 80034de:	4bbe      	ldr	r3, [pc, #760]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	49c0      	ldr	r1, [pc, #768]	; (80037e4 <my_tracker_handle_cmd+0x364>)
 80034e4:	48c0      	ldr	r0, [pc, #768]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	9200      	str	r2, [sp, #0]
 80034ea:	002b      	movs	r3, r5
 80034ec:	0022      	movs	r2, r4
 80034ee:	f009 fed1 	bl	800d294 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80034f2:	4cbe      	ldr	r4, [pc, #760]	; (80037ec <my_tracker_handle_cmd+0x36c>)
 80034f4:	4abe      	ldr	r2, [pc, #760]	; (80037f0 <my_tracker_handle_cmd+0x370>)
 80034f6:	49bf      	ldr	r1, [pc, #764]	; (80037f4 <my_tracker_handle_cmd+0x374>)
 80034f8:	48bf      	ldr	r0, [pc, #764]	; (80037f8 <my_tracker_handle_cmd+0x378>)
 80034fa:	4bbb      	ldr	r3, [pc, #748]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	0023      	movs	r3, r4
 8003500:	f009 fec8 	bl	800d294 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003504:	4bbc      	ldr	r3, [pc, #752]	; (80037f8 <my_tracker_handle_cmd+0x378>)
 8003506:	0018      	movs	r0, r3
 8003508:	f7ff fdf4 	bl	80030f4 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 800350c:	4bb4      	ldr	r3, [pc, #720]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	b291      	uxth	r1, r2
 8003514:	4ab2      	ldr	r2, [pc, #712]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 8003516:	8011      	strh	r1, [r2, #0]
 8003518:	4ab3      	ldr	r2, [pc, #716]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 800351a:	0011      	movs	r1, r2
 800351c:	0018      	movs	r0, r3
 800351e:	f007 fa43 	bl	800a9a8 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 8003522:	f000 faaf 	bl	8003a84 <my_astro_turn_payload_id_counter>
				  break ;
 8003526:	e14c      	b.n	80037c2 <my_tracker_handle_cmd+0x342>
			  case 2:
				  my_sys_change_AlarmA_time ( my_astro_cmd.value ) ;
 8003528:	4bab      	ldr	r3, [pc, #684]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	0018      	movs	r0, r3
 800352e:	f7ff ff33 	bl	8003398 <my_sys_change_AlarmA_time>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003532:	4bab      	ldr	r3, [pc, #684]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	001c      	movs	r4, r3
 8003538:	4ba7      	ldr	r3, [pc, #668]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 800353a:	7a1b      	ldrb	r3, [r3, #8]
 800353c:	001d      	movs	r5, r3
 800353e:	4ba6      	ldr	r3, [pc, #664]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	001a      	movs	r2, r3
 8003544:	4ba4      	ldr	r3, [pc, #656]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	49a6      	ldr	r1, [pc, #664]	; (80037e4 <my_tracker_handle_cmd+0x364>)
 800354a:	48a7      	ldr	r0, [pc, #668]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 800354c:	9301      	str	r3, [sp, #4]
 800354e:	9200      	str	r2, [sp, #0]
 8003550:	002b      	movs	r3, r5
 8003552:	0022      	movs	r2, r4
 8003554:	f009 fe9e 	bl	800d294 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003558:	4ca8      	ldr	r4, [pc, #672]	; (80037fc <my_tracker_handle_cmd+0x37c>)
 800355a:	4aa5      	ldr	r2, [pc, #660]	; (80037f0 <my_tracker_handle_cmd+0x370>)
 800355c:	49a5      	ldr	r1, [pc, #660]	; (80037f4 <my_tracker_handle_cmd+0x374>)
 800355e:	48a6      	ldr	r0, [pc, #664]	; (80037f8 <my_tracker_handle_cmd+0x378>)
 8003560:	4ba1      	ldr	r3, [pc, #644]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	0023      	movs	r3, r4
 8003566:	f009 fe95 	bl	800d294 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 800356a:	4ba3      	ldr	r3, [pc, #652]	; (80037f8 <my_tracker_handle_cmd+0x378>)
 800356c:	0018      	movs	r0, r3
 800356e:	f7ff fdc1 	bl	80030f4 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003572:	4b9b      	ldr	r3, [pc, #620]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	b291      	uxth	r1, r2
 800357a:	4a99      	ldr	r2, [pc, #612]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 800357c:	8011      	strh	r1, [r2, #0]
 800357e:	4a9a      	ldr	r2, [pc, #616]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 8003580:	0011      	movs	r1, r2
 8003582:	0018      	movs	r0, r3
 8003584:	f007 fa10 	bl	800a9a8 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 8003588:	f000 fa7c 	bl	8003a84 <my_astro_turn_payload_id_counter>
				  break ;
 800358c:	e119      	b.n	80037c2 <my_tracker_handle_cmd+0x342>
			  case 3:
				  my_sys_change_fix_acq_ths ( my_astro_cmd.value ) ;
 800358e:	4b92      	ldr	r3, [pc, #584]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	0018      	movs	r0, r3
 8003594:	f7ff ff1e 	bl	80033d4 <my_sys_change_fix_acq_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003598:	4b91      	ldr	r3, [pc, #580]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	001c      	movs	r4, r3
 800359e:	4b8e      	ldr	r3, [pc, #568]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 80035a0:	7a1b      	ldrb	r3, [r3, #8]
 80035a2:	001d      	movs	r5, r3
 80035a4:	4b8c      	ldr	r3, [pc, #560]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	001a      	movs	r2, r3
 80035aa:	4b8b      	ldr	r3, [pc, #556]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	498d      	ldr	r1, [pc, #564]	; (80037e4 <my_tracker_handle_cmd+0x364>)
 80035b0:	488d      	ldr	r0, [pc, #564]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	9200      	str	r2, [sp, #0]
 80035b6:	002b      	movs	r3, r5
 80035b8:	0022      	movs	r2, r4
 80035ba:	f009 fe6b 	bl	800d294 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80035be:	4c90      	ldr	r4, [pc, #576]	; (8003800 <my_tracker_handle_cmd+0x380>)
 80035c0:	4a8b      	ldr	r2, [pc, #556]	; (80037f0 <my_tracker_handle_cmd+0x370>)
 80035c2:	498c      	ldr	r1, [pc, #560]	; (80037f4 <my_tracker_handle_cmd+0x374>)
 80035c4:	488c      	ldr	r0, [pc, #560]	; (80037f8 <my_tracker_handle_cmd+0x378>)
 80035c6:	4b88      	ldr	r3, [pc, #544]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	0023      	movs	r3, r4
 80035cc:	f009 fe62 	bl	800d294 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80035d0:	4b89      	ldr	r3, [pc, #548]	; (80037f8 <my_tracker_handle_cmd+0x378>)
 80035d2:	0018      	movs	r0, r3
 80035d4:	f7ff fd8e 	bl	80030f4 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80035d8:	4b81      	ldr	r3, [pc, #516]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	b291      	uxth	r1, r2
 80035e0:	4a7f      	ldr	r2, [pc, #508]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 80035e2:	8011      	strh	r1, [r2, #0]
 80035e4:	4a80      	ldr	r2, [pc, #512]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 80035e6:	0011      	movs	r1, r2
 80035e8:	0018      	movs	r0, r3
 80035ea:	f007 f9dd 	bl	800a9a8 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 80035ee:	f000 fa49 	bl	8003a84 <my_astro_turn_payload_id_counter>
				  break ;
 80035f2:	e0e6      	b.n	80037c2 <my_tracker_handle_cmd+0x342>
			  case 4:
				  my_sys_change_min_tns_time_ths ( my_astro_cmd.value ) ;
 80035f4:	4b78      	ldr	r3, [pc, #480]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	0018      	movs	r0, r3
 80035fa:	f7ff ff07 	bl	800340c <my_sys_change_min_tns_time_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80035fe:	4b78      	ldr	r3, [pc, #480]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	001c      	movs	r4, r3
 8003604:	4b74      	ldr	r3, [pc, #464]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 8003606:	7a1b      	ldrb	r3, [r3, #8]
 8003608:	001d      	movs	r5, r3
 800360a:	4b73      	ldr	r3, [pc, #460]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	001a      	movs	r2, r3
 8003610:	4b71      	ldr	r3, [pc, #452]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4973      	ldr	r1, [pc, #460]	; (80037e4 <my_tracker_handle_cmd+0x364>)
 8003616:	4874      	ldr	r0, [pc, #464]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	9200      	str	r2, [sp, #0]
 800361c:	002b      	movs	r3, r5
 800361e:	0022      	movs	r2, r4
 8003620:	f009 fe38 	bl	800d294 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003624:	4c77      	ldr	r4, [pc, #476]	; (8003804 <my_tracker_handle_cmd+0x384>)
 8003626:	4a72      	ldr	r2, [pc, #456]	; (80037f0 <my_tracker_handle_cmd+0x370>)
 8003628:	4972      	ldr	r1, [pc, #456]	; (80037f4 <my_tracker_handle_cmd+0x374>)
 800362a:	4873      	ldr	r0, [pc, #460]	; (80037f8 <my_tracker_handle_cmd+0x378>)
 800362c:	4b6e      	ldr	r3, [pc, #440]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	0023      	movs	r3, r4
 8003632:	f009 fe2f 	bl	800d294 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003636:	4b70      	ldr	r3, [pc, #448]	; (80037f8 <my_tracker_handle_cmd+0x378>)
 8003638:	0018      	movs	r0, r3
 800363a:	f7ff fd5b 	bl	80030f4 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 800363e:	4b68      	ldr	r3, [pc, #416]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	b291      	uxth	r1, r2
 8003646:	4a66      	ldr	r2, [pc, #408]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 8003648:	8011      	strh	r1, [r2, #0]
 800364a:	4a67      	ldr	r2, [pc, #412]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 800364c:	0011      	movs	r1, r2
 800364e:	0018      	movs	r0, r3
 8003650:	f007 f9aa 	bl	800a9a8 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 8003654:	f000 fa16 	bl	8003a84 <my_astro_turn_payload_id_counter>
				  break ;
 8003658:	e0b3      	b.n	80037c2 <my_tracker_handle_cmd+0x342>
			  case 5:
				  my_sys_change_pdop_ths ( my_astro_cmd.value ) ;
 800365a:	4b5f      	ldr	r3, [pc, #380]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	0018      	movs	r0, r3
 8003660:	f7ff fef0 	bl	8003444 <my_sys_change_pdop_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003664:	4b5e      	ldr	r3, [pc, #376]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	001c      	movs	r4, r3
 800366a:	4b5b      	ldr	r3, [pc, #364]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 800366c:	7a1b      	ldrb	r3, [r3, #8]
 800366e:	001d      	movs	r5, r3
 8003670:	4b59      	ldr	r3, [pc, #356]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	001a      	movs	r2, r3
 8003676:	4b58      	ldr	r3, [pc, #352]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	495a      	ldr	r1, [pc, #360]	; (80037e4 <my_tracker_handle_cmd+0x364>)
 800367c:	485a      	ldr	r0, [pc, #360]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	9200      	str	r2, [sp, #0]
 8003682:	002b      	movs	r3, r5
 8003684:	0022      	movs	r2, r4
 8003686:	f009 fe05 	bl	800d294 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800368a:	4c5f      	ldr	r4, [pc, #380]	; (8003808 <my_tracker_handle_cmd+0x388>)
 800368c:	4a58      	ldr	r2, [pc, #352]	; (80037f0 <my_tracker_handle_cmd+0x370>)
 800368e:	4959      	ldr	r1, [pc, #356]	; (80037f4 <my_tracker_handle_cmd+0x374>)
 8003690:	4859      	ldr	r0, [pc, #356]	; (80037f8 <my_tracker_handle_cmd+0x378>)
 8003692:	4b55      	ldr	r3, [pc, #340]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	0023      	movs	r3, r4
 8003698:	f009 fdfc 	bl	800d294 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 800369c:	4b56      	ldr	r3, [pc, #344]	; (80037f8 <my_tracker_handle_cmd+0x378>)
 800369e:	0018      	movs	r0, r3
 80036a0:	f7ff fd28 	bl	80030f4 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80036a4:	4b4e      	ldr	r3, [pc, #312]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	b291      	uxth	r1, r2
 80036ac:	4a4c      	ldr	r2, [pc, #304]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 80036ae:	8011      	strh	r1, [r2, #0]
 80036b0:	4a4d      	ldr	r2, [pc, #308]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 80036b2:	0011      	movs	r1, r2
 80036b4:	0018      	movs	r0, r3
 80036b6:	f007 f977 	bl	800a9a8 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 80036ba:	f000 f9e3 	bl	8003a84 <my_astro_turn_payload_id_counter>
				  break ;
 80036be:	e080      	b.n	80037c2 <my_tracker_handle_cmd+0x342>
			  case 8:
				  if ( my_astro_cmd.value == (uint32_t) GET_SYS_CFG )
 80036c0:	4b45      	ldr	r3, [pc, #276]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d000      	beq.n	80036ca <my_tracker_handle_cmd+0x24a>
 80036c8:	e078      	b.n	80037bc <my_tracker_handle_cmd+0x33c>
				  {
					  sprintf ( my_astro_payload , "%u,%s,%u,%u,%lu,%u,%u,%.1f" , uplink_id , fv , (uint16_t) sys_mode , sys_watchdog_time_ths , my_rtc_alarmA_time , fix_acq_ths , min_tns_time_ths , pdop_ths ) ;
 80036ca:	4b45      	ldr	r3, [pc, #276]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	469a      	mov	sl, r3
 80036d0:	4b4e      	ldr	r3, [pc, #312]	; (800380c <my_tracker_handle_cmd+0x38c>)
 80036d2:	681d      	ldr	r5, [r3, #0]
 80036d4:	4b4e      	ldr	r3, [pc, #312]	; (8003810 <my_tracker_handle_cmd+0x390>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	001e      	movs	r6, r3
 80036da:	4b4e      	ldr	r3, [pc, #312]	; (8003814 <my_tracker_handle_cmd+0x394>)
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	469c      	mov	ip, r3
 80036e0:	4b4d      	ldr	r3, [pc, #308]	; (8003818 <my_tracker_handle_cmd+0x398>)
 80036e2:	6819      	ldr	r1, [r3, #0]
 80036e4:	4b4d      	ldr	r3, [pc, #308]	; (800381c <my_tracker_handle_cmd+0x39c>)
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	4698      	mov	r8, r3
 80036ea:	4b4d      	ldr	r3, [pc, #308]	; (8003820 <my_tracker_handle_cmd+0x3a0>)
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	4699      	mov	r9, r3
 80036f0:	4b4c      	ldr	r3, [pc, #304]	; (8003824 <my_tracker_handle_cmd+0x3a4>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4c4c      	ldr	r4, [pc, #304]	; (8003828 <my_tracker_handle_cmd+0x3a8>)
 80036f8:	483b      	ldr	r0, [pc, #236]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 80036fa:	9206      	str	r2, [sp, #24]
 80036fc:	9307      	str	r3, [sp, #28]
 80036fe:	464b      	mov	r3, r9
 8003700:	9304      	str	r3, [sp, #16]
 8003702:	4643      	mov	r3, r8
 8003704:	9303      	str	r3, [sp, #12]
 8003706:	9102      	str	r1, [sp, #8]
 8003708:	4663      	mov	r3, ip
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	9600      	str	r6, [sp, #0]
 800370e:	002b      	movs	r3, r5
 8003710:	4652      	mov	r2, sl
 8003712:	0021      	movs	r1, r4
 8003714:	f009 fdbe 	bl	800d294 <sprintf>
					  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003718:	4c44      	ldr	r4, [pc, #272]	; (800382c <my_tracker_handle_cmd+0x3ac>)
 800371a:	4a35      	ldr	r2, [pc, #212]	; (80037f0 <my_tracker_handle_cmd+0x370>)
 800371c:	4935      	ldr	r1, [pc, #212]	; (80037f4 <my_tracker_handle_cmd+0x374>)
 800371e:	4836      	ldr	r0, [pc, #216]	; (80037f8 <my_tracker_handle_cmd+0x378>)
 8003720:	4b31      	ldr	r3, [pc, #196]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	0023      	movs	r3, r4
 8003726:	f009 fdb5 	bl	800d294 <sprintf>
					  send_debug_logs ( dbg_payload ) ;
 800372a:	4b33      	ldr	r3, [pc, #204]	; (80037f8 <my_tracker_handle_cmd+0x378>)
 800372c:	0018      	movs	r0, r3
 800372e:	f7ff fce1 	bl	80030f4 <send_debug_logs>
					  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003732:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	b291      	uxth	r1, r2
 800373a:	4a29      	ldr	r2, [pc, #164]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 800373c:	8011      	strh	r1, [r2, #0]
 800373e:	4a2a      	ldr	r2, [pc, #168]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 8003740:	0011      	movs	r1, r2
 8003742:	0018      	movs	r0, r3
 8003744:	f007 f930 	bl	800a9a8 <my_astro_add_payload_2_queue>
					  my_astro_turn_payload_id_counter () ;
 8003748:	f000 f99c 	bl	8003a84 <my_astro_turn_payload_id_counter>
				  }
				  break ;
 800374c:	e036      	b.n	80037bc <my_tracker_handle_cmd+0x33c>
			  case 9:
				  // Tutaj wyjątkowo nie musi być uplink confimration, bo kolejny pakiet będzie miał id = 0, a logi będą wysłane w funkcji
				  if ( my_astro_cmd.value == (uint32_t) RESET_SYS_CMD_VALUE )
 800374e:	4b22      	ldr	r3, [pc, #136]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d134      	bne.n	80037c0 <my_tracker_handle_cmd+0x340>
					  my_sys_restart () ;
 8003756:	f7ff fd9b 	bl	8003290 <my_sys_restart>
				  break ;
 800375a:	e031      	b.n	80037c0 <my_tracker_handle_cmd+0x340>
			  default:
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 800375c:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	001c      	movs	r4, r3
 8003762:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 8003764:	7a1b      	ldrb	r3, [r3, #8]
 8003766:	001d      	movs	r5, r3
 8003768:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	001a      	movs	r2, r3
 800376e:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <my_tracker_handle_cmd+0x358>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	491c      	ldr	r1, [pc, #112]	; (80037e4 <my_tracker_handle_cmd+0x364>)
 8003774:	481c      	ldr	r0, [pc, #112]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	9200      	str	r2, [sp, #0]
 800377a:	002b      	movs	r3, r5
 800377c:	0022      	movs	r2, r4
 800377e:	f009 fd89 	bl	800d294 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003782:	23f3      	movs	r3, #243	; 0xf3
 8003784:	009c      	lsls	r4, r3, #2
 8003786:	4a1a      	ldr	r2, [pc, #104]	; (80037f0 <my_tracker_handle_cmd+0x370>)
 8003788:	491a      	ldr	r1, [pc, #104]	; (80037f4 <my_tracker_handle_cmd+0x374>)
 800378a:	481b      	ldr	r0, [pc, #108]	; (80037f8 <my_tracker_handle_cmd+0x378>)
 800378c:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	0023      	movs	r3, r4
 8003792:	f009 fd7f 	bl	800d294 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003796:	4b18      	ldr	r3, [pc, #96]	; (80037f8 <my_tracker_handle_cmd+0x378>)
 8003798:	0018      	movs	r0, r3
 800379a:	f7ff fcab 	bl	80030f4 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 800379e:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	b291      	uxth	r1, r2
 80037a6:	4a0e      	ldr	r2, [pc, #56]	; (80037e0 <my_tracker_handle_cmd+0x360>)
 80037a8:	8011      	strh	r1, [r2, #0]
 80037aa:	4a0f      	ldr	r2, [pc, #60]	; (80037e8 <my_tracker_handle_cmd+0x368>)
 80037ac:	0011      	movs	r1, r2
 80037ae:	0018      	movs	r0, r3
 80037b0:	f007 f8fa 	bl	800a9a8 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 80037b4:	f000 f966 	bl	8003a84 <my_astro_turn_payload_id_counter>
				  return false ;
 80037b8:	2300      	movs	r3, #0
 80037ba:	e003      	b.n	80037c4 <my_tracker_handle_cmd+0x344>
				  break ;
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	e000      	b.n	80037c2 <my_tracker_handle_cmd+0x342>
				  break ;
 80037c0:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return true ;
 80037c2:	2301      	movs	r3, #1
}
 80037c4:	0018      	movs	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bce0      	pop	{r5, r6, r7}
 80037ca:	46ba      	mov	sl, r7
 80037cc:	46b1      	mov	r9, r6
 80037ce:	46a8      	mov	r8, r5
 80037d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	20000c1c 	.word	0x20000c1c
 80037d8:	20000ad8 	.word	0x20000ad8
 80037dc:	080159fc 	.word	0x080159fc
 80037e0:	20000ae4 	.word	0x20000ae4
 80037e4:	08014058 	.word	0x08014058
 80037e8:	20000a38 	.word	0x20000a38
 80037ec:	00000396 	.word	0x00000396
 80037f0:	08013ea0 	.word	0x08013ea0
 80037f4:	08013f64 	.word	0x08013f64
 80037f8:	20000b20 	.word	0x20000b20
 80037fc:	0000039e 	.word	0x0000039e
 8003800:	000003a6 	.word	0x000003a6
 8003804:	000003ae 	.word	0x000003ae
 8003808:	000003b6 	.word	0x000003b6
 800380c:	20000004 	.word	0x20000004
 8003810:	20000a22 	.word	0x20000a22
 8003814:	20000008 	.word	0x20000008
 8003818:	2000000c 	.word	0x2000000c
 800381c:	2000001c 	.word	0x2000001c
 8003820:	2000001e 	.word	0x2000001e
 8003824:	20000020 	.word	0x20000020
 8003828:	08014068 	.word	0x08014068
 800382c:	000003bf 	.word	0x000003bf

08003830 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	0002      	movs	r2, r0
 8003838:	1dfb      	adds	r3, r7, #7
 800383a:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 800383c:	1dfb      	adds	r3, r7, #7
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d10e      	bne.n	8003862 <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	4811      	ldr	r0, [pc, #68]	; (8003890 <my_ant_sw_pos+0x60>)
 800384a:	2200      	movs	r2, #0
 800384c:	0019      	movs	r1, r3
 800384e:	f001 f9c8 	bl	8004be2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 8003852:	2380      	movs	r3, #128	; 0x80
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	480e      	ldr	r0, [pc, #56]	; (8003890 <my_ant_sw_pos+0x60>)
 8003858:	2201      	movs	r2, #1
 800385a:	0019      	movs	r1, r3
 800385c:	f001 f9c1 	bl	8004be2 <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8003860:	e011      	b.n	8003886 <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 8003862:	1dfb      	adds	r3, r7, #7
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d10d      	bne.n	8003886 <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	4808      	ldr	r0, [pc, #32]	; (8003890 <my_ant_sw_pos+0x60>)
 8003870:	2201      	movs	r2, #1
 8003872:	0019      	movs	r1, r3
 8003874:	f001 f9b5 	bl	8004be2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4804      	ldr	r0, [pc, #16]	; (8003890 <my_ant_sw_pos+0x60>)
 800387e:	2200      	movs	r2, #0
 8003880:	0019      	movs	r1, r3
 8003882:	f001 f9ae 	bl	8004be2 <HAL_GPIO_WritePin>
}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	46bd      	mov	sp, r7
 800388a:	b002      	add	sp, #8
 800388c:	bd80      	pop	{r7, pc}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	50000400 	.word	0x50000400

08003894 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 8003898:	2001      	movs	r0, #1
 800389a:	f7ff ffc9 	bl	8003830 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	4808      	ldr	r0, [pc, #32]	; (80038c4 <my_gnss_sw_on+0x30>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	0019      	movs	r1, r3
 80038a8:	f001 f99b 	bl	8004be2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	019b      	lsls	r3, r3, #6
 80038b0:	4804      	ldr	r0, [pc, #16]	; (80038c4 <my_gnss_sw_on+0x30>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	0019      	movs	r1, r3
 80038b6:	f001 f994 	bl	8004be2 <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 80038ba:	f7ff fadb 	bl	8002e74 <MX_USART5_UART_Init>
}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	50000400 	.word	0x50000400

080038c8 <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 80038cc:	2002      	movs	r0, #2
 80038ce:	f7ff ffaf 	bl	8003830 <my_ant_sw_pos>
	if ( sys_mode < 2 )
 80038d2:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <my_gnss_sw_off+0x3c>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d811      	bhi.n	80038fe <my_gnss_sw_off+0x36>
	{
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	480a      	ldr	r0, [pc, #40]	; (8003908 <my_gnss_sw_off+0x40>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	0019      	movs	r1, r3
 80038e4:	f001 f97d 	bl	8004be2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 80038e8:	2380      	movs	r3, #128	; 0x80
 80038ea:	019b      	lsls	r3, r3, #6
 80038ec:	4806      	ldr	r0, [pc, #24]	; (8003908 <my_gnss_sw_off+0x40>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	0019      	movs	r1, r3
 80038f2:	f001 f976 	bl	8004be2 <HAL_GPIO_WritePin>
		HAL_UART_DeInit ( &HUART_GNSS ) ;
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <my_gnss_sw_off+0x44>)
 80038f8:	0018      	movs	r0, r3
 80038fa:	f004 f9c7 	bl	8007c8c <HAL_UART_DeInit>
	}
}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000a22 	.word	0x20000a22
 8003908:	50000400 	.word	0x50000400
 800390c:	2000098c 	.word	0x2000098c

08003910 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	000a      	movs	r2, r1
 800391a:	1cfb      	adds	r3, r7, #3
 800391c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 800391e:	23fa      	movs	r3, #250	; 0xfa
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4809      	ldr	r0, [pc, #36]	; (800394c <my_gnss_receive_byte+0x3c>)
 8003926:	2201      	movs	r2, #1
 8003928:	f004 fa94 	bl	8007e54 <HAL_UART_Receive>
	if ( sys_mode > 0 )
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <my_gnss_receive_byte+0x40>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d006      	beq.n	8003942 <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 8003934:	23fa      	movs	r3, #250	; 0xfa
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4806      	ldr	r0, [pc, #24]	; (8003954 <my_gnss_receive_byte+0x44>)
 800393c:	2201      	movs	r2, #1
 800393e:	f004 f9e5 	bl	8007d0c <HAL_UART_Transmit>
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b002      	add	sp, #8
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	2000098c 	.word	0x2000098c
 8003950:	20000a22 	.word	0x20000a22
 8003954:	20000864 	.word	0x20000864

08003958 <my_acc_init>:
	  my_gnss_sw_off () ;
}

// ACC
bool my_acc_init ( void )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
	my_acc_ctx.write_reg = my_st_acc_platform_write ;
 800395c:	4b07      	ldr	r3, [pc, #28]	; (800397c <my_acc_init+0x24>)
 800395e:	4a08      	ldr	r2, [pc, #32]	; (8003980 <my_acc_init+0x28>)
 8003960:	601a      	str	r2, [r3, #0]
	my_acc_ctx.read_reg = my_st_acc_platform_read ;
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <my_acc_init+0x24>)
 8003964:	4a07      	ldr	r2, [pc, #28]	; (8003984 <my_acc_init+0x2c>)
 8003966:	605a      	str	r2, [r3, #4]
	my_acc_ctx.handle = &hspi1 ;
 8003968:	4b04      	ldr	r3, [pc, #16]	; (800397c <my_acc_init+0x24>)
 800396a:	4a07      	ldr	r2, [pc, #28]	; (8003988 <my_acc_init+0x30>)
 800396c:	60da      	str	r2, [r3, #12]
	return my_st_iis2dh_init () ;
 800396e:	f007 fb37 	bl	800afe0 <my_st_iis2dh_init>
 8003972:	0003      	movs	r3, r0
}
 8003974:	0018      	movs	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	20000b10 	.word	0x20000b10
 8003980:	08003aa1 	.word	0x08003aa1
 8003984:	08003b0b 	.word	0x08003b0b
 8003988:	20000720 	.word	0x20000720

0800398c <my_astronode_reset>:

// ** ASTRO Operations
void my_astronode_reset ( void )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <my_astronode_reset+0x30>)
 8003992:	2201      	movs	r2, #1
 8003994:	2102      	movs	r1, #2
 8003996:	0018      	movs	r0, r3
 8003998:	f001 f923 	bl	8004be2 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 800399c:	2001      	movs	r0, #1
 800399e:	f000 fd75 	bl	800448c <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <my_astronode_reset+0x30>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	2102      	movs	r1, #2
 80039a8:	0018      	movs	r0, r3
 80039aa:	f001 f91a 	bl	8004be2 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 80039ae:	20fa      	movs	r0, #250	; 0xfa
 80039b0:	f000 fd6c 	bl	800448c <HAL_Delay>
}
 80039b4:	46c0      	nop			; (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	50000400 	.word	0x50000400

080039c0 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <send_astronode_request+0x34>)
 80039cc:	0018      	movs	r0, r3
 80039ce:	f7ff fb91 	bl	80030f4 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	0018      	movs	r0, r3
 80039d6:	f7ff fb8d 	bl	80030f4 <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	b29a      	uxth	r2, r3
 80039de:	23fa      	movs	r3, #250	; 0xfa
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4804      	ldr	r0, [pc, #16]	; (80039f8 <send_astronode_request+0x38>)
 80039e6:	f004 f991 	bl	8007d0c <HAL_UART_Transmit>
}
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	46bd      	mov	sp, r7
 80039ee:	b002      	add	sp, #8
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	0801408c 	.word	0x0801408c
 80039f8:	200008f8 	.word	0x200008f8

080039fc <get_systick>:
uint32_t get_systick ( void )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8003a00:	f000 fd3a 	bl	8004478 <HAL_GetTick>
 8003a04:	0003      	movs	r3, r0
}
 8003a06:	0018      	movs	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	000a      	movs	r2, r1
 8003a16:	1cbb      	adds	r3, r7, #2
 8003a18:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8003a1a:	f7ff ffef 	bl	80039fc <get_systick>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	1cba      	adds	r2, r7, #2
 8003a26:	8812      	ldrh	r2, [r2, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	419b      	sbcs	r3, r3
 8003a2c:	425b      	negs	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
}
 8003a30:	0018      	movs	r0, r3
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b002      	add	sp, #8
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4806      	ldr	r0, [pc, #24]	; (8003a5c <is_astronode_character_received+0x24>)
 8003a44:	2364      	movs	r3, #100	; 0x64
 8003a46:	2201      	movs	r2, #1
 8003a48:	f004 fa04 	bl	8007e54 <HAL_UART_Receive>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	425a      	negs	r2, r3
 8003a50:	4153      	adcs	r3, r2
 8003a52:	b2db      	uxtb	r3, r3
}
 8003a54:	0018      	movs	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b002      	add	sp, #8
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	200008f8 	.word	0x200008f8

08003a60 <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <my_astro_evt_pin+0x20>)
 8003a66:	2104      	movs	r1, #4
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f001 f89d 	bl	8004ba8 <HAL_GPIO_ReadPin>
 8003a6e:	0003      	movs	r3, r0
 8003a70:	3b01      	subs	r3, #1
 8003a72:	425a      	negs	r2, r3
 8003a74:	4153      	adcs	r3, r2
 8003a76:	b2db      	uxtb	r3, r3
}
 8003a78:	0018      	movs	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	50000400 	.word	0x50000400

08003a84 <my_astro_turn_payload_id_counter>:
void my_astro_turn_payload_id_counter ( void )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
	if ( uplink_id > 99 )
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <my_astro_turn_payload_id_counter+0x18>)
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	2b63      	cmp	r3, #99	; 0x63
 8003a8e:	d902      	bls.n	8003a96 <my_astro_turn_payload_id_counter+0x12>
		uplink_id = 1 ;
 8003a90:	4b02      	ldr	r3, [pc, #8]	; (8003a9c <my_astro_turn_payload_id_counter+0x18>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	801a      	strh	r2, [r3, #0]
}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000ae4 	.word	0x20000ae4

08003aa0 <my_st_acc_platform_write>:

// ACC LL Function
int32_t my_st_acc_platform_write ( void* handle , uint8_t reg , const uint8_t* bufp , uint16_t len )
{
 8003aa0:	b5b0      	push	{r4, r5, r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	0008      	movs	r0, r1
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	0019      	movs	r1, r3
 8003aae:	240b      	movs	r4, #11
 8003ab0:	193b      	adds	r3, r7, r4
 8003ab2:	1c02      	adds	r2, r0, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	2508      	movs	r5, #8
 8003ab8:	197b      	adds	r3, r7, r5
 8003aba:	1c0a      	adds	r2, r1, #0
 8003abc:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_RESET ) ;
 8003abe:	23a0      	movs	r3, #160	; 0xa0
 8003ac0:	05db      	lsls	r3, r3, #23
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2110      	movs	r1, #16
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f001 f88b 	bl	8004be2 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8003acc:	2014      	movs	r0, #20
 8003ace:	f000 fcdd 	bl	800448c <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 8003ad2:	23fa      	movs	r3, #250	; 0xfa
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	1939      	adds	r1, r7, r4
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f002 fee2 	bl	80068a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8003ae0:	23fa      	movs	r3, #250	; 0xfa
 8003ae2:	009c      	lsls	r4, r3, #2
 8003ae4:	197b      	adds	r3, r7, r5
 8003ae6:	881a      	ldrh	r2, [r3, #0]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	0023      	movs	r3, r4
 8003aee:	f002 fed9 	bl	80068a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_SET) ;
 8003af2:	23a0      	movs	r3, #160	; 0xa0
 8003af4:	05db      	lsls	r3, r3, #23
 8003af6:	2201      	movs	r2, #1
 8003af8:	2110      	movs	r1, #16
 8003afa:	0018      	movs	r0, r3
 8003afc:	f001 f871 	bl	8004be2 <HAL_GPIO_WritePin>

	return 0 ;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	0018      	movs	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b004      	add	sp, #16
 8003b08:	bdb0      	pop	{r4, r5, r7, pc}

08003b0a <my_st_acc_platform_read>:

int32_t my_st_acc_platform_read ( void* handle , uint8_t reg , uint8_t* bufp , uint16_t len )
{
 8003b0a:	b5b0      	push	{r4, r5, r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	0008      	movs	r0, r1
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	0019      	movs	r1, r3
 8003b18:	240b      	movs	r4, #11
 8003b1a:	193b      	adds	r3, r7, r4
 8003b1c:	1c02      	adds	r2, r0, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	2508      	movs	r5, #8
 8003b22:	197b      	adds	r3, r7, r5
 8003b24:	1c0a      	adds	r2, r1, #0
 8003b26:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8003b28:	193b      	adds	r3, r7, r4
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2280      	movs	r2, #128	; 0x80
 8003b2e:	4252      	negs	r2, r2
 8003b30:	4313      	orrs	r3, r2
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	193b      	adds	r3, r7, r4
 8003b36:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_RESET) ;
 8003b38:	23a0      	movs	r3, #160	; 0xa0
 8003b3a:	05db      	lsls	r3, r3, #23
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2110      	movs	r1, #16
 8003b40:	0018      	movs	r0, r3
 8003b42:	f001 f84e 	bl	8004be2 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8003b46:	2014      	movs	r0, #20
 8003b48:	f000 fca0 	bl	800448c <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 8003b4c:	23fa      	movs	r3, #250	; 0xfa
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	1939      	adds	r1, r7, r4
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f002 fea5 	bl	80068a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 8003b5a:	23fa      	movs	r3, #250	; 0xfa
 8003b5c:	009c      	lsls	r4, r3, #2
 8003b5e:	197b      	adds	r3, r7, r5
 8003b60:	881a      	ldrh	r2, [r3, #0]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	0023      	movs	r3, r4
 8003b68:	f002 fffc 	bl	8006b64 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_SET) ;
 8003b6c:	23a0      	movs	r3, #160	; 0xa0
 8003b6e:	05db      	lsls	r3, r3, #23
 8003b70:	2201      	movs	r2, #1
 8003b72:	2110      	movs	r1, #16
 8003b74:	0018      	movs	r0, r3
 8003b76:	f001 f834 	bl	8004be2 <HAL_GPIO_WritePin>

	return 0 ;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b004      	add	sp, #16
 8003b82:	bdb0      	pop	{r4, r5, r7, pc}

08003b84 <my_tim_init>:

// TIM operations
void my_tim_init ()
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <my_tim_init+0x14>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	4252      	negs	r2, r2
 8003b90:	611a      	str	r2, [r3, #16]
}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000784 	.word	0x20000784

08003b9c <my_tim_start>:

void my_tim_start ()
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <my_tim_start+0x18>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 8003ba6:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <my_tim_start+0x1c>)
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f003 fd3b 	bl	8007624 <HAL_TIM_Base_Start_IT>
}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000c44 	.word	0x20000c44
 8003bb8:	20000784 	.word	0x20000784

08003bbc <my_tim_stop>:

void my_tim_stop ()
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <my_tim_stop+0x14>)
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f003 fd90 	bl	80076e8 <HAL_TIM_Base_Stop_IT>
}
 8003bc8:	46c0      	nop			; (mov r8, r8)
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	20000784 	.word	0x20000784

08003bd4 <HAL_TIM_PeriodElapsedCallback>:

// *** CALBACKS

// TIM Callback
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d10d      	bne.n	8003c02 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 8003be6:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	3301      	adds	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003bf0:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > sys_watchdog_time_ths )
 8003bf2:	4b07      	ldr	r3, [pc, #28]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003bf4:	881a      	ldrh	r2, [r3, #0]
 8003bf6:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d901      	bls.n	8003c02 <HAL_TIM_PeriodElapsedCallback+0x2e>
			my_sys_restart () ;
 8003bfe:	f7ff fb47 	bl	8003290 <my_sys_restart>
	}
}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b002      	add	sp, #8
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	40001000 	.word	0x40001000
 8003c10:	20000c44 	.word	0x20000c44
 8003c14:	20000008 	.word	0x20000008

08003c18 <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	my_rtc_alarm_flag = true ;
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <HAL_RTC_AlarmAEventCallback+0x18>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b002      	add	sp, #8
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	20000b00 	.word	0x20000b00

08003c34 <HAL_GPIO_EXTI_Rising_Callback>:

// ASTRO EVT Callbacks
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	0002      	movs	r2, r0
 8003c3c:	1dbb      	adds	r3, r7, #6
 8003c3e:	801a      	strh	r2, [r3, #0]

}
 8003c40:	46c0      	nop			; (mov r8, r8)
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b002      	add	sp, #8
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c4c:	b672      	cpsid	i
}
 8003c4e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c50:	e7fe      	b.n	8003c50 <Error_Handler+0x8>
	...

08003c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c5a:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <HAL_MspInit+0x4c>)
 8003c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c5e:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <HAL_MspInit+0x4c>)
 8003c60:	2101      	movs	r1, #1
 8003c62:	430a      	orrs	r2, r1
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40
 8003c66:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <HAL_MspInit+0x4c>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c72:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_MspInit+0x4c>)
 8003c74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c76:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <HAL_MspInit+0x4c>)
 8003c78:	2180      	movs	r1, #128	; 0x80
 8003c7a:	0549      	lsls	r1, r1, #21
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c80:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <HAL_MspInit+0x4c>)
 8003c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c84:	2380      	movs	r3, #128	; 0x80
 8003c86:	055b      	lsls	r3, r3, #21
 8003c88:	4013      	ands	r3, r2
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003c8e:	23c0      	movs	r3, #192	; 0xc0
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	0018      	movs	r0, r3
 8003c94:	f000 fc3a 	bl	800450c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40021000 	.word	0x40021000

08003ca4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003ca4:	b590      	push	{r4, r7, lr}
 8003ca6:	b097      	sub	sp, #92	; 0x5c
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cac:	240c      	movs	r4, #12
 8003cae:	193b      	adds	r3, r7, r4
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	234c      	movs	r3, #76	; 0x4c
 8003cb4:	001a      	movs	r2, r3
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	f009 fb82 	bl	800d3c0 <memset>
  if(hrtc->Instance==RTC)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a19      	ldr	r2, [pc, #100]	; (8003d28 <HAL_RTC_MspInit+0x84>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d12c      	bne.n	8003d20 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003cc6:	193b      	adds	r3, r7, r4
 8003cc8:	2280      	movs	r2, #128	; 0x80
 8003cca:	0292      	lsls	r2, r2, #10
 8003ccc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003cce:	193b      	adds	r3, r7, r4
 8003cd0:	2280      	movs	r2, #128	; 0x80
 8003cd2:	0052      	lsls	r2, r2, #1
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cd6:	193b      	adds	r3, r7, r4
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f001 fd89 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8003cde:	1e03      	subs	r3, r0, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003ce2:	f7ff ffb1 	bl	8003c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003ce6:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <HAL_RTC_MspInit+0x88>)
 8003ce8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cea:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <HAL_RTC_MspInit+0x88>)
 8003cec:	2180      	movs	r1, #128	; 0x80
 8003cee:	0209      	lsls	r1, r1, #8
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <HAL_RTC_MspInit+0x88>)
 8003cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <HAL_RTC_MspInit+0x88>)
 8003cfa:	2180      	movs	r1, #128	; 0x80
 8003cfc:	00c9      	lsls	r1, r1, #3
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <HAL_RTC_MspInit+0x88>)
 8003d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d06:	2380      	movs	r3, #128	; 0x80
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8003d10:	2200      	movs	r2, #0
 8003d12:	2103      	movs	r1, #3
 8003d14:	2002      	movs	r0, #2
 8003d16:	f000 fccd 	bl	80046b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8003d1a:	2002      	movs	r0, #2
 8003d1c:	f000 fcdf 	bl	80046de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d20:	46c0      	nop			; (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b017      	add	sp, #92	; 0x5c
 8003d26:	bd90      	pop	{r4, r7, pc}
 8003d28:	40002800 	.word	0x40002800
 8003d2c:	40021000 	.word	0x40021000

08003d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b08b      	sub	sp, #44	; 0x2c
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d38:	2414      	movs	r4, #20
 8003d3a:	193b      	adds	r3, r7, r4
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	2314      	movs	r3, #20
 8003d40:	001a      	movs	r2, r3
 8003d42:	2100      	movs	r1, #0
 8003d44:	f009 fb3c 	bl	800d3c0 <memset>
  if(hspi->Instance==SPI1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <HAL_SPI_MspInit+0x8c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d130      	bne.n	8003db4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d52:	4b1b      	ldr	r3, [pc, #108]	; (8003dc0 <HAL_SPI_MspInit+0x90>)
 8003d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d56:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <HAL_SPI_MspInit+0x90>)
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	0149      	lsls	r1, r1, #5
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40
 8003d60:	4b17      	ldr	r3, [pc, #92]	; (8003dc0 <HAL_SPI_MspInit+0x90>)
 8003d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	015b      	lsls	r3, r3, #5
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d6e:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <HAL_SPI_MspInit+0x90>)
 8003d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d72:	4b13      	ldr	r3, [pc, #76]	; (8003dc0 <HAL_SPI_MspInit+0x90>)
 8003d74:	2101      	movs	r1, #1
 8003d76:	430a      	orrs	r2, r1
 8003d78:	635a      	str	r2, [r3, #52]	; 0x34
 8003d7a:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <HAL_SPI_MspInit+0x90>)
 8003d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7e:	2201      	movs	r2, #1
 8003d80:	4013      	ands	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 8003d86:	0021      	movs	r1, r4
 8003d88:	187b      	adds	r3, r7, r1
 8003d8a:	22e0      	movs	r2, #224	; 0xe0
 8003d8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8e:	187b      	adds	r3, r7, r1
 8003d90:	2202      	movs	r2, #2
 8003d92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d94:	187b      	adds	r3, r7, r1
 8003d96:	2200      	movs	r2, #0
 8003d98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d9a:	187b      	adds	r3, r7, r1
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003da0:	187b      	adds	r3, r7, r1
 8003da2:	2200      	movs	r2, #0
 8003da4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da6:	187a      	adds	r2, r7, r1
 8003da8:	23a0      	movs	r3, #160	; 0xa0
 8003daa:	05db      	lsls	r3, r3, #23
 8003dac:	0011      	movs	r1, r2
 8003dae:	0018      	movs	r0, r3
 8003db0:	f000 fcb6 	bl	8004720 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003db4:	46c0      	nop			; (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b00b      	add	sp, #44	; 0x2c
 8003dba:	bd90      	pop	{r4, r7, pc}
 8003dbc:	40013000 	.word	0x40013000
 8003dc0:	40021000 	.word	0x40021000

08003dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a0d      	ldr	r2, [pc, #52]	; (8003e08 <HAL_TIM_Base_MspInit+0x44>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d113      	bne.n	8003dfe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <HAL_TIM_Base_MspInit+0x48>)
 8003dd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dda:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <HAL_TIM_Base_MspInit+0x48>)
 8003ddc:	2110      	movs	r1, #16
 8003dde:	430a      	orrs	r2, r1
 8003de0:	63da      	str	r2, [r3, #60]	; 0x3c
 8003de2:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <HAL_TIM_Base_MspInit+0x48>)
 8003de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de6:	2210      	movs	r2, #16
 8003de8:	4013      	ands	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8003dee:	2200      	movs	r2, #0
 8003df0:	2102      	movs	r1, #2
 8003df2:	2011      	movs	r0, #17
 8003df4:	f000 fc5e 	bl	80046b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003df8:	2011      	movs	r0, #17
 8003dfa:	f000 fc70 	bl	80046de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b004      	add	sp, #16
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	40001000 	.word	0x40001000
 8003e0c:	40021000 	.word	0x40021000

08003e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e10:	b590      	push	{r4, r7, lr}
 8003e12:	b0a3      	sub	sp, #140	; 0x8c
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e18:	2374      	movs	r3, #116	; 0x74
 8003e1a:	18fb      	adds	r3, r7, r3
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	2314      	movs	r3, #20
 8003e20:	001a      	movs	r2, r3
 8003e22:	2100      	movs	r1, #0
 8003e24:	f009 facc 	bl	800d3c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e28:	2428      	movs	r4, #40	; 0x28
 8003e2a:	193b      	adds	r3, r7, r4
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	234c      	movs	r3, #76	; 0x4c
 8003e30:	001a      	movs	r2, r3
 8003e32:	2100      	movs	r1, #0
 8003e34:	f009 fac4 	bl	800d3c0 <memset>
  if(huart->Instance==USART1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a84      	ldr	r2, [pc, #528]	; (8004050 <HAL_UART_MspInit+0x240>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d140      	bne.n	8003ec4 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e42:	193b      	adds	r3, r7, r4
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003e48:	193b      	adds	r3, r7, r4
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e4e:	193b      	adds	r3, r7, r4
 8003e50:	0018      	movs	r0, r3
 8003e52:	f001 fccd 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8003e56:	1e03      	subs	r3, r0, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003e5a:	f7ff fef5 	bl	8003c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e5e:	4b7d      	ldr	r3, [pc, #500]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e62:	4b7c      	ldr	r3, [pc, #496]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003e64:	2180      	movs	r1, #128	; 0x80
 8003e66:	01c9      	lsls	r1, r1, #7
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
 8003e6c:	4b79      	ldr	r3, [pc, #484]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	01db      	lsls	r3, r3, #7
 8003e74:	4013      	ands	r3, r2
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e7a:	4b76      	ldr	r3, [pc, #472]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e7e:	4b75      	ldr	r3, [pc, #468]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003e80:	2101      	movs	r1, #1
 8003e82:	430a      	orrs	r2, r1
 8003e84:	635a      	str	r2, [r3, #52]	; 0x34
 8003e86:	4b73      	ldr	r3, [pc, #460]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	623b      	str	r3, [r7, #32]
 8003e90:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 8003e92:	2174      	movs	r1, #116	; 0x74
 8003e94:	187b      	adds	r3, r7, r1
 8003e96:	22c0      	movs	r2, #192	; 0xc0
 8003e98:	00d2      	lsls	r2, r2, #3
 8003e9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9c:	187b      	adds	r3, r7, r1
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea2:	187b      	adds	r3, r7, r1
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea8:	187b      	adds	r3, r7, r1
 8003eaa:	2200      	movs	r2, #0
 8003eac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003eae:	187b      	adds	r3, r7, r1
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb4:	187a      	adds	r2, r7, r1
 8003eb6:	23a0      	movs	r3, #160	; 0xa0
 8003eb8:	05db      	lsls	r3, r3, #23
 8003eba:	0011      	movs	r1, r2
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f000 fc2f 	bl	8004720 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003ec2:	e0c0      	b.n	8004046 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a63      	ldr	r2, [pc, #396]	; (8004058 <HAL_UART_MspInit+0x248>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d140      	bne.n	8003f50 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ece:	2128      	movs	r1, #40	; 0x28
 8003ed0:	187b      	adds	r3, r7, r1
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003ed6:	187b      	adds	r3, r7, r1
 8003ed8:	2200      	movs	r2, #0
 8003eda:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003edc:	187b      	adds	r3, r7, r1
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f001 fc86 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8003ee4:	1e03      	subs	r3, r0, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003ee8:	f7ff feae 	bl	8003c48 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003eec:	4b59      	ldr	r3, [pc, #356]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ef0:	4b58      	ldr	r3, [pc, #352]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003ef2:	2180      	movs	r1, #128	; 0x80
 8003ef4:	0289      	lsls	r1, r1, #10
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	63da      	str	r2, [r3, #60]	; 0x3c
 8003efa:	4b56      	ldr	r3, [pc, #344]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003efc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003efe:	2380      	movs	r3, #128	; 0x80
 8003f00:	029b      	lsls	r3, r3, #10
 8003f02:	4013      	ands	r3, r2
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f08:	4b52      	ldr	r3, [pc, #328]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f0c:	4b51      	ldr	r3, [pc, #324]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003f0e:	2101      	movs	r1, #1
 8003f10:	430a      	orrs	r2, r1
 8003f12:	635a      	str	r2, [r3, #52]	; 0x34
 8003f14:	4b4f      	ldr	r3, [pc, #316]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f18:	2201      	movs	r2, #1
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8003f20:	2174      	movs	r1, #116	; 0x74
 8003f22:	187b      	adds	r3, r7, r1
 8003f24:	220c      	movs	r2, #12
 8003f26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f28:	187b      	adds	r3, r7, r1
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2e:	187b      	adds	r3, r7, r1
 8003f30:	2200      	movs	r2, #0
 8003f32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f34:	187b      	adds	r3, r7, r1
 8003f36:	2200      	movs	r2, #0
 8003f38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003f3a:	187b      	adds	r3, r7, r1
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f40:	187a      	adds	r2, r7, r1
 8003f42:	23a0      	movs	r3, #160	; 0xa0
 8003f44:	05db      	lsls	r3, r3, #23
 8003f46:	0011      	movs	r1, r2
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f000 fbe9 	bl	8004720 <HAL_GPIO_Init>
}
 8003f4e:	e07a      	b.n	8004046 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a41      	ldr	r2, [pc, #260]	; (800405c <HAL_UART_MspInit+0x24c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d140      	bne.n	8003fdc <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003f5a:	2128      	movs	r1, #40	; 0x28
 8003f5c:	187b      	adds	r3, r7, r1
 8003f5e:	2204      	movs	r2, #4
 8003f60:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	2200      	movs	r2, #0
 8003f66:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f68:	187b      	adds	r3, r7, r1
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f001 fc40 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8003f70:	1e03      	subs	r3, r0, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_UART_MspInit+0x168>
      Error_Handler();
 8003f74:	f7ff fe68 	bl	8003c48 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f78:	4b36      	ldr	r3, [pc, #216]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f7c:	4b35      	ldr	r3, [pc, #212]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003f7e:	2180      	movs	r1, #128	; 0x80
 8003f80:	02c9      	lsls	r1, r1, #11
 8003f82:	430a      	orrs	r2, r1
 8003f84:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f86:	4b33      	ldr	r3, [pc, #204]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003f88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f8a:	2380      	movs	r3, #128	; 0x80
 8003f8c:	02db      	lsls	r3, r3, #11
 8003f8e:	4013      	ands	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f94:	4b2f      	ldr	r3, [pc, #188]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f98:	4b2e      	ldr	r3, [pc, #184]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	635a      	str	r2, [r3, #52]	; 0x34
 8003fa0:	4b2c      	ldr	r3, [pc, #176]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8003fac:	2174      	movs	r1, #116	; 0x74
 8003fae:	187b      	adds	r3, r7, r1
 8003fb0:	22c0      	movs	r2, #192	; 0xc0
 8003fb2:	0092      	lsls	r2, r2, #2
 8003fb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb6:	187b      	adds	r3, r7, r1
 8003fb8:	2202      	movs	r2, #2
 8003fba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbc:	187b      	adds	r3, r7, r1
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc2:	187b      	adds	r3, r7, r1
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003fc8:	187b      	adds	r3, r7, r1
 8003fca:	2204      	movs	r2, #4
 8003fcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fce:	187b      	adds	r3, r7, r1
 8003fd0:	4a23      	ldr	r2, [pc, #140]	; (8004060 <HAL_UART_MspInit+0x250>)
 8003fd2:	0019      	movs	r1, r3
 8003fd4:	0010      	movs	r0, r2
 8003fd6:	f000 fba3 	bl	8004720 <HAL_GPIO_Init>
}
 8003fda:	e034      	b.n	8004046 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a20      	ldr	r2, [pc, #128]	; (8004064 <HAL_UART_MspInit+0x254>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d12f      	bne.n	8004046 <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 8003fe6:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fea:	4b1a      	ldr	r3, [pc, #104]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003fec:	2180      	movs	r1, #128	; 0x80
 8003fee:	0049      	lsls	r1, r1, #1
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ff4:	4b17      	ldr	r3, [pc, #92]	; (8004054 <HAL_UART_MspInit+0x244>)
 8003ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004002:	4b14      	ldr	r3, [pc, #80]	; (8004054 <HAL_UART_MspInit+0x244>)
 8004004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004006:	4b13      	ldr	r3, [pc, #76]	; (8004054 <HAL_UART_MspInit+0x244>)
 8004008:	2102      	movs	r1, #2
 800400a:	430a      	orrs	r2, r1
 800400c:	635a      	str	r2, [r3, #52]	; 0x34
 800400e:	4b11      	ldr	r3, [pc, #68]	; (8004054 <HAL_UART_MspInit+0x244>)
 8004010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004012:	2202      	movs	r2, #2
 8004014:	4013      	ands	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 800401a:	2174      	movs	r1, #116	; 0x74
 800401c:	187b      	adds	r3, r7, r1
 800401e:	2218      	movs	r2, #24
 8004020:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004022:	187b      	adds	r3, r7, r1
 8004024:	2202      	movs	r2, #2
 8004026:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004028:	187b      	adds	r3, r7, r1
 800402a:	2200      	movs	r2, #0
 800402c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402e:	187b      	adds	r3, r7, r1
 8004030:	2200      	movs	r2, #0
 8004032:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8004034:	187b      	adds	r3, r7, r1
 8004036:	2203      	movs	r2, #3
 8004038:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800403a:	187b      	adds	r3, r7, r1
 800403c:	4a08      	ldr	r2, [pc, #32]	; (8004060 <HAL_UART_MspInit+0x250>)
 800403e:	0019      	movs	r1, r3
 8004040:	0010      	movs	r0, r2
 8004042:	f000 fb6d 	bl	8004720 <HAL_GPIO_Init>
}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	46bd      	mov	sp, r7
 800404a:	b023      	add	sp, #140	; 0x8c
 800404c:	bd90      	pop	{r4, r7, pc}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	40013800 	.word	0x40013800
 8004054:	40021000 	.word	0x40021000
 8004058:	40004400 	.word	0x40004400
 800405c:	40004800 	.word	0x40004800
 8004060:	50000400 	.word	0x50000400
 8004064:	40005000 	.word	0x40005000

08004068 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a25      	ldr	r2, [pc, #148]	; (800410c <HAL_UART_MspDeInit+0xa4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d10e      	bne.n	8004098 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800407a:	4b25      	ldr	r3, [pc, #148]	; (8004110 <HAL_UART_MspDeInit+0xa8>)
 800407c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800407e:	4b24      	ldr	r3, [pc, #144]	; (8004110 <HAL_UART_MspDeInit+0xa8>)
 8004080:	4924      	ldr	r1, [pc, #144]	; (8004114 <HAL_UART_MspDeInit+0xac>)
 8004082:	400a      	ands	r2, r1
 8004084:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 8004086:	23c0      	movs	r3, #192	; 0xc0
 8004088:	00da      	lsls	r2, r3, #3
 800408a:	23a0      	movs	r3, #160	; 0xa0
 800408c:	05db      	lsls	r3, r3, #23
 800408e:	0011      	movs	r1, r2
 8004090:	0018      	movs	r0, r3
 8004092:	f000 fcb1 	bl	80049f8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 8004096:	e034      	b.n	8004102 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1e      	ldr	r2, [pc, #120]	; (8004118 <HAL_UART_MspDeInit+0xb0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d10c      	bne.n	80040bc <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80040a2:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <HAL_UART_MspDeInit+0xa8>)
 80040a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a6:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <HAL_UART_MspDeInit+0xa8>)
 80040a8:	491c      	ldr	r1, [pc, #112]	; (800411c <HAL_UART_MspDeInit+0xb4>)
 80040aa:	400a      	ands	r2, r1
 80040ac:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 80040ae:	23a0      	movs	r3, #160	; 0xa0
 80040b0:	05db      	lsls	r3, r3, #23
 80040b2:	210c      	movs	r1, #12
 80040b4:	0018      	movs	r0, r3
 80040b6:	f000 fc9f 	bl	80049f8 <HAL_GPIO_DeInit>
}
 80040ba:	e022      	b.n	8004102 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a17      	ldr	r2, [pc, #92]	; (8004120 <HAL_UART_MspDeInit+0xb8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d10d      	bne.n	80040e2 <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 80040c6:	4b12      	ldr	r3, [pc, #72]	; (8004110 <HAL_UART_MspDeInit+0xa8>)
 80040c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040ca:	4b11      	ldr	r3, [pc, #68]	; (8004110 <HAL_UART_MspDeInit+0xa8>)
 80040cc:	4915      	ldr	r1, [pc, #84]	; (8004124 <HAL_UART_MspDeInit+0xbc>)
 80040ce:	400a      	ands	r2, r1
 80040d0:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 80040d2:	23c0      	movs	r3, #192	; 0xc0
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4a14      	ldr	r2, [pc, #80]	; (8004128 <HAL_UART_MspDeInit+0xc0>)
 80040d8:	0019      	movs	r1, r3
 80040da:	0010      	movs	r0, r2
 80040dc:	f000 fc8c 	bl	80049f8 <HAL_GPIO_DeInit>
}
 80040e0:	e00f      	b.n	8004102 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a11      	ldr	r2, [pc, #68]	; (800412c <HAL_UART_MspDeInit+0xc4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d10a      	bne.n	8004102 <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 80040ec:	4b08      	ldr	r3, [pc, #32]	; (8004110 <HAL_UART_MspDeInit+0xa8>)
 80040ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <HAL_UART_MspDeInit+0xa8>)
 80040f2:	490f      	ldr	r1, [pc, #60]	; (8004130 <HAL_UART_MspDeInit+0xc8>)
 80040f4:	400a      	ands	r2, r1
 80040f6:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_UART_MspDeInit+0xc0>)
 80040fa:	2118      	movs	r1, #24
 80040fc:	0018      	movs	r0, r3
 80040fe:	f000 fc7b 	bl	80049f8 <HAL_GPIO_DeInit>
}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	46bd      	mov	sp, r7
 8004106:	b002      	add	sp, #8
 8004108:	bd80      	pop	{r7, pc}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	40013800 	.word	0x40013800
 8004110:	40021000 	.word	0x40021000
 8004114:	ffffbfff 	.word	0xffffbfff
 8004118:	40004400 	.word	0x40004400
 800411c:	fffdffff 	.word	0xfffdffff
 8004120:	40004800 	.word	0x40004800
 8004124:	fffbffff 	.word	0xfffbffff
 8004128:	50000400 	.word	0x50000400
 800412c:	40005000 	.word	0x40005000
 8004130:	fffffeff 	.word	0xfffffeff

08004134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004138:	e7fe      	b.n	8004138 <NMI_Handler+0x4>

0800413a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800413e:	e7fe      	b.n	800413e <HardFault_Handler+0x4>

08004140 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004144:	46c0      	nop			; (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004158:	f000 f97c 	bl	8004454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800415c:	46c0      	nop			; (mov r8, r8)
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <RTC_TAMP_IRQHandler+0x14>)
 800416a:	0018      	movs	r0, r3
 800416c:	f002 f942 	bl	80063f4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8004170:	46c0      	nop			; (mov r8, r8)
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	200006f4 	.word	0x200006f4

0800417c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_Pin);
 8004180:	2004      	movs	r0, #4
 8004182:	f000 fd4b 	bl	8004c1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004190:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8004192:	0018      	movs	r0, r3
 8004194:	f003 fad6 	bl	8007744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	20000784 	.word	0x20000784

080041a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  return 1;
 80041a8:	2301      	movs	r3, #1
}
 80041aa:	0018      	movs	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <_kill>:

int _kill(int pid, int sig)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80041ba:	f009 f9f5 	bl	800d5a8 <__errno>
 80041be:	0003      	movs	r3, r0
 80041c0:	2216      	movs	r2, #22
 80041c2:	601a      	str	r2, [r3, #0]
  return -1;
 80041c4:	2301      	movs	r3, #1
 80041c6:	425b      	negs	r3, r3
}
 80041c8:	0018      	movs	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b002      	add	sp, #8
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <_exit>:

void _exit (int status)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041d8:	2301      	movs	r3, #1
 80041da:	425a      	negs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	0011      	movs	r1, r2
 80041e0:	0018      	movs	r0, r3
 80041e2:	f7ff ffe5 	bl	80041b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80041e6:	e7fe      	b.n	80041e6 <_exit+0x16>

080041e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	e00a      	b.n	8004210 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041fa:	e000      	b.n	80041fe <_read+0x16>
 80041fc:	bf00      	nop
 80041fe:	0001      	movs	r1, r0
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	60ba      	str	r2, [r7, #8]
 8004206:	b2ca      	uxtb	r2, r1
 8004208:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	3301      	adds	r3, #1
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	429a      	cmp	r2, r3
 8004216:	dbf0      	blt.n	80041fa <_read+0x12>
  }

  return len;
 8004218:	687b      	ldr	r3, [r7, #4]
}
 800421a:	0018      	movs	r0, r3
 800421c:	46bd      	mov	sp, r7
 800421e:	b006      	add	sp, #24
 8004220:	bd80      	pop	{r7, pc}

08004222 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b086      	sub	sp, #24
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800422e:	2300      	movs	r3, #0
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e009      	b.n	8004248 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	60ba      	str	r2, [r7, #8]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	0018      	movs	r0, r3
 800423e:	e000      	b.n	8004242 <_write+0x20>
 8004240:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	3301      	adds	r3, #1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	429a      	cmp	r2, r3
 800424e:	dbf1      	blt.n	8004234 <_write+0x12>
  }
  return len;
 8004250:	687b      	ldr	r3, [r7, #4]
}
 8004252:	0018      	movs	r0, r3
 8004254:	46bd      	mov	sp, r7
 8004256:	b006      	add	sp, #24
 8004258:	bd80      	pop	{r7, pc}

0800425a <_close>:

int _close(int file)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004262:	2301      	movs	r3, #1
 8004264:	425b      	negs	r3, r3
}
 8004266:	0018      	movs	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	b002      	add	sp, #8
 800426c:	bd80      	pop	{r7, pc}

0800426e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2280      	movs	r2, #128	; 0x80
 800427c:	0192      	lsls	r2, r2, #6
 800427e:	605a      	str	r2, [r3, #4]
  return 0;
 8004280:	2300      	movs	r3, #0
}
 8004282:	0018      	movs	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	b002      	add	sp, #8
 8004288:	bd80      	pop	{r7, pc}

0800428a <_isatty>:

int _isatty(int file)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004292:	2301      	movs	r3, #1
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b002      	add	sp, #8
 800429a:	bd80      	pop	{r7, pc}

0800429c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	0018      	movs	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b004      	add	sp, #16
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042bc:	4a14      	ldr	r2, [pc, #80]	; (8004310 <_sbrk+0x5c>)
 80042be:	4b15      	ldr	r3, [pc, #84]	; (8004314 <_sbrk+0x60>)
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042c8:	4b13      	ldr	r3, [pc, #76]	; (8004318 <_sbrk+0x64>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042d0:	4b11      	ldr	r3, [pc, #68]	; (8004318 <_sbrk+0x64>)
 80042d2:	4a12      	ldr	r2, [pc, #72]	; (800431c <_sbrk+0x68>)
 80042d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042d6:	4b10      	ldr	r3, [pc, #64]	; (8004318 <_sbrk+0x64>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	18d3      	adds	r3, r2, r3
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d207      	bcs.n	80042f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042e4:	f009 f960 	bl	800d5a8 <__errno>
 80042e8:	0003      	movs	r3, r0
 80042ea:	220c      	movs	r2, #12
 80042ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042ee:	2301      	movs	r3, #1
 80042f0:	425b      	negs	r3, r3
 80042f2:	e009      	b.n	8004308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042f4:	4b08      	ldr	r3, [pc, #32]	; (8004318 <_sbrk+0x64>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042fa:	4b07      	ldr	r3, [pc, #28]	; (8004318 <_sbrk+0x64>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	18d2      	adds	r2, r2, r3
 8004302:	4b05      	ldr	r3, [pc, #20]	; (8004318 <_sbrk+0x64>)
 8004304:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004306:	68fb      	ldr	r3, [r7, #12]
}
 8004308:	0018      	movs	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	b006      	add	sp, #24
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20024000 	.word	0x20024000
 8004314:	00000400 	.word	0x00000400
 8004318:	20000b04 	.word	0x20000b04
 800431c:	20000f58 	.word	0x20000f58

08004320 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800432c:	480d      	ldr	r0, [pc, #52]	; (8004364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800432e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004330:	f7ff fff6 	bl	8004320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004334:	480c      	ldr	r0, [pc, #48]	; (8004368 <LoopForever+0x6>)
  ldr r1, =_edata
 8004336:	490d      	ldr	r1, [pc, #52]	; (800436c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004338:	4a0d      	ldr	r2, [pc, #52]	; (8004370 <LoopForever+0xe>)
  movs r3, #0
 800433a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800433c:	e002      	b.n	8004344 <LoopCopyDataInit>

0800433e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800433e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004342:	3304      	adds	r3, #4

08004344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004348:	d3f9      	bcc.n	800433e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800434a:	4a0a      	ldr	r2, [pc, #40]	; (8004374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800434c:	4c0a      	ldr	r4, [pc, #40]	; (8004378 <LoopForever+0x16>)
  movs r3, #0
 800434e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004350:	e001      	b.n	8004356 <LoopFillZerobss>

08004352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004354:	3204      	adds	r2, #4

08004356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004358:	d3fb      	bcc.n	8004352 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800435a:	f009 f92b 	bl	800d5b4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800435e:	f7fe f923 	bl	80025a8 <main>

08004362 <LoopForever>:

LoopForever:
  b LoopForever
 8004362:	e7fe      	b.n	8004362 <LoopForever>
  ldr   r0, =_estack
 8004364:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8004368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800436c:	200006d8 	.word	0x200006d8
  ldr r2, =_sidata
 8004370:	08015f60 	.word	0x08015f60
  ldr r2, =_sbss
 8004374:	200006d8 	.word	0x200006d8
  ldr r4, =_ebss
 8004378:	20000f54 	.word	0x20000f54

0800437c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800437c:	e7fe      	b.n	800437c <ADC1_COMP_IRQHandler>
	...

08004380 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004386:	1dfb      	adds	r3, r7, #7
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <HAL_Init+0x3c>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <HAL_Init+0x3c>)
 8004392:	2180      	movs	r1, #128	; 0x80
 8004394:	0049      	lsls	r1, r1, #1
 8004396:	430a      	orrs	r2, r1
 8004398:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800439a:	2003      	movs	r0, #3
 800439c:	f000 f810 	bl	80043c0 <HAL_InitTick>
 80043a0:	1e03      	subs	r3, r0, #0
 80043a2:	d003      	beq.n	80043ac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80043a4:	1dfb      	adds	r3, r7, #7
 80043a6:	2201      	movs	r2, #1
 80043a8:	701a      	strb	r2, [r3, #0]
 80043aa:	e001      	b.n	80043b0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80043ac:	f7ff fc52 	bl	8003c54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043b0:	1dfb      	adds	r3, r7, #7
 80043b2:	781b      	ldrb	r3, [r3, #0]
}
 80043b4:	0018      	movs	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b002      	add	sp, #8
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40022000 	.word	0x40022000

080043c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043c0:	b590      	push	{r4, r7, lr}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80043c8:	230f      	movs	r3, #15
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80043d0:	4b1d      	ldr	r3, [pc, #116]	; (8004448 <HAL_InitTick+0x88>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d02b      	beq.n	8004430 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80043d8:	4b1c      	ldr	r3, [pc, #112]	; (800444c <HAL_InitTick+0x8c>)
 80043da:	681c      	ldr	r4, [r3, #0]
 80043dc:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <HAL_InitTick+0x88>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	0019      	movs	r1, r3
 80043e2:	23fa      	movs	r3, #250	; 0xfa
 80043e4:	0098      	lsls	r0, r3, #2
 80043e6:	f7fb fea9 	bl	800013c <__udivsi3>
 80043ea:	0003      	movs	r3, r0
 80043ec:	0019      	movs	r1, r3
 80043ee:	0020      	movs	r0, r4
 80043f0:	f7fb fea4 	bl	800013c <__udivsi3>
 80043f4:	0003      	movs	r3, r0
 80043f6:	0018      	movs	r0, r3
 80043f8:	f000 f985 	bl	8004706 <HAL_SYSTICK_Config>
 80043fc:	1e03      	subs	r3, r0, #0
 80043fe:	d112      	bne.n	8004426 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b03      	cmp	r3, #3
 8004404:	d80a      	bhi.n	800441c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	2301      	movs	r3, #1
 800440a:	425b      	negs	r3, r3
 800440c:	2200      	movs	r2, #0
 800440e:	0018      	movs	r0, r3
 8004410:	f000 f950 	bl	80046b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004414:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <HAL_InitTick+0x90>)
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	e00d      	b.n	8004438 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800441c:	230f      	movs	r3, #15
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	2201      	movs	r2, #1
 8004422:	701a      	strb	r2, [r3, #0]
 8004424:	e008      	b.n	8004438 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004426:	230f      	movs	r3, #15
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	e003      	b.n	8004438 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004430:	230f      	movs	r3, #15
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	2201      	movs	r2, #1
 8004436:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004438:	230f      	movs	r3, #15
 800443a:	18fb      	adds	r3, r7, r3
 800443c:	781b      	ldrb	r3, [r3, #0]
}
 800443e:	0018      	movs	r0, r3
 8004440:	46bd      	mov	sp, r7
 8004442:	b005      	add	sp, #20
 8004444:	bd90      	pop	{r4, r7, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	20000018 	.word	0x20000018
 800444c:	20000010 	.word	0x20000010
 8004450:	20000014 	.word	0x20000014

08004454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <HAL_IncTick+0x1c>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	001a      	movs	r2, r3
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_IncTick+0x20>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	18d2      	adds	r2, r2, r3
 8004464:	4b03      	ldr	r3, [pc, #12]	; (8004474 <HAL_IncTick+0x20>)
 8004466:	601a      	str	r2, [r3, #0]
}
 8004468:	46c0      	nop			; (mov r8, r8)
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	20000018 	.word	0x20000018
 8004474:	20000b08 	.word	0x20000b08

08004478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  return uwTick;
 800447c:	4b02      	ldr	r3, [pc, #8]	; (8004488 <HAL_GetTick+0x10>)
 800447e:	681b      	ldr	r3, [r3, #0]
}
 8004480:	0018      	movs	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	20000b08 	.word	0x20000b08

0800448c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004494:	f7ff fff0 	bl	8004478 <HAL_GetTick>
 8004498:	0003      	movs	r3, r0
 800449a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3301      	adds	r3, #1
 80044a4:	d005      	beq.n	80044b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <HAL_Delay+0x44>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	001a      	movs	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	189b      	adds	r3, r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	f7ff ffe0 	bl	8004478 <HAL_GetTick>
 80044b8:	0002      	movs	r2, r0
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d8f7      	bhi.n	80044b4 <HAL_Delay+0x28>
  {
  }
}
 80044c4:	46c0      	nop			; (mov r8, r8)
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	46bd      	mov	sp, r7
 80044ca:	b004      	add	sp, #16
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	20000018 	.word	0x20000018

080044d4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80044d8:	4b04      	ldr	r3, [pc, #16]	; (80044ec <HAL_SuspendTick+0x18>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4b03      	ldr	r3, [pc, #12]	; (80044ec <HAL_SuspendTick+0x18>)
 80044de:	2102      	movs	r1, #2
 80044e0:	438a      	bics	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]
}
 80044e4:	46c0      	nop			; (mov r8, r8)
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	e000e010 	.word	0xe000e010

080044f0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <HAL_ResumeTick+0x18>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <HAL_ResumeTick+0x18>)
 80044fa:	2102      	movs	r1, #2
 80044fc:	430a      	orrs	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]
}
 8004500:	46c0      	nop			; (mov r8, r8)
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	e000e010 	.word	0xe000e010

0800450c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a06      	ldr	r2, [pc, #24]	; (8004534 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800451a:	4013      	ands	r3, r2
 800451c:	0019      	movs	r1, r3
 800451e:	4b04      	ldr	r3, [pc, #16]	; (8004530 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	430a      	orrs	r2, r1
 8004524:	601a      	str	r2, [r3, #0]
}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	46bd      	mov	sp, r7
 800452a:	b002      	add	sp, #8
 800452c:	bd80      	pop	{r7, pc}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	40010000 	.word	0x40010000
 8004534:	fffff9ff 	.word	0xfffff9ff

08004538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	0002      	movs	r2, r0
 8004540:	1dfb      	adds	r3, r7, #7
 8004542:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004544:	1dfb      	adds	r3, r7, #7
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b7f      	cmp	r3, #127	; 0x7f
 800454a:	d809      	bhi.n	8004560 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800454c:	1dfb      	adds	r3, r7, #7
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	001a      	movs	r2, r3
 8004552:	231f      	movs	r3, #31
 8004554:	401a      	ands	r2, r3
 8004556:	4b04      	ldr	r3, [pc, #16]	; (8004568 <__NVIC_EnableIRQ+0x30>)
 8004558:	2101      	movs	r1, #1
 800455a:	4091      	lsls	r1, r2
 800455c:	000a      	movs	r2, r1
 800455e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004560:	46c0      	nop			; (mov r8, r8)
 8004562:	46bd      	mov	sp, r7
 8004564:	b002      	add	sp, #8
 8004566:	bd80      	pop	{r7, pc}
 8004568:	e000e100 	.word	0xe000e100

0800456c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800456c:	b590      	push	{r4, r7, lr}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	0002      	movs	r2, r0
 8004574:	6039      	str	r1, [r7, #0]
 8004576:	1dfb      	adds	r3, r7, #7
 8004578:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800457a:	1dfb      	adds	r3, r7, #7
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b7f      	cmp	r3, #127	; 0x7f
 8004580:	d828      	bhi.n	80045d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004582:	4a2f      	ldr	r2, [pc, #188]	; (8004640 <__NVIC_SetPriority+0xd4>)
 8004584:	1dfb      	adds	r3, r7, #7
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	b25b      	sxtb	r3, r3
 800458a:	089b      	lsrs	r3, r3, #2
 800458c:	33c0      	adds	r3, #192	; 0xc0
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	589b      	ldr	r3, [r3, r2]
 8004592:	1dfa      	adds	r2, r7, #7
 8004594:	7812      	ldrb	r2, [r2, #0]
 8004596:	0011      	movs	r1, r2
 8004598:	2203      	movs	r2, #3
 800459a:	400a      	ands	r2, r1
 800459c:	00d2      	lsls	r2, r2, #3
 800459e:	21ff      	movs	r1, #255	; 0xff
 80045a0:	4091      	lsls	r1, r2
 80045a2:	000a      	movs	r2, r1
 80045a4:	43d2      	mvns	r2, r2
 80045a6:	401a      	ands	r2, r3
 80045a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	019b      	lsls	r3, r3, #6
 80045ae:	22ff      	movs	r2, #255	; 0xff
 80045b0:	401a      	ands	r2, r3
 80045b2:	1dfb      	adds	r3, r7, #7
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	0018      	movs	r0, r3
 80045b8:	2303      	movs	r3, #3
 80045ba:	4003      	ands	r3, r0
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045c0:	481f      	ldr	r0, [pc, #124]	; (8004640 <__NVIC_SetPriority+0xd4>)
 80045c2:	1dfb      	adds	r3, r7, #7
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	b25b      	sxtb	r3, r3
 80045c8:	089b      	lsrs	r3, r3, #2
 80045ca:	430a      	orrs	r2, r1
 80045cc:	33c0      	adds	r3, #192	; 0xc0
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80045d2:	e031      	b.n	8004638 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045d4:	4a1b      	ldr	r2, [pc, #108]	; (8004644 <__NVIC_SetPriority+0xd8>)
 80045d6:	1dfb      	adds	r3, r7, #7
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	0019      	movs	r1, r3
 80045dc:	230f      	movs	r3, #15
 80045de:	400b      	ands	r3, r1
 80045e0:	3b08      	subs	r3, #8
 80045e2:	089b      	lsrs	r3, r3, #2
 80045e4:	3306      	adds	r3, #6
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	18d3      	adds	r3, r2, r3
 80045ea:	3304      	adds	r3, #4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	1dfa      	adds	r2, r7, #7
 80045f0:	7812      	ldrb	r2, [r2, #0]
 80045f2:	0011      	movs	r1, r2
 80045f4:	2203      	movs	r2, #3
 80045f6:	400a      	ands	r2, r1
 80045f8:	00d2      	lsls	r2, r2, #3
 80045fa:	21ff      	movs	r1, #255	; 0xff
 80045fc:	4091      	lsls	r1, r2
 80045fe:	000a      	movs	r2, r1
 8004600:	43d2      	mvns	r2, r2
 8004602:	401a      	ands	r2, r3
 8004604:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	019b      	lsls	r3, r3, #6
 800460a:	22ff      	movs	r2, #255	; 0xff
 800460c:	401a      	ands	r2, r3
 800460e:	1dfb      	adds	r3, r7, #7
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	0018      	movs	r0, r3
 8004614:	2303      	movs	r3, #3
 8004616:	4003      	ands	r3, r0
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800461c:	4809      	ldr	r0, [pc, #36]	; (8004644 <__NVIC_SetPriority+0xd8>)
 800461e:	1dfb      	adds	r3, r7, #7
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	001c      	movs	r4, r3
 8004624:	230f      	movs	r3, #15
 8004626:	4023      	ands	r3, r4
 8004628:	3b08      	subs	r3, #8
 800462a:	089b      	lsrs	r3, r3, #2
 800462c:	430a      	orrs	r2, r1
 800462e:	3306      	adds	r3, #6
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	18c3      	adds	r3, r0, r3
 8004634:	3304      	adds	r3, #4
 8004636:	601a      	str	r2, [r3, #0]
}
 8004638:	46c0      	nop			; (mov r8, r8)
 800463a:	46bd      	mov	sp, r7
 800463c:	b003      	add	sp, #12
 800463e:	bd90      	pop	{r4, r7, pc}
 8004640:	e000e100 	.word	0xe000e100
 8004644:	e000ed00 	.word	0xe000ed00

08004648 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800464c:	f3bf 8f4f 	dsb	sy
}
 8004650:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004652:	4b04      	ldr	r3, [pc, #16]	; (8004664 <__NVIC_SystemReset+0x1c>)
 8004654:	4a04      	ldr	r2, [pc, #16]	; (8004668 <__NVIC_SystemReset+0x20>)
 8004656:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004658:	f3bf 8f4f 	dsb	sy
}
 800465c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	e7fd      	b.n	800465e <__NVIC_SystemReset+0x16>
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	e000ed00 	.word	0xe000ed00
 8004668:	05fa0004 	.word	0x05fa0004

0800466c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	1e5a      	subs	r2, r3, #1
 8004678:	2380      	movs	r3, #128	; 0x80
 800467a:	045b      	lsls	r3, r3, #17
 800467c:	429a      	cmp	r2, r3
 800467e:	d301      	bcc.n	8004684 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004680:	2301      	movs	r3, #1
 8004682:	e010      	b.n	80046a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004684:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <SysTick_Config+0x44>)
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	3a01      	subs	r2, #1
 800468a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800468c:	2301      	movs	r3, #1
 800468e:	425b      	negs	r3, r3
 8004690:	2103      	movs	r1, #3
 8004692:	0018      	movs	r0, r3
 8004694:	f7ff ff6a 	bl	800456c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004698:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <SysTick_Config+0x44>)
 800469a:	2200      	movs	r2, #0
 800469c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800469e:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <SysTick_Config+0x44>)
 80046a0:	2207      	movs	r2, #7
 80046a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	0018      	movs	r0, r3
 80046a8:	46bd      	mov	sp, r7
 80046aa:	b002      	add	sp, #8
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	e000e010 	.word	0xe000e010

080046b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	210f      	movs	r1, #15
 80046c0:	187b      	adds	r3, r7, r1
 80046c2:	1c02      	adds	r2, r0, #0
 80046c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	187b      	adds	r3, r7, r1
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	b25b      	sxtb	r3, r3
 80046ce:	0011      	movs	r1, r2
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7ff ff4b 	bl	800456c <__NVIC_SetPriority>
}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	46bd      	mov	sp, r7
 80046da:	b004      	add	sp, #16
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	0002      	movs	r2, r0
 80046e6:	1dfb      	adds	r3, r7, #7
 80046e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046ea:	1dfb      	adds	r3, r7, #7
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	b25b      	sxtb	r3, r3
 80046f0:	0018      	movs	r0, r3
 80046f2:	f7ff ff21 	bl	8004538 <__NVIC_EnableIRQ>
}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	46bd      	mov	sp, r7
 80046fa:	b002      	add	sp, #8
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004702:	f7ff ffa1 	bl	8004648 <__NVIC_SystemReset>

08004706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	0018      	movs	r0, r3
 8004712:	f7ff ffab 	bl	800466c <SysTick_Config>
 8004716:	0003      	movs	r3, r0
}
 8004718:	0018      	movs	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	b002      	add	sp, #8
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800472e:	e14d      	b.n	80049cc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2101      	movs	r1, #1
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4091      	lsls	r1, r2
 800473a:	000a      	movs	r2, r1
 800473c:	4013      	ands	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d100      	bne.n	8004748 <HAL_GPIO_Init+0x28>
 8004746:	e13e      	b.n	80049c6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2203      	movs	r2, #3
 800474e:	4013      	ands	r3, r2
 8004750:	2b01      	cmp	r3, #1
 8004752:	d005      	beq.n	8004760 <HAL_GPIO_Init+0x40>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2203      	movs	r2, #3
 800475a:	4013      	ands	r3, r2
 800475c:	2b02      	cmp	r3, #2
 800475e:	d130      	bne.n	80047c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	2203      	movs	r2, #3
 800476c:	409a      	lsls	r2, r3
 800476e:	0013      	movs	r3, r2
 8004770:	43da      	mvns	r2, r3
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4013      	ands	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	409a      	lsls	r2, r3
 8004782:	0013      	movs	r3, r2
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004796:	2201      	movs	r2, #1
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	409a      	lsls	r2, r3
 800479c:	0013      	movs	r3, r2
 800479e:	43da      	mvns	r2, r3
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4013      	ands	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	091b      	lsrs	r3, r3, #4
 80047ac:	2201      	movs	r2, #1
 80047ae:	401a      	ands	r2, r3
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	409a      	lsls	r2, r3
 80047b4:	0013      	movs	r3, r2
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2203      	movs	r2, #3
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d017      	beq.n	80047fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	2203      	movs	r2, #3
 80047da:	409a      	lsls	r2, r3
 80047dc:	0013      	movs	r3, r2
 80047de:	43da      	mvns	r2, r3
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4013      	ands	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	409a      	lsls	r2, r3
 80047f0:	0013      	movs	r3, r2
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2203      	movs	r2, #3
 8004804:	4013      	ands	r3, r2
 8004806:	2b02      	cmp	r3, #2
 8004808:	d123      	bne.n	8004852 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	08da      	lsrs	r2, r3, #3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3208      	adds	r2, #8
 8004812:	0092      	lsls	r2, r2, #2
 8004814:	58d3      	ldr	r3, [r2, r3]
 8004816:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2207      	movs	r2, #7
 800481c:	4013      	ands	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	220f      	movs	r2, #15
 8004822:	409a      	lsls	r2, r3
 8004824:	0013      	movs	r3, r2
 8004826:	43da      	mvns	r2, r3
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4013      	ands	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2107      	movs	r1, #7
 8004836:	400b      	ands	r3, r1
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	409a      	lsls	r2, r3
 800483c:	0013      	movs	r3, r2
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	08da      	lsrs	r2, r3, #3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3208      	adds	r2, #8
 800484c:	0092      	lsls	r2, r2, #2
 800484e:	6939      	ldr	r1, [r7, #16]
 8004850:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	2203      	movs	r2, #3
 800485e:	409a      	lsls	r2, r3
 8004860:	0013      	movs	r3, r2
 8004862:	43da      	mvns	r2, r3
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4013      	ands	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2203      	movs	r2, #3
 8004870:	401a      	ands	r2, r3
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	409a      	lsls	r2, r3
 8004878:	0013      	movs	r3, r2
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	23c0      	movs	r3, #192	; 0xc0
 800488c:	029b      	lsls	r3, r3, #10
 800488e:	4013      	ands	r3, r2
 8004890:	d100      	bne.n	8004894 <HAL_GPIO_Init+0x174>
 8004892:	e098      	b.n	80049c6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004894:	4a53      	ldr	r2, [pc, #332]	; (80049e4 <HAL_GPIO_Init+0x2c4>)
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	089b      	lsrs	r3, r3, #2
 800489a:	3318      	adds	r3, #24
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	589b      	ldr	r3, [r3, r2]
 80048a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2203      	movs	r2, #3
 80048a6:	4013      	ands	r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	220f      	movs	r2, #15
 80048ac:	409a      	lsls	r2, r3
 80048ae:	0013      	movs	r3, r2
 80048b0:	43da      	mvns	r2, r3
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	23a0      	movs	r3, #160	; 0xa0
 80048bc:	05db      	lsls	r3, r3, #23
 80048be:	429a      	cmp	r2, r3
 80048c0:	d019      	beq.n	80048f6 <HAL_GPIO_Init+0x1d6>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a48      	ldr	r2, [pc, #288]	; (80049e8 <HAL_GPIO_Init+0x2c8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <HAL_GPIO_Init+0x1d2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a47      	ldr	r2, [pc, #284]	; (80049ec <HAL_GPIO_Init+0x2cc>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00d      	beq.n	80048ee <HAL_GPIO_Init+0x1ce>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a46      	ldr	r2, [pc, #280]	; (80049f0 <HAL_GPIO_Init+0x2d0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d007      	beq.n	80048ea <HAL_GPIO_Init+0x1ca>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a45      	ldr	r2, [pc, #276]	; (80049f4 <HAL_GPIO_Init+0x2d4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d101      	bne.n	80048e6 <HAL_GPIO_Init+0x1c6>
 80048e2:	2304      	movs	r3, #4
 80048e4:	e008      	b.n	80048f8 <HAL_GPIO_Init+0x1d8>
 80048e6:	2305      	movs	r3, #5
 80048e8:	e006      	b.n	80048f8 <HAL_GPIO_Init+0x1d8>
 80048ea:	2303      	movs	r3, #3
 80048ec:	e004      	b.n	80048f8 <HAL_GPIO_Init+0x1d8>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e002      	b.n	80048f8 <HAL_GPIO_Init+0x1d8>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <HAL_GPIO_Init+0x1d8>
 80048f6:	2300      	movs	r3, #0
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	2103      	movs	r1, #3
 80048fc:	400a      	ands	r2, r1
 80048fe:	00d2      	lsls	r2, r2, #3
 8004900:	4093      	lsls	r3, r2
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004908:	4936      	ldr	r1, [pc, #216]	; (80049e4 <HAL_GPIO_Init+0x2c4>)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	089b      	lsrs	r3, r3, #2
 800490e:	3318      	adds	r3, #24
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004916:	4b33      	ldr	r3, [pc, #204]	; (80049e4 <HAL_GPIO_Init+0x2c4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	43da      	mvns	r2, r3
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4013      	ands	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	2380      	movs	r3, #128	; 0x80
 800492c:	035b      	lsls	r3, r3, #13
 800492e:	4013      	ands	r3, r2
 8004930:	d003      	beq.n	800493a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800493a:	4b2a      	ldr	r3, [pc, #168]	; (80049e4 <HAL_GPIO_Init+0x2c4>)
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004940:	4b28      	ldr	r3, [pc, #160]	; (80049e4 <HAL_GPIO_Init+0x2c4>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	43da      	mvns	r2, r3
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4013      	ands	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	2380      	movs	r3, #128	; 0x80
 8004956:	039b      	lsls	r3, r3, #14
 8004958:	4013      	ands	r3, r2
 800495a:	d003      	beq.n	8004964 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004964:	4b1f      	ldr	r3, [pc, #124]	; (80049e4 <HAL_GPIO_Init+0x2c4>)
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800496a:	4a1e      	ldr	r2, [pc, #120]	; (80049e4 <HAL_GPIO_Init+0x2c4>)
 800496c:	2384      	movs	r3, #132	; 0x84
 800496e:	58d3      	ldr	r3, [r2, r3]
 8004970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	43da      	mvns	r2, r3
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4013      	ands	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	2380      	movs	r3, #128	; 0x80
 8004982:	029b      	lsls	r3, r3, #10
 8004984:	4013      	ands	r3, r2
 8004986:	d003      	beq.n	8004990 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004990:	4914      	ldr	r1, [pc, #80]	; (80049e4 <HAL_GPIO_Init+0x2c4>)
 8004992:	2284      	movs	r2, #132	; 0x84
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004998:	4a12      	ldr	r2, [pc, #72]	; (80049e4 <HAL_GPIO_Init+0x2c4>)
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	58d3      	ldr	r3, [r2, r3]
 800499e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	43da      	mvns	r2, r3
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	4013      	ands	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	025b      	lsls	r3, r3, #9
 80049b2:	4013      	ands	r3, r2
 80049b4:	d003      	beq.n	80049be <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049be:	4909      	ldr	r1, [pc, #36]	; (80049e4 <HAL_GPIO_Init+0x2c4>)
 80049c0:	2280      	movs	r2, #128	; 0x80
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	3301      	adds	r3, #1
 80049ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	40da      	lsrs	r2, r3
 80049d4:	1e13      	subs	r3, r2, #0
 80049d6:	d000      	beq.n	80049da <HAL_GPIO_Init+0x2ba>
 80049d8:	e6aa      	b.n	8004730 <HAL_GPIO_Init+0x10>
  }
}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	46c0      	nop			; (mov r8, r8)
 80049de:	46bd      	mov	sp, r7
 80049e0:	b006      	add	sp, #24
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40021800 	.word	0x40021800
 80049e8:	50000400 	.word	0x50000400
 80049ec:	50000800 	.word	0x50000800
 80049f0:	50000c00 	.word	0x50000c00
 80049f4:	50001000 	.word	0x50001000

080049f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004a06:	e0ba      	b.n	8004b7e <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004a08:	2201      	movs	r2, #1
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	409a      	lsls	r2, r3
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	4013      	ands	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d100      	bne.n	8004a1c <HAL_GPIO_DeInit+0x24>
 8004a1a:	e0ad      	b.n	8004b78 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8004a1c:	4a5d      	ldr	r2, [pc, #372]	; (8004b94 <HAL_GPIO_DeInit+0x19c>)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	089b      	lsrs	r3, r3, #2
 8004a22:	3318      	adds	r3, #24
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	589b      	ldr	r3, [r3, r2]
 8004a28:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	4013      	ands	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	220f      	movs	r2, #15
 8004a34:	409a      	lsls	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	23a0      	movs	r3, #160	; 0xa0
 8004a40:	05db      	lsls	r3, r3, #23
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d019      	beq.n	8004a7a <HAL_GPIO_DeInit+0x82>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a53      	ldr	r2, [pc, #332]	; (8004b98 <HAL_GPIO_DeInit+0x1a0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <HAL_GPIO_DeInit+0x7e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a52      	ldr	r2, [pc, #328]	; (8004b9c <HAL_GPIO_DeInit+0x1a4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00d      	beq.n	8004a72 <HAL_GPIO_DeInit+0x7a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a51      	ldr	r2, [pc, #324]	; (8004ba0 <HAL_GPIO_DeInit+0x1a8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d007      	beq.n	8004a6e <HAL_GPIO_DeInit+0x76>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a50      	ldr	r2, [pc, #320]	; (8004ba4 <HAL_GPIO_DeInit+0x1ac>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d101      	bne.n	8004a6a <HAL_GPIO_DeInit+0x72>
 8004a66:	2304      	movs	r3, #4
 8004a68:	e008      	b.n	8004a7c <HAL_GPIO_DeInit+0x84>
 8004a6a:	2305      	movs	r3, #5
 8004a6c:	e006      	b.n	8004a7c <HAL_GPIO_DeInit+0x84>
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e004      	b.n	8004a7c <HAL_GPIO_DeInit+0x84>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e002      	b.n	8004a7c <HAL_GPIO_DeInit+0x84>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <HAL_GPIO_DeInit+0x84>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	2103      	movs	r1, #3
 8004a80:	400a      	ands	r2, r1
 8004a82:	00d2      	lsls	r2, r2, #3
 8004a84:	4093      	lsls	r3, r2
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d136      	bne.n	8004afa <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004a8c:	4a41      	ldr	r2, [pc, #260]	; (8004b94 <HAL_GPIO_DeInit+0x19c>)
 8004a8e:	2380      	movs	r3, #128	; 0x80
 8004a90:	58d3      	ldr	r3, [r2, r3]
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	43d2      	mvns	r2, r2
 8004a96:	493f      	ldr	r1, [pc, #252]	; (8004b94 <HAL_GPIO_DeInit+0x19c>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	2280      	movs	r2, #128	; 0x80
 8004a9c:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8004a9e:	4a3d      	ldr	r2, [pc, #244]	; (8004b94 <HAL_GPIO_DeInit+0x19c>)
 8004aa0:	2384      	movs	r3, #132	; 0x84
 8004aa2:	58d3      	ldr	r3, [r2, r3]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	43d2      	mvns	r2, r2
 8004aa8:	493a      	ldr	r1, [pc, #232]	; (8004b94 <HAL_GPIO_DeInit+0x19c>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2284      	movs	r2, #132	; 0x84
 8004aae:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004ab0:	4b38      	ldr	r3, [pc, #224]	; (8004b94 <HAL_GPIO_DeInit+0x19c>)
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	43d9      	mvns	r1, r3
 8004ab8:	4b36      	ldr	r3, [pc, #216]	; (8004b94 <HAL_GPIO_DeInit+0x19c>)
 8004aba:	400a      	ands	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004abe:	4b35      	ldr	r3, [pc, #212]	; (8004b94 <HAL_GPIO_DeInit+0x19c>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	43d9      	mvns	r1, r3
 8004ac6:	4b33      	ldr	r3, [pc, #204]	; (8004b94 <HAL_GPIO_DeInit+0x19c>)
 8004ac8:	400a      	ands	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2203      	movs	r2, #3
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	220f      	movs	r2, #15
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	0013      	movs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004adc:	4a2d      	ldr	r2, [pc, #180]	; (8004b94 <HAL_GPIO_DeInit+0x19c>)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	089b      	lsrs	r3, r3, #2
 8004ae2:	3318      	adds	r3, #24
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	589a      	ldr	r2, [r3, r2]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	43d9      	mvns	r1, r3
 8004aec:	4829      	ldr	r0, [pc, #164]	; (8004b94 <HAL_GPIO_DeInit+0x19c>)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	089b      	lsrs	r3, r3, #2
 8004af2:	400a      	ands	r2, r1
 8004af4:	3318      	adds	r3, #24
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	2103      	movs	r1, #3
 8004b04:	4099      	lsls	r1, r3
 8004b06:	000b      	movs	r3, r1
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	08da      	lsrs	r2, r3, #3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3208      	adds	r2, #8
 8004b16:	0092      	lsls	r2, r2, #2
 8004b18:	58d3      	ldr	r3, [r2, r3]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	2107      	movs	r1, #7
 8004b1e:	400a      	ands	r2, r1
 8004b20:	0092      	lsls	r2, r2, #2
 8004b22:	210f      	movs	r1, #15
 8004b24:	4091      	lsls	r1, r2
 8004b26:	000a      	movs	r2, r1
 8004b28:	43d1      	mvns	r1, r2
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	08d2      	lsrs	r2, r2, #3
 8004b2e:	4019      	ands	r1, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3208      	adds	r2, #8
 8004b34:	0092      	lsls	r2, r2, #2
 8004b36:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	0052      	lsls	r2, r2, #1
 8004b40:	2103      	movs	r1, #3
 8004b42:	4091      	lsls	r1, r2
 8004b44:	000a      	movs	r2, r1
 8004b46:	43d2      	mvns	r2, r2
 8004b48:	401a      	ands	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2101      	movs	r1, #1
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4091      	lsls	r1, r2
 8004b58:	000a      	movs	r2, r1
 8004b5a:	43d2      	mvns	r2, r2
 8004b5c:	401a      	ands	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	0052      	lsls	r2, r2, #1
 8004b6a:	2103      	movs	r1, #3
 8004b6c:	4091      	lsls	r1, r2
 8004b6e:	000a      	movs	r2, r1
 8004b70:	43d2      	mvns	r2, r2
 8004b72:	401a      	ands	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	40da      	lsrs	r2, r3
 8004b84:	1e13      	subs	r3, r2, #0
 8004b86:	d000      	beq.n	8004b8a <HAL_GPIO_DeInit+0x192>
 8004b88:	e73e      	b.n	8004a08 <HAL_GPIO_DeInit+0x10>
  }
}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	46c0      	nop			; (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b006      	add	sp, #24
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40021800 	.word	0x40021800
 8004b98:	50000400 	.word	0x50000400
 8004b9c:	50000800 	.word	0x50000800
 8004ba0:	50000c00 	.word	0x50000c00
 8004ba4:	50001000 	.word	0x50001000

08004ba8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	000a      	movs	r2, r1
 8004bb2:	1cbb      	adds	r3, r7, #2
 8004bb4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	1cba      	adds	r2, r7, #2
 8004bbc:	8812      	ldrh	r2, [r2, #0]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004bc2:	230f      	movs	r3, #15
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]
 8004bca:	e003      	b.n	8004bd4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bcc:	230f      	movs	r3, #15
 8004bce:	18fb      	adds	r3, r7, r3
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004bd4:	230f      	movs	r3, #15
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	781b      	ldrb	r3, [r3, #0]
}
 8004bda:	0018      	movs	r0, r3
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b004      	add	sp, #16
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	0008      	movs	r0, r1
 8004bec:	0011      	movs	r1, r2
 8004bee:	1cbb      	adds	r3, r7, #2
 8004bf0:	1c02      	adds	r2, r0, #0
 8004bf2:	801a      	strh	r2, [r3, #0]
 8004bf4:	1c7b      	adds	r3, r7, #1
 8004bf6:	1c0a      	adds	r2, r1, #0
 8004bf8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bfa:	1c7b      	adds	r3, r7, #1
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d004      	beq.n	8004c0c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c02:	1cbb      	adds	r3, r7, #2
 8004c04:	881a      	ldrh	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c0a:	e003      	b.n	8004c14 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c0c:	1cbb      	adds	r3, r7, #2
 8004c0e:	881a      	ldrh	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c14:	46c0      	nop			; (mov r8, r8)
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b002      	add	sp, #8
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	0002      	movs	r2, r0
 8004c24:	1dbb      	adds	r3, r7, #6
 8004c26:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004c28:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	1dba      	adds	r2, r7, #6
 8004c2e:	8812      	ldrh	r2, [r2, #0]
 8004c30:	4013      	ands	r3, r2
 8004c32:	d008      	beq.n	8004c46 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004c34:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c36:	1dba      	adds	r2, r7, #6
 8004c38:	8812      	ldrh	r2, [r2, #0]
 8004c3a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004c3c:	1dbb      	adds	r3, r7, #6
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	0018      	movs	r0, r3
 8004c42:	f7fe fff7 	bl	8003c34 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004c46:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	1dba      	adds	r2, r7, #6
 8004c4c:	8812      	ldrh	r2, [r2, #0]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d008      	beq.n	8004c64 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004c52:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c54:	1dba      	adds	r2, r7, #6
 8004c56:	8812      	ldrh	r2, [r2, #0]
 8004c58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004c5a:	1dbb      	adds	r3, r7, #6
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f000 f806 	bl	8004c70 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004c64:	46c0      	nop			; (mov r8, r8)
 8004c66:	46bd      	mov	sp, r7
 8004c68:	b002      	add	sp, #8
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021800 	.word	0x40021800

08004c70 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	0002      	movs	r2, r0
 8004c78:	1dbb      	adds	r3, r7, #6
 8004c7a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004c7c:	46c0      	nop			; (mov r8, r8)
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b002      	add	sp, #8
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c88:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <HAL_PWR_EnableBkUpAccess+0x18>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <HAL_PWR_EnableBkUpAccess+0x18>)
 8004c8e:	2180      	movs	r1, #128	; 0x80
 8004c90:	0049      	lsls	r1, r1, #1
 8004c92:	430a      	orrs	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]
}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40007000 	.word	0x40007000

08004ca0 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	000a      	movs	r2, r1
 8004caa:	1cfb      	adds	r3, r7, #3
 8004cac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d009      	beq.n	8004cc8 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004cb4:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <HAL_PWR_EnterSTOPMode+0x68>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2207      	movs	r2, #7
 8004cba:	4393      	bics	r3, r2
 8004cbc:	001a      	movs	r2, r3
 8004cbe:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <HAL_PWR_EnterSTOPMode+0x68>)
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	e005      	b.n	8004cd4 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <HAL_PWR_EnterSTOPMode+0x68>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <HAL_PWR_EnterSTOPMode+0x68>)
 8004cce:	2107      	movs	r1, #7
 8004cd0:	438a      	bics	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004cd4:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004cda:	2104      	movs	r1, #4
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004ce0:	1cfb      	adds	r3, r7, #3
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004ce8:	bf30      	wfi
 8004cea:	e002      	b.n	8004cf2 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004cec:	bf40      	sev
    __WFE();
 8004cee:	bf20      	wfe
    __WFE();
 8004cf0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004cf2:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004cf8:	2104      	movs	r1, #4
 8004cfa:	438a      	bics	r2, r1
 8004cfc:	611a      	str	r2, [r3, #16]
}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b002      	add	sp, #8
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	40007000 	.word	0x40007000
 8004d0c:	e000ed00 	.word	0xe000ed00

08004d10 <HAL_PWR_EnterSTANDBYMode>:
  *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @note   Sram content can be kept setting RRS through HAL_PWREx_EnableSRAMRetention()
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 8004d14:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2207      	movs	r2, #7
 8004d1a:	4393      	bics	r3, r2
 8004d1c:	001a      	movs	r2, r3
 8004d1e:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004d20:	2103      	movs	r1, #3
 8004d22:	430a      	orrs	r2, r1
 8004d24:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004d26:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004d2c:	2104      	movs	r1, #4
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8004d32:	bf30      	wfi
}
 8004d34:	46c0      	nop			; (mov r8, r8)
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	40007000 	.word	0x40007000
 8004d40:	e000ed00 	.word	0xe000ed00

08004d44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004d4c:	4b19      	ldr	r3, [pc, #100]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a19      	ldr	r2, [pc, #100]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	0019      	movs	r1, r3
 8004d56:	4b17      	ldr	r3, [pc, #92]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d11f      	bne.n	8004da8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004d68:	4b14      	ldr	r3, [pc, #80]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	0013      	movs	r3, r2
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	189b      	adds	r3, r3, r2
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	4912      	ldr	r1, [pc, #72]	; (8004dc0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004d76:	0018      	movs	r0, r3
 8004d78:	f7fb f9e0 	bl	800013c <__udivsi3>
 8004d7c:	0003      	movs	r3, r0
 8004d7e:	3301      	adds	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d82:	e008      	b.n	8004d96 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	e001      	b.n	8004d96 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e009      	b.n	8004daa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d96:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	401a      	ands	r2, r3
 8004da0:	2380      	movs	r3, #128	; 0x80
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d0ed      	beq.n	8004d84 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	0018      	movs	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b004      	add	sp, #16
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	40007000 	.word	0x40007000
 8004db8:	fffff9ff 	.word	0xfffff9ff
 8004dbc:	20000010 	.word	0x20000010
 8004dc0:	000f4240 	.word	0x000f4240

08004dc4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004dc8:	4b03      	ldr	r3, [pc, #12]	; (8004dd8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	23e0      	movs	r3, #224	; 0xe0
 8004dce:	01db      	lsls	r3, r3, #7
 8004dd0:	4013      	ands	r3, r2
}
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40021000 	.word	0x40021000

08004ddc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d102      	bne.n	8004df0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f000 fb50 	bl	8005490 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2201      	movs	r2, #1
 8004df6:	4013      	ands	r3, r2
 8004df8:	d100      	bne.n	8004dfc <HAL_RCC_OscConfig+0x20>
 8004dfa:	e07c      	b.n	8004ef6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dfc:	4bc3      	ldr	r3, [pc, #780]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2238      	movs	r2, #56	; 0x38
 8004e02:	4013      	ands	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e06:	4bc1      	ldr	r3, [pc, #772]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	2203      	movs	r2, #3
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	2b10      	cmp	r3, #16
 8004e14:	d102      	bne.n	8004e1c <HAL_RCC_OscConfig+0x40>
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d002      	beq.n	8004e22 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d10b      	bne.n	8004e3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e22:	4bba      	ldr	r3, [pc, #744]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	2380      	movs	r3, #128	; 0x80
 8004e28:	029b      	lsls	r3, r3, #10
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d062      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x118>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d15e      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e32a      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	2380      	movs	r3, #128	; 0x80
 8004e40:	025b      	lsls	r3, r3, #9
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d107      	bne.n	8004e56 <HAL_RCC_OscConfig+0x7a>
 8004e46:	4bb1      	ldr	r3, [pc, #708]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	4bb0      	ldr	r3, [pc, #704]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004e4c:	2180      	movs	r1, #128	; 0x80
 8004e4e:	0249      	lsls	r1, r1, #9
 8004e50:	430a      	orrs	r2, r1
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	e020      	b.n	8004e98 <HAL_RCC_OscConfig+0xbc>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	23a0      	movs	r3, #160	; 0xa0
 8004e5c:	02db      	lsls	r3, r3, #11
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d10e      	bne.n	8004e80 <HAL_RCC_OscConfig+0xa4>
 8004e62:	4baa      	ldr	r3, [pc, #680]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4ba9      	ldr	r3, [pc, #676]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004e68:	2180      	movs	r1, #128	; 0x80
 8004e6a:	02c9      	lsls	r1, r1, #11
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	4ba6      	ldr	r3, [pc, #664]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	4ba5      	ldr	r3, [pc, #660]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004e76:	2180      	movs	r1, #128	; 0x80
 8004e78:	0249      	lsls	r1, r1, #9
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	e00b      	b.n	8004e98 <HAL_RCC_OscConfig+0xbc>
 8004e80:	4ba2      	ldr	r3, [pc, #648]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	4ba1      	ldr	r3, [pc, #644]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004e86:	49a2      	ldr	r1, [pc, #648]	; (8005110 <HAL_RCC_OscConfig+0x334>)
 8004e88:	400a      	ands	r2, r1
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	4b9f      	ldr	r3, [pc, #636]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b9e      	ldr	r3, [pc, #632]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004e92:	49a0      	ldr	r1, [pc, #640]	; (8005114 <HAL_RCC_OscConfig+0x338>)
 8004e94:	400a      	ands	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d014      	beq.n	8004eca <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea0:	f7ff faea 	bl	8004478 <HAL_GetTick>
 8004ea4:	0003      	movs	r3, r0
 8004ea6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eaa:	f7ff fae5 	bl	8004478 <HAL_GetTick>
 8004eae:	0002      	movs	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b64      	cmp	r3, #100	; 0x64
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e2e9      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ebc:	4b93      	ldr	r3, [pc, #588]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	029b      	lsls	r3, r3, #10
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d0f0      	beq.n	8004eaa <HAL_RCC_OscConfig+0xce>
 8004ec8:	e015      	b.n	8004ef6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eca:	f7ff fad5 	bl	8004478 <HAL_GetTick>
 8004ece:	0003      	movs	r3, r0
 8004ed0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ed4:	f7ff fad0 	bl	8004478 <HAL_GetTick>
 8004ed8:	0002      	movs	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b64      	cmp	r3, #100	; 0x64
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e2d4      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ee6:	4b89      	ldr	r3, [pc, #548]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	2380      	movs	r3, #128	; 0x80
 8004eec:	029b      	lsls	r3, r3, #10
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d1f0      	bne.n	8004ed4 <HAL_RCC_OscConfig+0xf8>
 8004ef2:	e000      	b.n	8004ef6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2202      	movs	r2, #2
 8004efc:	4013      	ands	r3, r2
 8004efe:	d100      	bne.n	8004f02 <HAL_RCC_OscConfig+0x126>
 8004f00:	e099      	b.n	8005036 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f02:	4b82      	ldr	r3, [pc, #520]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2238      	movs	r2, #56	; 0x38
 8004f08:	4013      	ands	r3, r2
 8004f0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f0c:	4b7f      	ldr	r3, [pc, #508]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	2203      	movs	r2, #3
 8004f12:	4013      	ands	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d102      	bne.n	8004f22 <HAL_RCC_OscConfig+0x146>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d002      	beq.n	8004f28 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d135      	bne.n	8004f94 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f28:	4b78      	ldr	r3, [pc, #480]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	2380      	movs	r3, #128	; 0x80
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	4013      	ands	r3, r2
 8004f32:	d005      	beq.n	8004f40 <HAL_RCC_OscConfig+0x164>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e2a7      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f40:	4b72      	ldr	r3, [pc, #456]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	4a74      	ldr	r2, [pc, #464]	; (8005118 <HAL_RCC_OscConfig+0x33c>)
 8004f46:	4013      	ands	r3, r2
 8004f48:	0019      	movs	r1, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	021a      	lsls	r2, r3, #8
 8004f50:	4b6e      	ldr	r3, [pc, #440]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d112      	bne.n	8004f82 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004f5c:	4b6b      	ldr	r3, [pc, #428]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a6e      	ldr	r2, [pc, #440]	; (800511c <HAL_RCC_OscConfig+0x340>)
 8004f62:	4013      	ands	r3, r2
 8004f64:	0019      	movs	r1, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	4b68      	ldr	r3, [pc, #416]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004f70:	4b66      	ldr	r3, [pc, #408]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	0adb      	lsrs	r3, r3, #11
 8004f76:	2207      	movs	r2, #7
 8004f78:	4013      	ands	r3, r2
 8004f7a:	4a69      	ldr	r2, [pc, #420]	; (8005120 <HAL_RCC_OscConfig+0x344>)
 8004f7c:	40da      	lsrs	r2, r3
 8004f7e:	4b69      	ldr	r3, [pc, #420]	; (8005124 <HAL_RCC_OscConfig+0x348>)
 8004f80:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f82:	4b69      	ldr	r3, [pc, #420]	; (8005128 <HAL_RCC_OscConfig+0x34c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	0018      	movs	r0, r3
 8004f88:	f7ff fa1a 	bl	80043c0 <HAL_InitTick>
 8004f8c:	1e03      	subs	r3, r0, #0
 8004f8e:	d051      	beq.n	8005034 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e27d      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d030      	beq.n	8004ffe <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004f9c:	4b5b      	ldr	r3, [pc, #364]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a5e      	ldr	r2, [pc, #376]	; (800511c <HAL_RCC_OscConfig+0x340>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	0019      	movs	r1, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	4b58      	ldr	r3, [pc, #352]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004fac:	430a      	orrs	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004fb0:	4b56      	ldr	r3, [pc, #344]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4b55      	ldr	r3, [pc, #340]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004fb6:	2180      	movs	r1, #128	; 0x80
 8004fb8:	0049      	lsls	r1, r1, #1
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbe:	f7ff fa5b 	bl	8004478 <HAL_GetTick>
 8004fc2:	0003      	movs	r3, r0
 8004fc4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fc8:	f7ff fa56 	bl	8004478 <HAL_GetTick>
 8004fcc:	0002      	movs	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e25a      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fda:	4b4c      	ldr	r3, [pc, #304]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d0f0      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe6:	4b49      	ldr	r3, [pc, #292]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	4a4b      	ldr	r2, [pc, #300]	; (8005118 <HAL_RCC_OscConfig+0x33c>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	0019      	movs	r1, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	021a      	lsls	r2, r3, #8
 8004ff6:	4b45      	ldr	r3, [pc, #276]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
 8004ffc:	e01b      	b.n	8005036 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004ffe:	4b43      	ldr	r3, [pc, #268]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4b42      	ldr	r3, [pc, #264]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8005004:	4949      	ldr	r1, [pc, #292]	; (800512c <HAL_RCC_OscConfig+0x350>)
 8005006:	400a      	ands	r2, r1
 8005008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500a:	f7ff fa35 	bl	8004478 <HAL_GetTick>
 800500e:	0003      	movs	r3, r0
 8005010:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005014:	f7ff fa30 	bl	8004478 <HAL_GetTick>
 8005018:	0002      	movs	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e234      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005026:	4b39      	ldr	r3, [pc, #228]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	4013      	ands	r3, r2
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0x238>
 8005032:	e000      	b.n	8005036 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005034:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2208      	movs	r2, #8
 800503c:	4013      	ands	r3, r2
 800503e:	d047      	beq.n	80050d0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005040:	4b32      	ldr	r3, [pc, #200]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2238      	movs	r2, #56	; 0x38
 8005046:	4013      	ands	r3, r2
 8005048:	2b18      	cmp	r3, #24
 800504a:	d10a      	bne.n	8005062 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800504c:	4b2f      	ldr	r3, [pc, #188]	; (800510c <HAL_RCC_OscConfig+0x330>)
 800504e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005050:	2202      	movs	r2, #2
 8005052:	4013      	ands	r3, r2
 8005054:	d03c      	beq.n	80050d0 <HAL_RCC_OscConfig+0x2f4>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d138      	bne.n	80050d0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e216      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d019      	beq.n	800509e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800506a:	4b28      	ldr	r3, [pc, #160]	; (800510c <HAL_RCC_OscConfig+0x330>)
 800506c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800506e:	4b27      	ldr	r3, [pc, #156]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8005070:	2101      	movs	r1, #1
 8005072:	430a      	orrs	r2, r1
 8005074:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005076:	f7ff f9ff 	bl	8004478 <HAL_GetTick>
 800507a:	0003      	movs	r3, r0
 800507c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005080:	f7ff f9fa 	bl	8004478 <HAL_GetTick>
 8005084:	0002      	movs	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e1fe      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005092:	4b1e      	ldr	r3, [pc, #120]	; (800510c <HAL_RCC_OscConfig+0x330>)
 8005094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005096:	2202      	movs	r2, #2
 8005098:	4013      	ands	r3, r2
 800509a:	d0f1      	beq.n	8005080 <HAL_RCC_OscConfig+0x2a4>
 800509c:	e018      	b.n	80050d0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800509e:	4b1b      	ldr	r3, [pc, #108]	; (800510c <HAL_RCC_OscConfig+0x330>)
 80050a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80050a2:	4b1a      	ldr	r3, [pc, #104]	; (800510c <HAL_RCC_OscConfig+0x330>)
 80050a4:	2101      	movs	r1, #1
 80050a6:	438a      	bics	r2, r1
 80050a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050aa:	f7ff f9e5 	bl	8004478 <HAL_GetTick>
 80050ae:	0003      	movs	r3, r0
 80050b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b4:	f7ff f9e0 	bl	8004478 <HAL_GetTick>
 80050b8:	0002      	movs	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e1e4      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050c6:	4b11      	ldr	r3, [pc, #68]	; (800510c <HAL_RCC_OscConfig+0x330>)
 80050c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ca:	2202      	movs	r2, #2
 80050cc:	4013      	ands	r3, r2
 80050ce:	d1f1      	bne.n	80050b4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2204      	movs	r2, #4
 80050d6:	4013      	ands	r3, r2
 80050d8:	d100      	bne.n	80050dc <HAL_RCC_OscConfig+0x300>
 80050da:	e0c7      	b.n	800526c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050dc:	231f      	movs	r3, #31
 80050de:	18fb      	adds	r3, r7, r3
 80050e0:	2200      	movs	r2, #0
 80050e2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80050e4:	4b09      	ldr	r3, [pc, #36]	; (800510c <HAL_RCC_OscConfig+0x330>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2238      	movs	r2, #56	; 0x38
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b20      	cmp	r3, #32
 80050ee:	d11f      	bne.n	8005130 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80050f0:	4b06      	ldr	r3, [pc, #24]	; (800510c <HAL_RCC_OscConfig+0x330>)
 80050f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f4:	2202      	movs	r2, #2
 80050f6:	4013      	ands	r3, r2
 80050f8:	d100      	bne.n	80050fc <HAL_RCC_OscConfig+0x320>
 80050fa:	e0b7      	b.n	800526c <HAL_RCC_OscConfig+0x490>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d000      	beq.n	8005106 <HAL_RCC_OscConfig+0x32a>
 8005104:	e0b2      	b.n	800526c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e1c2      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
 800510a:	46c0      	nop			; (mov r8, r8)
 800510c:	40021000 	.word	0x40021000
 8005110:	fffeffff 	.word	0xfffeffff
 8005114:	fffbffff 	.word	0xfffbffff
 8005118:	ffff80ff 	.word	0xffff80ff
 800511c:	ffffc7ff 	.word	0xffffc7ff
 8005120:	00f42400 	.word	0x00f42400
 8005124:	20000010 	.word	0x20000010
 8005128:	20000014 	.word	0x20000014
 800512c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005130:	4bb5      	ldr	r3, [pc, #724]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 8005132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	055b      	lsls	r3, r3, #21
 8005138:	4013      	ands	r3, r2
 800513a:	d101      	bne.n	8005140 <HAL_RCC_OscConfig+0x364>
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <HAL_RCC_OscConfig+0x366>
 8005140:	2300      	movs	r3, #0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d011      	beq.n	800516a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005146:	4bb0      	ldr	r3, [pc, #704]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 8005148:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800514a:	4baf      	ldr	r3, [pc, #700]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 800514c:	2180      	movs	r1, #128	; 0x80
 800514e:	0549      	lsls	r1, r1, #21
 8005150:	430a      	orrs	r2, r1
 8005152:	63da      	str	r2, [r3, #60]	; 0x3c
 8005154:	4bac      	ldr	r3, [pc, #688]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 8005156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	055b      	lsls	r3, r3, #21
 800515c:	4013      	ands	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005162:	231f      	movs	r3, #31
 8005164:	18fb      	adds	r3, r7, r3
 8005166:	2201      	movs	r2, #1
 8005168:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800516a:	4ba8      	ldr	r3, [pc, #672]	; (800540c <HAL_RCC_OscConfig+0x630>)
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	2380      	movs	r3, #128	; 0x80
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	4013      	ands	r3, r2
 8005174:	d11a      	bne.n	80051ac <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005176:	4ba5      	ldr	r3, [pc, #660]	; (800540c <HAL_RCC_OscConfig+0x630>)
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	4ba4      	ldr	r3, [pc, #656]	; (800540c <HAL_RCC_OscConfig+0x630>)
 800517c:	2180      	movs	r1, #128	; 0x80
 800517e:	0049      	lsls	r1, r1, #1
 8005180:	430a      	orrs	r2, r1
 8005182:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005184:	f7ff f978 	bl	8004478 <HAL_GetTick>
 8005188:	0003      	movs	r3, r0
 800518a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800518e:	f7ff f973 	bl	8004478 <HAL_GetTick>
 8005192:	0002      	movs	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e177      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051a0:	4b9a      	ldr	r3, [pc, #616]	; (800540c <HAL_RCC_OscConfig+0x630>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	2380      	movs	r3, #128	; 0x80
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	4013      	ands	r3, r2
 80051aa:	d0f0      	beq.n	800518e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d106      	bne.n	80051c2 <HAL_RCC_OscConfig+0x3e6>
 80051b4:	4b94      	ldr	r3, [pc, #592]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80051b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051b8:	4b93      	ldr	r3, [pc, #588]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80051ba:	2101      	movs	r1, #1
 80051bc:	430a      	orrs	r2, r1
 80051be:	65da      	str	r2, [r3, #92]	; 0x5c
 80051c0:	e01c      	b.n	80051fc <HAL_RCC_OscConfig+0x420>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b05      	cmp	r3, #5
 80051c8:	d10c      	bne.n	80051e4 <HAL_RCC_OscConfig+0x408>
 80051ca:	4b8f      	ldr	r3, [pc, #572]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80051cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051ce:	4b8e      	ldr	r3, [pc, #568]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80051d0:	2104      	movs	r1, #4
 80051d2:	430a      	orrs	r2, r1
 80051d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80051d6:	4b8c      	ldr	r3, [pc, #560]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80051d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051da:	4b8b      	ldr	r3, [pc, #556]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80051dc:	2101      	movs	r1, #1
 80051de:	430a      	orrs	r2, r1
 80051e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80051e2:	e00b      	b.n	80051fc <HAL_RCC_OscConfig+0x420>
 80051e4:	4b88      	ldr	r3, [pc, #544]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80051e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051e8:	4b87      	ldr	r3, [pc, #540]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80051ea:	2101      	movs	r1, #1
 80051ec:	438a      	bics	r2, r1
 80051ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80051f0:	4b85      	ldr	r3, [pc, #532]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80051f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051f4:	4b84      	ldr	r3, [pc, #528]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80051f6:	2104      	movs	r1, #4
 80051f8:	438a      	bics	r2, r1
 80051fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d014      	beq.n	800522e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005204:	f7ff f938 	bl	8004478 <HAL_GetTick>
 8005208:	0003      	movs	r3, r0
 800520a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800520c:	e009      	b.n	8005222 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520e:	f7ff f933 	bl	8004478 <HAL_GetTick>
 8005212:	0002      	movs	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	4a7d      	ldr	r2, [pc, #500]	; (8005410 <HAL_RCC_OscConfig+0x634>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e136      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005222:	4b79      	ldr	r3, [pc, #484]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 8005224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005226:	2202      	movs	r2, #2
 8005228:	4013      	ands	r3, r2
 800522a:	d0f0      	beq.n	800520e <HAL_RCC_OscConfig+0x432>
 800522c:	e013      	b.n	8005256 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522e:	f7ff f923 	bl	8004478 <HAL_GetTick>
 8005232:	0003      	movs	r3, r0
 8005234:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005236:	e009      	b.n	800524c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005238:	f7ff f91e 	bl	8004478 <HAL_GetTick>
 800523c:	0002      	movs	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	4a73      	ldr	r2, [pc, #460]	; (8005410 <HAL_RCC_OscConfig+0x634>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e121      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800524c:	4b6e      	ldr	r3, [pc, #440]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 800524e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005250:	2202      	movs	r2, #2
 8005252:	4013      	ands	r3, r2
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005256:	231f      	movs	r3, #31
 8005258:	18fb      	adds	r3, r7, r3
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d105      	bne.n	800526c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005260:	4b69      	ldr	r3, [pc, #420]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 8005262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005264:	4b68      	ldr	r3, [pc, #416]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 8005266:	496b      	ldr	r1, [pc, #428]	; (8005414 <HAL_RCC_OscConfig+0x638>)
 8005268:	400a      	ands	r2, r1
 800526a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2220      	movs	r2, #32
 8005272:	4013      	ands	r3, r2
 8005274:	d039      	beq.n	80052ea <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01b      	beq.n	80052b6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800527e:	4b62      	ldr	r3, [pc, #392]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b61      	ldr	r3, [pc, #388]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 8005284:	2180      	movs	r1, #128	; 0x80
 8005286:	03c9      	lsls	r1, r1, #15
 8005288:	430a      	orrs	r2, r1
 800528a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528c:	f7ff f8f4 	bl	8004478 <HAL_GetTick>
 8005290:	0003      	movs	r3, r0
 8005292:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005296:	f7ff f8ef 	bl	8004478 <HAL_GetTick>
 800529a:	0002      	movs	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e0f3      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80052a8:	4b57      	ldr	r3, [pc, #348]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	041b      	lsls	r3, r3, #16
 80052b0:	4013      	ands	r3, r2
 80052b2:	d0f0      	beq.n	8005296 <HAL_RCC_OscConfig+0x4ba>
 80052b4:	e019      	b.n	80052ea <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052b6:	4b54      	ldr	r3, [pc, #336]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b53      	ldr	r3, [pc, #332]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80052bc:	4956      	ldr	r1, [pc, #344]	; (8005418 <HAL_RCC_OscConfig+0x63c>)
 80052be:	400a      	ands	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c2:	f7ff f8d9 	bl	8004478 <HAL_GetTick>
 80052c6:	0003      	movs	r3, r0
 80052c8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052cc:	f7ff f8d4 	bl	8004478 <HAL_GetTick>
 80052d0:	0002      	movs	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e0d8      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80052de:	4b4a      	ldr	r3, [pc, #296]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	2380      	movs	r3, #128	; 0x80
 80052e4:	041b      	lsls	r3, r3, #16
 80052e6:	4013      	ands	r3, r2
 80052e8:	d1f0      	bne.n	80052cc <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d100      	bne.n	80052f4 <HAL_RCC_OscConfig+0x518>
 80052f2:	e0cc      	b.n	800548e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052f4:	4b44      	ldr	r3, [pc, #272]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2238      	movs	r2, #56	; 0x38
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d100      	bne.n	8005302 <HAL_RCC_OscConfig+0x526>
 8005300:	e07b      	b.n	80053fa <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d156      	bne.n	80053b8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800530a:	4b3f      	ldr	r3, [pc, #252]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	4b3e      	ldr	r3, [pc, #248]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 8005310:	4942      	ldr	r1, [pc, #264]	; (800541c <HAL_RCC_OscConfig+0x640>)
 8005312:	400a      	ands	r2, r1
 8005314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005316:	f7ff f8af 	bl	8004478 <HAL_GetTick>
 800531a:	0003      	movs	r3, r0
 800531c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005320:	f7ff f8aa 	bl	8004478 <HAL_GetTick>
 8005324:	0002      	movs	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e0ae      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005332:	4b35      	ldr	r3, [pc, #212]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	2380      	movs	r3, #128	; 0x80
 8005338:	049b      	lsls	r3, r3, #18
 800533a:	4013      	ands	r3, r2
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800533e:	4b32      	ldr	r3, [pc, #200]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	4a37      	ldr	r2, [pc, #220]	; (8005420 <HAL_RCC_OscConfig+0x644>)
 8005344:	4013      	ands	r3, r2
 8005346:	0019      	movs	r1, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	431a      	orrs	r2, r3
 800536c:	4b26      	ldr	r3, [pc, #152]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 800536e:	430a      	orrs	r2, r1
 8005370:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005372:	4b25      	ldr	r3, [pc, #148]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	4b24      	ldr	r3, [pc, #144]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 8005378:	2180      	movs	r1, #128	; 0x80
 800537a:	0449      	lsls	r1, r1, #17
 800537c:	430a      	orrs	r2, r1
 800537e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005380:	4b21      	ldr	r3, [pc, #132]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	4b20      	ldr	r3, [pc, #128]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 8005386:	2180      	movs	r1, #128	; 0x80
 8005388:	0549      	lsls	r1, r1, #21
 800538a:	430a      	orrs	r2, r1
 800538c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538e:	f7ff f873 	bl	8004478 <HAL_GetTick>
 8005392:	0003      	movs	r3, r0
 8005394:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005398:	f7ff f86e 	bl	8004478 <HAL_GetTick>
 800539c:	0002      	movs	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e072      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053aa:	4b17      	ldr	r3, [pc, #92]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	2380      	movs	r3, #128	; 0x80
 80053b0:	049b      	lsls	r3, r3, #18
 80053b2:	4013      	ands	r3, r2
 80053b4:	d0f0      	beq.n	8005398 <HAL_RCC_OscConfig+0x5bc>
 80053b6:	e06a      	b.n	800548e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b8:	4b13      	ldr	r3, [pc, #76]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	4b12      	ldr	r3, [pc, #72]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80053be:	4917      	ldr	r1, [pc, #92]	; (800541c <HAL_RCC_OscConfig+0x640>)
 80053c0:	400a      	ands	r2, r1
 80053c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c4:	f7ff f858 	bl	8004478 <HAL_GetTick>
 80053c8:	0003      	movs	r3, r0
 80053ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ce:	f7ff f853 	bl	8004478 <HAL_GetTick>
 80053d2:	0002      	movs	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e057      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053e0:	4b09      	ldr	r3, [pc, #36]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	2380      	movs	r3, #128	; 0x80
 80053e6:	049b      	lsls	r3, r3, #18
 80053e8:	4013      	ands	r3, r2
 80053ea:	d1f0      	bne.n	80053ce <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	4b05      	ldr	r3, [pc, #20]	; (8005408 <HAL_RCC_OscConfig+0x62c>)
 80053f2:	490c      	ldr	r1, [pc, #48]	; (8005424 <HAL_RCC_OscConfig+0x648>)
 80053f4:	400a      	ands	r2, r1
 80053f6:	60da      	str	r2, [r3, #12]
 80053f8:	e049      	b.n	800548e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d112      	bne.n	8005428 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e044      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	40021000 	.word	0x40021000
 800540c:	40007000 	.word	0x40007000
 8005410:	00001388 	.word	0x00001388
 8005414:	efffffff 	.word	0xefffffff
 8005418:	ffbfffff 	.word	0xffbfffff
 800541c:	feffffff 	.word	0xfeffffff
 8005420:	11c1808c 	.word	0x11c1808c
 8005424:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005428:	4b1b      	ldr	r3, [pc, #108]	; (8005498 <HAL_RCC_OscConfig+0x6bc>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2203      	movs	r2, #3
 8005432:	401a      	ands	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	429a      	cmp	r2, r3
 800543a:	d126      	bne.n	800548a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2270      	movs	r2, #112	; 0x70
 8005440:	401a      	ands	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005446:	429a      	cmp	r2, r3
 8005448:	d11f      	bne.n	800548a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	23fe      	movs	r3, #254	; 0xfe
 800544e:	01db      	lsls	r3, r3, #7
 8005450:	401a      	ands	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005458:	429a      	cmp	r2, r3
 800545a:	d116      	bne.n	800548a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	23f8      	movs	r3, #248	; 0xf8
 8005460:	039b      	lsls	r3, r3, #14
 8005462:	401a      	ands	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005468:	429a      	cmp	r2, r3
 800546a:	d10e      	bne.n	800548a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	23e0      	movs	r3, #224	; 0xe0
 8005470:	051b      	lsls	r3, r3, #20
 8005472:	401a      	ands	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005478:	429a      	cmp	r2, r3
 800547a:	d106      	bne.n	800548a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	0f5b      	lsrs	r3, r3, #29
 8005480:	075a      	lsls	r2, r3, #29
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005486:	429a      	cmp	r2, r3
 8005488:	d001      	beq.n	800548e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	0018      	movs	r0, r3
 8005492:	46bd      	mov	sp, r7
 8005494:	b008      	add	sp, #32
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40021000 	.word	0x40021000

0800549c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0e9      	b.n	8005684 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054b0:	4b76      	ldr	r3, [pc, #472]	; (800568c <HAL_RCC_ClockConfig+0x1f0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2207      	movs	r2, #7
 80054b6:	4013      	ands	r3, r2
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d91e      	bls.n	80054fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054be:	4b73      	ldr	r3, [pc, #460]	; (800568c <HAL_RCC_ClockConfig+0x1f0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2207      	movs	r2, #7
 80054c4:	4393      	bics	r3, r2
 80054c6:	0019      	movs	r1, r3
 80054c8:	4b70      	ldr	r3, [pc, #448]	; (800568c <HAL_RCC_ClockConfig+0x1f0>)
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054d0:	f7fe ffd2 	bl	8004478 <HAL_GetTick>
 80054d4:	0003      	movs	r3, r0
 80054d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054d8:	e009      	b.n	80054ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054da:	f7fe ffcd 	bl	8004478 <HAL_GetTick>
 80054de:	0002      	movs	r2, r0
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	4a6a      	ldr	r2, [pc, #424]	; (8005690 <HAL_RCC_ClockConfig+0x1f4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e0ca      	b.n	8005684 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054ee:	4b67      	ldr	r3, [pc, #412]	; (800568c <HAL_RCC_ClockConfig+0x1f0>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2207      	movs	r2, #7
 80054f4:	4013      	ands	r3, r2
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d1ee      	bne.n	80054da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2202      	movs	r2, #2
 8005502:	4013      	ands	r3, r2
 8005504:	d015      	beq.n	8005532 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2204      	movs	r2, #4
 800550c:	4013      	ands	r3, r2
 800550e:	d006      	beq.n	800551e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005510:	4b60      	ldr	r3, [pc, #384]	; (8005694 <HAL_RCC_ClockConfig+0x1f8>)
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	4b5f      	ldr	r3, [pc, #380]	; (8005694 <HAL_RCC_ClockConfig+0x1f8>)
 8005516:	21e0      	movs	r1, #224	; 0xe0
 8005518:	01c9      	lsls	r1, r1, #7
 800551a:	430a      	orrs	r2, r1
 800551c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800551e:	4b5d      	ldr	r3, [pc, #372]	; (8005694 <HAL_RCC_ClockConfig+0x1f8>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	4a5d      	ldr	r2, [pc, #372]	; (8005698 <HAL_RCC_ClockConfig+0x1fc>)
 8005524:	4013      	ands	r3, r2
 8005526:	0019      	movs	r1, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	4b59      	ldr	r3, [pc, #356]	; (8005694 <HAL_RCC_ClockConfig+0x1f8>)
 800552e:	430a      	orrs	r2, r1
 8005530:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2201      	movs	r2, #1
 8005538:	4013      	ands	r3, r2
 800553a:	d057      	beq.n	80055ec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d107      	bne.n	8005554 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005544:	4b53      	ldr	r3, [pc, #332]	; (8005694 <HAL_RCC_ClockConfig+0x1f8>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	2380      	movs	r3, #128	; 0x80
 800554a:	029b      	lsls	r3, r3, #10
 800554c:	4013      	ands	r3, r2
 800554e:	d12b      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e097      	b.n	8005684 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b02      	cmp	r3, #2
 800555a:	d107      	bne.n	800556c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800555c:	4b4d      	ldr	r3, [pc, #308]	; (8005694 <HAL_RCC_ClockConfig+0x1f8>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	2380      	movs	r3, #128	; 0x80
 8005562:	049b      	lsls	r3, r3, #18
 8005564:	4013      	ands	r3, r2
 8005566:	d11f      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e08b      	b.n	8005684 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d107      	bne.n	8005584 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005574:	4b47      	ldr	r3, [pc, #284]	; (8005694 <HAL_RCC_ClockConfig+0x1f8>)
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	2380      	movs	r3, #128	; 0x80
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4013      	ands	r3, r2
 800557e:	d113      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e07f      	b.n	8005684 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d106      	bne.n	800559a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800558c:	4b41      	ldr	r3, [pc, #260]	; (8005694 <HAL_RCC_ClockConfig+0x1f8>)
 800558e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005590:	2202      	movs	r2, #2
 8005592:	4013      	ands	r3, r2
 8005594:	d108      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e074      	b.n	8005684 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800559a:	4b3e      	ldr	r3, [pc, #248]	; (8005694 <HAL_RCC_ClockConfig+0x1f8>)
 800559c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559e:	2202      	movs	r2, #2
 80055a0:	4013      	ands	r3, r2
 80055a2:	d101      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e06d      	b.n	8005684 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055a8:	4b3a      	ldr	r3, [pc, #232]	; (8005694 <HAL_RCC_ClockConfig+0x1f8>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2207      	movs	r2, #7
 80055ae:	4393      	bics	r3, r2
 80055b0:	0019      	movs	r1, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	4b37      	ldr	r3, [pc, #220]	; (8005694 <HAL_RCC_ClockConfig+0x1f8>)
 80055b8:	430a      	orrs	r2, r1
 80055ba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055bc:	f7fe ff5c 	bl	8004478 <HAL_GetTick>
 80055c0:	0003      	movs	r3, r0
 80055c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c4:	e009      	b.n	80055da <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c6:	f7fe ff57 	bl	8004478 <HAL_GetTick>
 80055ca:	0002      	movs	r2, r0
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	4a2f      	ldr	r2, [pc, #188]	; (8005690 <HAL_RCC_ClockConfig+0x1f4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e054      	b.n	8005684 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055da:	4b2e      	ldr	r3, [pc, #184]	; (8005694 <HAL_RCC_ClockConfig+0x1f8>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	2238      	movs	r2, #56	; 0x38
 80055e0:	401a      	ands	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d1ec      	bne.n	80055c6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055ec:	4b27      	ldr	r3, [pc, #156]	; (800568c <HAL_RCC_ClockConfig+0x1f0>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2207      	movs	r2, #7
 80055f2:	4013      	ands	r3, r2
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d21e      	bcs.n	8005638 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fa:	4b24      	ldr	r3, [pc, #144]	; (800568c <HAL_RCC_ClockConfig+0x1f0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2207      	movs	r2, #7
 8005600:	4393      	bics	r3, r2
 8005602:	0019      	movs	r1, r3
 8005604:	4b21      	ldr	r3, [pc, #132]	; (800568c <HAL_RCC_ClockConfig+0x1f0>)
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800560c:	f7fe ff34 	bl	8004478 <HAL_GetTick>
 8005610:	0003      	movs	r3, r0
 8005612:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005614:	e009      	b.n	800562a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005616:	f7fe ff2f 	bl	8004478 <HAL_GetTick>
 800561a:	0002      	movs	r2, r0
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	4a1b      	ldr	r2, [pc, #108]	; (8005690 <HAL_RCC_ClockConfig+0x1f4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e02c      	b.n	8005684 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800562a:	4b18      	ldr	r3, [pc, #96]	; (800568c <HAL_RCC_ClockConfig+0x1f0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2207      	movs	r2, #7
 8005630:	4013      	ands	r3, r2
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d1ee      	bne.n	8005616 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2204      	movs	r2, #4
 800563e:	4013      	ands	r3, r2
 8005640:	d009      	beq.n	8005656 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005642:	4b14      	ldr	r3, [pc, #80]	; (8005694 <HAL_RCC_ClockConfig+0x1f8>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	4a15      	ldr	r2, [pc, #84]	; (800569c <HAL_RCC_ClockConfig+0x200>)
 8005648:	4013      	ands	r3, r2
 800564a:	0019      	movs	r1, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	4b10      	ldr	r3, [pc, #64]	; (8005694 <HAL_RCC_ClockConfig+0x1f8>)
 8005652:	430a      	orrs	r2, r1
 8005654:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005656:	f000 f829 	bl	80056ac <HAL_RCC_GetSysClockFreq>
 800565a:	0001      	movs	r1, r0
 800565c:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <HAL_RCC_ClockConfig+0x1f8>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	0a1b      	lsrs	r3, r3, #8
 8005662:	220f      	movs	r2, #15
 8005664:	401a      	ands	r2, r3
 8005666:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <HAL_RCC_ClockConfig+0x204>)
 8005668:	0092      	lsls	r2, r2, #2
 800566a:	58d3      	ldr	r3, [r2, r3]
 800566c:	221f      	movs	r2, #31
 800566e:	4013      	ands	r3, r2
 8005670:	000a      	movs	r2, r1
 8005672:	40da      	lsrs	r2, r3
 8005674:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <HAL_RCC_ClockConfig+0x208>)
 8005676:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005678:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <HAL_RCC_ClockConfig+0x20c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	0018      	movs	r0, r3
 800567e:	f7fe fe9f 	bl	80043c0 <HAL_InitTick>
 8005682:	0003      	movs	r3, r0
}
 8005684:	0018      	movs	r0, r3
 8005686:	46bd      	mov	sp, r7
 8005688:	b004      	add	sp, #16
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40022000 	.word	0x40022000
 8005690:	00001388 	.word	0x00001388
 8005694:	40021000 	.word	0x40021000
 8005698:	fffff0ff 	.word	0xfffff0ff
 800569c:	ffff8fff 	.word	0xffff8fff
 80056a0:	08015a24 	.word	0x08015a24
 80056a4:	20000010 	.word	0x20000010
 80056a8:	20000014 	.word	0x20000014

080056ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056b2:	4b3c      	ldr	r3, [pc, #240]	; (80057a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2238      	movs	r2, #56	; 0x38
 80056b8:	4013      	ands	r3, r2
 80056ba:	d10f      	bne.n	80056dc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80056bc:	4b39      	ldr	r3, [pc, #228]	; (80057a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	0adb      	lsrs	r3, r3, #11
 80056c2:	2207      	movs	r2, #7
 80056c4:	4013      	ands	r3, r2
 80056c6:	2201      	movs	r2, #1
 80056c8:	409a      	lsls	r2, r3
 80056ca:	0013      	movs	r3, r2
 80056cc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80056ce:	6839      	ldr	r1, [r7, #0]
 80056d0:	4835      	ldr	r0, [pc, #212]	; (80057a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80056d2:	f7fa fd33 	bl	800013c <__udivsi3>
 80056d6:	0003      	movs	r3, r0
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	e05d      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056dc:	4b31      	ldr	r3, [pc, #196]	; (80057a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2238      	movs	r2, #56	; 0x38
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d102      	bne.n	80056ee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056e8:	4b30      	ldr	r3, [pc, #192]	; (80057ac <HAL_RCC_GetSysClockFreq+0x100>)
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	e054      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056ee:	4b2d      	ldr	r3, [pc, #180]	; (80057a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	2238      	movs	r2, #56	; 0x38
 80056f4:	4013      	ands	r3, r2
 80056f6:	2b10      	cmp	r3, #16
 80056f8:	d138      	bne.n	800576c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80056fa:	4b2a      	ldr	r3, [pc, #168]	; (80057a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	2203      	movs	r2, #3
 8005700:	4013      	ands	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005704:	4b27      	ldr	r3, [pc, #156]	; (80057a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	091b      	lsrs	r3, r3, #4
 800570a:	2207      	movs	r2, #7
 800570c:	4013      	ands	r3, r2
 800570e:	3301      	adds	r3, #1
 8005710:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b03      	cmp	r3, #3
 8005716:	d10d      	bne.n	8005734 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005718:	68b9      	ldr	r1, [r7, #8]
 800571a:	4824      	ldr	r0, [pc, #144]	; (80057ac <HAL_RCC_GetSysClockFreq+0x100>)
 800571c:	f7fa fd0e 	bl	800013c <__udivsi3>
 8005720:	0003      	movs	r3, r0
 8005722:	0019      	movs	r1, r3
 8005724:	4b1f      	ldr	r3, [pc, #124]	; (80057a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	0a1b      	lsrs	r3, r3, #8
 800572a:	227f      	movs	r2, #127	; 0x7f
 800572c:	4013      	ands	r3, r2
 800572e:	434b      	muls	r3, r1
 8005730:	617b      	str	r3, [r7, #20]
        break;
 8005732:	e00d      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005734:	68b9      	ldr	r1, [r7, #8]
 8005736:	481c      	ldr	r0, [pc, #112]	; (80057a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005738:	f7fa fd00 	bl	800013c <__udivsi3>
 800573c:	0003      	movs	r3, r0
 800573e:	0019      	movs	r1, r3
 8005740:	4b18      	ldr	r3, [pc, #96]	; (80057a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	0a1b      	lsrs	r3, r3, #8
 8005746:	227f      	movs	r2, #127	; 0x7f
 8005748:	4013      	ands	r3, r2
 800574a:	434b      	muls	r3, r1
 800574c:	617b      	str	r3, [r7, #20]
        break;
 800574e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005750:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	0f5b      	lsrs	r3, r3, #29
 8005756:	2207      	movs	r2, #7
 8005758:	4013      	ands	r3, r2
 800575a:	3301      	adds	r3, #1
 800575c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	6978      	ldr	r0, [r7, #20]
 8005762:	f7fa fceb 	bl	800013c <__udivsi3>
 8005766:	0003      	movs	r3, r0
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	e015      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800576c:	4b0d      	ldr	r3, [pc, #52]	; (80057a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	2238      	movs	r2, #56	; 0x38
 8005772:	4013      	ands	r3, r2
 8005774:	2b20      	cmp	r3, #32
 8005776:	d103      	bne.n	8005780 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005778:	2380      	movs	r3, #128	; 0x80
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	e00b      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005780:	4b08      	ldr	r3, [pc, #32]	; (80057a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2238      	movs	r2, #56	; 0x38
 8005786:	4013      	ands	r3, r2
 8005788:	2b18      	cmp	r3, #24
 800578a:	d103      	bne.n	8005794 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800578c:	23fa      	movs	r3, #250	; 0xfa
 800578e:	01db      	lsls	r3, r3, #7
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	e001      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005798:	693b      	ldr	r3, [r7, #16]
}
 800579a:	0018      	movs	r0, r3
 800579c:	46bd      	mov	sp, r7
 800579e:	b006      	add	sp, #24
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	40021000 	.word	0x40021000
 80057a8:	00f42400 	.word	0x00f42400
 80057ac:	007a1200 	.word	0x007a1200

080057b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057b4:	4b02      	ldr	r3, [pc, #8]	; (80057c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80057b6:	681b      	ldr	r3, [r3, #0]
}
 80057b8:	0018      	movs	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	20000010 	.word	0x20000010

080057c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057c4:	b5b0      	push	{r4, r5, r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80057c8:	f7ff fff2 	bl	80057b0 <HAL_RCC_GetHCLKFreq>
 80057cc:	0004      	movs	r4, r0
 80057ce:	f7ff faf9 	bl	8004dc4 <LL_RCC_GetAPB1Prescaler>
 80057d2:	0003      	movs	r3, r0
 80057d4:	0b1a      	lsrs	r2, r3, #12
 80057d6:	4b05      	ldr	r3, [pc, #20]	; (80057ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80057d8:	0092      	lsls	r2, r2, #2
 80057da:	58d3      	ldr	r3, [r2, r3]
 80057dc:	221f      	movs	r2, #31
 80057de:	4013      	ands	r3, r2
 80057e0:	40dc      	lsrs	r4, r3
 80057e2:	0023      	movs	r3, r4
}
 80057e4:	0018      	movs	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bdb0      	pop	{r4, r5, r7, pc}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	08015a64 	.word	0x08015a64

080057f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80057f8:	2313      	movs	r3, #19
 80057fa:	18fb      	adds	r3, r7, r3
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005800:	2312      	movs	r3, #18
 8005802:	18fb      	adds	r3, r7, r3
 8005804:	2200      	movs	r2, #0
 8005806:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	2380      	movs	r3, #128	; 0x80
 800580e:	029b      	lsls	r3, r3, #10
 8005810:	4013      	ands	r3, r2
 8005812:	d100      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005814:	e0ad      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005816:	2011      	movs	r0, #17
 8005818:	183b      	adds	r3, r7, r0
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800581e:	4b47      	ldr	r3, [pc, #284]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	055b      	lsls	r3, r3, #21
 8005826:	4013      	ands	r3, r2
 8005828:	d110      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800582a:	4b44      	ldr	r3, [pc, #272]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800582c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800582e:	4b43      	ldr	r3, [pc, #268]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005830:	2180      	movs	r1, #128	; 0x80
 8005832:	0549      	lsls	r1, r1, #21
 8005834:	430a      	orrs	r2, r1
 8005836:	63da      	str	r2, [r3, #60]	; 0x3c
 8005838:	4b40      	ldr	r3, [pc, #256]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800583a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800583c:	2380      	movs	r3, #128	; 0x80
 800583e:	055b      	lsls	r3, r3, #21
 8005840:	4013      	ands	r3, r2
 8005842:	60bb      	str	r3, [r7, #8]
 8005844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005846:	183b      	adds	r3, r7, r0
 8005848:	2201      	movs	r2, #1
 800584a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800584c:	4b3c      	ldr	r3, [pc, #240]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	4b3b      	ldr	r3, [pc, #236]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005852:	2180      	movs	r1, #128	; 0x80
 8005854:	0049      	lsls	r1, r1, #1
 8005856:	430a      	orrs	r2, r1
 8005858:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800585a:	f7fe fe0d 	bl	8004478 <HAL_GetTick>
 800585e:	0003      	movs	r3, r0
 8005860:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005862:	e00b      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005864:	f7fe fe08 	bl	8004478 <HAL_GetTick>
 8005868:	0002      	movs	r2, r0
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d904      	bls.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005872:	2313      	movs	r3, #19
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	2203      	movs	r2, #3
 8005878:	701a      	strb	r2, [r3, #0]
        break;
 800587a:	e005      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800587c:	4b30      	ldr	r3, [pc, #192]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	4013      	ands	r3, r2
 8005886:	d0ed      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005888:	2313      	movs	r3, #19
 800588a:	18fb      	adds	r3, r7, r3
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d15e      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005892:	4b2a      	ldr	r3, [pc, #168]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005894:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005896:	23c0      	movs	r3, #192	; 0xc0
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4013      	ands	r3, r2
 800589c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d019      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d014      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058ae:	4b23      	ldr	r3, [pc, #140]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b2:	4a24      	ldr	r2, [pc, #144]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058b8:	4b20      	ldr	r3, [pc, #128]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058bc:	4b1f      	ldr	r3, [pc, #124]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058be:	2180      	movs	r1, #128	; 0x80
 80058c0:	0249      	lsls	r1, r1, #9
 80058c2:	430a      	orrs	r2, r1
 80058c4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058c6:	4b1d      	ldr	r3, [pc, #116]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058ca:	4b1c      	ldr	r3, [pc, #112]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058cc:	491e      	ldr	r1, [pc, #120]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80058ce:	400a      	ands	r2, r1
 80058d0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058d2:	4b1a      	ldr	r3, [pc, #104]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2201      	movs	r2, #1
 80058dc:	4013      	ands	r3, r2
 80058de:	d016      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e0:	f7fe fdca 	bl	8004478 <HAL_GetTick>
 80058e4:	0003      	movs	r3, r0
 80058e6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e8:	e00c      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ea:	f7fe fdc5 	bl	8004478 <HAL_GetTick>
 80058ee:	0002      	movs	r2, r0
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	4a15      	ldr	r2, [pc, #84]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d904      	bls.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80058fa:	2313      	movs	r3, #19
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	2203      	movs	r2, #3
 8005900:	701a      	strb	r2, [r3, #0]
            break;
 8005902:	e004      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005904:	4b0d      	ldr	r3, [pc, #52]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005908:	2202      	movs	r2, #2
 800590a:	4013      	ands	r3, r2
 800590c:	d0ed      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800590e:	2313      	movs	r3, #19
 8005910:	18fb      	adds	r3, r7, r3
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005918:	4b08      	ldr	r3, [pc, #32]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800591a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591c:	4a09      	ldr	r2, [pc, #36]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800591e:	4013      	ands	r3, r2
 8005920:	0019      	movs	r1, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005928:	430a      	orrs	r2, r1
 800592a:	65da      	str	r2, [r3, #92]	; 0x5c
 800592c:	e016      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800592e:	2312      	movs	r3, #18
 8005930:	18fb      	adds	r3, r7, r3
 8005932:	2213      	movs	r2, #19
 8005934:	18ba      	adds	r2, r7, r2
 8005936:	7812      	ldrb	r2, [r2, #0]
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	e00f      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800593c:	40021000 	.word	0x40021000
 8005940:	40007000 	.word	0x40007000
 8005944:	fffffcff 	.word	0xfffffcff
 8005948:	fffeffff 	.word	0xfffeffff
 800594c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005950:	2312      	movs	r3, #18
 8005952:	18fb      	adds	r3, r7, r3
 8005954:	2213      	movs	r2, #19
 8005956:	18ba      	adds	r2, r7, r2
 8005958:	7812      	ldrb	r2, [r2, #0]
 800595a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800595c:	2311      	movs	r3, #17
 800595e:	18fb      	adds	r3, r7, r3
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d105      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005966:	4bb6      	ldr	r3, [pc, #728]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800596a:	4bb5      	ldr	r3, [pc, #724]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800596c:	49b5      	ldr	r1, [pc, #724]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800596e:	400a      	ands	r2, r1
 8005970:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2201      	movs	r2, #1
 8005978:	4013      	ands	r3, r2
 800597a:	d009      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800597c:	4bb0      	ldr	r3, [pc, #704]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800597e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005980:	2203      	movs	r2, #3
 8005982:	4393      	bics	r3, r2
 8005984:	0019      	movs	r1, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	4bad      	ldr	r3, [pc, #692]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800598c:	430a      	orrs	r2, r1
 800598e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2202      	movs	r2, #2
 8005996:	4013      	ands	r3, r2
 8005998:	d009      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800599a:	4ba9      	ldr	r3, [pc, #676]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800599c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599e:	220c      	movs	r2, #12
 80059a0:	4393      	bics	r3, r2
 80059a2:	0019      	movs	r1, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	4ba5      	ldr	r3, [pc, #660]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059aa:	430a      	orrs	r2, r1
 80059ac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2204      	movs	r2, #4
 80059b4:	4013      	ands	r3, r2
 80059b6:	d009      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059b8:	4ba1      	ldr	r3, [pc, #644]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059bc:	2230      	movs	r2, #48	; 0x30
 80059be:	4393      	bics	r3, r2
 80059c0:	0019      	movs	r1, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	4b9e      	ldr	r3, [pc, #632]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059c8:	430a      	orrs	r2, r1
 80059ca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2210      	movs	r2, #16
 80059d2:	4013      	ands	r3, r2
 80059d4:	d009      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059d6:	4b9a      	ldr	r3, [pc, #616]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059da:	4a9b      	ldr	r2, [pc, #620]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80059dc:	4013      	ands	r3, r2
 80059de:	0019      	movs	r1, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	4b96      	ldr	r3, [pc, #600]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059e6:	430a      	orrs	r2, r1
 80059e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	2380      	movs	r3, #128	; 0x80
 80059f0:	015b      	lsls	r3, r3, #5
 80059f2:	4013      	ands	r3, r2
 80059f4:	d009      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80059f6:	4b92      	ldr	r3, [pc, #584]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fa:	4a94      	ldr	r2, [pc, #592]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	0019      	movs	r1, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	695a      	ldr	r2, [r3, #20]
 8005a04:	4b8e      	ldr	r3, [pc, #568]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a06:	430a      	orrs	r2, r1
 8005a08:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	2380      	movs	r3, #128	; 0x80
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4013      	ands	r3, r2
 8005a14:	d009      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a16:	4b8a      	ldr	r3, [pc, #552]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	4a8d      	ldr	r2, [pc, #564]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	0019      	movs	r1, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a24:	4b86      	ldr	r3, [pc, #536]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a26:	430a      	orrs	r2, r1
 8005a28:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	2380      	movs	r3, #128	; 0x80
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	4013      	ands	r3, r2
 8005a34:	d009      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a36:	4b82      	ldr	r3, [pc, #520]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3a:	4a86      	ldr	r2, [pc, #536]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	0019      	movs	r1, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a44:	4b7e      	ldr	r3, [pc, #504]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a46:	430a      	orrs	r2, r1
 8005a48:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	4013      	ands	r3, r2
 8005a52:	d009      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a54:	4b7a      	ldr	r3, [pc, #488]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a58:	4a7f      	ldr	r2, [pc, #508]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	0019      	movs	r1, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	4b77      	ldr	r3, [pc, #476]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a64:	430a      	orrs	r2, r1
 8005a66:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2240      	movs	r2, #64	; 0x40
 8005a6e:	4013      	ands	r3, r2
 8005a70:	d009      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a72:	4b73      	ldr	r3, [pc, #460]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a76:	4a79      	ldr	r2, [pc, #484]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	0019      	movs	r1, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	4b6f      	ldr	r3, [pc, #444]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a82:	430a      	orrs	r2, r1
 8005a84:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	2380      	movs	r3, #128	; 0x80
 8005a8c:	01db      	lsls	r3, r3, #7
 8005a8e:	4013      	ands	r3, r2
 8005a90:	d015      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a92:	4b6b      	ldr	r3, [pc, #428]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	0899      	lsrs	r1, r3, #2
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a9e:	4b68      	ldr	r3, [pc, #416]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aa8:	2380      	movs	r3, #128	; 0x80
 8005aaa:	05db      	lsls	r3, r3, #23
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d106      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005ab0:	4b63      	ldr	r3, [pc, #396]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	4b62      	ldr	r3, [pc, #392]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ab6:	2180      	movs	r1, #128	; 0x80
 8005ab8:	0249      	lsls	r1, r1, #9
 8005aba:	430a      	orrs	r2, r1
 8005abc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	2380      	movs	r3, #128	; 0x80
 8005ac4:	031b      	lsls	r3, r3, #12
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	d009      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005aca:	4b5d      	ldr	r3, [pc, #372]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ace:	2240      	movs	r2, #64	; 0x40
 8005ad0:	4393      	bics	r3, r2
 8005ad2:	0019      	movs	r1, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ad8:	4b59      	ldr	r3, [pc, #356]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ada:	430a      	orrs	r2, r1
 8005adc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	2380      	movs	r3, #128	; 0x80
 8005ae4:	039b      	lsls	r3, r3, #14
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d016      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005aea:	4b55      	ldr	r3, [pc, #340]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aee:	4a5c      	ldr	r2, [pc, #368]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	0019      	movs	r1, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af8:	4b51      	ldr	r3, [pc, #324]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005afa:	430a      	orrs	r2, r1
 8005afc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b02:	2380      	movs	r3, #128	; 0x80
 8005b04:	03db      	lsls	r3, r3, #15
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d106      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b0a:	4b4d      	ldr	r3, [pc, #308]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	4b4c      	ldr	r3, [pc, #304]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b10:	2180      	movs	r1, #128	; 0x80
 8005b12:	0449      	lsls	r1, r1, #17
 8005b14:	430a      	orrs	r2, r1
 8005b16:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	2380      	movs	r3, #128	; 0x80
 8005b1e:	03db      	lsls	r3, r3, #15
 8005b20:	4013      	ands	r3, r2
 8005b22:	d016      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005b24:	4b46      	ldr	r3, [pc, #280]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b28:	4a4e      	ldr	r2, [pc, #312]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	0019      	movs	r1, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b32:	4b43      	ldr	r3, [pc, #268]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b34:	430a      	orrs	r2, r1
 8005b36:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b3c:	2380      	movs	r3, #128	; 0x80
 8005b3e:	045b      	lsls	r3, r3, #17
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d106      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b44:	4b3e      	ldr	r3, [pc, #248]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	4b3d      	ldr	r3, [pc, #244]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b4a:	2180      	movs	r1, #128	; 0x80
 8005b4c:	0449      	lsls	r1, r1, #17
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	2380      	movs	r3, #128	; 0x80
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d014      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005b5e:	4b38      	ldr	r3, [pc, #224]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b62:	2203      	movs	r2, #3
 8005b64:	4393      	bics	r3, r2
 8005b66:	0019      	movs	r1, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1a      	ldr	r2, [r3, #32]
 8005b6c:	4b34      	ldr	r3, [pc, #208]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d106      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005b7a:	4b31      	ldr	r3, [pc, #196]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	4b30      	ldr	r3, [pc, #192]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b80:	2180      	movs	r1, #128	; 0x80
 8005b82:	0249      	lsls	r1, r1, #9
 8005b84:	430a      	orrs	r2, r1
 8005b86:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	2380      	movs	r3, #128	; 0x80
 8005b8e:	019b      	lsls	r3, r3, #6
 8005b90:	4013      	ands	r3, r2
 8005b92:	d014      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005b94:	4b2a      	ldr	r3, [pc, #168]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b98:	220c      	movs	r2, #12
 8005b9a:	4393      	bics	r3, r2
 8005b9c:	0019      	movs	r1, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ba2:	4b27      	ldr	r3, [pc, #156]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d106      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005bb0:	4b23      	ldr	r3, [pc, #140]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	4b22      	ldr	r3, [pc, #136]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bb6:	2180      	movs	r1, #128	; 0x80
 8005bb8:	0249      	lsls	r1, r1, #9
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	2380      	movs	r3, #128	; 0x80
 8005bc4:	045b      	lsls	r3, r3, #17
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	d016      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bca:	4b1d      	ldr	r3, [pc, #116]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bce:	4a22      	ldr	r2, [pc, #136]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	0019      	movs	r1, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bd8:	4b19      	ldr	r3, [pc, #100]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	019b      	lsls	r3, r3, #6
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d106      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005bea:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	4b14      	ldr	r3, [pc, #80]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bf0:	2180      	movs	r1, #128	; 0x80
 8005bf2:	0449      	lsls	r1, r1, #17
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	2380      	movs	r3, #128	; 0x80
 8005bfe:	049b      	lsls	r3, r3, #18
 8005c00:	4013      	ands	r3, r2
 8005c02:	d016      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c04:	4b0e      	ldr	r3, [pc, #56]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c08:	4a10      	ldr	r2, [pc, #64]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	0019      	movs	r1, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c12:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c14:	430a      	orrs	r2, r1
 8005c16:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c1c:	2380      	movs	r3, #128	; 0x80
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d106      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005c24:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c2a:	2180      	movs	r1, #128	; 0x80
 8005c2c:	0449      	lsls	r1, r1, #17
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005c32:	2312      	movs	r3, #18
 8005c34:	18fb      	adds	r3, r7, r3
 8005c36:	781b      	ldrb	r3, [r3, #0]
}
 8005c38:	0018      	movs	r0, r3
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	b006      	add	sp, #24
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	40021000 	.word	0x40021000
 8005c44:	efffffff 	.word	0xefffffff
 8005c48:	fffff3ff 	.word	0xfffff3ff
 8005c4c:	fffffcff 	.word	0xfffffcff
 8005c50:	fff3ffff 	.word	0xfff3ffff
 8005c54:	ffcfffff 	.word	0xffcfffff
 8005c58:	ffffcfff 	.word	0xffffcfff
 8005c5c:	ffff3fff 	.word	0xffff3fff
 8005c60:	ffbfffff 	.word	0xffbfffff
 8005c64:	feffffff 	.word	0xfeffffff

08005c68 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c68:	b5b0      	push	{r4, r5, r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c70:	230f      	movs	r3, #15
 8005c72:	18fb      	adds	r3, r7, r3
 8005c74:	2201      	movs	r2, #1
 8005c76:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d100      	bne.n	8005c80 <HAL_RTC_Init+0x18>
 8005c7e:	e08c      	b.n	8005d9a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2229      	movs	r2, #41	; 0x29
 8005c84:	5c9b      	ldrb	r3, [r3, r2]
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10b      	bne.n	8005ca4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2228      	movs	r2, #40	; 0x28
 8005c90:	2100      	movs	r1, #0
 8005c92:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2288      	movs	r2, #136	; 0x88
 8005c98:	0212      	lsls	r2, r2, #8
 8005c9a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f7fe f800 	bl	8003ca4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2229      	movs	r2, #41	; 0x29
 8005ca8:	2102      	movs	r1, #2
 8005caa:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	2210      	movs	r2, #16
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	2b10      	cmp	r3, #16
 8005cb8:	d062      	beq.n	8005d80 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	22ca      	movs	r2, #202	; 0xca
 8005cc0:	625a      	str	r2, [r3, #36]	; 0x24
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2253      	movs	r2, #83	; 0x53
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005cca:	250f      	movs	r5, #15
 8005ccc:	197c      	adds	r4, r7, r5
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f000 fbf3 	bl	80064bc <RTC_EnterInitMode>
 8005cd6:	0003      	movs	r3, r0
 8005cd8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8005cda:	0028      	movs	r0, r5
 8005cdc:	183b      	adds	r3, r7, r0
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d12c      	bne.n	8005d3e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	492e      	ldr	r1, [pc, #184]	; (8005da8 <HAL_RTC_Init+0x140>)
 8005cf0:	400a      	ands	r2, r1
 8005cf2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6999      	ldr	r1, [r3, #24]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	6912      	ldr	r2, [r2, #16]
 8005d1a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6919      	ldr	r1, [r3, #16]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	041a      	lsls	r2, r3, #16
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005d30:	183c      	adds	r4, r7, r0
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	0018      	movs	r0, r3
 8005d36:	f000 fc03 	bl	8006540 <RTC_ExitInitMode>
 8005d3a:	0003      	movs	r3, r0
 8005d3c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005d3e:	230f      	movs	r3, #15
 8005d40:	18fb      	adds	r3, r7, r3
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d116      	bne.n	8005d76 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	00d2      	lsls	r2, r2, #3
 8005d54:	08d2      	lsrs	r2, r2, #3
 8005d56:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6999      	ldr	r1, [r3, #24]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	22ff      	movs	r2, #255	; 0xff
 8005d7c:	625a      	str	r2, [r3, #36]	; 0x24
 8005d7e:	e003      	b.n	8005d88 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005d80:	230f      	movs	r3, #15
 8005d82:	18fb      	adds	r3, r7, r3
 8005d84:	2200      	movs	r2, #0
 8005d86:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005d88:	230f      	movs	r3, #15
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d103      	bne.n	8005d9a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2229      	movs	r2, #41	; 0x29
 8005d96:	2101      	movs	r1, #1
 8005d98:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005d9a:	230f      	movs	r3, #15
 8005d9c:	18fb      	adds	r3, r7, r3
 8005d9e:	781b      	ldrb	r3, [r3, #0]
}
 8005da0:	0018      	movs	r0, r3
 8005da2:	46bd      	mov	sp, r7
 8005da4:	b004      	add	sp, #16
 8005da6:	bdb0      	pop	{r4, r5, r7, pc}
 8005da8:	fb8fffbf 	.word	0xfb8fffbf

08005dac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005dac:	b5b0      	push	{r4, r5, r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2228      	movs	r2, #40	; 0x28
 8005dbc:	5c9b      	ldrb	r3, [r3, r2]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_RTC_SetTime+0x1a>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e092      	b.n	8005eec <HAL_RTC_SetTime+0x140>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2228      	movs	r2, #40	; 0x28
 8005dca:	2101      	movs	r1, #1
 8005dcc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2229      	movs	r2, #41	; 0x29
 8005dd2:	2102      	movs	r1, #2
 8005dd4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	22ca      	movs	r2, #202	; 0xca
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2253      	movs	r2, #83	; 0x53
 8005de4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005de6:	2513      	movs	r5, #19
 8005de8:	197c      	adds	r4, r7, r5
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	0018      	movs	r0, r3
 8005dee:	f000 fb65 	bl	80064bc <RTC_EnterInitMode>
 8005df2:	0003      	movs	r3, r0
 8005df4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005df6:	197b      	adds	r3, r7, r5
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d162      	bne.n	8005ec4 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d125      	bne.n	8005e50 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	2240      	movs	r2, #64	; 0x40
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	d102      	bne.n	8005e16 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2200      	movs	r2, #0
 8005e14:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f000 fbd4 	bl	80065c8 <RTC_ByteToBcd2>
 8005e20:	0003      	movs	r3, r0
 8005e22:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	785b      	ldrb	r3, [r3, #1]
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f000 fbcd 	bl	80065c8 <RTC_ByteToBcd2>
 8005e2e:	0003      	movs	r3, r0
 8005e30:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005e32:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	789b      	ldrb	r3, [r3, #2]
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f000 fbc5 	bl	80065c8 <RTC_ByteToBcd2>
 8005e3e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e40:	0022      	movs	r2, r4
 8005e42:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	78db      	ldrb	r3, [r3, #3]
 8005e48:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	e017      	b.n	8005e80 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	2240      	movs	r2, #64	; 0x40
 8005e58:	4013      	ands	r3, r2
 8005e5a:	d102      	bne.n	8005e62 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005e6e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e74:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	78db      	ldrb	r3, [r3, #3]
 8005e7a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	491b      	ldr	r1, [pc, #108]	; (8005ef4 <HAL_RTC_SetTime+0x148>)
 8005e88:	400a      	ands	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4918      	ldr	r1, [pc, #96]	; (8005ef8 <HAL_RTC_SetTime+0x14c>)
 8005e98:	400a      	ands	r2, r1
 8005e9a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6999      	ldr	r1, [r3, #24]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005eb4:	2313      	movs	r3, #19
 8005eb6:	18fc      	adds	r4, r7, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f000 fb40 	bl	8006540 <RTC_ExitInitMode>
 8005ec0:	0003      	movs	r3, r0
 8005ec2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	22ff      	movs	r2, #255	; 0xff
 8005eca:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005ecc:	2313      	movs	r3, #19
 8005ece:	18fb      	adds	r3, r7, r3
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d103      	bne.n	8005ede <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2229      	movs	r2, #41	; 0x29
 8005eda:	2101      	movs	r1, #1
 8005edc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2228      	movs	r2, #40	; 0x28
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	5499      	strb	r1, [r3, r2]

  return status;
 8005ee6:	2313      	movs	r3, #19
 8005ee8:	18fb      	adds	r3, r7, r3
 8005eea:	781b      	ldrb	r3, [r3, #0]
}
 8005eec:	0018      	movs	r0, r3
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	b006      	add	sp, #24
 8005ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ef4:	007f7f7f 	.word	0x007f7f7f
 8005ef8:	fffbffff 	.word	0xfffbffff

08005efc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	045b      	lsls	r3, r3, #17
 8005f1a:	0c5a      	lsrs	r2, r3, #17
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a22      	ldr	r2, [pc, #136]	; (8005fb0 <HAL_RTC_GetTime+0xb4>)
 8005f28:	4013      	ands	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	223f      	movs	r2, #63	; 0x3f
 8005f34:	4013      	ands	r3, r2
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	0a1b      	lsrs	r3, r3, #8
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	227f      	movs	r2, #127	; 0x7f
 8005f44:	4013      	ands	r3, r2
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	227f      	movs	r2, #127	; 0x7f
 8005f52:	4013      	ands	r3, r2
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	0d9b      	lsrs	r3, r3, #22
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2201      	movs	r2, #1
 8005f62:	4013      	ands	r3, r2
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d11a      	bne.n	8005fa6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	0018      	movs	r0, r3
 8005f76:	f000 fb4f 	bl	8006618 <RTC_Bcd2ToByte>
 8005f7a:	0003      	movs	r3, r0
 8005f7c:	001a      	movs	r2, r3
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	785b      	ldrb	r3, [r3, #1]
 8005f86:	0018      	movs	r0, r3
 8005f88:	f000 fb46 	bl	8006618 <RTC_Bcd2ToByte>
 8005f8c:	0003      	movs	r3, r0
 8005f8e:	001a      	movs	r2, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	789b      	ldrb	r3, [r3, #2]
 8005f98:	0018      	movs	r0, r3
 8005f9a:	f000 fb3d 	bl	8006618 <RTC_Bcd2ToByte>
 8005f9e:	0003      	movs	r3, r0
 8005fa0:	001a      	movs	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	0018      	movs	r0, r3
 8005faa:	46bd      	mov	sp, r7
 8005fac:	b006      	add	sp, #24
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	007f7f7f 	.word	0x007f7f7f

08005fb4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005fb4:	b5b0      	push	{r4, r5, r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2228      	movs	r2, #40	; 0x28
 8005fc4:	5c9b      	ldrb	r3, [r3, r2]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_RTC_SetDate+0x1a>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e07e      	b.n	80060cc <HAL_RTC_SetDate+0x118>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2228      	movs	r2, #40	; 0x28
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2229      	movs	r2, #41	; 0x29
 8005fda:	2102      	movs	r1, #2
 8005fdc:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10e      	bne.n	8006002 <HAL_RTC_SetDate+0x4e>
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	001a      	movs	r2, r3
 8005fea:	2310      	movs	r3, #16
 8005fec:	4013      	ands	r3, r2
 8005fee:	d008      	beq.n	8006002 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	2210      	movs	r2, #16
 8005ff6:	4393      	bics	r3, r2
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	330a      	adds	r3, #10
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d11c      	bne.n	8006042 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	78db      	ldrb	r3, [r3, #3]
 800600c:	0018      	movs	r0, r3
 800600e:	f000 fadb 	bl	80065c8 <RTC_ByteToBcd2>
 8006012:	0003      	movs	r3, r0
 8006014:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	0018      	movs	r0, r3
 800601c:	f000 fad4 	bl	80065c8 <RTC_ByteToBcd2>
 8006020:	0003      	movs	r3, r0
 8006022:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006024:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	789b      	ldrb	r3, [r3, #2]
 800602a:	0018      	movs	r0, r3
 800602c:	f000 facc 	bl	80065c8 <RTC_ByteToBcd2>
 8006030:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006032:	0022      	movs	r2, r4
 8006034:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]
 8006040:	e00e      	b.n	8006060 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	78db      	ldrb	r3, [r3, #3]
 8006046:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	785b      	ldrb	r3, [r3, #1]
 800604c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800604e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006054:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	22ca      	movs	r2, #202	; 0xca
 8006066:	625a      	str	r2, [r3, #36]	; 0x24
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2253      	movs	r2, #83	; 0x53
 800606e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006070:	2513      	movs	r5, #19
 8006072:	197c      	adds	r4, r7, r5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	0018      	movs	r0, r3
 8006078:	f000 fa20 	bl	80064bc <RTC_EnterInitMode>
 800607c:	0003      	movs	r3, r0
 800607e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006080:	0028      	movs	r0, r5
 8006082:	183b      	adds	r3, r7, r0
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10c      	bne.n	80060a4 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	4910      	ldr	r1, [pc, #64]	; (80060d4 <HAL_RTC_SetDate+0x120>)
 8006092:	400a      	ands	r2, r1
 8006094:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006096:	183c      	adds	r4, r7, r0
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	0018      	movs	r0, r3
 800609c:	f000 fa50 	bl	8006540 <RTC_ExitInitMode>
 80060a0:	0003      	movs	r3, r0
 80060a2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	22ff      	movs	r2, #255	; 0xff
 80060aa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80060ac:	2313      	movs	r3, #19
 80060ae:	18fb      	adds	r3, r7, r3
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d103      	bne.n	80060be <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2229      	movs	r2, #41	; 0x29
 80060ba:	2101      	movs	r1, #1
 80060bc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2228      	movs	r2, #40	; 0x28
 80060c2:	2100      	movs	r1, #0
 80060c4:	5499      	strb	r1, [r3, r2]

  return status;
 80060c6:	2313      	movs	r3, #19
 80060c8:	18fb      	adds	r3, r7, r3
 80060ca:	781b      	ldrb	r3, [r3, #0]
}
 80060cc:	0018      	movs	r0, r3
 80060ce:	46bd      	mov	sp, r7
 80060d0:	b006      	add	sp, #24
 80060d2:	bdb0      	pop	{r4, r5, r7, pc}
 80060d4:	00ffff3f 	.word	0x00ffff3f

080060d8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	4a21      	ldr	r2, [pc, #132]	; (8006170 <HAL_RTC_GetDate+0x98>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	0c1b      	lsrs	r3, r3, #16
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	0a1b      	lsrs	r3, r3, #8
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	221f      	movs	r2, #31
 8006102:	4013      	ands	r3, r2
 8006104:	b2da      	uxtb	r2, r3
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	223f      	movs	r2, #63	; 0x3f
 8006110:	4013      	ands	r3, r2
 8006112:	b2da      	uxtb	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	0b5b      	lsrs	r3, r3, #13
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2207      	movs	r2, #7
 8006120:	4013      	ands	r3, r2
 8006122:	b2da      	uxtb	r2, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d11a      	bne.n	8006164 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	78db      	ldrb	r3, [r3, #3]
 8006132:	0018      	movs	r0, r3
 8006134:	f000 fa70 	bl	8006618 <RTC_Bcd2ToByte>
 8006138:	0003      	movs	r3, r0
 800613a:	001a      	movs	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	785b      	ldrb	r3, [r3, #1]
 8006144:	0018      	movs	r0, r3
 8006146:	f000 fa67 	bl	8006618 <RTC_Bcd2ToByte>
 800614a:	0003      	movs	r3, r0
 800614c:	001a      	movs	r2, r3
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	789b      	ldrb	r3, [r3, #2]
 8006156:	0018      	movs	r0, r3
 8006158:	f000 fa5e 	bl	8006618 <RTC_Bcd2ToByte>
 800615c:	0003      	movs	r3, r0
 800615e:	001a      	movs	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	0018      	movs	r0, r3
 8006168:	46bd      	mov	sp, r7
 800616a:	b006      	add	sp, #24
 800616c:	bd80      	pop	{r7, pc}
 800616e:	46c0      	nop			; (mov r8, r8)
 8006170:	00ffff3f 	.word	0x00ffff3f

08006174 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006174:	b590      	push	{r4, r7, lr}
 8006176:	b089      	sub	sp, #36	; 0x24
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2228      	movs	r2, #40	; 0x28
 8006184:	5c9b      	ldrb	r3, [r3, r2]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d101      	bne.n	800618e <HAL_RTC_SetAlarm_IT+0x1a>
 800618a:	2302      	movs	r3, #2
 800618c:	e127      	b.n	80063de <HAL_RTC_SetAlarm_IT+0x26a>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2228      	movs	r2, #40	; 0x28
 8006192:	2101      	movs	r1, #1
 8006194:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2229      	movs	r2, #41	; 0x29
 800619a:	2102      	movs	r1, #2
 800619c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d136      	bne.n	8006212 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	2240      	movs	r2, #64	; 0x40
 80061ac:	4013      	ands	r3, r2
 80061ae:	d102      	bne.n	80061b6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2200      	movs	r2, #0
 80061b4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	0018      	movs	r0, r3
 80061bc:	f000 fa04 	bl	80065c8 <RTC_ByteToBcd2>
 80061c0:	0003      	movs	r3, r0
 80061c2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	785b      	ldrb	r3, [r3, #1]
 80061c8:	0018      	movs	r0, r3
 80061ca:	f000 f9fd 	bl	80065c8 <RTC_ByteToBcd2>
 80061ce:	0003      	movs	r3, r0
 80061d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80061d2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	789b      	ldrb	r3, [r3, #2]
 80061d8:	0018      	movs	r0, r3
 80061da:	f000 f9f5 	bl	80065c8 <RTC_ByteToBcd2>
 80061de:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80061e0:	0022      	movs	r2, r4
 80061e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	78db      	ldrb	r3, [r3, #3]
 80061e8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80061ea:	431a      	orrs	r2, r3
 80061ec:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2220      	movs	r2, #32
 80061f2:	5c9b      	ldrb	r3, [r3, r2]
 80061f4:	0018      	movs	r0, r3
 80061f6:	f000 f9e7 	bl	80065c8 <RTC_ByteToBcd2>
 80061fa:	0003      	movs	r3, r0
 80061fc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80061fe:	0022      	movs	r2, r4
 8006200:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006206:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800620c:	4313      	orrs	r3, r2
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	e022      	b.n	8006258 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	2240      	movs	r2, #64	; 0x40
 800621a:	4013      	ands	r3, r2
 800621c:	d102      	bne.n	8006224 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2200      	movs	r2, #0
 8006222:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	785b      	ldrb	r3, [r3, #1]
 800622e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006230:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006236:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	78db      	ldrb	r3, [r3, #3]
 800623c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800623e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2120      	movs	r1, #32
 8006244:	5c5b      	ldrb	r3, [r3, r1]
 8006246:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006248:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800624e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006254:	4313      	orrs	r3, r2
 8006256:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	4313      	orrs	r3, r2
 8006262:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	22ca      	movs	r2, #202	; 0xca
 800626a:	625a      	str	r2, [r3, #36]	; 0x24
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2253      	movs	r2, #83	; 0x53
 8006272:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006278:	2380      	movs	r3, #128	; 0x80
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	429a      	cmp	r2, r3
 800627e:	d14c      	bne.n	800631a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699a      	ldr	r2, [r3, #24]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4957      	ldr	r1, [pc, #348]	; (80063e8 <HAL_RTC_SetAlarm_IT+0x274>)
 800628c:	400a      	ands	r2, r1
 800628e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2101      	movs	r1, #1
 800629c:	430a      	orrs	r2, r1
 800629e:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80062a0:	f7fe f8ea 	bl	8004478 <HAL_GetTick>
 80062a4:	0003      	movs	r3, r0
 80062a6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80062a8:	e016      	b.n	80062d8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80062aa:	f7fe f8e5 	bl	8004478 <HAL_GetTick>
 80062ae:	0002      	movs	r2, r0
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	1ad2      	subs	r2, r2, r3
 80062b4:	23fa      	movs	r3, #250	; 0xfa
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d90d      	bls.n	80062d8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	22ff      	movs	r2, #255	; 0xff
 80062c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2229      	movs	r2, #41	; 0x29
 80062c8:	2103      	movs	r1, #3
 80062ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2228      	movs	r2, #40	; 0x28
 80062d0:	2100      	movs	r1, #0
 80062d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e082      	b.n	80063de <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	4013      	ands	r3, r2
 80062e2:	d0e2      	beq.n	80062aa <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699a      	ldr	r2, [r3, #24]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2180      	movs	r1, #128	; 0x80
 8006300:	0049      	lsls	r1, r1, #1
 8006302:	430a      	orrs	r2, r1
 8006304:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	699a      	ldr	r2, [r3, #24]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2180      	movs	r1, #128	; 0x80
 8006312:	0149      	lsls	r1, r1, #5
 8006314:	430a      	orrs	r2, r1
 8006316:	619a      	str	r2, [r3, #24]
 8006318:	e04b      	b.n	80063b2 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	699a      	ldr	r2, [r3, #24]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4931      	ldr	r1, [pc, #196]	; (80063ec <HAL_RTC_SetAlarm_IT+0x278>)
 8006326:	400a      	ands	r2, r1
 8006328:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2102      	movs	r1, #2
 8006336:	430a      	orrs	r2, r1
 8006338:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800633a:	f7fe f89d 	bl	8004478 <HAL_GetTick>
 800633e:	0003      	movs	r3, r0
 8006340:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006342:	e016      	b.n	8006372 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006344:	f7fe f898 	bl	8004478 <HAL_GetTick>
 8006348:	0002      	movs	r2, r0
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	1ad2      	subs	r2, r2, r3
 800634e:	23fa      	movs	r3, #250	; 0xfa
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	429a      	cmp	r2, r3
 8006354:	d90d      	bls.n	8006372 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	22ff      	movs	r2, #255	; 0xff
 800635c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2229      	movs	r2, #41	; 0x29
 8006362:	2103      	movs	r1, #3
 8006364:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2228      	movs	r2, #40	; 0x28
 800636a:	2100      	movs	r1, #0
 800636c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e035      	b.n	80063de <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	2202      	movs	r2, #2
 800637a:	4013      	ands	r3, r2
 800637c:	d0e2      	beq.n	8006344 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	699a      	ldr	r2, [r3, #24]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2180      	movs	r1, #128	; 0x80
 800639a:	0089      	lsls	r1, r1, #2
 800639c:	430a      	orrs	r2, r1
 800639e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699a      	ldr	r2, [r3, #24]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2180      	movs	r1, #128	; 0x80
 80063ac:	0189      	lsls	r1, r1, #6
 80063ae:	430a      	orrs	r2, r1
 80063b0:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80063b2:	4a0f      	ldr	r2, [pc, #60]	; (80063f0 <HAL_RTC_SetAlarm_IT+0x27c>)
 80063b4:	2380      	movs	r3, #128	; 0x80
 80063b6:	58d3      	ldr	r3, [r2, r3]
 80063b8:	490d      	ldr	r1, [pc, #52]	; (80063f0 <HAL_RTC_SetAlarm_IT+0x27c>)
 80063ba:	2280      	movs	r2, #128	; 0x80
 80063bc:	0312      	lsls	r2, r2, #12
 80063be:	4313      	orrs	r3, r2
 80063c0:	2280      	movs	r2, #128	; 0x80
 80063c2:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	22ff      	movs	r2, #255	; 0xff
 80063ca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2229      	movs	r2, #41	; 0x29
 80063d0:	2101      	movs	r1, #1
 80063d2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2228      	movs	r2, #40	; 0x28
 80063d8:	2100      	movs	r1, #0
 80063da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	0018      	movs	r0, r3
 80063e0:	46bd      	mov	sp, r7
 80063e2:	b009      	add	sp, #36	; 0x24
 80063e4:	bd90      	pop	{r4, r7, pc}
 80063e6:	46c0      	nop			; (mov r8, r8)
 80063e8:	fffffeff 	.word	0xfffffeff
 80063ec:	fffffdff 	.word	0xfffffdff
 80063f0:	40021800 	.word	0x40021800

080063f4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	2380      	movs	r3, #128	; 0x80
 8006404:	015b      	lsls	r3, r3, #5
 8006406:	4013      	ands	r3, r2
 8006408:	d011      	beq.n	800642e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006410:	2201      	movs	r2, #1
 8006412:	4013      	ands	r3, r2
 8006414:	d00b      	beq.n	800642e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2101      	movs	r1, #1
 8006422:	430a      	orrs	r2, r1
 8006424:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	0018      	movs	r0, r3
 800642a:	f7fd fbf5 	bl	8003c18 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	699a      	ldr	r2, [r3, #24]
 8006434:	2380      	movs	r3, #128	; 0x80
 8006436:	019b      	lsls	r3, r3, #6
 8006438:	4013      	ands	r3, r2
 800643a:	d011      	beq.n	8006460 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006442:	2202      	movs	r2, #2
 8006444:	4013      	ands	r3, r2
 8006446:	d00b      	beq.n	8006460 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2102      	movs	r1, #2
 8006454:	430a      	orrs	r2, r1
 8006456:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	0018      	movs	r0, r3
 800645c:	f000 f961 	bl	8006722 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2229      	movs	r2, #41	; 0x29
 8006464:	2101      	movs	r1, #1
 8006466:	5499      	strb	r1, [r3, r2]
}
 8006468:	46c0      	nop			; (mov r8, r8)
 800646a:	46bd      	mov	sp, r7
 800646c:	b002      	add	sp, #8
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a0e      	ldr	r2, [pc, #56]	; (80064b8 <HAL_RTC_WaitForSynchro+0x48>)
 800647e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006480:	f7fd fffa 	bl	8004478 <HAL_GetTick>
 8006484:	0003      	movs	r3, r0
 8006486:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006488:	e00a      	b.n	80064a0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800648a:	f7fd fff5 	bl	8004478 <HAL_GetTick>
 800648e:	0002      	movs	r2, r0
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	1ad2      	subs	r2, r2, r3
 8006494:	23fa      	movs	r3, #250	; 0xfa
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	429a      	cmp	r2, r3
 800649a:	d901      	bls.n	80064a0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e006      	b.n	80064ae <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	2220      	movs	r2, #32
 80064a8:	4013      	ands	r3, r2
 80064aa:	d0ee      	beq.n	800648a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	0018      	movs	r0, r3
 80064b0:	46bd      	mov	sp, r7
 80064b2:	b004      	add	sp, #16
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	0001005f 	.word	0x0001005f

080064bc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80064c4:	230f      	movs	r3, #15
 80064c6:	18fb      	adds	r3, r7, r3
 80064c8:	2200      	movs	r2, #0
 80064ca:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	2240      	movs	r2, #64	; 0x40
 80064d4:	4013      	ands	r3, r2
 80064d6:	d12c      	bne.n	8006532 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2180      	movs	r1, #128	; 0x80
 80064e4:	430a      	orrs	r2, r1
 80064e6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80064e8:	f7fd ffc6 	bl	8004478 <HAL_GetTick>
 80064ec:	0003      	movs	r3, r0
 80064ee:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80064f0:	e014      	b.n	800651c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80064f2:	f7fd ffc1 	bl	8004478 <HAL_GetTick>
 80064f6:	0002      	movs	r2, r0
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	1ad2      	subs	r2, r2, r3
 80064fc:	200f      	movs	r0, #15
 80064fe:	183b      	adds	r3, r7, r0
 8006500:	1839      	adds	r1, r7, r0
 8006502:	7809      	ldrb	r1, [r1, #0]
 8006504:	7019      	strb	r1, [r3, #0]
 8006506:	23fa      	movs	r3, #250	; 0xfa
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	429a      	cmp	r2, r3
 800650c:	d906      	bls.n	800651c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800650e:	183b      	adds	r3, r7, r0
 8006510:	2203      	movs	r2, #3
 8006512:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2229      	movs	r2, #41	; 0x29
 8006518:	2103      	movs	r1, #3
 800651a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	2240      	movs	r2, #64	; 0x40
 8006524:	4013      	ands	r3, r2
 8006526:	d104      	bne.n	8006532 <RTC_EnterInitMode+0x76>
 8006528:	230f      	movs	r3, #15
 800652a:	18fb      	adds	r3, r7, r3
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b03      	cmp	r3, #3
 8006530:	d1df      	bne.n	80064f2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006532:	230f      	movs	r3, #15
 8006534:	18fb      	adds	r3, r7, r3
 8006536:	781b      	ldrb	r3, [r3, #0]
}
 8006538:	0018      	movs	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	b004      	add	sp, #16
 800653e:	bd80      	pop	{r7, pc}

08006540 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006540:	b590      	push	{r4, r7, lr}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006548:	240f      	movs	r4, #15
 800654a:	193b      	adds	r3, r7, r4
 800654c:	2200      	movs	r2, #0
 800654e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006550:	4b1c      	ldr	r3, [pc, #112]	; (80065c4 <RTC_ExitInitMode+0x84>)
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	4b1b      	ldr	r3, [pc, #108]	; (80065c4 <RTC_ExitInitMode+0x84>)
 8006556:	2180      	movs	r1, #128	; 0x80
 8006558:	438a      	bics	r2, r1
 800655a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800655c:	4b19      	ldr	r3, [pc, #100]	; (80065c4 <RTC_ExitInitMode+0x84>)
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	2220      	movs	r2, #32
 8006562:	4013      	ands	r3, r2
 8006564:	d10d      	bne.n	8006582 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	0018      	movs	r0, r3
 800656a:	f7ff ff81 	bl	8006470 <HAL_RTC_WaitForSynchro>
 800656e:	1e03      	subs	r3, r0, #0
 8006570:	d021      	beq.n	80065b6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2229      	movs	r2, #41	; 0x29
 8006576:	2103      	movs	r1, #3
 8006578:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800657a:	193b      	adds	r3, r7, r4
 800657c:	2203      	movs	r2, #3
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	e019      	b.n	80065b6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006582:	4b10      	ldr	r3, [pc, #64]	; (80065c4 <RTC_ExitInitMode+0x84>)
 8006584:	699a      	ldr	r2, [r3, #24]
 8006586:	4b0f      	ldr	r3, [pc, #60]	; (80065c4 <RTC_ExitInitMode+0x84>)
 8006588:	2120      	movs	r1, #32
 800658a:	438a      	bics	r2, r1
 800658c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	0018      	movs	r0, r3
 8006592:	f7ff ff6d 	bl	8006470 <HAL_RTC_WaitForSynchro>
 8006596:	1e03      	subs	r3, r0, #0
 8006598:	d007      	beq.n	80065aa <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2229      	movs	r2, #41	; 0x29
 800659e:	2103      	movs	r1, #3
 80065a0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80065a2:	230f      	movs	r3, #15
 80065a4:	18fb      	adds	r3, r7, r3
 80065a6:	2203      	movs	r2, #3
 80065a8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80065aa:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <RTC_ExitInitMode+0x84>)
 80065ac:	699a      	ldr	r2, [r3, #24]
 80065ae:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <RTC_ExitInitMode+0x84>)
 80065b0:	2120      	movs	r1, #32
 80065b2:	430a      	orrs	r2, r1
 80065b4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80065b6:	230f      	movs	r3, #15
 80065b8:	18fb      	adds	r3, r7, r3
 80065ba:	781b      	ldrb	r3, [r3, #0]
}
 80065bc:	0018      	movs	r0, r3
 80065be:	46bd      	mov	sp, r7
 80065c0:	b005      	add	sp, #20
 80065c2:	bd90      	pop	{r4, r7, pc}
 80065c4:	40002800 	.word	0x40002800

080065c8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	0002      	movs	r2, r0
 80065d0:	1dfb      	adds	r3, r7, #7
 80065d2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80065d8:	230b      	movs	r3, #11
 80065da:	18fb      	adds	r3, r7, r3
 80065dc:	1dfa      	adds	r2, r7, #7
 80065de:	7812      	ldrb	r2, [r2, #0]
 80065e0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80065e2:	e008      	b.n	80065f6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	3301      	adds	r3, #1
 80065e8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80065ea:	220b      	movs	r2, #11
 80065ec:	18bb      	adds	r3, r7, r2
 80065ee:	18ba      	adds	r2, r7, r2
 80065f0:	7812      	ldrb	r2, [r2, #0]
 80065f2:	3a0a      	subs	r2, #10
 80065f4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80065f6:	210b      	movs	r1, #11
 80065f8:	187b      	adds	r3, r7, r1
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b09      	cmp	r3, #9
 80065fe:	d8f1      	bhi.n	80065e4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	b2db      	uxtb	r3, r3
 8006604:	011b      	lsls	r3, r3, #4
 8006606:	b2da      	uxtb	r2, r3
 8006608:	187b      	adds	r3, r7, r1
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	4313      	orrs	r3, r2
 800660e:	b2db      	uxtb	r3, r3
}
 8006610:	0018      	movs	r0, r3
 8006612:	46bd      	mov	sp, r7
 8006614:	b004      	add	sp, #16
 8006616:	bd80      	pop	{r7, pc}

08006618 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	0002      	movs	r2, r0
 8006620:	1dfb      	adds	r3, r7, #7
 8006622:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006624:	1dfb      	adds	r3, r7, #7
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	091b      	lsrs	r3, r3, #4
 800662a:	b2db      	uxtb	r3, r3
 800662c:	001a      	movs	r2, r3
 800662e:	0013      	movs	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	189b      	adds	r3, r3, r2
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	b2da      	uxtb	r2, r3
 800663c:	1dfb      	adds	r3, r7, #7
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	210f      	movs	r1, #15
 8006642:	400b      	ands	r3, r1
 8006644:	b2db      	uxtb	r3, r3
 8006646:	18d3      	adds	r3, r2, r3
 8006648:	b2db      	uxtb	r3, r3
}
 800664a:	0018      	movs	r0, r3
 800664c:	46bd      	mov	sp, r7
 800664e:	b004      	add	sp, #16
 8006650:	bd80      	pop	{r7, pc}

08006652 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b082      	sub	sp, #8
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2228      	movs	r2, #40	; 0x28
 800665e:	5c9b      	ldrb	r3, [r3, r2]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d101      	bne.n	8006668 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006664:	2302      	movs	r3, #2
 8006666:	e024      	b.n	80066b2 <HAL_RTCEx_EnableBypassShadow+0x60>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2228      	movs	r2, #40	; 0x28
 800666c:	2101      	movs	r1, #1
 800666e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2229      	movs	r2, #41	; 0x29
 8006674:	2102      	movs	r1, #2
 8006676:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	22ca      	movs	r2, #202	; 0xca
 800667e:	625a      	str	r2, [r3, #36]	; 0x24
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2253      	movs	r2, #83	; 0x53
 8006686:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699a      	ldr	r2, [r3, #24]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2120      	movs	r1, #32
 8006694:	430a      	orrs	r2, r1
 8006696:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	22ff      	movs	r2, #255	; 0xff
 800669e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2229      	movs	r2, #41	; 0x29
 80066a4:	2101      	movs	r1, #1
 80066a6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2228      	movs	r2, #40	; 0x28
 80066ac:	2100      	movs	r1, #0
 80066ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	0018      	movs	r0, r3
 80066b4:	46bd      	mov	sp, r7
 80066b6:	b002      	add	sp, #8
 80066b8:	bd80      	pop	{r7, pc}

080066ba <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2228      	movs	r2, #40	; 0x28
 80066c6:	5c9b      	ldrb	r3, [r3, r2]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <HAL_RTCEx_DisableBypassShadow+0x16>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e024      	b.n	800671a <HAL_RTCEx_DisableBypassShadow+0x60>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2228      	movs	r2, #40	; 0x28
 80066d4:	2101      	movs	r1, #1
 80066d6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2229      	movs	r2, #41	; 0x29
 80066dc:	2102      	movs	r1, #2
 80066de:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	22ca      	movs	r2, #202	; 0xca
 80066e6:	625a      	str	r2, [r3, #36]	; 0x24
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2253      	movs	r2, #83	; 0x53
 80066ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699a      	ldr	r2, [r3, #24]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	21df      	movs	r1, #223	; 0xdf
 80066fc:	400a      	ands	r2, r1
 80066fe:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	22ff      	movs	r2, #255	; 0xff
 8006706:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2229      	movs	r2, #41	; 0x29
 800670c:	2101      	movs	r1, #1
 800670e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2228      	movs	r2, #40	; 0x28
 8006714:	2100      	movs	r1, #0
 8006716:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	0018      	movs	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	b002      	add	sp, #8
 8006720:	bd80      	pop	{r7, pc}

08006722 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b082      	sub	sp, #8
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800672a:	46c0      	nop			; (mov r8, r8)
 800672c:	46bd      	mov	sp, r7
 800672e:	b002      	add	sp, #8
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e0a8      	b.n	8006898 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	2b00      	cmp	r3, #0
 800674c:	d109      	bne.n	8006762 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	2382      	movs	r3, #130	; 0x82
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	429a      	cmp	r2, r3
 8006758:	d009      	beq.n	800676e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	61da      	str	r2, [r3, #28]
 8006760:	e005      	b.n	800676e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	225d      	movs	r2, #93	; 0x5d
 8006778:	5c9b      	ldrb	r3, [r3, r2]
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	d107      	bne.n	8006790 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	225c      	movs	r2, #92	; 0x5c
 8006784:	2100      	movs	r1, #0
 8006786:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	0018      	movs	r0, r3
 800678c:	f7fd fad0 	bl	8003d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	225d      	movs	r2, #93	; 0x5d
 8006794:	2102      	movs	r1, #2
 8006796:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2140      	movs	r1, #64	; 0x40
 80067a4:	438a      	bics	r2, r1
 80067a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	23e0      	movs	r3, #224	; 0xe0
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d902      	bls.n	80067ba <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067b4:	2300      	movs	r3, #0
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	e002      	b.n	80067c0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067ba:	2380      	movs	r3, #128	; 0x80
 80067bc:	015b      	lsls	r3, r3, #5
 80067be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68da      	ldr	r2, [r3, #12]
 80067c4:	23f0      	movs	r3, #240	; 0xf0
 80067c6:	011b      	lsls	r3, r3, #4
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d008      	beq.n	80067de <HAL_SPI_Init+0xaa>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	23e0      	movs	r3, #224	; 0xe0
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d002      	beq.n	80067de <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	2382      	movs	r3, #130	; 0x82
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	401a      	ands	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6899      	ldr	r1, [r3, #8]
 80067ec:	2384      	movs	r3, #132	; 0x84
 80067ee:	021b      	lsls	r3, r3, #8
 80067f0:	400b      	ands	r3, r1
 80067f2:	431a      	orrs	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	2102      	movs	r1, #2
 80067fa:	400b      	ands	r3, r1
 80067fc:	431a      	orrs	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	2101      	movs	r1, #1
 8006804:	400b      	ands	r3, r1
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6999      	ldr	r1, [r3, #24]
 800680c:	2380      	movs	r3, #128	; 0x80
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	400b      	ands	r3, r1
 8006812:	431a      	orrs	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	2138      	movs	r1, #56	; 0x38
 800681a:	400b      	ands	r3, r1
 800681c:	431a      	orrs	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	2180      	movs	r1, #128	; 0x80
 8006824:	400b      	ands	r3, r1
 8006826:	431a      	orrs	r2, r3
 8006828:	0011      	movs	r1, r2
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800682e:	2380      	movs	r3, #128	; 0x80
 8006830:	019b      	lsls	r3, r3, #6
 8006832:	401a      	ands	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	0c1b      	lsrs	r3, r3, #16
 8006842:	2204      	movs	r2, #4
 8006844:	401a      	ands	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	2110      	movs	r1, #16
 800684c:	400b      	ands	r3, r1
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006854:	2108      	movs	r1, #8
 8006856:	400b      	ands	r3, r1
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68d9      	ldr	r1, [r3, #12]
 800685e:	23f0      	movs	r3, #240	; 0xf0
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	400b      	ands	r3, r1
 8006864:	431a      	orrs	r2, r3
 8006866:	0011      	movs	r1, r2
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	2380      	movs	r3, #128	; 0x80
 800686c:	015b      	lsls	r3, r3, #5
 800686e:	401a      	ands	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	69da      	ldr	r2, [r3, #28]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4907      	ldr	r1, [pc, #28]	; (80068a0 <HAL_SPI_Init+0x16c>)
 8006884:	400a      	ands	r2, r1
 8006886:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	225d      	movs	r2, #93	; 0x5d
 8006892:	2101      	movs	r1, #1
 8006894:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	0018      	movs	r0, r3
 800689a:	46bd      	mov	sp, r7
 800689c:	b004      	add	sp, #16
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	fffff7ff 	.word	0xfffff7ff

080068a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	603b      	str	r3, [r7, #0]
 80068b0:	1dbb      	adds	r3, r7, #6
 80068b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068b4:	231f      	movs	r3, #31
 80068b6:	18fb      	adds	r3, r7, r3
 80068b8:	2200      	movs	r2, #0
 80068ba:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	225c      	movs	r2, #92	; 0x5c
 80068c0:	5c9b      	ldrb	r3, [r3, r2]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d101      	bne.n	80068ca <HAL_SPI_Transmit+0x26>
 80068c6:	2302      	movs	r3, #2
 80068c8:	e147      	b.n	8006b5a <HAL_SPI_Transmit+0x2b6>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	225c      	movs	r2, #92	; 0x5c
 80068ce:	2101      	movs	r1, #1
 80068d0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068d2:	f7fd fdd1 	bl	8004478 <HAL_GetTick>
 80068d6:	0003      	movs	r3, r0
 80068d8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80068da:	2316      	movs	r3, #22
 80068dc:	18fb      	adds	r3, r7, r3
 80068de:	1dba      	adds	r2, r7, #6
 80068e0:	8812      	ldrh	r2, [r2, #0]
 80068e2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	225d      	movs	r2, #93	; 0x5d
 80068e8:	5c9b      	ldrb	r3, [r3, r2]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d004      	beq.n	80068fa <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80068f0:	231f      	movs	r3, #31
 80068f2:	18fb      	adds	r3, r7, r3
 80068f4:	2202      	movs	r2, #2
 80068f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80068f8:	e128      	b.n	8006b4c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <HAL_SPI_Transmit+0x64>
 8006900:	1dbb      	adds	r3, r7, #6
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d104      	bne.n	8006912 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006908:	231f      	movs	r3, #31
 800690a:	18fb      	adds	r3, r7, r3
 800690c:	2201      	movs	r2, #1
 800690e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006910:	e11c      	b.n	8006b4c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	225d      	movs	r2, #93	; 0x5d
 8006916:	2103      	movs	r1, #3
 8006918:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	1dba      	adds	r2, r7, #6
 800692a:	8812      	ldrh	r2, [r2, #0]
 800692c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	1dba      	adds	r2, r7, #6
 8006932:	8812      	ldrh	r2, [r2, #0]
 8006934:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2244      	movs	r2, #68	; 0x44
 8006940:	2100      	movs	r1, #0
 8006942:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2246      	movs	r2, #70	; 0x46
 8006948:	2100      	movs	r1, #0
 800694a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	2380      	movs	r3, #128	; 0x80
 800695e:	021b      	lsls	r3, r3, #8
 8006960:	429a      	cmp	r2, r3
 8006962:	d110      	bne.n	8006986 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2140      	movs	r1, #64	; 0x40
 8006970:	438a      	bics	r2, r1
 8006972:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2180      	movs	r1, #128	; 0x80
 8006980:	01c9      	lsls	r1, r1, #7
 8006982:	430a      	orrs	r2, r1
 8006984:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2240      	movs	r2, #64	; 0x40
 800698e:	4013      	ands	r3, r2
 8006990:	2b40      	cmp	r3, #64	; 0x40
 8006992:	d007      	beq.n	80069a4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2140      	movs	r1, #64	; 0x40
 80069a0:	430a      	orrs	r2, r1
 80069a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	23e0      	movs	r3, #224	; 0xe0
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d952      	bls.n	8006a56 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d004      	beq.n	80069c2 <HAL_SPI_Transmit+0x11e>
 80069b8:	2316      	movs	r3, #22
 80069ba:	18fb      	adds	r3, r7, r3
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d143      	bne.n	8006a4a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c6:	881a      	ldrh	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	1c9a      	adds	r2, r3, #2
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069e6:	e030      	b.n	8006a4a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	2202      	movs	r2, #2
 80069f0:	4013      	ands	r3, r2
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d112      	bne.n	8006a1c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fa:	881a      	ldrh	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	1c9a      	adds	r2, r3, #2
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a1a:	e016      	b.n	8006a4a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a1c:	f7fd fd2c 	bl	8004478 <HAL_GetTick>
 8006a20:	0002      	movs	r2, r0
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d802      	bhi.n	8006a32 <HAL_SPI_Transmit+0x18e>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	d102      	bne.n	8006a38 <HAL_SPI_Transmit+0x194>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d108      	bne.n	8006a4a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8006a38:	231f      	movs	r3, #31
 8006a3a:	18fb      	adds	r3, r7, r3
 8006a3c:	2203      	movs	r2, #3
 8006a3e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	225d      	movs	r2, #93	; 0x5d
 8006a44:	2101      	movs	r1, #1
 8006a46:	5499      	strb	r1, [r3, r2]
          goto error;
 8006a48:	e080      	b.n	8006b4c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1c9      	bne.n	80069e8 <HAL_SPI_Transmit+0x144>
 8006a54:	e053      	b.n	8006afe <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d004      	beq.n	8006a68 <HAL_SPI_Transmit+0x1c4>
 8006a5e:	2316      	movs	r3, #22
 8006a60:	18fb      	adds	r3, r7, r3
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d145      	bne.n	8006af4 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	330c      	adds	r3, #12
 8006a72:	7812      	ldrb	r2, [r2, #0]
 8006a74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006a8e:	e031      	b.n	8006af4 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	2202      	movs	r2, #2
 8006a98:	4013      	ands	r3, r2
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d113      	bne.n	8006ac6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	330c      	adds	r3, #12
 8006aa8:	7812      	ldrb	r2, [r2, #0]
 8006aaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	1c5a      	adds	r2, r3, #1
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	3b01      	subs	r3, #1
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ac4:	e016      	b.n	8006af4 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ac6:	f7fd fcd7 	bl	8004478 <HAL_GetTick>
 8006aca:	0002      	movs	r2, r0
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d802      	bhi.n	8006adc <HAL_SPI_Transmit+0x238>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	d102      	bne.n	8006ae2 <HAL_SPI_Transmit+0x23e>
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d108      	bne.n	8006af4 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8006ae2:	231f      	movs	r3, #31
 8006ae4:	18fb      	adds	r3, r7, r3
 8006ae6:	2203      	movs	r2, #3
 8006ae8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	225d      	movs	r2, #93	; 0x5d
 8006aee:	2101      	movs	r1, #1
 8006af0:	5499      	strb	r1, [r3, r2]
          goto error;
 8006af2:	e02b      	b.n	8006b4c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1c8      	bne.n	8006a90 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	6839      	ldr	r1, [r7, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	0018      	movs	r0, r3
 8006b06:	f000 fcef 	bl	80074e8 <SPI_EndRxTxTransaction>
 8006b0a:	1e03      	subs	r3, r0, #0
 8006b0c:	d002      	beq.n	8006b14 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2220      	movs	r2, #32
 8006b12:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10a      	bne.n	8006b32 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	613b      	str	r3, [r7, #16]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	613b      	str	r3, [r7, #16]
 8006b30:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d004      	beq.n	8006b44 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8006b3a:	231f      	movs	r3, #31
 8006b3c:	18fb      	adds	r3, r7, r3
 8006b3e:	2201      	movs	r2, #1
 8006b40:	701a      	strb	r2, [r3, #0]
 8006b42:	e003      	b.n	8006b4c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	225d      	movs	r2, #93	; 0x5d
 8006b48:	2101      	movs	r1, #1
 8006b4a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	225c      	movs	r2, #92	; 0x5c
 8006b50:	2100      	movs	r1, #0
 8006b52:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006b54:	231f      	movs	r3, #31
 8006b56:	18fb      	adds	r3, r7, r3
 8006b58:	781b      	ldrb	r3, [r3, #0]
}
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	b008      	add	sp, #32
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b64:	b590      	push	{r4, r7, lr}
 8006b66:	b089      	sub	sp, #36	; 0x24
 8006b68:	af02      	add	r7, sp, #8
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	603b      	str	r3, [r7, #0]
 8006b70:	1dbb      	adds	r3, r7, #6
 8006b72:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b74:	2117      	movs	r1, #23
 8006b76:	187b      	adds	r3, r7, r1
 8006b78:	2200      	movs	r2, #0
 8006b7a:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	225d      	movs	r2, #93	; 0x5d
 8006b80:	5c9b      	ldrb	r3, [r3, r2]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d003      	beq.n	8006b90 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8006b88:	187b      	adds	r3, r7, r1
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b8e:	e12b      	b.n	8006de8 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	2382      	movs	r3, #130	; 0x82
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d113      	bne.n	8006bc4 <HAL_SPI_Receive+0x60>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10f      	bne.n	8006bc4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	225d      	movs	r2, #93	; 0x5d
 8006ba8:	2104      	movs	r1, #4
 8006baa:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006bac:	1dbb      	adds	r3, r7, #6
 8006bae:	881c      	ldrh	r4, [r3, #0]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	0023      	movs	r3, r4
 8006bbc:	f000 f924 	bl	8006e08 <HAL_SPI_TransmitReceive>
 8006bc0:	0003      	movs	r3, r0
 8006bc2:	e118      	b.n	8006df6 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	225c      	movs	r2, #92	; 0x5c
 8006bc8:	5c9b      	ldrb	r3, [r3, r2]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_SPI_Receive+0x6e>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e111      	b.n	8006df6 <HAL_SPI_Receive+0x292>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	225c      	movs	r2, #92	; 0x5c
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bda:	f7fd fc4d 	bl	8004478 <HAL_GetTick>
 8006bde:	0003      	movs	r3, r0
 8006be0:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <HAL_SPI_Receive+0x8c>
 8006be8:	1dbb      	adds	r3, r7, #6
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d104      	bne.n	8006bfa <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8006bf0:	2317      	movs	r3, #23
 8006bf2:	18fb      	adds	r3, r7, r3
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	701a      	strb	r2, [r3, #0]
    goto error;
 8006bf8:	e0f6      	b.n	8006de8 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	225d      	movs	r2, #93	; 0x5d
 8006bfe:	2104      	movs	r1, #4
 8006c00:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	1dba      	adds	r2, r7, #6
 8006c12:	2144      	movs	r1, #68	; 0x44
 8006c14:	8812      	ldrh	r2, [r2, #0]
 8006c16:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	1dba      	adds	r2, r7, #6
 8006c1c:	2146      	movs	r1, #70	; 0x46
 8006c1e:	8812      	ldrh	r2, [r2, #0]
 8006c20:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	23e0      	movs	r3, #224	; 0xe0
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d908      	bls.n	8006c5e <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	496a      	ldr	r1, [pc, #424]	; (8006e00 <HAL_SPI_Receive+0x29c>)
 8006c58:	400a      	ands	r2, r1
 8006c5a:	605a      	str	r2, [r3, #4]
 8006c5c:	e008      	b.n	8006c70 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2180      	movs	r1, #128	; 0x80
 8006c6a:	0149      	lsls	r1, r1, #5
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	689a      	ldr	r2, [r3, #8]
 8006c74:	2380      	movs	r3, #128	; 0x80
 8006c76:	021b      	lsls	r3, r3, #8
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d10f      	bne.n	8006c9c <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2140      	movs	r1, #64	; 0x40
 8006c88:	438a      	bics	r2, r1
 8006c8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	495b      	ldr	r1, [pc, #364]	; (8006e04 <HAL_SPI_Receive+0x2a0>)
 8006c98:	400a      	ands	r2, r1
 8006c9a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2240      	movs	r2, #64	; 0x40
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	2b40      	cmp	r3, #64	; 0x40
 8006ca8:	d007      	beq.n	8006cba <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2140      	movs	r1, #64	; 0x40
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	68da      	ldr	r2, [r3, #12]
 8006cbe:	23e0      	movs	r3, #224	; 0xe0
 8006cc0:	00db      	lsls	r3, r3, #3
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d900      	bls.n	8006cc8 <HAL_SPI_Receive+0x164>
 8006cc6:	e071      	b.n	8006dac <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006cc8:	e035      	b.n	8006d36 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d117      	bne.n	8006d08 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	330c      	adds	r3, #12
 8006cde:	001a      	movs	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce4:	7812      	ldrb	r2, [r2, #0]
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2246      	movs	r2, #70	; 0x46
 8006cf8:	5a9b      	ldrh	r3, [r3, r2]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b299      	uxth	r1, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2246      	movs	r2, #70	; 0x46
 8006d04:	5299      	strh	r1, [r3, r2]
 8006d06:	e016      	b.n	8006d36 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d08:	f7fd fbb6 	bl	8004478 <HAL_GetTick>
 8006d0c:	0002      	movs	r2, r0
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d802      	bhi.n	8006d1e <HAL_SPI_Receive+0x1ba>
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	d102      	bne.n	8006d24 <HAL_SPI_Receive+0x1c0>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d108      	bne.n	8006d36 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8006d24:	2317      	movs	r3, #23
 8006d26:	18fb      	adds	r3, r7, r3
 8006d28:	2203      	movs	r2, #3
 8006d2a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	225d      	movs	r2, #93	; 0x5d
 8006d30:	2101      	movs	r1, #1
 8006d32:	5499      	strb	r1, [r3, r2]
          goto error;
 8006d34:	e058      	b.n	8006de8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2246      	movs	r2, #70	; 0x46
 8006d3a:	5a9b      	ldrh	r3, [r3, r2]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1c3      	bne.n	8006cca <HAL_SPI_Receive+0x166>
 8006d42:	e039      	b.n	8006db8 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d115      	bne.n	8006d7e <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5c:	b292      	uxth	r2, r2
 8006d5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d64:	1c9a      	adds	r2, r3, #2
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2246      	movs	r2, #70	; 0x46
 8006d6e:	5a9b      	ldrh	r3, [r3, r2]
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b299      	uxth	r1, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2246      	movs	r2, #70	; 0x46
 8006d7a:	5299      	strh	r1, [r3, r2]
 8006d7c:	e016      	b.n	8006dac <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d7e:	f7fd fb7b 	bl	8004478 <HAL_GetTick>
 8006d82:	0002      	movs	r2, r0
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d802      	bhi.n	8006d94 <HAL_SPI_Receive+0x230>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	3301      	adds	r3, #1
 8006d92:	d102      	bne.n	8006d9a <HAL_SPI_Receive+0x236>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d108      	bne.n	8006dac <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8006d9a:	2317      	movs	r3, #23
 8006d9c:	18fb      	adds	r3, r7, r3
 8006d9e:	2203      	movs	r2, #3
 8006da0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	225d      	movs	r2, #93	; 0x5d
 8006da6:	2101      	movs	r1, #1
 8006da8:	5499      	strb	r1, [r3, r2]
          goto error;
 8006daa:	e01d      	b.n	8006de8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2246      	movs	r2, #70	; 0x46
 8006db0:	5a9b      	ldrh	r3, [r3, r2]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1c5      	bne.n	8006d44 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	0018      	movs	r0, r3
 8006dc0:	f000 fb34 	bl	800742c <SPI_EndRxTransaction>
 8006dc4:	1e03      	subs	r3, r0, #0
 8006dc6:	d002      	beq.n	8006dce <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d004      	beq.n	8006de0 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8006dd6:	2317      	movs	r3, #23
 8006dd8:	18fb      	adds	r3, r7, r3
 8006dda:	2201      	movs	r2, #1
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	e003      	b.n	8006de8 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	225d      	movs	r2, #93	; 0x5d
 8006de4:	2101      	movs	r1, #1
 8006de6:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	225c      	movs	r2, #92	; 0x5c
 8006dec:	2100      	movs	r1, #0
 8006dee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006df0:	2317      	movs	r3, #23
 8006df2:	18fb      	adds	r3, r7, r3
 8006df4:	781b      	ldrb	r3, [r3, #0]
}
 8006df6:	0018      	movs	r0, r3
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	b007      	add	sp, #28
 8006dfc:	bd90      	pop	{r4, r7, pc}
 8006dfe:	46c0      	nop			; (mov r8, r8)
 8006e00:	ffffefff 	.word	0xffffefff
 8006e04:	ffffbfff 	.word	0xffffbfff

08006e08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b08a      	sub	sp, #40	; 0x28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	001a      	movs	r2, r3
 8006e16:	1cbb      	adds	r3, r7, #2
 8006e18:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e1e:	2323      	movs	r3, #35	; 0x23
 8006e20:	18fb      	adds	r3, r7, r3
 8006e22:	2200      	movs	r2, #0
 8006e24:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	225c      	movs	r2, #92	; 0x5c
 8006e2a:	5c9b      	ldrb	r3, [r3, r2]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d101      	bne.n	8006e34 <HAL_SPI_TransmitReceive+0x2c>
 8006e30:	2302      	movs	r3, #2
 8006e32:	e1c4      	b.n	80071be <HAL_SPI_TransmitReceive+0x3b6>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	225c      	movs	r2, #92	; 0x5c
 8006e38:	2101      	movs	r1, #1
 8006e3a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e3c:	f7fd fb1c 	bl	8004478 <HAL_GetTick>
 8006e40:	0003      	movs	r3, r0
 8006e42:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e44:	201b      	movs	r0, #27
 8006e46:	183b      	adds	r3, r7, r0
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	215d      	movs	r1, #93	; 0x5d
 8006e4c:	5c52      	ldrb	r2, [r2, r1]
 8006e4e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006e56:	2312      	movs	r3, #18
 8006e58:	18fb      	adds	r3, r7, r3
 8006e5a:	1cba      	adds	r2, r7, #2
 8006e5c:	8812      	ldrh	r2, [r2, #0]
 8006e5e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e60:	183b      	adds	r3, r7, r0
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d011      	beq.n	8006e8c <HAL_SPI_TransmitReceive+0x84>
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	2382      	movs	r3, #130	; 0x82
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d107      	bne.n	8006e82 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d103      	bne.n	8006e82 <HAL_SPI_TransmitReceive+0x7a>
 8006e7a:	183b      	adds	r3, r7, r0
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	d004      	beq.n	8006e8c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006e82:	2323      	movs	r3, #35	; 0x23
 8006e84:	18fb      	adds	r3, r7, r3
 8006e86:	2202      	movs	r2, #2
 8006e88:	701a      	strb	r2, [r3, #0]
    goto error;
 8006e8a:	e191      	b.n	80071b0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d006      	beq.n	8006ea0 <HAL_SPI_TransmitReceive+0x98>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <HAL_SPI_TransmitReceive+0x98>
 8006e98:	1cbb      	adds	r3, r7, #2
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d104      	bne.n	8006eaa <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006ea0:	2323      	movs	r3, #35	; 0x23
 8006ea2:	18fb      	adds	r3, r7, r3
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ea8:	e182      	b.n	80071b0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	225d      	movs	r2, #93	; 0x5d
 8006eae:	5c9b      	ldrb	r3, [r3, r2]
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d003      	beq.n	8006ebe <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	225d      	movs	r2, #93	; 0x5d
 8006eba:	2105      	movs	r1, #5
 8006ebc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	1cba      	adds	r2, r7, #2
 8006ece:	2146      	movs	r1, #70	; 0x46
 8006ed0:	8812      	ldrh	r2, [r2, #0]
 8006ed2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	1cba      	adds	r2, r7, #2
 8006ed8:	2144      	movs	r1, #68	; 0x44
 8006eda:	8812      	ldrh	r2, [r2, #0]
 8006edc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	1cba      	adds	r2, r7, #2
 8006ee8:	8812      	ldrh	r2, [r2, #0]
 8006eea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	1cba      	adds	r2, r7, #2
 8006ef0:	8812      	ldrh	r2, [r2, #0]
 8006ef2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	23e0      	movs	r3, #224	; 0xe0
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d908      	bls.n	8006f1e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	49ac      	ldr	r1, [pc, #688]	; (80071c8 <HAL_SPI_TransmitReceive+0x3c0>)
 8006f18:	400a      	ands	r2, r1
 8006f1a:	605a      	str	r2, [r3, #4]
 8006f1c:	e008      	b.n	8006f30 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2180      	movs	r1, #128	; 0x80
 8006f2a:	0149      	lsls	r1, r1, #5
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2240      	movs	r2, #64	; 0x40
 8006f38:	4013      	ands	r3, r2
 8006f3a:	2b40      	cmp	r3, #64	; 0x40
 8006f3c:	d007      	beq.n	8006f4e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2140      	movs	r1, #64	; 0x40
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	23e0      	movs	r3, #224	; 0xe0
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d800      	bhi.n	8006f5c <HAL_SPI_TransmitReceive+0x154>
 8006f5a:	e083      	b.n	8007064 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <HAL_SPI_TransmitReceive+0x168>
 8006f64:	2312      	movs	r3, #18
 8006f66:	18fb      	adds	r3, r7, r3
 8006f68:	881b      	ldrh	r3, [r3, #0]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d000      	beq.n	8006f70 <HAL_SPI_TransmitReceive+0x168>
 8006f6e:	e06d      	b.n	800704c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	881a      	ldrh	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f80:	1c9a      	adds	r2, r3, #2
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f94:	e05a      	b.n	800704c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d11b      	bne.n	8006fdc <HAL_SPI_TransmitReceive+0x1d4>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d016      	beq.n	8006fdc <HAL_SPI_TransmitReceive+0x1d4>
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d113      	bne.n	8006fdc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb8:	881a      	ldrh	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc4:	1c9a      	adds	r2, r3, #2
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d11c      	bne.n	8007024 <HAL_SPI_TransmitReceive+0x21c>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2246      	movs	r2, #70	; 0x46
 8006fee:	5a9b      	ldrh	r3, [r3, r2]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d016      	beq.n	8007024 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	b292      	uxth	r2, r2
 8007002:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	1c9a      	adds	r2, r3, #2
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2246      	movs	r2, #70	; 0x46
 8007012:	5a9b      	ldrh	r3, [r3, r2]
 8007014:	b29b      	uxth	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	b299      	uxth	r1, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2246      	movs	r2, #70	; 0x46
 800701e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007020:	2301      	movs	r3, #1
 8007022:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007024:	f7fd fa28 	bl	8004478 <HAL_GetTick>
 8007028:	0002      	movs	r2, r0
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007030:	429a      	cmp	r2, r3
 8007032:	d80b      	bhi.n	800704c <HAL_SPI_TransmitReceive+0x244>
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	3301      	adds	r3, #1
 8007038:	d008      	beq.n	800704c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800703a:	2323      	movs	r3, #35	; 0x23
 800703c:	18fb      	adds	r3, r7, r3
 800703e:	2203      	movs	r2, #3
 8007040:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	225d      	movs	r2, #93	; 0x5d
 8007046:	2101      	movs	r1, #1
 8007048:	5499      	strb	r1, [r3, r2]
        goto error;
 800704a:	e0b1      	b.n	80071b0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007050:	b29b      	uxth	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d19f      	bne.n	8006f96 <HAL_SPI_TransmitReceive+0x18e>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2246      	movs	r2, #70	; 0x46
 800705a:	5a9b      	ldrh	r3, [r3, r2]
 800705c:	b29b      	uxth	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d199      	bne.n	8006f96 <HAL_SPI_TransmitReceive+0x18e>
 8007062:	e089      	b.n	8007178 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <HAL_SPI_TransmitReceive+0x270>
 800706c:	2312      	movs	r3, #18
 800706e:	18fb      	adds	r3, r7, r3
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d000      	beq.n	8007078 <HAL_SPI_TransmitReceive+0x270>
 8007076:	e074      	b.n	8007162 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	330c      	adds	r3, #12
 8007082:	7812      	ldrb	r2, [r2, #0]
 8007084:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007094:	b29b      	uxth	r3, r3
 8007096:	3b01      	subs	r3, #1
 8007098:	b29a      	uxth	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800709e:	e060      	b.n	8007162 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	2202      	movs	r2, #2
 80070a8:	4013      	ands	r3, r2
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d11c      	bne.n	80070e8 <HAL_SPI_TransmitReceive+0x2e0>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d017      	beq.n	80070e8 <HAL_SPI_TransmitReceive+0x2e0>
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d114      	bne.n	80070e8 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	330c      	adds	r3, #12
 80070c8:	7812      	ldrb	r2, [r2, #0]
 80070ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070da:	b29b      	uxth	r3, r3
 80070dc:	3b01      	subs	r3, #1
 80070de:	b29a      	uxth	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	2201      	movs	r2, #1
 80070f0:	4013      	ands	r3, r2
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d11e      	bne.n	8007134 <HAL_SPI_TransmitReceive+0x32c>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2246      	movs	r2, #70	; 0x46
 80070fa:	5a9b      	ldrh	r3, [r3, r2]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d018      	beq.n	8007134 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	330c      	adds	r3, #12
 8007108:	001a      	movs	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	7812      	ldrb	r2, [r2, #0]
 8007110:	b2d2      	uxtb	r2, r2
 8007112:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2246      	movs	r2, #70	; 0x46
 8007122:	5a9b      	ldrh	r3, [r3, r2]
 8007124:	b29b      	uxth	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	b299      	uxth	r1, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2246      	movs	r2, #70	; 0x46
 800712e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007130:	2301      	movs	r3, #1
 8007132:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007134:	f7fd f9a0 	bl	8004478 <HAL_GetTick>
 8007138:	0002      	movs	r2, r0
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007140:	429a      	cmp	r2, r3
 8007142:	d802      	bhi.n	800714a <HAL_SPI_TransmitReceive+0x342>
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	3301      	adds	r3, #1
 8007148:	d102      	bne.n	8007150 <HAL_SPI_TransmitReceive+0x348>
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	2b00      	cmp	r3, #0
 800714e:	d108      	bne.n	8007162 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8007150:	2323      	movs	r3, #35	; 0x23
 8007152:	18fb      	adds	r3, r7, r3
 8007154:	2203      	movs	r2, #3
 8007156:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	225d      	movs	r2, #93	; 0x5d
 800715c:	2101      	movs	r1, #1
 800715e:	5499      	strb	r1, [r3, r2]
        goto error;
 8007160:	e026      	b.n	80071b0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007166:	b29b      	uxth	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	d199      	bne.n	80070a0 <HAL_SPI_TransmitReceive+0x298>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2246      	movs	r2, #70	; 0x46
 8007170:	5a9b      	ldrh	r3, [r3, r2]
 8007172:	b29b      	uxth	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d193      	bne.n	80070a0 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007178:	69fa      	ldr	r2, [r7, #28]
 800717a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	0018      	movs	r0, r3
 8007180:	f000 f9b2 	bl	80074e8 <SPI_EndRxTxTransaction>
 8007184:	1e03      	subs	r3, r0, #0
 8007186:	d006      	beq.n	8007196 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8007188:	2323      	movs	r3, #35	; 0x23
 800718a:	18fb      	adds	r3, r7, r3
 800718c:	2201      	movs	r2, #1
 800718e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2220      	movs	r2, #32
 8007194:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800719a:	2b00      	cmp	r3, #0
 800719c:	d004      	beq.n	80071a8 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800719e:	2323      	movs	r3, #35	; 0x23
 80071a0:	18fb      	adds	r3, r7, r3
 80071a2:	2201      	movs	r2, #1
 80071a4:	701a      	strb	r2, [r3, #0]
 80071a6:	e003      	b.n	80071b0 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	225d      	movs	r2, #93	; 0x5d
 80071ac:	2101      	movs	r1, #1
 80071ae:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	225c      	movs	r2, #92	; 0x5c
 80071b4:	2100      	movs	r1, #0
 80071b6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80071b8:	2323      	movs	r3, #35	; 0x23
 80071ba:	18fb      	adds	r3, r7, r3
 80071bc:	781b      	ldrb	r3, [r3, #0]
}
 80071be:	0018      	movs	r0, r3
 80071c0:	46bd      	mov	sp, r7
 80071c2:	b00a      	add	sp, #40	; 0x28
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	46c0      	nop			; (mov r8, r8)
 80071c8:	ffffefff 	.word	0xffffefff

080071cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	603b      	str	r3, [r7, #0]
 80071d8:	1dfb      	adds	r3, r7, #7
 80071da:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071dc:	f7fd f94c 	bl	8004478 <HAL_GetTick>
 80071e0:	0002      	movs	r2, r0
 80071e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e4:	1a9b      	subs	r3, r3, r2
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	18d3      	adds	r3, r2, r3
 80071ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071ec:	f7fd f944 	bl	8004478 <HAL_GetTick>
 80071f0:	0003      	movs	r3, r0
 80071f2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071f4:	4b3a      	ldr	r3, [pc, #232]	; (80072e0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	015b      	lsls	r3, r3, #5
 80071fa:	0d1b      	lsrs	r3, r3, #20
 80071fc:	69fa      	ldr	r2, [r7, #28]
 80071fe:	4353      	muls	r3, r2
 8007200:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007202:	e058      	b.n	80072b6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	3301      	adds	r3, #1
 8007208:	d055      	beq.n	80072b6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800720a:	f7fd f935 	bl	8004478 <HAL_GetTick>
 800720e:	0002      	movs	r2, r0
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	429a      	cmp	r2, r3
 8007218:	d902      	bls.n	8007220 <SPI_WaitFlagStateUntilTimeout+0x54>
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d142      	bne.n	80072a6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	21e0      	movs	r1, #224	; 0xe0
 800722c:	438a      	bics	r2, r1
 800722e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	2382      	movs	r3, #130	; 0x82
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	429a      	cmp	r2, r3
 800723a:	d113      	bne.n	8007264 <SPI_WaitFlagStateUntilTimeout+0x98>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	2380      	movs	r3, #128	; 0x80
 8007242:	021b      	lsls	r3, r3, #8
 8007244:	429a      	cmp	r2, r3
 8007246:	d005      	beq.n	8007254 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	2380      	movs	r3, #128	; 0x80
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	429a      	cmp	r2, r3
 8007252:	d107      	bne.n	8007264 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2140      	movs	r1, #64	; 0x40
 8007260:	438a      	bics	r2, r1
 8007262:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007268:	2380      	movs	r3, #128	; 0x80
 800726a:	019b      	lsls	r3, r3, #6
 800726c:	429a      	cmp	r2, r3
 800726e:	d110      	bne.n	8007292 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	491a      	ldr	r1, [pc, #104]	; (80072e4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800727c:	400a      	ands	r2, r1
 800727e:	601a      	str	r2, [r3, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2180      	movs	r1, #128	; 0x80
 800728c:	0189      	lsls	r1, r1, #6
 800728e:	430a      	orrs	r2, r1
 8007290:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	225d      	movs	r2, #93	; 0x5d
 8007296:	2101      	movs	r1, #1
 8007298:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	225c      	movs	r2, #92	; 0x5c
 800729e:	2100      	movs	r1, #0
 80072a0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e017      	b.n	80072d6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	4013      	ands	r3, r2
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	425a      	negs	r2, r3
 80072c6:	4153      	adcs	r3, r2
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	001a      	movs	r2, r3
 80072cc:	1dfb      	adds	r3, r7, #7
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d197      	bne.n	8007204 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	0018      	movs	r0, r3
 80072d8:	46bd      	mov	sp, r7
 80072da:	b008      	add	sp, #32
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	46c0      	nop			; (mov r8, r8)
 80072e0:	20000010 	.word	0x20000010
 80072e4:	ffffdfff 	.word	0xffffdfff

080072e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08a      	sub	sp, #40	; 0x28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80072f6:	2317      	movs	r3, #23
 80072f8:	18fb      	adds	r3, r7, r3
 80072fa:	2200      	movs	r2, #0
 80072fc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80072fe:	f7fd f8bb 	bl	8004478 <HAL_GetTick>
 8007302:	0002      	movs	r2, r0
 8007304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007306:	1a9b      	subs	r3, r3, r2
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	18d3      	adds	r3, r2, r3
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800730e:	f7fd f8b3 	bl	8004478 <HAL_GetTick>
 8007312:	0003      	movs	r3, r0
 8007314:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	330c      	adds	r3, #12
 800731c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800731e:	4b41      	ldr	r3, [pc, #260]	; (8007424 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	0013      	movs	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	189b      	adds	r3, r3, r2
 8007328:	00da      	lsls	r2, r3, #3
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	0d1b      	lsrs	r3, r3, #20
 800732e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007330:	4353      	muls	r3, r2
 8007332:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007334:	e068      	b.n	8007408 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	23c0      	movs	r3, #192	; 0xc0
 800733a:	00db      	lsls	r3, r3, #3
 800733c:	429a      	cmp	r2, r3
 800733e:	d10a      	bne.n	8007356 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d107      	bne.n	8007356 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	b2da      	uxtb	r2, r3
 800734c:	2117      	movs	r1, #23
 800734e:	187b      	adds	r3, r7, r1
 8007350:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007352:	187b      	adds	r3, r7, r1
 8007354:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	3301      	adds	r3, #1
 800735a:	d055      	beq.n	8007408 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800735c:	f7fd f88c 	bl	8004478 <HAL_GetTick>
 8007360:	0002      	movs	r2, r0
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007368:	429a      	cmp	r2, r3
 800736a:	d902      	bls.n	8007372 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	2b00      	cmp	r3, #0
 8007370:	d142      	bne.n	80073f8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	21e0      	movs	r1, #224	; 0xe0
 800737e:	438a      	bics	r2, r1
 8007380:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	2382      	movs	r3, #130	; 0x82
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	429a      	cmp	r2, r3
 800738c:	d113      	bne.n	80073b6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	2380      	movs	r3, #128	; 0x80
 8007394:	021b      	lsls	r3, r3, #8
 8007396:	429a      	cmp	r2, r3
 8007398:	d005      	beq.n	80073a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	689a      	ldr	r2, [r3, #8]
 800739e:	2380      	movs	r3, #128	; 0x80
 80073a0:	00db      	lsls	r3, r3, #3
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d107      	bne.n	80073b6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2140      	movs	r1, #64	; 0x40
 80073b2:	438a      	bics	r2, r1
 80073b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ba:	2380      	movs	r3, #128	; 0x80
 80073bc:	019b      	lsls	r3, r3, #6
 80073be:	429a      	cmp	r2, r3
 80073c0:	d110      	bne.n	80073e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4916      	ldr	r1, [pc, #88]	; (8007428 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80073ce:	400a      	ands	r2, r1
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2180      	movs	r1, #128	; 0x80
 80073de:	0189      	lsls	r1, r1, #6
 80073e0:	430a      	orrs	r2, r1
 80073e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	225d      	movs	r2, #93	; 0x5d
 80073e8:	2101      	movs	r1, #1
 80073ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	225c      	movs	r2, #92	; 0x5c
 80073f0:	2100      	movs	r1, #0
 80073f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e010      	b.n	800741a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80073fe:	2300      	movs	r3, #0
 8007400:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	3b01      	subs	r3, #1
 8007406:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	4013      	ands	r3, r2
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	429a      	cmp	r2, r3
 8007416:	d18e      	bne.n	8007336 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	0018      	movs	r0, r3
 800741c:	46bd      	mov	sp, r7
 800741e:	b00a      	add	sp, #40	; 0x28
 8007420:	bd80      	pop	{r7, pc}
 8007422:	46c0      	nop			; (mov r8, r8)
 8007424:	20000010 	.word	0x20000010
 8007428:	ffffdfff 	.word	0xffffdfff

0800742c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af02      	add	r7, sp, #8
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	2382      	movs	r3, #130	; 0x82
 800743e:	005b      	lsls	r3, r3, #1
 8007440:	429a      	cmp	r2, r3
 8007442:	d113      	bne.n	800746c <SPI_EndRxTransaction+0x40>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	2380      	movs	r3, #128	; 0x80
 800744a:	021b      	lsls	r3, r3, #8
 800744c:	429a      	cmp	r2, r3
 800744e:	d005      	beq.n	800745c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	2380      	movs	r3, #128	; 0x80
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	429a      	cmp	r2, r3
 800745a:	d107      	bne.n	800746c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2140      	movs	r1, #64	; 0x40
 8007468:	438a      	bics	r2, r1
 800746a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	0013      	movs	r3, r2
 8007476:	2200      	movs	r2, #0
 8007478:	2180      	movs	r1, #128	; 0x80
 800747a:	f7ff fea7 	bl	80071cc <SPI_WaitFlagStateUntilTimeout>
 800747e:	1e03      	subs	r3, r0, #0
 8007480:	d007      	beq.n	8007492 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007486:	2220      	movs	r2, #32
 8007488:	431a      	orrs	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e026      	b.n	80074e0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	2382      	movs	r3, #130	; 0x82
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	429a      	cmp	r2, r3
 800749c:	d11f      	bne.n	80074de <SPI_EndRxTransaction+0xb2>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	689a      	ldr	r2, [r3, #8]
 80074a2:	2380      	movs	r3, #128	; 0x80
 80074a4:	021b      	lsls	r3, r3, #8
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d005      	beq.n	80074b6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	689a      	ldr	r2, [r3, #8]
 80074ae:	2380      	movs	r3, #128	; 0x80
 80074b0:	00db      	lsls	r3, r3, #3
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d113      	bne.n	80074de <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	23c0      	movs	r3, #192	; 0xc0
 80074ba:	00d9      	lsls	r1, r3, #3
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	0013      	movs	r3, r2
 80074c4:	2200      	movs	r2, #0
 80074c6:	f7ff ff0f 	bl	80072e8 <SPI_WaitFifoStateUntilTimeout>
 80074ca:	1e03      	subs	r3, r0, #0
 80074cc:	d007      	beq.n	80074de <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d2:	2220      	movs	r2, #32
 80074d4:	431a      	orrs	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e000      	b.n	80074e0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	0018      	movs	r0, r3
 80074e2:	46bd      	mov	sp, r7
 80074e4:	b004      	add	sp, #16
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af02      	add	r7, sp, #8
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	23c0      	movs	r3, #192	; 0xc0
 80074f8:	0159      	lsls	r1, r3, #5
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	0013      	movs	r3, r2
 8007502:	2200      	movs	r2, #0
 8007504:	f7ff fef0 	bl	80072e8 <SPI_WaitFifoStateUntilTimeout>
 8007508:	1e03      	subs	r3, r0, #0
 800750a:	d007      	beq.n	800751c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007510:	2220      	movs	r2, #32
 8007512:	431a      	orrs	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e027      	b.n	800756c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	0013      	movs	r3, r2
 8007526:	2200      	movs	r2, #0
 8007528:	2180      	movs	r1, #128	; 0x80
 800752a:	f7ff fe4f 	bl	80071cc <SPI_WaitFlagStateUntilTimeout>
 800752e:	1e03      	subs	r3, r0, #0
 8007530:	d007      	beq.n	8007542 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007536:	2220      	movs	r2, #32
 8007538:	431a      	orrs	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e014      	b.n	800756c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	23c0      	movs	r3, #192	; 0xc0
 8007546:	00d9      	lsls	r1, r3, #3
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	0013      	movs	r3, r2
 8007550:	2200      	movs	r2, #0
 8007552:	f7ff fec9 	bl	80072e8 <SPI_WaitFifoStateUntilTimeout>
 8007556:	1e03      	subs	r3, r0, #0
 8007558:	d007      	beq.n	800756a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800755e:	2220      	movs	r2, #32
 8007560:	431a      	orrs	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e000      	b.n	800756c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	0018      	movs	r0, r3
 800756e:	46bd      	mov	sp, r7
 8007570:	b004      	add	sp, #16
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e04a      	b.n	800761c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	223d      	movs	r2, #61	; 0x3d
 800758a:	5c9b      	ldrb	r3, [r3, r2]
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d107      	bne.n	80075a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	223c      	movs	r2, #60	; 0x3c
 8007596:	2100      	movs	r1, #0
 8007598:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	0018      	movs	r0, r3
 800759e:	f7fc fc11 	bl	8003dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	223d      	movs	r2, #61	; 0x3d
 80075a6:	2102      	movs	r1, #2
 80075a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3304      	adds	r3, #4
 80075b2:	0019      	movs	r1, r3
 80075b4:	0010      	movs	r0, r2
 80075b6:	f000 f9ed 	bl	8007994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2248      	movs	r2, #72	; 0x48
 80075be:	2101      	movs	r1, #1
 80075c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	223e      	movs	r2, #62	; 0x3e
 80075c6:	2101      	movs	r1, #1
 80075c8:	5499      	strb	r1, [r3, r2]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	223f      	movs	r2, #63	; 0x3f
 80075ce:	2101      	movs	r1, #1
 80075d0:	5499      	strb	r1, [r3, r2]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2240      	movs	r2, #64	; 0x40
 80075d6:	2101      	movs	r1, #1
 80075d8:	5499      	strb	r1, [r3, r2]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2241      	movs	r2, #65	; 0x41
 80075de:	2101      	movs	r1, #1
 80075e0:	5499      	strb	r1, [r3, r2]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2242      	movs	r2, #66	; 0x42
 80075e6:	2101      	movs	r1, #1
 80075e8:	5499      	strb	r1, [r3, r2]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2243      	movs	r2, #67	; 0x43
 80075ee:	2101      	movs	r1, #1
 80075f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2244      	movs	r2, #68	; 0x44
 80075f6:	2101      	movs	r1, #1
 80075f8:	5499      	strb	r1, [r3, r2]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2245      	movs	r2, #69	; 0x45
 80075fe:	2101      	movs	r1, #1
 8007600:	5499      	strb	r1, [r3, r2]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2246      	movs	r2, #70	; 0x46
 8007606:	2101      	movs	r1, #1
 8007608:	5499      	strb	r1, [r3, r2]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2247      	movs	r2, #71	; 0x47
 800760e:	2101      	movs	r1, #1
 8007610:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	223d      	movs	r2, #61	; 0x3d
 8007616:	2101      	movs	r1, #1
 8007618:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	0018      	movs	r0, r3
 800761e:	46bd      	mov	sp, r7
 8007620:	b002      	add	sp, #8
 8007622:	bd80      	pop	{r7, pc}

08007624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	223d      	movs	r2, #61	; 0x3d
 8007630:	5c9b      	ldrb	r3, [r3, r2]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b01      	cmp	r3, #1
 8007636:	d001      	beq.n	800763c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e047      	b.n	80076cc <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	223d      	movs	r2, #61	; 0x3d
 8007640:	2102      	movs	r1, #2
 8007642:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2101      	movs	r1, #1
 8007650:	430a      	orrs	r2, r1
 8007652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a1e      	ldr	r2, [pc, #120]	; (80076d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d014      	beq.n	8007688 <HAL_TIM_Base_Start_IT+0x64>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	2380      	movs	r3, #128	; 0x80
 8007664:	05db      	lsls	r3, r3, #23
 8007666:	429a      	cmp	r2, r3
 8007668:	d00e      	beq.n	8007688 <HAL_TIM_Base_Start_IT+0x64>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a1a      	ldr	r2, [pc, #104]	; (80076d8 <HAL_TIM_Base_Start_IT+0xb4>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d009      	beq.n	8007688 <HAL_TIM_Base_Start_IT+0x64>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a18      	ldr	r2, [pc, #96]	; (80076dc <HAL_TIM_Base_Start_IT+0xb8>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d004      	beq.n	8007688 <HAL_TIM_Base_Start_IT+0x64>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a17      	ldr	r2, [pc, #92]	; (80076e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d116      	bne.n	80076b6 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	4a15      	ldr	r2, [pc, #84]	; (80076e4 <HAL_TIM_Base_Start_IT+0xc0>)
 8007690:	4013      	ands	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2b06      	cmp	r3, #6
 8007698:	d016      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0xa4>
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	2380      	movs	r3, #128	; 0x80
 800769e:	025b      	lsls	r3, r3, #9
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d011      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2101      	movs	r1, #1
 80076b0:	430a      	orrs	r2, r1
 80076b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b4:	e008      	b.n	80076c8 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2101      	movs	r1, #1
 80076c2:	430a      	orrs	r2, r1
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	e000      	b.n	80076ca <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	0018      	movs	r0, r3
 80076ce:	46bd      	mov	sp, r7
 80076d0:	b004      	add	sp, #16
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	40012c00 	.word	0x40012c00
 80076d8:	40000400 	.word	0x40000400
 80076dc:	40000800 	.word	0x40000800
 80076e0:	40014000 	.word	0x40014000
 80076e4:	00010007 	.word	0x00010007

080076e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68da      	ldr	r2, [r3, #12]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2101      	movs	r1, #1
 80076fc:	438a      	bics	r2, r1
 80076fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	4a0d      	ldr	r2, [pc, #52]	; (800773c <HAL_TIM_Base_Stop_IT+0x54>)
 8007708:	4013      	ands	r3, r2
 800770a:	d10d      	bne.n	8007728 <HAL_TIM_Base_Stop_IT+0x40>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	4a0b      	ldr	r2, [pc, #44]	; (8007740 <HAL_TIM_Base_Stop_IT+0x58>)
 8007714:	4013      	ands	r3, r2
 8007716:	d107      	bne.n	8007728 <HAL_TIM_Base_Stop_IT+0x40>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2101      	movs	r1, #1
 8007724:	438a      	bics	r2, r1
 8007726:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	223d      	movs	r2, #61	; 0x3d
 800772c:	2101      	movs	r1, #1
 800772e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	0018      	movs	r0, r3
 8007734:	46bd      	mov	sp, r7
 8007736:	b002      	add	sp, #8
 8007738:	bd80      	pop	{r7, pc}
 800773a:	46c0      	nop			; (mov r8, r8)
 800773c:	00001111 	.word	0x00001111
 8007740:	00000444 	.word	0x00000444

08007744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2202      	movs	r2, #2
 8007760:	4013      	ands	r3, r2
 8007762:	d021      	beq.n	80077a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2202      	movs	r2, #2
 8007768:	4013      	ands	r3, r2
 800776a:	d01d      	beq.n	80077a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2203      	movs	r2, #3
 8007772:	4252      	negs	r2, r2
 8007774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	2203      	movs	r2, #3
 8007784:	4013      	ands	r3, r2
 8007786:	d004      	beq.n	8007792 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	0018      	movs	r0, r3
 800778c:	f000 f8ea 	bl	8007964 <HAL_TIM_IC_CaptureCallback>
 8007790:	e007      	b.n	80077a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	0018      	movs	r0, r3
 8007796:	f000 f8dd 	bl	8007954 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	0018      	movs	r0, r3
 800779e:	f000 f8e9 	bl	8007974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2204      	movs	r2, #4
 80077ac:	4013      	ands	r3, r2
 80077ae:	d022      	beq.n	80077f6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2204      	movs	r2, #4
 80077b4:	4013      	ands	r3, r2
 80077b6:	d01e      	beq.n	80077f6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2205      	movs	r2, #5
 80077be:	4252      	negs	r2, r2
 80077c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2202      	movs	r2, #2
 80077c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	23c0      	movs	r3, #192	; 0xc0
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4013      	ands	r3, r2
 80077d4:	d004      	beq.n	80077e0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	0018      	movs	r0, r3
 80077da:	f000 f8c3 	bl	8007964 <HAL_TIM_IC_CaptureCallback>
 80077de:	e007      	b.n	80077f0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	0018      	movs	r0, r3
 80077e4:	f000 f8b6 	bl	8007954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	0018      	movs	r0, r3
 80077ec:	f000 f8c2 	bl	8007974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	2208      	movs	r2, #8
 80077fa:	4013      	ands	r3, r2
 80077fc:	d021      	beq.n	8007842 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2208      	movs	r2, #8
 8007802:	4013      	ands	r3, r2
 8007804:	d01d      	beq.n	8007842 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2209      	movs	r2, #9
 800780c:	4252      	negs	r2, r2
 800780e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2204      	movs	r2, #4
 8007814:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	2203      	movs	r2, #3
 800781e:	4013      	ands	r3, r2
 8007820:	d004      	beq.n	800782c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	0018      	movs	r0, r3
 8007826:	f000 f89d 	bl	8007964 <HAL_TIM_IC_CaptureCallback>
 800782a:	e007      	b.n	800783c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	0018      	movs	r0, r3
 8007830:	f000 f890 	bl	8007954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	0018      	movs	r0, r3
 8007838:	f000 f89c 	bl	8007974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2210      	movs	r2, #16
 8007846:	4013      	ands	r3, r2
 8007848:	d022      	beq.n	8007890 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2210      	movs	r2, #16
 800784e:	4013      	ands	r3, r2
 8007850:	d01e      	beq.n	8007890 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2211      	movs	r2, #17
 8007858:	4252      	negs	r2, r2
 800785a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2208      	movs	r2, #8
 8007860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69da      	ldr	r2, [r3, #28]
 8007868:	23c0      	movs	r3, #192	; 0xc0
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4013      	ands	r3, r2
 800786e:	d004      	beq.n	800787a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	0018      	movs	r0, r3
 8007874:	f000 f876 	bl	8007964 <HAL_TIM_IC_CaptureCallback>
 8007878:	e007      	b.n	800788a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	0018      	movs	r0, r3
 800787e:	f000 f869 	bl	8007954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	0018      	movs	r0, r3
 8007886:	f000 f875 	bl	8007974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	2201      	movs	r2, #1
 8007894:	4013      	ands	r3, r2
 8007896:	d00c      	beq.n	80078b2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2201      	movs	r2, #1
 800789c:	4013      	ands	r3, r2
 800789e:	d008      	beq.n	80078b2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2202      	movs	r2, #2
 80078a6:	4252      	negs	r2, r2
 80078a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	0018      	movs	r0, r3
 80078ae:	f7fc f991 	bl	8003bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2280      	movs	r2, #128	; 0x80
 80078b6:	4013      	ands	r3, r2
 80078b8:	d104      	bne.n	80078c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	2380      	movs	r3, #128	; 0x80
 80078be:	019b      	lsls	r3, r3, #6
 80078c0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80078c2:	d00b      	beq.n	80078dc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2280      	movs	r2, #128	; 0x80
 80078c8:	4013      	ands	r3, r2
 80078ca:	d007      	beq.n	80078dc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a1e      	ldr	r2, [pc, #120]	; (800794c <HAL_TIM_IRQHandler+0x208>)
 80078d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	0018      	movs	r0, r3
 80078d8:	f000 f972 	bl	8007bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	2380      	movs	r3, #128	; 0x80
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	4013      	ands	r3, r2
 80078e4:	d00b      	beq.n	80078fe <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2280      	movs	r2, #128	; 0x80
 80078ea:	4013      	ands	r3, r2
 80078ec:	d007      	beq.n	80078fe <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a17      	ldr	r2, [pc, #92]	; (8007950 <HAL_TIM_IRQHandler+0x20c>)
 80078f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	0018      	movs	r0, r3
 80078fa:	f000 f969 	bl	8007bd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2240      	movs	r2, #64	; 0x40
 8007902:	4013      	ands	r3, r2
 8007904:	d00c      	beq.n	8007920 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2240      	movs	r2, #64	; 0x40
 800790a:	4013      	ands	r3, r2
 800790c:	d008      	beq.n	8007920 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2241      	movs	r2, #65	; 0x41
 8007914:	4252      	negs	r2, r2
 8007916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	0018      	movs	r0, r3
 800791c:	f000 f832 	bl	8007984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2220      	movs	r2, #32
 8007924:	4013      	ands	r3, r2
 8007926:	d00c      	beq.n	8007942 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2220      	movs	r2, #32
 800792c:	4013      	ands	r3, r2
 800792e:	d008      	beq.n	8007942 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2221      	movs	r2, #33	; 0x21
 8007936:	4252      	negs	r2, r2
 8007938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	0018      	movs	r0, r3
 800793e:	f000 f937 	bl	8007bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007942:	46c0      	nop			; (mov r8, r8)
 8007944:	46bd      	mov	sp, r7
 8007946:	b004      	add	sp, #16
 8007948:	bd80      	pop	{r7, pc}
 800794a:	46c0      	nop			; (mov r8, r8)
 800794c:	ffffdf7f 	.word	0xffffdf7f
 8007950:	fffffeff 	.word	0xfffffeff

08007954 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800795c:	46c0      	nop			; (mov r8, r8)
 800795e:	46bd      	mov	sp, r7
 8007960:	b002      	add	sp, #8
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800796c:	46c0      	nop			; (mov r8, r8)
 800796e:	46bd      	mov	sp, r7
 8007970:	b002      	add	sp, #8
 8007972:	bd80      	pop	{r7, pc}

08007974 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800797c:	46c0      	nop			; (mov r8, r8)
 800797e:	46bd      	mov	sp, r7
 8007980:	b002      	add	sp, #8
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800798c:	46c0      	nop			; (mov r8, r8)
 800798e:	46bd      	mov	sp, r7
 8007990:	b002      	add	sp, #8
 8007992:	bd80      	pop	{r7, pc}

08007994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a3f      	ldr	r2, [pc, #252]	; (8007aa4 <TIM_Base_SetConfig+0x110>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d00c      	beq.n	80079c6 <TIM_Base_SetConfig+0x32>
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	2380      	movs	r3, #128	; 0x80
 80079b0:	05db      	lsls	r3, r3, #23
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d007      	beq.n	80079c6 <TIM_Base_SetConfig+0x32>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a3b      	ldr	r2, [pc, #236]	; (8007aa8 <TIM_Base_SetConfig+0x114>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d003      	beq.n	80079c6 <TIM_Base_SetConfig+0x32>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a3a      	ldr	r2, [pc, #232]	; (8007aac <TIM_Base_SetConfig+0x118>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d108      	bne.n	80079d8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2270      	movs	r2, #112	; 0x70
 80079ca:	4393      	bics	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a32      	ldr	r2, [pc, #200]	; (8007aa4 <TIM_Base_SetConfig+0x110>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d01c      	beq.n	8007a1a <TIM_Base_SetConfig+0x86>
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	2380      	movs	r3, #128	; 0x80
 80079e4:	05db      	lsls	r3, r3, #23
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d017      	beq.n	8007a1a <TIM_Base_SetConfig+0x86>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a2e      	ldr	r2, [pc, #184]	; (8007aa8 <TIM_Base_SetConfig+0x114>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d013      	beq.n	8007a1a <TIM_Base_SetConfig+0x86>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a2d      	ldr	r2, [pc, #180]	; (8007aac <TIM_Base_SetConfig+0x118>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d00f      	beq.n	8007a1a <TIM_Base_SetConfig+0x86>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a2c      	ldr	r2, [pc, #176]	; (8007ab0 <TIM_Base_SetConfig+0x11c>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d00b      	beq.n	8007a1a <TIM_Base_SetConfig+0x86>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a2b      	ldr	r2, [pc, #172]	; (8007ab4 <TIM_Base_SetConfig+0x120>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d007      	beq.n	8007a1a <TIM_Base_SetConfig+0x86>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a2a      	ldr	r2, [pc, #168]	; (8007ab8 <TIM_Base_SetConfig+0x124>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d003      	beq.n	8007a1a <TIM_Base_SetConfig+0x86>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a29      	ldr	r2, [pc, #164]	; (8007abc <TIM_Base_SetConfig+0x128>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d108      	bne.n	8007a2c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	4a28      	ldr	r2, [pc, #160]	; (8007ac0 <TIM_Base_SetConfig+0x12c>)
 8007a1e:	4013      	ands	r3, r2
 8007a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2280      	movs	r2, #128	; 0x80
 8007a30:	4393      	bics	r3, r2
 8007a32:	001a      	movs	r2, r3
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	695b      	ldr	r3, [r3, #20]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	689a      	ldr	r2, [r3, #8]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a13      	ldr	r2, [pc, #76]	; (8007aa4 <TIM_Base_SetConfig+0x110>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d00b      	beq.n	8007a72 <TIM_Base_SetConfig+0xde>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a15      	ldr	r2, [pc, #84]	; (8007ab4 <TIM_Base_SetConfig+0x120>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d007      	beq.n	8007a72 <TIM_Base_SetConfig+0xde>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a14      	ldr	r2, [pc, #80]	; (8007ab8 <TIM_Base_SetConfig+0x124>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d003      	beq.n	8007a72 <TIM_Base_SetConfig+0xde>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a13      	ldr	r2, [pc, #76]	; (8007abc <TIM_Base_SetConfig+0x128>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d103      	bne.n	8007a7a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	691a      	ldr	r2, [r3, #16]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	2201      	movs	r2, #1
 8007a86:	4013      	ands	r3, r2
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d106      	bne.n	8007a9a <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	2201      	movs	r2, #1
 8007a92:	4393      	bics	r3, r2
 8007a94:	001a      	movs	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	611a      	str	r2, [r3, #16]
  }
}
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	b004      	add	sp, #16
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	40012c00 	.word	0x40012c00
 8007aa8:	40000400 	.word	0x40000400
 8007aac:	40000800 	.word	0x40000800
 8007ab0:	40002000 	.word	0x40002000
 8007ab4:	40014000 	.word	0x40014000
 8007ab8:	40014400 	.word	0x40014400
 8007abc:	40014800 	.word	0x40014800
 8007ac0:	fffffcff 	.word	0xfffffcff

08007ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	223c      	movs	r2, #60	; 0x3c
 8007ad2:	5c9b      	ldrb	r3, [r3, r2]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d101      	bne.n	8007adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	e05a      	b.n	8007b92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	223c      	movs	r2, #60	; 0x3c
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	223d      	movs	r2, #61	; 0x3d
 8007ae8:	2102      	movs	r1, #2
 8007aea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a26      	ldr	r2, [pc, #152]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d108      	bne.n	8007b18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4a25      	ldr	r2, [pc, #148]	; (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2270      	movs	r2, #112	; 0x70
 8007b1c:	4393      	bics	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a19      	ldr	r2, [pc, #100]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d014      	beq.n	8007b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	2380      	movs	r3, #128	; 0x80
 8007b42:	05db      	lsls	r3, r3, #23
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d00e      	beq.n	8007b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a15      	ldr	r2, [pc, #84]	; (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d009      	beq.n	8007b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a14      	ldr	r2, [pc, #80]	; (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d004      	beq.n	8007b66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a12      	ldr	r2, [pc, #72]	; (8007bac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d10c      	bne.n	8007b80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2280      	movs	r2, #128	; 0x80
 8007b6a:	4393      	bics	r3, r2
 8007b6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	223d      	movs	r2, #61	; 0x3d
 8007b84:	2101      	movs	r1, #1
 8007b86:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	223c      	movs	r2, #60	; 0x3c
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	0018      	movs	r0, r3
 8007b94:	46bd      	mov	sp, r7
 8007b96:	b004      	add	sp, #16
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	46c0      	nop			; (mov r8, r8)
 8007b9c:	40012c00 	.word	0x40012c00
 8007ba0:	ff0fffff 	.word	0xff0fffff
 8007ba4:	40000400 	.word	0x40000400
 8007ba8:	40000800 	.word	0x40000800
 8007bac:	40014000 	.word	0x40014000

08007bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bb8:	46c0      	nop			; (mov r8, r8)
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	b002      	add	sp, #8
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bc8:	46c0      	nop			; (mov r8, r8)
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	b002      	add	sp, #8
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007bd8:	46c0      	nop			; (mov r8, r8)
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	b002      	add	sp, #8
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e046      	b.n	8007c80 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2288      	movs	r2, #136	; 0x88
 8007bf6:	589b      	ldr	r3, [r3, r2]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d107      	bne.n	8007c0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2284      	movs	r2, #132	; 0x84
 8007c00:	2100      	movs	r1, #0
 8007c02:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	0018      	movs	r0, r3
 8007c08:	f7fc f902 	bl	8003e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2288      	movs	r2, #136	; 0x88
 8007c10:	2124      	movs	r1, #36	; 0x24
 8007c12:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2101      	movs	r1, #1
 8007c20:	438a      	bics	r2, r1
 8007c22:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	0018      	movs	r0, r3
 8007c30:	f000 fd4c 	bl	80086cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	0018      	movs	r0, r3
 8007c38:	f000 f9f2 	bl	8008020 <UART_SetConfig>
 8007c3c:	0003      	movs	r3, r0
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d101      	bne.n	8007c46 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e01c      	b.n	8007c80 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	490d      	ldr	r1, [pc, #52]	; (8007c88 <HAL_UART_Init+0xa8>)
 8007c52:	400a      	ands	r2, r1
 8007c54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689a      	ldr	r2, [r3, #8]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	212a      	movs	r1, #42	; 0x2a
 8007c62:	438a      	bics	r2, r1
 8007c64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2101      	movs	r1, #1
 8007c72:	430a      	orrs	r2, r1
 8007c74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	0018      	movs	r0, r3
 8007c7a:	f000 fddb 	bl	8008834 <UART_CheckIdleState>
 8007c7e:	0003      	movs	r3, r0
}
 8007c80:	0018      	movs	r0, r3
 8007c82:	46bd      	mov	sp, r7
 8007c84:	b002      	add	sp, #8
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	ffffb7ff 	.word	0xffffb7ff

08007c8c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e032      	b.n	8007d04 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2288      	movs	r2, #136	; 0x88
 8007ca2:	2124      	movs	r1, #36	; 0x24
 8007ca4:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	438a      	bics	r2, r1
 8007cb4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	f7fc f9c9 	bl	8004068 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2290      	movs	r2, #144	; 0x90
 8007cda:	2100      	movs	r1, #0
 8007cdc:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2288      	movs	r2, #136	; 0x88
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	228c      	movs	r2, #140	; 0x8c
 8007cea:	2100      	movs	r1, #0
 8007cec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2284      	movs	r2, #132	; 0x84
 8007cfe:	2100      	movs	r1, #0
 8007d00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	0018      	movs	r0, r3
 8007d06:	46bd      	mov	sp, r7
 8007d08:	b002      	add	sp, #8
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08a      	sub	sp, #40	; 0x28
 8007d10:	af02      	add	r7, sp, #8
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	603b      	str	r3, [r7, #0]
 8007d18:	1dbb      	adds	r3, r7, #6
 8007d1a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2288      	movs	r2, #136	; 0x88
 8007d20:	589b      	ldr	r3, [r3, r2]
 8007d22:	2b20      	cmp	r3, #32
 8007d24:	d000      	beq.n	8007d28 <HAL_UART_Transmit+0x1c>
 8007d26:	e090      	b.n	8007e4a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <HAL_UART_Transmit+0x2a>
 8007d2e:	1dbb      	adds	r3, r7, #6
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e088      	b.n	8007e4c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	689a      	ldr	r2, [r3, #8]
 8007d3e:	2380      	movs	r3, #128	; 0x80
 8007d40:	015b      	lsls	r3, r3, #5
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d109      	bne.n	8007d5a <HAL_UART_Transmit+0x4e>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d105      	bne.n	8007d5a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2201      	movs	r2, #1
 8007d52:	4013      	ands	r3, r2
 8007d54:	d001      	beq.n	8007d5a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e078      	b.n	8007e4c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2290      	movs	r2, #144	; 0x90
 8007d5e:	2100      	movs	r1, #0
 8007d60:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2288      	movs	r2, #136	; 0x88
 8007d66:	2121      	movs	r1, #33	; 0x21
 8007d68:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d6a:	f7fc fb85 	bl	8004478 <HAL_GetTick>
 8007d6e:	0003      	movs	r3, r0
 8007d70:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	1dba      	adds	r2, r7, #6
 8007d76:	2154      	movs	r1, #84	; 0x54
 8007d78:	8812      	ldrh	r2, [r2, #0]
 8007d7a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	1dba      	adds	r2, r7, #6
 8007d80:	2156      	movs	r1, #86	; 0x56
 8007d82:	8812      	ldrh	r2, [r2, #0]
 8007d84:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	689a      	ldr	r2, [r3, #8]
 8007d8a:	2380      	movs	r3, #128	; 0x80
 8007d8c:	015b      	lsls	r3, r3, #5
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d108      	bne.n	8007da4 <HAL_UART_Transmit+0x98>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d104      	bne.n	8007da4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	61bb      	str	r3, [r7, #24]
 8007da2:	e003      	b.n	8007dac <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007da8:	2300      	movs	r3, #0
 8007daa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007dac:	e030      	b.n	8007e10 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	0013      	movs	r3, r2
 8007db8:	2200      	movs	r2, #0
 8007dba:	2180      	movs	r1, #128	; 0x80
 8007dbc:	f000 fde4 	bl	8008988 <UART_WaitOnFlagUntilTimeout>
 8007dc0:	1e03      	subs	r3, r0, #0
 8007dc2:	d005      	beq.n	8007dd0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2288      	movs	r2, #136	; 0x88
 8007dc8:	2120      	movs	r1, #32
 8007dca:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e03d      	b.n	8007e4c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10b      	bne.n	8007dee <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	001a      	movs	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	05d2      	lsls	r2, r2, #23
 8007de2:	0dd2      	lsrs	r2, r2, #23
 8007de4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	3302      	adds	r3, #2
 8007dea:	61bb      	str	r3, [r7, #24]
 8007dec:	e007      	b.n	8007dfe <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	781a      	ldrb	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2256      	movs	r2, #86	; 0x56
 8007e02:	5a9b      	ldrh	r3, [r3, r2]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	3b01      	subs	r3, #1
 8007e08:	b299      	uxth	r1, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2256      	movs	r2, #86	; 0x56
 8007e0e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2256      	movs	r2, #86	; 0x56
 8007e14:	5a9b      	ldrh	r3, [r3, r2]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1c8      	bne.n	8007dae <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	0013      	movs	r3, r2
 8007e26:	2200      	movs	r2, #0
 8007e28:	2140      	movs	r1, #64	; 0x40
 8007e2a:	f000 fdad 	bl	8008988 <UART_WaitOnFlagUntilTimeout>
 8007e2e:	1e03      	subs	r3, r0, #0
 8007e30:	d005      	beq.n	8007e3e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2288      	movs	r2, #136	; 0x88
 8007e36:	2120      	movs	r1, #32
 8007e38:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e006      	b.n	8007e4c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2288      	movs	r2, #136	; 0x88
 8007e42:	2120      	movs	r1, #32
 8007e44:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	e000      	b.n	8007e4c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007e4a:	2302      	movs	r3, #2
  }
}
 8007e4c:	0018      	movs	r0, r3
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	b008      	add	sp, #32
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b08a      	sub	sp, #40	; 0x28
 8007e58:	af02      	add	r7, sp, #8
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	1dbb      	adds	r3, r7, #6
 8007e62:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	228c      	movs	r2, #140	; 0x8c
 8007e68:	589b      	ldr	r3, [r3, r2]
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	d000      	beq.n	8007e70 <HAL_UART_Receive+0x1c>
 8007e6e:	e0d0      	b.n	8008012 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d003      	beq.n	8007e7e <HAL_UART_Receive+0x2a>
 8007e76:	1dbb      	adds	r3, r7, #6
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e0c8      	b.n	8008014 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	2380      	movs	r3, #128	; 0x80
 8007e88:	015b      	lsls	r3, r3, #5
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d109      	bne.n	8007ea2 <HAL_UART_Receive+0x4e>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d105      	bne.n	8007ea2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	d001      	beq.n	8007ea2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e0b8      	b.n	8008014 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2290      	movs	r2, #144	; 0x90
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	228c      	movs	r2, #140	; 0x8c
 8007eae:	2122      	movs	r1, #34	; 0x22
 8007eb0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007eb8:	f7fc fade 	bl	8004478 <HAL_GetTick>
 8007ebc:	0003      	movs	r3, r0
 8007ebe:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	1dba      	adds	r2, r7, #6
 8007ec4:	215c      	movs	r1, #92	; 0x5c
 8007ec6:	8812      	ldrh	r2, [r2, #0]
 8007ec8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	1dba      	adds	r2, r7, #6
 8007ece:	215e      	movs	r1, #94	; 0x5e
 8007ed0:	8812      	ldrh	r2, [r2, #0]
 8007ed2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	2380      	movs	r3, #128	; 0x80
 8007eda:	015b      	lsls	r3, r3, #5
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d10d      	bne.n	8007efc <HAL_UART_Receive+0xa8>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d104      	bne.n	8007ef2 <HAL_UART_Receive+0x9e>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2260      	movs	r2, #96	; 0x60
 8007eec:	494b      	ldr	r1, [pc, #300]	; (800801c <HAL_UART_Receive+0x1c8>)
 8007eee:	5299      	strh	r1, [r3, r2]
 8007ef0:	e02e      	b.n	8007f50 <HAL_UART_Receive+0xfc>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2260      	movs	r2, #96	; 0x60
 8007ef6:	21ff      	movs	r1, #255	; 0xff
 8007ef8:	5299      	strh	r1, [r3, r2]
 8007efa:	e029      	b.n	8007f50 <HAL_UART_Receive+0xfc>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10d      	bne.n	8007f20 <HAL_UART_Receive+0xcc>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d104      	bne.n	8007f16 <HAL_UART_Receive+0xc2>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2260      	movs	r2, #96	; 0x60
 8007f10:	21ff      	movs	r1, #255	; 0xff
 8007f12:	5299      	strh	r1, [r3, r2]
 8007f14:	e01c      	b.n	8007f50 <HAL_UART_Receive+0xfc>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2260      	movs	r2, #96	; 0x60
 8007f1a:	217f      	movs	r1, #127	; 0x7f
 8007f1c:	5299      	strh	r1, [r3, r2]
 8007f1e:	e017      	b.n	8007f50 <HAL_UART_Receive+0xfc>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	689a      	ldr	r2, [r3, #8]
 8007f24:	2380      	movs	r3, #128	; 0x80
 8007f26:	055b      	lsls	r3, r3, #21
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d10d      	bne.n	8007f48 <HAL_UART_Receive+0xf4>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d104      	bne.n	8007f3e <HAL_UART_Receive+0xea>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2260      	movs	r2, #96	; 0x60
 8007f38:	217f      	movs	r1, #127	; 0x7f
 8007f3a:	5299      	strh	r1, [r3, r2]
 8007f3c:	e008      	b.n	8007f50 <HAL_UART_Receive+0xfc>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2260      	movs	r2, #96	; 0x60
 8007f42:	213f      	movs	r1, #63	; 0x3f
 8007f44:	5299      	strh	r1, [r3, r2]
 8007f46:	e003      	b.n	8007f50 <HAL_UART_Receive+0xfc>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2260      	movs	r2, #96	; 0x60
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8007f50:	2312      	movs	r3, #18
 8007f52:	18fb      	adds	r3, r7, r3
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	2160      	movs	r1, #96	; 0x60
 8007f58:	5a52      	ldrh	r2, [r2, r1]
 8007f5a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	689a      	ldr	r2, [r3, #8]
 8007f60:	2380      	movs	r3, #128	; 0x80
 8007f62:	015b      	lsls	r3, r3, #5
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d108      	bne.n	8007f7a <HAL_UART_Receive+0x126>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d104      	bne.n	8007f7a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8007f70:	2300      	movs	r3, #0
 8007f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	61bb      	str	r3, [r7, #24]
 8007f78:	e003      	b.n	8007f82 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007f82:	e03a      	b.n	8007ffa <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	0013      	movs	r3, r2
 8007f8e:	2200      	movs	r2, #0
 8007f90:	2120      	movs	r1, #32
 8007f92:	f000 fcf9 	bl	8008988 <UART_WaitOnFlagUntilTimeout>
 8007f96:	1e03      	subs	r3, r0, #0
 8007f98:	d005      	beq.n	8007fa6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	228c      	movs	r2, #140	; 0x8c
 8007f9e:	2120      	movs	r1, #32
 8007fa0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e036      	b.n	8008014 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10e      	bne.n	8007fca <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	2212      	movs	r2, #18
 8007fb6:	18ba      	adds	r2, r7, r2
 8007fb8:	8812      	ldrh	r2, [r2, #0]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	3302      	adds	r3, #2
 8007fc6:	61bb      	str	r3, [r7, #24]
 8007fc8:	e00e      	b.n	8007fe8 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2212      	movs	r2, #18
 8007fd4:	18ba      	adds	r2, r7, r2
 8007fd6:	8812      	ldrh	r2, [r2, #0]
 8007fd8:	b2d2      	uxtb	r2, r2
 8007fda:	4013      	ands	r3, r2
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	225e      	movs	r2, #94	; 0x5e
 8007fec:	5a9b      	ldrh	r3, [r3, r2]
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	b299      	uxth	r1, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	225e      	movs	r2, #94	; 0x5e
 8007ff8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	225e      	movs	r2, #94	; 0x5e
 8007ffe:	5a9b      	ldrh	r3, [r3, r2]
 8008000:	b29b      	uxth	r3, r3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1be      	bne.n	8007f84 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	228c      	movs	r2, #140	; 0x8c
 800800a:	2120      	movs	r1, #32
 800800c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	e000      	b.n	8008014 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8008012:	2302      	movs	r3, #2
  }
}
 8008014:	0018      	movs	r0, r3
 8008016:	46bd      	mov	sp, r7
 8008018:	b008      	add	sp, #32
 800801a:	bd80      	pop	{r7, pc}
 800801c:	000001ff 	.word	0x000001ff

08008020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008020:	b5b0      	push	{r4, r5, r7, lr}
 8008022:	b090      	sub	sp, #64	; 0x40
 8008024:	af00      	add	r7, sp, #0
 8008026:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008028:	231a      	movs	r3, #26
 800802a:	2220      	movs	r2, #32
 800802c:	189b      	adds	r3, r3, r2
 800802e:	19db      	adds	r3, r3, r7
 8008030:	2200      	movs	r2, #0
 8008032:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	431a      	orrs	r2, r3
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	431a      	orrs	r2, r3
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	69db      	ldr	r3, [r3, #28]
 8008048:	4313      	orrs	r3, r2
 800804a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4ac1      	ldr	r2, [pc, #772]	; (8008358 <UART_SetConfig+0x338>)
 8008054:	4013      	ands	r3, r2
 8008056:	0019      	movs	r1, r3
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800805e:	430b      	orrs	r3, r1
 8008060:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	4abc      	ldr	r2, [pc, #752]	; (800835c <UART_SetConfig+0x33c>)
 800806a:	4013      	ands	r3, r2
 800806c:	0018      	movs	r0, r3
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008070:	68d9      	ldr	r1, [r3, #12]
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	0003      	movs	r3, r0
 8008078:	430b      	orrs	r3, r1
 800807a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4ab6      	ldr	r2, [pc, #728]	; (8008360 <UART_SetConfig+0x340>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d009      	beq.n	80080a0 <UART_SetConfig+0x80>
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4ab4      	ldr	r2, [pc, #720]	; (8008364 <UART_SetConfig+0x344>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d004      	beq.n	80080a0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800809c:	4313      	orrs	r3, r2
 800809e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	4ab0      	ldr	r2, [pc, #704]	; (8008368 <UART_SetConfig+0x348>)
 80080a8:	4013      	ands	r3, r2
 80080aa:	0019      	movs	r1, r3
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b2:	430b      	orrs	r3, r1
 80080b4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080bc:	220f      	movs	r2, #15
 80080be:	4393      	bics	r3, r2
 80080c0:	0018      	movs	r0, r3
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	0003      	movs	r3, r0
 80080cc:	430b      	orrs	r3, r1
 80080ce:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4aa5      	ldr	r2, [pc, #660]	; (800836c <UART_SetConfig+0x34c>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d131      	bne.n	800813e <UART_SetConfig+0x11e>
 80080da:	4ba5      	ldr	r3, [pc, #660]	; (8008370 <UART_SetConfig+0x350>)
 80080dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080de:	2203      	movs	r2, #3
 80080e0:	4013      	ands	r3, r2
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d01d      	beq.n	8008122 <UART_SetConfig+0x102>
 80080e6:	d823      	bhi.n	8008130 <UART_SetConfig+0x110>
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d00c      	beq.n	8008106 <UART_SetConfig+0xe6>
 80080ec:	d820      	bhi.n	8008130 <UART_SetConfig+0x110>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d002      	beq.n	80080f8 <UART_SetConfig+0xd8>
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d00e      	beq.n	8008114 <UART_SetConfig+0xf4>
 80080f6:	e01b      	b.n	8008130 <UART_SetConfig+0x110>
 80080f8:	231b      	movs	r3, #27
 80080fa:	2220      	movs	r2, #32
 80080fc:	189b      	adds	r3, r3, r2
 80080fe:	19db      	adds	r3, r3, r7
 8008100:	2200      	movs	r2, #0
 8008102:	701a      	strb	r2, [r3, #0]
 8008104:	e154      	b.n	80083b0 <UART_SetConfig+0x390>
 8008106:	231b      	movs	r3, #27
 8008108:	2220      	movs	r2, #32
 800810a:	189b      	adds	r3, r3, r2
 800810c:	19db      	adds	r3, r3, r7
 800810e:	2202      	movs	r2, #2
 8008110:	701a      	strb	r2, [r3, #0]
 8008112:	e14d      	b.n	80083b0 <UART_SetConfig+0x390>
 8008114:	231b      	movs	r3, #27
 8008116:	2220      	movs	r2, #32
 8008118:	189b      	adds	r3, r3, r2
 800811a:	19db      	adds	r3, r3, r7
 800811c:	2204      	movs	r2, #4
 800811e:	701a      	strb	r2, [r3, #0]
 8008120:	e146      	b.n	80083b0 <UART_SetConfig+0x390>
 8008122:	231b      	movs	r3, #27
 8008124:	2220      	movs	r2, #32
 8008126:	189b      	adds	r3, r3, r2
 8008128:	19db      	adds	r3, r3, r7
 800812a:	2208      	movs	r2, #8
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	e13f      	b.n	80083b0 <UART_SetConfig+0x390>
 8008130:	231b      	movs	r3, #27
 8008132:	2220      	movs	r2, #32
 8008134:	189b      	adds	r3, r3, r2
 8008136:	19db      	adds	r3, r3, r7
 8008138:	2210      	movs	r2, #16
 800813a:	701a      	strb	r2, [r3, #0]
 800813c:	e138      	b.n	80083b0 <UART_SetConfig+0x390>
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a8c      	ldr	r2, [pc, #560]	; (8008374 <UART_SetConfig+0x354>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d131      	bne.n	80081ac <UART_SetConfig+0x18c>
 8008148:	4b89      	ldr	r3, [pc, #548]	; (8008370 <UART_SetConfig+0x350>)
 800814a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800814c:	220c      	movs	r2, #12
 800814e:	4013      	ands	r3, r2
 8008150:	2b0c      	cmp	r3, #12
 8008152:	d01d      	beq.n	8008190 <UART_SetConfig+0x170>
 8008154:	d823      	bhi.n	800819e <UART_SetConfig+0x17e>
 8008156:	2b08      	cmp	r3, #8
 8008158:	d00c      	beq.n	8008174 <UART_SetConfig+0x154>
 800815a:	d820      	bhi.n	800819e <UART_SetConfig+0x17e>
 800815c:	2b00      	cmp	r3, #0
 800815e:	d002      	beq.n	8008166 <UART_SetConfig+0x146>
 8008160:	2b04      	cmp	r3, #4
 8008162:	d00e      	beq.n	8008182 <UART_SetConfig+0x162>
 8008164:	e01b      	b.n	800819e <UART_SetConfig+0x17e>
 8008166:	231b      	movs	r3, #27
 8008168:	2220      	movs	r2, #32
 800816a:	189b      	adds	r3, r3, r2
 800816c:	19db      	adds	r3, r3, r7
 800816e:	2200      	movs	r2, #0
 8008170:	701a      	strb	r2, [r3, #0]
 8008172:	e11d      	b.n	80083b0 <UART_SetConfig+0x390>
 8008174:	231b      	movs	r3, #27
 8008176:	2220      	movs	r2, #32
 8008178:	189b      	adds	r3, r3, r2
 800817a:	19db      	adds	r3, r3, r7
 800817c:	2202      	movs	r2, #2
 800817e:	701a      	strb	r2, [r3, #0]
 8008180:	e116      	b.n	80083b0 <UART_SetConfig+0x390>
 8008182:	231b      	movs	r3, #27
 8008184:	2220      	movs	r2, #32
 8008186:	189b      	adds	r3, r3, r2
 8008188:	19db      	adds	r3, r3, r7
 800818a:	2204      	movs	r2, #4
 800818c:	701a      	strb	r2, [r3, #0]
 800818e:	e10f      	b.n	80083b0 <UART_SetConfig+0x390>
 8008190:	231b      	movs	r3, #27
 8008192:	2220      	movs	r2, #32
 8008194:	189b      	adds	r3, r3, r2
 8008196:	19db      	adds	r3, r3, r7
 8008198:	2208      	movs	r2, #8
 800819a:	701a      	strb	r2, [r3, #0]
 800819c:	e108      	b.n	80083b0 <UART_SetConfig+0x390>
 800819e:	231b      	movs	r3, #27
 80081a0:	2220      	movs	r2, #32
 80081a2:	189b      	adds	r3, r3, r2
 80081a4:	19db      	adds	r3, r3, r7
 80081a6:	2210      	movs	r2, #16
 80081a8:	701a      	strb	r2, [r3, #0]
 80081aa:	e101      	b.n	80083b0 <UART_SetConfig+0x390>
 80081ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a71      	ldr	r2, [pc, #452]	; (8008378 <UART_SetConfig+0x358>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d131      	bne.n	800821a <UART_SetConfig+0x1fa>
 80081b6:	4b6e      	ldr	r3, [pc, #440]	; (8008370 <UART_SetConfig+0x350>)
 80081b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ba:	2230      	movs	r2, #48	; 0x30
 80081bc:	4013      	ands	r3, r2
 80081be:	2b30      	cmp	r3, #48	; 0x30
 80081c0:	d01d      	beq.n	80081fe <UART_SetConfig+0x1de>
 80081c2:	d823      	bhi.n	800820c <UART_SetConfig+0x1ec>
 80081c4:	2b20      	cmp	r3, #32
 80081c6:	d00c      	beq.n	80081e2 <UART_SetConfig+0x1c2>
 80081c8:	d820      	bhi.n	800820c <UART_SetConfig+0x1ec>
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d002      	beq.n	80081d4 <UART_SetConfig+0x1b4>
 80081ce:	2b10      	cmp	r3, #16
 80081d0:	d00e      	beq.n	80081f0 <UART_SetConfig+0x1d0>
 80081d2:	e01b      	b.n	800820c <UART_SetConfig+0x1ec>
 80081d4:	231b      	movs	r3, #27
 80081d6:	2220      	movs	r2, #32
 80081d8:	189b      	adds	r3, r3, r2
 80081da:	19db      	adds	r3, r3, r7
 80081dc:	2200      	movs	r2, #0
 80081de:	701a      	strb	r2, [r3, #0]
 80081e0:	e0e6      	b.n	80083b0 <UART_SetConfig+0x390>
 80081e2:	231b      	movs	r3, #27
 80081e4:	2220      	movs	r2, #32
 80081e6:	189b      	adds	r3, r3, r2
 80081e8:	19db      	adds	r3, r3, r7
 80081ea:	2202      	movs	r2, #2
 80081ec:	701a      	strb	r2, [r3, #0]
 80081ee:	e0df      	b.n	80083b0 <UART_SetConfig+0x390>
 80081f0:	231b      	movs	r3, #27
 80081f2:	2220      	movs	r2, #32
 80081f4:	189b      	adds	r3, r3, r2
 80081f6:	19db      	adds	r3, r3, r7
 80081f8:	2204      	movs	r2, #4
 80081fa:	701a      	strb	r2, [r3, #0]
 80081fc:	e0d8      	b.n	80083b0 <UART_SetConfig+0x390>
 80081fe:	231b      	movs	r3, #27
 8008200:	2220      	movs	r2, #32
 8008202:	189b      	adds	r3, r3, r2
 8008204:	19db      	adds	r3, r3, r7
 8008206:	2208      	movs	r2, #8
 8008208:	701a      	strb	r2, [r3, #0]
 800820a:	e0d1      	b.n	80083b0 <UART_SetConfig+0x390>
 800820c:	231b      	movs	r3, #27
 800820e:	2220      	movs	r2, #32
 8008210:	189b      	adds	r3, r3, r2
 8008212:	19db      	adds	r3, r3, r7
 8008214:	2210      	movs	r2, #16
 8008216:	701a      	strb	r2, [r3, #0]
 8008218:	e0ca      	b.n	80083b0 <UART_SetConfig+0x390>
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a57      	ldr	r2, [pc, #348]	; (800837c <UART_SetConfig+0x35c>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d106      	bne.n	8008232 <UART_SetConfig+0x212>
 8008224:	231b      	movs	r3, #27
 8008226:	2220      	movs	r2, #32
 8008228:	189b      	adds	r3, r3, r2
 800822a:	19db      	adds	r3, r3, r7
 800822c:	2200      	movs	r2, #0
 800822e:	701a      	strb	r2, [r3, #0]
 8008230:	e0be      	b.n	80083b0 <UART_SetConfig+0x390>
 8008232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a52      	ldr	r2, [pc, #328]	; (8008380 <UART_SetConfig+0x360>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d106      	bne.n	800824a <UART_SetConfig+0x22a>
 800823c:	231b      	movs	r3, #27
 800823e:	2220      	movs	r2, #32
 8008240:	189b      	adds	r3, r3, r2
 8008242:	19db      	adds	r3, r3, r7
 8008244:	2200      	movs	r2, #0
 8008246:	701a      	strb	r2, [r3, #0]
 8008248:	e0b2      	b.n	80083b0 <UART_SetConfig+0x390>
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a4d      	ldr	r2, [pc, #308]	; (8008384 <UART_SetConfig+0x364>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d106      	bne.n	8008262 <UART_SetConfig+0x242>
 8008254:	231b      	movs	r3, #27
 8008256:	2220      	movs	r2, #32
 8008258:	189b      	adds	r3, r3, r2
 800825a:	19db      	adds	r3, r3, r7
 800825c:	2200      	movs	r2, #0
 800825e:	701a      	strb	r2, [r3, #0]
 8008260:	e0a6      	b.n	80083b0 <UART_SetConfig+0x390>
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a3e      	ldr	r2, [pc, #248]	; (8008360 <UART_SetConfig+0x340>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d13e      	bne.n	80082ea <UART_SetConfig+0x2ca>
 800826c:	4b40      	ldr	r3, [pc, #256]	; (8008370 <UART_SetConfig+0x350>)
 800826e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008270:	23c0      	movs	r3, #192	; 0xc0
 8008272:	011b      	lsls	r3, r3, #4
 8008274:	4013      	ands	r3, r2
 8008276:	22c0      	movs	r2, #192	; 0xc0
 8008278:	0112      	lsls	r2, r2, #4
 800827a:	4293      	cmp	r3, r2
 800827c:	d027      	beq.n	80082ce <UART_SetConfig+0x2ae>
 800827e:	22c0      	movs	r2, #192	; 0xc0
 8008280:	0112      	lsls	r2, r2, #4
 8008282:	4293      	cmp	r3, r2
 8008284:	d82a      	bhi.n	80082dc <UART_SetConfig+0x2bc>
 8008286:	2280      	movs	r2, #128	; 0x80
 8008288:	0112      	lsls	r2, r2, #4
 800828a:	4293      	cmp	r3, r2
 800828c:	d011      	beq.n	80082b2 <UART_SetConfig+0x292>
 800828e:	2280      	movs	r2, #128	; 0x80
 8008290:	0112      	lsls	r2, r2, #4
 8008292:	4293      	cmp	r3, r2
 8008294:	d822      	bhi.n	80082dc <UART_SetConfig+0x2bc>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d004      	beq.n	80082a4 <UART_SetConfig+0x284>
 800829a:	2280      	movs	r2, #128	; 0x80
 800829c:	00d2      	lsls	r2, r2, #3
 800829e:	4293      	cmp	r3, r2
 80082a0:	d00e      	beq.n	80082c0 <UART_SetConfig+0x2a0>
 80082a2:	e01b      	b.n	80082dc <UART_SetConfig+0x2bc>
 80082a4:	231b      	movs	r3, #27
 80082a6:	2220      	movs	r2, #32
 80082a8:	189b      	adds	r3, r3, r2
 80082aa:	19db      	adds	r3, r3, r7
 80082ac:	2200      	movs	r2, #0
 80082ae:	701a      	strb	r2, [r3, #0]
 80082b0:	e07e      	b.n	80083b0 <UART_SetConfig+0x390>
 80082b2:	231b      	movs	r3, #27
 80082b4:	2220      	movs	r2, #32
 80082b6:	189b      	adds	r3, r3, r2
 80082b8:	19db      	adds	r3, r3, r7
 80082ba:	2202      	movs	r2, #2
 80082bc:	701a      	strb	r2, [r3, #0]
 80082be:	e077      	b.n	80083b0 <UART_SetConfig+0x390>
 80082c0:	231b      	movs	r3, #27
 80082c2:	2220      	movs	r2, #32
 80082c4:	189b      	adds	r3, r3, r2
 80082c6:	19db      	adds	r3, r3, r7
 80082c8:	2204      	movs	r2, #4
 80082ca:	701a      	strb	r2, [r3, #0]
 80082cc:	e070      	b.n	80083b0 <UART_SetConfig+0x390>
 80082ce:	231b      	movs	r3, #27
 80082d0:	2220      	movs	r2, #32
 80082d2:	189b      	adds	r3, r3, r2
 80082d4:	19db      	adds	r3, r3, r7
 80082d6:	2208      	movs	r2, #8
 80082d8:	701a      	strb	r2, [r3, #0]
 80082da:	e069      	b.n	80083b0 <UART_SetConfig+0x390>
 80082dc:	231b      	movs	r3, #27
 80082de:	2220      	movs	r2, #32
 80082e0:	189b      	adds	r3, r3, r2
 80082e2:	19db      	adds	r3, r3, r7
 80082e4:	2210      	movs	r2, #16
 80082e6:	701a      	strb	r2, [r3, #0]
 80082e8:	e062      	b.n	80083b0 <UART_SetConfig+0x390>
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a1d      	ldr	r2, [pc, #116]	; (8008364 <UART_SetConfig+0x344>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d157      	bne.n	80083a4 <UART_SetConfig+0x384>
 80082f4:	4b1e      	ldr	r3, [pc, #120]	; (8008370 <UART_SetConfig+0x350>)
 80082f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082f8:	23c0      	movs	r3, #192	; 0xc0
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4013      	ands	r3, r2
 80082fe:	22c0      	movs	r2, #192	; 0xc0
 8008300:	0092      	lsls	r2, r2, #2
 8008302:	4293      	cmp	r3, r2
 8008304:	d040      	beq.n	8008388 <UART_SetConfig+0x368>
 8008306:	22c0      	movs	r2, #192	; 0xc0
 8008308:	0092      	lsls	r2, r2, #2
 800830a:	4293      	cmp	r3, r2
 800830c:	d843      	bhi.n	8008396 <UART_SetConfig+0x376>
 800830e:	2280      	movs	r2, #128	; 0x80
 8008310:	0092      	lsls	r2, r2, #2
 8008312:	4293      	cmp	r3, r2
 8008314:	d011      	beq.n	800833a <UART_SetConfig+0x31a>
 8008316:	2280      	movs	r2, #128	; 0x80
 8008318:	0092      	lsls	r2, r2, #2
 800831a:	4293      	cmp	r3, r2
 800831c:	d83b      	bhi.n	8008396 <UART_SetConfig+0x376>
 800831e:	2b00      	cmp	r3, #0
 8008320:	d004      	beq.n	800832c <UART_SetConfig+0x30c>
 8008322:	2280      	movs	r2, #128	; 0x80
 8008324:	0052      	lsls	r2, r2, #1
 8008326:	4293      	cmp	r3, r2
 8008328:	d00e      	beq.n	8008348 <UART_SetConfig+0x328>
 800832a:	e034      	b.n	8008396 <UART_SetConfig+0x376>
 800832c:	231b      	movs	r3, #27
 800832e:	2220      	movs	r2, #32
 8008330:	189b      	adds	r3, r3, r2
 8008332:	19db      	adds	r3, r3, r7
 8008334:	2200      	movs	r2, #0
 8008336:	701a      	strb	r2, [r3, #0]
 8008338:	e03a      	b.n	80083b0 <UART_SetConfig+0x390>
 800833a:	231b      	movs	r3, #27
 800833c:	2220      	movs	r2, #32
 800833e:	189b      	adds	r3, r3, r2
 8008340:	19db      	adds	r3, r3, r7
 8008342:	2202      	movs	r2, #2
 8008344:	701a      	strb	r2, [r3, #0]
 8008346:	e033      	b.n	80083b0 <UART_SetConfig+0x390>
 8008348:	231b      	movs	r3, #27
 800834a:	2220      	movs	r2, #32
 800834c:	189b      	adds	r3, r3, r2
 800834e:	19db      	adds	r3, r3, r7
 8008350:	2204      	movs	r2, #4
 8008352:	701a      	strb	r2, [r3, #0]
 8008354:	e02c      	b.n	80083b0 <UART_SetConfig+0x390>
 8008356:	46c0      	nop			; (mov r8, r8)
 8008358:	cfff69f3 	.word	0xcfff69f3
 800835c:	ffffcfff 	.word	0xffffcfff
 8008360:	40008000 	.word	0x40008000
 8008364:	40008400 	.word	0x40008400
 8008368:	11fff4ff 	.word	0x11fff4ff
 800836c:	40013800 	.word	0x40013800
 8008370:	40021000 	.word	0x40021000
 8008374:	40004400 	.word	0x40004400
 8008378:	40004800 	.word	0x40004800
 800837c:	40004c00 	.word	0x40004c00
 8008380:	40005000 	.word	0x40005000
 8008384:	40013c00 	.word	0x40013c00
 8008388:	231b      	movs	r3, #27
 800838a:	2220      	movs	r2, #32
 800838c:	189b      	adds	r3, r3, r2
 800838e:	19db      	adds	r3, r3, r7
 8008390:	2208      	movs	r2, #8
 8008392:	701a      	strb	r2, [r3, #0]
 8008394:	e00c      	b.n	80083b0 <UART_SetConfig+0x390>
 8008396:	231b      	movs	r3, #27
 8008398:	2220      	movs	r2, #32
 800839a:	189b      	adds	r3, r3, r2
 800839c:	19db      	adds	r3, r3, r7
 800839e:	2210      	movs	r2, #16
 80083a0:	701a      	strb	r2, [r3, #0]
 80083a2:	e005      	b.n	80083b0 <UART_SetConfig+0x390>
 80083a4:	231b      	movs	r3, #27
 80083a6:	2220      	movs	r2, #32
 80083a8:	189b      	adds	r3, r3, r2
 80083aa:	19db      	adds	r3, r3, r7
 80083ac:	2210      	movs	r2, #16
 80083ae:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4ac1      	ldr	r2, [pc, #772]	; (80086bc <UART_SetConfig+0x69c>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d005      	beq.n	80083c6 <UART_SetConfig+0x3a6>
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4ac0      	ldr	r2, [pc, #768]	; (80086c0 <UART_SetConfig+0x6a0>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d000      	beq.n	80083c6 <UART_SetConfig+0x3a6>
 80083c4:	e093      	b.n	80084ee <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083c6:	231b      	movs	r3, #27
 80083c8:	2220      	movs	r2, #32
 80083ca:	189b      	adds	r3, r3, r2
 80083cc:	19db      	adds	r3, r3, r7
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	2b08      	cmp	r3, #8
 80083d2:	d015      	beq.n	8008400 <UART_SetConfig+0x3e0>
 80083d4:	dc18      	bgt.n	8008408 <UART_SetConfig+0x3e8>
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	d00d      	beq.n	80083f6 <UART_SetConfig+0x3d6>
 80083da:	dc15      	bgt.n	8008408 <UART_SetConfig+0x3e8>
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d002      	beq.n	80083e6 <UART_SetConfig+0x3c6>
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d005      	beq.n	80083f0 <UART_SetConfig+0x3d0>
 80083e4:	e010      	b.n	8008408 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083e6:	f7fd f9ed 	bl	80057c4 <HAL_RCC_GetPCLK1Freq>
 80083ea:	0003      	movs	r3, r0
 80083ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083ee:	e014      	b.n	800841a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083f0:	4bb4      	ldr	r3, [pc, #720]	; (80086c4 <UART_SetConfig+0x6a4>)
 80083f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083f4:	e011      	b.n	800841a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083f6:	f7fd f959 	bl	80056ac <HAL_RCC_GetSysClockFreq>
 80083fa:	0003      	movs	r3, r0
 80083fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083fe:	e00c      	b.n	800841a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008400:	2380      	movs	r3, #128	; 0x80
 8008402:	021b      	lsls	r3, r3, #8
 8008404:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008406:	e008      	b.n	800841a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800840c:	231a      	movs	r3, #26
 800840e:	2220      	movs	r2, #32
 8008410:	189b      	adds	r3, r3, r2
 8008412:	19db      	adds	r3, r3, r7
 8008414:	2201      	movs	r2, #1
 8008416:	701a      	strb	r2, [r3, #0]
        break;
 8008418:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800841a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841c:	2b00      	cmp	r3, #0
 800841e:	d100      	bne.n	8008422 <UART_SetConfig+0x402>
 8008420:	e135      	b.n	800868e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008426:	4ba8      	ldr	r3, [pc, #672]	; (80086c8 <UART_SetConfig+0x6a8>)
 8008428:	0052      	lsls	r2, r2, #1
 800842a:	5ad3      	ldrh	r3, [r2, r3]
 800842c:	0019      	movs	r1, r3
 800842e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008430:	f7f7 fe84 	bl	800013c <__udivsi3>
 8008434:	0003      	movs	r3, r0
 8008436:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	0013      	movs	r3, r2
 800843e:	005b      	lsls	r3, r3, #1
 8008440:	189b      	adds	r3, r3, r2
 8008442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008444:	429a      	cmp	r2, r3
 8008446:	d305      	bcc.n	8008454 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800844e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008450:	429a      	cmp	r2, r3
 8008452:	d906      	bls.n	8008462 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8008454:	231a      	movs	r3, #26
 8008456:	2220      	movs	r2, #32
 8008458:	189b      	adds	r3, r3, r2
 800845a:	19db      	adds	r3, r3, r7
 800845c:	2201      	movs	r2, #1
 800845e:	701a      	strb	r2, [r3, #0]
 8008460:	e044      	b.n	80084ec <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008464:	61bb      	str	r3, [r7, #24]
 8008466:	2300      	movs	r3, #0
 8008468:	61fb      	str	r3, [r7, #28]
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800846e:	4b96      	ldr	r3, [pc, #600]	; (80086c8 <UART_SetConfig+0x6a8>)
 8008470:	0052      	lsls	r2, r2, #1
 8008472:	5ad3      	ldrh	r3, [r2, r3]
 8008474:	613b      	str	r3, [r7, #16]
 8008476:	2300      	movs	r3, #0
 8008478:	617b      	str	r3, [r7, #20]
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	69b8      	ldr	r0, [r7, #24]
 8008480:	69f9      	ldr	r1, [r7, #28]
 8008482:	f7f8 f80f 	bl	80004a4 <__aeabi_uldivmod>
 8008486:	0002      	movs	r2, r0
 8008488:	000b      	movs	r3, r1
 800848a:	0e11      	lsrs	r1, r2, #24
 800848c:	021d      	lsls	r5, r3, #8
 800848e:	430d      	orrs	r5, r1
 8008490:	0214      	lsls	r4, r2, #8
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	085b      	lsrs	r3, r3, #1
 8008498:	60bb      	str	r3, [r7, #8]
 800849a:	2300      	movs	r3, #0
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	68b8      	ldr	r0, [r7, #8]
 80084a0:	68f9      	ldr	r1, [r7, #12]
 80084a2:	1900      	adds	r0, r0, r4
 80084a4:	4169      	adcs	r1, r5
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	603b      	str	r3, [r7, #0]
 80084ac:	2300      	movs	r3, #0
 80084ae:	607b      	str	r3, [r7, #4]
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f7f7 fff6 	bl	80004a4 <__aeabi_uldivmod>
 80084b8:	0002      	movs	r2, r0
 80084ba:	000b      	movs	r3, r1
 80084bc:	0013      	movs	r3, r2
 80084be:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084c2:	23c0      	movs	r3, #192	; 0xc0
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d309      	bcc.n	80084de <UART_SetConfig+0x4be>
 80084ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084cc:	2380      	movs	r3, #128	; 0x80
 80084ce:	035b      	lsls	r3, r3, #13
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d204      	bcs.n	80084de <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084da:	60da      	str	r2, [r3, #12]
 80084dc:	e006      	b.n	80084ec <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80084de:	231a      	movs	r3, #26
 80084e0:	2220      	movs	r2, #32
 80084e2:	189b      	adds	r3, r3, r2
 80084e4:	19db      	adds	r3, r3, r7
 80084e6:	2201      	movs	r2, #1
 80084e8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80084ea:	e0d0      	b.n	800868e <UART_SetConfig+0x66e>
 80084ec:	e0cf      	b.n	800868e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	69da      	ldr	r2, [r3, #28]
 80084f2:	2380      	movs	r3, #128	; 0x80
 80084f4:	021b      	lsls	r3, r3, #8
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d000      	beq.n	80084fc <UART_SetConfig+0x4dc>
 80084fa:	e070      	b.n	80085de <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80084fc:	231b      	movs	r3, #27
 80084fe:	2220      	movs	r2, #32
 8008500:	189b      	adds	r3, r3, r2
 8008502:	19db      	adds	r3, r3, r7
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	2b08      	cmp	r3, #8
 8008508:	d015      	beq.n	8008536 <UART_SetConfig+0x516>
 800850a:	dc18      	bgt.n	800853e <UART_SetConfig+0x51e>
 800850c:	2b04      	cmp	r3, #4
 800850e:	d00d      	beq.n	800852c <UART_SetConfig+0x50c>
 8008510:	dc15      	bgt.n	800853e <UART_SetConfig+0x51e>
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <UART_SetConfig+0x4fc>
 8008516:	2b02      	cmp	r3, #2
 8008518:	d005      	beq.n	8008526 <UART_SetConfig+0x506>
 800851a:	e010      	b.n	800853e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800851c:	f7fd f952 	bl	80057c4 <HAL_RCC_GetPCLK1Freq>
 8008520:	0003      	movs	r3, r0
 8008522:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008524:	e014      	b.n	8008550 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008526:	4b67      	ldr	r3, [pc, #412]	; (80086c4 <UART_SetConfig+0x6a4>)
 8008528:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800852a:	e011      	b.n	8008550 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800852c:	f7fd f8be 	bl	80056ac <HAL_RCC_GetSysClockFreq>
 8008530:	0003      	movs	r3, r0
 8008532:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008534:	e00c      	b.n	8008550 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008536:	2380      	movs	r3, #128	; 0x80
 8008538:	021b      	lsls	r3, r3, #8
 800853a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800853c:	e008      	b.n	8008550 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008542:	231a      	movs	r3, #26
 8008544:	2220      	movs	r2, #32
 8008546:	189b      	adds	r3, r3, r2
 8008548:	19db      	adds	r3, r3, r7
 800854a:	2201      	movs	r2, #1
 800854c:	701a      	strb	r2, [r3, #0]
        break;
 800854e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008552:	2b00      	cmp	r3, #0
 8008554:	d100      	bne.n	8008558 <UART_SetConfig+0x538>
 8008556:	e09a      	b.n	800868e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800855c:	4b5a      	ldr	r3, [pc, #360]	; (80086c8 <UART_SetConfig+0x6a8>)
 800855e:	0052      	lsls	r2, r2, #1
 8008560:	5ad3      	ldrh	r3, [r2, r3]
 8008562:	0019      	movs	r1, r3
 8008564:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008566:	f7f7 fde9 	bl	800013c <__udivsi3>
 800856a:	0003      	movs	r3, r0
 800856c:	005a      	lsls	r2, r3, #1
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	085b      	lsrs	r3, r3, #1
 8008574:	18d2      	adds	r2, r2, r3
 8008576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	0019      	movs	r1, r3
 800857c:	0010      	movs	r0, r2
 800857e:	f7f7 fddd 	bl	800013c <__udivsi3>
 8008582:	0003      	movs	r3, r0
 8008584:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008588:	2b0f      	cmp	r3, #15
 800858a:	d921      	bls.n	80085d0 <UART_SetConfig+0x5b0>
 800858c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800858e:	2380      	movs	r3, #128	; 0x80
 8008590:	025b      	lsls	r3, r3, #9
 8008592:	429a      	cmp	r2, r3
 8008594:	d21c      	bcs.n	80085d0 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	b29a      	uxth	r2, r3
 800859a:	200e      	movs	r0, #14
 800859c:	2420      	movs	r4, #32
 800859e:	1903      	adds	r3, r0, r4
 80085a0:	19db      	adds	r3, r3, r7
 80085a2:	210f      	movs	r1, #15
 80085a4:	438a      	bics	r2, r1
 80085a6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085aa:	085b      	lsrs	r3, r3, #1
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	2207      	movs	r2, #7
 80085b0:	4013      	ands	r3, r2
 80085b2:	b299      	uxth	r1, r3
 80085b4:	1903      	adds	r3, r0, r4
 80085b6:	19db      	adds	r3, r3, r7
 80085b8:	1902      	adds	r2, r0, r4
 80085ba:	19d2      	adds	r2, r2, r7
 80085bc:	8812      	ldrh	r2, [r2, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	1902      	adds	r2, r0, r4
 80085c8:	19d2      	adds	r2, r2, r7
 80085ca:	8812      	ldrh	r2, [r2, #0]
 80085cc:	60da      	str	r2, [r3, #12]
 80085ce:	e05e      	b.n	800868e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80085d0:	231a      	movs	r3, #26
 80085d2:	2220      	movs	r2, #32
 80085d4:	189b      	adds	r3, r3, r2
 80085d6:	19db      	adds	r3, r3, r7
 80085d8:	2201      	movs	r2, #1
 80085da:	701a      	strb	r2, [r3, #0]
 80085dc:	e057      	b.n	800868e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085de:	231b      	movs	r3, #27
 80085e0:	2220      	movs	r2, #32
 80085e2:	189b      	adds	r3, r3, r2
 80085e4:	19db      	adds	r3, r3, r7
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b08      	cmp	r3, #8
 80085ea:	d015      	beq.n	8008618 <UART_SetConfig+0x5f8>
 80085ec:	dc18      	bgt.n	8008620 <UART_SetConfig+0x600>
 80085ee:	2b04      	cmp	r3, #4
 80085f0:	d00d      	beq.n	800860e <UART_SetConfig+0x5ee>
 80085f2:	dc15      	bgt.n	8008620 <UART_SetConfig+0x600>
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <UART_SetConfig+0x5de>
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d005      	beq.n	8008608 <UART_SetConfig+0x5e8>
 80085fc:	e010      	b.n	8008620 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085fe:	f7fd f8e1 	bl	80057c4 <HAL_RCC_GetPCLK1Freq>
 8008602:	0003      	movs	r3, r0
 8008604:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008606:	e014      	b.n	8008632 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008608:	4b2e      	ldr	r3, [pc, #184]	; (80086c4 <UART_SetConfig+0x6a4>)
 800860a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800860c:	e011      	b.n	8008632 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800860e:	f7fd f84d 	bl	80056ac <HAL_RCC_GetSysClockFreq>
 8008612:	0003      	movs	r3, r0
 8008614:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008616:	e00c      	b.n	8008632 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008618:	2380      	movs	r3, #128	; 0x80
 800861a:	021b      	lsls	r3, r3, #8
 800861c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800861e:	e008      	b.n	8008632 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8008620:	2300      	movs	r3, #0
 8008622:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008624:	231a      	movs	r3, #26
 8008626:	2220      	movs	r2, #32
 8008628:	189b      	adds	r3, r3, r2
 800862a:	19db      	adds	r3, r3, r7
 800862c:	2201      	movs	r2, #1
 800862e:	701a      	strb	r2, [r3, #0]
        break;
 8008630:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008634:	2b00      	cmp	r3, #0
 8008636:	d02a      	beq.n	800868e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800863c:	4b22      	ldr	r3, [pc, #136]	; (80086c8 <UART_SetConfig+0x6a8>)
 800863e:	0052      	lsls	r2, r2, #1
 8008640:	5ad3      	ldrh	r3, [r2, r3]
 8008642:	0019      	movs	r1, r3
 8008644:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008646:	f7f7 fd79 	bl	800013c <__udivsi3>
 800864a:	0003      	movs	r3, r0
 800864c:	001a      	movs	r2, r3
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	085b      	lsrs	r3, r3, #1
 8008654:	18d2      	adds	r2, r2, r3
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	0019      	movs	r1, r3
 800865c:	0010      	movs	r0, r2
 800865e:	f7f7 fd6d 	bl	800013c <__udivsi3>
 8008662:	0003      	movs	r3, r0
 8008664:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	2b0f      	cmp	r3, #15
 800866a:	d90a      	bls.n	8008682 <UART_SetConfig+0x662>
 800866c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800866e:	2380      	movs	r3, #128	; 0x80
 8008670:	025b      	lsls	r3, r3, #9
 8008672:	429a      	cmp	r2, r3
 8008674:	d205      	bcs.n	8008682 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	b29a      	uxth	r2, r3
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	60da      	str	r2, [r3, #12]
 8008680:	e005      	b.n	800868e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8008682:	231a      	movs	r3, #26
 8008684:	2220      	movs	r2, #32
 8008686:	189b      	adds	r3, r3, r2
 8008688:	19db      	adds	r3, r3, r7
 800868a:	2201      	movs	r2, #1
 800868c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	226a      	movs	r2, #106	; 0x6a
 8008692:	2101      	movs	r1, #1
 8008694:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	2268      	movs	r2, #104	; 0x68
 800869a:	2101      	movs	r1, #1
 800869c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	2200      	movs	r2, #0
 80086a2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	2200      	movs	r2, #0
 80086a8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80086aa:	231a      	movs	r3, #26
 80086ac:	2220      	movs	r2, #32
 80086ae:	189b      	adds	r3, r3, r2
 80086b0:	19db      	adds	r3, r3, r7
 80086b2:	781b      	ldrb	r3, [r3, #0]
}
 80086b4:	0018      	movs	r0, r3
 80086b6:	46bd      	mov	sp, r7
 80086b8:	b010      	add	sp, #64	; 0x40
 80086ba:	bdb0      	pop	{r4, r5, r7, pc}
 80086bc:	40008000 	.word	0x40008000
 80086c0:	40008400 	.word	0x40008400
 80086c4:	00f42400 	.word	0x00f42400
 80086c8:	08015a84 	.word	0x08015a84

080086cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d8:	2208      	movs	r2, #8
 80086da:	4013      	ands	r3, r2
 80086dc:	d00b      	beq.n	80086f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	4a4a      	ldr	r2, [pc, #296]	; (8008810 <UART_AdvFeatureConfig+0x144>)
 80086e6:	4013      	ands	r3, r2
 80086e8:	0019      	movs	r1, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fa:	2201      	movs	r2, #1
 80086fc:	4013      	ands	r3, r2
 80086fe:	d00b      	beq.n	8008718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	4a43      	ldr	r2, [pc, #268]	; (8008814 <UART_AdvFeatureConfig+0x148>)
 8008708:	4013      	ands	r3, r2
 800870a:	0019      	movs	r1, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	430a      	orrs	r2, r1
 8008716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871c:	2202      	movs	r2, #2
 800871e:	4013      	ands	r3, r2
 8008720:	d00b      	beq.n	800873a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	4a3b      	ldr	r2, [pc, #236]	; (8008818 <UART_AdvFeatureConfig+0x14c>)
 800872a:	4013      	ands	r3, r2
 800872c:	0019      	movs	r1, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	430a      	orrs	r2, r1
 8008738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873e:	2204      	movs	r2, #4
 8008740:	4013      	ands	r3, r2
 8008742:	d00b      	beq.n	800875c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	4a34      	ldr	r2, [pc, #208]	; (800881c <UART_AdvFeatureConfig+0x150>)
 800874c:	4013      	ands	r3, r2
 800874e:	0019      	movs	r1, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	430a      	orrs	r2, r1
 800875a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008760:	2210      	movs	r2, #16
 8008762:	4013      	ands	r3, r2
 8008764:	d00b      	beq.n	800877e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	4a2c      	ldr	r2, [pc, #176]	; (8008820 <UART_AdvFeatureConfig+0x154>)
 800876e:	4013      	ands	r3, r2
 8008770:	0019      	movs	r1, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	430a      	orrs	r2, r1
 800877c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008782:	2220      	movs	r2, #32
 8008784:	4013      	ands	r3, r2
 8008786:	d00b      	beq.n	80087a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	4a25      	ldr	r2, [pc, #148]	; (8008824 <UART_AdvFeatureConfig+0x158>)
 8008790:	4013      	ands	r3, r2
 8008792:	0019      	movs	r1, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	430a      	orrs	r2, r1
 800879e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	2240      	movs	r2, #64	; 0x40
 80087a6:	4013      	ands	r3, r2
 80087a8:	d01d      	beq.n	80087e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	4a1d      	ldr	r2, [pc, #116]	; (8008828 <UART_AdvFeatureConfig+0x15c>)
 80087b2:	4013      	ands	r3, r2
 80087b4:	0019      	movs	r1, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087c6:	2380      	movs	r3, #128	; 0x80
 80087c8:	035b      	lsls	r3, r3, #13
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d10b      	bne.n	80087e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	4a15      	ldr	r2, [pc, #84]	; (800882c <UART_AdvFeatureConfig+0x160>)
 80087d6:	4013      	ands	r3, r2
 80087d8:	0019      	movs	r1, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	430a      	orrs	r2, r1
 80087e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ea:	2280      	movs	r2, #128	; 0x80
 80087ec:	4013      	ands	r3, r2
 80087ee:	d00b      	beq.n	8008808 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	4a0e      	ldr	r2, [pc, #56]	; (8008830 <UART_AdvFeatureConfig+0x164>)
 80087f8:	4013      	ands	r3, r2
 80087fa:	0019      	movs	r1, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	430a      	orrs	r2, r1
 8008806:	605a      	str	r2, [r3, #4]
  }
}
 8008808:	46c0      	nop			; (mov r8, r8)
 800880a:	46bd      	mov	sp, r7
 800880c:	b002      	add	sp, #8
 800880e:	bd80      	pop	{r7, pc}
 8008810:	ffff7fff 	.word	0xffff7fff
 8008814:	fffdffff 	.word	0xfffdffff
 8008818:	fffeffff 	.word	0xfffeffff
 800881c:	fffbffff 	.word	0xfffbffff
 8008820:	ffffefff 	.word	0xffffefff
 8008824:	ffffdfff 	.word	0xffffdfff
 8008828:	ffefffff 	.word	0xffefffff
 800882c:	ff9fffff 	.word	0xff9fffff
 8008830:	fff7ffff 	.word	0xfff7ffff

08008834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b092      	sub	sp, #72	; 0x48
 8008838:	af02      	add	r7, sp, #8
 800883a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2290      	movs	r2, #144	; 0x90
 8008840:	2100      	movs	r1, #0
 8008842:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008844:	f7fb fe18 	bl	8004478 <HAL_GetTick>
 8008848:	0003      	movs	r3, r0
 800884a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2208      	movs	r2, #8
 8008854:	4013      	ands	r3, r2
 8008856:	2b08      	cmp	r3, #8
 8008858:	d12d      	bne.n	80088b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800885a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885c:	2280      	movs	r2, #128	; 0x80
 800885e:	0391      	lsls	r1, r2, #14
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	4a47      	ldr	r2, [pc, #284]	; (8008980 <UART_CheckIdleState+0x14c>)
 8008864:	9200      	str	r2, [sp, #0]
 8008866:	2200      	movs	r2, #0
 8008868:	f000 f88e 	bl	8008988 <UART_WaitOnFlagUntilTimeout>
 800886c:	1e03      	subs	r3, r0, #0
 800886e:	d022      	beq.n	80088b6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008870:	f3ef 8310 	mrs	r3, PRIMASK
 8008874:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008878:	63bb      	str	r3, [r7, #56]	; 0x38
 800887a:	2301      	movs	r3, #1
 800887c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	f383 8810 	msr	PRIMASK, r3
}
 8008884:	46c0      	nop			; (mov r8, r8)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2180      	movs	r1, #128	; 0x80
 8008892:	438a      	bics	r2, r1
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008898:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800889a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889c:	f383 8810 	msr	PRIMASK, r3
}
 80088a0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2288      	movs	r2, #136	; 0x88
 80088a6:	2120      	movs	r1, #32
 80088a8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2284      	movs	r2, #132	; 0x84
 80088ae:	2100      	movs	r1, #0
 80088b0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e060      	b.n	8008978 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2204      	movs	r2, #4
 80088be:	4013      	ands	r3, r2
 80088c0:	2b04      	cmp	r3, #4
 80088c2:	d146      	bne.n	8008952 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088c6:	2280      	movs	r2, #128	; 0x80
 80088c8:	03d1      	lsls	r1, r2, #15
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	4a2c      	ldr	r2, [pc, #176]	; (8008980 <UART_CheckIdleState+0x14c>)
 80088ce:	9200      	str	r2, [sp, #0]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f000 f859 	bl	8008988 <UART_WaitOnFlagUntilTimeout>
 80088d6:	1e03      	subs	r3, r0, #0
 80088d8:	d03b      	beq.n	8008952 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088da:	f3ef 8310 	mrs	r3, PRIMASK
 80088de:	60fb      	str	r3, [r7, #12]
  return(result);
 80088e0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088e2:	637b      	str	r3, [r7, #52]	; 0x34
 80088e4:	2301      	movs	r3, #1
 80088e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	f383 8810 	msr	PRIMASK, r3
}
 80088ee:	46c0      	nop			; (mov r8, r8)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4922      	ldr	r1, [pc, #136]	; (8008984 <UART_CheckIdleState+0x150>)
 80088fc:	400a      	ands	r2, r1
 80088fe:	601a      	str	r2, [r3, #0]
 8008900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008902:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	f383 8810 	msr	PRIMASK, r3
}
 800890a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800890c:	f3ef 8310 	mrs	r3, PRIMASK
 8008910:	61bb      	str	r3, [r7, #24]
  return(result);
 8008912:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008914:	633b      	str	r3, [r7, #48]	; 0x30
 8008916:	2301      	movs	r3, #1
 8008918:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	f383 8810 	msr	PRIMASK, r3
}
 8008920:	46c0      	nop			; (mov r8, r8)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	689a      	ldr	r2, [r3, #8]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2101      	movs	r1, #1
 800892e:	438a      	bics	r2, r1
 8008930:	609a      	str	r2, [r3, #8]
 8008932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008934:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	f383 8810 	msr	PRIMASK, r3
}
 800893c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	228c      	movs	r2, #140	; 0x8c
 8008942:	2120      	movs	r1, #32
 8008944:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2284      	movs	r2, #132	; 0x84
 800894a:	2100      	movs	r1, #0
 800894c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e012      	b.n	8008978 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2288      	movs	r2, #136	; 0x88
 8008956:	2120      	movs	r1, #32
 8008958:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	228c      	movs	r2, #140	; 0x8c
 800895e:	2120      	movs	r1, #32
 8008960:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2284      	movs	r2, #132	; 0x84
 8008972:	2100      	movs	r1, #0
 8008974:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	0018      	movs	r0, r3
 800897a:	46bd      	mov	sp, r7
 800897c:	b010      	add	sp, #64	; 0x40
 800897e:	bd80      	pop	{r7, pc}
 8008980:	01ffffff 	.word	0x01ffffff
 8008984:	fffffedf 	.word	0xfffffedf

08008988 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	603b      	str	r3, [r7, #0]
 8008994:	1dfb      	adds	r3, r7, #7
 8008996:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008998:	e051      	b.n	8008a3e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	3301      	adds	r3, #1
 800899e:	d04e      	beq.n	8008a3e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089a0:	f7fb fd6a 	bl	8004478 <HAL_GetTick>
 80089a4:	0002      	movs	r2, r0
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	69ba      	ldr	r2, [r7, #24]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d302      	bcc.n	80089b6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80089b6:	2303      	movs	r3, #3
 80089b8:	e051      	b.n	8008a5e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2204      	movs	r2, #4
 80089c2:	4013      	ands	r3, r2
 80089c4:	d03b      	beq.n	8008a3e <UART_WaitOnFlagUntilTimeout+0xb6>
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2b80      	cmp	r3, #128	; 0x80
 80089ca:	d038      	beq.n	8008a3e <UART_WaitOnFlagUntilTimeout+0xb6>
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2b40      	cmp	r3, #64	; 0x40
 80089d0:	d035      	beq.n	8008a3e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	69db      	ldr	r3, [r3, #28]
 80089d8:	2208      	movs	r2, #8
 80089da:	4013      	ands	r3, r2
 80089dc:	2b08      	cmp	r3, #8
 80089de:	d111      	bne.n	8008a04 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2208      	movs	r2, #8
 80089e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	0018      	movs	r0, r3
 80089ec:	f000 f83c 	bl	8008a68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2290      	movs	r2, #144	; 0x90
 80089f4:	2108      	movs	r1, #8
 80089f6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2284      	movs	r2, #132	; 0x84
 80089fc:	2100      	movs	r1, #0
 80089fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e02c      	b.n	8008a5e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	69da      	ldr	r2, [r3, #28]
 8008a0a:	2380      	movs	r3, #128	; 0x80
 8008a0c:	011b      	lsls	r3, r3, #4
 8008a0e:	401a      	ands	r2, r3
 8008a10:	2380      	movs	r3, #128	; 0x80
 8008a12:	011b      	lsls	r3, r3, #4
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d112      	bne.n	8008a3e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2280      	movs	r2, #128	; 0x80
 8008a1e:	0112      	lsls	r2, r2, #4
 8008a20:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	0018      	movs	r0, r3
 8008a26:	f000 f81f 	bl	8008a68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2290      	movs	r2, #144	; 0x90
 8008a2e:	2120      	movs	r1, #32
 8008a30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2284      	movs	r2, #132	; 0x84
 8008a36:	2100      	movs	r1, #0
 8008a38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e00f      	b.n	8008a5e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	69db      	ldr	r3, [r3, #28]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	4013      	ands	r3, r2
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	425a      	negs	r2, r3
 8008a4e:	4153      	adcs	r3, r2
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	001a      	movs	r2, r3
 8008a54:	1dfb      	adds	r3, r7, #7
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d09e      	beq.n	800899a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	0018      	movs	r0, r3
 8008a60:	46bd      	mov	sp, r7
 8008a62:	b004      	add	sp, #16
 8008a64:	bd80      	pop	{r7, pc}
	...

08008a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08e      	sub	sp, #56	; 0x38
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a70:	f3ef 8310 	mrs	r3, PRIMASK
 8008a74:	617b      	str	r3, [r7, #20]
  return(result);
 8008a76:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a78:	637b      	str	r3, [r7, #52]	; 0x34
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	f383 8810 	msr	PRIMASK, r3
}
 8008a84:	46c0      	nop			; (mov r8, r8)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4926      	ldr	r1, [pc, #152]	; (8008b2c <UART_EndRxTransfer+0xc4>)
 8008a92:	400a      	ands	r2, r1
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	f383 8810 	msr	PRIMASK, r3
}
 8008aa0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8008aa6:	623b      	str	r3, [r7, #32]
  return(result);
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8008aac:	2301      	movs	r3, #1
 8008aae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	f383 8810 	msr	PRIMASK, r3
}
 8008ab6:	46c0      	nop			; (mov r8, r8)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	689a      	ldr	r2, [r3, #8]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	491b      	ldr	r1, [pc, #108]	; (8008b30 <UART_EndRxTransfer+0xc8>)
 8008ac4:	400a      	ands	r2, r1
 8008ac6:	609a      	str	r2, [r3, #8]
 8008ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ace:	f383 8810 	msr	PRIMASK, r3
}
 8008ad2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d118      	bne.n	8008b0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008adc:	f3ef 8310 	mrs	r3, PRIMASK
 8008ae0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ae2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f383 8810 	msr	PRIMASK, r3
}
 8008af0:	46c0      	nop			; (mov r8, r8)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2110      	movs	r1, #16
 8008afe:	438a      	bics	r2, r1
 8008b00:	601a      	str	r2, [r3, #0]
 8008b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f383 8810 	msr	PRIMASK, r3
}
 8008b0c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	228c      	movs	r2, #140	; 0x8c
 8008b12:	2120      	movs	r1, #32
 8008b14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008b22:	46c0      	nop			; (mov r8, r8)
 8008b24:	46bd      	mov	sp, r7
 8008b26:	b00e      	add	sp, #56	; 0x38
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	46c0      	nop			; (mov r8, r8)
 8008b2c:	fffffedf 	.word	0xfffffedf
 8008b30:	effffffe 	.word	0xeffffffe

08008b34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2284      	movs	r2, #132	; 0x84
 8008b40:	5c9b      	ldrb	r3, [r3, r2]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d101      	bne.n	8008b4a <HAL_UARTEx_DisableFifoMode+0x16>
 8008b46:	2302      	movs	r3, #2
 8008b48:	e027      	b.n	8008b9a <HAL_UARTEx_DisableFifoMode+0x66>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2284      	movs	r2, #132	; 0x84
 8008b4e:	2101      	movs	r1, #1
 8008b50:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2288      	movs	r2, #136	; 0x88
 8008b56:	2124      	movs	r1, #36	; 0x24
 8008b58:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	438a      	bics	r2, r1
 8008b70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	4a0b      	ldr	r2, [pc, #44]	; (8008ba4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008b76:	4013      	ands	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2288      	movs	r2, #136	; 0x88
 8008b8c:	2120      	movs	r1, #32
 8008b8e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2284      	movs	r2, #132	; 0x84
 8008b94:	2100      	movs	r1, #0
 8008b96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	b004      	add	sp, #16
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	46c0      	nop			; (mov r8, r8)
 8008ba4:	dfffffff 	.word	0xdfffffff

08008ba8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2284      	movs	r2, #132	; 0x84
 8008bb6:	5c9b      	ldrb	r3, [r3, r2]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d101      	bne.n	8008bc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	e02e      	b.n	8008c1e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2284      	movs	r2, #132	; 0x84
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2288      	movs	r2, #136	; 0x88
 8008bcc:	2124      	movs	r1, #36	; 0x24
 8008bce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2101      	movs	r1, #1
 8008be4:	438a      	bics	r2, r1
 8008be6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	00db      	lsls	r3, r3, #3
 8008bf0:	08d9      	lsrs	r1, r3, #3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	430a      	orrs	r2, r1
 8008bfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	0018      	movs	r0, r3
 8008c00:	f000 f854 	bl	8008cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2288      	movs	r2, #136	; 0x88
 8008c10:	2120      	movs	r1, #32
 8008c12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2284      	movs	r2, #132	; 0x84
 8008c18:	2100      	movs	r1, #0
 8008c1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	0018      	movs	r0, r3
 8008c20:	46bd      	mov	sp, r7
 8008c22:	b004      	add	sp, #16
 8008c24:	bd80      	pop	{r7, pc}
	...

08008c28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2284      	movs	r2, #132	; 0x84
 8008c36:	5c9b      	ldrb	r3, [r3, r2]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d101      	bne.n	8008c40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e02f      	b.n	8008ca0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2284      	movs	r2, #132	; 0x84
 8008c44:	2101      	movs	r1, #1
 8008c46:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2288      	movs	r2, #136	; 0x88
 8008c4c:	2124      	movs	r1, #36	; 0x24
 8008c4e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2101      	movs	r1, #1
 8008c64:	438a      	bics	r2, r1
 8008c66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	4a0e      	ldr	r2, [pc, #56]	; (8008ca8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008c70:	4013      	ands	r3, r2
 8008c72:	0019      	movs	r1, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	683a      	ldr	r2, [r7, #0]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	0018      	movs	r0, r3
 8008c82:	f000 f813 	bl	8008cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2288      	movs	r2, #136	; 0x88
 8008c92:	2120      	movs	r1, #32
 8008c94:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2284      	movs	r2, #132	; 0x84
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	0018      	movs	r0, r3
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	b004      	add	sp, #16
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	f1ffffff 	.word	0xf1ffffff

08008cac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d108      	bne.n	8008cce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	226a      	movs	r2, #106	; 0x6a
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2268      	movs	r2, #104	; 0x68
 8008cc8:	2101      	movs	r1, #1
 8008cca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ccc:	e043      	b.n	8008d56 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cce:	260f      	movs	r6, #15
 8008cd0:	19bb      	adds	r3, r7, r6
 8008cd2:	2208      	movs	r2, #8
 8008cd4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008cd6:	200e      	movs	r0, #14
 8008cd8:	183b      	adds	r3, r7, r0
 8008cda:	2208      	movs	r2, #8
 8008cdc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	0e5b      	lsrs	r3, r3, #25
 8008ce6:	b2da      	uxtb	r2, r3
 8008ce8:	240d      	movs	r4, #13
 8008cea:	193b      	adds	r3, r7, r4
 8008cec:	2107      	movs	r1, #7
 8008cee:	400a      	ands	r2, r1
 8008cf0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	0f5b      	lsrs	r3, r3, #29
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	250c      	movs	r5, #12
 8008cfe:	197b      	adds	r3, r7, r5
 8008d00:	2107      	movs	r1, #7
 8008d02:	400a      	ands	r2, r1
 8008d04:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d06:	183b      	adds	r3, r7, r0
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	197a      	adds	r2, r7, r5
 8008d0c:	7812      	ldrb	r2, [r2, #0]
 8008d0e:	4914      	ldr	r1, [pc, #80]	; (8008d60 <UARTEx_SetNbDataToProcess+0xb4>)
 8008d10:	5c8a      	ldrb	r2, [r1, r2]
 8008d12:	435a      	muls	r2, r3
 8008d14:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d16:	197b      	adds	r3, r7, r5
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	4a12      	ldr	r2, [pc, #72]	; (8008d64 <UARTEx_SetNbDataToProcess+0xb8>)
 8008d1c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d1e:	0019      	movs	r1, r3
 8008d20:	f7f7 fa96 	bl	8000250 <__divsi3>
 8008d24:	0003      	movs	r3, r0
 8008d26:	b299      	uxth	r1, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	226a      	movs	r2, #106	; 0x6a
 8008d2c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d2e:	19bb      	adds	r3, r7, r6
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	193a      	adds	r2, r7, r4
 8008d34:	7812      	ldrb	r2, [r2, #0]
 8008d36:	490a      	ldr	r1, [pc, #40]	; (8008d60 <UARTEx_SetNbDataToProcess+0xb4>)
 8008d38:	5c8a      	ldrb	r2, [r1, r2]
 8008d3a:	435a      	muls	r2, r3
 8008d3c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d3e:	193b      	adds	r3, r7, r4
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	4a08      	ldr	r2, [pc, #32]	; (8008d64 <UARTEx_SetNbDataToProcess+0xb8>)
 8008d44:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d46:	0019      	movs	r1, r3
 8008d48:	f7f7 fa82 	bl	8000250 <__divsi3>
 8008d4c:	0003      	movs	r3, r0
 8008d4e:	b299      	uxth	r1, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2268      	movs	r2, #104	; 0x68
 8008d54:	5299      	strh	r1, [r3, r2]
}
 8008d56:	46c0      	nop			; (mov r8, r8)
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	b005      	add	sp, #20
 8008d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d5e:	46c0      	nop			; (mov r8, r8)
 8008d60:	08015a9c 	.word	0x08015a9c
 8008d64:	08015aa4 	.word	0x08015aa4

08008d68 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8008d68:	b5b0      	push	{r4, r5, r7, lr}
 8008d6a:	b0e4      	sub	sp, #400	; 0x190
 8008d6c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008d6e:	24c8      	movs	r4, #200	; 0xc8
 8008d70:	193b      	adds	r3, r7, r4
 8008d72:	0018      	movs	r0, r3
 8008d74:	23c6      	movs	r3, #198	; 0xc6
 8008d76:	001a      	movs	r2, r3
 8008d78:	2100      	movs	r1, #0
 8008d7a:	f004 fb21 	bl	800d3c0 <memset>
    astronode_app_msg_t answer = {0};
 8008d7e:	4b13      	ldr	r3, [pc, #76]	; (8008dcc <astronode_send_cfg_sr+0x64>)
 8008d80:	25c8      	movs	r5, #200	; 0xc8
 8008d82:	006d      	lsls	r5, r5, #1
 8008d84:	195b      	adds	r3, r3, r5
 8008d86:	19db      	adds	r3, r3, r7
 8008d88:	0018      	movs	r0, r3
 8008d8a:	23c6      	movs	r3, #198	; 0xc6
 8008d8c:	001a      	movs	r2, r3
 8008d8e:	2100      	movs	r1, #0
 8008d90:	f004 fb16 	bl	800d3c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8008d94:	193b      	adds	r3, r7, r4
 8008d96:	2210      	movs	r2, #16
 8008d98:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8008d9a:	003a      	movs	r2, r7
 8008d9c:	193b      	adds	r3, r7, r4
 8008d9e:	0011      	movs	r1, r2
 8008da0:	0018      	movs	r0, r3
 8008da2:	f001 fa87 	bl	800a2b4 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8008da6:	4b09      	ldr	r3, [pc, #36]	; (8008dcc <astronode_send_cfg_sr+0x64>)
 8008da8:	195b      	adds	r3, r3, r5
 8008daa:	19db      	adds	r3, r3, r7
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	2b90      	cmp	r3, #144	; 0x90
 8008db0:	d104      	bne.n	8008dbc <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8008db2:	4b07      	ldr	r3, [pc, #28]	; (8008dd0 <astronode_send_cfg_sr+0x68>)
 8008db4:	0018      	movs	r0, r3
 8008db6:	f7fa f99d 	bl	80030f4 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8008dba:	e003      	b.n	8008dc4 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8008dbc:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <astronode_send_cfg_sr+0x6c>)
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f7fa f998 	bl	80030f4 <send_debug_logs>
}
 8008dc4:	46c0      	nop			; (mov r8, r8)
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	b064      	add	sp, #400	; 0x190
 8008dca:	bdb0      	pop	{r4, r5, r7, pc}
 8008dcc:	fffffe70 	.word	0xfffffe70
 8008dd0:	080144c0 	.word	0x080144c0
 8008dd4:	080144f4 	.word	0x080144f4

08008dd8 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8008dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dda:	b0e7      	sub	sp, #412	; 0x19c
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	0005      	movs	r5, r0
 8008de0:	000c      	movs	r4, r1
 8008de2:	0010      	movs	r0, r2
 8008de4:	0019      	movs	r1, r3
 8008de6:	4b4b      	ldr	r3, [pc, #300]	; (8008f14 <astronode_send_cfg_wr+0x13c>)
 8008de8:	26cc      	movs	r6, #204	; 0xcc
 8008dea:	0076      	lsls	r6, r6, #1
 8008dec:	199b      	adds	r3, r3, r6
 8008dee:	19db      	adds	r3, r3, r7
 8008df0:	1c2a      	adds	r2, r5, #0
 8008df2:	701a      	strb	r2, [r3, #0]
 8008df4:	4b48      	ldr	r3, [pc, #288]	; (8008f18 <astronode_send_cfg_wr+0x140>)
 8008df6:	0035      	movs	r5, r6
 8008df8:	195b      	adds	r3, r3, r5
 8008dfa:	19db      	adds	r3, r3, r7
 8008dfc:	1c22      	adds	r2, r4, #0
 8008dfe:	701a      	strb	r2, [r3, #0]
 8008e00:	4b46      	ldr	r3, [pc, #280]	; (8008f1c <astronode_send_cfg_wr+0x144>)
 8008e02:	002c      	movs	r4, r5
 8008e04:	191b      	adds	r3, r3, r4
 8008e06:	19db      	adds	r3, r3, r7
 8008e08:	1c02      	adds	r2, r0, #0
 8008e0a:	701a      	strb	r2, [r3, #0]
 8008e0c:	4b44      	ldr	r3, [pc, #272]	; (8008f20 <astronode_send_cfg_wr+0x148>)
 8008e0e:	191b      	adds	r3, r3, r4
 8008e10:	19db      	adds	r3, r3, r7
 8008e12:	1c0a      	adds	r2, r1, #0
 8008e14:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8008e16:	25d0      	movs	r5, #208	; 0xd0
 8008e18:	197b      	adds	r3, r7, r5
 8008e1a:	0018      	movs	r0, r3
 8008e1c:	23c6      	movs	r3, #198	; 0xc6
 8008e1e:	001a      	movs	r2, r3
 8008e20:	2100      	movs	r1, #0
 8008e22:	f004 facd 	bl	800d3c0 <memset>
    astronode_app_msg_t answer = {0};
 8008e26:	4b3f      	ldr	r3, [pc, #252]	; (8008f24 <astronode_send_cfg_wr+0x14c>)
 8008e28:	191b      	adds	r3, r3, r4
 8008e2a:	19db      	adds	r3, r3, r7
 8008e2c:	0018      	movs	r0, r3
 8008e2e:	23c6      	movs	r3, #198	; 0xc6
 8008e30:	001a      	movs	r2, r3
 8008e32:	2100      	movs	r1, #0
 8008e34:	f004 fac4 	bl	800d3c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8008e38:	0029      	movs	r1, r5
 8008e3a:	187b      	adds	r3, r7, r1
 8008e3c:	2205      	movs	r2, #5
 8008e3e:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8008e40:	4b34      	ldr	r3, [pc, #208]	; (8008f14 <astronode_send_cfg_wr+0x13c>)
 8008e42:	191b      	adds	r3, r3, r4
 8008e44:	19db      	adds	r3, r3, r7
 8008e46:	2200      	movs	r2, #0
 8008e48:	569a      	ldrsb	r2, [r3, r2]
 8008e4a:	4b33      	ldr	r3, [pc, #204]	; (8008f18 <astronode_send_cfg_wr+0x140>)
 8008e4c:	191b      	adds	r3, r3, r4
 8008e4e:	19db      	adds	r3, r3, r7
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	b25b      	sxtb	r3, r3
 8008e56:	4313      	orrs	r3, r2
 8008e58:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8008e5a:	4b30      	ldr	r3, [pc, #192]	; (8008f1c <astronode_send_cfg_wr+0x144>)
 8008e5c:	191b      	adds	r3, r3, r4
 8008e5e:	19db      	adds	r3, r3, r7
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	b25b      	sxtb	r3, r3
 8008e66:	4313      	orrs	r3, r2
 8008e68:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8008e6a:	4b2d      	ldr	r3, [pc, #180]	; (8008f20 <astronode_send_cfg_wr+0x148>)
 8008e6c:	191b      	adds	r3, r3, r4
 8008e6e:	19db      	adds	r3, r3, r7
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	00db      	lsls	r3, r3, #3
 8008e74:	b25b      	sxtb	r3, r3
 8008e76:	4313      	orrs	r3, r2
 8008e78:	b25b      	sxtb	r3, r3
 8008e7a:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8008e7c:	187b      	adds	r3, r7, r1
 8008e7e:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8008e80:	23d4      	movs	r3, #212	; 0xd4
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	2508      	movs	r5, #8
 8008e86:	195b      	adds	r3, r3, r5
 8008e88:	19db      	adds	r3, r3, r7
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	569a      	ldrsb	r2, [r3, r2]
 8008e8e:	23d6      	movs	r3, #214	; 0xd6
 8008e90:	005b      	lsls	r3, r3, #1
 8008e92:	195b      	adds	r3, r3, r5
 8008e94:	19db      	adds	r3, r3, r7
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	005b      	lsls	r3, r3, #1
 8008e9a:	b25b      	sxtb	r3, r3
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8008ea0:	23d8      	movs	r3, #216	; 0xd8
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	195b      	adds	r3, r3, r5
 8008ea6:	19db      	adds	r3, r3, r7
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	b25b      	sxtb	r3, r3
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8008eb2:	23da      	movs	r3, #218	; 0xda
 8008eb4:	005b      	lsls	r3, r3, #1
 8008eb6:	195b      	adds	r3, r3, r5
 8008eb8:	19db      	adds	r3, r3, r7
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	00db      	lsls	r3, r3, #3
 8008ebe:	b25b      	sxtb	r3, r3
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	b25b      	sxtb	r3, r3
 8008ec4:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8008ec6:	187b      	adds	r3, r7, r1
 8008ec8:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8008eca:	0008      	movs	r0, r1
 8008ecc:	187b      	adds	r3, r7, r1
 8008ece:	22c4      	movs	r2, #196	; 0xc4
 8008ed0:	2103      	movs	r1, #3
 8008ed2:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008ed4:	002b      	movs	r3, r5
 8008ed6:	18fa      	adds	r2, r7, r3
 8008ed8:	183b      	adds	r3, r7, r0
 8008eda:	0011      	movs	r1, r2
 8008edc:	0018      	movs	r0, r3
 8008ede:	f001 f9e9 	bl	800a2b4 <astronode_transport_send_receive>
 8008ee2:	0003      	movs	r3, r0
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d10f      	bne.n	8008f08 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8008ee8:	4b0e      	ldr	r3, [pc, #56]	; (8008f24 <astronode_send_cfg_wr+0x14c>)
 8008eea:	191b      	adds	r3, r3, r4
 8008eec:	19db      	adds	r3, r3, r7
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	2b85      	cmp	r3, #133	; 0x85
 8008ef2:	d105      	bne.n	8008f00 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8008ef4:	4b0c      	ldr	r3, [pc, #48]	; (8008f28 <astronode_send_cfg_wr+0x150>)
 8008ef6:	0018      	movs	r0, r3
 8008ef8:	f7fa f8fc 	bl	80030f4 <send_debug_logs>
            return true ;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e004      	b.n	8008f0a <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8008f00:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <astronode_send_cfg_wr+0x154>)
 8008f02:	0018      	movs	r0, r3
 8008f04:	f7fa f8f6 	bl	80030f4 <send_debug_logs>
        }
    }
    return false ;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	0018      	movs	r0, r3
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	b067      	add	sp, #412	; 0x19c
 8008f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f12:	46c0      	nop			; (mov r8, r8)
 8008f14:	fffffe6f 	.word	0xfffffe6f
 8008f18:	fffffe6e 	.word	0xfffffe6e
 8008f1c:	fffffe6d 	.word	0xfffffe6d
 8008f20:	fffffe6c 	.word	0xfffffe6c
 8008f24:	fffffe70 	.word	0xfffffe70
 8008f28:	08014528 	.word	0x08014528
 8008f2c:	08014554 	.word	0x08014554

08008f30 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8008f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f32:	b0ed      	sub	sp, #436	; 0x1b4
 8008f34:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008f36:	21c8      	movs	r1, #200	; 0xc8
 8008f38:	2318      	movs	r3, #24
 8008f3a:	18cb      	adds	r3, r1, r3
 8008f3c:	19db      	adds	r3, r3, r7
 8008f3e:	0018      	movs	r0, r3
 8008f40:	23c6      	movs	r3, #198	; 0xc6
 8008f42:	001a      	movs	r2, r3
 8008f44:	2100      	movs	r1, #0
 8008f46:	f004 fa3b 	bl	800d3c0 <memset>
    astronode_app_msg_t answer = {0};
 8008f4a:	4b4a      	ldr	r3, [pc, #296]	; (8009074 <astronode_send_mgi_rr+0x144>)
 8008f4c:	26cc      	movs	r6, #204	; 0xcc
 8008f4e:	0076      	lsls	r6, r6, #1
 8008f50:	199b      	adds	r3, r3, r6
 8008f52:	2218      	movs	r2, #24
 8008f54:	4694      	mov	ip, r2
 8008f56:	44bc      	add	ip, r7
 8008f58:	4463      	add	r3, ip
 8008f5a:	0018      	movs	r0, r3
 8008f5c:	23c6      	movs	r3, #198	; 0xc6
 8008f5e:	001a      	movs	r2, r3
 8008f60:	2100      	movs	r1, #0
 8008f62:	f004 fa2d 	bl	800d3c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8008f66:	21c8      	movs	r1, #200	; 0xc8
 8008f68:	2318      	movs	r3, #24
 8008f6a:	18cb      	adds	r3, r1, r3
 8008f6c:	19db      	adds	r3, r3, r7
 8008f6e:	2219      	movs	r2, #25
 8008f70:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008f72:	2318      	movs	r3, #24
 8008f74:	18fa      	adds	r2, r7, r3
 8008f76:	2318      	movs	r3, #24
 8008f78:	18cb      	adds	r3, r1, r3
 8008f7a:	19db      	adds	r3, r3, r7
 8008f7c:	0011      	movs	r1, r2
 8008f7e:	0018      	movs	r0, r3
 8008f80:	f001 f998 	bl	800a2b4 <astronode_transport_send_receive>
 8008f84:	0003      	movs	r3, r0
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d16f      	bne.n	800906a <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8008f8a:	4b3a      	ldr	r3, [pc, #232]	; (8009074 <astronode_send_mgi_rr+0x144>)
 8008f8c:	0032      	movs	r2, r6
 8008f8e:	189b      	adds	r3, r3, r2
 8008f90:	2118      	movs	r1, #24
 8008f92:	468c      	mov	ip, r1
 8008f94:	44bc      	add	ip, r7
 8008f96:	4463      	add	r3, ip
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	2b99      	cmp	r3, #153	; 0x99
 8008f9c:	d161      	bne.n	8009062 <astronode_send_mgi_rr+0x132>
        {
 8008f9e:	466b      	mov	r3, sp
 8008fa0:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8008fa2:	4b34      	ldr	r3, [pc, #208]	; (8009074 <astronode_send_mgi_rr+0x144>)
 8008fa4:	189b      	adds	r3, r3, r2
 8008fa6:	2218      	movs	r2, #24
 8008fa8:	4694      	mov	ip, r2
 8008faa:	44bc      	add	ip, r7
 8008fac:	4463      	add	r3, ip
 8008fae:	22c4      	movs	r2, #196	; 0xc4
 8008fb0:	5a9b      	ldrh	r3, [r3, r2]
 8008fb2:	001a      	movs	r2, r3
 8008fb4:	3a01      	subs	r2, #1
 8008fb6:	21ca      	movs	r1, #202	; 0xca
 8008fb8:	0049      	lsls	r1, r1, #1
 8008fba:	2018      	movs	r0, #24
 8008fbc:	1809      	adds	r1, r1, r0
 8008fbe:	19c9      	adds	r1, r1, r7
 8008fc0:	600a      	str	r2, [r1, #0]
 8008fc2:	001c      	movs	r4, r3
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	0015      	movs	r5, r2
 8008fc8:	0020      	movs	r0, r4
 8008fca:	0029      	movs	r1, r5
 8008fcc:	0004      	movs	r4, r0
 8008fce:	0f62      	lsrs	r2, r4, #29
 8008fd0:	000c      	movs	r4, r1
 8008fd2:	00e4      	lsls	r4, r4, #3
 8008fd4:	617c      	str	r4, [r7, #20]
 8008fd6:	697c      	ldr	r4, [r7, #20]
 8008fd8:	4314      	orrs	r4, r2
 8008fda:	617c      	str	r4, [r7, #20]
 8008fdc:	0001      	movs	r1, r0
 8008fde:	00c9      	lsls	r1, r1, #3
 8008fe0:	6139      	str	r1, [r7, #16]
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	6838      	ldr	r0, [r7, #0]
 8008fea:	6879      	ldr	r1, [r7, #4]
 8008fec:	0004      	movs	r4, r0
 8008fee:	0f62      	lsrs	r2, r4, #29
 8008ff0:	000c      	movs	r4, r1
 8008ff2:	00e4      	lsls	r4, r4, #3
 8008ff4:	60fc      	str	r4, [r7, #12]
 8008ff6:	68fc      	ldr	r4, [r7, #12]
 8008ff8:	4314      	orrs	r4, r2
 8008ffa:	60fc      	str	r4, [r7, #12]
 8008ffc:	0001      	movs	r1, r0
 8008ffe:	00ca      	lsls	r2, r1, #3
 8009000:	60ba      	str	r2, [r7, #8]
 8009002:	3307      	adds	r3, #7
 8009004:	08db      	lsrs	r3, r3, #3
 8009006:	00db      	lsls	r3, r3, #3
 8009008:	4669      	mov	r1, sp
 800900a:	1acb      	subs	r3, r1, r3
 800900c:	469d      	mov	sp, r3
 800900e:	466b      	mov	r3, sp
 8009010:	3300      	adds	r3, #0
 8009012:	24c8      	movs	r4, #200	; 0xc8
 8009014:	0064      	lsls	r4, r4, #1
 8009016:	2218      	movs	r2, #24
 8009018:	18a2      	adds	r2, r4, r2
 800901a:	19d1      	adds	r1, r2, r7
 800901c:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 800901e:	4b16      	ldr	r3, [pc, #88]	; (8009078 <astronode_send_mgi_rr+0x148>)
 8009020:	0018      	movs	r0, r3
 8009022:	f7fa f867 	bl	80030f4 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8009026:	4b13      	ldr	r3, [pc, #76]	; (8009074 <astronode_send_mgi_rr+0x144>)
 8009028:	22cc      	movs	r2, #204	; 0xcc
 800902a:	0052      	lsls	r2, r2, #1
 800902c:	189b      	adds	r3, r3, r2
 800902e:	2218      	movs	r2, #24
 8009030:	4694      	mov	ip, r2
 8009032:	44bc      	add	ip, r7
 8009034:	4463      	add	r3, ip
 8009036:	22c4      	movs	r2, #196	; 0xc4
 8009038:	5a9b      	ldrh	r3, [r3, r2]
 800903a:	0019      	movs	r1, r3
 800903c:	2318      	movs	r3, #24
 800903e:	18fb      	adds	r3, r7, r3
 8009040:	3301      	adds	r3, #1
 8009042:	4a0e      	ldr	r2, [pc, #56]	; (800907c <astronode_send_mgi_rr+0x14c>)
 8009044:	2018      	movs	r0, #24
 8009046:	1820      	adds	r0, r4, r0
 8009048:	19c0      	adds	r0, r0, r7
 800904a:	6800      	ldr	r0, [r0, #0]
 800904c:	f004 f8ee 	bl	800d22c <snprintf>
            send_debug_logs(guid);
 8009050:	2318      	movs	r3, #24
 8009052:	18e3      	adds	r3, r4, r3
 8009054:	19db      	adds	r3, r3, r7
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	0018      	movs	r0, r3
 800905a:	f7fa f84b 	bl	80030f4 <send_debug_logs>
 800905e:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8009060:	e003      	b.n	800906a <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8009062:	4b07      	ldr	r3, [pc, #28]	; (8009080 <astronode_send_mgi_rr+0x150>)
 8009064:	0018      	movs	r0, r3
 8009066:	f7fa f845 	bl	80030f4 <send_debug_logs>
}
 800906a:	46c0      	nop			; (mov r8, r8)
 800906c:	46bd      	mov	sp, r7
 800906e:	b06d      	add	sp, #436	; 0x1b4
 8009070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009072:	46c0      	nop			; (mov r8, r8)
 8009074:	fffffe68 	.word	0xfffffe68
 8009078:	080145e0 	.word	0x080145e0
 800907c:	080145f0 	.word	0x080145f0
 8009080:	080145f4 	.word	0x080145f4

08009084 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8009084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009086:	b0ed      	sub	sp, #436	; 0x1b4
 8009088:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800908a:	21c8      	movs	r1, #200	; 0xc8
 800908c:	2318      	movs	r3, #24
 800908e:	18cb      	adds	r3, r1, r3
 8009090:	19db      	adds	r3, r3, r7
 8009092:	0018      	movs	r0, r3
 8009094:	23c6      	movs	r3, #198	; 0xc6
 8009096:	001a      	movs	r2, r3
 8009098:	2100      	movs	r1, #0
 800909a:	f004 f991 	bl	800d3c0 <memset>
    astronode_app_msg_t answer = {0};
 800909e:	4b4a      	ldr	r3, [pc, #296]	; (80091c8 <astronode_send_msn_rr+0x144>)
 80090a0:	26cc      	movs	r6, #204	; 0xcc
 80090a2:	0076      	lsls	r6, r6, #1
 80090a4:	199b      	adds	r3, r3, r6
 80090a6:	2218      	movs	r2, #24
 80090a8:	4694      	mov	ip, r2
 80090aa:	44bc      	add	ip, r7
 80090ac:	4463      	add	r3, ip
 80090ae:	0018      	movs	r0, r3
 80090b0:	23c6      	movs	r3, #198	; 0xc6
 80090b2:	001a      	movs	r2, r3
 80090b4:	2100      	movs	r1, #0
 80090b6:	f004 f983 	bl	800d3c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 80090ba:	21c8      	movs	r1, #200	; 0xc8
 80090bc:	2318      	movs	r3, #24
 80090be:	18cb      	adds	r3, r1, r3
 80090c0:	19db      	adds	r3, r3, r7
 80090c2:	221a      	movs	r2, #26
 80090c4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80090c6:	2318      	movs	r3, #24
 80090c8:	18fa      	adds	r2, r7, r3
 80090ca:	2318      	movs	r3, #24
 80090cc:	18cb      	adds	r3, r1, r3
 80090ce:	19db      	adds	r3, r3, r7
 80090d0:	0011      	movs	r1, r2
 80090d2:	0018      	movs	r0, r3
 80090d4:	f001 f8ee 	bl	800a2b4 <astronode_transport_send_receive>
 80090d8:	0003      	movs	r3, r0
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d16f      	bne.n	80091be <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 80090de:	4b3a      	ldr	r3, [pc, #232]	; (80091c8 <astronode_send_msn_rr+0x144>)
 80090e0:	0032      	movs	r2, r6
 80090e2:	189b      	adds	r3, r3, r2
 80090e4:	2118      	movs	r1, #24
 80090e6:	468c      	mov	ip, r1
 80090e8:	44bc      	add	ip, r7
 80090ea:	4463      	add	r3, ip
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	2b9a      	cmp	r3, #154	; 0x9a
 80090f0:	d161      	bne.n	80091b6 <astronode_send_msn_rr+0x132>
        {
 80090f2:	466b      	mov	r3, sp
 80090f4:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 80090f6:	4b34      	ldr	r3, [pc, #208]	; (80091c8 <astronode_send_msn_rr+0x144>)
 80090f8:	189b      	adds	r3, r3, r2
 80090fa:	2218      	movs	r2, #24
 80090fc:	4694      	mov	ip, r2
 80090fe:	44bc      	add	ip, r7
 8009100:	4463      	add	r3, ip
 8009102:	22c4      	movs	r2, #196	; 0xc4
 8009104:	5a9b      	ldrh	r3, [r3, r2]
 8009106:	001a      	movs	r2, r3
 8009108:	3a01      	subs	r2, #1
 800910a:	21ca      	movs	r1, #202	; 0xca
 800910c:	0049      	lsls	r1, r1, #1
 800910e:	2018      	movs	r0, #24
 8009110:	1809      	adds	r1, r1, r0
 8009112:	19c9      	adds	r1, r1, r7
 8009114:	600a      	str	r2, [r1, #0]
 8009116:	001c      	movs	r4, r3
 8009118:	2200      	movs	r2, #0
 800911a:	0015      	movs	r5, r2
 800911c:	0020      	movs	r0, r4
 800911e:	0029      	movs	r1, r5
 8009120:	0004      	movs	r4, r0
 8009122:	0f62      	lsrs	r2, r4, #29
 8009124:	000c      	movs	r4, r1
 8009126:	00e4      	lsls	r4, r4, #3
 8009128:	617c      	str	r4, [r7, #20]
 800912a:	697c      	ldr	r4, [r7, #20]
 800912c:	4314      	orrs	r4, r2
 800912e:	617c      	str	r4, [r7, #20]
 8009130:	0001      	movs	r1, r0
 8009132:	00c9      	lsls	r1, r1, #3
 8009134:	6139      	str	r1, [r7, #16]
 8009136:	603b      	str	r3, [r7, #0]
 8009138:	2200      	movs	r2, #0
 800913a:	607a      	str	r2, [r7, #4]
 800913c:	6838      	ldr	r0, [r7, #0]
 800913e:	6879      	ldr	r1, [r7, #4]
 8009140:	0004      	movs	r4, r0
 8009142:	0f62      	lsrs	r2, r4, #29
 8009144:	000c      	movs	r4, r1
 8009146:	00e4      	lsls	r4, r4, #3
 8009148:	60fc      	str	r4, [r7, #12]
 800914a:	68fc      	ldr	r4, [r7, #12]
 800914c:	4314      	orrs	r4, r2
 800914e:	60fc      	str	r4, [r7, #12]
 8009150:	0001      	movs	r1, r0
 8009152:	00ca      	lsls	r2, r1, #3
 8009154:	60ba      	str	r2, [r7, #8]
 8009156:	3307      	adds	r3, #7
 8009158:	08db      	lsrs	r3, r3, #3
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	4669      	mov	r1, sp
 800915e:	1acb      	subs	r3, r1, r3
 8009160:	469d      	mov	sp, r3
 8009162:	466b      	mov	r3, sp
 8009164:	3300      	adds	r3, #0
 8009166:	24c8      	movs	r4, #200	; 0xc8
 8009168:	0064      	lsls	r4, r4, #1
 800916a:	2218      	movs	r2, #24
 800916c:	18a2      	adds	r2, r4, r2
 800916e:	19d1      	adds	r1, r2, r7
 8009170:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8009172:	4b16      	ldr	r3, [pc, #88]	; (80091cc <astronode_send_msn_rr+0x148>)
 8009174:	0018      	movs	r0, r3
 8009176:	f7f9 ffbd 	bl	80030f4 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 800917a:	4b13      	ldr	r3, [pc, #76]	; (80091c8 <astronode_send_msn_rr+0x144>)
 800917c:	22cc      	movs	r2, #204	; 0xcc
 800917e:	0052      	lsls	r2, r2, #1
 8009180:	189b      	adds	r3, r3, r2
 8009182:	2218      	movs	r2, #24
 8009184:	4694      	mov	ip, r2
 8009186:	44bc      	add	ip, r7
 8009188:	4463      	add	r3, ip
 800918a:	22c4      	movs	r2, #196	; 0xc4
 800918c:	5a9b      	ldrh	r3, [r3, r2]
 800918e:	0019      	movs	r1, r3
 8009190:	2318      	movs	r3, #24
 8009192:	18fb      	adds	r3, r7, r3
 8009194:	3301      	adds	r3, #1
 8009196:	4a0e      	ldr	r2, [pc, #56]	; (80091d0 <astronode_send_msn_rr+0x14c>)
 8009198:	2018      	movs	r0, #24
 800919a:	1820      	adds	r0, r4, r0
 800919c:	19c0      	adds	r0, r0, r7
 800919e:	6800      	ldr	r0, [r0, #0]
 80091a0:	f004 f844 	bl	800d22c <snprintf>
            send_debug_logs(serial_number);
 80091a4:	2318      	movs	r3, #24
 80091a6:	18e3      	adds	r3, r4, r3
 80091a8:	19db      	adds	r3, r3, r7
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	0018      	movs	r0, r3
 80091ae:	f7f9 ffa1 	bl	80030f4 <send_debug_logs>
 80091b2:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80091b4:	e003      	b.n	80091be <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80091b6:	4b07      	ldr	r3, [pc, #28]	; (80091d4 <astronode_send_msn_rr+0x150>)
 80091b8:	0018      	movs	r0, r3
 80091ba:	f7f9 ff9b 	bl	80030f4 <send_debug_logs>
}
 80091be:	46c0      	nop			; (mov r8, r8)
 80091c0:	46bd      	mov	sp, r7
 80091c2:	b06d      	add	sp, #436	; 0x1b4
 80091c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091c6:	46c0      	nop			; (mov r8, r8)
 80091c8:	fffffe68 	.word	0xfffffe68
 80091cc:	08014610 	.word	0x08014610
 80091d0:	080145f0 	.word	0x080145f0
 80091d4:	0801462c 	.word	0x0801462c

080091d8 <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 80091d8:	b5b0      	push	{r4, r5, r7, lr}
 80091da:	b0e4      	sub	sp, #400	; 0x190
 80091dc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80091de:	24c8      	movs	r4, #200	; 0xc8
 80091e0:	193b      	adds	r3, r7, r4
 80091e2:	0018      	movs	r0, r3
 80091e4:	23c6      	movs	r3, #198	; 0xc6
 80091e6:	001a      	movs	r2, r3
 80091e8:	2100      	movs	r1, #0
 80091ea:	f004 f8e9 	bl	800d3c0 <memset>
    astronode_app_msg_t answer = {0};
 80091ee:	4b31      	ldr	r3, [pc, #196]	; (80092b4 <astronode_send_evt_rr+0xdc>)
 80091f0:	25c8      	movs	r5, #200	; 0xc8
 80091f2:	006d      	lsls	r5, r5, #1
 80091f4:	195b      	adds	r3, r3, r5
 80091f6:	19db      	adds	r3, r3, r7
 80091f8:	0018      	movs	r0, r3
 80091fa:	23c6      	movs	r3, #198	; 0xc6
 80091fc:	001a      	movs	r2, r3
 80091fe:	2100      	movs	r1, #0
 8009200:	f004 f8de 	bl	800d3c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8009204:	193b      	adds	r3, r7, r4
 8009206:	2265      	movs	r2, #101	; 0x65
 8009208:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800920a:	003a      	movs	r2, r7
 800920c:	193b      	adds	r3, r7, r4
 800920e:	0011      	movs	r1, r2
 8009210:	0018      	movs	r0, r3
 8009212:	f001 f84f 	bl	800a2b4 <astronode_transport_send_receive>
 8009216:	0003      	movs	r3, r0
 8009218:	2b01      	cmp	r3, #1
 800921a:	d147      	bne.n	80092ac <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 800921c:	4b25      	ldr	r3, [pc, #148]	; (80092b4 <astronode_send_evt_rr+0xdc>)
 800921e:	195b      	adds	r3, r3, r5
 8009220:	19db      	adds	r3, r3, r7
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	2be5      	cmp	r3, #229	; 0xe5
 8009226:	d141      	bne.n	80092ac <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8009228:	4b22      	ldr	r3, [pc, #136]	; (80092b4 <astronode_send_evt_rr+0xdc>)
 800922a:	195b      	adds	r3, r3, r5
 800922c:	19db      	adds	r3, r3, r7
 800922e:	785b      	ldrb	r3, [r3, #1]
 8009230:	001a      	movs	r2, r3
 8009232:	2301      	movs	r3, #1
 8009234:	4013      	ands	r3, r2
 8009236:	d006      	beq.n	8009246 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8009238:	4b1f      	ldr	r3, [pc, #124]	; (80092b8 <astronode_send_evt_rr+0xe0>)
 800923a:	2201      	movs	r2, #1
 800923c:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 800923e:	4b1f      	ldr	r3, [pc, #124]	; (80092bc <astronode_send_evt_rr+0xe4>)
 8009240:	0018      	movs	r0, r3
 8009242:	f7f9 ff57 	bl	80030f4 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8009246:	4b1b      	ldr	r3, [pc, #108]	; (80092b4 <astronode_send_evt_rr+0xdc>)
 8009248:	22c8      	movs	r2, #200	; 0xc8
 800924a:	0052      	lsls	r2, r2, #1
 800924c:	189b      	adds	r3, r3, r2
 800924e:	19db      	adds	r3, r3, r7
 8009250:	785b      	ldrb	r3, [r3, #1]
 8009252:	001a      	movs	r2, r3
 8009254:	2302      	movs	r3, #2
 8009256:	4013      	ands	r3, r2
 8009258:	d006      	beq.n	8009268 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 800925a:	4b19      	ldr	r3, [pc, #100]	; (80092c0 <astronode_send_evt_rr+0xe8>)
 800925c:	2201      	movs	r2, #1
 800925e:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8009260:	4b18      	ldr	r3, [pc, #96]	; (80092c4 <astronode_send_evt_rr+0xec>)
 8009262:	0018      	movs	r0, r3
 8009264:	f7f9 ff46 	bl	80030f4 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8009268:	4b12      	ldr	r3, [pc, #72]	; (80092b4 <astronode_send_evt_rr+0xdc>)
 800926a:	22c8      	movs	r2, #200	; 0xc8
 800926c:	0052      	lsls	r2, r2, #1
 800926e:	189b      	adds	r3, r3, r2
 8009270:	19db      	adds	r3, r3, r7
 8009272:	785b      	ldrb	r3, [r3, #1]
 8009274:	001a      	movs	r2, r3
 8009276:	2304      	movs	r3, #4
 8009278:	4013      	ands	r3, r2
 800927a:	d006      	beq.n	800928a <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 800927c:	4b12      	ldr	r3, [pc, #72]	; (80092c8 <astronode_send_evt_rr+0xf0>)
 800927e:	2201      	movs	r2, #1
 8009280:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8009282:	4b12      	ldr	r3, [pc, #72]	; (80092cc <astronode_send_evt_rr+0xf4>)
 8009284:	0018      	movs	r0, r3
 8009286:	f7f9 ff35 	bl	80030f4 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 800928a:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <astronode_send_evt_rr+0xdc>)
 800928c:	22c8      	movs	r2, #200	; 0xc8
 800928e:	0052      	lsls	r2, r2, #1
 8009290:	189b      	adds	r3, r3, r2
 8009292:	19db      	adds	r3, r3, r7
 8009294:	785b      	ldrb	r3, [r3, #1]
 8009296:	001a      	movs	r2, r3
 8009298:	2308      	movs	r3, #8
 800929a:	4013      	ands	r3, r2
 800929c:	d006      	beq.n	80092ac <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 800929e:	4b0c      	ldr	r3, [pc, #48]	; (80092d0 <astronode_send_evt_rr+0xf8>)
 80092a0:	2201      	movs	r2, #1
 80092a2:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 80092a4:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <astronode_send_evt_rr+0xfc>)
 80092a6:	0018      	movs	r0, r3
 80092a8:	f7f9 ff24 	bl	80030f4 <send_debug_logs>
            }

        }
    }
}
 80092ac:	46c0      	nop			; (mov r8, r8)
 80092ae:	46bd      	mov	sp, r7
 80092b0:	b064      	add	sp, #400	; 0x190
 80092b2:	bdb0      	pop	{r4, r5, r7, pc}
 80092b4:	fffffe70 	.word	0xfffffe70
 80092b8:	20000b0c 	.word	0x20000b0c
 80092bc:	080146d4 	.word	0x080146d4
 80092c0:	20000b0d 	.word	0x20000b0d
 80092c4:	080146f8 	.word	0x080146f8
 80092c8:	20000b0e 	.word	0x20000b0e
 80092cc:	08014710 	.word	0x08014710
 80092d0:	20000b0f 	.word	0x20000b0f
 80092d4:	08014724 	.word	0x08014724

080092d8 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 80092d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092da:	b0e7      	sub	sp, #412	; 0x19c
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 80092e2:	24d0      	movs	r4, #208	; 0xd0
 80092e4:	193b      	adds	r3, r7, r4
 80092e6:	0018      	movs	r0, r3
 80092e8:	23c6      	movs	r3, #198	; 0xc6
 80092ea:	001a      	movs	r2, r3
 80092ec:	2100      	movs	r1, #0
 80092ee:	f004 f867 	bl	800d3c0 <memset>
    astronode_app_msg_t answer = {0};
 80092f2:	4b56      	ldr	r3, [pc, #344]	; (800944c <astronode_send_geo_wr+0x174>)
 80092f4:	26cc      	movs	r6, #204	; 0xcc
 80092f6:	0076      	lsls	r6, r6, #1
 80092f8:	199b      	adds	r3, r3, r6
 80092fa:	19db      	adds	r3, r3, r7
 80092fc:	0018      	movs	r0, r3
 80092fe:	23c6      	movs	r3, #198	; 0xc6
 8009300:	001a      	movs	r2, r3
 8009302:	2100      	movs	r1, #0
 8009304:	f004 f85c 	bl	800d3c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 8009308:	193b      	adds	r3, r7, r4
 800930a:	2235      	movs	r2, #53	; 0x35
 800930c:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 800930e:	193b      	adds	r3, r7, r4
 8009310:	22c4      	movs	r2, #196	; 0xc4
 8009312:	5a9b      	ldrh	r3, [r3, r2]
 8009314:	1c5a      	adds	r2, r3, #1
 8009316:	b290      	uxth	r0, r2
 8009318:	193a      	adds	r2, r7, r4
 800931a:	21c4      	movs	r1, #196	; 0xc4
 800931c:	5250      	strh	r0, [r2, r1]
 800931e:	0019      	movs	r1, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	b2da      	uxtb	r2, r3
 8009324:	193b      	adds	r3, r7, r4
 8009326:	185b      	adds	r3, r3, r1
 8009328:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	1218      	asrs	r0, r3, #8
 800932e:	0025      	movs	r5, r4
 8009330:	197b      	adds	r3, r7, r5
 8009332:	22c4      	movs	r2, #196	; 0xc4
 8009334:	5a9b      	ldrh	r3, [r3, r2]
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	b294      	uxth	r4, r2
 800933a:	197a      	adds	r2, r7, r5
 800933c:	21c4      	movs	r1, #196	; 0xc4
 800933e:	5254      	strh	r4, [r2, r1]
 8009340:	0019      	movs	r1, r3
 8009342:	b2c2      	uxtb	r2, r0
 8009344:	002c      	movs	r4, r5
 8009346:	193b      	adds	r3, r7, r4
 8009348:	185b      	adds	r3, r3, r1
 800934a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	1418      	asrs	r0, r3, #16
 8009350:	0025      	movs	r5, r4
 8009352:	197b      	adds	r3, r7, r5
 8009354:	22c4      	movs	r2, #196	; 0xc4
 8009356:	5a9b      	ldrh	r3, [r3, r2]
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	b294      	uxth	r4, r2
 800935c:	197a      	adds	r2, r7, r5
 800935e:	21c4      	movs	r1, #196	; 0xc4
 8009360:	5254      	strh	r4, [r2, r1]
 8009362:	0019      	movs	r1, r3
 8009364:	b2c2      	uxtb	r2, r0
 8009366:	002c      	movs	r4, r5
 8009368:	193b      	adds	r3, r7, r4
 800936a:	185b      	adds	r3, r3, r1
 800936c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	1618      	asrs	r0, r3, #24
 8009372:	0025      	movs	r5, r4
 8009374:	197b      	adds	r3, r7, r5
 8009376:	22c4      	movs	r2, #196	; 0xc4
 8009378:	5a9b      	ldrh	r3, [r3, r2]
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	b294      	uxth	r4, r2
 800937e:	197a      	adds	r2, r7, r5
 8009380:	21c4      	movs	r1, #196	; 0xc4
 8009382:	5254      	strh	r4, [r2, r1]
 8009384:	0019      	movs	r1, r3
 8009386:	b2c2      	uxtb	r2, r0
 8009388:	002c      	movs	r4, r5
 800938a:	193b      	adds	r3, r7, r4
 800938c:	185b      	adds	r3, r3, r1
 800938e:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8009390:	193b      	adds	r3, r7, r4
 8009392:	22c4      	movs	r2, #196	; 0xc4
 8009394:	5a9b      	ldrh	r3, [r3, r2]
 8009396:	1c5a      	adds	r2, r3, #1
 8009398:	b290      	uxth	r0, r2
 800939a:	193a      	adds	r2, r7, r4
 800939c:	21c4      	movs	r1, #196	; 0xc4
 800939e:	5250      	strh	r0, [r2, r1]
 80093a0:	0019      	movs	r1, r3
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	193b      	adds	r3, r7, r4
 80093a8:	185b      	adds	r3, r3, r1
 80093aa:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	1218      	asrs	r0, r3, #8
 80093b0:	0025      	movs	r5, r4
 80093b2:	197b      	adds	r3, r7, r5
 80093b4:	22c4      	movs	r2, #196	; 0xc4
 80093b6:	5a9b      	ldrh	r3, [r3, r2]
 80093b8:	1c5a      	adds	r2, r3, #1
 80093ba:	b294      	uxth	r4, r2
 80093bc:	197a      	adds	r2, r7, r5
 80093be:	21c4      	movs	r1, #196	; 0xc4
 80093c0:	5254      	strh	r4, [r2, r1]
 80093c2:	0019      	movs	r1, r3
 80093c4:	b2c2      	uxtb	r2, r0
 80093c6:	002c      	movs	r4, r5
 80093c8:	193b      	adds	r3, r7, r4
 80093ca:	185b      	adds	r3, r3, r1
 80093cc:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	1418      	asrs	r0, r3, #16
 80093d2:	0025      	movs	r5, r4
 80093d4:	197b      	adds	r3, r7, r5
 80093d6:	22c4      	movs	r2, #196	; 0xc4
 80093d8:	5a9b      	ldrh	r3, [r3, r2]
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	b294      	uxth	r4, r2
 80093de:	197a      	adds	r2, r7, r5
 80093e0:	21c4      	movs	r1, #196	; 0xc4
 80093e2:	5254      	strh	r4, [r2, r1]
 80093e4:	0019      	movs	r1, r3
 80093e6:	b2c2      	uxtb	r2, r0
 80093e8:	002c      	movs	r4, r5
 80093ea:	193b      	adds	r3, r7, r4
 80093ec:	185b      	adds	r3, r3, r1
 80093ee:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	1618      	asrs	r0, r3, #24
 80093f4:	0025      	movs	r5, r4
 80093f6:	197b      	adds	r3, r7, r5
 80093f8:	22c4      	movs	r2, #196	; 0xc4
 80093fa:	5a9b      	ldrh	r3, [r3, r2]
 80093fc:	1c5a      	adds	r2, r3, #1
 80093fe:	b294      	uxth	r4, r2
 8009400:	197a      	adds	r2, r7, r5
 8009402:	21c4      	movs	r1, #196	; 0xc4
 8009404:	5254      	strh	r4, [r2, r1]
 8009406:	0019      	movs	r1, r3
 8009408:	b2c2      	uxtb	r2, r0
 800940a:	0028      	movs	r0, r5
 800940c:	183b      	adds	r3, r7, r0
 800940e:	185b      	adds	r3, r3, r1
 8009410:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009412:	2308      	movs	r3, #8
 8009414:	18fa      	adds	r2, r7, r3
 8009416:	183b      	adds	r3, r7, r0
 8009418:	0011      	movs	r1, r2
 800941a:	0018      	movs	r0, r3
 800941c:	f000 ff4a 	bl	800a2b4 <astronode_transport_send_receive>
 8009420:	0003      	movs	r3, r0
 8009422:	2b01      	cmp	r3, #1
 8009424:	d10e      	bne.n	8009444 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 8009426:	4b09      	ldr	r3, [pc, #36]	; (800944c <astronode_send_geo_wr+0x174>)
 8009428:	199b      	adds	r3, r3, r6
 800942a:	19db      	adds	r3, r3, r7
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	2bb5      	cmp	r3, #181	; 0xb5
 8009430:	d104      	bne.n	800943c <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 8009432:	4b07      	ldr	r3, [pc, #28]	; (8009450 <astronode_send_geo_wr+0x178>)
 8009434:	0018      	movs	r0, r3
 8009436:	f7f9 fe5d 	bl	80030f4 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 800943a:	e003      	b.n	8009444 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 800943c:	4b05      	ldr	r3, [pc, #20]	; (8009454 <astronode_send_geo_wr+0x17c>)
 800943e:	0018      	movs	r0, r3
 8009440:	f7f9 fe58 	bl	80030f4 <send_debug_logs>
}
 8009444:	46c0      	nop			; (mov r8, r8)
 8009446:	46bd      	mov	sp, r7
 8009448:	b067      	add	sp, #412	; 0x19c
 800944a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800944c:	fffffe70 	.word	0xfffffe70
 8009450:	08014738 	.word	0x08014738
 8009454:	08014764 	.word	0x08014764

08009458 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 8009458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800945a:	b0fd      	sub	sp, #500	; 0x1f4
 800945c:	af02      	add	r7, sp, #8
 800945e:	6039      	str	r1, [r7, #0]
 8009460:	0011      	movs	r1, r2
 8009462:	4b4c      	ldr	r3, [pc, #304]	; (8009594 <astronode_send_pld_er+0x13c>)
 8009464:	26f4      	movs	r6, #244	; 0xf4
 8009466:	0076      	lsls	r6, r6, #1
 8009468:	199b      	adds	r3, r3, r6
 800946a:	19db      	adds	r3, r3, r7
 800946c:	1c02      	adds	r2, r0, #0
 800946e:	801a      	strh	r2, [r3, #0]
 8009470:	4b49      	ldr	r3, [pc, #292]	; (8009598 <astronode_send_pld_er+0x140>)
 8009472:	199b      	adds	r3, r3, r6
 8009474:	19db      	adds	r3, r3, r7
 8009476:	1c0a      	adds	r2, r1, #0
 8009478:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 800947a:	2490      	movs	r4, #144	; 0x90
 800947c:	0064      	lsls	r4, r4, #1
 800947e:	193b      	adds	r3, r7, r4
 8009480:	0018      	movs	r0, r3
 8009482:	23c6      	movs	r3, #198	; 0xc6
 8009484:	001a      	movs	r2, r3
 8009486:	2100      	movs	r1, #0
 8009488:	f003 ff9a 	bl	800d3c0 <memset>
    astronode_app_msg_t answer = {0};
 800948c:	4b43      	ldr	r3, [pc, #268]	; (800959c <astronode_send_pld_er+0x144>)
 800948e:	199b      	adds	r3, r3, r6
 8009490:	19db      	adds	r3, r3, r7
 8009492:	0018      	movs	r0, r3
 8009494:	23c6      	movs	r3, #198	; 0xc6
 8009496:	001a      	movs	r2, r3
 8009498:	2100      	movs	r1, #0
 800949a:	f003 ff91 	bl	800d3c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 800949e:	193b      	adds	r3, r7, r4
 80094a0:	2225      	movs	r2, #37	; 0x25
 80094a2:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 80094a4:	193b      	adds	r3, r7, r4
 80094a6:	22c4      	movs	r2, #196	; 0xc4
 80094a8:	5a9b      	ldrh	r3, [r3, r2]
 80094aa:	1c5a      	adds	r2, r3, #1
 80094ac:	b290      	uxth	r0, r2
 80094ae:	193a      	adds	r2, r7, r4
 80094b0:	21c4      	movs	r1, #196	; 0xc4
 80094b2:	5250      	strh	r0, [r2, r1]
 80094b4:	0019      	movs	r1, r3
 80094b6:	4b37      	ldr	r3, [pc, #220]	; (8009594 <astronode_send_pld_er+0x13c>)
 80094b8:	199b      	adds	r3, r3, r6
 80094ba:	19db      	adds	r3, r3, r7
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	193b      	adds	r3, r7, r4
 80094c2:	185b      	adds	r3, r3, r1
 80094c4:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 80094c6:	4b33      	ldr	r3, [pc, #204]	; (8009594 <astronode_send_pld_er+0x13c>)
 80094c8:	199b      	adds	r3, r3, r6
 80094ca:	19db      	adds	r3, r3, r7
 80094cc:	881b      	ldrh	r3, [r3, #0]
 80094ce:	0a1b      	lsrs	r3, r3, #8
 80094d0:	b298      	uxth	r0, r3
 80094d2:	0025      	movs	r5, r4
 80094d4:	197b      	adds	r3, r7, r5
 80094d6:	22c4      	movs	r2, #196	; 0xc4
 80094d8:	5a9b      	ldrh	r3, [r3, r2]
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	b294      	uxth	r4, r2
 80094de:	197a      	adds	r2, r7, r5
 80094e0:	21c4      	movs	r1, #196	; 0xc4
 80094e2:	5254      	strh	r4, [r2, r1]
 80094e4:	0019      	movs	r1, r3
 80094e6:	b2c2      	uxtb	r2, r0
 80094e8:	002c      	movs	r4, r5
 80094ea:	193b      	adds	r3, r7, r4
 80094ec:	185b      	adds	r3, r3, r1
 80094ee:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 80094f0:	193b      	adds	r3, r7, r4
 80094f2:	22c4      	movs	r2, #196	; 0xc4
 80094f4:	5a9b      	ldrh	r3, [r3, r2]
 80094f6:	001a      	movs	r2, r3
 80094f8:	193b      	adds	r3, r7, r4
 80094fa:	189b      	adds	r3, r3, r2
 80094fc:	1c58      	adds	r0, r3, #1
 80094fe:	4b26      	ldr	r3, [pc, #152]	; (8009598 <astronode_send_pld_er+0x140>)
 8009500:	199b      	adds	r3, r3, r6
 8009502:	19db      	adds	r3, r3, r7
 8009504:	881a      	ldrh	r2, [r3, #0]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	0019      	movs	r1, r3
 800950a:	f004 f886 	bl	800d61a <memcpy>
    request.payload_len = 2 + payload_length;
 800950e:	4b22      	ldr	r3, [pc, #136]	; (8009598 <astronode_send_pld_er+0x140>)
 8009510:	199b      	adds	r3, r3, r6
 8009512:	19db      	adds	r3, r3, r7
 8009514:	881b      	ldrh	r3, [r3, #0]
 8009516:	3302      	adds	r3, #2
 8009518:	b299      	uxth	r1, r3
 800951a:	193b      	adds	r3, r7, r4
 800951c:	22c4      	movs	r2, #196	; 0xc4
 800951e:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8009520:	2358      	movs	r3, #88	; 0x58
 8009522:	18fa      	adds	r2, r7, r3
 8009524:	193b      	adds	r3, r7, r4
 8009526:	0011      	movs	r1, r2
 8009528:	0018      	movs	r0, r3
 800952a:	f000 fec3 	bl	800a2b4 <astronode_transport_send_receive>
 800952e:	0003      	movs	r3, r0
 8009530:	2b01      	cmp	r3, #1
 8009532:	d12a      	bne.n	800958a <astronode_send_pld_er+0x132>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8009534:	4b19      	ldr	r3, [pc, #100]	; (800959c <astronode_send_pld_er+0x144>)
 8009536:	199b      	adds	r3, r3, r6
 8009538:	19db      	adds	r3, r3, r7
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	2ba5      	cmp	r3, #165	; 0xa5
 800953e:	d114      	bne.n	800956a <astronode_send_pld_er+0x112>
        {
        	sprintf ( s , "%s,%d,payload_id:%d queued." , __FILE__ , __LINE__ , payload_id ) ;
 8009540:	4b14      	ldr	r3, [pc, #80]	; (8009594 <astronode_send_pld_er+0x13c>)
 8009542:	199b      	adds	r3, r3, r6
 8009544:	19db      	adds	r3, r3, r7
 8009546:	881b      	ldrh	r3, [r3, #0]
 8009548:	22ea      	movs	r2, #234	; 0xea
 800954a:	32ff      	adds	r2, #255	; 0xff
 800954c:	0014      	movs	r4, r2
 800954e:	4a14      	ldr	r2, [pc, #80]	; (80095a0 <astronode_send_pld_er+0x148>)
 8009550:	4914      	ldr	r1, [pc, #80]	; (80095a4 <astronode_send_pld_er+0x14c>)
 8009552:	2508      	movs	r5, #8
 8009554:	1978      	adds	r0, r7, r5
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	0023      	movs	r3, r4
 800955a:	f003 fe9b 	bl	800d294 <sprintf>
            send_debug_logs ( s ) ;
 800955e:	197b      	adds	r3, r7, r5
 8009560:	0018      	movs	r0, r3
 8009562:	f7f9 fdc7 	bl	80030f4 <send_debug_logs>
            return true ;
 8009566:	2301      	movs	r3, #1
 8009568:	e010      	b.n	800958c <astronode_send_pld_er+0x134>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 800956a:	4b0a      	ldr	r3, [pc, #40]	; (8009594 <astronode_send_pld_er+0x13c>)
 800956c:	22f4      	movs	r2, #244	; 0xf4
 800956e:	0052      	lsls	r2, r2, #1
 8009570:	189b      	adds	r3, r3, r2
 8009572:	19db      	adds	r3, r3, r7
 8009574:	881a      	ldrh	r2, [r3, #0]
 8009576:	490c      	ldr	r1, [pc, #48]	; (80095a8 <astronode_send_pld_er+0x150>)
 8009578:	2408      	movs	r4, #8
 800957a:	193b      	adds	r3, r7, r4
 800957c:	0018      	movs	r0, r3
 800957e:	f003 fe89 	bl	800d294 <sprintf>
            send_debug_logs ( s ) ;
 8009582:	193b      	adds	r3, r7, r4
 8009584:	0018      	movs	r0, r3
 8009586:	f7f9 fdb5 	bl	80030f4 <send_debug_logs>
        }
    }
    return false ;
 800958a:	2300      	movs	r3, #0
}
 800958c:	0018      	movs	r0, r3
 800958e:	46bd      	mov	sp, r7
 8009590:	b07b      	add	sp, #492	; 0x1ec
 8009592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009594:	fffffe1e 	.word	0xfffffe1e
 8009598:	fffffe1c 	.word	0xfffffe1c
 800959c:	fffffe70 	.word	0xfffffe70
 80095a0:	080147dc 	.word	0x080147dc
 80095a4:	08014808 	.word	0x08014808
 80095a8:	08014824 	.word	0x08014824

080095ac <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 80095ac:	b5b0      	push	{r4, r5, r7, lr}
 80095ae:	b0e4      	sub	sp, #400	; 0x190
 80095b0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80095b2:	24c8      	movs	r4, #200	; 0xc8
 80095b4:	193b      	adds	r3, r7, r4
 80095b6:	0018      	movs	r0, r3
 80095b8:	23c6      	movs	r3, #198	; 0xc6
 80095ba:	001a      	movs	r2, r3
 80095bc:	2100      	movs	r1, #0
 80095be:	f003 feff 	bl	800d3c0 <memset>
    astronode_app_msg_t answer = {0};
 80095c2:	4b15      	ldr	r3, [pc, #84]	; (8009618 <astronode_send_pld_fr+0x6c>)
 80095c4:	25c8      	movs	r5, #200	; 0xc8
 80095c6:	006d      	lsls	r5, r5, #1
 80095c8:	195b      	adds	r3, r3, r5
 80095ca:	19db      	adds	r3, r3, r7
 80095cc:	0018      	movs	r0, r3
 80095ce:	23c6      	movs	r3, #198	; 0xc6
 80095d0:	001a      	movs	r2, r3
 80095d2:	2100      	movs	r1, #0
 80095d4:	f003 fef4 	bl	800d3c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 80095d8:	193b      	adds	r3, r7, r4
 80095da:	2227      	movs	r2, #39	; 0x27
 80095dc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80095de:	003a      	movs	r2, r7
 80095e0:	193b      	adds	r3, r7, r4
 80095e2:	0011      	movs	r1, r2
 80095e4:	0018      	movs	r0, r3
 80095e6:	f000 fe65 	bl	800a2b4 <astronode_transport_send_receive>
 80095ea:	0003      	movs	r3, r0
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d10e      	bne.n	800960e <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 80095f0:	4b09      	ldr	r3, [pc, #36]	; (8009618 <astronode_send_pld_fr+0x6c>)
 80095f2:	195b      	adds	r3, r3, r5
 80095f4:	19db      	adds	r3, r3, r7
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	2ba7      	cmp	r3, #167	; 0xa7
 80095fa:	d104      	bne.n	8009606 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 80095fc:	4b07      	ldr	r3, [pc, #28]	; (800961c <astronode_send_pld_fr+0x70>)
 80095fe:	0018      	movs	r0, r3
 8009600:	f7f9 fd78 	bl	80030f4 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8009604:	e003      	b.n	800960e <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 8009606:	4b06      	ldr	r3, [pc, #24]	; (8009620 <astronode_send_pld_fr+0x74>)
 8009608:	0018      	movs	r0, r3
 800960a:	f7f9 fd73 	bl	80030f4 <send_debug_logs>
}
 800960e:	46c0      	nop			; (mov r8, r8)
 8009610:	46bd      	mov	sp, r7
 8009612:	b064      	add	sp, #400	; 0x190
 8009614:	bdb0      	pop	{r4, r5, r7, pc}
 8009616:	46c0      	nop			; (mov r8, r8)
 8009618:	fffffe70 	.word	0xfffffe70
 800961c:	08014854 	.word	0x08014854
 8009620:	0801488c 	.word	0x0801488c

08009624 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8009624:	b5b0      	push	{r4, r5, r7, lr}
 8009626:	b0e4      	sub	sp, #400	; 0x190
 8009628:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800962a:	24c8      	movs	r4, #200	; 0xc8
 800962c:	193b      	adds	r3, r7, r4
 800962e:	0018      	movs	r0, r3
 8009630:	23c6      	movs	r3, #198	; 0xc6
 8009632:	001a      	movs	r2, r3
 8009634:	2100      	movs	r1, #0
 8009636:	f003 fec3 	bl	800d3c0 <memset>
    astronode_app_msg_t answer = {0};
 800963a:	4b16      	ldr	r3, [pc, #88]	; (8009694 <astronode_send_res_cr+0x70>)
 800963c:	25c8      	movs	r5, #200	; 0xc8
 800963e:	006d      	lsls	r5, r5, #1
 8009640:	195b      	adds	r3, r3, r5
 8009642:	19db      	adds	r3, r3, r7
 8009644:	0018      	movs	r0, r3
 8009646:	23c6      	movs	r3, #198	; 0xc6
 8009648:	001a      	movs	r2, r3
 800964a:	2100      	movs	r1, #0
 800964c:	f003 feb8 	bl	800d3c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8009650:	193b      	adds	r3, r7, r4
 8009652:	2255      	movs	r2, #85	; 0x55
 8009654:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009656:	003a      	movs	r2, r7
 8009658:	193b      	adds	r3, r7, r4
 800965a:	0011      	movs	r1, r2
 800965c:	0018      	movs	r0, r3
 800965e:	f000 fe29 	bl	800a2b4 <astronode_transport_send_receive>
 8009662:	0003      	movs	r3, r0
 8009664:	2b01      	cmp	r3, #1
 8009666:	d111      	bne.n	800968c <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8009668:	4b0a      	ldr	r3, [pc, #40]	; (8009694 <astronode_send_res_cr+0x70>)
 800966a:	195b      	adds	r3, r3, r5
 800966c:	19db      	adds	r3, r3, r7
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	2bd5      	cmp	r3, #213	; 0xd5
 8009672:	d107      	bne.n	8009684 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8009674:	4b08      	ldr	r3, [pc, #32]	; (8009698 <astronode_send_res_cr+0x74>)
 8009676:	2200      	movs	r2, #0
 8009678:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 800967a:	4b08      	ldr	r3, [pc, #32]	; (800969c <astronode_send_res_cr+0x78>)
 800967c:	0018      	movs	r0, r3
 800967e:	f7f9 fd39 	bl	80030f4 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8009682:	e003      	b.n	800968c <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8009684:	4b06      	ldr	r3, [pc, #24]	; (80096a0 <astronode_send_res_cr+0x7c>)
 8009686:	0018      	movs	r0, r3
 8009688:	f7f9 fd34 	bl	80030f4 <send_debug_logs>
}
 800968c:	46c0      	nop			; (mov r8, r8)
 800968e:	46bd      	mov	sp, r7
 8009690:	b064      	add	sp, #400	; 0x190
 8009692:	bdb0      	pop	{r4, r5, r7, pc}
 8009694:	fffffe70 	.word	0xfffffe70
 8009698:	20000b0d 	.word	0x20000b0d
 800969c:	080148c8 	.word	0x080148c8
 80096a0:	080148fc 	.word	0x080148fc

080096a4 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 80096a4:	b5b0      	push	{r4, r5, r7, lr}
 80096a6:	b0fa      	sub	sp, #488	; 0x1e8
 80096a8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 80096aa:	258e      	movs	r5, #142	; 0x8e
 80096ac:	006d      	lsls	r5, r5, #1
 80096ae:	197b      	adds	r3, r7, r5
 80096b0:	0018      	movs	r0, r3
 80096b2:	23c6      	movs	r3, #198	; 0xc6
 80096b4:	001a      	movs	r2, r3
 80096b6:	2100      	movs	r1, #0
 80096b8:	f003 fe82 	bl	800d3c0 <memset>
    astronode_app_msg_t answer = {0} ;
 80096bc:	4b28      	ldr	r3, [pc, #160]	; (8009760 <astronode_send_rtc_rr+0xbc>)
 80096be:	24f4      	movs	r4, #244	; 0xf4
 80096c0:	0064      	lsls	r4, r4, #1
 80096c2:	191b      	adds	r3, r3, r4
 80096c4:	19db      	adds	r3, r3, r7
 80096c6:	0018      	movs	r0, r3
 80096c8:	23c6      	movs	r3, #198	; 0xc6
 80096ca:	001a      	movs	r2, r3
 80096cc:	2100      	movs	r1, #0
 80096ce:	f003 fe77 	bl	800d3c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 80096d2:	197b      	adds	r3, r7, r5
 80096d4:	2217      	movs	r2, #23
 80096d6:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80096d8:	2354      	movs	r3, #84	; 0x54
 80096da:	18fa      	adds	r2, r7, r3
 80096dc:	197b      	adds	r3, r7, r5
 80096de:	0011      	movs	r1, r2
 80096e0:	0018      	movs	r0, r3
 80096e2:	f000 fde7 	bl	800a2b4 <astronode_transport_send_receive>
 80096e6:	0003      	movs	r3, r0
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d133      	bne.n	8009754 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 80096ec:	4b1c      	ldr	r3, [pc, #112]	; (8009760 <astronode_send_rtc_rr+0xbc>)
 80096ee:	0021      	movs	r1, r4
 80096f0:	185b      	adds	r3, r3, r1
 80096f2:	19db      	adds	r3, r3, r7
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	2b97      	cmp	r3, #151	; 0x97
 80096f8:	d128      	bne.n	800974c <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 80096fa:	4b19      	ldr	r3, [pc, #100]	; (8009760 <astronode_send_rtc_rr+0xbc>)
 80096fc:	185b      	adds	r3, r3, r1
 80096fe:	19db      	adds	r3, r3, r7
 8009700:	785b      	ldrb	r3, [r3, #1]
 8009702:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8009704:	4b16      	ldr	r3, [pc, #88]	; (8009760 <astronode_send_rtc_rr+0xbc>)
 8009706:	185b      	adds	r3, r3, r1
 8009708:	19db      	adds	r3, r3, r7
 800970a:	789b      	ldrb	r3, [r3, #2]
 800970c:	021b      	lsls	r3, r3, #8
 800970e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8009710:	4b13      	ldr	r3, [pc, #76]	; (8009760 <astronode_send_rtc_rr+0xbc>)
 8009712:	185b      	adds	r3, r3, r1
 8009714:	19db      	adds	r3, r3, r7
 8009716:	78db      	ldrb	r3, [r3, #3]
 8009718:	041b      	lsls	r3, r3, #16
 800971a:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 800971c:	4b10      	ldr	r3, [pc, #64]	; (8009760 <astronode_send_rtc_rr+0xbc>)
 800971e:	185b      	adds	r3, r3, r1
 8009720:	19db      	adds	r3, r3, r7
 8009722:	791b      	ldrb	r3, [r3, #4]
 8009724:	061b      	lsls	r3, r3, #24
 8009726:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8009728:	24f2      	movs	r4, #242	; 0xf2
 800972a:	0064      	lsls	r4, r4, #1
 800972c:	193a      	adds	r2, r7, r4
 800972e:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8009730:	193b      	adds	r3, r7, r4
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	490b      	ldr	r1, [pc, #44]	; (8009764 <astronode_send_rtc_rr+0xc0>)
 8009736:	1d3b      	adds	r3, r7, #4
 8009738:	0018      	movs	r0, r3
 800973a:	f003 fdab 	bl	800d294 <sprintf>
            send_debug_logs ( str ) ;
 800973e:	1d3b      	adds	r3, r7, #4
 8009740:	0018      	movs	r0, r3
 8009742:	f7f9 fcd7 	bl	80030f4 <send_debug_logs>
            return rtc_time ;
 8009746:	193b      	adds	r3, r7, r4
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	e004      	b.n	8009756 <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 800974c:	4b06      	ldr	r3, [pc, #24]	; (8009768 <astronode_send_rtc_rr+0xc4>)
 800974e:	0018      	movs	r0, r3
 8009750:	f7f9 fcd0 	bl	80030f4 <send_debug_logs>
        }
    }
    return 0 ;
 8009754:	2300      	movs	r3, #0
}
 8009756:	0018      	movs	r0, r3
 8009758:	46bd      	mov	sp, r7
 800975a:	b07a      	add	sp, #488	; 0x1e8
 800975c:	bdb0      	pop	{r4, r5, r7, pc}
 800975e:	46c0      	nop			; (mov r8, r8)
 8009760:	fffffe6c 	.word	0xfffffe6c
 8009764:	08014928 	.word	0x08014928
 8009768:	08014968 	.word	0x08014968

0800976c <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 800976c:	b5b0      	push	{r4, r5, r7, lr}
 800976e:	b0f8      	sub	sp, #480	; 0x1e0
 8009770:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8009772:	258c      	movs	r5, #140	; 0x8c
 8009774:	006d      	lsls	r5, r5, #1
 8009776:	197b      	adds	r3, r7, r5
 8009778:	0018      	movs	r0, r3
 800977a:	23c6      	movs	r3, #198	; 0xc6
 800977c:	001a      	movs	r2, r3
 800977e:	2100      	movs	r1, #0
 8009780:	f003 fe1e 	bl	800d3c0 <memset>
    astronode_app_msg_t answer = {0};
 8009784:	4b21      	ldr	r3, [pc, #132]	; (800980c <astronode_send_sak_rr+0xa0>)
 8009786:	24f0      	movs	r4, #240	; 0xf0
 8009788:	0064      	lsls	r4, r4, #1
 800978a:	191b      	adds	r3, r3, r4
 800978c:	19db      	adds	r3, r3, r7
 800978e:	0018      	movs	r0, r3
 8009790:	23c6      	movs	r3, #198	; 0xc6
 8009792:	001a      	movs	r2, r3
 8009794:	2100      	movs	r1, #0
 8009796:	f003 fe13 	bl	800d3c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 800979a:	197b      	adds	r3, r7, r5
 800979c:	2245      	movs	r2, #69	; 0x45
 800979e:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80097a0:	2350      	movs	r3, #80	; 0x50
 80097a2:	18fa      	adds	r2, r7, r3
 80097a4:	197b      	adds	r3, r7, r5
 80097a6:	0011      	movs	r1, r2
 80097a8:	0018      	movs	r0, r3
 80097aa:	f000 fd83 	bl	800a2b4 <astronode_transport_send_receive>
 80097ae:	0003      	movs	r3, r0
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d126      	bne.n	8009802 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80097b4:	4b15      	ldr	r3, [pc, #84]	; (800980c <astronode_send_sak_rr+0xa0>)
 80097b6:	191b      	adds	r3, r3, r4
 80097b8:	19db      	adds	r3, r3, r7
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2bc5      	cmp	r3, #197	; 0xc5
 80097be:	d11c      	bne.n	80097fa <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 80097c0:	4b12      	ldr	r3, [pc, #72]	; (800980c <astronode_send_sak_rr+0xa0>)
 80097c2:	191b      	adds	r3, r3, r4
 80097c4:	19db      	adds	r3, r3, r7
 80097c6:	785b      	ldrb	r3, [r3, #1]
 80097c8:	b299      	uxth	r1, r3
 80097ca:	4b10      	ldr	r3, [pc, #64]	; (800980c <astronode_send_sak_rr+0xa0>)
 80097cc:	191b      	adds	r3, r3, r4
 80097ce:	19db      	adds	r3, r3, r7
 80097d0:	789b      	ldrb	r3, [r3, #2]
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	021b      	lsls	r3, r3, #8
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	20ef      	movs	r0, #239	; 0xef
 80097da:	0040      	lsls	r0, r0, #1
 80097dc:	183b      	adds	r3, r7, r0
 80097de:	188a      	adds	r2, r1, r2
 80097e0:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 80097e2:	183b      	adds	r3, r7, r0
 80097e4:	881a      	ldrh	r2, [r3, #0]
 80097e6:	490a      	ldr	r1, [pc, #40]	; (8009810 <astronode_send_sak_rr+0xa4>)
 80097e8:	003b      	movs	r3, r7
 80097ea:	0018      	movs	r0, r3
 80097ec:	f003 fd52 	bl	800d294 <sprintf>
            send_debug_logs(str);
 80097f0:	003b      	movs	r3, r7
 80097f2:	0018      	movs	r0, r3
 80097f4:	f7f9 fc7e 	bl	80030f4 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 80097f8:	e003      	b.n	8009802 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 80097fa:	4b06      	ldr	r3, [pc, #24]	; (8009814 <astronode_send_sak_rr+0xa8>)
 80097fc:	0018      	movs	r0, r3
 80097fe:	f7f9 fc79 	bl	80030f4 <send_debug_logs>
}
 8009802:	46c0      	nop			; (mov r8, r8)
 8009804:	46bd      	mov	sp, r7
 8009806:	b078      	add	sp, #480	; 0x1e0
 8009808:	bdb0      	pop	{r4, r5, r7, pc}
 800980a:	46c0      	nop			; (mov r8, r8)
 800980c:	fffffe70 	.word	0xfffffe70
 8009810:	08014984 	.word	0x08014984
 8009814:	080149b0 	.word	0x080149b0

08009818 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8009818:	b5b0      	push	{r4, r5, r7, lr}
 800981a:	b0e4      	sub	sp, #400	; 0x190
 800981c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800981e:	24c8      	movs	r4, #200	; 0xc8
 8009820:	193b      	adds	r3, r7, r4
 8009822:	0018      	movs	r0, r3
 8009824:	23c6      	movs	r3, #198	; 0xc6
 8009826:	001a      	movs	r2, r3
 8009828:	2100      	movs	r1, #0
 800982a:	f003 fdc9 	bl	800d3c0 <memset>
    astronode_app_msg_t answer = {0};
 800982e:	4b16      	ldr	r3, [pc, #88]	; (8009888 <astronode_send_sak_cr+0x70>)
 8009830:	25c8      	movs	r5, #200	; 0xc8
 8009832:	006d      	lsls	r5, r5, #1
 8009834:	195b      	adds	r3, r3, r5
 8009836:	19db      	adds	r3, r3, r7
 8009838:	0018      	movs	r0, r3
 800983a:	23c6      	movs	r3, #198	; 0xc6
 800983c:	001a      	movs	r2, r3
 800983e:	2100      	movs	r1, #0
 8009840:	f003 fdbe 	bl	800d3c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8009844:	193b      	adds	r3, r7, r4
 8009846:	2246      	movs	r2, #70	; 0x46
 8009848:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800984a:	003a      	movs	r2, r7
 800984c:	193b      	adds	r3, r7, r4
 800984e:	0011      	movs	r1, r2
 8009850:	0018      	movs	r0, r3
 8009852:	f000 fd2f 	bl	800a2b4 <astronode_transport_send_receive>
 8009856:	0003      	movs	r3, r0
 8009858:	2b01      	cmp	r3, #1
 800985a:	d111      	bne.n	8009880 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 800985c:	4b0a      	ldr	r3, [pc, #40]	; (8009888 <astronode_send_sak_cr+0x70>)
 800985e:	195b      	adds	r3, r3, r5
 8009860:	19db      	adds	r3, r3, r7
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	2bc6      	cmp	r3, #198	; 0xc6
 8009866:	d107      	bne.n	8009878 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8009868:	4b08      	ldr	r3, [pc, #32]	; (800988c <astronode_send_sak_cr+0x74>)
 800986a:	2200      	movs	r2, #0
 800986c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 800986e:	4b08      	ldr	r3, [pc, #32]	; (8009890 <astronode_send_sak_cr+0x78>)
 8009870:	0018      	movs	r0, r3
 8009872:	f7f9 fc3f 	bl	80030f4 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8009876:	e003      	b.n	8009880 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8009878:	4b06      	ldr	r3, [pc, #24]	; (8009894 <astronode_send_sak_cr+0x7c>)
 800987a:	0018      	movs	r0, r3
 800987c:	f7f9 fc3a 	bl	80030f4 <send_debug_logs>
}
 8009880:	46c0      	nop			; (mov r8, r8)
 8009882:	46bd      	mov	sp, r7
 8009884:	b064      	add	sp, #400	; 0x190
 8009886:	bdb0      	pop	{r4, r5, r7, pc}
 8009888:	fffffe70 	.word	0xfffffe70
 800988c:	20000b0c 	.word	0x20000b0c
 8009890:	080149e4 	.word	0x080149e4
 8009894:	08014a0c 	.word	0x08014a0c

08009898 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8009898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800989a:	b0ed      	sub	sp, #436	; 0x1b4
 800989c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800989e:	21c8      	movs	r1, #200	; 0xc8
 80098a0:	2318      	movs	r3, #24
 80098a2:	18cb      	adds	r3, r1, r3
 80098a4:	19db      	adds	r3, r3, r7
 80098a6:	0018      	movs	r0, r3
 80098a8:	23c6      	movs	r3, #198	; 0xc6
 80098aa:	001a      	movs	r2, r3
 80098ac:	2100      	movs	r1, #0
 80098ae:	f003 fd87 	bl	800d3c0 <memset>
    astronode_app_msg_t answer = {0};
 80098b2:	4b4a      	ldr	r3, [pc, #296]	; (80099dc <astronode_send_mpn_rr+0x144>)
 80098b4:	26cc      	movs	r6, #204	; 0xcc
 80098b6:	0076      	lsls	r6, r6, #1
 80098b8:	199b      	adds	r3, r3, r6
 80098ba:	2218      	movs	r2, #24
 80098bc:	4694      	mov	ip, r2
 80098be:	44bc      	add	ip, r7
 80098c0:	4463      	add	r3, ip
 80098c2:	0018      	movs	r0, r3
 80098c4:	23c6      	movs	r3, #198	; 0xc6
 80098c6:	001a      	movs	r2, r3
 80098c8:	2100      	movs	r1, #0
 80098ca:	f003 fd79 	bl	800d3c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 80098ce:	21c8      	movs	r1, #200	; 0xc8
 80098d0:	2318      	movs	r3, #24
 80098d2:	18cb      	adds	r3, r1, r3
 80098d4:	19db      	adds	r3, r3, r7
 80098d6:	221b      	movs	r2, #27
 80098d8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80098da:	2318      	movs	r3, #24
 80098dc:	18fa      	adds	r2, r7, r3
 80098de:	2318      	movs	r3, #24
 80098e0:	18cb      	adds	r3, r1, r3
 80098e2:	19db      	adds	r3, r3, r7
 80098e4:	0011      	movs	r1, r2
 80098e6:	0018      	movs	r0, r3
 80098e8:	f000 fce4 	bl	800a2b4 <astronode_transport_send_receive>
 80098ec:	0003      	movs	r3, r0
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d16f      	bne.n	80099d2 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 80098f2:	4b3a      	ldr	r3, [pc, #232]	; (80099dc <astronode_send_mpn_rr+0x144>)
 80098f4:	0032      	movs	r2, r6
 80098f6:	189b      	adds	r3, r3, r2
 80098f8:	2118      	movs	r1, #24
 80098fa:	468c      	mov	ip, r1
 80098fc:	44bc      	add	ip, r7
 80098fe:	4463      	add	r3, ip
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	2b9b      	cmp	r3, #155	; 0x9b
 8009904:	d161      	bne.n	80099ca <astronode_send_mpn_rr+0x132>
        {
 8009906:	466b      	mov	r3, sp
 8009908:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 800990a:	4b34      	ldr	r3, [pc, #208]	; (80099dc <astronode_send_mpn_rr+0x144>)
 800990c:	189b      	adds	r3, r3, r2
 800990e:	2218      	movs	r2, #24
 8009910:	4694      	mov	ip, r2
 8009912:	44bc      	add	ip, r7
 8009914:	4463      	add	r3, ip
 8009916:	22c4      	movs	r2, #196	; 0xc4
 8009918:	5a9b      	ldrh	r3, [r3, r2]
 800991a:	001a      	movs	r2, r3
 800991c:	3a01      	subs	r2, #1
 800991e:	21ca      	movs	r1, #202	; 0xca
 8009920:	0049      	lsls	r1, r1, #1
 8009922:	2018      	movs	r0, #24
 8009924:	1809      	adds	r1, r1, r0
 8009926:	19c9      	adds	r1, r1, r7
 8009928:	600a      	str	r2, [r1, #0]
 800992a:	001c      	movs	r4, r3
 800992c:	2200      	movs	r2, #0
 800992e:	0015      	movs	r5, r2
 8009930:	0020      	movs	r0, r4
 8009932:	0029      	movs	r1, r5
 8009934:	0004      	movs	r4, r0
 8009936:	0f62      	lsrs	r2, r4, #29
 8009938:	000c      	movs	r4, r1
 800993a:	00e4      	lsls	r4, r4, #3
 800993c:	617c      	str	r4, [r7, #20]
 800993e:	697c      	ldr	r4, [r7, #20]
 8009940:	4314      	orrs	r4, r2
 8009942:	617c      	str	r4, [r7, #20]
 8009944:	0001      	movs	r1, r0
 8009946:	00c9      	lsls	r1, r1, #3
 8009948:	6139      	str	r1, [r7, #16]
 800994a:	603b      	str	r3, [r7, #0]
 800994c:	2200      	movs	r2, #0
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	6838      	ldr	r0, [r7, #0]
 8009952:	6879      	ldr	r1, [r7, #4]
 8009954:	0004      	movs	r4, r0
 8009956:	0f62      	lsrs	r2, r4, #29
 8009958:	000c      	movs	r4, r1
 800995a:	00e4      	lsls	r4, r4, #3
 800995c:	60fc      	str	r4, [r7, #12]
 800995e:	68fc      	ldr	r4, [r7, #12]
 8009960:	4314      	orrs	r4, r2
 8009962:	60fc      	str	r4, [r7, #12]
 8009964:	0001      	movs	r1, r0
 8009966:	00ca      	lsls	r2, r1, #3
 8009968:	60ba      	str	r2, [r7, #8]
 800996a:	3307      	adds	r3, #7
 800996c:	08db      	lsrs	r3, r3, #3
 800996e:	00db      	lsls	r3, r3, #3
 8009970:	4669      	mov	r1, sp
 8009972:	1acb      	subs	r3, r1, r3
 8009974:	469d      	mov	sp, r3
 8009976:	466b      	mov	r3, sp
 8009978:	3300      	adds	r3, #0
 800997a:	24c8      	movs	r4, #200	; 0xc8
 800997c:	0064      	lsls	r4, r4, #1
 800997e:	2218      	movs	r2, #24
 8009980:	18a2      	adds	r2, r4, r2
 8009982:	19d1      	adds	r1, r2, r7
 8009984:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8009986:	4b16      	ldr	r3, [pc, #88]	; (80099e0 <astronode_send_mpn_rr+0x148>)
 8009988:	0018      	movs	r0, r3
 800998a:	f7f9 fbb3 	bl	80030f4 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 800998e:	4b13      	ldr	r3, [pc, #76]	; (80099dc <astronode_send_mpn_rr+0x144>)
 8009990:	22cc      	movs	r2, #204	; 0xcc
 8009992:	0052      	lsls	r2, r2, #1
 8009994:	189b      	adds	r3, r3, r2
 8009996:	2218      	movs	r2, #24
 8009998:	4694      	mov	ip, r2
 800999a:	44bc      	add	ip, r7
 800999c:	4463      	add	r3, ip
 800999e:	22c4      	movs	r2, #196	; 0xc4
 80099a0:	5a9b      	ldrh	r3, [r3, r2]
 80099a2:	0019      	movs	r1, r3
 80099a4:	2318      	movs	r3, #24
 80099a6:	18fb      	adds	r3, r7, r3
 80099a8:	3301      	adds	r3, #1
 80099aa:	4a0e      	ldr	r2, [pc, #56]	; (80099e4 <astronode_send_mpn_rr+0x14c>)
 80099ac:	2018      	movs	r0, #24
 80099ae:	1820      	adds	r0, r4, r0
 80099b0:	19c0      	adds	r0, r0, r7
 80099b2:	6800      	ldr	r0, [r0, #0]
 80099b4:	f003 fc3a 	bl	800d22c <snprintf>
            send_debug_logs(product_number);
 80099b8:	2318      	movs	r3, #24
 80099ba:	18e3      	adds	r3, r4, r3
 80099bc:	19db      	adds	r3, r3, r7
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	0018      	movs	r0, r3
 80099c2:	f7f9 fb97 	bl	80030f4 <send_debug_logs>
 80099c6:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80099c8:	e003      	b.n	80099d2 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80099ca:	4b07      	ldr	r3, [pc, #28]	; (80099e8 <astronode_send_mpn_rr+0x150>)
 80099cc:	0018      	movs	r0, r3
 80099ce:	f7f9 fb91 	bl	80030f4 <send_debug_logs>
}
 80099d2:	46c0      	nop			; (mov r8, r8)
 80099d4:	46bd      	mov	sp, r7
 80099d6:	b06d      	add	sp, #436	; 0x1b4
 80099d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099da:	46c0      	nop			; (mov r8, r8)
 80099dc:	fffffe68 	.word	0xfffffe68
 80099e0:	08014ad4 	.word	0x08014ad4
 80099e4:	080145f0 	.word	0x080145f0
 80099e8:	0801462c 	.word	0x0801462c

080099ec <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 80099ec:	b5b0      	push	{r4, r5, r7, lr}
 80099ee:	b0e4      	sub	sp, #400	; 0x190
 80099f0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80099f2:	24c8      	movs	r4, #200	; 0xc8
 80099f4:	193b      	adds	r3, r7, r4
 80099f6:	0018      	movs	r0, r3
 80099f8:	23c6      	movs	r3, #198	; 0xc6
 80099fa:	001a      	movs	r2, r3
 80099fc:	2100      	movs	r1, #0
 80099fe:	f003 fcdf 	bl	800d3c0 <memset>
    astronode_app_msg_t answer = {0};
 8009a02:	4b16      	ldr	r3, [pc, #88]	; (8009a5c <astronode_send_cmd_cr+0x70>)
 8009a04:	25c8      	movs	r5, #200	; 0xc8
 8009a06:	006d      	lsls	r5, r5, #1
 8009a08:	195b      	adds	r3, r3, r5
 8009a0a:	19db      	adds	r3, r3, r7
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	23c6      	movs	r3, #198	; 0xc6
 8009a10:	001a      	movs	r2, r3
 8009a12:	2100      	movs	r1, #0
 8009a14:	f003 fcd4 	bl	800d3c0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8009a18:	193b      	adds	r3, r7, r4
 8009a1a:	2248      	movs	r2, #72	; 0x48
 8009a1c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009a1e:	003a      	movs	r2, r7
 8009a20:	193b      	adds	r3, r7, r4
 8009a22:	0011      	movs	r1, r2
 8009a24:	0018      	movs	r0, r3
 8009a26:	f000 fc45 	bl	800a2b4 <astronode_transport_send_receive>
 8009a2a:	0003      	movs	r3, r0
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d111      	bne.n	8009a54 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8009a30:	4b0a      	ldr	r3, [pc, #40]	; (8009a5c <astronode_send_cmd_cr+0x70>)
 8009a32:	195b      	adds	r3, r3, r5
 8009a34:	19db      	adds	r3, r3, r7
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	2bc8      	cmp	r3, #200	; 0xc8
 8009a3a:	d107      	bne.n	8009a4c <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8009a3c:	4b08      	ldr	r3, [pc, #32]	; (8009a60 <astronode_send_cmd_cr+0x74>)
 8009a3e:	2200      	movs	r2, #0
 8009a40:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8009a42:	4b08      	ldr	r3, [pc, #32]	; (8009a64 <astronode_send_cmd_cr+0x78>)
 8009a44:	0018      	movs	r0, r3
 8009a46:	f7f9 fb55 	bl	80030f4 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8009a4a:	e003      	b.n	8009a54 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8009a4c:	4b06      	ldr	r3, [pc, #24]	; (8009a68 <astronode_send_cmd_cr+0x7c>)
 8009a4e:	0018      	movs	r0, r3
 8009a50:	f7f9 fb50 	bl	80030f4 <send_debug_logs>
}
 8009a54:	46c0      	nop			; (mov r8, r8)
 8009a56:	46bd      	mov	sp, r7
 8009a58:	b064      	add	sp, #400	; 0x190
 8009a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8009a5c:	fffffe70 	.word	0xfffffe70
 8009a60:	20000b0e 	.word	0x20000b0e
 8009a64:	08014f24 	.word	0x08014f24
 8009a68:	08014f48 	.word	0x08014f48

08009a6c <astronode_send_cmd_rr>:

bool astronode_send_cmd_rr ( char* my_astro_rcv_cmd )
{
 8009a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a6e:	4cc6      	ldr	r4, [pc, #792]	; (8009d88 <astronode_send_cmd_rr+0x31c>)
 8009a70:	44a5      	add	sp, r4
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	61f8      	str	r0, [r7, #28]
    astronode_app_msg_t request = {0};
 8009a76:	2190      	movs	r1, #144	; 0x90
 8009a78:	0049      	lsls	r1, r1, #1
 8009a7a:	2318      	movs	r3, #24
 8009a7c:	18cb      	adds	r3, r1, r3
 8009a7e:	19db      	adds	r3, r3, r7
 8009a80:	0018      	movs	r0, r3
 8009a82:	23c6      	movs	r3, #198	; 0xc6
 8009a84:	001a      	movs	r2, r3
 8009a86:	2100      	movs	r1, #0
 8009a88:	f003 fc9a 	bl	800d3c0 <memset>
    astronode_app_msg_t answer = {0};
 8009a8c:	4bbf      	ldr	r3, [pc, #764]	; (8009d8c <astronode_send_cmd_rr+0x320>)
 8009a8e:	26fc      	movs	r6, #252	; 0xfc
 8009a90:	0076      	lsls	r6, r6, #1
 8009a92:	199b      	adds	r3, r3, r6
 8009a94:	2218      	movs	r2, #24
 8009a96:	4694      	mov	ip, r2
 8009a98:	44bc      	add	ip, r7
 8009a9a:	4463      	add	r3, ip
 8009a9c:	0018      	movs	r0, r3
 8009a9e:	23c6      	movs	r3, #198	; 0xc6
 8009aa0:	001a      	movs	r2, r3
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	f003 fc8c 	bl	800d3c0 <memset>
    bool result = false ;
 8009aa8:	23f8      	movs	r3, #248	; 0xf8
 8009aaa:	33ff      	adds	r3, #255	; 0xff
 8009aac:	2218      	movs	r2, #24
 8009aae:	189b      	adds	r3, r3, r2
 8009ab0:	19db      	adds	r3, r3, r7
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	701a      	strb	r2, [r3, #0]

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8009ab6:	2190      	movs	r1, #144	; 0x90
 8009ab8:	0049      	lsls	r1, r1, #1
 8009aba:	2318      	movs	r3, #24
 8009abc:	18cb      	adds	r3, r1, r3
 8009abe:	19db      	adds	r3, r3, r7
 8009ac0:	2247      	movs	r2, #71	; 0x47
 8009ac2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009ac4:	2258      	movs	r2, #88	; 0x58
 8009ac6:	2318      	movs	r3, #24
 8009ac8:	18d3      	adds	r3, r2, r3
 8009aca:	19da      	adds	r2, r3, r7
 8009acc:	2318      	movs	r3, #24
 8009ace:	18cb      	adds	r3, r1, r3
 8009ad0:	19db      	adds	r3, r3, r7
 8009ad2:	0011      	movs	r1, r2
 8009ad4:	0018      	movs	r0, r3
 8009ad6:	f000 fbed 	bl	800a2b4 <astronode_transport_send_receive>
 8009ada:	0003      	movs	r3, r0
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d000      	beq.n	8009ae2 <astronode_send_cmd_rr+0x76>
 8009ae0:	e146      	b.n	8009d70 <astronode_send_cmd_rr+0x304>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8009ae2:	4baa      	ldr	r3, [pc, #680]	; (8009d8c <astronode_send_cmd_rr+0x320>)
 8009ae4:	199a      	adds	r2, r3, r6
 8009ae6:	2318      	movs	r3, #24
 8009ae8:	18fb      	adds	r3, r7, r3
 8009aea:	18d3      	adds	r3, r2, r3
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	2bc7      	cmp	r3, #199	; 0xc7
 8009af0:	d000      	beq.n	8009af4 <astronode_send_cmd_rr+0x88>
 8009af2:	e139      	b.n	8009d68 <astronode_send_cmd_rr+0x2fc>
        {
 8009af4:	466b      	mov	r3, sp
 8009af6:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8009af8:	4ba5      	ldr	r3, [pc, #660]	; (8009d90 <astronode_send_cmd_rr+0x324>)
 8009afa:	0018      	movs	r0, r3
 8009afc:	f7f9 fafa 	bl	80030f4 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8009b00:	4ba2      	ldr	r3, [pc, #648]	; (8009d8c <astronode_send_cmd_rr+0x320>)
 8009b02:	21fc      	movs	r1, #252	; 0xfc
 8009b04:	0049      	lsls	r1, r1, #1
 8009b06:	185a      	adds	r2, r3, r1
 8009b08:	2318      	movs	r3, #24
 8009b0a:	18fb      	adds	r3, r7, r3
 8009b0c:	18d3      	adds	r3, r2, r3
 8009b0e:	785b      	ldrb	r3, [r3, #1]
 8009b10:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8009b12:	4b9e      	ldr	r3, [pc, #632]	; (8009d8c <astronode_send_cmd_rr+0x320>)
 8009b14:	1858      	adds	r0, r3, r1
 8009b16:	2318      	movs	r3, #24
 8009b18:	18fb      	adds	r3, r7, r3
 8009b1a:	18c3      	adds	r3, r0, r3
 8009b1c:	789b      	ldrb	r3, [r3, #2]
 8009b1e:	021b      	lsls	r3, r3, #8
 8009b20:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8009b22:	4b9a      	ldr	r3, [pc, #616]	; (8009d8c <astronode_send_cmd_rr+0x320>)
 8009b24:	1858      	adds	r0, r3, r1
 8009b26:	2318      	movs	r3, #24
 8009b28:	18fb      	adds	r3, r7, r3
 8009b2a:	18c3      	adds	r3, r0, r3
 8009b2c:	78db      	ldrb	r3, [r3, #3]
 8009b2e:	041b      	lsls	r3, r3, #16
 8009b30:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8009b32:	4b96      	ldr	r3, [pc, #600]	; (8009d8c <astronode_send_cmd_rr+0x320>)
 8009b34:	1858      	adds	r0, r3, r1
 8009b36:	2318      	movs	r3, #24
 8009b38:	18fb      	adds	r3, r7, r3
 8009b3a:	18c3      	adds	r3, r0, r3
 8009b3c:	791b      	ldrb	r3, [r3, #4]
 8009b3e:	061b      	lsls	r3, r3, #24
 8009b40:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8009b42:	22f8      	movs	r2, #248	; 0xf8
 8009b44:	0052      	lsls	r2, r2, #1
 8009b46:	2118      	movs	r1, #24
 8009b48:	1851      	adds	r1, r2, r1
 8009b4a:	19c8      	adds	r0, r1, r7
 8009b4c:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8009b4e:	2318      	movs	r3, #24
 8009b50:	18d3      	adds	r3, r2, r3
 8009b52:	19da      	adds	r2, r3, r7
 8009b54:	6812      	ldr	r2, [r2, #0]
 8009b56:	498f      	ldr	r1, [pc, #572]	; (8009d94 <astronode_send_cmd_rr+0x328>)
 8009b58:	2008      	movs	r0, #8
 8009b5a:	2318      	movs	r3, #24
 8009b5c:	18c3      	adds	r3, r0, r3
 8009b5e:	19db      	adds	r3, r3, r7
 8009b60:	0018      	movs	r0, r3
 8009b62:	f003 fb97 	bl	800d294 <sprintf>
            send_debug_logs(str);
 8009b66:	2008      	movs	r0, #8
 8009b68:	2318      	movs	r3, #24
 8009b6a:	18c3      	adds	r3, r0, r3
 8009b6c:	19db      	adds	r3, r3, r7
 8009b6e:	0018      	movs	r0, r3
 8009b70:	f7f9 fac0 	bl	80030f4 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8009b74:	4b85      	ldr	r3, [pc, #532]	; (8009d8c <astronode_send_cmd_rr+0x320>)
 8009b76:	21fc      	movs	r1, #252	; 0xfc
 8009b78:	0049      	lsls	r1, r1, #1
 8009b7a:	185a      	adds	r2, r3, r1
 8009b7c:	2318      	movs	r3, #24
 8009b7e:	18fb      	adds	r3, r7, r3
 8009b80:	18d3      	adds	r3, r2, r3
 8009b82:	22c4      	movs	r2, #196	; 0xc4
 8009b84:	5a9b      	ldrh	r3, [r3, r2]
 8009b86:	2b2c      	cmp	r3, #44	; 0x2c
 8009b88:	d013      	beq.n	8009bb2 <astronode_send_cmd_rr+0x146>
 8009b8a:	4b80      	ldr	r3, [pc, #512]	; (8009d8c <astronode_send_cmd_rr+0x320>)
 8009b8c:	185a      	adds	r2, r3, r1
 8009b8e:	2318      	movs	r3, #24
 8009b90:	18fb      	adds	r3, r7, r3
 8009b92:	18d3      	adds	r3, r2, r3
 8009b94:	22c4      	movs	r2, #196	; 0xc4
 8009b96:	5a9b      	ldrh	r3, [r3, r2]
 8009b98:	2b0c      	cmp	r3, #12
 8009b9a:	d00a      	beq.n	8009bb2 <astronode_send_cmd_rr+0x146>
            {
                send_debug_logs("Command size error");
 8009b9c:	4b7e      	ldr	r3, [pc, #504]	; (8009d98 <astronode_send_cmd_rr+0x32c>)
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	f7f9 faa8 	bl	80030f4 <send_debug_logs>
                return result ;
 8009ba4:	23f8      	movs	r3, #248	; 0xf8
 8009ba6:	33ff      	adds	r3, #255	; 0xff
 8009ba8:	2218      	movs	r2, #24
 8009baa:	189b      	adds	r3, r3, r2
 8009bac:	19db      	adds	r3, r3, r7
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	e0d8      	b.n	8009d64 <astronode_send_cmd_rr+0x2f8>
            }

            char command_content[answer.payload_len];
 8009bb2:	4b76      	ldr	r3, [pc, #472]	; (8009d8c <astronode_send_cmd_rr+0x320>)
 8009bb4:	22fc      	movs	r2, #252	; 0xfc
 8009bb6:	0052      	lsls	r2, r2, #1
 8009bb8:	189b      	adds	r3, r3, r2
 8009bba:	2218      	movs	r2, #24
 8009bbc:	4694      	mov	ip, r2
 8009bbe:	44bc      	add	ip, r7
 8009bc0:	4463      	add	r3, ip
 8009bc2:	22c4      	movs	r2, #196	; 0xc4
 8009bc4:	5a9b      	ldrh	r3, [r3, r2]
 8009bc6:	001a      	movs	r2, r3
 8009bc8:	3a01      	subs	r2, #1
 8009bca:	21f6      	movs	r1, #246	; 0xf6
 8009bcc:	0049      	lsls	r1, r1, #1
 8009bce:	2018      	movs	r0, #24
 8009bd0:	1809      	adds	r1, r1, r0
 8009bd2:	19c9      	adds	r1, r1, r7
 8009bd4:	600a      	str	r2, [r1, #0]
 8009bd6:	001c      	movs	r4, r3
 8009bd8:	2200      	movs	r2, #0
 8009bda:	0015      	movs	r5, r2
 8009bdc:	0020      	movs	r0, r4
 8009bde:	0029      	movs	r1, r5
 8009be0:	0004      	movs	r4, r0
 8009be2:	0f62      	lsrs	r2, r4, #29
 8009be4:	000c      	movs	r4, r1
 8009be6:	00e4      	lsls	r4, r4, #3
 8009be8:	617c      	str	r4, [r7, #20]
 8009bea:	697c      	ldr	r4, [r7, #20]
 8009bec:	4314      	orrs	r4, r2
 8009bee:	617c      	str	r4, [r7, #20]
 8009bf0:	0001      	movs	r1, r0
 8009bf2:	00c9      	lsls	r1, r1, #3
 8009bf4:	6139      	str	r1, [r7, #16]
 8009bf6:	603b      	str	r3, [r7, #0]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	6838      	ldr	r0, [r7, #0]
 8009bfe:	6879      	ldr	r1, [r7, #4]
 8009c00:	0004      	movs	r4, r0
 8009c02:	0f62      	lsrs	r2, r4, #29
 8009c04:	000c      	movs	r4, r1
 8009c06:	00e4      	lsls	r4, r4, #3
 8009c08:	60fc      	str	r4, [r7, #12]
 8009c0a:	68fc      	ldr	r4, [r7, #12]
 8009c0c:	4314      	orrs	r4, r2
 8009c0e:	60fc      	str	r4, [r7, #12]
 8009c10:	0001      	movs	r1, r0
 8009c12:	00ca      	lsls	r2, r1, #3
 8009c14:	60ba      	str	r2, [r7, #8]
 8009c16:	3307      	adds	r3, #7
 8009c18:	08db      	lsrs	r3, r3, #3
 8009c1a:	00db      	lsls	r3, r3, #3
 8009c1c:	4669      	mov	r1, sp
 8009c1e:	1acb      	subs	r3, r1, r3
 8009c20:	469d      	mov	sp, r3
 8009c22:	466b      	mov	r3, sp
 8009c24:	3300      	adds	r3, #0
 8009c26:	20f4      	movs	r0, #244	; 0xf4
 8009c28:	0040      	lsls	r0, r0, #1
 8009c2a:	2218      	movs	r2, #24
 8009c2c:	1882      	adds	r2, r0, r2
 8009c2e:	19d1      	adds	r1, r2, r7
 8009c30:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8009c32:	4b56      	ldr	r3, [pc, #344]	; (8009d8c <astronode_send_cmd_rr+0x320>)
 8009c34:	22fc      	movs	r2, #252	; 0xfc
 8009c36:	0052      	lsls	r2, r2, #1
 8009c38:	189b      	adds	r3, r3, r2
 8009c3a:	2218      	movs	r2, #24
 8009c3c:	4694      	mov	ip, r2
 8009c3e:	44bc      	add	ip, r7
 8009c40:	4463      	add	r3, ip
 8009c42:	22c4      	movs	r2, #196	; 0xc4
 8009c44:	5a9b      	ldrh	r3, [r3, r2]
 8009c46:	3b03      	subs	r3, #3
 8009c48:	0019      	movs	r1, r3
 8009c4a:	2358      	movs	r3, #88	; 0x58
 8009c4c:	2218      	movs	r2, #24
 8009c4e:	189b      	adds	r3, r3, r2
 8009c50:	19db      	adds	r3, r3, r7
 8009c52:	3305      	adds	r3, #5
 8009c54:	4a51      	ldr	r2, [pc, #324]	; (8009d9c <astronode_send_cmd_rr+0x330>)
 8009c56:	2418      	movs	r4, #24
 8009c58:	1900      	adds	r0, r0, r4
 8009c5a:	19c0      	adds	r0, r0, r7
 8009c5c:	6800      	ldr	r0, [r0, #0]
 8009c5e:	f003 fae5 	bl	800d22c <snprintf>
 8009c62:	0002      	movs	r2, r0
 8009c64:	23f3      	movs	r3, #243	; 0xf3
 8009c66:	005b      	lsls	r3, r3, #1
 8009c68:	2118      	movs	r1, #24
 8009c6a:	185b      	adds	r3, r3, r1
 8009c6c:	19db      	adds	r3, r3, r7
 8009c6e:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8009c70:	23fb      	movs	r3, #251	; 0xfb
 8009c72:	005b      	lsls	r3, r3, #1
 8009c74:	2218      	movs	r2, #24
 8009c76:	189b      	adds	r3, r3, r2
 8009c78:	19db      	adds	r3, r3, r7
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	701a      	strb	r2, [r3, #0]
 8009c7e:	e037      	b.n	8009cf0 <astronode_send_cmd_rr+0x284>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8009c80:	23fb      	movs	r3, #251	; 0xfb
 8009c82:	005b      	lsls	r3, r3, #1
 8009c84:	2218      	movs	r2, #24
 8009c86:	189b      	adds	r3, r3, r2
 8009c88:	19db      	adds	r3, r3, r7
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	22f4      	movs	r2, #244	; 0xf4
 8009c8e:	0052      	lsls	r2, r2, #1
 8009c90:	2118      	movs	r1, #24
 8009c92:	1852      	adds	r2, r2, r1
 8009c94:	19d2      	adds	r2, r2, r7
 8009c96:	6812      	ldr	r2, [r2, #0]
 8009c98:	5cd3      	ldrb	r3, [r2, r3]
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	4b40      	ldr	r3, [pc, #256]	; (8009da0 <astronode_send_cmd_rr+0x334>)
 8009c9e:	18d3      	adds	r3, r2, r3
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	001a      	movs	r2, r3
 8009ca4:	2397      	movs	r3, #151	; 0x97
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	d105      	bne.n	8009cb6 <astronode_send_cmd_rr+0x24a>
                {
                    send_debug_logs("Command contains non printable characters");
 8009caa:	4b3e      	ldr	r3, [pc, #248]	; (8009da4 <astronode_send_cmd_rr+0x338>)
 8009cac:	0018      	movs	r0, r3
 8009cae:	f7f9 fa21 	bl	80030f4 <send_debug_logs>
                    return false;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	e056      	b.n	8009d64 <astronode_send_cmd_rr+0x2f8>
                }
            	my_astro_rcv_cmd[index] = command_content[index] ;
 8009cb6:	20fb      	movs	r0, #251	; 0xfb
 8009cb8:	0040      	lsls	r0, r0, #1
 8009cba:	2318      	movs	r3, #24
 8009cbc:	18c3      	adds	r3, r0, r3
 8009cbe:	19db      	adds	r3, r3, r7
 8009cc0:	781a      	ldrb	r2, [r3, #0]
 8009cc2:	2318      	movs	r3, #24
 8009cc4:	18c3      	adds	r3, r0, r3
 8009cc6:	19db      	adds	r3, r3, r7
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	69f9      	ldr	r1, [r7, #28]
 8009ccc:	18cb      	adds	r3, r1, r3
 8009cce:	21f4      	movs	r1, #244	; 0xf4
 8009cd0:	0049      	lsls	r1, r1, #1
 8009cd2:	2418      	movs	r4, #24
 8009cd4:	1909      	adds	r1, r1, r4
 8009cd6:	19c9      	adds	r1, r1, r7
 8009cd8:	6809      	ldr	r1, [r1, #0]
 8009cda:	5c8a      	ldrb	r2, [r1, r2]
 8009cdc:	701a      	strb	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8009cde:	2318      	movs	r3, #24
 8009ce0:	18c3      	adds	r3, r0, r3
 8009ce2:	19db      	adds	r3, r3, r7
 8009ce4:	781a      	ldrb	r2, [r3, #0]
 8009ce6:	2318      	movs	r3, #24
 8009ce8:	18c3      	adds	r3, r0, r3
 8009cea:	19db      	adds	r3, r3, r7
 8009cec:	3201      	adds	r2, #1
 8009cee:	701a      	strb	r2, [r3, #0]
 8009cf0:	23fb      	movs	r3, #251	; 0xfb
 8009cf2:	005b      	lsls	r3, r3, #1
 8009cf4:	2218      	movs	r2, #24
 8009cf6:	189b      	adds	r3, r3, r2
 8009cf8:	19db      	adds	r3, r3, r7
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	21f3      	movs	r1, #243	; 0xf3
 8009d00:	0049      	lsls	r1, r1, #1
 8009d02:	2218      	movs	r2, #24
 8009d04:	188a      	adds	r2, r1, r2
 8009d06:	19d2      	adds	r2, r2, r7
 8009d08:	8812      	ldrh	r2, [r2, #0]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d8b8      	bhi.n	8009c80 <astronode_send_cmd_rr+0x214>
            }
            result = true ;
 8009d0e:	23f8      	movs	r3, #248	; 0xf8
 8009d10:	33ff      	adds	r3, #255	; 0xff
 8009d12:	2218      	movs	r2, #24
 8009d14:	189b      	adds	r3, r3, r2
 8009d16:	19db      	adds	r3, r3, r7
 8009d18:	2201      	movs	r2, #1
 8009d1a:	701a      	strb	r2, [r3, #0]
            my_astro_rcv_cmd[command_content_size] = 0 ;
 8009d1c:	2318      	movs	r3, #24
 8009d1e:	18cb      	adds	r3, r1, r3
 8009d20:	19db      	adds	r3, r3, r7
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	69fa      	ldr	r2, [r7, #28]
 8009d26:	18d3      	adds	r3, r2, r3
 8009d28:	2200      	movs	r2, #0
 8009d2a:	701a      	strb	r2, [r3, #0]
            send_debug_logs("Command content is: ");
 8009d2c:	4b1e      	ldr	r3, [pc, #120]	; (8009da8 <astronode_send_cmd_rr+0x33c>)
 8009d2e:	0018      	movs	r0, r3
 8009d30:	f7f9 f9e0 	bl	80030f4 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8009d34:	2358      	movs	r3, #88	; 0x58
 8009d36:	2218      	movs	r2, #24
 8009d38:	189b      	adds	r3, r3, r2
 8009d3a:	19db      	adds	r3, r3, r7
 8009d3c:	1d5a      	adds	r2, r3, #5
 8009d3e:	491b      	ldr	r1, [pc, #108]	; (8009dac <astronode_send_cmd_rr+0x340>)
 8009d40:	24f4      	movs	r4, #244	; 0xf4
 8009d42:	0064      	lsls	r4, r4, #1
 8009d44:	2318      	movs	r3, #24
 8009d46:	18e3      	adds	r3, r4, r3
 8009d48:	19db      	adds	r3, r3, r7
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	f003 faa1 	bl	800d294 <sprintf>
            send_debug_logs(command_content);
 8009d52:	2318      	movs	r3, #24
 8009d54:	18e3      	adds	r3, r4, r3
 8009d56:	19db      	adds	r3, r3, r7
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	0018      	movs	r0, r3
 8009d5c:	f7f9 f9ca 	bl	80030f4 <send_debug_logs>
 8009d60:	46b5      	mov	sp, r6
 8009d62:	e005      	b.n	8009d70 <astronode_send_cmd_rr+0x304>
                return result ;
 8009d64:	46b5      	mov	sp, r6
 8009d66:	e009      	b.n	8009d7c <astronode_send_cmd_rr+0x310>
        }
        else
        {
            send_debug_logs("No command available.");
 8009d68:	4b11      	ldr	r3, [pc, #68]	; (8009db0 <astronode_send_cmd_rr+0x344>)
 8009d6a:	0018      	movs	r0, r3
 8009d6c:	f7f9 f9c2 	bl	80030f4 <send_debug_logs>
        }
    }
    return result ;
 8009d70:	23f8      	movs	r3, #248	; 0xf8
 8009d72:	33ff      	adds	r3, #255	; 0xff
 8009d74:	2218      	movs	r2, #24
 8009d76:	189b      	adds	r3, r3, r2
 8009d78:	19db      	adds	r3, r3, r7
 8009d7a:	781b      	ldrb	r3, [r3, #0]
}
 8009d7c:	0018      	movs	r0, r3
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	2385      	movs	r3, #133	; 0x85
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	449d      	add	sp, r3
 8009d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d88:	fffffdec 	.word	0xfffffdec
 8009d8c:	fffffe60 	.word	0xfffffe60
 8009d90:	08014f60 	.word	0x08014f60
 8009d94:	08014f7c 	.word	0x08014f7c
 8009d98:	08014fcc 	.word	0x08014fcc
 8009d9c:	080145f0 	.word	0x080145f0
 8009da0:	08015b38 	.word	0x08015b38
 8009da4:	08014fe0 	.word	0x08014fe0
 8009da8:	0801500c 	.word	0x0801500c
 8009dac:	08015024 	.word	0x08015024
 8009db0:	08015028 	.word	0x08015028

08009db4 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8009db8:	4b02      	ldr	r3, [pc, #8]	; (8009dc4 <is_sak_available+0x10>)
 8009dba:	781b      	ldrb	r3, [r3, #0]
}
 8009dbc:	0018      	movs	r0, r3
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	46c0      	nop			; (mov r8, r8)
 8009dc4:	20000b0c 	.word	0x20000b0c

08009dc8 <is_astronode_reset>:

bool is_astronode_reset()
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8009dcc:	4b02      	ldr	r3, [pc, #8]	; (8009dd8 <is_astronode_reset+0x10>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
}
 8009dd0:	0018      	movs	r0, r3
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	46c0      	nop			; (mov r8, r8)
 8009dd8:	20000b0d 	.word	0x20000b0d

08009ddc <is_command_available>:

bool is_command_available()
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8009de0:	4b02      	ldr	r3, [pc, #8]	; (8009dec <is_command_available+0x10>)
 8009de2:	781b      	ldrb	r3, [r3, #0]
}
 8009de4:	0018      	movs	r0, r3
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	46c0      	nop			; (mov r8, r8)
 8009dec:	20000b0e 	.word	0x20000b0e

08009df0 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	0002      	movs	r2, r0
 8009df8:	6039      	str	r1, [r7, #0]
 8009dfa:	1dfb      	adds	r3, r7, #7
 8009dfc:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8009dfe:	1dfb      	adds	r3, r7, #7
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	2b2f      	cmp	r3, #47	; 0x2f
 8009e04:	d90b      	bls.n	8009e1e <ascii_to_value+0x2e>
 8009e06:	1dfb      	adds	r3, r7, #7
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	2b39      	cmp	r3, #57	; 0x39
 8009e0c:	d807      	bhi.n	8009e1e <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8009e0e:	1dfb      	adds	r3, r7, #7
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	3b30      	subs	r3, #48	; 0x30
 8009e14:	b2da      	uxtb	r2, r3
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	701a      	strb	r2, [r3, #0]
        return true;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e010      	b.n	8009e40 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8009e1e:	1dfb      	adds	r3, r7, #7
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2b40      	cmp	r3, #64	; 0x40
 8009e24:	d90b      	bls.n	8009e3e <ascii_to_value+0x4e>
 8009e26:	1dfb      	adds	r3, r7, #7
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	2b46      	cmp	r3, #70	; 0x46
 8009e2c:	d807      	bhi.n	8009e3e <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8009e2e:	1dfb      	adds	r3, r7, #7
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	3b37      	subs	r3, #55	; 0x37
 8009e34:	b2da      	uxtb	r2, r3
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	701a      	strb	r2, [r3, #0]
        return true;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e000      	b.n	8009e40 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8009e3e:	2300      	movs	r3, #0
    }
}
 8009e40:	0018      	movs	r0, r3
 8009e42:	46bd      	mov	sp, r7
 8009e44:	b002      	add	sp, #8
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8009e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8009e52:	250e      	movs	r5, #14
 8009e54:	197b      	adds	r3, r7, r5
 8009e56:	2200      	movs	r2, #0
 8009e58:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8009e5a:	197b      	adds	r3, r7, r5
 8009e5c:	881b      	ldrh	r3, [r3, #0]
 8009e5e:	197a      	adds	r2, r7, r5
 8009e60:	1c59      	adds	r1, r3, #1
 8009e62:	8011      	strh	r1, [r2, #0]
 8009e64:	001a      	movs	r2, r3
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	189b      	adds	r3, r3, r2
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	260a      	movs	r6, #10
 8009e72:	19bc      	adds	r4, r7, r6
 8009e74:	4a44      	ldr	r2, [pc, #272]	; (8009f88 <astronode_create_request_transport+0x140>)
 8009e76:	2101      	movs	r1, #1
 8009e78:	0018      	movs	r0, r3
 8009e7a:	f000 fa7d 	bl	800a378 <calculate_crc>
 8009e7e:	0003      	movs	r3, r0
 8009e80:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	1c58      	adds	r0, r3, #1
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	22c4      	movs	r2, #196	; 0xc4
 8009e8a:	5a99      	ldrh	r1, [r3, r2]
 8009e8c:	19bc      	adds	r4, r7, r6
 8009e8e:	19bb      	adds	r3, r7, r6
 8009e90:	881b      	ldrh	r3, [r3, #0]
 8009e92:	001a      	movs	r2, r3
 8009e94:	f000 fa70 	bl	800a378 <calculate_crc>
 8009e98:	0003      	movs	r3, r0
 8009e9a:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8009e9c:	19bb      	adds	r3, r7, r6
 8009e9e:	881b      	ldrh	r3, [r3, #0]
 8009ea0:	021b      	lsls	r3, r3, #8
 8009ea2:	b21a      	sxth	r2, r3
 8009ea4:	0031      	movs	r1, r6
 8009ea6:	19bb      	adds	r3, r7, r6
 8009ea8:	881b      	ldrh	r3, [r3, #0]
 8009eaa:	0a1b      	lsrs	r3, r3, #8
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	b21b      	sxth	r3, r3
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	b21a      	sxth	r2, r3
 8009eb4:	187b      	adds	r3, r7, r1
 8009eb6:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	7818      	ldrb	r0, [r3, #0]
 8009ebc:	197b      	adds	r3, r7, r5
 8009ebe:	881b      	ldrh	r3, [r3, #0]
 8009ec0:	683a      	ldr	r2, [r7, #0]
 8009ec2:	18d3      	adds	r3, r2, r3
 8009ec4:	0019      	movs	r1, r3
 8009ec6:	f000 fbeb 	bl	800a6a0 <uint8_to_ascii_buffer>
    index += 2;
 8009eca:	197b      	adds	r3, r7, r5
 8009ecc:	197a      	adds	r2, r7, r5
 8009ece:	8812      	ldrh	r2, [r2, #0]
 8009ed0:	3202      	adds	r2, #2
 8009ed2:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8009ed4:	230c      	movs	r3, #12
 8009ed6:	18fb      	adds	r3, r7, r3
 8009ed8:	2200      	movs	r2, #0
 8009eda:	801a      	strh	r2, [r3, #0]
 8009edc:	e017      	b.n	8009f0e <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8009ede:	240c      	movs	r4, #12
 8009ee0:	193b      	adds	r3, r7, r4
 8009ee2:	881b      	ldrh	r3, [r3, #0]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	18d3      	adds	r3, r2, r3
 8009ee8:	7858      	ldrb	r0, [r3, #1]
 8009eea:	250e      	movs	r5, #14
 8009eec:	197b      	adds	r3, r7, r5
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	18d3      	adds	r3, r2, r3
 8009ef4:	0019      	movs	r1, r3
 8009ef6:	f000 fbd3 	bl	800a6a0 <uint8_to_ascii_buffer>
        index += 2;
 8009efa:	197b      	adds	r3, r7, r5
 8009efc:	197a      	adds	r2, r7, r5
 8009efe:	8812      	ldrh	r2, [r2, #0]
 8009f00:	3202      	adds	r2, #2
 8009f02:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8009f04:	193b      	adds	r3, r7, r4
 8009f06:	881a      	ldrh	r2, [r3, #0]
 8009f08:	193b      	adds	r3, r7, r4
 8009f0a:	3201      	adds	r2, #1
 8009f0c:	801a      	strh	r2, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	22c4      	movs	r2, #196	; 0xc4
 8009f12:	5a9b      	ldrh	r3, [r3, r2]
 8009f14:	220c      	movs	r2, #12
 8009f16:	18ba      	adds	r2, r7, r2
 8009f18:	8812      	ldrh	r2, [r2, #0]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d3df      	bcc.n	8009ede <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8009f1e:	250a      	movs	r5, #10
 8009f20:	197b      	adds	r3, r7, r5
 8009f22:	881b      	ldrh	r3, [r3, #0]
 8009f24:	0a1b      	lsrs	r3, r3, #8
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	b2d8      	uxtb	r0, r3
 8009f2a:	240e      	movs	r4, #14
 8009f2c:	193b      	adds	r3, r7, r4
 8009f2e:	881b      	ldrh	r3, [r3, #0]
 8009f30:	683a      	ldr	r2, [r7, #0]
 8009f32:	18d3      	adds	r3, r2, r3
 8009f34:	0019      	movs	r1, r3
 8009f36:	f000 fbb3 	bl	800a6a0 <uint8_to_ascii_buffer>
    index += 2;
 8009f3a:	0021      	movs	r1, r4
 8009f3c:	187b      	adds	r3, r7, r1
 8009f3e:	187a      	adds	r2, r7, r1
 8009f40:	8812      	ldrh	r2, [r2, #0]
 8009f42:	3202      	adds	r2, #2
 8009f44:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8009f46:	197b      	adds	r3, r7, r5
 8009f48:	881b      	ldrh	r3, [r3, #0]
 8009f4a:	b2d8      	uxtb	r0, r3
 8009f4c:	000c      	movs	r4, r1
 8009f4e:	187b      	adds	r3, r7, r1
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	18d3      	adds	r3, r2, r3
 8009f56:	0019      	movs	r1, r3
 8009f58:	f000 fba2 	bl	800a6a0 <uint8_to_ascii_buffer>
    index += 2;
 8009f5c:	0020      	movs	r0, r4
 8009f5e:	183b      	adds	r3, r7, r0
 8009f60:	183a      	adds	r2, r7, r0
 8009f62:	8812      	ldrh	r2, [r2, #0]
 8009f64:	3202      	adds	r2, #2
 8009f66:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8009f68:	183b      	adds	r3, r7, r0
 8009f6a:	881b      	ldrh	r3, [r3, #0]
 8009f6c:	183a      	adds	r2, r7, r0
 8009f6e:	1c59      	adds	r1, r3, #1
 8009f70:	8011      	strh	r1, [r2, #0]
 8009f72:	001a      	movs	r2, r3
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	189b      	adds	r3, r3, r2
 8009f78:	2203      	movs	r2, #3
 8009f7a:	701a      	strb	r2, [r3, #0]

    return index;
 8009f7c:	183b      	adds	r3, r7, r0
 8009f7e:	881b      	ldrh	r3, [r3, #0]
}
 8009f80:	0018      	movs	r0, r3
 8009f82:	46bd      	mov	sp, r7
 8009f84:	b005      	add	sp, #20
 8009f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f88:	0000ffff 	.word	0x0000ffff

08009f8c <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8009f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f8e:	b089      	sub	sp, #36	; 0x24
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	607a      	str	r2, [r7, #4]
 8009f96:	230a      	movs	r3, #10
 8009f98:	18fb      	adds	r3, r7, r3
 8009f9a:	1c0a      	adds	r2, r1, #0
 8009f9c:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d005      	beq.n	8009fb2 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8009fa6:	4bbd      	ldr	r3, [pc, #756]	; (800a29c <astronode_decode_answer_transport+0x310>)
 8009fa8:	0018      	movs	r0, r3
 8009faa:	f7f9 f8a3 	bl	80030f4 <send_debug_logs>
        return RS_FAILURE;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	e170      	b.n	800a294 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8009fb2:	210a      	movs	r1, #10
 8009fb4:	187b      	adds	r3, r7, r1
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	4013      	ands	r3, r2
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d103      	bne.n	8009fca <astronode_decode_answer_transport+0x3e>
 8009fc2:	187b      	adds	r3, r7, r1
 8009fc4:	881b      	ldrh	r3, [r3, #0]
 8009fc6:	2b07      	cmp	r3, #7
 8009fc8:	d805      	bhi.n	8009fd6 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8009fca:	4bb5      	ldr	r3, [pc, #724]	; (800a2a0 <astronode_decode_answer_transport+0x314>)
 8009fcc:	0018      	movs	r0, r3
 8009fce:	f7f9 f891 	bl	80030f4 <send_debug_logs>
        return RS_FAILURE;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	e15e      	b.n	800a294 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8009fd6:	230a      	movs	r3, #10
 8009fd8:	18fb      	adds	r3, r7, r3
 8009fda:	881b      	ldrh	r3, [r3, #0]
 8009fdc:	3b08      	subs	r3, #8
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	da00      	bge.n	8009fe4 <astronode_decode_answer_transport+0x58>
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	105b      	asrs	r3, r3, #1
 8009fe6:	b299      	uxth	r1, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	22c4      	movs	r2, #196	; 0xc4
 8009fec:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8009fee:	230a      	movs	r3, #10
 8009ff0:	18fb      	adds	r3, r7, r3
 8009ff2:	881b      	ldrh	r3, [r3, #0]
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	18d3      	adds	r3, r2, r3
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	2b03      	cmp	r3, #3
 8009ffe:	d005      	beq.n	800a00c <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 800a000:	4ba8      	ldr	r3, [pc, #672]	; (800a2a4 <astronode_decode_answer_transport+0x318>)
 800a002:	0018      	movs	r0, r3
 800a004:	f7f9 f876 	bl	80030f4 <send_debug_logs>
        return RS_FAILURE;
 800a008:	2300      	movs	r3, #0
 800a00a:	e143      	b.n	800a294 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 800a00c:	2117      	movs	r1, #23
 800a00e:	187b      	adds	r3, r7, r1
 800a010:	2200      	movs	r2, #0
 800a012:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 800a014:	2416      	movs	r4, #22
 800a016:	193b      	adds	r3, r7, r4
 800a018:	2200      	movs	r2, #0
 800a01a:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3301      	adds	r3, #1
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	187a      	adds	r2, r7, r1
 800a024:	0011      	movs	r1, r2
 800a026:	0018      	movs	r0, r3
 800a028:	f7ff fee2 	bl	8009df0 <ascii_to_value>
 800a02c:	0003      	movs	r3, r0
 800a02e:	001a      	movs	r2, r3
 800a030:	2301      	movs	r3, #1
 800a032:	4053      	eors	r3, r2
 800a034:	b2db      	uxtb	r3, r3
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10e      	bne.n	800a058 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	3302      	adds	r3, #2
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	193a      	adds	r2, r7, r4
 800a042:	0011      	movs	r1, r2
 800a044:	0018      	movs	r0, r3
 800a046:	f7ff fed3 	bl	8009df0 <ascii_to_value>
 800a04a:	0003      	movs	r3, r0
 800a04c:	001a      	movs	r2, r3
 800a04e:	2301      	movs	r3, #1
 800a050:	4053      	eors	r3, r2
 800a052:	b2db      	uxtb	r3, r3
 800a054:	2b00      	cmp	r3, #0
 800a056:	d005      	beq.n	800a064 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a058:	4b93      	ldr	r3, [pc, #588]	; (800a2a8 <astronode_decode_answer_transport+0x31c>)
 800a05a:	0018      	movs	r0, r3
 800a05c:	f7f9 f84a 	bl	80030f4 <send_debug_logs>
        return RS_FAILURE;
 800a060:	2300      	movs	r3, #0
 800a062:	e117      	b.n	800a294 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 800a064:	2317      	movs	r3, #23
 800a066:	18fb      	adds	r3, r7, r3
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	011b      	lsls	r3, r3, #4
 800a06c:	b2da      	uxtb	r2, r3
 800a06e:	2316      	movs	r3, #22
 800a070:	18fb      	adds	r3, r7, r3
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	18d3      	adds	r3, r2, r3
 800a076:	b2da      	uxtb	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800a07c:	231e      	movs	r3, #30
 800a07e:	18fb      	adds	r3, r7, r3
 800a080:	2203      	movs	r2, #3
 800a082:	801a      	strh	r2, [r3, #0]
 800a084:	231c      	movs	r3, #28
 800a086:	18fb      	adds	r3, r7, r3
 800a088:	2200      	movs	r2, #0
 800a08a:	801a      	strh	r2, [r3, #0]
 800a08c:	e045      	b.n	800a11a <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800a08e:	241e      	movs	r4, #30
 800a090:	193b      	adds	r3, r7, r4
 800a092:	881b      	ldrh	r3, [r3, #0]
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	18d3      	adds	r3, r2, r3
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	2217      	movs	r2, #23
 800a09c:	18ba      	adds	r2, r7, r2
 800a09e:	0011      	movs	r1, r2
 800a0a0:	0018      	movs	r0, r3
 800a0a2:	f7ff fea5 	bl	8009df0 <ascii_to_value>
 800a0a6:	0003      	movs	r3, r0
 800a0a8:	001a      	movs	r2, r3
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	4053      	eors	r3, r2
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d112      	bne.n	800a0da <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 800a0b4:	193b      	adds	r3, r7, r4
 800a0b6:	881b      	ldrh	r3, [r3, #0]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	18d3      	adds	r3, r2, r3
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	2216      	movs	r2, #22
 800a0c2:	18ba      	adds	r2, r7, r2
 800a0c4:	0011      	movs	r1, r2
 800a0c6:	0018      	movs	r0, r3
 800a0c8:	f7ff fe92 	bl	8009df0 <ascii_to_value>
 800a0cc:	0003      	movs	r3, r0
 800a0ce:	001a      	movs	r2, r3
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	4053      	eors	r3, r2
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d005      	beq.n	800a0e6 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a0da:	4b73      	ldr	r3, [pc, #460]	; (800a2a8 <astronode_decode_answer_transport+0x31c>)
 800a0dc:	0018      	movs	r0, r3
 800a0de:	f7f9 f809 	bl	80030f4 <send_debug_logs>
            return RS_FAILURE;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	e0d6      	b.n	800a294 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 800a0e6:	2317      	movs	r3, #23
 800a0e8:	18fb      	adds	r3, r7, r3
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	011b      	lsls	r3, r3, #4
 800a0ee:	b2d9      	uxtb	r1, r3
 800a0f0:	2316      	movs	r3, #22
 800a0f2:	18fb      	adds	r3, r7, r3
 800a0f4:	781a      	ldrb	r2, [r3, #0]
 800a0f6:	201c      	movs	r0, #28
 800a0f8:	183b      	adds	r3, r7, r0
 800a0fa:	881b      	ldrh	r3, [r3, #0]
 800a0fc:	1838      	adds	r0, r7, r0
 800a0fe:	1c5c      	adds	r4, r3, #1
 800a100:	8004      	strh	r4, [r0, #0]
 800a102:	0018      	movs	r0, r3
 800a104:	188b      	adds	r3, r1, r2
 800a106:	b2da      	uxtb	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	181b      	adds	r3, r3, r0
 800a10c:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800a10e:	221e      	movs	r2, #30
 800a110:	18bb      	adds	r3, r7, r2
 800a112:	18ba      	adds	r2, r7, r2
 800a114:	8812      	ldrh	r2, [r2, #0]
 800a116:	3202      	adds	r2, #2
 800a118:	801a      	strh	r2, [r3, #0]
 800a11a:	231e      	movs	r3, #30
 800a11c:	18fb      	adds	r3, r7, r3
 800a11e:	881a      	ldrh	r2, [r3, #0]
 800a120:	260a      	movs	r6, #10
 800a122:	19bb      	adds	r3, r7, r6
 800a124:	881b      	ldrh	r3, [r3, #0]
 800a126:	3b05      	subs	r3, #5
 800a128:	429a      	cmp	r2, r3
 800a12a:	dbb0      	blt.n	800a08e <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	251a      	movs	r5, #26
 800a130:	197c      	adds	r4, r7, r5
 800a132:	4a5e      	ldr	r2, [pc, #376]	; (800a2ac <astronode_decode_answer_transport+0x320>)
 800a134:	2101      	movs	r1, #1
 800a136:	0018      	movs	r0, r3
 800a138:	f000 f91e 	bl	800a378 <calculate_crc>
 800a13c:	0003      	movs	r3, r0
 800a13e:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	1c58      	adds	r0, r3, #1
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	22c4      	movs	r2, #196	; 0xc4
 800a148:	5a99      	ldrh	r1, [r3, r2]
 800a14a:	197c      	adds	r4, r7, r5
 800a14c:	197b      	adds	r3, r7, r5
 800a14e:	881b      	ldrh	r3, [r3, #0]
 800a150:	001a      	movs	r2, r3
 800a152:	f000 f911 	bl	800a378 <calculate_crc>
 800a156:	0003      	movs	r3, r0
 800a158:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 800a15a:	197b      	adds	r3, r7, r5
 800a15c:	881b      	ldrh	r3, [r3, #0]
 800a15e:	021b      	lsls	r3, r3, #8
 800a160:	b21a      	sxth	r2, r3
 800a162:	0029      	movs	r1, r5
 800a164:	197b      	adds	r3, r7, r5
 800a166:	881b      	ldrh	r3, [r3, #0]
 800a168:	0a1b      	lsrs	r3, r3, #8
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	b21b      	sxth	r3, r3
 800a16e:	4313      	orrs	r3, r2
 800a170:	b21a      	sxth	r2, r3
 800a172:	187b      	adds	r3, r7, r1
 800a174:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 800a176:	19bb      	adds	r3, r7, r6
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	3b05      	subs	r3, #5
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	18d3      	adds	r3, r2, r3
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	2217      	movs	r2, #23
 800a184:	18ba      	adds	r2, r7, r2
 800a186:	0011      	movs	r1, r2
 800a188:	0018      	movs	r0, r3
 800a18a:	f7ff fe31 	bl	8009df0 <ascii_to_value>
 800a18e:	0003      	movs	r3, r0
 800a190:	001a      	movs	r2, r3
 800a192:	2301      	movs	r3, #1
 800a194:	4053      	eors	r3, r2
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d112      	bne.n	800a1c2 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 800a19c:	19bb      	adds	r3, r7, r6
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	3b04      	subs	r3, #4
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	18d3      	adds	r3, r2, r3
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	2216      	movs	r2, #22
 800a1aa:	18ba      	adds	r2, r7, r2
 800a1ac:	0011      	movs	r1, r2
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	f7ff fe1e 	bl	8009df0 <ascii_to_value>
 800a1b4:	0003      	movs	r3, r0
 800a1b6:	001a      	movs	r2, r3
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	4053      	eors	r3, r2
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d005      	beq.n	800a1ce <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a1c2:	4b39      	ldr	r3, [pc, #228]	; (800a2a8 <astronode_decode_answer_transport+0x31c>)
 800a1c4:	0018      	movs	r0, r3
 800a1c6:	f7f8 ff95 	bl	80030f4 <send_debug_logs>
        return RS_FAILURE;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	e062      	b.n	800a294 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800a1ce:	2017      	movs	r0, #23
 800a1d0:	183b      	adds	r3, r7, r0
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	031b      	lsls	r3, r3, #12
 800a1d8:	b299      	uxth	r1, r3
 800a1da:	2416      	movs	r4, #22
 800a1dc:	193b      	adds	r3, r7, r4
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	021b      	lsls	r3, r3, #8
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	2318      	movs	r3, #24
 800a1e8:	18fb      	adds	r3, r7, r3
 800a1ea:	188a      	adds	r2, r1, r2
 800a1ec:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 800a1ee:	250a      	movs	r5, #10
 800a1f0:	197b      	adds	r3, r7, r5
 800a1f2:	881b      	ldrh	r3, [r3, #0]
 800a1f4:	3b03      	subs	r3, #3
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	18d3      	adds	r3, r2, r3
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	183a      	adds	r2, r7, r0
 800a1fe:	0011      	movs	r1, r2
 800a200:	0018      	movs	r0, r3
 800a202:	f7ff fdf5 	bl	8009df0 <ascii_to_value>
 800a206:	0003      	movs	r3, r0
 800a208:	001a      	movs	r2, r3
 800a20a:	2301      	movs	r3, #1
 800a20c:	4053      	eors	r3, r2
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b00      	cmp	r3, #0
 800a212:	d111      	bne.n	800a238 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 800a214:	197b      	adds	r3, r7, r5
 800a216:	881b      	ldrh	r3, [r3, #0]
 800a218:	3b02      	subs	r3, #2
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	18d3      	adds	r3, r2, r3
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	193a      	adds	r2, r7, r4
 800a222:	0011      	movs	r1, r2
 800a224:	0018      	movs	r0, r3
 800a226:	f7ff fde3 	bl	8009df0 <ascii_to_value>
 800a22a:	0003      	movs	r3, r0
 800a22c:	001a      	movs	r2, r3
 800a22e:	2301      	movs	r3, #1
 800a230:	4053      	eors	r3, r2
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b00      	cmp	r3, #0
 800a236:	d005      	beq.n	800a244 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a238:	4b1b      	ldr	r3, [pc, #108]	; (800a2a8 <astronode_decode_answer_transport+0x31c>)
 800a23a:	0018      	movs	r0, r3
 800a23c:	f7f8 ff5a 	bl	80030f4 <send_debug_logs>
        return RS_FAILURE;
 800a240:	2300      	movs	r3, #0
 800a242:	e027      	b.n	800a294 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 800a244:	2317      	movs	r3, #23
 800a246:	18fb      	adds	r3, r7, r3
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	011b      	lsls	r3, r3, #4
 800a24e:	b29a      	uxth	r2, r3
 800a250:	2316      	movs	r3, #22
 800a252:	18fb      	adds	r3, r7, r3
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	b29b      	uxth	r3, r3
 800a258:	18d3      	adds	r3, r2, r3
 800a25a:	b299      	uxth	r1, r3
 800a25c:	2018      	movs	r0, #24
 800a25e:	183b      	adds	r3, r7, r0
 800a260:	183a      	adds	r2, r7, r0
 800a262:	8812      	ldrh	r2, [r2, #0]
 800a264:	188a      	adds	r2, r1, r2
 800a266:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 800a268:	183a      	adds	r2, r7, r0
 800a26a:	231a      	movs	r3, #26
 800a26c:	18fb      	adds	r3, r7, r3
 800a26e:	8812      	ldrh	r2, [r2, #0]
 800a270:	881b      	ldrh	r3, [r3, #0]
 800a272:	429a      	cmp	r2, r3
 800a274:	d005      	beq.n	800a282 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 800a276:	4b0e      	ldr	r3, [pc, #56]	; (800a2b0 <astronode_decode_answer_transport+0x324>)
 800a278:	0018      	movs	r0, r3
 800a27a:	f7f8 ff3b 	bl	80030f4 <send_debug_logs>
        return RS_FAILURE;
 800a27e:	2300      	movs	r3, #0
 800a280:	e008      	b.n	800a294 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	2bff      	cmp	r3, #255	; 0xff
 800a288:	d103      	bne.n	800a292 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	0018      	movs	r0, r3
 800a28e:	f000 f8c3 	bl	800a418 <check_for_error>
    }

    return RS_SUCCESS;
 800a292:	2301      	movs	r3, #1
}
 800a294:	0018      	movs	r0, r3
 800a296:	46bd      	mov	sp, r7
 800a298:	b009      	add	sp, #36	; 0x24
 800a29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a29c:	080150b8 	.word	0x080150b8
 800a2a0:	08015108 	.word	0x08015108
 800a2a4:	08015158 	.word	0x08015158
 800a2a8:	080151a8 	.word	0x080151a8
 800a2ac:	0000ffff 	.word	0x0000ffff
 800a2b0:	080151f4 	.word	0x080151f4

0800a2b4 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 800a2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2b6:	4c2b      	ldr	r4, [pc, #172]	; (800a364 <astronode_transport_send_receive+0xb0>)
 800a2b8:	44a5      	add	sp, r4
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800a2c0:	4b29      	ldr	r3, [pc, #164]	; (800a368 <astronode_transport_send_receive+0xb4>)
 800a2c2:	25ca      	movs	r5, #202	; 0xca
 800a2c4:	00ad      	lsls	r5, r5, #2
 800a2c6:	195b      	adds	r3, r3, r5
 800a2c8:	19db      	adds	r3, r3, r7
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	22c4      	movs	r2, #196	; 0xc4
 800a2d2:	0052      	lsls	r2, r2, #1
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	0018      	movs	r0, r3
 800a2d8:	f003 f872 	bl	800d3c0 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800a2dc:	4b23      	ldr	r3, [pc, #140]	; (800a36c <astronode_transport_send_receive+0xb8>)
 800a2de:	195b      	adds	r3, r3, r5
 800a2e0:	19db      	adds	r3, r3, r7
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	3304      	adds	r3, #4
 800a2e8:	22c4      	movs	r2, #196	; 0xc4
 800a2ea:	0052      	lsls	r2, r2, #1
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	0018      	movs	r0, r3
 800a2f0:	f003 f866 	bl	800d3c0 <memset>
    uint16_t answer_length =  0;
 800a2f4:	4b1e      	ldr	r3, [pc, #120]	; (800a370 <astronode_transport_send_receive+0xbc>)
 800a2f6:	195b      	adds	r3, r3, r5
 800a2f8:	19db      	adds	r3, r3, r7
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 800a2fe:	4e1d      	ldr	r6, [pc, #116]	; (800a374 <astronode_transport_send_receive+0xc0>)
 800a300:	19bc      	adds	r4, r7, r6
 800a302:	23cc      	movs	r3, #204	; 0xcc
 800a304:	005b      	lsls	r3, r3, #1
 800a306:	18fa      	adds	r2, r7, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	0011      	movs	r1, r2
 800a30c:	0018      	movs	r0, r3
 800a30e:	f7ff fd9b 	bl	8009e48 <astronode_create_request_transport>
 800a312:	0003      	movs	r3, r0
 800a314:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 800a316:	19bb      	adds	r3, r7, r6
 800a318:	881a      	ldrh	r2, [r3, #0]
 800a31a:	23cc      	movs	r3, #204	; 0xcc
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	18fb      	adds	r3, r7, r3
 800a320:	0011      	movs	r1, r2
 800a322:	0018      	movs	r0, r3
 800a324:	f7f9 fb4c 	bl	80039c0 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 800a328:	230a      	movs	r3, #10
 800a32a:	18fa      	adds	r2, r7, r3
 800a32c:	240c      	movs	r4, #12
 800a32e:	193b      	adds	r3, r7, r4
 800a330:	0011      	movs	r1, r2
 800a332:	0018      	movs	r0, r3
 800a334:	f000 f92c 	bl	800a590 <receive_astronode_answer>
 800a338:	0003      	movs	r3, r0
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d10a      	bne.n	800a354 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 800a33e:	4b0c      	ldr	r3, [pc, #48]	; (800a370 <astronode_transport_send_receive+0xbc>)
 800a340:	195b      	adds	r3, r3, r5
 800a342:	19db      	adds	r3, r3, r7
 800a344:	8819      	ldrh	r1, [r3, #0]
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	193b      	adds	r3, r7, r4
 800a34a:	0018      	movs	r0, r3
 800a34c:	f7ff fe1e 	bl	8009f8c <astronode_decode_answer_transport>
 800a350:	0003      	movs	r3, r0
 800a352:	e000      	b.n	800a356 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 800a354:	2300      	movs	r3, #0
    }
}
 800a356:	0018      	movs	r0, r3
 800a358:	46bd      	mov	sp, r7
 800a35a:	23cb      	movs	r3, #203	; 0xcb
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	449d      	add	sp, r3
 800a360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a362:	46c0      	nop			; (mov r8, r8)
 800a364:	fffffcd4 	.word	0xfffffcd4
 800a368:	fffffe70 	.word	0xfffffe70
 800a36c:	fffffce4 	.word	0xfffffce4
 800a370:	fffffce2 	.word	0xfffffce2
 800a374:	00000326 	.word	0x00000326

0800a378 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 800a378:	b590      	push	{r4, r7, lr}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	0008      	movs	r0, r1
 800a382:	0011      	movs	r1, r2
 800a384:	1cbb      	adds	r3, r7, #2
 800a386:	1c02      	adds	r2, r0, #0
 800a388:	801a      	strh	r2, [r3, #0]
 800a38a:	003b      	movs	r3, r7
 800a38c:	1c0a      	adds	r2, r1, #0
 800a38e:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 800a390:	230e      	movs	r3, #14
 800a392:	18fb      	adds	r3, r7, r3
 800a394:	003a      	movs	r2, r7
 800a396:	8812      	ldrh	r2, [r2, #0]
 800a398:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800a39a:	e02e      	b.n	800a3fa <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 800a39c:	240e      	movs	r4, #14
 800a39e:	193b      	adds	r3, r7, r4
 800a3a0:	881b      	ldrh	r3, [r3, #0]
 800a3a2:	0a1b      	lsrs	r3, r3, #8
 800a3a4:	b299      	uxth	r1, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	1c5a      	adds	r2, r3, #1
 800a3aa:	607a      	str	r2, [r7, #4]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	200c      	movs	r0, #12
 800a3b2:	183b      	adds	r3, r7, r0
 800a3b4:	404a      	eors	r2, r1
 800a3b6:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 800a3b8:	183b      	adds	r3, r7, r0
 800a3ba:	881b      	ldrh	r3, [r3, #0]
 800a3bc:	091b      	lsrs	r3, r3, #4
 800a3be:	b299      	uxth	r1, r3
 800a3c0:	183b      	adds	r3, r7, r0
 800a3c2:	183a      	adds	r2, r7, r0
 800a3c4:	8812      	ldrh	r2, [r2, #0]
 800a3c6:	404a      	eors	r2, r1
 800a3c8:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 800a3ca:	0021      	movs	r1, r4
 800a3cc:	187b      	adds	r3, r7, r1
 800a3ce:	881b      	ldrh	r3, [r3, #0]
 800a3d0:	021b      	lsls	r3, r3, #8
 800a3d2:	b21a      	sxth	r2, r3
 800a3d4:	183b      	adds	r3, r7, r0
 800a3d6:	881b      	ldrh	r3, [r3, #0]
 800a3d8:	031b      	lsls	r3, r3, #12
 800a3da:	b21b      	sxth	r3, r3
 800a3dc:	4053      	eors	r3, r2
 800a3de:	b21a      	sxth	r2, r3
 800a3e0:	183b      	adds	r3, r7, r0
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	015b      	lsls	r3, r3, #5
 800a3e6:	b21b      	sxth	r3, r3
 800a3e8:	4053      	eors	r3, r2
 800a3ea:	b21a      	sxth	r2, r3
 800a3ec:	183b      	adds	r3, r7, r0
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	5e1b      	ldrsh	r3, [r3, r0]
 800a3f2:	4053      	eors	r3, r2
 800a3f4:	b21a      	sxth	r2, r3
 800a3f6:	187b      	adds	r3, r7, r1
 800a3f8:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 800a3fa:	1cbb      	adds	r3, r7, #2
 800a3fc:	881b      	ldrh	r3, [r3, #0]
 800a3fe:	1cba      	adds	r2, r7, #2
 800a400:	1e59      	subs	r1, r3, #1
 800a402:	8011      	strh	r1, [r2, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1c9      	bne.n	800a39c <calculate_crc+0x24>
    }
    return crc;
 800a408:	230e      	movs	r3, #14
 800a40a:	18fb      	adds	r3, r7, r3
 800a40c:	881b      	ldrh	r3, [r3, #0]
}
 800a40e:	0018      	movs	r0, r3
 800a410:	46bd      	mov	sp, r7
 800a412:	b005      	add	sp, #20
 800a414:	bd90      	pop	{r4, r7, pc}
	...

0800a418 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	785b      	ldrb	r3, [r3, #1]
 800a424:	b299      	uxth	r1, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	789b      	ldrb	r3, [r3, #2]
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	021b      	lsls	r3, r3, #8
 800a42e:	b29a      	uxth	r2, r3
 800a430:	200e      	movs	r0, #14
 800a432:	183b      	adds	r3, r7, r0
 800a434:	188a      	adds	r2, r1, r2
 800a436:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 800a438:	183b      	adds	r3, r7, r0
 800a43a:	881b      	ldrh	r3, [r3, #0]
 800a43c:	4a40      	ldr	r2, [pc, #256]	; (800a540 <check_for_error+0x128>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d100      	bne.n	800a444 <check_for_error+0x2c>
 800a442:	e06f      	b.n	800a524 <check_for_error+0x10c>
 800a444:	4a3e      	ldr	r2, [pc, #248]	; (800a540 <check_for_error+0x128>)
 800a446:	4293      	cmp	r3, r2
 800a448:	dd00      	ble.n	800a44c <check_for_error+0x34>
 800a44a:	e070      	b.n	800a52e <check_for_error+0x116>
 800a44c:	4a3d      	ldr	r2, [pc, #244]	; (800a544 <check_for_error+0x12c>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d100      	bne.n	800a454 <check_for_error+0x3c>
 800a452:	e062      	b.n	800a51a <check_for_error+0x102>
 800a454:	4a3b      	ldr	r2, [pc, #236]	; (800a544 <check_for_error+0x12c>)
 800a456:	4293      	cmp	r3, r2
 800a458:	dd00      	ble.n	800a45c <check_for_error+0x44>
 800a45a:	e068      	b.n	800a52e <check_for_error+0x116>
 800a45c:	4a3a      	ldr	r2, [pc, #232]	; (800a548 <check_for_error+0x130>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d056      	beq.n	800a510 <check_for_error+0xf8>
 800a462:	4a39      	ldr	r2, [pc, #228]	; (800a548 <check_for_error+0x130>)
 800a464:	4293      	cmp	r3, r2
 800a466:	dd00      	ble.n	800a46a <check_for_error+0x52>
 800a468:	e061      	b.n	800a52e <check_for_error+0x116>
 800a46a:	4a38      	ldr	r2, [pc, #224]	; (800a54c <check_for_error+0x134>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d04a      	beq.n	800a506 <check_for_error+0xee>
 800a470:	4a36      	ldr	r2, [pc, #216]	; (800a54c <check_for_error+0x134>)
 800a472:	4293      	cmp	r3, r2
 800a474:	dc5b      	bgt.n	800a52e <check_for_error+0x116>
 800a476:	4a36      	ldr	r2, [pc, #216]	; (800a550 <check_for_error+0x138>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d03f      	beq.n	800a4fc <check_for_error+0xe4>
 800a47c:	4a34      	ldr	r2, [pc, #208]	; (800a550 <check_for_error+0x138>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	dc55      	bgt.n	800a52e <check_for_error+0x116>
 800a482:	4a34      	ldr	r2, [pc, #208]	; (800a554 <check_for_error+0x13c>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d034      	beq.n	800a4f2 <check_for_error+0xda>
 800a488:	4a32      	ldr	r2, [pc, #200]	; (800a554 <check_for_error+0x13c>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	dc4f      	bgt.n	800a52e <check_for_error+0x116>
 800a48e:	4a32      	ldr	r2, [pc, #200]	; (800a558 <check_for_error+0x140>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d029      	beq.n	800a4e8 <check_for_error+0xd0>
 800a494:	4a30      	ldr	r2, [pc, #192]	; (800a558 <check_for_error+0x140>)
 800a496:	4293      	cmp	r3, r2
 800a498:	dc49      	bgt.n	800a52e <check_for_error+0x116>
 800a49a:	4a30      	ldr	r2, [pc, #192]	; (800a55c <check_for_error+0x144>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d01e      	beq.n	800a4de <check_for_error+0xc6>
 800a4a0:	4a2e      	ldr	r2, [pc, #184]	; (800a55c <check_for_error+0x144>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	dc43      	bgt.n	800a52e <check_for_error+0x116>
 800a4a6:	2222      	movs	r2, #34	; 0x22
 800a4a8:	32ff      	adds	r2, #255	; 0xff
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d012      	beq.n	800a4d4 <check_for_error+0xbc>
 800a4ae:	2291      	movs	r2, #145	; 0x91
 800a4b0:	0052      	lsls	r2, r2, #1
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	da3b      	bge.n	800a52e <check_for_error+0x116>
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d002      	beq.n	800a4c0 <check_for_error+0xa8>
 800a4ba:	2b11      	cmp	r3, #17
 800a4bc:	d005      	beq.n	800a4ca <check_for_error+0xb2>
 800a4be:	e036      	b.n	800a52e <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 800a4c0:	4b27      	ldr	r3, [pc, #156]	; (800a560 <check_for_error+0x148>)
 800a4c2:	0018      	movs	r0, r3
 800a4c4:	f7f8 fe16 	bl	80030f4 <send_debug_logs>
            break;
 800a4c8:	e036      	b.n	800a538 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 800a4ca:	4b26      	ldr	r3, [pc, #152]	; (800a564 <check_for_error+0x14c>)
 800a4cc:	0018      	movs	r0, r3
 800a4ce:	f7f8 fe11 	bl	80030f4 <send_debug_logs>
            break;
 800a4d2:	e031      	b.n	800a538 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 800a4d4:	4b24      	ldr	r3, [pc, #144]	; (800a568 <check_for_error+0x150>)
 800a4d6:	0018      	movs	r0, r3
 800a4d8:	f7f8 fe0c 	bl	80030f4 <send_debug_logs>
            break;
 800a4dc:	e02c      	b.n	800a538 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 800a4de:	4b23      	ldr	r3, [pc, #140]	; (800a56c <check_for_error+0x154>)
 800a4e0:	0018      	movs	r0, r3
 800a4e2:	f7f8 fe07 	bl	80030f4 <send_debug_logs>
            break;
 800a4e6:	e027      	b.n	800a538 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 800a4e8:	4b21      	ldr	r3, [pc, #132]	; (800a570 <check_for_error+0x158>)
 800a4ea:	0018      	movs	r0, r3
 800a4ec:	f7f8 fe02 	bl	80030f4 <send_debug_logs>
            break;
 800a4f0:	e022      	b.n	800a538 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 800a4f2:	4b20      	ldr	r3, [pc, #128]	; (800a574 <check_for_error+0x15c>)
 800a4f4:	0018      	movs	r0, r3
 800a4f6:	f7f8 fdfd 	bl	80030f4 <send_debug_logs>
            break;
 800a4fa:	e01d      	b.n	800a538 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 800a4fc:	4b1e      	ldr	r3, [pc, #120]	; (800a578 <check_for_error+0x160>)
 800a4fe:	0018      	movs	r0, r3
 800a500:	f7f8 fdf8 	bl	80030f4 <send_debug_logs>
            break;
 800a504:	e018      	b.n	800a538 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 800a506:	4b1d      	ldr	r3, [pc, #116]	; (800a57c <check_for_error+0x164>)
 800a508:	0018      	movs	r0, r3
 800a50a:	f7f8 fdf3 	bl	80030f4 <send_debug_logs>
            break;
 800a50e:	e013      	b.n	800a538 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 800a510:	4b1b      	ldr	r3, [pc, #108]	; (800a580 <check_for_error+0x168>)
 800a512:	0018      	movs	r0, r3
 800a514:	f7f8 fdee 	bl	80030f4 <send_debug_logs>
            break;
 800a518:	e00e      	b.n	800a538 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 800a51a:	4b1a      	ldr	r3, [pc, #104]	; (800a584 <check_for_error+0x16c>)
 800a51c:	0018      	movs	r0, r3
 800a51e:	f7f8 fde9 	bl	80030f4 <send_debug_logs>
            break;
 800a522:	e009      	b.n	800a538 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 800a524:	4b18      	ldr	r3, [pc, #96]	; (800a588 <check_for_error+0x170>)
 800a526:	0018      	movs	r0, r3
 800a528:	f7f8 fde4 	bl	80030f4 <send_debug_logs>
            break;
 800a52c:	e004      	b.n	800a538 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 800a52e:	4b17      	ldr	r3, [pc, #92]	; (800a58c <check_for_error+0x174>)
 800a530:	0018      	movs	r0, r3
 800a532:	f7f8 fddf 	bl	80030f4 <send_debug_logs>
            break;
 800a536:	46c0      	nop			; (mov r8, r8)
    }
}
 800a538:	46c0      	nop			; (mov r8, r8)
 800a53a:	46bd      	mov	sp, r7
 800a53c:	b004      	add	sp, #16
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	00004601 	.word	0x00004601
 800a544:	00004501 	.word	0x00004501
 800a548:	00003501 	.word	0x00003501
 800a54c:	00002601 	.word	0x00002601
 800a550:	00002511 	.word	0x00002511
 800a554:	00002501 	.word	0x00002501
 800a558:	00000611 	.word	0x00000611
 800a55c:	00000601 	.word	0x00000601
 800a560:	08015238 	.word	0x08015238
 800a564:	08015284 	.word	0x08015284
 800a568:	080152e8 	.word	0x080152e8
 800a56c:	08015320 	.word	0x08015320
 800a570:	080153c4 	.word	0x080153c4
 800a574:	0801542c 	.word	0x0801542c
 800a578:	0801548c 	.word	0x0801548c
 800a57c:	08015518 	.word	0x08015518
 800a580:	08015578 	.word	0x08015578
 800a584:	08015624 	.word	0x08015624
 800a588:	08015670 	.word	0x08015670
 800a58c:	080156b8 	.word	0x080156b8

0800a590 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800a590:	b5b0      	push	{r4, r5, r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 800a59a:	230f      	movs	r3, #15
 800a59c:	18fb      	adds	r3, r7, r3
 800a59e:	2200      	movs	r2, #0
 800a5a0:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 800a5a2:	2316      	movs	r3, #22
 800a5a4:	18fb      	adds	r3, r7, r3
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 800a5aa:	f7f9 fa27 	bl	80039fc <get_systick>
 800a5ae:	0003      	movs	r3, r0
 800a5b0:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 800a5b2:	2315      	movs	r3, #21
 800a5b4:	18fb      	adds	r3, r7, r3
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 800a5ba:	e054      	b.n	800a666 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 800a5bc:	4a34      	ldr	r2, [pc, #208]	; (800a690 <receive_astronode_answer+0x100>)
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	0011      	movs	r1, r2
 800a5c2:	0018      	movs	r0, r3
 800a5c4:	f7f9 fa22 	bl	8003a0c <is_systick_timeout_over>
 800a5c8:	1e03      	subs	r3, r0, #0
 800a5ca:	d005      	beq.n	800a5d8 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 800a5cc:	4b31      	ldr	r3, [pc, #196]	; (800a694 <receive_astronode_answer+0x104>)
 800a5ce:	0018      	movs	r0, r3
 800a5d0:	f7f8 fd90 	bl	80030f4 <send_debug_logs>
            return RS_FAILURE;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	e057      	b.n	800a688 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 800a5d8:	250f      	movs	r5, #15
 800a5da:	197b      	adds	r3, r7, r5
 800a5dc:	0018      	movs	r0, r3
 800a5de:	f7f9 fa2b 	bl	8003a38 <is_astronode_character_received>
 800a5e2:	0003      	movs	r3, r0
 800a5e4:	0019      	movs	r1, r3
 800a5e6:	2016      	movs	r0, #22
 800a5e8:	183b      	adds	r3, r7, r0
 800a5ea:	183a      	adds	r2, r7, r0
 800a5ec:	8812      	ldrh	r2, [r2, #0]
 800a5ee:	801a      	strh	r2, [r3, #0]
 800a5f0:	2415      	movs	r4, #21
 800a5f2:	193b      	adds	r3, r7, r4
 800a5f4:	193a      	adds	r2, r7, r4
 800a5f6:	7812      	ldrb	r2, [r2, #0]
 800a5f8:	701a      	strb	r2, [r3, #0]
 800a5fa:	2900      	cmp	r1, #0
 800a5fc:	d033      	beq.n	800a666 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 800a5fe:	197b      	adds	r3, r7, r5
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	2b02      	cmp	r3, #2
 800a604:	d105      	bne.n	800a612 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 800a606:	193b      	adds	r3, r7, r4
 800a608:	2200      	movs	r2, #0
 800a60a:	701a      	strb	r2, [r3, #0]
                length = 0;
 800a60c:	183b      	adds	r3, r7, r0
 800a60e:	2200      	movs	r2, #0
 800a610:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 800a612:	2116      	movs	r1, #22
 800a614:	187b      	adds	r3, r7, r1
 800a616:	881b      	ldrh	r3, [r3, #0]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	18d3      	adds	r3, r2, r3
 800a61c:	220f      	movs	r2, #15
 800a61e:	18ba      	adds	r2, r7, r2
 800a620:	7812      	ldrb	r2, [r2, #0]
 800a622:	701a      	strb	r2, [r3, #0]
            length++;
 800a624:	187b      	adds	r3, r7, r1
 800a626:	881a      	ldrh	r2, [r3, #0]
 800a628:	187b      	adds	r3, r7, r1
 800a62a:	3201      	adds	r2, #1
 800a62c:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 800a62e:	187b      	adds	r3, r7, r1
 800a630:	881b      	ldrh	r3, [r3, #0]
 800a632:	2bb2      	cmp	r3, #178	; 0xb2
 800a634:	d905      	bls.n	800a642 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 800a636:	4b18      	ldr	r3, [pc, #96]	; (800a698 <receive_astronode_answer+0x108>)
 800a638:	0018      	movs	r0, r3
 800a63a:	f7f8 fd5b 	bl	80030f4 <send_debug_logs>
                return RS_FAILURE;
 800a63e:	2300      	movs	r3, #0
 800a640:	e022      	b.n	800a688 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 800a642:	230f      	movs	r3, #15
 800a644:	18fb      	adds	r3, r7, r3
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	2b03      	cmp	r3, #3
 800a64a:	d10c      	bne.n	800a666 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 800a64c:	2216      	movs	r2, #22
 800a64e:	18bb      	adds	r3, r7, r2
 800a650:	881b      	ldrh	r3, [r3, #0]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d907      	bls.n	800a666 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	18ba      	adds	r2, r7, r2
 800a65a:	8812      	ldrh	r2, [r2, #0]
 800a65c:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800a65e:	2315      	movs	r3, #21
 800a660:	18fb      	adds	r3, r7, r3
 800a662:	2201      	movs	r2, #1
 800a664:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 800a666:	2315      	movs	r3, #21
 800a668:	18fb      	adds	r3, r7, r3
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	2201      	movs	r2, #1
 800a66e:	4053      	eors	r3, r2
 800a670:	b2db      	uxtb	r3, r3
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1a2      	bne.n	800a5bc <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 800a676:	4b09      	ldr	r3, [pc, #36]	; (800a69c <receive_astronode_answer+0x10c>)
 800a678:	0018      	movs	r0, r3
 800a67a:	f7f8 fd3b 	bl	80030f4 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	0018      	movs	r0, r3
 800a682:	f7f8 fd37 	bl	80030f4 <send_debug_logs>

    return RS_SUCCESS;
 800a686:	2301      	movs	r3, #1
}
 800a688:	0018      	movs	r0, r3
 800a68a:	46bd      	mov	sp, r7
 800a68c:	b006      	add	sp, #24
 800a68e:	bdb0      	pop	{r4, r5, r7, pc}
 800a690:	000005dc 	.word	0x000005dc
 800a694:	080156dc 	.word	0x080156dc
 800a698:	08015700 	.word	0x08015700
 800a69c:	0801574c 	.word	0x0801574c

0800a6a0 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	0002      	movs	r2, r0
 800a6a8:	6039      	str	r1, [r7, #0]
 800a6aa:	1dfb      	adds	r3, r7, #7
 800a6ac:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800a6ae:	1dfb      	adds	r3, r7, #7
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	091b      	lsrs	r3, r3, #4
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	001a      	movs	r2, r3
 800a6b8:	4b08      	ldr	r3, [pc, #32]	; (800a6dc <uint8_to_ascii_buffer+0x3c>)
 800a6ba:	5c9a      	ldrb	r2, [r3, r2]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 800a6c0:	1dfb      	adds	r3, r7, #7
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	220f      	movs	r2, #15
 800a6c6:	401a      	ands	r2, r3
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	4903      	ldr	r1, [pc, #12]	; (800a6dc <uint8_to_ascii_buffer+0x3c>)
 800a6ce:	5c8a      	ldrb	r2, [r1, r2]
 800a6d0:	701a      	strb	r2, [r3, #0]
}
 800a6d2:	46c0      	nop			; (mov r8, r8)
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	b002      	add	sp, #8
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	46c0      	nop			; (mov r8, r8)
 800a6dc:	08015aac 	.word	0x08015aac

0800a6e0 <iis2dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak iis2dh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800a6e0:	b5b0      	push	{r4, r5, r7, lr}
 800a6e2:	b086      	sub	sp, #24
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	0008      	movs	r0, r1
 800a6ea:	607a      	str	r2, [r7, #4]
 800a6ec:	0019      	movs	r1, r3
 800a6ee:	230b      	movs	r3, #11
 800a6f0:	18fb      	adds	r3, r7, r3
 800a6f2:	1c02      	adds	r2, r0, #0
 800a6f4:	701a      	strb	r2, [r3, #0]
 800a6f6:	2308      	movs	r3, #8
 800a6f8:	18fb      	adds	r3, r7, r3
 800a6fa:	1c0a      	adds	r2, r1, #0
 800a6fc:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d102      	bne.n	800a70a <iis2dh_read_reg+0x2a>
 800a704:	2301      	movs	r3, #1
 800a706:	425b      	negs	r3, r3
 800a708:	e00f      	b.n	800a72a <iis2dh_read_reg+0x4a>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	685c      	ldr	r4, [r3, #4]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	68d8      	ldr	r0, [r3, #12]
 800a712:	2308      	movs	r3, #8
 800a714:	18fb      	adds	r3, r7, r3
 800a716:	881d      	ldrh	r5, [r3, #0]
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	230b      	movs	r3, #11
 800a71c:	18fb      	adds	r3, r7, r3
 800a71e:	7819      	ldrb	r1, [r3, #0]
 800a720:	002b      	movs	r3, r5
 800a722:	47a0      	blx	r4
 800a724:	0003      	movs	r3, r0
 800a726:	617b      	str	r3, [r7, #20]

  return ret;
 800a728:	697b      	ldr	r3, [r7, #20]
}
 800a72a:	0018      	movs	r0, r3
 800a72c:	46bd      	mov	sp, r7
 800a72e:	b006      	add	sp, #24
 800a730:	bdb0      	pop	{r4, r5, r7, pc}

0800a732 <iis2dh_write_reg>:
  *
  */
int32_t __weak iis2dh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800a732:	b5b0      	push	{r4, r5, r7, lr}
 800a734:	b086      	sub	sp, #24
 800a736:	af00      	add	r7, sp, #0
 800a738:	60f8      	str	r0, [r7, #12]
 800a73a:	0008      	movs	r0, r1
 800a73c:	607a      	str	r2, [r7, #4]
 800a73e:	0019      	movs	r1, r3
 800a740:	230b      	movs	r3, #11
 800a742:	18fb      	adds	r3, r7, r3
 800a744:	1c02      	adds	r2, r0, #0
 800a746:	701a      	strb	r2, [r3, #0]
 800a748:	2308      	movs	r3, #8
 800a74a:	18fb      	adds	r3, r7, r3
 800a74c:	1c0a      	adds	r2, r1, #0
 800a74e:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d102      	bne.n	800a75c <iis2dh_write_reg+0x2a>
 800a756:	2301      	movs	r3, #1
 800a758:	425b      	negs	r3, r3
 800a75a:	e00f      	b.n	800a77c <iis2dh_write_reg+0x4a>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681c      	ldr	r4, [r3, #0]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	68d8      	ldr	r0, [r3, #12]
 800a764:	2308      	movs	r3, #8
 800a766:	18fb      	adds	r3, r7, r3
 800a768:	881d      	ldrh	r5, [r3, #0]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	230b      	movs	r3, #11
 800a76e:	18fb      	adds	r3, r7, r3
 800a770:	7819      	ldrb	r1, [r3, #0]
 800a772:	002b      	movs	r3, r5
 800a774:	47a0      	blx	r4
 800a776:	0003      	movs	r3, r0
 800a778:	617b      	str	r3, [r7, #20]

  return ret;
 800a77a:	697b      	ldr	r3, [r7, #20]
}
 800a77c:	0018      	movs	r0, r3
 800a77e:	46bd      	mov	sp, r7
 800a780:	b006      	add	sp, #24
 800a782:	bdb0      	pop	{r4, r5, r7, pc}

0800a784 <iis2dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_operating_mode_set(const stmdev_ctx_t *ctx,
                                  iis2dh_op_md_t val)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b086      	sub	sp, #24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	000a      	movs	r2, r1
 800a78e:	1cfb      	adds	r3, r7, #3
 800a790:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg1_t ctrl_reg1;
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800a792:	2310      	movs	r3, #16
 800a794:	18fa      	adds	r2, r7, r3
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	2301      	movs	r3, #1
 800a79a:	2120      	movs	r1, #32
 800a79c:	f7ff ffa0 	bl	800a6e0 <iis2dh_read_reg>
 800a7a0:	0003      	movs	r3, r0
 800a7a2:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d108      	bne.n	800a7bc <iis2dh_operating_mode_set+0x38>
  {
    ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800a7aa:	230c      	movs	r3, #12
 800a7ac:	18fa      	adds	r2, r7, r3
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	2123      	movs	r1, #35	; 0x23
 800a7b4:	f7ff ff94 	bl	800a6e0 <iis2dh_read_reg>
 800a7b8:	0003      	movs	r3, r0
 800a7ba:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d138      	bne.n	800a834 <iis2dh_operating_mode_set+0xb0>
  {
    if (val == IIS2DH_HR_12bit)
 800a7c2:	1cfb      	adds	r3, r7, #3
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10b      	bne.n	800a7e2 <iis2dh_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
 800a7ca:	2310      	movs	r3, #16
 800a7cc:	18fb      	adds	r3, r7, r3
 800a7ce:	781a      	ldrb	r2, [r3, #0]
 800a7d0:	2108      	movs	r1, #8
 800a7d2:	438a      	bics	r2, r1
 800a7d4:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
 800a7d6:	230c      	movs	r3, #12
 800a7d8:	18fb      	adds	r3, r7, r3
 800a7da:	781a      	ldrb	r2, [r3, #0]
 800a7dc:	2108      	movs	r1, #8
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	701a      	strb	r2, [r3, #0]
    }

    if (val == IIS2DH_NM_10bit)
 800a7e2:	1cfb      	adds	r3, r7, #3
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d10b      	bne.n	800a802 <iis2dh_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
 800a7ea:	2310      	movs	r3, #16
 800a7ec:	18fb      	adds	r3, r7, r3
 800a7ee:	781a      	ldrb	r2, [r3, #0]
 800a7f0:	2108      	movs	r1, #8
 800a7f2:	438a      	bics	r2, r1
 800a7f4:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 800a7f6:	230c      	movs	r3, #12
 800a7f8:	18fb      	adds	r3, r7, r3
 800a7fa:	781a      	ldrb	r2, [r3, #0]
 800a7fc:	2108      	movs	r1, #8
 800a7fe:	438a      	bics	r2, r1
 800a800:	701a      	strb	r2, [r3, #0]
    }

    if (val == IIS2DH_LP_8bit)
 800a802:	1cfb      	adds	r3, r7, #3
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	2b02      	cmp	r3, #2
 800a808:	d10b      	bne.n	800a822 <iis2dh_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
 800a80a:	2310      	movs	r3, #16
 800a80c:	18fb      	adds	r3, r7, r3
 800a80e:	781a      	ldrb	r2, [r3, #0]
 800a810:	2108      	movs	r1, #8
 800a812:	430a      	orrs	r2, r1
 800a814:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 800a816:	230c      	movs	r3, #12
 800a818:	18fb      	adds	r3, r7, r3
 800a81a:	781a      	ldrb	r2, [r3, #0]
 800a81c:	2108      	movs	r1, #8
 800a81e:	438a      	bics	r2, r1
 800a820:	701a      	strb	r2, [r3, #0]
    }

    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800a822:	2310      	movs	r3, #16
 800a824:	18fa      	adds	r2, r7, r3
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	2301      	movs	r3, #1
 800a82a:	2120      	movs	r1, #32
 800a82c:	f7ff ff81 	bl	800a732 <iis2dh_write_reg>
 800a830:	0003      	movs	r3, r0
 800a832:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d108      	bne.n	800a84c <iis2dh_operating_mode_set+0xc8>
  {
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800a83a:	230c      	movs	r3, #12
 800a83c:	18fa      	adds	r2, r7, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	2301      	movs	r3, #1
 800a842:	2123      	movs	r1, #35	; 0x23
 800a844:	f7ff ff75 	bl	800a732 <iis2dh_write_reg>
 800a848:	0003      	movs	r3, r0
 800a84a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800a84c:	697b      	ldr	r3, [r7, #20]
}
 800a84e:	0018      	movs	r0, r3
 800a850:	46bd      	mov	sp, r7
 800a852:	b006      	add	sp, #24
 800a854:	bd80      	pop	{r7, pc}

0800a856 <iis2dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_data_rate_set(const stmdev_ctx_t *ctx, iis2dh_odr_t val)
{
 800a856:	b590      	push	{r4, r7, lr}
 800a858:	b085      	sub	sp, #20
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	000a      	movs	r2, r1
 800a860:	1cfb      	adds	r3, r7, #3
 800a862:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800a864:	2408      	movs	r4, #8
 800a866:	193a      	adds	r2, r7, r4
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	2301      	movs	r3, #1
 800a86c:	2120      	movs	r1, #32
 800a86e:	f7ff ff37 	bl	800a6e0 <iis2dh_read_reg>
 800a872:	0003      	movs	r3, r0
 800a874:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d115      	bne.n	800a8a8 <iis2dh_data_rate_set+0x52>
  {
    ctrl_reg1.odr = (uint8_t)val;
 800a87c:	1cfb      	adds	r3, r7, #3
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	220f      	movs	r2, #15
 800a882:	4013      	ands	r3, r2
 800a884:	b2da      	uxtb	r2, r3
 800a886:	193b      	adds	r3, r7, r4
 800a888:	0110      	lsls	r0, r2, #4
 800a88a:	781a      	ldrb	r2, [r3, #0]
 800a88c:	210f      	movs	r1, #15
 800a88e:	400a      	ands	r2, r1
 800a890:	1c11      	adds	r1, r2, #0
 800a892:	1c02      	adds	r2, r0, #0
 800a894:	430a      	orrs	r2, r1
 800a896:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800a898:	193a      	adds	r2, r7, r4
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	2301      	movs	r3, #1
 800a89e:	2120      	movs	r1, #32
 800a8a0:	f7ff ff47 	bl	800a732 <iis2dh_write_reg>
 800a8a4:	0003      	movs	r3, r0
 800a8a6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
}
 800a8aa:	0018      	movs	r0, r3
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	b005      	add	sp, #20
 800a8b0:	bd90      	pop	{r4, r7, pc}

0800a8b2 <iis2dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_full_scale_set(const stmdev_ctx_t *ctx, iis2dh_fs_t val)
{
 800a8b2:	b590      	push	{r4, r7, lr}
 800a8b4:	b085      	sub	sp, #20
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
 800a8ba:	000a      	movs	r2, r1
 800a8bc:	1cfb      	adds	r3, r7, #3
 800a8be:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800a8c0:	2408      	movs	r4, #8
 800a8c2:	193a      	adds	r2, r7, r4
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	2123      	movs	r1, #35	; 0x23
 800a8ca:	f7ff ff09 	bl	800a6e0 <iis2dh_read_reg>
 800a8ce:	0003      	movs	r3, r0
 800a8d0:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d117      	bne.n	800a908 <iis2dh_full_scale_set+0x56>
  {
    ctrl_reg4.fs = (uint8_t)val;
 800a8d8:	1cfb      	adds	r3, r7, #3
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	2203      	movs	r2, #3
 800a8de:	4013      	ands	r3, r2
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	193b      	adds	r3, r7, r4
 800a8e4:	2103      	movs	r1, #3
 800a8e6:	400a      	ands	r2, r1
 800a8e8:	0110      	lsls	r0, r2, #4
 800a8ea:	781a      	ldrb	r2, [r3, #0]
 800a8ec:	2130      	movs	r1, #48	; 0x30
 800a8ee:	438a      	bics	r2, r1
 800a8f0:	1c11      	adds	r1, r2, #0
 800a8f2:	1c02      	adds	r2, r0, #0
 800a8f4:	430a      	orrs	r2, r1
 800a8f6:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800a8f8:	193a      	adds	r2, r7, r4
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	2123      	movs	r1, #35	; 0x23
 800a900:	f7ff ff17 	bl	800a732 <iis2dh_write_reg>
 800a904:	0003      	movs	r3, r0
 800a906:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a908:	68fb      	ldr	r3, [r7, #12]
}
 800a90a:	0018      	movs	r0, r3
 800a90c:	46bd      	mov	sp, r7
 800a90e:	b005      	add	sp, #20
 800a910:	bd90      	pop	{r4, r7, pc}

0800a912 <iis2dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b084      	sub	sp, #16
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_WHO_AM_I, buff, 1);
 800a91c:	683a      	ldr	r2, [r7, #0]
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	2301      	movs	r3, #1
 800a922:	210f      	movs	r1, #15
 800a924:	f7ff fedc 	bl	800a6e0 <iis2dh_read_reg>
 800a928:	0003      	movs	r3, r0
 800a92a:	60fb      	str	r3, [r7, #12]

  return ret;
 800a92c:	68fb      	ldr	r3, [r7, #12]
}
 800a92e:	0018      	movs	r0, r3
 800a930:	46bd      	mov	sp, r7
 800a932:	b004      	add	sp, #16
 800a934:	bd80      	pop	{r7, pc}

0800a936 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ()
{
 800a936:	b590      	push	{r4, r7, lr}
 800a938:	b087      	sub	sp, #28
 800a93a:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 800a93c:	1dfb      	adds	r3, r7, #7
 800a93e:	2200      	movs	r2, #0
 800a940:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 800a942:	e012      	b.n	800a96a <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 800a944:	f7f9 f822 	bl	800398c <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 800a948:	1dfc      	adds	r4, r7, #7
 800a94a:	2300      	movs	r3, #0
 800a94c:	9303      	str	r3, [sp, #12]
 800a94e:	2301      	movs	r3, #1
 800a950:	9302      	str	r3, [sp, #8]
 800a952:	2301      	movs	r3, #1
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	2301      	movs	r3, #1
 800a958:	9300      	str	r3, [sp, #0]
 800a95a:	2300      	movs	r3, #0
 800a95c:	2201      	movs	r2, #1
 800a95e:	2101      	movs	r1, #1
 800a960:	2001      	movs	r0, #1
 800a962:	f7fe fa39 	bl	8008dd8 <astronode_send_cfg_wr>
 800a966:	0003      	movs	r3, r0
 800a968:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 800a96a:	1dfb      	adds	r3, r7, #7
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	2201      	movs	r2, #1
 800a970:	4053      	eors	r3, r2
 800a972:	b2db      	uxtb	r3, r3
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1e5      	bne.n	800a944 <my_astro_init+0xe>
	}

	if ( cfg_wr )
 800a978:	1dfb      	adds	r3, r7, #7
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d00d      	beq.n	800a99c <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 800a980:	f7fe fe90 	bl	80096a4 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 800a984:	f7fe f9f0 	bl	8008d68 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 800a988:	f7fe ff86 	bl	8009898 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 800a98c:	f7fe fb7a 	bl	8009084 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 800a990:	f7fe face 	bl	8008f30 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 800a994:	f7fe fe0a 	bl	80095ac <astronode_send_pld_fr>
		return true ;
 800a998:	2301      	movs	r3, #1
 800a99a:	e000      	b.n	800a99e <my_astro_init+0x68>
	}
	else
	{
		return false ;
 800a99c:	2300      	movs	r3, #0
	}
}
 800a99e:	0018      	movs	r0, r3
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	b003      	add	sp, #12
 800a9a4:	bd90      	pop	{r4, r7, pc}
	...

0800a9a8 <my_astro_add_payload_2_queue>:

bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	0002      	movs	r2, r0
 800a9b0:	6039      	str	r1, [r7, #0]
 800a9b2:	1dbb      	adds	r3, r7, #6
 800a9b4:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	0018      	movs	r0, r3
 800a9ba:	f7f5 fba3 	bl	8000104 <strlen>
 800a9be:	0003      	movs	r3, r0
 800a9c0:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2ba0      	cmp	r3, #160	; 0xa0
 800a9c6:	d80b      	bhi.n	800a9e0 <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	6839      	ldr	r1, [r7, #0]
 800a9ce:	1dbb      	adds	r3, r7, #6
 800a9d0:	881b      	ldrh	r3, [r3, #0]
 800a9d2:	0018      	movs	r0, r3
 800a9d4:	f7fe fd40 	bl	8009458 <astronode_send_pld_er>
 800a9d8:	1e03      	subs	r3, r0, #0
 800a9da:	d005      	beq.n	800a9e8 <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e004      	b.n	800a9ea <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 800a9e0:	4b04      	ldr	r3, [pc, #16]	; (800a9f4 <my_astro_add_payload_2_queue+0x4c>)
 800a9e2:	0018      	movs	r0, r3
 800a9e4:	f7f8 fb86 	bl	80030f4 <send_debug_logs>
	}
	return false ;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	0018      	movs	r0, r3
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	b004      	add	sp, #16
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	46c0      	nop			; (mov r8, r8)
 800a9f4:	08015778 	.word	0x08015778

0800a9f8 <my_astro_handle_evt>:
bool my_astro_handle_evt ( void )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 800a9fc:	4b19      	ldr	r3, [pc, #100]	; (800aa64 <my_astro_handle_evt+0x6c>)
 800a9fe:	0018      	movs	r0, r3
 800aa00:	f7f8 fb78 	bl	80030f4 <send_debug_logs>
	astronode_send_evt_rr () ;
 800aa04:	f7fe fbe8 	bl	80091d8 <astronode_send_evt_rr>
	if (is_sak_available () )
 800aa08:	f7ff f9d4 	bl	8009db4 <is_sak_available>
 800aa0c:	1e03      	subs	r3, r0, #0
 800aa0e:	d007      	beq.n	800aa20 <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 800aa10:	f7fe feac 	bl	800976c <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 800aa14:	f7fe ff00 	bl	8009818 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 800aa18:	4b13      	ldr	r3, [pc, #76]	; (800aa68 <my_astro_handle_evt+0x70>)
 800aa1a:	0018      	movs	r0, r3
 800aa1c:	f7f8 fb6a 	bl	80030f4 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 800aa20:	f7ff f9d2 	bl	8009dc8 <is_astronode_reset>
 800aa24:	1e03      	subs	r3, r0, #0
 800aa26:	d005      	beq.n	800aa34 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 800aa28:	4b10      	ldr	r3, [pc, #64]	; (800aa6c <my_astro_handle_evt+0x74>)
 800aa2a:	0018      	movs	r0, r3
 800aa2c:	f7f8 fb62 	bl	80030f4 <send_debug_logs>
	  astronode_send_res_cr () ;
 800aa30:	f7fe fdf8 	bl	8009624 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 800aa34:	f7ff f9d2 	bl	8009ddc <is_command_available>
 800aa38:	1e03      	subs	r3, r0, #0
 800aa3a:	d00e      	beq.n	800aa5a <my_astro_handle_evt+0x62>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 800aa3c:	4b0c      	ldr	r3, [pc, #48]	; (800aa70 <my_astro_handle_evt+0x78>)
 800aa3e:	0018      	movs	r0, r3
 800aa40:	f7f8 fb58 	bl	80030f4 <send_debug_logs>
	  if ( astronode_send_cmd_rr ( my_astro_rcv_cmd ) )
 800aa44:	4b0b      	ldr	r3, [pc, #44]	; (800aa74 <my_astro_handle_evt+0x7c>)
 800aa46:	0018      	movs	r0, r3
 800aa48:	f7ff f810 	bl	8009a6c <astronode_send_cmd_rr>
 800aa4c:	1e03      	subs	r3, r0, #0
 800aa4e:	d002      	beq.n	800aa56 <my_astro_handle_evt+0x5e>
	  {
		  astro_rcv_cmd_flag = true ;
 800aa50:	4b09      	ldr	r3, [pc, #36]	; (800aa78 <my_astro_handle_evt+0x80>)
 800aa52:	2201      	movs	r2, #1
 800aa54:	701a      	strb	r2, [r3, #0]
	  }
	  astronode_send_cmd_cr () ;
 800aa56:	f7fe ffc9 	bl	80099ec <astronode_send_cmd_cr>
	}
	return true ;
 800aa5a:	2301      	movs	r3, #1
}
 800aa5c:	0018      	movs	r0, r3
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	46c0      	nop			; (mov r8, r8)
 800aa64:	080157e0 	.word	0x080157e0
 800aa68:	08015814 	.word	0x08015814
 800aa6c:	08015858 	.word	0x08015858
 800aa70:	08015894 	.word	0x08015894
 800aa74:	20000c1c 	.word	0x20000c1c
 800aa78:	20000c1a 	.word	0x20000c1a

0800aa7c <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800aa86:	683a      	ldr	r2, [r7, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	0011      	movs	r1, r2
 800aa8c:	0018      	movs	r0, r3
 800aa8e:	f7fe fc23 	bl	80092d8 <astronode_send_geo_wr>
}
 800aa92:	46c0      	nop			; (mov r8, r8)
 800aa94:	46bd      	mov	sp, r7
 800aa96:	b002      	add	sp, #8
 800aa98:	bd80      	pop	{r7, pc}
	...

0800aa9c <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 800aa9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa9e:	4ca5      	ldr	r4, [pc, #660]	; (800ad34 <my_gnss_acq_coordinates+0x298>)
 800aaa0:	44a5      	add	sp, r4
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 800aaa6:	4ba4      	ldr	r3, [pc, #656]	; (800ad38 <my_gnss_acq_coordinates+0x29c>)
 800aaa8:	18fb      	adds	r3, r7, r3
 800aaaa:	2200      	movs	r2, #0
 800aaac:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 800aaae:	4ba3      	ldr	r3, [pc, #652]	; (800ad3c <my_gnss_acq_coordinates+0x2a0>)
 800aab0:	18fb      	adds	r3, r7, r3
 800aab2:	2200      	movs	r2, #0
 800aab4:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 800aab6:	4ba2      	ldr	r3, [pc, #648]	; (800ad40 <my_gnss_acq_coordinates+0x2a4>)
 800aab8:	18fb      	adds	r3, r7, r3
 800aaba:	2200      	movs	r2, #0
 800aabc:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 800aabe:	4ba1      	ldr	r3, [pc, #644]	; (800ad44 <my_gnss_acq_coordinates+0x2a8>)
 800aac0:	18fb      	adds	r3, r7, r3
 800aac2:	2200      	movs	r2, #0
 800aac4:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 800aac6:	4ba0      	ldr	r3, [pc, #640]	; (800ad48 <my_gnss_acq_coordinates+0x2ac>)
 800aac8:	18fb      	adds	r3, r7, r3
 800aaca:	2200      	movs	r2, #0
 800aacc:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 800aace:	4b9f      	ldr	r3, [pc, #636]	; (800ad4c <my_gnss_acq_coordinates+0x2b0>)
 800aad0:	2486      	movs	r4, #134	; 0x86
 800aad2:	00a4      	lsls	r4, r4, #2
 800aad4:	191b      	adds	r3, r3, r4
 800aad6:	19db      	adds	r3, r3, r7
 800aad8:	2200      	movs	r2, #0
 800aada:	601a      	str	r2, [r3, #0]
 800aadc:	3304      	adds	r3, #4
 800aade:	22f6      	movs	r2, #246	; 0xf6
 800aae0:	2100      	movs	r1, #0
 800aae2:	0018      	movs	r0, r3
 800aae4:	f002 fc6c 	bl	800d3c0 <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 800aae8:	4b99      	ldr	r3, [pc, #612]	; (800ad50 <my_gnss_acq_coordinates+0x2b4>)
 800aaea:	191b      	adds	r3, r3, r4
 800aaec:	19db      	adds	r3, r3, r7
 800aaee:	2200      	movs	r2, #0
 800aaf0:	601a      	str	r2, [r3, #0]
 800aaf2:	3304      	adds	r3, #4
 800aaf4:	22f6      	movs	r2, #246	; 0xf6
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	0018      	movs	r0, r3
 800aafa:	f002 fc61 	bl	800d3c0 <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 800aafe:	4b95      	ldr	r3, [pc, #596]	; (800ad54 <my_gnss_acq_coordinates+0x2b8>)
 800ab00:	2284      	movs	r2, #132	; 0x84
 800ab02:	0092      	lsls	r2, r2, #2
 800ab04:	18ba      	adds	r2, r7, r2
 800ab06:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 800ab08:	4b93      	ldr	r3, [pc, #588]	; (800ad58 <my_gnss_acq_coordinates+0x2bc>)
 800ab0a:	2283      	movs	r2, #131	; 0x83
 800ab0c:	0092      	lsls	r2, r2, #2
 800ab0e:	18ba      	adds	r2, r7, r2
 800ab10:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 800ab12:	4b92      	ldr	r3, [pc, #584]	; (800ad5c <my_gnss_acq_coordinates+0x2c0>)
 800ab14:	2282      	movs	r2, #130	; 0x82
 800ab16:	0092      	lsls	r2, r2, #2
 800ab18:	18ba      	adds	r2, r7, r2
 800ab1a:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 800ab1c:	4b90      	ldr	r3, [pc, #576]	; (800ad60 <my_gnss_acq_coordinates+0x2c4>)
 800ab1e:	2281      	movs	r2, #129	; 0x81
 800ab20:	0092      	lsls	r2, r2, #2
 800ab22:	18ba      	adds	r2, r7, r2
 800ab24:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '0' ;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2230      	movs	r2, #48	; 0x30
 800ab2a:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 1000 ;
 800ab2c:	6879      	ldr	r1, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	4b8c      	ldr	r3, [pc, #560]	; (800ad64 <my_gnss_acq_coordinates+0x2c8>)
 800ab32:	608a      	str	r2, [r1, #8]
 800ab34:	60cb      	str	r3, [r1, #12]
	my_tim_start () ;
 800ab36:	f7f9 f831 	bl	8003b9c <my_tim_start>
	while ( tim_seconds < fix_acq_ths )
 800ab3a:	e0c4      	b.n	800acc6 <my_gnss_acq_coordinates+0x22a>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, true ) ;
 800ab3c:	4c80      	ldr	r4, [pc, #512]	; (800ad40 <my_gnss_acq_coordinates+0x2a4>)
 800ab3e:	193b      	adds	r3, r7, r4
 800ab40:	2101      	movs	r1, #1
 800ab42:	0018      	movs	r0, r3
 800ab44:	f7f8 fee4 	bl	8003910 <my_gnss_receive_byte>
		if ( rx_byte )
 800ab48:	0020      	movs	r0, r4
 800ab4a:	183b      	adds	r3, r7, r0
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	4c7b      	ldr	r4, [pc, #492]	; (800ad3c <my_gnss_acq_coordinates+0x2a0>)
 800ab50:	193a      	adds	r2, r7, r4
 800ab52:	1939      	adds	r1, r7, r4
 800ab54:	7809      	ldrb	r1, [r1, #0]
 800ab56:	7011      	strb	r1, [r2, #0]
 800ab58:	4d7b      	ldr	r5, [pc, #492]	; (800ad48 <my_gnss_acq_coordinates+0x2ac>)
 800ab5a:	197a      	adds	r2, r7, r5
 800ab5c:	1979      	adds	r1, r7, r5
 800ab5e:	7809      	ldrb	r1, [r1, #0]
 800ab60:	7011      	strb	r1, [r2, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d100      	bne.n	800ab68 <my_gnss_acq_coordinates+0xcc>
 800ab66:	e0ae      	b.n	800acc6 <my_gnss_acq_coordinates+0x22a>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 800ab68:	4b76      	ldr	r3, [pc, #472]	; (800ad44 <my_gnss_acq_coordinates+0x2a8>)
 800ab6a:	18fa      	adds	r2, r7, r3
 800ab6c:	2684      	movs	r6, #132	; 0x84
 800ab6e:	0076      	lsls	r6, r6, #1
 800ab70:	19b9      	adds	r1, r7, r6
 800ab72:	183b      	adds	r3, r7, r0
 800ab74:	0018      	movs	r0, r3
 800ab76:	f000 fc21 	bl	800b3bc <my_nmea_message>
 800ab7a:	0001      	movs	r1, r0
 800ab7c:	193b      	adds	r3, r7, r4
 800ab7e:	193a      	adds	r2, r7, r4
 800ab80:	7812      	ldrb	r2, [r2, #0]
 800ab82:	701a      	strb	r2, [r3, #0]
 800ab84:	197b      	adds	r3, r7, r5
 800ab86:	197a      	adds	r2, r7, r5
 800ab88:	7812      	ldrb	r2, [r2, #0]
 800ab8a:	701a      	strb	r2, [r3, #0]
 800ab8c:	2902      	cmp	r1, #2
 800ab8e:	d000      	beq.n	800ab92 <my_gnss_acq_coordinates+0xf6>
 800ab90:	e099      	b.n	800acc6 <my_gnss_acq_coordinates+0x22a>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 800ab92:	19bb      	adds	r3, r7, r6
 800ab94:	0018      	movs	r0, r3
 800ab96:	f000 fcd1 	bl	800b53c <is_my_nmea_checksum_ok>
 800ab9a:	0003      	movs	r3, r0
 800ab9c:	0019      	movs	r1, r3
 800ab9e:	193b      	adds	r3, r7, r4
 800aba0:	193a      	adds	r2, r7, r4
 800aba2:	7812      	ldrb	r2, [r2, #0]
 800aba4:	701a      	strb	r2, [r3, #0]
 800aba6:	197b      	adds	r3, r7, r5
 800aba8:	197a      	adds	r2, r7, r5
 800abaa:	7812      	ldrb	r2, [r2, #0]
 800abac:	701a      	strb	r2, [r3, #0]
 800abae:	2900      	cmp	r1, #0
 800abb0:	d100      	bne.n	800abb4 <my_gnss_acq_coordinates+0x118>
 800abb2:	e088      	b.n	800acc6 <my_gnss_acq_coordinates+0x22a>
				{
					if ( !is_utc_saved )
 800abb4:	193b      	adds	r3, r7, r4
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	2201      	movs	r2, #1
 800abba:	4053      	eors	r3, r2
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d015      	beq.n	800abee <my_gnss_acq_coordinates+0x152>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	7c1b      	ldrb	r3, [r3, #16]
 800abc6:	2b33      	cmp	r3, #51	; 0x33
 800abc8:	d111      	bne.n	800abee <my_gnss_acq_coordinates+0x152>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 800abca:	2383      	movs	r3, #131	; 0x83
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	18fb      	adds	r3, r7, r3
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	19bb      	adds	r3, r7, r6
 800abd4:	0011      	movs	r1, r2
 800abd6:	0018      	movs	r0, r3
 800abd8:	f002 fc67 	bl	800d4aa <strstr>
 800abdc:	1e03      	subs	r3, r0, #0
 800abde:	d006      	beq.n	800abee <my_gnss_acq_coordinates+0x152>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800abe0:	19bb      	adds	r3, r7, r6
 800abe2:	0018      	movs	r0, r3
 800abe4:	f000 f9a6 	bl	800af34 <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 800abe8:	193b      	adds	r3, r7, r4
 800abea:	2201      	movs	r2, #1
 800abec:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS ) // Nie ma co tego później monitorować, bo jest cała kaskada wiadomości
 800abee:	2384      	movs	r3, #132	; 0x84
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	18fb      	adds	r3, r7, r3
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	2484      	movs	r4, #132	; 0x84
 800abf8:	0064      	lsls	r4, r4, #1
 800abfa:	193b      	adds	r3, r7, r4
 800abfc:	0011      	movs	r1, r2
 800abfe:	0018      	movs	r0, r3
 800ac00:	f002 fc53 	bl	800d4aa <strstr>
 800ac04:	1e03      	subs	r3, r0, #0
 800ac06:	d012      	beq.n	800ac2e <my_gnss_acq_coordinates+0x192>
 800ac08:	4d4f      	ldr	r5, [pc, #316]	; (800ad48 <my_gnss_acq_coordinates+0x2ac>)
 800ac0a:	197b      	adds	r3, r7, r5
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d80d      	bhi.n	800ac2e <my_gnss_acq_coordinates+0x192>
					{
						if ( tim_seconds > min_tns_time_ths )
 800ac12:	4b55      	ldr	r3, [pc, #340]	; (800ad68 <my_gnss_acq_coordinates+0x2cc>)
 800ac14:	881a      	ldrh	r2, [r3, #0]
 800ac16:	4b55      	ldr	r3, [pc, #340]	; (800ad6c <my_gnss_acq_coordinates+0x2d0>)
 800ac18:	881b      	ldrh	r3, [r3, #0]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d85b      	bhi.n	800acd6 <my_gnss_acq_coordinates+0x23a>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 800ac1e:	193b      	adds	r3, r7, r4
 800ac20:	0018      	movs	r0, r3
 800ac22:	f000 fe31 	bl	800b888 <my_nmea_get_gsv_tns>
 800ac26:	0003      	movs	r3, r0
 800ac28:	001a      	movs	r2, r3
 800ac2a:	197b      	adds	r3, r7, r5
 800ac2c:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) ) // Koniecznie monitorować cały czas
 800ac2e:	2382      	movs	r3, #130	; 0x82
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	18fb      	adds	r3, r7, r3
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	2484      	movs	r4, #132	; 0x84
 800ac38:	0064      	lsls	r4, r4, #1
 800ac3a:	193b      	adds	r3, r7, r4
 800ac3c:	0011      	movs	r1, r2
 800ac3e:	0018      	movs	r0, r3
 800ac40:	f002 fc33 	bl	800d4aa <strstr>
 800ac44:	1e03      	subs	r3, r0, #0
 800ac46:	d010      	beq.n	800ac6a <my_gnss_acq_coordinates+0x1ce>
					{
						fix3d->fix_mode = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 800ac48:	193b      	adds	r3, r7, r4
 800ac4a:	0018      	movs	r0, r3
 800ac4c:	f000 fc22 	bl	800b494 <get_my_nmea_gngsa_fixed_mode_s>
 800ac50:	0003      	movs	r3, r0
 800ac52:	001a      	movs	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	741a      	strb	r2, [r3, #16]
						fix3d->pdop = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 800ac58:	193b      	adds	r3, r7, r4
 800ac5a:	0018      	movs	r0, r3
 800ac5c:	f000 fc25 	bl	800b4aa <get_my_nmea_gngsa_pdop_d>
 800ac60:	0002      	movs	r2, r0
 800ac62:	000b      	movs	r3, r1
 800ac64:	6879      	ldr	r1, [r7, #4]
 800ac66:	608a      	str	r2, [r1, #8]
 800ac68:	60cb      	str	r3, [r1, #12]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) && is_utc_saved )
 800ac6a:	2381      	movs	r3, #129	; 0x81
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	18fb      	adds	r3, r7, r3
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	2384      	movs	r3, #132	; 0x84
 800ac74:	005b      	lsls	r3, r3, #1
 800ac76:	18fb      	adds	r3, r7, r3
 800ac78:	0011      	movs	r1, r2
 800ac7a:	0018      	movs	r0, r3
 800ac7c:	f002 fc15 	bl	800d4aa <strstr>
 800ac80:	1e03      	subs	r3, r0, #0
 800ac82:	d020      	beq.n	800acc6 <my_gnss_acq_coordinates+0x22a>
 800ac84:	4b2d      	ldr	r3, [pc, #180]	; (800ad3c <my_gnss_acq_coordinates+0x2a0>)
 800ac86:	18fb      	adds	r3, r7, r3
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d01b      	beq.n	800acc6 <my_gnss_acq_coordinates+0x22a>
					{
						if ( fix3d->fix_mode != NMEA_3D_FIX ) // Solution for Issue #3 Handle a lost of fix during acquisition.
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	7c1b      	ldrb	r3, [r3, #16]
 800ac92:	2b33      	cmp	r3, #51	; 0x33
 800ac94:	d121      	bne.n	800acda <my_gnss_acq_coordinates+0x23e>
						{
							break ;
						}
						memcpy ( gngll_message , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 800ac96:	4b2e      	ldr	r3, [pc, #184]	; (800ad50 <my_gnss_acq_coordinates+0x2b4>)
 800ac98:	2186      	movs	r1, #134	; 0x86
 800ac9a:	0089      	lsls	r1, r1, #2
 800ac9c:	185b      	adds	r3, r3, r1
 800ac9e:	19da      	adds	r2, r3, r7
 800aca0:	4b2a      	ldr	r3, [pc, #168]	; (800ad4c <my_gnss_acq_coordinates+0x2b0>)
 800aca2:	185b      	adds	r3, r3, r1
 800aca4:	19db      	adds	r3, r3, r7
 800aca6:	0010      	movs	r0, r2
 800aca8:	0019      	movs	r1, r3
 800acaa:	23fa      	movs	r3, #250	; 0xfa
 800acac:	001a      	movs	r2, r3
 800acae:	f002 fcb4 	bl	800d61a <memcpy>
						if ( fix3d->pdop <= pdop_ths )
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6898      	ldr	r0, [r3, #8]
 800acb6:	68d9      	ldr	r1, [r3, #12]
 800acb8:	4b2d      	ldr	r3, [pc, #180]	; (800ad70 <my_gnss_acq_coordinates+0x2d4>)
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	f7f5 fbd3 	bl	8000468 <__aeabi_dcmple>
 800acc2:	1e03      	subs	r3, r0, #0
 800acc4:	d10b      	bne.n	800acde <my_gnss_acq_coordinates+0x242>
	while ( tim_seconds < fix_acq_ths )
 800acc6:	4b28      	ldr	r3, [pc, #160]	; (800ad68 <my_gnss_acq_coordinates+0x2cc>)
 800acc8:	881a      	ldrh	r2, [r3, #0]
 800acca:	4b2a      	ldr	r3, [pc, #168]	; (800ad74 <my_gnss_acq_coordinates+0x2d8>)
 800accc:	881b      	ldrh	r3, [r3, #0]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d200      	bcs.n	800acd4 <my_gnss_acq_coordinates+0x238>
 800acd2:	e733      	b.n	800ab3c <my_gnss_acq_coordinates+0xa0>
 800acd4:	e004      	b.n	800ace0 <my_gnss_acq_coordinates+0x244>
							break ;
 800acd6:	46c0      	nop			; (mov r8, r8)
 800acd8:	e002      	b.n	800ace0 <my_gnss_acq_coordinates+0x244>
							break ;
 800acda:	46c0      	nop			; (mov r8, r8)
 800acdc:	e000      	b.n	800ace0 <my_gnss_acq_coordinates+0x244>
						{
							break ;
 800acde:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 800ace0:	f7f8 ff6c 	bl	8003bbc <my_tim_stop>
	// WYŁĄCZYĆ I ZASAVEOWAĆ BRAK GLONASS BO OSTATNIO NIE ZROBIŁEM SAVE TO NVRAM

	if ( gngll_message[0] )
 800ace4:	4b1a      	ldr	r3, [pc, #104]	; (800ad50 <my_gnss_acq_coordinates+0x2b4>)
 800ace6:	2286      	movs	r2, #134	; 0x86
 800ace8:	0092      	lsls	r2, r2, #2
 800acea:	189b      	adds	r3, r3, r2
 800acec:	19db      	adds	r3, r3, r7
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00a      	beq.n	800ad0a <my_gnss_acq_coordinates+0x26e>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	230c      	movs	r3, #12
 800acf8:	18fb      	adds	r3, r7, r3
 800acfa:	0011      	movs	r1, r2
 800acfc:	0018      	movs	r0, r3
 800acfe:	f000 fcd9 	bl	800b6b4 <my_nmea_get_gngll_coordinates>
		r = true ;
 800ad02:	4b0d      	ldr	r3, [pc, #52]	; (800ad38 <my_gnss_acq_coordinates+0x29c>)
 800ad04:	18fb      	adds	r3, r7, r3
 800ad06:	2201      	movs	r2, #1
 800ad08:	701a      	strb	r2, [r3, #0]
	}
	fix3d->acq_time = tim_seconds ;
 800ad0a:	4b17      	ldr	r3, [pc, #92]	; (800ad68 <my_gnss_acq_coordinates+0x2cc>)
 800ad0c:	881a      	ldrh	r2, [r3, #0]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	825a      	strh	r2, [r3, #18]
	fix3d->acq_total_time += tim_seconds ; // UWAGA: Tutaj nie mogę zaokrąglać, bo będę tracił za każdym razem resztę co się uzbiera w duży błąd
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	695b      	ldr	r3, [r3, #20]
 800ad16:	4a14      	ldr	r2, [pc, #80]	; (800ad68 <my_gnss_acq_coordinates+0x2cc>)
 800ad18:	8812      	ldrh	r2, [r2, #0]
 800ad1a:	189a      	adds	r2, r3, r2
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	615a      	str	r2, [r3, #20]
	return r ;
 800ad20:	4b05      	ldr	r3, [pc, #20]	; (800ad38 <my_gnss_acq_coordinates+0x29c>)
 800ad22:	18fb      	adds	r3, r7, r3
 800ad24:	781b      	ldrb	r3, [r3, #0]
}
 800ad26:	0018      	movs	r0, r3
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	2387      	movs	r3, #135	; 0x87
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	449d      	add	sp, r3
 800ad30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad32:	46c0      	nop			; (mov r8, r8)
 800ad34:	fffffde4 	.word	0xfffffde4
 800ad38:	00000217 	.word	0x00000217
 800ad3c:	00000216 	.word	0x00000216
 800ad40:	00000203 	.word	0x00000203
 800ad44:	00000202 	.word	0x00000202
 800ad48:	00000215 	.word	0x00000215
 800ad4c:	fffffef0 	.word	0xfffffef0
 800ad50:	fffffdf4 	.word	0xfffffdf4
 800ad54:	080158d4 	.word	0x080158d4
 800ad58:	080158dc 	.word	0x080158dc
 800ad5c:	080158e4 	.word	0x080158e4
 800ad60:	080158ec 	.word	0x080158ec
 800ad64:	408f4000 	.word	0x408f4000
 800ad68:	20000c44 	.word	0x20000c44
 800ad6c:	2000001e 	.word	0x2000001e
 800ad70:	20000020 	.word	0x20000020
 800ad74:	2000001c 	.word	0x2000001c

0800ad78 <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 800ad82:	6879      	ldr	r1, [r7, #4]
 800ad84:	4b07      	ldr	r3, [pc, #28]	; (800ada4 <my_rtc_get_dt+0x2c>)
 800ad86:	2200      	movs	r2, #0
 800ad88:	0018      	movs	r0, r3
 800ad8a:	f7fb f9a5 	bl	80060d8 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	4b04      	ldr	r3, [pc, #16]	; (800ada4 <my_rtc_get_dt+0x2c>)
 800ad92:	2200      	movs	r2, #0
 800ad94:	0018      	movs	r0, r3
 800ad96:	f7fb f8b1 	bl	8005efc <HAL_RTC_GetTime>
}
 800ad9a:	46c0      	nop			; (mov r8, r8)
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	b002      	add	sp, #8
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	46c0      	nop			; (mov r8, r8)
 800ada4:	200006f4 	.word	0x200006f4

0800ada8 <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 800ada8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adaa:	b08d      	sub	sp, #52	; 0x34
 800adac:	af04      	add	r7, sp, #16
 800adae:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 800adb0:	2508      	movs	r5, #8
 800adb2:	1979      	adds	r1, r7, r5
 800adb4:	4b1b      	ldr	r3, [pc, #108]	; (800ae24 <my_rtc_get_dt_s+0x7c>)
 800adb6:	2200      	movs	r2, #0
 800adb8:	0018      	movs	r0, r3
 800adba:	f7fb f89f 	bl	8005efc <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 800adbe:	241c      	movs	r4, #28
 800adc0:	1939      	adds	r1, r7, r4
 800adc2:	4b18      	ldr	r3, [pc, #96]	; (800ae24 <my_rtc_get_dt_s+0x7c>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	0018      	movs	r0, r3
 800adc8:	f7fb f986 	bl	80060d8 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 800adcc:	0021      	movs	r1, r4
 800adce:	187b      	adds	r3, r7, r1
 800add0:	78db      	ldrb	r3, [r3, #3]
 800add2:	22fa      	movs	r2, #250	; 0xfa
 800add4:	00d2      	lsls	r2, r2, #3
 800add6:	189a      	adds	r2, r3, r2
 800add8:	187b      	adds	r3, r7, r1
 800adda:	785b      	ldrb	r3, [r3, #1]
 800addc:	469c      	mov	ip, r3
 800adde:	187b      	adds	r3, r7, r1
 800ade0:	789b      	ldrb	r3, [r3, #2]
 800ade2:	001c      	movs	r4, r3
 800ade4:	0028      	movs	r0, r5
 800ade6:	183b      	adds	r3, r7, r0
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	001d      	movs	r5, r3
 800adec:	183b      	adds	r3, r7, r0
 800adee:	785b      	ldrb	r3, [r3, #1]
 800adf0:	001e      	movs	r6, r3
 800adf2:	183b      	adds	r3, r7, r0
 800adf4:	789b      	ldrb	r3, [r3, #2]
 800adf6:	490c      	ldr	r1, [pc, #48]	; (800ae28 <my_rtc_get_dt_s+0x80>)
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	9303      	str	r3, [sp, #12]
 800adfc:	9602      	str	r6, [sp, #8]
 800adfe:	9501      	str	r5, [sp, #4]
 800ae00:	9400      	str	r4, [sp, #0]
 800ae02:	4663      	mov	r3, ip
 800ae04:	f002 fa46 	bl	800d294 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 800ae08:	211c      	movs	r1, #28
 800ae0a:	187b      	adds	r3, r7, r1
 800ae0c:	78db      	ldrb	r3, [r3, #3]
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	22fa      	movs	r2, #250	; 0xfa
 800ae12:	00d2      	lsls	r2, r2, #3
 800ae14:	4694      	mov	ip, r2
 800ae16:	4463      	add	r3, ip
 800ae18:	b29b      	uxth	r3, r3
}
 800ae1a:	0018      	movs	r0, r3
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	b009      	add	sp, #36	; 0x24
 800ae20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae22:	46c0      	nop			; (mov r8, r8)
 800ae24:	200006f4 	.word	0x200006f4
 800ae28:	0801593c 	.word	0x0801593c

0800ae2c <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 800ae2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae2e:	b0a9      	sub	sp, #164	; 0xa4
 800ae30:	af02      	add	r7, sp, #8
 800ae32:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 800ae34:	2434      	movs	r4, #52	; 0x34
 800ae36:	193a      	adds	r2, r7, r4
 800ae38:	2548      	movs	r5, #72	; 0x48
 800ae3a:	197b      	adds	r3, r7, r5
 800ae3c:	0011      	movs	r1, r2
 800ae3e:	0018      	movs	r0, r3
 800ae40:	f7ff ff9a 	bl	800ad78 <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 800ae44:	2680      	movs	r6, #128	; 0x80
 800ae46:	19bb      	adds	r3, r7, r6
 800ae48:	0018      	movs	r0, r3
 800ae4a:	f7ff ffad 	bl	800ada8 <my_rtc_get_dt_s>
	sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800ae4e:	4a36      	ldr	r2, [pc, #216]	; (800af28 <my_rtc_set_alarm+0xfc>)
 800ae50:	4936      	ldr	r1, [pc, #216]	; (800af2c <my_rtc_set_alarm+0x100>)
 800ae52:	234c      	movs	r3, #76	; 0x4c
 800ae54:	18f8      	adds	r0, r7, r3
 800ae56:	19bb      	adds	r3, r7, r6
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	232d      	movs	r3, #45	; 0x2d
 800ae5c:	f002 fa1a 	bl	800d294 <sprintf>
	send_debug_logs ( m ) ;
 800ae60:	234c      	movs	r3, #76	; 0x4c
 800ae62:	18fb      	adds	r3, r7, r3
 800ae64:	0018      	movs	r0, r3
 800ae66:	f7f8 f945 	bl	80030f4 <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 800ae6a:	193a      	adds	r2, r7, r4
 800ae6c:	197b      	adds	r3, r7, r5
 800ae6e:	0011      	movs	r1, r2
 800ae70:	0018      	movs	r0, r3
 800ae72:	f000 f935 	bl	800b0e0 <my_conv_rtc2timestamp>
 800ae76:	0002      	movs	r2, r0
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	189b      	adds	r3, r3, r2
 800ae7c:	2094      	movs	r0, #148	; 0x94
 800ae7e:	183a      	adds	r2, r7, r0
 800ae80:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 800ae82:	193a      	adds	r2, r7, r4
 800ae84:	1979      	adds	r1, r7, r5
 800ae86:	1838      	adds	r0, r7, r0
 800ae88:	6803      	ldr	r3, [r0, #0]
 800ae8a:	0018      	movs	r0, r3
 800ae8c:	f000 f99c 	bl	800b1c8 <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 800ae90:	193b      	adds	r3, r7, r4
 800ae92:	781a      	ldrb	r2, [r3, #0]
 800ae94:	210c      	movs	r1, #12
 800ae96:	187b      	adds	r3, r7, r1
 800ae98:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 800ae9a:	193b      	adds	r3, r7, r4
 800ae9c:	785a      	ldrb	r2, [r3, #1]
 800ae9e:	187b      	adds	r3, r7, r1
 800aea0:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 800aea2:	193b      	adds	r3, r7, r4
 800aea4:	789a      	ldrb	r2, [r3, #2]
 800aea6:	187b      	adds	r3, r7, r1
 800aea8:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 800aeaa:	0008      	movs	r0, r1
 800aeac:	183b      	adds	r3, r7, r0
 800aeae:	2200      	movs	r2, #0
 800aeb0:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800aeb2:	183b      	adds	r3, r7, r0
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 800aeb8:	183b      	adds	r3, r7, r0
 800aeba:	2200      	movs	r2, #0
 800aebc:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 800aebe:	183b      	adds	r3, r7, r0
 800aec0:	2200      	movs	r2, #0
 800aec2:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 800aec4:	183b      	adds	r3, r7, r0
 800aec6:	2200      	movs	r2, #0
 800aec8:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 800aeca:	183b      	adds	r3, r7, r0
 800aecc:	2200      	movs	r2, #0
 800aece:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 800aed0:	197b      	adds	r3, r7, r5
 800aed2:	7899      	ldrb	r1, [r3, #2]
 800aed4:	183b      	adds	r3, r7, r0
 800aed6:	2220      	movs	r2, #32
 800aed8:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 800aeda:	183b      	adds	r3, r7, r0
 800aedc:	2280      	movs	r2, #128	; 0x80
 800aede:	0052      	lsls	r2, r2, #1
 800aee0:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 800aee2:	1839      	adds	r1, r7, r0
 800aee4:	4b12      	ldr	r3, [pc, #72]	; (800af30 <my_rtc_set_alarm+0x104>)
 800aee6:	2200      	movs	r2, #0
 800aee8:	0018      	movs	r0, r3
 800aeea:	f7fb f943 	bl	8006174 <HAL_RTC_SetAlarm_IT>
 800aeee:	1e03      	subs	r3, r0, #0
 800aef0:	d114      	bne.n	800af1c <my_rtc_set_alarm+0xf0>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 800aef2:	19ba      	adds	r2, r7, r6
 800aef4:	1939      	adds	r1, r7, r4
 800aef6:	197b      	adds	r3, r7, r5
 800aef8:	0018      	movs	r0, r3
 800aefa:	f000 fa27 	bl	800b34c <my_conv_dt_2_dts>
		sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800aefe:	4a0a      	ldr	r2, [pc, #40]	; (800af28 <my_rtc_set_alarm+0xfc>)
 800af00:	490a      	ldr	r1, [pc, #40]	; (800af2c <my_rtc_set_alarm+0x100>)
 800af02:	244c      	movs	r4, #76	; 0x4c
 800af04:	1938      	adds	r0, r7, r4
 800af06:	19bb      	adds	r3, r7, r6
 800af08:	9300      	str	r3, [sp, #0]
 800af0a:	2341      	movs	r3, #65	; 0x41
 800af0c:	f002 f9c2 	bl	800d294 <sprintf>
		send_debug_logs ( m ) ;
 800af10:	193b      	adds	r3, r7, r4
 800af12:	0018      	movs	r0, r3
 800af14:	f7f8 f8ee 	bl	80030f4 <send_debug_logs>
		return true ;
 800af18:	2301      	movs	r3, #1
 800af1a:	e000      	b.n	800af1e <my_rtc_set_alarm+0xf2>
	}
	return false ;
 800af1c:	2300      	movs	r3, #0
}
 800af1e:	0018      	movs	r0, r3
 800af20:	46bd      	mov	sp, r7
 800af22:	b027      	add	sp, #156	; 0x9c
 800af24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af26:	46c0      	nop			; (mov r8, r8)
 800af28:	0801595c 	.word	0x0801595c
 800af2c:	08015978 	.word	0x08015978
 800af30:	200006f4 	.word	0x200006f4

0800af34 <my_rtc_set_dt_from_nmea_rmc>:

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 800af34:	b5b0      	push	{r4, r5, r7, lr}
 800af36:	b088      	sub	sp, #32
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 800af3c:	2508      	movs	r5, #8
 800af3e:	197b      	adds	r3, r7, r5
 800af40:	1cda      	adds	r2, r3, #3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	0011      	movs	r1, r2
 800af46:	0018      	movs	r0, r3
 800af48:	f000 fcd6 	bl	800b8f8 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 800af4c:	197b      	adds	r3, r7, r5
 800af4e:	1c5a      	adds	r2, r3, #1
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	0011      	movs	r1, r2
 800af54:	0018      	movs	r0, r3
 800af56:	f000 fd09 	bl	800b96c <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 800af5a:	197b      	adds	r3, r7, r5
 800af5c:	1c9a      	adds	r2, r3, #2
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	0011      	movs	r1, r2
 800af62:	0018      	movs	r0, r3
 800af64:	f000 fd3c 	bl	800b9e0 <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 800af68:	240c      	movs	r4, #12
 800af6a:	193a      	adds	r2, r7, r4
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	0011      	movs	r1, r2
 800af70:	0018      	movs	r0, r3
 800af72:	f000 fd6f 	bl	800ba54 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 800af76:	193b      	adds	r3, r7, r4
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	0011      	movs	r1, r2
 800af7e:	0018      	movs	r0, r3
 800af80:	f000 fda2 	bl	800bac8 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 800af84:	193b      	adds	r3, r7, r4
 800af86:	1c9a      	adds	r2, r3, #2
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	0011      	movs	r1, r2
 800af8c:	0018      	movs	r0, r3
 800af8e:	f000 fdd5 	bl	800bb3c <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 800af92:	193b      	adds	r3, r7, r4
 800af94:	1d1a      	adds	r2, r3, #4
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	0011      	movs	r1, r2
 800af9a:	0018      	movs	r0, r3
 800af9c:	f000 fe08 	bl	800bbb0 <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800afa0:	193b      	adds	r3, r7, r4
 800afa2:	2200      	movs	r2, #0
 800afa4:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800afa6:	193b      	adds	r3, r7, r4
 800afa8:	2200      	movs	r2, #0
 800afaa:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 800afac:	4b0b      	ldr	r3, [pc, #44]	; (800afdc <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800afae:	0018      	movs	r0, r3
 800afb0:	f7fb fb4f 	bl	8006652 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 800afb4:	1939      	adds	r1, r7, r4
 800afb6:	4b09      	ldr	r3, [pc, #36]	; (800afdc <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800afb8:	2200      	movs	r2, #0
 800afba:	0018      	movs	r0, r3
 800afbc:	f7fa fef6 	bl	8005dac <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 800afc0:	1979      	adds	r1, r7, r5
 800afc2:	4b06      	ldr	r3, [pc, #24]	; (800afdc <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800afc4:	2200      	movs	r2, #0
 800afc6:	0018      	movs	r0, r3
 800afc8:	f7fa fff4 	bl	8005fb4 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 800afcc:	4b03      	ldr	r3, [pc, #12]	; (800afdc <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800afce:	0018      	movs	r0, r3
 800afd0:	f7fb fb73 	bl	80066ba <HAL_RTCEx_DisableBypassShadow>
}
 800afd4:	46c0      	nop			; (mov r8, r8)
 800afd6:	46bd      	mov	sp, r7
 800afd8:	b008      	add	sp, #32
 800afda:	bdb0      	pop	{r4, r5, r7, pc}
 800afdc:	200006f4 	.word	0x200006f4

0800afe0 <my_st_iis2dh_init>:
stmdev_ctx_t 	my_acc_ctx ;

uint16_t my_st_acc_health_flag = 1 ;

bool my_st_iis2dh_init ( void )
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
	uint8_t id = 0 ;
 800afe6:	1dfb      	adds	r3, r7, #7
 800afe8:	2200      	movs	r2, #0
 800afea:	701a      	strb	r2, [r3, #0]

	iis2dh_device_id_get ( &my_acc_ctx , &id ) ;
 800afec:	1dfa      	adds	r2, r7, #7
 800afee:	4b0f      	ldr	r3, [pc, #60]	; (800b02c <my_st_iis2dh_init+0x4c>)
 800aff0:	0011      	movs	r1, r2
 800aff2:	0018      	movs	r0, r3
 800aff4:	f7ff fc8d 	bl	800a912 <iis2dh_device_id_get>
	if ( id != IIS2DH_ID )
 800aff8:	1dfb      	adds	r3, r7, #7
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	2b33      	cmp	r3, #51	; 0x33
 800affe:	d001      	beq.n	800b004 <my_st_iis2dh_init+0x24>
		return false ;
 800b000:	2300      	movs	r3, #0
 800b002:	e00f      	b.n	800b024 <my_st_iis2dh_init+0x44>

	iis2dh_full_scale_set ( &my_acc_ctx , IIS2DH_2g ) ;
 800b004:	4b09      	ldr	r3, [pc, #36]	; (800b02c <my_st_iis2dh_init+0x4c>)
 800b006:	2100      	movs	r1, #0
 800b008:	0018      	movs	r0, r3
 800b00a:	f7ff fc52 	bl	800a8b2 <iis2dh_full_scale_set>
	iis2dh_operating_mode_set ( &my_acc_ctx , IIS2DH_LP_8bit ) ;
 800b00e:	4b07      	ldr	r3, [pc, #28]	; (800b02c <my_st_iis2dh_init+0x4c>)
 800b010:	2102      	movs	r1, #2
 800b012:	0018      	movs	r0, r3
 800b014:	f7ff fbb6 	bl	800a784 <iis2dh_operating_mode_set>
	iis2dh_data_rate_set ( &my_acc_ctx , IIS2DH_ODR_10Hz ) ;
 800b018:	4b04      	ldr	r3, [pc, #16]	; (800b02c <my_st_iis2dh_init+0x4c>)
 800b01a:	2102      	movs	r1, #2
 800b01c:	0018      	movs	r0, r3
 800b01e:	f7ff fc1a 	bl	800a856 <iis2dh_data_rate_set>

	return true ;
 800b022:	2301      	movs	r3, #1
}
 800b024:	0018      	movs	r0, r3
 800b026:	46bd      	mov	sp, r7
 800b028:	b002      	add	sp, #8
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	20000b10 	.word	0x20000b10

0800b030 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2100      	movs	r1, #0
 800b03c:	0018      	movs	r0, r3
 800b03e:	f001 fefb 	bl	800ce38 <strtod>
 800b042:	0002      	movs	r2, r0
 800b044:	000b      	movs	r3, r1
 800b046:	60ba      	str	r2, [r7, #8]
 800b048:	60fb      	str	r3, [r7, #12]
    return d ;
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	68fb      	ldr	r3, [r7, #12]
}
 800b04e:	0010      	movs	r0, r2
 800b050:	0019      	movs	r1, r3
 800b052:	46bd      	mov	sp, r7
 800b054:	b004      	add	sp, #16
 800b056:	bd80      	pop	{r7, pc}

0800b058 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	0008      	movs	r0, r1
 800b062:	0011      	movs	r1, r2
 800b064:	1cfb      	adds	r3, r7, #3
 800b066:	1c02      	adds	r2, r0, #0
 800b068:	701a      	strb	r2, [r3, #0]
 800b06a:	1cbb      	adds	r3, r7, #2
 800b06c:	1c0a      	adds	r2, r1, #0
 800b06e:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 800b070:	230f      	movs	r3, #15
 800b072:	18fb      	adds	r3, r7, r3
 800b074:	2200      	movs	r2, #0
 800b076:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 800b078:	230e      	movs	r3, #14
 800b07a:	18fb      	adds	r3, r7, r3
 800b07c:	2200      	movs	r2, #0
 800b07e:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 800b080:	e01c      	b.n	800b0bc <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 800b082:	230f      	movs	r3, #15
 800b084:	18fb      	adds	r3, r7, r3
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	18d3      	adds	r3, r2, r3
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	1cfa      	adds	r2, r7, #3
 800b090:	7812      	ldrb	r2, [r2, #0]
 800b092:	429a      	cmp	r2, r3
 800b094:	d105      	bne.n	800b0a2 <my_find_char_position+0x4a>
			p++ ;
 800b096:	210e      	movs	r1, #14
 800b098:	187b      	adds	r3, r7, r1
 800b09a:	781a      	ldrb	r2, [r3, #0]
 800b09c:	187b      	adds	r3, r7, r1
 800b09e:	3201      	adds	r2, #1
 800b0a0:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 800b0a2:	230e      	movs	r3, #14
 800b0a4:	18fa      	adds	r2, r7, r3
 800b0a6:	1cbb      	adds	r3, r7, #2
 800b0a8:	7812      	ldrb	r2, [r2, #0]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d00e      	beq.n	800b0ce <my_find_char_position+0x76>
			break ;
		i++ ;
 800b0b0:	210f      	movs	r1, #15
 800b0b2:	187b      	adds	r3, r7, r1
 800b0b4:	781a      	ldrb	r2, [r3, #0]
 800b0b6:	187b      	adds	r3, r7, r1
 800b0b8:	3201      	adds	r2, #1
 800b0ba:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 800b0bc:	230f      	movs	r3, #15
 800b0be:	18fb      	adds	r3, r7, r3
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	18d3      	adds	r3, r2, r3
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d1da      	bne.n	800b082 <my_find_char_position+0x2a>
 800b0cc:	e000      	b.n	800b0d0 <my_find_char_position+0x78>
			break ;
 800b0ce:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 800b0d0:	230f      	movs	r3, #15
 800b0d2:	18fb      	adds	r3, r7, r3
 800b0d4:	781b      	ldrb	r3, [r3, #0]
}
 800b0d6:	0018      	movs	r0, r3
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	b004      	add	sp, #16
 800b0dc:	bd80      	pop	{r7, pc}
	...

0800b0e0 <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b086      	sub	sp, #24
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	78db      	ldrb	r3, [r3, #3]
 800b0ee:	22fa      	movs	r2, #250	; 0xfa
 800b0f0:	00d2      	lsls	r2, r2, #3
 800b0f2:	4694      	mov	ip, r2
 800b0f4:	4463      	add	r3, ip
 800b0f6:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 800b0f8:	68fa      	ldr	r2, [r7, #12]
 800b0fa:	0013      	movs	r3, r2
 800b0fc:	00db      	lsls	r3, r3, #3
 800b0fe:	189b      	adds	r3, r3, r2
 800b100:	00db      	lsls	r3, r3, #3
 800b102:	189b      	adds	r3, r3, r2
 800b104:	009a      	lsls	r2, r3, #2
 800b106:	189a      	adds	r2, r3, r2
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	492c      	ldr	r1, [pc, #176]	; (800b1bc <my_conv_rtc2timestamp+0xdc>)
 800b10c:	468c      	mov	ip, r1
 800b10e:	4463      	add	r3, ip
 800b110:	089b      	lsrs	r3, r3, #2
 800b112:	18d3      	adds	r3, r2, r3
 800b114:	4a2a      	ldr	r2, [pc, #168]	; (800b1c0 <my_conv_rtc2timestamp+0xe0>)
 800b116:	4694      	mov	ip, r2
 800b118:	4463      	add	r3, ip
 800b11a:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800b11c:	2300      	movs	r3, #0
 800b11e:	613b      	str	r3, [r7, #16]
 800b120:	e00a      	b.n	800b138 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 800b122:	4a28      	ldr	r2, [pc, #160]	; (800b1c4 <my_conv_rtc2timestamp+0xe4>)
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	18d3      	adds	r3, r2, r3
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	001a      	movs	r2, r3
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	189b      	adds	r3, r3, r2
 800b130:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	3301      	adds	r3, #1
 800b136:	613b      	str	r3, [r7, #16]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	785b      	ldrb	r3, [r3, #1]
 800b13c:	3b01      	subs	r3, #1
 800b13e:	693a      	ldr	r2, [r7, #16]
 800b140:	429a      	cmp	r2, r3
 800b142:	dbee      	blt.n	800b122 <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	785b      	ldrb	r3, [r3, #1]
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d908      	bls.n	800b15e <my_conv_rtc2timestamp+0x7e>
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	0018      	movs	r0, r3
 800b150:	f000 f8de 	bl	800b310 <my_conv_is_leap_year>
 800b154:	1e03      	subs	r3, r0, #0
 800b156:	d002      	beq.n	800b15e <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	3301      	adds	r3, #1
 800b15c:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	789b      	ldrb	r3, [r3, #2]
 800b162:	001a      	movs	r2, r3
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	18d3      	adds	r3, r2, r3
 800b168:	3b01      	subs	r3, #1
 800b16a:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 800b16c:	697a      	ldr	r2, [r7, #20]
 800b16e:	0013      	movs	r3, r2
 800b170:	005b      	lsls	r3, r3, #1
 800b172:	189b      	adds	r3, r3, r2
 800b174:	011a      	lsls	r2, r3, #4
 800b176:	1ad2      	subs	r2, r2, r3
 800b178:	0113      	lsls	r3, r2, #4
 800b17a:	1a9b      	subs	r3, r3, r2
 800b17c:	01db      	lsls	r3, r3, #7
 800b17e:	0019      	movs	r1, r3
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	001a      	movs	r2, r3
 800b186:	0013      	movs	r3, r2
 800b188:	011b      	lsls	r3, r3, #4
 800b18a:	1a9b      	subs	r3, r3, r2
 800b18c:	011a      	lsls	r2, r3, #4
 800b18e:	1ad2      	subs	r2, r2, r3
 800b190:	0113      	lsls	r3, r2, #4
 800b192:	001a      	movs	r2, r3
 800b194:	0013      	movs	r3, r2
 800b196:	18ca      	adds	r2, r1, r3
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	785b      	ldrb	r3, [r3, #1]
 800b19c:	0019      	movs	r1, r3
 800b19e:	000b      	movs	r3, r1
 800b1a0:	011b      	lsls	r3, r3, #4
 800b1a2:	1a5b      	subs	r3, r3, r1
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	18d3      	adds	r3, r2, r3
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	7892      	ldrb	r2, [r2, #2]
 800b1ac:	189b      	adds	r3, r3, r2
 800b1ae:	60bb      	str	r3, [r7, #8]

    return ts ;
 800b1b0:	68bb      	ldr	r3, [r7, #8]
}
 800b1b2:	0018      	movs	r0, r3
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	b006      	add	sp, #24
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	46c0      	nop			; (mov r8, r8)
 800b1bc:	fffff84f 	.word	0xfffff84f
 800b1c0:	fff50736 	.word	0xfff50736
 800b1c4:	08015abc 	.word	0x08015abc

0800b1c8 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800b1c8:	b590      	push	{r4, r7, lr}
 800b1ca:	b08b      	sub	sp, #44	; 0x2c
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	213c      	movs	r1, #60	; 0x3c
 800b1d8:	0018      	movs	r0, r3
 800b1da:	f7f5 f835 	bl	8000248 <__aeabi_uidivmod>
 800b1de:	000b      	movs	r3, r1
 800b1e0:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	213c      	movs	r1, #60	; 0x3c
 800b1e6:	0018      	movs	r0, r3
 800b1e8:	f7f4 ffa8 	bl	800013c <__udivsi3>
 800b1ec:	0003      	movs	r3, r0
 800b1ee:	213c      	movs	r1, #60	; 0x3c
 800b1f0:	0018      	movs	r0, r3
 800b1f2:	f7f5 f829 	bl	8000248 <__aeabi_uidivmod>
 800b1f6:	000b      	movs	r3, r1
 800b1f8:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	22e1      	movs	r2, #225	; 0xe1
 800b1fe:	0111      	lsls	r1, r2, #4
 800b200:	0018      	movs	r0, r3
 800b202:	f7f4 ff9b 	bl	800013c <__udivsi3>
 800b206:	0003      	movs	r3, r0
 800b208:	2118      	movs	r1, #24
 800b20a:	0018      	movs	r0, r3
 800b20c:	f7f5 f81c 	bl	8000248 <__aeabi_uidivmod>
 800b210:	000b      	movs	r3, r1
 800b212:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	493b      	ldr	r1, [pc, #236]	; (800b304 <my_conv_timestamp2rtc+0x13c>)
 800b218:	0018      	movs	r0, r3
 800b21a:	f7f4 ff8f 	bl	800013c <__udivsi3>
 800b21e:	0003      	movs	r3, r0
 800b220:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 800b222:	4b39      	ldr	r3, [pc, #228]	; (800b308 <my_conv_timestamp2rtc+0x140>)
 800b224:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800b226:	e00d      	b.n	800b244 <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 800b228:	6a3b      	ldr	r3, [r7, #32]
 800b22a:	0018      	movs	r0, r3
 800b22c:	f000 f870 	bl	800b310 <my_conv_is_leap_year>
 800b230:	0003      	movs	r3, r0
 800b232:	336e      	adds	r3, #110	; 0x6e
 800b234:	33ff      	adds	r3, #255	; 0xff
 800b236:	001a      	movs	r2, r3
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23a:	1a9b      	subs	r3, r3, r2
 800b23c:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 800b23e:	6a3b      	ldr	r3, [r7, #32]
 800b240:	3301      	adds	r3, #1
 800b242:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800b244:	6a3b      	ldr	r3, [r7, #32]
 800b246:	0018      	movs	r0, r3
 800b248:	f000 f862 	bl	800b310 <my_conv_is_leap_year>
 800b24c:	0003      	movs	r3, r0
 800b24e:	336e      	adds	r3, #110	; 0x6e
 800b250:	33ff      	adds	r3, #255	; 0xff
 800b252:	001a      	movs	r2, r3
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b256:	4293      	cmp	r3, r2
 800b258:	d2e6      	bcs.n	800b228 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 800b25a:	2300      	movs	r3, #0
 800b25c:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800b25e:	e018      	b.n	800b292 <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 800b260:	4b2a      	ldr	r3, [pc, #168]	; (800b30c <my_conv_timestamp2rtc+0x144>)
 800b262:	69fa      	ldr	r2, [r7, #28]
 800b264:	0052      	lsls	r2, r2, #1
 800b266:	5ad3      	ldrh	r3, [r2, r3]
 800b268:	001c      	movs	r4, r3
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d107      	bne.n	800b280 <my_conv_timestamp2rtc+0xb8>
 800b270:	6a3b      	ldr	r3, [r7, #32]
 800b272:	0018      	movs	r0, r3
 800b274:	f000 f84c 	bl	800b310 <my_conv_is_leap_year>
 800b278:	1e03      	subs	r3, r0, #0
 800b27a:	d001      	beq.n	800b280 <my_conv_timestamp2rtc+0xb8>
 800b27c:	2301      	movs	r3, #1
 800b27e:	e000      	b.n	800b282 <my_conv_timestamp2rtc+0xba>
 800b280:	2300      	movs	r3, #0
 800b282:	191b      	adds	r3, r3, r4
 800b284:	001a      	movs	r2, r3
 800b286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b288:	1a9b      	subs	r3, r3, r2
 800b28a:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	3301      	adds	r3, #1
 800b290:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800b292:	4b1e      	ldr	r3, [pc, #120]	; (800b30c <my_conv_timestamp2rtc+0x144>)
 800b294:	69fa      	ldr	r2, [r7, #28]
 800b296:	0052      	lsls	r2, r2, #1
 800b298:	5ad3      	ldrh	r3, [r2, r3]
 800b29a:	001c      	movs	r4, r3
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d107      	bne.n	800b2b2 <my_conv_timestamp2rtc+0xea>
 800b2a2:	6a3b      	ldr	r3, [r7, #32]
 800b2a4:	0018      	movs	r0, r3
 800b2a6:	f000 f833 	bl	800b310 <my_conv_is_leap_year>
 800b2aa:	1e03      	subs	r3, r0, #0
 800b2ac:	d001      	beq.n	800b2b2 <my_conv_timestamp2rtc+0xea>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e000      	b.n	800b2b4 <my_conv_timestamp2rtc+0xec>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	191b      	adds	r3, r3, r4
 800b2b6:	001a      	movs	r2, r3
 800b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d2d0      	bcs.n	800b260 <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 800b2be:	6a3b      	ldr	r3, [r7, #32]
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	3330      	adds	r3, #48	; 0x30
 800b2c4:	b2da      	uxtb	r2, r3
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	b2da      	uxtb	r2, r3
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	3301      	adds	r3, #1
 800b2dc:	b2da      	uxtb	r2, r3
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	b2da      	uxtb	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	b2da      	uxtb	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	b2da      	uxtb	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	709a      	strb	r2, [r3, #2]
}
 800b2fa:	46c0      	nop			; (mov r8, r8)
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	b00b      	add	sp, #44	; 0x2c
 800b300:	bd90      	pop	{r4, r7, pc}
 800b302:	46c0      	nop			; (mov r8, r8)
 800b304:	00015180 	.word	0x00015180
 800b308:	000007b2 	.word	0x000007b2
 800b30c:	08015ac8 	.word	0x08015ac8

0800b310 <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2203      	movs	r2, #3
 800b31c:	4013      	ands	r3, r2
 800b31e:	d106      	bne.n	800b32e <my_conv_is_leap_year+0x1e>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2164      	movs	r1, #100	; 0x64
 800b324:	0018      	movs	r0, r3
 800b326:	f7f5 f879 	bl	800041c <__aeabi_idivmod>
 800b32a:	1e0b      	subs	r3, r1, #0
 800b32c:	d107      	bne.n	800b33e <my_conv_is_leap_year+0x2e>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	22c8      	movs	r2, #200	; 0xc8
 800b332:	0051      	lsls	r1, r2, #1
 800b334:	0018      	movs	r0, r3
 800b336:	f7f5 f871 	bl	800041c <__aeabi_idivmod>
 800b33a:	1e0b      	subs	r3, r1, #0
 800b33c:	d101      	bne.n	800b342 <my_conv_is_leap_year+0x32>
 800b33e:	2301      	movs	r3, #1
 800b340:	e000      	b.n	800b344 <my_conv_is_leap_year+0x34>
 800b342:	2300      	movs	r3, #0
}
 800b344:	0018      	movs	r0, r3
 800b346:	46bd      	mov	sp, r7
 800b348:	b002      	add	sp, #8
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 800b34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b34e:	b089      	sub	sp, #36	; 0x24
 800b350:	af04      	add	r7, sp, #16
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	78db      	ldrb	r3, [r3, #3]
 800b35c:	22fa      	movs	r2, #250	; 0xfa
 800b35e:	00d2      	lsls	r2, r2, #3
 800b360:	189a      	adds	r2, r3, r2
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	785b      	ldrb	r3, [r3, #1]
 800b366:	469c      	mov	ip, r3
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	789b      	ldrb	r3, [r3, #2]
 800b36c:	001c      	movs	r4, r3
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	001d      	movs	r5, r3
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	785b      	ldrb	r3, [r3, #1]
 800b378:	001e      	movs	r6, r3
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	789b      	ldrb	r3, [r3, #2]
 800b37e:	4906      	ldr	r1, [pc, #24]	; (800b398 <my_conv_dt_2_dts+0x4c>)
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	9303      	str	r3, [sp, #12]
 800b384:	9602      	str	r6, [sp, #8]
 800b386:	9501      	str	r5, [sp, #4]
 800b388:	9400      	str	r4, [sp, #0]
 800b38a:	4663      	mov	r3, ip
 800b38c:	f001 ff82 	bl	800d294 <sprintf>
}
 800b390:	46c0      	nop			; (mov r8, r8)
 800b392:	46bd      	mov	sp, r7
 800b394:	b005      	add	sp, #20
 800b396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b398:	08015984 	.word	0x08015984

0800b39c <my_conv_string_2_uint32_t>:

uint32_t my_conv_string_2_uint32_t ( const char* c )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
	char* end_p ;
	return (uint32_t) strtoul ( c , &end_p , 10 ) ;
 800b3a4:	230c      	movs	r3, #12
 800b3a6:	18f9      	adds	r1, r7, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	220a      	movs	r2, #10
 800b3ac:	0018      	movs	r0, r3
 800b3ae:	f001 fe6d 	bl	800d08c <strtoul>
 800b3b2:	0003      	movs	r3, r0
}
 800b3b4:	0018      	movs	r0, r3
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	b004      	add	sp, #16
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	2b24      	cmp	r3, #36	; 0x24
 800b3ce:	d117      	bne.n	800b400 <my_nmea_message+0x44>
    {
        *i = 0 ;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	1c5a      	adds	r2, r3, #1
 800b3dc:	b2d1      	uxtb	r1, r2
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	7011      	strb	r1, [r2, #0]
 800b3e2:	001a      	movs	r2, r3
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	189b      	adds	r3, r3, r2
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	7812      	ldrb	r2, [r2, #0]
 800b3ec:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	001a      	movs	r2, r3
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	189b      	adds	r3, r3, r2
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	701a      	strb	r2, [r3, #0]
        return 0 ;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	e045      	b.n	800b48c <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	2b1f      	cmp	r3, #31
 800b406:	d907      	bls.n	800b418 <my_nmea_message+0x5c>
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	2b7e      	cmp	r3, #126	; 0x7e
 800b40e:	d803      	bhi.n	800b418 <my_nmea_message+0x5c>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d103      	bne.n	800b420 <my_nmea_message+0x64>
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	2b0d      	cmp	r3, #13
 800b41e:	d114      	bne.n	800b44a <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	1c5a      	adds	r2, r3, #1
 800b426:	b2d1      	uxtb	r1, r2
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	7011      	strb	r1, [r2, #0]
 800b42c:	001a      	movs	r2, r3
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	189b      	adds	r3, r3, r2
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	7812      	ldrb	r2, [r2, #0]
 800b436:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	001a      	movs	r2, r3
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	189b      	adds	r3, r3, r2
 800b442:	2200      	movs	r2, #0
 800b444:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800b446:	2301      	movs	r3, #1
 800b448:	e020      	b.n	800b48c <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	2b0a      	cmp	r3, #10
 800b450:	d11a      	bne.n	800b488 <my_nmea_message+0xcc>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	2b01      	cmp	r3, #1
 800b458:	d916      	bls.n	800b488 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	3b01      	subs	r3, #1
 800b460:	b2da      	uxtb	r2, r3
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	701a      	strb	r2, [r3, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	001a      	movs	r2, r3
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	189b      	adds	r3, r3, r2
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	2b0d      	cmp	r3, #13
 800b474:	d108      	bne.n	800b488 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	001a      	movs	r2, r3
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	189b      	adds	r3, r3, r2
 800b480:	2200      	movs	r2, #0
 800b482:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800b484:	2302      	movs	r3, #2
 800b486:	e001      	b.n	800b48c <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800b488:	2301      	movs	r3, #1
 800b48a:	425b      	negs	r3, r3
}
 800b48c:	0018      	movs	r0, r3
 800b48e:	46bd      	mov	sp, r7
 800b490:	b004      	add	sp, #16
 800b492:	bd80      	pop	{r7, pc}

0800b494 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	3309      	adds	r3, #9
 800b4a0:	781b      	ldrb	r3, [r3, #0]
}
 800b4a2:	0018      	movs	r0, r3
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	b002      	add	sp, #8
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 800b4aa:	b5b0      	push	{r4, r5, r7, lr}
 800b4ac:	b086      	sub	sp, #24
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	220f      	movs	r2, #15
 800b4b6:	212c      	movs	r1, #44	; 0x2c
 800b4b8:	0018      	movs	r0, r3
 800b4ba:	f7ff fdcd 	bl	800b058 <my_find_char_position>
 800b4be:	0003      	movs	r3, r0
 800b4c0:	001a      	movs	r2, r3
 800b4c2:	2517      	movs	r5, #23
 800b4c4:	197b      	adds	r3, r7, r5
 800b4c6:	3201      	adds	r2, #1
 800b4c8:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2210      	movs	r2, #16
 800b4ce:	212c      	movs	r1, #44	; 0x2c
 800b4d0:	0018      	movs	r0, r3
 800b4d2:	f7ff fdc1 	bl	800b058 <my_find_char_position>
 800b4d6:	0003      	movs	r3, r0
 800b4d8:	0019      	movs	r1, r3
 800b4da:	2416      	movs	r4, #22
 800b4dc:	193b      	adds	r3, r7, r4
 800b4de:	197a      	adds	r2, r7, r5
 800b4e0:	7812      	ldrb	r2, [r2, #0]
 800b4e2:	1a8a      	subs	r2, r1, r2
 800b4e4:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 800b4e6:	193b      	adds	r3, r7, r4
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	0018      	movs	r0, r3
 800b4ee:	f000 fc41 	bl	800bd74 <malloc>
 800b4f2:	0003      	movs	r3, r0
 800b4f4:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 800b4f6:	197b      	adds	r3, r7, r5
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	18d1      	adds	r1, r2, r3
 800b4fe:	193b      	adds	r3, r7, r4
 800b500:	781a      	ldrb	r2, [r3, #0]
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	0018      	movs	r0, r3
 800b506:	f001 ff82 	bl	800d40e <strncpy>
	pdop_s[pdop_length] = '\0';
 800b50a:	193b      	adds	r3, r7, r4
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	693a      	ldr	r2, [r7, #16]
 800b510:	18d3      	adds	r3, r2, r3
 800b512:	2200      	movs	r2, #0
 800b514:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	0018      	movs	r0, r3
 800b51a:	f7ff fd89 	bl	800b030 <my_string2double_conv>
 800b51e:	0002      	movs	r2, r0
 800b520:	000b      	movs	r3, r1
 800b522:	60ba      	str	r2, [r7, #8]
 800b524:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	0018      	movs	r0, r3
 800b52a:	f000 fc2d 	bl	800bd88 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800b52e:	68ba      	ldr	r2, [r7, #8]
 800b530:	68fb      	ldr	r3, [r7, #12]
}
 800b532:	0010      	movs	r0, r2
 800b534:	0019      	movs	r1, r3
 800b536:	46bd      	mov	sp, r7
 800b538:	b006      	add	sp, #24
 800b53a:	bdb0      	pop	{r4, r5, r7, pc}

0800b53c <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 800b53c:	b590      	push	{r4, r7, lr}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800b544:	230f      	movs	r3, #15
 800b546:	18fb      	adds	r3, r7, r3
 800b548:	2200      	movs	r2, #0
 800b54a:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800b54c:	230e      	movs	r3, #14
 800b54e:	18fb      	adds	r3, r7, r3
 800b550:	2201      	movs	r2, #1
 800b552:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800b554:	e00f      	b.n	800b576 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800b556:	220e      	movs	r2, #14
 800b558:	18bb      	adds	r3, r7, r2
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	18ba      	adds	r2, r7, r2
 800b55e:	1c59      	adds	r1, r3, #1
 800b560:	7011      	strb	r1, [r2, #0]
 800b562:	001a      	movs	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	189b      	adds	r3, r3, r2
 800b568:	7819      	ldrb	r1, [r3, #0]
 800b56a:	220f      	movs	r2, #15
 800b56c:	18bb      	adds	r3, r7, r2
 800b56e:	18ba      	adds	r2, r7, r2
 800b570:	7812      	ldrb	r2, [r2, #0]
 800b572:	404a      	eors	r2, r1
 800b574:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800b576:	210e      	movs	r1, #14
 800b578:	187b      	adds	r3, r7, r1
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	18d3      	adds	r3, r2, r3
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	2b2a      	cmp	r3, #42	; 0x2a
 800b584:	d00a      	beq.n	800b59c <is_my_nmea_checksum_ok+0x60>
 800b586:	187b      	adds	r3, r7, r1
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	18d3      	adds	r3, r2, r3
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d003      	beq.n	800b59c <is_my_nmea_checksum_ok+0x60>
 800b594:	187b      	adds	r3, r7, r1
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1dc      	bne.n	800b556 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800b59c:	230f      	movs	r3, #15
 800b59e:	18fb      	adds	r3, r7, r3
 800b5a0:	781c      	ldrb	r4, [r3, #0]
 800b5a2:	210e      	movs	r1, #14
 800b5a4:	187b      	adds	r3, r7, r1
 800b5a6:	187a      	adds	r2, r7, r1
 800b5a8:	7812      	ldrb	r2, [r2, #0]
 800b5aa:	3201      	adds	r2, #1
 800b5ac:	701a      	strb	r2, [r3, #0]
 800b5ae:	187b      	adds	r3, r7, r1
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	18d3      	adds	r3, r2, r3
 800b5b6:	2210      	movs	r2, #16
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	0018      	movs	r0, r3
 800b5bc:	f001 fcd4 	bl	800cf68 <strtol>
 800b5c0:	0003      	movs	r3, r0
 800b5c2:	1ae3      	subs	r3, r4, r3
 800b5c4:	425a      	negs	r2, r3
 800b5c6:	4153      	adcs	r3, r2
 800b5c8:	b2db      	uxtb	r3, r3
}
 800b5ca:	0018      	movs	r0, r3
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	b005      	add	sp, #20
 800b5d0:	bd90      	pop	{r4, r7, pc}
	...

0800b5d4 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800b5d4:	b5b0      	push	{r4, r5, r7, lr}
 800b5d6:	b086      	sub	sp, #24
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	000a      	movs	r2, r1
 800b5de:	1cfb      	adds	r3, r7, #3
 800b5e0:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800b5e2:	2308      	movs	r3, #8
 800b5e4:	18fa      	adds	r2, r7, r3
 800b5e6:	492f      	ldr	r1, [pc, #188]	; (800b6a4 <nmea2decimal+0xd0>)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	0018      	movs	r0, r3
 800b5ec:	f001 fe72 	bl	800d2d4 <sscanf>
    min = deg / 100 ;
 800b5f0:	68b8      	ldr	r0, [r7, #8]
 800b5f2:	68f9      	ldr	r1, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	4b2c      	ldr	r3, [pc, #176]	; (800b6a8 <nmea2decimal+0xd4>)
 800b5f8:	f7f5 fc3e 	bl	8000e78 <__aeabi_ddiv>
 800b5fc:	0002      	movs	r2, r0
 800b5fe:	000b      	movs	r3, r1
 800b600:	613a      	str	r2, [r7, #16]
 800b602:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800b604:	6938      	ldr	r0, [r7, #16]
 800b606:	6979      	ldr	r1, [r7, #20]
 800b608:	f7f6 fe92 	bl	8002330 <__aeabi_d2iz>
 800b60c:	0003      	movs	r3, r0
 800b60e:	0018      	movs	r0, r3
 800b610:	f7f6 fec4 	bl	800239c <__aeabi_i2d>
 800b614:	0002      	movs	r2, r0
 800b616:	000b      	movs	r3, r1
 800b618:	60ba      	str	r2, [r7, #8]
 800b61a:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	6938      	ldr	r0, [r7, #16]
 800b622:	6979      	ldr	r1, [r7, #20]
 800b624:	f7f6 fae4 	bl	8001bf0 <__aeabi_dsub>
 800b628:	0002      	movs	r2, r0
 800b62a:	000b      	movs	r3, r1
 800b62c:	0010      	movs	r0, r2
 800b62e:	0019      	movs	r1, r3
 800b630:	2200      	movs	r2, #0
 800b632:	4b1e      	ldr	r3, [pc, #120]	; (800b6ac <nmea2decimal+0xd8>)
 800b634:	f7f6 f81a 	bl	800166c <__aeabi_dmul>
 800b638:	0002      	movs	r2, r0
 800b63a:	000b      	movs	r3, r1
 800b63c:	613a      	str	r2, [r7, #16]
 800b63e:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800b640:	2200      	movs	r2, #0
 800b642:	4b1b      	ldr	r3, [pc, #108]	; (800b6b0 <nmea2decimal+0xdc>)
 800b644:	6938      	ldr	r0, [r7, #16]
 800b646:	6979      	ldr	r1, [r7, #20]
 800b648:	f7f5 fc16 	bl	8000e78 <__aeabi_ddiv>
 800b64c:	0002      	movs	r2, r0
 800b64e:	000b      	movs	r3, r1
 800b650:	613a      	str	r2, [r7, #16]
 800b652:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800b654:	1cfb      	adds	r3, r7, #3
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	2b53      	cmp	r3, #83	; 0x53
 800b65a:	d003      	beq.n	800b664 <nmea2decimal+0x90>
 800b65c:	1cfb      	adds	r3, r7, #3
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	2b57      	cmp	r3, #87	; 0x57
 800b662:	d10e      	bne.n	800b682 <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800b664:	68b8      	ldr	r0, [r7, #8]
 800b666:	68f9      	ldr	r1, [r7, #12]
 800b668:	693a      	ldr	r2, [r7, #16]
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f7f5 f8a4 	bl	80007b8 <__aeabi_dadd>
 800b670:	0002      	movs	r2, r0
 800b672:	000b      	movs	r3, r1
 800b674:	0011      	movs	r1, r2
 800b676:	000c      	movs	r4, r1
 800b678:	2180      	movs	r1, #128	; 0x80
 800b67a:	0609      	lsls	r1, r1, #24
 800b67c:	4059      	eors	r1, r3
 800b67e:	000d      	movs	r5, r1
 800b680:	e009      	b.n	800b696 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800b682:	68b8      	ldr	r0, [r7, #8]
 800b684:	68f9      	ldr	r1, [r7, #12]
 800b686:	693a      	ldr	r2, [r7, #16]
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	f7f5 f895 	bl	80007b8 <__aeabi_dadd>
 800b68e:	0002      	movs	r2, r0
 800b690:	000b      	movs	r3, r1
 800b692:	0014      	movs	r4, r2
 800b694:	001d      	movs	r5, r3
}
 800b696:	0022      	movs	r2, r4
 800b698:	002b      	movs	r3, r5
 800b69a:	0010      	movs	r0, r2
 800b69c:	0019      	movs	r1, r3
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	b006      	add	sp, #24
 800b6a2:	bdb0      	pop	{r4, r5, r7, pc}
 800b6a4:	080159a4 	.word	0x080159a4
 800b6a8:	40590000 	.word	0x40590000
 800b6ac:	40240000 	.word	0x40240000
 800b6b0:	40180000 	.word	0x40180000

0800b6b4 <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 800b6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6b6:	b08d      	sub	sp, #52	; 0x34
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	212c      	movs	r1, #44	; 0x2c
 800b6c4:	0018      	movs	r0, r3
 800b6c6:	f7ff fcc7 	bl	800b058 <my_find_char_position>
 800b6ca:	0003      	movs	r3, r0
 800b6cc:	001a      	movs	r2, r3
 800b6ce:	252f      	movs	r5, #47	; 0x2f
 800b6d0:	197b      	adds	r3, r7, r5
 800b6d2:	3201      	adds	r2, #1
 800b6d4:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2202      	movs	r2, #2
 800b6da:	212c      	movs	r1, #44	; 0x2c
 800b6dc:	0018      	movs	r0, r3
 800b6de:	f7ff fcbb 	bl	800b058 <my_find_char_position>
 800b6e2:	0003      	movs	r3, r0
 800b6e4:	0019      	movs	r1, r3
 800b6e6:	242e      	movs	r4, #46	; 0x2e
 800b6e8:	193b      	adds	r3, r7, r4
 800b6ea:	197a      	adds	r2, r7, r5
 800b6ec:	7812      	ldrb	r2, [r2, #0]
 800b6ee:	1a8a      	subs	r2, r1, r2
 800b6f0:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800b6f2:	193b      	adds	r3, r7, r4
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	0018      	movs	r0, r3
 800b6fa:	f000 fb3b 	bl	800bd74 <malloc>
 800b6fe:	0003      	movs	r3, r0
 800b700:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800b702:	197b      	adds	r3, r7, r5
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	18d1      	adds	r1, r2, r3
 800b70a:	193b      	adds	r3, r7, r4
 800b70c:	781a      	ldrb	r2, [r3, #0]
 800b70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b710:	0018      	movs	r0, r3
 800b712:	f001 fe7c 	bl	800d40e <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800b716:	193b      	adds	r3, r7, r4
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b71c:	18d3      	adds	r3, r2, r3
 800b71e:	2200      	movs	r2, #0
 800b720:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800b722:	197b      	adds	r3, r7, r5
 800b724:	781a      	ldrb	r2, [r3, #0]
 800b726:	193b      	adds	r3, r7, r4
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	18d3      	adds	r3, r2, r3
 800b72c:	3301      	adds	r3, #1
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	18d2      	adds	r2, r2, r3
 800b732:	2627      	movs	r6, #39	; 0x27
 800b734:	19bb      	adds	r3, r7, r6
 800b736:	7812      	ldrb	r2, [r2, #0]
 800b738:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800b73a:	19bb      	adds	r3, r7, r6
 800b73c:	781a      	ldrb	r2, [r3, #0]
 800b73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b740:	0011      	movs	r1, r2
 800b742:	0018      	movs	r0, r3
 800b744:	f7ff ff46 	bl	800b5d4 <nmea2decimal>
 800b748:	0002      	movs	r2, r0
 800b74a:	000b      	movs	r3, r1
 800b74c:	61ba      	str	r2, [r7, #24]
 800b74e:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 800b750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b752:	0018      	movs	r0, r3
 800b754:	f000 fb18 	bl	800bd88 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800b758:	2200      	movs	r2, #0
 800b75a:	4b49      	ldr	r3, [pc, #292]	; (800b880 <my_nmea_get_gngll_coordinates+0x1cc>)
 800b75c:	69b8      	ldr	r0, [r7, #24]
 800b75e:	69f9      	ldr	r1, [r7, #28]
 800b760:	f7f5 ff84 	bl	800166c <__aeabi_dmul>
 800b764:	0002      	movs	r2, r0
 800b766:	000b      	movs	r3, r1
 800b768:	0010      	movs	r0, r2
 800b76a:	0019      	movs	r1, r3
 800b76c:	f008 fb20 	bl	8013db0 <round>
 800b770:	2200      	movs	r2, #0
 800b772:	4b43      	ldr	r3, [pc, #268]	; (800b880 <my_nmea_get_gngll_coordinates+0x1cc>)
 800b774:	f7f5 fb80 	bl	8000e78 <__aeabi_ddiv>
 800b778:	0002      	movs	r2, r0
 800b77a:	000b      	movs	r3, r1
 800b77c:	61ba      	str	r2, [r7, #24]
 800b77e:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800b780:	2200      	movs	r2, #0
 800b782:	4b40      	ldr	r3, [pc, #256]	; (800b884 <my_nmea_get_gngll_coordinates+0x1d0>)
 800b784:	69b8      	ldr	r0, [r7, #24]
 800b786:	69f9      	ldr	r1, [r7, #28]
 800b788:	f7f5 ff70 	bl	800166c <__aeabi_dmul>
 800b78c:	0002      	movs	r2, r0
 800b78e:	000b      	movs	r3, r1
 800b790:	0010      	movs	r0, r2
 800b792:	0019      	movs	r1, r3
 800b794:	f7f6 fdcc 	bl	8002330 <__aeabi_d2iz>
 800b798:	0002      	movs	r2, r0
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2203      	movs	r2, #3
 800b7a2:	212c      	movs	r1, #44	; 0x2c
 800b7a4:	0018      	movs	r0, r3
 800b7a6:	f7ff fc57 	bl	800b058 <my_find_char_position>
 800b7aa:	0003      	movs	r3, r0
 800b7ac:	001a      	movs	r2, r3
 800b7ae:	197b      	adds	r3, r7, r5
 800b7b0:	3201      	adds	r2, #1
 800b7b2:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2204      	movs	r2, #4
 800b7b8:	212c      	movs	r1, #44	; 0x2c
 800b7ba:	0018      	movs	r0, r3
 800b7bc:	f7ff fc4c 	bl	800b058 <my_find_char_position>
 800b7c0:	0003      	movs	r3, r0
 800b7c2:	0019      	movs	r1, r3
 800b7c4:	193b      	adds	r3, r7, r4
 800b7c6:	197a      	adds	r2, r7, r5
 800b7c8:	7812      	ldrb	r2, [r2, #0]
 800b7ca:	1a8a      	subs	r2, r1, r2
 800b7cc:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800b7ce:	193b      	adds	r3, r7, r4
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	0018      	movs	r0, r3
 800b7d6:	f000 facd 	bl	800bd74 <malloc>
 800b7da:	0003      	movs	r3, r0
 800b7dc:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800b7de:	197b      	adds	r3, r7, r5
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	18d1      	adds	r1, r2, r3
 800b7e6:	193b      	adds	r3, r7, r4
 800b7e8:	781a      	ldrb	r2, [r3, #0]
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	0018      	movs	r0, r3
 800b7ee:	f001 fe0e 	bl	800d40e <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800b7f2:	193b      	adds	r3, r7, r4
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	697a      	ldr	r2, [r7, #20]
 800b7f8:	18d3      	adds	r3, r2, r3
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800b7fe:	197b      	adds	r3, r7, r5
 800b800:	781a      	ldrb	r2, [r3, #0]
 800b802:	193b      	adds	r3, r7, r4
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	18d3      	adds	r3, r2, r3
 800b808:	3301      	adds	r3, #1
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	18d2      	adds	r2, r2, r3
 800b80e:	19bb      	adds	r3, r7, r6
 800b810:	7812      	ldrb	r2, [r2, #0]
 800b812:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800b814:	19bb      	adds	r3, r7, r6
 800b816:	781a      	ldrb	r2, [r3, #0]
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	0011      	movs	r1, r2
 800b81c:	0018      	movs	r0, r3
 800b81e:	f7ff fed9 	bl	800b5d4 <nmea2decimal>
 800b822:	0002      	movs	r2, r0
 800b824:	000b      	movs	r3, r1
 800b826:	60ba      	str	r2, [r7, #8]
 800b828:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	0018      	movs	r0, r3
 800b82e:	f000 faab 	bl	800bd88 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800b832:	2200      	movs	r2, #0
 800b834:	4b12      	ldr	r3, [pc, #72]	; (800b880 <my_nmea_get_gngll_coordinates+0x1cc>)
 800b836:	68b8      	ldr	r0, [r7, #8]
 800b838:	68f9      	ldr	r1, [r7, #12]
 800b83a:	f7f5 ff17 	bl	800166c <__aeabi_dmul>
 800b83e:	0002      	movs	r2, r0
 800b840:	000b      	movs	r3, r1
 800b842:	0010      	movs	r0, r2
 800b844:	0019      	movs	r1, r3
 800b846:	f008 fab3 	bl	8013db0 <round>
 800b84a:	2200      	movs	r2, #0
 800b84c:	4b0c      	ldr	r3, [pc, #48]	; (800b880 <my_nmea_get_gngll_coordinates+0x1cc>)
 800b84e:	f7f5 fb13 	bl	8000e78 <__aeabi_ddiv>
 800b852:	0002      	movs	r2, r0
 800b854:	000b      	movs	r3, r1
 800b856:	60ba      	str	r2, [r7, #8]
 800b858:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800b85a:	2200      	movs	r2, #0
 800b85c:	4b09      	ldr	r3, [pc, #36]	; (800b884 <my_nmea_get_gngll_coordinates+0x1d0>)
 800b85e:	68b8      	ldr	r0, [r7, #8]
 800b860:	68f9      	ldr	r1, [r7, #12]
 800b862:	f7f5 ff03 	bl	800166c <__aeabi_dmul>
 800b866:	0002      	movs	r2, r0
 800b868:	000b      	movs	r3, r1
 800b86a:	0010      	movs	r0, r2
 800b86c:	0019      	movs	r1, r3
 800b86e:	f7f6 fd5f 	bl	8002330 <__aeabi_d2iz>
 800b872:	0002      	movs	r2, r0
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	605a      	str	r2, [r3, #4]
}
 800b878:	46c0      	nop			; (mov r8, r8)
 800b87a:	46bd      	mov	sp, r7
 800b87c:	b00d      	add	sp, #52	; 0x34
 800b87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b880:	412e8480 	.word	0x412e8480
 800b884:	416312d0 	.word	0x416312d0

0800b888 <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800b888:	b5b0      	push	{r4, r5, r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800b890:	240e      	movs	r4, #14
 800b892:	193b      	adds	r3, r7, r4
 800b894:	2200      	movs	r2, #0
 800b896:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2203      	movs	r2, #3
 800b89c:	212c      	movs	r1, #44	; 0x2c
 800b89e:	0018      	movs	r0, r3
 800b8a0:	f7ff fbda 	bl	800b058 <my_find_char_position>
 800b8a4:	0003      	movs	r3, r0
 800b8a6:	001a      	movs	r2, r3
 800b8a8:	2517      	movs	r5, #23
 800b8aa:	197b      	adds	r3, r7, r5
 800b8ac:	3201      	adds	r2, #1
 800b8ae:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b8b0:	2003      	movs	r0, #3
 800b8b2:	f000 fa5f 	bl	800bd74 <malloc>
 800b8b6:	0003      	movs	r3, r0
 800b8b8:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b8ba:	197b      	adds	r3, r7, r5
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	18d1      	adds	r1, r2, r3
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	2202      	movs	r2, #2
 800b8c6:	0018      	movs	r0, r3
 800b8c8:	f001 fda1 	bl	800d40e <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	3302      	adds	r3, #2
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800b8d4:	193a      	adds	r2, r7, r4
 800b8d6:	4907      	ldr	r1, [pc, #28]	; (800b8f4 <my_nmea_get_gsv_tns+0x6c>)
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	0018      	movs	r0, r3
 800b8dc:	f001 fcfa 	bl	800d2d4 <sscanf>
	free ( s ) ;
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	0018      	movs	r0, r3
 800b8e4:	f000 fa50 	bl	800bd88 <free>
	return tns ;
 800b8e8:	193b      	adds	r3, r7, r4
 800b8ea:	881b      	ldrh	r3, [r3, #0]
}
 800b8ec:	0018      	movs	r0, r3
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	b006      	add	sp, #24
 800b8f2:	bdb0      	pop	{r4, r5, r7, pc}
 800b8f4:	080159b0 	.word	0x080159b0

0800b8f8 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800b8f8:	b590      	push	{r4, r7, lr}
 800b8fa:	b087      	sub	sp, #28
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2209      	movs	r2, #9
 800b906:	212c      	movs	r1, #44	; 0x2c
 800b908:	0018      	movs	r0, r3
 800b90a:	f7ff fba5 	bl	800b058 <my_find_char_position>
 800b90e:	0003      	movs	r3, r0
 800b910:	001a      	movs	r2, r3
 800b912:	2417      	movs	r4, #23
 800b914:	193b      	adds	r3, r7, r4
 800b916:	3205      	adds	r2, #5
 800b918:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b91a:	2003      	movs	r0, #3
 800b91c:	f000 fa2a 	bl	800bd74 <malloc>
 800b920:	0003      	movs	r3, r0
 800b922:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b924:	193b      	adds	r3, r7, r4
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	18d1      	adds	r1, r2, r3
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	2202      	movs	r2, #2
 800b930:	0018      	movs	r0, r3
 800b932:	f001 fd6c 	bl	800d40e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	3302      	adds	r3, #2
 800b93a:	2200      	movs	r2, #0
 800b93c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b93e:	240e      	movs	r4, #14
 800b940:	193a      	adds	r2, r7, r4
 800b942:	4909      	ldr	r1, [pc, #36]	; (800b968 <my_nmea_get_rmc_date_yy+0x70>)
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	0018      	movs	r0, r3
 800b948:	f001 fcc4 	bl	800d2d4 <sscanf>
	free ( s ) ;
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	0018      	movs	r0, r3
 800b950:	f000 fa1a 	bl	800bd88 <free>
	*yy = (uint8_t) temp ;
 800b954:	193b      	adds	r3, r7, r4
 800b956:	881b      	ldrh	r3, [r3, #0]
 800b958:	b2da      	uxtb	r2, r3
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	701a      	strb	r2, [r3, #0]

}
 800b95e:	46c0      	nop			; (mov r8, r8)
 800b960:	46bd      	mov	sp, r7
 800b962:	b007      	add	sp, #28
 800b964:	bd90      	pop	{r4, r7, pc}
 800b966:	46c0      	nop			; (mov r8, r8)
 800b968:	080159b0 	.word	0x080159b0

0800b96c <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800b96c:	b590      	push	{r4, r7, lr}
 800b96e:	b087      	sub	sp, #28
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2209      	movs	r2, #9
 800b97a:	212c      	movs	r1, #44	; 0x2c
 800b97c:	0018      	movs	r0, r3
 800b97e:	f7ff fb6b 	bl	800b058 <my_find_char_position>
 800b982:	0003      	movs	r3, r0
 800b984:	001a      	movs	r2, r3
 800b986:	2417      	movs	r4, #23
 800b988:	193b      	adds	r3, r7, r4
 800b98a:	3203      	adds	r2, #3
 800b98c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b98e:	2003      	movs	r0, #3
 800b990:	f000 f9f0 	bl	800bd74 <malloc>
 800b994:	0003      	movs	r3, r0
 800b996:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b998:	193b      	adds	r3, r7, r4
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	18d1      	adds	r1, r2, r3
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	2202      	movs	r2, #2
 800b9a4:	0018      	movs	r0, r3
 800b9a6:	f001 fd32 	bl	800d40e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	3302      	adds	r3, #2
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b9b2:	240e      	movs	r4, #14
 800b9b4:	193a      	adds	r2, r7, r4
 800b9b6:	4909      	ldr	r1, [pc, #36]	; (800b9dc <my_nmea_get_rmc_date_mm+0x70>)
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	0018      	movs	r0, r3
 800b9bc:	f001 fc8a 	bl	800d2d4 <sscanf>
	free ( s ) ;
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	0018      	movs	r0, r3
 800b9c4:	f000 f9e0 	bl	800bd88 <free>
	*mm = (uint8_t) temp ;
 800b9c8:	193b      	adds	r3, r7, r4
 800b9ca:	881b      	ldrh	r3, [r3, #0]
 800b9cc:	b2da      	uxtb	r2, r3
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	701a      	strb	r2, [r3, #0]

}
 800b9d2:	46c0      	nop			; (mov r8, r8)
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	b007      	add	sp, #28
 800b9d8:	bd90      	pop	{r4, r7, pc}
 800b9da:	46c0      	nop			; (mov r8, r8)
 800b9dc:	080159b0 	.word	0x080159b0

0800b9e0 <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800b9e0:	b590      	push	{r4, r7, lr}
 800b9e2:	b087      	sub	sp, #28
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2209      	movs	r2, #9
 800b9ee:	212c      	movs	r1, #44	; 0x2c
 800b9f0:	0018      	movs	r0, r3
 800b9f2:	f7ff fb31 	bl	800b058 <my_find_char_position>
 800b9f6:	0003      	movs	r3, r0
 800b9f8:	001a      	movs	r2, r3
 800b9fa:	2417      	movs	r4, #23
 800b9fc:	193b      	adds	r3, r7, r4
 800b9fe:	3201      	adds	r2, #1
 800ba00:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ba02:	2003      	movs	r0, #3
 800ba04:	f000 f9b6 	bl	800bd74 <malloc>
 800ba08:	0003      	movs	r3, r0
 800ba0a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ba0c:	193b      	adds	r3, r7, r4
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	18d1      	adds	r1, r2, r3
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	2202      	movs	r2, #2
 800ba18:	0018      	movs	r0, r3
 800ba1a:	f001 fcf8 	bl	800d40e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	3302      	adds	r3, #2
 800ba22:	2200      	movs	r2, #0
 800ba24:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ba26:	240e      	movs	r4, #14
 800ba28:	193a      	adds	r2, r7, r4
 800ba2a:	4909      	ldr	r1, [pc, #36]	; (800ba50 <my_nmea_get_rmc_date_dd+0x70>)
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	0018      	movs	r0, r3
 800ba30:	f001 fc50 	bl	800d2d4 <sscanf>
	free ( s ) ;
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	0018      	movs	r0, r3
 800ba38:	f000 f9a6 	bl	800bd88 <free>
	*dd = (uint8_t) temp ;
 800ba3c:	193b      	adds	r3, r7, r4
 800ba3e:	881b      	ldrh	r3, [r3, #0]
 800ba40:	b2da      	uxtb	r2, r3
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	701a      	strb	r2, [r3, #0]

}
 800ba46:	46c0      	nop			; (mov r8, r8)
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	b007      	add	sp, #28
 800ba4c:	bd90      	pop	{r4, r7, pc}
 800ba4e:	46c0      	nop			; (mov r8, r8)
 800ba50:	080159b0 	.word	0x080159b0

0800ba54 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800ba54:	b590      	push	{r4, r7, lr}
 800ba56:	b087      	sub	sp, #28
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2201      	movs	r2, #1
 800ba62:	212c      	movs	r1, #44	; 0x2c
 800ba64:	0018      	movs	r0, r3
 800ba66:	f7ff faf7 	bl	800b058 <my_find_char_position>
 800ba6a:	0003      	movs	r3, r0
 800ba6c:	001a      	movs	r2, r3
 800ba6e:	2417      	movs	r4, #23
 800ba70:	193b      	adds	r3, r7, r4
 800ba72:	3201      	adds	r2, #1
 800ba74:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ba76:	2003      	movs	r0, #3
 800ba78:	f000 f97c 	bl	800bd74 <malloc>
 800ba7c:	0003      	movs	r3, r0
 800ba7e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ba80:	193b      	adds	r3, r7, r4
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	18d1      	adds	r1, r2, r3
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	0018      	movs	r0, r3
 800ba8e:	f001 fcbe 	bl	800d40e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	3302      	adds	r3, #2
 800ba96:	2200      	movs	r2, #0
 800ba98:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ba9a:	240e      	movs	r4, #14
 800ba9c:	193a      	adds	r2, r7, r4
 800ba9e:	4909      	ldr	r1, [pc, #36]	; (800bac4 <my_nmea_get_rmc_utc_hh+0x70>)
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	0018      	movs	r0, r3
 800baa4:	f001 fc16 	bl	800d2d4 <sscanf>
	free ( s ) ;
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	0018      	movs	r0, r3
 800baac:	f000 f96c 	bl	800bd88 <free>
	*hh = (uint8_t) temp ;
 800bab0:	193b      	adds	r3, r7, r4
 800bab2:	881b      	ldrh	r3, [r3, #0]
 800bab4:	b2da      	uxtb	r2, r3
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	701a      	strb	r2, [r3, #0]

}
 800baba:	46c0      	nop			; (mov r8, r8)
 800babc:	46bd      	mov	sp, r7
 800babe:	b007      	add	sp, #28
 800bac0:	bd90      	pop	{r4, r7, pc}
 800bac2:	46c0      	nop			; (mov r8, r8)
 800bac4:	080159b0 	.word	0x080159b0

0800bac8 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800bac8:	b590      	push	{r4, r7, lr}
 800baca:	b087      	sub	sp, #28
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2201      	movs	r2, #1
 800bad6:	212c      	movs	r1, #44	; 0x2c
 800bad8:	0018      	movs	r0, r3
 800bada:	f7ff fabd 	bl	800b058 <my_find_char_position>
 800bade:	0003      	movs	r3, r0
 800bae0:	001a      	movs	r2, r3
 800bae2:	2417      	movs	r4, #23
 800bae4:	193b      	adds	r3, r7, r4
 800bae6:	3203      	adds	r2, #3
 800bae8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800baea:	2003      	movs	r0, #3
 800baec:	f000 f942 	bl	800bd74 <malloc>
 800baf0:	0003      	movs	r3, r0
 800baf2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800baf4:	193b      	adds	r3, r7, r4
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	18d1      	adds	r1, r2, r3
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	2202      	movs	r2, #2
 800bb00:	0018      	movs	r0, r3
 800bb02:	f001 fc84 	bl	800d40e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	3302      	adds	r3, #2
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800bb0e:	240e      	movs	r4, #14
 800bb10:	193a      	adds	r2, r7, r4
 800bb12:	4909      	ldr	r1, [pc, #36]	; (800bb38 <my_nmea_get_rmc_utc_mm+0x70>)
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	0018      	movs	r0, r3
 800bb18:	f001 fbdc 	bl	800d2d4 <sscanf>
	free ( s ) ;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	0018      	movs	r0, r3
 800bb20:	f000 f932 	bl	800bd88 <free>
	*mm = (uint8_t) temp ;
 800bb24:	193b      	adds	r3, r7, r4
 800bb26:	881b      	ldrh	r3, [r3, #0]
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	701a      	strb	r2, [r3, #0]

}
 800bb2e:	46c0      	nop			; (mov r8, r8)
 800bb30:	46bd      	mov	sp, r7
 800bb32:	b007      	add	sp, #28
 800bb34:	bd90      	pop	{r4, r7, pc}
 800bb36:	46c0      	nop			; (mov r8, r8)
 800bb38:	080159b0 	.word	0x080159b0

0800bb3c <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800bb3c:	b590      	push	{r4, r7, lr}
 800bb3e:	b087      	sub	sp, #28
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	212c      	movs	r1, #44	; 0x2c
 800bb4c:	0018      	movs	r0, r3
 800bb4e:	f7ff fa83 	bl	800b058 <my_find_char_position>
 800bb52:	0003      	movs	r3, r0
 800bb54:	001a      	movs	r2, r3
 800bb56:	2417      	movs	r4, #23
 800bb58:	193b      	adds	r3, r7, r4
 800bb5a:	3205      	adds	r2, #5
 800bb5c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800bb5e:	2003      	movs	r0, #3
 800bb60:	f000 f908 	bl	800bd74 <malloc>
 800bb64:	0003      	movs	r3, r0
 800bb66:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800bb68:	193b      	adds	r3, r7, r4
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	18d1      	adds	r1, r2, r3
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	2202      	movs	r2, #2
 800bb74:	0018      	movs	r0, r3
 800bb76:	f001 fc4a 	bl	800d40e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	3302      	adds	r3, #2
 800bb7e:	2200      	movs	r2, #0
 800bb80:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800bb82:	240e      	movs	r4, #14
 800bb84:	193a      	adds	r2, r7, r4
 800bb86:	4909      	ldr	r1, [pc, #36]	; (800bbac <my_nmea_get_rmc_utc_ss+0x70>)
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	0018      	movs	r0, r3
 800bb8c:	f001 fba2 	bl	800d2d4 <sscanf>
	free ( s ) ;
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	0018      	movs	r0, r3
 800bb94:	f000 f8f8 	bl	800bd88 <free>
	*ss = (uint8_t) temp ;
 800bb98:	193b      	adds	r3, r7, r4
 800bb9a:	881b      	ldrh	r3, [r3, #0]
 800bb9c:	b2da      	uxtb	r2, r3
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	701a      	strb	r2, [r3, #0]

}
 800bba2:	46c0      	nop			; (mov r8, r8)
 800bba4:	46bd      	mov	sp, r7
 800bba6:	b007      	add	sp, #28
 800bba8:	bd90      	pop	{r4, r7, pc}
 800bbaa:	46c0      	nop			; (mov r8, r8)
 800bbac:	080159b0 	.word	0x080159b0

0800bbb0 <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800bbb0:	b590      	push	{r4, r7, lr}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	212c      	movs	r1, #44	; 0x2c
 800bbc0:	0018      	movs	r0, r3
 800bbc2:	f7ff fa49 	bl	800b058 <my_find_char_position>
 800bbc6:	0003      	movs	r3, r0
 800bbc8:	001a      	movs	r2, r3
 800bbca:	240f      	movs	r4, #15
 800bbcc:	193b      	adds	r3, r7, r4
 800bbce:	3208      	adds	r2, #8
 800bbd0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800bbd2:	2004      	movs	r0, #4
 800bbd4:	f000 f8ce 	bl	800bd74 <malloc>
 800bbd8:	0003      	movs	r3, r0
 800bbda:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800bbdc:	193b      	adds	r3, r7, r4
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	18d1      	adds	r1, r2, r3
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	2203      	movs	r2, #3
 800bbe8:	0018      	movs	r0, r3
 800bbea:	f001 fc10 	bl	800d40e <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	3303      	adds	r3, #3
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	4906      	ldr	r1, [pc, #24]	; (800bc14 <my_nmea_get_rmc_utc_sss+0x64>)
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	0018      	movs	r0, r3
 800bbfe:	f001 fb69 	bl	800d2d4 <sscanf>
	free ( s ) ;
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	0018      	movs	r0, r3
 800bc06:	f000 f8bf 	bl	800bd88 <free>
}
 800bc0a:	46c0      	nop			; (mov r8, r8)
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	b005      	add	sp, #20
 800bc10:	bd90      	pop	{r4, r7, pc}
 800bc12:	46c0      	nop			; (mov r8, r8)
 800bc14:	080159b4 	.word	0x080159b4

0800bc18 <my_tracker_api_is_cmd>:
#include <my_tracker_api.h>



bool my_tracker_api_is_cmd ( const char* c )
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b086      	sub	sp, #24
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
	size_t l = strlen ( c ) ;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	0018      	movs	r0, r3
 800bc24:	f7f4 fa6e 	bl	8000104 <strlen>
 800bc28:	0003      	movs	r3, r0
 800bc2a:	613b      	str	r3, [r7, #16]
	uint8_t i = 0 ; // Znaków nie może być więcej niż max. cmd payload czyli 80
 800bc2c:	2317      	movs	r3, #23
 800bc2e:	18fb      	adds	r3, r7, r3
 800bc30:	2200      	movs	r2, #0
 800bc32:	701a      	strb	r2, [r3, #0]
	uint8_t liczba_przecinkow = 0 ;
 800bc34:	2316      	movs	r3, #22
 800bc36:	18fb      	adds	r3, r7, r3
 800bc38:	2200      	movs	r2, #0
 800bc3a:	701a      	strb	r2, [r3, #0]

	if ( l < 3 || l > 9 )
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	d902      	bls.n	800bc48 <my_tracker_api_is_cmd+0x30>
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	2b09      	cmp	r3, #9
 800bc46:	d901      	bls.n	800bc4c <my_tracker_api_is_cmd+0x34>
		return false ;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	e04b      	b.n	800bce4 <my_tracker_api_is_cmd+0xcc>

	for ( i = 0 ; i < l ; i++ )
 800bc4c:	2317      	movs	r3, #23
 800bc4e:	18fb      	adds	r3, r7, r3
 800bc50:	2200      	movs	r2, #0
 800bc52:	701a      	strb	r2, [r3, #0]
 800bc54:	e025      	b.n	800bca2 <my_tracker_api_is_cmd+0x8a>
	{
		if ( c[i] == ',' )
 800bc56:	2317      	movs	r3, #23
 800bc58:	18fb      	adds	r3, r7, r3
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	18d3      	adds	r3, r2, r3
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	2b2c      	cmp	r3, #44	; 0x2c
 800bc64:	d106      	bne.n	800bc74 <my_tracker_api_is_cmd+0x5c>
			liczba_przecinkow++ ;
 800bc66:	2116      	movs	r1, #22
 800bc68:	187b      	adds	r3, r7, r1
 800bc6a:	781a      	ldrb	r2, [r3, #0]
 800bc6c:	187b      	adds	r3, r7, r1
 800bc6e:	3201      	adds	r2, #1
 800bc70:	701a      	strb	r2, [r3, #0]
 800bc72:	e010      	b.n	800bc96 <my_tracker_api_is_cmd+0x7e>
		else if ( c[i] < '0' || c[i] > '9' )
 800bc74:	2117      	movs	r1, #23
 800bc76:	187b      	adds	r3, r7, r1
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	18d3      	adds	r3, r2, r3
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	2b2f      	cmp	r3, #47	; 0x2f
 800bc82:	d906      	bls.n	800bc92 <my_tracker_api_is_cmd+0x7a>
 800bc84:	187b      	adds	r3, r7, r1
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	18d3      	adds	r3, r2, r3
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	2b39      	cmp	r3, #57	; 0x39
 800bc90:	d901      	bls.n	800bc96 <my_tracker_api_is_cmd+0x7e>
			return false;
 800bc92:	2300      	movs	r3, #0
 800bc94:	e026      	b.n	800bce4 <my_tracker_api_is_cmd+0xcc>
	for ( i = 0 ; i < l ; i++ )
 800bc96:	2117      	movs	r1, #23
 800bc98:	187b      	adds	r3, r7, r1
 800bc9a:	781a      	ldrb	r2, [r3, #0]
 800bc9c:	187b      	adds	r3, r7, r1
 800bc9e:	3201      	adds	r2, #1
 800bca0:	701a      	strb	r2, [r3, #0]
 800bca2:	2317      	movs	r3, #23
 800bca4:	18fb      	adds	r3, r7, r3
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	693a      	ldr	r2, [r7, #16]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d8d3      	bhi.n	800bc56 <my_tracker_api_is_cmd+0x3e>
	}

	if ( /*c[0] == ',' || c[l-1] == ',' ||*/ liczba_przecinkow > 1 )
 800bcae:	2316      	movs	r3, #22
 800bcb0:	18fb      	adds	r3, r7, r3
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d901      	bls.n	800bcbc <my_tracker_api_is_cmd+0xa4>
		return false ;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	e013      	b.n	800bce4 <my_tracker_api_is_cmd+0xcc>

	const char* comma_p = strchr ( c , ',' ) ;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	212c      	movs	r1, #44	; 0x2c
 800bcc0:	0018      	movs	r0, r3
 800bcc2:	f001 fb85 	bl	800d3d0 <strchr>
 800bcc6:	0003      	movs	r3, r0
 800bcc8:	60fb      	str	r3, [r7, #12]
	size_t cmd_code_length = comma_p - c ;
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	1ad3      	subs	r3, r2, r3
 800bcd0:	60bb      	str	r3, [r7, #8]
	if ( cmd_code_length > 2 || cmd_code_length < 1 )
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	d802      	bhi.n	800bcde <my_tracker_api_is_cmd+0xc6>
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d101      	bne.n	800bce2 <my_tracker_api_is_cmd+0xca>
		return false ;
 800bcde:	2300      	movs	r3, #0
 800bce0:	e000      	b.n	800bce4 <my_tracker_api_is_cmd+0xcc>

	return true ;
 800bce2:	2301      	movs	r3, #1
}
 800bce4:	0018      	movs	r0, r3
 800bce6:	46bd      	mov	sp, r7
 800bce8:	b006      	add	sp, #24
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <my_tracker_api_parse_cmd>:

	return cmd_value ;
}

bool my_tracker_api_parse_cmd ( cmd_astro* cmd , char* s )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
	cmd->code = 0 ;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	701a      	strb	r2, [r3, #0]
	cmd->value = 0 ;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	605a      	str	r2, [r3, #4]
	cmd->is_executed = false ;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2200      	movs	r2, #0
 800bd06:	721a      	strb	r2, [r3, #8]

	char* tok = strtok ( s , "," ) ;
 800bd08:	4a19      	ldr	r2, [pc, #100]	; (800bd70 <my_tracker_api_parse_cmd+0x84>)
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	0011      	movs	r1, r2
 800bd0e:	0018      	movs	r0, r3
 800bd10:	f001 fb92 	bl	800d438 <strtok>
 800bd14:	0003      	movs	r3, r0
 800bd16:	60fb      	str	r3, [r7, #12]
	cmd->code = (uint8_t) my_conv_string_2_uint32_t ( tok ) ;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	0018      	movs	r0, r3
 800bd1c:	f7ff fb3e 	bl	800b39c <my_conv_string_2_uint32_t>
 800bd20:	0003      	movs	r3, r0
 800bd22:	b2da      	uxtb	r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	701a      	strb	r2, [r3, #0]
	tok = strtok ( NULL , "," ) ;
 800bd28:	4b11      	ldr	r3, [pc, #68]	; (800bd70 <my_tracker_api_parse_cmd+0x84>)
 800bd2a:	0019      	movs	r1, r3
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	f001 fb83 	bl	800d438 <strtok>
 800bd32:	0003      	movs	r3, r0
 800bd34:	60fb      	str	r3, [r7, #12]
	cmd->value = my_conv_string_2_uint32_t ( tok ) ;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	0018      	movs	r0, r3
 800bd3a:	f7ff fb2f 	bl	800b39c <my_conv_string_2_uint32_t>
 800bd3e:	0002      	movs	r2, r0
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	605a      	str	r2, [r3, #4]
	tok = strtok ( NULL , "," ) ;
 800bd44:	4b0a      	ldr	r3, [pc, #40]	; (800bd70 <my_tracker_api_parse_cmd+0x84>)
 800bd46:	0019      	movs	r1, r3
 800bd48:	2000      	movs	r0, #0
 800bd4a:	f001 fb75 	bl	800d438 <strtok>
 800bd4e:	0003      	movs	r3, r0
 800bd50:	60fb      	str	r3, [r7, #12]

	if ( cmd->code == 0 || tok != NULL )
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d002      	beq.n	800bd60 <my_tracker_api_parse_cmd+0x74>
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d001      	beq.n	800bd64 <my_tracker_api_parse_cmd+0x78>
		return false ;
 800bd60:	2300      	movs	r3, #0
 800bd62:	e000      	b.n	800bd66 <my_tracker_api_parse_cmd+0x7a>
	else
		return true ;
 800bd64:	2301      	movs	r3, #1
}
 800bd66:	0018      	movs	r0, r3
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	b004      	add	sp, #16
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	46c0      	nop			; (mov r8, r8)
 800bd70:	080159b8 	.word	0x080159b8

0800bd74 <malloc>:
 800bd74:	b510      	push	{r4, lr}
 800bd76:	4b03      	ldr	r3, [pc, #12]	; (800bd84 <malloc+0x10>)
 800bd78:	0001      	movs	r1, r0
 800bd7a:	6818      	ldr	r0, [r3, #0]
 800bd7c:	f000 f80e 	bl	800bd9c <_malloc_r>
 800bd80:	bd10      	pop	{r4, pc}
 800bd82:	46c0      	nop			; (mov r8, r8)
 800bd84:	200006d0 	.word	0x200006d0

0800bd88 <free>:
 800bd88:	b510      	push	{r4, lr}
 800bd8a:	4b03      	ldr	r3, [pc, #12]	; (800bd98 <free+0x10>)
 800bd8c:	0001      	movs	r1, r0
 800bd8e:	6818      	ldr	r0, [r3, #0]
 800bd90:	f001 fcbe 	bl	800d710 <_free_r>
 800bd94:	bd10      	pop	{r4, pc}
 800bd96:	46c0      	nop			; (mov r8, r8)
 800bd98:	200006d0 	.word	0x200006d0

0800bd9c <_malloc_r>:
 800bd9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd9e:	000d      	movs	r5, r1
 800bda0:	b087      	sub	sp, #28
 800bda2:	350b      	adds	r5, #11
 800bda4:	9001      	str	r0, [sp, #4]
 800bda6:	2d16      	cmp	r5, #22
 800bda8:	d908      	bls.n	800bdbc <_malloc_r+0x20>
 800bdaa:	2207      	movs	r2, #7
 800bdac:	4395      	bics	r5, r2
 800bdae:	d506      	bpl.n	800bdbe <_malloc_r+0x22>
 800bdb0:	230c      	movs	r3, #12
 800bdb2:	9a01      	ldr	r2, [sp, #4]
 800bdb4:	6013      	str	r3, [r2, #0]
 800bdb6:	2000      	movs	r0, #0
 800bdb8:	b007      	add	sp, #28
 800bdba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdbc:	2510      	movs	r5, #16
 800bdbe:	42a9      	cmp	r1, r5
 800bdc0:	d8f6      	bhi.n	800bdb0 <_malloc_r+0x14>
 800bdc2:	9801      	ldr	r0, [sp, #4]
 800bdc4:	f000 f9fe 	bl	800c1c4 <__malloc_lock>
 800bdc8:	23fc      	movs	r3, #252	; 0xfc
 800bdca:	4ebe      	ldr	r6, [pc, #760]	; (800c0c4 <_malloc_r+0x328>)
 800bdcc:	005b      	lsls	r3, r3, #1
 800bdce:	429d      	cmp	r5, r3
 800bdd0:	d219      	bcs.n	800be06 <_malloc_r+0x6a>
 800bdd2:	002a      	movs	r2, r5
 800bdd4:	3208      	adds	r2, #8
 800bdd6:	18b2      	adds	r2, r6, r2
 800bdd8:	0011      	movs	r1, r2
 800bdda:	6854      	ldr	r4, [r2, #4]
 800bddc:	3908      	subs	r1, #8
 800bdde:	08eb      	lsrs	r3, r5, #3
 800bde0:	428c      	cmp	r4, r1
 800bde2:	d103      	bne.n	800bdec <_malloc_r+0x50>
 800bde4:	68d4      	ldr	r4, [r2, #12]
 800bde6:	3302      	adds	r3, #2
 800bde8:	42a2      	cmp	r2, r4
 800bdea:	d022      	beq.n	800be32 <_malloc_r+0x96>
 800bdec:	2203      	movs	r2, #3
 800bdee:	6863      	ldr	r3, [r4, #4]
 800bdf0:	68a1      	ldr	r1, [r4, #8]
 800bdf2:	4393      	bics	r3, r2
 800bdf4:	68e2      	ldr	r2, [r4, #12]
 800bdf6:	18e3      	adds	r3, r4, r3
 800bdf8:	60ca      	str	r2, [r1, #12]
 800bdfa:	6091      	str	r1, [r2, #8]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	6859      	ldr	r1, [r3, #4]
 800be00:	430a      	orrs	r2, r1
 800be02:	605a      	str	r2, [r3, #4]
 800be04:	e02a      	b.n	800be5c <_malloc_r+0xc0>
 800be06:	233f      	movs	r3, #63	; 0x3f
 800be08:	0a6a      	lsrs	r2, r5, #9
 800be0a:	d003      	beq.n	800be14 <_malloc_r+0x78>
 800be0c:	2a04      	cmp	r2, #4
 800be0e:	d82b      	bhi.n	800be68 <_malloc_r+0xcc>
 800be10:	09ab      	lsrs	r3, r5, #6
 800be12:	3338      	adds	r3, #56	; 0x38
 800be14:	2203      	movs	r2, #3
 800be16:	4694      	mov	ip, r2
 800be18:	00d9      	lsls	r1, r3, #3
 800be1a:	1989      	adds	r1, r1, r6
 800be1c:	68cc      	ldr	r4, [r1, #12]
 800be1e:	428c      	cmp	r4, r1
 800be20:	d006      	beq.n	800be30 <_malloc_r+0x94>
 800be22:	4660      	mov	r0, ip
 800be24:	6862      	ldr	r2, [r4, #4]
 800be26:	4382      	bics	r2, r0
 800be28:	1b57      	subs	r7, r2, r5
 800be2a:	2f0f      	cmp	r7, #15
 800be2c:	dd34      	ble.n	800be98 <_malloc_r+0xfc>
 800be2e:	3b01      	subs	r3, #1
 800be30:	3301      	adds	r3, #1
 800be32:	6934      	ldr	r4, [r6, #16]
 800be34:	49a4      	ldr	r1, [pc, #656]	; (800c0c8 <_malloc_r+0x32c>)
 800be36:	428c      	cmp	r4, r1
 800be38:	d055      	beq.n	800bee6 <_malloc_r+0x14a>
 800be3a:	2003      	movs	r0, #3
 800be3c:	6862      	ldr	r2, [r4, #4]
 800be3e:	4382      	bics	r2, r0
 800be40:	1b50      	subs	r0, r2, r5
 800be42:	280f      	cmp	r0, #15
 800be44:	dd36      	ble.n	800beb4 <_malloc_r+0x118>
 800be46:	2301      	movs	r3, #1
 800be48:	1967      	adds	r7, r4, r5
 800be4a:	431d      	orrs	r5, r3
 800be4c:	4303      	orrs	r3, r0
 800be4e:	6065      	str	r5, [r4, #4]
 800be50:	6177      	str	r7, [r6, #20]
 800be52:	6137      	str	r7, [r6, #16]
 800be54:	60f9      	str	r1, [r7, #12]
 800be56:	60b9      	str	r1, [r7, #8]
 800be58:	607b      	str	r3, [r7, #4]
 800be5a:	50a0      	str	r0, [r4, r2]
 800be5c:	9801      	ldr	r0, [sp, #4]
 800be5e:	f000 f9b9 	bl	800c1d4 <__malloc_unlock>
 800be62:	0020      	movs	r0, r4
 800be64:	3008      	adds	r0, #8
 800be66:	e7a7      	b.n	800bdb8 <_malloc_r+0x1c>
 800be68:	2a14      	cmp	r2, #20
 800be6a:	d802      	bhi.n	800be72 <_malloc_r+0xd6>
 800be6c:	0013      	movs	r3, r2
 800be6e:	335b      	adds	r3, #91	; 0x5b
 800be70:	e7d0      	b.n	800be14 <_malloc_r+0x78>
 800be72:	2a54      	cmp	r2, #84	; 0x54
 800be74:	d802      	bhi.n	800be7c <_malloc_r+0xe0>
 800be76:	0b2b      	lsrs	r3, r5, #12
 800be78:	336e      	adds	r3, #110	; 0x6e
 800be7a:	e7cb      	b.n	800be14 <_malloc_r+0x78>
 800be7c:	23aa      	movs	r3, #170	; 0xaa
 800be7e:	005b      	lsls	r3, r3, #1
 800be80:	429a      	cmp	r2, r3
 800be82:	d802      	bhi.n	800be8a <_malloc_r+0xee>
 800be84:	0beb      	lsrs	r3, r5, #15
 800be86:	3377      	adds	r3, #119	; 0x77
 800be88:	e7c4      	b.n	800be14 <_malloc_r+0x78>
 800be8a:	4990      	ldr	r1, [pc, #576]	; (800c0cc <_malloc_r+0x330>)
 800be8c:	237e      	movs	r3, #126	; 0x7e
 800be8e:	428a      	cmp	r2, r1
 800be90:	d8c0      	bhi.n	800be14 <_malloc_r+0x78>
 800be92:	0cab      	lsrs	r3, r5, #18
 800be94:	337c      	adds	r3, #124	; 0x7c
 800be96:	e7bd      	b.n	800be14 <_malloc_r+0x78>
 800be98:	68e0      	ldr	r0, [r4, #12]
 800be9a:	2f00      	cmp	r7, #0
 800be9c:	db08      	blt.n	800beb0 <_malloc_r+0x114>
 800be9e:	68a3      	ldr	r3, [r4, #8]
 800bea0:	60d8      	str	r0, [r3, #12]
 800bea2:	6083      	str	r3, [r0, #8]
 800bea4:	2301      	movs	r3, #1
 800bea6:	18a2      	adds	r2, r4, r2
 800bea8:	6851      	ldr	r1, [r2, #4]
 800beaa:	430b      	orrs	r3, r1
 800beac:	6053      	str	r3, [r2, #4]
 800beae:	e7d5      	b.n	800be5c <_malloc_r+0xc0>
 800beb0:	0004      	movs	r4, r0
 800beb2:	e7b4      	b.n	800be1e <_malloc_r+0x82>
 800beb4:	6171      	str	r1, [r6, #20]
 800beb6:	6131      	str	r1, [r6, #16]
 800beb8:	2800      	cmp	r0, #0
 800beba:	daf3      	bge.n	800bea4 <_malloc_r+0x108>
 800bebc:	6871      	ldr	r1, [r6, #4]
 800bebe:	468c      	mov	ip, r1
 800bec0:	2180      	movs	r1, #128	; 0x80
 800bec2:	0089      	lsls	r1, r1, #2
 800bec4:	428a      	cmp	r2, r1
 800bec6:	d300      	bcc.n	800beca <_malloc_r+0x12e>
 800bec8:	e08c      	b.n	800bfe4 <_malloc_r+0x248>
 800beca:	08d1      	lsrs	r1, r2, #3
 800becc:	0950      	lsrs	r0, r2, #5
 800bece:	2201      	movs	r2, #1
 800bed0:	4082      	lsls	r2, r0
 800bed2:	4660      	mov	r0, ip
 800bed4:	4302      	orrs	r2, r0
 800bed6:	6072      	str	r2, [r6, #4]
 800bed8:	00ca      	lsls	r2, r1, #3
 800beda:	1992      	adds	r2, r2, r6
 800bedc:	6891      	ldr	r1, [r2, #8]
 800bede:	60e2      	str	r2, [r4, #12]
 800bee0:	60a1      	str	r1, [r4, #8]
 800bee2:	6094      	str	r4, [r2, #8]
 800bee4:	60cc      	str	r4, [r1, #12]
 800bee6:	2201      	movs	r2, #1
 800bee8:	4876      	ldr	r0, [pc, #472]	; (800c0c4 <_malloc_r+0x328>)
 800beea:	1099      	asrs	r1, r3, #2
 800beec:	408a      	lsls	r2, r1
 800beee:	6841      	ldr	r1, [r0, #4]
 800bef0:	4291      	cmp	r1, r2
 800bef2:	d328      	bcc.n	800bf46 <_malloc_r+0x1aa>
 800bef4:	420a      	tst	r2, r1
 800bef6:	d105      	bne.n	800bf04 <_malloc_r+0x168>
 800bef8:	2403      	movs	r4, #3
 800befa:	43a3      	bics	r3, r4
 800befc:	0052      	lsls	r2, r2, #1
 800befe:	3304      	adds	r3, #4
 800bf00:	420a      	tst	r2, r1
 800bf02:	d0fb      	beq.n	800befc <_malloc_r+0x160>
 800bf04:	496f      	ldr	r1, [pc, #444]	; (800c0c4 <_malloc_r+0x328>)
 800bf06:	9104      	str	r1, [sp, #16]
 800bf08:	00d9      	lsls	r1, r3, #3
 800bf0a:	1841      	adds	r1, r0, r1
 800bf0c:	468c      	mov	ip, r1
 800bf0e:	000f      	movs	r7, r1
 800bf10:	9302      	str	r3, [sp, #8]
 800bf12:	68fc      	ldr	r4, [r7, #12]
 800bf14:	42bc      	cmp	r4, r7
 800bf16:	d000      	beq.n	800bf1a <_malloc_r+0x17e>
 800bf18:	e09b      	b.n	800c052 <_malloc_r+0x2b6>
 800bf1a:	2403      	movs	r4, #3
 800bf1c:	9902      	ldr	r1, [sp, #8]
 800bf1e:	3708      	adds	r7, #8
 800bf20:	3101      	adds	r1, #1
 800bf22:	9102      	str	r1, [sp, #8]
 800bf24:	4221      	tst	r1, r4
 800bf26:	d1f4      	bne.n	800bf12 <_malloc_r+0x176>
 800bf28:	2103      	movs	r1, #3
 800bf2a:	420b      	tst	r3, r1
 800bf2c:	d000      	beq.n	800bf30 <_malloc_r+0x194>
 800bf2e:	e0b7      	b.n	800c0a0 <_malloc_r+0x304>
 800bf30:	6843      	ldr	r3, [r0, #4]
 800bf32:	4393      	bics	r3, r2
 800bf34:	6043      	str	r3, [r0, #4]
 800bf36:	9b04      	ldr	r3, [sp, #16]
 800bf38:	0052      	lsls	r2, r2, #1
 800bf3a:	6859      	ldr	r1, [r3, #4]
 800bf3c:	4291      	cmp	r1, r2
 800bf3e:	d302      	bcc.n	800bf46 <_malloc_r+0x1aa>
 800bf40:	2a00      	cmp	r2, #0
 800bf42:	d000      	beq.n	800bf46 <_malloc_r+0x1aa>
 800bf44:	e0bb      	b.n	800c0be <_malloc_r+0x322>
 800bf46:	2203      	movs	r2, #3
 800bf48:	6883      	ldr	r3, [r0, #8]
 800bf4a:	9302      	str	r3, [sp, #8]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	4393      	bics	r3, r2
 800bf50:	9303      	str	r3, [sp, #12]
 800bf52:	42ab      	cmp	r3, r5
 800bf54:	d303      	bcc.n	800bf5e <_malloc_r+0x1c2>
 800bf56:	1b59      	subs	r1, r3, r5
 800bf58:	290f      	cmp	r1, #15
 800bf5a:	dd00      	ble.n	800bf5e <_malloc_r+0x1c2>
 800bf5c:	e123      	b.n	800c1a6 <_malloc_r+0x40a>
 800bf5e:	9b02      	ldr	r3, [sp, #8]
 800bf60:	9a03      	ldr	r2, [sp, #12]
 800bf62:	2008      	movs	r0, #8
 800bf64:	189e      	adds	r6, r3, r2
 800bf66:	4b5a      	ldr	r3, [pc, #360]	; (800c0d0 <_malloc_r+0x334>)
 800bf68:	681f      	ldr	r7, [r3, #0]
 800bf6a:	f001 fb4b 	bl	800d604 <sysconf>
 800bf6e:	4b59      	ldr	r3, [pc, #356]	; (800c0d4 <_malloc_r+0x338>)
 800bf70:	3710      	adds	r7, #16
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	197f      	adds	r7, r7, r5
 800bf76:	9004      	str	r0, [sp, #16]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	d003      	beq.n	800bf84 <_malloc_r+0x1e8>
 800bf7c:	1e7b      	subs	r3, r7, #1
 800bf7e:	181b      	adds	r3, r3, r0
 800bf80:	4247      	negs	r7, r0
 800bf82:	401f      	ands	r7, r3
 800bf84:	0039      	movs	r1, r7
 800bf86:	9801      	ldr	r0, [sp, #4]
 800bf88:	f001 fae8 	bl	800d55c <_sbrk_r>
 800bf8c:	0004      	movs	r4, r0
 800bf8e:	1c43      	adds	r3, r0, #1
 800bf90:	d100      	bne.n	800bf94 <_malloc_r+0x1f8>
 800bf92:	e0de      	b.n	800c152 <_malloc_r+0x3b6>
 800bf94:	4286      	cmp	r6, r0
 800bf96:	d904      	bls.n	800bfa2 <_malloc_r+0x206>
 800bf98:	4b4a      	ldr	r3, [pc, #296]	; (800c0c4 <_malloc_r+0x328>)
 800bf9a:	9a02      	ldr	r2, [sp, #8]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d000      	beq.n	800bfa2 <_malloc_r+0x206>
 800bfa0:	e0d7      	b.n	800c152 <_malloc_r+0x3b6>
 800bfa2:	4a4d      	ldr	r2, [pc, #308]	; (800c0d8 <_malloc_r+0x33c>)
 800bfa4:	6813      	ldr	r3, [r2, #0]
 800bfa6:	18fb      	adds	r3, r7, r3
 800bfa8:	6013      	str	r3, [r2, #0]
 800bfaa:	9a04      	ldr	r2, [sp, #16]
 800bfac:	3a01      	subs	r2, #1
 800bfae:	42a6      	cmp	r6, r4
 800bfb0:	d000      	beq.n	800bfb4 <_malloc_r+0x218>
 800bfb2:	e097      	b.n	800c0e4 <_malloc_r+0x348>
 800bfb4:	4216      	tst	r6, r2
 800bfb6:	d000      	beq.n	800bfba <_malloc_r+0x21e>
 800bfb8:	e094      	b.n	800c0e4 <_malloc_r+0x348>
 800bfba:	4b42      	ldr	r3, [pc, #264]	; (800c0c4 <_malloc_r+0x328>)
 800bfbc:	689a      	ldr	r2, [r3, #8]
 800bfbe:	9b03      	ldr	r3, [sp, #12]
 800bfc0:	19df      	adds	r7, r3, r7
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	433b      	orrs	r3, r7
 800bfc6:	6053      	str	r3, [r2, #4]
 800bfc8:	4b43      	ldr	r3, [pc, #268]	; (800c0d8 <_malloc_r+0x33c>)
 800bfca:	4a44      	ldr	r2, [pc, #272]	; (800c0dc <_malloc_r+0x340>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	6811      	ldr	r1, [r2, #0]
 800bfd0:	428b      	cmp	r3, r1
 800bfd2:	d900      	bls.n	800bfd6 <_malloc_r+0x23a>
 800bfd4:	6013      	str	r3, [r2, #0]
 800bfd6:	4a42      	ldr	r2, [pc, #264]	; (800c0e0 <_malloc_r+0x344>)
 800bfd8:	6811      	ldr	r1, [r2, #0]
 800bfda:	428b      	cmp	r3, r1
 800bfdc:	d800      	bhi.n	800bfe0 <_malloc_r+0x244>
 800bfde:	e0b8      	b.n	800c152 <_malloc_r+0x3b6>
 800bfe0:	6013      	str	r3, [r2, #0]
 800bfe2:	e0b6      	b.n	800c152 <_malloc_r+0x3b6>
 800bfe4:	0a50      	lsrs	r0, r2, #9
 800bfe6:	2804      	cmp	r0, #4
 800bfe8:	d811      	bhi.n	800c00e <_malloc_r+0x272>
 800bfea:	0991      	lsrs	r1, r2, #6
 800bfec:	3138      	adds	r1, #56	; 0x38
 800bfee:	00cf      	lsls	r7, r1, #3
 800bff0:	19bf      	adds	r7, r7, r6
 800bff2:	68b8      	ldr	r0, [r7, #8]
 800bff4:	4287      	cmp	r7, r0
 800bff6:	d125      	bne.n	800c044 <_malloc_r+0x2a8>
 800bff8:	2201      	movs	r2, #1
 800bffa:	1089      	asrs	r1, r1, #2
 800bffc:	408a      	lsls	r2, r1
 800bffe:	4661      	mov	r1, ip
 800c000:	430a      	orrs	r2, r1
 800c002:	6072      	str	r2, [r6, #4]
 800c004:	60e7      	str	r7, [r4, #12]
 800c006:	60a0      	str	r0, [r4, #8]
 800c008:	60bc      	str	r4, [r7, #8]
 800c00a:	60c4      	str	r4, [r0, #12]
 800c00c:	e76b      	b.n	800bee6 <_malloc_r+0x14a>
 800c00e:	2814      	cmp	r0, #20
 800c010:	d802      	bhi.n	800c018 <_malloc_r+0x27c>
 800c012:	0001      	movs	r1, r0
 800c014:	315b      	adds	r1, #91	; 0x5b
 800c016:	e7ea      	b.n	800bfee <_malloc_r+0x252>
 800c018:	2854      	cmp	r0, #84	; 0x54
 800c01a:	d802      	bhi.n	800c022 <_malloc_r+0x286>
 800c01c:	0b11      	lsrs	r1, r2, #12
 800c01e:	316e      	adds	r1, #110	; 0x6e
 800c020:	e7e5      	b.n	800bfee <_malloc_r+0x252>
 800c022:	21aa      	movs	r1, #170	; 0xaa
 800c024:	0049      	lsls	r1, r1, #1
 800c026:	4288      	cmp	r0, r1
 800c028:	d802      	bhi.n	800c030 <_malloc_r+0x294>
 800c02a:	0bd1      	lsrs	r1, r2, #15
 800c02c:	3177      	adds	r1, #119	; 0x77
 800c02e:	e7de      	b.n	800bfee <_malloc_r+0x252>
 800c030:	4f26      	ldr	r7, [pc, #152]	; (800c0cc <_malloc_r+0x330>)
 800c032:	217e      	movs	r1, #126	; 0x7e
 800c034:	42b8      	cmp	r0, r7
 800c036:	d8da      	bhi.n	800bfee <_malloc_r+0x252>
 800c038:	0c91      	lsrs	r1, r2, #18
 800c03a:	317c      	adds	r1, #124	; 0x7c
 800c03c:	e7d7      	b.n	800bfee <_malloc_r+0x252>
 800c03e:	6880      	ldr	r0, [r0, #8]
 800c040:	4287      	cmp	r7, r0
 800c042:	d004      	beq.n	800c04e <_malloc_r+0x2b2>
 800c044:	2603      	movs	r6, #3
 800c046:	6841      	ldr	r1, [r0, #4]
 800c048:	43b1      	bics	r1, r6
 800c04a:	4291      	cmp	r1, r2
 800c04c:	d8f7      	bhi.n	800c03e <_malloc_r+0x2a2>
 800c04e:	68c7      	ldr	r7, [r0, #12]
 800c050:	e7d8      	b.n	800c004 <_malloc_r+0x268>
 800c052:	2603      	movs	r6, #3
 800c054:	6861      	ldr	r1, [r4, #4]
 800c056:	43b1      	bics	r1, r6
 800c058:	9103      	str	r1, [sp, #12]
 800c05a:	68e6      	ldr	r6, [r4, #12]
 800c05c:	1b49      	subs	r1, r1, r5
 800c05e:	290f      	cmp	r1, #15
 800c060:	dd10      	ble.n	800c084 <_malloc_r+0x2e8>
 800c062:	2201      	movs	r2, #1
 800c064:	1963      	adds	r3, r4, r5
 800c066:	4315      	orrs	r5, r2
 800c068:	6065      	str	r5, [r4, #4]
 800c06a:	68a5      	ldr	r5, [r4, #8]
 800c06c:	430a      	orrs	r2, r1
 800c06e:	60ee      	str	r6, [r5, #12]
 800c070:	60b5      	str	r5, [r6, #8]
 800c072:	6143      	str	r3, [r0, #20]
 800c074:	6103      	str	r3, [r0, #16]
 800c076:	4814      	ldr	r0, [pc, #80]	; (800c0c8 <_malloc_r+0x32c>)
 800c078:	605a      	str	r2, [r3, #4]
 800c07a:	60d8      	str	r0, [r3, #12]
 800c07c:	6098      	str	r0, [r3, #8]
 800c07e:	9b03      	ldr	r3, [sp, #12]
 800c080:	50e1      	str	r1, [r4, r3]
 800c082:	e6eb      	b.n	800be5c <_malloc_r+0xc0>
 800c084:	2900      	cmp	r1, #0
 800c086:	db09      	blt.n	800c09c <_malloc_r+0x300>
 800c088:	9b03      	ldr	r3, [sp, #12]
 800c08a:	18e1      	adds	r1, r4, r3
 800c08c:	2301      	movs	r3, #1
 800c08e:	684a      	ldr	r2, [r1, #4]
 800c090:	4313      	orrs	r3, r2
 800c092:	604b      	str	r3, [r1, #4]
 800c094:	68a3      	ldr	r3, [r4, #8]
 800c096:	60de      	str	r6, [r3, #12]
 800c098:	60b3      	str	r3, [r6, #8]
 800c09a:	e6df      	b.n	800be5c <_malloc_r+0xc0>
 800c09c:	0034      	movs	r4, r6
 800c09e:	e739      	b.n	800bf14 <_malloc_r+0x178>
 800c0a0:	2108      	movs	r1, #8
 800c0a2:	4249      	negs	r1, r1
 800c0a4:	448c      	add	ip, r1
 800c0a6:	4661      	mov	r1, ip
 800c0a8:	6889      	ldr	r1, [r1, #8]
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	4561      	cmp	r1, ip
 800c0ae:	d100      	bne.n	800c0b2 <_malloc_r+0x316>
 800c0b0:	e73a      	b.n	800bf28 <_malloc_r+0x18c>
 800c0b2:	e740      	b.n	800bf36 <_malloc_r+0x19a>
 800c0b4:	3304      	adds	r3, #4
 800c0b6:	0052      	lsls	r2, r2, #1
 800c0b8:	420a      	tst	r2, r1
 800c0ba:	d0fb      	beq.n	800c0b4 <_malloc_r+0x318>
 800c0bc:	e724      	b.n	800bf08 <_malloc_r+0x16c>
 800c0be:	9b02      	ldr	r3, [sp, #8]
 800c0c0:	e7fa      	b.n	800c0b8 <_malloc_r+0x31c>
 800c0c2:	46c0      	nop			; (mov r8, r8)
 800c0c4:	20000028 	.word	0x20000028
 800c0c8:	20000030 	.word	0x20000030
 800c0cc:	00000554 	.word	0x00000554
 800c0d0:	20000c78 	.word	0x20000c78
 800c0d4:	20000430 	.word	0x20000430
 800c0d8:	20000c48 	.word	0x20000c48
 800c0dc:	20000c70 	.word	0x20000c70
 800c0e0:	20000c74 	.word	0x20000c74
 800c0e4:	4934      	ldr	r1, [pc, #208]	; (800c1b8 <_malloc_r+0x41c>)
 800c0e6:	6808      	ldr	r0, [r1, #0]
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	d140      	bne.n	800c16e <_malloc_r+0x3d2>
 800c0ec:	600c      	str	r4, [r1, #0]
 800c0ee:	2107      	movs	r1, #7
 800c0f0:	0026      	movs	r6, r4
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	400e      	ands	r6, r1
 800c0f6:	420c      	tst	r4, r1
 800c0f8:	d002      	beq.n	800c100 <_malloc_r+0x364>
 800c0fa:	3308      	adds	r3, #8
 800c0fc:	1b9b      	subs	r3, r3, r6
 800c0fe:	18e4      	adds	r4, r4, r3
 800c100:	19e1      	adds	r1, r4, r7
 800c102:	9105      	str	r1, [sp, #20]
 800c104:	9f05      	ldr	r7, [sp, #20]
 800c106:	9904      	ldr	r1, [sp, #16]
 800c108:	4017      	ands	r7, r2
 800c10a:	18cb      	adds	r3, r1, r3
 800c10c:	1bdf      	subs	r7, r3, r7
 800c10e:	4017      	ands	r7, r2
 800c110:	0039      	movs	r1, r7
 800c112:	9801      	ldr	r0, [sp, #4]
 800c114:	f001 fa22 	bl	800d55c <_sbrk_r>
 800c118:	1c43      	adds	r3, r0, #1
 800c11a:	d107      	bne.n	800c12c <_malloc_r+0x390>
 800c11c:	1e37      	subs	r7, r6, #0
 800c11e:	9805      	ldr	r0, [sp, #20]
 800c120:	d004      	beq.n	800c12c <_malloc_r+0x390>
 800c122:	0030      	movs	r0, r6
 800c124:	2700      	movs	r7, #0
 800c126:	9b05      	ldr	r3, [sp, #20]
 800c128:	3808      	subs	r0, #8
 800c12a:	1818      	adds	r0, r3, r0
 800c12c:	4a23      	ldr	r2, [pc, #140]	; (800c1bc <_malloc_r+0x420>)
 800c12e:	1b00      	subs	r0, r0, r4
 800c130:	6813      	ldr	r3, [r2, #0]
 800c132:	19c0      	adds	r0, r0, r7
 800c134:	19db      	adds	r3, r3, r7
 800c136:	6013      	str	r3, [r2, #0]
 800c138:	2201      	movs	r2, #1
 800c13a:	4b21      	ldr	r3, [pc, #132]	; (800c1c0 <_malloc_r+0x424>)
 800c13c:	9902      	ldr	r1, [sp, #8]
 800c13e:	4310      	orrs	r0, r2
 800c140:	609c      	str	r4, [r3, #8]
 800c142:	6060      	str	r0, [r4, #4]
 800c144:	4299      	cmp	r1, r3
 800c146:	d100      	bne.n	800c14a <_malloc_r+0x3ae>
 800c148:	e73e      	b.n	800bfc8 <_malloc_r+0x22c>
 800c14a:	9b03      	ldr	r3, [sp, #12]
 800c14c:	2b0f      	cmp	r3, #15
 800c14e:	d813      	bhi.n	800c178 <_malloc_r+0x3dc>
 800c150:	6062      	str	r2, [r4, #4]
 800c152:	2203      	movs	r2, #3
 800c154:	4b1a      	ldr	r3, [pc, #104]	; (800c1c0 <_malloc_r+0x424>)
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	4393      	bics	r3, r2
 800c15c:	1b59      	subs	r1, r3, r5
 800c15e:	42ab      	cmp	r3, r5
 800c160:	d301      	bcc.n	800c166 <_malloc_r+0x3ca>
 800c162:	290f      	cmp	r1, #15
 800c164:	dc1f      	bgt.n	800c1a6 <_malloc_r+0x40a>
 800c166:	9801      	ldr	r0, [sp, #4]
 800c168:	f000 f834 	bl	800c1d4 <__malloc_unlock>
 800c16c:	e623      	b.n	800bdb6 <_malloc_r+0x1a>
 800c16e:	4913      	ldr	r1, [pc, #76]	; (800c1bc <_malloc_r+0x420>)
 800c170:	1ba6      	subs	r6, r4, r6
 800c172:	18f6      	adds	r6, r6, r3
 800c174:	600e      	str	r6, [r1, #0]
 800c176:	e7ba      	b.n	800c0ee <_malloc_r+0x352>
 800c178:	2107      	movs	r1, #7
 800c17a:	9b03      	ldr	r3, [sp, #12]
 800c17c:	3b0c      	subs	r3, #12
 800c17e:	438b      	bics	r3, r1
 800c180:	9902      	ldr	r1, [sp, #8]
 800c182:	6849      	ldr	r1, [r1, #4]
 800c184:	400a      	ands	r2, r1
 800c186:	9902      	ldr	r1, [sp, #8]
 800c188:	431a      	orrs	r2, r3
 800c18a:	604a      	str	r2, [r1, #4]
 800c18c:	18ca      	adds	r2, r1, r3
 800c18e:	2105      	movs	r1, #5
 800c190:	6051      	str	r1, [r2, #4]
 800c192:	6091      	str	r1, [r2, #8]
 800c194:	2b0f      	cmp	r3, #15
 800c196:	d800      	bhi.n	800c19a <_malloc_r+0x3fe>
 800c198:	e716      	b.n	800bfc8 <_malloc_r+0x22c>
 800c19a:	9902      	ldr	r1, [sp, #8]
 800c19c:	9801      	ldr	r0, [sp, #4]
 800c19e:	3108      	adds	r1, #8
 800c1a0:	f001 fab6 	bl	800d710 <_free_r>
 800c1a4:	e710      	b.n	800bfc8 <_malloc_r+0x22c>
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	0013      	movs	r3, r2
 800c1aa:	4805      	ldr	r0, [pc, #20]	; (800c1c0 <_malloc_r+0x424>)
 800c1ac:	432b      	orrs	r3, r5
 800c1ae:	6884      	ldr	r4, [r0, #8]
 800c1b0:	6063      	str	r3, [r4, #4]
 800c1b2:	1963      	adds	r3, r4, r5
 800c1b4:	6083      	str	r3, [r0, #8]
 800c1b6:	e623      	b.n	800be00 <_malloc_r+0x64>
 800c1b8:	20000430 	.word	0x20000430
 800c1bc:	20000c48 	.word	0x20000c48
 800c1c0:	20000028 	.word	0x20000028

0800c1c4 <__malloc_lock>:
 800c1c4:	b510      	push	{r4, lr}
 800c1c6:	4802      	ldr	r0, [pc, #8]	; (800c1d0 <__malloc_lock+0xc>)
 800c1c8:	f001 fa1a 	bl	800d600 <__retarget_lock_acquire_recursive>
 800c1cc:	bd10      	pop	{r4, pc}
 800c1ce:	46c0      	nop			; (mov r8, r8)
 800c1d0:	20000dbd 	.word	0x20000dbd

0800c1d4 <__malloc_unlock>:
 800c1d4:	b510      	push	{r4, lr}
 800c1d6:	4802      	ldr	r0, [pc, #8]	; (800c1e0 <__malloc_unlock+0xc>)
 800c1d8:	f001 fa13 	bl	800d602 <__retarget_lock_release_recursive>
 800c1dc:	bd10      	pop	{r4, pc}
 800c1de:	46c0      	nop			; (mov r8, r8)
 800c1e0:	20000dbd 	.word	0x20000dbd

0800c1e4 <sulp>:
 800c1e4:	b570      	push	{r4, r5, r6, lr}
 800c1e6:	0016      	movs	r6, r2
 800c1e8:	000d      	movs	r5, r1
 800c1ea:	f002 f9e7 	bl	800e5bc <__ulp>
 800c1ee:	2e00      	cmp	r6, #0
 800c1f0:	d00d      	beq.n	800c20e <sulp+0x2a>
 800c1f2:	236b      	movs	r3, #107	; 0x6b
 800c1f4:	006a      	lsls	r2, r5, #1
 800c1f6:	0d52      	lsrs	r2, r2, #21
 800c1f8:	1a9b      	subs	r3, r3, r2
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	dd07      	ble.n	800c20e <sulp+0x2a>
 800c1fe:	2400      	movs	r4, #0
 800c200:	4a03      	ldr	r2, [pc, #12]	; (800c210 <sulp+0x2c>)
 800c202:	051b      	lsls	r3, r3, #20
 800c204:	189d      	adds	r5, r3, r2
 800c206:	002b      	movs	r3, r5
 800c208:	0022      	movs	r2, r4
 800c20a:	f7f5 fa2f 	bl	800166c <__aeabi_dmul>
 800c20e:	bd70      	pop	{r4, r5, r6, pc}
 800c210:	3ff00000 	.word	0x3ff00000

0800c214 <_strtod_l>:
 800c214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c216:	b0a1      	sub	sp, #132	; 0x84
 800c218:	9219      	str	r2, [sp, #100]	; 0x64
 800c21a:	2200      	movs	r2, #0
 800c21c:	2600      	movs	r6, #0
 800c21e:	2700      	movs	r7, #0
 800c220:	9004      	str	r0, [sp, #16]
 800c222:	9107      	str	r1, [sp, #28]
 800c224:	921c      	str	r2, [sp, #112]	; 0x70
 800c226:	911b      	str	r1, [sp, #108]	; 0x6c
 800c228:	780a      	ldrb	r2, [r1, #0]
 800c22a:	2a2b      	cmp	r2, #43	; 0x2b
 800c22c:	d055      	beq.n	800c2da <_strtod_l+0xc6>
 800c22e:	d841      	bhi.n	800c2b4 <_strtod_l+0xa0>
 800c230:	2a0d      	cmp	r2, #13
 800c232:	d83b      	bhi.n	800c2ac <_strtod_l+0x98>
 800c234:	2a08      	cmp	r2, #8
 800c236:	d83b      	bhi.n	800c2b0 <_strtod_l+0x9c>
 800c238:	2a00      	cmp	r2, #0
 800c23a:	d044      	beq.n	800c2c6 <_strtod_l+0xb2>
 800c23c:	2200      	movs	r2, #0
 800c23e:	920f      	str	r2, [sp, #60]	; 0x3c
 800c240:	2100      	movs	r1, #0
 800c242:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c244:	9109      	str	r1, [sp, #36]	; 0x24
 800c246:	782a      	ldrb	r2, [r5, #0]
 800c248:	2a30      	cmp	r2, #48	; 0x30
 800c24a:	d000      	beq.n	800c24e <_strtod_l+0x3a>
 800c24c:	e085      	b.n	800c35a <_strtod_l+0x146>
 800c24e:	786a      	ldrb	r2, [r5, #1]
 800c250:	3120      	adds	r1, #32
 800c252:	438a      	bics	r2, r1
 800c254:	2a58      	cmp	r2, #88	; 0x58
 800c256:	d000      	beq.n	800c25a <_strtod_l+0x46>
 800c258:	e075      	b.n	800c346 <_strtod_l+0x132>
 800c25a:	9302      	str	r3, [sp, #8]
 800c25c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c25e:	4a97      	ldr	r2, [pc, #604]	; (800c4bc <_strtod_l+0x2a8>)
 800c260:	9301      	str	r3, [sp, #4]
 800c262:	ab1c      	add	r3, sp, #112	; 0x70
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	9804      	ldr	r0, [sp, #16]
 800c268:	ab1d      	add	r3, sp, #116	; 0x74
 800c26a:	a91b      	add	r1, sp, #108	; 0x6c
 800c26c:	f001 fb6c 	bl	800d948 <__gethex>
 800c270:	230f      	movs	r3, #15
 800c272:	0002      	movs	r2, r0
 800c274:	401a      	ands	r2, r3
 800c276:	0004      	movs	r4, r0
 800c278:	9205      	str	r2, [sp, #20]
 800c27a:	4218      	tst	r0, r3
 800c27c:	d005      	beq.n	800c28a <_strtod_l+0x76>
 800c27e:	2a06      	cmp	r2, #6
 800c280:	d12d      	bne.n	800c2de <_strtod_l+0xca>
 800c282:	1c6b      	adds	r3, r5, #1
 800c284:	931b      	str	r3, [sp, #108]	; 0x6c
 800c286:	2300      	movs	r3, #0
 800c288:	930f      	str	r3, [sp, #60]	; 0x3c
 800c28a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d002      	beq.n	800c296 <_strtod_l+0x82>
 800c290:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c292:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c294:	6013      	str	r3, [r2, #0]
 800c296:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d01b      	beq.n	800c2d4 <_strtod_l+0xc0>
 800c29c:	2380      	movs	r3, #128	; 0x80
 800c29e:	0032      	movs	r2, r6
 800c2a0:	061b      	lsls	r3, r3, #24
 800c2a2:	18fb      	adds	r3, r7, r3
 800c2a4:	0010      	movs	r0, r2
 800c2a6:	0019      	movs	r1, r3
 800c2a8:	b021      	add	sp, #132	; 0x84
 800c2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2ac:	2a20      	cmp	r2, #32
 800c2ae:	d1c5      	bne.n	800c23c <_strtod_l+0x28>
 800c2b0:	3101      	adds	r1, #1
 800c2b2:	e7b8      	b.n	800c226 <_strtod_l+0x12>
 800c2b4:	2a2d      	cmp	r2, #45	; 0x2d
 800c2b6:	d1c1      	bne.n	800c23c <_strtod_l+0x28>
 800c2b8:	3a2c      	subs	r2, #44	; 0x2c
 800c2ba:	920f      	str	r2, [sp, #60]	; 0x3c
 800c2bc:	1c4a      	adds	r2, r1, #1
 800c2be:	921b      	str	r2, [sp, #108]	; 0x6c
 800c2c0:	784a      	ldrb	r2, [r1, #1]
 800c2c2:	2a00      	cmp	r2, #0
 800c2c4:	d1bc      	bne.n	800c240 <_strtod_l+0x2c>
 800c2c6:	9b07      	ldr	r3, [sp, #28]
 800c2c8:	931b      	str	r3, [sp, #108]	; 0x6c
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1dd      	bne.n	800c290 <_strtod_l+0x7c>
 800c2d4:	0032      	movs	r2, r6
 800c2d6:	003b      	movs	r3, r7
 800c2d8:	e7e4      	b.n	800c2a4 <_strtod_l+0x90>
 800c2da:	2200      	movs	r2, #0
 800c2dc:	e7ed      	b.n	800c2ba <_strtod_l+0xa6>
 800c2de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c2e0:	2a00      	cmp	r2, #0
 800c2e2:	d007      	beq.n	800c2f4 <_strtod_l+0xe0>
 800c2e4:	2135      	movs	r1, #53	; 0x35
 800c2e6:	a81e      	add	r0, sp, #120	; 0x78
 800c2e8:	f002 fa59 	bl	800e79e <__copybits>
 800c2ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c2ee:	9804      	ldr	r0, [sp, #16]
 800c2f0:	f001 fe56 	bl	800dfa0 <_Bfree>
 800c2f4:	9805      	ldr	r0, [sp, #20]
 800c2f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c2f8:	3801      	subs	r0, #1
 800c2fa:	2804      	cmp	r0, #4
 800c2fc:	d806      	bhi.n	800c30c <_strtod_l+0xf8>
 800c2fe:	f7f3 ff09 	bl	8000114 <__gnu_thumb1_case_uqi>
 800c302:	0312      	.short	0x0312
 800c304:	1e1c      	.short	0x1e1c
 800c306:	12          	.byte	0x12
 800c307:	00          	.byte	0x00
 800c308:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c30a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c30c:	05e4      	lsls	r4, r4, #23
 800c30e:	d502      	bpl.n	800c316 <_strtod_l+0x102>
 800c310:	2380      	movs	r3, #128	; 0x80
 800c312:	061b      	lsls	r3, r3, #24
 800c314:	431f      	orrs	r7, r3
 800c316:	4b6a      	ldr	r3, [pc, #424]	; (800c4c0 <_strtod_l+0x2ac>)
 800c318:	423b      	tst	r3, r7
 800c31a:	d1b6      	bne.n	800c28a <_strtod_l+0x76>
 800c31c:	f001 f944 	bl	800d5a8 <__errno>
 800c320:	2322      	movs	r3, #34	; 0x22
 800c322:	6003      	str	r3, [r0, #0]
 800c324:	e7b1      	b.n	800c28a <_strtod_l+0x76>
 800c326:	4967      	ldr	r1, [pc, #412]	; (800c4c4 <_strtod_l+0x2b0>)
 800c328:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c32a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c32c:	400a      	ands	r2, r1
 800c32e:	4966      	ldr	r1, [pc, #408]	; (800c4c8 <_strtod_l+0x2b4>)
 800c330:	185b      	adds	r3, r3, r1
 800c332:	051b      	lsls	r3, r3, #20
 800c334:	431a      	orrs	r2, r3
 800c336:	0017      	movs	r7, r2
 800c338:	e7e8      	b.n	800c30c <_strtod_l+0xf8>
 800c33a:	4f61      	ldr	r7, [pc, #388]	; (800c4c0 <_strtod_l+0x2ac>)
 800c33c:	e7e6      	b.n	800c30c <_strtod_l+0xf8>
 800c33e:	2601      	movs	r6, #1
 800c340:	4f62      	ldr	r7, [pc, #392]	; (800c4cc <_strtod_l+0x2b8>)
 800c342:	4276      	negs	r6, r6
 800c344:	e7e2      	b.n	800c30c <_strtod_l+0xf8>
 800c346:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c348:	1c5a      	adds	r2, r3, #1
 800c34a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c34c:	785b      	ldrb	r3, [r3, #1]
 800c34e:	2b30      	cmp	r3, #48	; 0x30
 800c350:	d0f9      	beq.n	800c346 <_strtod_l+0x132>
 800c352:	2b00      	cmp	r3, #0
 800c354:	d099      	beq.n	800c28a <_strtod_l+0x76>
 800c356:	2301      	movs	r3, #1
 800c358:	9309      	str	r3, [sp, #36]	; 0x24
 800c35a:	2500      	movs	r5, #0
 800c35c:	220a      	movs	r2, #10
 800c35e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c360:	950d      	str	r5, [sp, #52]	; 0x34
 800c362:	9310      	str	r3, [sp, #64]	; 0x40
 800c364:	9508      	str	r5, [sp, #32]
 800c366:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c368:	7804      	ldrb	r4, [r0, #0]
 800c36a:	0023      	movs	r3, r4
 800c36c:	3b30      	subs	r3, #48	; 0x30
 800c36e:	b2d9      	uxtb	r1, r3
 800c370:	2909      	cmp	r1, #9
 800c372:	d927      	bls.n	800c3c4 <_strtod_l+0x1b0>
 800c374:	2201      	movs	r2, #1
 800c376:	4956      	ldr	r1, [pc, #344]	; (800c4d0 <_strtod_l+0x2bc>)
 800c378:	f001 f838 	bl	800d3ec <strncmp>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d031      	beq.n	800c3e4 <_strtod_l+0x1d0>
 800c380:	2000      	movs	r0, #0
 800c382:	0023      	movs	r3, r4
 800c384:	4684      	mov	ip, r0
 800c386:	9a08      	ldr	r2, [sp, #32]
 800c388:	900c      	str	r0, [sp, #48]	; 0x30
 800c38a:	9205      	str	r2, [sp, #20]
 800c38c:	2220      	movs	r2, #32
 800c38e:	0019      	movs	r1, r3
 800c390:	4391      	bics	r1, r2
 800c392:	000a      	movs	r2, r1
 800c394:	2100      	movs	r1, #0
 800c396:	9106      	str	r1, [sp, #24]
 800c398:	2a45      	cmp	r2, #69	; 0x45
 800c39a:	d000      	beq.n	800c39e <_strtod_l+0x18a>
 800c39c:	e0c2      	b.n	800c524 <_strtod_l+0x310>
 800c39e:	9b05      	ldr	r3, [sp, #20]
 800c3a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3a2:	4303      	orrs	r3, r0
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	428b      	cmp	r3, r1
 800c3a8:	d08d      	beq.n	800c2c6 <_strtod_l+0xb2>
 800c3aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3ac:	9307      	str	r3, [sp, #28]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	931b      	str	r3, [sp, #108]	; 0x6c
 800c3b2:	9b07      	ldr	r3, [sp, #28]
 800c3b4:	785b      	ldrb	r3, [r3, #1]
 800c3b6:	2b2b      	cmp	r3, #43	; 0x2b
 800c3b8:	d071      	beq.n	800c49e <_strtod_l+0x28a>
 800c3ba:	000c      	movs	r4, r1
 800c3bc:	2b2d      	cmp	r3, #45	; 0x2d
 800c3be:	d174      	bne.n	800c4aa <_strtod_l+0x296>
 800c3c0:	2401      	movs	r4, #1
 800c3c2:	e06d      	b.n	800c4a0 <_strtod_l+0x28c>
 800c3c4:	9908      	ldr	r1, [sp, #32]
 800c3c6:	2908      	cmp	r1, #8
 800c3c8:	dc09      	bgt.n	800c3de <_strtod_l+0x1ca>
 800c3ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c3cc:	4351      	muls	r1, r2
 800c3ce:	185b      	adds	r3, r3, r1
 800c3d0:	930d      	str	r3, [sp, #52]	; 0x34
 800c3d2:	9b08      	ldr	r3, [sp, #32]
 800c3d4:	3001      	adds	r0, #1
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	9308      	str	r3, [sp, #32]
 800c3da:	901b      	str	r0, [sp, #108]	; 0x6c
 800c3dc:	e7c3      	b.n	800c366 <_strtod_l+0x152>
 800c3de:	4355      	muls	r5, r2
 800c3e0:	195d      	adds	r5, r3, r5
 800c3e2:	e7f6      	b.n	800c3d2 <_strtod_l+0x1be>
 800c3e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3e6:	1c5a      	adds	r2, r3, #1
 800c3e8:	921b      	str	r2, [sp, #108]	; 0x6c
 800c3ea:	9a08      	ldr	r2, [sp, #32]
 800c3ec:	785b      	ldrb	r3, [r3, #1]
 800c3ee:	2a00      	cmp	r2, #0
 800c3f0:	d03a      	beq.n	800c468 <_strtod_l+0x254>
 800c3f2:	900c      	str	r0, [sp, #48]	; 0x30
 800c3f4:	9205      	str	r2, [sp, #20]
 800c3f6:	001a      	movs	r2, r3
 800c3f8:	3a30      	subs	r2, #48	; 0x30
 800c3fa:	2a09      	cmp	r2, #9
 800c3fc:	d912      	bls.n	800c424 <_strtod_l+0x210>
 800c3fe:	2201      	movs	r2, #1
 800c400:	4694      	mov	ip, r2
 800c402:	e7c3      	b.n	800c38c <_strtod_l+0x178>
 800c404:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c406:	3001      	adds	r0, #1
 800c408:	1c5a      	adds	r2, r3, #1
 800c40a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c40c:	785b      	ldrb	r3, [r3, #1]
 800c40e:	2b30      	cmp	r3, #48	; 0x30
 800c410:	d0f8      	beq.n	800c404 <_strtod_l+0x1f0>
 800c412:	001a      	movs	r2, r3
 800c414:	3a31      	subs	r2, #49	; 0x31
 800c416:	2a08      	cmp	r2, #8
 800c418:	d83c      	bhi.n	800c494 <_strtod_l+0x280>
 800c41a:	900c      	str	r0, [sp, #48]	; 0x30
 800c41c:	2000      	movs	r0, #0
 800c41e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c420:	9005      	str	r0, [sp, #20]
 800c422:	9210      	str	r2, [sp, #64]	; 0x40
 800c424:	001a      	movs	r2, r3
 800c426:	1c41      	adds	r1, r0, #1
 800c428:	3a30      	subs	r2, #48	; 0x30
 800c42a:	2b30      	cmp	r3, #48	; 0x30
 800c42c:	d016      	beq.n	800c45c <_strtod_l+0x248>
 800c42e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c430:	185b      	adds	r3, r3, r1
 800c432:	930c      	str	r3, [sp, #48]	; 0x30
 800c434:	9b05      	ldr	r3, [sp, #20]
 800c436:	210a      	movs	r1, #10
 800c438:	469c      	mov	ip, r3
 800c43a:	4484      	add	ip, r0
 800c43c:	4563      	cmp	r3, ip
 800c43e:	d115      	bne.n	800c46c <_strtod_l+0x258>
 800c440:	9905      	ldr	r1, [sp, #20]
 800c442:	9b05      	ldr	r3, [sp, #20]
 800c444:	3101      	adds	r1, #1
 800c446:	1809      	adds	r1, r1, r0
 800c448:	181b      	adds	r3, r3, r0
 800c44a:	9105      	str	r1, [sp, #20]
 800c44c:	2b08      	cmp	r3, #8
 800c44e:	dc19      	bgt.n	800c484 <_strtod_l+0x270>
 800c450:	230a      	movs	r3, #10
 800c452:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c454:	434b      	muls	r3, r1
 800c456:	2100      	movs	r1, #0
 800c458:	18d3      	adds	r3, r2, r3
 800c45a:	930d      	str	r3, [sp, #52]	; 0x34
 800c45c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c45e:	0008      	movs	r0, r1
 800c460:	1c5a      	adds	r2, r3, #1
 800c462:	921b      	str	r2, [sp, #108]	; 0x6c
 800c464:	785b      	ldrb	r3, [r3, #1]
 800c466:	e7c6      	b.n	800c3f6 <_strtod_l+0x1e2>
 800c468:	9808      	ldr	r0, [sp, #32]
 800c46a:	e7d0      	b.n	800c40e <_strtod_l+0x1fa>
 800c46c:	1c5c      	adds	r4, r3, #1
 800c46e:	2b08      	cmp	r3, #8
 800c470:	dc04      	bgt.n	800c47c <_strtod_l+0x268>
 800c472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c474:	434b      	muls	r3, r1
 800c476:	930d      	str	r3, [sp, #52]	; 0x34
 800c478:	0023      	movs	r3, r4
 800c47a:	e7df      	b.n	800c43c <_strtod_l+0x228>
 800c47c:	2c10      	cmp	r4, #16
 800c47e:	dcfb      	bgt.n	800c478 <_strtod_l+0x264>
 800c480:	434d      	muls	r5, r1
 800c482:	e7f9      	b.n	800c478 <_strtod_l+0x264>
 800c484:	9b05      	ldr	r3, [sp, #20]
 800c486:	2100      	movs	r1, #0
 800c488:	2b10      	cmp	r3, #16
 800c48a:	dce7      	bgt.n	800c45c <_strtod_l+0x248>
 800c48c:	230a      	movs	r3, #10
 800c48e:	435d      	muls	r5, r3
 800c490:	1955      	adds	r5, r2, r5
 800c492:	e7e3      	b.n	800c45c <_strtod_l+0x248>
 800c494:	2200      	movs	r2, #0
 800c496:	920c      	str	r2, [sp, #48]	; 0x30
 800c498:	9205      	str	r2, [sp, #20]
 800c49a:	3201      	adds	r2, #1
 800c49c:	e7b0      	b.n	800c400 <_strtod_l+0x1ec>
 800c49e:	2400      	movs	r4, #0
 800c4a0:	9b07      	ldr	r3, [sp, #28]
 800c4a2:	3302      	adds	r3, #2
 800c4a4:	931b      	str	r3, [sp, #108]	; 0x6c
 800c4a6:	9b07      	ldr	r3, [sp, #28]
 800c4a8:	789b      	ldrb	r3, [r3, #2]
 800c4aa:	001a      	movs	r2, r3
 800c4ac:	3a30      	subs	r2, #48	; 0x30
 800c4ae:	2a09      	cmp	r2, #9
 800c4b0:	d914      	bls.n	800c4dc <_strtod_l+0x2c8>
 800c4b2:	9a07      	ldr	r2, [sp, #28]
 800c4b4:	921b      	str	r2, [sp, #108]	; 0x6c
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	e033      	b.n	800c522 <_strtod_l+0x30e>
 800c4ba:	46c0      	nop			; (mov r8, r8)
 800c4bc:	08015ae4 	.word	0x08015ae4
 800c4c0:	7ff00000 	.word	0x7ff00000
 800c4c4:	ffefffff 	.word	0xffefffff
 800c4c8:	00000433 	.word	0x00000433
 800c4cc:	7fffffff 	.word	0x7fffffff
 800c4d0:	08015ae0 	.word	0x08015ae0
 800c4d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4d6:	1c5a      	adds	r2, r3, #1
 800c4d8:	921b      	str	r2, [sp, #108]	; 0x6c
 800c4da:	785b      	ldrb	r3, [r3, #1]
 800c4dc:	2b30      	cmp	r3, #48	; 0x30
 800c4de:	d0f9      	beq.n	800c4d4 <_strtod_l+0x2c0>
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	9206      	str	r2, [sp, #24]
 800c4e4:	001a      	movs	r2, r3
 800c4e6:	3a31      	subs	r2, #49	; 0x31
 800c4e8:	2a08      	cmp	r2, #8
 800c4ea:	d81b      	bhi.n	800c524 <_strtod_l+0x310>
 800c4ec:	3b30      	subs	r3, #48	; 0x30
 800c4ee:	930e      	str	r3, [sp, #56]	; 0x38
 800c4f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4f2:	9306      	str	r3, [sp, #24]
 800c4f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4f6:	1c59      	adds	r1, r3, #1
 800c4f8:	911b      	str	r1, [sp, #108]	; 0x6c
 800c4fa:	785b      	ldrb	r3, [r3, #1]
 800c4fc:	001a      	movs	r2, r3
 800c4fe:	3a30      	subs	r2, #48	; 0x30
 800c500:	2a09      	cmp	r2, #9
 800c502:	d93a      	bls.n	800c57a <_strtod_l+0x366>
 800c504:	9a06      	ldr	r2, [sp, #24]
 800c506:	1a8a      	subs	r2, r1, r2
 800c508:	49b2      	ldr	r1, [pc, #712]	; (800c7d4 <_strtod_l+0x5c0>)
 800c50a:	9106      	str	r1, [sp, #24]
 800c50c:	2a08      	cmp	r2, #8
 800c50e:	dc04      	bgt.n	800c51a <_strtod_l+0x306>
 800c510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c512:	9206      	str	r2, [sp, #24]
 800c514:	428a      	cmp	r2, r1
 800c516:	dd00      	ble.n	800c51a <_strtod_l+0x306>
 800c518:	9106      	str	r1, [sp, #24]
 800c51a:	2c00      	cmp	r4, #0
 800c51c:	d002      	beq.n	800c524 <_strtod_l+0x310>
 800c51e:	9a06      	ldr	r2, [sp, #24]
 800c520:	4252      	negs	r2, r2
 800c522:	9206      	str	r2, [sp, #24]
 800c524:	9a05      	ldr	r2, [sp, #20]
 800c526:	2a00      	cmp	r2, #0
 800c528:	d14d      	bne.n	800c5c6 <_strtod_l+0x3b2>
 800c52a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c52c:	4310      	orrs	r0, r2
 800c52e:	d000      	beq.n	800c532 <_strtod_l+0x31e>
 800c530:	e6ab      	b.n	800c28a <_strtod_l+0x76>
 800c532:	4662      	mov	r2, ip
 800c534:	2a00      	cmp	r2, #0
 800c536:	d000      	beq.n	800c53a <_strtod_l+0x326>
 800c538:	e6c5      	b.n	800c2c6 <_strtod_l+0xb2>
 800c53a:	2b69      	cmp	r3, #105	; 0x69
 800c53c:	d027      	beq.n	800c58e <_strtod_l+0x37a>
 800c53e:	dc23      	bgt.n	800c588 <_strtod_l+0x374>
 800c540:	2b49      	cmp	r3, #73	; 0x49
 800c542:	d024      	beq.n	800c58e <_strtod_l+0x37a>
 800c544:	2b4e      	cmp	r3, #78	; 0x4e
 800c546:	d000      	beq.n	800c54a <_strtod_l+0x336>
 800c548:	e6bd      	b.n	800c2c6 <_strtod_l+0xb2>
 800c54a:	49a3      	ldr	r1, [pc, #652]	; (800c7d8 <_strtod_l+0x5c4>)
 800c54c:	a81b      	add	r0, sp, #108	; 0x6c
 800c54e:	f001 fc31 	bl	800ddb4 <__match>
 800c552:	2800      	cmp	r0, #0
 800c554:	d100      	bne.n	800c558 <_strtod_l+0x344>
 800c556:	e6b6      	b.n	800c2c6 <_strtod_l+0xb2>
 800c558:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	2b28      	cmp	r3, #40	; 0x28
 800c55e:	d12c      	bne.n	800c5ba <_strtod_l+0x3a6>
 800c560:	499e      	ldr	r1, [pc, #632]	; (800c7dc <_strtod_l+0x5c8>)
 800c562:	aa1e      	add	r2, sp, #120	; 0x78
 800c564:	a81b      	add	r0, sp, #108	; 0x6c
 800c566:	f001 fc39 	bl	800dddc <__hexnan>
 800c56a:	2805      	cmp	r0, #5
 800c56c:	d125      	bne.n	800c5ba <_strtod_l+0x3a6>
 800c56e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c570:	4a9b      	ldr	r2, [pc, #620]	; (800c7e0 <_strtod_l+0x5cc>)
 800c572:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c574:	431a      	orrs	r2, r3
 800c576:	0017      	movs	r7, r2
 800c578:	e687      	b.n	800c28a <_strtod_l+0x76>
 800c57a:	220a      	movs	r2, #10
 800c57c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c57e:	434a      	muls	r2, r1
 800c580:	18d2      	adds	r2, r2, r3
 800c582:	3a30      	subs	r2, #48	; 0x30
 800c584:	920e      	str	r2, [sp, #56]	; 0x38
 800c586:	e7b5      	b.n	800c4f4 <_strtod_l+0x2e0>
 800c588:	2b6e      	cmp	r3, #110	; 0x6e
 800c58a:	d0de      	beq.n	800c54a <_strtod_l+0x336>
 800c58c:	e69b      	b.n	800c2c6 <_strtod_l+0xb2>
 800c58e:	4995      	ldr	r1, [pc, #596]	; (800c7e4 <_strtod_l+0x5d0>)
 800c590:	a81b      	add	r0, sp, #108	; 0x6c
 800c592:	f001 fc0f 	bl	800ddb4 <__match>
 800c596:	2800      	cmp	r0, #0
 800c598:	d100      	bne.n	800c59c <_strtod_l+0x388>
 800c59a:	e694      	b.n	800c2c6 <_strtod_l+0xb2>
 800c59c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c59e:	4992      	ldr	r1, [pc, #584]	; (800c7e8 <_strtod_l+0x5d4>)
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	a81b      	add	r0, sp, #108	; 0x6c
 800c5a4:	931b      	str	r3, [sp, #108]	; 0x6c
 800c5a6:	f001 fc05 	bl	800ddb4 <__match>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	d102      	bne.n	800c5b4 <_strtod_l+0x3a0>
 800c5ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	931b      	str	r3, [sp, #108]	; 0x6c
 800c5b4:	2600      	movs	r6, #0
 800c5b6:	4f8a      	ldr	r7, [pc, #552]	; (800c7e0 <_strtod_l+0x5cc>)
 800c5b8:	e667      	b.n	800c28a <_strtod_l+0x76>
 800c5ba:	488c      	ldr	r0, [pc, #560]	; (800c7ec <_strtod_l+0x5d8>)
 800c5bc:	f001 f836 	bl	800d62c <nan>
 800c5c0:	0006      	movs	r6, r0
 800c5c2:	000f      	movs	r7, r1
 800c5c4:	e661      	b.n	800c28a <_strtod_l+0x76>
 800c5c6:	9b06      	ldr	r3, [sp, #24]
 800c5c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5ca:	1a9b      	subs	r3, r3, r2
 800c5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ce:	9b08      	ldr	r3, [sp, #32]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d101      	bne.n	800c5d8 <_strtod_l+0x3c4>
 800c5d4:	9b05      	ldr	r3, [sp, #20]
 800c5d6:	9308      	str	r3, [sp, #32]
 800c5d8:	9c05      	ldr	r4, [sp, #20]
 800c5da:	2c10      	cmp	r4, #16
 800c5dc:	dd00      	ble.n	800c5e0 <_strtod_l+0x3cc>
 800c5de:	2410      	movs	r4, #16
 800c5e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c5e2:	f7f5 ff0b 	bl	80023fc <__aeabi_ui2d>
 800c5e6:	9b05      	ldr	r3, [sp, #20]
 800c5e8:	0006      	movs	r6, r0
 800c5ea:	000f      	movs	r7, r1
 800c5ec:	2b09      	cmp	r3, #9
 800c5ee:	dd15      	ble.n	800c61c <_strtod_l+0x408>
 800c5f0:	0022      	movs	r2, r4
 800c5f2:	4b7f      	ldr	r3, [pc, #508]	; (800c7f0 <_strtod_l+0x5dc>)
 800c5f4:	3a09      	subs	r2, #9
 800c5f6:	00d2      	lsls	r2, r2, #3
 800c5f8:	189b      	adds	r3, r3, r2
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	f7f5 f835 	bl	800166c <__aeabi_dmul>
 800c602:	0006      	movs	r6, r0
 800c604:	0028      	movs	r0, r5
 800c606:	000f      	movs	r7, r1
 800c608:	f7f5 fef8 	bl	80023fc <__aeabi_ui2d>
 800c60c:	0002      	movs	r2, r0
 800c60e:	000b      	movs	r3, r1
 800c610:	0030      	movs	r0, r6
 800c612:	0039      	movs	r1, r7
 800c614:	f7f4 f8d0 	bl	80007b8 <__aeabi_dadd>
 800c618:	0006      	movs	r6, r0
 800c61a:	000f      	movs	r7, r1
 800c61c:	9b05      	ldr	r3, [sp, #20]
 800c61e:	2b0f      	cmp	r3, #15
 800c620:	dc39      	bgt.n	800c696 <_strtod_l+0x482>
 800c622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c624:	2b00      	cmp	r3, #0
 800c626:	d100      	bne.n	800c62a <_strtod_l+0x416>
 800c628:	e62f      	b.n	800c28a <_strtod_l+0x76>
 800c62a:	dd24      	ble.n	800c676 <_strtod_l+0x462>
 800c62c:	2b16      	cmp	r3, #22
 800c62e:	dc09      	bgt.n	800c644 <_strtod_l+0x430>
 800c630:	496f      	ldr	r1, [pc, #444]	; (800c7f0 <_strtod_l+0x5dc>)
 800c632:	00db      	lsls	r3, r3, #3
 800c634:	18c9      	adds	r1, r1, r3
 800c636:	0032      	movs	r2, r6
 800c638:	6808      	ldr	r0, [r1, #0]
 800c63a:	6849      	ldr	r1, [r1, #4]
 800c63c:	003b      	movs	r3, r7
 800c63e:	f7f5 f815 	bl	800166c <__aeabi_dmul>
 800c642:	e7bd      	b.n	800c5c0 <_strtod_l+0x3ac>
 800c644:	2325      	movs	r3, #37	; 0x25
 800c646:	9a05      	ldr	r2, [sp, #20]
 800c648:	1a9b      	subs	r3, r3, r2
 800c64a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c64c:	4293      	cmp	r3, r2
 800c64e:	db22      	blt.n	800c696 <_strtod_l+0x482>
 800c650:	240f      	movs	r4, #15
 800c652:	9b05      	ldr	r3, [sp, #20]
 800c654:	4d66      	ldr	r5, [pc, #408]	; (800c7f0 <_strtod_l+0x5dc>)
 800c656:	1ae4      	subs	r4, r4, r3
 800c658:	00e1      	lsls	r1, r4, #3
 800c65a:	1869      	adds	r1, r5, r1
 800c65c:	0032      	movs	r2, r6
 800c65e:	6808      	ldr	r0, [r1, #0]
 800c660:	6849      	ldr	r1, [r1, #4]
 800c662:	003b      	movs	r3, r7
 800c664:	f7f5 f802 	bl	800166c <__aeabi_dmul>
 800c668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c66a:	1b1c      	subs	r4, r3, r4
 800c66c:	00e4      	lsls	r4, r4, #3
 800c66e:	192d      	adds	r5, r5, r4
 800c670:	682a      	ldr	r2, [r5, #0]
 800c672:	686b      	ldr	r3, [r5, #4]
 800c674:	e7e3      	b.n	800c63e <_strtod_l+0x42a>
 800c676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c678:	3316      	adds	r3, #22
 800c67a:	db0c      	blt.n	800c696 <_strtod_l+0x482>
 800c67c:	9906      	ldr	r1, [sp, #24]
 800c67e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c680:	4b5b      	ldr	r3, [pc, #364]	; (800c7f0 <_strtod_l+0x5dc>)
 800c682:	1a52      	subs	r2, r2, r1
 800c684:	00d2      	lsls	r2, r2, #3
 800c686:	189b      	adds	r3, r3, r2
 800c688:	0030      	movs	r0, r6
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	0039      	movs	r1, r7
 800c690:	f7f4 fbf2 	bl	8000e78 <__aeabi_ddiv>
 800c694:	e794      	b.n	800c5c0 <_strtod_l+0x3ac>
 800c696:	9b05      	ldr	r3, [sp, #20]
 800c698:	1b1c      	subs	r4, r3, r4
 800c69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c69c:	18e4      	adds	r4, r4, r3
 800c69e:	2c00      	cmp	r4, #0
 800c6a0:	dd72      	ble.n	800c788 <_strtod_l+0x574>
 800c6a2:	220f      	movs	r2, #15
 800c6a4:	0023      	movs	r3, r4
 800c6a6:	4013      	ands	r3, r2
 800c6a8:	4214      	tst	r4, r2
 800c6aa:	d00a      	beq.n	800c6c2 <_strtod_l+0x4ae>
 800c6ac:	4950      	ldr	r1, [pc, #320]	; (800c7f0 <_strtod_l+0x5dc>)
 800c6ae:	00db      	lsls	r3, r3, #3
 800c6b0:	18c9      	adds	r1, r1, r3
 800c6b2:	0032      	movs	r2, r6
 800c6b4:	6808      	ldr	r0, [r1, #0]
 800c6b6:	6849      	ldr	r1, [r1, #4]
 800c6b8:	003b      	movs	r3, r7
 800c6ba:	f7f4 ffd7 	bl	800166c <__aeabi_dmul>
 800c6be:	0006      	movs	r6, r0
 800c6c0:	000f      	movs	r7, r1
 800c6c2:	230f      	movs	r3, #15
 800c6c4:	439c      	bics	r4, r3
 800c6c6:	d04a      	beq.n	800c75e <_strtod_l+0x54a>
 800c6c8:	3326      	adds	r3, #38	; 0x26
 800c6ca:	33ff      	adds	r3, #255	; 0xff
 800c6cc:	429c      	cmp	r4, r3
 800c6ce:	dd22      	ble.n	800c716 <_strtod_l+0x502>
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	9305      	str	r3, [sp, #20]
 800c6d4:	9306      	str	r3, [sp, #24]
 800c6d6:	930d      	str	r3, [sp, #52]	; 0x34
 800c6d8:	9308      	str	r3, [sp, #32]
 800c6da:	2322      	movs	r3, #34	; 0x22
 800c6dc:	2600      	movs	r6, #0
 800c6de:	9a04      	ldr	r2, [sp, #16]
 800c6e0:	4f3f      	ldr	r7, [pc, #252]	; (800c7e0 <_strtod_l+0x5cc>)
 800c6e2:	6013      	str	r3, [r2, #0]
 800c6e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6e6:	42b3      	cmp	r3, r6
 800c6e8:	d100      	bne.n	800c6ec <_strtod_l+0x4d8>
 800c6ea:	e5ce      	b.n	800c28a <_strtod_l+0x76>
 800c6ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c6ee:	9804      	ldr	r0, [sp, #16]
 800c6f0:	f001 fc56 	bl	800dfa0 <_Bfree>
 800c6f4:	9908      	ldr	r1, [sp, #32]
 800c6f6:	9804      	ldr	r0, [sp, #16]
 800c6f8:	f001 fc52 	bl	800dfa0 <_Bfree>
 800c6fc:	9906      	ldr	r1, [sp, #24]
 800c6fe:	9804      	ldr	r0, [sp, #16]
 800c700:	f001 fc4e 	bl	800dfa0 <_Bfree>
 800c704:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c706:	9804      	ldr	r0, [sp, #16]
 800c708:	f001 fc4a 	bl	800dfa0 <_Bfree>
 800c70c:	9905      	ldr	r1, [sp, #20]
 800c70e:	9804      	ldr	r0, [sp, #16]
 800c710:	f001 fc46 	bl	800dfa0 <_Bfree>
 800c714:	e5b9      	b.n	800c28a <_strtod_l+0x76>
 800c716:	2300      	movs	r3, #0
 800c718:	0030      	movs	r0, r6
 800c71a:	0039      	movs	r1, r7
 800c71c:	4d35      	ldr	r5, [pc, #212]	; (800c7f4 <_strtod_l+0x5e0>)
 800c71e:	1124      	asrs	r4, r4, #4
 800c720:	9307      	str	r3, [sp, #28]
 800c722:	2c01      	cmp	r4, #1
 800c724:	dc1e      	bgt.n	800c764 <_strtod_l+0x550>
 800c726:	2b00      	cmp	r3, #0
 800c728:	d001      	beq.n	800c72e <_strtod_l+0x51a>
 800c72a:	0006      	movs	r6, r0
 800c72c:	000f      	movs	r7, r1
 800c72e:	4b32      	ldr	r3, [pc, #200]	; (800c7f8 <_strtod_l+0x5e4>)
 800c730:	9a07      	ldr	r2, [sp, #28]
 800c732:	18ff      	adds	r7, r7, r3
 800c734:	4b2f      	ldr	r3, [pc, #188]	; (800c7f4 <_strtod_l+0x5e0>)
 800c736:	00d2      	lsls	r2, r2, #3
 800c738:	189d      	adds	r5, r3, r2
 800c73a:	6828      	ldr	r0, [r5, #0]
 800c73c:	6869      	ldr	r1, [r5, #4]
 800c73e:	0032      	movs	r2, r6
 800c740:	003b      	movs	r3, r7
 800c742:	f7f4 ff93 	bl	800166c <__aeabi_dmul>
 800c746:	4b26      	ldr	r3, [pc, #152]	; (800c7e0 <_strtod_l+0x5cc>)
 800c748:	4a2c      	ldr	r2, [pc, #176]	; (800c7fc <_strtod_l+0x5e8>)
 800c74a:	0006      	movs	r6, r0
 800c74c:	400b      	ands	r3, r1
 800c74e:	4293      	cmp	r3, r2
 800c750:	d8be      	bhi.n	800c6d0 <_strtod_l+0x4bc>
 800c752:	4a2b      	ldr	r2, [pc, #172]	; (800c800 <_strtod_l+0x5ec>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d913      	bls.n	800c780 <_strtod_l+0x56c>
 800c758:	2601      	movs	r6, #1
 800c75a:	4f2a      	ldr	r7, [pc, #168]	; (800c804 <_strtod_l+0x5f0>)
 800c75c:	4276      	negs	r6, r6
 800c75e:	2300      	movs	r3, #0
 800c760:	9307      	str	r3, [sp, #28]
 800c762:	e088      	b.n	800c876 <_strtod_l+0x662>
 800c764:	2201      	movs	r2, #1
 800c766:	4214      	tst	r4, r2
 800c768:	d004      	beq.n	800c774 <_strtod_l+0x560>
 800c76a:	682a      	ldr	r2, [r5, #0]
 800c76c:	686b      	ldr	r3, [r5, #4]
 800c76e:	f7f4 ff7d 	bl	800166c <__aeabi_dmul>
 800c772:	2301      	movs	r3, #1
 800c774:	9a07      	ldr	r2, [sp, #28]
 800c776:	1064      	asrs	r4, r4, #1
 800c778:	3201      	adds	r2, #1
 800c77a:	9207      	str	r2, [sp, #28]
 800c77c:	3508      	adds	r5, #8
 800c77e:	e7d0      	b.n	800c722 <_strtod_l+0x50e>
 800c780:	23d4      	movs	r3, #212	; 0xd4
 800c782:	049b      	lsls	r3, r3, #18
 800c784:	18cf      	adds	r7, r1, r3
 800c786:	e7ea      	b.n	800c75e <_strtod_l+0x54a>
 800c788:	2c00      	cmp	r4, #0
 800c78a:	d0e8      	beq.n	800c75e <_strtod_l+0x54a>
 800c78c:	4264      	negs	r4, r4
 800c78e:	230f      	movs	r3, #15
 800c790:	0022      	movs	r2, r4
 800c792:	401a      	ands	r2, r3
 800c794:	421c      	tst	r4, r3
 800c796:	d00a      	beq.n	800c7ae <_strtod_l+0x59a>
 800c798:	4b15      	ldr	r3, [pc, #84]	; (800c7f0 <_strtod_l+0x5dc>)
 800c79a:	00d2      	lsls	r2, r2, #3
 800c79c:	189b      	adds	r3, r3, r2
 800c79e:	0030      	movs	r0, r6
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	0039      	movs	r1, r7
 800c7a6:	f7f4 fb67 	bl	8000e78 <__aeabi_ddiv>
 800c7aa:	0006      	movs	r6, r0
 800c7ac:	000f      	movs	r7, r1
 800c7ae:	1124      	asrs	r4, r4, #4
 800c7b0:	d0d5      	beq.n	800c75e <_strtod_l+0x54a>
 800c7b2:	2c1f      	cmp	r4, #31
 800c7b4:	dd28      	ble.n	800c808 <_strtod_l+0x5f4>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	9305      	str	r3, [sp, #20]
 800c7ba:	9306      	str	r3, [sp, #24]
 800c7bc:	930d      	str	r3, [sp, #52]	; 0x34
 800c7be:	9308      	str	r3, [sp, #32]
 800c7c0:	2322      	movs	r3, #34	; 0x22
 800c7c2:	9a04      	ldr	r2, [sp, #16]
 800c7c4:	2600      	movs	r6, #0
 800c7c6:	6013      	str	r3, [r2, #0]
 800c7c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7ca:	2700      	movs	r7, #0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d18d      	bne.n	800c6ec <_strtod_l+0x4d8>
 800c7d0:	e55b      	b.n	800c28a <_strtod_l+0x76>
 800c7d2:	46c0      	nop			; (mov r8, r8)
 800c7d4:	00004e1f 	.word	0x00004e1f
 800c7d8:	08015e19 	.word	0x08015e19
 800c7dc:	08015af8 	.word	0x08015af8
 800c7e0:	7ff00000 	.word	0x7ff00000
 800c7e4:	08015e11 	.word	0x08015e11
 800c7e8:	08015ec7 	.word	0x08015ec7
 800c7ec:	08015ec3 	.word	0x08015ec3
 800c7f0:	08015d38 	.word	0x08015d38
 800c7f4:	08015d10 	.word	0x08015d10
 800c7f8:	fcb00000 	.word	0xfcb00000
 800c7fc:	7ca00000 	.word	0x7ca00000
 800c800:	7c900000 	.word	0x7c900000
 800c804:	7fefffff 	.word	0x7fefffff
 800c808:	2310      	movs	r3, #16
 800c80a:	0022      	movs	r2, r4
 800c80c:	401a      	ands	r2, r3
 800c80e:	9207      	str	r2, [sp, #28]
 800c810:	421c      	tst	r4, r3
 800c812:	d001      	beq.n	800c818 <_strtod_l+0x604>
 800c814:	335a      	adds	r3, #90	; 0x5a
 800c816:	9307      	str	r3, [sp, #28]
 800c818:	0030      	movs	r0, r6
 800c81a:	0039      	movs	r1, r7
 800c81c:	2300      	movs	r3, #0
 800c81e:	4dc4      	ldr	r5, [pc, #784]	; (800cb30 <_strtod_l+0x91c>)
 800c820:	2201      	movs	r2, #1
 800c822:	4214      	tst	r4, r2
 800c824:	d004      	beq.n	800c830 <_strtod_l+0x61c>
 800c826:	682a      	ldr	r2, [r5, #0]
 800c828:	686b      	ldr	r3, [r5, #4]
 800c82a:	f7f4 ff1f 	bl	800166c <__aeabi_dmul>
 800c82e:	2301      	movs	r3, #1
 800c830:	1064      	asrs	r4, r4, #1
 800c832:	3508      	adds	r5, #8
 800c834:	2c00      	cmp	r4, #0
 800c836:	d1f3      	bne.n	800c820 <_strtod_l+0x60c>
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d001      	beq.n	800c840 <_strtod_l+0x62c>
 800c83c:	0006      	movs	r6, r0
 800c83e:	000f      	movs	r7, r1
 800c840:	9b07      	ldr	r3, [sp, #28]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00f      	beq.n	800c866 <_strtod_l+0x652>
 800c846:	236b      	movs	r3, #107	; 0x6b
 800c848:	007a      	lsls	r2, r7, #1
 800c84a:	0d52      	lsrs	r2, r2, #21
 800c84c:	0039      	movs	r1, r7
 800c84e:	1a9b      	subs	r3, r3, r2
 800c850:	2b00      	cmp	r3, #0
 800c852:	dd08      	ble.n	800c866 <_strtod_l+0x652>
 800c854:	2b1f      	cmp	r3, #31
 800c856:	dc00      	bgt.n	800c85a <_strtod_l+0x646>
 800c858:	e121      	b.n	800ca9e <_strtod_l+0x88a>
 800c85a:	2600      	movs	r6, #0
 800c85c:	2b34      	cmp	r3, #52	; 0x34
 800c85e:	dc00      	bgt.n	800c862 <_strtod_l+0x64e>
 800c860:	e116      	b.n	800ca90 <_strtod_l+0x87c>
 800c862:	27dc      	movs	r7, #220	; 0xdc
 800c864:	04bf      	lsls	r7, r7, #18
 800c866:	2200      	movs	r2, #0
 800c868:	2300      	movs	r3, #0
 800c86a:	0030      	movs	r0, r6
 800c86c:	0039      	movs	r1, r7
 800c86e:	f7f3 fdeb 	bl	8000448 <__aeabi_dcmpeq>
 800c872:	2800      	cmp	r0, #0
 800c874:	d19f      	bne.n	800c7b6 <_strtod_l+0x5a2>
 800c876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c878:	9a08      	ldr	r2, [sp, #32]
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c87e:	9b05      	ldr	r3, [sp, #20]
 800c880:	9804      	ldr	r0, [sp, #16]
 800c882:	f001 fbdb 	bl	800e03c <__s2b>
 800c886:	900d      	str	r0, [sp, #52]	; 0x34
 800c888:	2800      	cmp	r0, #0
 800c88a:	d100      	bne.n	800c88e <_strtod_l+0x67a>
 800c88c:	e720      	b.n	800c6d0 <_strtod_l+0x4bc>
 800c88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c890:	9906      	ldr	r1, [sp, #24]
 800c892:	17da      	asrs	r2, r3, #31
 800c894:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c896:	1a5b      	subs	r3, r3, r1
 800c898:	401a      	ands	r2, r3
 800c89a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c89c:	9215      	str	r2, [sp, #84]	; 0x54
 800c89e:	43db      	mvns	r3, r3
 800c8a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8a2:	17db      	asrs	r3, r3, #31
 800c8a4:	401a      	ands	r2, r3
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	9218      	str	r2, [sp, #96]	; 0x60
 800c8aa:	9305      	str	r3, [sp, #20]
 800c8ac:	9306      	str	r3, [sp, #24]
 800c8ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8b0:	9804      	ldr	r0, [sp, #16]
 800c8b2:	6859      	ldr	r1, [r3, #4]
 800c8b4:	f001 fb4c 	bl	800df50 <_Balloc>
 800c8b8:	9008      	str	r0, [sp, #32]
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	d100      	bne.n	800c8c0 <_strtod_l+0x6ac>
 800c8be:	e70c      	b.n	800c6da <_strtod_l+0x4c6>
 800c8c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8c2:	300c      	adds	r0, #12
 800c8c4:	0019      	movs	r1, r3
 800c8c6:	691a      	ldr	r2, [r3, #16]
 800c8c8:	310c      	adds	r1, #12
 800c8ca:	3202      	adds	r2, #2
 800c8cc:	0092      	lsls	r2, r2, #2
 800c8ce:	f000 fea4 	bl	800d61a <memcpy>
 800c8d2:	ab1e      	add	r3, sp, #120	; 0x78
 800c8d4:	9301      	str	r3, [sp, #4]
 800c8d6:	ab1d      	add	r3, sp, #116	; 0x74
 800c8d8:	9300      	str	r3, [sp, #0]
 800c8da:	0032      	movs	r2, r6
 800c8dc:	003b      	movs	r3, r7
 800c8de:	9804      	ldr	r0, [sp, #16]
 800c8e0:	9610      	str	r6, [sp, #64]	; 0x40
 800c8e2:	9711      	str	r7, [sp, #68]	; 0x44
 800c8e4:	f001 fed2 	bl	800e68c <__d2b>
 800c8e8:	901c      	str	r0, [sp, #112]	; 0x70
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	d100      	bne.n	800c8f0 <_strtod_l+0x6dc>
 800c8ee:	e6f4      	b.n	800c6da <_strtod_l+0x4c6>
 800c8f0:	2101      	movs	r1, #1
 800c8f2:	9804      	ldr	r0, [sp, #16]
 800c8f4:	f001 fc36 	bl	800e164 <__i2b>
 800c8f8:	9006      	str	r0, [sp, #24]
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	d100      	bne.n	800c900 <_strtod_l+0x6ec>
 800c8fe:	e6ec      	b.n	800c6da <_strtod_l+0x4c6>
 800c900:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c902:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c904:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c906:	1ad4      	subs	r4, r2, r3
 800c908:	2b00      	cmp	r3, #0
 800c90a:	db01      	blt.n	800c910 <_strtod_l+0x6fc>
 800c90c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800c90e:	195d      	adds	r5, r3, r5
 800c910:	9907      	ldr	r1, [sp, #28]
 800c912:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c914:	1a5b      	subs	r3, r3, r1
 800c916:	2136      	movs	r1, #54	; 0x36
 800c918:	189b      	adds	r3, r3, r2
 800c91a:	1a8a      	subs	r2, r1, r2
 800c91c:	4985      	ldr	r1, [pc, #532]	; (800cb34 <_strtod_l+0x920>)
 800c91e:	2001      	movs	r0, #1
 800c920:	468c      	mov	ip, r1
 800c922:	2100      	movs	r1, #0
 800c924:	3b01      	subs	r3, #1
 800c926:	9114      	str	r1, [sp, #80]	; 0x50
 800c928:	9012      	str	r0, [sp, #72]	; 0x48
 800c92a:	4563      	cmp	r3, ip
 800c92c:	da07      	bge.n	800c93e <_strtod_l+0x72a>
 800c92e:	4661      	mov	r1, ip
 800c930:	1ac9      	subs	r1, r1, r3
 800c932:	1a52      	subs	r2, r2, r1
 800c934:	291f      	cmp	r1, #31
 800c936:	dd00      	ble.n	800c93a <_strtod_l+0x726>
 800c938:	e0b6      	b.n	800caa8 <_strtod_l+0x894>
 800c93a:	4088      	lsls	r0, r1
 800c93c:	9012      	str	r0, [sp, #72]	; 0x48
 800c93e:	18ab      	adds	r3, r5, r2
 800c940:	930c      	str	r3, [sp, #48]	; 0x30
 800c942:	18a4      	adds	r4, r4, r2
 800c944:	9b07      	ldr	r3, [sp, #28]
 800c946:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c948:	191c      	adds	r4, r3, r4
 800c94a:	002b      	movs	r3, r5
 800c94c:	4295      	cmp	r5, r2
 800c94e:	dd00      	ble.n	800c952 <_strtod_l+0x73e>
 800c950:	0013      	movs	r3, r2
 800c952:	42a3      	cmp	r3, r4
 800c954:	dd00      	ble.n	800c958 <_strtod_l+0x744>
 800c956:	0023      	movs	r3, r4
 800c958:	2b00      	cmp	r3, #0
 800c95a:	dd04      	ble.n	800c966 <_strtod_l+0x752>
 800c95c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c95e:	1ae4      	subs	r4, r4, r3
 800c960:	1ad2      	subs	r2, r2, r3
 800c962:	920c      	str	r2, [sp, #48]	; 0x30
 800c964:	1aed      	subs	r5, r5, r3
 800c966:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c968:	2b00      	cmp	r3, #0
 800c96a:	dd17      	ble.n	800c99c <_strtod_l+0x788>
 800c96c:	001a      	movs	r2, r3
 800c96e:	9906      	ldr	r1, [sp, #24]
 800c970:	9804      	ldr	r0, [sp, #16]
 800c972:	f001 fcbf 	bl	800e2f4 <__pow5mult>
 800c976:	9006      	str	r0, [sp, #24]
 800c978:	2800      	cmp	r0, #0
 800c97a:	d100      	bne.n	800c97e <_strtod_l+0x76a>
 800c97c:	e6ad      	b.n	800c6da <_strtod_l+0x4c6>
 800c97e:	0001      	movs	r1, r0
 800c980:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c982:	9804      	ldr	r0, [sp, #16]
 800c984:	f001 fc06 	bl	800e194 <__multiply>
 800c988:	900e      	str	r0, [sp, #56]	; 0x38
 800c98a:	2800      	cmp	r0, #0
 800c98c:	d100      	bne.n	800c990 <_strtod_l+0x77c>
 800c98e:	e6a4      	b.n	800c6da <_strtod_l+0x4c6>
 800c990:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c992:	9804      	ldr	r0, [sp, #16]
 800c994:	f001 fb04 	bl	800dfa0 <_Bfree>
 800c998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c99a:	931c      	str	r3, [sp, #112]	; 0x70
 800c99c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	dd00      	ble.n	800c9a4 <_strtod_l+0x790>
 800c9a2:	e087      	b.n	800cab4 <_strtod_l+0x8a0>
 800c9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	dd08      	ble.n	800c9bc <_strtod_l+0x7a8>
 800c9aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c9ac:	9908      	ldr	r1, [sp, #32]
 800c9ae:	9804      	ldr	r0, [sp, #16]
 800c9b0:	f001 fca0 	bl	800e2f4 <__pow5mult>
 800c9b4:	9008      	str	r0, [sp, #32]
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	d100      	bne.n	800c9bc <_strtod_l+0x7a8>
 800c9ba:	e68e      	b.n	800c6da <_strtod_l+0x4c6>
 800c9bc:	2c00      	cmp	r4, #0
 800c9be:	dd08      	ble.n	800c9d2 <_strtod_l+0x7be>
 800c9c0:	0022      	movs	r2, r4
 800c9c2:	9908      	ldr	r1, [sp, #32]
 800c9c4:	9804      	ldr	r0, [sp, #16]
 800c9c6:	f001 fcd7 	bl	800e378 <__lshift>
 800c9ca:	9008      	str	r0, [sp, #32]
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	d100      	bne.n	800c9d2 <_strtod_l+0x7be>
 800c9d0:	e683      	b.n	800c6da <_strtod_l+0x4c6>
 800c9d2:	2d00      	cmp	r5, #0
 800c9d4:	dd08      	ble.n	800c9e8 <_strtod_l+0x7d4>
 800c9d6:	002a      	movs	r2, r5
 800c9d8:	9906      	ldr	r1, [sp, #24]
 800c9da:	9804      	ldr	r0, [sp, #16]
 800c9dc:	f001 fccc 	bl	800e378 <__lshift>
 800c9e0:	9006      	str	r0, [sp, #24]
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	d100      	bne.n	800c9e8 <_strtod_l+0x7d4>
 800c9e6:	e678      	b.n	800c6da <_strtod_l+0x4c6>
 800c9e8:	9a08      	ldr	r2, [sp, #32]
 800c9ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c9ec:	9804      	ldr	r0, [sp, #16]
 800c9ee:	f001 fd4d 	bl	800e48c <__mdiff>
 800c9f2:	9005      	str	r0, [sp, #20]
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d100      	bne.n	800c9fa <_strtod_l+0x7e6>
 800c9f8:	e66f      	b.n	800c6da <_strtod_l+0x4c6>
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	68c3      	ldr	r3, [r0, #12]
 800c9fe:	9906      	ldr	r1, [sp, #24]
 800ca00:	60c2      	str	r2, [r0, #12]
 800ca02:	930c      	str	r3, [sp, #48]	; 0x30
 800ca04:	f001 fd26 	bl	800e454 <__mcmp>
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	da5d      	bge.n	800cac8 <_strtod_l+0x8b4>
 800ca0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca0e:	4333      	orrs	r3, r6
 800ca10:	d000      	beq.n	800ca14 <_strtod_l+0x800>
 800ca12:	e088      	b.n	800cb26 <_strtod_l+0x912>
 800ca14:	033b      	lsls	r3, r7, #12
 800ca16:	d000      	beq.n	800ca1a <_strtod_l+0x806>
 800ca18:	e085      	b.n	800cb26 <_strtod_l+0x912>
 800ca1a:	22d6      	movs	r2, #214	; 0xd6
 800ca1c:	4b46      	ldr	r3, [pc, #280]	; (800cb38 <_strtod_l+0x924>)
 800ca1e:	04d2      	lsls	r2, r2, #19
 800ca20:	403b      	ands	r3, r7
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d97f      	bls.n	800cb26 <_strtod_l+0x912>
 800ca26:	9b05      	ldr	r3, [sp, #20]
 800ca28:	695b      	ldr	r3, [r3, #20]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d103      	bne.n	800ca36 <_strtod_l+0x822>
 800ca2e:	9b05      	ldr	r3, [sp, #20]
 800ca30:	691b      	ldr	r3, [r3, #16]
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	dd77      	ble.n	800cb26 <_strtod_l+0x912>
 800ca36:	9905      	ldr	r1, [sp, #20]
 800ca38:	2201      	movs	r2, #1
 800ca3a:	9804      	ldr	r0, [sp, #16]
 800ca3c:	f001 fc9c 	bl	800e378 <__lshift>
 800ca40:	9906      	ldr	r1, [sp, #24]
 800ca42:	9005      	str	r0, [sp, #20]
 800ca44:	f001 fd06 	bl	800e454 <__mcmp>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	dd6c      	ble.n	800cb26 <_strtod_l+0x912>
 800ca4c:	9907      	ldr	r1, [sp, #28]
 800ca4e:	003b      	movs	r3, r7
 800ca50:	4a39      	ldr	r2, [pc, #228]	; (800cb38 <_strtod_l+0x924>)
 800ca52:	2900      	cmp	r1, #0
 800ca54:	d100      	bne.n	800ca58 <_strtod_l+0x844>
 800ca56:	e094      	b.n	800cb82 <_strtod_l+0x96e>
 800ca58:	0011      	movs	r1, r2
 800ca5a:	20d6      	movs	r0, #214	; 0xd6
 800ca5c:	4039      	ands	r1, r7
 800ca5e:	04c0      	lsls	r0, r0, #19
 800ca60:	4281      	cmp	r1, r0
 800ca62:	dd00      	ble.n	800ca66 <_strtod_l+0x852>
 800ca64:	e08d      	b.n	800cb82 <_strtod_l+0x96e>
 800ca66:	23dc      	movs	r3, #220	; 0xdc
 800ca68:	049b      	lsls	r3, r3, #18
 800ca6a:	4299      	cmp	r1, r3
 800ca6c:	dc00      	bgt.n	800ca70 <_strtod_l+0x85c>
 800ca6e:	e6a7      	b.n	800c7c0 <_strtod_l+0x5ac>
 800ca70:	0030      	movs	r0, r6
 800ca72:	0039      	movs	r1, r7
 800ca74:	4b31      	ldr	r3, [pc, #196]	; (800cb3c <_strtod_l+0x928>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	f7f4 fdf8 	bl	800166c <__aeabi_dmul>
 800ca7c:	4b2e      	ldr	r3, [pc, #184]	; (800cb38 <_strtod_l+0x924>)
 800ca7e:	0006      	movs	r6, r0
 800ca80:	000f      	movs	r7, r1
 800ca82:	420b      	tst	r3, r1
 800ca84:	d000      	beq.n	800ca88 <_strtod_l+0x874>
 800ca86:	e631      	b.n	800c6ec <_strtod_l+0x4d8>
 800ca88:	2322      	movs	r3, #34	; 0x22
 800ca8a:	9a04      	ldr	r2, [sp, #16]
 800ca8c:	6013      	str	r3, [r2, #0]
 800ca8e:	e62d      	b.n	800c6ec <_strtod_l+0x4d8>
 800ca90:	234b      	movs	r3, #75	; 0x4b
 800ca92:	1a9a      	subs	r2, r3, r2
 800ca94:	3b4c      	subs	r3, #76	; 0x4c
 800ca96:	4093      	lsls	r3, r2
 800ca98:	4019      	ands	r1, r3
 800ca9a:	000f      	movs	r7, r1
 800ca9c:	e6e3      	b.n	800c866 <_strtod_l+0x652>
 800ca9e:	2201      	movs	r2, #1
 800caa0:	4252      	negs	r2, r2
 800caa2:	409a      	lsls	r2, r3
 800caa4:	4016      	ands	r6, r2
 800caa6:	e6de      	b.n	800c866 <_strtod_l+0x652>
 800caa8:	4925      	ldr	r1, [pc, #148]	; (800cb40 <_strtod_l+0x92c>)
 800caaa:	1acb      	subs	r3, r1, r3
 800caac:	0001      	movs	r1, r0
 800caae:	4099      	lsls	r1, r3
 800cab0:	9114      	str	r1, [sp, #80]	; 0x50
 800cab2:	e743      	b.n	800c93c <_strtod_l+0x728>
 800cab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cab6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cab8:	9804      	ldr	r0, [sp, #16]
 800caba:	f001 fc5d 	bl	800e378 <__lshift>
 800cabe:	901c      	str	r0, [sp, #112]	; 0x70
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d000      	beq.n	800cac6 <_strtod_l+0x8b2>
 800cac4:	e76e      	b.n	800c9a4 <_strtod_l+0x790>
 800cac6:	e608      	b.n	800c6da <_strtod_l+0x4c6>
 800cac8:	970e      	str	r7, [sp, #56]	; 0x38
 800caca:	2800      	cmp	r0, #0
 800cacc:	d177      	bne.n	800cbbe <_strtod_l+0x9aa>
 800cace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cad0:	033b      	lsls	r3, r7, #12
 800cad2:	0b1b      	lsrs	r3, r3, #12
 800cad4:	2a00      	cmp	r2, #0
 800cad6:	d039      	beq.n	800cb4c <_strtod_l+0x938>
 800cad8:	4a1a      	ldr	r2, [pc, #104]	; (800cb44 <_strtod_l+0x930>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d139      	bne.n	800cb52 <_strtod_l+0x93e>
 800cade:	2101      	movs	r1, #1
 800cae0:	9b07      	ldr	r3, [sp, #28]
 800cae2:	4249      	negs	r1, r1
 800cae4:	0032      	movs	r2, r6
 800cae6:	0008      	movs	r0, r1
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d00b      	beq.n	800cb04 <_strtod_l+0x8f0>
 800caec:	24d4      	movs	r4, #212	; 0xd4
 800caee:	4b12      	ldr	r3, [pc, #72]	; (800cb38 <_strtod_l+0x924>)
 800caf0:	0008      	movs	r0, r1
 800caf2:	403b      	ands	r3, r7
 800caf4:	04e4      	lsls	r4, r4, #19
 800caf6:	42a3      	cmp	r3, r4
 800caf8:	d804      	bhi.n	800cb04 <_strtod_l+0x8f0>
 800cafa:	306c      	adds	r0, #108	; 0x6c
 800cafc:	0d1b      	lsrs	r3, r3, #20
 800cafe:	1ac3      	subs	r3, r0, r3
 800cb00:	4099      	lsls	r1, r3
 800cb02:	0008      	movs	r0, r1
 800cb04:	4282      	cmp	r2, r0
 800cb06:	d124      	bne.n	800cb52 <_strtod_l+0x93e>
 800cb08:	4b0f      	ldr	r3, [pc, #60]	; (800cb48 <_strtod_l+0x934>)
 800cb0a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cb0c:	4299      	cmp	r1, r3
 800cb0e:	d102      	bne.n	800cb16 <_strtod_l+0x902>
 800cb10:	3201      	adds	r2, #1
 800cb12:	d100      	bne.n	800cb16 <_strtod_l+0x902>
 800cb14:	e5e1      	b.n	800c6da <_strtod_l+0x4c6>
 800cb16:	4b08      	ldr	r3, [pc, #32]	; (800cb38 <_strtod_l+0x924>)
 800cb18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb1a:	2600      	movs	r6, #0
 800cb1c:	401a      	ands	r2, r3
 800cb1e:	0013      	movs	r3, r2
 800cb20:	2280      	movs	r2, #128	; 0x80
 800cb22:	0352      	lsls	r2, r2, #13
 800cb24:	189f      	adds	r7, r3, r2
 800cb26:	9b07      	ldr	r3, [sp, #28]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d1a1      	bne.n	800ca70 <_strtod_l+0x85c>
 800cb2c:	e5de      	b.n	800c6ec <_strtod_l+0x4d8>
 800cb2e:	46c0      	nop			; (mov r8, r8)
 800cb30:	08015b10 	.word	0x08015b10
 800cb34:	fffffc02 	.word	0xfffffc02
 800cb38:	7ff00000 	.word	0x7ff00000
 800cb3c:	39500000 	.word	0x39500000
 800cb40:	fffffbe2 	.word	0xfffffbe2
 800cb44:	000fffff 	.word	0x000fffff
 800cb48:	7fefffff 	.word	0x7fefffff
 800cb4c:	4333      	orrs	r3, r6
 800cb4e:	d100      	bne.n	800cb52 <_strtod_l+0x93e>
 800cb50:	e77c      	b.n	800ca4c <_strtod_l+0x838>
 800cb52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d01d      	beq.n	800cb94 <_strtod_l+0x980>
 800cb58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb5c:	4213      	tst	r3, r2
 800cb5e:	d0e2      	beq.n	800cb26 <_strtod_l+0x912>
 800cb60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb62:	0030      	movs	r0, r6
 800cb64:	0039      	movs	r1, r7
 800cb66:	9a07      	ldr	r2, [sp, #28]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d017      	beq.n	800cb9c <_strtod_l+0x988>
 800cb6c:	f7ff fb3a 	bl	800c1e4 <sulp>
 800cb70:	0002      	movs	r2, r0
 800cb72:	000b      	movs	r3, r1
 800cb74:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cb76:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cb78:	f7f3 fe1e 	bl	80007b8 <__aeabi_dadd>
 800cb7c:	0006      	movs	r6, r0
 800cb7e:	000f      	movs	r7, r1
 800cb80:	e7d1      	b.n	800cb26 <_strtod_l+0x912>
 800cb82:	2601      	movs	r6, #1
 800cb84:	4013      	ands	r3, r2
 800cb86:	4a98      	ldr	r2, [pc, #608]	; (800cde8 <_strtod_l+0xbd4>)
 800cb88:	4276      	negs	r6, r6
 800cb8a:	189b      	adds	r3, r3, r2
 800cb8c:	4a97      	ldr	r2, [pc, #604]	; (800cdec <_strtod_l+0xbd8>)
 800cb8e:	431a      	orrs	r2, r3
 800cb90:	0017      	movs	r7, r2
 800cb92:	e7c8      	b.n	800cb26 <_strtod_l+0x912>
 800cb94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cb96:	4233      	tst	r3, r6
 800cb98:	d0c5      	beq.n	800cb26 <_strtod_l+0x912>
 800cb9a:	e7e1      	b.n	800cb60 <_strtod_l+0x94c>
 800cb9c:	f7ff fb22 	bl	800c1e4 <sulp>
 800cba0:	0002      	movs	r2, r0
 800cba2:	000b      	movs	r3, r1
 800cba4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cba6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cba8:	f7f5 f822 	bl	8001bf0 <__aeabi_dsub>
 800cbac:	2200      	movs	r2, #0
 800cbae:	2300      	movs	r3, #0
 800cbb0:	0006      	movs	r6, r0
 800cbb2:	000f      	movs	r7, r1
 800cbb4:	f7f3 fc48 	bl	8000448 <__aeabi_dcmpeq>
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	d0b4      	beq.n	800cb26 <_strtod_l+0x912>
 800cbbc:	e600      	b.n	800c7c0 <_strtod_l+0x5ac>
 800cbbe:	9906      	ldr	r1, [sp, #24]
 800cbc0:	9805      	ldr	r0, [sp, #20]
 800cbc2:	f001 fdc3 	bl	800e74c <__ratio>
 800cbc6:	2380      	movs	r3, #128	; 0x80
 800cbc8:	2200      	movs	r2, #0
 800cbca:	05db      	lsls	r3, r3, #23
 800cbcc:	0004      	movs	r4, r0
 800cbce:	000d      	movs	r5, r1
 800cbd0:	f7f3 fc4a 	bl	8000468 <__aeabi_dcmple>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d06d      	beq.n	800ccb4 <_strtod_l+0xaa0>
 800cbd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d000      	beq.n	800cbe0 <_strtod_l+0x9cc>
 800cbde:	e07e      	b.n	800ccde <_strtod_l+0xaca>
 800cbe0:	2e00      	cmp	r6, #0
 800cbe2:	d158      	bne.n	800cc96 <_strtod_l+0xa82>
 800cbe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbe6:	031b      	lsls	r3, r3, #12
 800cbe8:	d000      	beq.n	800cbec <_strtod_l+0x9d8>
 800cbea:	e07f      	b.n	800ccec <_strtod_l+0xad8>
 800cbec:	2200      	movs	r2, #0
 800cbee:	0020      	movs	r0, r4
 800cbf0:	0029      	movs	r1, r5
 800cbf2:	4b7f      	ldr	r3, [pc, #508]	; (800cdf0 <_strtod_l+0xbdc>)
 800cbf4:	f7f3 fc2e 	bl	8000454 <__aeabi_dcmplt>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	d158      	bne.n	800ccae <_strtod_l+0xa9a>
 800cbfc:	0020      	movs	r0, r4
 800cbfe:	0029      	movs	r1, r5
 800cc00:	2200      	movs	r2, #0
 800cc02:	4b7c      	ldr	r3, [pc, #496]	; (800cdf4 <_strtod_l+0xbe0>)
 800cc04:	f7f4 fd32 	bl	800166c <__aeabi_dmul>
 800cc08:	0004      	movs	r4, r0
 800cc0a:	000d      	movs	r5, r1
 800cc0c:	2380      	movs	r3, #128	; 0x80
 800cc0e:	061b      	lsls	r3, r3, #24
 800cc10:	940a      	str	r4, [sp, #40]	; 0x28
 800cc12:	18eb      	adds	r3, r5, r3
 800cc14:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc1a:	9212      	str	r2, [sp, #72]	; 0x48
 800cc1c:	9313      	str	r3, [sp, #76]	; 0x4c
 800cc1e:	4a76      	ldr	r2, [pc, #472]	; (800cdf8 <_strtod_l+0xbe4>)
 800cc20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc22:	4013      	ands	r3, r2
 800cc24:	9314      	str	r3, [sp, #80]	; 0x50
 800cc26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cc28:	4b74      	ldr	r3, [pc, #464]	; (800cdfc <_strtod_l+0xbe8>)
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d000      	beq.n	800cc30 <_strtod_l+0xa1c>
 800cc2e:	e091      	b.n	800cd54 <_strtod_l+0xb40>
 800cc30:	4a73      	ldr	r2, [pc, #460]	; (800ce00 <_strtod_l+0xbec>)
 800cc32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc34:	4694      	mov	ip, r2
 800cc36:	4463      	add	r3, ip
 800cc38:	001f      	movs	r7, r3
 800cc3a:	0030      	movs	r0, r6
 800cc3c:	0019      	movs	r1, r3
 800cc3e:	f001 fcbd 	bl	800e5bc <__ulp>
 800cc42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc46:	f7f4 fd11 	bl	800166c <__aeabi_dmul>
 800cc4a:	0032      	movs	r2, r6
 800cc4c:	003b      	movs	r3, r7
 800cc4e:	f7f3 fdb3 	bl	80007b8 <__aeabi_dadd>
 800cc52:	4a69      	ldr	r2, [pc, #420]	; (800cdf8 <_strtod_l+0xbe4>)
 800cc54:	4b6b      	ldr	r3, [pc, #428]	; (800ce04 <_strtod_l+0xbf0>)
 800cc56:	0006      	movs	r6, r0
 800cc58:	400a      	ands	r2, r1
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d949      	bls.n	800ccf2 <_strtod_l+0xade>
 800cc5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cc60:	4b69      	ldr	r3, [pc, #420]	; (800ce08 <_strtod_l+0xbf4>)
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d103      	bne.n	800cc6e <_strtod_l+0xa5a>
 800cc66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc68:	3301      	adds	r3, #1
 800cc6a:	d100      	bne.n	800cc6e <_strtod_l+0xa5a>
 800cc6c:	e535      	b.n	800c6da <_strtod_l+0x4c6>
 800cc6e:	2601      	movs	r6, #1
 800cc70:	4f65      	ldr	r7, [pc, #404]	; (800ce08 <_strtod_l+0xbf4>)
 800cc72:	4276      	negs	r6, r6
 800cc74:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc76:	9804      	ldr	r0, [sp, #16]
 800cc78:	f001 f992 	bl	800dfa0 <_Bfree>
 800cc7c:	9908      	ldr	r1, [sp, #32]
 800cc7e:	9804      	ldr	r0, [sp, #16]
 800cc80:	f001 f98e 	bl	800dfa0 <_Bfree>
 800cc84:	9906      	ldr	r1, [sp, #24]
 800cc86:	9804      	ldr	r0, [sp, #16]
 800cc88:	f001 f98a 	bl	800dfa0 <_Bfree>
 800cc8c:	9905      	ldr	r1, [sp, #20]
 800cc8e:	9804      	ldr	r0, [sp, #16]
 800cc90:	f001 f986 	bl	800dfa0 <_Bfree>
 800cc94:	e60b      	b.n	800c8ae <_strtod_l+0x69a>
 800cc96:	2e01      	cmp	r6, #1
 800cc98:	d103      	bne.n	800cca2 <_strtod_l+0xa8e>
 800cc9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d100      	bne.n	800cca2 <_strtod_l+0xa8e>
 800cca0:	e58e      	b.n	800c7c0 <_strtod_l+0x5ac>
 800cca2:	2300      	movs	r3, #0
 800cca4:	4c59      	ldr	r4, [pc, #356]	; (800ce0c <_strtod_l+0xbf8>)
 800cca6:	930a      	str	r3, [sp, #40]	; 0x28
 800cca8:	940b      	str	r4, [sp, #44]	; 0x2c
 800ccaa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ccac:	e01c      	b.n	800cce8 <_strtod_l+0xad4>
 800ccae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ccb0:	4d50      	ldr	r5, [pc, #320]	; (800cdf4 <_strtod_l+0xbe0>)
 800ccb2:	e7ab      	b.n	800cc0c <_strtod_l+0x9f8>
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	0020      	movs	r0, r4
 800ccb8:	0029      	movs	r1, r5
 800ccba:	4b4e      	ldr	r3, [pc, #312]	; (800cdf4 <_strtod_l+0xbe0>)
 800ccbc:	f7f4 fcd6 	bl	800166c <__aeabi_dmul>
 800ccc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ccc2:	0004      	movs	r4, r0
 800ccc4:	000b      	movs	r3, r1
 800ccc6:	000d      	movs	r5, r1
 800ccc8:	2a00      	cmp	r2, #0
 800ccca:	d104      	bne.n	800ccd6 <_strtod_l+0xac2>
 800cccc:	2280      	movs	r2, #128	; 0x80
 800ccce:	0612      	lsls	r2, r2, #24
 800ccd0:	900a      	str	r0, [sp, #40]	; 0x28
 800ccd2:	188b      	adds	r3, r1, r2
 800ccd4:	e79e      	b.n	800cc14 <_strtod_l+0xa00>
 800ccd6:	0002      	movs	r2, r0
 800ccd8:	920a      	str	r2, [sp, #40]	; 0x28
 800ccda:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccdc:	e79b      	b.n	800cc16 <_strtod_l+0xa02>
 800ccde:	2300      	movs	r3, #0
 800cce0:	4c43      	ldr	r4, [pc, #268]	; (800cdf0 <_strtod_l+0xbdc>)
 800cce2:	930a      	str	r3, [sp, #40]	; 0x28
 800cce4:	940b      	str	r4, [sp, #44]	; 0x2c
 800cce6:	2400      	movs	r4, #0
 800cce8:	4d41      	ldr	r5, [pc, #260]	; (800cdf0 <_strtod_l+0xbdc>)
 800ccea:	e794      	b.n	800cc16 <_strtod_l+0xa02>
 800ccec:	2300      	movs	r3, #0
 800ccee:	4c47      	ldr	r4, [pc, #284]	; (800ce0c <_strtod_l+0xbf8>)
 800ccf0:	e7f7      	b.n	800cce2 <_strtod_l+0xace>
 800ccf2:	23d4      	movs	r3, #212	; 0xd4
 800ccf4:	049b      	lsls	r3, r3, #18
 800ccf6:	18cf      	adds	r7, r1, r3
 800ccf8:	9b07      	ldr	r3, [sp, #28]
 800ccfa:	970e      	str	r7, [sp, #56]	; 0x38
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d1b9      	bne.n	800cc74 <_strtod_l+0xa60>
 800cd00:	4b3d      	ldr	r3, [pc, #244]	; (800cdf8 <_strtod_l+0xbe4>)
 800cd02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd04:	403b      	ands	r3, r7
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d1b4      	bne.n	800cc74 <_strtod_l+0xa60>
 800cd0a:	0020      	movs	r0, r4
 800cd0c:	0029      	movs	r1, r5
 800cd0e:	f7f3 fc35 	bl	800057c <__aeabi_d2lz>
 800cd12:	f7f3 fc6f 	bl	80005f4 <__aeabi_l2d>
 800cd16:	0002      	movs	r2, r0
 800cd18:	000b      	movs	r3, r1
 800cd1a:	0020      	movs	r0, r4
 800cd1c:	0029      	movs	r1, r5
 800cd1e:	f7f4 ff67 	bl	8001bf0 <__aeabi_dsub>
 800cd22:	033b      	lsls	r3, r7, #12
 800cd24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd26:	0b1b      	lsrs	r3, r3, #12
 800cd28:	4333      	orrs	r3, r6
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	0004      	movs	r4, r0
 800cd2e:	000d      	movs	r5, r1
 800cd30:	4a37      	ldr	r2, [pc, #220]	; (800ce10 <_strtod_l+0xbfc>)
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d054      	beq.n	800cde0 <_strtod_l+0xbcc>
 800cd36:	4b37      	ldr	r3, [pc, #220]	; (800ce14 <_strtod_l+0xc00>)
 800cd38:	f7f3 fb8c 	bl	8000454 <__aeabi_dcmplt>
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	d000      	beq.n	800cd42 <_strtod_l+0xb2e>
 800cd40:	e4d4      	b.n	800c6ec <_strtod_l+0x4d8>
 800cd42:	0020      	movs	r0, r4
 800cd44:	0029      	movs	r1, r5
 800cd46:	4a34      	ldr	r2, [pc, #208]	; (800ce18 <_strtod_l+0xc04>)
 800cd48:	4b2a      	ldr	r3, [pc, #168]	; (800cdf4 <_strtod_l+0xbe0>)
 800cd4a:	f7f3 fb97 	bl	800047c <__aeabi_dcmpgt>
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	d090      	beq.n	800cc74 <_strtod_l+0xa60>
 800cd52:	e4cb      	b.n	800c6ec <_strtod_l+0x4d8>
 800cd54:	9b07      	ldr	r3, [sp, #28]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d02b      	beq.n	800cdb2 <_strtod_l+0xb9e>
 800cd5a:	23d4      	movs	r3, #212	; 0xd4
 800cd5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd5e:	04db      	lsls	r3, r3, #19
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d826      	bhi.n	800cdb2 <_strtod_l+0xb9e>
 800cd64:	0020      	movs	r0, r4
 800cd66:	0029      	movs	r1, r5
 800cd68:	4a2c      	ldr	r2, [pc, #176]	; (800ce1c <_strtod_l+0xc08>)
 800cd6a:	4b2d      	ldr	r3, [pc, #180]	; (800ce20 <_strtod_l+0xc0c>)
 800cd6c:	f7f3 fb7c 	bl	8000468 <__aeabi_dcmple>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	d017      	beq.n	800cda4 <_strtod_l+0xb90>
 800cd74:	0020      	movs	r0, r4
 800cd76:	0029      	movs	r1, r5
 800cd78:	f7f3 fbe2 	bl	8000540 <__aeabi_d2uiz>
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	d100      	bne.n	800cd82 <_strtod_l+0xb6e>
 800cd80:	3001      	adds	r0, #1
 800cd82:	f7f5 fb3b 	bl	80023fc <__aeabi_ui2d>
 800cd86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd88:	0004      	movs	r4, r0
 800cd8a:	000b      	movs	r3, r1
 800cd8c:	000d      	movs	r5, r1
 800cd8e:	2a00      	cmp	r2, #0
 800cd90:	d122      	bne.n	800cdd8 <_strtod_l+0xbc4>
 800cd92:	2280      	movs	r2, #128	; 0x80
 800cd94:	0612      	lsls	r2, r2, #24
 800cd96:	188b      	adds	r3, r1, r2
 800cd98:	9016      	str	r0, [sp, #88]	; 0x58
 800cd9a:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cd9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cda0:	9212      	str	r2, [sp, #72]	; 0x48
 800cda2:	9313      	str	r3, [sp, #76]	; 0x4c
 800cda4:	22d6      	movs	r2, #214	; 0xd6
 800cda6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cda8:	04d2      	lsls	r2, r2, #19
 800cdaa:	189b      	adds	r3, r3, r2
 800cdac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cdae:	1a9b      	subs	r3, r3, r2
 800cdb0:	9313      	str	r3, [sp, #76]	; 0x4c
 800cdb2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cdb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cdb6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800cdb8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800cdba:	f001 fbff 	bl	800e5bc <__ulp>
 800cdbe:	0002      	movs	r2, r0
 800cdc0:	000b      	movs	r3, r1
 800cdc2:	0030      	movs	r0, r6
 800cdc4:	0039      	movs	r1, r7
 800cdc6:	f7f4 fc51 	bl	800166c <__aeabi_dmul>
 800cdca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cdcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdce:	f7f3 fcf3 	bl	80007b8 <__aeabi_dadd>
 800cdd2:	0006      	movs	r6, r0
 800cdd4:	000f      	movs	r7, r1
 800cdd6:	e78f      	b.n	800ccf8 <_strtod_l+0xae4>
 800cdd8:	0002      	movs	r2, r0
 800cdda:	9216      	str	r2, [sp, #88]	; 0x58
 800cddc:	9317      	str	r3, [sp, #92]	; 0x5c
 800cdde:	e7dd      	b.n	800cd9c <_strtod_l+0xb88>
 800cde0:	4b10      	ldr	r3, [pc, #64]	; (800ce24 <_strtod_l+0xc10>)
 800cde2:	f7f3 fb37 	bl	8000454 <__aeabi_dcmplt>
 800cde6:	e7b2      	b.n	800cd4e <_strtod_l+0xb3a>
 800cde8:	fff00000 	.word	0xfff00000
 800cdec:	000fffff 	.word	0x000fffff
 800cdf0:	3ff00000 	.word	0x3ff00000
 800cdf4:	3fe00000 	.word	0x3fe00000
 800cdf8:	7ff00000 	.word	0x7ff00000
 800cdfc:	7fe00000 	.word	0x7fe00000
 800ce00:	fcb00000 	.word	0xfcb00000
 800ce04:	7c9fffff 	.word	0x7c9fffff
 800ce08:	7fefffff 	.word	0x7fefffff
 800ce0c:	bff00000 	.word	0xbff00000
 800ce10:	94a03595 	.word	0x94a03595
 800ce14:	3fdfffff 	.word	0x3fdfffff
 800ce18:	35afe535 	.word	0x35afe535
 800ce1c:	ffc00000 	.word	0xffc00000
 800ce20:	41dfffff 	.word	0x41dfffff
 800ce24:	3fcfffff 	.word	0x3fcfffff

0800ce28 <_strtod_r>:
 800ce28:	b510      	push	{r4, lr}
 800ce2a:	4b02      	ldr	r3, [pc, #8]	; (800ce34 <_strtod_r+0xc>)
 800ce2c:	f7ff f9f2 	bl	800c214 <_strtod_l>
 800ce30:	bd10      	pop	{r4, pc}
 800ce32:	46c0      	nop			; (mov r8, r8)
 800ce34:	20000444 	.word	0x20000444

0800ce38 <strtod>:
 800ce38:	b510      	push	{r4, lr}
 800ce3a:	4c04      	ldr	r4, [pc, #16]	; (800ce4c <strtod+0x14>)
 800ce3c:	000a      	movs	r2, r1
 800ce3e:	0001      	movs	r1, r0
 800ce40:	4b03      	ldr	r3, [pc, #12]	; (800ce50 <strtod+0x18>)
 800ce42:	6820      	ldr	r0, [r4, #0]
 800ce44:	f7ff f9e6 	bl	800c214 <_strtod_l>
 800ce48:	bd10      	pop	{r4, pc}
 800ce4a:	46c0      	nop			; (mov r8, r8)
 800ce4c:	200006d0 	.word	0x200006d0
 800ce50:	20000444 	.word	0x20000444

0800ce54 <_strtol_l.constprop.0>:
 800ce54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce56:	b087      	sub	sp, #28
 800ce58:	001e      	movs	r6, r3
 800ce5a:	9005      	str	r0, [sp, #20]
 800ce5c:	9101      	str	r1, [sp, #4]
 800ce5e:	9202      	str	r2, [sp, #8]
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d048      	beq.n	800cef6 <_strtol_l.constprop.0+0xa2>
 800ce64:	000b      	movs	r3, r1
 800ce66:	2e24      	cmp	r6, #36	; 0x24
 800ce68:	d845      	bhi.n	800cef6 <_strtol_l.constprop.0+0xa2>
 800ce6a:	4a3b      	ldr	r2, [pc, #236]	; (800cf58 <_strtol_l.constprop.0+0x104>)
 800ce6c:	2108      	movs	r1, #8
 800ce6e:	4694      	mov	ip, r2
 800ce70:	001a      	movs	r2, r3
 800ce72:	4660      	mov	r0, ip
 800ce74:	7814      	ldrb	r4, [r2, #0]
 800ce76:	3301      	adds	r3, #1
 800ce78:	5d00      	ldrb	r0, [r0, r4]
 800ce7a:	001d      	movs	r5, r3
 800ce7c:	0007      	movs	r7, r0
 800ce7e:	400f      	ands	r7, r1
 800ce80:	4208      	tst	r0, r1
 800ce82:	d1f5      	bne.n	800ce70 <_strtol_l.constprop.0+0x1c>
 800ce84:	2c2d      	cmp	r4, #45	; 0x2d
 800ce86:	d13d      	bne.n	800cf04 <_strtol_l.constprop.0+0xb0>
 800ce88:	2701      	movs	r7, #1
 800ce8a:	781c      	ldrb	r4, [r3, #0]
 800ce8c:	1c95      	adds	r5, r2, #2
 800ce8e:	2e00      	cmp	r6, #0
 800ce90:	d05e      	beq.n	800cf50 <_strtol_l.constprop.0+0xfc>
 800ce92:	2e10      	cmp	r6, #16
 800ce94:	d109      	bne.n	800ceaa <_strtol_l.constprop.0+0x56>
 800ce96:	2c30      	cmp	r4, #48	; 0x30
 800ce98:	d107      	bne.n	800ceaa <_strtol_l.constprop.0+0x56>
 800ce9a:	2220      	movs	r2, #32
 800ce9c:	782b      	ldrb	r3, [r5, #0]
 800ce9e:	4393      	bics	r3, r2
 800cea0:	2b58      	cmp	r3, #88	; 0x58
 800cea2:	d150      	bne.n	800cf46 <_strtol_l.constprop.0+0xf2>
 800cea4:	2610      	movs	r6, #16
 800cea6:	786c      	ldrb	r4, [r5, #1]
 800cea8:	3502      	adds	r5, #2
 800ceaa:	4b2c      	ldr	r3, [pc, #176]	; (800cf5c <_strtol_l.constprop.0+0x108>)
 800ceac:	0031      	movs	r1, r6
 800ceae:	18fb      	adds	r3, r7, r3
 800ceb0:	0018      	movs	r0, r3
 800ceb2:	9303      	str	r3, [sp, #12]
 800ceb4:	f7f3 f9c8 	bl	8000248 <__aeabi_uidivmod>
 800ceb8:	2200      	movs	r2, #0
 800ceba:	9104      	str	r1, [sp, #16]
 800cebc:	2101      	movs	r1, #1
 800cebe:	4684      	mov	ip, r0
 800cec0:	0010      	movs	r0, r2
 800cec2:	4249      	negs	r1, r1
 800cec4:	0023      	movs	r3, r4
 800cec6:	3b30      	subs	r3, #48	; 0x30
 800cec8:	2b09      	cmp	r3, #9
 800ceca:	d903      	bls.n	800ced4 <_strtol_l.constprop.0+0x80>
 800cecc:	3b11      	subs	r3, #17
 800cece:	2b19      	cmp	r3, #25
 800ced0:	d81d      	bhi.n	800cf0e <_strtol_l.constprop.0+0xba>
 800ced2:	330a      	adds	r3, #10
 800ced4:	429e      	cmp	r6, r3
 800ced6:	dd1e      	ble.n	800cf16 <_strtol_l.constprop.0+0xc2>
 800ced8:	1c54      	adds	r4, r2, #1
 800ceda:	d009      	beq.n	800cef0 <_strtol_l.constprop.0+0x9c>
 800cedc:	000a      	movs	r2, r1
 800cede:	4584      	cmp	ip, r0
 800cee0:	d306      	bcc.n	800cef0 <_strtol_l.constprop.0+0x9c>
 800cee2:	d102      	bne.n	800ceea <_strtol_l.constprop.0+0x96>
 800cee4:	9c04      	ldr	r4, [sp, #16]
 800cee6:	429c      	cmp	r4, r3
 800cee8:	db02      	blt.n	800cef0 <_strtol_l.constprop.0+0x9c>
 800ceea:	2201      	movs	r2, #1
 800ceec:	4370      	muls	r0, r6
 800ceee:	1818      	adds	r0, r3, r0
 800cef0:	782c      	ldrb	r4, [r5, #0]
 800cef2:	3501      	adds	r5, #1
 800cef4:	e7e6      	b.n	800cec4 <_strtol_l.constprop.0+0x70>
 800cef6:	f000 fb57 	bl	800d5a8 <__errno>
 800cefa:	2316      	movs	r3, #22
 800cefc:	6003      	str	r3, [r0, #0]
 800cefe:	2000      	movs	r0, #0
 800cf00:	b007      	add	sp, #28
 800cf02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf04:	2c2b      	cmp	r4, #43	; 0x2b
 800cf06:	d1c2      	bne.n	800ce8e <_strtol_l.constprop.0+0x3a>
 800cf08:	781c      	ldrb	r4, [r3, #0]
 800cf0a:	1c95      	adds	r5, r2, #2
 800cf0c:	e7bf      	b.n	800ce8e <_strtol_l.constprop.0+0x3a>
 800cf0e:	0023      	movs	r3, r4
 800cf10:	3b61      	subs	r3, #97	; 0x61
 800cf12:	2b19      	cmp	r3, #25
 800cf14:	d9dd      	bls.n	800ced2 <_strtol_l.constprop.0+0x7e>
 800cf16:	1c53      	adds	r3, r2, #1
 800cf18:	d109      	bne.n	800cf2e <_strtol_l.constprop.0+0xda>
 800cf1a:	2322      	movs	r3, #34	; 0x22
 800cf1c:	9a05      	ldr	r2, [sp, #20]
 800cf1e:	9803      	ldr	r0, [sp, #12]
 800cf20:	6013      	str	r3, [r2, #0]
 800cf22:	9b02      	ldr	r3, [sp, #8]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d0eb      	beq.n	800cf00 <_strtol_l.constprop.0+0xac>
 800cf28:	1e6b      	subs	r3, r5, #1
 800cf2a:	9301      	str	r3, [sp, #4]
 800cf2c:	e007      	b.n	800cf3e <_strtol_l.constprop.0+0xea>
 800cf2e:	2f00      	cmp	r7, #0
 800cf30:	d000      	beq.n	800cf34 <_strtol_l.constprop.0+0xe0>
 800cf32:	4240      	negs	r0, r0
 800cf34:	9b02      	ldr	r3, [sp, #8]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d0e2      	beq.n	800cf00 <_strtol_l.constprop.0+0xac>
 800cf3a:	2a00      	cmp	r2, #0
 800cf3c:	d1f4      	bne.n	800cf28 <_strtol_l.constprop.0+0xd4>
 800cf3e:	9b02      	ldr	r3, [sp, #8]
 800cf40:	9a01      	ldr	r2, [sp, #4]
 800cf42:	601a      	str	r2, [r3, #0]
 800cf44:	e7dc      	b.n	800cf00 <_strtol_l.constprop.0+0xac>
 800cf46:	2430      	movs	r4, #48	; 0x30
 800cf48:	2e00      	cmp	r6, #0
 800cf4a:	d1ae      	bne.n	800ceaa <_strtol_l.constprop.0+0x56>
 800cf4c:	3608      	adds	r6, #8
 800cf4e:	e7ac      	b.n	800ceaa <_strtol_l.constprop.0+0x56>
 800cf50:	2c30      	cmp	r4, #48	; 0x30
 800cf52:	d0a2      	beq.n	800ce9a <_strtol_l.constprop.0+0x46>
 800cf54:	260a      	movs	r6, #10
 800cf56:	e7a8      	b.n	800ceaa <_strtol_l.constprop.0+0x56>
 800cf58:	08015b39 	.word	0x08015b39
 800cf5c:	7fffffff 	.word	0x7fffffff

0800cf60 <_strtol_r>:
 800cf60:	b510      	push	{r4, lr}
 800cf62:	f7ff ff77 	bl	800ce54 <_strtol_l.constprop.0>
 800cf66:	bd10      	pop	{r4, pc}

0800cf68 <strtol>:
 800cf68:	b510      	push	{r4, lr}
 800cf6a:	4c04      	ldr	r4, [pc, #16]	; (800cf7c <strtol+0x14>)
 800cf6c:	0013      	movs	r3, r2
 800cf6e:	000a      	movs	r2, r1
 800cf70:	0001      	movs	r1, r0
 800cf72:	6820      	ldr	r0, [r4, #0]
 800cf74:	f7ff ff6e 	bl	800ce54 <_strtol_l.constprop.0>
 800cf78:	bd10      	pop	{r4, pc}
 800cf7a:	46c0      	nop			; (mov r8, r8)
 800cf7c:	200006d0 	.word	0x200006d0

0800cf80 <_strtoul_l.constprop.0>:
 800cf80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf82:	b087      	sub	sp, #28
 800cf84:	9202      	str	r2, [sp, #8]
 800cf86:	4a3e      	ldr	r2, [pc, #248]	; (800d080 <_strtoul_l.constprop.0+0x100>)
 800cf88:	001e      	movs	r6, r3
 800cf8a:	9101      	str	r1, [sp, #4]
 800cf8c:	000b      	movs	r3, r1
 800cf8e:	4694      	mov	ip, r2
 800cf90:	2108      	movs	r1, #8
 800cf92:	9005      	str	r0, [sp, #20]
 800cf94:	001a      	movs	r2, r3
 800cf96:	4660      	mov	r0, ip
 800cf98:	7814      	ldrb	r4, [r2, #0]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	5d00      	ldrb	r0, [r0, r4]
 800cf9e:	001d      	movs	r5, r3
 800cfa0:	0007      	movs	r7, r0
 800cfa2:	400f      	ands	r7, r1
 800cfa4:	4208      	tst	r0, r1
 800cfa6:	d1f5      	bne.n	800cf94 <_strtoul_l.constprop.0+0x14>
 800cfa8:	2c2d      	cmp	r4, #45	; 0x2d
 800cfaa:	d13d      	bne.n	800d028 <_strtoul_l.constprop.0+0xa8>
 800cfac:	2701      	movs	r7, #1
 800cfae:	781c      	ldrb	r4, [r3, #0]
 800cfb0:	1c95      	adds	r5, r2, #2
 800cfb2:	2e00      	cmp	r6, #0
 800cfb4:	d05f      	beq.n	800d076 <_strtoul_l.constprop.0+0xf6>
 800cfb6:	2e10      	cmp	r6, #16
 800cfb8:	d109      	bne.n	800cfce <_strtoul_l.constprop.0+0x4e>
 800cfba:	2c30      	cmp	r4, #48	; 0x30
 800cfbc:	d107      	bne.n	800cfce <_strtoul_l.constprop.0+0x4e>
 800cfbe:	2220      	movs	r2, #32
 800cfc0:	782b      	ldrb	r3, [r5, #0]
 800cfc2:	4393      	bics	r3, r2
 800cfc4:	2b58      	cmp	r3, #88	; 0x58
 800cfc6:	d151      	bne.n	800d06c <_strtoul_l.constprop.0+0xec>
 800cfc8:	2610      	movs	r6, #16
 800cfca:	786c      	ldrb	r4, [r5, #1]
 800cfcc:	3502      	adds	r5, #2
 800cfce:	2001      	movs	r0, #1
 800cfd0:	0031      	movs	r1, r6
 800cfd2:	4240      	negs	r0, r0
 800cfd4:	f7f3 f8b2 	bl	800013c <__udivsi3>
 800cfd8:	9003      	str	r0, [sp, #12]
 800cfda:	2001      	movs	r0, #1
 800cfdc:	0031      	movs	r1, r6
 800cfde:	4240      	negs	r0, r0
 800cfe0:	f7f3 f932 	bl	8000248 <__aeabi_uidivmod>
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	9104      	str	r1, [sp, #16]
 800cfea:	2101      	movs	r1, #1
 800cfec:	0018      	movs	r0, r3
 800cfee:	4694      	mov	ip, r2
 800cff0:	4249      	negs	r1, r1
 800cff2:	0022      	movs	r2, r4
 800cff4:	3a30      	subs	r2, #48	; 0x30
 800cff6:	2a09      	cmp	r2, #9
 800cff8:	d903      	bls.n	800d002 <_strtoul_l.constprop.0+0x82>
 800cffa:	3a11      	subs	r2, #17
 800cffc:	2a19      	cmp	r2, #25
 800cffe:	d818      	bhi.n	800d032 <_strtoul_l.constprop.0+0xb2>
 800d000:	320a      	adds	r2, #10
 800d002:	4296      	cmp	r6, r2
 800d004:	dd19      	ble.n	800d03a <_strtoul_l.constprop.0+0xba>
 800d006:	1c5c      	adds	r4, r3, #1
 800d008:	d00b      	beq.n	800d022 <_strtoul_l.constprop.0+0xa2>
 800d00a:	9c03      	ldr	r4, [sp, #12]
 800d00c:	000b      	movs	r3, r1
 800d00e:	4284      	cmp	r4, r0
 800d010:	d307      	bcc.n	800d022 <_strtoul_l.constprop.0+0xa2>
 800d012:	d103      	bne.n	800d01c <_strtoul_l.constprop.0+0x9c>
 800d014:	9c04      	ldr	r4, [sp, #16]
 800d016:	000b      	movs	r3, r1
 800d018:	4294      	cmp	r4, r2
 800d01a:	db02      	blt.n	800d022 <_strtoul_l.constprop.0+0xa2>
 800d01c:	4663      	mov	r3, ip
 800d01e:	4370      	muls	r0, r6
 800d020:	1810      	adds	r0, r2, r0
 800d022:	782c      	ldrb	r4, [r5, #0]
 800d024:	3501      	adds	r5, #1
 800d026:	e7e4      	b.n	800cff2 <_strtoul_l.constprop.0+0x72>
 800d028:	2c2b      	cmp	r4, #43	; 0x2b
 800d02a:	d1c2      	bne.n	800cfb2 <_strtoul_l.constprop.0+0x32>
 800d02c:	781c      	ldrb	r4, [r3, #0]
 800d02e:	1c95      	adds	r5, r2, #2
 800d030:	e7bf      	b.n	800cfb2 <_strtoul_l.constprop.0+0x32>
 800d032:	0022      	movs	r2, r4
 800d034:	3a61      	subs	r2, #97	; 0x61
 800d036:	2a19      	cmp	r2, #25
 800d038:	d9e2      	bls.n	800d000 <_strtoul_l.constprop.0+0x80>
 800d03a:	1c5a      	adds	r2, r3, #1
 800d03c:	d108      	bne.n	800d050 <_strtoul_l.constprop.0+0xd0>
 800d03e:	2222      	movs	r2, #34	; 0x22
 800d040:	9905      	ldr	r1, [sp, #20]
 800d042:	0018      	movs	r0, r3
 800d044:	600a      	str	r2, [r1, #0]
 800d046:	9a02      	ldr	r2, [sp, #8]
 800d048:	2a00      	cmp	r2, #0
 800d04a:	d109      	bne.n	800d060 <_strtoul_l.constprop.0+0xe0>
 800d04c:	b007      	add	sp, #28
 800d04e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d050:	2f00      	cmp	r7, #0
 800d052:	d000      	beq.n	800d056 <_strtoul_l.constprop.0+0xd6>
 800d054:	4240      	negs	r0, r0
 800d056:	9a02      	ldr	r2, [sp, #8]
 800d058:	2a00      	cmp	r2, #0
 800d05a:	d0f7      	beq.n	800d04c <_strtoul_l.constprop.0+0xcc>
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d001      	beq.n	800d064 <_strtoul_l.constprop.0+0xe4>
 800d060:	1e6b      	subs	r3, r5, #1
 800d062:	9301      	str	r3, [sp, #4]
 800d064:	9b02      	ldr	r3, [sp, #8]
 800d066:	9a01      	ldr	r2, [sp, #4]
 800d068:	601a      	str	r2, [r3, #0]
 800d06a:	e7ef      	b.n	800d04c <_strtoul_l.constprop.0+0xcc>
 800d06c:	2430      	movs	r4, #48	; 0x30
 800d06e:	2e00      	cmp	r6, #0
 800d070:	d1ad      	bne.n	800cfce <_strtoul_l.constprop.0+0x4e>
 800d072:	3608      	adds	r6, #8
 800d074:	e7ab      	b.n	800cfce <_strtoul_l.constprop.0+0x4e>
 800d076:	2c30      	cmp	r4, #48	; 0x30
 800d078:	d0a1      	beq.n	800cfbe <_strtoul_l.constprop.0+0x3e>
 800d07a:	260a      	movs	r6, #10
 800d07c:	e7a7      	b.n	800cfce <_strtoul_l.constprop.0+0x4e>
 800d07e:	46c0      	nop			; (mov r8, r8)
 800d080:	08015b39 	.word	0x08015b39

0800d084 <_strtoul_r>:
 800d084:	b510      	push	{r4, lr}
 800d086:	f7ff ff7b 	bl	800cf80 <_strtoul_l.constprop.0>
 800d08a:	bd10      	pop	{r4, pc}

0800d08c <strtoul>:
 800d08c:	b510      	push	{r4, lr}
 800d08e:	4c04      	ldr	r4, [pc, #16]	; (800d0a0 <strtoul+0x14>)
 800d090:	0013      	movs	r3, r2
 800d092:	000a      	movs	r2, r1
 800d094:	0001      	movs	r1, r0
 800d096:	6820      	ldr	r0, [r4, #0]
 800d098:	f7ff ff72 	bl	800cf80 <_strtoul_l.constprop.0>
 800d09c:	bd10      	pop	{r4, pc}
 800d09e:	46c0      	nop			; (mov r8, r8)
 800d0a0:	200006d0 	.word	0x200006d0

0800d0a4 <std>:
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	b510      	push	{r4, lr}
 800d0a8:	0004      	movs	r4, r0
 800d0aa:	6003      	str	r3, [r0, #0]
 800d0ac:	6043      	str	r3, [r0, #4]
 800d0ae:	6083      	str	r3, [r0, #8]
 800d0b0:	8181      	strh	r1, [r0, #12]
 800d0b2:	6643      	str	r3, [r0, #100]	; 0x64
 800d0b4:	81c2      	strh	r2, [r0, #14]
 800d0b6:	6103      	str	r3, [r0, #16]
 800d0b8:	6143      	str	r3, [r0, #20]
 800d0ba:	6183      	str	r3, [r0, #24]
 800d0bc:	0019      	movs	r1, r3
 800d0be:	2208      	movs	r2, #8
 800d0c0:	305c      	adds	r0, #92	; 0x5c
 800d0c2:	f000 f97d 	bl	800d3c0 <memset>
 800d0c6:	4b0b      	ldr	r3, [pc, #44]	; (800d0f4 <std+0x50>)
 800d0c8:	61e4      	str	r4, [r4, #28]
 800d0ca:	6223      	str	r3, [r4, #32]
 800d0cc:	4b0a      	ldr	r3, [pc, #40]	; (800d0f8 <std+0x54>)
 800d0ce:	6263      	str	r3, [r4, #36]	; 0x24
 800d0d0:	4b0a      	ldr	r3, [pc, #40]	; (800d0fc <std+0x58>)
 800d0d2:	62a3      	str	r3, [r4, #40]	; 0x28
 800d0d4:	4b0a      	ldr	r3, [pc, #40]	; (800d100 <std+0x5c>)
 800d0d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d0d8:	4b0a      	ldr	r3, [pc, #40]	; (800d104 <std+0x60>)
 800d0da:	429c      	cmp	r4, r3
 800d0dc:	d005      	beq.n	800d0ea <std+0x46>
 800d0de:	4b0a      	ldr	r3, [pc, #40]	; (800d108 <std+0x64>)
 800d0e0:	429c      	cmp	r4, r3
 800d0e2:	d002      	beq.n	800d0ea <std+0x46>
 800d0e4:	4b09      	ldr	r3, [pc, #36]	; (800d10c <std+0x68>)
 800d0e6:	429c      	cmp	r4, r3
 800d0e8:	d103      	bne.n	800d0f2 <std+0x4e>
 800d0ea:	0020      	movs	r0, r4
 800d0ec:	3058      	adds	r0, #88	; 0x58
 800d0ee:	f000 fa85 	bl	800d5fc <__retarget_lock_init_recursive>
 800d0f2:	bd10      	pop	{r4, pc}
 800d0f4:	0800d325 	.word	0x0800d325
 800d0f8:	0800d351 	.word	0x0800d351
 800d0fc:	0800d389 	.word	0x0800d389
 800d100:	0800d3b5 	.word	0x0800d3b5
 800d104:	20000c7c 	.word	0x20000c7c
 800d108:	20000ce4 	.word	0x20000ce4
 800d10c:	20000d4c 	.word	0x20000d4c

0800d110 <stdio_exit_handler>:
 800d110:	b510      	push	{r4, lr}
 800d112:	4a03      	ldr	r2, [pc, #12]	; (800d120 <stdio_exit_handler+0x10>)
 800d114:	4903      	ldr	r1, [pc, #12]	; (800d124 <stdio_exit_handler+0x14>)
 800d116:	4804      	ldr	r0, [pc, #16]	; (800d128 <stdio_exit_handler+0x18>)
 800d118:	f000 f86c 	bl	800d1f4 <_fwalk_sglue>
 800d11c:	bd10      	pop	{r4, pc}
 800d11e:	46c0      	nop			; (mov r8, r8)
 800d120:	20000438 	.word	0x20000438
 800d124:	080110fd 	.word	0x080110fd
 800d128:	200005b0 	.word	0x200005b0

0800d12c <cleanup_stdio>:
 800d12c:	6841      	ldr	r1, [r0, #4]
 800d12e:	4b0b      	ldr	r3, [pc, #44]	; (800d15c <cleanup_stdio+0x30>)
 800d130:	b510      	push	{r4, lr}
 800d132:	0004      	movs	r4, r0
 800d134:	4299      	cmp	r1, r3
 800d136:	d001      	beq.n	800d13c <cleanup_stdio+0x10>
 800d138:	f003 ffe0 	bl	80110fc <_fclose_r>
 800d13c:	68a1      	ldr	r1, [r4, #8]
 800d13e:	4b08      	ldr	r3, [pc, #32]	; (800d160 <cleanup_stdio+0x34>)
 800d140:	4299      	cmp	r1, r3
 800d142:	d002      	beq.n	800d14a <cleanup_stdio+0x1e>
 800d144:	0020      	movs	r0, r4
 800d146:	f003 ffd9 	bl	80110fc <_fclose_r>
 800d14a:	68e1      	ldr	r1, [r4, #12]
 800d14c:	4b05      	ldr	r3, [pc, #20]	; (800d164 <cleanup_stdio+0x38>)
 800d14e:	4299      	cmp	r1, r3
 800d150:	d002      	beq.n	800d158 <cleanup_stdio+0x2c>
 800d152:	0020      	movs	r0, r4
 800d154:	f003 ffd2 	bl	80110fc <_fclose_r>
 800d158:	bd10      	pop	{r4, pc}
 800d15a:	46c0      	nop			; (mov r8, r8)
 800d15c:	20000c7c 	.word	0x20000c7c
 800d160:	20000ce4 	.word	0x20000ce4
 800d164:	20000d4c 	.word	0x20000d4c

0800d168 <global_stdio_init.part.0>:
 800d168:	b510      	push	{r4, lr}
 800d16a:	4b09      	ldr	r3, [pc, #36]	; (800d190 <global_stdio_init.part.0+0x28>)
 800d16c:	4a09      	ldr	r2, [pc, #36]	; (800d194 <global_stdio_init.part.0+0x2c>)
 800d16e:	2104      	movs	r1, #4
 800d170:	601a      	str	r2, [r3, #0]
 800d172:	4809      	ldr	r0, [pc, #36]	; (800d198 <global_stdio_init.part.0+0x30>)
 800d174:	2200      	movs	r2, #0
 800d176:	f7ff ff95 	bl	800d0a4 <std>
 800d17a:	2201      	movs	r2, #1
 800d17c:	2109      	movs	r1, #9
 800d17e:	4807      	ldr	r0, [pc, #28]	; (800d19c <global_stdio_init.part.0+0x34>)
 800d180:	f7ff ff90 	bl	800d0a4 <std>
 800d184:	2202      	movs	r2, #2
 800d186:	2112      	movs	r1, #18
 800d188:	4805      	ldr	r0, [pc, #20]	; (800d1a0 <global_stdio_init.part.0+0x38>)
 800d18a:	f7ff ff8b 	bl	800d0a4 <std>
 800d18e:	bd10      	pop	{r4, pc}
 800d190:	20000db4 	.word	0x20000db4
 800d194:	0800d111 	.word	0x0800d111
 800d198:	20000c7c 	.word	0x20000c7c
 800d19c:	20000ce4 	.word	0x20000ce4
 800d1a0:	20000d4c 	.word	0x20000d4c

0800d1a4 <__sfp_lock_acquire>:
 800d1a4:	b510      	push	{r4, lr}
 800d1a6:	4802      	ldr	r0, [pc, #8]	; (800d1b0 <__sfp_lock_acquire+0xc>)
 800d1a8:	f000 fa2a 	bl	800d600 <__retarget_lock_acquire_recursive>
 800d1ac:	bd10      	pop	{r4, pc}
 800d1ae:	46c0      	nop			; (mov r8, r8)
 800d1b0:	20000dbe 	.word	0x20000dbe

0800d1b4 <__sfp_lock_release>:
 800d1b4:	b510      	push	{r4, lr}
 800d1b6:	4802      	ldr	r0, [pc, #8]	; (800d1c0 <__sfp_lock_release+0xc>)
 800d1b8:	f000 fa23 	bl	800d602 <__retarget_lock_release_recursive>
 800d1bc:	bd10      	pop	{r4, pc}
 800d1be:	46c0      	nop			; (mov r8, r8)
 800d1c0:	20000dbe 	.word	0x20000dbe

0800d1c4 <__sinit>:
 800d1c4:	b510      	push	{r4, lr}
 800d1c6:	0004      	movs	r4, r0
 800d1c8:	f7ff ffec 	bl	800d1a4 <__sfp_lock_acquire>
 800d1cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d002      	beq.n	800d1d8 <__sinit+0x14>
 800d1d2:	f7ff ffef 	bl	800d1b4 <__sfp_lock_release>
 800d1d6:	bd10      	pop	{r4, pc}
 800d1d8:	4b04      	ldr	r3, [pc, #16]	; (800d1ec <__sinit+0x28>)
 800d1da:	6363      	str	r3, [r4, #52]	; 0x34
 800d1dc:	4b04      	ldr	r3, [pc, #16]	; (800d1f0 <__sinit+0x2c>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d1f6      	bne.n	800d1d2 <__sinit+0xe>
 800d1e4:	f7ff ffc0 	bl	800d168 <global_stdio_init.part.0>
 800d1e8:	e7f3      	b.n	800d1d2 <__sinit+0xe>
 800d1ea:	46c0      	nop			; (mov r8, r8)
 800d1ec:	0800d12d 	.word	0x0800d12d
 800d1f0:	20000db4 	.word	0x20000db4

0800d1f4 <_fwalk_sglue>:
 800d1f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1f6:	0014      	movs	r4, r2
 800d1f8:	2600      	movs	r6, #0
 800d1fa:	9000      	str	r0, [sp, #0]
 800d1fc:	9101      	str	r1, [sp, #4]
 800d1fe:	68a5      	ldr	r5, [r4, #8]
 800d200:	6867      	ldr	r7, [r4, #4]
 800d202:	3f01      	subs	r7, #1
 800d204:	d504      	bpl.n	800d210 <_fwalk_sglue+0x1c>
 800d206:	6824      	ldr	r4, [r4, #0]
 800d208:	2c00      	cmp	r4, #0
 800d20a:	d1f8      	bne.n	800d1fe <_fwalk_sglue+0xa>
 800d20c:	0030      	movs	r0, r6
 800d20e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d210:	89ab      	ldrh	r3, [r5, #12]
 800d212:	2b01      	cmp	r3, #1
 800d214:	d908      	bls.n	800d228 <_fwalk_sglue+0x34>
 800d216:	220e      	movs	r2, #14
 800d218:	5eab      	ldrsh	r3, [r5, r2]
 800d21a:	3301      	adds	r3, #1
 800d21c:	d004      	beq.n	800d228 <_fwalk_sglue+0x34>
 800d21e:	0029      	movs	r1, r5
 800d220:	9800      	ldr	r0, [sp, #0]
 800d222:	9b01      	ldr	r3, [sp, #4]
 800d224:	4798      	blx	r3
 800d226:	4306      	orrs	r6, r0
 800d228:	3568      	adds	r5, #104	; 0x68
 800d22a:	e7ea      	b.n	800d202 <_fwalk_sglue+0xe>

0800d22c <snprintf>:
 800d22c:	b40c      	push	{r2, r3}
 800d22e:	b530      	push	{r4, r5, lr}
 800d230:	4b17      	ldr	r3, [pc, #92]	; (800d290 <snprintf+0x64>)
 800d232:	000c      	movs	r4, r1
 800d234:	681d      	ldr	r5, [r3, #0]
 800d236:	b09d      	sub	sp, #116	; 0x74
 800d238:	2900      	cmp	r1, #0
 800d23a:	da08      	bge.n	800d24e <snprintf+0x22>
 800d23c:	238b      	movs	r3, #139	; 0x8b
 800d23e:	2001      	movs	r0, #1
 800d240:	602b      	str	r3, [r5, #0]
 800d242:	4240      	negs	r0, r0
 800d244:	b01d      	add	sp, #116	; 0x74
 800d246:	bc30      	pop	{r4, r5}
 800d248:	bc08      	pop	{r3}
 800d24a:	b002      	add	sp, #8
 800d24c:	4718      	bx	r3
 800d24e:	2382      	movs	r3, #130	; 0x82
 800d250:	466a      	mov	r2, sp
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	8293      	strh	r3, [r2, #20]
 800d256:	2300      	movs	r3, #0
 800d258:	9002      	str	r0, [sp, #8]
 800d25a:	9006      	str	r0, [sp, #24]
 800d25c:	4299      	cmp	r1, r3
 800d25e:	d000      	beq.n	800d262 <snprintf+0x36>
 800d260:	1e4b      	subs	r3, r1, #1
 800d262:	9304      	str	r3, [sp, #16]
 800d264:	9307      	str	r3, [sp, #28]
 800d266:	2301      	movs	r3, #1
 800d268:	466a      	mov	r2, sp
 800d26a:	425b      	negs	r3, r3
 800d26c:	82d3      	strh	r3, [r2, #22]
 800d26e:	0028      	movs	r0, r5
 800d270:	ab21      	add	r3, sp, #132	; 0x84
 800d272:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d274:	a902      	add	r1, sp, #8
 800d276:	9301      	str	r3, [sp, #4]
 800d278:	f001 fae2 	bl	800e840 <_svfprintf_r>
 800d27c:	1c43      	adds	r3, r0, #1
 800d27e:	da01      	bge.n	800d284 <snprintf+0x58>
 800d280:	238b      	movs	r3, #139	; 0x8b
 800d282:	602b      	str	r3, [r5, #0]
 800d284:	2c00      	cmp	r4, #0
 800d286:	d0dd      	beq.n	800d244 <snprintf+0x18>
 800d288:	2200      	movs	r2, #0
 800d28a:	9b02      	ldr	r3, [sp, #8]
 800d28c:	701a      	strb	r2, [r3, #0]
 800d28e:	e7d9      	b.n	800d244 <snprintf+0x18>
 800d290:	200006d0 	.word	0x200006d0

0800d294 <sprintf>:
 800d294:	b40e      	push	{r1, r2, r3}
 800d296:	b500      	push	{lr}
 800d298:	490b      	ldr	r1, [pc, #44]	; (800d2c8 <sprintf+0x34>)
 800d29a:	b09c      	sub	sp, #112	; 0x70
 800d29c:	ab1d      	add	r3, sp, #116	; 0x74
 800d29e:	9002      	str	r0, [sp, #8]
 800d2a0:	9006      	str	r0, [sp, #24]
 800d2a2:	9107      	str	r1, [sp, #28]
 800d2a4:	9104      	str	r1, [sp, #16]
 800d2a6:	4809      	ldr	r0, [pc, #36]	; (800d2cc <sprintf+0x38>)
 800d2a8:	4909      	ldr	r1, [pc, #36]	; (800d2d0 <sprintf+0x3c>)
 800d2aa:	cb04      	ldmia	r3!, {r2}
 800d2ac:	9105      	str	r1, [sp, #20]
 800d2ae:	6800      	ldr	r0, [r0, #0]
 800d2b0:	a902      	add	r1, sp, #8
 800d2b2:	9301      	str	r3, [sp, #4]
 800d2b4:	f001 fac4 	bl	800e840 <_svfprintf_r>
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	9b02      	ldr	r3, [sp, #8]
 800d2bc:	701a      	strb	r2, [r3, #0]
 800d2be:	b01c      	add	sp, #112	; 0x70
 800d2c0:	bc08      	pop	{r3}
 800d2c2:	b003      	add	sp, #12
 800d2c4:	4718      	bx	r3
 800d2c6:	46c0      	nop			; (mov r8, r8)
 800d2c8:	7fffffff 	.word	0x7fffffff
 800d2cc:	200006d0 	.word	0x200006d0
 800d2d0:	ffff0208 	.word	0xffff0208

0800d2d4 <sscanf>:
 800d2d4:	b40e      	push	{r1, r2, r3}
 800d2d6:	b530      	push	{r4, r5, lr}
 800d2d8:	2381      	movs	r3, #129	; 0x81
 800d2da:	b09c      	sub	sp, #112	; 0x70
 800d2dc:	466a      	mov	r2, sp
 800d2de:	ac1f      	add	r4, sp, #124	; 0x7c
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	cc20      	ldmia	r4!, {r5}
 800d2e4:	8293      	strh	r3, [r2, #20]
 800d2e6:	9002      	str	r0, [sp, #8]
 800d2e8:	9006      	str	r0, [sp, #24]
 800d2ea:	f7f2 ff0b 	bl	8000104 <strlen>
 800d2ee:	4b0b      	ldr	r3, [pc, #44]	; (800d31c <sscanf+0x48>)
 800d2f0:	466a      	mov	r2, sp
 800d2f2:	930a      	str	r3, [sp, #40]	; 0x28
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	9003      	str	r0, [sp, #12]
 800d2f8:	9007      	str	r0, [sp, #28]
 800d2fa:	4809      	ldr	r0, [pc, #36]	; (800d320 <sscanf+0x4c>)
 800d2fc:	930e      	str	r3, [sp, #56]	; 0x38
 800d2fe:	9313      	str	r3, [sp, #76]	; 0x4c
 800d300:	3b01      	subs	r3, #1
 800d302:	82d3      	strh	r3, [r2, #22]
 800d304:	a902      	add	r1, sp, #8
 800d306:	0023      	movs	r3, r4
 800d308:	002a      	movs	r2, r5
 800d30a:	6800      	ldr	r0, [r0, #0]
 800d30c:	9401      	str	r4, [sp, #4]
 800d30e:	f002 fcd9 	bl	800fcc4 <__ssvfscanf_r>
 800d312:	b01c      	add	sp, #112	; 0x70
 800d314:	bc30      	pop	{r4, r5}
 800d316:	bc08      	pop	{r3}
 800d318:	b003      	add	sp, #12
 800d31a:	4718      	bx	r3
 800d31c:	0800d34d 	.word	0x0800d34d
 800d320:	200006d0 	.word	0x200006d0

0800d324 <__sread>:
 800d324:	b570      	push	{r4, r5, r6, lr}
 800d326:	000c      	movs	r4, r1
 800d328:	250e      	movs	r5, #14
 800d32a:	5f49      	ldrsh	r1, [r1, r5]
 800d32c:	f000 f902 	bl	800d534 <_read_r>
 800d330:	2800      	cmp	r0, #0
 800d332:	db03      	blt.n	800d33c <__sread+0x18>
 800d334:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d336:	181b      	adds	r3, r3, r0
 800d338:	6523      	str	r3, [r4, #80]	; 0x50
 800d33a:	bd70      	pop	{r4, r5, r6, pc}
 800d33c:	89a3      	ldrh	r3, [r4, #12]
 800d33e:	4a02      	ldr	r2, [pc, #8]	; (800d348 <__sread+0x24>)
 800d340:	4013      	ands	r3, r2
 800d342:	81a3      	strh	r3, [r4, #12]
 800d344:	e7f9      	b.n	800d33a <__sread+0x16>
 800d346:	46c0      	nop			; (mov r8, r8)
 800d348:	ffffefff 	.word	0xffffefff

0800d34c <__seofread>:
 800d34c:	2000      	movs	r0, #0
 800d34e:	4770      	bx	lr

0800d350 <__swrite>:
 800d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d352:	001f      	movs	r7, r3
 800d354:	898b      	ldrh	r3, [r1, #12]
 800d356:	0005      	movs	r5, r0
 800d358:	000c      	movs	r4, r1
 800d35a:	0016      	movs	r6, r2
 800d35c:	05db      	lsls	r3, r3, #23
 800d35e:	d505      	bpl.n	800d36c <__swrite+0x1c>
 800d360:	230e      	movs	r3, #14
 800d362:	5ec9      	ldrsh	r1, [r1, r3]
 800d364:	2200      	movs	r2, #0
 800d366:	2302      	movs	r3, #2
 800d368:	f000 f8d0 	bl	800d50c <_lseek_r>
 800d36c:	89a3      	ldrh	r3, [r4, #12]
 800d36e:	4a05      	ldr	r2, [pc, #20]	; (800d384 <__swrite+0x34>)
 800d370:	0028      	movs	r0, r5
 800d372:	4013      	ands	r3, r2
 800d374:	81a3      	strh	r3, [r4, #12]
 800d376:	0032      	movs	r2, r6
 800d378:	230e      	movs	r3, #14
 800d37a:	5ee1      	ldrsh	r1, [r4, r3]
 800d37c:	003b      	movs	r3, r7
 800d37e:	f000 f8ff 	bl	800d580 <_write_r>
 800d382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d384:	ffffefff 	.word	0xffffefff

0800d388 <__sseek>:
 800d388:	b570      	push	{r4, r5, r6, lr}
 800d38a:	000c      	movs	r4, r1
 800d38c:	250e      	movs	r5, #14
 800d38e:	5f49      	ldrsh	r1, [r1, r5]
 800d390:	f000 f8bc 	bl	800d50c <_lseek_r>
 800d394:	89a3      	ldrh	r3, [r4, #12]
 800d396:	1c42      	adds	r2, r0, #1
 800d398:	d103      	bne.n	800d3a2 <__sseek+0x1a>
 800d39a:	4a05      	ldr	r2, [pc, #20]	; (800d3b0 <__sseek+0x28>)
 800d39c:	4013      	ands	r3, r2
 800d39e:	81a3      	strh	r3, [r4, #12]
 800d3a0:	bd70      	pop	{r4, r5, r6, pc}
 800d3a2:	2280      	movs	r2, #128	; 0x80
 800d3a4:	0152      	lsls	r2, r2, #5
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	81a3      	strh	r3, [r4, #12]
 800d3aa:	6520      	str	r0, [r4, #80]	; 0x50
 800d3ac:	e7f8      	b.n	800d3a0 <__sseek+0x18>
 800d3ae:	46c0      	nop			; (mov r8, r8)
 800d3b0:	ffffefff 	.word	0xffffefff

0800d3b4 <__sclose>:
 800d3b4:	b510      	push	{r4, lr}
 800d3b6:	230e      	movs	r3, #14
 800d3b8:	5ec9      	ldrsh	r1, [r1, r3]
 800d3ba:	f000 f895 	bl	800d4e8 <_close_r>
 800d3be:	bd10      	pop	{r4, pc}

0800d3c0 <memset>:
 800d3c0:	0003      	movs	r3, r0
 800d3c2:	1882      	adds	r2, r0, r2
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d100      	bne.n	800d3ca <memset+0xa>
 800d3c8:	4770      	bx	lr
 800d3ca:	7019      	strb	r1, [r3, #0]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	e7f9      	b.n	800d3c4 <memset+0x4>

0800d3d0 <strchr>:
 800d3d0:	b2c9      	uxtb	r1, r1
 800d3d2:	7803      	ldrb	r3, [r0, #0]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d004      	beq.n	800d3e2 <strchr+0x12>
 800d3d8:	428b      	cmp	r3, r1
 800d3da:	d100      	bne.n	800d3de <strchr+0xe>
 800d3dc:	4770      	bx	lr
 800d3de:	3001      	adds	r0, #1
 800d3e0:	e7f7      	b.n	800d3d2 <strchr+0x2>
 800d3e2:	424b      	negs	r3, r1
 800d3e4:	4159      	adcs	r1, r3
 800d3e6:	4249      	negs	r1, r1
 800d3e8:	4008      	ands	r0, r1
 800d3ea:	e7f7      	b.n	800d3dc <strchr+0xc>

0800d3ec <strncmp>:
 800d3ec:	b530      	push	{r4, r5, lr}
 800d3ee:	0005      	movs	r5, r0
 800d3f0:	1e10      	subs	r0, r2, #0
 800d3f2:	d00b      	beq.n	800d40c <strncmp+0x20>
 800d3f4:	2400      	movs	r4, #0
 800d3f6:	3a01      	subs	r2, #1
 800d3f8:	5d2b      	ldrb	r3, [r5, r4]
 800d3fa:	5d08      	ldrb	r0, [r1, r4]
 800d3fc:	4283      	cmp	r3, r0
 800d3fe:	d104      	bne.n	800d40a <strncmp+0x1e>
 800d400:	42a2      	cmp	r2, r4
 800d402:	d002      	beq.n	800d40a <strncmp+0x1e>
 800d404:	3401      	adds	r4, #1
 800d406:	2b00      	cmp	r3, #0
 800d408:	d1f6      	bne.n	800d3f8 <strncmp+0xc>
 800d40a:	1a18      	subs	r0, r3, r0
 800d40c:	bd30      	pop	{r4, r5, pc}

0800d40e <strncpy>:
 800d40e:	0003      	movs	r3, r0
 800d410:	b530      	push	{r4, r5, lr}
 800d412:	001d      	movs	r5, r3
 800d414:	2a00      	cmp	r2, #0
 800d416:	d006      	beq.n	800d426 <strncpy+0x18>
 800d418:	780c      	ldrb	r4, [r1, #0]
 800d41a:	3a01      	subs	r2, #1
 800d41c:	3301      	adds	r3, #1
 800d41e:	702c      	strb	r4, [r5, #0]
 800d420:	3101      	adds	r1, #1
 800d422:	2c00      	cmp	r4, #0
 800d424:	d1f5      	bne.n	800d412 <strncpy+0x4>
 800d426:	2100      	movs	r1, #0
 800d428:	189a      	adds	r2, r3, r2
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d100      	bne.n	800d430 <strncpy+0x22>
 800d42e:	bd30      	pop	{r4, r5, pc}
 800d430:	7019      	strb	r1, [r3, #0]
 800d432:	3301      	adds	r3, #1
 800d434:	e7f9      	b.n	800d42a <strncpy+0x1c>
	...

0800d438 <strtok>:
 800d438:	4b03      	ldr	r3, [pc, #12]	; (800d448 <strtok+0x10>)
 800d43a:	b510      	push	{r4, lr}
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	2301      	movs	r3, #1
 800d440:	3250      	adds	r2, #80	; 0x50
 800d442:	f000 f803 	bl	800d44c <__strtok_r>
 800d446:	bd10      	pop	{r4, pc}
 800d448:	200006d0 	.word	0x200006d0

0800d44c <__strtok_r>:
 800d44c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d44e:	2800      	cmp	r0, #0
 800d450:	d102      	bne.n	800d458 <__strtok_r+0xc>
 800d452:	6810      	ldr	r0, [r2, #0]
 800d454:	2800      	cmp	r0, #0
 800d456:	d013      	beq.n	800d480 <__strtok_r+0x34>
 800d458:	0004      	movs	r4, r0
 800d45a:	0020      	movs	r0, r4
 800d45c:	000e      	movs	r6, r1
 800d45e:	7805      	ldrb	r5, [r0, #0]
 800d460:	3401      	adds	r4, #1
 800d462:	7837      	ldrb	r7, [r6, #0]
 800d464:	2f00      	cmp	r7, #0
 800d466:	d104      	bne.n	800d472 <__strtok_r+0x26>
 800d468:	2d00      	cmp	r5, #0
 800d46a:	d10f      	bne.n	800d48c <__strtok_r+0x40>
 800d46c:	0028      	movs	r0, r5
 800d46e:	6015      	str	r5, [r2, #0]
 800d470:	e006      	b.n	800d480 <__strtok_r+0x34>
 800d472:	3601      	adds	r6, #1
 800d474:	42bd      	cmp	r5, r7
 800d476:	d1f4      	bne.n	800d462 <__strtok_r+0x16>
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d1ee      	bne.n	800d45a <__strtok_r+0xe>
 800d47c:	6014      	str	r4, [r2, #0]
 800d47e:	7003      	strb	r3, [r0, #0]
 800d480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d482:	002f      	movs	r7, r5
 800d484:	e00f      	b.n	800d4a6 <__strtok_r+0x5a>
 800d486:	3301      	adds	r3, #1
 800d488:	2e00      	cmp	r6, #0
 800d48a:	d104      	bne.n	800d496 <__strtok_r+0x4a>
 800d48c:	0023      	movs	r3, r4
 800d48e:	3401      	adds	r4, #1
 800d490:	781d      	ldrb	r5, [r3, #0]
 800d492:	0027      	movs	r7, r4
 800d494:	000b      	movs	r3, r1
 800d496:	781e      	ldrb	r6, [r3, #0]
 800d498:	42b5      	cmp	r5, r6
 800d49a:	d1f4      	bne.n	800d486 <__strtok_r+0x3a>
 800d49c:	2d00      	cmp	r5, #0
 800d49e:	d0f0      	beq.n	800d482 <__strtok_r+0x36>
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	3c01      	subs	r4, #1
 800d4a4:	7023      	strb	r3, [r4, #0]
 800d4a6:	6017      	str	r7, [r2, #0]
 800d4a8:	e7ea      	b.n	800d480 <__strtok_r+0x34>

0800d4aa <strstr>:
 800d4aa:	780a      	ldrb	r2, [r1, #0]
 800d4ac:	b530      	push	{r4, r5, lr}
 800d4ae:	2a00      	cmp	r2, #0
 800d4b0:	d10c      	bne.n	800d4cc <strstr+0x22>
 800d4b2:	bd30      	pop	{r4, r5, pc}
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d108      	bne.n	800d4ca <strstr+0x20>
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	5ccc      	ldrb	r4, [r1, r3]
 800d4bc:	2c00      	cmp	r4, #0
 800d4be:	d0f8      	beq.n	800d4b2 <strstr+0x8>
 800d4c0:	5cc5      	ldrb	r5, [r0, r3]
 800d4c2:	42a5      	cmp	r5, r4
 800d4c4:	d101      	bne.n	800d4ca <strstr+0x20>
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	e7f7      	b.n	800d4ba <strstr+0x10>
 800d4ca:	3001      	adds	r0, #1
 800d4cc:	7803      	ldrb	r3, [r0, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d1f0      	bne.n	800d4b4 <strstr+0xa>
 800d4d2:	0018      	movs	r0, r3
 800d4d4:	e7ed      	b.n	800d4b2 <strstr+0x8>
	...

0800d4d8 <__locale_mb_cur_max>:
 800d4d8:	2294      	movs	r2, #148	; 0x94
 800d4da:	4b02      	ldr	r3, [pc, #8]	; (800d4e4 <__locale_mb_cur_max+0xc>)
 800d4dc:	0052      	lsls	r2, r2, #1
 800d4de:	5c98      	ldrb	r0, [r3, r2]
 800d4e0:	4770      	bx	lr
 800d4e2:	46c0      	nop			; (mov r8, r8)
 800d4e4:	20000444 	.word	0x20000444

0800d4e8 <_close_r>:
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	b570      	push	{r4, r5, r6, lr}
 800d4ec:	4d06      	ldr	r5, [pc, #24]	; (800d508 <_close_r+0x20>)
 800d4ee:	0004      	movs	r4, r0
 800d4f0:	0008      	movs	r0, r1
 800d4f2:	602b      	str	r3, [r5, #0]
 800d4f4:	f7f6 feb1 	bl	800425a <_close>
 800d4f8:	1c43      	adds	r3, r0, #1
 800d4fa:	d103      	bne.n	800d504 <_close_r+0x1c>
 800d4fc:	682b      	ldr	r3, [r5, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d000      	beq.n	800d504 <_close_r+0x1c>
 800d502:	6023      	str	r3, [r4, #0]
 800d504:	bd70      	pop	{r4, r5, r6, pc}
 800d506:	46c0      	nop			; (mov r8, r8)
 800d508:	20000db8 	.word	0x20000db8

0800d50c <_lseek_r>:
 800d50c:	b570      	push	{r4, r5, r6, lr}
 800d50e:	0004      	movs	r4, r0
 800d510:	0008      	movs	r0, r1
 800d512:	0011      	movs	r1, r2
 800d514:	001a      	movs	r2, r3
 800d516:	2300      	movs	r3, #0
 800d518:	4d05      	ldr	r5, [pc, #20]	; (800d530 <_lseek_r+0x24>)
 800d51a:	602b      	str	r3, [r5, #0]
 800d51c:	f7f6 febe 	bl	800429c <_lseek>
 800d520:	1c43      	adds	r3, r0, #1
 800d522:	d103      	bne.n	800d52c <_lseek_r+0x20>
 800d524:	682b      	ldr	r3, [r5, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d000      	beq.n	800d52c <_lseek_r+0x20>
 800d52a:	6023      	str	r3, [r4, #0]
 800d52c:	bd70      	pop	{r4, r5, r6, pc}
 800d52e:	46c0      	nop			; (mov r8, r8)
 800d530:	20000db8 	.word	0x20000db8

0800d534 <_read_r>:
 800d534:	b570      	push	{r4, r5, r6, lr}
 800d536:	0004      	movs	r4, r0
 800d538:	0008      	movs	r0, r1
 800d53a:	0011      	movs	r1, r2
 800d53c:	001a      	movs	r2, r3
 800d53e:	2300      	movs	r3, #0
 800d540:	4d05      	ldr	r5, [pc, #20]	; (800d558 <_read_r+0x24>)
 800d542:	602b      	str	r3, [r5, #0]
 800d544:	f7f6 fe50 	bl	80041e8 <_read>
 800d548:	1c43      	adds	r3, r0, #1
 800d54a:	d103      	bne.n	800d554 <_read_r+0x20>
 800d54c:	682b      	ldr	r3, [r5, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d000      	beq.n	800d554 <_read_r+0x20>
 800d552:	6023      	str	r3, [r4, #0]
 800d554:	bd70      	pop	{r4, r5, r6, pc}
 800d556:	46c0      	nop			; (mov r8, r8)
 800d558:	20000db8 	.word	0x20000db8

0800d55c <_sbrk_r>:
 800d55c:	2300      	movs	r3, #0
 800d55e:	b570      	push	{r4, r5, r6, lr}
 800d560:	4d06      	ldr	r5, [pc, #24]	; (800d57c <_sbrk_r+0x20>)
 800d562:	0004      	movs	r4, r0
 800d564:	0008      	movs	r0, r1
 800d566:	602b      	str	r3, [r5, #0]
 800d568:	f7f6 fea4 	bl	80042b4 <_sbrk>
 800d56c:	1c43      	adds	r3, r0, #1
 800d56e:	d103      	bne.n	800d578 <_sbrk_r+0x1c>
 800d570:	682b      	ldr	r3, [r5, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d000      	beq.n	800d578 <_sbrk_r+0x1c>
 800d576:	6023      	str	r3, [r4, #0]
 800d578:	bd70      	pop	{r4, r5, r6, pc}
 800d57a:	46c0      	nop			; (mov r8, r8)
 800d57c:	20000db8 	.word	0x20000db8

0800d580 <_write_r>:
 800d580:	b570      	push	{r4, r5, r6, lr}
 800d582:	0004      	movs	r4, r0
 800d584:	0008      	movs	r0, r1
 800d586:	0011      	movs	r1, r2
 800d588:	001a      	movs	r2, r3
 800d58a:	2300      	movs	r3, #0
 800d58c:	4d05      	ldr	r5, [pc, #20]	; (800d5a4 <_write_r+0x24>)
 800d58e:	602b      	str	r3, [r5, #0]
 800d590:	f7f6 fe47 	bl	8004222 <_write>
 800d594:	1c43      	adds	r3, r0, #1
 800d596:	d103      	bne.n	800d5a0 <_write_r+0x20>
 800d598:	682b      	ldr	r3, [r5, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d000      	beq.n	800d5a0 <_write_r+0x20>
 800d59e:	6023      	str	r3, [r4, #0]
 800d5a0:	bd70      	pop	{r4, r5, r6, pc}
 800d5a2:	46c0      	nop			; (mov r8, r8)
 800d5a4:	20000db8 	.word	0x20000db8

0800d5a8 <__errno>:
 800d5a8:	4b01      	ldr	r3, [pc, #4]	; (800d5b0 <__errno+0x8>)
 800d5aa:	6818      	ldr	r0, [r3, #0]
 800d5ac:	4770      	bx	lr
 800d5ae:	46c0      	nop			; (mov r8, r8)
 800d5b0:	200006d0 	.word	0x200006d0

0800d5b4 <__libc_init_array>:
 800d5b4:	b570      	push	{r4, r5, r6, lr}
 800d5b6:	2600      	movs	r6, #0
 800d5b8:	4c0c      	ldr	r4, [pc, #48]	; (800d5ec <__libc_init_array+0x38>)
 800d5ba:	4d0d      	ldr	r5, [pc, #52]	; (800d5f0 <__libc_init_array+0x3c>)
 800d5bc:	1b64      	subs	r4, r4, r5
 800d5be:	10a4      	asrs	r4, r4, #2
 800d5c0:	42a6      	cmp	r6, r4
 800d5c2:	d109      	bne.n	800d5d8 <__libc_init_array+0x24>
 800d5c4:	2600      	movs	r6, #0
 800d5c6:	f006 fc3f 	bl	8013e48 <_init>
 800d5ca:	4c0a      	ldr	r4, [pc, #40]	; (800d5f4 <__libc_init_array+0x40>)
 800d5cc:	4d0a      	ldr	r5, [pc, #40]	; (800d5f8 <__libc_init_array+0x44>)
 800d5ce:	1b64      	subs	r4, r4, r5
 800d5d0:	10a4      	asrs	r4, r4, #2
 800d5d2:	42a6      	cmp	r6, r4
 800d5d4:	d105      	bne.n	800d5e2 <__libc_init_array+0x2e>
 800d5d6:	bd70      	pop	{r4, r5, r6, pc}
 800d5d8:	00b3      	lsls	r3, r6, #2
 800d5da:	58eb      	ldr	r3, [r5, r3]
 800d5dc:	4798      	blx	r3
 800d5de:	3601      	adds	r6, #1
 800d5e0:	e7ee      	b.n	800d5c0 <__libc_init_array+0xc>
 800d5e2:	00b3      	lsls	r3, r6, #2
 800d5e4:	58eb      	ldr	r3, [r5, r3]
 800d5e6:	4798      	blx	r3
 800d5e8:	3601      	adds	r6, #1
 800d5ea:	e7f2      	b.n	800d5d2 <__libc_init_array+0x1e>
 800d5ec:	08015f54 	.word	0x08015f54
 800d5f0:	08015f54 	.word	0x08015f54
 800d5f4:	08015f5c 	.word	0x08015f5c
 800d5f8:	08015f54 	.word	0x08015f54

0800d5fc <__retarget_lock_init_recursive>:
 800d5fc:	4770      	bx	lr

0800d5fe <__retarget_lock_close_recursive>:
 800d5fe:	4770      	bx	lr

0800d600 <__retarget_lock_acquire_recursive>:
 800d600:	4770      	bx	lr

0800d602 <__retarget_lock_release_recursive>:
 800d602:	4770      	bx	lr

0800d604 <sysconf>:
 800d604:	2380      	movs	r3, #128	; 0x80
 800d606:	b510      	push	{r4, lr}
 800d608:	2808      	cmp	r0, #8
 800d60a:	d004      	beq.n	800d616 <sysconf+0x12>
 800d60c:	f7ff ffcc 	bl	800d5a8 <__errno>
 800d610:	2316      	movs	r3, #22
 800d612:	6003      	str	r3, [r0, #0]
 800d614:	3b17      	subs	r3, #23
 800d616:	0018      	movs	r0, r3
 800d618:	bd10      	pop	{r4, pc}

0800d61a <memcpy>:
 800d61a:	2300      	movs	r3, #0
 800d61c:	b510      	push	{r4, lr}
 800d61e:	429a      	cmp	r2, r3
 800d620:	d100      	bne.n	800d624 <memcpy+0xa>
 800d622:	bd10      	pop	{r4, pc}
 800d624:	5ccc      	ldrb	r4, [r1, r3]
 800d626:	54c4      	strb	r4, [r0, r3]
 800d628:	3301      	adds	r3, #1
 800d62a:	e7f8      	b.n	800d61e <memcpy+0x4>

0800d62c <nan>:
 800d62c:	2000      	movs	r0, #0
 800d62e:	4901      	ldr	r1, [pc, #4]	; (800d634 <nan+0x8>)
 800d630:	4770      	bx	lr
 800d632:	46c0      	nop			; (mov r8, r8)
 800d634:	7ff80000 	.word	0x7ff80000

0800d638 <nanf>:
 800d638:	4800      	ldr	r0, [pc, #0]	; (800d63c <nanf+0x4>)
 800d63a:	4770      	bx	lr
 800d63c:	7fc00000 	.word	0x7fc00000

0800d640 <register_fini>:
 800d640:	4b03      	ldr	r3, [pc, #12]	; (800d650 <register_fini+0x10>)
 800d642:	b510      	push	{r4, lr}
 800d644:	2b00      	cmp	r3, #0
 800d646:	d002      	beq.n	800d64e <register_fini+0xe>
 800d648:	4802      	ldr	r0, [pc, #8]	; (800d654 <register_fini+0x14>)
 800d64a:	f000 f805 	bl	800d658 <atexit>
 800d64e:	bd10      	pop	{r4, pc}
 800d650:	00000000 	.word	0x00000000
 800d654:	080113b5 	.word	0x080113b5

0800d658 <atexit>:
 800d658:	2300      	movs	r3, #0
 800d65a:	b510      	push	{r4, lr}
 800d65c:	0001      	movs	r1, r0
 800d65e:	001a      	movs	r2, r3
 800d660:	0018      	movs	r0, r3
 800d662:	f003 fef9 	bl	8011458 <__register_exitproc>
 800d666:	bd10      	pop	{r4, pc}

0800d668 <_malloc_trim_r>:
 800d668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d66a:	0004      	movs	r4, r0
 800d66c:	2008      	movs	r0, #8
 800d66e:	000d      	movs	r5, r1
 800d670:	f7ff ffc8 	bl	800d604 <sysconf>
 800d674:	0006      	movs	r6, r0
 800d676:	0020      	movs	r0, r4
 800d678:	f7fe fda4 	bl	800c1c4 <__malloc_lock>
 800d67c:	2203      	movs	r2, #3
 800d67e:	4f21      	ldr	r7, [pc, #132]	; (800d704 <_malloc_trim_r+0x9c>)
 800d680:	0031      	movs	r1, r6
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	4393      	bics	r3, r2
 800d688:	1b58      	subs	r0, r3, r5
 800d68a:	3811      	subs	r0, #17
 800d68c:	1980      	adds	r0, r0, r6
 800d68e:	9301      	str	r3, [sp, #4]
 800d690:	f7f2 fd54 	bl	800013c <__udivsi3>
 800d694:	1e45      	subs	r5, r0, #1
 800d696:	4375      	muls	r5, r6
 800d698:	42ae      	cmp	r6, r5
 800d69a:	dd04      	ble.n	800d6a6 <_malloc_trim_r+0x3e>
 800d69c:	0020      	movs	r0, r4
 800d69e:	f7fe fd99 	bl	800c1d4 <__malloc_unlock>
 800d6a2:	2000      	movs	r0, #0
 800d6a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	0020      	movs	r0, r4
 800d6aa:	f7ff ff57 	bl	800d55c <_sbrk_r>
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	9a01      	ldr	r2, [sp, #4]
 800d6b2:	189b      	adds	r3, r3, r2
 800d6b4:	4298      	cmp	r0, r3
 800d6b6:	d1f1      	bne.n	800d69c <_malloc_trim_r+0x34>
 800d6b8:	0020      	movs	r0, r4
 800d6ba:	4269      	negs	r1, r5
 800d6bc:	f7ff ff4e 	bl	800d55c <_sbrk_r>
 800d6c0:	3001      	adds	r0, #1
 800d6c2:	d110      	bne.n	800d6e6 <_malloc_trim_r+0x7e>
 800d6c4:	2100      	movs	r1, #0
 800d6c6:	0020      	movs	r0, r4
 800d6c8:	f7ff ff48 	bl	800d55c <_sbrk_r>
 800d6cc:	68ba      	ldr	r2, [r7, #8]
 800d6ce:	1a81      	subs	r1, r0, r2
 800d6d0:	290f      	cmp	r1, #15
 800d6d2:	dde3      	ble.n	800d69c <_malloc_trim_r+0x34>
 800d6d4:	4d0c      	ldr	r5, [pc, #48]	; (800d708 <_malloc_trim_r+0xa0>)
 800d6d6:	4b0d      	ldr	r3, [pc, #52]	; (800d70c <_malloc_trim_r+0xa4>)
 800d6d8:	682d      	ldr	r5, [r5, #0]
 800d6da:	1b40      	subs	r0, r0, r5
 800d6dc:	6018      	str	r0, [r3, #0]
 800d6de:	2301      	movs	r3, #1
 800d6e0:	430b      	orrs	r3, r1
 800d6e2:	6053      	str	r3, [r2, #4]
 800d6e4:	e7da      	b.n	800d69c <_malloc_trim_r+0x34>
 800d6e6:	2601      	movs	r6, #1
 800d6e8:	9b01      	ldr	r3, [sp, #4]
 800d6ea:	68ba      	ldr	r2, [r7, #8]
 800d6ec:	1b5b      	subs	r3, r3, r5
 800d6ee:	4333      	orrs	r3, r6
 800d6f0:	6053      	str	r3, [r2, #4]
 800d6f2:	4a06      	ldr	r2, [pc, #24]	; (800d70c <_malloc_trim_r+0xa4>)
 800d6f4:	0020      	movs	r0, r4
 800d6f6:	6813      	ldr	r3, [r2, #0]
 800d6f8:	1b5b      	subs	r3, r3, r5
 800d6fa:	6013      	str	r3, [r2, #0]
 800d6fc:	f7fe fd6a 	bl	800c1d4 <__malloc_unlock>
 800d700:	0030      	movs	r0, r6
 800d702:	e7cf      	b.n	800d6a4 <_malloc_trim_r+0x3c>
 800d704:	20000028 	.word	0x20000028
 800d708:	20000430 	.word	0x20000430
 800d70c:	20000c48 	.word	0x20000c48

0800d710 <_free_r>:
 800d710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d712:	1e0d      	subs	r5, r1, #0
 800d714:	9001      	str	r0, [sp, #4]
 800d716:	d02d      	beq.n	800d774 <_free_r+0x64>
 800d718:	f7fe fd54 	bl	800c1c4 <__malloc_lock>
 800d71c:	2301      	movs	r3, #1
 800d71e:	0029      	movs	r1, r5
 800d720:	469c      	mov	ip, r3
 800d722:	3908      	subs	r1, #8
 800d724:	684f      	ldr	r7, [r1, #4]
 800d726:	4662      	mov	r2, ip
 800d728:	003b      	movs	r3, r7
 800d72a:	4664      	mov	r4, ip
 800d72c:	4393      	bics	r3, r2
 800d72e:	18c8      	adds	r0, r1, r3
 800d730:	6845      	ldr	r5, [r0, #4]
 800d732:	3202      	adds	r2, #2
 800d734:	4395      	bics	r5, r2
 800d736:	4a4a      	ldr	r2, [pc, #296]	; (800d860 <_free_r+0x150>)
 800d738:	4027      	ands	r7, r4
 800d73a:	6896      	ldr	r6, [r2, #8]
 800d73c:	4286      	cmp	r6, r0
 800d73e:	d11a      	bne.n	800d776 <_free_r+0x66>
 800d740:	195b      	adds	r3, r3, r5
 800d742:	2f00      	cmp	r7, #0
 800d744:	d106      	bne.n	800d754 <_free_r+0x44>
 800d746:	6808      	ldr	r0, [r1, #0]
 800d748:	1a09      	subs	r1, r1, r0
 800d74a:	688d      	ldr	r5, [r1, #8]
 800d74c:	181b      	adds	r3, r3, r0
 800d74e:	68c8      	ldr	r0, [r1, #12]
 800d750:	60e8      	str	r0, [r5, #12]
 800d752:	6085      	str	r5, [r0, #8]
 800d754:	2001      	movs	r0, #1
 800d756:	4318      	orrs	r0, r3
 800d758:	6048      	str	r0, [r1, #4]
 800d75a:	6091      	str	r1, [r2, #8]
 800d75c:	4a41      	ldr	r2, [pc, #260]	; (800d864 <_free_r+0x154>)
 800d75e:	6812      	ldr	r2, [r2, #0]
 800d760:	429a      	cmp	r2, r3
 800d762:	d804      	bhi.n	800d76e <_free_r+0x5e>
 800d764:	4b40      	ldr	r3, [pc, #256]	; (800d868 <_free_r+0x158>)
 800d766:	9801      	ldr	r0, [sp, #4]
 800d768:	6819      	ldr	r1, [r3, #0]
 800d76a:	f7ff ff7d 	bl	800d668 <_malloc_trim_r>
 800d76e:	9801      	ldr	r0, [sp, #4]
 800d770:	f7fe fd30 	bl	800c1d4 <__malloc_unlock>
 800d774:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d776:	2600      	movs	r6, #0
 800d778:	6045      	str	r5, [r0, #4]
 800d77a:	42b7      	cmp	r7, r6
 800d77c:	d109      	bne.n	800d792 <_free_r+0x82>
 800d77e:	680f      	ldr	r7, [r1, #0]
 800d780:	4c3a      	ldr	r4, [pc, #232]	; (800d86c <_free_r+0x15c>)
 800d782:	1bc9      	subs	r1, r1, r7
 800d784:	19db      	adds	r3, r3, r7
 800d786:	688f      	ldr	r7, [r1, #8]
 800d788:	42a7      	cmp	r7, r4
 800d78a:	d02c      	beq.n	800d7e6 <_free_r+0xd6>
 800d78c:	68cc      	ldr	r4, [r1, #12]
 800d78e:	60fc      	str	r4, [r7, #12]
 800d790:	60a7      	str	r7, [r4, #8]
 800d792:	1947      	adds	r7, r0, r5
 800d794:	687c      	ldr	r4, [r7, #4]
 800d796:	2701      	movs	r7, #1
 800d798:	423c      	tst	r4, r7
 800d79a:	d10b      	bne.n	800d7b4 <_free_r+0xa4>
 800d79c:	195b      	adds	r3, r3, r5
 800d79e:	6885      	ldr	r5, [r0, #8]
 800d7a0:	2e00      	cmp	r6, #0
 800d7a2:	d122      	bne.n	800d7ea <_free_r+0xda>
 800d7a4:	4c31      	ldr	r4, [pc, #196]	; (800d86c <_free_r+0x15c>)
 800d7a6:	42a5      	cmp	r5, r4
 800d7a8:	d11f      	bne.n	800d7ea <_free_r+0xda>
 800d7aa:	003e      	movs	r6, r7
 800d7ac:	6151      	str	r1, [r2, #20]
 800d7ae:	6111      	str	r1, [r2, #16]
 800d7b0:	60cd      	str	r5, [r1, #12]
 800d7b2:	608d      	str	r5, [r1, #8]
 800d7b4:	2501      	movs	r5, #1
 800d7b6:	0028      	movs	r0, r5
 800d7b8:	4318      	orrs	r0, r3
 800d7ba:	6048      	str	r0, [r1, #4]
 800d7bc:	50cb      	str	r3, [r1, r3]
 800d7be:	2e00      	cmp	r6, #0
 800d7c0:	d1d5      	bne.n	800d76e <_free_r+0x5e>
 800d7c2:	2080      	movs	r0, #128	; 0x80
 800d7c4:	0080      	lsls	r0, r0, #2
 800d7c6:	4283      	cmp	r3, r0
 800d7c8:	d213      	bcs.n	800d7f2 <_free_r+0xe2>
 800d7ca:	08d8      	lsrs	r0, r3, #3
 800d7cc:	095b      	lsrs	r3, r3, #5
 800d7ce:	409d      	lsls	r5, r3
 800d7d0:	6853      	ldr	r3, [r2, #4]
 800d7d2:	431d      	orrs	r5, r3
 800d7d4:	00c3      	lsls	r3, r0, #3
 800d7d6:	189b      	adds	r3, r3, r2
 800d7d8:	6055      	str	r5, [r2, #4]
 800d7da:	689a      	ldr	r2, [r3, #8]
 800d7dc:	60cb      	str	r3, [r1, #12]
 800d7de:	608a      	str	r2, [r1, #8]
 800d7e0:	6099      	str	r1, [r3, #8]
 800d7e2:	60d1      	str	r1, [r2, #12]
 800d7e4:	e7c3      	b.n	800d76e <_free_r+0x5e>
 800d7e6:	4666      	mov	r6, ip
 800d7e8:	e7d3      	b.n	800d792 <_free_r+0x82>
 800d7ea:	68c0      	ldr	r0, [r0, #12]
 800d7ec:	60e8      	str	r0, [r5, #12]
 800d7ee:	6085      	str	r5, [r0, #8]
 800d7f0:	e7e0      	b.n	800d7b4 <_free_r+0xa4>
 800d7f2:	0a5d      	lsrs	r5, r3, #9
 800d7f4:	2d04      	cmp	r5, #4
 800d7f6:	d812      	bhi.n	800d81e <_free_r+0x10e>
 800d7f8:	0998      	lsrs	r0, r3, #6
 800d7fa:	3038      	adds	r0, #56	; 0x38
 800d7fc:	00c6      	lsls	r6, r0, #3
 800d7fe:	18b6      	adds	r6, r6, r2
 800d800:	68b5      	ldr	r5, [r6, #8]
 800d802:	2703      	movs	r7, #3
 800d804:	42ae      	cmp	r6, r5
 800d806:	d125      	bne.n	800d854 <_free_r+0x144>
 800d808:	2301      	movs	r3, #1
 800d80a:	1080      	asrs	r0, r0, #2
 800d80c:	4083      	lsls	r3, r0
 800d80e:	6850      	ldr	r0, [r2, #4]
 800d810:	4303      	orrs	r3, r0
 800d812:	6053      	str	r3, [r2, #4]
 800d814:	60ce      	str	r6, [r1, #12]
 800d816:	608d      	str	r5, [r1, #8]
 800d818:	60b1      	str	r1, [r6, #8]
 800d81a:	60e9      	str	r1, [r5, #12]
 800d81c:	e7a7      	b.n	800d76e <_free_r+0x5e>
 800d81e:	2d14      	cmp	r5, #20
 800d820:	d802      	bhi.n	800d828 <_free_r+0x118>
 800d822:	0028      	movs	r0, r5
 800d824:	305b      	adds	r0, #91	; 0x5b
 800d826:	e7e9      	b.n	800d7fc <_free_r+0xec>
 800d828:	2d54      	cmp	r5, #84	; 0x54
 800d82a:	d802      	bhi.n	800d832 <_free_r+0x122>
 800d82c:	0b18      	lsrs	r0, r3, #12
 800d82e:	306e      	adds	r0, #110	; 0x6e
 800d830:	e7e4      	b.n	800d7fc <_free_r+0xec>
 800d832:	20aa      	movs	r0, #170	; 0xaa
 800d834:	0040      	lsls	r0, r0, #1
 800d836:	4285      	cmp	r5, r0
 800d838:	d802      	bhi.n	800d840 <_free_r+0x130>
 800d83a:	0bd8      	lsrs	r0, r3, #15
 800d83c:	3077      	adds	r0, #119	; 0x77
 800d83e:	e7dd      	b.n	800d7fc <_free_r+0xec>
 800d840:	4e0b      	ldr	r6, [pc, #44]	; (800d870 <_free_r+0x160>)
 800d842:	207e      	movs	r0, #126	; 0x7e
 800d844:	42b5      	cmp	r5, r6
 800d846:	d8d9      	bhi.n	800d7fc <_free_r+0xec>
 800d848:	0c98      	lsrs	r0, r3, #18
 800d84a:	307c      	adds	r0, #124	; 0x7c
 800d84c:	e7d6      	b.n	800d7fc <_free_r+0xec>
 800d84e:	68ad      	ldr	r5, [r5, #8]
 800d850:	42ae      	cmp	r6, r5
 800d852:	d003      	beq.n	800d85c <_free_r+0x14c>
 800d854:	686a      	ldr	r2, [r5, #4]
 800d856:	43ba      	bics	r2, r7
 800d858:	429a      	cmp	r2, r3
 800d85a:	d8f8      	bhi.n	800d84e <_free_r+0x13e>
 800d85c:	68ee      	ldr	r6, [r5, #12]
 800d85e:	e7d9      	b.n	800d814 <_free_r+0x104>
 800d860:	20000028 	.word	0x20000028
 800d864:	20000434 	.word	0x20000434
 800d868:	20000c78 	.word	0x20000c78
 800d86c:	20000030 	.word	0x20000030
 800d870:	00000554 	.word	0x00000554

0800d874 <rshift>:
 800d874:	0002      	movs	r2, r0
 800d876:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d878:	6904      	ldr	r4, [r0, #16]
 800d87a:	114b      	asrs	r3, r1, #5
 800d87c:	b085      	sub	sp, #20
 800d87e:	3214      	adds	r2, #20
 800d880:	9302      	str	r3, [sp, #8]
 800d882:	114d      	asrs	r5, r1, #5
 800d884:	0013      	movs	r3, r2
 800d886:	42ac      	cmp	r4, r5
 800d888:	dd32      	ble.n	800d8f0 <rshift+0x7c>
 800d88a:	261f      	movs	r6, #31
 800d88c:	000f      	movs	r7, r1
 800d88e:	114b      	asrs	r3, r1, #5
 800d890:	009b      	lsls	r3, r3, #2
 800d892:	00a5      	lsls	r5, r4, #2
 800d894:	18d3      	adds	r3, r2, r3
 800d896:	4037      	ands	r7, r6
 800d898:	1955      	adds	r5, r2, r5
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	9701      	str	r7, [sp, #4]
 800d89e:	4231      	tst	r1, r6
 800d8a0:	d10d      	bne.n	800d8be <rshift+0x4a>
 800d8a2:	0016      	movs	r6, r2
 800d8a4:	0019      	movs	r1, r3
 800d8a6:	428d      	cmp	r5, r1
 800d8a8:	d836      	bhi.n	800d918 <rshift+0xa4>
 800d8aa:	9900      	ldr	r1, [sp, #0]
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	3903      	subs	r1, #3
 800d8b0:	428d      	cmp	r5, r1
 800d8b2:	d302      	bcc.n	800d8ba <rshift+0x46>
 800d8b4:	9b02      	ldr	r3, [sp, #8]
 800d8b6:	1ae4      	subs	r4, r4, r3
 800d8b8:	00a3      	lsls	r3, r4, #2
 800d8ba:	18d3      	adds	r3, r2, r3
 800d8bc:	e018      	b.n	800d8f0 <rshift+0x7c>
 800d8be:	2120      	movs	r1, #32
 800d8c0:	9e01      	ldr	r6, [sp, #4]
 800d8c2:	9f01      	ldr	r7, [sp, #4]
 800d8c4:	1b89      	subs	r1, r1, r6
 800d8c6:	9e00      	ldr	r6, [sp, #0]
 800d8c8:	9103      	str	r1, [sp, #12]
 800d8ca:	ce02      	ldmia	r6!, {r1}
 800d8cc:	4694      	mov	ip, r2
 800d8ce:	40f9      	lsrs	r1, r7
 800d8d0:	42b5      	cmp	r5, r6
 800d8d2:	d816      	bhi.n	800d902 <rshift+0x8e>
 800d8d4:	9e00      	ldr	r6, [sp, #0]
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	3601      	adds	r6, #1
 800d8da:	42b5      	cmp	r5, r6
 800d8dc:	d303      	bcc.n	800d8e6 <rshift+0x72>
 800d8de:	9b02      	ldr	r3, [sp, #8]
 800d8e0:	1ae3      	subs	r3, r4, r3
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	3b04      	subs	r3, #4
 800d8e6:	18d3      	adds	r3, r2, r3
 800d8e8:	6019      	str	r1, [r3, #0]
 800d8ea:	2900      	cmp	r1, #0
 800d8ec:	d000      	beq.n	800d8f0 <rshift+0x7c>
 800d8ee:	3304      	adds	r3, #4
 800d8f0:	1a99      	subs	r1, r3, r2
 800d8f2:	1089      	asrs	r1, r1, #2
 800d8f4:	6101      	str	r1, [r0, #16]
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d101      	bne.n	800d8fe <rshift+0x8a>
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	6143      	str	r3, [r0, #20]
 800d8fe:	b005      	add	sp, #20
 800d900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d902:	6837      	ldr	r7, [r6, #0]
 800d904:	9b03      	ldr	r3, [sp, #12]
 800d906:	409f      	lsls	r7, r3
 800d908:	430f      	orrs	r7, r1
 800d90a:	4661      	mov	r1, ip
 800d90c:	c180      	stmia	r1!, {r7}
 800d90e:	468c      	mov	ip, r1
 800d910:	9b01      	ldr	r3, [sp, #4]
 800d912:	ce02      	ldmia	r6!, {r1}
 800d914:	40d9      	lsrs	r1, r3
 800d916:	e7db      	b.n	800d8d0 <rshift+0x5c>
 800d918:	c980      	ldmia	r1!, {r7}
 800d91a:	c680      	stmia	r6!, {r7}
 800d91c:	e7c3      	b.n	800d8a6 <rshift+0x32>

0800d91e <__hexdig_fun>:
 800d91e:	0002      	movs	r2, r0
 800d920:	3a30      	subs	r2, #48	; 0x30
 800d922:	0003      	movs	r3, r0
 800d924:	2a09      	cmp	r2, #9
 800d926:	d802      	bhi.n	800d92e <__hexdig_fun+0x10>
 800d928:	3b20      	subs	r3, #32
 800d92a:	b2d8      	uxtb	r0, r3
 800d92c:	4770      	bx	lr
 800d92e:	0002      	movs	r2, r0
 800d930:	3a61      	subs	r2, #97	; 0x61
 800d932:	2a05      	cmp	r2, #5
 800d934:	d801      	bhi.n	800d93a <__hexdig_fun+0x1c>
 800d936:	3b47      	subs	r3, #71	; 0x47
 800d938:	e7f7      	b.n	800d92a <__hexdig_fun+0xc>
 800d93a:	001a      	movs	r2, r3
 800d93c:	3a41      	subs	r2, #65	; 0x41
 800d93e:	2000      	movs	r0, #0
 800d940:	2a05      	cmp	r2, #5
 800d942:	d8f3      	bhi.n	800d92c <__hexdig_fun+0xe>
 800d944:	3b27      	subs	r3, #39	; 0x27
 800d946:	e7f0      	b.n	800d92a <__hexdig_fun+0xc>

0800d948 <__gethex>:
 800d948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d94a:	b089      	sub	sp, #36	; 0x24
 800d94c:	9307      	str	r3, [sp, #28]
 800d94e:	2302      	movs	r3, #2
 800d950:	9201      	str	r2, [sp, #4]
 800d952:	680a      	ldr	r2, [r1, #0]
 800d954:	425b      	negs	r3, r3
 800d956:	9003      	str	r0, [sp, #12]
 800d958:	9106      	str	r1, [sp, #24]
 800d95a:	1c96      	adds	r6, r2, #2
 800d95c:	1a9b      	subs	r3, r3, r2
 800d95e:	199a      	adds	r2, r3, r6
 800d960:	9600      	str	r6, [sp, #0]
 800d962:	9205      	str	r2, [sp, #20]
 800d964:	9a00      	ldr	r2, [sp, #0]
 800d966:	3601      	adds	r6, #1
 800d968:	7810      	ldrb	r0, [r2, #0]
 800d96a:	2830      	cmp	r0, #48	; 0x30
 800d96c:	d0f7      	beq.n	800d95e <__gethex+0x16>
 800d96e:	f7ff ffd6 	bl	800d91e <__hexdig_fun>
 800d972:	2300      	movs	r3, #0
 800d974:	001d      	movs	r5, r3
 800d976:	9302      	str	r3, [sp, #8]
 800d978:	4298      	cmp	r0, r3
 800d97a:	d11d      	bne.n	800d9b8 <__gethex+0x70>
 800d97c:	2201      	movs	r2, #1
 800d97e:	49a6      	ldr	r1, [pc, #664]	; (800dc18 <__gethex+0x2d0>)
 800d980:	9800      	ldr	r0, [sp, #0]
 800d982:	f7ff fd33 	bl	800d3ec <strncmp>
 800d986:	0007      	movs	r7, r0
 800d988:	42a8      	cmp	r0, r5
 800d98a:	d169      	bne.n	800da60 <__gethex+0x118>
 800d98c:	9b00      	ldr	r3, [sp, #0]
 800d98e:	0034      	movs	r4, r6
 800d990:	7858      	ldrb	r0, [r3, #1]
 800d992:	f7ff ffc4 	bl	800d91e <__hexdig_fun>
 800d996:	2301      	movs	r3, #1
 800d998:	9302      	str	r3, [sp, #8]
 800d99a:	42a8      	cmp	r0, r5
 800d99c:	d02f      	beq.n	800d9fe <__gethex+0xb6>
 800d99e:	9600      	str	r6, [sp, #0]
 800d9a0:	9b00      	ldr	r3, [sp, #0]
 800d9a2:	7818      	ldrb	r0, [r3, #0]
 800d9a4:	2830      	cmp	r0, #48	; 0x30
 800d9a6:	d009      	beq.n	800d9bc <__gethex+0x74>
 800d9a8:	f7ff ffb9 	bl	800d91e <__hexdig_fun>
 800d9ac:	4242      	negs	r2, r0
 800d9ae:	4142      	adcs	r2, r0
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	0035      	movs	r5, r6
 800d9b4:	9202      	str	r2, [sp, #8]
 800d9b6:	9305      	str	r3, [sp, #20]
 800d9b8:	9c00      	ldr	r4, [sp, #0]
 800d9ba:	e004      	b.n	800d9c6 <__gethex+0x7e>
 800d9bc:	9b00      	ldr	r3, [sp, #0]
 800d9be:	3301      	adds	r3, #1
 800d9c0:	9300      	str	r3, [sp, #0]
 800d9c2:	e7ed      	b.n	800d9a0 <__gethex+0x58>
 800d9c4:	3401      	adds	r4, #1
 800d9c6:	7820      	ldrb	r0, [r4, #0]
 800d9c8:	f7ff ffa9 	bl	800d91e <__hexdig_fun>
 800d9cc:	1e07      	subs	r7, r0, #0
 800d9ce:	d1f9      	bne.n	800d9c4 <__gethex+0x7c>
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	0020      	movs	r0, r4
 800d9d4:	4990      	ldr	r1, [pc, #576]	; (800dc18 <__gethex+0x2d0>)
 800d9d6:	f7ff fd09 	bl	800d3ec <strncmp>
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	d10d      	bne.n	800d9fa <__gethex+0xb2>
 800d9de:	2d00      	cmp	r5, #0
 800d9e0:	d106      	bne.n	800d9f0 <__gethex+0xa8>
 800d9e2:	3401      	adds	r4, #1
 800d9e4:	0025      	movs	r5, r4
 800d9e6:	7820      	ldrb	r0, [r4, #0]
 800d9e8:	f7ff ff99 	bl	800d91e <__hexdig_fun>
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	d102      	bne.n	800d9f6 <__gethex+0xae>
 800d9f0:	1b2d      	subs	r5, r5, r4
 800d9f2:	00af      	lsls	r7, r5, #2
 800d9f4:	e003      	b.n	800d9fe <__gethex+0xb6>
 800d9f6:	3401      	adds	r4, #1
 800d9f8:	e7f5      	b.n	800d9e6 <__gethex+0x9e>
 800d9fa:	2d00      	cmp	r5, #0
 800d9fc:	d1f8      	bne.n	800d9f0 <__gethex+0xa8>
 800d9fe:	2220      	movs	r2, #32
 800da00:	7823      	ldrb	r3, [r4, #0]
 800da02:	0026      	movs	r6, r4
 800da04:	4393      	bics	r3, r2
 800da06:	2b50      	cmp	r3, #80	; 0x50
 800da08:	d11d      	bne.n	800da46 <__gethex+0xfe>
 800da0a:	7863      	ldrb	r3, [r4, #1]
 800da0c:	2b2b      	cmp	r3, #43	; 0x2b
 800da0e:	d02c      	beq.n	800da6a <__gethex+0x122>
 800da10:	2b2d      	cmp	r3, #45	; 0x2d
 800da12:	d02e      	beq.n	800da72 <__gethex+0x12a>
 800da14:	2300      	movs	r3, #0
 800da16:	1c66      	adds	r6, r4, #1
 800da18:	9304      	str	r3, [sp, #16]
 800da1a:	7830      	ldrb	r0, [r6, #0]
 800da1c:	f7ff ff7f 	bl	800d91e <__hexdig_fun>
 800da20:	1e43      	subs	r3, r0, #1
 800da22:	b2db      	uxtb	r3, r3
 800da24:	2b18      	cmp	r3, #24
 800da26:	d82b      	bhi.n	800da80 <__gethex+0x138>
 800da28:	3810      	subs	r0, #16
 800da2a:	0005      	movs	r5, r0
 800da2c:	7870      	ldrb	r0, [r6, #1]
 800da2e:	f7ff ff76 	bl	800d91e <__hexdig_fun>
 800da32:	1e43      	subs	r3, r0, #1
 800da34:	b2db      	uxtb	r3, r3
 800da36:	3601      	adds	r6, #1
 800da38:	2b18      	cmp	r3, #24
 800da3a:	d91c      	bls.n	800da76 <__gethex+0x12e>
 800da3c:	9b04      	ldr	r3, [sp, #16]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d000      	beq.n	800da44 <__gethex+0xfc>
 800da42:	426d      	negs	r5, r5
 800da44:	197f      	adds	r7, r7, r5
 800da46:	9b06      	ldr	r3, [sp, #24]
 800da48:	601e      	str	r6, [r3, #0]
 800da4a:	9b02      	ldr	r3, [sp, #8]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d019      	beq.n	800da84 <__gethex+0x13c>
 800da50:	2600      	movs	r6, #0
 800da52:	9b05      	ldr	r3, [sp, #20]
 800da54:	42b3      	cmp	r3, r6
 800da56:	d100      	bne.n	800da5a <__gethex+0x112>
 800da58:	3606      	adds	r6, #6
 800da5a:	0030      	movs	r0, r6
 800da5c:	b009      	add	sp, #36	; 0x24
 800da5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da60:	2301      	movs	r3, #1
 800da62:	2700      	movs	r7, #0
 800da64:	9c00      	ldr	r4, [sp, #0]
 800da66:	9302      	str	r3, [sp, #8]
 800da68:	e7c9      	b.n	800d9fe <__gethex+0xb6>
 800da6a:	2300      	movs	r3, #0
 800da6c:	9304      	str	r3, [sp, #16]
 800da6e:	1ca6      	adds	r6, r4, #2
 800da70:	e7d3      	b.n	800da1a <__gethex+0xd2>
 800da72:	2301      	movs	r3, #1
 800da74:	e7fa      	b.n	800da6c <__gethex+0x124>
 800da76:	230a      	movs	r3, #10
 800da78:	435d      	muls	r5, r3
 800da7a:	182d      	adds	r5, r5, r0
 800da7c:	3d10      	subs	r5, #16
 800da7e:	e7d5      	b.n	800da2c <__gethex+0xe4>
 800da80:	0026      	movs	r6, r4
 800da82:	e7e0      	b.n	800da46 <__gethex+0xfe>
 800da84:	9b00      	ldr	r3, [sp, #0]
 800da86:	9902      	ldr	r1, [sp, #8]
 800da88:	1ae3      	subs	r3, r4, r3
 800da8a:	3b01      	subs	r3, #1
 800da8c:	2b07      	cmp	r3, #7
 800da8e:	dc0a      	bgt.n	800daa6 <__gethex+0x15e>
 800da90:	9803      	ldr	r0, [sp, #12]
 800da92:	f000 fa5d 	bl	800df50 <_Balloc>
 800da96:	1e05      	subs	r5, r0, #0
 800da98:	d108      	bne.n	800daac <__gethex+0x164>
 800da9a:	002a      	movs	r2, r5
 800da9c:	21e4      	movs	r1, #228	; 0xe4
 800da9e:	4b5f      	ldr	r3, [pc, #380]	; (800dc1c <__gethex+0x2d4>)
 800daa0:	485f      	ldr	r0, [pc, #380]	; (800dc20 <__gethex+0x2d8>)
 800daa2:	f003 fd19 	bl	80114d8 <__assert_func>
 800daa6:	3101      	adds	r1, #1
 800daa8:	105b      	asrs	r3, r3, #1
 800daaa:	e7ef      	b.n	800da8c <__gethex+0x144>
 800daac:	0003      	movs	r3, r0
 800daae:	3314      	adds	r3, #20
 800dab0:	9302      	str	r3, [sp, #8]
 800dab2:	9305      	str	r3, [sp, #20]
 800dab4:	2300      	movs	r3, #0
 800dab6:	001e      	movs	r6, r3
 800dab8:	9304      	str	r3, [sp, #16]
 800daba:	9b00      	ldr	r3, [sp, #0]
 800dabc:	42a3      	cmp	r3, r4
 800dabe:	d33f      	bcc.n	800db40 <__gethex+0x1f8>
 800dac0:	9c05      	ldr	r4, [sp, #20]
 800dac2:	9b02      	ldr	r3, [sp, #8]
 800dac4:	c440      	stmia	r4!, {r6}
 800dac6:	1ae4      	subs	r4, r4, r3
 800dac8:	10a4      	asrs	r4, r4, #2
 800daca:	0030      	movs	r0, r6
 800dacc:	612c      	str	r4, [r5, #16]
 800dace:	f000 fb01 	bl	800e0d4 <__hi0bits>
 800dad2:	9b01      	ldr	r3, [sp, #4]
 800dad4:	0164      	lsls	r4, r4, #5
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	1a26      	subs	r6, r4, r0
 800dada:	9300      	str	r3, [sp, #0]
 800dadc:	429e      	cmp	r6, r3
 800dade:	dd51      	ble.n	800db84 <__gethex+0x23c>
 800dae0:	1af6      	subs	r6, r6, r3
 800dae2:	0031      	movs	r1, r6
 800dae4:	0028      	movs	r0, r5
 800dae6:	f000 fe7b 	bl	800e7e0 <__any_on>
 800daea:	1e04      	subs	r4, r0, #0
 800daec:	d016      	beq.n	800db1c <__gethex+0x1d4>
 800daee:	2401      	movs	r4, #1
 800daf0:	231f      	movs	r3, #31
 800daf2:	0020      	movs	r0, r4
 800daf4:	1e72      	subs	r2, r6, #1
 800daf6:	4013      	ands	r3, r2
 800daf8:	4098      	lsls	r0, r3
 800dafa:	0003      	movs	r3, r0
 800dafc:	1151      	asrs	r1, r2, #5
 800dafe:	9802      	ldr	r0, [sp, #8]
 800db00:	0089      	lsls	r1, r1, #2
 800db02:	5809      	ldr	r1, [r1, r0]
 800db04:	4219      	tst	r1, r3
 800db06:	d009      	beq.n	800db1c <__gethex+0x1d4>
 800db08:	42a2      	cmp	r2, r4
 800db0a:	dd06      	ble.n	800db1a <__gethex+0x1d2>
 800db0c:	0028      	movs	r0, r5
 800db0e:	1eb1      	subs	r1, r6, #2
 800db10:	f000 fe66 	bl	800e7e0 <__any_on>
 800db14:	3402      	adds	r4, #2
 800db16:	2800      	cmp	r0, #0
 800db18:	d100      	bne.n	800db1c <__gethex+0x1d4>
 800db1a:	2402      	movs	r4, #2
 800db1c:	0031      	movs	r1, r6
 800db1e:	0028      	movs	r0, r5
 800db20:	f7ff fea8 	bl	800d874 <rshift>
 800db24:	19bf      	adds	r7, r7, r6
 800db26:	9b01      	ldr	r3, [sp, #4]
 800db28:	689b      	ldr	r3, [r3, #8]
 800db2a:	42bb      	cmp	r3, r7
 800db2c:	da3a      	bge.n	800dba4 <__gethex+0x25c>
 800db2e:	0029      	movs	r1, r5
 800db30:	9803      	ldr	r0, [sp, #12]
 800db32:	f000 fa35 	bl	800dfa0 <_Bfree>
 800db36:	2300      	movs	r3, #0
 800db38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db3a:	26a3      	movs	r6, #163	; 0xa3
 800db3c:	6013      	str	r3, [r2, #0]
 800db3e:	e78c      	b.n	800da5a <__gethex+0x112>
 800db40:	3c01      	subs	r4, #1
 800db42:	7823      	ldrb	r3, [r4, #0]
 800db44:	2b2e      	cmp	r3, #46	; 0x2e
 800db46:	d012      	beq.n	800db6e <__gethex+0x226>
 800db48:	9b04      	ldr	r3, [sp, #16]
 800db4a:	2b20      	cmp	r3, #32
 800db4c:	d104      	bne.n	800db58 <__gethex+0x210>
 800db4e:	9b05      	ldr	r3, [sp, #20]
 800db50:	c340      	stmia	r3!, {r6}
 800db52:	2600      	movs	r6, #0
 800db54:	9305      	str	r3, [sp, #20]
 800db56:	9604      	str	r6, [sp, #16]
 800db58:	7820      	ldrb	r0, [r4, #0]
 800db5a:	f7ff fee0 	bl	800d91e <__hexdig_fun>
 800db5e:	230f      	movs	r3, #15
 800db60:	4018      	ands	r0, r3
 800db62:	9b04      	ldr	r3, [sp, #16]
 800db64:	4098      	lsls	r0, r3
 800db66:	3304      	adds	r3, #4
 800db68:	4306      	orrs	r6, r0
 800db6a:	9304      	str	r3, [sp, #16]
 800db6c:	e7a5      	b.n	800daba <__gethex+0x172>
 800db6e:	9b00      	ldr	r3, [sp, #0]
 800db70:	42a3      	cmp	r3, r4
 800db72:	d8e9      	bhi.n	800db48 <__gethex+0x200>
 800db74:	2201      	movs	r2, #1
 800db76:	0020      	movs	r0, r4
 800db78:	4927      	ldr	r1, [pc, #156]	; (800dc18 <__gethex+0x2d0>)
 800db7a:	f7ff fc37 	bl	800d3ec <strncmp>
 800db7e:	2800      	cmp	r0, #0
 800db80:	d1e2      	bne.n	800db48 <__gethex+0x200>
 800db82:	e79a      	b.n	800daba <__gethex+0x172>
 800db84:	9b00      	ldr	r3, [sp, #0]
 800db86:	2400      	movs	r4, #0
 800db88:	429e      	cmp	r6, r3
 800db8a:	dacc      	bge.n	800db26 <__gethex+0x1de>
 800db8c:	1b9e      	subs	r6, r3, r6
 800db8e:	0029      	movs	r1, r5
 800db90:	0032      	movs	r2, r6
 800db92:	9803      	ldr	r0, [sp, #12]
 800db94:	f000 fbf0 	bl	800e378 <__lshift>
 800db98:	0003      	movs	r3, r0
 800db9a:	3314      	adds	r3, #20
 800db9c:	0005      	movs	r5, r0
 800db9e:	1bbf      	subs	r7, r7, r6
 800dba0:	9302      	str	r3, [sp, #8]
 800dba2:	e7c0      	b.n	800db26 <__gethex+0x1de>
 800dba4:	9b01      	ldr	r3, [sp, #4]
 800dba6:	685e      	ldr	r6, [r3, #4]
 800dba8:	42be      	cmp	r6, r7
 800dbaa:	dd70      	ble.n	800dc8e <__gethex+0x346>
 800dbac:	9b00      	ldr	r3, [sp, #0]
 800dbae:	1bf6      	subs	r6, r6, r7
 800dbb0:	42b3      	cmp	r3, r6
 800dbb2:	dc37      	bgt.n	800dc24 <__gethex+0x2dc>
 800dbb4:	9b01      	ldr	r3, [sp, #4]
 800dbb6:	68db      	ldr	r3, [r3, #12]
 800dbb8:	2b02      	cmp	r3, #2
 800dbba:	d024      	beq.n	800dc06 <__gethex+0x2be>
 800dbbc:	2b03      	cmp	r3, #3
 800dbbe:	d026      	beq.n	800dc0e <__gethex+0x2c6>
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d117      	bne.n	800dbf4 <__gethex+0x2ac>
 800dbc4:	9b00      	ldr	r3, [sp, #0]
 800dbc6:	42b3      	cmp	r3, r6
 800dbc8:	d114      	bne.n	800dbf4 <__gethex+0x2ac>
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d10b      	bne.n	800dbe6 <__gethex+0x29e>
 800dbce:	9b01      	ldr	r3, [sp, #4]
 800dbd0:	9a07      	ldr	r2, [sp, #28]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	2662      	movs	r6, #98	; 0x62
 800dbd6:	6013      	str	r3, [r2, #0]
 800dbd8:	2301      	movs	r3, #1
 800dbda:	9a02      	ldr	r2, [sp, #8]
 800dbdc:	612b      	str	r3, [r5, #16]
 800dbde:	6013      	str	r3, [r2, #0]
 800dbe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbe2:	601d      	str	r5, [r3, #0]
 800dbe4:	e739      	b.n	800da5a <__gethex+0x112>
 800dbe6:	9900      	ldr	r1, [sp, #0]
 800dbe8:	0028      	movs	r0, r5
 800dbea:	3901      	subs	r1, #1
 800dbec:	f000 fdf8 	bl	800e7e0 <__any_on>
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	d1ec      	bne.n	800dbce <__gethex+0x286>
 800dbf4:	0029      	movs	r1, r5
 800dbf6:	9803      	ldr	r0, [sp, #12]
 800dbf8:	f000 f9d2 	bl	800dfa0 <_Bfree>
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc00:	2650      	movs	r6, #80	; 0x50
 800dc02:	6013      	str	r3, [r2, #0]
 800dc04:	e729      	b.n	800da5a <__gethex+0x112>
 800dc06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d1f3      	bne.n	800dbf4 <__gethex+0x2ac>
 800dc0c:	e7df      	b.n	800dbce <__gethex+0x286>
 800dc0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d1dc      	bne.n	800dbce <__gethex+0x286>
 800dc14:	e7ee      	b.n	800dbf4 <__gethex+0x2ac>
 800dc16:	46c0      	nop			; (mov r8, r8)
 800dc18:	08015ae0 	.word	0x08015ae0
 800dc1c:	08015c41 	.word	0x08015c41
 800dc20:	08015c52 	.word	0x08015c52
 800dc24:	1e77      	subs	r7, r6, #1
 800dc26:	2c00      	cmp	r4, #0
 800dc28:	d12f      	bne.n	800dc8a <__gethex+0x342>
 800dc2a:	2f00      	cmp	r7, #0
 800dc2c:	d004      	beq.n	800dc38 <__gethex+0x2f0>
 800dc2e:	0039      	movs	r1, r7
 800dc30:	0028      	movs	r0, r5
 800dc32:	f000 fdd5 	bl	800e7e0 <__any_on>
 800dc36:	0004      	movs	r4, r0
 800dc38:	231f      	movs	r3, #31
 800dc3a:	117a      	asrs	r2, r7, #5
 800dc3c:	401f      	ands	r7, r3
 800dc3e:	3b1e      	subs	r3, #30
 800dc40:	40bb      	lsls	r3, r7
 800dc42:	9902      	ldr	r1, [sp, #8]
 800dc44:	0092      	lsls	r2, r2, #2
 800dc46:	5852      	ldr	r2, [r2, r1]
 800dc48:	421a      	tst	r2, r3
 800dc4a:	d001      	beq.n	800dc50 <__gethex+0x308>
 800dc4c:	2302      	movs	r3, #2
 800dc4e:	431c      	orrs	r4, r3
 800dc50:	9b00      	ldr	r3, [sp, #0]
 800dc52:	0031      	movs	r1, r6
 800dc54:	1b9b      	subs	r3, r3, r6
 800dc56:	2602      	movs	r6, #2
 800dc58:	0028      	movs	r0, r5
 800dc5a:	9300      	str	r3, [sp, #0]
 800dc5c:	f7ff fe0a 	bl	800d874 <rshift>
 800dc60:	9b01      	ldr	r3, [sp, #4]
 800dc62:	685f      	ldr	r7, [r3, #4]
 800dc64:	2c00      	cmp	r4, #0
 800dc66:	d041      	beq.n	800dcec <__gethex+0x3a4>
 800dc68:	9b01      	ldr	r3, [sp, #4]
 800dc6a:	68db      	ldr	r3, [r3, #12]
 800dc6c:	2b02      	cmp	r3, #2
 800dc6e:	d010      	beq.n	800dc92 <__gethex+0x34a>
 800dc70:	2b03      	cmp	r3, #3
 800dc72:	d012      	beq.n	800dc9a <__gethex+0x352>
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d106      	bne.n	800dc86 <__gethex+0x33e>
 800dc78:	07a2      	lsls	r2, r4, #30
 800dc7a:	d504      	bpl.n	800dc86 <__gethex+0x33e>
 800dc7c:	9a02      	ldr	r2, [sp, #8]
 800dc7e:	6812      	ldr	r2, [r2, #0]
 800dc80:	4314      	orrs	r4, r2
 800dc82:	421c      	tst	r4, r3
 800dc84:	d10c      	bne.n	800dca0 <__gethex+0x358>
 800dc86:	2310      	movs	r3, #16
 800dc88:	e02f      	b.n	800dcea <__gethex+0x3a2>
 800dc8a:	2401      	movs	r4, #1
 800dc8c:	e7d4      	b.n	800dc38 <__gethex+0x2f0>
 800dc8e:	2601      	movs	r6, #1
 800dc90:	e7e8      	b.n	800dc64 <__gethex+0x31c>
 800dc92:	2301      	movs	r3, #1
 800dc94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dc96:	1a9b      	subs	r3, r3, r2
 800dc98:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d0f2      	beq.n	800dc86 <__gethex+0x33e>
 800dca0:	692b      	ldr	r3, [r5, #16]
 800dca2:	2000      	movs	r0, #0
 800dca4:	9302      	str	r3, [sp, #8]
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	9304      	str	r3, [sp, #16]
 800dcaa:	002b      	movs	r3, r5
 800dcac:	9a04      	ldr	r2, [sp, #16]
 800dcae:	3314      	adds	r3, #20
 800dcb0:	1899      	adds	r1, r3, r2
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	1c54      	adds	r4, r2, #1
 800dcb6:	d01e      	beq.n	800dcf6 <__gethex+0x3ae>
 800dcb8:	3201      	adds	r2, #1
 800dcba:	601a      	str	r2, [r3, #0]
 800dcbc:	002b      	movs	r3, r5
 800dcbe:	3314      	adds	r3, #20
 800dcc0:	2e02      	cmp	r6, #2
 800dcc2:	d141      	bne.n	800dd48 <__gethex+0x400>
 800dcc4:	9a01      	ldr	r2, [sp, #4]
 800dcc6:	9900      	ldr	r1, [sp, #0]
 800dcc8:	6812      	ldr	r2, [r2, #0]
 800dcca:	3a01      	subs	r2, #1
 800dccc:	428a      	cmp	r2, r1
 800dcce:	d10b      	bne.n	800dce8 <__gethex+0x3a0>
 800dcd0:	221f      	movs	r2, #31
 800dcd2:	9800      	ldr	r0, [sp, #0]
 800dcd4:	1149      	asrs	r1, r1, #5
 800dcd6:	4002      	ands	r2, r0
 800dcd8:	2001      	movs	r0, #1
 800dcda:	0004      	movs	r4, r0
 800dcdc:	4094      	lsls	r4, r2
 800dcde:	0089      	lsls	r1, r1, #2
 800dce0:	58cb      	ldr	r3, [r1, r3]
 800dce2:	4223      	tst	r3, r4
 800dce4:	d000      	beq.n	800dce8 <__gethex+0x3a0>
 800dce6:	2601      	movs	r6, #1
 800dce8:	2320      	movs	r3, #32
 800dcea:	431e      	orrs	r6, r3
 800dcec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcee:	601d      	str	r5, [r3, #0]
 800dcf0:	9b07      	ldr	r3, [sp, #28]
 800dcf2:	601f      	str	r7, [r3, #0]
 800dcf4:	e6b1      	b.n	800da5a <__gethex+0x112>
 800dcf6:	c301      	stmia	r3!, {r0}
 800dcf8:	4299      	cmp	r1, r3
 800dcfa:	d8da      	bhi.n	800dcb2 <__gethex+0x36a>
 800dcfc:	68ab      	ldr	r3, [r5, #8]
 800dcfe:	9a02      	ldr	r2, [sp, #8]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	db18      	blt.n	800dd36 <__gethex+0x3ee>
 800dd04:	6869      	ldr	r1, [r5, #4]
 800dd06:	9803      	ldr	r0, [sp, #12]
 800dd08:	3101      	adds	r1, #1
 800dd0a:	f000 f921 	bl	800df50 <_Balloc>
 800dd0e:	1e04      	subs	r4, r0, #0
 800dd10:	d104      	bne.n	800dd1c <__gethex+0x3d4>
 800dd12:	0022      	movs	r2, r4
 800dd14:	2184      	movs	r1, #132	; 0x84
 800dd16:	4b1c      	ldr	r3, [pc, #112]	; (800dd88 <__gethex+0x440>)
 800dd18:	481c      	ldr	r0, [pc, #112]	; (800dd8c <__gethex+0x444>)
 800dd1a:	e6c2      	b.n	800daa2 <__gethex+0x15a>
 800dd1c:	0029      	movs	r1, r5
 800dd1e:	692a      	ldr	r2, [r5, #16]
 800dd20:	310c      	adds	r1, #12
 800dd22:	3202      	adds	r2, #2
 800dd24:	0092      	lsls	r2, r2, #2
 800dd26:	300c      	adds	r0, #12
 800dd28:	f7ff fc77 	bl	800d61a <memcpy>
 800dd2c:	0029      	movs	r1, r5
 800dd2e:	9803      	ldr	r0, [sp, #12]
 800dd30:	f000 f936 	bl	800dfa0 <_Bfree>
 800dd34:	0025      	movs	r5, r4
 800dd36:	692b      	ldr	r3, [r5, #16]
 800dd38:	1c5a      	adds	r2, r3, #1
 800dd3a:	612a      	str	r2, [r5, #16]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	3304      	adds	r3, #4
 800dd40:	009b      	lsls	r3, r3, #2
 800dd42:	18eb      	adds	r3, r5, r3
 800dd44:	605a      	str	r2, [r3, #4]
 800dd46:	e7b9      	b.n	800dcbc <__gethex+0x374>
 800dd48:	692a      	ldr	r2, [r5, #16]
 800dd4a:	9902      	ldr	r1, [sp, #8]
 800dd4c:	428a      	cmp	r2, r1
 800dd4e:	dd09      	ble.n	800dd64 <__gethex+0x41c>
 800dd50:	2101      	movs	r1, #1
 800dd52:	0028      	movs	r0, r5
 800dd54:	f7ff fd8e 	bl	800d874 <rshift>
 800dd58:	9b01      	ldr	r3, [sp, #4]
 800dd5a:	3701      	adds	r7, #1
 800dd5c:	689b      	ldr	r3, [r3, #8]
 800dd5e:	42bb      	cmp	r3, r7
 800dd60:	dac1      	bge.n	800dce6 <__gethex+0x39e>
 800dd62:	e6e4      	b.n	800db2e <__gethex+0x1e6>
 800dd64:	221f      	movs	r2, #31
 800dd66:	9c00      	ldr	r4, [sp, #0]
 800dd68:	9900      	ldr	r1, [sp, #0]
 800dd6a:	2601      	movs	r6, #1
 800dd6c:	4014      	ands	r4, r2
 800dd6e:	4211      	tst	r1, r2
 800dd70:	d0ba      	beq.n	800dce8 <__gethex+0x3a0>
 800dd72:	9a04      	ldr	r2, [sp, #16]
 800dd74:	189b      	adds	r3, r3, r2
 800dd76:	3b04      	subs	r3, #4
 800dd78:	6818      	ldr	r0, [r3, #0]
 800dd7a:	f000 f9ab 	bl	800e0d4 <__hi0bits>
 800dd7e:	2320      	movs	r3, #32
 800dd80:	1b1b      	subs	r3, r3, r4
 800dd82:	4298      	cmp	r0, r3
 800dd84:	dbe4      	blt.n	800dd50 <__gethex+0x408>
 800dd86:	e7af      	b.n	800dce8 <__gethex+0x3a0>
 800dd88:	08015c41 	.word	0x08015c41
 800dd8c:	08015c52 	.word	0x08015c52

0800dd90 <L_shift>:
 800dd90:	2308      	movs	r3, #8
 800dd92:	b570      	push	{r4, r5, r6, lr}
 800dd94:	2520      	movs	r5, #32
 800dd96:	1a9a      	subs	r2, r3, r2
 800dd98:	0092      	lsls	r2, r2, #2
 800dd9a:	1aad      	subs	r5, r5, r2
 800dd9c:	6843      	ldr	r3, [r0, #4]
 800dd9e:	6804      	ldr	r4, [r0, #0]
 800dda0:	001e      	movs	r6, r3
 800dda2:	40ae      	lsls	r6, r5
 800dda4:	40d3      	lsrs	r3, r2
 800dda6:	4334      	orrs	r4, r6
 800dda8:	6004      	str	r4, [r0, #0]
 800ddaa:	6043      	str	r3, [r0, #4]
 800ddac:	3004      	adds	r0, #4
 800ddae:	4288      	cmp	r0, r1
 800ddb0:	d3f4      	bcc.n	800dd9c <L_shift+0xc>
 800ddb2:	bd70      	pop	{r4, r5, r6, pc}

0800ddb4 <__match>:
 800ddb4:	b530      	push	{r4, r5, lr}
 800ddb6:	6803      	ldr	r3, [r0, #0]
 800ddb8:	780c      	ldrb	r4, [r1, #0]
 800ddba:	3301      	adds	r3, #1
 800ddbc:	2c00      	cmp	r4, #0
 800ddbe:	d102      	bne.n	800ddc6 <__match+0x12>
 800ddc0:	6003      	str	r3, [r0, #0]
 800ddc2:	2001      	movs	r0, #1
 800ddc4:	bd30      	pop	{r4, r5, pc}
 800ddc6:	781a      	ldrb	r2, [r3, #0]
 800ddc8:	0015      	movs	r5, r2
 800ddca:	3d41      	subs	r5, #65	; 0x41
 800ddcc:	2d19      	cmp	r5, #25
 800ddce:	d800      	bhi.n	800ddd2 <__match+0x1e>
 800ddd0:	3220      	adds	r2, #32
 800ddd2:	3101      	adds	r1, #1
 800ddd4:	42a2      	cmp	r2, r4
 800ddd6:	d0ef      	beq.n	800ddb8 <__match+0x4>
 800ddd8:	2000      	movs	r0, #0
 800ddda:	e7f3      	b.n	800ddc4 <__match+0x10>

0800dddc <__hexnan>:
 800dddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddde:	680b      	ldr	r3, [r1, #0]
 800dde0:	b08b      	sub	sp, #44	; 0x2c
 800dde2:	9201      	str	r2, [sp, #4]
 800dde4:	9901      	ldr	r1, [sp, #4]
 800dde6:	115a      	asrs	r2, r3, #5
 800dde8:	0092      	lsls	r2, r2, #2
 800ddea:	188a      	adds	r2, r1, r2
 800ddec:	9202      	str	r2, [sp, #8]
 800ddee:	0019      	movs	r1, r3
 800ddf0:	221f      	movs	r2, #31
 800ddf2:	4011      	ands	r1, r2
 800ddf4:	9008      	str	r0, [sp, #32]
 800ddf6:	9106      	str	r1, [sp, #24]
 800ddf8:	4213      	tst	r3, r2
 800ddfa:	d002      	beq.n	800de02 <__hexnan+0x26>
 800ddfc:	9b02      	ldr	r3, [sp, #8]
 800ddfe:	3304      	adds	r3, #4
 800de00:	9302      	str	r3, [sp, #8]
 800de02:	9b02      	ldr	r3, [sp, #8]
 800de04:	2500      	movs	r5, #0
 800de06:	1f1f      	subs	r7, r3, #4
 800de08:	003e      	movs	r6, r7
 800de0a:	003c      	movs	r4, r7
 800de0c:	9b08      	ldr	r3, [sp, #32]
 800de0e:	603d      	str	r5, [r7, #0]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	9507      	str	r5, [sp, #28]
 800de14:	9305      	str	r3, [sp, #20]
 800de16:	9503      	str	r5, [sp, #12]
 800de18:	9b05      	ldr	r3, [sp, #20]
 800de1a:	3301      	adds	r3, #1
 800de1c:	9309      	str	r3, [sp, #36]	; 0x24
 800de1e:	9b05      	ldr	r3, [sp, #20]
 800de20:	785b      	ldrb	r3, [r3, #1]
 800de22:	9304      	str	r3, [sp, #16]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d028      	beq.n	800de7a <__hexnan+0x9e>
 800de28:	9804      	ldr	r0, [sp, #16]
 800de2a:	f7ff fd78 	bl	800d91e <__hexdig_fun>
 800de2e:	2800      	cmp	r0, #0
 800de30:	d154      	bne.n	800dedc <__hexnan+0x100>
 800de32:	9b04      	ldr	r3, [sp, #16]
 800de34:	2b20      	cmp	r3, #32
 800de36:	d819      	bhi.n	800de6c <__hexnan+0x90>
 800de38:	9b03      	ldr	r3, [sp, #12]
 800de3a:	9a07      	ldr	r2, [sp, #28]
 800de3c:	4293      	cmp	r3, r2
 800de3e:	dd12      	ble.n	800de66 <__hexnan+0x8a>
 800de40:	42b4      	cmp	r4, r6
 800de42:	d206      	bcs.n	800de52 <__hexnan+0x76>
 800de44:	2d07      	cmp	r5, #7
 800de46:	dc04      	bgt.n	800de52 <__hexnan+0x76>
 800de48:	002a      	movs	r2, r5
 800de4a:	0031      	movs	r1, r6
 800de4c:	0020      	movs	r0, r4
 800de4e:	f7ff ff9f 	bl	800dd90 <L_shift>
 800de52:	9b01      	ldr	r3, [sp, #4]
 800de54:	2508      	movs	r5, #8
 800de56:	429c      	cmp	r4, r3
 800de58:	d905      	bls.n	800de66 <__hexnan+0x8a>
 800de5a:	1f26      	subs	r6, r4, #4
 800de5c:	2500      	movs	r5, #0
 800de5e:	0034      	movs	r4, r6
 800de60:	9b03      	ldr	r3, [sp, #12]
 800de62:	6035      	str	r5, [r6, #0]
 800de64:	9307      	str	r3, [sp, #28]
 800de66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de68:	9305      	str	r3, [sp, #20]
 800de6a:	e7d5      	b.n	800de18 <__hexnan+0x3c>
 800de6c:	9b04      	ldr	r3, [sp, #16]
 800de6e:	2b29      	cmp	r3, #41	; 0x29
 800de70:	d159      	bne.n	800df26 <__hexnan+0x14a>
 800de72:	9b05      	ldr	r3, [sp, #20]
 800de74:	9a08      	ldr	r2, [sp, #32]
 800de76:	3302      	adds	r3, #2
 800de78:	6013      	str	r3, [r2, #0]
 800de7a:	9b03      	ldr	r3, [sp, #12]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d052      	beq.n	800df26 <__hexnan+0x14a>
 800de80:	42b4      	cmp	r4, r6
 800de82:	d206      	bcs.n	800de92 <__hexnan+0xb6>
 800de84:	2d07      	cmp	r5, #7
 800de86:	dc04      	bgt.n	800de92 <__hexnan+0xb6>
 800de88:	002a      	movs	r2, r5
 800de8a:	0031      	movs	r1, r6
 800de8c:	0020      	movs	r0, r4
 800de8e:	f7ff ff7f 	bl	800dd90 <L_shift>
 800de92:	9b01      	ldr	r3, [sp, #4]
 800de94:	429c      	cmp	r4, r3
 800de96:	d935      	bls.n	800df04 <__hexnan+0x128>
 800de98:	001a      	movs	r2, r3
 800de9a:	0023      	movs	r3, r4
 800de9c:	cb02      	ldmia	r3!, {r1}
 800de9e:	c202      	stmia	r2!, {r1}
 800dea0:	429f      	cmp	r7, r3
 800dea2:	d2fb      	bcs.n	800de9c <__hexnan+0xc0>
 800dea4:	9b02      	ldr	r3, [sp, #8]
 800dea6:	1c62      	adds	r2, r4, #1
 800dea8:	1ed9      	subs	r1, r3, #3
 800deaa:	2304      	movs	r3, #4
 800deac:	4291      	cmp	r1, r2
 800deae:	d305      	bcc.n	800debc <__hexnan+0xe0>
 800deb0:	9b02      	ldr	r3, [sp, #8]
 800deb2:	3b04      	subs	r3, #4
 800deb4:	1b1b      	subs	r3, r3, r4
 800deb6:	089b      	lsrs	r3, r3, #2
 800deb8:	3301      	adds	r3, #1
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	9a01      	ldr	r2, [sp, #4]
 800debe:	18d3      	adds	r3, r2, r3
 800dec0:	2200      	movs	r2, #0
 800dec2:	c304      	stmia	r3!, {r2}
 800dec4:	429f      	cmp	r7, r3
 800dec6:	d2fc      	bcs.n	800dec2 <__hexnan+0xe6>
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d104      	bne.n	800ded8 <__hexnan+0xfc>
 800dece:	9b01      	ldr	r3, [sp, #4]
 800ded0:	429f      	cmp	r7, r3
 800ded2:	d126      	bne.n	800df22 <__hexnan+0x146>
 800ded4:	2301      	movs	r3, #1
 800ded6:	603b      	str	r3, [r7, #0]
 800ded8:	2005      	movs	r0, #5
 800deda:	e025      	b.n	800df28 <__hexnan+0x14c>
 800dedc:	9b03      	ldr	r3, [sp, #12]
 800dede:	3501      	adds	r5, #1
 800dee0:	3301      	adds	r3, #1
 800dee2:	9303      	str	r3, [sp, #12]
 800dee4:	2d08      	cmp	r5, #8
 800dee6:	dd06      	ble.n	800def6 <__hexnan+0x11a>
 800dee8:	9b01      	ldr	r3, [sp, #4]
 800deea:	429c      	cmp	r4, r3
 800deec:	d9bb      	bls.n	800de66 <__hexnan+0x8a>
 800deee:	2300      	movs	r3, #0
 800def0:	2501      	movs	r5, #1
 800def2:	3c04      	subs	r4, #4
 800def4:	6023      	str	r3, [r4, #0]
 800def6:	220f      	movs	r2, #15
 800def8:	6823      	ldr	r3, [r4, #0]
 800defa:	4010      	ands	r0, r2
 800defc:	011b      	lsls	r3, r3, #4
 800defe:	4303      	orrs	r3, r0
 800df00:	6023      	str	r3, [r4, #0]
 800df02:	e7b0      	b.n	800de66 <__hexnan+0x8a>
 800df04:	9b06      	ldr	r3, [sp, #24]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d0de      	beq.n	800dec8 <__hexnan+0xec>
 800df0a:	2320      	movs	r3, #32
 800df0c:	9a06      	ldr	r2, [sp, #24]
 800df0e:	9902      	ldr	r1, [sp, #8]
 800df10:	1a9b      	subs	r3, r3, r2
 800df12:	2201      	movs	r2, #1
 800df14:	4252      	negs	r2, r2
 800df16:	40da      	lsrs	r2, r3
 800df18:	3904      	subs	r1, #4
 800df1a:	680b      	ldr	r3, [r1, #0]
 800df1c:	4013      	ands	r3, r2
 800df1e:	600b      	str	r3, [r1, #0]
 800df20:	e7d2      	b.n	800dec8 <__hexnan+0xec>
 800df22:	3f04      	subs	r7, #4
 800df24:	e7d0      	b.n	800dec8 <__hexnan+0xec>
 800df26:	2004      	movs	r0, #4
 800df28:	b00b      	add	sp, #44	; 0x2c
 800df2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800df2c <__ascii_mbtowc>:
 800df2c:	b082      	sub	sp, #8
 800df2e:	2900      	cmp	r1, #0
 800df30:	d100      	bne.n	800df34 <__ascii_mbtowc+0x8>
 800df32:	a901      	add	r1, sp, #4
 800df34:	1e10      	subs	r0, r2, #0
 800df36:	d006      	beq.n	800df46 <__ascii_mbtowc+0x1a>
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d006      	beq.n	800df4a <__ascii_mbtowc+0x1e>
 800df3c:	7813      	ldrb	r3, [r2, #0]
 800df3e:	600b      	str	r3, [r1, #0]
 800df40:	7810      	ldrb	r0, [r2, #0]
 800df42:	1e43      	subs	r3, r0, #1
 800df44:	4198      	sbcs	r0, r3
 800df46:	b002      	add	sp, #8
 800df48:	4770      	bx	lr
 800df4a:	2002      	movs	r0, #2
 800df4c:	4240      	negs	r0, r0
 800df4e:	e7fa      	b.n	800df46 <__ascii_mbtowc+0x1a>

0800df50 <_Balloc>:
 800df50:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800df52:	b570      	push	{r4, r5, r6, lr}
 800df54:	0006      	movs	r6, r0
 800df56:	000c      	movs	r4, r1
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d012      	beq.n	800df82 <_Balloc+0x32>
 800df5c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800df5e:	00a2      	lsls	r2, r4, #2
 800df60:	189b      	adds	r3, r3, r2
 800df62:	6818      	ldr	r0, [r3, #0]
 800df64:	2800      	cmp	r0, #0
 800df66:	d115      	bne.n	800df94 <_Balloc+0x44>
 800df68:	2101      	movs	r1, #1
 800df6a:	000d      	movs	r5, r1
 800df6c:	40a5      	lsls	r5, r4
 800df6e:	1d6a      	adds	r2, r5, #5
 800df70:	0030      	movs	r0, r6
 800df72:	0092      	lsls	r2, r2, #2
 800df74:	f003 face 	bl	8011514 <_calloc_r>
 800df78:	2800      	cmp	r0, #0
 800df7a:	d009      	beq.n	800df90 <_Balloc+0x40>
 800df7c:	6044      	str	r4, [r0, #4]
 800df7e:	6085      	str	r5, [r0, #8]
 800df80:	e00a      	b.n	800df98 <_Balloc+0x48>
 800df82:	2221      	movs	r2, #33	; 0x21
 800df84:	2104      	movs	r1, #4
 800df86:	f003 fac5 	bl	8011514 <_calloc_r>
 800df8a:	6470      	str	r0, [r6, #68]	; 0x44
 800df8c:	2800      	cmp	r0, #0
 800df8e:	d1e5      	bne.n	800df5c <_Balloc+0xc>
 800df90:	2000      	movs	r0, #0
 800df92:	bd70      	pop	{r4, r5, r6, pc}
 800df94:	6802      	ldr	r2, [r0, #0]
 800df96:	601a      	str	r2, [r3, #0]
 800df98:	2300      	movs	r3, #0
 800df9a:	6103      	str	r3, [r0, #16]
 800df9c:	60c3      	str	r3, [r0, #12]
 800df9e:	e7f8      	b.n	800df92 <_Balloc+0x42>

0800dfa0 <_Bfree>:
 800dfa0:	2900      	cmp	r1, #0
 800dfa2:	d006      	beq.n	800dfb2 <_Bfree+0x12>
 800dfa4:	684a      	ldr	r2, [r1, #4]
 800dfa6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800dfa8:	0092      	lsls	r2, r2, #2
 800dfaa:	189b      	adds	r3, r3, r2
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	600a      	str	r2, [r1, #0]
 800dfb0:	6019      	str	r1, [r3, #0]
 800dfb2:	4770      	bx	lr

0800dfb4 <__multadd>:
 800dfb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfb6:	000e      	movs	r6, r1
 800dfb8:	9001      	str	r0, [sp, #4]
 800dfba:	000c      	movs	r4, r1
 800dfbc:	001d      	movs	r5, r3
 800dfbe:	2000      	movs	r0, #0
 800dfc0:	690f      	ldr	r7, [r1, #16]
 800dfc2:	3614      	adds	r6, #20
 800dfc4:	6833      	ldr	r3, [r6, #0]
 800dfc6:	3001      	adds	r0, #1
 800dfc8:	b299      	uxth	r1, r3
 800dfca:	4351      	muls	r1, r2
 800dfcc:	0c1b      	lsrs	r3, r3, #16
 800dfce:	4353      	muls	r3, r2
 800dfd0:	1949      	adds	r1, r1, r5
 800dfd2:	0c0d      	lsrs	r5, r1, #16
 800dfd4:	195b      	adds	r3, r3, r5
 800dfd6:	0c1d      	lsrs	r5, r3, #16
 800dfd8:	b289      	uxth	r1, r1
 800dfda:	041b      	lsls	r3, r3, #16
 800dfdc:	185b      	adds	r3, r3, r1
 800dfde:	c608      	stmia	r6!, {r3}
 800dfe0:	4287      	cmp	r7, r0
 800dfe2:	dcef      	bgt.n	800dfc4 <__multadd+0x10>
 800dfe4:	2d00      	cmp	r5, #0
 800dfe6:	d022      	beq.n	800e02e <__multadd+0x7a>
 800dfe8:	68a3      	ldr	r3, [r4, #8]
 800dfea:	42bb      	cmp	r3, r7
 800dfec:	dc19      	bgt.n	800e022 <__multadd+0x6e>
 800dfee:	6861      	ldr	r1, [r4, #4]
 800dff0:	9801      	ldr	r0, [sp, #4]
 800dff2:	3101      	adds	r1, #1
 800dff4:	f7ff ffac 	bl	800df50 <_Balloc>
 800dff8:	1e06      	subs	r6, r0, #0
 800dffa:	d105      	bne.n	800e008 <__multadd+0x54>
 800dffc:	0032      	movs	r2, r6
 800dffe:	21ba      	movs	r1, #186	; 0xba
 800e000:	4b0c      	ldr	r3, [pc, #48]	; (800e034 <__multadd+0x80>)
 800e002:	480d      	ldr	r0, [pc, #52]	; (800e038 <__multadd+0x84>)
 800e004:	f003 fa68 	bl	80114d8 <__assert_func>
 800e008:	0021      	movs	r1, r4
 800e00a:	6922      	ldr	r2, [r4, #16]
 800e00c:	310c      	adds	r1, #12
 800e00e:	3202      	adds	r2, #2
 800e010:	0092      	lsls	r2, r2, #2
 800e012:	300c      	adds	r0, #12
 800e014:	f7ff fb01 	bl	800d61a <memcpy>
 800e018:	0021      	movs	r1, r4
 800e01a:	9801      	ldr	r0, [sp, #4]
 800e01c:	f7ff ffc0 	bl	800dfa0 <_Bfree>
 800e020:	0034      	movs	r4, r6
 800e022:	1d3b      	adds	r3, r7, #4
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	18e3      	adds	r3, r4, r3
 800e028:	605d      	str	r5, [r3, #4]
 800e02a:	1c7b      	adds	r3, r7, #1
 800e02c:	6123      	str	r3, [r4, #16]
 800e02e:	0020      	movs	r0, r4
 800e030:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e032:	46c0      	nop			; (mov r8, r8)
 800e034:	08015c41 	.word	0x08015c41
 800e038:	08015cb2 	.word	0x08015cb2

0800e03c <__s2b>:
 800e03c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e03e:	0006      	movs	r6, r0
 800e040:	0018      	movs	r0, r3
 800e042:	000c      	movs	r4, r1
 800e044:	3008      	adds	r0, #8
 800e046:	2109      	movs	r1, #9
 800e048:	9301      	str	r3, [sp, #4]
 800e04a:	0015      	movs	r5, r2
 800e04c:	f7f2 f900 	bl	8000250 <__divsi3>
 800e050:	2301      	movs	r3, #1
 800e052:	2100      	movs	r1, #0
 800e054:	4283      	cmp	r3, r0
 800e056:	db0a      	blt.n	800e06e <__s2b+0x32>
 800e058:	0030      	movs	r0, r6
 800e05a:	f7ff ff79 	bl	800df50 <_Balloc>
 800e05e:	1e01      	subs	r1, r0, #0
 800e060:	d108      	bne.n	800e074 <__s2b+0x38>
 800e062:	000a      	movs	r2, r1
 800e064:	4b19      	ldr	r3, [pc, #100]	; (800e0cc <__s2b+0x90>)
 800e066:	481a      	ldr	r0, [pc, #104]	; (800e0d0 <__s2b+0x94>)
 800e068:	31d3      	adds	r1, #211	; 0xd3
 800e06a:	f003 fa35 	bl	80114d8 <__assert_func>
 800e06e:	005b      	lsls	r3, r3, #1
 800e070:	3101      	adds	r1, #1
 800e072:	e7ef      	b.n	800e054 <__s2b+0x18>
 800e074:	9b08      	ldr	r3, [sp, #32]
 800e076:	6143      	str	r3, [r0, #20]
 800e078:	2301      	movs	r3, #1
 800e07a:	6103      	str	r3, [r0, #16]
 800e07c:	2d09      	cmp	r5, #9
 800e07e:	dd18      	ble.n	800e0b2 <__s2b+0x76>
 800e080:	0023      	movs	r3, r4
 800e082:	3309      	adds	r3, #9
 800e084:	001f      	movs	r7, r3
 800e086:	9300      	str	r3, [sp, #0]
 800e088:	1964      	adds	r4, r4, r5
 800e08a:	783b      	ldrb	r3, [r7, #0]
 800e08c:	220a      	movs	r2, #10
 800e08e:	0030      	movs	r0, r6
 800e090:	3b30      	subs	r3, #48	; 0x30
 800e092:	f7ff ff8f 	bl	800dfb4 <__multadd>
 800e096:	3701      	adds	r7, #1
 800e098:	0001      	movs	r1, r0
 800e09a:	42a7      	cmp	r7, r4
 800e09c:	d1f5      	bne.n	800e08a <__s2b+0x4e>
 800e09e:	002c      	movs	r4, r5
 800e0a0:	9b00      	ldr	r3, [sp, #0]
 800e0a2:	3c08      	subs	r4, #8
 800e0a4:	191c      	adds	r4, r3, r4
 800e0a6:	002f      	movs	r7, r5
 800e0a8:	9b01      	ldr	r3, [sp, #4]
 800e0aa:	429f      	cmp	r7, r3
 800e0ac:	db04      	blt.n	800e0b8 <__s2b+0x7c>
 800e0ae:	0008      	movs	r0, r1
 800e0b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e0b2:	2509      	movs	r5, #9
 800e0b4:	340a      	adds	r4, #10
 800e0b6:	e7f6      	b.n	800e0a6 <__s2b+0x6a>
 800e0b8:	1b63      	subs	r3, r4, r5
 800e0ba:	5ddb      	ldrb	r3, [r3, r7]
 800e0bc:	220a      	movs	r2, #10
 800e0be:	0030      	movs	r0, r6
 800e0c0:	3b30      	subs	r3, #48	; 0x30
 800e0c2:	f7ff ff77 	bl	800dfb4 <__multadd>
 800e0c6:	3701      	adds	r7, #1
 800e0c8:	0001      	movs	r1, r0
 800e0ca:	e7ed      	b.n	800e0a8 <__s2b+0x6c>
 800e0cc:	08015c41 	.word	0x08015c41
 800e0d0:	08015cb2 	.word	0x08015cb2

0800e0d4 <__hi0bits>:
 800e0d4:	0003      	movs	r3, r0
 800e0d6:	0c02      	lsrs	r2, r0, #16
 800e0d8:	2000      	movs	r0, #0
 800e0da:	4282      	cmp	r2, r0
 800e0dc:	d101      	bne.n	800e0e2 <__hi0bits+0xe>
 800e0de:	041b      	lsls	r3, r3, #16
 800e0e0:	3010      	adds	r0, #16
 800e0e2:	0e1a      	lsrs	r2, r3, #24
 800e0e4:	d101      	bne.n	800e0ea <__hi0bits+0x16>
 800e0e6:	3008      	adds	r0, #8
 800e0e8:	021b      	lsls	r3, r3, #8
 800e0ea:	0f1a      	lsrs	r2, r3, #28
 800e0ec:	d101      	bne.n	800e0f2 <__hi0bits+0x1e>
 800e0ee:	3004      	adds	r0, #4
 800e0f0:	011b      	lsls	r3, r3, #4
 800e0f2:	0f9a      	lsrs	r2, r3, #30
 800e0f4:	d101      	bne.n	800e0fa <__hi0bits+0x26>
 800e0f6:	3002      	adds	r0, #2
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	db03      	blt.n	800e106 <__hi0bits+0x32>
 800e0fe:	3001      	adds	r0, #1
 800e100:	005b      	lsls	r3, r3, #1
 800e102:	d400      	bmi.n	800e106 <__hi0bits+0x32>
 800e104:	2020      	movs	r0, #32
 800e106:	4770      	bx	lr

0800e108 <__lo0bits>:
 800e108:	6803      	ldr	r3, [r0, #0]
 800e10a:	0001      	movs	r1, r0
 800e10c:	2207      	movs	r2, #7
 800e10e:	0018      	movs	r0, r3
 800e110:	4010      	ands	r0, r2
 800e112:	4213      	tst	r3, r2
 800e114:	d00d      	beq.n	800e132 <__lo0bits+0x2a>
 800e116:	3a06      	subs	r2, #6
 800e118:	2000      	movs	r0, #0
 800e11a:	4213      	tst	r3, r2
 800e11c:	d105      	bne.n	800e12a <__lo0bits+0x22>
 800e11e:	3002      	adds	r0, #2
 800e120:	4203      	tst	r3, r0
 800e122:	d003      	beq.n	800e12c <__lo0bits+0x24>
 800e124:	40d3      	lsrs	r3, r2
 800e126:	0010      	movs	r0, r2
 800e128:	600b      	str	r3, [r1, #0]
 800e12a:	4770      	bx	lr
 800e12c:	089b      	lsrs	r3, r3, #2
 800e12e:	600b      	str	r3, [r1, #0]
 800e130:	e7fb      	b.n	800e12a <__lo0bits+0x22>
 800e132:	b29a      	uxth	r2, r3
 800e134:	2a00      	cmp	r2, #0
 800e136:	d101      	bne.n	800e13c <__lo0bits+0x34>
 800e138:	2010      	movs	r0, #16
 800e13a:	0c1b      	lsrs	r3, r3, #16
 800e13c:	b2da      	uxtb	r2, r3
 800e13e:	2a00      	cmp	r2, #0
 800e140:	d101      	bne.n	800e146 <__lo0bits+0x3e>
 800e142:	3008      	adds	r0, #8
 800e144:	0a1b      	lsrs	r3, r3, #8
 800e146:	071a      	lsls	r2, r3, #28
 800e148:	d101      	bne.n	800e14e <__lo0bits+0x46>
 800e14a:	3004      	adds	r0, #4
 800e14c:	091b      	lsrs	r3, r3, #4
 800e14e:	079a      	lsls	r2, r3, #30
 800e150:	d101      	bne.n	800e156 <__lo0bits+0x4e>
 800e152:	3002      	adds	r0, #2
 800e154:	089b      	lsrs	r3, r3, #2
 800e156:	07da      	lsls	r2, r3, #31
 800e158:	d4e9      	bmi.n	800e12e <__lo0bits+0x26>
 800e15a:	3001      	adds	r0, #1
 800e15c:	085b      	lsrs	r3, r3, #1
 800e15e:	d1e6      	bne.n	800e12e <__lo0bits+0x26>
 800e160:	2020      	movs	r0, #32
 800e162:	e7e2      	b.n	800e12a <__lo0bits+0x22>

0800e164 <__i2b>:
 800e164:	b510      	push	{r4, lr}
 800e166:	000c      	movs	r4, r1
 800e168:	2101      	movs	r1, #1
 800e16a:	f7ff fef1 	bl	800df50 <_Balloc>
 800e16e:	2800      	cmp	r0, #0
 800e170:	d107      	bne.n	800e182 <__i2b+0x1e>
 800e172:	2146      	movs	r1, #70	; 0x46
 800e174:	4c05      	ldr	r4, [pc, #20]	; (800e18c <__i2b+0x28>)
 800e176:	0002      	movs	r2, r0
 800e178:	4b05      	ldr	r3, [pc, #20]	; (800e190 <__i2b+0x2c>)
 800e17a:	0020      	movs	r0, r4
 800e17c:	31ff      	adds	r1, #255	; 0xff
 800e17e:	f003 f9ab 	bl	80114d8 <__assert_func>
 800e182:	2301      	movs	r3, #1
 800e184:	6144      	str	r4, [r0, #20]
 800e186:	6103      	str	r3, [r0, #16]
 800e188:	bd10      	pop	{r4, pc}
 800e18a:	46c0      	nop			; (mov r8, r8)
 800e18c:	08015cb2 	.word	0x08015cb2
 800e190:	08015c41 	.word	0x08015c41

0800e194 <__multiply>:
 800e194:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e196:	0015      	movs	r5, r2
 800e198:	690a      	ldr	r2, [r1, #16]
 800e19a:	692b      	ldr	r3, [r5, #16]
 800e19c:	000c      	movs	r4, r1
 800e19e:	b08b      	sub	sp, #44	; 0x2c
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	da01      	bge.n	800e1a8 <__multiply+0x14>
 800e1a4:	002c      	movs	r4, r5
 800e1a6:	000d      	movs	r5, r1
 800e1a8:	6927      	ldr	r7, [r4, #16]
 800e1aa:	692e      	ldr	r6, [r5, #16]
 800e1ac:	6861      	ldr	r1, [r4, #4]
 800e1ae:	19bb      	adds	r3, r7, r6
 800e1b0:	9303      	str	r3, [sp, #12]
 800e1b2:	68a3      	ldr	r3, [r4, #8]
 800e1b4:	19ba      	adds	r2, r7, r6
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	da00      	bge.n	800e1bc <__multiply+0x28>
 800e1ba:	3101      	adds	r1, #1
 800e1bc:	f7ff fec8 	bl	800df50 <_Balloc>
 800e1c0:	9002      	str	r0, [sp, #8]
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	d106      	bne.n	800e1d4 <__multiply+0x40>
 800e1c6:	21b1      	movs	r1, #177	; 0xb1
 800e1c8:	4b48      	ldr	r3, [pc, #288]	; (800e2ec <__multiply+0x158>)
 800e1ca:	4849      	ldr	r0, [pc, #292]	; (800e2f0 <__multiply+0x15c>)
 800e1cc:	9a02      	ldr	r2, [sp, #8]
 800e1ce:	0049      	lsls	r1, r1, #1
 800e1d0:	f003 f982 	bl	80114d8 <__assert_func>
 800e1d4:	9b02      	ldr	r3, [sp, #8]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	3314      	adds	r3, #20
 800e1da:	469c      	mov	ip, r3
 800e1dc:	19bb      	adds	r3, r7, r6
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	4463      	add	r3, ip
 800e1e2:	9304      	str	r3, [sp, #16]
 800e1e4:	4663      	mov	r3, ip
 800e1e6:	9904      	ldr	r1, [sp, #16]
 800e1e8:	428b      	cmp	r3, r1
 800e1ea:	d32a      	bcc.n	800e242 <__multiply+0xae>
 800e1ec:	0023      	movs	r3, r4
 800e1ee:	00bf      	lsls	r7, r7, #2
 800e1f0:	3314      	adds	r3, #20
 800e1f2:	3514      	adds	r5, #20
 800e1f4:	9308      	str	r3, [sp, #32]
 800e1f6:	00b6      	lsls	r6, r6, #2
 800e1f8:	19db      	adds	r3, r3, r7
 800e1fa:	9305      	str	r3, [sp, #20]
 800e1fc:	19ab      	adds	r3, r5, r6
 800e1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800e200:	2304      	movs	r3, #4
 800e202:	9306      	str	r3, [sp, #24]
 800e204:	0023      	movs	r3, r4
 800e206:	9a05      	ldr	r2, [sp, #20]
 800e208:	3315      	adds	r3, #21
 800e20a:	9501      	str	r5, [sp, #4]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d305      	bcc.n	800e21c <__multiply+0x88>
 800e210:	1b13      	subs	r3, r2, r4
 800e212:	3b15      	subs	r3, #21
 800e214:	089b      	lsrs	r3, r3, #2
 800e216:	3301      	adds	r3, #1
 800e218:	009b      	lsls	r3, r3, #2
 800e21a:	9306      	str	r3, [sp, #24]
 800e21c:	9b01      	ldr	r3, [sp, #4]
 800e21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e220:	4293      	cmp	r3, r2
 800e222:	d310      	bcc.n	800e246 <__multiply+0xb2>
 800e224:	9b03      	ldr	r3, [sp, #12]
 800e226:	2b00      	cmp	r3, #0
 800e228:	dd05      	ble.n	800e236 <__multiply+0xa2>
 800e22a:	9b04      	ldr	r3, [sp, #16]
 800e22c:	3b04      	subs	r3, #4
 800e22e:	9304      	str	r3, [sp, #16]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d056      	beq.n	800e2e4 <__multiply+0x150>
 800e236:	9b02      	ldr	r3, [sp, #8]
 800e238:	9a03      	ldr	r2, [sp, #12]
 800e23a:	0018      	movs	r0, r3
 800e23c:	611a      	str	r2, [r3, #16]
 800e23e:	b00b      	add	sp, #44	; 0x2c
 800e240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e242:	c304      	stmia	r3!, {r2}
 800e244:	e7cf      	b.n	800e1e6 <__multiply+0x52>
 800e246:	9b01      	ldr	r3, [sp, #4]
 800e248:	6818      	ldr	r0, [r3, #0]
 800e24a:	b280      	uxth	r0, r0
 800e24c:	2800      	cmp	r0, #0
 800e24e:	d01e      	beq.n	800e28e <__multiply+0xfa>
 800e250:	4667      	mov	r7, ip
 800e252:	2500      	movs	r5, #0
 800e254:	9e08      	ldr	r6, [sp, #32]
 800e256:	ce02      	ldmia	r6!, {r1}
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	9307      	str	r3, [sp, #28]
 800e25c:	b28b      	uxth	r3, r1
 800e25e:	4343      	muls	r3, r0
 800e260:	001a      	movs	r2, r3
 800e262:	466b      	mov	r3, sp
 800e264:	8b9b      	ldrh	r3, [r3, #28]
 800e266:	18d3      	adds	r3, r2, r3
 800e268:	195b      	adds	r3, r3, r5
 800e26a:	0c0d      	lsrs	r5, r1, #16
 800e26c:	4345      	muls	r5, r0
 800e26e:	9a07      	ldr	r2, [sp, #28]
 800e270:	0c11      	lsrs	r1, r2, #16
 800e272:	1869      	adds	r1, r5, r1
 800e274:	0c1a      	lsrs	r2, r3, #16
 800e276:	188a      	adds	r2, r1, r2
 800e278:	b29b      	uxth	r3, r3
 800e27a:	0c15      	lsrs	r5, r2, #16
 800e27c:	0412      	lsls	r2, r2, #16
 800e27e:	431a      	orrs	r2, r3
 800e280:	9b05      	ldr	r3, [sp, #20]
 800e282:	c704      	stmia	r7!, {r2}
 800e284:	42b3      	cmp	r3, r6
 800e286:	d8e6      	bhi.n	800e256 <__multiply+0xc2>
 800e288:	4663      	mov	r3, ip
 800e28a:	9a06      	ldr	r2, [sp, #24]
 800e28c:	509d      	str	r5, [r3, r2]
 800e28e:	9b01      	ldr	r3, [sp, #4]
 800e290:	6818      	ldr	r0, [r3, #0]
 800e292:	0c00      	lsrs	r0, r0, #16
 800e294:	d020      	beq.n	800e2d8 <__multiply+0x144>
 800e296:	4663      	mov	r3, ip
 800e298:	0025      	movs	r5, r4
 800e29a:	4661      	mov	r1, ip
 800e29c:	2700      	movs	r7, #0
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	3514      	adds	r5, #20
 800e2a2:	682a      	ldr	r2, [r5, #0]
 800e2a4:	680e      	ldr	r6, [r1, #0]
 800e2a6:	b292      	uxth	r2, r2
 800e2a8:	4342      	muls	r2, r0
 800e2aa:	0c36      	lsrs	r6, r6, #16
 800e2ac:	1992      	adds	r2, r2, r6
 800e2ae:	19d2      	adds	r2, r2, r7
 800e2b0:	0416      	lsls	r6, r2, #16
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	431e      	orrs	r6, r3
 800e2b6:	600e      	str	r6, [r1, #0]
 800e2b8:	cd40      	ldmia	r5!, {r6}
 800e2ba:	684b      	ldr	r3, [r1, #4]
 800e2bc:	0c36      	lsrs	r6, r6, #16
 800e2be:	4346      	muls	r6, r0
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	0c12      	lsrs	r2, r2, #16
 800e2c4:	18f3      	adds	r3, r6, r3
 800e2c6:	189b      	adds	r3, r3, r2
 800e2c8:	9a05      	ldr	r2, [sp, #20]
 800e2ca:	0c1f      	lsrs	r7, r3, #16
 800e2cc:	3104      	adds	r1, #4
 800e2ce:	42aa      	cmp	r2, r5
 800e2d0:	d8e7      	bhi.n	800e2a2 <__multiply+0x10e>
 800e2d2:	4662      	mov	r2, ip
 800e2d4:	9906      	ldr	r1, [sp, #24]
 800e2d6:	5053      	str	r3, [r2, r1]
 800e2d8:	9b01      	ldr	r3, [sp, #4]
 800e2da:	3304      	adds	r3, #4
 800e2dc:	9301      	str	r3, [sp, #4]
 800e2de:	2304      	movs	r3, #4
 800e2e0:	449c      	add	ip, r3
 800e2e2:	e79b      	b.n	800e21c <__multiply+0x88>
 800e2e4:	9b03      	ldr	r3, [sp, #12]
 800e2e6:	3b01      	subs	r3, #1
 800e2e8:	9303      	str	r3, [sp, #12]
 800e2ea:	e79b      	b.n	800e224 <__multiply+0x90>
 800e2ec:	08015c41 	.word	0x08015c41
 800e2f0:	08015cb2 	.word	0x08015cb2

0800e2f4 <__pow5mult>:
 800e2f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2f6:	2303      	movs	r3, #3
 800e2f8:	0015      	movs	r5, r2
 800e2fa:	0007      	movs	r7, r0
 800e2fc:	000e      	movs	r6, r1
 800e2fe:	401a      	ands	r2, r3
 800e300:	421d      	tst	r5, r3
 800e302:	d008      	beq.n	800e316 <__pow5mult+0x22>
 800e304:	491a      	ldr	r1, [pc, #104]	; (800e370 <__pow5mult+0x7c>)
 800e306:	3a01      	subs	r2, #1
 800e308:	0092      	lsls	r2, r2, #2
 800e30a:	5852      	ldr	r2, [r2, r1]
 800e30c:	2300      	movs	r3, #0
 800e30e:	0031      	movs	r1, r6
 800e310:	f7ff fe50 	bl	800dfb4 <__multadd>
 800e314:	0006      	movs	r6, r0
 800e316:	10ad      	asrs	r5, r5, #2
 800e318:	d027      	beq.n	800e36a <__pow5mult+0x76>
 800e31a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800e31c:	2c00      	cmp	r4, #0
 800e31e:	d107      	bne.n	800e330 <__pow5mult+0x3c>
 800e320:	0038      	movs	r0, r7
 800e322:	4914      	ldr	r1, [pc, #80]	; (800e374 <__pow5mult+0x80>)
 800e324:	f7ff ff1e 	bl	800e164 <__i2b>
 800e328:	2300      	movs	r3, #0
 800e32a:	0004      	movs	r4, r0
 800e32c:	6438      	str	r0, [r7, #64]	; 0x40
 800e32e:	6003      	str	r3, [r0, #0]
 800e330:	2301      	movs	r3, #1
 800e332:	421d      	tst	r5, r3
 800e334:	d00a      	beq.n	800e34c <__pow5mult+0x58>
 800e336:	0031      	movs	r1, r6
 800e338:	0022      	movs	r2, r4
 800e33a:	0038      	movs	r0, r7
 800e33c:	f7ff ff2a 	bl	800e194 <__multiply>
 800e340:	0031      	movs	r1, r6
 800e342:	9001      	str	r0, [sp, #4]
 800e344:	0038      	movs	r0, r7
 800e346:	f7ff fe2b 	bl	800dfa0 <_Bfree>
 800e34a:	9e01      	ldr	r6, [sp, #4]
 800e34c:	106d      	asrs	r5, r5, #1
 800e34e:	d00c      	beq.n	800e36a <__pow5mult+0x76>
 800e350:	6820      	ldr	r0, [r4, #0]
 800e352:	2800      	cmp	r0, #0
 800e354:	d107      	bne.n	800e366 <__pow5mult+0x72>
 800e356:	0022      	movs	r2, r4
 800e358:	0021      	movs	r1, r4
 800e35a:	0038      	movs	r0, r7
 800e35c:	f7ff ff1a 	bl	800e194 <__multiply>
 800e360:	2300      	movs	r3, #0
 800e362:	6020      	str	r0, [r4, #0]
 800e364:	6003      	str	r3, [r0, #0]
 800e366:	0004      	movs	r4, r0
 800e368:	e7e2      	b.n	800e330 <__pow5mult+0x3c>
 800e36a:	0030      	movs	r0, r6
 800e36c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e36e:	46c0      	nop			; (mov r8, r8)
 800e370:	08015e00 	.word	0x08015e00
 800e374:	00000271 	.word	0x00000271

0800e378 <__lshift>:
 800e378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e37a:	000c      	movs	r4, r1
 800e37c:	0017      	movs	r7, r2
 800e37e:	6923      	ldr	r3, [r4, #16]
 800e380:	1155      	asrs	r5, r2, #5
 800e382:	b087      	sub	sp, #28
 800e384:	18eb      	adds	r3, r5, r3
 800e386:	9302      	str	r3, [sp, #8]
 800e388:	3301      	adds	r3, #1
 800e38a:	9301      	str	r3, [sp, #4]
 800e38c:	6849      	ldr	r1, [r1, #4]
 800e38e:	68a3      	ldr	r3, [r4, #8]
 800e390:	9004      	str	r0, [sp, #16]
 800e392:	9a01      	ldr	r2, [sp, #4]
 800e394:	4293      	cmp	r3, r2
 800e396:	db10      	blt.n	800e3ba <__lshift+0x42>
 800e398:	9804      	ldr	r0, [sp, #16]
 800e39a:	f7ff fdd9 	bl	800df50 <_Balloc>
 800e39e:	2300      	movs	r3, #0
 800e3a0:	0002      	movs	r2, r0
 800e3a2:	0006      	movs	r6, r0
 800e3a4:	0019      	movs	r1, r3
 800e3a6:	3214      	adds	r2, #20
 800e3a8:	4298      	cmp	r0, r3
 800e3aa:	d10c      	bne.n	800e3c6 <__lshift+0x4e>
 800e3ac:	31df      	adds	r1, #223	; 0xdf
 800e3ae:	0032      	movs	r2, r6
 800e3b0:	4b26      	ldr	r3, [pc, #152]	; (800e44c <__lshift+0xd4>)
 800e3b2:	4827      	ldr	r0, [pc, #156]	; (800e450 <__lshift+0xd8>)
 800e3b4:	31ff      	adds	r1, #255	; 0xff
 800e3b6:	f003 f88f 	bl	80114d8 <__assert_func>
 800e3ba:	3101      	adds	r1, #1
 800e3bc:	005b      	lsls	r3, r3, #1
 800e3be:	e7e8      	b.n	800e392 <__lshift+0x1a>
 800e3c0:	0098      	lsls	r0, r3, #2
 800e3c2:	5011      	str	r1, [r2, r0]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	42ab      	cmp	r3, r5
 800e3c8:	dbfa      	blt.n	800e3c0 <__lshift+0x48>
 800e3ca:	43eb      	mvns	r3, r5
 800e3cc:	17db      	asrs	r3, r3, #31
 800e3ce:	401d      	ands	r5, r3
 800e3d0:	211f      	movs	r1, #31
 800e3d2:	0023      	movs	r3, r4
 800e3d4:	0038      	movs	r0, r7
 800e3d6:	00ad      	lsls	r5, r5, #2
 800e3d8:	1955      	adds	r5, r2, r5
 800e3da:	6922      	ldr	r2, [r4, #16]
 800e3dc:	3314      	adds	r3, #20
 800e3de:	0092      	lsls	r2, r2, #2
 800e3e0:	4008      	ands	r0, r1
 800e3e2:	4684      	mov	ip, r0
 800e3e4:	189a      	adds	r2, r3, r2
 800e3e6:	420f      	tst	r7, r1
 800e3e8:	d02a      	beq.n	800e440 <__lshift+0xc8>
 800e3ea:	3101      	adds	r1, #1
 800e3ec:	1a09      	subs	r1, r1, r0
 800e3ee:	9105      	str	r1, [sp, #20]
 800e3f0:	2100      	movs	r1, #0
 800e3f2:	9503      	str	r5, [sp, #12]
 800e3f4:	4667      	mov	r7, ip
 800e3f6:	6818      	ldr	r0, [r3, #0]
 800e3f8:	40b8      	lsls	r0, r7
 800e3fa:	4308      	orrs	r0, r1
 800e3fc:	9903      	ldr	r1, [sp, #12]
 800e3fe:	c101      	stmia	r1!, {r0}
 800e400:	9103      	str	r1, [sp, #12]
 800e402:	9805      	ldr	r0, [sp, #20]
 800e404:	cb02      	ldmia	r3!, {r1}
 800e406:	40c1      	lsrs	r1, r0
 800e408:	429a      	cmp	r2, r3
 800e40a:	d8f3      	bhi.n	800e3f4 <__lshift+0x7c>
 800e40c:	0020      	movs	r0, r4
 800e40e:	3015      	adds	r0, #21
 800e410:	2304      	movs	r3, #4
 800e412:	4282      	cmp	r2, r0
 800e414:	d304      	bcc.n	800e420 <__lshift+0xa8>
 800e416:	1b13      	subs	r3, r2, r4
 800e418:	3b15      	subs	r3, #21
 800e41a:	089b      	lsrs	r3, r3, #2
 800e41c:	3301      	adds	r3, #1
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	50e9      	str	r1, [r5, r3]
 800e422:	2900      	cmp	r1, #0
 800e424:	d002      	beq.n	800e42c <__lshift+0xb4>
 800e426:	9b02      	ldr	r3, [sp, #8]
 800e428:	3302      	adds	r3, #2
 800e42a:	9301      	str	r3, [sp, #4]
 800e42c:	9b01      	ldr	r3, [sp, #4]
 800e42e:	9804      	ldr	r0, [sp, #16]
 800e430:	3b01      	subs	r3, #1
 800e432:	0021      	movs	r1, r4
 800e434:	6133      	str	r3, [r6, #16]
 800e436:	f7ff fdb3 	bl	800dfa0 <_Bfree>
 800e43a:	0030      	movs	r0, r6
 800e43c:	b007      	add	sp, #28
 800e43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e440:	cb02      	ldmia	r3!, {r1}
 800e442:	c502      	stmia	r5!, {r1}
 800e444:	429a      	cmp	r2, r3
 800e446:	d8fb      	bhi.n	800e440 <__lshift+0xc8>
 800e448:	e7f0      	b.n	800e42c <__lshift+0xb4>
 800e44a:	46c0      	nop			; (mov r8, r8)
 800e44c:	08015c41 	.word	0x08015c41
 800e450:	08015cb2 	.word	0x08015cb2

0800e454 <__mcmp>:
 800e454:	b530      	push	{r4, r5, lr}
 800e456:	690b      	ldr	r3, [r1, #16]
 800e458:	6904      	ldr	r4, [r0, #16]
 800e45a:	0002      	movs	r2, r0
 800e45c:	1ae0      	subs	r0, r4, r3
 800e45e:	429c      	cmp	r4, r3
 800e460:	d10e      	bne.n	800e480 <__mcmp+0x2c>
 800e462:	3214      	adds	r2, #20
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	3114      	adds	r1, #20
 800e468:	0014      	movs	r4, r2
 800e46a:	18c9      	adds	r1, r1, r3
 800e46c:	18d2      	adds	r2, r2, r3
 800e46e:	3a04      	subs	r2, #4
 800e470:	3904      	subs	r1, #4
 800e472:	6815      	ldr	r5, [r2, #0]
 800e474:	680b      	ldr	r3, [r1, #0]
 800e476:	429d      	cmp	r5, r3
 800e478:	d003      	beq.n	800e482 <__mcmp+0x2e>
 800e47a:	2001      	movs	r0, #1
 800e47c:	429d      	cmp	r5, r3
 800e47e:	d303      	bcc.n	800e488 <__mcmp+0x34>
 800e480:	bd30      	pop	{r4, r5, pc}
 800e482:	4294      	cmp	r4, r2
 800e484:	d3f3      	bcc.n	800e46e <__mcmp+0x1a>
 800e486:	e7fb      	b.n	800e480 <__mcmp+0x2c>
 800e488:	4240      	negs	r0, r0
 800e48a:	e7f9      	b.n	800e480 <__mcmp+0x2c>

0800e48c <__mdiff>:
 800e48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e48e:	000e      	movs	r6, r1
 800e490:	0007      	movs	r7, r0
 800e492:	0011      	movs	r1, r2
 800e494:	0030      	movs	r0, r6
 800e496:	b087      	sub	sp, #28
 800e498:	0014      	movs	r4, r2
 800e49a:	f7ff ffdb 	bl	800e454 <__mcmp>
 800e49e:	1e05      	subs	r5, r0, #0
 800e4a0:	d110      	bne.n	800e4c4 <__mdiff+0x38>
 800e4a2:	0001      	movs	r1, r0
 800e4a4:	0038      	movs	r0, r7
 800e4a6:	f7ff fd53 	bl	800df50 <_Balloc>
 800e4aa:	1e02      	subs	r2, r0, #0
 800e4ac:	d104      	bne.n	800e4b8 <__mdiff+0x2c>
 800e4ae:	4b3f      	ldr	r3, [pc, #252]	; (800e5ac <__mdiff+0x120>)
 800e4b0:	483f      	ldr	r0, [pc, #252]	; (800e5b0 <__mdiff+0x124>)
 800e4b2:	4940      	ldr	r1, [pc, #256]	; (800e5b4 <__mdiff+0x128>)
 800e4b4:	f003 f810 	bl	80114d8 <__assert_func>
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	6145      	str	r5, [r0, #20]
 800e4bc:	6103      	str	r3, [r0, #16]
 800e4be:	0010      	movs	r0, r2
 800e4c0:	b007      	add	sp, #28
 800e4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	9301      	str	r3, [sp, #4]
 800e4c8:	2800      	cmp	r0, #0
 800e4ca:	db04      	blt.n	800e4d6 <__mdiff+0x4a>
 800e4cc:	0023      	movs	r3, r4
 800e4ce:	0034      	movs	r4, r6
 800e4d0:	001e      	movs	r6, r3
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	9301      	str	r3, [sp, #4]
 800e4d6:	0038      	movs	r0, r7
 800e4d8:	6861      	ldr	r1, [r4, #4]
 800e4da:	f7ff fd39 	bl	800df50 <_Balloc>
 800e4de:	1e02      	subs	r2, r0, #0
 800e4e0:	d103      	bne.n	800e4ea <__mdiff+0x5e>
 800e4e2:	4b32      	ldr	r3, [pc, #200]	; (800e5ac <__mdiff+0x120>)
 800e4e4:	4832      	ldr	r0, [pc, #200]	; (800e5b0 <__mdiff+0x124>)
 800e4e6:	4934      	ldr	r1, [pc, #208]	; (800e5b8 <__mdiff+0x12c>)
 800e4e8:	e7e4      	b.n	800e4b4 <__mdiff+0x28>
 800e4ea:	9b01      	ldr	r3, [sp, #4]
 800e4ec:	2700      	movs	r7, #0
 800e4ee:	60c3      	str	r3, [r0, #12]
 800e4f0:	6920      	ldr	r0, [r4, #16]
 800e4f2:	3414      	adds	r4, #20
 800e4f4:	0083      	lsls	r3, r0, #2
 800e4f6:	18e3      	adds	r3, r4, r3
 800e4f8:	0021      	movs	r1, r4
 800e4fa:	9401      	str	r4, [sp, #4]
 800e4fc:	0034      	movs	r4, r6
 800e4fe:	9302      	str	r3, [sp, #8]
 800e500:	6933      	ldr	r3, [r6, #16]
 800e502:	3414      	adds	r4, #20
 800e504:	009b      	lsls	r3, r3, #2
 800e506:	18e3      	adds	r3, r4, r3
 800e508:	9303      	str	r3, [sp, #12]
 800e50a:	0013      	movs	r3, r2
 800e50c:	3314      	adds	r3, #20
 800e50e:	469c      	mov	ip, r3
 800e510:	9305      	str	r3, [sp, #20]
 800e512:	9104      	str	r1, [sp, #16]
 800e514:	9b04      	ldr	r3, [sp, #16]
 800e516:	cc02      	ldmia	r4!, {r1}
 800e518:	cb20      	ldmia	r3!, {r5}
 800e51a:	9304      	str	r3, [sp, #16]
 800e51c:	b2ab      	uxth	r3, r5
 800e51e:	19df      	adds	r7, r3, r7
 800e520:	b28b      	uxth	r3, r1
 800e522:	1afb      	subs	r3, r7, r3
 800e524:	0c09      	lsrs	r1, r1, #16
 800e526:	0c2d      	lsrs	r5, r5, #16
 800e528:	1a6d      	subs	r5, r5, r1
 800e52a:	1419      	asrs	r1, r3, #16
 800e52c:	1869      	adds	r1, r5, r1
 800e52e:	b29b      	uxth	r3, r3
 800e530:	140f      	asrs	r7, r1, #16
 800e532:	0409      	lsls	r1, r1, #16
 800e534:	4319      	orrs	r1, r3
 800e536:	4663      	mov	r3, ip
 800e538:	c302      	stmia	r3!, {r1}
 800e53a:	469c      	mov	ip, r3
 800e53c:	9b03      	ldr	r3, [sp, #12]
 800e53e:	42a3      	cmp	r3, r4
 800e540:	d8e8      	bhi.n	800e514 <__mdiff+0x88>
 800e542:	0031      	movs	r1, r6
 800e544:	9c03      	ldr	r4, [sp, #12]
 800e546:	3115      	adds	r1, #21
 800e548:	2304      	movs	r3, #4
 800e54a:	428c      	cmp	r4, r1
 800e54c:	d304      	bcc.n	800e558 <__mdiff+0xcc>
 800e54e:	1ba3      	subs	r3, r4, r6
 800e550:	3b15      	subs	r3, #21
 800e552:	089b      	lsrs	r3, r3, #2
 800e554:	3301      	adds	r3, #1
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	9901      	ldr	r1, [sp, #4]
 800e55a:	18cd      	adds	r5, r1, r3
 800e55c:	9905      	ldr	r1, [sp, #20]
 800e55e:	002e      	movs	r6, r5
 800e560:	18cb      	adds	r3, r1, r3
 800e562:	469c      	mov	ip, r3
 800e564:	9902      	ldr	r1, [sp, #8]
 800e566:	428e      	cmp	r6, r1
 800e568:	d310      	bcc.n	800e58c <__mdiff+0x100>
 800e56a:	9e02      	ldr	r6, [sp, #8]
 800e56c:	1ee9      	subs	r1, r5, #3
 800e56e:	2400      	movs	r4, #0
 800e570:	428e      	cmp	r6, r1
 800e572:	d304      	bcc.n	800e57e <__mdiff+0xf2>
 800e574:	0031      	movs	r1, r6
 800e576:	3103      	adds	r1, #3
 800e578:	1b49      	subs	r1, r1, r5
 800e57a:	0889      	lsrs	r1, r1, #2
 800e57c:	008c      	lsls	r4, r1, #2
 800e57e:	191b      	adds	r3, r3, r4
 800e580:	3b04      	subs	r3, #4
 800e582:	6819      	ldr	r1, [r3, #0]
 800e584:	2900      	cmp	r1, #0
 800e586:	d00f      	beq.n	800e5a8 <__mdiff+0x11c>
 800e588:	6110      	str	r0, [r2, #16]
 800e58a:	e798      	b.n	800e4be <__mdiff+0x32>
 800e58c:	ce02      	ldmia	r6!, {r1}
 800e58e:	b28c      	uxth	r4, r1
 800e590:	19e4      	adds	r4, r4, r7
 800e592:	0c0f      	lsrs	r7, r1, #16
 800e594:	1421      	asrs	r1, r4, #16
 800e596:	1879      	adds	r1, r7, r1
 800e598:	b2a4      	uxth	r4, r4
 800e59a:	140f      	asrs	r7, r1, #16
 800e59c:	0409      	lsls	r1, r1, #16
 800e59e:	4321      	orrs	r1, r4
 800e5a0:	4664      	mov	r4, ip
 800e5a2:	c402      	stmia	r4!, {r1}
 800e5a4:	46a4      	mov	ip, r4
 800e5a6:	e7dd      	b.n	800e564 <__mdiff+0xd8>
 800e5a8:	3801      	subs	r0, #1
 800e5aa:	e7e9      	b.n	800e580 <__mdiff+0xf4>
 800e5ac:	08015c41 	.word	0x08015c41
 800e5b0:	08015cb2 	.word	0x08015cb2
 800e5b4:	00000237 	.word	0x00000237
 800e5b8:	00000245 	.word	0x00000245

0800e5bc <__ulp>:
 800e5bc:	2000      	movs	r0, #0
 800e5be:	4b0b      	ldr	r3, [pc, #44]	; (800e5ec <__ulp+0x30>)
 800e5c0:	4019      	ands	r1, r3
 800e5c2:	4b0b      	ldr	r3, [pc, #44]	; (800e5f0 <__ulp+0x34>)
 800e5c4:	18c9      	adds	r1, r1, r3
 800e5c6:	4281      	cmp	r1, r0
 800e5c8:	dc06      	bgt.n	800e5d8 <__ulp+0x1c>
 800e5ca:	4249      	negs	r1, r1
 800e5cc:	150b      	asrs	r3, r1, #20
 800e5ce:	2b13      	cmp	r3, #19
 800e5d0:	dc03      	bgt.n	800e5da <__ulp+0x1e>
 800e5d2:	2180      	movs	r1, #128	; 0x80
 800e5d4:	0309      	lsls	r1, r1, #12
 800e5d6:	4119      	asrs	r1, r3
 800e5d8:	4770      	bx	lr
 800e5da:	3b14      	subs	r3, #20
 800e5dc:	2001      	movs	r0, #1
 800e5de:	2b1e      	cmp	r3, #30
 800e5e0:	dc02      	bgt.n	800e5e8 <__ulp+0x2c>
 800e5e2:	2080      	movs	r0, #128	; 0x80
 800e5e4:	0600      	lsls	r0, r0, #24
 800e5e6:	40d8      	lsrs	r0, r3
 800e5e8:	2100      	movs	r1, #0
 800e5ea:	e7f5      	b.n	800e5d8 <__ulp+0x1c>
 800e5ec:	7ff00000 	.word	0x7ff00000
 800e5f0:	fcc00000 	.word	0xfcc00000

0800e5f4 <__b2d>:
 800e5f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5f6:	0006      	movs	r6, r0
 800e5f8:	6903      	ldr	r3, [r0, #16]
 800e5fa:	3614      	adds	r6, #20
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	18f3      	adds	r3, r6, r3
 800e600:	1f1d      	subs	r5, r3, #4
 800e602:	682c      	ldr	r4, [r5, #0]
 800e604:	000f      	movs	r7, r1
 800e606:	0020      	movs	r0, r4
 800e608:	9301      	str	r3, [sp, #4]
 800e60a:	f7ff fd63 	bl	800e0d4 <__hi0bits>
 800e60e:	2220      	movs	r2, #32
 800e610:	1a12      	subs	r2, r2, r0
 800e612:	603a      	str	r2, [r7, #0]
 800e614:	0003      	movs	r3, r0
 800e616:	4a1c      	ldr	r2, [pc, #112]	; (800e688 <__b2d+0x94>)
 800e618:	280a      	cmp	r0, #10
 800e61a:	dc15      	bgt.n	800e648 <__b2d+0x54>
 800e61c:	210b      	movs	r1, #11
 800e61e:	0027      	movs	r7, r4
 800e620:	1a09      	subs	r1, r1, r0
 800e622:	40cf      	lsrs	r7, r1
 800e624:	433a      	orrs	r2, r7
 800e626:	468c      	mov	ip, r1
 800e628:	0011      	movs	r1, r2
 800e62a:	2200      	movs	r2, #0
 800e62c:	42ae      	cmp	r6, r5
 800e62e:	d202      	bcs.n	800e636 <__b2d+0x42>
 800e630:	9a01      	ldr	r2, [sp, #4]
 800e632:	3a08      	subs	r2, #8
 800e634:	6812      	ldr	r2, [r2, #0]
 800e636:	3315      	adds	r3, #21
 800e638:	409c      	lsls	r4, r3
 800e63a:	4663      	mov	r3, ip
 800e63c:	0027      	movs	r7, r4
 800e63e:	40da      	lsrs	r2, r3
 800e640:	4317      	orrs	r7, r2
 800e642:	0038      	movs	r0, r7
 800e644:	b003      	add	sp, #12
 800e646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e648:	2700      	movs	r7, #0
 800e64a:	42ae      	cmp	r6, r5
 800e64c:	d202      	bcs.n	800e654 <__b2d+0x60>
 800e64e:	9d01      	ldr	r5, [sp, #4]
 800e650:	3d08      	subs	r5, #8
 800e652:	682f      	ldr	r7, [r5, #0]
 800e654:	210b      	movs	r1, #11
 800e656:	4249      	negs	r1, r1
 800e658:	468c      	mov	ip, r1
 800e65a:	449c      	add	ip, r3
 800e65c:	2b0b      	cmp	r3, #11
 800e65e:	d010      	beq.n	800e682 <__b2d+0x8e>
 800e660:	4661      	mov	r1, ip
 800e662:	2320      	movs	r3, #32
 800e664:	408c      	lsls	r4, r1
 800e666:	1a5b      	subs	r3, r3, r1
 800e668:	0039      	movs	r1, r7
 800e66a:	40d9      	lsrs	r1, r3
 800e66c:	430c      	orrs	r4, r1
 800e66e:	4322      	orrs	r2, r4
 800e670:	0011      	movs	r1, r2
 800e672:	2200      	movs	r2, #0
 800e674:	42b5      	cmp	r5, r6
 800e676:	d901      	bls.n	800e67c <__b2d+0x88>
 800e678:	3d04      	subs	r5, #4
 800e67a:	682a      	ldr	r2, [r5, #0]
 800e67c:	4664      	mov	r4, ip
 800e67e:	40a7      	lsls	r7, r4
 800e680:	e7dd      	b.n	800e63e <__b2d+0x4a>
 800e682:	4322      	orrs	r2, r4
 800e684:	0011      	movs	r1, r2
 800e686:	e7dc      	b.n	800e642 <__b2d+0x4e>
 800e688:	3ff00000 	.word	0x3ff00000

0800e68c <__d2b>:
 800e68c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e68e:	2101      	movs	r1, #1
 800e690:	0014      	movs	r4, r2
 800e692:	001d      	movs	r5, r3
 800e694:	9f08      	ldr	r7, [sp, #32]
 800e696:	f7ff fc5b 	bl	800df50 <_Balloc>
 800e69a:	1e06      	subs	r6, r0, #0
 800e69c:	d105      	bne.n	800e6aa <__d2b+0x1e>
 800e69e:	0032      	movs	r2, r6
 800e6a0:	4b24      	ldr	r3, [pc, #144]	; (800e734 <__d2b+0xa8>)
 800e6a2:	4825      	ldr	r0, [pc, #148]	; (800e738 <__d2b+0xac>)
 800e6a4:	4925      	ldr	r1, [pc, #148]	; (800e73c <__d2b+0xb0>)
 800e6a6:	f002 ff17 	bl	80114d8 <__assert_func>
 800e6aa:	032b      	lsls	r3, r5, #12
 800e6ac:	006d      	lsls	r5, r5, #1
 800e6ae:	0b1b      	lsrs	r3, r3, #12
 800e6b0:	0d6d      	lsrs	r5, r5, #21
 800e6b2:	d125      	bne.n	800e700 <__d2b+0x74>
 800e6b4:	9301      	str	r3, [sp, #4]
 800e6b6:	2c00      	cmp	r4, #0
 800e6b8:	d028      	beq.n	800e70c <__d2b+0x80>
 800e6ba:	4668      	mov	r0, sp
 800e6bc:	9400      	str	r4, [sp, #0]
 800e6be:	f7ff fd23 	bl	800e108 <__lo0bits>
 800e6c2:	9b01      	ldr	r3, [sp, #4]
 800e6c4:	9900      	ldr	r1, [sp, #0]
 800e6c6:	2800      	cmp	r0, #0
 800e6c8:	d01e      	beq.n	800e708 <__d2b+0x7c>
 800e6ca:	2220      	movs	r2, #32
 800e6cc:	001c      	movs	r4, r3
 800e6ce:	1a12      	subs	r2, r2, r0
 800e6d0:	4094      	lsls	r4, r2
 800e6d2:	0022      	movs	r2, r4
 800e6d4:	40c3      	lsrs	r3, r0
 800e6d6:	430a      	orrs	r2, r1
 800e6d8:	6172      	str	r2, [r6, #20]
 800e6da:	9301      	str	r3, [sp, #4]
 800e6dc:	9c01      	ldr	r4, [sp, #4]
 800e6de:	61b4      	str	r4, [r6, #24]
 800e6e0:	1e63      	subs	r3, r4, #1
 800e6e2:	419c      	sbcs	r4, r3
 800e6e4:	3401      	adds	r4, #1
 800e6e6:	6134      	str	r4, [r6, #16]
 800e6e8:	2d00      	cmp	r5, #0
 800e6ea:	d017      	beq.n	800e71c <__d2b+0x90>
 800e6ec:	2435      	movs	r4, #53	; 0x35
 800e6ee:	4b14      	ldr	r3, [pc, #80]	; (800e740 <__d2b+0xb4>)
 800e6f0:	18ed      	adds	r5, r5, r3
 800e6f2:	182d      	adds	r5, r5, r0
 800e6f4:	603d      	str	r5, [r7, #0]
 800e6f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6f8:	1a24      	subs	r4, r4, r0
 800e6fa:	601c      	str	r4, [r3, #0]
 800e6fc:	0030      	movs	r0, r6
 800e6fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e700:	2280      	movs	r2, #128	; 0x80
 800e702:	0352      	lsls	r2, r2, #13
 800e704:	4313      	orrs	r3, r2
 800e706:	e7d5      	b.n	800e6b4 <__d2b+0x28>
 800e708:	6171      	str	r1, [r6, #20]
 800e70a:	e7e7      	b.n	800e6dc <__d2b+0x50>
 800e70c:	a801      	add	r0, sp, #4
 800e70e:	f7ff fcfb 	bl	800e108 <__lo0bits>
 800e712:	9b01      	ldr	r3, [sp, #4]
 800e714:	2401      	movs	r4, #1
 800e716:	6173      	str	r3, [r6, #20]
 800e718:	3020      	adds	r0, #32
 800e71a:	e7e4      	b.n	800e6e6 <__d2b+0x5a>
 800e71c:	4b09      	ldr	r3, [pc, #36]	; (800e744 <__d2b+0xb8>)
 800e71e:	18c0      	adds	r0, r0, r3
 800e720:	4b09      	ldr	r3, [pc, #36]	; (800e748 <__d2b+0xbc>)
 800e722:	6038      	str	r0, [r7, #0]
 800e724:	18e3      	adds	r3, r4, r3
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	18f3      	adds	r3, r6, r3
 800e72a:	6958      	ldr	r0, [r3, #20]
 800e72c:	f7ff fcd2 	bl	800e0d4 <__hi0bits>
 800e730:	0164      	lsls	r4, r4, #5
 800e732:	e7e0      	b.n	800e6f6 <__d2b+0x6a>
 800e734:	08015c41 	.word	0x08015c41
 800e738:	08015cb2 	.word	0x08015cb2
 800e73c:	0000030f 	.word	0x0000030f
 800e740:	fffffbcd 	.word	0xfffffbcd
 800e744:	fffffbce 	.word	0xfffffbce
 800e748:	3fffffff 	.word	0x3fffffff

0800e74c <__ratio>:
 800e74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e74e:	b087      	sub	sp, #28
 800e750:	000f      	movs	r7, r1
 800e752:	a904      	add	r1, sp, #16
 800e754:	0006      	movs	r6, r0
 800e756:	f7ff ff4d 	bl	800e5f4 <__b2d>
 800e75a:	9000      	str	r0, [sp, #0]
 800e75c:	9101      	str	r1, [sp, #4]
 800e75e:	9c00      	ldr	r4, [sp, #0]
 800e760:	9d01      	ldr	r5, [sp, #4]
 800e762:	0038      	movs	r0, r7
 800e764:	a905      	add	r1, sp, #20
 800e766:	f7ff ff45 	bl	800e5f4 <__b2d>
 800e76a:	9002      	str	r0, [sp, #8]
 800e76c:	9103      	str	r1, [sp, #12]
 800e76e:	9a02      	ldr	r2, [sp, #8]
 800e770:	9b03      	ldr	r3, [sp, #12]
 800e772:	6930      	ldr	r0, [r6, #16]
 800e774:	6939      	ldr	r1, [r7, #16]
 800e776:	9e04      	ldr	r6, [sp, #16]
 800e778:	1a40      	subs	r0, r0, r1
 800e77a:	9905      	ldr	r1, [sp, #20]
 800e77c:	0140      	lsls	r0, r0, #5
 800e77e:	1a71      	subs	r1, r6, r1
 800e780:	1841      	adds	r1, r0, r1
 800e782:	0508      	lsls	r0, r1, #20
 800e784:	2900      	cmp	r1, #0
 800e786:	dd07      	ble.n	800e798 <__ratio+0x4c>
 800e788:	9901      	ldr	r1, [sp, #4]
 800e78a:	1845      	adds	r5, r0, r1
 800e78c:	0020      	movs	r0, r4
 800e78e:	0029      	movs	r1, r5
 800e790:	f7f2 fb72 	bl	8000e78 <__aeabi_ddiv>
 800e794:	b007      	add	sp, #28
 800e796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e798:	9903      	ldr	r1, [sp, #12]
 800e79a:	1a0b      	subs	r3, r1, r0
 800e79c:	e7f6      	b.n	800e78c <__ratio+0x40>

0800e79e <__copybits>:
 800e79e:	b570      	push	{r4, r5, r6, lr}
 800e7a0:	0014      	movs	r4, r2
 800e7a2:	0005      	movs	r5, r0
 800e7a4:	3901      	subs	r1, #1
 800e7a6:	6913      	ldr	r3, [r2, #16]
 800e7a8:	1149      	asrs	r1, r1, #5
 800e7aa:	3101      	adds	r1, #1
 800e7ac:	0089      	lsls	r1, r1, #2
 800e7ae:	3414      	adds	r4, #20
 800e7b0:	009b      	lsls	r3, r3, #2
 800e7b2:	1841      	adds	r1, r0, r1
 800e7b4:	18e3      	adds	r3, r4, r3
 800e7b6:	42a3      	cmp	r3, r4
 800e7b8:	d80d      	bhi.n	800e7d6 <__copybits+0x38>
 800e7ba:	0014      	movs	r4, r2
 800e7bc:	3411      	adds	r4, #17
 800e7be:	2500      	movs	r5, #0
 800e7c0:	429c      	cmp	r4, r3
 800e7c2:	d803      	bhi.n	800e7cc <__copybits+0x2e>
 800e7c4:	1a9b      	subs	r3, r3, r2
 800e7c6:	3b11      	subs	r3, #17
 800e7c8:	089b      	lsrs	r3, r3, #2
 800e7ca:	009d      	lsls	r5, r3, #2
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	1940      	adds	r0, r0, r5
 800e7d0:	4281      	cmp	r1, r0
 800e7d2:	d803      	bhi.n	800e7dc <__copybits+0x3e>
 800e7d4:	bd70      	pop	{r4, r5, r6, pc}
 800e7d6:	cc40      	ldmia	r4!, {r6}
 800e7d8:	c540      	stmia	r5!, {r6}
 800e7da:	e7ec      	b.n	800e7b6 <__copybits+0x18>
 800e7dc:	c008      	stmia	r0!, {r3}
 800e7de:	e7f7      	b.n	800e7d0 <__copybits+0x32>

0800e7e0 <__any_on>:
 800e7e0:	0002      	movs	r2, r0
 800e7e2:	6900      	ldr	r0, [r0, #16]
 800e7e4:	b510      	push	{r4, lr}
 800e7e6:	3214      	adds	r2, #20
 800e7e8:	114b      	asrs	r3, r1, #5
 800e7ea:	4298      	cmp	r0, r3
 800e7ec:	db13      	blt.n	800e816 <__any_on+0x36>
 800e7ee:	dd0c      	ble.n	800e80a <__any_on+0x2a>
 800e7f0:	241f      	movs	r4, #31
 800e7f2:	0008      	movs	r0, r1
 800e7f4:	4020      	ands	r0, r4
 800e7f6:	4221      	tst	r1, r4
 800e7f8:	d007      	beq.n	800e80a <__any_on+0x2a>
 800e7fa:	0099      	lsls	r1, r3, #2
 800e7fc:	588c      	ldr	r4, [r1, r2]
 800e7fe:	0021      	movs	r1, r4
 800e800:	40c1      	lsrs	r1, r0
 800e802:	4081      	lsls	r1, r0
 800e804:	2001      	movs	r0, #1
 800e806:	428c      	cmp	r4, r1
 800e808:	d104      	bne.n	800e814 <__any_on+0x34>
 800e80a:	009b      	lsls	r3, r3, #2
 800e80c:	18d3      	adds	r3, r2, r3
 800e80e:	4293      	cmp	r3, r2
 800e810:	d803      	bhi.n	800e81a <__any_on+0x3a>
 800e812:	2000      	movs	r0, #0
 800e814:	bd10      	pop	{r4, pc}
 800e816:	0003      	movs	r3, r0
 800e818:	e7f7      	b.n	800e80a <__any_on+0x2a>
 800e81a:	3b04      	subs	r3, #4
 800e81c:	6819      	ldr	r1, [r3, #0]
 800e81e:	2900      	cmp	r1, #0
 800e820:	d0f5      	beq.n	800e80e <__any_on+0x2e>
 800e822:	2001      	movs	r0, #1
 800e824:	e7f6      	b.n	800e814 <__any_on+0x34>

0800e826 <__ascii_wctomb>:
 800e826:	0003      	movs	r3, r0
 800e828:	1e08      	subs	r0, r1, #0
 800e82a:	d005      	beq.n	800e838 <__ascii_wctomb+0x12>
 800e82c:	2aff      	cmp	r2, #255	; 0xff
 800e82e:	d904      	bls.n	800e83a <__ascii_wctomb+0x14>
 800e830:	228a      	movs	r2, #138	; 0x8a
 800e832:	2001      	movs	r0, #1
 800e834:	601a      	str	r2, [r3, #0]
 800e836:	4240      	negs	r0, r0
 800e838:	4770      	bx	lr
 800e83a:	2001      	movs	r0, #1
 800e83c:	700a      	strb	r2, [r1, #0]
 800e83e:	e7fb      	b.n	800e838 <__ascii_wctomb+0x12>

0800e840 <_svfprintf_r>:
 800e840:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e842:	b0d9      	sub	sp, #356	; 0x164
 800e844:	001c      	movs	r4, r3
 800e846:	910b      	str	r1, [sp, #44]	; 0x2c
 800e848:	9208      	str	r2, [sp, #32]
 800e84a:	900a      	str	r0, [sp, #40]	; 0x28
 800e84c:	f002 fdae 	bl	80113ac <_localeconv_r>
 800e850:	6803      	ldr	r3, [r0, #0]
 800e852:	0018      	movs	r0, r3
 800e854:	931c      	str	r3, [sp, #112]	; 0x70
 800e856:	f7f1 fc55 	bl	8000104 <strlen>
 800e85a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e85c:	9016      	str	r0, [sp, #88]	; 0x58
 800e85e:	899b      	ldrh	r3, [r3, #12]
 800e860:	061b      	lsls	r3, r3, #24
 800e862:	d517      	bpl.n	800e894 <_svfprintf_r+0x54>
 800e864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e866:	691b      	ldr	r3, [r3, #16]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d113      	bne.n	800e894 <_svfprintf_r+0x54>
 800e86c:	2140      	movs	r1, #64	; 0x40
 800e86e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e870:	f7fd fa94 	bl	800bd9c <_malloc_r>
 800e874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e876:	6018      	str	r0, [r3, #0]
 800e878:	6118      	str	r0, [r3, #16]
 800e87a:	2800      	cmp	r0, #0
 800e87c:	d107      	bne.n	800e88e <_svfprintf_r+0x4e>
 800e87e:	230c      	movs	r3, #12
 800e880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e882:	6013      	str	r3, [r2, #0]
 800e884:	3b0d      	subs	r3, #13
 800e886:	9317      	str	r3, [sp, #92]	; 0x5c
 800e888:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e88a:	b059      	add	sp, #356	; 0x164
 800e88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e88e:	2340      	movs	r3, #64	; 0x40
 800e890:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e892:	6153      	str	r3, [r2, #20]
 800e894:	2300      	movs	r3, #0
 800e896:	2200      	movs	r2, #0
 800e898:	932e      	str	r3, [sp, #184]	; 0xb8
 800e89a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e89c:	930e      	str	r3, [sp, #56]	; 0x38
 800e89e:	2300      	movs	r3, #0
 800e8a0:	9214      	str	r2, [sp, #80]	; 0x50
 800e8a2:	9315      	str	r3, [sp, #84]	; 0x54
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	af2f      	add	r7, sp, #188	; 0xbc
 800e8a8:	972c      	str	r7, [sp, #176]	; 0xb0
 800e8aa:	931f      	str	r3, [sp, #124]	; 0x7c
 800e8ac:	931e      	str	r3, [sp, #120]	; 0x78
 800e8ae:	9312      	str	r3, [sp, #72]	; 0x48
 800e8b0:	931b      	str	r3, [sp, #108]	; 0x6c
 800e8b2:	931d      	str	r3, [sp, #116]	; 0x74
 800e8b4:	9317      	str	r3, [sp, #92]	; 0x5c
 800e8b6:	9d08      	ldr	r5, [sp, #32]
 800e8b8:	782b      	ldrb	r3, [r5, #0]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d002      	beq.n	800e8c4 <_svfprintf_r+0x84>
 800e8be:	2b25      	cmp	r3, #37	; 0x25
 800e8c0:	d000      	beq.n	800e8c4 <_svfprintf_r+0x84>
 800e8c2:	e091      	b.n	800e9e8 <_svfprintf_r+0x1a8>
 800e8c4:	9b08      	ldr	r3, [sp, #32]
 800e8c6:	1aee      	subs	r6, r5, r3
 800e8c8:	429d      	cmp	r5, r3
 800e8ca:	d016      	beq.n	800e8fa <_svfprintf_r+0xba>
 800e8cc:	603b      	str	r3, [r7, #0]
 800e8ce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e8d0:	607e      	str	r6, [r7, #4]
 800e8d2:	199b      	adds	r3, r3, r6
 800e8d4:	932e      	str	r3, [sp, #184]	; 0xb8
 800e8d6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e8d8:	3708      	adds	r7, #8
 800e8da:	3301      	adds	r3, #1
 800e8dc:	932d      	str	r3, [sp, #180]	; 0xb4
 800e8de:	2b07      	cmp	r3, #7
 800e8e0:	dd08      	ble.n	800e8f4 <_svfprintf_r+0xb4>
 800e8e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8e6:	aa2c      	add	r2, sp, #176	; 0xb0
 800e8e8:	f004 f83a 	bl	8012960 <__ssprint_r>
 800e8ec:	2800      	cmp	r0, #0
 800e8ee:	d000      	beq.n	800e8f2 <_svfprintf_r+0xb2>
 800e8f0:	e1cf      	b.n	800ec92 <_svfprintf_r+0x452>
 800e8f2:	af2f      	add	r7, sp, #188	; 0xbc
 800e8f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e8f6:	199b      	adds	r3, r3, r6
 800e8f8:	9317      	str	r3, [sp, #92]	; 0x5c
 800e8fa:	782b      	ldrb	r3, [r5, #0]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d101      	bne.n	800e904 <_svfprintf_r+0xc4>
 800e900:	f001 f99e 	bl	800fc40 <_svfprintf_r+0x1400>
 800e904:	221b      	movs	r2, #27
 800e906:	2300      	movs	r3, #0
 800e908:	a91e      	add	r1, sp, #120	; 0x78
 800e90a:	1852      	adds	r2, r2, r1
 800e90c:	7013      	strb	r3, [r2, #0]
 800e90e:	2201      	movs	r2, #1
 800e910:	001e      	movs	r6, r3
 800e912:	4252      	negs	r2, r2
 800e914:	3501      	adds	r5, #1
 800e916:	9209      	str	r2, [sp, #36]	; 0x24
 800e918:	9318      	str	r3, [sp, #96]	; 0x60
 800e91a:	1c6b      	adds	r3, r5, #1
 800e91c:	9313      	str	r3, [sp, #76]	; 0x4c
 800e91e:	782b      	ldrb	r3, [r5, #0]
 800e920:	930f      	str	r3, [sp, #60]	; 0x3c
 800e922:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e924:	3820      	subs	r0, #32
 800e926:	285a      	cmp	r0, #90	; 0x5a
 800e928:	d901      	bls.n	800e92e <_svfprintf_r+0xee>
 800e92a:	f000 fe20 	bl	800f56e <_svfprintf_r+0xd2e>
 800e92e:	f7f1 fbfb 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e932:	0078      	.short	0x0078
 800e934:	061e061e 	.word	0x061e061e
 800e938:	061e0082 	.word	0x061e0082
 800e93c:	061e061e 	.word	0x061e061e
 800e940:	061e005d 	.word	0x061e005d
 800e944:	0084061e 	.word	0x0084061e
 800e948:	061e008c 	.word	0x061e008c
 800e94c:	0091008a 	.word	0x0091008a
 800e950:	00b2061e 	.word	0x00b2061e
 800e954:	00b400b4 	.word	0x00b400b4
 800e958:	00b400b4 	.word	0x00b400b4
 800e95c:	00b400b4 	.word	0x00b400b4
 800e960:	00b400b4 	.word	0x00b400b4
 800e964:	061e00b4 	.word	0x061e00b4
 800e968:	061e061e 	.word	0x061e061e
 800e96c:	061e061e 	.word	0x061e061e
 800e970:	061e061e 	.word	0x061e061e
 800e974:	061e013b 	.word	0x061e013b
 800e978:	00f400e0 	.word	0x00f400e0
 800e97c:	013b013b 	.word	0x013b013b
 800e980:	061e013b 	.word	0x061e013b
 800e984:	061e061e 	.word	0x061e061e
 800e988:	00c7061e 	.word	0x00c7061e
 800e98c:	061e061e 	.word	0x061e061e
 800e990:	061e04c7 	.word	0x061e04c7
 800e994:	061e061e 	.word	0x061e061e
 800e998:	061e050a 	.word	0x061e050a
 800e99c:	061e052a 	.word	0x061e052a
 800e9a0:	055c061e 	.word	0x055c061e
 800e9a4:	061e061e 	.word	0x061e061e
 800e9a8:	061e061e 	.word	0x061e061e
 800e9ac:	061e061e 	.word	0x061e061e
 800e9b0:	061e061e 	.word	0x061e061e
 800e9b4:	061e013b 	.word	0x061e013b
 800e9b8:	00f600e0 	.word	0x00f600e0
 800e9bc:	013b013b 	.word	0x013b013b
 800e9c0:	00c9013b 	.word	0x00c9013b
 800e9c4:	00dc00f6 	.word	0x00dc00f6
 800e9c8:	00d5061e 	.word	0x00d5061e
 800e9cc:	04a7061e 	.word	0x04a7061e
 800e9d0:	04fa04c9 	.word	0x04fa04c9
 800e9d4:	061e00dc 	.word	0x061e00dc
 800e9d8:	0080050a 	.word	0x0080050a
 800e9dc:	061e052c 	.word	0x061e052c
 800e9e0:	057c061e 	.word	0x057c061e
 800e9e4:	0080061e 	.word	0x0080061e
 800e9e8:	3501      	adds	r5, #1
 800e9ea:	e765      	b.n	800e8b8 <_svfprintf_r+0x78>
 800e9ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9ee:	f002 fcdd 	bl	80113ac <_localeconv_r>
 800e9f2:	6843      	ldr	r3, [r0, #4]
 800e9f4:	0018      	movs	r0, r3
 800e9f6:	931d      	str	r3, [sp, #116]	; 0x74
 800e9f8:	f7f1 fb84 	bl	8000104 <strlen>
 800e9fc:	901b      	str	r0, [sp, #108]	; 0x6c
 800e9fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea00:	f002 fcd4 	bl	80113ac <_localeconv_r>
 800ea04:	6883      	ldr	r3, [r0, #8]
 800ea06:	9312      	str	r3, [sp, #72]	; 0x48
 800ea08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d011      	beq.n	800ea32 <_svfprintf_r+0x1f2>
 800ea0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d00e      	beq.n	800ea32 <_svfprintf_r+0x1f2>
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00b      	beq.n	800ea32 <_svfprintf_r+0x1f2>
 800ea1a:	2380      	movs	r3, #128	; 0x80
 800ea1c:	00db      	lsls	r3, r3, #3
 800ea1e:	431e      	orrs	r6, r3
 800ea20:	e007      	b.n	800ea32 <_svfprintf_r+0x1f2>
 800ea22:	231b      	movs	r3, #27
 800ea24:	aa1e      	add	r2, sp, #120	; 0x78
 800ea26:	189b      	adds	r3, r3, r2
 800ea28:	781a      	ldrb	r2, [r3, #0]
 800ea2a:	2a00      	cmp	r2, #0
 800ea2c:	d101      	bne.n	800ea32 <_svfprintf_r+0x1f2>
 800ea2e:	3220      	adds	r2, #32
 800ea30:	701a      	strb	r2, [r3, #0]
 800ea32:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ea34:	e771      	b.n	800e91a <_svfprintf_r+0xda>
 800ea36:	2301      	movs	r3, #1
 800ea38:	e7f1      	b.n	800ea1e <_svfprintf_r+0x1de>
 800ea3a:	cc08      	ldmia	r4!, {r3}
 800ea3c:	9318      	str	r3, [sp, #96]	; 0x60
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	daf7      	bge.n	800ea32 <_svfprintf_r+0x1f2>
 800ea42:	425b      	negs	r3, r3
 800ea44:	9318      	str	r3, [sp, #96]	; 0x60
 800ea46:	2304      	movs	r3, #4
 800ea48:	e7e9      	b.n	800ea1e <_svfprintf_r+0x1de>
 800ea4a:	231b      	movs	r3, #27
 800ea4c:	aa1e      	add	r2, sp, #120	; 0x78
 800ea4e:	189b      	adds	r3, r3, r2
 800ea50:	222b      	movs	r2, #43	; 0x2b
 800ea52:	e7ed      	b.n	800ea30 <_svfprintf_r+0x1f0>
 800ea54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ea56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ea58:	7812      	ldrb	r2, [r2, #0]
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	920f      	str	r2, [sp, #60]	; 0x3c
 800ea5e:	2a2a      	cmp	r2, #42	; 0x2a
 800ea60:	d010      	beq.n	800ea84 <_svfprintf_r+0x244>
 800ea62:	2200      	movs	r2, #0
 800ea64:	9209      	str	r2, [sp, #36]	; 0x24
 800ea66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ea68:	9313      	str	r3, [sp, #76]	; 0x4c
 800ea6a:	3a30      	subs	r2, #48	; 0x30
 800ea6c:	2a09      	cmp	r2, #9
 800ea6e:	d900      	bls.n	800ea72 <_svfprintf_r+0x232>
 800ea70:	e757      	b.n	800e922 <_svfprintf_r+0xe2>
 800ea72:	200a      	movs	r0, #10
 800ea74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea76:	4341      	muls	r1, r0
 800ea78:	188a      	adds	r2, r1, r2
 800ea7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ea7c:	781a      	ldrb	r2, [r3, #0]
 800ea7e:	3301      	adds	r3, #1
 800ea80:	920f      	str	r2, [sp, #60]	; 0x3c
 800ea82:	e7f0      	b.n	800ea66 <_svfprintf_r+0x226>
 800ea84:	cc04      	ldmia	r4!, {r2}
 800ea86:	9209      	str	r2, [sp, #36]	; 0x24
 800ea88:	2a00      	cmp	r2, #0
 800ea8a:	da02      	bge.n	800ea92 <_svfprintf_r+0x252>
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	4252      	negs	r2, r2
 800ea90:	9209      	str	r2, [sp, #36]	; 0x24
 800ea92:	9313      	str	r3, [sp, #76]	; 0x4c
 800ea94:	e7cd      	b.n	800ea32 <_svfprintf_r+0x1f2>
 800ea96:	2380      	movs	r3, #128	; 0x80
 800ea98:	e7c1      	b.n	800ea1e <_svfprintf_r+0x1de>
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ea9e:	9218      	str	r2, [sp, #96]	; 0x60
 800eaa0:	210a      	movs	r1, #10
 800eaa2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800eaa4:	434a      	muls	r2, r1
 800eaa6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800eaa8:	3930      	subs	r1, #48	; 0x30
 800eaaa:	188a      	adds	r2, r1, r2
 800eaac:	9218      	str	r2, [sp, #96]	; 0x60
 800eaae:	001a      	movs	r2, r3
 800eab0:	7812      	ldrb	r2, [r2, #0]
 800eab2:	3301      	adds	r3, #1
 800eab4:	920f      	str	r2, [sp, #60]	; 0x3c
 800eab6:	3a30      	subs	r2, #48	; 0x30
 800eab8:	9313      	str	r3, [sp, #76]	; 0x4c
 800eaba:	2a09      	cmp	r2, #9
 800eabc:	d9f0      	bls.n	800eaa0 <_svfprintf_r+0x260>
 800eabe:	e730      	b.n	800e922 <_svfprintf_r+0xe2>
 800eac0:	2308      	movs	r3, #8
 800eac2:	e7ac      	b.n	800ea1e <_svfprintf_r+0x1de>
 800eac4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	2b68      	cmp	r3, #104	; 0x68
 800eaca:	d105      	bne.n	800ead8 <_svfprintf_r+0x298>
 800eacc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eace:	3301      	adds	r3, #1
 800ead0:	9313      	str	r3, [sp, #76]	; 0x4c
 800ead2:	2380      	movs	r3, #128	; 0x80
 800ead4:	009b      	lsls	r3, r3, #2
 800ead6:	e7a2      	b.n	800ea1e <_svfprintf_r+0x1de>
 800ead8:	2340      	movs	r3, #64	; 0x40
 800eada:	e7a0      	b.n	800ea1e <_svfprintf_r+0x1de>
 800eadc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	2b6c      	cmp	r3, #108	; 0x6c
 800eae2:	d104      	bne.n	800eaee <_svfprintf_r+0x2ae>
 800eae4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eae6:	3301      	adds	r3, #1
 800eae8:	9313      	str	r3, [sp, #76]	; 0x4c
 800eaea:	2320      	movs	r3, #32
 800eaec:	e797      	b.n	800ea1e <_svfprintf_r+0x1de>
 800eaee:	2310      	movs	r3, #16
 800eaf0:	e795      	b.n	800ea1e <_svfprintf_r+0x1de>
 800eaf2:	0021      	movs	r1, r4
 800eaf4:	c904      	ldmia	r1!, {r2}
 800eaf6:	ab3f      	add	r3, sp, #252	; 0xfc
 800eaf8:	910d      	str	r1, [sp, #52]	; 0x34
 800eafa:	211b      	movs	r1, #27
 800eafc:	701a      	strb	r2, [r3, #0]
 800eafe:	2200      	movs	r2, #0
 800eb00:	a81e      	add	r0, sp, #120	; 0x78
 800eb02:	1809      	adds	r1, r1, r0
 800eb04:	700a      	strb	r2, [r1, #0]
 800eb06:	920c      	str	r2, [sp, #48]	; 0x30
 800eb08:	3201      	adds	r2, #1
 800eb0a:	9209      	str	r2, [sp, #36]	; 0x24
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	9308      	str	r3, [sp, #32]
 800eb10:	0015      	movs	r5, r2
 800eb12:	9219      	str	r2, [sp, #100]	; 0x64
 800eb14:	9210      	str	r2, [sp, #64]	; 0x40
 800eb16:	9211      	str	r2, [sp, #68]	; 0x44
 800eb18:	e1f1      	b.n	800eefe <_svfprintf_r+0x6be>
 800eb1a:	2310      	movs	r3, #16
 800eb1c:	431e      	orrs	r6, r3
 800eb1e:	06b3      	lsls	r3, r6, #26
 800eb20:	d531      	bpl.n	800eb86 <_svfprintf_r+0x346>
 800eb22:	2307      	movs	r3, #7
 800eb24:	3407      	adds	r4, #7
 800eb26:	439c      	bics	r4, r3
 800eb28:	0022      	movs	r2, r4
 800eb2a:	ca18      	ldmia	r2!, {r3, r4}
 800eb2c:	9306      	str	r3, [sp, #24]
 800eb2e:	9407      	str	r4, [sp, #28]
 800eb30:	920d      	str	r2, [sp, #52]	; 0x34
 800eb32:	9a07      	ldr	r2, [sp, #28]
 800eb34:	2301      	movs	r3, #1
 800eb36:	2a00      	cmp	r2, #0
 800eb38:	da0b      	bge.n	800eb52 <_svfprintf_r+0x312>
 800eb3a:	9c06      	ldr	r4, [sp, #24]
 800eb3c:	9d07      	ldr	r5, [sp, #28]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	4261      	negs	r1, r4
 800eb42:	41aa      	sbcs	r2, r5
 800eb44:	9106      	str	r1, [sp, #24]
 800eb46:	9207      	str	r2, [sp, #28]
 800eb48:	221b      	movs	r2, #27
 800eb4a:	a91e      	add	r1, sp, #120	; 0x78
 800eb4c:	1852      	adds	r2, r2, r1
 800eb4e:	212d      	movs	r1, #45	; 0x2d
 800eb50:	7011      	strb	r1, [r2, #0]
 800eb52:	9907      	ldr	r1, [sp, #28]
 800eb54:	9a06      	ldr	r2, [sp, #24]
 800eb56:	430a      	orrs	r2, r1
 800eb58:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb5a:	3101      	adds	r1, #1
 800eb5c:	d101      	bne.n	800eb62 <_svfprintf_r+0x322>
 800eb5e:	f001 f87b 	bl	800fc58 <_svfprintf_r+0x1418>
 800eb62:	2180      	movs	r1, #128	; 0x80
 800eb64:	0034      	movs	r4, r6
 800eb66:	438c      	bics	r4, r1
 800eb68:	2a00      	cmp	r2, #0
 800eb6a:	d001      	beq.n	800eb70 <_svfprintf_r+0x330>
 800eb6c:	f001 f879 	bl	800fc62 <_svfprintf_r+0x1422>
 800eb70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb72:	2a00      	cmp	r2, #0
 800eb74:	d101      	bne.n	800eb7a <_svfprintf_r+0x33a>
 800eb76:	f000 fcef 	bl	800f558 <_svfprintf_r+0xd18>
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d001      	beq.n	800eb82 <_svfprintf_r+0x342>
 800eb7e:	f001 f874 	bl	800fc6a <_svfprintf_r+0x142a>
 800eb82:	f000 fc79 	bl	800f478 <_svfprintf_r+0xc38>
 800eb86:	0022      	movs	r2, r4
 800eb88:	ca08      	ldmia	r2!, {r3}
 800eb8a:	920d      	str	r2, [sp, #52]	; 0x34
 800eb8c:	06f2      	lsls	r2, r6, #27
 800eb8e:	d503      	bpl.n	800eb98 <_svfprintf_r+0x358>
 800eb90:	9306      	str	r3, [sp, #24]
 800eb92:	17db      	asrs	r3, r3, #31
 800eb94:	9307      	str	r3, [sp, #28]
 800eb96:	e7cc      	b.n	800eb32 <_svfprintf_r+0x2f2>
 800eb98:	0672      	lsls	r2, r6, #25
 800eb9a:	d501      	bpl.n	800eba0 <_svfprintf_r+0x360>
 800eb9c:	b21b      	sxth	r3, r3
 800eb9e:	e7f7      	b.n	800eb90 <_svfprintf_r+0x350>
 800eba0:	05b2      	lsls	r2, r6, #22
 800eba2:	d5f5      	bpl.n	800eb90 <_svfprintf_r+0x350>
 800eba4:	b25b      	sxtb	r3, r3
 800eba6:	e7f3      	b.n	800eb90 <_svfprintf_r+0x350>
 800eba8:	2307      	movs	r3, #7
 800ebaa:	3407      	adds	r4, #7
 800ebac:	439c      	bics	r4, r3
 800ebae:	0022      	movs	r2, r4
 800ebb0:	ca18      	ldmia	r2!, {r3, r4}
 800ebb2:	920d      	str	r2, [sp, #52]	; 0x34
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	9314      	str	r3, [sp, #80]	; 0x50
 800ebb8:	9415      	str	r4, [sp, #84]	; 0x54
 800ebba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebbc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ebbe:	005c      	lsls	r4, r3, #1
 800ebc0:	0864      	lsrs	r4, r4, #1
 800ebc2:	0028      	movs	r0, r5
 800ebc4:	0021      	movs	r1, r4
 800ebc6:	4b3e      	ldr	r3, [pc, #248]	; (800ecc0 <_svfprintf_r+0x480>)
 800ebc8:	4252      	negs	r2, r2
 800ebca:	f7f3 fb93 	bl	80022f4 <__aeabi_dcmpun>
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	d126      	bne.n	800ec20 <_svfprintf_r+0x3e0>
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	0028      	movs	r0, r5
 800ebd6:	0021      	movs	r1, r4
 800ebd8:	4b39      	ldr	r3, [pc, #228]	; (800ecc0 <_svfprintf_r+0x480>)
 800ebda:	4252      	negs	r2, r2
 800ebdc:	f7f1 fc44 	bl	8000468 <__aeabi_dcmple>
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	d11d      	bne.n	800ec20 <_svfprintf_r+0x3e0>
 800ebe4:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ebe6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ebe8:	2200      	movs	r2, #0
 800ebea:	2300      	movs	r3, #0
 800ebec:	f7f1 fc32 	bl	8000454 <__aeabi_dcmplt>
 800ebf0:	2800      	cmp	r0, #0
 800ebf2:	d004      	beq.n	800ebfe <_svfprintf_r+0x3be>
 800ebf4:	231b      	movs	r3, #27
 800ebf6:	aa1e      	add	r2, sp, #120	; 0x78
 800ebf8:	189b      	adds	r3, r3, r2
 800ebfa:	222d      	movs	r2, #45	; 0x2d
 800ebfc:	701a      	strb	r2, [r3, #0]
 800ebfe:	4b31      	ldr	r3, [pc, #196]	; (800ecc4 <_svfprintf_r+0x484>)
 800ec00:	9308      	str	r3, [sp, #32]
 800ec02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec04:	2b47      	cmp	r3, #71	; 0x47
 800ec06:	dd01      	ble.n	800ec0c <_svfprintf_r+0x3cc>
 800ec08:	4b2f      	ldr	r3, [pc, #188]	; (800ecc8 <_svfprintf_r+0x488>)
 800ec0a:	9308      	str	r3, [sp, #32]
 800ec0c:	2380      	movs	r3, #128	; 0x80
 800ec0e:	439e      	bics	r6, r3
 800ec10:	2300      	movs	r3, #0
 800ec12:	930c      	str	r3, [sp, #48]	; 0x30
 800ec14:	3303      	adds	r3, #3
 800ec16:	9309      	str	r3, [sp, #36]	; 0x24
 800ec18:	2300      	movs	r3, #0
 800ec1a:	9319      	str	r3, [sp, #100]	; 0x64
 800ec1c:	f000 fc78 	bl	800f510 <_svfprintf_r+0xcd0>
 800ec20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ec22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec24:	0010      	movs	r0, r2
 800ec26:	0019      	movs	r1, r3
 800ec28:	f7f3 fb64 	bl	80022f4 <__aeabi_dcmpun>
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	d00e      	beq.n	800ec4e <_svfprintf_r+0x40e>
 800ec30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	da04      	bge.n	800ec40 <_svfprintf_r+0x400>
 800ec36:	231b      	movs	r3, #27
 800ec38:	aa1e      	add	r2, sp, #120	; 0x78
 800ec3a:	189b      	adds	r3, r3, r2
 800ec3c:	222d      	movs	r2, #45	; 0x2d
 800ec3e:	701a      	strb	r2, [r3, #0]
 800ec40:	4b22      	ldr	r3, [pc, #136]	; (800eccc <_svfprintf_r+0x48c>)
 800ec42:	9308      	str	r3, [sp, #32]
 800ec44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec46:	2b47      	cmp	r3, #71	; 0x47
 800ec48:	dde0      	ble.n	800ec0c <_svfprintf_r+0x3cc>
 800ec4a:	4b21      	ldr	r3, [pc, #132]	; (800ecd0 <_svfprintf_r+0x490>)
 800ec4c:	e7dd      	b.n	800ec0a <_svfprintf_r+0x3ca>
 800ec4e:	2320      	movs	r3, #32
 800ec50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ec52:	439a      	bics	r2, r3
 800ec54:	9210      	str	r2, [sp, #64]	; 0x40
 800ec56:	2a41      	cmp	r2, #65	; 0x41
 800ec58:	d123      	bne.n	800eca2 <_svfprintf_r+0x462>
 800ec5a:	2230      	movs	r2, #48	; 0x30
 800ec5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ec5e:	ab25      	add	r3, sp, #148	; 0x94
 800ec60:	701a      	strb	r2, [r3, #0]
 800ec62:	3248      	adds	r2, #72	; 0x48
 800ec64:	2961      	cmp	r1, #97	; 0x61
 800ec66:	d000      	beq.n	800ec6a <_svfprintf_r+0x42a>
 800ec68:	3a20      	subs	r2, #32
 800ec6a:	705a      	strb	r2, [r3, #1]
 800ec6c:	2302      	movs	r3, #2
 800ec6e:	431e      	orrs	r6, r3
 800ec70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec72:	2b63      	cmp	r3, #99	; 0x63
 800ec74:	dd2e      	ble.n	800ecd4 <_svfprintf_r+0x494>
 800ec76:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec78:	1c59      	adds	r1, r3, #1
 800ec7a:	f7fd f88f 	bl	800bd9c <_malloc_r>
 800ec7e:	9008      	str	r0, [sp, #32]
 800ec80:	2800      	cmp	r0, #0
 800ec82:	d000      	beq.n	800ec86 <_svfprintf_r+0x446>
 800ec84:	e216      	b.n	800f0b4 <_svfprintf_r+0x874>
 800ec86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec88:	899a      	ldrh	r2, [r3, #12]
 800ec8a:	2340      	movs	r3, #64	; 0x40
 800ec8c:	4313      	orrs	r3, r2
 800ec8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ec90:	8193      	strh	r3, [r2, #12]
 800ec92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec94:	899b      	ldrh	r3, [r3, #12]
 800ec96:	065b      	lsls	r3, r3, #25
 800ec98:	d400      	bmi.n	800ec9c <_svfprintf_r+0x45c>
 800ec9a:	e5f5      	b.n	800e888 <_svfprintf_r+0x48>
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	425b      	negs	r3, r3
 800eca0:	e5f1      	b.n	800e886 <_svfprintf_r+0x46>
 800eca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eca4:	900c      	str	r0, [sp, #48]	; 0x30
 800eca6:	3301      	adds	r3, #1
 800eca8:	d100      	bne.n	800ecac <_svfprintf_r+0x46c>
 800ecaa:	e206      	b.n	800f0ba <_svfprintf_r+0x87a>
 800ecac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ecae:	2b47      	cmp	r3, #71	; 0x47
 800ecb0:	d114      	bne.n	800ecdc <_svfprintf_r+0x49c>
 800ecb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d111      	bne.n	800ecdc <_svfprintf_r+0x49c>
 800ecb8:	3301      	adds	r3, #1
 800ecba:	9309      	str	r3, [sp, #36]	; 0x24
 800ecbc:	e00e      	b.n	800ecdc <_svfprintf_r+0x49c>
 800ecbe:	46c0      	nop			; (mov r8, r8)
 800ecc0:	7fefffff 	.word	0x7fefffff
 800ecc4:	08015e0c 	.word	0x08015e0c
 800ecc8:	08015e10 	.word	0x08015e10
 800eccc:	08015e14 	.word	0x08015e14
 800ecd0:	08015e18 	.word	0x08015e18
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	930c      	str	r3, [sp, #48]	; 0x30
 800ecd8:	ab3f      	add	r3, sp, #252	; 0xfc
 800ecda:	9308      	str	r3, [sp, #32]
 800ecdc:	2380      	movs	r3, #128	; 0x80
 800ecde:	005b      	lsls	r3, r3, #1
 800ece0:	4333      	orrs	r3, r6
 800ece2:	931a      	str	r3, [sp, #104]	; 0x68
 800ece4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ece6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	db00      	blt.n	800ecee <_svfprintf_r+0x4ae>
 800ecec:	e1e7      	b.n	800f0be <_svfprintf_r+0x87e>
 800ecee:	2280      	movs	r2, #128	; 0x80
 800ecf0:	0612      	lsls	r2, r2, #24
 800ecf2:	4694      	mov	ip, r2
 800ecf4:	4463      	add	r3, ip
 800ecf6:	930e      	str	r3, [sp, #56]	; 0x38
 800ecf8:	232d      	movs	r3, #45	; 0x2d
 800ecfa:	9322      	str	r3, [sp, #136]	; 0x88
 800ecfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ecfe:	2b41      	cmp	r3, #65	; 0x41
 800ed00:	d000      	beq.n	800ed04 <_svfprintf_r+0x4c4>
 800ed02:	e1f5      	b.n	800f0f0 <_svfprintf_r+0x8b0>
 800ed04:	0028      	movs	r0, r5
 800ed06:	aa26      	add	r2, sp, #152	; 0x98
 800ed08:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ed0a:	f002 fb73 	bl	80113f4 <frexp>
 800ed0e:	23ff      	movs	r3, #255	; 0xff
 800ed10:	2200      	movs	r2, #0
 800ed12:	059b      	lsls	r3, r3, #22
 800ed14:	f7f2 fcaa 	bl	800166c <__aeabi_dmul>
 800ed18:	2200      	movs	r2, #0
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	0004      	movs	r4, r0
 800ed1e:	000d      	movs	r5, r1
 800ed20:	f7f1 fb92 	bl	8000448 <__aeabi_dcmpeq>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d001      	beq.n	800ed2c <_svfprintf_r+0x4ec>
 800ed28:	2301      	movs	r3, #1
 800ed2a:	9326      	str	r3, [sp, #152]	; 0x98
 800ed2c:	4bda      	ldr	r3, [pc, #872]	; (800f098 <_svfprintf_r+0x858>)
 800ed2e:	9319      	str	r3, [sp, #100]	; 0x64
 800ed30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed32:	2b61      	cmp	r3, #97	; 0x61
 800ed34:	d001      	beq.n	800ed3a <_svfprintf_r+0x4fa>
 800ed36:	4bd9      	ldr	r3, [pc, #868]	; (800f09c <_svfprintf_r+0x85c>)
 800ed38:	9319      	str	r3, [sp, #100]	; 0x64
 800ed3a:	9b08      	ldr	r3, [sp, #32]
 800ed3c:	930e      	str	r3, [sp, #56]	; 0x38
 800ed3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed40:	3b01      	subs	r3, #1
 800ed42:	9311      	str	r3, [sp, #68]	; 0x44
 800ed44:	2200      	movs	r2, #0
 800ed46:	4bd6      	ldr	r3, [pc, #856]	; (800f0a0 <_svfprintf_r+0x860>)
 800ed48:	0020      	movs	r0, r4
 800ed4a:	0029      	movs	r1, r5
 800ed4c:	f7f2 fc8e 	bl	800166c <__aeabi_dmul>
 800ed50:	000d      	movs	r5, r1
 800ed52:	0004      	movs	r4, r0
 800ed54:	f7f3 faec 	bl	8002330 <__aeabi_d2iz>
 800ed58:	9021      	str	r0, [sp, #132]	; 0x84
 800ed5a:	f7f3 fb1f 	bl	800239c <__aeabi_i2d>
 800ed5e:	0002      	movs	r2, r0
 800ed60:	000b      	movs	r3, r1
 800ed62:	0020      	movs	r0, r4
 800ed64:	0029      	movs	r1, r5
 800ed66:	f7f2 ff43 	bl	8001bf0 <__aeabi_dsub>
 800ed6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed6c:	000d      	movs	r5, r1
 800ed6e:	001a      	movs	r2, r3
 800ed70:	3201      	adds	r2, #1
 800ed72:	9921      	ldr	r1, [sp, #132]	; 0x84
 800ed74:	920e      	str	r2, [sp, #56]	; 0x38
 800ed76:	9223      	str	r2, [sp, #140]	; 0x8c
 800ed78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ed7a:	0004      	movs	r4, r0
 800ed7c:	5c52      	ldrb	r2, [r2, r1]
 800ed7e:	701a      	strb	r2, [r3, #0]
 800ed80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed82:	9320      	str	r3, [sp, #128]	; 0x80
 800ed84:	3301      	adds	r3, #1
 800ed86:	d00a      	beq.n	800ed9e <_svfprintf_r+0x55e>
 800ed88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	3b01      	subs	r3, #1
 800ed8e:	9311      	str	r3, [sp, #68]	; 0x44
 800ed90:	0020      	movs	r0, r4
 800ed92:	2300      	movs	r3, #0
 800ed94:	0029      	movs	r1, r5
 800ed96:	f7f1 fb57 	bl	8000448 <__aeabi_dcmpeq>
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	d0d2      	beq.n	800ed44 <_svfprintf_r+0x504>
 800ed9e:	2200      	movs	r2, #0
 800eda0:	0020      	movs	r0, r4
 800eda2:	0029      	movs	r1, r5
 800eda4:	4bbf      	ldr	r3, [pc, #764]	; (800f0a4 <_svfprintf_r+0x864>)
 800eda6:	f7f1 fb69 	bl	800047c <__aeabi_dcmpgt>
 800edaa:	2800      	cmp	r0, #0
 800edac:	d10c      	bne.n	800edc8 <_svfprintf_r+0x588>
 800edae:	2200      	movs	r2, #0
 800edb0:	0020      	movs	r0, r4
 800edb2:	0029      	movs	r1, r5
 800edb4:	4bbb      	ldr	r3, [pc, #748]	; (800f0a4 <_svfprintf_r+0x864>)
 800edb6:	f7f1 fb47 	bl	8000448 <__aeabi_dcmpeq>
 800edba:	2800      	cmp	r0, #0
 800edbc:	d100      	bne.n	800edc0 <_svfprintf_r+0x580>
 800edbe:	e191      	b.n	800f0e4 <_svfprintf_r+0x8a4>
 800edc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edc2:	07db      	lsls	r3, r3, #31
 800edc4:	d400      	bmi.n	800edc8 <_svfprintf_r+0x588>
 800edc6:	e18d      	b.n	800f0e4 <_svfprintf_r+0x8a4>
 800edc8:	2030      	movs	r0, #48	; 0x30
 800edca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edcc:	932a      	str	r3, [sp, #168]	; 0xa8
 800edce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800edd0:	7bdb      	ldrb	r3, [r3, #15]
 800edd2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800edd4:	3a01      	subs	r2, #1
 800edd6:	922a      	str	r2, [sp, #168]	; 0xa8
 800edd8:	7811      	ldrb	r1, [r2, #0]
 800edda:	4299      	cmp	r1, r3
 800eddc:	d100      	bne.n	800ede0 <_svfprintf_r+0x5a0>
 800edde:	e171      	b.n	800f0c4 <_svfprintf_r+0x884>
 800ede0:	1c4b      	adds	r3, r1, #1
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	2939      	cmp	r1, #57	; 0x39
 800ede6:	d101      	bne.n	800edec <_svfprintf_r+0x5ac>
 800ede8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800edea:	7a9b      	ldrb	r3, [r3, #10]
 800edec:	7013      	strb	r3, [r2, #0]
 800edee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800edf0:	9a08      	ldr	r2, [sp, #32]
 800edf2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800edf4:	1a9b      	subs	r3, r3, r2
 800edf6:	930e      	str	r3, [sp, #56]	; 0x38
 800edf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800edfa:	2b47      	cmp	r3, #71	; 0x47
 800edfc:	d000      	beq.n	800ee00 <_svfprintf_r+0x5c0>
 800edfe:	e1c4      	b.n	800f18a <_svfprintf_r+0x94a>
 800ee00:	1ceb      	adds	r3, r5, #3
 800ee02:	db03      	blt.n	800ee0c <_svfprintf_r+0x5cc>
 800ee04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee06:	42ab      	cmp	r3, r5
 800ee08:	db00      	blt.n	800ee0c <_svfprintf_r+0x5cc>
 800ee0a:	e1e6      	b.n	800f1da <_svfprintf_r+0x99a>
 800ee0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee0e:	3b02      	subs	r3, #2
 800ee10:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee12:	223c      	movs	r2, #60	; 0x3c
 800ee14:	466b      	mov	r3, sp
 800ee16:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ee18:	189b      	adds	r3, r3, r2
 800ee1a:	1e6c      	subs	r4, r5, #1
 800ee1c:	3a1c      	subs	r2, #28
 800ee1e:	2000      	movs	r0, #0
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	9426      	str	r4, [sp, #152]	; 0x98
 800ee24:	4391      	bics	r1, r2
 800ee26:	2941      	cmp	r1, #65	; 0x41
 800ee28:	d102      	bne.n	800ee30 <_svfprintf_r+0x5f0>
 800ee2a:	330f      	adds	r3, #15
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	3001      	adds	r0, #1
 800ee30:	a928      	add	r1, sp, #160	; 0xa0
 800ee32:	700b      	strb	r3, [r1, #0]
 800ee34:	232b      	movs	r3, #43	; 0x2b
 800ee36:	2c00      	cmp	r4, #0
 800ee38:	da02      	bge.n	800ee40 <_svfprintf_r+0x600>
 800ee3a:	2401      	movs	r4, #1
 800ee3c:	3302      	adds	r3, #2
 800ee3e:	1b64      	subs	r4, r4, r5
 800ee40:	704b      	strb	r3, [r1, #1]
 800ee42:	2c09      	cmp	r4, #9
 800ee44:	dc00      	bgt.n	800ee48 <_svfprintf_r+0x608>
 800ee46:	e1ba      	b.n	800f1be <_svfprintf_r+0x97e>
 800ee48:	2337      	movs	r3, #55	; 0x37
 800ee4a:	250a      	movs	r5, #10
 800ee4c:	aa1e      	add	r2, sp, #120	; 0x78
 800ee4e:	189b      	adds	r3, r3, r2
 800ee50:	9310      	str	r3, [sp, #64]	; 0x40
 800ee52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee54:	0020      	movs	r0, r4
 800ee56:	9309      	str	r3, [sp, #36]	; 0x24
 800ee58:	0029      	movs	r1, r5
 800ee5a:	3b01      	subs	r3, #1
 800ee5c:	9310      	str	r3, [sp, #64]	; 0x40
 800ee5e:	f7f1 fadd 	bl	800041c <__aeabi_idivmod>
 800ee62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee64:	3130      	adds	r1, #48	; 0x30
 800ee66:	7019      	strb	r1, [r3, #0]
 800ee68:	0020      	movs	r0, r4
 800ee6a:	0029      	movs	r1, r5
 800ee6c:	9411      	str	r4, [sp, #68]	; 0x44
 800ee6e:	f7f1 f9ef 	bl	8000250 <__divsi3>
 800ee72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee74:	0004      	movs	r4, r0
 800ee76:	2b63      	cmp	r3, #99	; 0x63
 800ee78:	dceb      	bgt.n	800ee52 <_svfprintf_r+0x612>
 800ee7a:	222a      	movs	r2, #42	; 0x2a
 800ee7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee7e:	a81e      	add	r0, sp, #120	; 0x78
 800ee80:	1e99      	subs	r1, r3, #2
 800ee82:	1812      	adds	r2, r2, r0
 800ee84:	2037      	movs	r0, #55	; 0x37
 800ee86:	000b      	movs	r3, r1
 800ee88:	3430      	adds	r4, #48	; 0x30
 800ee8a:	700c      	strb	r4, [r1, #0]
 800ee8c:	ac1e      	add	r4, sp, #120	; 0x78
 800ee8e:	1900      	adds	r0, r0, r4
 800ee90:	4283      	cmp	r3, r0
 800ee92:	d200      	bcs.n	800ee96 <_svfprintf_r+0x656>
 800ee94:	e18e      	b.n	800f1b4 <_svfprintf_r+0x974>
 800ee96:	2300      	movs	r3, #0
 800ee98:	4281      	cmp	r1, r0
 800ee9a:	d804      	bhi.n	800eea6 <_svfprintf_r+0x666>
 800ee9c:	aa1e      	add	r2, sp, #120	; 0x78
 800ee9e:	3339      	adds	r3, #57	; 0x39
 800eea0:	189b      	adds	r3, r3, r2
 800eea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eea4:	1a9b      	subs	r3, r3, r2
 800eea6:	222a      	movs	r2, #42	; 0x2a
 800eea8:	a91e      	add	r1, sp, #120	; 0x78
 800eeaa:	1852      	adds	r2, r2, r1
 800eeac:	18d3      	adds	r3, r2, r3
 800eeae:	aa28      	add	r2, sp, #160	; 0xa0
 800eeb0:	1a9b      	subs	r3, r3, r2
 800eeb2:	931e      	str	r3, [sp, #120]	; 0x78
 800eeb4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800eeb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eeb8:	4694      	mov	ip, r2
 800eeba:	4463      	add	r3, ip
 800eebc:	9309      	str	r3, [sp, #36]	; 0x24
 800eebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	dc01      	bgt.n	800eec8 <_svfprintf_r+0x688>
 800eec4:	07f3      	lsls	r3, r6, #31
 800eec6:	d504      	bpl.n	800eed2 <_svfprintf_r+0x692>
 800eec8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800eeca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eecc:	4694      	mov	ip, r2
 800eece:	4463      	add	r3, ip
 800eed0:	9309      	str	r3, [sp, #36]	; 0x24
 800eed2:	2280      	movs	r2, #128	; 0x80
 800eed4:	4b74      	ldr	r3, [pc, #464]	; (800f0a8 <_svfprintf_r+0x868>)
 800eed6:	0052      	lsls	r2, r2, #1
 800eed8:	4033      	ands	r3, r6
 800eeda:	431a      	orrs	r2, r3
 800eedc:	2300      	movs	r3, #0
 800eede:	001d      	movs	r5, r3
 800eee0:	921a      	str	r2, [sp, #104]	; 0x68
 800eee2:	9310      	str	r3, [sp, #64]	; 0x40
 800eee4:	9311      	str	r3, [sp, #68]	; 0x44
 800eee6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800eee8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800eeea:	9319      	str	r3, [sp, #100]	; 0x64
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d006      	beq.n	800eefe <_svfprintf_r+0x6be>
 800eef0:	231b      	movs	r3, #27
 800eef2:	aa1e      	add	r2, sp, #120	; 0x78
 800eef4:	189b      	adds	r3, r3, r2
 800eef6:	222d      	movs	r2, #45	; 0x2d
 800eef8:	701a      	strb	r2, [r3, #0]
 800eefa:	2300      	movs	r3, #0
 800eefc:	9319      	str	r3, [sp, #100]	; 0x64
 800eefe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ef00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef02:	931a      	str	r3, [sp, #104]	; 0x68
 800ef04:	4293      	cmp	r3, r2
 800ef06:	da00      	bge.n	800ef0a <_svfprintf_r+0x6ca>
 800ef08:	921a      	str	r2, [sp, #104]	; 0x68
 800ef0a:	231b      	movs	r3, #27
 800ef0c:	aa1e      	add	r2, sp, #120	; 0x78
 800ef0e:	189b      	adds	r3, r3, r2
 800ef10:	781b      	ldrb	r3, [r3, #0]
 800ef12:	1e5a      	subs	r2, r3, #1
 800ef14:	4193      	sbcs	r3, r2
 800ef16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ef18:	18d3      	adds	r3, r2, r3
 800ef1a:	931a      	str	r3, [sp, #104]	; 0x68
 800ef1c:	0032      	movs	r2, r6
 800ef1e:	2302      	movs	r3, #2
 800ef20:	401a      	ands	r2, r3
 800ef22:	9220      	str	r2, [sp, #128]	; 0x80
 800ef24:	421e      	tst	r6, r3
 800ef26:	d002      	beq.n	800ef2e <_svfprintf_r+0x6ee>
 800ef28:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ef2a:	3302      	adds	r3, #2
 800ef2c:	931a      	str	r3, [sp, #104]	; 0x68
 800ef2e:	2384      	movs	r3, #132	; 0x84
 800ef30:	0032      	movs	r2, r6
 800ef32:	401a      	ands	r2, r3
 800ef34:	9221      	str	r2, [sp, #132]	; 0x84
 800ef36:	421e      	tst	r6, r3
 800ef38:	d11f      	bne.n	800ef7a <_svfprintf_r+0x73a>
 800ef3a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ef3c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ef3e:	1a9c      	subs	r4, r3, r2
 800ef40:	2c00      	cmp	r4, #0
 800ef42:	dd1a      	ble.n	800ef7a <_svfprintf_r+0x73a>
 800ef44:	0039      	movs	r1, r7
 800ef46:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ef48:	4858      	ldr	r0, [pc, #352]	; (800f0ac <_svfprintf_r+0x86c>)
 800ef4a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	3108      	adds	r1, #8
 800ef50:	6038      	str	r0, [r7, #0]
 800ef52:	2c10      	cmp	r4, #16
 800ef54:	dd00      	ble.n	800ef58 <_svfprintf_r+0x718>
 800ef56:	e31c      	b.n	800f592 <_svfprintf_r+0xd52>
 800ef58:	607c      	str	r4, [r7, #4]
 800ef5a:	18a4      	adds	r4, r4, r2
 800ef5c:	000f      	movs	r7, r1
 800ef5e:	942e      	str	r4, [sp, #184]	; 0xb8
 800ef60:	932d      	str	r3, [sp, #180]	; 0xb4
 800ef62:	2b07      	cmp	r3, #7
 800ef64:	dd09      	ble.n	800ef7a <_svfprintf_r+0x73a>
 800ef66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef68:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ef6a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ef6c:	f003 fcf8 	bl	8012960 <__ssprint_r>
 800ef70:	2800      	cmp	r0, #0
 800ef72:	d001      	beq.n	800ef78 <_svfprintf_r+0x738>
 800ef74:	f000 fe43 	bl	800fbfe <_svfprintf_r+0x13be>
 800ef78:	af2f      	add	r7, sp, #188	; 0xbc
 800ef7a:	221b      	movs	r2, #27
 800ef7c:	a91e      	add	r1, sp, #120	; 0x78
 800ef7e:	1852      	adds	r2, r2, r1
 800ef80:	7811      	ldrb	r1, [r2, #0]
 800ef82:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ef84:	2900      	cmp	r1, #0
 800ef86:	d014      	beq.n	800efb2 <_svfprintf_r+0x772>
 800ef88:	603a      	str	r2, [r7, #0]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	189b      	adds	r3, r3, r2
 800ef8e:	932e      	str	r3, [sp, #184]	; 0xb8
 800ef90:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ef92:	607a      	str	r2, [r7, #4]
 800ef94:	189b      	adds	r3, r3, r2
 800ef96:	932d      	str	r3, [sp, #180]	; 0xb4
 800ef98:	3708      	adds	r7, #8
 800ef9a:	2b07      	cmp	r3, #7
 800ef9c:	dd09      	ble.n	800efb2 <_svfprintf_r+0x772>
 800ef9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800efa0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800efa2:	aa2c      	add	r2, sp, #176	; 0xb0
 800efa4:	f003 fcdc 	bl	8012960 <__ssprint_r>
 800efa8:	2800      	cmp	r0, #0
 800efaa:	d001      	beq.n	800efb0 <_svfprintf_r+0x770>
 800efac:	f000 fe27 	bl	800fbfe <_svfprintf_r+0x13be>
 800efb0:	af2f      	add	r7, sp, #188	; 0xbc
 800efb2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800efb4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800efb6:	2a00      	cmp	r2, #0
 800efb8:	d015      	beq.n	800efe6 <_svfprintf_r+0x7a6>
 800efba:	aa25      	add	r2, sp, #148	; 0x94
 800efbc:	603a      	str	r2, [r7, #0]
 800efbe:	2202      	movs	r2, #2
 800efc0:	189b      	adds	r3, r3, r2
 800efc2:	932e      	str	r3, [sp, #184]	; 0xb8
 800efc4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800efc6:	607a      	str	r2, [r7, #4]
 800efc8:	3301      	adds	r3, #1
 800efca:	932d      	str	r3, [sp, #180]	; 0xb4
 800efcc:	3708      	adds	r7, #8
 800efce:	2b07      	cmp	r3, #7
 800efd0:	dd09      	ble.n	800efe6 <_svfprintf_r+0x7a6>
 800efd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800efd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800efd6:	aa2c      	add	r2, sp, #176	; 0xb0
 800efd8:	f003 fcc2 	bl	8012960 <__ssprint_r>
 800efdc:	2800      	cmp	r0, #0
 800efde:	d001      	beq.n	800efe4 <_svfprintf_r+0x7a4>
 800efe0:	f000 fe0d 	bl	800fbfe <_svfprintf_r+0x13be>
 800efe4:	af2f      	add	r7, sp, #188	; 0xbc
 800efe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800efe8:	2b80      	cmp	r3, #128	; 0x80
 800efea:	d11f      	bne.n	800f02c <_svfprintf_r+0x7ec>
 800efec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800efee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800eff0:	1a9c      	subs	r4, r3, r2
 800eff2:	2c00      	cmp	r4, #0
 800eff4:	dd1a      	ble.n	800f02c <_svfprintf_r+0x7ec>
 800eff6:	0039      	movs	r1, r7
 800eff8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800effa:	482d      	ldr	r0, [pc, #180]	; (800f0b0 <_svfprintf_r+0x870>)
 800effc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800effe:	3301      	adds	r3, #1
 800f000:	3108      	adds	r1, #8
 800f002:	6038      	str	r0, [r7, #0]
 800f004:	2c10      	cmp	r4, #16
 800f006:	dd00      	ble.n	800f00a <_svfprintf_r+0x7ca>
 800f008:	e2d6      	b.n	800f5b8 <_svfprintf_r+0xd78>
 800f00a:	607c      	str	r4, [r7, #4]
 800f00c:	18a4      	adds	r4, r4, r2
 800f00e:	000f      	movs	r7, r1
 800f010:	942e      	str	r4, [sp, #184]	; 0xb8
 800f012:	932d      	str	r3, [sp, #180]	; 0xb4
 800f014:	2b07      	cmp	r3, #7
 800f016:	dd09      	ble.n	800f02c <_svfprintf_r+0x7ec>
 800f018:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f01a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f01c:	aa2c      	add	r2, sp, #176	; 0xb0
 800f01e:	f003 fc9f 	bl	8012960 <__ssprint_r>
 800f022:	2800      	cmp	r0, #0
 800f024:	d001      	beq.n	800f02a <_svfprintf_r+0x7ea>
 800f026:	f000 fdea 	bl	800fbfe <_svfprintf_r+0x13be>
 800f02a:	af2f      	add	r7, sp, #188	; 0xbc
 800f02c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f02e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f030:	1a9c      	subs	r4, r3, r2
 800f032:	2c00      	cmp	r4, #0
 800f034:	dd1a      	ble.n	800f06c <_svfprintf_r+0x82c>
 800f036:	0039      	movs	r1, r7
 800f038:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f03a:	481d      	ldr	r0, [pc, #116]	; (800f0b0 <_svfprintf_r+0x870>)
 800f03c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f03e:	3301      	adds	r3, #1
 800f040:	3108      	adds	r1, #8
 800f042:	6038      	str	r0, [r7, #0]
 800f044:	2c10      	cmp	r4, #16
 800f046:	dd00      	ble.n	800f04a <_svfprintf_r+0x80a>
 800f048:	e2c9      	b.n	800f5de <_svfprintf_r+0xd9e>
 800f04a:	18a2      	adds	r2, r4, r2
 800f04c:	607c      	str	r4, [r7, #4]
 800f04e:	922e      	str	r2, [sp, #184]	; 0xb8
 800f050:	000f      	movs	r7, r1
 800f052:	932d      	str	r3, [sp, #180]	; 0xb4
 800f054:	2b07      	cmp	r3, #7
 800f056:	dd09      	ble.n	800f06c <_svfprintf_r+0x82c>
 800f058:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f05a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f05c:	aa2c      	add	r2, sp, #176	; 0xb0
 800f05e:	f003 fc7f 	bl	8012960 <__ssprint_r>
 800f062:	2800      	cmp	r0, #0
 800f064:	d001      	beq.n	800f06a <_svfprintf_r+0x82a>
 800f066:	f000 fdca 	bl	800fbfe <_svfprintf_r+0x13be>
 800f06a:	af2f      	add	r7, sp, #188	; 0xbc
 800f06c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f06e:	9319      	str	r3, [sp, #100]	; 0x64
 800f070:	05f3      	lsls	r3, r6, #23
 800f072:	d500      	bpl.n	800f076 <_svfprintf_r+0x836>
 800f074:	e2ce      	b.n	800f614 <_svfprintf_r+0xdd4>
 800f076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f078:	9b08      	ldr	r3, [sp, #32]
 800f07a:	4694      	mov	ip, r2
 800f07c:	603b      	str	r3, [r7, #0]
 800f07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f080:	607b      	str	r3, [r7, #4]
 800f082:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f084:	4463      	add	r3, ip
 800f086:	932e      	str	r3, [sp, #184]	; 0xb8
 800f088:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f08a:	3301      	adds	r3, #1
 800f08c:	932d      	str	r3, [sp, #180]	; 0xb4
 800f08e:	2b07      	cmp	r3, #7
 800f090:	dd00      	ble.n	800f094 <_svfprintf_r+0x854>
 800f092:	e3a3      	b.n	800f7dc <_svfprintf_r+0xf9c>
 800f094:	3708      	adds	r7, #8
 800f096:	e301      	b.n	800f69c <_svfprintf_r+0xe5c>
 800f098:	08015e1c 	.word	0x08015e1c
 800f09c:	08015e2d 	.word	0x08015e2d
 800f0a0:	40300000 	.word	0x40300000
 800f0a4:	3fe00000 	.word	0x3fe00000
 800f0a8:	fffffbff 	.word	0xfffffbff
 800f0ac:	08015e40 	.word	0x08015e40
 800f0b0:	08015e50 	.word	0x08015e50
 800f0b4:	9b08      	ldr	r3, [sp, #32]
 800f0b6:	930c      	str	r3, [sp, #48]	; 0x30
 800f0b8:	e610      	b.n	800ecdc <_svfprintf_r+0x49c>
 800f0ba:	2306      	movs	r3, #6
 800f0bc:	e5fd      	b.n	800ecba <_svfprintf_r+0x47a>
 800f0be:	930e      	str	r3, [sp, #56]	; 0x38
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	e61a      	b.n	800ecfa <_svfprintf_r+0x4ba>
 800f0c4:	7010      	strb	r0, [r2, #0]
 800f0c6:	e684      	b.n	800edd2 <_svfprintf_r+0x592>
 800f0c8:	7018      	strb	r0, [r3, #0]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	1aca      	subs	r2, r1, r3
 800f0ce:	d5fb      	bpl.n	800f0c8 <_svfprintf_r+0x888>
 800f0d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	3201      	adds	r2, #1
 800f0d6:	db01      	blt.n	800f0dc <_svfprintf_r+0x89c>
 800f0d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f0da:	3301      	adds	r3, #1
 800f0dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0de:	18d3      	adds	r3, r2, r3
 800f0e0:	9323      	str	r3, [sp, #140]	; 0x8c
 800f0e2:	e684      	b.n	800edee <_svfprintf_r+0x5ae>
 800f0e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0e6:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f0e8:	2030      	movs	r0, #48	; 0x30
 800f0ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0ec:	1851      	adds	r1, r2, r1
 800f0ee:	e7ed      	b.n	800f0cc <_svfprintf_r+0x88c>
 800f0f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f0f2:	2303      	movs	r3, #3
 800f0f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f0f6:	2a46      	cmp	r2, #70	; 0x46
 800f0f8:	d006      	beq.n	800f108 <_svfprintf_r+0x8c8>
 800f0fa:	0014      	movs	r4, r2
 800f0fc:	3c45      	subs	r4, #69	; 0x45
 800f0fe:	4262      	negs	r2, r4
 800f100:	4154      	adcs	r4, r2
 800f102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f104:	3b01      	subs	r3, #1
 800f106:	1914      	adds	r4, r2, r4
 800f108:	aa2a      	add	r2, sp, #168	; 0xa8
 800f10a:	9204      	str	r2, [sp, #16]
 800f10c:	aa27      	add	r2, sp, #156	; 0x9c
 800f10e:	9203      	str	r2, [sp, #12]
 800f110:	aa26      	add	r2, sp, #152	; 0x98
 800f112:	9202      	str	r2, [sp, #8]
 800f114:	9300      	str	r3, [sp, #0]
 800f116:	002a      	movs	r2, r5
 800f118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f11a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f11c:	9401      	str	r4, [sp, #4]
 800f11e:	f002 fad7 	bl	80116d0 <_dtoa_r>
 800f122:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f124:	9008      	str	r0, [sp, #32]
 800f126:	2b47      	cmp	r3, #71	; 0x47
 800f128:	d103      	bne.n	800f132 <_svfprintf_r+0x8f2>
 800f12a:	07f3      	lsls	r3, r6, #31
 800f12c:	d401      	bmi.n	800f132 <_svfprintf_r+0x8f2>
 800f12e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800f130:	e65e      	b.n	800edf0 <_svfprintf_r+0x5b0>
 800f132:	9b08      	ldr	r3, [sp, #32]
 800f134:	191b      	adds	r3, r3, r4
 800f136:	9311      	str	r3, [sp, #68]	; 0x44
 800f138:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f13a:	2b46      	cmp	r3, #70	; 0x46
 800f13c:	d112      	bne.n	800f164 <_svfprintf_r+0x924>
 800f13e:	9b08      	ldr	r3, [sp, #32]
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	2b30      	cmp	r3, #48	; 0x30
 800f144:	d10a      	bne.n	800f15c <_svfprintf_r+0x91c>
 800f146:	2200      	movs	r2, #0
 800f148:	2300      	movs	r3, #0
 800f14a:	0028      	movs	r0, r5
 800f14c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f14e:	f7f1 f97b 	bl	8000448 <__aeabi_dcmpeq>
 800f152:	2800      	cmp	r0, #0
 800f154:	d102      	bne.n	800f15c <_svfprintf_r+0x91c>
 800f156:	2301      	movs	r3, #1
 800f158:	1b1b      	subs	r3, r3, r4
 800f15a:	9326      	str	r3, [sp, #152]	; 0x98
 800f15c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f15e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f160:	18d3      	adds	r3, r2, r3
 800f162:	9311      	str	r3, [sp, #68]	; 0x44
 800f164:	2200      	movs	r2, #0
 800f166:	2300      	movs	r3, #0
 800f168:	0028      	movs	r0, r5
 800f16a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f16c:	f7f1 f96c 	bl	8000448 <__aeabi_dcmpeq>
 800f170:	2800      	cmp	r0, #0
 800f172:	d001      	beq.n	800f178 <_svfprintf_r+0x938>
 800f174:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f176:	932a      	str	r3, [sp, #168]	; 0xa8
 800f178:	2230      	movs	r2, #48	; 0x30
 800f17a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800f17c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f17e:	4299      	cmp	r1, r3
 800f180:	d9d5      	bls.n	800f12e <_svfprintf_r+0x8ee>
 800f182:	1c59      	adds	r1, r3, #1
 800f184:	912a      	str	r1, [sp, #168]	; 0xa8
 800f186:	701a      	strb	r2, [r3, #0]
 800f188:	e7f7      	b.n	800f17a <_svfprintf_r+0x93a>
 800f18a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f18c:	2b46      	cmp	r3, #70	; 0x46
 800f18e:	d000      	beq.n	800f192 <_svfprintf_r+0x952>
 800f190:	e63f      	b.n	800ee12 <_svfprintf_r+0x5d2>
 800f192:	2201      	movs	r2, #1
 800f194:	0033      	movs	r3, r6
 800f196:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f198:	4013      	ands	r3, r2
 800f19a:	430b      	orrs	r3, r1
 800f19c:	2d00      	cmp	r5, #0
 800f19e:	dd2c      	ble.n	800f1fa <_svfprintf_r+0x9ba>
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d046      	beq.n	800f232 <_svfprintf_r+0x9f2>
 800f1a4:	000a      	movs	r2, r1
 800f1a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f1a8:	18eb      	adds	r3, r5, r3
 800f1aa:	18d3      	adds	r3, r2, r3
 800f1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800f1ae:	2366      	movs	r3, #102	; 0x66
 800f1b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f1b2:	e030      	b.n	800f216 <_svfprintf_r+0x9d6>
 800f1b4:	781c      	ldrb	r4, [r3, #0]
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	7014      	strb	r4, [r2, #0]
 800f1ba:	3201      	adds	r2, #1
 800f1bc:	e668      	b.n	800ee90 <_svfprintf_r+0x650>
 800f1be:	222a      	movs	r2, #42	; 0x2a
 800f1c0:	ab1e      	add	r3, sp, #120	; 0x78
 800f1c2:	18d2      	adds	r2, r2, r3
 800f1c4:	2800      	cmp	r0, #0
 800f1c6:	d104      	bne.n	800f1d2 <_svfprintf_r+0x992>
 800f1c8:	2330      	movs	r3, #48	; 0x30
 800f1ca:	222b      	movs	r2, #43	; 0x2b
 800f1cc:	708b      	strb	r3, [r1, #2]
 800f1ce:	ab1e      	add	r3, sp, #120	; 0x78
 800f1d0:	18d2      	adds	r2, r2, r3
 800f1d2:	3430      	adds	r4, #48	; 0x30
 800f1d4:	1c53      	adds	r3, r2, #1
 800f1d6:	7014      	strb	r4, [r2, #0]
 800f1d8:	e669      	b.n	800eeae <_svfprintf_r+0x66e>
 800f1da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1dc:	42ab      	cmp	r3, r5
 800f1de:	dd12      	ble.n	800f206 <_svfprintf_r+0x9c6>
 800f1e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f1e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1e4:	4694      	mov	ip, r2
 800f1e6:	4463      	add	r3, ip
 800f1e8:	9309      	str	r3, [sp, #36]	; 0x24
 800f1ea:	2367      	movs	r3, #103	; 0x67
 800f1ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800f1ee:	2d00      	cmp	r5, #0
 800f1f0:	dc11      	bgt.n	800f216 <_svfprintf_r+0x9d6>
 800f1f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1f4:	1b5b      	subs	r3, r3, r5
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	e00c      	b.n	800f214 <_svfprintf_r+0x9d4>
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d01b      	beq.n	800f236 <_svfprintf_r+0x9f6>
 800f1fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f202:	3301      	adds	r3, #1
 800f204:	e7d1      	b.n	800f1aa <_svfprintf_r+0x96a>
 800f206:	2367      	movs	r3, #103	; 0x67
 800f208:	9509      	str	r5, [sp, #36]	; 0x24
 800f20a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f20c:	07f3      	lsls	r3, r6, #31
 800f20e:	d502      	bpl.n	800f216 <_svfprintf_r+0x9d6>
 800f210:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f212:	18eb      	adds	r3, r5, r3
 800f214:	9309      	str	r3, [sp, #36]	; 0x24
 800f216:	2380      	movs	r3, #128	; 0x80
 800f218:	0032      	movs	r2, r6
 800f21a:	00db      	lsls	r3, r3, #3
 800f21c:	401a      	ands	r2, r3
 800f21e:	9211      	str	r2, [sp, #68]	; 0x44
 800f220:	2200      	movs	r2, #0
 800f222:	9210      	str	r2, [sp, #64]	; 0x40
 800f224:	421e      	tst	r6, r3
 800f226:	d100      	bne.n	800f22a <_svfprintf_r+0x9ea>
 800f228:	e65d      	b.n	800eee6 <_svfprintf_r+0x6a6>
 800f22a:	4295      	cmp	r5, r2
 800f22c:	dc25      	bgt.n	800f27a <_svfprintf_r+0xa3a>
 800f22e:	9211      	str	r2, [sp, #68]	; 0x44
 800f230:	e659      	b.n	800eee6 <_svfprintf_r+0x6a6>
 800f232:	9509      	str	r5, [sp, #36]	; 0x24
 800f234:	e7bb      	b.n	800f1ae <_svfprintf_r+0x96e>
 800f236:	2366      	movs	r3, #102	; 0x66
 800f238:	9209      	str	r2, [sp, #36]	; 0x24
 800f23a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f23c:	e7eb      	b.n	800f216 <_svfprintf_r+0x9d6>
 800f23e:	42ab      	cmp	r3, r5
 800f240:	da0e      	bge.n	800f260 <_svfprintf_r+0xa20>
 800f242:	1aed      	subs	r5, r5, r3
 800f244:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f246:	785b      	ldrb	r3, [r3, #1]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d012      	beq.n	800f272 <_svfprintf_r+0xa32>
 800f24c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f24e:	3301      	adds	r3, #1
 800f250:	9311      	str	r3, [sp, #68]	; 0x44
 800f252:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f254:	3301      	adds	r3, #1
 800f256:	9312      	str	r3, [sp, #72]	; 0x48
 800f258:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	2bff      	cmp	r3, #255	; 0xff
 800f25e:	d1ee      	bne.n	800f23e <_svfprintf_r+0x9fe>
 800f260:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f262:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f264:	189b      	adds	r3, r3, r2
 800f266:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f268:	4353      	muls	r3, r2
 800f26a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f26c:	189b      	adds	r3, r3, r2
 800f26e:	9309      	str	r3, [sp, #36]	; 0x24
 800f270:	e639      	b.n	800eee6 <_svfprintf_r+0x6a6>
 800f272:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f274:	3301      	adds	r3, #1
 800f276:	9310      	str	r3, [sp, #64]	; 0x40
 800f278:	e7ee      	b.n	800f258 <_svfprintf_r+0xa18>
 800f27a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f27c:	9311      	str	r3, [sp, #68]	; 0x44
 800f27e:	e7eb      	b.n	800f258 <_svfprintf_r+0xa18>
 800f280:	1d23      	adds	r3, r4, #4
 800f282:	930d      	str	r3, [sp, #52]	; 0x34
 800f284:	06b3      	lsls	r3, r6, #26
 800f286:	d509      	bpl.n	800f29c <_svfprintf_r+0xa5c>
 800f288:	6823      	ldr	r3, [r4, #0]
 800f28a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f28c:	601a      	str	r2, [r3, #0]
 800f28e:	17d2      	asrs	r2, r2, #31
 800f290:	605a      	str	r2, [r3, #4]
 800f292:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f294:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800f296:	9308      	str	r3, [sp, #32]
 800f298:	f7ff fb0d 	bl	800e8b6 <_svfprintf_r+0x76>
 800f29c:	06f3      	lsls	r3, r6, #27
 800f29e:	d503      	bpl.n	800f2a8 <_svfprintf_r+0xa68>
 800f2a0:	6823      	ldr	r3, [r4, #0]
 800f2a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f2a4:	601a      	str	r2, [r3, #0]
 800f2a6:	e7f4      	b.n	800f292 <_svfprintf_r+0xa52>
 800f2a8:	0673      	lsls	r3, r6, #25
 800f2aa:	d503      	bpl.n	800f2b4 <_svfprintf_r+0xa74>
 800f2ac:	6823      	ldr	r3, [r4, #0]
 800f2ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f2b0:	801a      	strh	r2, [r3, #0]
 800f2b2:	e7ee      	b.n	800f292 <_svfprintf_r+0xa52>
 800f2b4:	05b6      	lsls	r6, r6, #22
 800f2b6:	d5f3      	bpl.n	800f2a0 <_svfprintf_r+0xa60>
 800f2b8:	6823      	ldr	r3, [r4, #0]
 800f2ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f2bc:	701a      	strb	r2, [r3, #0]
 800f2be:	e7e8      	b.n	800f292 <_svfprintf_r+0xa52>
 800f2c0:	2310      	movs	r3, #16
 800f2c2:	431e      	orrs	r6, r3
 800f2c4:	2320      	movs	r3, #32
 800f2c6:	0030      	movs	r0, r6
 800f2c8:	4018      	ands	r0, r3
 800f2ca:	421e      	tst	r6, r3
 800f2cc:	d00f      	beq.n	800f2ee <_svfprintf_r+0xaae>
 800f2ce:	3b19      	subs	r3, #25
 800f2d0:	3407      	adds	r4, #7
 800f2d2:	439c      	bics	r4, r3
 800f2d4:	0022      	movs	r2, r4
 800f2d6:	ca18      	ldmia	r2!, {r3, r4}
 800f2d8:	9306      	str	r3, [sp, #24]
 800f2da:	9407      	str	r4, [sp, #28]
 800f2dc:	920d      	str	r2, [sp, #52]	; 0x34
 800f2de:	4bc9      	ldr	r3, [pc, #804]	; (800f604 <_svfprintf_r+0xdc4>)
 800f2e0:	401e      	ands	r6, r3
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	221b      	movs	r2, #27
 800f2e6:	a91e      	add	r1, sp, #120	; 0x78
 800f2e8:	1852      	adds	r2, r2, r1
 800f2ea:	2100      	movs	r1, #0
 800f2ec:	e430      	b.n	800eb50 <_svfprintf_r+0x310>
 800f2ee:	0022      	movs	r2, r4
 800f2f0:	ca08      	ldmia	r2!, {r3}
 800f2f2:	0031      	movs	r1, r6
 800f2f4:	920d      	str	r2, [sp, #52]	; 0x34
 800f2f6:	2210      	movs	r2, #16
 800f2f8:	4011      	ands	r1, r2
 800f2fa:	4216      	tst	r6, r2
 800f2fc:	d002      	beq.n	800f304 <_svfprintf_r+0xac4>
 800f2fe:	9306      	str	r3, [sp, #24]
 800f300:	9007      	str	r0, [sp, #28]
 800f302:	e7ec      	b.n	800f2de <_svfprintf_r+0xa9e>
 800f304:	2240      	movs	r2, #64	; 0x40
 800f306:	0030      	movs	r0, r6
 800f308:	4010      	ands	r0, r2
 800f30a:	4216      	tst	r6, r2
 800f30c:	d003      	beq.n	800f316 <_svfprintf_r+0xad6>
 800f30e:	b29b      	uxth	r3, r3
 800f310:	9306      	str	r3, [sp, #24]
 800f312:	9107      	str	r1, [sp, #28]
 800f314:	e7e3      	b.n	800f2de <_svfprintf_r+0xa9e>
 800f316:	2280      	movs	r2, #128	; 0x80
 800f318:	0031      	movs	r1, r6
 800f31a:	0092      	lsls	r2, r2, #2
 800f31c:	4011      	ands	r1, r2
 800f31e:	4216      	tst	r6, r2
 800f320:	d0f6      	beq.n	800f310 <_svfprintf_r+0xad0>
 800f322:	b2db      	uxtb	r3, r3
 800f324:	e7eb      	b.n	800f2fe <_svfprintf_r+0xabe>
 800f326:	0023      	movs	r3, r4
 800f328:	cb04      	ldmia	r3!, {r2}
 800f32a:	49b7      	ldr	r1, [pc, #732]	; (800f608 <_svfprintf_r+0xdc8>)
 800f32c:	9206      	str	r2, [sp, #24]
 800f32e:	aa25      	add	r2, sp, #148	; 0x94
 800f330:	8011      	strh	r1, [r2, #0]
 800f332:	4ab6      	ldr	r2, [pc, #728]	; (800f60c <_svfprintf_r+0xdcc>)
 800f334:	930d      	str	r3, [sp, #52]	; 0x34
 800f336:	2300      	movs	r3, #0
 800f338:	921f      	str	r2, [sp, #124]	; 0x7c
 800f33a:	2278      	movs	r2, #120	; 0x78
 800f33c:	9307      	str	r3, [sp, #28]
 800f33e:	3302      	adds	r3, #2
 800f340:	431e      	orrs	r6, r3
 800f342:	920f      	str	r2, [sp, #60]	; 0x3c
 800f344:	e7ce      	b.n	800f2e4 <_svfprintf_r+0xaa4>
 800f346:	0023      	movs	r3, r4
 800f348:	cb04      	ldmia	r3!, {r2}
 800f34a:	2400      	movs	r4, #0
 800f34c:	930d      	str	r3, [sp, #52]	; 0x34
 800f34e:	231b      	movs	r3, #27
 800f350:	9208      	str	r2, [sp, #32]
 800f352:	aa1e      	add	r2, sp, #120	; 0x78
 800f354:	189b      	adds	r3, r3, r2
 800f356:	701c      	strb	r4, [r3, #0]
 800f358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f35a:	3301      	adds	r3, #1
 800f35c:	d00e      	beq.n	800f37c <_svfprintf_r+0xb3c>
 800f35e:	0021      	movs	r1, r4
 800f360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f362:	9808      	ldr	r0, [sp, #32]
 800f364:	f002 f83a 	bl	80113dc <memchr>
 800f368:	900c      	str	r0, [sp, #48]	; 0x30
 800f36a:	42a0      	cmp	r0, r4
 800f36c:	d100      	bne.n	800f370 <_svfprintf_r+0xb30>
 800f36e:	e10d      	b.n	800f58c <_svfprintf_r+0xd4c>
 800f370:	9a08      	ldr	r2, [sp, #32]
 800f372:	1a83      	subs	r3, r0, r2
 800f374:	9309      	str	r3, [sp, #36]	; 0x24
 800f376:	0023      	movs	r3, r4
 800f378:	940c      	str	r4, [sp, #48]	; 0x30
 800f37a:	e44e      	b.n	800ec1a <_svfprintf_r+0x3da>
 800f37c:	9808      	ldr	r0, [sp, #32]
 800f37e:	f7f0 fec1 	bl	8000104 <strlen>
 800f382:	9009      	str	r0, [sp, #36]	; 0x24
 800f384:	e7f7      	b.n	800f376 <_svfprintf_r+0xb36>
 800f386:	2310      	movs	r3, #16
 800f388:	431e      	orrs	r6, r3
 800f38a:	2320      	movs	r3, #32
 800f38c:	0030      	movs	r0, r6
 800f38e:	4018      	ands	r0, r3
 800f390:	421e      	tst	r6, r3
 800f392:	d009      	beq.n	800f3a8 <_svfprintf_r+0xb68>
 800f394:	3b19      	subs	r3, #25
 800f396:	3407      	adds	r4, #7
 800f398:	439c      	bics	r4, r3
 800f39a:	0022      	movs	r2, r4
 800f39c:	ca18      	ldmia	r2!, {r3, r4}
 800f39e:	9306      	str	r3, [sp, #24]
 800f3a0:	9407      	str	r4, [sp, #28]
 800f3a2:	920d      	str	r2, [sp, #52]	; 0x34
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	e79d      	b.n	800f2e4 <_svfprintf_r+0xaa4>
 800f3a8:	0023      	movs	r3, r4
 800f3aa:	cb04      	ldmia	r3!, {r2}
 800f3ac:	0031      	movs	r1, r6
 800f3ae:	930d      	str	r3, [sp, #52]	; 0x34
 800f3b0:	2310      	movs	r3, #16
 800f3b2:	4019      	ands	r1, r3
 800f3b4:	421e      	tst	r6, r3
 800f3b6:	d003      	beq.n	800f3c0 <_svfprintf_r+0xb80>
 800f3b8:	9206      	str	r2, [sp, #24]
 800f3ba:	9007      	str	r0, [sp, #28]
 800f3bc:	3b0f      	subs	r3, #15
 800f3be:	e791      	b.n	800f2e4 <_svfprintf_r+0xaa4>
 800f3c0:	2340      	movs	r3, #64	; 0x40
 800f3c2:	0030      	movs	r0, r6
 800f3c4:	4018      	ands	r0, r3
 800f3c6:	421e      	tst	r6, r3
 800f3c8:	d003      	beq.n	800f3d2 <_svfprintf_r+0xb92>
 800f3ca:	b293      	uxth	r3, r2
 800f3cc:	9306      	str	r3, [sp, #24]
 800f3ce:	9107      	str	r1, [sp, #28]
 800f3d0:	e7e8      	b.n	800f3a4 <_svfprintf_r+0xb64>
 800f3d2:	2380      	movs	r3, #128	; 0x80
 800f3d4:	0031      	movs	r1, r6
 800f3d6:	009b      	lsls	r3, r3, #2
 800f3d8:	4019      	ands	r1, r3
 800f3da:	421e      	tst	r6, r3
 800f3dc:	d003      	beq.n	800f3e6 <_svfprintf_r+0xba6>
 800f3de:	b2d3      	uxtb	r3, r2
 800f3e0:	9306      	str	r3, [sp, #24]
 800f3e2:	9007      	str	r0, [sp, #28]
 800f3e4:	e7de      	b.n	800f3a4 <_svfprintf_r+0xb64>
 800f3e6:	9206      	str	r2, [sp, #24]
 800f3e8:	e7f1      	b.n	800f3ce <_svfprintf_r+0xb8e>
 800f3ea:	4b89      	ldr	r3, [pc, #548]	; (800f610 <_svfprintf_r+0xdd0>)
 800f3ec:	0030      	movs	r0, r6
 800f3ee:	931f      	str	r3, [sp, #124]	; 0x7c
 800f3f0:	2320      	movs	r3, #32
 800f3f2:	4018      	ands	r0, r3
 800f3f4:	421e      	tst	r6, r3
 800f3f6:	d01a      	beq.n	800f42e <_svfprintf_r+0xbee>
 800f3f8:	3b19      	subs	r3, #25
 800f3fa:	3407      	adds	r4, #7
 800f3fc:	439c      	bics	r4, r3
 800f3fe:	0022      	movs	r2, r4
 800f400:	ca18      	ldmia	r2!, {r3, r4}
 800f402:	9306      	str	r3, [sp, #24]
 800f404:	9407      	str	r4, [sp, #28]
 800f406:	920d      	str	r2, [sp, #52]	; 0x34
 800f408:	07f3      	lsls	r3, r6, #31
 800f40a:	d50a      	bpl.n	800f422 <_svfprintf_r+0xbe2>
 800f40c:	9b06      	ldr	r3, [sp, #24]
 800f40e:	9a07      	ldr	r2, [sp, #28]
 800f410:	4313      	orrs	r3, r2
 800f412:	d006      	beq.n	800f422 <_svfprintf_r+0xbe2>
 800f414:	2230      	movs	r2, #48	; 0x30
 800f416:	ab25      	add	r3, sp, #148	; 0x94
 800f418:	701a      	strb	r2, [r3, #0]
 800f41a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f41c:	705a      	strb	r2, [r3, #1]
 800f41e:	2302      	movs	r3, #2
 800f420:	431e      	orrs	r6, r3
 800f422:	4b78      	ldr	r3, [pc, #480]	; (800f604 <_svfprintf_r+0xdc4>)
 800f424:	401e      	ands	r6, r3
 800f426:	2302      	movs	r3, #2
 800f428:	e75c      	b.n	800f2e4 <_svfprintf_r+0xaa4>
 800f42a:	4b78      	ldr	r3, [pc, #480]	; (800f60c <_svfprintf_r+0xdcc>)
 800f42c:	e7de      	b.n	800f3ec <_svfprintf_r+0xbac>
 800f42e:	0023      	movs	r3, r4
 800f430:	cb04      	ldmia	r3!, {r2}
 800f432:	0031      	movs	r1, r6
 800f434:	930d      	str	r3, [sp, #52]	; 0x34
 800f436:	2310      	movs	r3, #16
 800f438:	4019      	ands	r1, r3
 800f43a:	421e      	tst	r6, r3
 800f43c:	d002      	beq.n	800f444 <_svfprintf_r+0xc04>
 800f43e:	9206      	str	r2, [sp, #24]
 800f440:	9007      	str	r0, [sp, #28]
 800f442:	e7e1      	b.n	800f408 <_svfprintf_r+0xbc8>
 800f444:	2340      	movs	r3, #64	; 0x40
 800f446:	0030      	movs	r0, r6
 800f448:	4018      	ands	r0, r3
 800f44a:	421e      	tst	r6, r3
 800f44c:	d003      	beq.n	800f456 <_svfprintf_r+0xc16>
 800f44e:	b293      	uxth	r3, r2
 800f450:	9306      	str	r3, [sp, #24]
 800f452:	9107      	str	r1, [sp, #28]
 800f454:	e7d8      	b.n	800f408 <_svfprintf_r+0xbc8>
 800f456:	2380      	movs	r3, #128	; 0x80
 800f458:	0031      	movs	r1, r6
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	4019      	ands	r1, r3
 800f45e:	421e      	tst	r6, r3
 800f460:	d002      	beq.n	800f468 <_svfprintf_r+0xc28>
 800f462:	b2d3      	uxtb	r3, r2
 800f464:	9306      	str	r3, [sp, #24]
 800f466:	e7eb      	b.n	800f440 <_svfprintf_r+0xc00>
 800f468:	9206      	str	r2, [sp, #24]
 800f46a:	e7f2      	b.n	800f452 <_svfprintf_r+0xc12>
 800f46c:	9b07      	ldr	r3, [sp, #28]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d10a      	bne.n	800f488 <_svfprintf_r+0xc48>
 800f472:	9b06      	ldr	r3, [sp, #24]
 800f474:	2b09      	cmp	r3, #9
 800f476:	d807      	bhi.n	800f488 <_svfprintf_r+0xc48>
 800f478:	23e7      	movs	r3, #231	; 0xe7
 800f47a:	aa1e      	add	r2, sp, #120	; 0x78
 800f47c:	189b      	adds	r3, r3, r2
 800f47e:	9a06      	ldr	r2, [sp, #24]
 800f480:	3230      	adds	r2, #48	; 0x30
 800f482:	701a      	strb	r2, [r3, #0]
 800f484:	f000 fc18 	bl	800fcb8 <_svfprintf_r+0x1478>
 800f488:	2680      	movs	r6, #128	; 0x80
 800f48a:	2300      	movs	r3, #0
 800f48c:	00f6      	lsls	r6, r6, #3
 800f48e:	930e      	str	r3, [sp, #56]	; 0x38
 800f490:	ad58      	add	r5, sp, #352	; 0x160
 800f492:	4026      	ands	r6, r4
 800f494:	220a      	movs	r2, #10
 800f496:	9806      	ldr	r0, [sp, #24]
 800f498:	9907      	ldr	r1, [sp, #28]
 800f49a:	2300      	movs	r3, #0
 800f49c:	f7f1 f802 	bl	80004a4 <__aeabi_uldivmod>
 800f4a0:	1e6b      	subs	r3, r5, #1
 800f4a2:	3230      	adds	r2, #48	; 0x30
 800f4a4:	9308      	str	r3, [sp, #32]
 800f4a6:	701a      	strb	r2, [r3, #0]
 800f4a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4aa:	900c      	str	r0, [sp, #48]	; 0x30
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	9110      	str	r1, [sp, #64]	; 0x40
 800f4b0:	930e      	str	r3, [sp, #56]	; 0x38
 800f4b2:	2e00      	cmp	r6, #0
 800f4b4:	d01d      	beq.n	800f4f2 <_svfprintf_r+0xcb2>
 800f4b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f4b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	d118      	bne.n	800f4f2 <_svfprintf_r+0xcb2>
 800f4c0:	2aff      	cmp	r2, #255	; 0xff
 800f4c2:	d016      	beq.n	800f4f2 <_svfprintf_r+0xcb2>
 800f4c4:	9b07      	ldr	r3, [sp, #28]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d102      	bne.n	800f4d0 <_svfprintf_r+0xc90>
 800f4ca:	9b06      	ldr	r3, [sp, #24]
 800f4cc:	2b09      	cmp	r3, #9
 800f4ce:	d910      	bls.n	800f4f2 <_svfprintf_r+0xcb2>
 800f4d0:	9b08      	ldr	r3, [sp, #32]
 800f4d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f4d4:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f4d6:	1a9b      	subs	r3, r3, r2
 800f4d8:	0018      	movs	r0, r3
 800f4da:	9308      	str	r3, [sp, #32]
 800f4dc:	f7fd ff97 	bl	800d40e <strncpy>
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f4e4:	920e      	str	r2, [sp, #56]	; 0x38
 800f4e6:	785b      	ldrb	r3, [r3, #1]
 800f4e8:	1e5a      	subs	r2, r3, #1
 800f4ea:	4193      	sbcs	r3, r2
 800f4ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f4ee:	18d3      	adds	r3, r2, r3
 800f4f0:	9312      	str	r3, [sp, #72]	; 0x48
 800f4f2:	9b07      	ldr	r3, [sp, #28]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d10f      	bne.n	800f518 <_svfprintf_r+0xcd8>
 800f4f8:	9b06      	ldr	r3, [sp, #24]
 800f4fa:	2b09      	cmp	r3, #9
 800f4fc:	d80c      	bhi.n	800f518 <_svfprintf_r+0xcd8>
 800f4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f500:	9a08      	ldr	r2, [sp, #32]
 800f502:	9319      	str	r3, [sp, #100]	; 0x64
 800f504:	ab58      	add	r3, sp, #352	; 0x160
 800f506:	1a9b      	subs	r3, r3, r2
 800f508:	9309      	str	r3, [sp, #36]	; 0x24
 800f50a:	2300      	movs	r3, #0
 800f50c:	0026      	movs	r6, r4
 800f50e:	930c      	str	r3, [sp, #48]	; 0x30
 800f510:	001d      	movs	r5, r3
 800f512:	9310      	str	r3, [sp, #64]	; 0x40
 800f514:	9311      	str	r3, [sp, #68]	; 0x44
 800f516:	e4f2      	b.n	800eefe <_svfprintf_r+0x6be>
 800f518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f51a:	9d08      	ldr	r5, [sp, #32]
 800f51c:	9306      	str	r3, [sp, #24]
 800f51e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f520:	9307      	str	r3, [sp, #28]
 800f522:	e7b7      	b.n	800f494 <_svfprintf_r+0xc54>
 800f524:	200f      	movs	r0, #15
 800f526:	ab58      	add	r3, sp, #352	; 0x160
 800f528:	9308      	str	r3, [sp, #32]
 800f52a:	9b08      	ldr	r3, [sp, #32]
 800f52c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f52e:	3b01      	subs	r3, #1
 800f530:	9308      	str	r3, [sp, #32]
 800f532:	9b06      	ldr	r3, [sp, #24]
 800f534:	4003      	ands	r3, r0
 800f536:	5cd3      	ldrb	r3, [r2, r3]
 800f538:	9a08      	ldr	r2, [sp, #32]
 800f53a:	7013      	strb	r3, [r2, #0]
 800f53c:	9b07      	ldr	r3, [sp, #28]
 800f53e:	0719      	lsls	r1, r3, #28
 800f540:	9b06      	ldr	r3, [sp, #24]
 800f542:	091a      	lsrs	r2, r3, #4
 800f544:	9b07      	ldr	r3, [sp, #28]
 800f546:	4311      	orrs	r1, r2
 800f548:	091b      	lsrs	r3, r3, #4
 800f54a:	9307      	str	r3, [sp, #28]
 800f54c:	000b      	movs	r3, r1
 800f54e:	9a07      	ldr	r2, [sp, #28]
 800f550:	9106      	str	r1, [sp, #24]
 800f552:	4313      	orrs	r3, r2
 800f554:	d1e9      	bne.n	800f52a <_svfprintf_r+0xcea>
 800f556:	e7d2      	b.n	800f4fe <_svfprintf_r+0xcbe>
 800f558:	aa58      	add	r2, sp, #352	; 0x160
 800f55a:	9208      	str	r2, [sp, #32]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d1ce      	bne.n	800f4fe <_svfprintf_r+0xcbe>
 800f560:	07f6      	lsls	r6, r6, #31
 800f562:	d5cc      	bpl.n	800f4fe <_svfprintf_r+0xcbe>
 800f564:	aa1e      	add	r2, sp, #120	; 0x78
 800f566:	33e7      	adds	r3, #231	; 0xe7
 800f568:	189b      	adds	r3, r3, r2
 800f56a:	2230      	movs	r2, #48	; 0x30
 800f56c:	e789      	b.n	800f482 <_svfprintf_r+0xc42>
 800f56e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f570:	2b00      	cmp	r3, #0
 800f572:	d100      	bne.n	800f576 <_svfprintf_r+0xd36>
 800f574:	e364      	b.n	800fc40 <_svfprintf_r+0x1400>
 800f576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f578:	211b      	movs	r1, #27
 800f57a:	ab3f      	add	r3, sp, #252	; 0xfc
 800f57c:	701a      	strb	r2, [r3, #0]
 800f57e:	2200      	movs	r2, #0
 800f580:	a81e      	add	r0, sp, #120	; 0x78
 800f582:	1809      	adds	r1, r1, r0
 800f584:	700a      	strb	r2, [r1, #0]
 800f586:	940d      	str	r4, [sp, #52]	; 0x34
 800f588:	f7ff fabd 	bl	800eb06 <_svfprintf_r+0x2c6>
 800f58c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f58e:	f7ff fb44 	bl	800ec1a <_svfprintf_r+0x3da>
 800f592:	2010      	movs	r0, #16
 800f594:	1812      	adds	r2, r2, r0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	922e      	str	r2, [sp, #184]	; 0xb8
 800f59a:	932d      	str	r3, [sp, #180]	; 0xb4
 800f59c:	2b07      	cmp	r3, #7
 800f59e:	dd08      	ble.n	800f5b2 <_svfprintf_r+0xd72>
 800f5a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f5a4:	aa2c      	add	r2, sp, #176	; 0xb0
 800f5a6:	f003 f9db 	bl	8012960 <__ssprint_r>
 800f5aa:	2800      	cmp	r0, #0
 800f5ac:	d000      	beq.n	800f5b0 <_svfprintf_r+0xd70>
 800f5ae:	e326      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f5b0:	a92f      	add	r1, sp, #188	; 0xbc
 800f5b2:	000f      	movs	r7, r1
 800f5b4:	3c10      	subs	r4, #16
 800f5b6:	e4c5      	b.n	800ef44 <_svfprintf_r+0x704>
 800f5b8:	2010      	movs	r0, #16
 800f5ba:	1812      	adds	r2, r2, r0
 800f5bc:	6078      	str	r0, [r7, #4]
 800f5be:	922e      	str	r2, [sp, #184]	; 0xb8
 800f5c0:	932d      	str	r3, [sp, #180]	; 0xb4
 800f5c2:	2b07      	cmp	r3, #7
 800f5c4:	dd08      	ble.n	800f5d8 <_svfprintf_r+0xd98>
 800f5c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f5ca:	aa2c      	add	r2, sp, #176	; 0xb0
 800f5cc:	f003 f9c8 	bl	8012960 <__ssprint_r>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	d000      	beq.n	800f5d6 <_svfprintf_r+0xd96>
 800f5d4:	e313      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f5d6:	a92f      	add	r1, sp, #188	; 0xbc
 800f5d8:	000f      	movs	r7, r1
 800f5da:	3c10      	subs	r4, #16
 800f5dc:	e50b      	b.n	800eff6 <_svfprintf_r+0x7b6>
 800f5de:	2010      	movs	r0, #16
 800f5e0:	1812      	adds	r2, r2, r0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	922e      	str	r2, [sp, #184]	; 0xb8
 800f5e6:	932d      	str	r3, [sp, #180]	; 0xb4
 800f5e8:	2b07      	cmp	r3, #7
 800f5ea:	dd08      	ble.n	800f5fe <_svfprintf_r+0xdbe>
 800f5ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f5f0:	aa2c      	add	r2, sp, #176	; 0xb0
 800f5f2:	f003 f9b5 	bl	8012960 <__ssprint_r>
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	d000      	beq.n	800f5fc <_svfprintf_r+0xdbc>
 800f5fa:	e300      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f5fc:	a92f      	add	r1, sp, #188	; 0xbc
 800f5fe:	000f      	movs	r7, r1
 800f600:	3c10      	subs	r4, #16
 800f602:	e518      	b.n	800f036 <_svfprintf_r+0x7f6>
 800f604:	fffffbff 	.word	0xfffffbff
 800f608:	00007830 	.word	0x00007830
 800f60c:	08015e1c 	.word	0x08015e1c
 800f610:	08015e2d 	.word	0x08015e2d
 800f614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f616:	2b65      	cmp	r3, #101	; 0x65
 800f618:	dc00      	bgt.n	800f61c <_svfprintf_r+0xddc>
 800f61a:	e241      	b.n	800faa0 <_svfprintf_r+0x1260>
 800f61c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f61e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f620:	2200      	movs	r2, #0
 800f622:	2300      	movs	r3, #0
 800f624:	f7f0 ff10 	bl	8000448 <__aeabi_dcmpeq>
 800f628:	2800      	cmp	r0, #0
 800f62a:	d077      	beq.n	800f71c <_svfprintf_r+0xedc>
 800f62c:	4bca      	ldr	r3, [pc, #808]	; (800f958 <_svfprintf_r+0x1118>)
 800f62e:	603b      	str	r3, [r7, #0]
 800f630:	2301      	movs	r3, #1
 800f632:	607b      	str	r3, [r7, #4]
 800f634:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f636:	3708      	adds	r7, #8
 800f638:	3301      	adds	r3, #1
 800f63a:	932e      	str	r3, [sp, #184]	; 0xb8
 800f63c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f63e:	3301      	adds	r3, #1
 800f640:	932d      	str	r3, [sp, #180]	; 0xb4
 800f642:	2b07      	cmp	r3, #7
 800f644:	dd08      	ble.n	800f658 <_svfprintf_r+0xe18>
 800f646:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f648:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f64a:	aa2c      	add	r2, sp, #176	; 0xb0
 800f64c:	f003 f988 	bl	8012960 <__ssprint_r>
 800f650:	2800      	cmp	r0, #0
 800f652:	d000      	beq.n	800f656 <_svfprintf_r+0xe16>
 800f654:	e2d3      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f656:	af2f      	add	r7, sp, #188	; 0xbc
 800f658:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f65a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f65c:	4293      	cmp	r3, r2
 800f65e:	db01      	blt.n	800f664 <_svfprintf_r+0xe24>
 800f660:	07f3      	lsls	r3, r6, #31
 800f662:	d51b      	bpl.n	800f69c <_svfprintf_r+0xe5c>
 800f664:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f666:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f668:	603b      	str	r3, [r7, #0]
 800f66a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f66c:	607b      	str	r3, [r7, #4]
 800f66e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f670:	3708      	adds	r7, #8
 800f672:	189b      	adds	r3, r3, r2
 800f674:	932e      	str	r3, [sp, #184]	; 0xb8
 800f676:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f678:	3301      	adds	r3, #1
 800f67a:	932d      	str	r3, [sp, #180]	; 0xb4
 800f67c:	2b07      	cmp	r3, #7
 800f67e:	dd08      	ble.n	800f692 <_svfprintf_r+0xe52>
 800f680:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f682:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f684:	aa2c      	add	r2, sp, #176	; 0xb0
 800f686:	f003 f96b 	bl	8012960 <__ssprint_r>
 800f68a:	2800      	cmp	r0, #0
 800f68c:	d000      	beq.n	800f690 <_svfprintf_r+0xe50>
 800f68e:	e2b6      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f690:	af2f      	add	r7, sp, #188	; 0xbc
 800f692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f694:	2510      	movs	r5, #16
 800f696:	1e5c      	subs	r4, r3, #1
 800f698:	2c00      	cmp	r4, #0
 800f69a:	dc2e      	bgt.n	800f6fa <_svfprintf_r+0xeba>
 800f69c:	0776      	lsls	r6, r6, #29
 800f69e:	d500      	bpl.n	800f6a2 <_svfprintf_r+0xe62>
 800f6a0:	e290      	b.n	800fbc4 <_svfprintf_r+0x1384>
 800f6a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f6a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	da00      	bge.n	800f6ac <_svfprintf_r+0xe6c>
 800f6aa:	0013      	movs	r3, r2
 800f6ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f6ae:	18d3      	adds	r3, r2, r3
 800f6b0:	9317      	str	r3, [sp, #92]	; 0x5c
 800f6b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d007      	beq.n	800f6c8 <_svfprintf_r+0xe88>
 800f6b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f6ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f6bc:	aa2c      	add	r2, sp, #176	; 0xb0
 800f6be:	f003 f94f 	bl	8012960 <__ssprint_r>
 800f6c2:	2800      	cmp	r0, #0
 800f6c4:	d000      	beq.n	800f6c8 <_svfprintf_r+0xe88>
 800f6c6:	e29a      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	932d      	str	r3, [sp, #180]	; 0xb4
 800f6cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d000      	beq.n	800f6d4 <_svfprintf_r+0xe94>
 800f6d2:	e2b0      	b.n	800fc36 <_svfprintf_r+0x13f6>
 800f6d4:	af2f      	add	r7, sp, #188	; 0xbc
 800f6d6:	e5dc      	b.n	800f292 <_svfprintf_r+0xa52>
 800f6d8:	3210      	adds	r2, #16
 800f6da:	607d      	str	r5, [r7, #4]
 800f6dc:	922e      	str	r2, [sp, #184]	; 0xb8
 800f6de:	932d      	str	r3, [sp, #180]	; 0xb4
 800f6e0:	2b07      	cmp	r3, #7
 800f6e2:	dd08      	ble.n	800f6f6 <_svfprintf_r+0xeb6>
 800f6e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f6e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f6e8:	aa2c      	add	r2, sp, #176	; 0xb0
 800f6ea:	f003 f939 	bl	8012960 <__ssprint_r>
 800f6ee:	2800      	cmp	r0, #0
 800f6f0:	d000      	beq.n	800f6f4 <_svfprintf_r+0xeb4>
 800f6f2:	e284      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f6f4:	a92f      	add	r1, sp, #188	; 0xbc
 800f6f6:	000f      	movs	r7, r1
 800f6f8:	3c10      	subs	r4, #16
 800f6fa:	0039      	movs	r1, r7
 800f6fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f6fe:	4897      	ldr	r0, [pc, #604]	; (800f95c <_svfprintf_r+0x111c>)
 800f700:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f702:	3301      	adds	r3, #1
 800f704:	3108      	adds	r1, #8
 800f706:	6038      	str	r0, [r7, #0]
 800f708:	2c10      	cmp	r4, #16
 800f70a:	dce5      	bgt.n	800f6d8 <_svfprintf_r+0xe98>
 800f70c:	607c      	str	r4, [r7, #4]
 800f70e:	18a4      	adds	r4, r4, r2
 800f710:	942e      	str	r4, [sp, #184]	; 0xb8
 800f712:	000f      	movs	r7, r1
 800f714:	932d      	str	r3, [sp, #180]	; 0xb4
 800f716:	2b07      	cmp	r3, #7
 800f718:	ddc0      	ble.n	800f69c <_svfprintf_r+0xe5c>
 800f71a:	e05f      	b.n	800f7dc <_svfprintf_r+0xf9c>
 800f71c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f71e:	2b00      	cmp	r3, #0
 800f720:	dc78      	bgt.n	800f814 <_svfprintf_r+0xfd4>
 800f722:	4b8d      	ldr	r3, [pc, #564]	; (800f958 <_svfprintf_r+0x1118>)
 800f724:	603b      	str	r3, [r7, #0]
 800f726:	2301      	movs	r3, #1
 800f728:	607b      	str	r3, [r7, #4]
 800f72a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f72c:	3708      	adds	r7, #8
 800f72e:	3301      	adds	r3, #1
 800f730:	932e      	str	r3, [sp, #184]	; 0xb8
 800f732:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f734:	3301      	adds	r3, #1
 800f736:	932d      	str	r3, [sp, #180]	; 0xb4
 800f738:	2b07      	cmp	r3, #7
 800f73a:	dd08      	ble.n	800f74e <_svfprintf_r+0xf0e>
 800f73c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f73e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f740:	aa2c      	add	r2, sp, #176	; 0xb0
 800f742:	f003 f90d 	bl	8012960 <__ssprint_r>
 800f746:	2800      	cmp	r0, #0
 800f748:	d000      	beq.n	800f74c <_svfprintf_r+0xf0c>
 800f74a:	e258      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f74c:	af2f      	add	r7, sp, #188	; 0xbc
 800f74e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f750:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f752:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f754:	430b      	orrs	r3, r1
 800f756:	2101      	movs	r1, #1
 800f758:	4031      	ands	r1, r6
 800f75a:	430b      	orrs	r3, r1
 800f75c:	d09e      	beq.n	800f69c <_svfprintf_r+0xe5c>
 800f75e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f760:	603b      	str	r3, [r7, #0]
 800f762:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f764:	607b      	str	r3, [r7, #4]
 800f766:	189a      	adds	r2, r3, r2
 800f768:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f76a:	922e      	str	r2, [sp, #184]	; 0xb8
 800f76c:	3301      	adds	r3, #1
 800f76e:	932d      	str	r3, [sp, #180]	; 0xb4
 800f770:	3708      	adds	r7, #8
 800f772:	2b07      	cmp	r3, #7
 800f774:	dd08      	ble.n	800f788 <_svfprintf_r+0xf48>
 800f776:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f778:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f77a:	aa2c      	add	r2, sp, #176	; 0xb0
 800f77c:	f003 f8f0 	bl	8012960 <__ssprint_r>
 800f780:	2800      	cmp	r0, #0
 800f782:	d000      	beq.n	800f786 <_svfprintf_r+0xf46>
 800f784:	e23b      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f786:	af2f      	add	r7, sp, #188	; 0xbc
 800f788:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800f78a:	2c00      	cmp	r4, #0
 800f78c:	da19      	bge.n	800f7c2 <_svfprintf_r+0xf82>
 800f78e:	0038      	movs	r0, r7
 800f790:	2510      	movs	r5, #16
 800f792:	4264      	negs	r4, r4
 800f794:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800f796:	4a71      	ldr	r2, [pc, #452]	; (800f95c <_svfprintf_r+0x111c>)
 800f798:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f79a:	3101      	adds	r1, #1
 800f79c:	3708      	adds	r7, #8
 800f79e:	6002      	str	r2, [r0, #0]
 800f7a0:	2c10      	cmp	r4, #16
 800f7a2:	dc25      	bgt.n	800f7f0 <_svfprintf_r+0xfb0>
 800f7a4:	6044      	str	r4, [r0, #4]
 800f7a6:	18e4      	adds	r4, r4, r3
 800f7a8:	942e      	str	r4, [sp, #184]	; 0xb8
 800f7aa:	912d      	str	r1, [sp, #180]	; 0xb4
 800f7ac:	2907      	cmp	r1, #7
 800f7ae:	dd08      	ble.n	800f7c2 <_svfprintf_r+0xf82>
 800f7b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f7b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f7b4:	aa2c      	add	r2, sp, #176	; 0xb0
 800f7b6:	f003 f8d3 	bl	8012960 <__ssprint_r>
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	d000      	beq.n	800f7c0 <_svfprintf_r+0xf80>
 800f7be:	e21e      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f7c0:	af2f      	add	r7, sp, #188	; 0xbc
 800f7c2:	9b08      	ldr	r3, [sp, #32]
 800f7c4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f7c6:	603b      	str	r3, [r7, #0]
 800f7c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7ca:	18d2      	adds	r2, r2, r3
 800f7cc:	922e      	str	r2, [sp, #184]	; 0xb8
 800f7ce:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f7d0:	607b      	str	r3, [r7, #4]
 800f7d2:	3201      	adds	r2, #1
 800f7d4:	922d      	str	r2, [sp, #180]	; 0xb4
 800f7d6:	2a07      	cmp	r2, #7
 800f7d8:	dc00      	bgt.n	800f7dc <_svfprintf_r+0xf9c>
 800f7da:	e45b      	b.n	800f094 <_svfprintf_r+0x854>
 800f7dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f7de:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f7e0:	aa2c      	add	r2, sp, #176	; 0xb0
 800f7e2:	f003 f8bd 	bl	8012960 <__ssprint_r>
 800f7e6:	2800      	cmp	r0, #0
 800f7e8:	d000      	beq.n	800f7ec <_svfprintf_r+0xfac>
 800f7ea:	e208      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f7ec:	af2f      	add	r7, sp, #188	; 0xbc
 800f7ee:	e755      	b.n	800f69c <_svfprintf_r+0xe5c>
 800f7f0:	3310      	adds	r3, #16
 800f7f2:	6045      	str	r5, [r0, #4]
 800f7f4:	932e      	str	r3, [sp, #184]	; 0xb8
 800f7f6:	912d      	str	r1, [sp, #180]	; 0xb4
 800f7f8:	2907      	cmp	r1, #7
 800f7fa:	dd08      	ble.n	800f80e <_svfprintf_r+0xfce>
 800f7fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f7fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f800:	aa2c      	add	r2, sp, #176	; 0xb0
 800f802:	f003 f8ad 	bl	8012960 <__ssprint_r>
 800f806:	2800      	cmp	r0, #0
 800f808:	d000      	beq.n	800f80c <_svfprintf_r+0xfcc>
 800f80a:	e1f8      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f80c:	af2f      	add	r7, sp, #188	; 0xbc
 800f80e:	0038      	movs	r0, r7
 800f810:	3c10      	subs	r4, #16
 800f812:	e7bf      	b.n	800f794 <_svfprintf_r+0xf54>
 800f814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f816:	002c      	movs	r4, r5
 800f818:	429d      	cmp	r5, r3
 800f81a:	dd00      	ble.n	800f81e <_svfprintf_r+0xfde>
 800f81c:	001c      	movs	r4, r3
 800f81e:	2c00      	cmp	r4, #0
 800f820:	dd14      	ble.n	800f84c <_svfprintf_r+0x100c>
 800f822:	9b08      	ldr	r3, [sp, #32]
 800f824:	607c      	str	r4, [r7, #4]
 800f826:	603b      	str	r3, [r7, #0]
 800f828:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f82a:	3708      	adds	r7, #8
 800f82c:	18e3      	adds	r3, r4, r3
 800f82e:	932e      	str	r3, [sp, #184]	; 0xb8
 800f830:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f832:	3301      	adds	r3, #1
 800f834:	932d      	str	r3, [sp, #180]	; 0xb4
 800f836:	2b07      	cmp	r3, #7
 800f838:	dd08      	ble.n	800f84c <_svfprintf_r+0x100c>
 800f83a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f83c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f83e:	aa2c      	add	r2, sp, #176	; 0xb0
 800f840:	f003 f88e 	bl	8012960 <__ssprint_r>
 800f844:	2800      	cmp	r0, #0
 800f846:	d000      	beq.n	800f84a <_svfprintf_r+0x100a>
 800f848:	e1d9      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f84a:	af2f      	add	r7, sp, #188	; 0xbc
 800f84c:	43e3      	mvns	r3, r4
 800f84e:	17db      	asrs	r3, r3, #31
 800f850:	401c      	ands	r4, r3
 800f852:	1b2c      	subs	r4, r5, r4
 800f854:	2c00      	cmp	r4, #0
 800f856:	dd18      	ble.n	800f88a <_svfprintf_r+0x104a>
 800f858:	0039      	movs	r1, r7
 800f85a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f85c:	483f      	ldr	r0, [pc, #252]	; (800f95c <_svfprintf_r+0x111c>)
 800f85e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f860:	3301      	adds	r3, #1
 800f862:	3108      	adds	r1, #8
 800f864:	6038      	str	r0, [r7, #0]
 800f866:	2c10      	cmp	r4, #16
 800f868:	dc7a      	bgt.n	800f960 <_svfprintf_r+0x1120>
 800f86a:	607c      	str	r4, [r7, #4]
 800f86c:	18a4      	adds	r4, r4, r2
 800f86e:	000f      	movs	r7, r1
 800f870:	942e      	str	r4, [sp, #184]	; 0xb8
 800f872:	932d      	str	r3, [sp, #180]	; 0xb4
 800f874:	2b07      	cmp	r3, #7
 800f876:	dd08      	ble.n	800f88a <_svfprintf_r+0x104a>
 800f878:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f87a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f87c:	aa2c      	add	r2, sp, #176	; 0xb0
 800f87e:	f003 f86f 	bl	8012960 <__ssprint_r>
 800f882:	2800      	cmp	r0, #0
 800f884:	d000      	beq.n	800f888 <_svfprintf_r+0x1048>
 800f886:	e1ba      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f888:	af2f      	add	r7, sp, #188	; 0xbc
 800f88a:	9b08      	ldr	r3, [sp, #32]
 800f88c:	195d      	adds	r5, r3, r5
 800f88e:	0573      	lsls	r3, r6, #21
 800f890:	d50b      	bpl.n	800f8aa <_svfprintf_r+0x106a>
 800f892:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f894:	2b00      	cmp	r3, #0
 800f896:	d176      	bne.n	800f986 <_svfprintf_r+0x1146>
 800f898:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d176      	bne.n	800f98c <_svfprintf_r+0x114c>
 800f89e:	9b08      	ldr	r3, [sp, #32]
 800f8a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f8a2:	189b      	adds	r3, r3, r2
 800f8a4:	429d      	cmp	r5, r3
 800f8a6:	d900      	bls.n	800f8aa <_svfprintf_r+0x106a>
 800f8a8:	001d      	movs	r5, r3
 800f8aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f8ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	db01      	blt.n	800f8b6 <_svfprintf_r+0x1076>
 800f8b2:	07f3      	lsls	r3, r6, #31
 800f8b4:	d516      	bpl.n	800f8e4 <_svfprintf_r+0x10a4>
 800f8b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f8b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f8ba:	603b      	str	r3, [r7, #0]
 800f8bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f8be:	607b      	str	r3, [r7, #4]
 800f8c0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f8c2:	3708      	adds	r7, #8
 800f8c4:	189b      	adds	r3, r3, r2
 800f8c6:	932e      	str	r3, [sp, #184]	; 0xb8
 800f8c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	932d      	str	r3, [sp, #180]	; 0xb4
 800f8ce:	2b07      	cmp	r3, #7
 800f8d0:	dd08      	ble.n	800f8e4 <_svfprintf_r+0x10a4>
 800f8d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f8d6:	aa2c      	add	r2, sp, #176	; 0xb0
 800f8d8:	f003 f842 	bl	8012960 <__ssprint_r>
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	d000      	beq.n	800f8e2 <_svfprintf_r+0x10a2>
 800f8e0:	e18d      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f8e2:	af2f      	add	r7, sp, #188	; 0xbc
 800f8e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f8e6:	9b08      	ldr	r3, [sp, #32]
 800f8e8:	4694      	mov	ip, r2
 800f8ea:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800f8ec:	4463      	add	r3, ip
 800f8ee:	1b5b      	subs	r3, r3, r5
 800f8f0:	1b14      	subs	r4, r2, r4
 800f8f2:	429c      	cmp	r4, r3
 800f8f4:	dd00      	ble.n	800f8f8 <_svfprintf_r+0x10b8>
 800f8f6:	001c      	movs	r4, r3
 800f8f8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f8fa:	2c00      	cmp	r4, #0
 800f8fc:	dd12      	ble.n	800f924 <_svfprintf_r+0x10e4>
 800f8fe:	18e3      	adds	r3, r4, r3
 800f900:	932e      	str	r3, [sp, #184]	; 0xb8
 800f902:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f904:	603d      	str	r5, [r7, #0]
 800f906:	3301      	adds	r3, #1
 800f908:	607c      	str	r4, [r7, #4]
 800f90a:	932d      	str	r3, [sp, #180]	; 0xb4
 800f90c:	3708      	adds	r7, #8
 800f90e:	2b07      	cmp	r3, #7
 800f910:	dd08      	ble.n	800f924 <_svfprintf_r+0x10e4>
 800f912:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f914:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f916:	aa2c      	add	r2, sp, #176	; 0xb0
 800f918:	f003 f822 	bl	8012960 <__ssprint_r>
 800f91c:	2800      	cmp	r0, #0
 800f91e:	d000      	beq.n	800f922 <_svfprintf_r+0x10e2>
 800f920:	e16d      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f922:	af2f      	add	r7, sp, #188	; 0xbc
 800f924:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f926:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f928:	2510      	movs	r5, #16
 800f92a:	1ad3      	subs	r3, r2, r3
 800f92c:	43e2      	mvns	r2, r4
 800f92e:	17d2      	asrs	r2, r2, #31
 800f930:	4014      	ands	r4, r2
 800f932:	1b1c      	subs	r4, r3, r4
 800f934:	2c00      	cmp	r4, #0
 800f936:	dc00      	bgt.n	800f93a <_svfprintf_r+0x10fa>
 800f938:	e6b0      	b.n	800f69c <_svfprintf_r+0xe5c>
 800f93a:	0039      	movs	r1, r7
 800f93c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f93e:	4807      	ldr	r0, [pc, #28]	; (800f95c <_svfprintf_r+0x111c>)
 800f940:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f942:	3301      	adds	r3, #1
 800f944:	3108      	adds	r1, #8
 800f946:	6038      	str	r0, [r7, #0]
 800f948:	2c10      	cmp	r4, #16
 800f94a:	dd00      	ble.n	800f94e <_svfprintf_r+0x110e>
 800f94c:	e096      	b.n	800fa7c <_svfprintf_r+0x123c>
 800f94e:	1912      	adds	r2, r2, r4
 800f950:	607c      	str	r4, [r7, #4]
 800f952:	922e      	str	r2, [sp, #184]	; 0xb8
 800f954:	e6dd      	b.n	800f712 <_svfprintf_r+0xed2>
 800f956:	46c0      	nop			; (mov r8, r8)
 800f958:	08015e3e 	.word	0x08015e3e
 800f95c:	08015e50 	.word	0x08015e50
 800f960:	2010      	movs	r0, #16
 800f962:	1812      	adds	r2, r2, r0
 800f964:	6078      	str	r0, [r7, #4]
 800f966:	922e      	str	r2, [sp, #184]	; 0xb8
 800f968:	932d      	str	r3, [sp, #180]	; 0xb4
 800f96a:	2b07      	cmp	r3, #7
 800f96c:	dd08      	ble.n	800f980 <_svfprintf_r+0x1140>
 800f96e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f970:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f972:	aa2c      	add	r2, sp, #176	; 0xb0
 800f974:	f002 fff4 	bl	8012960 <__ssprint_r>
 800f978:	2800      	cmp	r0, #0
 800f97a:	d000      	beq.n	800f97e <_svfprintf_r+0x113e>
 800f97c:	e13f      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f97e:	a92f      	add	r1, sp, #188	; 0xbc
 800f980:	000f      	movs	r7, r1
 800f982:	3c10      	subs	r4, #16
 800f984:	e768      	b.n	800f858 <_svfprintf_r+0x1018>
 800f986:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d05d      	beq.n	800fa48 <_svfprintf_r+0x1208>
 800f98c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f98e:	3b01      	subs	r3, #1
 800f990:	9310      	str	r3, [sp, #64]	; 0x40
 800f992:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f994:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f996:	603b      	str	r3, [r7, #0]
 800f998:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f99a:	607b      	str	r3, [r7, #4]
 800f99c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f99e:	3708      	adds	r7, #8
 800f9a0:	189b      	adds	r3, r3, r2
 800f9a2:	932e      	str	r3, [sp, #184]	; 0xb8
 800f9a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f9a6:	3301      	adds	r3, #1
 800f9a8:	932d      	str	r3, [sp, #180]	; 0xb4
 800f9aa:	2b07      	cmp	r3, #7
 800f9ac:	dd08      	ble.n	800f9c0 <_svfprintf_r+0x1180>
 800f9ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f9b2:	aa2c      	add	r2, sp, #176	; 0xb0
 800f9b4:	f002 ffd4 	bl	8012960 <__ssprint_r>
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	d000      	beq.n	800f9be <_svfprintf_r+0x117e>
 800f9bc:	e11f      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f9be:	af2f      	add	r7, sp, #188	; 0xbc
 800f9c0:	9b08      	ldr	r3, [sp, #32]
 800f9c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f9c4:	189c      	adds	r4, r3, r2
 800f9c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f9c8:	1b64      	subs	r4, r4, r5
 800f9ca:	781b      	ldrb	r3, [r3, #0]
 800f9cc:	429c      	cmp	r4, r3
 800f9ce:	dd00      	ble.n	800f9d2 <_svfprintf_r+0x1192>
 800f9d0:	001c      	movs	r4, r3
 800f9d2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f9d4:	2c00      	cmp	r4, #0
 800f9d6:	dd12      	ble.n	800f9fe <_svfprintf_r+0x11be>
 800f9d8:	18e3      	adds	r3, r4, r3
 800f9da:	932e      	str	r3, [sp, #184]	; 0xb8
 800f9dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f9de:	603d      	str	r5, [r7, #0]
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	607c      	str	r4, [r7, #4]
 800f9e4:	932d      	str	r3, [sp, #180]	; 0xb4
 800f9e6:	3708      	adds	r7, #8
 800f9e8:	2b07      	cmp	r3, #7
 800f9ea:	dd08      	ble.n	800f9fe <_svfprintf_r+0x11be>
 800f9ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f9f0:	aa2c      	add	r2, sp, #176	; 0xb0
 800f9f2:	f002 ffb5 	bl	8012960 <__ssprint_r>
 800f9f6:	2800      	cmp	r0, #0
 800f9f8:	d000      	beq.n	800f9fc <_svfprintf_r+0x11bc>
 800f9fa:	e100      	b.n	800fbfe <_svfprintf_r+0x13be>
 800f9fc:	af2f      	add	r7, sp, #188	; 0xbc
 800f9fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fa00:	781a      	ldrb	r2, [r3, #0]
 800fa02:	43e3      	mvns	r3, r4
 800fa04:	17db      	asrs	r3, r3, #31
 800fa06:	401c      	ands	r4, r3
 800fa08:	1b14      	subs	r4, r2, r4
 800fa0a:	2c00      	cmp	r4, #0
 800fa0c:	dd18      	ble.n	800fa40 <_svfprintf_r+0x1200>
 800fa0e:	0039      	movs	r1, r7
 800fa10:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fa12:	48aa      	ldr	r0, [pc, #680]	; (800fcbc <_svfprintf_r+0x147c>)
 800fa14:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800fa16:	3301      	adds	r3, #1
 800fa18:	3108      	adds	r1, #8
 800fa1a:	6038      	str	r0, [r7, #0]
 800fa1c:	2c10      	cmp	r4, #16
 800fa1e:	dc1a      	bgt.n	800fa56 <_svfprintf_r+0x1216>
 800fa20:	1912      	adds	r2, r2, r4
 800fa22:	607c      	str	r4, [r7, #4]
 800fa24:	922e      	str	r2, [sp, #184]	; 0xb8
 800fa26:	000f      	movs	r7, r1
 800fa28:	932d      	str	r3, [sp, #180]	; 0xb4
 800fa2a:	2b07      	cmp	r3, #7
 800fa2c:	dd08      	ble.n	800fa40 <_svfprintf_r+0x1200>
 800fa2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa30:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa32:	aa2c      	add	r2, sp, #176	; 0xb0
 800fa34:	f002 ff94 	bl	8012960 <__ssprint_r>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	d000      	beq.n	800fa3e <_svfprintf_r+0x11fe>
 800fa3c:	e0df      	b.n	800fbfe <_svfprintf_r+0x13be>
 800fa3e:	af2f      	add	r7, sp, #188	; 0xbc
 800fa40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	18ed      	adds	r5, r5, r3
 800fa46:	e724      	b.n	800f892 <_svfprintf_r+0x1052>
 800fa48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fa4a:	3b01      	subs	r3, #1
 800fa4c:	9312      	str	r3, [sp, #72]	; 0x48
 800fa4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa50:	3b01      	subs	r3, #1
 800fa52:	9311      	str	r3, [sp, #68]	; 0x44
 800fa54:	e79d      	b.n	800f992 <_svfprintf_r+0x1152>
 800fa56:	2010      	movs	r0, #16
 800fa58:	1812      	adds	r2, r2, r0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	922e      	str	r2, [sp, #184]	; 0xb8
 800fa5e:	932d      	str	r3, [sp, #180]	; 0xb4
 800fa60:	2b07      	cmp	r3, #7
 800fa62:	dd08      	ble.n	800fa76 <_svfprintf_r+0x1236>
 800fa64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa66:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa68:	aa2c      	add	r2, sp, #176	; 0xb0
 800fa6a:	f002 ff79 	bl	8012960 <__ssprint_r>
 800fa6e:	2800      	cmp	r0, #0
 800fa70:	d000      	beq.n	800fa74 <_svfprintf_r+0x1234>
 800fa72:	e0c4      	b.n	800fbfe <_svfprintf_r+0x13be>
 800fa74:	a92f      	add	r1, sp, #188	; 0xbc
 800fa76:	000f      	movs	r7, r1
 800fa78:	3c10      	subs	r4, #16
 800fa7a:	e7c8      	b.n	800fa0e <_svfprintf_r+0x11ce>
 800fa7c:	3210      	adds	r2, #16
 800fa7e:	607d      	str	r5, [r7, #4]
 800fa80:	922e      	str	r2, [sp, #184]	; 0xb8
 800fa82:	932d      	str	r3, [sp, #180]	; 0xb4
 800fa84:	2b07      	cmp	r3, #7
 800fa86:	dd08      	ble.n	800fa9a <_svfprintf_r+0x125a>
 800fa88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa8c:	aa2c      	add	r2, sp, #176	; 0xb0
 800fa8e:	f002 ff67 	bl	8012960 <__ssprint_r>
 800fa92:	2800      	cmp	r0, #0
 800fa94:	d000      	beq.n	800fa98 <_svfprintf_r+0x1258>
 800fa96:	e0b2      	b.n	800fbfe <_svfprintf_r+0x13be>
 800fa98:	a92f      	add	r1, sp, #188	; 0xbc
 800fa9a:	000f      	movs	r7, r1
 800fa9c:	3c10      	subs	r4, #16
 800fa9e:	e74c      	b.n	800f93a <_svfprintf_r+0x10fa>
 800faa0:	003c      	movs	r4, r7
 800faa2:	9919      	ldr	r1, [sp, #100]	; 0x64
 800faa4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800faa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800faa8:	3101      	adds	r1, #1
 800faaa:	3301      	adds	r3, #1
 800faac:	3408      	adds	r4, #8
 800faae:	2a01      	cmp	r2, #1
 800fab0:	dc03      	bgt.n	800faba <_svfprintf_r+0x127a>
 800fab2:	2201      	movs	r2, #1
 800fab4:	4216      	tst	r6, r2
 800fab6:	d100      	bne.n	800faba <_svfprintf_r+0x127a>
 800fab8:	e07f      	b.n	800fbba <_svfprintf_r+0x137a>
 800faba:	9a08      	ldr	r2, [sp, #32]
 800fabc:	912e      	str	r1, [sp, #184]	; 0xb8
 800fabe:	603a      	str	r2, [r7, #0]
 800fac0:	2201      	movs	r2, #1
 800fac2:	932d      	str	r3, [sp, #180]	; 0xb4
 800fac4:	607a      	str	r2, [r7, #4]
 800fac6:	2b07      	cmp	r3, #7
 800fac8:	dd08      	ble.n	800fadc <_svfprintf_r+0x129c>
 800faca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800facc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800face:	aa2c      	add	r2, sp, #176	; 0xb0
 800fad0:	f002 ff46 	bl	8012960 <__ssprint_r>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	d000      	beq.n	800fada <_svfprintf_r+0x129a>
 800fad8:	e091      	b.n	800fbfe <_svfprintf_r+0x13be>
 800fada:	ac2f      	add	r4, sp, #188	; 0xbc
 800fadc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fade:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fae0:	6023      	str	r3, [r4, #0]
 800fae2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fae4:	6063      	str	r3, [r4, #4]
 800fae6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fae8:	3408      	adds	r4, #8
 800faea:	189b      	adds	r3, r3, r2
 800faec:	932e      	str	r3, [sp, #184]	; 0xb8
 800faee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800faf0:	3301      	adds	r3, #1
 800faf2:	932d      	str	r3, [sp, #180]	; 0xb4
 800faf4:	2b07      	cmp	r3, #7
 800faf6:	dd07      	ble.n	800fb08 <_svfprintf_r+0x12c8>
 800faf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fafa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fafc:	aa2c      	add	r2, sp, #176	; 0xb0
 800fafe:	f002 ff2f 	bl	8012960 <__ssprint_r>
 800fb02:	2800      	cmp	r0, #0
 800fb04:	d17b      	bne.n	800fbfe <_svfprintf_r+0x13be>
 800fb06:	ac2f      	add	r4, sp, #188	; 0xbc
 800fb08:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800fb0e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800fb10:	9309      	str	r3, [sp, #36]	; 0x24
 800fb12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb14:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800fb16:	1e5d      	subs	r5, r3, #1
 800fb18:	2300      	movs	r3, #0
 800fb1a:	f7f0 fc95 	bl	8000448 <__aeabi_dcmpeq>
 800fb1e:	2800      	cmp	r0, #0
 800fb20:	d126      	bne.n	800fb70 <_svfprintf_r+0x1330>
 800fb22:	9b08      	ldr	r3, [sp, #32]
 800fb24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb26:	3301      	adds	r3, #1
 800fb28:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fb2a:	6023      	str	r3, [r4, #0]
 800fb2c:	1e7b      	subs	r3, r7, #1
 800fb2e:	3201      	adds	r2, #1
 800fb30:	185b      	adds	r3, r3, r1
 800fb32:	6065      	str	r5, [r4, #4]
 800fb34:	932e      	str	r3, [sp, #184]	; 0xb8
 800fb36:	922d      	str	r2, [sp, #180]	; 0xb4
 800fb38:	3408      	adds	r4, #8
 800fb3a:	2a07      	cmp	r2, #7
 800fb3c:	dd07      	ble.n	800fb4e <_svfprintf_r+0x130e>
 800fb3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb40:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fb42:	aa2c      	add	r2, sp, #176	; 0xb0
 800fb44:	f002 ff0c 	bl	8012960 <__ssprint_r>
 800fb48:	2800      	cmp	r0, #0
 800fb4a:	d158      	bne.n	800fbfe <_svfprintf_r+0x13be>
 800fb4c:	ac2f      	add	r4, sp, #188	; 0xbc
 800fb4e:	ab28      	add	r3, sp, #160	; 0xa0
 800fb50:	6023      	str	r3, [r4, #0]
 800fb52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fb54:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fb56:	6063      	str	r3, [r4, #4]
 800fb58:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fb5a:	189b      	adds	r3, r3, r2
 800fb5c:	932e      	str	r3, [sp, #184]	; 0xb8
 800fb5e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fb60:	3301      	adds	r3, #1
 800fb62:	932d      	str	r3, [sp, #180]	; 0xb4
 800fb64:	2b07      	cmp	r3, #7
 800fb66:	dd00      	ble.n	800fb6a <_svfprintf_r+0x132a>
 800fb68:	e638      	b.n	800f7dc <_svfprintf_r+0xf9c>
 800fb6a:	3408      	adds	r4, #8
 800fb6c:	0027      	movs	r7, r4
 800fb6e:	e595      	b.n	800f69c <_svfprintf_r+0xe5c>
 800fb70:	2710      	movs	r7, #16
 800fb72:	2d00      	cmp	r5, #0
 800fb74:	ddeb      	ble.n	800fb4e <_svfprintf_r+0x130e>
 800fb76:	0021      	movs	r1, r4
 800fb78:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fb7a:	4850      	ldr	r0, [pc, #320]	; (800fcbc <_svfprintf_r+0x147c>)
 800fb7c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800fb7e:	3301      	adds	r3, #1
 800fb80:	3108      	adds	r1, #8
 800fb82:	6020      	str	r0, [r4, #0]
 800fb84:	2d10      	cmp	r5, #16
 800fb86:	dc07      	bgt.n	800fb98 <_svfprintf_r+0x1358>
 800fb88:	6065      	str	r5, [r4, #4]
 800fb8a:	000c      	movs	r4, r1
 800fb8c:	18ad      	adds	r5, r5, r2
 800fb8e:	952e      	str	r5, [sp, #184]	; 0xb8
 800fb90:	932d      	str	r3, [sp, #180]	; 0xb4
 800fb92:	2b07      	cmp	r3, #7
 800fb94:	dddb      	ble.n	800fb4e <_svfprintf_r+0x130e>
 800fb96:	e7d2      	b.n	800fb3e <_svfprintf_r+0x12fe>
 800fb98:	3210      	adds	r2, #16
 800fb9a:	6067      	str	r7, [r4, #4]
 800fb9c:	922e      	str	r2, [sp, #184]	; 0xb8
 800fb9e:	932d      	str	r3, [sp, #180]	; 0xb4
 800fba0:	2b07      	cmp	r3, #7
 800fba2:	dd07      	ble.n	800fbb4 <_svfprintf_r+0x1374>
 800fba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fba6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fba8:	aa2c      	add	r2, sp, #176	; 0xb0
 800fbaa:	f002 fed9 	bl	8012960 <__ssprint_r>
 800fbae:	2800      	cmp	r0, #0
 800fbb0:	d125      	bne.n	800fbfe <_svfprintf_r+0x13be>
 800fbb2:	a92f      	add	r1, sp, #188	; 0xbc
 800fbb4:	000c      	movs	r4, r1
 800fbb6:	3d10      	subs	r5, #16
 800fbb8:	e7dd      	b.n	800fb76 <_svfprintf_r+0x1336>
 800fbba:	9808      	ldr	r0, [sp, #32]
 800fbbc:	912e      	str	r1, [sp, #184]	; 0xb8
 800fbbe:	c705      	stmia	r7!, {r0, r2}
 800fbc0:	932d      	str	r3, [sp, #180]	; 0xb4
 800fbc2:	e7e6      	b.n	800fb92 <_svfprintf_r+0x1352>
 800fbc4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fbc6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fbc8:	2510      	movs	r5, #16
 800fbca:	1a9c      	subs	r4, r3, r2
 800fbcc:	2c00      	cmp	r4, #0
 800fbce:	dc00      	bgt.n	800fbd2 <_svfprintf_r+0x1392>
 800fbd0:	e567      	b.n	800f6a2 <_svfprintf_r+0xe62>
 800fbd2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fbd4:	493a      	ldr	r1, [pc, #232]	; (800fcc0 <_svfprintf_r+0x1480>)
 800fbd6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800fbd8:	3301      	adds	r3, #1
 800fbda:	6039      	str	r1, [r7, #0]
 800fbdc:	2c10      	cmp	r4, #16
 800fbde:	dc19      	bgt.n	800fc14 <_svfprintf_r+0x13d4>
 800fbe0:	607c      	str	r4, [r7, #4]
 800fbe2:	18a4      	adds	r4, r4, r2
 800fbe4:	942e      	str	r4, [sp, #184]	; 0xb8
 800fbe6:	932d      	str	r3, [sp, #180]	; 0xb4
 800fbe8:	2b07      	cmp	r3, #7
 800fbea:	dc00      	bgt.n	800fbee <_svfprintf_r+0x13ae>
 800fbec:	e559      	b.n	800f6a2 <_svfprintf_r+0xe62>
 800fbee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fbf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fbf2:	aa2c      	add	r2, sp, #176	; 0xb0
 800fbf4:	f002 feb4 	bl	8012960 <__ssprint_r>
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	d100      	bne.n	800fbfe <_svfprintf_r+0x13be>
 800fbfc:	e551      	b.n	800f6a2 <_svfprintf_r+0xe62>
 800fbfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d101      	bne.n	800fc08 <_svfprintf_r+0x13c8>
 800fc04:	f7ff f845 	bl	800ec92 <_svfprintf_r+0x452>
 800fc08:	0019      	movs	r1, r3
 800fc0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc0c:	f7fd fd80 	bl	800d710 <_free_r>
 800fc10:	f7ff f83f 	bl	800ec92 <_svfprintf_r+0x452>
 800fc14:	3210      	adds	r2, #16
 800fc16:	607d      	str	r5, [r7, #4]
 800fc18:	922e      	str	r2, [sp, #184]	; 0xb8
 800fc1a:	932d      	str	r3, [sp, #180]	; 0xb4
 800fc1c:	3708      	adds	r7, #8
 800fc1e:	2b07      	cmp	r3, #7
 800fc20:	dd07      	ble.n	800fc32 <_svfprintf_r+0x13f2>
 800fc22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc24:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc26:	aa2c      	add	r2, sp, #176	; 0xb0
 800fc28:	f002 fe9a 	bl	8012960 <__ssprint_r>
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	d1e6      	bne.n	800fbfe <_svfprintf_r+0x13be>
 800fc30:	af2f      	add	r7, sp, #188	; 0xbc
 800fc32:	3c10      	subs	r4, #16
 800fc34:	e7cd      	b.n	800fbd2 <_svfprintf_r+0x1392>
 800fc36:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fc38:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc3a:	f7fd fd69 	bl	800d710 <_free_r>
 800fc3e:	e549      	b.n	800f6d4 <_svfprintf_r+0xe94>
 800fc40:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d101      	bne.n	800fc4a <_svfprintf_r+0x140a>
 800fc46:	f7ff f824 	bl	800ec92 <_svfprintf_r+0x452>
 800fc4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc4e:	aa2c      	add	r2, sp, #176	; 0xb0
 800fc50:	f002 fe86 	bl	8012960 <__ssprint_r>
 800fc54:	f7ff f81d 	bl	800ec92 <_svfprintf_r+0x452>
 800fc58:	0034      	movs	r4, r6
 800fc5a:	2a00      	cmp	r2, #0
 800fc5c:	d101      	bne.n	800fc62 <_svfprintf_r+0x1422>
 800fc5e:	f7fe ff8c 	bl	800eb7a <_svfprintf_r+0x33a>
 800fc62:	2b01      	cmp	r3, #1
 800fc64:	d101      	bne.n	800fc6a <_svfprintf_r+0x142a>
 800fc66:	f7ff fc01 	bl	800f46c <_svfprintf_r+0xc2c>
 800fc6a:	2b02      	cmp	r3, #2
 800fc6c:	d100      	bne.n	800fc70 <_svfprintf_r+0x1430>
 800fc6e:	e459      	b.n	800f524 <_svfprintf_r+0xce4>
 800fc70:	2507      	movs	r5, #7
 800fc72:	ab58      	add	r3, sp, #352	; 0x160
 800fc74:	9308      	str	r3, [sp, #32]
 800fc76:	9a08      	ldr	r2, [sp, #32]
 800fc78:	0013      	movs	r3, r2
 800fc7a:	3b01      	subs	r3, #1
 800fc7c:	9308      	str	r3, [sp, #32]
 800fc7e:	9b06      	ldr	r3, [sp, #24]
 800fc80:	9908      	ldr	r1, [sp, #32]
 800fc82:	402b      	ands	r3, r5
 800fc84:	3330      	adds	r3, #48	; 0x30
 800fc86:	700b      	strb	r3, [r1, #0]
 800fc88:	9907      	ldr	r1, [sp, #28]
 800fc8a:	074e      	lsls	r6, r1, #29
 800fc8c:	9906      	ldr	r1, [sp, #24]
 800fc8e:	08c8      	lsrs	r0, r1, #3
 800fc90:	9907      	ldr	r1, [sp, #28]
 800fc92:	4306      	orrs	r6, r0
 800fc94:	08c9      	lsrs	r1, r1, #3
 800fc96:	9107      	str	r1, [sp, #28]
 800fc98:	0031      	movs	r1, r6
 800fc9a:	9807      	ldr	r0, [sp, #28]
 800fc9c:	9606      	str	r6, [sp, #24]
 800fc9e:	4301      	orrs	r1, r0
 800fca0:	d1e9      	bne.n	800fc76 <_svfprintf_r+0x1436>
 800fca2:	07e1      	lsls	r1, r4, #31
 800fca4:	d400      	bmi.n	800fca8 <_svfprintf_r+0x1468>
 800fca6:	e42a      	b.n	800f4fe <_svfprintf_r+0xcbe>
 800fca8:	2b30      	cmp	r3, #48	; 0x30
 800fcaa:	d100      	bne.n	800fcae <_svfprintf_r+0x146e>
 800fcac:	e427      	b.n	800f4fe <_svfprintf_r+0xcbe>
 800fcae:	2130      	movs	r1, #48	; 0x30
 800fcb0:	9b08      	ldr	r3, [sp, #32]
 800fcb2:	3b01      	subs	r3, #1
 800fcb4:	7019      	strb	r1, [r3, #0]
 800fcb6:	1e93      	subs	r3, r2, #2
 800fcb8:	9308      	str	r3, [sp, #32]
 800fcba:	e420      	b.n	800f4fe <_svfprintf_r+0xcbe>
 800fcbc:	08015e50 	.word	0x08015e50
 800fcc0:	08015e40 	.word	0x08015e40

0800fcc4 <__ssvfscanf_r>:
 800fcc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcc6:	4ca7      	ldr	r4, [pc, #668]	; (800ff64 <__ssvfscanf_r+0x2a0>)
 800fcc8:	44a5      	add	sp, r4
 800fcca:	af02      	add	r7, sp, #8
 800fccc:	633b      	str	r3, [r7, #48]	; 0x30
 800fcce:	000b      	movs	r3, r1
 800fcd0:	6378      	str	r0, [r7, #52]	; 0x34
 800fcd2:	6479      	str	r1, [r7, #68]	; 0x44
 800fcd4:	61ba      	str	r2, [r7, #24]
 800fcd6:	220c      	movs	r2, #12
 800fcd8:	5e9a      	ldrsh	r2, [r3, r2]
 800fcda:	2380      	movs	r3, #128	; 0x80
 800fcdc:	019b      	lsls	r3, r3, #6
 800fcde:	421a      	tst	r2, r3
 800fce0:	d105      	bne.n	800fcee <__ssvfscanf_r+0x2a>
 800fce2:	4313      	orrs	r3, r2
 800fce4:	818b      	strh	r3, [r1, #12]
 800fce6:	4aa0      	ldr	r2, [pc, #640]	; (800ff68 <__ssvfscanf_r+0x2a4>)
 800fce8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800fcea:	4013      	ands	r3, r2
 800fcec:	664b      	str	r3, [r1, #100]	; 0x64
 800fcee:	2300      	movs	r3, #0
 800fcf0:	617b      	str	r3, [r7, #20]
 800fcf2:	643b      	str	r3, [r7, #64]	; 0x40
 800fcf4:	62bb      	str	r3, [r7, #40]	; 0x28
 800fcf6:	627b      	str	r3, [r7, #36]	; 0x24
 800fcf8:	63bb      	str	r3, [r7, #56]	; 0x38
 800fcfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcfc:	69bb      	ldr	r3, [r7, #24]
 800fcfe:	69ba      	ldr	r2, [r7, #24]
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	3201      	adds	r2, #1
 800fd04:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd06:	61ba      	str	r2, [r7, #24]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d100      	bne.n	800fd0e <__ssvfscanf_r+0x4a>
 800fd0c:	e0d7      	b.n	800febe <__ssvfscanf_r+0x1fa>
 800fd0e:	2608      	movs	r6, #8
 800fd10:	2108      	movs	r1, #8
 800fd12:	4a96      	ldr	r2, [pc, #600]	; (800ff6c <__ssvfscanf_r+0x2a8>)
 800fd14:	5cd2      	ldrb	r2, [r2, r3]
 800fd16:	4016      	ands	r6, r2
 800fd18:	420a      	tst	r2, r1
 800fd1a:	d01d      	beq.n	800fd58 <__ssvfscanf_r+0x94>
 800fd1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	dd12      	ble.n	800fd4a <__ssvfscanf_r+0x86>
 800fd24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd26:	4991      	ldr	r1, [pc, #580]	; (800ff6c <__ssvfscanf_r+0x2a8>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	781a      	ldrb	r2, [r3, #0]
 800fd2c:	5c8a      	ldrb	r2, [r1, r2]
 800fd2e:	2108      	movs	r1, #8
 800fd30:	420a      	tst	r2, r1
 800fd32:	d0e3      	beq.n	800fcfc <__ssvfscanf_r+0x38>
 800fd34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd38:	3201      	adds	r2, #1
 800fd3a:	63ba      	str	r2, [r7, #56]	; 0x38
 800fd3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd3e:	3301      	adds	r3, #1
 800fd40:	6852      	ldr	r2, [r2, #4]
 800fd42:	600b      	str	r3, [r1, #0]
 800fd44:	3a01      	subs	r2, #1
 800fd46:	604a      	str	r2, [r1, #4]
 800fd48:	e7e8      	b.n	800fd1c <__ssvfscanf_r+0x58>
 800fd4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd4e:	f002 fec7 	bl	8012ae0 <__ssrefill_r>
 800fd52:	2800      	cmp	r0, #0
 800fd54:	d0e6      	beq.n	800fd24 <__ssvfscanf_r+0x60>
 800fd56:	e7d1      	b.n	800fcfc <__ssvfscanf_r+0x38>
 800fd58:	2b25      	cmp	r3, #37	; 0x25
 800fd5a:	d165      	bne.n	800fe28 <__ssvfscanf_r+0x164>
 800fd5c:	250a      	movs	r5, #10
 800fd5e:	2480      	movs	r4, #128	; 0x80
 800fd60:	69ba      	ldr	r2, [r7, #24]
 800fd62:	63fe      	str	r6, [r7, #60]	; 0x3c
 800fd64:	3b16      	subs	r3, #22
 800fd66:	69b9      	ldr	r1, [r7, #24]
 800fd68:	3101      	adds	r1, #1
 800fd6a:	61b9      	str	r1, [r7, #24]
 800fd6c:	7811      	ldrb	r1, [r2, #0]
 800fd6e:	0008      	movs	r0, r1
 800fd70:	3825      	subs	r0, #37	; 0x25
 800fd72:	2855      	cmp	r0, #85	; 0x55
 800fd74:	d900      	bls.n	800fd78 <__ssvfscanf_r+0xb4>
 800fd76:	e170      	b.n	801005a <__ssvfscanf_r+0x396>
 800fd78:	f7f0 f9d6 	bl	8000128 <__gnu_thumb1_case_uhi>
 800fd7c:	016f0056 	.word	0x016f0056
 800fd80:	016f016f 	.word	0x016f016f
 800fd84:	0081016f 	.word	0x0081016f
 800fd88:	016f016f 	.word	0x016f016f
 800fd8c:	016f016f 	.word	0x016f016f
 800fd90:	00b8016f 	.word	0x00b8016f
 800fd94:	00b800b8 	.word	0x00b800b8
 800fd98:	00b800b8 	.word	0x00b800b8
 800fd9c:	00b800b8 	.word	0x00b800b8
 800fda0:	00b800b8 	.word	0x00b800b8
 800fda4:	016f00b8 	.word	0x016f00b8
 800fda8:	016f016f 	.word	0x016f016f
 800fdac:	016f016f 	.word	0x016f016f
 800fdb0:	016f016f 	.word	0x016f016f
 800fdb4:	016f00d8 	.word	0x016f00d8
 800fdb8:	00c1010a 	.word	0x00c1010a
 800fdbc:	00d800d8 	.word	0x00d800d8
 800fdc0:	016f00d8 	.word	0x016f00d8
 800fdc4:	016f016f 	.word	0x016f016f
 800fdc8:	009f016f 	.word	0x009f016f
 800fdcc:	016f016f 	.word	0x016f016f
 800fdd0:	016f00c9 	.word	0x016f00c9
 800fdd4:	016f016f 	.word	0x016f016f
 800fdd8:	016f00f0 	.word	0x016f00f0
 800fddc:	016f016f 	.word	0x016f016f
 800fde0:	00d1016f 	.word	0x00d1016f
 800fde4:	016f016f 	.word	0x016f016f
 800fde8:	016f00fe 	.word	0x016f00fe
 800fdec:	016f016f 	.word	0x016f016f
 800fdf0:	016f016f 	.word	0x016f016f
 800fdf4:	016f00d8 	.word	0x016f00d8
 800fdf8:	00c3010c 	.word	0x00c3010c
 800fdfc:	00d800d8 	.word	0x00d800d8
 800fe00:	009400d8 	.word	0x009400d8
 800fe04:	009f012f 	.word	0x009f012f
 800fe08:	0088016f 	.word	0x0088016f
 800fe0c:	011200a9 	.word	0x011200a9
 800fe10:	011000cb 	.word	0x011000cb
 800fe14:	016f016f 	.word	0x016f016f
 800fe18:	00a600f2 	.word	0x00a600f2
 800fe1c:	016f00cf 	.word	0x016f00cf
 800fe20:	00d1016f 	.word	0x00d1016f
 800fe24:	00a6016f 	.word	0x00a6016f
 800fe28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe2a:	685b      	ldr	r3, [r3, #4]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	dd12      	ble.n	800fe56 <__ssvfscanf_r+0x192>
 800fe30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe32:	69ba      	ldr	r2, [r7, #24]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	3a01      	subs	r2, #1
 800fe38:	7819      	ldrb	r1, [r3, #0]
 800fe3a:	7812      	ldrb	r2, [r2, #0]
 800fe3c:	4291      	cmp	r1, r2
 800fe3e:	d13e      	bne.n	800febe <__ssvfscanf_r+0x1fa>
 800fe40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe44:	6852      	ldr	r2, [r2, #4]
 800fe46:	3301      	adds	r3, #1
 800fe48:	600b      	str	r3, [r1, #0]
 800fe4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4c:	3a01      	subs	r2, #1
 800fe4e:	604a      	str	r2, [r1, #4]
 800fe50:	3301      	adds	r3, #1
 800fe52:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe54:	e752      	b.n	800fcfc <__ssvfscanf_r+0x38>
 800fe56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe5a:	f002 fe41 	bl	8012ae0 <__ssrefill_r>
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	d0e6      	beq.n	800fe30 <__ssvfscanf_r+0x16c>
 800fe62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d003      	beq.n	800fe70 <__ssvfscanf_r+0x1ac>
 800fe68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe6a:	899b      	ldrh	r3, [r3, #12]
 800fe6c:	065b      	lsls	r3, r3, #25
 800fe6e:	d526      	bpl.n	800febe <__ssvfscanf_r+0x1fa>
 800fe70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d000      	beq.n	800fe78 <__ssvfscanf_r+0x1b4>
 800fe76:	e0f6      	b.n	8010066 <__ssvfscanf_r+0x3a2>
 800fe78:	3b01      	subs	r3, #1
 800fe7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe7c:	e104      	b.n	8010088 <__ssvfscanf_r+0x3c4>
 800fe7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fe80:	4332      	orrs	r2, r6
 800fe82:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fe84:	d11b      	bne.n	800febe <__ssvfscanf_r+0x1fa>
 800fe86:	2610      	movs	r6, #16
 800fe88:	69ba      	ldr	r2, [r7, #24]
 800fe8a:	e76c      	b.n	800fd66 <__ssvfscanf_r+0xa2>
 800fe8c:	421e      	tst	r6, r3
 800fe8e:	d116      	bne.n	800febe <__ssvfscanf_r+0x1fa>
 800fe90:	7851      	ldrb	r1, [r2, #1]
 800fe92:	296c      	cmp	r1, #108	; 0x6c
 800fe94:	d103      	bne.n	800fe9e <__ssvfscanf_r+0x1da>
 800fe96:	3202      	adds	r2, #2
 800fe98:	61ba      	str	r2, [r7, #24]
 800fe9a:	2202      	movs	r2, #2
 800fe9c:	e000      	b.n	800fea0 <__ssvfscanf_r+0x1dc>
 800fe9e:	2201      	movs	r2, #1
 800fea0:	4316      	orrs	r6, r2
 800fea2:	e7f1      	b.n	800fe88 <__ssvfscanf_r+0x1c4>
 800fea4:	421e      	tst	r6, r3
 800fea6:	d10a      	bne.n	800febe <__ssvfscanf_r+0x1fa>
 800fea8:	7851      	ldrb	r1, [r2, #1]
 800feaa:	2968      	cmp	r1, #104	; 0x68
 800feac:	d103      	bne.n	800feb6 <__ssvfscanf_r+0x1f2>
 800feae:	3202      	adds	r2, #2
 800feb0:	61ba      	str	r2, [r7, #24]
 800feb2:	2208      	movs	r2, #8
 800feb4:	e7f4      	b.n	800fea0 <__ssvfscanf_r+0x1dc>
 800feb6:	2204      	movs	r2, #4
 800feb8:	e7f2      	b.n	800fea0 <__ssvfscanf_r+0x1dc>
 800feba:	421e      	tst	r6, r3
 800febc:	d0ed      	beq.n	800fe9a <__ssvfscanf_r+0x1d6>
 800febe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d000      	beq.n	800fec6 <__ssvfscanf_r+0x202>
 800fec4:	e0da      	b.n	801007c <__ssvfscanf_r+0x3b8>
 800fec6:	e0df      	b.n	8010088 <__ssvfscanf_r+0x3c4>
 800fec8:	421e      	tst	r6, r3
 800feca:	d0dd      	beq.n	800fe88 <__ssvfscanf_r+0x1c4>
 800fecc:	e7f7      	b.n	800febe <__ssvfscanf_r+0x1fa>
 800fece:	228f      	movs	r2, #143	; 0x8f
 800fed0:	218f      	movs	r1, #143	; 0x8f
 800fed2:	4032      	ands	r2, r6
 800fed4:	420e      	tst	r6, r1
 800fed6:	d1f2      	bne.n	800febe <__ssvfscanf_r+0x1fa>
 800fed8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800feda:	2900      	cmp	r1, #0
 800fedc:	d104      	bne.n	800fee8 <__ssvfscanf_r+0x224>
 800fede:	b082      	sub	sp, #8
 800fee0:	a902      	add	r1, sp, #8
 800fee2:	6439      	str	r1, [r7, #64]	; 0x40
 800fee4:	600a      	str	r2, [r1, #0]
 800fee6:	604a      	str	r2, [r1, #4]
 800fee8:	4326      	orrs	r6, r4
 800feea:	e7cd      	b.n	800fe88 <__ssvfscanf_r+0x1c4>
 800feec:	228f      	movs	r2, #143	; 0x8f
 800feee:	4216      	tst	r6, r2
 800fef0:	d1e5      	bne.n	800febe <__ssvfscanf_r+0x1fa>
 800fef2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fef4:	436a      	muls	r2, r5
 800fef6:	3a30      	subs	r2, #48	; 0x30
 800fef8:	188a      	adds	r2, r1, r2
 800fefa:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fefc:	e7c4      	b.n	800fe88 <__ssvfscanf_r+0x1c4>
 800fefe:	2301      	movs	r3, #1
 800ff00:	431e      	orrs	r6, r3
 800ff02:	4b1b      	ldr	r3, [pc, #108]	; (800ff70 <__ssvfscanf_r+0x2ac>)
 800ff04:	617b      	str	r3, [r7, #20]
 800ff06:	230a      	movs	r3, #10
 800ff08:	2403      	movs	r4, #3
 800ff0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ff0c:	e00f      	b.n	800ff2e <__ssvfscanf_r+0x26a>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	431e      	orrs	r6, r3
 800ff12:	4b18      	ldr	r3, [pc, #96]	; (800ff74 <__ssvfscanf_r+0x2b0>)
 800ff14:	617b      	str	r3, [r7, #20]
 800ff16:	2308      	movs	r3, #8
 800ff18:	e7f6      	b.n	800ff08 <__ssvfscanf_r+0x244>
 800ff1a:	4b16      	ldr	r3, [pc, #88]	; (800ff74 <__ssvfscanf_r+0x2b0>)
 800ff1c:	e7f2      	b.n	800ff04 <__ssvfscanf_r+0x240>
 800ff1e:	2380      	movs	r3, #128	; 0x80
 800ff20:	009b      	lsls	r3, r3, #2
 800ff22:	431e      	orrs	r6, r3
 800ff24:	4b13      	ldr	r3, [pc, #76]	; (800ff74 <__ssvfscanf_r+0x2b0>)
 800ff26:	617b      	str	r3, [r7, #20]
 800ff28:	2310      	movs	r3, #16
 800ff2a:	e7ed      	b.n	800ff08 <__ssvfscanf_r+0x244>
 800ff2c:	2404      	movs	r4, #4
 800ff2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff30:	685b      	ldr	r3, [r3, #4]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	dd55      	ble.n	800ffe2 <__ssvfscanf_r+0x31e>
 800ff36:	0673      	lsls	r3, r6, #25
 800ff38:	d407      	bmi.n	800ff4a <__ssvfscanf_r+0x286>
 800ff3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff3c:	490b      	ldr	r1, [pc, #44]	; (800ff6c <__ssvfscanf_r+0x2a8>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	781a      	ldrb	r2, [r3, #0]
 800ff42:	5c8a      	ldrb	r2, [r1, r2]
 800ff44:	2108      	movs	r1, #8
 800ff46:	420a      	tst	r2, r1
 800ff48:	d152      	bne.n	800fff0 <__ssvfscanf_r+0x32c>
 800ff4a:	1e60      	subs	r0, r4, #1
 800ff4c:	2803      	cmp	r0, #3
 800ff4e:	d863      	bhi.n	8010018 <__ssvfscanf_r+0x354>
 800ff50:	f7f0 f8ea 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ff54:	03bd01da 	.word	0x03bd01da
 800ff58:	068a0579 	.word	0x068a0579
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	431e      	orrs	r6, r3
 800ff60:	2402      	movs	r4, #2
 800ff62:	e7e4      	b.n	800ff2e <__ssvfscanf_r+0x26a>
 800ff64:	fffffd34 	.word	0xfffffd34
 800ff68:	ffffdfff 	.word	0xffffdfff
 800ff6c:	08015b39 	.word	0x08015b39
 800ff70:	0800cf61 	.word	0x0800cf61
 800ff74:	0800d085 	.word	0x0800d085
 800ff78:	2248      	movs	r2, #72	; 0x48
 800ff7a:	2318      	movs	r3, #24
 800ff7c:	189b      	adds	r3, r3, r2
 800ff7e:	19d8      	adds	r0, r3, r7
 800ff80:	69b9      	ldr	r1, [r7, #24]
 800ff82:	f001 f9d7 	bl	8011334 <__sccl>
 800ff86:	2340      	movs	r3, #64	; 0x40
 800ff88:	2401      	movs	r4, #1
 800ff8a:	61b8      	str	r0, [r7, #24]
 800ff8c:	431e      	orrs	r6, r3
 800ff8e:	e7ce      	b.n	800ff2e <__ssvfscanf_r+0x26a>
 800ff90:	2301      	movs	r3, #1
 800ff92:	431e      	orrs	r6, r3
 800ff94:	2340      	movs	r3, #64	; 0x40
 800ff96:	2400      	movs	r4, #0
 800ff98:	431e      	orrs	r6, r3
 800ff9a:	e7c8      	b.n	800ff2e <__ssvfscanf_r+0x26a>
 800ff9c:	2388      	movs	r3, #136	; 0x88
 800ff9e:	e7bf      	b.n	800ff20 <__ssvfscanf_r+0x25c>
 800ffa0:	06f3      	lsls	r3, r6, #27
 800ffa2:	d500      	bpl.n	800ffa6 <__ssvfscanf_r+0x2e2>
 800ffa4:	e6aa      	b.n	800fcfc <__ssvfscanf_r+0x38>
 800ffa6:	2108      	movs	r1, #8
 800ffa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffaa:	cb04      	ldmia	r3!, {r2}
 800ffac:	420e      	tst	r6, r1
 800ffae:	d003      	beq.n	800ffb8 <__ssvfscanf_r+0x2f4>
 800ffb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffb2:	7011      	strb	r1, [r2, #0]
 800ffb4:	633b      	str	r3, [r7, #48]	; 0x30
 800ffb6:	e6a1      	b.n	800fcfc <__ssvfscanf_r+0x38>
 800ffb8:	0771      	lsls	r1, r6, #29
 800ffba:	d502      	bpl.n	800ffc2 <__ssvfscanf_r+0x2fe>
 800ffbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffbe:	8011      	strh	r1, [r2, #0]
 800ffc0:	e7f8      	b.n	800ffb4 <__ssvfscanf_r+0x2f0>
 800ffc2:	07f1      	lsls	r1, r6, #31
 800ffc4:	d502      	bpl.n	800ffcc <__ssvfscanf_r+0x308>
 800ffc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffc8:	6011      	str	r1, [r2, #0]
 800ffca:	e7f3      	b.n	800ffb4 <__ssvfscanf_r+0x2f0>
 800ffcc:	07b6      	lsls	r6, r6, #30
 800ffce:	d5fa      	bpl.n	800ffc6 <__ssvfscanf_r+0x302>
 800ffd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffd2:	6011      	str	r1, [r2, #0]
 800ffd4:	17c9      	asrs	r1, r1, #31
 800ffd6:	6051      	str	r1, [r2, #4]
 800ffd8:	e7ec      	b.n	800ffb4 <__ssvfscanf_r+0x2f0>
 800ffda:	4ba2      	ldr	r3, [pc, #648]	; (8010264 <__ssvfscanf_r+0x5a0>)
 800ffdc:	617b      	str	r3, [r7, #20]
 800ffde:	2300      	movs	r3, #0
 800ffe0:	e792      	b.n	800ff08 <__ssvfscanf_r+0x244>
 800ffe2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ffe4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ffe6:	f002 fd7b 	bl	8012ae0 <__ssrefill_r>
 800ffea:	2800      	cmp	r0, #0
 800ffec:	d0a3      	beq.n	800ff36 <__ssvfscanf_r+0x272>
 800ffee:	e738      	b.n	800fe62 <__ssvfscanf_r+0x19e>
 800fff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fff2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fff4:	3201      	adds	r2, #1
 800fff6:	63ba      	str	r2, [r7, #56]	; 0x38
 800fff8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fffa:	6852      	ldr	r2, [r2, #4]
 800fffc:	3a01      	subs	r2, #1
 800fffe:	604a      	str	r2, [r1, #4]
 8010000:	2a00      	cmp	r2, #0
 8010002:	dd02      	ble.n	801000a <__ssvfscanf_r+0x346>
 8010004:	3301      	adds	r3, #1
 8010006:	600b      	str	r3, [r1, #0]
 8010008:	e797      	b.n	800ff3a <__ssvfscanf_r+0x276>
 801000a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801000c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801000e:	f002 fd67 	bl	8012ae0 <__ssrefill_r>
 8010012:	2800      	cmp	r0, #0
 8010014:	d091      	beq.n	800ff3a <__ssvfscanf_r+0x276>
 8010016:	e724      	b.n	800fe62 <__ssvfscanf_r+0x19e>
 8010018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801001a:	2301      	movs	r3, #1
 801001c:	2a00      	cmp	r2, #0
 801001e:	d100      	bne.n	8010022 <__ssvfscanf_r+0x35e>
 8010020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010022:	2210      	movs	r2, #16
 8010024:	0034      	movs	r4, r6
 8010026:	4032      	ands	r2, r6
 8010028:	623a      	str	r2, [r7, #32]
 801002a:	401c      	ands	r4, r3
 801002c:	421e      	tst	r6, r3
 801002e:	d100      	bne.n	8010032 <__ssvfscanf_r+0x36e>
 8010030:	e0f3      	b.n	801021a <__ssvfscanf_r+0x556>
 8010032:	2a00      	cmp	r2, #0
 8010034:	d000      	beq.n	8010038 <__ssvfscanf_r+0x374>
 8010036:	e0b6      	b.n	80101a6 <__ssvfscanf_r+0x4e2>
 8010038:	2080      	movs	r0, #128	; 0x80
 801003a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801003c:	cb10      	ldmia	r3!, {r4}
 801003e:	613b      	str	r3, [r7, #16]
 8010040:	4206      	tst	r6, r0
 8010042:	d100      	bne.n	8010046 <__ssvfscanf_r+0x382>
 8010044:	e0b7      	b.n	80101b6 <__ssvfscanf_r+0x4f2>
 8010046:	2c00      	cmp	r4, #0
 8010048:	d007      	beq.n	801005a <__ssvfscanf_r+0x396>
 801004a:	f7fb fe93 	bl	800bd74 <malloc>
 801004e:	6338      	str	r0, [r7, #48]	; 0x30
 8010050:	2800      	cmp	r0, #0
 8010052:	d11f      	bne.n	8010094 <__ssvfscanf_r+0x3d0>
 8010054:	2301      	movs	r3, #1
 8010056:	425b      	negs	r3, r3
 8010058:	62fb      	str	r3, [r7, #44]	; 0x2c
 801005a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801005c:	2b00      	cmp	r3, #0
 801005e:	d013      	beq.n	8010088 <__ssvfscanf_r+0x3c4>
 8010060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010062:	3301      	adds	r3, #1
 8010064:	d10a      	bne.n	801007c <__ssvfscanf_r+0x3b8>
 8010066:	2400      	movs	r4, #0
 8010068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801006a:	681d      	ldr	r5, [r3, #0]
 801006c:	88db      	ldrh	r3, [r3, #6]
 801006e:	42a3      	cmp	r3, r4
 8010070:	dd01      	ble.n	8010076 <__ssvfscanf_r+0x3b2>
 8010072:	f001 f82a 	bl	80110ca <__ssvfscanf_r+0x1406>
 8010076:	2301      	movs	r3, #1
 8010078:	425b      	negs	r3, r3
 801007a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801007c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801007e:	6818      	ldr	r0, [r3, #0]
 8010080:	2800      	cmp	r0, #0
 8010082:	d001      	beq.n	8010088 <__ssvfscanf_r+0x3c4>
 8010084:	f7fb fe80 	bl	800bd88 <free>
 8010088:	46bd      	mov	sp, r7
 801008a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801008c:	23b1      	movs	r3, #177	; 0xb1
 801008e:	009b      	lsls	r3, r3, #2
 8010090:	449d      	add	sp, r3
 8010092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010096:	6023      	str	r3, [r4, #0]
 8010098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801009a:	88de      	ldrh	r6, [r3, #6]
 801009c:	889d      	ldrh	r5, [r3, #4]
 801009e:	42ae      	cmp	r6, r5
 80100a0:	d30e      	bcc.n	80100c0 <__ssvfscanf_r+0x3fc>
 80100a2:	4b71      	ldr	r3, [pc, #452]	; (8010268 <__ssvfscanf_r+0x5a4>)
 80100a4:	429d      	cmp	r5, r3
 80100a6:	d8d5      	bhi.n	8010054 <__ssvfscanf_r+0x390>
 80100a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100aa:	3508      	adds	r5, #8
 80100ac:	b2ad      	uxth	r5, r5
 80100ae:	6818      	ldr	r0, [r3, #0]
 80100b0:	00a9      	lsls	r1, r5, #2
 80100b2:	f002 f901 	bl	80122b8 <realloc>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	d0cc      	beq.n	8010054 <__ssvfscanf_r+0x390>
 80100ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100bc:	6018      	str	r0, [r3, #0]
 80100be:	809d      	strh	r5, [r3, #4]
 80100c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100c2:	1c72      	adds	r2, r6, #1
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	00b6      	lsls	r6, r6, #2
 80100c8:	50f4      	str	r4, [r6, r3]
 80100ca:	2320      	movs	r3, #32
 80100cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80100ce:	0026      	movs	r6, r4
 80100d0:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80100d2:	80ca      	strh	r2, [r1, #6]
 80100d4:	61fb      	str	r3, [r7, #28]
 80100d6:	2500      	movs	r5, #0
 80100d8:	f7fd f9fe 	bl	800d4d8 <__locale_mb_cur_max>
 80100dc:	42a8      	cmp	r0, r5
 80100de:	d100      	bne.n	80100e2 <__ssvfscanf_r+0x41e>
 80100e0:	e6bf      	b.n	800fe62 <__ssvfscanf_r+0x19e>
 80100e2:	1c6a      	adds	r2, r5, #1
 80100e4:	60fa      	str	r2, [r7, #12]
 80100e6:	228c      	movs	r2, #140	; 0x8c
 80100e8:	2048      	movs	r0, #72	; 0x48
 80100ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100ec:	0052      	lsls	r2, r2, #1
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	1812      	adds	r2, r2, r0
 80100f2:	7819      	ldrb	r1, [r3, #0]
 80100f4:	19d2      	adds	r2, r2, r7
 80100f6:	5551      	strb	r1, [r2, r5]
 80100f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80100fc:	6852      	ldr	r2, [r2, #4]
 80100fe:	3301      	adds	r3, #1
 8010100:	600b      	str	r3, [r1, #0]
 8010102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010104:	3a01      	subs	r2, #1
 8010106:	604a      	str	r2, [r1, #4]
 8010108:	2b03      	cmp	r3, #3
 801010a:	d102      	bne.n	8010112 <__ssvfscanf_r+0x44e>
 801010c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801010e:	2b04      	cmp	r3, #4
 8010110:	d007      	beq.n	8010122 <__ssvfscanf_r+0x45e>
 8010112:	2048      	movs	r0, #72	; 0x48
 8010114:	2310      	movs	r3, #16
 8010116:	181b      	adds	r3, r3, r0
 8010118:	2208      	movs	r2, #8
 801011a:	2100      	movs	r1, #0
 801011c:	19d8      	adds	r0, r3, r7
 801011e:	f7fd f94f 	bl	800d3c0 <memset>
 8010122:	2148      	movs	r1, #72	; 0x48
 8010124:	2310      	movs	r3, #16
 8010126:	228c      	movs	r2, #140	; 0x8c
 8010128:	185b      	adds	r3, r3, r1
 801012a:	0052      	lsls	r2, r2, #1
 801012c:	19db      	adds	r3, r3, r7
 801012e:	1852      	adds	r2, r2, r1
 8010130:	9300      	str	r3, [sp, #0]
 8010132:	0021      	movs	r1, r4
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010138:	19d2      	adds	r2, r2, r7
 801013a:	f002 fbd1 	bl	80128e0 <_mbrtowc_r>
 801013e:	0003      	movs	r3, r0
 8010140:	62b8      	str	r0, [r7, #40]	; 0x28
 8010142:	3301      	adds	r3, #1
 8010144:	d100      	bne.n	8010148 <__ssvfscanf_r+0x484>
 8010146:	e68c      	b.n	800fe62 <__ssvfscanf_r+0x19e>
 8010148:	2800      	cmp	r0, #0
 801014a:	d139      	bne.n	80101c0 <__ssvfscanf_r+0x4fc>
 801014c:	6a3b      	ldr	r3, [r7, #32]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d100      	bne.n	8010154 <__ssvfscanf_r+0x490>
 8010152:	6023      	str	r3, [r4, #0]
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010158:	4694      	mov	ip, r2
 801015a:	4463      	add	r3, ip
 801015c:	63bb      	str	r3, [r7, #56]	; 0x38
 801015e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010160:	2b03      	cmp	r3, #3
 8010162:	d102      	bne.n	801016a <__ssvfscanf_r+0x4a6>
 8010164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010166:	2b04      	cmp	r3, #4
 8010168:	d002      	beq.n	8010170 <__ssvfscanf_r+0x4ac>
 801016a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801016c:	3b01      	subs	r3, #1
 801016e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010170:	6a3b      	ldr	r3, [r7, #32]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d115      	bne.n	80101a2 <__ssvfscanf_r+0x4de>
 8010176:	2e00      	cmp	r6, #0
 8010178:	d012      	beq.n	80101a0 <__ssvfscanf_r+0x4dc>
 801017a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801017c:	69fa      	ldr	r2, [r7, #28]
 801017e:	1ae5      	subs	r5, r4, r3
 8010180:	10ab      	asrs	r3, r5, #2
 8010182:	4293      	cmp	r3, r2
 8010184:	d30c      	bcc.n	80101a0 <__ssvfscanf_r+0x4dc>
 8010186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010188:	00d1      	lsls	r1, r2, #3
 801018a:	f002 f895 	bl	80122b8 <realloc>
 801018e:	6338      	str	r0, [r7, #48]	; 0x30
 8010190:	2800      	cmp	r0, #0
 8010192:	d100      	bne.n	8010196 <__ssvfscanf_r+0x4d2>
 8010194:	e75e      	b.n	8010054 <__ssvfscanf_r+0x390>
 8010196:	69fb      	ldr	r3, [r7, #28]
 8010198:	1944      	adds	r4, r0, r5
 801019a:	005b      	lsls	r3, r3, #1
 801019c:	6030      	str	r0, [r6, #0]
 801019e:	61fb      	str	r3, [r7, #28]
 80101a0:	3404      	adds	r4, #4
 80101a2:	2500      	movs	r5, #0
 80101a4:	e010      	b.n	80101c8 <__ssvfscanf_r+0x504>
 80101a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a8:	613b      	str	r3, [r7, #16]
 80101aa:	2300      	movs	r3, #0
 80101ac:	001e      	movs	r6, r3
 80101ae:	001c      	movs	r4, r3
 80101b0:	61fb      	str	r3, [r7, #28]
 80101b2:	633b      	str	r3, [r7, #48]	; 0x30
 80101b4:	e78f      	b.n	80100d6 <__ssvfscanf_r+0x412>
 80101b6:	6a3b      	ldr	r3, [r7, #32]
 80101b8:	001e      	movs	r6, r3
 80101ba:	61fb      	str	r3, [r7, #28]
 80101bc:	633b      	str	r3, [r7, #48]	; 0x30
 80101be:	e78a      	b.n	80100d6 <__ssvfscanf_r+0x412>
 80101c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101c2:	68fd      	ldr	r5, [r7, #12]
 80101c4:	3302      	adds	r3, #2
 80101c6:	d1c5      	bne.n	8010154 <__ssvfscanf_r+0x490>
 80101c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	dc12      	bgt.n	80101f6 <__ssvfscanf_r+0x532>
 80101d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80101d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80101d4:	f002 fc84 	bl	8012ae0 <__ssrefill_r>
 80101d8:	2800      	cmp	r0, #0
 80101da:	d00c      	beq.n	80101f6 <__ssvfscanf_r+0x532>
 80101dc:	2d00      	cmp	r5, #0
 80101de:	d000      	beq.n	80101e2 <__ssvfscanf_r+0x51e>
 80101e0:	e63f      	b.n	800fe62 <__ssvfscanf_r+0x19e>
 80101e2:	2e00      	cmp	r6, #0
 80101e4:	d10c      	bne.n	8010200 <__ssvfscanf_r+0x53c>
 80101e6:	6a3b      	ldr	r3, [r7, #32]
 80101e8:	425a      	negs	r2, r3
 80101ea:	4153      	adcs	r3, r2
 80101ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101ee:	18d3      	adds	r3, r2, r3
 80101f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	e6de      	b.n	800ffb4 <__ssvfscanf_r+0x2f0>
 80101f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d000      	beq.n	80101fe <__ssvfscanf_r+0x53a>
 80101fc:	e76c      	b.n	80100d8 <__ssvfscanf_r+0x414>
 80101fe:	e7f0      	b.n	80101e2 <__ssvfscanf_r+0x51e>
 8010200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010202:	69fa      	ldr	r2, [r7, #28]
 8010204:	1ae1      	subs	r1, r4, r3
 8010206:	108b      	asrs	r3, r1, #2
 8010208:	429a      	cmp	r2, r3
 801020a:	d9ec      	bls.n	80101e6 <__ssvfscanf_r+0x522>
 801020c:	6830      	ldr	r0, [r6, #0]
 801020e:	f002 f853 	bl	80122b8 <realloc>
 8010212:	2800      	cmp	r0, #0
 8010214:	d0e7      	beq.n	80101e6 <__ssvfscanf_r+0x522>
 8010216:	6030      	str	r0, [r6, #0]
 8010218:	e7e5      	b.n	80101e6 <__ssvfscanf_r+0x522>
 801021a:	6a3b      	ldr	r3, [r7, #32]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d025      	beq.n	801026c <__ssvfscanf_r+0x5a8>
 8010220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010228:	6812      	ldr	r2, [r2, #0]
 801022a:	4299      	cmp	r1, r3
 801022c:	dd11      	ble.n	8010252 <__ssvfscanf_r+0x58e>
 801022e:	1ac9      	subs	r1, r1, r3
 8010230:	18d2      	adds	r2, r2, r3
 8010232:	18e4      	adds	r4, r4, r3
 8010234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010236:	63f9      	str	r1, [r7, #60]	; 0x3c
 8010238:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801023a:	0019      	movs	r1, r3
 801023c:	601a      	str	r2, [r3, #0]
 801023e:	f002 fc4f 	bl	8012ae0 <__ssrefill_r>
 8010242:	2800      	cmp	r0, #0
 8010244:	d0ec      	beq.n	8010220 <__ssvfscanf_r+0x55c>
 8010246:	2c00      	cmp	r4, #0
 8010248:	d100      	bne.n	801024c <__ssvfscanf_r+0x588>
 801024a:	e60a      	b.n	800fe62 <__ssvfscanf_r+0x19e>
 801024c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801024e:	191b      	adds	r3, r3, r4
 8010250:	e5ff      	b.n	800fe52 <__ssvfscanf_r+0x18e>
 8010252:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010254:	1a5b      	subs	r3, r3, r1
 8010256:	1864      	adds	r4, r4, r1
 8010258:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801025a:	604b      	str	r3, [r1, #4]
 801025c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801025e:	18d2      	adds	r2, r2, r3
 8010260:	600a      	str	r2, [r1, #0]
 8010262:	e7f3      	b.n	801024c <__ssvfscanf_r+0x588>
 8010264:	0800cf61 	.word	0x0800cf61
 8010268:	0000fff6 	.word	0x0000fff6
 801026c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026e:	0034      	movs	r4, r6
 8010270:	cb20      	ldmia	r3!, {r5}
 8010272:	633b      	str	r3, [r7, #48]	; 0x30
 8010274:	2380      	movs	r3, #128	; 0x80
 8010276:	401c      	ands	r4, r3
 8010278:	421e      	tst	r6, r3
 801027a:	d028      	beq.n	80102ce <__ssvfscanf_r+0x60a>
 801027c:	2d00      	cmp	r5, #0
 801027e:	d100      	bne.n	8010282 <__ssvfscanf_r+0x5be>
 8010280:	e61d      	b.n	800febe <__ssvfscanf_r+0x1fa>
 8010282:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010284:	f7fb fd76 	bl	800bd74 <malloc>
 8010288:	6238      	str	r0, [r7, #32]
 801028a:	2800      	cmp	r0, #0
 801028c:	d100      	bne.n	8010290 <__ssvfscanf_r+0x5cc>
 801028e:	e5ef      	b.n	800fe70 <__ssvfscanf_r+0x1ac>
 8010290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010292:	6028      	str	r0, [r5, #0]
 8010294:	88de      	ldrh	r6, [r3, #6]
 8010296:	889c      	ldrh	r4, [r3, #4]
 8010298:	6818      	ldr	r0, [r3, #0]
 801029a:	42a6      	cmp	r6, r4
 801029c:	d30e      	bcc.n	80102bc <__ssvfscanf_r+0x5f8>
 801029e:	4bbf      	ldr	r3, [pc, #764]	; (801059c <__ssvfscanf_r+0x8d8>)
 80102a0:	429c      	cmp	r4, r3
 80102a2:	d900      	bls.n	80102a6 <__ssvfscanf_r+0x5e2>
 80102a4:	e6df      	b.n	8010066 <__ssvfscanf_r+0x3a2>
 80102a6:	3408      	adds	r4, #8
 80102a8:	b2a4      	uxth	r4, r4
 80102aa:	00a1      	lsls	r1, r4, #2
 80102ac:	f002 f804 	bl	80122b8 <realloc>
 80102b0:	2800      	cmp	r0, #0
 80102b2:	d100      	bne.n	80102b6 <__ssvfscanf_r+0x5f2>
 80102b4:	e6d7      	b.n	8010066 <__ssvfscanf_r+0x3a2>
 80102b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102b8:	6018      	str	r0, [r3, #0]
 80102ba:	809c      	strh	r4, [r3, #4]
 80102bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102be:	1c72      	adds	r2, r6, #1
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80102c4:	00b6      	lsls	r6, r6, #2
 80102c6:	002c      	movs	r4, r5
 80102c8:	50f5      	str	r5, [r6, r3]
 80102ca:	6a3d      	ldr	r5, [r7, #32]
 80102cc:	80ca      	strh	r2, [r1, #6]
 80102ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102d0:	0029      	movs	r1, r5
 80102d2:	9300      	str	r3, [sp, #0]
 80102d4:	2201      	movs	r2, #1
 80102d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80102da:	f002 fc20 	bl	8012b1e <_sfread_r>
 80102de:	1e05      	subs	r5, r0, #0
 80102e0:	d100      	bne.n	80102e4 <__ssvfscanf_r+0x620>
 80102e2:	e5be      	b.n	800fe62 <__ssvfscanf_r+0x19e>
 80102e4:	2c00      	cmp	r4, #0
 80102e6:	d009      	beq.n	80102fc <__ssvfscanf_r+0x638>
 80102e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102ea:	4283      	cmp	r3, r0
 80102ec:	d906      	bls.n	80102fc <__ssvfscanf_r+0x638>
 80102ee:	0001      	movs	r1, r0
 80102f0:	6820      	ldr	r0, [r4, #0]
 80102f2:	f001 ffe1 	bl	80122b8 <realloc>
 80102f6:	2800      	cmp	r0, #0
 80102f8:	d000      	beq.n	80102fc <__ssvfscanf_r+0x638>
 80102fa:	6020      	str	r0, [r4, #0]
 80102fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102fe:	195b      	adds	r3, r3, r5
 8010300:	63bb      	str	r3, [r7, #56]	; 0x38
 8010302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010304:	3301      	adds	r3, #1
 8010306:	e4f8      	b.n	800fcfa <__ssvfscanf_r+0x36>
 8010308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801030a:	2b00      	cmp	r3, #0
 801030c:	d101      	bne.n	8010312 <__ssvfscanf_r+0x64e>
 801030e:	3b01      	subs	r3, #1
 8010310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010312:	2210      	movs	r2, #16
 8010314:	2301      	movs	r3, #1
 8010316:	0034      	movs	r4, r6
 8010318:	4032      	ands	r2, r6
 801031a:	401c      	ands	r4, r3
 801031c:	623a      	str	r2, [r7, #32]
 801031e:	421e      	tst	r6, r3
 8010320:	d100      	bne.n	8010324 <__ssvfscanf_r+0x660>
 8010322:	e116      	b.n	8010552 <__ssvfscanf_r+0x88e>
 8010324:	2a00      	cmp	r2, #0
 8010326:	d000      	beq.n	801032a <__ssvfscanf_r+0x666>
 8010328:	e0b0      	b.n	801048c <__ssvfscanf_r+0x7c8>
 801032a:	2080      	movs	r0, #128	; 0x80
 801032c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032e:	cb10      	ldmia	r3!, {r4}
 8010330:	60fb      	str	r3, [r7, #12]
 8010332:	4206      	tst	r6, r0
 8010334:	d100      	bne.n	8010338 <__ssvfscanf_r+0x674>
 8010336:	e0b2      	b.n	801049e <__ssvfscanf_r+0x7da>
 8010338:	2c00      	cmp	r4, #0
 801033a:	d100      	bne.n	801033e <__ssvfscanf_r+0x67a>
 801033c:	e68d      	b.n	801005a <__ssvfscanf_r+0x396>
 801033e:	f7fb fd19 	bl	800bd74 <malloc>
 8010342:	6338      	str	r0, [r7, #48]	; 0x30
 8010344:	2800      	cmp	r0, #0
 8010346:	d100      	bne.n	801034a <__ssvfscanf_r+0x686>
 8010348:	e684      	b.n	8010054 <__ssvfscanf_r+0x390>
 801034a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801034c:	6023      	str	r3, [r4, #0]
 801034e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010350:	88de      	ldrh	r6, [r3, #6]
 8010352:	889d      	ldrh	r5, [r3, #4]
 8010354:	42ae      	cmp	r6, r5
 8010356:	d310      	bcc.n	801037a <__ssvfscanf_r+0x6b6>
 8010358:	4b90      	ldr	r3, [pc, #576]	; (801059c <__ssvfscanf_r+0x8d8>)
 801035a:	429d      	cmp	r5, r3
 801035c:	d900      	bls.n	8010360 <__ssvfscanf_r+0x69c>
 801035e:	e679      	b.n	8010054 <__ssvfscanf_r+0x390>
 8010360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010362:	3508      	adds	r5, #8
 8010364:	b2ad      	uxth	r5, r5
 8010366:	6818      	ldr	r0, [r3, #0]
 8010368:	00a9      	lsls	r1, r5, #2
 801036a:	f001 ffa5 	bl	80122b8 <realloc>
 801036e:	2800      	cmp	r0, #0
 8010370:	d100      	bne.n	8010374 <__ssvfscanf_r+0x6b0>
 8010372:	e66f      	b.n	8010054 <__ssvfscanf_r+0x390>
 8010374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010376:	6018      	str	r0, [r3, #0]
 8010378:	809d      	strh	r5, [r3, #4]
 801037a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801037c:	1c72      	adds	r2, r6, #1
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	00b6      	lsls	r6, r6, #2
 8010382:	50f4      	str	r4, [r6, r3]
 8010384:	2320      	movs	r3, #32
 8010386:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010388:	0026      	movs	r6, r4
 801038a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801038c:	80ca      	strh	r2, [r1, #6]
 801038e:	613b      	str	r3, [r7, #16]
 8010390:	2500      	movs	r5, #0
 8010392:	f7fd f8a1 	bl	800d4d8 <__locale_mb_cur_max>
 8010396:	42a8      	cmp	r0, r5
 8010398:	d100      	bne.n	801039c <__ssvfscanf_r+0x6d8>
 801039a:	e562      	b.n	800fe62 <__ssvfscanf_r+0x19e>
 801039c:	1c6a      	adds	r2, r5, #1
 801039e:	61fa      	str	r2, [r7, #28]
 80103a0:	228c      	movs	r2, #140	; 0x8c
 80103a2:	2048      	movs	r0, #72	; 0x48
 80103a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103a6:	0052      	lsls	r2, r2, #1
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	1812      	adds	r2, r2, r0
 80103ac:	7819      	ldrb	r1, [r3, #0]
 80103ae:	19d2      	adds	r2, r2, r7
 80103b0:	5551      	strb	r1, [r2, r5]
 80103b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80103b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80103b6:	6852      	ldr	r2, [r2, #4]
 80103b8:	3301      	adds	r3, #1
 80103ba:	600b      	str	r3, [r1, #0]
 80103bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103be:	3a01      	subs	r2, #1
 80103c0:	604a      	str	r2, [r1, #4]
 80103c2:	2b03      	cmp	r3, #3
 80103c4:	d102      	bne.n	80103cc <__ssvfscanf_r+0x708>
 80103c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103c8:	2b04      	cmp	r3, #4
 80103ca:	d006      	beq.n	80103da <__ssvfscanf_r+0x716>
 80103cc:	2048      	movs	r0, #72	; 0x48
 80103ce:	2208      	movs	r2, #8
 80103d0:	1813      	adds	r3, r2, r0
 80103d2:	2100      	movs	r1, #0
 80103d4:	19d8      	adds	r0, r3, r7
 80103d6:	f7fc fff3 	bl	800d3c0 <memset>
 80103da:	2148      	movs	r1, #72	; 0x48
 80103dc:	2308      	movs	r3, #8
 80103de:	228c      	movs	r2, #140	; 0x8c
 80103e0:	185b      	adds	r3, r3, r1
 80103e2:	0052      	lsls	r2, r2, #1
 80103e4:	19db      	adds	r3, r3, r7
 80103e6:	1852      	adds	r2, r2, r1
 80103e8:	9300      	str	r3, [sp, #0]
 80103ea:	0021      	movs	r1, r4
 80103ec:	69fb      	ldr	r3, [r7, #28]
 80103ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80103f0:	19d2      	adds	r2, r2, r7
 80103f2:	f002 fa75 	bl	80128e0 <_mbrtowc_r>
 80103f6:	0003      	movs	r3, r0
 80103f8:	62b8      	str	r0, [r7, #40]	; 0x28
 80103fa:	3301      	adds	r3, #1
 80103fc:	d100      	bne.n	8010400 <__ssvfscanf_r+0x73c>
 80103fe:	e530      	b.n	800fe62 <__ssvfscanf_r+0x19e>
 8010400:	2800      	cmp	r0, #0
 8010402:	d151      	bne.n	80104a8 <__ssvfscanf_r+0x7e4>
 8010404:	6020      	str	r0, [r4, #0]
 8010406:	2301      	movs	r3, #1
 8010408:	6825      	ldr	r5, [r4, #0]
 801040a:	425b      	negs	r3, r3
 801040c:	1c6a      	adds	r2, r5, #1
 801040e:	d01a      	beq.n	8010446 <__ssvfscanf_r+0x782>
 8010410:	2048      	movs	r0, #72	; 0x48
 8010412:	3311      	adds	r3, #17
 8010414:	181b      	adds	r3, r3, r0
 8010416:	2208      	movs	r2, #8
 8010418:	2100      	movs	r1, #0
 801041a:	19d8      	adds	r0, r3, r7
 801041c:	f7fc ffd0 	bl	800d3c0 <memset>
 8010420:	4b5f      	ldr	r3, [pc, #380]	; (80105a0 <__ssvfscanf_r+0x8dc>)
 8010422:	2148      	movs	r1, #72	; 0x48
 8010424:	33e0      	adds	r3, #224	; 0xe0
 8010426:	681a      	ldr	r2, [r3, #0]
 8010428:	2310      	movs	r3, #16
 801042a:	4694      	mov	ip, r2
 801042c:	185b      	adds	r3, r3, r1
 801042e:	002a      	movs	r2, r5
 8010430:	19db      	adds	r3, r3, r7
 8010432:	4665      	mov	r5, ip
 8010434:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010436:	1879      	adds	r1, r7, r1
 8010438:	47a8      	blx	r5
 801043a:	2300      	movs	r3, #0
 801043c:	2801      	cmp	r0, #1
 801043e:	d102      	bne.n	8010446 <__ssvfscanf_r+0x782>
 8010440:	3348      	adds	r3, #72	; 0x48
 8010442:	18fb      	adds	r3, r7, r3
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	2218      	movs	r2, #24
 8010448:	2148      	movs	r1, #72	; 0x48
 801044a:	1852      	adds	r2, r2, r1
 801044c:	19d2      	adds	r2, r2, r7
 801044e:	5cd3      	ldrb	r3, [r2, r3]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d149      	bne.n	80104e8 <__ssvfscanf_r+0x824>
 8010454:	69fb      	ldr	r3, [r7, #28]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d137      	bne.n	80104ca <__ssvfscanf_r+0x806>
 801045a:	6a3b      	ldr	r3, [r7, #32]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d113      	bne.n	8010488 <__ssvfscanf_r+0x7c4>
 8010460:	6023      	str	r3, [r4, #0]
 8010462:	2e00      	cmp	r6, #0
 8010464:	d00d      	beq.n	8010482 <__ssvfscanf_r+0x7be>
 8010466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010468:	693a      	ldr	r2, [r7, #16]
 801046a:	1ae4      	subs	r4, r4, r3
 801046c:	10a3      	asrs	r3, r4, #2
 801046e:	3301      	adds	r3, #1
 8010470:	429a      	cmp	r2, r3
 8010472:	d906      	bls.n	8010482 <__ssvfscanf_r+0x7be>
 8010474:	6830      	ldr	r0, [r6, #0]
 8010476:	1d21      	adds	r1, r4, #4
 8010478:	f001 ff1e 	bl	80122b8 <realloc>
 801047c:	2800      	cmp	r0, #0
 801047e:	d000      	beq.n	8010482 <__ssvfscanf_r+0x7be>
 8010480:	6030      	str	r0, [r6, #0]
 8010482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010484:	3301      	adds	r3, #1
 8010486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	e593      	b.n	800ffb4 <__ssvfscanf_r+0x2f0>
 801048c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801048e:	60fb      	str	r3, [r7, #12]
 8010490:	2300      	movs	r3, #0
 8010492:	001e      	movs	r6, r3
 8010494:	613b      	str	r3, [r7, #16]
 8010496:	633b      	str	r3, [r7, #48]	; 0x30
 8010498:	334c      	adds	r3, #76	; 0x4c
 801049a:	18fc      	adds	r4, r7, r3
 801049c:	e778      	b.n	8010390 <__ssvfscanf_r+0x6cc>
 801049e:	6a3b      	ldr	r3, [r7, #32]
 80104a0:	001e      	movs	r6, r3
 80104a2:	613b      	str	r3, [r7, #16]
 80104a4:	633b      	str	r3, [r7, #48]	; 0x30
 80104a6:	e773      	b.n	8010390 <__ssvfscanf_r+0x6cc>
 80104a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104aa:	69fd      	ldr	r5, [r7, #28]
 80104ac:	3302      	adds	r3, #2
 80104ae:	d1aa      	bne.n	8010406 <__ssvfscanf_r+0x742>
 80104b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104b2:	685b      	ldr	r3, [r3, #4]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	dc47      	bgt.n	8010548 <__ssvfscanf_r+0x884>
 80104b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80104ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80104bc:	f002 fb10 	bl	8012ae0 <__ssrefill_r>
 80104c0:	2800      	cmp	r0, #0
 80104c2:	d041      	beq.n	8010548 <__ssvfscanf_r+0x884>
 80104c4:	2d00      	cmp	r5, #0
 80104c6:	d0c8      	beq.n	801045a <__ssvfscanf_r+0x796>
 80104c8:	e4cb      	b.n	800fe62 <__ssvfscanf_r+0x19e>
 80104ca:	69fb      	ldr	r3, [r7, #28]
 80104cc:	2248      	movs	r2, #72	; 0x48
 80104ce:	3b01      	subs	r3, #1
 80104d0:	61fb      	str	r3, [r7, #28]
 80104d2:	238c      	movs	r3, #140	; 0x8c
 80104d4:	005b      	lsls	r3, r3, #1
 80104d6:	189b      	adds	r3, r3, r2
 80104d8:	69fa      	ldr	r2, [r7, #28]
 80104da:	19db      	adds	r3, r3, r7
 80104dc:	5cd1      	ldrb	r1, [r2, r3]
 80104de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80104e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80104e2:	f002 fac1 	bl	8012a68 <_sungetc_r>
 80104e6:	e7b5      	b.n	8010454 <__ssvfscanf_r+0x790>
 80104e8:	69fa      	ldr	r2, [r7, #28]
 80104ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ec:	4694      	mov	ip, r2
 80104ee:	4463      	add	r3, ip
 80104f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80104f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f4:	2b03      	cmp	r3, #3
 80104f6:	d102      	bne.n	80104fe <__ssvfscanf_r+0x83a>
 80104f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104fa:	2b04      	cmp	r3, #4
 80104fc:	d002      	beq.n	8010504 <__ssvfscanf_r+0x840>
 80104fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010500:	3b01      	subs	r3, #1
 8010502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010504:	6a3b      	ldr	r3, [r7, #32]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d11a      	bne.n	8010540 <__ssvfscanf_r+0x87c>
 801050a:	3404      	adds	r4, #4
 801050c:	2e00      	cmp	r6, #0
 801050e:	d019      	beq.n	8010544 <__ssvfscanf_r+0x880>
 8010510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010512:	693a      	ldr	r2, [r7, #16]
 8010514:	1ae3      	subs	r3, r4, r3
 8010516:	61fb      	str	r3, [r7, #28]
 8010518:	6a3d      	ldr	r5, [r7, #32]
 801051a:	109b      	asrs	r3, r3, #2
 801051c:	4293      	cmp	r3, r2
 801051e:	d3c7      	bcc.n	80104b0 <__ssvfscanf_r+0x7ec>
 8010520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010522:	00d1      	lsls	r1, r2, #3
 8010524:	f001 fec8 	bl	80122b8 <realloc>
 8010528:	6338      	str	r0, [r7, #48]	; 0x30
 801052a:	2800      	cmp	r0, #0
 801052c:	d100      	bne.n	8010530 <__ssvfscanf_r+0x86c>
 801052e:	e591      	b.n	8010054 <__ssvfscanf_r+0x390>
 8010530:	4684      	mov	ip, r0
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	69fc      	ldr	r4, [r7, #28]
 8010536:	005b      	lsls	r3, r3, #1
 8010538:	4464      	add	r4, ip
 801053a:	6030      	str	r0, [r6, #0]
 801053c:	613b      	str	r3, [r7, #16]
 801053e:	e7b7      	b.n	80104b0 <__ssvfscanf_r+0x7ec>
 8010540:	2500      	movs	r5, #0
 8010542:	e7b5      	b.n	80104b0 <__ssvfscanf_r+0x7ec>
 8010544:	0035      	movs	r5, r6
 8010546:	e7b3      	b.n	80104b0 <__ssvfscanf_r+0x7ec>
 8010548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801054a:	2b00      	cmp	r3, #0
 801054c:	d000      	beq.n	8010550 <__ssvfscanf_r+0x88c>
 801054e:	e720      	b.n	8010392 <__ssvfscanf_r+0x6ce>
 8010550:	e783      	b.n	801045a <__ssvfscanf_r+0x796>
 8010552:	6a3b      	ldr	r3, [r7, #32]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d025      	beq.n	80105a4 <__ssvfscanf_r+0x8e0>
 8010558:	2118      	movs	r1, #24
 801055a:	2048      	movs	r0, #72	; 0x48
 801055c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801055e:	1809      	adds	r1, r1, r0
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	19c9      	adds	r1, r1, r7
 8010564:	781a      	ldrb	r2, [r3, #0]
 8010566:	5c8a      	ldrb	r2, [r1, r2]
 8010568:	2a00      	cmp	r2, #0
 801056a:	d103      	bne.n	8010574 <__ssvfscanf_r+0x8b0>
 801056c:	2c00      	cmp	r4, #0
 801056e:	d000      	beq.n	8010572 <__ssvfscanf_r+0x8ae>
 8010570:	e66c      	b.n	801024c <__ssvfscanf_r+0x588>
 8010572:	e4a4      	b.n	800febe <__ssvfscanf_r+0x1fa>
 8010574:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010576:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010578:	6852      	ldr	r2, [r2, #4]
 801057a:	3301      	adds	r3, #1
 801057c:	600b      	str	r3, [r1, #0]
 801057e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010580:	3a01      	subs	r2, #1
 8010582:	3401      	adds	r4, #1
 8010584:	604a      	str	r2, [r1, #4]
 8010586:	429c      	cmp	r4, r3
 8010588:	d100      	bne.n	801058c <__ssvfscanf_r+0x8c8>
 801058a:	e65f      	b.n	801024c <__ssvfscanf_r+0x588>
 801058c:	2a00      	cmp	r2, #0
 801058e:	dce3      	bgt.n	8010558 <__ssvfscanf_r+0x894>
 8010590:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010592:	f002 faa5 	bl	8012ae0 <__ssrefill_r>
 8010596:	2800      	cmp	r0, #0
 8010598:	d0de      	beq.n	8010558 <__ssvfscanf_r+0x894>
 801059a:	e657      	b.n	801024c <__ssvfscanf_r+0x588>
 801059c:	0000fff6 	.word	0x0000fff6
 80105a0:	20000444 	.word	0x20000444
 80105a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a6:	0032      	movs	r2, r6
 80105a8:	cb20      	ldmia	r3!, {r5}
 80105aa:	61fb      	str	r3, [r7, #28]
 80105ac:	2380      	movs	r3, #128	; 0x80
 80105ae:	401a      	ands	r2, r3
 80105b0:	421e      	tst	r6, r3
 80105b2:	d100      	bne.n	80105b6 <__ssvfscanf_r+0x8f2>
 80105b4:	e086      	b.n	80106c4 <__ssvfscanf_r+0xa00>
 80105b6:	2d00      	cmp	r5, #0
 80105b8:	d100      	bne.n	80105bc <__ssvfscanf_r+0x8f8>
 80105ba:	e480      	b.n	800febe <__ssvfscanf_r+0x1fa>
 80105bc:	2020      	movs	r0, #32
 80105be:	f7fb fbd9 	bl	800bd74 <malloc>
 80105c2:	6338      	str	r0, [r7, #48]	; 0x30
 80105c4:	2800      	cmp	r0, #0
 80105c6:	d100      	bne.n	80105ca <__ssvfscanf_r+0x906>
 80105c8:	e452      	b.n	800fe70 <__ssvfscanf_r+0x1ac>
 80105ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105cc:	6028      	str	r0, [r5, #0]
 80105ce:	88de      	ldrh	r6, [r3, #6]
 80105d0:	889c      	ldrh	r4, [r3, #4]
 80105d2:	6818      	ldr	r0, [r3, #0]
 80105d4:	42a6      	cmp	r6, r4
 80105d6:	d30e      	bcc.n	80105f6 <__ssvfscanf_r+0x932>
 80105d8:	4bc3      	ldr	r3, [pc, #780]	; (80108e8 <__ssvfscanf_r+0xc24>)
 80105da:	429c      	cmp	r4, r3
 80105dc:	d900      	bls.n	80105e0 <__ssvfscanf_r+0x91c>
 80105de:	e542      	b.n	8010066 <__ssvfscanf_r+0x3a2>
 80105e0:	3408      	adds	r4, #8
 80105e2:	b2a4      	uxth	r4, r4
 80105e4:	00a1      	lsls	r1, r4, #2
 80105e6:	f001 fe67 	bl	80122b8 <realloc>
 80105ea:	2800      	cmp	r0, #0
 80105ec:	d100      	bne.n	80105f0 <__ssvfscanf_r+0x92c>
 80105ee:	e53a      	b.n	8010066 <__ssvfscanf_r+0x3a2>
 80105f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105f2:	6018      	str	r0, [r3, #0]
 80105f4:	809c      	strh	r4, [r3, #4]
 80105f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105f8:	1c72      	adds	r2, r6, #1
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	00b6      	lsls	r6, r6, #2
 80105fe:	50f5      	str	r5, [r6, r3]
 8010600:	2320      	movs	r3, #32
 8010602:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010604:	002e      	movs	r6, r5
 8010606:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8010608:	80ca      	strh	r2, [r1, #6]
 801060a:	623b      	str	r3, [r7, #32]
 801060c:	002c      	movs	r4, r5
 801060e:	2118      	movs	r1, #24
 8010610:	2048      	movs	r0, #72	; 0x48
 8010612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010614:	1809      	adds	r1, r1, r0
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	19c9      	adds	r1, r1, r7
 801061a:	781a      	ldrb	r2, [r3, #0]
 801061c:	5c8a      	ldrb	r2, [r1, r2]
 801061e:	2a00      	cmp	r2, #0
 8010620:	d101      	bne.n	8010626 <__ssvfscanf_r+0x962>
 8010622:	633d      	str	r5, [r7, #48]	; 0x30
 8010624:	e031      	b.n	801068a <__ssvfscanf_r+0x9c6>
 8010626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010628:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801062a:	6852      	ldr	r2, [r2, #4]
 801062c:	3a01      	subs	r2, #1
 801062e:	604a      	str	r2, [r1, #4]
 8010630:	1c5a      	adds	r2, r3, #1
 8010632:	600a      	str	r2, [r1, #0]
 8010634:	781b      	ldrb	r3, [r3, #0]
 8010636:	1c6a      	adds	r2, r5, #1
 8010638:	633a      	str	r2, [r7, #48]	; 0x30
 801063a:	702b      	strb	r3, [r5, #0]
 801063c:	2e00      	cmp	r6, #0
 801063e:	d010      	beq.n	8010662 <__ssvfscanf_r+0x99e>
 8010640:	6a3b      	ldr	r3, [r7, #32]
 8010642:	1b15      	subs	r5, r2, r4
 8010644:	429d      	cmp	r5, r3
 8010646:	d30c      	bcc.n	8010662 <__ssvfscanf_r+0x99e>
 8010648:	005b      	lsls	r3, r3, #1
 801064a:	0020      	movs	r0, r4
 801064c:	0019      	movs	r1, r3
 801064e:	623b      	str	r3, [r7, #32]
 8010650:	f001 fe32 	bl	80122b8 <realloc>
 8010654:	1e04      	subs	r4, r0, #0
 8010656:	d101      	bne.n	801065c <__ssvfscanf_r+0x998>
 8010658:	f7ff fc0a 	bl	800fe70 <__ssvfscanf_r+0x1ac>
 801065c:	1943      	adds	r3, r0, r5
 801065e:	633b      	str	r3, [r7, #48]	; 0x30
 8010660:	6030      	str	r0, [r6, #0]
 8010662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010664:	3b01      	subs	r3, #1
 8010666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010668:	2b00      	cmp	r3, #0
 801066a:	d00e      	beq.n	801068a <__ssvfscanf_r+0x9c6>
 801066c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	2b00      	cmp	r3, #0
 8010672:	dc2a      	bgt.n	80106ca <__ssvfscanf_r+0xa06>
 8010674:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010676:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010678:	f002 fa32 	bl	8012ae0 <__ssrefill_r>
 801067c:	2800      	cmp	r0, #0
 801067e:	d024      	beq.n	80106ca <__ssvfscanf_r+0xa06>
 8010680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010682:	42a3      	cmp	r3, r4
 8010684:	d101      	bne.n	801068a <__ssvfscanf_r+0x9c6>
 8010686:	f7ff fbec 	bl	800fe62 <__ssvfscanf_r+0x19e>
 801068a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801068c:	1b1d      	subs	r5, r3, r4
 801068e:	42a3      	cmp	r3, r4
 8010690:	d101      	bne.n	8010696 <__ssvfscanf_r+0x9d2>
 8010692:	f7ff fc14 	bl	800febe <__ssvfscanf_r+0x1fa>
 8010696:	2300      	movs	r3, #0
 8010698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801069a:	7013      	strb	r3, [r2, #0]
 801069c:	429e      	cmp	r6, r3
 801069e:	d009      	beq.n	80106b4 <__ssvfscanf_r+0x9f0>
 80106a0:	6a3b      	ldr	r3, [r7, #32]
 80106a2:	1c69      	adds	r1, r5, #1
 80106a4:	428b      	cmp	r3, r1
 80106a6:	d905      	bls.n	80106b4 <__ssvfscanf_r+0x9f0>
 80106a8:	6830      	ldr	r0, [r6, #0]
 80106aa:	f001 fe05 	bl	80122b8 <realloc>
 80106ae:	2800      	cmp	r0, #0
 80106b0:	d000      	beq.n	80106b4 <__ssvfscanf_r+0x9f0>
 80106b2:	6030      	str	r0, [r6, #0]
 80106b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b6:	3301      	adds	r3, #1
 80106b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106bc:	195b      	adds	r3, r3, r5
 80106be:	63bb      	str	r3, [r7, #56]	; 0x38
 80106c0:	69fb      	ldr	r3, [r7, #28]
 80106c2:	e477      	b.n	800ffb4 <__ssvfscanf_r+0x2f0>
 80106c4:	0016      	movs	r6, r2
 80106c6:	623a      	str	r2, [r7, #32]
 80106c8:	e7a0      	b.n	801060c <__ssvfscanf_r+0x948>
 80106ca:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80106cc:	e79f      	b.n	801060e <__ssvfscanf_r+0x94a>
 80106ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d101      	bne.n	80106d8 <__ssvfscanf_r+0xa14>
 80106d4:	3b01      	subs	r3, #1
 80106d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106d8:	2210      	movs	r2, #16
 80106da:	2301      	movs	r3, #1
 80106dc:	0034      	movs	r4, r6
 80106de:	4032      	ands	r2, r6
 80106e0:	401c      	ands	r4, r3
 80106e2:	61fa      	str	r2, [r7, #28]
 80106e4:	421e      	tst	r6, r3
 80106e6:	d100      	bne.n	80106ea <__ssvfscanf_r+0xa26>
 80106e8:	e102      	b.n	80108f0 <__ssvfscanf_r+0xc2c>
 80106ea:	2a00      	cmp	r2, #0
 80106ec:	d000      	beq.n	80106f0 <__ssvfscanf_r+0xa2c>
 80106ee:	e09f      	b.n	8010830 <__ssvfscanf_r+0xb6c>
 80106f0:	2080      	movs	r0, #128	; 0x80
 80106f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f4:	cb10      	ldmia	r3!, {r4}
 80106f6:	60fb      	str	r3, [r7, #12]
 80106f8:	4206      	tst	r6, r0
 80106fa:	d100      	bne.n	80106fe <__ssvfscanf_r+0xa3a>
 80106fc:	e0a1      	b.n	8010842 <__ssvfscanf_r+0xb7e>
 80106fe:	2c00      	cmp	r4, #0
 8010700:	d100      	bne.n	8010704 <__ssvfscanf_r+0xa40>
 8010702:	e4aa      	b.n	801005a <__ssvfscanf_r+0x396>
 8010704:	f7fb fb36 	bl	800bd74 <malloc>
 8010708:	6338      	str	r0, [r7, #48]	; 0x30
 801070a:	2800      	cmp	r0, #0
 801070c:	d100      	bne.n	8010710 <__ssvfscanf_r+0xa4c>
 801070e:	e4a1      	b.n	8010054 <__ssvfscanf_r+0x390>
 8010710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010712:	6023      	str	r3, [r4, #0]
 8010714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010716:	88de      	ldrh	r6, [r3, #6]
 8010718:	889d      	ldrh	r5, [r3, #4]
 801071a:	42ae      	cmp	r6, r5
 801071c:	d310      	bcc.n	8010740 <__ssvfscanf_r+0xa7c>
 801071e:	4b72      	ldr	r3, [pc, #456]	; (80108e8 <__ssvfscanf_r+0xc24>)
 8010720:	429d      	cmp	r5, r3
 8010722:	d900      	bls.n	8010726 <__ssvfscanf_r+0xa62>
 8010724:	e496      	b.n	8010054 <__ssvfscanf_r+0x390>
 8010726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010728:	3508      	adds	r5, #8
 801072a:	b2ad      	uxth	r5, r5
 801072c:	6818      	ldr	r0, [r3, #0]
 801072e:	00a9      	lsls	r1, r5, #2
 8010730:	f001 fdc2 	bl	80122b8 <realloc>
 8010734:	2800      	cmp	r0, #0
 8010736:	d100      	bne.n	801073a <__ssvfscanf_r+0xa76>
 8010738:	e48c      	b.n	8010054 <__ssvfscanf_r+0x390>
 801073a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801073c:	6018      	str	r0, [r3, #0]
 801073e:	809d      	strh	r5, [r3, #4]
 8010740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010742:	1c72      	adds	r2, r6, #1
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	00b6      	lsls	r6, r6, #2
 8010748:	50f4      	str	r4, [r6, r3]
 801074a:	2320      	movs	r3, #32
 801074c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801074e:	0025      	movs	r5, r4
 8010750:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8010752:	80ca      	strh	r2, [r1, #6]
 8010754:	613b      	str	r3, [r7, #16]
 8010756:	2300      	movs	r3, #0
 8010758:	623b      	str	r3, [r7, #32]
 801075a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801075c:	4a63      	ldr	r2, [pc, #396]	; (80108ec <__ssvfscanf_r+0xc28>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	5cd3      	ldrb	r3, [r2, r3]
 8010764:	2208      	movs	r2, #8
 8010766:	4213      	tst	r3, r2
 8010768:	d149      	bne.n	80107fe <__ssvfscanf_r+0xb3a>
 801076a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801076c:	2b00      	cmp	r3, #0
 801076e:	d046      	beq.n	80107fe <__ssvfscanf_r+0xb3a>
 8010770:	f7fc feb2 	bl	800d4d8 <__locale_mb_cur_max>
 8010774:	6a3b      	ldr	r3, [r7, #32]
 8010776:	4298      	cmp	r0, r3
 8010778:	d101      	bne.n	801077e <__ssvfscanf_r+0xaba>
 801077a:	f7ff fb72 	bl	800fe62 <__ssvfscanf_r+0x19e>
 801077e:	6a3a      	ldr	r2, [r7, #32]
 8010780:	2048      	movs	r0, #72	; 0x48
 8010782:	1c56      	adds	r6, r2, #1
 8010784:	228c      	movs	r2, #140	; 0x8c
 8010786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010788:	0052      	lsls	r2, r2, #1
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	1812      	adds	r2, r2, r0
 801078e:	7819      	ldrb	r1, [r3, #0]
 8010790:	6a38      	ldr	r0, [r7, #32]
 8010792:	19d2      	adds	r2, r2, r7
 8010794:	5411      	strb	r1, [r2, r0]
 8010796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010798:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801079a:	6852      	ldr	r2, [r2, #4]
 801079c:	3301      	adds	r3, #1
 801079e:	600b      	str	r3, [r1, #0]
 80107a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a2:	3a01      	subs	r2, #1
 80107a4:	604a      	str	r2, [r1, #4]
 80107a6:	2b03      	cmp	r3, #3
 80107a8:	d102      	bne.n	80107b0 <__ssvfscanf_r+0xaec>
 80107aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107ac:	2b04      	cmp	r3, #4
 80107ae:	d007      	beq.n	80107c0 <__ssvfscanf_r+0xafc>
 80107b0:	2048      	movs	r0, #72	; 0x48
 80107b2:	2310      	movs	r3, #16
 80107b4:	181b      	adds	r3, r3, r0
 80107b6:	2208      	movs	r2, #8
 80107b8:	2100      	movs	r1, #0
 80107ba:	19d8      	adds	r0, r3, r7
 80107bc:	f7fc fe00 	bl	800d3c0 <memset>
 80107c0:	2148      	movs	r1, #72	; 0x48
 80107c2:	2310      	movs	r3, #16
 80107c4:	228c      	movs	r2, #140	; 0x8c
 80107c6:	185b      	adds	r3, r3, r1
 80107c8:	0052      	lsls	r2, r2, #1
 80107ca:	19db      	adds	r3, r3, r7
 80107cc:	1852      	adds	r2, r2, r1
 80107ce:	9300      	str	r3, [sp, #0]
 80107d0:	0021      	movs	r1, r4
 80107d2:	0033      	movs	r3, r6
 80107d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80107d6:	19d2      	adds	r2, r2, r7
 80107d8:	f002 f882 	bl	80128e0 <_mbrtowc_r>
 80107dc:	0003      	movs	r3, r0
 80107de:	62b8      	str	r0, [r7, #40]	; 0x28
 80107e0:	3301      	adds	r3, #1
 80107e2:	d101      	bne.n	80107e8 <__ssvfscanf_r+0xb24>
 80107e4:	f7ff fb3d 	bl	800fe62 <__ssvfscanf_r+0x19e>
 80107e8:	2800      	cmp	r0, #0
 80107ea:	d12f      	bne.n	801084c <__ssvfscanf_r+0xb88>
 80107ec:	6020      	str	r0, [r4, #0]
 80107ee:	6820      	ldr	r0, [r4, #0]
 80107f0:	f002 f894 	bl	801291c <iswspace>
 80107f4:	6238      	str	r0, [r7, #32]
 80107f6:	2800      	cmp	r0, #0
 80107f8:	d04a      	beq.n	8010890 <__ssvfscanf_r+0xbcc>
 80107fa:	2e00      	cmp	r6, #0
 80107fc:	d13c      	bne.n	8010878 <__ssvfscanf_r+0xbb4>
 80107fe:	69fb      	ldr	r3, [r7, #28]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d000      	beq.n	8010806 <__ssvfscanf_r+0xb42>
 8010804:	e640      	b.n	8010488 <__ssvfscanf_r+0x7c4>
 8010806:	6023      	str	r3, [r4, #0]
 8010808:	2d00      	cmp	r5, #0
 801080a:	d100      	bne.n	801080e <__ssvfscanf_r+0xb4a>
 801080c:	e639      	b.n	8010482 <__ssvfscanf_r+0x7be>
 801080e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010810:	693a      	ldr	r2, [r7, #16]
 8010812:	1ae4      	subs	r4, r4, r3
 8010814:	10a3      	asrs	r3, r4, #2
 8010816:	3301      	adds	r3, #1
 8010818:	429a      	cmp	r2, r3
 801081a:	d800      	bhi.n	801081e <__ssvfscanf_r+0xb5a>
 801081c:	e631      	b.n	8010482 <__ssvfscanf_r+0x7be>
 801081e:	6828      	ldr	r0, [r5, #0]
 8010820:	1d21      	adds	r1, r4, #4
 8010822:	f001 fd49 	bl	80122b8 <realloc>
 8010826:	2800      	cmp	r0, #0
 8010828:	d100      	bne.n	801082c <__ssvfscanf_r+0xb68>
 801082a:	e62a      	b.n	8010482 <__ssvfscanf_r+0x7be>
 801082c:	6028      	str	r0, [r5, #0]
 801082e:	e628      	b.n	8010482 <__ssvfscanf_r+0x7be>
 8010830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010832:	60fb      	str	r3, [r7, #12]
 8010834:	2300      	movs	r3, #0
 8010836:	001d      	movs	r5, r3
 8010838:	613b      	str	r3, [r7, #16]
 801083a:	633b      	str	r3, [r7, #48]	; 0x30
 801083c:	334c      	adds	r3, #76	; 0x4c
 801083e:	18fc      	adds	r4, r7, r3
 8010840:	e789      	b.n	8010756 <__ssvfscanf_r+0xa92>
 8010842:	69fb      	ldr	r3, [r7, #28]
 8010844:	001d      	movs	r5, r3
 8010846:	613b      	str	r3, [r7, #16]
 8010848:	633b      	str	r3, [r7, #48]	; 0x30
 801084a:	e784      	b.n	8010756 <__ssvfscanf_r+0xa92>
 801084c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084e:	623e      	str	r6, [r7, #32]
 8010850:	3302      	adds	r3, #2
 8010852:	d1cc      	bne.n	80107ee <__ssvfscanf_r+0xb2a>
 8010854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010856:	685b      	ldr	r3, [r3, #4]
 8010858:	2b00      	cmp	r3, #0
 801085a:	dd00      	ble.n	801085e <__ssvfscanf_r+0xb9a>
 801085c:	e77d      	b.n	801075a <__ssvfscanf_r+0xa96>
 801085e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010860:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010862:	f002 f93d 	bl	8012ae0 <__ssrefill_r>
 8010866:	2800      	cmp	r0, #0
 8010868:	d100      	bne.n	801086c <__ssvfscanf_r+0xba8>
 801086a:	e776      	b.n	801075a <__ssvfscanf_r+0xa96>
 801086c:	6a3b      	ldr	r3, [r7, #32]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d001      	beq.n	8010876 <__ssvfscanf_r+0xbb2>
 8010872:	f7ff faf6 	bl	800fe62 <__ssvfscanf_r+0x19e>
 8010876:	e7c2      	b.n	80107fe <__ssvfscanf_r+0xb3a>
 8010878:	238c      	movs	r3, #140	; 0x8c
 801087a:	2248      	movs	r2, #72	; 0x48
 801087c:	005b      	lsls	r3, r3, #1
 801087e:	189b      	adds	r3, r3, r2
 8010880:	3e01      	subs	r6, #1
 8010882:	19db      	adds	r3, r3, r7
 8010884:	5cf1      	ldrb	r1, [r6, r3]
 8010886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010888:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801088a:	f002 f8ed 	bl	8012a68 <_sungetc_r>
 801088e:	e7b4      	b.n	80107fa <__ssvfscanf_r+0xb36>
 8010890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010892:	199b      	adds	r3, r3, r6
 8010894:	63bb      	str	r3, [r7, #56]	; 0x38
 8010896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010898:	2b03      	cmp	r3, #3
 801089a:	d102      	bne.n	80108a2 <__ssvfscanf_r+0xbde>
 801089c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801089e:	2b04      	cmp	r3, #4
 80108a0:	d002      	beq.n	80108a8 <__ssvfscanf_r+0xbe4>
 80108a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108a4:	3b01      	subs	r3, #1
 80108a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108a8:	69fb      	ldr	r3, [r7, #28]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d1d2      	bne.n	8010854 <__ssvfscanf_r+0xb90>
 80108ae:	3404      	adds	r4, #4
 80108b0:	2d00      	cmp	r5, #0
 80108b2:	d016      	beq.n	80108e2 <__ssvfscanf_r+0xc1e>
 80108b4:	69fa      	ldr	r2, [r7, #28]
 80108b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b8:	623a      	str	r2, [r7, #32]
 80108ba:	693a      	ldr	r2, [r7, #16]
 80108bc:	1ae6      	subs	r6, r4, r3
 80108be:	10b3      	asrs	r3, r6, #2
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d3c7      	bcc.n	8010854 <__ssvfscanf_r+0xb90>
 80108c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108c6:	00d1      	lsls	r1, r2, #3
 80108c8:	f001 fcf6 	bl	80122b8 <realloc>
 80108cc:	6338      	str	r0, [r7, #48]	; 0x30
 80108ce:	2800      	cmp	r0, #0
 80108d0:	d101      	bne.n	80108d6 <__ssvfscanf_r+0xc12>
 80108d2:	f7ff fbbf 	bl	8010054 <__ssvfscanf_r+0x390>
 80108d6:	693b      	ldr	r3, [r7, #16]
 80108d8:	1984      	adds	r4, r0, r6
 80108da:	005b      	lsls	r3, r3, #1
 80108dc:	6028      	str	r0, [r5, #0]
 80108de:	613b      	str	r3, [r7, #16]
 80108e0:	e7b8      	b.n	8010854 <__ssvfscanf_r+0xb90>
 80108e2:	623d      	str	r5, [r7, #32]
 80108e4:	e7b6      	b.n	8010854 <__ssvfscanf_r+0xb90>
 80108e6:	46c0      	nop			; (mov r8, r8)
 80108e8:	0000fff6 	.word	0x0000fff6
 80108ec:	08015b39 	.word	0x08015b39
 80108f0:	69fb      	ldr	r3, [r7, #28]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d01c      	beq.n	8010930 <__ssvfscanf_r+0xc6c>
 80108f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108f8:	49bf      	ldr	r1, [pc, #764]	; (8010bf8 <__ssvfscanf_r+0xf34>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	781a      	ldrb	r2, [r3, #0]
 80108fe:	5c8a      	ldrb	r2, [r1, r2]
 8010900:	2108      	movs	r1, #8
 8010902:	420a      	tst	r2, r1
 8010904:	d000      	beq.n	8010908 <__ssvfscanf_r+0xc44>
 8010906:	e4a1      	b.n	801024c <__ssvfscanf_r+0x588>
 8010908:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801090a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801090c:	6852      	ldr	r2, [r2, #4]
 801090e:	3301      	adds	r3, #1
 8010910:	600b      	str	r3, [r1, #0]
 8010912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010914:	3a01      	subs	r2, #1
 8010916:	3401      	adds	r4, #1
 8010918:	604a      	str	r2, [r1, #4]
 801091a:	429c      	cmp	r4, r3
 801091c:	d100      	bne.n	8010920 <__ssvfscanf_r+0xc5c>
 801091e:	e495      	b.n	801024c <__ssvfscanf_r+0x588>
 8010920:	2a00      	cmp	r2, #0
 8010922:	dce8      	bgt.n	80108f6 <__ssvfscanf_r+0xc32>
 8010924:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010926:	f002 f8db 	bl	8012ae0 <__ssrefill_r>
 801092a:	2800      	cmp	r0, #0
 801092c:	d0e3      	beq.n	80108f6 <__ssvfscanf_r+0xc32>
 801092e:	e48d      	b.n	801024c <__ssvfscanf_r+0x588>
 8010930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010932:	0032      	movs	r2, r6
 8010934:	cb10      	ldmia	r3!, {r4}
 8010936:	61fb      	str	r3, [r7, #28]
 8010938:	2380      	movs	r3, #128	; 0x80
 801093a:	401a      	ands	r2, r3
 801093c:	421e      	tst	r6, r3
 801093e:	d039      	beq.n	80109b4 <__ssvfscanf_r+0xcf0>
 8010940:	2c00      	cmp	r4, #0
 8010942:	d101      	bne.n	8010948 <__ssvfscanf_r+0xc84>
 8010944:	f7ff fabb 	bl	800febe <__ssvfscanf_r+0x1fa>
 8010948:	2020      	movs	r0, #32
 801094a:	f7fb fa13 	bl	800bd74 <malloc>
 801094e:	6338      	str	r0, [r7, #48]	; 0x30
 8010950:	2800      	cmp	r0, #0
 8010952:	d101      	bne.n	8010958 <__ssvfscanf_r+0xc94>
 8010954:	f7ff fa8c 	bl	800fe70 <__ssvfscanf_r+0x1ac>
 8010958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801095a:	6020      	str	r0, [r4, #0]
 801095c:	88de      	ldrh	r6, [r3, #6]
 801095e:	889d      	ldrh	r5, [r3, #4]
 8010960:	6818      	ldr	r0, [r3, #0]
 8010962:	42ae      	cmp	r6, r5
 8010964:	d310      	bcc.n	8010988 <__ssvfscanf_r+0xcc4>
 8010966:	4ba5      	ldr	r3, [pc, #660]	; (8010bfc <__ssvfscanf_r+0xf38>)
 8010968:	429d      	cmp	r5, r3
 801096a:	d901      	bls.n	8010970 <__ssvfscanf_r+0xcac>
 801096c:	f7ff fb7b 	bl	8010066 <__ssvfscanf_r+0x3a2>
 8010970:	3508      	adds	r5, #8
 8010972:	b2ad      	uxth	r5, r5
 8010974:	00a9      	lsls	r1, r5, #2
 8010976:	f001 fc9f 	bl	80122b8 <realloc>
 801097a:	2800      	cmp	r0, #0
 801097c:	d101      	bne.n	8010982 <__ssvfscanf_r+0xcbe>
 801097e:	f7ff fb72 	bl	8010066 <__ssvfscanf_r+0x3a2>
 8010982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010984:	6018      	str	r0, [r3, #0]
 8010986:	809d      	strh	r5, [r3, #4]
 8010988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801098a:	1c72      	adds	r2, r6, #1
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	00b6      	lsls	r6, r6, #2
 8010990:	50f4      	str	r4, [r6, r3]
 8010992:	2320      	movs	r3, #32
 8010994:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010996:	0026      	movs	r6, r4
 8010998:	80ca      	strh	r2, [r1, #6]
 801099a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801099c:	633b      	str	r3, [r7, #48]	; 0x30
 801099e:	0025      	movs	r5, r4
 80109a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109a2:	4995      	ldr	r1, [pc, #596]	; (8010bf8 <__ssvfscanf_r+0xf34>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	781a      	ldrb	r2, [r3, #0]
 80109a8:	5c8a      	ldrb	r2, [r1, r2]
 80109aa:	2108      	movs	r1, #8
 80109ac:	420a      	tst	r2, r1
 80109ae:	d004      	beq.n	80109ba <__ssvfscanf_r+0xcf6>
 80109b0:	623c      	str	r4, [r7, #32]
 80109b2:	e031      	b.n	8010a18 <__ssvfscanf_r+0xd54>
 80109b4:	0016      	movs	r6, r2
 80109b6:	633a      	str	r2, [r7, #48]	; 0x30
 80109b8:	e7f1      	b.n	801099e <__ssvfscanf_r+0xcda>
 80109ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80109be:	6852      	ldr	r2, [r2, #4]
 80109c0:	3a01      	subs	r2, #1
 80109c2:	604a      	str	r2, [r1, #4]
 80109c4:	1c5a      	adds	r2, r3, #1
 80109c6:	600a      	str	r2, [r1, #0]
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	1c62      	adds	r2, r4, #1
 80109cc:	623a      	str	r2, [r7, #32]
 80109ce:	7023      	strb	r3, [r4, #0]
 80109d0:	2e00      	cmp	r6, #0
 80109d2:	d010      	beq.n	80109f6 <__ssvfscanf_r+0xd32>
 80109d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d6:	1b54      	subs	r4, r2, r5
 80109d8:	429c      	cmp	r4, r3
 80109da:	d30c      	bcc.n	80109f6 <__ssvfscanf_r+0xd32>
 80109dc:	005b      	lsls	r3, r3, #1
 80109de:	0028      	movs	r0, r5
 80109e0:	0019      	movs	r1, r3
 80109e2:	633b      	str	r3, [r7, #48]	; 0x30
 80109e4:	f001 fc68 	bl	80122b8 <realloc>
 80109e8:	1e05      	subs	r5, r0, #0
 80109ea:	d101      	bne.n	80109f0 <__ssvfscanf_r+0xd2c>
 80109ec:	f7ff fa40 	bl	800fe70 <__ssvfscanf_r+0x1ac>
 80109f0:	1903      	adds	r3, r0, r4
 80109f2:	623b      	str	r3, [r7, #32]
 80109f4:	6030      	str	r0, [r6, #0]
 80109f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109f8:	3b01      	subs	r3, #1
 80109fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d00b      	beq.n	8010a18 <__ssvfscanf_r+0xd54>
 8010a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	dd01      	ble.n	8010a0c <__ssvfscanf_r+0xd48>
 8010a08:	6a3c      	ldr	r4, [r7, #32]
 8010a0a:	e7c9      	b.n	80109a0 <__ssvfscanf_r+0xcdc>
 8010a0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010a10:	f002 f866 	bl	8012ae0 <__ssrefill_r>
 8010a14:	2800      	cmp	r0, #0
 8010a16:	d0f7      	beq.n	8010a08 <__ssvfscanf_r+0xd44>
 8010a18:	2300      	movs	r3, #0
 8010a1a:	6a3a      	ldr	r2, [r7, #32]
 8010a1c:	7013      	strb	r3, [r2, #0]
 8010a1e:	1b55      	subs	r5, r2, r5
 8010a20:	2e00      	cmp	r6, #0
 8010a22:	d009      	beq.n	8010a38 <__ssvfscanf_r+0xd74>
 8010a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a26:	1c69      	adds	r1, r5, #1
 8010a28:	428b      	cmp	r3, r1
 8010a2a:	d905      	bls.n	8010a38 <__ssvfscanf_r+0xd74>
 8010a2c:	6830      	ldr	r0, [r6, #0]
 8010a2e:	f001 fc43 	bl	80122b8 <realloc>
 8010a32:	2800      	cmp	r0, #0
 8010a34:	d000      	beq.n	8010a38 <__ssvfscanf_r+0xd74>
 8010a36:	6030      	str	r0, [r6, #0]
 8010a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a3a:	195b      	adds	r3, r3, r5
 8010a3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8010a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a40:	3301      	adds	r3, #1
 8010a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a44:	e63c      	b.n	80106c0 <__ssvfscanf_r+0x9fc>
 8010a46:	22ae      	movs	r2, #174	; 0xae
 8010a48:	2100      	movs	r1, #0
 8010a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a4c:	0052      	lsls	r2, r2, #1
 8010a4e:	3b01      	subs	r3, #1
 8010a50:	6239      	str	r1, [r7, #32]
 8010a52:	4293      	cmp	r3, r2
 8010a54:	d906      	bls.n	8010a64 <__ssvfscanf_r+0xda0>
 8010a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a58:	3b5e      	subs	r3, #94	; 0x5e
 8010a5a:	3bff      	subs	r3, #255	; 0xff
 8010a5c:	623b      	str	r3, [r7, #32]
 8010a5e:	235e      	movs	r3, #94	; 0x5e
 8010a60:	33ff      	adds	r3, #255	; 0xff
 8010a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a64:	24d8      	movs	r4, #216	; 0xd8
 8010a66:	2300      	movs	r3, #0
 8010a68:	2248      	movs	r2, #72	; 0x48
 8010a6a:	0124      	lsls	r4, r4, #4
 8010a6c:	4334      	orrs	r4, r6
 8010a6e:	2680      	movs	r6, #128	; 0x80
 8010a70:	61fb      	str	r3, [r7, #28]
 8010a72:	3319      	adds	r3, #25
 8010a74:	33ff      	adds	r3, #255	; 0xff
 8010a76:	189b      	adds	r3, r3, r2
 8010a78:	19dd      	adds	r5, r3, r7
 8010a7a:	00b6      	lsls	r6, r6, #2
 8010a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	7813      	ldrb	r3, [r2, #0]
 8010a82:	2b39      	cmp	r3, #57	; 0x39
 8010a84:	d80f      	bhi.n	8010aa6 <__ssvfscanf_r+0xde2>
 8010a86:	2b2a      	cmp	r3, #42	; 0x2a
 8010a88:	d91b      	bls.n	8010ac2 <__ssvfscanf_r+0xdfe>
 8010a8a:	0018      	movs	r0, r3
 8010a8c:	382b      	subs	r0, #43	; 0x2b
 8010a8e:	280e      	cmp	r0, #14
 8010a90:	d817      	bhi.n	8010ac2 <__ssvfscanf_r+0xdfe>
 8010a92:	f7ef fb3f 	bl	8000114 <__gnu_thumb1_case_uqi>
 8010a96:	168f      	.short	0x168f
 8010a98:	5416168f 	.word	0x5416168f
 8010a9c:	80808080 	.word	0x80808080
 8010aa0:	87808080 	.word	0x87808080
 8010aa4:	87          	.byte	0x87
 8010aa5:	00          	.byte	0x00
 8010aa6:	2b66      	cmp	r3, #102	; 0x66
 8010aa8:	d83a      	bhi.n	8010b20 <__ssvfscanf_r+0xe5c>
 8010aaa:	2b60      	cmp	r3, #96	; 0x60
 8010aac:	d803      	bhi.n	8010ab6 <__ssvfscanf_r+0xdf2>
 8010aae:	2b46      	cmp	r3, #70	; 0x46
 8010ab0:	d805      	bhi.n	8010abe <__ssvfscanf_r+0xdfa>
 8010ab2:	2b40      	cmp	r3, #64	; 0x40
 8010ab4:	d905      	bls.n	8010ac2 <__ssvfscanf_r+0xdfe>
 8010ab6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ab8:	290a      	cmp	r1, #10
 8010aba:	dc71      	bgt.n	8010ba0 <__ssvfscanf_r+0xedc>
 8010abc:	e001      	b.n	8010ac2 <__ssvfscanf_r+0xdfe>
 8010abe:	2b58      	cmp	r3, #88	; 0x58
 8010ac0:	d030      	beq.n	8010b24 <__ssvfscanf_r+0xe60>
 8010ac2:	05e3      	lsls	r3, r4, #23
 8010ac4:	d515      	bpl.n	8010af2 <__ssvfscanf_r+0xe2e>
 8010ac6:	238c      	movs	r3, #140	; 0x8c
 8010ac8:	2248      	movs	r2, #72	; 0x48
 8010aca:	005b      	lsls	r3, r3, #1
 8010acc:	189b      	adds	r3, r3, r2
 8010ace:	19db      	adds	r3, r3, r7
 8010ad0:	429d      	cmp	r5, r3
 8010ad2:	d905      	bls.n	8010ae0 <__ssvfscanf_r+0xe1c>
 8010ad4:	3d01      	subs	r5, #1
 8010ad6:	7829      	ldrb	r1, [r5, #0]
 8010ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ada:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010adc:	f001 ffc4 	bl	8012a68 <_sungetc_r>
 8010ae0:	238c      	movs	r3, #140	; 0x8c
 8010ae2:	2248      	movs	r2, #72	; 0x48
 8010ae4:	005b      	lsls	r3, r3, #1
 8010ae6:	189b      	adds	r3, r3, r2
 8010ae8:	19db      	adds	r3, r3, r7
 8010aea:	429d      	cmp	r5, r3
 8010aec:	d101      	bne.n	8010af2 <__ssvfscanf_r+0xe2e>
 8010aee:	f7ff f9e6 	bl	800febe <__ssvfscanf_r+0x1fa>
 8010af2:	2310      	movs	r3, #16
 8010af4:	0022      	movs	r2, r4
 8010af6:	401a      	ands	r2, r3
 8010af8:	421c      	tst	r4, r3
 8010afa:	d171      	bne.n	8010be0 <__ssvfscanf_r+0xf1c>
 8010afc:	218c      	movs	r1, #140	; 0x8c
 8010afe:	2048      	movs	r0, #72	; 0x48
 8010b00:	0049      	lsls	r1, r1, #1
 8010b02:	1809      	adds	r1, r1, r0
 8010b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b06:	697e      	ldr	r6, [r7, #20]
 8010b08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010b0a:	19c9      	adds	r1, r1, r7
 8010b0c:	702a      	strb	r2, [r5, #0]
 8010b0e:	47b0      	blx	r6
 8010b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b12:	1d1e      	adds	r6, r3, #4
 8010b14:	06a3      	lsls	r3, r4, #26
 8010b16:	d559      	bpl.n	8010bcc <__ssvfscanf_r+0xf08>
 8010b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	6018      	str	r0, [r3, #0]
 8010b1e:	e05b      	b.n	8010bd8 <__ssvfscanf_r+0xf14>
 8010b20:	2b78      	cmp	r3, #120	; 0x78
 8010b22:	d1ce      	bne.n	8010ac2 <__ssvfscanf_r+0xdfe>
 8010b24:	21c0      	movs	r1, #192	; 0xc0
 8010b26:	00c9      	lsls	r1, r1, #3
 8010b28:	4021      	ands	r1, r4
 8010b2a:	42b1      	cmp	r1, r6
 8010b2c:	d1c9      	bne.n	8010ac2 <__ssvfscanf_r+0xdfe>
 8010b2e:	4934      	ldr	r1, [pc, #208]	; (8010c00 <__ssvfscanf_r+0xf3c>)
 8010b30:	4021      	ands	r1, r4
 8010b32:	24a0      	movs	r4, #160	; 0xa0
 8010b34:	00e4      	lsls	r4, r4, #3
 8010b36:	430c      	orrs	r4, r1
 8010b38:	2110      	movs	r1, #16
 8010b3a:	6279      	str	r1, [r7, #36]	; 0x24
 8010b3c:	e00b      	b.n	8010b56 <__ssvfscanf_r+0xe92>
 8010b3e:	0521      	lsls	r1, r4, #20
 8010b40:	d509      	bpl.n	8010b56 <__ssvfscanf_r+0xe92>
 8010b42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b44:	2900      	cmp	r1, #0
 8010b46:	d102      	bne.n	8010b4e <__ssvfscanf_r+0xe8a>
 8010b48:	3108      	adds	r1, #8
 8010b4a:	4334      	orrs	r4, r6
 8010b4c:	6279      	str	r1, [r7, #36]	; 0x24
 8010b4e:	0561      	lsls	r1, r4, #21
 8010b50:	d504      	bpl.n	8010b5c <__ssvfscanf_r+0xe98>
 8010b52:	492c      	ldr	r1, [pc, #176]	; (8010c04 <__ssvfscanf_r+0xf40>)
 8010b54:	400c      	ands	r4, r1
 8010b56:	702b      	strb	r3, [r5, #0]
 8010b58:	3501      	adds	r5, #1
 8010b5a:	e00c      	b.n	8010b76 <__ssvfscanf_r+0xeb2>
 8010b5c:	4b2a      	ldr	r3, [pc, #168]	; (8010c08 <__ssvfscanf_r+0xf44>)
 8010b5e:	401c      	ands	r4, r3
 8010b60:	6a3b      	ldr	r3, [r7, #32]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d004      	beq.n	8010b70 <__ssvfscanf_r+0xeac>
 8010b66:	3b01      	subs	r3, #1
 8010b68:	623b      	str	r3, [r7, #32]
 8010b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b70:	69fb      	ldr	r3, [r7, #28]
 8010b72:	3301      	adds	r3, #1
 8010b74:	61fb      	str	r3, [r7, #28]
 8010b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	3b01      	subs	r3, #1
 8010b7e:	604b      	str	r3, [r1, #4]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	dd1c      	ble.n	8010bbe <__ssvfscanf_r+0xefa>
 8010b84:	3201      	adds	r2, #1
 8010b86:	600a      	str	r2, [r1, #0]
 8010b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b8a:	3b01      	subs	r3, #1
 8010b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d000      	beq.n	8010b94 <__ssvfscanf_r+0xed0>
 8010b92:	e773      	b.n	8010a7c <__ssvfscanf_r+0xdb8>
 8010b94:	e795      	b.n	8010ac2 <__ssvfscanf_r+0xdfe>
 8010b96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b98:	491c      	ldr	r1, [pc, #112]	; (8010c0c <__ssvfscanf_r+0xf48>)
 8010b9a:	0040      	lsls	r0, r0, #1
 8010b9c:	5e41      	ldrsh	r1, [r0, r1]
 8010b9e:	6279      	str	r1, [r7, #36]	; 0x24
 8010ba0:	491b      	ldr	r1, [pc, #108]	; (8010c10 <__ssvfscanf_r+0xf4c>)
 8010ba2:	e7d7      	b.n	8010b54 <__ssvfscanf_r+0xe90>
 8010ba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ba6:	4919      	ldr	r1, [pc, #100]	; (8010c0c <__ssvfscanf_r+0xf48>)
 8010ba8:	0040      	lsls	r0, r0, #1
 8010baa:	5e41      	ldrsh	r1, [r0, r1]
 8010bac:	6279      	str	r1, [r7, #36]	; 0x24
 8010bae:	2908      	cmp	r1, #8
 8010bb0:	dcf6      	bgt.n	8010ba0 <__ssvfscanf_r+0xedc>
 8010bb2:	e786      	b.n	8010ac2 <__ssvfscanf_r+0xdfe>
 8010bb4:	2180      	movs	r1, #128	; 0x80
 8010bb6:	420c      	tst	r4, r1
 8010bb8:	d083      	beq.n	8010ac2 <__ssvfscanf_r+0xdfe>
 8010bba:	438c      	bics	r4, r1
 8010bbc:	e7cb      	b.n	8010b56 <__ssvfscanf_r+0xe92>
 8010bbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010bc0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010bc2:	f001 ff8d 	bl	8012ae0 <__ssrefill_r>
 8010bc6:	2800      	cmp	r0, #0
 8010bc8:	d0de      	beq.n	8010b88 <__ssvfscanf_r+0xec4>
 8010bca:	e77a      	b.n	8010ac2 <__ssvfscanf_r+0xdfe>
 8010bcc:	2308      	movs	r3, #8
 8010bce:	421c      	tst	r4, r3
 8010bd0:	d020      	beq.n	8010c14 <__ssvfscanf_r+0xf50>
 8010bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	7018      	strb	r0, [r3, #0]
 8010bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bda:	633e      	str	r6, [r7, #48]	; 0x30
 8010bdc:	3301      	adds	r3, #1
 8010bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010be0:	238c      	movs	r3, #140	; 0x8c
 8010be2:	2248      	movs	r2, #72	; 0x48
 8010be4:	005b      	lsls	r3, r3, #1
 8010be6:	189b      	adds	r3, r3, r2
 8010be8:	19db      	adds	r3, r3, r7
 8010bea:	1aed      	subs	r5, r5, r3
 8010bec:	69fb      	ldr	r3, [r7, #28]
 8010bee:	18ed      	adds	r5, r5, r3
 8010bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bf2:	195b      	adds	r3, r3, r5
 8010bf4:	f7ff f92d 	bl	800fe52 <__ssvfscanf_r+0x18e>
 8010bf8:	08015b39 	.word	0x08015b39
 8010bfc:	0000fff6 	.word	0x0000fff6
 8010c00:	fffffdff 	.word	0xfffffdff
 8010c04:	fffffa7f 	.word	0xfffffa7f
 8010c08:	fffffc7f 	.word	0xfffffc7f
 8010c0c:	08015e66 	.word	0x08015e66
 8010c10:	fffff47f 	.word	0xfffff47f
 8010c14:	0763      	lsls	r3, r4, #29
 8010c16:	d503      	bpl.n	8010c20 <__ssvfscanf_r+0xf5c>
 8010c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	8018      	strh	r0, [r3, #0]
 8010c1e:	e7db      	b.n	8010bd8 <__ssvfscanf_r+0xf14>
 8010c20:	2301      	movs	r3, #1
 8010c22:	0022      	movs	r2, r4
 8010c24:	401a      	ands	r2, r3
 8010c26:	421c      	tst	r4, r3
 8010c28:	d000      	beq.n	8010c2c <__ssvfscanf_r+0xf68>
 8010c2a:	e775      	b.n	8010b18 <__ssvfscanf_r+0xe54>
 8010c2c:	07a4      	lsls	r4, r4, #30
 8010c2e:	d400      	bmi.n	8010c32 <__ssvfscanf_r+0xf6e>
 8010c30:	e772      	b.n	8010b18 <__ssvfscanf_r+0xe54>
 8010c32:	4ba8      	ldr	r3, [pc, #672]	; (8010ed4 <__ssvfscanf_r+0x1210>)
 8010c34:	6979      	ldr	r1, [r7, #20]
 8010c36:	4299      	cmp	r1, r3
 8010c38:	d10c      	bne.n	8010c54 <__ssvfscanf_r+0xf90>
 8010c3a:	218c      	movs	r1, #140	; 0x8c
 8010c3c:	2048      	movs	r0, #72	; 0x48
 8010c3e:	0049      	lsls	r1, r1, #1
 8010c40:	1809      	adds	r1, r1, r0
 8010c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010c46:	19c9      	adds	r1, r1, r7
 8010c48:	f001 fe46 	bl	80128d8 <_strtoull_r>
 8010c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	c303      	stmia	r3!, {r0, r1}
 8010c52:	e7c1      	b.n	8010bd8 <__ssvfscanf_r+0xf14>
 8010c54:	218c      	movs	r1, #140	; 0x8c
 8010c56:	2048      	movs	r0, #72	; 0x48
 8010c58:	0049      	lsls	r1, r1, #1
 8010c5a:	1809      	adds	r1, r1, r0
 8010c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010c60:	19c9      	adds	r1, r1, r7
 8010c62:	f001 fd87 	bl	8012774 <_strtoll_r>
 8010c66:	e7f1      	b.n	8010c4c <__ssvfscanf_r+0xf88>
 8010c68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010c6a:	f000 fb9f 	bl	80113ac <_localeconv_r>
 8010c6e:	22ae      	movs	r2, #174	; 0xae
 8010c70:	2100      	movs	r1, #0
 8010c72:	6803      	ldr	r3, [r0, #0]
 8010c74:	0052      	lsls	r2, r2, #1
 8010c76:	603b      	str	r3, [r7, #0]
 8010c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c7a:	60f9      	str	r1, [r7, #12]
 8010c7c:	3b01      	subs	r3, #1
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	d906      	bls.n	8010c90 <__ssvfscanf_r+0xfcc>
 8010c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c84:	3b5e      	subs	r3, #94	; 0x5e
 8010c86:	3bff      	subs	r3, #255	; 0xff
 8010c88:	60fb      	str	r3, [r7, #12]
 8010c8a:	235e      	movs	r3, #94	; 0x5e
 8010c8c:	33ff      	adds	r3, #255	; 0xff
 8010c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c90:	23f0      	movs	r3, #240	; 0xf0
 8010c92:	00db      	lsls	r3, r3, #3
 8010c94:	431e      	orrs	r6, r3
 8010c96:	238c      	movs	r3, #140	; 0x8c
 8010c98:	2248      	movs	r2, #72	; 0x48
 8010c9a:	2400      	movs	r4, #0
 8010c9c:	005b      	lsls	r3, r3, #1
 8010c9e:	189b      	adds	r3, r3, r2
 8010ca0:	623c      	str	r4, [r7, #32]
 8010ca2:	607c      	str	r4, [r7, #4]
 8010ca4:	60bc      	str	r4, [r7, #8]
 8010ca6:	61fc      	str	r4, [r7, #28]
 8010ca8:	613c      	str	r4, [r7, #16]
 8010caa:	19dd      	adds	r5, r3, r7
 8010cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	781a      	ldrb	r2, [r3, #0]
 8010cb2:	0010      	movs	r0, r2
 8010cb4:	382b      	subs	r0, #43	; 0x2b
 8010cb6:	284e      	cmp	r0, #78	; 0x4e
 8010cb8:	d900      	bls.n	8010cbc <__ssvfscanf_r+0xff8>
 8010cba:	e133      	b.n	8010f24 <__ssvfscanf_r+0x1260>
 8010cbc:	f7ef fa34 	bl	8000128 <__gnu_thumb1_case_uhi>
 8010cc0:	0132009b 	.word	0x0132009b
 8010cc4:	0132009b 	.word	0x0132009b
 8010cc8:	004f0132 	.word	0x004f0132
 8010ccc:	00720072 	.word	0x00720072
 8010cd0:	00720072 	.word	0x00720072
 8010cd4:	00720072 	.word	0x00720072
 8010cd8:	00720072 	.word	0x00720072
 8010cdc:	01320072 	.word	0x01320072
 8010ce0:	01320132 	.word	0x01320132
 8010ce4:	01320132 	.word	0x01320132
 8010ce8:	01320132 	.word	0x01320132
 8010cec:	007b00bc 	.word	0x007b00bc
 8010cf0:	007b007b 	.word	0x007b007b
 8010cf4:	00f7012f 	.word	0x00f7012f
 8010cf8:	01320132 	.word	0x01320132
 8010cfc:	013200e3 	.word	0x013200e3
 8010d00:	01320132 	.word	0x01320132
 8010d04:	00a00132 	.word	0x00a00132
 8010d08:	01120132 	.word	0x01120132
 8010d0c:	01320132 	.word	0x01320132
 8010d10:	01010132 	.word	0x01010132
 8010d14:	01320132 	.word	0x01320132
 8010d18:	00820132 	.word	0x00820132
 8010d1c:	01320105 	.word	0x01320105
 8010d20:	01320132 	.word	0x01320132
 8010d24:	01320132 	.word	0x01320132
 8010d28:	01320132 	.word	0x01320132
 8010d2c:	007b00bc 	.word	0x007b00bc
 8010d30:	007b007b 	.word	0x007b007b
 8010d34:	00f7012f 	.word	0x00f7012f
 8010d38:	01320132 	.word	0x01320132
 8010d3c:	013200e3 	.word	0x013200e3
 8010d40:	01320132 	.word	0x01320132
 8010d44:	00a00132 	.word	0x00a00132
 8010d48:	01120132 	.word	0x01120132
 8010d4c:	01320132 	.word	0x01320132
 8010d50:	01010132 	.word	0x01010132
 8010d54:	01320132 	.word	0x01320132
 8010d58:	00820132 	.word	0x00820132
 8010d5c:	0105      	.short	0x0105
 8010d5e:	05f1      	lsls	r1, r6, #23
 8010d60:	d520      	bpl.n	8010da4 <__ssvfscanf_r+0x10e0>
 8010d62:	2280      	movs	r2, #128	; 0x80
 8010d64:	4396      	bics	r6, r2
 8010d66:	69fa      	ldr	r2, [r7, #28]
 8010d68:	3201      	adds	r2, #1
 8010d6a:	61fa      	str	r2, [r7, #28]
 8010d6c:	68fa      	ldr	r2, [r7, #12]
 8010d6e:	2a00      	cmp	r2, #0
 8010d70:	d004      	beq.n	8010d7c <__ssvfscanf_r+0x10b8>
 8010d72:	3a01      	subs	r2, #1
 8010d74:	60fa      	str	r2, [r7, #12]
 8010d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d78:	3201      	adds	r2, #1
 8010d7a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010d7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010d80:	3a01      	subs	r2, #1
 8010d82:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d86:	3201      	adds	r2, #1
 8010d88:	63ba      	str	r2, [r7, #56]	; 0x38
 8010d8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d8c:	6852      	ldr	r2, [r2, #4]
 8010d8e:	3a01      	subs	r2, #1
 8010d90:	604a      	str	r2, [r1, #4]
 8010d92:	2a00      	cmp	r2, #0
 8010d94:	dc00      	bgt.n	8010d98 <__ssvfscanf_r+0x10d4>
 8010d96:	e0d6      	b.n	8010f46 <__ssvfscanf_r+0x1282>
 8010d98:	3301      	adds	r3, #1
 8010d9a:	600b      	str	r3, [r1, #0]
 8010d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d184      	bne.n	8010cac <__ssvfscanf_r+0xfe8>
 8010da2:	e057      	b.n	8010e54 <__ssvfscanf_r+0x1190>
 8010da4:	6a39      	ldr	r1, [r7, #32]
 8010da6:	1909      	adds	r1, r1, r4
 8010da8:	2900      	cmp	r1, #0
 8010daa:	d153      	bne.n	8010e54 <__ssvfscanf_r+0x1190>
 8010dac:	494a      	ldr	r1, [pc, #296]	; (8010ed8 <__ssvfscanf_r+0x1214>)
 8010dae:	400e      	ands	r6, r1
 8010db0:	702a      	strb	r2, [r5, #0]
 8010db2:	3501      	adds	r5, #1
 8010db4:	e7e2      	b.n	8010d7c <__ssvfscanf_r+0x10b8>
 8010db6:	0531      	lsls	r1, r6, #20
 8010db8:	d54c      	bpl.n	8010e54 <__ssvfscanf_r+0x1190>
 8010dba:	6a39      	ldr	r1, [r7, #32]
 8010dbc:	1909      	adds	r1, r1, r4
 8010dbe:	2900      	cmp	r1, #0
 8010dc0:	d040      	beq.n	8010e44 <__ssvfscanf_r+0x1180>
 8010dc2:	e047      	b.n	8010e54 <__ssvfscanf_r+0x1190>
 8010dc4:	2198      	movs	r1, #152	; 0x98
 8010dc6:	2080      	movs	r0, #128	; 0x80
 8010dc8:	0109      	lsls	r1, r1, #4
 8010dca:	4031      	ands	r1, r6
 8010dcc:	0040      	lsls	r0, r0, #1
 8010dce:	4281      	cmp	r1, r0
 8010dd0:	d140      	bne.n	8010e54 <__ssvfscanf_r+0x1190>
 8010dd2:	69f9      	ldr	r1, [r7, #28]
 8010dd4:	2901      	cmp	r1, #1
 8010dd6:	d13d      	bne.n	8010e54 <__ssvfscanf_r+0x1190>
 8010dd8:	2080      	movs	r0, #128	; 0x80
 8010dda:	4940      	ldr	r1, [pc, #256]	; (8010edc <__ssvfscanf_r+0x1218>)
 8010ddc:	0100      	lsls	r0, r0, #4
 8010dde:	400e      	ands	r6, r1
 8010de0:	3132      	adds	r1, #50	; 0x32
 8010de2:	31ff      	adds	r1, #255	; 0xff
 8010de4:	7029      	strb	r1, [r5, #0]
 8010de6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010de8:	4306      	orrs	r6, r0
 8010dea:	3901      	subs	r1, #1
 8010dec:	63f9      	str	r1, [r7, #60]	; 0x3c
 8010dee:	3501      	adds	r5, #1
 8010df0:	2100      	movs	r1, #0
 8010df2:	61f9      	str	r1, [r7, #28]
 8010df4:	e7dc      	b.n	8010db0 <__ssvfscanf_r+0x10ec>
 8010df6:	2180      	movs	r1, #128	; 0x80
 8010df8:	420e      	tst	r6, r1
 8010dfa:	d02b      	beq.n	8010e54 <__ssvfscanf_r+0x1190>
 8010dfc:	438e      	bics	r6, r1
 8010dfe:	e7d7      	b.n	8010db0 <__ssvfscanf_r+0x10ec>
 8010e00:	6a39      	ldr	r1, [r7, #32]
 8010e02:	2900      	cmp	r1, #0
 8010e04:	d10d      	bne.n	8010e22 <__ssvfscanf_r+0x115e>
 8010e06:	69f9      	ldr	r1, [r7, #28]
 8010e08:	2900      	cmp	r1, #0
 8010e0a:	d10e      	bne.n	8010e2a <__ssvfscanf_r+0x1166>
 8010e0c:	21e0      	movs	r1, #224	; 0xe0
 8010e0e:	0030      	movs	r0, r6
 8010e10:	00c9      	lsls	r1, r1, #3
 8010e12:	4008      	ands	r0, r1
 8010e14:	4288      	cmp	r0, r1
 8010e16:	d108      	bne.n	8010e2a <__ssvfscanf_r+0x1166>
 8010e18:	4931      	ldr	r1, [pc, #196]	; (8010ee0 <__ssvfscanf_r+0x121c>)
 8010e1a:	400e      	ands	r6, r1
 8010e1c:	2101      	movs	r1, #1
 8010e1e:	6239      	str	r1, [r7, #32]
 8010e20:	e7c6      	b.n	8010db0 <__ssvfscanf_r+0x10ec>
 8010e22:	6a39      	ldr	r1, [r7, #32]
 8010e24:	2902      	cmp	r1, #2
 8010e26:	d100      	bne.n	8010e2a <__ssvfscanf_r+0x1166>
 8010e28:	e089      	b.n	8010f3e <__ssvfscanf_r+0x127a>
 8010e2a:	2c01      	cmp	r4, #1
 8010e2c:	d001      	beq.n	8010e32 <__ssvfscanf_r+0x116e>
 8010e2e:	2c04      	cmp	r4, #4
 8010e30:	d110      	bne.n	8010e54 <__ssvfscanf_r+0x1190>
 8010e32:	3401      	adds	r4, #1
 8010e34:	b2e4      	uxtb	r4, r4
 8010e36:	e7bb      	b.n	8010db0 <__ssvfscanf_r+0x10ec>
 8010e38:	0531      	lsls	r1, r6, #20
 8010e3a:	d508      	bpl.n	8010e4e <__ssvfscanf_r+0x118a>
 8010e3c:	6a39      	ldr	r1, [r7, #32]
 8010e3e:	1909      	adds	r1, r1, r4
 8010e40:	2900      	cmp	r1, #0
 8010e42:	d104      	bne.n	8010e4e <__ssvfscanf_r+0x118a>
 8010e44:	4824      	ldr	r0, [pc, #144]	; (8010ed8 <__ssvfscanf_r+0x1214>)
 8010e46:	000c      	movs	r4, r1
 8010e48:	4006      	ands	r6, r0
 8010e4a:	6239      	str	r1, [r7, #32]
 8010e4c:	e7b0      	b.n	8010db0 <__ssvfscanf_r+0x10ec>
 8010e4e:	6a39      	ldr	r1, [r7, #32]
 8010e50:	2901      	cmp	r1, #1
 8010e52:	d076      	beq.n	8010f42 <__ssvfscanf_r+0x127e>
 8010e54:	69fb      	ldr	r3, [r7, #28]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d001      	beq.n	8010e5e <__ssvfscanf_r+0x119a>
 8010e5a:	4b20      	ldr	r3, [pc, #128]	; (8010edc <__ssvfscanf_r+0x1218>)
 8010e5c:	401e      	ands	r6, r3
 8010e5e:	6a3b      	ldr	r3, [r7, #32]
 8010e60:	3b01      	subs	r3, #1
 8010e62:	2b01      	cmp	r3, #1
 8010e64:	d877      	bhi.n	8010f56 <__ssvfscanf_r+0x1292>
 8010e66:	238c      	movs	r3, #140	; 0x8c
 8010e68:	2248      	movs	r2, #72	; 0x48
 8010e6a:	005b      	lsls	r3, r3, #1
 8010e6c:	189b      	adds	r3, r3, r2
 8010e6e:	19db      	adds	r3, r3, r7
 8010e70:	429d      	cmp	r5, r3
 8010e72:	d801      	bhi.n	8010e78 <__ssvfscanf_r+0x11b4>
 8010e74:	f7ff f823 	bl	800febe <__ssvfscanf_r+0x1fa>
 8010e78:	3d01      	subs	r5, #1
 8010e7a:	7829      	ldrb	r1, [r5, #0]
 8010e7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010e80:	f001 fdf2 	bl	8012a68 <_sungetc_r>
 8010e84:	e7ef      	b.n	8010e66 <__ssvfscanf_r+0x11a2>
 8010e86:	2c00      	cmp	r4, #0
 8010e88:	d10c      	bne.n	8010ea4 <__ssvfscanf_r+0x11e0>
 8010e8a:	69f9      	ldr	r1, [r7, #28]
 8010e8c:	2900      	cmp	r1, #0
 8010e8e:	d1e4      	bne.n	8010e5a <__ssvfscanf_r+0x1196>
 8010e90:	21e0      	movs	r1, #224	; 0xe0
 8010e92:	0030      	movs	r0, r6
 8010e94:	00c9      	lsls	r1, r1, #3
 8010e96:	4008      	ands	r0, r1
 8010e98:	4288      	cmp	r0, r1
 8010e9a:	d1e0      	bne.n	8010e5e <__ssvfscanf_r+0x119a>
 8010e9c:	4910      	ldr	r1, [pc, #64]	; (8010ee0 <__ssvfscanf_r+0x121c>)
 8010e9e:	3401      	adds	r4, #1
 8010ea0:	400e      	ands	r6, r1
 8010ea2:	e785      	b.n	8010db0 <__ssvfscanf_r+0x10ec>
 8010ea4:	20fd      	movs	r0, #253	; 0xfd
 8010ea6:	1ee1      	subs	r1, r4, #3
 8010ea8:	4201      	tst	r1, r0
 8010eaa:	d1d3      	bne.n	8010e54 <__ssvfscanf_r+0x1190>
 8010eac:	e7c1      	b.n	8010e32 <__ssvfscanf_r+0x116e>
 8010eae:	0531      	lsls	r1, r6, #20
 8010eb0:	d503      	bpl.n	8010eba <__ssvfscanf_r+0x11f6>
 8010eb2:	6a39      	ldr	r1, [r7, #32]
 8010eb4:	1909      	adds	r1, r1, r4
 8010eb6:	2900      	cmp	r1, #0
 8010eb8:	d0c4      	beq.n	8010e44 <__ssvfscanf_r+0x1180>
 8010eba:	2c02      	cmp	r4, #2
 8010ebc:	d1ca      	bne.n	8010e54 <__ssvfscanf_r+0x1190>
 8010ebe:	2403      	movs	r4, #3
 8010ec0:	e776      	b.n	8010db0 <__ssvfscanf_r+0x10ec>
 8010ec2:	2c06      	cmp	r4, #6
 8010ec4:	d1c6      	bne.n	8010e54 <__ssvfscanf_r+0x1190>
 8010ec6:	2407      	movs	r4, #7
 8010ec8:	e772      	b.n	8010db0 <__ssvfscanf_r+0x10ec>
 8010eca:	2c07      	cmp	r4, #7
 8010ecc:	d1c2      	bne.n	8010e54 <__ssvfscanf_r+0x1190>
 8010ece:	2408      	movs	r4, #8
 8010ed0:	e76e      	b.n	8010db0 <__ssvfscanf_r+0x10ec>
 8010ed2:	46c0      	nop			; (mov r8, r8)
 8010ed4:	0800d085 	.word	0x0800d085
 8010ed8:	fffffe7f 	.word	0xfffffe7f
 8010edc:	fffffeff 	.word	0xfffffeff
 8010ee0:	fffff87f 	.word	0xfffff87f
 8010ee4:	0531      	lsls	r1, r6, #20
 8010ee6:	d5b5      	bpl.n	8010e54 <__ssvfscanf_r+0x1190>
 8010ee8:	21a0      	movs	r1, #160	; 0xa0
 8010eea:	2080      	movs	r0, #128	; 0x80
 8010eec:	00c9      	lsls	r1, r1, #3
 8010eee:	00c0      	lsls	r0, r0, #3
 8010ef0:	4031      	ands	r1, r6
 8010ef2:	4281      	cmp	r1, r0
 8010ef4:	d004      	beq.n	8010f00 <__ssvfscanf_r+0x123c>
 8010ef6:	4206      	tst	r6, r0
 8010ef8:	d0ac      	beq.n	8010e54 <__ssvfscanf_r+0x1190>
 8010efa:	69f9      	ldr	r1, [r7, #28]
 8010efc:	2900      	cmp	r1, #0
 8010efe:	d0ae      	beq.n	8010e5e <__ssvfscanf_r+0x119a>
 8010f00:	2180      	movs	r1, #128	; 0x80
 8010f02:	0089      	lsls	r1, r1, #2
 8010f04:	420e      	tst	r6, r1
 8010f06:	d104      	bne.n	8010f12 <__ssvfscanf_r+0x124e>
 8010f08:	69f9      	ldr	r1, [r7, #28]
 8010f0a:	6938      	ldr	r0, [r7, #16]
 8010f0c:	607d      	str	r5, [r7, #4]
 8010f0e:	1a09      	subs	r1, r1, r0
 8010f10:	60b9      	str	r1, [r7, #8]
 8010f12:	20c0      	movs	r0, #192	; 0xc0
 8010f14:	4973      	ldr	r1, [pc, #460]	; (80110e4 <__ssvfscanf_r+0x1420>)
 8010f16:	0040      	lsls	r0, r0, #1
 8010f18:	400e      	ands	r6, r1
 8010f1a:	4306      	orrs	r6, r0
 8010f1c:	e768      	b.n	8010df0 <__ssvfscanf_r+0x112c>
 8010f1e:	0531      	lsls	r1, r6, #20
 8010f20:	d5e2      	bpl.n	8010ee8 <__ssvfscanf_r+0x1224>
 8010f22:	e74a      	b.n	8010dba <__ssvfscanf_r+0x10f6>
 8010f24:	6839      	ldr	r1, [r7, #0]
 8010f26:	7809      	ldrb	r1, [r1, #0]
 8010f28:	4291      	cmp	r1, r2
 8010f2a:	d193      	bne.n	8010e54 <__ssvfscanf_r+0x1190>
 8010f2c:	2180      	movs	r1, #128	; 0x80
 8010f2e:	0089      	lsls	r1, r1, #2
 8010f30:	420e      	tst	r6, r1
 8010f32:	d08f      	beq.n	8010e54 <__ssvfscanf_r+0x1190>
 8010f34:	496c      	ldr	r1, [pc, #432]	; (80110e8 <__ssvfscanf_r+0x1424>)
 8010f36:	400e      	ands	r6, r1
 8010f38:	69f9      	ldr	r1, [r7, #28]
 8010f3a:	6139      	str	r1, [r7, #16]
 8010f3c:	e738      	b.n	8010db0 <__ssvfscanf_r+0x10ec>
 8010f3e:	2103      	movs	r1, #3
 8010f40:	e76d      	b.n	8010e1e <__ssvfscanf_r+0x115a>
 8010f42:	2102      	movs	r1, #2
 8010f44:	e76b      	b.n	8010e1e <__ssvfscanf_r+0x115a>
 8010f46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010f4a:	f001 fdc9 	bl	8012ae0 <__ssrefill_r>
 8010f4e:	2800      	cmp	r0, #0
 8010f50:	d100      	bne.n	8010f54 <__ssvfscanf_r+0x1290>
 8010f52:	e723      	b.n	8010d9c <__ssvfscanf_r+0x10d8>
 8010f54:	e77e      	b.n	8010e54 <__ssvfscanf_r+0x1190>
 8010f56:	1e63      	subs	r3, r4, #1
 8010f58:	2b06      	cmp	r3, #6
 8010f5a:	d825      	bhi.n	8010fa8 <__ssvfscanf_r+0x12e4>
 8010f5c:	2c02      	cmp	r4, #2
 8010f5e:	d837      	bhi.n	8010fd0 <__ssvfscanf_r+0x130c>
 8010f60:	238c      	movs	r3, #140	; 0x8c
 8010f62:	2248      	movs	r2, #72	; 0x48
 8010f64:	005b      	lsls	r3, r3, #1
 8010f66:	189b      	adds	r3, r3, r2
 8010f68:	19db      	adds	r3, r3, r7
 8010f6a:	429d      	cmp	r5, r3
 8010f6c:	d801      	bhi.n	8010f72 <__ssvfscanf_r+0x12ae>
 8010f6e:	f7fe ffa6 	bl	800febe <__ssvfscanf_r+0x1fa>
 8010f72:	3d01      	subs	r5, #1
 8010f74:	7829      	ldrb	r1, [r5, #0]
 8010f76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010f7a:	f001 fd75 	bl	8012a68 <_sungetc_r>
 8010f7e:	e7ef      	b.n	8010f60 <__ssvfscanf_r+0x129c>
 8010f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f84:	3b01      	subs	r3, #1
 8010f86:	7819      	ldrb	r1, [r3, #0]
 8010f88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f8c:	f001 fd6c 	bl	8012a68 <_sungetc_r>
 8010f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f92:	6a3a      	ldr	r2, [r7, #32]
 8010f94:	189b      	adds	r3, r3, r2
 8010f96:	b2db      	uxtb	r3, r3
 8010f98:	2b03      	cmp	r3, #3
 8010f9a:	d8f1      	bhi.n	8010f80 <__ssvfscanf_r+0x12bc>
 8010f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f9e:	3c03      	subs	r4, #3
 8010fa0:	b2e4      	uxtb	r4, r4
 8010fa2:	1b1b      	subs	r3, r3, r4
 8010fa4:	1b2d      	subs	r5, r5, r4
 8010fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8010fa8:	05f3      	lsls	r3, r6, #23
 8010faa:	d52f      	bpl.n	801100c <__ssvfscanf_r+0x1348>
 8010fac:	0573      	lsls	r3, r6, #21
 8010fae:	d514      	bpl.n	8010fda <__ssvfscanf_r+0x1316>
 8010fb0:	238c      	movs	r3, #140	; 0x8c
 8010fb2:	2248      	movs	r2, #72	; 0x48
 8010fb4:	005b      	lsls	r3, r3, #1
 8010fb6:	189b      	adds	r3, r3, r2
 8010fb8:	19db      	adds	r3, r3, r7
 8010fba:	429d      	cmp	r5, r3
 8010fbc:	d801      	bhi.n	8010fc2 <__ssvfscanf_r+0x12fe>
 8010fbe:	f7fe ff7e 	bl	800febe <__ssvfscanf_r+0x1fa>
 8010fc2:	3d01      	subs	r5, #1
 8010fc4:	7829      	ldrb	r1, [r5, #0]
 8010fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010fca:	f001 fd4d 	bl	8012a68 <_sungetc_r>
 8010fce:	e7ef      	b.n	8010fb0 <__ssvfscanf_r+0x12ec>
 8010fd0:	1b63      	subs	r3, r4, r5
 8010fd2:	b2db      	uxtb	r3, r3
 8010fd4:	63fd      	str	r5, [r7, #60]	; 0x3c
 8010fd6:	623b      	str	r3, [r7, #32]
 8010fd8:	e7da      	b.n	8010f90 <__ssvfscanf_r+0x12cc>
 8010fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fdc:	1e6c      	subs	r4, r5, #1
 8010fde:	7821      	ldrb	r1, [r4, #0]
 8010fe0:	3b01      	subs	r3, #1
 8010fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fe4:	2965      	cmp	r1, #101	; 0x65
 8010fe6:	d00a      	beq.n	8010ffe <__ssvfscanf_r+0x133a>
 8010fe8:	2945      	cmp	r1, #69	; 0x45
 8010fea:	d008      	beq.n	8010ffe <__ssvfscanf_r+0x133a>
 8010fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ff0:	f001 fd3a 	bl	8012a68 <_sungetc_r>
 8010ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff6:	1eac      	subs	r4, r5, #2
 8010ff8:	3b02      	subs	r3, #2
 8010ffa:	7821      	ldrb	r1, [r4, #0]
 8010ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ffe:	0025      	movs	r5, r4
 8011000:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011002:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011004:	f001 fd30 	bl	8012a68 <_sungetc_r>
 8011008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801100a:	63bb      	str	r3, [r7, #56]	; 0x38
 801100c:	2310      	movs	r3, #16
 801100e:	0032      	movs	r2, r6
 8011010:	401a      	ands	r2, r3
 8011012:	421e      	tst	r6, r3
 8011014:	d001      	beq.n	801101a <__ssvfscanf_r+0x1356>
 8011016:	f7fe fe71 	bl	800fcfc <__ssvfscanf_r+0x38>
 801101a:	23c0      	movs	r3, #192	; 0xc0
 801101c:	2180      	movs	r1, #128	; 0x80
 801101e:	00db      	lsls	r3, r3, #3
 8011020:	702a      	strb	r2, [r5, #0]
 8011022:	4033      	ands	r3, r6
 8011024:	00c9      	lsls	r1, r1, #3
 8011026:	428b      	cmp	r3, r1
 8011028:	d11f      	bne.n	801106a <__ssvfscanf_r+0x13a6>
 801102a:	693b      	ldr	r3, [r7, #16]
 801102c:	69fa      	ldr	r2, [r7, #28]
 801102e:	69f9      	ldr	r1, [r7, #28]
 8011030:	1a9a      	subs	r2, r3, r2
 8011032:	428b      	cmp	r3, r1
 8011034:	d125      	bne.n	8011082 <__ssvfscanf_r+0x13be>
 8011036:	238c      	movs	r3, #140	; 0x8c
 8011038:	2148      	movs	r1, #72	; 0x48
 801103a:	005b      	lsls	r3, r3, #1
 801103c:	185b      	adds	r3, r3, r1
 801103e:	19d9      	adds	r1, r3, r7
 8011040:	2200      	movs	r2, #0
 8011042:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011044:	f7fb fef0 	bl	800ce28 <_strtod_r>
 8011048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801104a:	0004      	movs	r4, r0
 801104c:	3304      	adds	r3, #4
 801104e:	000d      	movs	r5, r1
 8011050:	623b      	str	r3, [r7, #32]
 8011052:	07f3      	lsls	r3, r6, #31
 8011054:	d523      	bpl.n	801109e <__ssvfscanf_r+0x13da>
 8011056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	601c      	str	r4, [r3, #0]
 801105c:	605d      	str	r5, [r3, #4]
 801105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011060:	3301      	adds	r3, #1
 8011062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011064:	6a3b      	ldr	r3, [r7, #32]
 8011066:	f7fe ffa5 	bl	800ffb4 <__ssvfscanf_r+0x2f0>
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d0e2      	beq.n	8011036 <__ssvfscanf_r+0x1372>
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011074:	1c59      	adds	r1, r3, #1
 8011076:	230a      	movs	r3, #10
 8011078:	f7fb ff72 	bl	800cf60 <_strtol_r>
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	687d      	ldr	r5, [r7, #4]
 8011080:	1ac2      	subs	r2, r0, r3
 8011082:	2148      	movs	r1, #72	; 0x48
 8011084:	4b19      	ldr	r3, [pc, #100]	; (80110ec <__ssvfscanf_r+0x1428>)
 8011086:	185b      	adds	r3, r3, r1
 8011088:	19db      	adds	r3, r3, r7
 801108a:	429d      	cmp	r5, r3
 801108c:	d302      	bcc.n	8011094 <__ssvfscanf_r+0x13d0>
 801108e:	4b18      	ldr	r3, [pc, #96]	; (80110f0 <__ssvfscanf_r+0x142c>)
 8011090:	185b      	adds	r3, r3, r1
 8011092:	19dd      	adds	r5, r3, r7
 8011094:	0028      	movs	r0, r5
 8011096:	4917      	ldr	r1, [pc, #92]	; (80110f4 <__ssvfscanf_r+0x1430>)
 8011098:	f7fc f8fc 	bl	800d294 <sprintf>
 801109c:	e7cb      	b.n	8011036 <__ssvfscanf_r+0x1372>
 801109e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110a4:	07b6      	lsls	r6, r6, #30
 80110a6:	d4d8      	bmi.n	801105a <__ssvfscanf_r+0x1396>
 80110a8:	0002      	movs	r2, r0
 80110aa:	000b      	movs	r3, r1
 80110ac:	f7f1 f922 	bl	80022f4 <__aeabi_dcmpun>
 80110b0:	2800      	cmp	r0, #0
 80110b2:	d005      	beq.n	80110c0 <__ssvfscanf_r+0x13fc>
 80110b4:	4810      	ldr	r0, [pc, #64]	; (80110f8 <__ssvfscanf_r+0x1434>)
 80110b6:	f7fc fabf 	bl	800d638 <nanf>
 80110ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110bc:	6018      	str	r0, [r3, #0]
 80110be:	e7ce      	b.n	801105e <__ssvfscanf_r+0x139a>
 80110c0:	0020      	movs	r0, r4
 80110c2:	0029      	movs	r1, r5
 80110c4:	f7f1 f9c0 	bl	8002448 <__aeabi_d2f>
 80110c8:	e7f7      	b.n	80110ba <__ssvfscanf_r+0x13f6>
 80110ca:	00a3      	lsls	r3, r4, #2
 80110cc:	18ed      	adds	r5, r5, r3
 80110ce:	682b      	ldr	r3, [r5, #0]
 80110d0:	3401      	adds	r4, #1
 80110d2:	6818      	ldr	r0, [r3, #0]
 80110d4:	f7fa fe58 	bl	800bd88 <free>
 80110d8:	2200      	movs	r2, #0
 80110da:	682b      	ldr	r3, [r5, #0]
 80110dc:	601a      	str	r2, [r3, #0]
 80110de:	f7fe ffc3 	bl	8010068 <__ssvfscanf_r+0x3a4>
 80110e2:	46c0      	nop			; (mov r8, r8)
 80110e4:	fffff07f 	.word	0xfffff07f
 80110e8:	fffffd7f 	.word	0xfffffd7f
 80110ec:	0000026b 	.word	0x0000026b
 80110f0:	0000026a 	.word	0x0000026a
 80110f4:	08015e60 	.word	0x08015e60
 80110f8:	08015ec3 	.word	0x08015ec3

080110fc <_fclose_r>:
 80110fc:	b570      	push	{r4, r5, r6, lr}
 80110fe:	0005      	movs	r5, r0
 8011100:	1e0c      	subs	r4, r1, #0
 8011102:	d102      	bne.n	801110a <_fclose_r+0xe>
 8011104:	2600      	movs	r6, #0
 8011106:	0030      	movs	r0, r6
 8011108:	bd70      	pop	{r4, r5, r6, pc}
 801110a:	2800      	cmp	r0, #0
 801110c:	d004      	beq.n	8011118 <_fclose_r+0x1c>
 801110e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011110:	2b00      	cmp	r3, #0
 8011112:	d101      	bne.n	8011118 <_fclose_r+0x1c>
 8011114:	f7fc f856 	bl	800d1c4 <__sinit>
 8011118:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801111a:	07db      	lsls	r3, r3, #31
 801111c:	d405      	bmi.n	801112a <_fclose_r+0x2e>
 801111e:	89a3      	ldrh	r3, [r4, #12]
 8011120:	059b      	lsls	r3, r3, #22
 8011122:	d402      	bmi.n	801112a <_fclose_r+0x2e>
 8011124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011126:	f7fc fa6b 	bl	800d600 <__retarget_lock_acquire_recursive>
 801112a:	220c      	movs	r2, #12
 801112c:	5ea3      	ldrsh	r3, [r4, r2]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d109      	bne.n	8011146 <_fclose_r+0x4a>
 8011132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011134:	3301      	adds	r3, #1
 8011136:	0016      	movs	r6, r2
 8011138:	401e      	ands	r6, r3
 801113a:	421a      	tst	r2, r3
 801113c:	d1e2      	bne.n	8011104 <_fclose_r+0x8>
 801113e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011140:	f7fc fa5f 	bl	800d602 <__retarget_lock_release_recursive>
 8011144:	e7df      	b.n	8011106 <_fclose_r+0xa>
 8011146:	0021      	movs	r1, r4
 8011148:	0028      	movs	r0, r5
 801114a:	f000 f837 	bl	80111bc <__sflush_r>
 801114e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011150:	0006      	movs	r6, r0
 8011152:	2b00      	cmp	r3, #0
 8011154:	d006      	beq.n	8011164 <_fclose_r+0x68>
 8011156:	0028      	movs	r0, r5
 8011158:	69e1      	ldr	r1, [r4, #28]
 801115a:	4798      	blx	r3
 801115c:	2800      	cmp	r0, #0
 801115e:	da01      	bge.n	8011164 <_fclose_r+0x68>
 8011160:	2601      	movs	r6, #1
 8011162:	4276      	negs	r6, r6
 8011164:	89a3      	ldrh	r3, [r4, #12]
 8011166:	061b      	lsls	r3, r3, #24
 8011168:	d503      	bpl.n	8011172 <_fclose_r+0x76>
 801116a:	0028      	movs	r0, r5
 801116c:	6921      	ldr	r1, [r4, #16]
 801116e:	f7fc facf 	bl	800d710 <_free_r>
 8011172:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011174:	2900      	cmp	r1, #0
 8011176:	d008      	beq.n	801118a <_fclose_r+0x8e>
 8011178:	0023      	movs	r3, r4
 801117a:	3340      	adds	r3, #64	; 0x40
 801117c:	4299      	cmp	r1, r3
 801117e:	d002      	beq.n	8011186 <_fclose_r+0x8a>
 8011180:	0028      	movs	r0, r5
 8011182:	f7fc fac5 	bl	800d710 <_free_r>
 8011186:	2300      	movs	r3, #0
 8011188:	6323      	str	r3, [r4, #48]	; 0x30
 801118a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801118c:	2900      	cmp	r1, #0
 801118e:	d004      	beq.n	801119a <_fclose_r+0x9e>
 8011190:	0028      	movs	r0, r5
 8011192:	f7fc fabd 	bl	800d710 <_free_r>
 8011196:	2300      	movs	r3, #0
 8011198:	6463      	str	r3, [r4, #68]	; 0x44
 801119a:	f7fc f803 	bl	800d1a4 <__sfp_lock_acquire>
 801119e:	2300      	movs	r3, #0
 80111a0:	81a3      	strh	r3, [r4, #12]
 80111a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111a4:	07db      	lsls	r3, r3, #31
 80111a6:	d402      	bmi.n	80111ae <_fclose_r+0xb2>
 80111a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111aa:	f7fc fa2a 	bl	800d602 <__retarget_lock_release_recursive>
 80111ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111b0:	f7fc fa25 	bl	800d5fe <__retarget_lock_close_recursive>
 80111b4:	f7fb fffe 	bl	800d1b4 <__sfp_lock_release>
 80111b8:	e7a5      	b.n	8011106 <_fclose_r+0xa>
	...

080111bc <__sflush_r>:
 80111bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80111be:	230c      	movs	r3, #12
 80111c0:	5eca      	ldrsh	r2, [r1, r3]
 80111c2:	000c      	movs	r4, r1
 80111c4:	0005      	movs	r5, r0
 80111c6:	b291      	uxth	r1, r2
 80111c8:	0713      	lsls	r3, r2, #28
 80111ca:	d464      	bmi.n	8011296 <__sflush_r+0xda>
 80111cc:	2380      	movs	r3, #128	; 0x80
 80111ce:	011b      	lsls	r3, r3, #4
 80111d0:	4313      	orrs	r3, r2
 80111d2:	6862      	ldr	r2, [r4, #4]
 80111d4:	81a3      	strh	r3, [r4, #12]
 80111d6:	2a00      	cmp	r2, #0
 80111d8:	dc04      	bgt.n	80111e4 <__sflush_r+0x28>
 80111da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80111dc:	2a00      	cmp	r2, #0
 80111de:	dc01      	bgt.n	80111e4 <__sflush_r+0x28>
 80111e0:	2000      	movs	r0, #0
 80111e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80111e4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80111e6:	2f00      	cmp	r7, #0
 80111e8:	d0fa      	beq.n	80111e0 <__sflush_r+0x24>
 80111ea:	2200      	movs	r2, #0
 80111ec:	2080      	movs	r0, #128	; 0x80
 80111ee:	682e      	ldr	r6, [r5, #0]
 80111f0:	602a      	str	r2, [r5, #0]
 80111f2:	001a      	movs	r2, r3
 80111f4:	0140      	lsls	r0, r0, #5
 80111f6:	69e1      	ldr	r1, [r4, #28]
 80111f8:	4002      	ands	r2, r0
 80111fa:	4203      	tst	r3, r0
 80111fc:	d038      	beq.n	8011270 <__sflush_r+0xb4>
 80111fe:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8011200:	89a3      	ldrh	r3, [r4, #12]
 8011202:	075b      	lsls	r3, r3, #29
 8011204:	d506      	bpl.n	8011214 <__sflush_r+0x58>
 8011206:	6863      	ldr	r3, [r4, #4]
 8011208:	1ac0      	subs	r0, r0, r3
 801120a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801120c:	2b00      	cmp	r3, #0
 801120e:	d001      	beq.n	8011214 <__sflush_r+0x58>
 8011210:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011212:	1ac0      	subs	r0, r0, r3
 8011214:	0002      	movs	r2, r0
 8011216:	2300      	movs	r3, #0
 8011218:	0028      	movs	r0, r5
 801121a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801121c:	69e1      	ldr	r1, [r4, #28]
 801121e:	47b8      	blx	r7
 8011220:	89a2      	ldrh	r2, [r4, #12]
 8011222:	1c43      	adds	r3, r0, #1
 8011224:	d106      	bne.n	8011234 <__sflush_r+0x78>
 8011226:	6829      	ldr	r1, [r5, #0]
 8011228:	291d      	cmp	r1, #29
 801122a:	d830      	bhi.n	801128e <__sflush_r+0xd2>
 801122c:	4b2c      	ldr	r3, [pc, #176]	; (80112e0 <__sflush_r+0x124>)
 801122e:	410b      	asrs	r3, r1
 8011230:	07db      	lsls	r3, r3, #31
 8011232:	d42c      	bmi.n	801128e <__sflush_r+0xd2>
 8011234:	4b2b      	ldr	r3, [pc, #172]	; (80112e4 <__sflush_r+0x128>)
 8011236:	4013      	ands	r3, r2
 8011238:	2200      	movs	r2, #0
 801123a:	6062      	str	r2, [r4, #4]
 801123c:	6922      	ldr	r2, [r4, #16]
 801123e:	b21b      	sxth	r3, r3
 8011240:	81a3      	strh	r3, [r4, #12]
 8011242:	6022      	str	r2, [r4, #0]
 8011244:	04db      	lsls	r3, r3, #19
 8011246:	d505      	bpl.n	8011254 <__sflush_r+0x98>
 8011248:	1c43      	adds	r3, r0, #1
 801124a:	d102      	bne.n	8011252 <__sflush_r+0x96>
 801124c:	682b      	ldr	r3, [r5, #0]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d100      	bne.n	8011254 <__sflush_r+0x98>
 8011252:	6520      	str	r0, [r4, #80]	; 0x50
 8011254:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011256:	602e      	str	r6, [r5, #0]
 8011258:	2900      	cmp	r1, #0
 801125a:	d0c1      	beq.n	80111e0 <__sflush_r+0x24>
 801125c:	0023      	movs	r3, r4
 801125e:	3340      	adds	r3, #64	; 0x40
 8011260:	4299      	cmp	r1, r3
 8011262:	d002      	beq.n	801126a <__sflush_r+0xae>
 8011264:	0028      	movs	r0, r5
 8011266:	f7fc fa53 	bl	800d710 <_free_r>
 801126a:	2000      	movs	r0, #0
 801126c:	6320      	str	r0, [r4, #48]	; 0x30
 801126e:	e7b8      	b.n	80111e2 <__sflush_r+0x26>
 8011270:	2301      	movs	r3, #1
 8011272:	0028      	movs	r0, r5
 8011274:	47b8      	blx	r7
 8011276:	1c43      	adds	r3, r0, #1
 8011278:	d1c2      	bne.n	8011200 <__sflush_r+0x44>
 801127a:	682b      	ldr	r3, [r5, #0]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d0bf      	beq.n	8011200 <__sflush_r+0x44>
 8011280:	2b1d      	cmp	r3, #29
 8011282:	d001      	beq.n	8011288 <__sflush_r+0xcc>
 8011284:	2b16      	cmp	r3, #22
 8011286:	d101      	bne.n	801128c <__sflush_r+0xd0>
 8011288:	602e      	str	r6, [r5, #0]
 801128a:	e7a9      	b.n	80111e0 <__sflush_r+0x24>
 801128c:	89a2      	ldrh	r2, [r4, #12]
 801128e:	2340      	movs	r3, #64	; 0x40
 8011290:	4313      	orrs	r3, r2
 8011292:	81a3      	strh	r3, [r4, #12]
 8011294:	e7a5      	b.n	80111e2 <__sflush_r+0x26>
 8011296:	6926      	ldr	r6, [r4, #16]
 8011298:	2e00      	cmp	r6, #0
 801129a:	d0a1      	beq.n	80111e0 <__sflush_r+0x24>
 801129c:	6827      	ldr	r7, [r4, #0]
 801129e:	6026      	str	r6, [r4, #0]
 80112a0:	1bbb      	subs	r3, r7, r6
 80112a2:	9301      	str	r3, [sp, #4]
 80112a4:	2300      	movs	r3, #0
 80112a6:	0789      	lsls	r1, r1, #30
 80112a8:	d100      	bne.n	80112ac <__sflush_r+0xf0>
 80112aa:	6963      	ldr	r3, [r4, #20]
 80112ac:	60a3      	str	r3, [r4, #8]
 80112ae:	9b01      	ldr	r3, [sp, #4]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	dc00      	bgt.n	80112b6 <__sflush_r+0xfa>
 80112b4:	e794      	b.n	80111e0 <__sflush_r+0x24>
 80112b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112b8:	0032      	movs	r2, r6
 80112ba:	001f      	movs	r7, r3
 80112bc:	0028      	movs	r0, r5
 80112be:	9b01      	ldr	r3, [sp, #4]
 80112c0:	69e1      	ldr	r1, [r4, #28]
 80112c2:	47b8      	blx	r7
 80112c4:	2800      	cmp	r0, #0
 80112c6:	dc06      	bgt.n	80112d6 <__sflush_r+0x11a>
 80112c8:	2340      	movs	r3, #64	; 0x40
 80112ca:	2001      	movs	r0, #1
 80112cc:	89a2      	ldrh	r2, [r4, #12]
 80112ce:	4240      	negs	r0, r0
 80112d0:	4313      	orrs	r3, r2
 80112d2:	81a3      	strh	r3, [r4, #12]
 80112d4:	e785      	b.n	80111e2 <__sflush_r+0x26>
 80112d6:	9b01      	ldr	r3, [sp, #4]
 80112d8:	1836      	adds	r6, r6, r0
 80112da:	1a1b      	subs	r3, r3, r0
 80112dc:	9301      	str	r3, [sp, #4]
 80112de:	e7e6      	b.n	80112ae <__sflush_r+0xf2>
 80112e0:	dfbffffe 	.word	0xdfbffffe
 80112e4:	fffff7ff 	.word	0xfffff7ff

080112e8 <_fflush_r>:
 80112e8:	b570      	push	{r4, r5, r6, lr}
 80112ea:	0005      	movs	r5, r0
 80112ec:	000c      	movs	r4, r1
 80112ee:	2800      	cmp	r0, #0
 80112f0:	d004      	beq.n	80112fc <_fflush_r+0x14>
 80112f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d101      	bne.n	80112fc <_fflush_r+0x14>
 80112f8:	f7fb ff64 	bl	800d1c4 <__sinit>
 80112fc:	220c      	movs	r2, #12
 80112fe:	5ea3      	ldrsh	r3, [r4, r2]
 8011300:	1e1e      	subs	r6, r3, #0
 8011302:	d015      	beq.n	8011330 <_fflush_r+0x48>
 8011304:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011306:	07d2      	lsls	r2, r2, #31
 8011308:	d404      	bmi.n	8011314 <_fflush_r+0x2c>
 801130a:	059b      	lsls	r3, r3, #22
 801130c:	d402      	bmi.n	8011314 <_fflush_r+0x2c>
 801130e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011310:	f7fc f976 	bl	800d600 <__retarget_lock_acquire_recursive>
 8011314:	0021      	movs	r1, r4
 8011316:	0028      	movs	r0, r5
 8011318:	f7ff ff50 	bl	80111bc <__sflush_r>
 801131c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801131e:	0006      	movs	r6, r0
 8011320:	07db      	lsls	r3, r3, #31
 8011322:	d405      	bmi.n	8011330 <_fflush_r+0x48>
 8011324:	89a3      	ldrh	r3, [r4, #12]
 8011326:	059b      	lsls	r3, r3, #22
 8011328:	d402      	bmi.n	8011330 <_fflush_r+0x48>
 801132a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801132c:	f7fc f969 	bl	800d602 <__retarget_lock_release_recursive>
 8011330:	0030      	movs	r0, r6
 8011332:	bd70      	pop	{r4, r5, r6, pc}

08011334 <__sccl>:
 8011334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011336:	780b      	ldrb	r3, [r1, #0]
 8011338:	0004      	movs	r4, r0
 801133a:	2b5e      	cmp	r3, #94	; 0x5e
 801133c:	d019      	beq.n	8011372 <__sccl+0x3e>
 801133e:	2200      	movs	r2, #0
 8011340:	1c4d      	adds	r5, r1, #1
 8011342:	0021      	movs	r1, r4
 8011344:	1c60      	adds	r0, r4, #1
 8011346:	30ff      	adds	r0, #255	; 0xff
 8011348:	700a      	strb	r2, [r1, #0]
 801134a:	3101      	adds	r1, #1
 801134c:	4281      	cmp	r1, r0
 801134e:	d1fb      	bne.n	8011348 <__sccl+0x14>
 8011350:	1e68      	subs	r0, r5, #1
 8011352:	2b00      	cmp	r3, #0
 8011354:	d00c      	beq.n	8011370 <__sccl+0x3c>
 8011356:	2101      	movs	r1, #1
 8011358:	262d      	movs	r6, #45	; 0x2d
 801135a:	404a      	eors	r2, r1
 801135c:	0028      	movs	r0, r5
 801135e:	54e2      	strb	r2, [r4, r3]
 8011360:	7801      	ldrb	r1, [r0, #0]
 8011362:	1c45      	adds	r5, r0, #1
 8011364:	292d      	cmp	r1, #45	; 0x2d
 8011366:	d00c      	beq.n	8011382 <__sccl+0x4e>
 8011368:	295d      	cmp	r1, #93	; 0x5d
 801136a:	d01d      	beq.n	80113a8 <__sccl+0x74>
 801136c:	2900      	cmp	r1, #0
 801136e:	d104      	bne.n	801137a <__sccl+0x46>
 8011370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011372:	2201      	movs	r2, #1
 8011374:	784b      	ldrb	r3, [r1, #1]
 8011376:	1c8d      	adds	r5, r1, #2
 8011378:	e7e3      	b.n	8011342 <__sccl+0xe>
 801137a:	000b      	movs	r3, r1
 801137c:	e7ee      	b.n	801135c <__sccl+0x28>
 801137e:	0033      	movs	r3, r6
 8011380:	e7ec      	b.n	801135c <__sccl+0x28>
 8011382:	7841      	ldrb	r1, [r0, #1]
 8011384:	295d      	cmp	r1, #93	; 0x5d
 8011386:	d0fa      	beq.n	801137e <__sccl+0x4a>
 8011388:	428b      	cmp	r3, r1
 801138a:	dcf8      	bgt.n	801137e <__sccl+0x4a>
 801138c:	001d      	movs	r5, r3
 801138e:	3002      	adds	r0, #2
 8011390:	3501      	adds	r5, #1
 8011392:	5562      	strb	r2, [r4, r5]
 8011394:	42a9      	cmp	r1, r5
 8011396:	dcfb      	bgt.n	8011390 <__sccl+0x5c>
 8011398:	2500      	movs	r5, #0
 801139a:	1c5f      	adds	r7, r3, #1
 801139c:	428b      	cmp	r3, r1
 801139e:	da01      	bge.n	80113a4 <__sccl+0x70>
 80113a0:	1acd      	subs	r5, r1, r3
 80113a2:	3d01      	subs	r5, #1
 80113a4:	197b      	adds	r3, r7, r5
 80113a6:	e7db      	b.n	8011360 <__sccl+0x2c>
 80113a8:	0028      	movs	r0, r5
 80113aa:	e7e1      	b.n	8011370 <__sccl+0x3c>

080113ac <_localeconv_r>:
 80113ac:	4800      	ldr	r0, [pc, #0]	; (80113b0 <_localeconv_r+0x4>)
 80113ae:	4770      	bx	lr
 80113b0:	20000534 	.word	0x20000534

080113b4 <__libc_fini_array>:
 80113b4:	b570      	push	{r4, r5, r6, lr}
 80113b6:	4c07      	ldr	r4, [pc, #28]	; (80113d4 <__libc_fini_array+0x20>)
 80113b8:	4d07      	ldr	r5, [pc, #28]	; (80113d8 <__libc_fini_array+0x24>)
 80113ba:	1b64      	subs	r4, r4, r5
 80113bc:	10a4      	asrs	r4, r4, #2
 80113be:	2c00      	cmp	r4, #0
 80113c0:	d102      	bne.n	80113c8 <__libc_fini_array+0x14>
 80113c2:	f002 fd47 	bl	8013e54 <_fini>
 80113c6:	bd70      	pop	{r4, r5, r6, pc}
 80113c8:	3c01      	subs	r4, #1
 80113ca:	00a3      	lsls	r3, r4, #2
 80113cc:	58eb      	ldr	r3, [r5, r3]
 80113ce:	4798      	blx	r3
 80113d0:	e7f5      	b.n	80113be <__libc_fini_array+0xa>
 80113d2:	46c0      	nop			; (mov r8, r8)
 80113d4:	08015f60 	.word	0x08015f60
 80113d8:	08015f5c 	.word	0x08015f5c

080113dc <memchr>:
 80113dc:	b2c9      	uxtb	r1, r1
 80113de:	1882      	adds	r2, r0, r2
 80113e0:	4290      	cmp	r0, r2
 80113e2:	d101      	bne.n	80113e8 <memchr+0xc>
 80113e4:	2000      	movs	r0, #0
 80113e6:	4770      	bx	lr
 80113e8:	7803      	ldrb	r3, [r0, #0]
 80113ea:	428b      	cmp	r3, r1
 80113ec:	d0fb      	beq.n	80113e6 <memchr+0xa>
 80113ee:	3001      	adds	r0, #1
 80113f0:	e7f6      	b.n	80113e0 <memchr+0x4>
	...

080113f4 <frexp>:
 80113f4:	b570      	push	{r4, r5, r6, lr}
 80113f6:	0014      	movs	r4, r2
 80113f8:	2500      	movs	r5, #0
 80113fa:	6025      	str	r5, [r4, #0]
 80113fc:	4d10      	ldr	r5, [pc, #64]	; (8011440 <frexp+0x4c>)
 80113fe:	004b      	lsls	r3, r1, #1
 8011400:	000a      	movs	r2, r1
 8011402:	085b      	lsrs	r3, r3, #1
 8011404:	42ab      	cmp	r3, r5
 8011406:	dc1a      	bgt.n	801143e <frexp+0x4a>
 8011408:	001d      	movs	r5, r3
 801140a:	4305      	orrs	r5, r0
 801140c:	d017      	beq.n	801143e <frexp+0x4a>
 801140e:	4d0d      	ldr	r5, [pc, #52]	; (8011444 <frexp+0x50>)
 8011410:	4229      	tst	r1, r5
 8011412:	d109      	bne.n	8011428 <frexp+0x34>
 8011414:	2200      	movs	r2, #0
 8011416:	4b0c      	ldr	r3, [pc, #48]	; (8011448 <frexp+0x54>)
 8011418:	f7f0 f928 	bl	800166c <__aeabi_dmul>
 801141c:	2536      	movs	r5, #54	; 0x36
 801141e:	000a      	movs	r2, r1
 8011420:	004b      	lsls	r3, r1, #1
 8011422:	426d      	negs	r5, r5
 8011424:	085b      	lsrs	r3, r3, #1
 8011426:	6025      	str	r5, [r4, #0]
 8011428:	4d08      	ldr	r5, [pc, #32]	; (801144c <frexp+0x58>)
 801142a:	151b      	asrs	r3, r3, #20
 801142c:	195b      	adds	r3, r3, r5
 801142e:	6825      	ldr	r5, [r4, #0]
 8011430:	18eb      	adds	r3, r5, r3
 8011432:	6023      	str	r3, [r4, #0]
 8011434:	4b06      	ldr	r3, [pc, #24]	; (8011450 <frexp+0x5c>)
 8011436:	401a      	ands	r2, r3
 8011438:	4b06      	ldr	r3, [pc, #24]	; (8011454 <frexp+0x60>)
 801143a:	4313      	orrs	r3, r2
 801143c:	0019      	movs	r1, r3
 801143e:	bd70      	pop	{r4, r5, r6, pc}
 8011440:	7fefffff 	.word	0x7fefffff
 8011444:	7ff00000 	.word	0x7ff00000
 8011448:	43500000 	.word	0x43500000
 801144c:	fffffc02 	.word	0xfffffc02
 8011450:	800fffff 	.word	0x800fffff
 8011454:	3fe00000 	.word	0x3fe00000

08011458 <__register_exitproc>:
 8011458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801145a:	4f1c      	ldr	r7, [pc, #112]	; (80114cc <__register_exitproc+0x74>)
 801145c:	0004      	movs	r4, r0
 801145e:	6838      	ldr	r0, [r7, #0]
 8011460:	0016      	movs	r6, r2
 8011462:	9301      	str	r3, [sp, #4]
 8011464:	9100      	str	r1, [sp, #0]
 8011466:	f7fc f8cb 	bl	800d600 <__retarget_lock_acquire_recursive>
 801146a:	4a19      	ldr	r2, [pc, #100]	; (80114d0 <__register_exitproc+0x78>)
 801146c:	6813      	ldr	r3, [r2, #0]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d101      	bne.n	8011476 <__register_exitproc+0x1e>
 8011472:	4b18      	ldr	r3, [pc, #96]	; (80114d4 <__register_exitproc+0x7c>)
 8011474:	6013      	str	r3, [r2, #0]
 8011476:	685a      	ldr	r2, [r3, #4]
 8011478:	6838      	ldr	r0, [r7, #0]
 801147a:	2a1f      	cmp	r2, #31
 801147c:	dd04      	ble.n	8011488 <__register_exitproc+0x30>
 801147e:	f7fc f8c0 	bl	800d602 <__retarget_lock_release_recursive>
 8011482:	2001      	movs	r0, #1
 8011484:	4240      	negs	r0, r0
 8011486:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011488:	2c00      	cmp	r4, #0
 801148a:	d014      	beq.n	80114b6 <__register_exitproc+0x5e>
 801148c:	0091      	lsls	r1, r2, #2
 801148e:	1859      	adds	r1, r3, r1
 8011490:	000f      	movs	r7, r1
 8011492:	3788      	adds	r7, #136	; 0x88
 8011494:	603e      	str	r6, [r7, #0]
 8011496:	2701      	movs	r7, #1
 8011498:	001e      	movs	r6, r3
 801149a:	4097      	lsls	r7, r2
 801149c:	3685      	adds	r6, #133	; 0x85
 801149e:	36ff      	adds	r6, #255	; 0xff
 80114a0:	6875      	ldr	r5, [r6, #4]
 80114a2:	31fc      	adds	r1, #252	; 0xfc
 80114a4:	433d      	orrs	r5, r7
 80114a6:	6075      	str	r5, [r6, #4]
 80114a8:	9d01      	ldr	r5, [sp, #4]
 80114aa:	60cd      	str	r5, [r1, #12]
 80114ac:	2c02      	cmp	r4, #2
 80114ae:	d102      	bne.n	80114b6 <__register_exitproc+0x5e>
 80114b0:	68b1      	ldr	r1, [r6, #8]
 80114b2:	4339      	orrs	r1, r7
 80114b4:	60b1      	str	r1, [r6, #8]
 80114b6:	1c51      	adds	r1, r2, #1
 80114b8:	6059      	str	r1, [r3, #4]
 80114ba:	3202      	adds	r2, #2
 80114bc:	9900      	ldr	r1, [sp, #0]
 80114be:	0092      	lsls	r2, r2, #2
 80114c0:	50d1      	str	r1, [r2, r3]
 80114c2:	f7fc f89e 	bl	800d602 <__retarget_lock_release_recursive>
 80114c6:	2000      	movs	r0, #0
 80114c8:	e7dd      	b.n	8011486 <__register_exitproc+0x2e>
 80114ca:	46c0      	nop			; (mov r8, r8)
 80114cc:	200006d4 	.word	0x200006d4
 80114d0:	20000dc0 	.word	0x20000dc0
 80114d4:	20000dc4 	.word	0x20000dc4

080114d8 <__assert_func>:
 80114d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80114da:	0014      	movs	r4, r2
 80114dc:	001a      	movs	r2, r3
 80114de:	4b09      	ldr	r3, [pc, #36]	; (8011504 <__assert_func+0x2c>)
 80114e0:	0005      	movs	r5, r0
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	000e      	movs	r6, r1
 80114e6:	68d8      	ldr	r0, [r3, #12]
 80114e8:	4b07      	ldr	r3, [pc, #28]	; (8011508 <__assert_func+0x30>)
 80114ea:	2c00      	cmp	r4, #0
 80114ec:	d101      	bne.n	80114f2 <__assert_func+0x1a>
 80114ee:	4b07      	ldr	r3, [pc, #28]	; (801150c <__assert_func+0x34>)
 80114f0:	001c      	movs	r4, r3
 80114f2:	4907      	ldr	r1, [pc, #28]	; (8011510 <__assert_func+0x38>)
 80114f4:	9301      	str	r3, [sp, #4]
 80114f6:	9402      	str	r4, [sp, #8]
 80114f8:	002b      	movs	r3, r5
 80114fa:	9600      	str	r6, [sp, #0]
 80114fc:	f001 fa20 	bl	8012940 <fiprintf>
 8011500:	f002 fb08 	bl	8013b14 <abort>
 8011504:	200006d0 	.word	0x200006d0
 8011508:	08015e88 	.word	0x08015e88
 801150c:	08015ec3 	.word	0x08015ec3
 8011510:	08015e95 	.word	0x08015e95

08011514 <_calloc_r>:
 8011514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011516:	2400      	movs	r4, #0
 8011518:	0c0b      	lsrs	r3, r1, #16
 801151a:	0c16      	lsrs	r6, r2, #16
 801151c:	42a3      	cmp	r3, r4
 801151e:	d133      	bne.n	8011588 <_calloc_r+0x74>
 8011520:	42a6      	cmp	r6, r4
 8011522:	d121      	bne.n	8011568 <_calloc_r+0x54>
 8011524:	b28b      	uxth	r3, r1
 8011526:	b291      	uxth	r1, r2
 8011528:	4359      	muls	r1, r3
 801152a:	f7fa fc37 	bl	800bd9c <_malloc_r>
 801152e:	1e05      	subs	r5, r0, #0
 8011530:	d033      	beq.n	801159a <_calloc_r+0x86>
 8011532:	0003      	movs	r3, r0
 8011534:	3b08      	subs	r3, #8
 8011536:	685a      	ldr	r2, [r3, #4]
 8011538:	2303      	movs	r3, #3
 801153a:	439a      	bics	r2, r3
 801153c:	3a04      	subs	r2, #4
 801153e:	2a24      	cmp	r2, #36	; 0x24
 8011540:	d832      	bhi.n	80115a8 <_calloc_r+0x94>
 8011542:	0003      	movs	r3, r0
 8011544:	2a13      	cmp	r2, #19
 8011546:	d90a      	bls.n	801155e <_calloc_r+0x4a>
 8011548:	6004      	str	r4, [r0, #0]
 801154a:	6044      	str	r4, [r0, #4]
 801154c:	3308      	adds	r3, #8
 801154e:	2a1b      	cmp	r2, #27
 8011550:	d905      	bls.n	801155e <_calloc_r+0x4a>
 8011552:	6084      	str	r4, [r0, #8]
 8011554:	60c4      	str	r4, [r0, #12]
 8011556:	2a24      	cmp	r2, #36	; 0x24
 8011558:	d021      	beq.n	801159e <_calloc_r+0x8a>
 801155a:	0003      	movs	r3, r0
 801155c:	3310      	adds	r3, #16
 801155e:	2200      	movs	r2, #0
 8011560:	601a      	str	r2, [r3, #0]
 8011562:	605a      	str	r2, [r3, #4]
 8011564:	609a      	str	r2, [r3, #8]
 8011566:	e018      	b.n	801159a <_calloc_r+0x86>
 8011568:	1c33      	adds	r3, r6, #0
 801156a:	1c0d      	adds	r5, r1, #0
 801156c:	b289      	uxth	r1, r1
 801156e:	b292      	uxth	r2, r2
 8011570:	434a      	muls	r2, r1
 8011572:	b2ad      	uxth	r5, r5
 8011574:	b299      	uxth	r1, r3
 8011576:	4369      	muls	r1, r5
 8011578:	0c13      	lsrs	r3, r2, #16
 801157a:	18c9      	adds	r1, r1, r3
 801157c:	0c0b      	lsrs	r3, r1, #16
 801157e:	d107      	bne.n	8011590 <_calloc_r+0x7c>
 8011580:	0409      	lsls	r1, r1, #16
 8011582:	b292      	uxth	r2, r2
 8011584:	4311      	orrs	r1, r2
 8011586:	e7d0      	b.n	801152a <_calloc_r+0x16>
 8011588:	2e00      	cmp	r6, #0
 801158a:	d101      	bne.n	8011590 <_calloc_r+0x7c>
 801158c:	1c15      	adds	r5, r2, #0
 801158e:	e7ed      	b.n	801156c <_calloc_r+0x58>
 8011590:	f7fc f80a 	bl	800d5a8 <__errno>
 8011594:	230c      	movs	r3, #12
 8011596:	2500      	movs	r5, #0
 8011598:	6003      	str	r3, [r0, #0]
 801159a:	0028      	movs	r0, r5
 801159c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801159e:	0003      	movs	r3, r0
 80115a0:	6104      	str	r4, [r0, #16]
 80115a2:	3318      	adds	r3, #24
 80115a4:	6144      	str	r4, [r0, #20]
 80115a6:	e7da      	b.n	801155e <_calloc_r+0x4a>
 80115a8:	2100      	movs	r1, #0
 80115aa:	f7fb ff09 	bl	800d3c0 <memset>
 80115ae:	e7f4      	b.n	801159a <_calloc_r+0x86>

080115b0 <quorem>:
 80115b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115b2:	6902      	ldr	r2, [r0, #16]
 80115b4:	690b      	ldr	r3, [r1, #16]
 80115b6:	b089      	sub	sp, #36	; 0x24
 80115b8:	0007      	movs	r7, r0
 80115ba:	9104      	str	r1, [sp, #16]
 80115bc:	2000      	movs	r0, #0
 80115be:	429a      	cmp	r2, r3
 80115c0:	db69      	blt.n	8011696 <quorem+0xe6>
 80115c2:	3b01      	subs	r3, #1
 80115c4:	009c      	lsls	r4, r3, #2
 80115c6:	9301      	str	r3, [sp, #4]
 80115c8:	000b      	movs	r3, r1
 80115ca:	3314      	adds	r3, #20
 80115cc:	9306      	str	r3, [sp, #24]
 80115ce:	191b      	adds	r3, r3, r4
 80115d0:	9305      	str	r3, [sp, #20]
 80115d2:	003b      	movs	r3, r7
 80115d4:	3314      	adds	r3, #20
 80115d6:	9303      	str	r3, [sp, #12]
 80115d8:	191c      	adds	r4, r3, r4
 80115da:	9b05      	ldr	r3, [sp, #20]
 80115dc:	6826      	ldr	r6, [r4, #0]
 80115de:	681d      	ldr	r5, [r3, #0]
 80115e0:	0030      	movs	r0, r6
 80115e2:	3501      	adds	r5, #1
 80115e4:	0029      	movs	r1, r5
 80115e6:	f7ee fda9 	bl	800013c <__udivsi3>
 80115ea:	9002      	str	r0, [sp, #8]
 80115ec:	42ae      	cmp	r6, r5
 80115ee:	d329      	bcc.n	8011644 <quorem+0x94>
 80115f0:	9b06      	ldr	r3, [sp, #24]
 80115f2:	2600      	movs	r6, #0
 80115f4:	469c      	mov	ip, r3
 80115f6:	9d03      	ldr	r5, [sp, #12]
 80115f8:	9606      	str	r6, [sp, #24]
 80115fa:	4662      	mov	r2, ip
 80115fc:	ca08      	ldmia	r2!, {r3}
 80115fe:	6828      	ldr	r0, [r5, #0]
 8011600:	4694      	mov	ip, r2
 8011602:	9a02      	ldr	r2, [sp, #8]
 8011604:	b299      	uxth	r1, r3
 8011606:	4351      	muls	r1, r2
 8011608:	0c1b      	lsrs	r3, r3, #16
 801160a:	4353      	muls	r3, r2
 801160c:	1989      	adds	r1, r1, r6
 801160e:	0c0a      	lsrs	r2, r1, #16
 8011610:	189b      	adds	r3, r3, r2
 8011612:	9307      	str	r3, [sp, #28]
 8011614:	0c1e      	lsrs	r6, r3, #16
 8011616:	9b06      	ldr	r3, [sp, #24]
 8011618:	b282      	uxth	r2, r0
 801161a:	18d2      	adds	r2, r2, r3
 801161c:	466b      	mov	r3, sp
 801161e:	b289      	uxth	r1, r1
 8011620:	8b9b      	ldrh	r3, [r3, #28]
 8011622:	1a52      	subs	r2, r2, r1
 8011624:	0c01      	lsrs	r1, r0, #16
 8011626:	1ac9      	subs	r1, r1, r3
 8011628:	1413      	asrs	r3, r2, #16
 801162a:	18cb      	adds	r3, r1, r3
 801162c:	1419      	asrs	r1, r3, #16
 801162e:	b292      	uxth	r2, r2
 8011630:	041b      	lsls	r3, r3, #16
 8011632:	4313      	orrs	r3, r2
 8011634:	c508      	stmia	r5!, {r3}
 8011636:	9b05      	ldr	r3, [sp, #20]
 8011638:	9106      	str	r1, [sp, #24]
 801163a:	4563      	cmp	r3, ip
 801163c:	d2dd      	bcs.n	80115fa <quorem+0x4a>
 801163e:	6823      	ldr	r3, [r4, #0]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d030      	beq.n	80116a6 <quorem+0xf6>
 8011644:	0038      	movs	r0, r7
 8011646:	9904      	ldr	r1, [sp, #16]
 8011648:	f7fc ff04 	bl	800e454 <__mcmp>
 801164c:	2800      	cmp	r0, #0
 801164e:	db21      	blt.n	8011694 <quorem+0xe4>
 8011650:	0038      	movs	r0, r7
 8011652:	2600      	movs	r6, #0
 8011654:	9b02      	ldr	r3, [sp, #8]
 8011656:	9c04      	ldr	r4, [sp, #16]
 8011658:	3301      	adds	r3, #1
 801165a:	9302      	str	r3, [sp, #8]
 801165c:	3014      	adds	r0, #20
 801165e:	3414      	adds	r4, #20
 8011660:	6803      	ldr	r3, [r0, #0]
 8011662:	cc02      	ldmia	r4!, {r1}
 8011664:	b29d      	uxth	r5, r3
 8011666:	19ad      	adds	r5, r5, r6
 8011668:	b28a      	uxth	r2, r1
 801166a:	1aaa      	subs	r2, r5, r2
 801166c:	0c09      	lsrs	r1, r1, #16
 801166e:	0c1b      	lsrs	r3, r3, #16
 8011670:	1a5b      	subs	r3, r3, r1
 8011672:	1411      	asrs	r1, r2, #16
 8011674:	185b      	adds	r3, r3, r1
 8011676:	141e      	asrs	r6, r3, #16
 8011678:	b292      	uxth	r2, r2
 801167a:	041b      	lsls	r3, r3, #16
 801167c:	4313      	orrs	r3, r2
 801167e:	c008      	stmia	r0!, {r3}
 8011680:	9b05      	ldr	r3, [sp, #20]
 8011682:	42a3      	cmp	r3, r4
 8011684:	d2ec      	bcs.n	8011660 <quorem+0xb0>
 8011686:	9b01      	ldr	r3, [sp, #4]
 8011688:	9a03      	ldr	r2, [sp, #12]
 801168a:	009b      	lsls	r3, r3, #2
 801168c:	18d3      	adds	r3, r2, r3
 801168e:	681a      	ldr	r2, [r3, #0]
 8011690:	2a00      	cmp	r2, #0
 8011692:	d015      	beq.n	80116c0 <quorem+0x110>
 8011694:	9802      	ldr	r0, [sp, #8]
 8011696:	b009      	add	sp, #36	; 0x24
 8011698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801169a:	6823      	ldr	r3, [r4, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d106      	bne.n	80116ae <quorem+0xfe>
 80116a0:	9b01      	ldr	r3, [sp, #4]
 80116a2:	3b01      	subs	r3, #1
 80116a4:	9301      	str	r3, [sp, #4]
 80116a6:	9b03      	ldr	r3, [sp, #12]
 80116a8:	3c04      	subs	r4, #4
 80116aa:	42a3      	cmp	r3, r4
 80116ac:	d3f5      	bcc.n	801169a <quorem+0xea>
 80116ae:	9b01      	ldr	r3, [sp, #4]
 80116b0:	613b      	str	r3, [r7, #16]
 80116b2:	e7c7      	b.n	8011644 <quorem+0x94>
 80116b4:	681a      	ldr	r2, [r3, #0]
 80116b6:	2a00      	cmp	r2, #0
 80116b8:	d106      	bne.n	80116c8 <quorem+0x118>
 80116ba:	9a01      	ldr	r2, [sp, #4]
 80116bc:	3a01      	subs	r2, #1
 80116be:	9201      	str	r2, [sp, #4]
 80116c0:	9a03      	ldr	r2, [sp, #12]
 80116c2:	3b04      	subs	r3, #4
 80116c4:	429a      	cmp	r2, r3
 80116c6:	d3f5      	bcc.n	80116b4 <quorem+0x104>
 80116c8:	9b01      	ldr	r3, [sp, #4]
 80116ca:	613b      	str	r3, [r7, #16]
 80116cc:	e7e2      	b.n	8011694 <quorem+0xe4>
	...

080116d0 <_dtoa_r>:
 80116d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116d2:	0014      	movs	r4, r2
 80116d4:	001d      	movs	r5, r3
 80116d6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80116d8:	b09d      	sub	sp, #116	; 0x74
 80116da:	9408      	str	r4, [sp, #32]
 80116dc:	9509      	str	r5, [sp, #36]	; 0x24
 80116de:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80116e0:	9004      	str	r0, [sp, #16]
 80116e2:	2900      	cmp	r1, #0
 80116e4:	d009      	beq.n	80116fa <_dtoa_r+0x2a>
 80116e6:	2301      	movs	r3, #1
 80116e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80116ea:	4093      	lsls	r3, r2
 80116ec:	604a      	str	r2, [r1, #4]
 80116ee:	608b      	str	r3, [r1, #8]
 80116f0:	f7fc fc56 	bl	800dfa0 <_Bfree>
 80116f4:	2300      	movs	r3, #0
 80116f6:	9a04      	ldr	r2, [sp, #16]
 80116f8:	6393      	str	r3, [r2, #56]	; 0x38
 80116fa:	2d00      	cmp	r5, #0
 80116fc:	da1e      	bge.n	801173c <_dtoa_r+0x6c>
 80116fe:	2301      	movs	r3, #1
 8011700:	6033      	str	r3, [r6, #0]
 8011702:	006b      	lsls	r3, r5, #1
 8011704:	085b      	lsrs	r3, r3, #1
 8011706:	9309      	str	r3, [sp, #36]	; 0x24
 8011708:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801170a:	4bb5      	ldr	r3, [pc, #724]	; (80119e0 <_dtoa_r+0x310>)
 801170c:	4ab4      	ldr	r2, [pc, #720]	; (80119e0 <_dtoa_r+0x310>)
 801170e:	403b      	ands	r3, r7
 8011710:	4293      	cmp	r3, r2
 8011712:	d116      	bne.n	8011742 <_dtoa_r+0x72>
 8011714:	4bb3      	ldr	r3, [pc, #716]	; (80119e4 <_dtoa_r+0x314>)
 8011716:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011718:	6013      	str	r3, [r2, #0]
 801171a:	033b      	lsls	r3, r7, #12
 801171c:	0b1b      	lsrs	r3, r3, #12
 801171e:	4323      	orrs	r3, r4
 8011720:	d101      	bne.n	8011726 <_dtoa_r+0x56>
 8011722:	f000 fdb2 	bl	801228a <_dtoa_r+0xbba>
 8011726:	4bb0      	ldr	r3, [pc, #704]	; (80119e8 <_dtoa_r+0x318>)
 8011728:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801172a:	9306      	str	r3, [sp, #24]
 801172c:	2a00      	cmp	r2, #0
 801172e:	d002      	beq.n	8011736 <_dtoa_r+0x66>
 8011730:	4bae      	ldr	r3, [pc, #696]	; (80119ec <_dtoa_r+0x31c>)
 8011732:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011734:	6013      	str	r3, [r2, #0]
 8011736:	9806      	ldr	r0, [sp, #24]
 8011738:	b01d      	add	sp, #116	; 0x74
 801173a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801173c:	2300      	movs	r3, #0
 801173e:	6033      	str	r3, [r6, #0]
 8011740:	e7e2      	b.n	8011708 <_dtoa_r+0x38>
 8011742:	9a08      	ldr	r2, [sp, #32]
 8011744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011746:	9210      	str	r2, [sp, #64]	; 0x40
 8011748:	9311      	str	r3, [sp, #68]	; 0x44
 801174a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801174c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801174e:	2200      	movs	r2, #0
 8011750:	2300      	movs	r3, #0
 8011752:	f7ee fe79 	bl	8000448 <__aeabi_dcmpeq>
 8011756:	1e06      	subs	r6, r0, #0
 8011758:	d009      	beq.n	801176e <_dtoa_r+0x9e>
 801175a:	2301      	movs	r3, #1
 801175c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801175e:	6013      	str	r3, [r2, #0]
 8011760:	4ba3      	ldr	r3, [pc, #652]	; (80119f0 <_dtoa_r+0x320>)
 8011762:	9306      	str	r3, [sp, #24]
 8011764:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011766:	2b00      	cmp	r3, #0
 8011768:	d0e5      	beq.n	8011736 <_dtoa_r+0x66>
 801176a:	4ba2      	ldr	r3, [pc, #648]	; (80119f4 <_dtoa_r+0x324>)
 801176c:	e7e1      	b.n	8011732 <_dtoa_r+0x62>
 801176e:	ab1a      	add	r3, sp, #104	; 0x68
 8011770:	9301      	str	r3, [sp, #4]
 8011772:	ab1b      	add	r3, sp, #108	; 0x6c
 8011774:	9300      	str	r3, [sp, #0]
 8011776:	9804      	ldr	r0, [sp, #16]
 8011778:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801177a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801177c:	f7fc ff86 	bl	800e68c <__d2b>
 8011780:	007a      	lsls	r2, r7, #1
 8011782:	9005      	str	r0, [sp, #20]
 8011784:	0d52      	lsrs	r2, r2, #21
 8011786:	d100      	bne.n	801178a <_dtoa_r+0xba>
 8011788:	e07b      	b.n	8011882 <_dtoa_r+0x1b2>
 801178a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801178c:	9617      	str	r6, [sp, #92]	; 0x5c
 801178e:	0319      	lsls	r1, r3, #12
 8011790:	4b99      	ldr	r3, [pc, #612]	; (80119f8 <_dtoa_r+0x328>)
 8011792:	0b09      	lsrs	r1, r1, #12
 8011794:	430b      	orrs	r3, r1
 8011796:	4999      	ldr	r1, [pc, #612]	; (80119fc <_dtoa_r+0x32c>)
 8011798:	1857      	adds	r7, r2, r1
 801179a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801179c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801179e:	0019      	movs	r1, r3
 80117a0:	2200      	movs	r2, #0
 80117a2:	4b97      	ldr	r3, [pc, #604]	; (8011a00 <_dtoa_r+0x330>)
 80117a4:	f7f0 fa24 	bl	8001bf0 <__aeabi_dsub>
 80117a8:	4a96      	ldr	r2, [pc, #600]	; (8011a04 <_dtoa_r+0x334>)
 80117aa:	4b97      	ldr	r3, [pc, #604]	; (8011a08 <_dtoa_r+0x338>)
 80117ac:	f7ef ff5e 	bl	800166c <__aeabi_dmul>
 80117b0:	4a96      	ldr	r2, [pc, #600]	; (8011a0c <_dtoa_r+0x33c>)
 80117b2:	4b97      	ldr	r3, [pc, #604]	; (8011a10 <_dtoa_r+0x340>)
 80117b4:	f7ef f800 	bl	80007b8 <__aeabi_dadd>
 80117b8:	0004      	movs	r4, r0
 80117ba:	0038      	movs	r0, r7
 80117bc:	000d      	movs	r5, r1
 80117be:	f7f0 fded 	bl	800239c <__aeabi_i2d>
 80117c2:	4a94      	ldr	r2, [pc, #592]	; (8011a14 <_dtoa_r+0x344>)
 80117c4:	4b94      	ldr	r3, [pc, #592]	; (8011a18 <_dtoa_r+0x348>)
 80117c6:	f7ef ff51 	bl	800166c <__aeabi_dmul>
 80117ca:	0002      	movs	r2, r0
 80117cc:	000b      	movs	r3, r1
 80117ce:	0020      	movs	r0, r4
 80117d0:	0029      	movs	r1, r5
 80117d2:	f7ee fff1 	bl	80007b8 <__aeabi_dadd>
 80117d6:	0004      	movs	r4, r0
 80117d8:	000d      	movs	r5, r1
 80117da:	f7f0 fda9 	bl	8002330 <__aeabi_d2iz>
 80117de:	2200      	movs	r2, #0
 80117e0:	9003      	str	r0, [sp, #12]
 80117e2:	2300      	movs	r3, #0
 80117e4:	0020      	movs	r0, r4
 80117e6:	0029      	movs	r1, r5
 80117e8:	f7ee fe34 	bl	8000454 <__aeabi_dcmplt>
 80117ec:	2800      	cmp	r0, #0
 80117ee:	d00b      	beq.n	8011808 <_dtoa_r+0x138>
 80117f0:	9803      	ldr	r0, [sp, #12]
 80117f2:	f7f0 fdd3 	bl	800239c <__aeabi_i2d>
 80117f6:	002b      	movs	r3, r5
 80117f8:	0022      	movs	r2, r4
 80117fa:	f7ee fe25 	bl	8000448 <__aeabi_dcmpeq>
 80117fe:	4243      	negs	r3, r0
 8011800:	4158      	adcs	r0, r3
 8011802:	9b03      	ldr	r3, [sp, #12]
 8011804:	1a1b      	subs	r3, r3, r0
 8011806:	9303      	str	r3, [sp, #12]
 8011808:	2301      	movs	r3, #1
 801180a:	9316      	str	r3, [sp, #88]	; 0x58
 801180c:	9b03      	ldr	r3, [sp, #12]
 801180e:	2b16      	cmp	r3, #22
 8011810:	d810      	bhi.n	8011834 <_dtoa_r+0x164>
 8011812:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011814:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011816:	9a03      	ldr	r2, [sp, #12]
 8011818:	4b80      	ldr	r3, [pc, #512]	; (8011a1c <_dtoa_r+0x34c>)
 801181a:	00d2      	lsls	r2, r2, #3
 801181c:	189b      	adds	r3, r3, r2
 801181e:	681a      	ldr	r2, [r3, #0]
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	f7ee fe17 	bl	8000454 <__aeabi_dcmplt>
 8011826:	2800      	cmp	r0, #0
 8011828:	d047      	beq.n	80118ba <_dtoa_r+0x1ea>
 801182a:	9b03      	ldr	r3, [sp, #12]
 801182c:	3b01      	subs	r3, #1
 801182e:	9303      	str	r3, [sp, #12]
 8011830:	2300      	movs	r3, #0
 8011832:	9316      	str	r3, [sp, #88]	; 0x58
 8011834:	2200      	movs	r2, #0
 8011836:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011838:	920a      	str	r2, [sp, #40]	; 0x28
 801183a:	1bdb      	subs	r3, r3, r7
 801183c:	1e5a      	subs	r2, r3, #1
 801183e:	d53e      	bpl.n	80118be <_dtoa_r+0x1ee>
 8011840:	2201      	movs	r2, #1
 8011842:	1ad3      	subs	r3, r2, r3
 8011844:	930a      	str	r3, [sp, #40]	; 0x28
 8011846:	2300      	movs	r3, #0
 8011848:	930c      	str	r3, [sp, #48]	; 0x30
 801184a:	9b03      	ldr	r3, [sp, #12]
 801184c:	2b00      	cmp	r3, #0
 801184e:	db38      	blt.n	80118c2 <_dtoa_r+0x1f2>
 8011850:	9a03      	ldr	r2, [sp, #12]
 8011852:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011854:	4694      	mov	ip, r2
 8011856:	4463      	add	r3, ip
 8011858:	930c      	str	r3, [sp, #48]	; 0x30
 801185a:	2300      	movs	r3, #0
 801185c:	9213      	str	r2, [sp, #76]	; 0x4c
 801185e:	930d      	str	r3, [sp, #52]	; 0x34
 8011860:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011862:	2401      	movs	r4, #1
 8011864:	2b09      	cmp	r3, #9
 8011866:	d867      	bhi.n	8011938 <_dtoa_r+0x268>
 8011868:	2b05      	cmp	r3, #5
 801186a:	dd02      	ble.n	8011872 <_dtoa_r+0x1a2>
 801186c:	2400      	movs	r4, #0
 801186e:	3b04      	subs	r3, #4
 8011870:	9322      	str	r3, [sp, #136]	; 0x88
 8011872:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011874:	1e98      	subs	r0, r3, #2
 8011876:	2803      	cmp	r0, #3
 8011878:	d867      	bhi.n	801194a <_dtoa_r+0x27a>
 801187a:	f7ee fc4b 	bl	8000114 <__gnu_thumb1_case_uqi>
 801187e:	3a2b      	.short	0x3a2b
 8011880:	5b38      	.short	0x5b38
 8011882:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011884:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8011886:	18f6      	adds	r6, r6, r3
 8011888:	4b65      	ldr	r3, [pc, #404]	; (8011a20 <_dtoa_r+0x350>)
 801188a:	18f2      	adds	r2, r6, r3
 801188c:	2a20      	cmp	r2, #32
 801188e:	dd0f      	ble.n	80118b0 <_dtoa_r+0x1e0>
 8011890:	2340      	movs	r3, #64	; 0x40
 8011892:	1a9b      	subs	r3, r3, r2
 8011894:	409f      	lsls	r7, r3
 8011896:	4b63      	ldr	r3, [pc, #396]	; (8011a24 <_dtoa_r+0x354>)
 8011898:	0038      	movs	r0, r7
 801189a:	18f3      	adds	r3, r6, r3
 801189c:	40dc      	lsrs	r4, r3
 801189e:	4320      	orrs	r0, r4
 80118a0:	f7f0 fdac 	bl	80023fc <__aeabi_ui2d>
 80118a4:	2201      	movs	r2, #1
 80118a6:	4b60      	ldr	r3, [pc, #384]	; (8011a28 <_dtoa_r+0x358>)
 80118a8:	1e77      	subs	r7, r6, #1
 80118aa:	18cb      	adds	r3, r1, r3
 80118ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80118ae:	e776      	b.n	801179e <_dtoa_r+0xce>
 80118b0:	2320      	movs	r3, #32
 80118b2:	0020      	movs	r0, r4
 80118b4:	1a9b      	subs	r3, r3, r2
 80118b6:	4098      	lsls	r0, r3
 80118b8:	e7f2      	b.n	80118a0 <_dtoa_r+0x1d0>
 80118ba:	9016      	str	r0, [sp, #88]	; 0x58
 80118bc:	e7ba      	b.n	8011834 <_dtoa_r+0x164>
 80118be:	920c      	str	r2, [sp, #48]	; 0x30
 80118c0:	e7c3      	b.n	801184a <_dtoa_r+0x17a>
 80118c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118c4:	9a03      	ldr	r2, [sp, #12]
 80118c6:	1a9b      	subs	r3, r3, r2
 80118c8:	930a      	str	r3, [sp, #40]	; 0x28
 80118ca:	4253      	negs	r3, r2
 80118cc:	930d      	str	r3, [sp, #52]	; 0x34
 80118ce:	2300      	movs	r3, #0
 80118d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80118d2:	e7c5      	b.n	8011860 <_dtoa_r+0x190>
 80118d4:	2300      	movs	r3, #0
 80118d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80118d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80118da:	930b      	str	r3, [sp, #44]	; 0x2c
 80118dc:	9307      	str	r3, [sp, #28]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	dc13      	bgt.n	801190a <_dtoa_r+0x23a>
 80118e2:	2301      	movs	r3, #1
 80118e4:	001a      	movs	r2, r3
 80118e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80118e8:	9307      	str	r3, [sp, #28]
 80118ea:	9223      	str	r2, [sp, #140]	; 0x8c
 80118ec:	e00d      	b.n	801190a <_dtoa_r+0x23a>
 80118ee:	2301      	movs	r3, #1
 80118f0:	e7f1      	b.n	80118d6 <_dtoa_r+0x206>
 80118f2:	2300      	movs	r3, #0
 80118f4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80118f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80118f8:	4694      	mov	ip, r2
 80118fa:	9b03      	ldr	r3, [sp, #12]
 80118fc:	4463      	add	r3, ip
 80118fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8011900:	3301      	adds	r3, #1
 8011902:	9307      	str	r3, [sp, #28]
 8011904:	2b00      	cmp	r3, #0
 8011906:	dc00      	bgt.n	801190a <_dtoa_r+0x23a>
 8011908:	2301      	movs	r3, #1
 801190a:	2100      	movs	r1, #0
 801190c:	2204      	movs	r2, #4
 801190e:	0010      	movs	r0, r2
 8011910:	3014      	adds	r0, #20
 8011912:	4298      	cmp	r0, r3
 8011914:	d91d      	bls.n	8011952 <_dtoa_r+0x282>
 8011916:	9b04      	ldr	r3, [sp, #16]
 8011918:	0018      	movs	r0, r3
 801191a:	63d9      	str	r1, [r3, #60]	; 0x3c
 801191c:	f7fc fb18 	bl	800df50 <_Balloc>
 8011920:	9006      	str	r0, [sp, #24]
 8011922:	2800      	cmp	r0, #0
 8011924:	d118      	bne.n	8011958 <_dtoa_r+0x288>
 8011926:	21b0      	movs	r1, #176	; 0xb0
 8011928:	4b40      	ldr	r3, [pc, #256]	; (8011a2c <_dtoa_r+0x35c>)
 801192a:	4841      	ldr	r0, [pc, #260]	; (8011a30 <_dtoa_r+0x360>)
 801192c:	9a06      	ldr	r2, [sp, #24]
 801192e:	31ff      	adds	r1, #255	; 0xff
 8011930:	f7ff fdd2 	bl	80114d8 <__assert_func>
 8011934:	2301      	movs	r3, #1
 8011936:	e7dd      	b.n	80118f4 <_dtoa_r+0x224>
 8011938:	2300      	movs	r3, #0
 801193a:	940f      	str	r4, [sp, #60]	; 0x3c
 801193c:	9322      	str	r3, [sp, #136]	; 0x88
 801193e:	3b01      	subs	r3, #1
 8011940:	930b      	str	r3, [sp, #44]	; 0x2c
 8011942:	9307      	str	r3, [sp, #28]
 8011944:	2200      	movs	r2, #0
 8011946:	3313      	adds	r3, #19
 8011948:	e7cf      	b.n	80118ea <_dtoa_r+0x21a>
 801194a:	2301      	movs	r3, #1
 801194c:	930f      	str	r3, [sp, #60]	; 0x3c
 801194e:	3b02      	subs	r3, #2
 8011950:	e7f6      	b.n	8011940 <_dtoa_r+0x270>
 8011952:	3101      	adds	r1, #1
 8011954:	0052      	lsls	r2, r2, #1
 8011956:	e7da      	b.n	801190e <_dtoa_r+0x23e>
 8011958:	9b04      	ldr	r3, [sp, #16]
 801195a:	9a06      	ldr	r2, [sp, #24]
 801195c:	639a      	str	r2, [r3, #56]	; 0x38
 801195e:	9b07      	ldr	r3, [sp, #28]
 8011960:	2b0e      	cmp	r3, #14
 8011962:	d900      	bls.n	8011966 <_dtoa_r+0x296>
 8011964:	e0e3      	b.n	8011b2e <_dtoa_r+0x45e>
 8011966:	2c00      	cmp	r4, #0
 8011968:	d100      	bne.n	801196c <_dtoa_r+0x29c>
 801196a:	e0e0      	b.n	8011b2e <_dtoa_r+0x45e>
 801196c:	9b03      	ldr	r3, [sp, #12]
 801196e:	2b00      	cmp	r3, #0
 8011970:	dd62      	ble.n	8011a38 <_dtoa_r+0x368>
 8011972:	210f      	movs	r1, #15
 8011974:	9a03      	ldr	r2, [sp, #12]
 8011976:	4b29      	ldr	r3, [pc, #164]	; (8011a1c <_dtoa_r+0x34c>)
 8011978:	400a      	ands	r2, r1
 801197a:	00d2      	lsls	r2, r2, #3
 801197c:	189b      	adds	r3, r3, r2
 801197e:	681e      	ldr	r6, [r3, #0]
 8011980:	685f      	ldr	r7, [r3, #4]
 8011982:	9b03      	ldr	r3, [sp, #12]
 8011984:	2402      	movs	r4, #2
 8011986:	111d      	asrs	r5, r3, #4
 8011988:	05db      	lsls	r3, r3, #23
 801198a:	d50a      	bpl.n	80119a2 <_dtoa_r+0x2d2>
 801198c:	4b29      	ldr	r3, [pc, #164]	; (8011a34 <_dtoa_r+0x364>)
 801198e:	400d      	ands	r5, r1
 8011990:	6a1a      	ldr	r2, [r3, #32]
 8011992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011994:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011996:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011998:	f7ef fa6e 	bl	8000e78 <__aeabi_ddiv>
 801199c:	9008      	str	r0, [sp, #32]
 801199e:	9109      	str	r1, [sp, #36]	; 0x24
 80119a0:	3401      	adds	r4, #1
 80119a2:	4b24      	ldr	r3, [pc, #144]	; (8011a34 <_dtoa_r+0x364>)
 80119a4:	930e      	str	r3, [sp, #56]	; 0x38
 80119a6:	2d00      	cmp	r5, #0
 80119a8:	d108      	bne.n	80119bc <_dtoa_r+0x2ec>
 80119aa:	9808      	ldr	r0, [sp, #32]
 80119ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80119ae:	0032      	movs	r2, r6
 80119b0:	003b      	movs	r3, r7
 80119b2:	f7ef fa61 	bl	8000e78 <__aeabi_ddiv>
 80119b6:	9008      	str	r0, [sp, #32]
 80119b8:	9109      	str	r1, [sp, #36]	; 0x24
 80119ba:	e058      	b.n	8011a6e <_dtoa_r+0x39e>
 80119bc:	2301      	movs	r3, #1
 80119be:	421d      	tst	r5, r3
 80119c0:	d009      	beq.n	80119d6 <_dtoa_r+0x306>
 80119c2:	18e4      	adds	r4, r4, r3
 80119c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119c6:	0030      	movs	r0, r6
 80119c8:	681a      	ldr	r2, [r3, #0]
 80119ca:	685b      	ldr	r3, [r3, #4]
 80119cc:	0039      	movs	r1, r7
 80119ce:	f7ef fe4d 	bl	800166c <__aeabi_dmul>
 80119d2:	0006      	movs	r6, r0
 80119d4:	000f      	movs	r7, r1
 80119d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119d8:	106d      	asrs	r5, r5, #1
 80119da:	3308      	adds	r3, #8
 80119dc:	e7e2      	b.n	80119a4 <_dtoa_r+0x2d4>
 80119de:	46c0      	nop			; (mov r8, r8)
 80119e0:	7ff00000 	.word	0x7ff00000
 80119e4:	0000270f 	.word	0x0000270f
 80119e8:	08015ecd 	.word	0x08015ecd
 80119ec:	08015ed0 	.word	0x08015ed0
 80119f0:	08015e3e 	.word	0x08015e3e
 80119f4:	08015e3f 	.word	0x08015e3f
 80119f8:	3ff00000 	.word	0x3ff00000
 80119fc:	fffffc01 	.word	0xfffffc01
 8011a00:	3ff80000 	.word	0x3ff80000
 8011a04:	636f4361 	.word	0x636f4361
 8011a08:	3fd287a7 	.word	0x3fd287a7
 8011a0c:	8b60c8b3 	.word	0x8b60c8b3
 8011a10:	3fc68a28 	.word	0x3fc68a28
 8011a14:	509f79fb 	.word	0x509f79fb
 8011a18:	3fd34413 	.word	0x3fd34413
 8011a1c:	08015d38 	.word	0x08015d38
 8011a20:	00000432 	.word	0x00000432
 8011a24:	00000412 	.word	0x00000412
 8011a28:	fe100000 	.word	0xfe100000
 8011a2c:	08015c41 	.word	0x08015c41
 8011a30:	08015ed1 	.word	0x08015ed1
 8011a34:	08015d10 	.word	0x08015d10
 8011a38:	9b03      	ldr	r3, [sp, #12]
 8011a3a:	2402      	movs	r4, #2
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d016      	beq.n	8011a6e <_dtoa_r+0x39e>
 8011a40:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011a42:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011a44:	220f      	movs	r2, #15
 8011a46:	425d      	negs	r5, r3
 8011a48:	402a      	ands	r2, r5
 8011a4a:	4bdd      	ldr	r3, [pc, #884]	; (8011dc0 <_dtoa_r+0x6f0>)
 8011a4c:	00d2      	lsls	r2, r2, #3
 8011a4e:	189b      	adds	r3, r3, r2
 8011a50:	681a      	ldr	r2, [r3, #0]
 8011a52:	685b      	ldr	r3, [r3, #4]
 8011a54:	f7ef fe0a 	bl	800166c <__aeabi_dmul>
 8011a58:	2701      	movs	r7, #1
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	9008      	str	r0, [sp, #32]
 8011a5e:	9109      	str	r1, [sp, #36]	; 0x24
 8011a60:	4ed8      	ldr	r6, [pc, #864]	; (8011dc4 <_dtoa_r+0x6f4>)
 8011a62:	112d      	asrs	r5, r5, #4
 8011a64:	2d00      	cmp	r5, #0
 8011a66:	d000      	beq.n	8011a6a <_dtoa_r+0x39a>
 8011a68:	e091      	b.n	8011b8e <_dtoa_r+0x4be>
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d1a3      	bne.n	80119b6 <_dtoa_r+0x2e6>
 8011a6e:	9e08      	ldr	r6, [sp, #32]
 8011a70:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011a72:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d100      	bne.n	8011a7a <_dtoa_r+0x3aa>
 8011a78:	e094      	b.n	8011ba4 <_dtoa_r+0x4d4>
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	0030      	movs	r0, r6
 8011a7e:	0039      	movs	r1, r7
 8011a80:	4bd1      	ldr	r3, [pc, #836]	; (8011dc8 <_dtoa_r+0x6f8>)
 8011a82:	f7ee fce7 	bl	8000454 <__aeabi_dcmplt>
 8011a86:	2800      	cmp	r0, #0
 8011a88:	d100      	bne.n	8011a8c <_dtoa_r+0x3bc>
 8011a8a:	e08b      	b.n	8011ba4 <_dtoa_r+0x4d4>
 8011a8c:	9b07      	ldr	r3, [sp, #28]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d100      	bne.n	8011a94 <_dtoa_r+0x3c4>
 8011a92:	e087      	b.n	8011ba4 <_dtoa_r+0x4d4>
 8011a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	dd45      	ble.n	8011b26 <_dtoa_r+0x456>
 8011a9a:	9b03      	ldr	r3, [sp, #12]
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	3b01      	subs	r3, #1
 8011aa0:	930e      	str	r3, [sp, #56]	; 0x38
 8011aa2:	0030      	movs	r0, r6
 8011aa4:	4bc9      	ldr	r3, [pc, #804]	; (8011dcc <_dtoa_r+0x6fc>)
 8011aa6:	0039      	movs	r1, r7
 8011aa8:	f7ef fde0 	bl	800166c <__aeabi_dmul>
 8011aac:	9008      	str	r0, [sp, #32]
 8011aae:	9109      	str	r1, [sp, #36]	; 0x24
 8011ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ab2:	3401      	adds	r4, #1
 8011ab4:	0020      	movs	r0, r4
 8011ab6:	9e08      	ldr	r6, [sp, #32]
 8011ab8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011aba:	9312      	str	r3, [sp, #72]	; 0x48
 8011abc:	f7f0 fc6e 	bl	800239c <__aeabi_i2d>
 8011ac0:	0032      	movs	r2, r6
 8011ac2:	003b      	movs	r3, r7
 8011ac4:	f7ef fdd2 	bl	800166c <__aeabi_dmul>
 8011ac8:	2200      	movs	r2, #0
 8011aca:	4bc1      	ldr	r3, [pc, #772]	; (8011dd0 <_dtoa_r+0x700>)
 8011acc:	f7ee fe74 	bl	80007b8 <__aeabi_dadd>
 8011ad0:	4ac0      	ldr	r2, [pc, #768]	; (8011dd4 <_dtoa_r+0x704>)
 8011ad2:	9014      	str	r0, [sp, #80]	; 0x50
 8011ad4:	9115      	str	r1, [sp, #84]	; 0x54
 8011ad6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011ad8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8011ada:	4694      	mov	ip, r2
 8011adc:	9308      	str	r3, [sp, #32]
 8011ade:	9409      	str	r4, [sp, #36]	; 0x24
 8011ae0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ae2:	4463      	add	r3, ip
 8011ae4:	9318      	str	r3, [sp, #96]	; 0x60
 8011ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ae8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d15e      	bne.n	8011bac <_dtoa_r+0x4dc>
 8011aee:	2200      	movs	r2, #0
 8011af0:	4bb9      	ldr	r3, [pc, #740]	; (8011dd8 <_dtoa_r+0x708>)
 8011af2:	0030      	movs	r0, r6
 8011af4:	0039      	movs	r1, r7
 8011af6:	f7f0 f87b 	bl	8001bf0 <__aeabi_dsub>
 8011afa:	9a08      	ldr	r2, [sp, #32]
 8011afc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011afe:	0004      	movs	r4, r0
 8011b00:	000d      	movs	r5, r1
 8011b02:	f7ee fcbb 	bl	800047c <__aeabi_dcmpgt>
 8011b06:	2800      	cmp	r0, #0
 8011b08:	d000      	beq.n	8011b0c <_dtoa_r+0x43c>
 8011b0a:	e2b3      	b.n	8012074 <_dtoa_r+0x9a4>
 8011b0c:	48b3      	ldr	r0, [pc, #716]	; (8011ddc <_dtoa_r+0x70c>)
 8011b0e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011b10:	4684      	mov	ip, r0
 8011b12:	4461      	add	r1, ip
 8011b14:	000b      	movs	r3, r1
 8011b16:	0020      	movs	r0, r4
 8011b18:	0029      	movs	r1, r5
 8011b1a:	9a08      	ldr	r2, [sp, #32]
 8011b1c:	f7ee fc9a 	bl	8000454 <__aeabi_dcmplt>
 8011b20:	2800      	cmp	r0, #0
 8011b22:	d000      	beq.n	8011b26 <_dtoa_r+0x456>
 8011b24:	e2a3      	b.n	801206e <_dtoa_r+0x99e>
 8011b26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011b28:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8011b2a:	9308      	str	r3, [sp, #32]
 8011b2c:	9409      	str	r4, [sp, #36]	; 0x24
 8011b2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	da00      	bge.n	8011b36 <_dtoa_r+0x466>
 8011b34:	e179      	b.n	8011e2a <_dtoa_r+0x75a>
 8011b36:	9a03      	ldr	r2, [sp, #12]
 8011b38:	2a0e      	cmp	r2, #14
 8011b3a:	dd00      	ble.n	8011b3e <_dtoa_r+0x46e>
 8011b3c:	e175      	b.n	8011e2a <_dtoa_r+0x75a>
 8011b3e:	4ba0      	ldr	r3, [pc, #640]	; (8011dc0 <_dtoa_r+0x6f0>)
 8011b40:	00d2      	lsls	r2, r2, #3
 8011b42:	189b      	adds	r3, r3, r2
 8011b44:	681e      	ldr	r6, [r3, #0]
 8011b46:	685f      	ldr	r7, [r3, #4]
 8011b48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	db00      	blt.n	8011b50 <_dtoa_r+0x480>
 8011b4e:	e0e5      	b.n	8011d1c <_dtoa_r+0x64c>
 8011b50:	9b07      	ldr	r3, [sp, #28]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	dd00      	ble.n	8011b58 <_dtoa_r+0x488>
 8011b56:	e0e1      	b.n	8011d1c <_dtoa_r+0x64c>
 8011b58:	d000      	beq.n	8011b5c <_dtoa_r+0x48c>
 8011b5a:	e288      	b.n	801206e <_dtoa_r+0x99e>
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	0030      	movs	r0, r6
 8011b60:	0039      	movs	r1, r7
 8011b62:	4b9d      	ldr	r3, [pc, #628]	; (8011dd8 <_dtoa_r+0x708>)
 8011b64:	f7ef fd82 	bl	800166c <__aeabi_dmul>
 8011b68:	9a08      	ldr	r2, [sp, #32]
 8011b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b6c:	f7ee fc90 	bl	8000490 <__aeabi_dcmpge>
 8011b70:	9e07      	ldr	r6, [sp, #28]
 8011b72:	0037      	movs	r7, r6
 8011b74:	2800      	cmp	r0, #0
 8011b76:	d000      	beq.n	8011b7a <_dtoa_r+0x4aa>
 8011b78:	e25f      	b.n	801203a <_dtoa_r+0x96a>
 8011b7a:	9b06      	ldr	r3, [sp, #24]
 8011b7c:	9a06      	ldr	r2, [sp, #24]
 8011b7e:	3301      	adds	r3, #1
 8011b80:	9308      	str	r3, [sp, #32]
 8011b82:	2331      	movs	r3, #49	; 0x31
 8011b84:	7013      	strb	r3, [r2, #0]
 8011b86:	9b03      	ldr	r3, [sp, #12]
 8011b88:	3301      	adds	r3, #1
 8011b8a:	9303      	str	r3, [sp, #12]
 8011b8c:	e25a      	b.n	8012044 <_dtoa_r+0x974>
 8011b8e:	423d      	tst	r5, r7
 8011b90:	d005      	beq.n	8011b9e <_dtoa_r+0x4ce>
 8011b92:	6832      	ldr	r2, [r6, #0]
 8011b94:	6873      	ldr	r3, [r6, #4]
 8011b96:	f7ef fd69 	bl	800166c <__aeabi_dmul>
 8011b9a:	003b      	movs	r3, r7
 8011b9c:	3401      	adds	r4, #1
 8011b9e:	106d      	asrs	r5, r5, #1
 8011ba0:	3608      	adds	r6, #8
 8011ba2:	e75f      	b.n	8011a64 <_dtoa_r+0x394>
 8011ba4:	9b03      	ldr	r3, [sp, #12]
 8011ba6:	930e      	str	r3, [sp, #56]	; 0x38
 8011ba8:	9b07      	ldr	r3, [sp, #28]
 8011baa:	e783      	b.n	8011ab4 <_dtoa_r+0x3e4>
 8011bac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011bae:	4b84      	ldr	r3, [pc, #528]	; (8011dc0 <_dtoa_r+0x6f0>)
 8011bb0:	3a01      	subs	r2, #1
 8011bb2:	00d2      	lsls	r2, r2, #3
 8011bb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011bb6:	189b      	adds	r3, r3, r2
 8011bb8:	9c08      	ldr	r4, [sp, #32]
 8011bba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011bbc:	681a      	ldr	r2, [r3, #0]
 8011bbe:	685b      	ldr	r3, [r3, #4]
 8011bc0:	2900      	cmp	r1, #0
 8011bc2:	d051      	beq.n	8011c68 <_dtoa_r+0x598>
 8011bc4:	2000      	movs	r0, #0
 8011bc6:	4986      	ldr	r1, [pc, #536]	; (8011de0 <_dtoa_r+0x710>)
 8011bc8:	f7ef f956 	bl	8000e78 <__aeabi_ddiv>
 8011bcc:	0022      	movs	r2, r4
 8011bce:	002b      	movs	r3, r5
 8011bd0:	f7f0 f80e 	bl	8001bf0 <__aeabi_dsub>
 8011bd4:	9a06      	ldr	r2, [sp, #24]
 8011bd6:	0004      	movs	r4, r0
 8011bd8:	4694      	mov	ip, r2
 8011bda:	000d      	movs	r5, r1
 8011bdc:	9b06      	ldr	r3, [sp, #24]
 8011bde:	9314      	str	r3, [sp, #80]	; 0x50
 8011be0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011be2:	4463      	add	r3, ip
 8011be4:	9318      	str	r3, [sp, #96]	; 0x60
 8011be6:	0039      	movs	r1, r7
 8011be8:	0030      	movs	r0, r6
 8011bea:	f7f0 fba1 	bl	8002330 <__aeabi_d2iz>
 8011bee:	9012      	str	r0, [sp, #72]	; 0x48
 8011bf0:	f7f0 fbd4 	bl	800239c <__aeabi_i2d>
 8011bf4:	0002      	movs	r2, r0
 8011bf6:	000b      	movs	r3, r1
 8011bf8:	0030      	movs	r0, r6
 8011bfa:	0039      	movs	r1, r7
 8011bfc:	f7ef fff8 	bl	8001bf0 <__aeabi_dsub>
 8011c00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011c02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011c04:	3301      	adds	r3, #1
 8011c06:	9308      	str	r3, [sp, #32]
 8011c08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011c0a:	0006      	movs	r6, r0
 8011c0c:	3330      	adds	r3, #48	; 0x30
 8011c0e:	7013      	strb	r3, [r2, #0]
 8011c10:	0022      	movs	r2, r4
 8011c12:	002b      	movs	r3, r5
 8011c14:	000f      	movs	r7, r1
 8011c16:	f7ee fc1d 	bl	8000454 <__aeabi_dcmplt>
 8011c1a:	2800      	cmp	r0, #0
 8011c1c:	d174      	bne.n	8011d08 <_dtoa_r+0x638>
 8011c1e:	0032      	movs	r2, r6
 8011c20:	003b      	movs	r3, r7
 8011c22:	2000      	movs	r0, #0
 8011c24:	4968      	ldr	r1, [pc, #416]	; (8011dc8 <_dtoa_r+0x6f8>)
 8011c26:	f7ef ffe3 	bl	8001bf0 <__aeabi_dsub>
 8011c2a:	0022      	movs	r2, r4
 8011c2c:	002b      	movs	r3, r5
 8011c2e:	f7ee fc11 	bl	8000454 <__aeabi_dcmplt>
 8011c32:	2800      	cmp	r0, #0
 8011c34:	d000      	beq.n	8011c38 <_dtoa_r+0x568>
 8011c36:	e0d7      	b.n	8011de8 <_dtoa_r+0x718>
 8011c38:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011c3a:	9a08      	ldr	r2, [sp, #32]
 8011c3c:	4293      	cmp	r3, r2
 8011c3e:	d100      	bne.n	8011c42 <_dtoa_r+0x572>
 8011c40:	e771      	b.n	8011b26 <_dtoa_r+0x456>
 8011c42:	2200      	movs	r2, #0
 8011c44:	0020      	movs	r0, r4
 8011c46:	0029      	movs	r1, r5
 8011c48:	4b60      	ldr	r3, [pc, #384]	; (8011dcc <_dtoa_r+0x6fc>)
 8011c4a:	f7ef fd0f 	bl	800166c <__aeabi_dmul>
 8011c4e:	4b5f      	ldr	r3, [pc, #380]	; (8011dcc <_dtoa_r+0x6fc>)
 8011c50:	0004      	movs	r4, r0
 8011c52:	000d      	movs	r5, r1
 8011c54:	0030      	movs	r0, r6
 8011c56:	0039      	movs	r1, r7
 8011c58:	2200      	movs	r2, #0
 8011c5a:	f7ef fd07 	bl	800166c <__aeabi_dmul>
 8011c5e:	9b08      	ldr	r3, [sp, #32]
 8011c60:	0006      	movs	r6, r0
 8011c62:	000f      	movs	r7, r1
 8011c64:	9314      	str	r3, [sp, #80]	; 0x50
 8011c66:	e7be      	b.n	8011be6 <_dtoa_r+0x516>
 8011c68:	0020      	movs	r0, r4
 8011c6a:	0029      	movs	r1, r5
 8011c6c:	f7ef fcfe 	bl	800166c <__aeabi_dmul>
 8011c70:	9a06      	ldr	r2, [sp, #24]
 8011c72:	9b06      	ldr	r3, [sp, #24]
 8011c74:	4694      	mov	ip, r2
 8011c76:	9308      	str	r3, [sp, #32]
 8011c78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011c7a:	9014      	str	r0, [sp, #80]	; 0x50
 8011c7c:	9115      	str	r1, [sp, #84]	; 0x54
 8011c7e:	4463      	add	r3, ip
 8011c80:	9319      	str	r3, [sp, #100]	; 0x64
 8011c82:	0030      	movs	r0, r6
 8011c84:	0039      	movs	r1, r7
 8011c86:	f7f0 fb53 	bl	8002330 <__aeabi_d2iz>
 8011c8a:	9018      	str	r0, [sp, #96]	; 0x60
 8011c8c:	f7f0 fb86 	bl	800239c <__aeabi_i2d>
 8011c90:	0002      	movs	r2, r0
 8011c92:	000b      	movs	r3, r1
 8011c94:	0030      	movs	r0, r6
 8011c96:	0039      	movs	r1, r7
 8011c98:	f7ef ffaa 	bl	8001bf0 <__aeabi_dsub>
 8011c9c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8011c9e:	9b08      	ldr	r3, [sp, #32]
 8011ca0:	3630      	adds	r6, #48	; 0x30
 8011ca2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011ca4:	701e      	strb	r6, [r3, #0]
 8011ca6:	3301      	adds	r3, #1
 8011ca8:	0004      	movs	r4, r0
 8011caa:	000d      	movs	r5, r1
 8011cac:	9308      	str	r3, [sp, #32]
 8011cae:	4293      	cmp	r3, r2
 8011cb0:	d12d      	bne.n	8011d0e <_dtoa_r+0x63e>
 8011cb2:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011cb4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011cb6:	9a06      	ldr	r2, [sp, #24]
 8011cb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011cba:	4694      	mov	ip, r2
 8011cbc:	4463      	add	r3, ip
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	9308      	str	r3, [sp, #32]
 8011cc2:	4b47      	ldr	r3, [pc, #284]	; (8011de0 <_dtoa_r+0x710>)
 8011cc4:	f7ee fd78 	bl	80007b8 <__aeabi_dadd>
 8011cc8:	0002      	movs	r2, r0
 8011cca:	000b      	movs	r3, r1
 8011ccc:	0020      	movs	r0, r4
 8011cce:	0029      	movs	r1, r5
 8011cd0:	f7ee fbd4 	bl	800047c <__aeabi_dcmpgt>
 8011cd4:	2800      	cmp	r0, #0
 8011cd6:	d000      	beq.n	8011cda <_dtoa_r+0x60a>
 8011cd8:	e086      	b.n	8011de8 <_dtoa_r+0x718>
 8011cda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011cdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011cde:	2000      	movs	r0, #0
 8011ce0:	493f      	ldr	r1, [pc, #252]	; (8011de0 <_dtoa_r+0x710>)
 8011ce2:	f7ef ff85 	bl	8001bf0 <__aeabi_dsub>
 8011ce6:	0002      	movs	r2, r0
 8011ce8:	000b      	movs	r3, r1
 8011cea:	0020      	movs	r0, r4
 8011cec:	0029      	movs	r1, r5
 8011cee:	f7ee fbb1 	bl	8000454 <__aeabi_dcmplt>
 8011cf2:	2800      	cmp	r0, #0
 8011cf4:	d100      	bne.n	8011cf8 <_dtoa_r+0x628>
 8011cf6:	e716      	b.n	8011b26 <_dtoa_r+0x456>
 8011cf8:	9b08      	ldr	r3, [sp, #32]
 8011cfa:	001a      	movs	r2, r3
 8011cfc:	3a01      	subs	r2, #1
 8011cfe:	9208      	str	r2, [sp, #32]
 8011d00:	7812      	ldrb	r2, [r2, #0]
 8011d02:	2a30      	cmp	r2, #48	; 0x30
 8011d04:	d0f8      	beq.n	8011cf8 <_dtoa_r+0x628>
 8011d06:	9308      	str	r3, [sp, #32]
 8011d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d0a:	9303      	str	r3, [sp, #12]
 8011d0c:	e046      	b.n	8011d9c <_dtoa_r+0x6cc>
 8011d0e:	2200      	movs	r2, #0
 8011d10:	4b2e      	ldr	r3, [pc, #184]	; (8011dcc <_dtoa_r+0x6fc>)
 8011d12:	f7ef fcab 	bl	800166c <__aeabi_dmul>
 8011d16:	0006      	movs	r6, r0
 8011d18:	000f      	movs	r7, r1
 8011d1a:	e7b2      	b.n	8011c82 <_dtoa_r+0x5b2>
 8011d1c:	9b06      	ldr	r3, [sp, #24]
 8011d1e:	9a06      	ldr	r2, [sp, #24]
 8011d20:	930a      	str	r3, [sp, #40]	; 0x28
 8011d22:	9b07      	ldr	r3, [sp, #28]
 8011d24:	9c08      	ldr	r4, [sp, #32]
 8011d26:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011d28:	3b01      	subs	r3, #1
 8011d2a:	189b      	adds	r3, r3, r2
 8011d2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d2e:	0032      	movs	r2, r6
 8011d30:	003b      	movs	r3, r7
 8011d32:	0020      	movs	r0, r4
 8011d34:	0029      	movs	r1, r5
 8011d36:	f7ef f89f 	bl	8000e78 <__aeabi_ddiv>
 8011d3a:	f7f0 faf9 	bl	8002330 <__aeabi_d2iz>
 8011d3e:	9007      	str	r0, [sp, #28]
 8011d40:	f7f0 fb2c 	bl	800239c <__aeabi_i2d>
 8011d44:	0032      	movs	r2, r6
 8011d46:	003b      	movs	r3, r7
 8011d48:	f7ef fc90 	bl	800166c <__aeabi_dmul>
 8011d4c:	0002      	movs	r2, r0
 8011d4e:	000b      	movs	r3, r1
 8011d50:	0020      	movs	r0, r4
 8011d52:	0029      	movs	r1, r5
 8011d54:	f7ef ff4c 	bl	8001bf0 <__aeabi_dsub>
 8011d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d5a:	001a      	movs	r2, r3
 8011d5c:	3201      	adds	r2, #1
 8011d5e:	920a      	str	r2, [sp, #40]	; 0x28
 8011d60:	9208      	str	r2, [sp, #32]
 8011d62:	9a07      	ldr	r2, [sp, #28]
 8011d64:	3230      	adds	r2, #48	; 0x30
 8011d66:	701a      	strb	r2, [r3, #0]
 8011d68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	d14f      	bne.n	8011e0e <_dtoa_r+0x73e>
 8011d6e:	0002      	movs	r2, r0
 8011d70:	000b      	movs	r3, r1
 8011d72:	f7ee fd21 	bl	80007b8 <__aeabi_dadd>
 8011d76:	0032      	movs	r2, r6
 8011d78:	003b      	movs	r3, r7
 8011d7a:	0004      	movs	r4, r0
 8011d7c:	000d      	movs	r5, r1
 8011d7e:	f7ee fb7d 	bl	800047c <__aeabi_dcmpgt>
 8011d82:	2800      	cmp	r0, #0
 8011d84:	d12e      	bne.n	8011de4 <_dtoa_r+0x714>
 8011d86:	0032      	movs	r2, r6
 8011d88:	003b      	movs	r3, r7
 8011d8a:	0020      	movs	r0, r4
 8011d8c:	0029      	movs	r1, r5
 8011d8e:	f7ee fb5b 	bl	8000448 <__aeabi_dcmpeq>
 8011d92:	2800      	cmp	r0, #0
 8011d94:	d002      	beq.n	8011d9c <_dtoa_r+0x6cc>
 8011d96:	9b07      	ldr	r3, [sp, #28]
 8011d98:	07de      	lsls	r6, r3, #31
 8011d9a:	d423      	bmi.n	8011de4 <_dtoa_r+0x714>
 8011d9c:	9905      	ldr	r1, [sp, #20]
 8011d9e:	9804      	ldr	r0, [sp, #16]
 8011da0:	f7fc f8fe 	bl	800dfa0 <_Bfree>
 8011da4:	2300      	movs	r3, #0
 8011da6:	9a08      	ldr	r2, [sp, #32]
 8011da8:	7013      	strb	r3, [r2, #0]
 8011daa:	9b03      	ldr	r3, [sp, #12]
 8011dac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011dae:	3301      	adds	r3, #1
 8011db0:	6013      	str	r3, [r2, #0]
 8011db2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d100      	bne.n	8011dba <_dtoa_r+0x6ea>
 8011db8:	e4bd      	b.n	8011736 <_dtoa_r+0x66>
 8011dba:	9a08      	ldr	r2, [sp, #32]
 8011dbc:	601a      	str	r2, [r3, #0]
 8011dbe:	e4ba      	b.n	8011736 <_dtoa_r+0x66>
 8011dc0:	08015d38 	.word	0x08015d38
 8011dc4:	08015d10 	.word	0x08015d10
 8011dc8:	3ff00000 	.word	0x3ff00000
 8011dcc:	40240000 	.word	0x40240000
 8011dd0:	401c0000 	.word	0x401c0000
 8011dd4:	fcc00000 	.word	0xfcc00000
 8011dd8:	40140000 	.word	0x40140000
 8011ddc:	7cc00000 	.word	0x7cc00000
 8011de0:	3fe00000 	.word	0x3fe00000
 8011de4:	9b03      	ldr	r3, [sp, #12]
 8011de6:	930e      	str	r3, [sp, #56]	; 0x38
 8011de8:	9b08      	ldr	r3, [sp, #32]
 8011dea:	9308      	str	r3, [sp, #32]
 8011dec:	3b01      	subs	r3, #1
 8011dee:	781a      	ldrb	r2, [r3, #0]
 8011df0:	2a39      	cmp	r2, #57	; 0x39
 8011df2:	d108      	bne.n	8011e06 <_dtoa_r+0x736>
 8011df4:	9a06      	ldr	r2, [sp, #24]
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d1f7      	bne.n	8011dea <_dtoa_r+0x71a>
 8011dfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011dfc:	9906      	ldr	r1, [sp, #24]
 8011dfe:	3201      	adds	r2, #1
 8011e00:	920e      	str	r2, [sp, #56]	; 0x38
 8011e02:	2230      	movs	r2, #48	; 0x30
 8011e04:	700a      	strb	r2, [r1, #0]
 8011e06:	781a      	ldrb	r2, [r3, #0]
 8011e08:	3201      	adds	r2, #1
 8011e0a:	701a      	strb	r2, [r3, #0]
 8011e0c:	e77c      	b.n	8011d08 <_dtoa_r+0x638>
 8011e0e:	2200      	movs	r2, #0
 8011e10:	4ba9      	ldr	r3, [pc, #676]	; (80120b8 <_dtoa_r+0x9e8>)
 8011e12:	f7ef fc2b 	bl	800166c <__aeabi_dmul>
 8011e16:	2200      	movs	r2, #0
 8011e18:	2300      	movs	r3, #0
 8011e1a:	0004      	movs	r4, r0
 8011e1c:	000d      	movs	r5, r1
 8011e1e:	f7ee fb13 	bl	8000448 <__aeabi_dcmpeq>
 8011e22:	2800      	cmp	r0, #0
 8011e24:	d100      	bne.n	8011e28 <_dtoa_r+0x758>
 8011e26:	e782      	b.n	8011d2e <_dtoa_r+0x65e>
 8011e28:	e7b8      	b.n	8011d9c <_dtoa_r+0x6cc>
 8011e2a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8011e2c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011e2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011e30:	2f00      	cmp	r7, #0
 8011e32:	d012      	beq.n	8011e5a <_dtoa_r+0x78a>
 8011e34:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011e36:	2a01      	cmp	r2, #1
 8011e38:	dc6e      	bgt.n	8011f18 <_dtoa_r+0x848>
 8011e3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011e3c:	2a00      	cmp	r2, #0
 8011e3e:	d065      	beq.n	8011f0c <_dtoa_r+0x83c>
 8011e40:	4a9e      	ldr	r2, [pc, #632]	; (80120bc <_dtoa_r+0x9ec>)
 8011e42:	189b      	adds	r3, r3, r2
 8011e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e46:	2101      	movs	r1, #1
 8011e48:	18d2      	adds	r2, r2, r3
 8011e4a:	920a      	str	r2, [sp, #40]	; 0x28
 8011e4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e4e:	9804      	ldr	r0, [sp, #16]
 8011e50:	18d3      	adds	r3, r2, r3
 8011e52:	930c      	str	r3, [sp, #48]	; 0x30
 8011e54:	f7fc f986 	bl	800e164 <__i2b>
 8011e58:	0007      	movs	r7, r0
 8011e5a:	2c00      	cmp	r4, #0
 8011e5c:	d00e      	beq.n	8011e7c <_dtoa_r+0x7ac>
 8011e5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	dd0b      	ble.n	8011e7c <_dtoa_r+0x7ac>
 8011e64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e66:	0023      	movs	r3, r4
 8011e68:	4294      	cmp	r4, r2
 8011e6a:	dd00      	ble.n	8011e6e <_dtoa_r+0x79e>
 8011e6c:	0013      	movs	r3, r2
 8011e6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e70:	1ae4      	subs	r4, r4, r3
 8011e72:	1ad2      	subs	r2, r2, r3
 8011e74:	920a      	str	r2, [sp, #40]	; 0x28
 8011e76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e78:	1ad3      	subs	r3, r2, r3
 8011e7a:	930c      	str	r3, [sp, #48]	; 0x30
 8011e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d01e      	beq.n	8011ec0 <_dtoa_r+0x7f0>
 8011e82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d05c      	beq.n	8011f42 <_dtoa_r+0x872>
 8011e88:	2d00      	cmp	r5, #0
 8011e8a:	dd10      	ble.n	8011eae <_dtoa_r+0x7de>
 8011e8c:	0039      	movs	r1, r7
 8011e8e:	002a      	movs	r2, r5
 8011e90:	9804      	ldr	r0, [sp, #16]
 8011e92:	f7fc fa2f 	bl	800e2f4 <__pow5mult>
 8011e96:	9a05      	ldr	r2, [sp, #20]
 8011e98:	0001      	movs	r1, r0
 8011e9a:	0007      	movs	r7, r0
 8011e9c:	9804      	ldr	r0, [sp, #16]
 8011e9e:	f7fc f979 	bl	800e194 <__multiply>
 8011ea2:	0006      	movs	r6, r0
 8011ea4:	9905      	ldr	r1, [sp, #20]
 8011ea6:	9804      	ldr	r0, [sp, #16]
 8011ea8:	f7fc f87a 	bl	800dfa0 <_Bfree>
 8011eac:	9605      	str	r6, [sp, #20]
 8011eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011eb0:	1b5a      	subs	r2, r3, r5
 8011eb2:	42ab      	cmp	r3, r5
 8011eb4:	d004      	beq.n	8011ec0 <_dtoa_r+0x7f0>
 8011eb6:	9905      	ldr	r1, [sp, #20]
 8011eb8:	9804      	ldr	r0, [sp, #16]
 8011eba:	f7fc fa1b 	bl	800e2f4 <__pow5mult>
 8011ebe:	9005      	str	r0, [sp, #20]
 8011ec0:	2101      	movs	r1, #1
 8011ec2:	9804      	ldr	r0, [sp, #16]
 8011ec4:	f7fc f94e 	bl	800e164 <__i2b>
 8011ec8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011eca:	0006      	movs	r6, r0
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	dd3a      	ble.n	8011f46 <_dtoa_r+0x876>
 8011ed0:	001a      	movs	r2, r3
 8011ed2:	0001      	movs	r1, r0
 8011ed4:	9804      	ldr	r0, [sp, #16]
 8011ed6:	f7fc fa0d 	bl	800e2f4 <__pow5mult>
 8011eda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011edc:	0006      	movs	r6, r0
 8011ede:	2500      	movs	r5, #0
 8011ee0:	2b01      	cmp	r3, #1
 8011ee2:	dc38      	bgt.n	8011f56 <_dtoa_r+0x886>
 8011ee4:	2500      	movs	r5, #0
 8011ee6:	9b08      	ldr	r3, [sp, #32]
 8011ee8:	42ab      	cmp	r3, r5
 8011eea:	d130      	bne.n	8011f4e <_dtoa_r+0x87e>
 8011eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eee:	031b      	lsls	r3, r3, #12
 8011ef0:	42ab      	cmp	r3, r5
 8011ef2:	d12c      	bne.n	8011f4e <_dtoa_r+0x87e>
 8011ef4:	4b72      	ldr	r3, [pc, #456]	; (80120c0 <_dtoa_r+0x9f0>)
 8011ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ef8:	4213      	tst	r3, r2
 8011efa:	d028      	beq.n	8011f4e <_dtoa_r+0x87e>
 8011efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011efe:	3501      	adds	r5, #1
 8011f00:	3301      	adds	r3, #1
 8011f02:	930a      	str	r3, [sp, #40]	; 0x28
 8011f04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f06:	3301      	adds	r3, #1
 8011f08:	930c      	str	r3, [sp, #48]	; 0x30
 8011f0a:	e020      	b.n	8011f4e <_dtoa_r+0x87e>
 8011f0c:	2336      	movs	r3, #54	; 0x36
 8011f0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011f10:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011f12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011f14:	1a9b      	subs	r3, r3, r2
 8011f16:	e795      	b.n	8011e44 <_dtoa_r+0x774>
 8011f18:	9b07      	ldr	r3, [sp, #28]
 8011f1a:	1e5d      	subs	r5, r3, #1
 8011f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f1e:	42ab      	cmp	r3, r5
 8011f20:	db07      	blt.n	8011f32 <_dtoa_r+0x862>
 8011f22:	1b5d      	subs	r5, r3, r5
 8011f24:	9b07      	ldr	r3, [sp, #28]
 8011f26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	da8b      	bge.n	8011e44 <_dtoa_r+0x774>
 8011f2c:	1ae4      	subs	r4, r4, r3
 8011f2e:	2300      	movs	r3, #0
 8011f30:	e788      	b.n	8011e44 <_dtoa_r+0x774>
 8011f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011f36:	1aeb      	subs	r3, r5, r3
 8011f38:	18d3      	adds	r3, r2, r3
 8011f3a:	950d      	str	r5, [sp, #52]	; 0x34
 8011f3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8011f3e:	2500      	movs	r5, #0
 8011f40:	e7f0      	b.n	8011f24 <_dtoa_r+0x854>
 8011f42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011f44:	e7b7      	b.n	8011eb6 <_dtoa_r+0x7e6>
 8011f46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011f48:	2500      	movs	r5, #0
 8011f4a:	2b01      	cmp	r3, #1
 8011f4c:	ddca      	ble.n	8011ee4 <_dtoa_r+0x814>
 8011f4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011f50:	2001      	movs	r0, #1
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d008      	beq.n	8011f68 <_dtoa_r+0x898>
 8011f56:	6933      	ldr	r3, [r6, #16]
 8011f58:	3303      	adds	r3, #3
 8011f5a:	009b      	lsls	r3, r3, #2
 8011f5c:	18f3      	adds	r3, r6, r3
 8011f5e:	6858      	ldr	r0, [r3, #4]
 8011f60:	f7fc f8b8 	bl	800e0d4 <__hi0bits>
 8011f64:	2320      	movs	r3, #32
 8011f66:	1a18      	subs	r0, r3, r0
 8011f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f6a:	1818      	adds	r0, r3, r0
 8011f6c:	0002      	movs	r2, r0
 8011f6e:	231f      	movs	r3, #31
 8011f70:	401a      	ands	r2, r3
 8011f72:	4218      	tst	r0, r3
 8011f74:	d047      	beq.n	8012006 <_dtoa_r+0x936>
 8011f76:	3301      	adds	r3, #1
 8011f78:	1a9b      	subs	r3, r3, r2
 8011f7a:	2b04      	cmp	r3, #4
 8011f7c:	dd3f      	ble.n	8011ffe <_dtoa_r+0x92e>
 8011f7e:	231c      	movs	r3, #28
 8011f80:	1a9b      	subs	r3, r3, r2
 8011f82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f84:	18e4      	adds	r4, r4, r3
 8011f86:	18d2      	adds	r2, r2, r3
 8011f88:	920a      	str	r2, [sp, #40]	; 0x28
 8011f8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011f8c:	18d3      	adds	r3, r2, r3
 8011f8e:	930c      	str	r3, [sp, #48]	; 0x30
 8011f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	dd05      	ble.n	8011fa2 <_dtoa_r+0x8d2>
 8011f96:	001a      	movs	r2, r3
 8011f98:	9905      	ldr	r1, [sp, #20]
 8011f9a:	9804      	ldr	r0, [sp, #16]
 8011f9c:	f7fc f9ec 	bl	800e378 <__lshift>
 8011fa0:	9005      	str	r0, [sp, #20]
 8011fa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	dd05      	ble.n	8011fb4 <_dtoa_r+0x8e4>
 8011fa8:	0031      	movs	r1, r6
 8011faa:	001a      	movs	r2, r3
 8011fac:	9804      	ldr	r0, [sp, #16]
 8011fae:	f7fc f9e3 	bl	800e378 <__lshift>
 8011fb2:	0006      	movs	r6, r0
 8011fb4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d027      	beq.n	801200a <_dtoa_r+0x93a>
 8011fba:	0031      	movs	r1, r6
 8011fbc:	9805      	ldr	r0, [sp, #20]
 8011fbe:	f7fc fa49 	bl	800e454 <__mcmp>
 8011fc2:	2800      	cmp	r0, #0
 8011fc4:	da21      	bge.n	801200a <_dtoa_r+0x93a>
 8011fc6:	9b03      	ldr	r3, [sp, #12]
 8011fc8:	220a      	movs	r2, #10
 8011fca:	3b01      	subs	r3, #1
 8011fcc:	9303      	str	r3, [sp, #12]
 8011fce:	9905      	ldr	r1, [sp, #20]
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	9804      	ldr	r0, [sp, #16]
 8011fd4:	f7fb ffee 	bl	800dfb4 <__multadd>
 8011fd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011fda:	9005      	str	r0, [sp, #20]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d100      	bne.n	8011fe2 <_dtoa_r+0x912>
 8011fe0:	e15d      	b.n	801229e <_dtoa_r+0xbce>
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	0039      	movs	r1, r7
 8011fe6:	220a      	movs	r2, #10
 8011fe8:	9804      	ldr	r0, [sp, #16]
 8011fea:	f7fb ffe3 	bl	800dfb4 <__multadd>
 8011fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ff0:	0007      	movs	r7, r0
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	dc49      	bgt.n	801208a <_dtoa_r+0x9ba>
 8011ff6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011ff8:	2b02      	cmp	r3, #2
 8011ffa:	dc0e      	bgt.n	801201a <_dtoa_r+0x94a>
 8011ffc:	e045      	b.n	801208a <_dtoa_r+0x9ba>
 8011ffe:	2b04      	cmp	r3, #4
 8012000:	d0c6      	beq.n	8011f90 <_dtoa_r+0x8c0>
 8012002:	331c      	adds	r3, #28
 8012004:	e7bd      	b.n	8011f82 <_dtoa_r+0x8b2>
 8012006:	0013      	movs	r3, r2
 8012008:	e7fb      	b.n	8012002 <_dtoa_r+0x932>
 801200a:	9b07      	ldr	r3, [sp, #28]
 801200c:	2b00      	cmp	r3, #0
 801200e:	dc36      	bgt.n	801207e <_dtoa_r+0x9ae>
 8012010:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012012:	2b02      	cmp	r3, #2
 8012014:	dd33      	ble.n	801207e <_dtoa_r+0x9ae>
 8012016:	9b07      	ldr	r3, [sp, #28]
 8012018:	930b      	str	r3, [sp, #44]	; 0x2c
 801201a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801201c:	2b00      	cmp	r3, #0
 801201e:	d10c      	bne.n	801203a <_dtoa_r+0x96a>
 8012020:	0031      	movs	r1, r6
 8012022:	2205      	movs	r2, #5
 8012024:	9804      	ldr	r0, [sp, #16]
 8012026:	f7fb ffc5 	bl	800dfb4 <__multadd>
 801202a:	0006      	movs	r6, r0
 801202c:	0001      	movs	r1, r0
 801202e:	9805      	ldr	r0, [sp, #20]
 8012030:	f7fc fa10 	bl	800e454 <__mcmp>
 8012034:	2800      	cmp	r0, #0
 8012036:	dd00      	ble.n	801203a <_dtoa_r+0x96a>
 8012038:	e59f      	b.n	8011b7a <_dtoa_r+0x4aa>
 801203a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801203c:	43db      	mvns	r3, r3
 801203e:	9303      	str	r3, [sp, #12]
 8012040:	9b06      	ldr	r3, [sp, #24]
 8012042:	9308      	str	r3, [sp, #32]
 8012044:	2500      	movs	r5, #0
 8012046:	0031      	movs	r1, r6
 8012048:	9804      	ldr	r0, [sp, #16]
 801204a:	f7fb ffa9 	bl	800dfa0 <_Bfree>
 801204e:	2f00      	cmp	r7, #0
 8012050:	d100      	bne.n	8012054 <_dtoa_r+0x984>
 8012052:	e6a3      	b.n	8011d9c <_dtoa_r+0x6cc>
 8012054:	2d00      	cmp	r5, #0
 8012056:	d005      	beq.n	8012064 <_dtoa_r+0x994>
 8012058:	42bd      	cmp	r5, r7
 801205a:	d003      	beq.n	8012064 <_dtoa_r+0x994>
 801205c:	0029      	movs	r1, r5
 801205e:	9804      	ldr	r0, [sp, #16]
 8012060:	f7fb ff9e 	bl	800dfa0 <_Bfree>
 8012064:	0039      	movs	r1, r7
 8012066:	9804      	ldr	r0, [sp, #16]
 8012068:	f7fb ff9a 	bl	800dfa0 <_Bfree>
 801206c:	e696      	b.n	8011d9c <_dtoa_r+0x6cc>
 801206e:	2600      	movs	r6, #0
 8012070:	0037      	movs	r7, r6
 8012072:	e7e2      	b.n	801203a <_dtoa_r+0x96a>
 8012074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012076:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8012078:	9303      	str	r3, [sp, #12]
 801207a:	0037      	movs	r7, r6
 801207c:	e57d      	b.n	8011b7a <_dtoa_r+0x4aa>
 801207e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012080:	2b00      	cmp	r3, #0
 8012082:	d100      	bne.n	8012086 <_dtoa_r+0x9b6>
 8012084:	e0c3      	b.n	801220e <_dtoa_r+0xb3e>
 8012086:	9b07      	ldr	r3, [sp, #28]
 8012088:	930b      	str	r3, [sp, #44]	; 0x2c
 801208a:	2c00      	cmp	r4, #0
 801208c:	dd05      	ble.n	801209a <_dtoa_r+0x9ca>
 801208e:	0039      	movs	r1, r7
 8012090:	0022      	movs	r2, r4
 8012092:	9804      	ldr	r0, [sp, #16]
 8012094:	f7fc f970 	bl	800e378 <__lshift>
 8012098:	0007      	movs	r7, r0
 801209a:	0038      	movs	r0, r7
 801209c:	2d00      	cmp	r5, #0
 801209e:	d024      	beq.n	80120ea <_dtoa_r+0xa1a>
 80120a0:	6879      	ldr	r1, [r7, #4]
 80120a2:	9804      	ldr	r0, [sp, #16]
 80120a4:	f7fb ff54 	bl	800df50 <_Balloc>
 80120a8:	1e04      	subs	r4, r0, #0
 80120aa:	d111      	bne.n	80120d0 <_dtoa_r+0xa00>
 80120ac:	0022      	movs	r2, r4
 80120ae:	4b05      	ldr	r3, [pc, #20]	; (80120c4 <_dtoa_r+0x9f4>)
 80120b0:	4805      	ldr	r0, [pc, #20]	; (80120c8 <_dtoa_r+0x9f8>)
 80120b2:	4906      	ldr	r1, [pc, #24]	; (80120cc <_dtoa_r+0x9fc>)
 80120b4:	e43c      	b.n	8011930 <_dtoa_r+0x260>
 80120b6:	46c0      	nop			; (mov r8, r8)
 80120b8:	40240000 	.word	0x40240000
 80120bc:	00000433 	.word	0x00000433
 80120c0:	7ff00000 	.word	0x7ff00000
 80120c4:	08015c41 	.word	0x08015c41
 80120c8:	08015ed1 	.word	0x08015ed1
 80120cc:	000002ef 	.word	0x000002ef
 80120d0:	0039      	movs	r1, r7
 80120d2:	693a      	ldr	r2, [r7, #16]
 80120d4:	310c      	adds	r1, #12
 80120d6:	3202      	adds	r2, #2
 80120d8:	0092      	lsls	r2, r2, #2
 80120da:	300c      	adds	r0, #12
 80120dc:	f7fb fa9d 	bl	800d61a <memcpy>
 80120e0:	2201      	movs	r2, #1
 80120e2:	0021      	movs	r1, r4
 80120e4:	9804      	ldr	r0, [sp, #16]
 80120e6:	f7fc f947 	bl	800e378 <__lshift>
 80120ea:	9b06      	ldr	r3, [sp, #24]
 80120ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80120ee:	9307      	str	r3, [sp, #28]
 80120f0:	3b01      	subs	r3, #1
 80120f2:	189b      	adds	r3, r3, r2
 80120f4:	2201      	movs	r2, #1
 80120f6:	003d      	movs	r5, r7
 80120f8:	0007      	movs	r7, r0
 80120fa:	930e      	str	r3, [sp, #56]	; 0x38
 80120fc:	9b08      	ldr	r3, [sp, #32]
 80120fe:	4013      	ands	r3, r2
 8012100:	930d      	str	r3, [sp, #52]	; 0x34
 8012102:	0031      	movs	r1, r6
 8012104:	9805      	ldr	r0, [sp, #20]
 8012106:	f7ff fa53 	bl	80115b0 <quorem>
 801210a:	0029      	movs	r1, r5
 801210c:	0004      	movs	r4, r0
 801210e:	900b      	str	r0, [sp, #44]	; 0x2c
 8012110:	9805      	ldr	r0, [sp, #20]
 8012112:	f7fc f99f 	bl	800e454 <__mcmp>
 8012116:	003a      	movs	r2, r7
 8012118:	900c      	str	r0, [sp, #48]	; 0x30
 801211a:	0031      	movs	r1, r6
 801211c:	9804      	ldr	r0, [sp, #16]
 801211e:	f7fc f9b5 	bl	800e48c <__mdiff>
 8012122:	2201      	movs	r2, #1
 8012124:	68c3      	ldr	r3, [r0, #12]
 8012126:	3430      	adds	r4, #48	; 0x30
 8012128:	9008      	str	r0, [sp, #32]
 801212a:	920a      	str	r2, [sp, #40]	; 0x28
 801212c:	2b00      	cmp	r3, #0
 801212e:	d104      	bne.n	801213a <_dtoa_r+0xa6a>
 8012130:	0001      	movs	r1, r0
 8012132:	9805      	ldr	r0, [sp, #20]
 8012134:	f7fc f98e 	bl	800e454 <__mcmp>
 8012138:	900a      	str	r0, [sp, #40]	; 0x28
 801213a:	9908      	ldr	r1, [sp, #32]
 801213c:	9804      	ldr	r0, [sp, #16]
 801213e:	f7fb ff2f 	bl	800dfa0 <_Bfree>
 8012142:	9b07      	ldr	r3, [sp, #28]
 8012144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012146:	3301      	adds	r3, #1
 8012148:	9308      	str	r3, [sp, #32]
 801214a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801214c:	4313      	orrs	r3, r2
 801214e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012150:	4313      	orrs	r3, r2
 8012152:	d109      	bne.n	8012168 <_dtoa_r+0xa98>
 8012154:	2c39      	cmp	r4, #57	; 0x39
 8012156:	d022      	beq.n	801219e <_dtoa_r+0xace>
 8012158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801215a:	2b00      	cmp	r3, #0
 801215c:	dd01      	ble.n	8012162 <_dtoa_r+0xa92>
 801215e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012160:	3431      	adds	r4, #49	; 0x31
 8012162:	9b07      	ldr	r3, [sp, #28]
 8012164:	701c      	strb	r4, [r3, #0]
 8012166:	e76e      	b.n	8012046 <_dtoa_r+0x976>
 8012168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801216a:	2b00      	cmp	r3, #0
 801216c:	db04      	blt.n	8012178 <_dtoa_r+0xaa8>
 801216e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012170:	4313      	orrs	r3, r2
 8012172:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012174:	4313      	orrs	r3, r2
 8012176:	d11e      	bne.n	80121b6 <_dtoa_r+0xae6>
 8012178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801217a:	2b00      	cmp	r3, #0
 801217c:	ddf1      	ble.n	8012162 <_dtoa_r+0xa92>
 801217e:	9905      	ldr	r1, [sp, #20]
 8012180:	2201      	movs	r2, #1
 8012182:	9804      	ldr	r0, [sp, #16]
 8012184:	f7fc f8f8 	bl	800e378 <__lshift>
 8012188:	0031      	movs	r1, r6
 801218a:	9005      	str	r0, [sp, #20]
 801218c:	f7fc f962 	bl	800e454 <__mcmp>
 8012190:	2800      	cmp	r0, #0
 8012192:	dc02      	bgt.n	801219a <_dtoa_r+0xaca>
 8012194:	d1e5      	bne.n	8012162 <_dtoa_r+0xa92>
 8012196:	07e3      	lsls	r3, r4, #31
 8012198:	d5e3      	bpl.n	8012162 <_dtoa_r+0xa92>
 801219a:	2c39      	cmp	r4, #57	; 0x39
 801219c:	d1df      	bne.n	801215e <_dtoa_r+0xa8e>
 801219e:	2339      	movs	r3, #57	; 0x39
 80121a0:	9a07      	ldr	r2, [sp, #28]
 80121a2:	7013      	strb	r3, [r2, #0]
 80121a4:	9b08      	ldr	r3, [sp, #32]
 80121a6:	9308      	str	r3, [sp, #32]
 80121a8:	3b01      	subs	r3, #1
 80121aa:	781a      	ldrb	r2, [r3, #0]
 80121ac:	2a39      	cmp	r2, #57	; 0x39
 80121ae:	d063      	beq.n	8012278 <_dtoa_r+0xba8>
 80121b0:	3201      	adds	r2, #1
 80121b2:	701a      	strb	r2, [r3, #0]
 80121b4:	e747      	b.n	8012046 <_dtoa_r+0x976>
 80121b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	dd03      	ble.n	80121c4 <_dtoa_r+0xaf4>
 80121bc:	2c39      	cmp	r4, #57	; 0x39
 80121be:	d0ee      	beq.n	801219e <_dtoa_r+0xace>
 80121c0:	3401      	adds	r4, #1
 80121c2:	e7ce      	b.n	8012162 <_dtoa_r+0xa92>
 80121c4:	9b07      	ldr	r3, [sp, #28]
 80121c6:	9a07      	ldr	r2, [sp, #28]
 80121c8:	701c      	strb	r4, [r3, #0]
 80121ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80121cc:	4293      	cmp	r3, r2
 80121ce:	d03e      	beq.n	801224e <_dtoa_r+0xb7e>
 80121d0:	2300      	movs	r3, #0
 80121d2:	220a      	movs	r2, #10
 80121d4:	9905      	ldr	r1, [sp, #20]
 80121d6:	9804      	ldr	r0, [sp, #16]
 80121d8:	f7fb feec 	bl	800dfb4 <__multadd>
 80121dc:	2300      	movs	r3, #0
 80121de:	9005      	str	r0, [sp, #20]
 80121e0:	220a      	movs	r2, #10
 80121e2:	0029      	movs	r1, r5
 80121e4:	9804      	ldr	r0, [sp, #16]
 80121e6:	42bd      	cmp	r5, r7
 80121e8:	d106      	bne.n	80121f8 <_dtoa_r+0xb28>
 80121ea:	f7fb fee3 	bl	800dfb4 <__multadd>
 80121ee:	0005      	movs	r5, r0
 80121f0:	0007      	movs	r7, r0
 80121f2:	9b08      	ldr	r3, [sp, #32]
 80121f4:	9307      	str	r3, [sp, #28]
 80121f6:	e784      	b.n	8012102 <_dtoa_r+0xa32>
 80121f8:	f7fb fedc 	bl	800dfb4 <__multadd>
 80121fc:	0039      	movs	r1, r7
 80121fe:	0005      	movs	r5, r0
 8012200:	2300      	movs	r3, #0
 8012202:	220a      	movs	r2, #10
 8012204:	9804      	ldr	r0, [sp, #16]
 8012206:	f7fb fed5 	bl	800dfb4 <__multadd>
 801220a:	0007      	movs	r7, r0
 801220c:	e7f1      	b.n	80121f2 <_dtoa_r+0xb22>
 801220e:	9b07      	ldr	r3, [sp, #28]
 8012210:	930b      	str	r3, [sp, #44]	; 0x2c
 8012212:	2500      	movs	r5, #0
 8012214:	0031      	movs	r1, r6
 8012216:	9805      	ldr	r0, [sp, #20]
 8012218:	f7ff f9ca 	bl	80115b0 <quorem>
 801221c:	9b06      	ldr	r3, [sp, #24]
 801221e:	3030      	adds	r0, #48	; 0x30
 8012220:	5558      	strb	r0, [r3, r5]
 8012222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012224:	3501      	adds	r5, #1
 8012226:	0004      	movs	r4, r0
 8012228:	42ab      	cmp	r3, r5
 801222a:	dd07      	ble.n	801223c <_dtoa_r+0xb6c>
 801222c:	2300      	movs	r3, #0
 801222e:	220a      	movs	r2, #10
 8012230:	9905      	ldr	r1, [sp, #20]
 8012232:	9804      	ldr	r0, [sp, #16]
 8012234:	f7fb febe 	bl	800dfb4 <__multadd>
 8012238:	9005      	str	r0, [sp, #20]
 801223a:	e7eb      	b.n	8012214 <_dtoa_r+0xb44>
 801223c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801223e:	2301      	movs	r3, #1
 8012240:	2a00      	cmp	r2, #0
 8012242:	dd00      	ble.n	8012246 <_dtoa_r+0xb76>
 8012244:	0013      	movs	r3, r2
 8012246:	2500      	movs	r5, #0
 8012248:	9a06      	ldr	r2, [sp, #24]
 801224a:	18d3      	adds	r3, r2, r3
 801224c:	9308      	str	r3, [sp, #32]
 801224e:	9905      	ldr	r1, [sp, #20]
 8012250:	2201      	movs	r2, #1
 8012252:	9804      	ldr	r0, [sp, #16]
 8012254:	f7fc f890 	bl	800e378 <__lshift>
 8012258:	0031      	movs	r1, r6
 801225a:	9005      	str	r0, [sp, #20]
 801225c:	f7fc f8fa 	bl	800e454 <__mcmp>
 8012260:	2800      	cmp	r0, #0
 8012262:	dc9f      	bgt.n	80121a4 <_dtoa_r+0xad4>
 8012264:	d101      	bne.n	801226a <_dtoa_r+0xb9a>
 8012266:	07e4      	lsls	r4, r4, #31
 8012268:	d49c      	bmi.n	80121a4 <_dtoa_r+0xad4>
 801226a:	9b08      	ldr	r3, [sp, #32]
 801226c:	9308      	str	r3, [sp, #32]
 801226e:	3b01      	subs	r3, #1
 8012270:	781a      	ldrb	r2, [r3, #0]
 8012272:	2a30      	cmp	r2, #48	; 0x30
 8012274:	d0fa      	beq.n	801226c <_dtoa_r+0xb9c>
 8012276:	e6e6      	b.n	8012046 <_dtoa_r+0x976>
 8012278:	9a06      	ldr	r2, [sp, #24]
 801227a:	429a      	cmp	r2, r3
 801227c:	d193      	bne.n	80121a6 <_dtoa_r+0xad6>
 801227e:	9b03      	ldr	r3, [sp, #12]
 8012280:	3301      	adds	r3, #1
 8012282:	9303      	str	r3, [sp, #12]
 8012284:	2331      	movs	r3, #49	; 0x31
 8012286:	7013      	strb	r3, [r2, #0]
 8012288:	e6dd      	b.n	8012046 <_dtoa_r+0x976>
 801228a:	4b09      	ldr	r3, [pc, #36]	; (80122b0 <_dtoa_r+0xbe0>)
 801228c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801228e:	9306      	str	r3, [sp, #24]
 8012290:	4b08      	ldr	r3, [pc, #32]	; (80122b4 <_dtoa_r+0xbe4>)
 8012292:	2a00      	cmp	r2, #0
 8012294:	d001      	beq.n	801229a <_dtoa_r+0xbca>
 8012296:	f7ff fa4c 	bl	8011732 <_dtoa_r+0x62>
 801229a:	f7ff fa4c 	bl	8011736 <_dtoa_r+0x66>
 801229e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	dcb6      	bgt.n	8012212 <_dtoa_r+0xb42>
 80122a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80122a6:	2b02      	cmp	r3, #2
 80122a8:	dd00      	ble.n	80122ac <_dtoa_r+0xbdc>
 80122aa:	e6b6      	b.n	801201a <_dtoa_r+0x94a>
 80122ac:	e7b1      	b.n	8012212 <_dtoa_r+0xb42>
 80122ae:	46c0      	nop			; (mov r8, r8)
 80122b0:	08015ec4 	.word	0x08015ec4
 80122b4:	08015ecc 	.word	0x08015ecc

080122b8 <realloc>:
 80122b8:	b510      	push	{r4, lr}
 80122ba:	4b03      	ldr	r3, [pc, #12]	; (80122c8 <realloc+0x10>)
 80122bc:	000a      	movs	r2, r1
 80122be:	0001      	movs	r1, r0
 80122c0:	6818      	ldr	r0, [r3, #0]
 80122c2:	f000 f803 	bl	80122cc <_realloc_r>
 80122c6:	bd10      	pop	{r4, pc}
 80122c8:	200006d0 	.word	0x200006d0

080122cc <_realloc_r>:
 80122cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122ce:	b087      	sub	sp, #28
 80122d0:	1e0c      	subs	r4, r1, #0
 80122d2:	9001      	str	r0, [sp, #4]
 80122d4:	9205      	str	r2, [sp, #20]
 80122d6:	d106      	bne.n	80122e6 <_realloc_r+0x1a>
 80122d8:	0011      	movs	r1, r2
 80122da:	f7f9 fd5f 	bl	800bd9c <_malloc_r>
 80122de:	0007      	movs	r7, r0
 80122e0:	0038      	movs	r0, r7
 80122e2:	b007      	add	sp, #28
 80122e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122e6:	9801      	ldr	r0, [sp, #4]
 80122e8:	f7f9 ff6c 	bl	800c1c4 <__malloc_lock>
 80122ec:	0023      	movs	r3, r4
 80122ee:	3b08      	subs	r3, #8
 80122f0:	685f      	ldr	r7, [r3, #4]
 80122f2:	9304      	str	r3, [sp, #16]
 80122f4:	9b05      	ldr	r3, [sp, #20]
 80122f6:	330b      	adds	r3, #11
 80122f8:	2b16      	cmp	r3, #22
 80122fa:	d908      	bls.n	801230e <_realloc_r+0x42>
 80122fc:	2207      	movs	r2, #7
 80122fe:	4393      	bics	r3, r2
 8012300:	9300      	str	r3, [sp, #0]
 8012302:	d506      	bpl.n	8012312 <_realloc_r+0x46>
 8012304:	230c      	movs	r3, #12
 8012306:	9a01      	ldr	r2, [sp, #4]
 8012308:	2700      	movs	r7, #0
 801230a:	6013      	str	r3, [r2, #0]
 801230c:	e7e8      	b.n	80122e0 <_realloc_r+0x14>
 801230e:	2310      	movs	r3, #16
 8012310:	9300      	str	r3, [sp, #0]
 8012312:	9b00      	ldr	r3, [sp, #0]
 8012314:	9a05      	ldr	r2, [sp, #20]
 8012316:	4293      	cmp	r3, r2
 8012318:	d3f4      	bcc.n	8012304 <_realloc_r+0x38>
 801231a:	9b04      	ldr	r3, [sp, #16]
 801231c:	003a      	movs	r2, r7
 801231e:	9302      	str	r3, [sp, #8]
 8012320:	2303      	movs	r3, #3
 8012322:	439a      	bics	r2, r3
 8012324:	9b00      	ldr	r3, [sp, #0]
 8012326:	9203      	str	r2, [sp, #12]
 8012328:	4293      	cmp	r3, r2
 801232a:	dc00      	bgt.n	801232e <_realloc_r+0x62>
 801232c:	e169      	b.n	8012602 <_realloc_r+0x336>
 801232e:	9b04      	ldr	r3, [sp, #16]
 8012330:	48b8      	ldr	r0, [pc, #736]	; (8012614 <_realloc_r+0x348>)
 8012332:	189b      	adds	r3, r3, r2
 8012334:	6882      	ldr	r2, [r0, #8]
 8012336:	4694      	mov	ip, r2
 8012338:	685a      	ldr	r2, [r3, #4]
 801233a:	459c      	cmp	ip, r3
 801233c:	d006      	beq.n	801234c <_realloc_r+0x80>
 801233e:	2501      	movs	r5, #1
 8012340:	0011      	movs	r1, r2
 8012342:	43a9      	bics	r1, r5
 8012344:	1859      	adds	r1, r3, r1
 8012346:	6849      	ldr	r1, [r1, #4]
 8012348:	4229      	tst	r1, r5
 801234a:	d144      	bne.n	80123d6 <_realloc_r+0x10a>
 801234c:	2103      	movs	r1, #3
 801234e:	438a      	bics	r2, r1
 8012350:	9903      	ldr	r1, [sp, #12]
 8012352:	188e      	adds	r6, r1, r2
 8012354:	9900      	ldr	r1, [sp, #0]
 8012356:	459c      	cmp	ip, r3
 8012358:	d117      	bne.n	801238a <_realloc_r+0xbe>
 801235a:	3110      	adds	r1, #16
 801235c:	42b1      	cmp	r1, r6
 801235e:	dc3c      	bgt.n	80123da <_realloc_r+0x10e>
 8012360:	9a00      	ldr	r2, [sp, #0]
 8012362:	2101      	movs	r1, #1
 8012364:	4694      	mov	ip, r2
 8012366:	1ab6      	subs	r6, r6, r2
 8012368:	0022      	movs	r2, r4
 801236a:	9b04      	ldr	r3, [sp, #16]
 801236c:	430e      	orrs	r6, r1
 801236e:	4463      	add	r3, ip
 8012370:	6083      	str	r3, [r0, #8]
 8012372:	3a08      	subs	r2, #8
 8012374:	605e      	str	r6, [r3, #4]
 8012376:	6853      	ldr	r3, [r2, #4]
 8012378:	9801      	ldr	r0, [sp, #4]
 801237a:	400b      	ands	r3, r1
 801237c:	4661      	mov	r1, ip
 801237e:	430b      	orrs	r3, r1
 8012380:	6053      	str	r3, [r2, #4]
 8012382:	f7f9 ff27 	bl	800c1d4 <__malloc_unlock>
 8012386:	0027      	movs	r7, r4
 8012388:	e7aa      	b.n	80122e0 <_realloc_r+0x14>
 801238a:	42b1      	cmp	r1, r6
 801238c:	dc25      	bgt.n	80123da <_realloc_r+0x10e>
 801238e:	68da      	ldr	r2, [r3, #12]
 8012390:	689b      	ldr	r3, [r3, #8]
 8012392:	60da      	str	r2, [r3, #12]
 8012394:	6093      	str	r3, [r2, #8]
 8012396:	9b00      	ldr	r3, [sp, #0]
 8012398:	9a02      	ldr	r2, [sp, #8]
 801239a:	1af4      	subs	r4, r6, r3
 801239c:	9b02      	ldr	r3, [sp, #8]
 801239e:	1992      	adds	r2, r2, r6
 80123a0:	6858      	ldr	r0, [r3, #4]
 80123a2:	2301      	movs	r3, #1
 80123a4:	4018      	ands	r0, r3
 80123a6:	2c0f      	cmp	r4, #15
 80123a8:	d800      	bhi.n	80123ac <_realloc_r+0xe0>
 80123aa:	e12c      	b.n	8012606 <_realloc_r+0x33a>
 80123ac:	9d00      	ldr	r5, [sp, #0]
 80123ae:	9902      	ldr	r1, [sp, #8]
 80123b0:	4328      	orrs	r0, r5
 80123b2:	1949      	adds	r1, r1, r5
 80123b4:	9d02      	ldr	r5, [sp, #8]
 80123b6:	431c      	orrs	r4, r3
 80123b8:	6068      	str	r0, [r5, #4]
 80123ba:	604c      	str	r4, [r1, #4]
 80123bc:	6850      	ldr	r0, [r2, #4]
 80123be:	3108      	adds	r1, #8
 80123c0:	4303      	orrs	r3, r0
 80123c2:	6053      	str	r3, [r2, #4]
 80123c4:	9801      	ldr	r0, [sp, #4]
 80123c6:	f7fb f9a3 	bl	800d710 <_free_r>
 80123ca:	9801      	ldr	r0, [sp, #4]
 80123cc:	f7f9 ff02 	bl	800c1d4 <__malloc_unlock>
 80123d0:	9f02      	ldr	r7, [sp, #8]
 80123d2:	3708      	adds	r7, #8
 80123d4:	e784      	b.n	80122e0 <_realloc_r+0x14>
 80123d6:	2200      	movs	r2, #0
 80123d8:	0013      	movs	r3, r2
 80123da:	07ff      	lsls	r7, r7, #31
 80123dc:	d500      	bpl.n	80123e0 <_realloc_r+0x114>
 80123de:	e0c6      	b.n	801256e <_realloc_r+0x2a2>
 80123e0:	0021      	movs	r1, r4
 80123e2:	2003      	movs	r0, #3
 80123e4:	3908      	subs	r1, #8
 80123e6:	680d      	ldr	r5, [r1, #0]
 80123e8:	9904      	ldr	r1, [sp, #16]
 80123ea:	1b4d      	subs	r5, r1, r5
 80123ec:	6869      	ldr	r1, [r5, #4]
 80123ee:	4381      	bics	r1, r0
 80123f0:	9803      	ldr	r0, [sp, #12]
 80123f2:	180f      	adds	r7, r1, r0
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d100      	bne.n	80123fa <_realloc_r+0x12e>
 80123f8:	e084      	b.n	8012504 <_realloc_r+0x238>
 80123fa:	19d6      	adds	r6, r2, r7
 80123fc:	459c      	cmp	ip, r3
 80123fe:	d148      	bne.n	8012492 <_realloc_r+0x1c6>
 8012400:	9b00      	ldr	r3, [sp, #0]
 8012402:	3310      	adds	r3, #16
 8012404:	42b3      	cmp	r3, r6
 8012406:	dc7d      	bgt.n	8012504 <_realloc_r+0x238>
 8012408:	68aa      	ldr	r2, [r5, #8]
 801240a:	68eb      	ldr	r3, [r5, #12]
 801240c:	002f      	movs	r7, r5
 801240e:	60d3      	str	r3, [r2, #12]
 8012410:	609a      	str	r2, [r3, #8]
 8012412:	0002      	movs	r2, r0
 8012414:	3a04      	subs	r2, #4
 8012416:	3708      	adds	r7, #8
 8012418:	2a24      	cmp	r2, #36	; 0x24
 801241a:	d835      	bhi.n	8012488 <_realloc_r+0x1bc>
 801241c:	003b      	movs	r3, r7
 801241e:	2a13      	cmp	r2, #19
 8012420:	d908      	bls.n	8012434 <_realloc_r+0x168>
 8012422:	6823      	ldr	r3, [r4, #0]
 8012424:	60ab      	str	r3, [r5, #8]
 8012426:	6863      	ldr	r3, [r4, #4]
 8012428:	60eb      	str	r3, [r5, #12]
 801242a:	2a1b      	cmp	r2, #27
 801242c:	d81a      	bhi.n	8012464 <_realloc_r+0x198>
 801242e:	002b      	movs	r3, r5
 8012430:	3408      	adds	r4, #8
 8012432:	3310      	adds	r3, #16
 8012434:	6822      	ldr	r2, [r4, #0]
 8012436:	601a      	str	r2, [r3, #0]
 8012438:	6862      	ldr	r2, [r4, #4]
 801243a:	605a      	str	r2, [r3, #4]
 801243c:	68a2      	ldr	r2, [r4, #8]
 801243e:	609a      	str	r2, [r3, #8]
 8012440:	9b00      	ldr	r3, [sp, #0]
 8012442:	4a74      	ldr	r2, [pc, #464]	; (8012614 <_realloc_r+0x348>)
 8012444:	18eb      	adds	r3, r5, r3
 8012446:	6093      	str	r3, [r2, #8]
 8012448:	9a00      	ldr	r2, [sp, #0]
 801244a:	1ab6      	subs	r6, r6, r2
 801244c:	2201      	movs	r2, #1
 801244e:	4316      	orrs	r6, r2
 8012450:	605e      	str	r6, [r3, #4]
 8012452:	686b      	ldr	r3, [r5, #4]
 8012454:	4013      	ands	r3, r2
 8012456:	9a00      	ldr	r2, [sp, #0]
 8012458:	4313      	orrs	r3, r2
 801245a:	606b      	str	r3, [r5, #4]
 801245c:	9801      	ldr	r0, [sp, #4]
 801245e:	f7f9 feb9 	bl	800c1d4 <__malloc_unlock>
 8012462:	e73d      	b.n	80122e0 <_realloc_r+0x14>
 8012464:	68a3      	ldr	r3, [r4, #8]
 8012466:	612b      	str	r3, [r5, #16]
 8012468:	68e3      	ldr	r3, [r4, #12]
 801246a:	616b      	str	r3, [r5, #20]
 801246c:	2a24      	cmp	r2, #36	; 0x24
 801246e:	d003      	beq.n	8012478 <_realloc_r+0x1ac>
 8012470:	002b      	movs	r3, r5
 8012472:	3410      	adds	r4, #16
 8012474:	3318      	adds	r3, #24
 8012476:	e7dd      	b.n	8012434 <_realloc_r+0x168>
 8012478:	6923      	ldr	r3, [r4, #16]
 801247a:	61ab      	str	r3, [r5, #24]
 801247c:	002b      	movs	r3, r5
 801247e:	6962      	ldr	r2, [r4, #20]
 8012480:	3320      	adds	r3, #32
 8012482:	61ea      	str	r2, [r5, #28]
 8012484:	3418      	adds	r4, #24
 8012486:	e7d5      	b.n	8012434 <_realloc_r+0x168>
 8012488:	0021      	movs	r1, r4
 801248a:	0038      	movs	r0, r7
 801248c:	f001 fb2f 	bl	8013aee <memmove>
 8012490:	e7d6      	b.n	8012440 <_realloc_r+0x174>
 8012492:	9a00      	ldr	r2, [sp, #0]
 8012494:	42b2      	cmp	r2, r6
 8012496:	dc35      	bgt.n	8012504 <_realloc_r+0x238>
 8012498:	0028      	movs	r0, r5
 801249a:	68da      	ldr	r2, [r3, #12]
 801249c:	689b      	ldr	r3, [r3, #8]
 801249e:	3008      	adds	r0, #8
 80124a0:	60da      	str	r2, [r3, #12]
 80124a2:	6093      	str	r3, [r2, #8]
 80124a4:	68aa      	ldr	r2, [r5, #8]
 80124a6:	68eb      	ldr	r3, [r5, #12]
 80124a8:	60d3      	str	r3, [r2, #12]
 80124aa:	609a      	str	r2, [r3, #8]
 80124ac:	9a03      	ldr	r2, [sp, #12]
 80124ae:	3a04      	subs	r2, #4
 80124b0:	2a24      	cmp	r2, #36	; 0x24
 80124b2:	d823      	bhi.n	80124fc <_realloc_r+0x230>
 80124b4:	2a13      	cmp	r2, #19
 80124b6:	d907      	bls.n	80124c8 <_realloc_r+0x1fc>
 80124b8:	6823      	ldr	r3, [r4, #0]
 80124ba:	60ab      	str	r3, [r5, #8]
 80124bc:	6863      	ldr	r3, [r4, #4]
 80124be:	60eb      	str	r3, [r5, #12]
 80124c0:	2a1b      	cmp	r2, #27
 80124c2:	d809      	bhi.n	80124d8 <_realloc_r+0x20c>
 80124c4:	3408      	adds	r4, #8
 80124c6:	3008      	adds	r0, #8
 80124c8:	6823      	ldr	r3, [r4, #0]
 80124ca:	6003      	str	r3, [r0, #0]
 80124cc:	6863      	ldr	r3, [r4, #4]
 80124ce:	6043      	str	r3, [r0, #4]
 80124d0:	68a3      	ldr	r3, [r4, #8]
 80124d2:	6083      	str	r3, [r0, #8]
 80124d4:	9502      	str	r5, [sp, #8]
 80124d6:	e75e      	b.n	8012396 <_realloc_r+0xca>
 80124d8:	68a3      	ldr	r3, [r4, #8]
 80124da:	612b      	str	r3, [r5, #16]
 80124dc:	68e3      	ldr	r3, [r4, #12]
 80124de:	616b      	str	r3, [r5, #20]
 80124e0:	2a24      	cmp	r2, #36	; 0x24
 80124e2:	d003      	beq.n	80124ec <_realloc_r+0x220>
 80124e4:	0028      	movs	r0, r5
 80124e6:	3410      	adds	r4, #16
 80124e8:	3018      	adds	r0, #24
 80124ea:	e7ed      	b.n	80124c8 <_realloc_r+0x1fc>
 80124ec:	0028      	movs	r0, r5
 80124ee:	6923      	ldr	r3, [r4, #16]
 80124f0:	3020      	adds	r0, #32
 80124f2:	61ab      	str	r3, [r5, #24]
 80124f4:	6963      	ldr	r3, [r4, #20]
 80124f6:	3418      	adds	r4, #24
 80124f8:	61eb      	str	r3, [r5, #28]
 80124fa:	e7e5      	b.n	80124c8 <_realloc_r+0x1fc>
 80124fc:	0021      	movs	r1, r4
 80124fe:	f001 faf6 	bl	8013aee <memmove>
 8012502:	e7e7      	b.n	80124d4 <_realloc_r+0x208>
 8012504:	9b00      	ldr	r3, [sp, #0]
 8012506:	42bb      	cmp	r3, r7
 8012508:	dc31      	bgt.n	801256e <_realloc_r+0x2a2>
 801250a:	0028      	movs	r0, r5
 801250c:	68aa      	ldr	r2, [r5, #8]
 801250e:	68eb      	ldr	r3, [r5, #12]
 8012510:	3008      	adds	r0, #8
 8012512:	60d3      	str	r3, [r2, #12]
 8012514:	609a      	str	r2, [r3, #8]
 8012516:	9a03      	ldr	r2, [sp, #12]
 8012518:	3a04      	subs	r2, #4
 801251a:	2a24      	cmp	r2, #36	; 0x24
 801251c:	d823      	bhi.n	8012566 <_realloc_r+0x29a>
 801251e:	2a13      	cmp	r2, #19
 8012520:	d907      	bls.n	8012532 <_realloc_r+0x266>
 8012522:	6823      	ldr	r3, [r4, #0]
 8012524:	60ab      	str	r3, [r5, #8]
 8012526:	6863      	ldr	r3, [r4, #4]
 8012528:	60eb      	str	r3, [r5, #12]
 801252a:	2a1b      	cmp	r2, #27
 801252c:	d809      	bhi.n	8012542 <_realloc_r+0x276>
 801252e:	3408      	adds	r4, #8
 8012530:	3008      	adds	r0, #8
 8012532:	6823      	ldr	r3, [r4, #0]
 8012534:	6003      	str	r3, [r0, #0]
 8012536:	6863      	ldr	r3, [r4, #4]
 8012538:	6043      	str	r3, [r0, #4]
 801253a:	68a3      	ldr	r3, [r4, #8]
 801253c:	6083      	str	r3, [r0, #8]
 801253e:	003e      	movs	r6, r7
 8012540:	e7c8      	b.n	80124d4 <_realloc_r+0x208>
 8012542:	68a3      	ldr	r3, [r4, #8]
 8012544:	612b      	str	r3, [r5, #16]
 8012546:	68e3      	ldr	r3, [r4, #12]
 8012548:	616b      	str	r3, [r5, #20]
 801254a:	2a24      	cmp	r2, #36	; 0x24
 801254c:	d003      	beq.n	8012556 <_realloc_r+0x28a>
 801254e:	0028      	movs	r0, r5
 8012550:	3410      	adds	r4, #16
 8012552:	3018      	adds	r0, #24
 8012554:	e7ed      	b.n	8012532 <_realloc_r+0x266>
 8012556:	0028      	movs	r0, r5
 8012558:	6923      	ldr	r3, [r4, #16]
 801255a:	3020      	adds	r0, #32
 801255c:	61ab      	str	r3, [r5, #24]
 801255e:	6963      	ldr	r3, [r4, #20]
 8012560:	3418      	adds	r4, #24
 8012562:	61eb      	str	r3, [r5, #28]
 8012564:	e7e5      	b.n	8012532 <_realloc_r+0x266>
 8012566:	0021      	movs	r1, r4
 8012568:	f001 fac1 	bl	8013aee <memmove>
 801256c:	e7e7      	b.n	801253e <_realloc_r+0x272>
 801256e:	9905      	ldr	r1, [sp, #20]
 8012570:	9801      	ldr	r0, [sp, #4]
 8012572:	f7f9 fc13 	bl	800bd9c <_malloc_r>
 8012576:	1e07      	subs	r7, r0, #0
 8012578:	d100      	bne.n	801257c <_realloc_r+0x2b0>
 801257a:	e76f      	b.n	801245c <_realloc_r+0x190>
 801257c:	0023      	movs	r3, r4
 801257e:	2201      	movs	r2, #1
 8012580:	3b08      	subs	r3, #8
 8012582:	685b      	ldr	r3, [r3, #4]
 8012584:	4393      	bics	r3, r2
 8012586:	9a04      	ldr	r2, [sp, #16]
 8012588:	18d3      	adds	r3, r2, r3
 801258a:	0002      	movs	r2, r0
 801258c:	3a08      	subs	r2, #8
 801258e:	4293      	cmp	r3, r2
 8012590:	d105      	bne.n	801259e <_realloc_r+0x2d2>
 8012592:	685e      	ldr	r6, [r3, #4]
 8012594:	2303      	movs	r3, #3
 8012596:	439e      	bics	r6, r3
 8012598:	9b03      	ldr	r3, [sp, #12]
 801259a:	18f6      	adds	r6, r6, r3
 801259c:	e6fb      	b.n	8012396 <_realloc_r+0xca>
 801259e:	9a03      	ldr	r2, [sp, #12]
 80125a0:	3a04      	subs	r2, #4
 80125a2:	2a24      	cmp	r2, #36	; 0x24
 80125a4:	d829      	bhi.n	80125fa <_realloc_r+0x32e>
 80125a6:	0003      	movs	r3, r0
 80125a8:	0021      	movs	r1, r4
 80125aa:	2a13      	cmp	r2, #19
 80125ac:	d908      	bls.n	80125c0 <_realloc_r+0x2f4>
 80125ae:	6823      	ldr	r3, [r4, #0]
 80125b0:	6003      	str	r3, [r0, #0]
 80125b2:	6863      	ldr	r3, [r4, #4]
 80125b4:	6043      	str	r3, [r0, #4]
 80125b6:	2a1b      	cmp	r2, #27
 80125b8:	d80d      	bhi.n	80125d6 <_realloc_r+0x30a>
 80125ba:	0003      	movs	r3, r0
 80125bc:	3108      	adds	r1, #8
 80125be:	3308      	adds	r3, #8
 80125c0:	680a      	ldr	r2, [r1, #0]
 80125c2:	601a      	str	r2, [r3, #0]
 80125c4:	684a      	ldr	r2, [r1, #4]
 80125c6:	605a      	str	r2, [r3, #4]
 80125c8:	688a      	ldr	r2, [r1, #8]
 80125ca:	609a      	str	r2, [r3, #8]
 80125cc:	0021      	movs	r1, r4
 80125ce:	9801      	ldr	r0, [sp, #4]
 80125d0:	f7fb f89e 	bl	800d710 <_free_r>
 80125d4:	e742      	b.n	801245c <_realloc_r+0x190>
 80125d6:	68a3      	ldr	r3, [r4, #8]
 80125d8:	6083      	str	r3, [r0, #8]
 80125da:	68e3      	ldr	r3, [r4, #12]
 80125dc:	60c3      	str	r3, [r0, #12]
 80125de:	2a24      	cmp	r2, #36	; 0x24
 80125e0:	d003      	beq.n	80125ea <_realloc_r+0x31e>
 80125e2:	0003      	movs	r3, r0
 80125e4:	3110      	adds	r1, #16
 80125e6:	3310      	adds	r3, #16
 80125e8:	e7ea      	b.n	80125c0 <_realloc_r+0x2f4>
 80125ea:	6923      	ldr	r3, [r4, #16]
 80125ec:	3118      	adds	r1, #24
 80125ee:	6103      	str	r3, [r0, #16]
 80125f0:	0003      	movs	r3, r0
 80125f2:	6962      	ldr	r2, [r4, #20]
 80125f4:	3318      	adds	r3, #24
 80125f6:	6142      	str	r2, [r0, #20]
 80125f8:	e7e2      	b.n	80125c0 <_realloc_r+0x2f4>
 80125fa:	0021      	movs	r1, r4
 80125fc:	f001 fa77 	bl	8013aee <memmove>
 8012600:	e7e4      	b.n	80125cc <_realloc_r+0x300>
 8012602:	9e03      	ldr	r6, [sp, #12]
 8012604:	e6c7      	b.n	8012396 <_realloc_r+0xca>
 8012606:	9902      	ldr	r1, [sp, #8]
 8012608:	4306      	orrs	r6, r0
 801260a:	604e      	str	r6, [r1, #4]
 801260c:	6851      	ldr	r1, [r2, #4]
 801260e:	430b      	orrs	r3, r1
 8012610:	6053      	str	r3, [r2, #4]
 8012612:	e6da      	b.n	80123ca <_realloc_r+0xfe>
 8012614:	20000028 	.word	0x20000028

08012618 <_strtoll_l.constprop.0>:
 8012618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801261a:	b08d      	sub	sp, #52	; 0x34
 801261c:	9203      	str	r2, [sp, #12]
 801261e:	4a53      	ldr	r2, [pc, #332]	; (801276c <_strtoll_l.constprop.0+0x154>)
 8012620:	001e      	movs	r6, r3
 8012622:	9102      	str	r1, [sp, #8]
 8012624:	000b      	movs	r3, r1
 8012626:	4694      	mov	ip, r2
 8012628:	2108      	movs	r1, #8
 801262a:	900a      	str	r0, [sp, #40]	; 0x28
 801262c:	001a      	movs	r2, r3
 801262e:	4660      	mov	r0, ip
 8012630:	7814      	ldrb	r4, [r2, #0]
 8012632:	3301      	adds	r3, #1
 8012634:	5d00      	ldrb	r0, [r0, r4]
 8012636:	001d      	movs	r5, r3
 8012638:	0007      	movs	r7, r0
 801263a:	400f      	ands	r7, r1
 801263c:	4208      	tst	r0, r1
 801263e:	d1f5      	bne.n	801262c <_strtoll_l.constprop.0+0x14>
 8012640:	2c2d      	cmp	r4, #45	; 0x2d
 8012642:	d153      	bne.n	80126ec <_strtoll_l.constprop.0+0xd4>
 8012644:	781c      	ldrb	r4, [r3, #0]
 8012646:	2301      	movs	r3, #1
 8012648:	1c95      	adds	r5, r2, #2
 801264a:	9301      	str	r3, [sp, #4]
 801264c:	2e00      	cmp	r6, #0
 801264e:	d100      	bne.n	8012652 <_strtoll_l.constprop.0+0x3a>
 8012650:	e086      	b.n	8012760 <_strtoll_l.constprop.0+0x148>
 8012652:	2e10      	cmp	r6, #16
 8012654:	d10a      	bne.n	801266c <_strtoll_l.constprop.0+0x54>
 8012656:	2c30      	cmp	r4, #48	; 0x30
 8012658:	d108      	bne.n	801266c <_strtoll_l.constprop.0+0x54>
 801265a:	2220      	movs	r2, #32
 801265c:	782b      	ldrb	r3, [r5, #0]
 801265e:	4393      	bics	r3, r2
 8012660:	2b58      	cmp	r3, #88	; 0x58
 8012662:	d000      	beq.n	8012666 <_strtoll_l.constprop.0+0x4e>
 8012664:	e076      	b.n	8012754 <_strtoll_l.constprop.0+0x13c>
 8012666:	2610      	movs	r6, #16
 8012668:	786c      	ldrb	r4, [r5, #1]
 801266a:	3502      	adds	r5, #2
 801266c:	2001      	movs	r0, #1
 801266e:	2300      	movs	r3, #0
 8012670:	493f      	ldr	r1, [pc, #252]	; (8012770 <_strtoll_l.constprop.0+0x158>)
 8012672:	9a01      	ldr	r2, [sp, #4]
 8012674:	4240      	negs	r0, r0
 8012676:	1812      	adds	r2, r2, r0
 8012678:	414b      	adcs	r3, r1
 801267a:	9204      	str	r2, [sp, #16]
 801267c:	9305      	str	r3, [sp, #20]
 801267e:	9804      	ldr	r0, [sp, #16]
 8012680:	9905      	ldr	r1, [sp, #20]
 8012682:	17f3      	asrs	r3, r6, #31
 8012684:	0032      	movs	r2, r6
 8012686:	930b      	str	r3, [sp, #44]	; 0x2c
 8012688:	f7ed ff0c 	bl	80004a4 <__aeabi_uldivmod>
 801268c:	2300      	movs	r3, #0
 801268e:	000f      	movs	r7, r1
 8012690:	9008      	str	r0, [sp, #32]
 8012692:	2100      	movs	r1, #0
 8012694:	2000      	movs	r0, #0
 8012696:	9209      	str	r2, [sp, #36]	; 0x24
 8012698:	0022      	movs	r2, r4
 801269a:	3a30      	subs	r2, #48	; 0x30
 801269c:	2a09      	cmp	r2, #9
 801269e:	d82b      	bhi.n	80126f8 <_strtoll_l.constprop.0+0xe0>
 80126a0:	0014      	movs	r4, r2
 80126a2:	42a6      	cmp	r6, r4
 80126a4:	dd37      	ble.n	8012716 <_strtoll_l.constprop.0+0xfe>
 80126a6:	1c5a      	adds	r2, r3, #1
 80126a8:	d01d      	beq.n	80126e6 <_strtoll_l.constprop.0+0xce>
 80126aa:	42b9      	cmp	r1, r7
 80126ac:	d830      	bhi.n	8012710 <_strtoll_l.constprop.0+0xf8>
 80126ae:	d102      	bne.n	80126b6 <_strtoll_l.constprop.0+0x9e>
 80126b0:	9b08      	ldr	r3, [sp, #32]
 80126b2:	4298      	cmp	r0, r3
 80126b4:	d82c      	bhi.n	8012710 <_strtoll_l.constprop.0+0xf8>
 80126b6:	9b08      	ldr	r3, [sp, #32]
 80126b8:	4283      	cmp	r3, r0
 80126ba:	d106      	bne.n	80126ca <_strtoll_l.constprop.0+0xb2>
 80126bc:	428f      	cmp	r7, r1
 80126be:	d104      	bne.n	80126ca <_strtoll_l.constprop.0+0xb2>
 80126c0:	2301      	movs	r3, #1
 80126c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126c4:	425b      	negs	r3, r3
 80126c6:	42a2      	cmp	r2, r4
 80126c8:	db0d      	blt.n	80126e6 <_strtoll_l.constprop.0+0xce>
 80126ca:	000b      	movs	r3, r1
 80126cc:	0002      	movs	r2, r0
 80126ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80126d0:	0030      	movs	r0, r6
 80126d2:	f7ed ff07 	bl	80004e4 <__aeabi_lmul>
 80126d6:	17e3      	asrs	r3, r4, #31
 80126d8:	9406      	str	r4, [sp, #24]
 80126da:	9307      	str	r3, [sp, #28]
 80126dc:	9b06      	ldr	r3, [sp, #24]
 80126de:	9c07      	ldr	r4, [sp, #28]
 80126e0:	18c0      	adds	r0, r0, r3
 80126e2:	4161      	adcs	r1, r4
 80126e4:	2301      	movs	r3, #1
 80126e6:	782c      	ldrb	r4, [r5, #0]
 80126e8:	3501      	adds	r5, #1
 80126ea:	e7d5      	b.n	8012698 <_strtoll_l.constprop.0+0x80>
 80126ec:	9701      	str	r7, [sp, #4]
 80126ee:	2c2b      	cmp	r4, #43	; 0x2b
 80126f0:	d1ac      	bne.n	801264c <_strtoll_l.constprop.0+0x34>
 80126f2:	781c      	ldrb	r4, [r3, #0]
 80126f4:	1c95      	adds	r5, r2, #2
 80126f6:	e7a9      	b.n	801264c <_strtoll_l.constprop.0+0x34>
 80126f8:	0022      	movs	r2, r4
 80126fa:	3a41      	subs	r2, #65	; 0x41
 80126fc:	2a19      	cmp	r2, #25
 80126fe:	d801      	bhi.n	8012704 <_strtoll_l.constprop.0+0xec>
 8012700:	3c37      	subs	r4, #55	; 0x37
 8012702:	e7ce      	b.n	80126a2 <_strtoll_l.constprop.0+0x8a>
 8012704:	0022      	movs	r2, r4
 8012706:	3a61      	subs	r2, #97	; 0x61
 8012708:	2a19      	cmp	r2, #25
 801270a:	d804      	bhi.n	8012716 <_strtoll_l.constprop.0+0xfe>
 801270c:	3c57      	subs	r4, #87	; 0x57
 801270e:	e7c8      	b.n	80126a2 <_strtoll_l.constprop.0+0x8a>
 8012710:	2301      	movs	r3, #1
 8012712:	425b      	negs	r3, r3
 8012714:	e7e7      	b.n	80126e6 <_strtoll_l.constprop.0+0xce>
 8012716:	1c5a      	adds	r2, r3, #1
 8012718:	d109      	bne.n	801272e <_strtoll_l.constprop.0+0x116>
 801271a:	9804      	ldr	r0, [sp, #16]
 801271c:	9905      	ldr	r1, [sp, #20]
 801271e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012720:	3323      	adds	r3, #35	; 0x23
 8012722:	6013      	str	r3, [r2, #0]
 8012724:	9b03      	ldr	r3, [sp, #12]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d10e      	bne.n	8012748 <_strtoll_l.constprop.0+0x130>
 801272a:	b00d      	add	sp, #52	; 0x34
 801272c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801272e:	9a01      	ldr	r2, [sp, #4]
 8012730:	2a00      	cmp	r2, #0
 8012732:	d004      	beq.n	801273e <_strtoll_l.constprop.0+0x126>
 8012734:	0006      	movs	r6, r0
 8012736:	000f      	movs	r7, r1
 8012738:	2100      	movs	r1, #0
 801273a:	4270      	negs	r0, r6
 801273c:	41b9      	sbcs	r1, r7
 801273e:	9a03      	ldr	r2, [sp, #12]
 8012740:	2a00      	cmp	r2, #0
 8012742:	d0f2      	beq.n	801272a <_strtoll_l.constprop.0+0x112>
 8012744:	2b00      	cmp	r3, #0
 8012746:	d001      	beq.n	801274c <_strtoll_l.constprop.0+0x134>
 8012748:	1e6b      	subs	r3, r5, #1
 801274a:	9302      	str	r3, [sp, #8]
 801274c:	9b03      	ldr	r3, [sp, #12]
 801274e:	9a02      	ldr	r2, [sp, #8]
 8012750:	601a      	str	r2, [r3, #0]
 8012752:	e7ea      	b.n	801272a <_strtoll_l.constprop.0+0x112>
 8012754:	2430      	movs	r4, #48	; 0x30
 8012756:	2e00      	cmp	r6, #0
 8012758:	d000      	beq.n	801275c <_strtoll_l.constprop.0+0x144>
 801275a:	e787      	b.n	801266c <_strtoll_l.constprop.0+0x54>
 801275c:	3608      	adds	r6, #8
 801275e:	e785      	b.n	801266c <_strtoll_l.constprop.0+0x54>
 8012760:	2c30      	cmp	r4, #48	; 0x30
 8012762:	d100      	bne.n	8012766 <_strtoll_l.constprop.0+0x14e>
 8012764:	e779      	b.n	801265a <_strtoll_l.constprop.0+0x42>
 8012766:	260a      	movs	r6, #10
 8012768:	e780      	b.n	801266c <_strtoll_l.constprop.0+0x54>
 801276a:	46c0      	nop			; (mov r8, r8)
 801276c:	08015b39 	.word	0x08015b39
 8012770:	7fffffff 	.word	0x7fffffff

08012774 <_strtoll_r>:
 8012774:	b510      	push	{r4, lr}
 8012776:	f7ff ff4f 	bl	8012618 <_strtoll_l.constprop.0>
 801277a:	bd10      	pop	{r4, pc}

0801277c <_strtoull_l.constprop.0>:
 801277c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801277e:	b08b      	sub	sp, #44	; 0x2c
 8012780:	9202      	str	r2, [sp, #8]
 8012782:	4a54      	ldr	r2, [pc, #336]	; (80128d4 <_strtoull_l.constprop.0+0x158>)
 8012784:	001e      	movs	r6, r3
 8012786:	9101      	str	r1, [sp, #4]
 8012788:	000b      	movs	r3, r1
 801278a:	4694      	mov	ip, r2
 801278c:	2108      	movs	r1, #8
 801278e:	9009      	str	r0, [sp, #36]	; 0x24
 8012790:	001a      	movs	r2, r3
 8012792:	4660      	mov	r0, ip
 8012794:	7814      	ldrb	r4, [r2, #0]
 8012796:	3301      	adds	r3, #1
 8012798:	5d00      	ldrb	r0, [r0, r4]
 801279a:	001d      	movs	r5, r3
 801279c:	0007      	movs	r7, r0
 801279e:	400f      	ands	r7, r1
 80127a0:	4208      	tst	r0, r1
 80127a2:	d1f5      	bne.n	8012790 <_strtoull_l.constprop.0+0x14>
 80127a4:	2c2d      	cmp	r4, #45	; 0x2d
 80127a6:	d154      	bne.n	8012852 <_strtoull_l.constprop.0+0xd6>
 80127a8:	781c      	ldrb	r4, [r3, #0]
 80127aa:	2301      	movs	r3, #1
 80127ac:	1c95      	adds	r5, r2, #2
 80127ae:	9306      	str	r3, [sp, #24]
 80127b0:	2e00      	cmp	r6, #0
 80127b2:	d100      	bne.n	80127b6 <_strtoull_l.constprop.0+0x3a>
 80127b4:	e088      	b.n	80128c8 <_strtoull_l.constprop.0+0x14c>
 80127b6:	2e10      	cmp	r6, #16
 80127b8:	d10a      	bne.n	80127d0 <_strtoull_l.constprop.0+0x54>
 80127ba:	2c30      	cmp	r4, #48	; 0x30
 80127bc:	d108      	bne.n	80127d0 <_strtoull_l.constprop.0+0x54>
 80127be:	2220      	movs	r2, #32
 80127c0:	782b      	ldrb	r3, [r5, #0]
 80127c2:	4393      	bics	r3, r2
 80127c4:	2b58      	cmp	r3, #88	; 0x58
 80127c6:	d000      	beq.n	80127ca <_strtoull_l.constprop.0+0x4e>
 80127c8:	e078      	b.n	80128bc <_strtoull_l.constprop.0+0x140>
 80127ca:	2610      	movs	r6, #16
 80127cc:	786c      	ldrb	r4, [r5, #1]
 80127ce:	3502      	adds	r5, #2
 80127d0:	17f7      	asrs	r7, r6, #31
 80127d2:	0032      	movs	r2, r6
 80127d4:	003b      	movs	r3, r7
 80127d6:	2001      	movs	r0, #1
 80127d8:	4240      	negs	r0, r0
 80127da:	17c1      	asrs	r1, r0, #31
 80127dc:	f7ed fe62 	bl	80004a4 <__aeabi_uldivmod>
 80127e0:	0032      	movs	r2, r6
 80127e2:	9007      	str	r0, [sp, #28]
 80127e4:	9103      	str	r1, [sp, #12]
 80127e6:	003b      	movs	r3, r7
 80127e8:	2001      	movs	r0, #1
 80127ea:	4240      	negs	r0, r0
 80127ec:	17c1      	asrs	r1, r0, #31
 80127ee:	f7ed fe59 	bl	80004a4 <__aeabi_uldivmod>
 80127f2:	2300      	movs	r3, #0
 80127f4:	2000      	movs	r0, #0
 80127f6:	2100      	movs	r1, #0
 80127f8:	9208      	str	r2, [sp, #32]
 80127fa:	0022      	movs	r2, r4
 80127fc:	3a30      	subs	r2, #48	; 0x30
 80127fe:	2a09      	cmp	r2, #9
 8012800:	d82d      	bhi.n	801285e <_strtoull_l.constprop.0+0xe2>
 8012802:	0014      	movs	r4, r2
 8012804:	42a6      	cmp	r6, r4
 8012806:	dd39      	ble.n	801287c <_strtoull_l.constprop.0+0x100>
 8012808:	1c5a      	adds	r2, r3, #1
 801280a:	d01f      	beq.n	801284c <_strtoull_l.constprop.0+0xd0>
 801280c:	9b03      	ldr	r3, [sp, #12]
 801280e:	4299      	cmp	r1, r3
 8012810:	d831      	bhi.n	8012876 <_strtoull_l.constprop.0+0xfa>
 8012812:	d102      	bne.n	801281a <_strtoull_l.constprop.0+0x9e>
 8012814:	9b07      	ldr	r3, [sp, #28]
 8012816:	4298      	cmp	r0, r3
 8012818:	d82d      	bhi.n	8012876 <_strtoull_l.constprop.0+0xfa>
 801281a:	9b07      	ldr	r3, [sp, #28]
 801281c:	4283      	cmp	r3, r0
 801281e:	d107      	bne.n	8012830 <_strtoull_l.constprop.0+0xb4>
 8012820:	9b03      	ldr	r3, [sp, #12]
 8012822:	428b      	cmp	r3, r1
 8012824:	d104      	bne.n	8012830 <_strtoull_l.constprop.0+0xb4>
 8012826:	2301      	movs	r3, #1
 8012828:	9a08      	ldr	r2, [sp, #32]
 801282a:	425b      	negs	r3, r3
 801282c:	42a2      	cmp	r2, r4
 801282e:	db0d      	blt.n	801284c <_strtoull_l.constprop.0+0xd0>
 8012830:	000b      	movs	r3, r1
 8012832:	0002      	movs	r2, r0
 8012834:	0039      	movs	r1, r7
 8012836:	0030      	movs	r0, r6
 8012838:	f7ed fe54 	bl	80004e4 <__aeabi_lmul>
 801283c:	17e3      	asrs	r3, r4, #31
 801283e:	9404      	str	r4, [sp, #16]
 8012840:	9305      	str	r3, [sp, #20]
 8012842:	9b04      	ldr	r3, [sp, #16]
 8012844:	9c05      	ldr	r4, [sp, #20]
 8012846:	18c0      	adds	r0, r0, r3
 8012848:	4161      	adcs	r1, r4
 801284a:	2301      	movs	r3, #1
 801284c:	782c      	ldrb	r4, [r5, #0]
 801284e:	3501      	adds	r5, #1
 8012850:	e7d3      	b.n	80127fa <_strtoull_l.constprop.0+0x7e>
 8012852:	9706      	str	r7, [sp, #24]
 8012854:	2c2b      	cmp	r4, #43	; 0x2b
 8012856:	d1ab      	bne.n	80127b0 <_strtoull_l.constprop.0+0x34>
 8012858:	781c      	ldrb	r4, [r3, #0]
 801285a:	1c95      	adds	r5, r2, #2
 801285c:	e7a8      	b.n	80127b0 <_strtoull_l.constprop.0+0x34>
 801285e:	0022      	movs	r2, r4
 8012860:	3a41      	subs	r2, #65	; 0x41
 8012862:	2a19      	cmp	r2, #25
 8012864:	d801      	bhi.n	801286a <_strtoull_l.constprop.0+0xee>
 8012866:	3c37      	subs	r4, #55	; 0x37
 8012868:	e7cc      	b.n	8012804 <_strtoull_l.constprop.0+0x88>
 801286a:	0022      	movs	r2, r4
 801286c:	3a61      	subs	r2, #97	; 0x61
 801286e:	2a19      	cmp	r2, #25
 8012870:	d804      	bhi.n	801287c <_strtoull_l.constprop.0+0x100>
 8012872:	3c57      	subs	r4, #87	; 0x57
 8012874:	e7c6      	b.n	8012804 <_strtoull_l.constprop.0+0x88>
 8012876:	2301      	movs	r3, #1
 8012878:	425b      	negs	r3, r3
 801287a:	e7e7      	b.n	801284c <_strtoull_l.constprop.0+0xd0>
 801287c:	1c5a      	adds	r2, r3, #1
 801287e:	d10a      	bne.n	8012896 <_strtoull_l.constprop.0+0x11a>
 8012880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012882:	3323      	adds	r3, #35	; 0x23
 8012884:	6013      	str	r3, [r2, #0]
 8012886:	9b02      	ldr	r3, [sp, #8]
 8012888:	2001      	movs	r0, #1
 801288a:	4240      	negs	r0, r0
 801288c:	17c1      	asrs	r1, r0, #31
 801288e:	2b00      	cmp	r3, #0
 8012890:	d10e      	bne.n	80128b0 <_strtoull_l.constprop.0+0x134>
 8012892:	b00b      	add	sp, #44	; 0x2c
 8012894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012896:	9a06      	ldr	r2, [sp, #24]
 8012898:	2a00      	cmp	r2, #0
 801289a:	d004      	beq.n	80128a6 <_strtoull_l.constprop.0+0x12a>
 801289c:	0006      	movs	r6, r0
 801289e:	000f      	movs	r7, r1
 80128a0:	2100      	movs	r1, #0
 80128a2:	4270      	negs	r0, r6
 80128a4:	41b9      	sbcs	r1, r7
 80128a6:	9a02      	ldr	r2, [sp, #8]
 80128a8:	2a00      	cmp	r2, #0
 80128aa:	d0f2      	beq.n	8012892 <_strtoull_l.constprop.0+0x116>
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d001      	beq.n	80128b4 <_strtoull_l.constprop.0+0x138>
 80128b0:	1e6b      	subs	r3, r5, #1
 80128b2:	9301      	str	r3, [sp, #4]
 80128b4:	9b02      	ldr	r3, [sp, #8]
 80128b6:	9a01      	ldr	r2, [sp, #4]
 80128b8:	601a      	str	r2, [r3, #0]
 80128ba:	e7ea      	b.n	8012892 <_strtoull_l.constprop.0+0x116>
 80128bc:	2430      	movs	r4, #48	; 0x30
 80128be:	2e00      	cmp	r6, #0
 80128c0:	d000      	beq.n	80128c4 <_strtoull_l.constprop.0+0x148>
 80128c2:	e785      	b.n	80127d0 <_strtoull_l.constprop.0+0x54>
 80128c4:	3608      	adds	r6, #8
 80128c6:	e783      	b.n	80127d0 <_strtoull_l.constprop.0+0x54>
 80128c8:	2c30      	cmp	r4, #48	; 0x30
 80128ca:	d100      	bne.n	80128ce <_strtoull_l.constprop.0+0x152>
 80128cc:	e777      	b.n	80127be <_strtoull_l.constprop.0+0x42>
 80128ce:	260a      	movs	r6, #10
 80128d0:	e77e      	b.n	80127d0 <_strtoull_l.constprop.0+0x54>
 80128d2:	46c0      	nop			; (mov r8, r8)
 80128d4:	08015b39 	.word	0x08015b39

080128d8 <_strtoull_r>:
 80128d8:	b510      	push	{r4, lr}
 80128da:	f7ff ff4f 	bl	801277c <_strtoull_l.constprop.0>
 80128de:	bd10      	pop	{r4, pc}

080128e0 <_mbrtowc_r>:
 80128e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80128e2:	0004      	movs	r4, r0
 80128e4:	0010      	movs	r0, r2
 80128e6:	4a0b      	ldr	r2, [pc, #44]	; (8012914 <_mbrtowc_r+0x34>)
 80128e8:	9d06      	ldr	r5, [sp, #24]
 80128ea:	32e4      	adds	r2, #228	; 0xe4
 80128ec:	6816      	ldr	r6, [r2, #0]
 80128ee:	2800      	cmp	r0, #0
 80128f0:	d10c      	bne.n	801290c <_mbrtowc_r+0x2c>
 80128f2:	2301      	movs	r3, #1
 80128f4:	0001      	movs	r1, r0
 80128f6:	4a08      	ldr	r2, [pc, #32]	; (8012918 <_mbrtowc_r+0x38>)
 80128f8:	9500      	str	r5, [sp, #0]
 80128fa:	0020      	movs	r0, r4
 80128fc:	47b0      	blx	r6
 80128fe:	1c43      	adds	r3, r0, #1
 8012900:	d103      	bne.n	801290a <_mbrtowc_r+0x2a>
 8012902:	2300      	movs	r3, #0
 8012904:	602b      	str	r3, [r5, #0]
 8012906:	338a      	adds	r3, #138	; 0x8a
 8012908:	6023      	str	r3, [r4, #0]
 801290a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 801290c:	0002      	movs	r2, r0
 801290e:	9500      	str	r5, [sp, #0]
 8012910:	e7f3      	b.n	80128fa <_mbrtowc_r+0x1a>
 8012912:	46c0      	nop			; (mov r8, r8)
 8012914:	20000444 	.word	0x20000444
 8012918:	08015ec3 	.word	0x08015ec3

0801291c <iswspace>:
 801291c:	b510      	push	{r4, lr}
 801291e:	2100      	movs	r1, #0
 8012920:	f000 f802 	bl	8012928 <iswspace_l>
 8012924:	bd10      	pop	{r4, pc}
	...

08012928 <iswspace_l>:
 8012928:	0003      	movs	r3, r0
 801292a:	2000      	movs	r0, #0
 801292c:	2bff      	cmp	r3, #255	; 0xff
 801292e:	d803      	bhi.n	8012938 <iswspace_l+0x10>
 8012930:	4a02      	ldr	r2, [pc, #8]	; (801293c <iswspace_l+0x14>)
 8012932:	5cd0      	ldrb	r0, [r2, r3]
 8012934:	2308      	movs	r3, #8
 8012936:	4018      	ands	r0, r3
 8012938:	4770      	bx	lr
 801293a:	46c0      	nop			; (mov r8, r8)
 801293c:	08015b39 	.word	0x08015b39

08012940 <fiprintf>:
 8012940:	b40e      	push	{r1, r2, r3}
 8012942:	b517      	push	{r0, r1, r2, r4, lr}
 8012944:	4c05      	ldr	r4, [pc, #20]	; (801295c <fiprintf+0x1c>)
 8012946:	ab05      	add	r3, sp, #20
 8012948:	cb04      	ldmia	r3!, {r2}
 801294a:	0001      	movs	r1, r0
 801294c:	6820      	ldr	r0, [r4, #0]
 801294e:	9301      	str	r3, [sp, #4]
 8012950:	f000 f954 	bl	8012bfc <_vfiprintf_r>
 8012954:	bc1e      	pop	{r1, r2, r3, r4}
 8012956:	bc08      	pop	{r3}
 8012958:	b003      	add	sp, #12
 801295a:	4718      	bx	r3
 801295c:	200006d0 	.word	0x200006d0

08012960 <__ssprint_r>:
 8012960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012962:	6813      	ldr	r3, [r2, #0]
 8012964:	b087      	sub	sp, #28
 8012966:	0017      	movs	r7, r2
 8012968:	9303      	str	r3, [sp, #12]
 801296a:	6893      	ldr	r3, [r2, #8]
 801296c:	2200      	movs	r2, #0
 801296e:	000c      	movs	r4, r1
 8012970:	9005      	str	r0, [sp, #20]
 8012972:	9202      	str	r2, [sp, #8]
 8012974:	9201      	str	r2, [sp, #4]
 8012976:	4293      	cmp	r3, r2
 8012978:	d10d      	bne.n	8012996 <__ssprint_r+0x36>
 801297a:	2000      	movs	r0, #0
 801297c:	2300      	movs	r3, #0
 801297e:	607b      	str	r3, [r7, #4]
 8012980:	b007      	add	sp, #28
 8012982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012984:	9b03      	ldr	r3, [sp, #12]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	9302      	str	r3, [sp, #8]
 801298a:	9b03      	ldr	r3, [sp, #12]
 801298c:	685b      	ldr	r3, [r3, #4]
 801298e:	9301      	str	r3, [sp, #4]
 8012990:	9b03      	ldr	r3, [sp, #12]
 8012992:	3308      	adds	r3, #8
 8012994:	9303      	str	r3, [sp, #12]
 8012996:	9a01      	ldr	r2, [sp, #4]
 8012998:	68a6      	ldr	r6, [r4, #8]
 801299a:	6823      	ldr	r3, [r4, #0]
 801299c:	2a00      	cmp	r2, #0
 801299e:	d0f1      	beq.n	8012984 <__ssprint_r+0x24>
 80129a0:	42b2      	cmp	r2, r6
 80129a2:	d32e      	bcc.n	8012a02 <__ssprint_r+0xa2>
 80129a4:	2190      	movs	r1, #144	; 0x90
 80129a6:	89a2      	ldrh	r2, [r4, #12]
 80129a8:	00c9      	lsls	r1, r1, #3
 80129aa:	420a      	tst	r2, r1
 80129ac:	d029      	beq.n	8012a02 <__ssprint_r+0xa2>
 80129ae:	2003      	movs	r0, #3
 80129b0:	6921      	ldr	r1, [r4, #16]
 80129b2:	1a5b      	subs	r3, r3, r1
 80129b4:	9304      	str	r3, [sp, #16]
 80129b6:	6963      	ldr	r3, [r4, #20]
 80129b8:	4343      	muls	r3, r0
 80129ba:	0fdd      	lsrs	r5, r3, #31
 80129bc:	18ed      	adds	r5, r5, r3
 80129be:	9b04      	ldr	r3, [sp, #16]
 80129c0:	9801      	ldr	r0, [sp, #4]
 80129c2:	3301      	adds	r3, #1
 80129c4:	181b      	adds	r3, r3, r0
 80129c6:	106d      	asrs	r5, r5, #1
 80129c8:	42ab      	cmp	r3, r5
 80129ca:	d900      	bls.n	80129ce <__ssprint_r+0x6e>
 80129cc:	001d      	movs	r5, r3
 80129ce:	0552      	lsls	r2, r2, #21
 80129d0:	d532      	bpl.n	8012a38 <__ssprint_r+0xd8>
 80129d2:	0029      	movs	r1, r5
 80129d4:	9805      	ldr	r0, [sp, #20]
 80129d6:	f7f9 f9e1 	bl	800bd9c <_malloc_r>
 80129da:	1e06      	subs	r6, r0, #0
 80129dc:	d036      	beq.n	8012a4c <__ssprint_r+0xec>
 80129de:	9a04      	ldr	r2, [sp, #16]
 80129e0:	6921      	ldr	r1, [r4, #16]
 80129e2:	f7fa fe1a 	bl	800d61a <memcpy>
 80129e6:	89a2      	ldrh	r2, [r4, #12]
 80129e8:	4b1e      	ldr	r3, [pc, #120]	; (8012a64 <__ssprint_r+0x104>)
 80129ea:	401a      	ands	r2, r3
 80129ec:	2380      	movs	r3, #128	; 0x80
 80129ee:	4313      	orrs	r3, r2
 80129f0:	81a3      	strh	r3, [r4, #12]
 80129f2:	9b04      	ldr	r3, [sp, #16]
 80129f4:	6126      	str	r6, [r4, #16]
 80129f6:	18f6      	adds	r6, r6, r3
 80129f8:	6026      	str	r6, [r4, #0]
 80129fa:	6165      	str	r5, [r4, #20]
 80129fc:	9e01      	ldr	r6, [sp, #4]
 80129fe:	1aed      	subs	r5, r5, r3
 8012a00:	60a5      	str	r5, [r4, #8]
 8012a02:	9b01      	ldr	r3, [sp, #4]
 8012a04:	429e      	cmp	r6, r3
 8012a06:	d900      	bls.n	8012a0a <__ssprint_r+0xaa>
 8012a08:	001e      	movs	r6, r3
 8012a0a:	0032      	movs	r2, r6
 8012a0c:	9902      	ldr	r1, [sp, #8]
 8012a0e:	6820      	ldr	r0, [r4, #0]
 8012a10:	f001 f86d 	bl	8013aee <memmove>
 8012a14:	9a01      	ldr	r2, [sp, #4]
 8012a16:	68a3      	ldr	r3, [r4, #8]
 8012a18:	4694      	mov	ip, r2
 8012a1a:	1b9b      	subs	r3, r3, r6
 8012a1c:	60a3      	str	r3, [r4, #8]
 8012a1e:	6823      	ldr	r3, [r4, #0]
 8012a20:	199b      	adds	r3, r3, r6
 8012a22:	6023      	str	r3, [r4, #0]
 8012a24:	9b02      	ldr	r3, [sp, #8]
 8012a26:	4463      	add	r3, ip
 8012a28:	9302      	str	r3, [sp, #8]
 8012a2a:	68bb      	ldr	r3, [r7, #8]
 8012a2c:	1a9b      	subs	r3, r3, r2
 8012a2e:	60bb      	str	r3, [r7, #8]
 8012a30:	d0a3      	beq.n	801297a <__ssprint_r+0x1a>
 8012a32:	2300      	movs	r3, #0
 8012a34:	9301      	str	r3, [sp, #4]
 8012a36:	e7ae      	b.n	8012996 <__ssprint_r+0x36>
 8012a38:	002a      	movs	r2, r5
 8012a3a:	9805      	ldr	r0, [sp, #20]
 8012a3c:	f7ff fc46 	bl	80122cc <_realloc_r>
 8012a40:	1e06      	subs	r6, r0, #0
 8012a42:	d1d6      	bne.n	80129f2 <__ssprint_r+0x92>
 8012a44:	6921      	ldr	r1, [r4, #16]
 8012a46:	9805      	ldr	r0, [sp, #20]
 8012a48:	f7fa fe62 	bl	800d710 <_free_r>
 8012a4c:	230c      	movs	r3, #12
 8012a4e:	9a05      	ldr	r2, [sp, #20]
 8012a50:	2001      	movs	r0, #1
 8012a52:	6013      	str	r3, [r2, #0]
 8012a54:	89a2      	ldrh	r2, [r4, #12]
 8012a56:	3334      	adds	r3, #52	; 0x34
 8012a58:	4313      	orrs	r3, r2
 8012a5a:	81a3      	strh	r3, [r4, #12]
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	4240      	negs	r0, r0
 8012a60:	60bb      	str	r3, [r7, #8]
 8012a62:	e78b      	b.n	801297c <__ssprint_r+0x1c>
 8012a64:	fffffb7f 	.word	0xfffffb7f

08012a68 <_sungetc_r>:
 8012a68:	b570      	push	{r4, r5, r6, lr}
 8012a6a:	0014      	movs	r4, r2
 8012a6c:	1c4b      	adds	r3, r1, #1
 8012a6e:	d103      	bne.n	8012a78 <_sungetc_r+0x10>
 8012a70:	2501      	movs	r5, #1
 8012a72:	426d      	negs	r5, r5
 8012a74:	0028      	movs	r0, r5
 8012a76:	bd70      	pop	{r4, r5, r6, pc}
 8012a78:	8993      	ldrh	r3, [r2, #12]
 8012a7a:	2220      	movs	r2, #32
 8012a7c:	4393      	bics	r3, r2
 8012a7e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012a80:	81a3      	strh	r3, [r4, #12]
 8012a82:	b2ce      	uxtb	r6, r1
 8012a84:	6863      	ldr	r3, [r4, #4]
 8012a86:	b2cd      	uxtb	r5, r1
 8012a88:	2a00      	cmp	r2, #0
 8012a8a:	d010      	beq.n	8012aae <_sungetc_r+0x46>
 8012a8c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	dd07      	ble.n	8012aa2 <_sungetc_r+0x3a>
 8012a92:	6823      	ldr	r3, [r4, #0]
 8012a94:	3b01      	subs	r3, #1
 8012a96:	6023      	str	r3, [r4, #0]
 8012a98:	701e      	strb	r6, [r3, #0]
 8012a9a:	6863      	ldr	r3, [r4, #4]
 8012a9c:	3301      	adds	r3, #1
 8012a9e:	6063      	str	r3, [r4, #4]
 8012aa0:	e7e8      	b.n	8012a74 <_sungetc_r+0xc>
 8012aa2:	0021      	movs	r1, r4
 8012aa4:	f000 ff1a 	bl	80138dc <__submore>
 8012aa8:	2800      	cmp	r0, #0
 8012aaa:	d0f2      	beq.n	8012a92 <_sungetc_r+0x2a>
 8012aac:	e7e0      	b.n	8012a70 <_sungetc_r+0x8>
 8012aae:	6921      	ldr	r1, [r4, #16]
 8012ab0:	6822      	ldr	r2, [r4, #0]
 8012ab2:	2900      	cmp	r1, #0
 8012ab4:	d007      	beq.n	8012ac6 <_sungetc_r+0x5e>
 8012ab6:	4291      	cmp	r1, r2
 8012ab8:	d205      	bcs.n	8012ac6 <_sungetc_r+0x5e>
 8012aba:	1e51      	subs	r1, r2, #1
 8012abc:	7808      	ldrb	r0, [r1, #0]
 8012abe:	42a8      	cmp	r0, r5
 8012ac0:	d101      	bne.n	8012ac6 <_sungetc_r+0x5e>
 8012ac2:	6021      	str	r1, [r4, #0]
 8012ac4:	e7ea      	b.n	8012a9c <_sungetc_r+0x34>
 8012ac6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012ac8:	0023      	movs	r3, r4
 8012aca:	3340      	adds	r3, #64	; 0x40
 8012acc:	6323      	str	r3, [r4, #48]	; 0x30
 8012ace:	2303      	movs	r3, #3
 8012ad0:	6363      	str	r3, [r4, #52]	; 0x34
 8012ad2:	0023      	movs	r3, r4
 8012ad4:	3342      	adds	r3, #66	; 0x42
 8012ad6:	63a2      	str	r2, [r4, #56]	; 0x38
 8012ad8:	701e      	strb	r6, [r3, #0]
 8012ada:	6023      	str	r3, [r4, #0]
 8012adc:	2301      	movs	r3, #1
 8012ade:	e7de      	b.n	8012a9e <_sungetc_r+0x36>

08012ae0 <__ssrefill_r>:
 8012ae0:	b510      	push	{r4, lr}
 8012ae2:	000c      	movs	r4, r1
 8012ae4:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8012ae6:	2900      	cmp	r1, #0
 8012ae8:	d00e      	beq.n	8012b08 <__ssrefill_r+0x28>
 8012aea:	0023      	movs	r3, r4
 8012aec:	3340      	adds	r3, #64	; 0x40
 8012aee:	4299      	cmp	r1, r3
 8012af0:	d001      	beq.n	8012af6 <__ssrefill_r+0x16>
 8012af2:	f7fa fe0d 	bl	800d710 <_free_r>
 8012af6:	2000      	movs	r0, #0
 8012af8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012afa:	6320      	str	r0, [r4, #48]	; 0x30
 8012afc:	6063      	str	r3, [r4, #4]
 8012afe:	4283      	cmp	r3, r0
 8012b00:	d002      	beq.n	8012b08 <__ssrefill_r+0x28>
 8012b02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012b04:	6023      	str	r3, [r4, #0]
 8012b06:	bd10      	pop	{r4, pc}
 8012b08:	6923      	ldr	r3, [r4, #16]
 8012b0a:	2001      	movs	r0, #1
 8012b0c:	6023      	str	r3, [r4, #0]
 8012b0e:	2300      	movs	r3, #0
 8012b10:	89a2      	ldrh	r2, [r4, #12]
 8012b12:	6063      	str	r3, [r4, #4]
 8012b14:	3320      	adds	r3, #32
 8012b16:	4313      	orrs	r3, r2
 8012b18:	81a3      	strh	r3, [r4, #12]
 8012b1a:	4240      	negs	r0, r0
 8012b1c:	e7f3      	b.n	8012b06 <__ssrefill_r+0x26>

08012b1e <_sfread_r>:
 8012b1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b20:	0014      	movs	r4, r2
 8012b22:	435c      	muls	r4, r3
 8012b24:	b087      	sub	sp, #28
 8012b26:	1e26      	subs	r6, r4, #0
 8012b28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012b2a:	9005      	str	r0, [sp, #20]
 8012b2c:	9101      	str	r1, [sp, #4]
 8012b2e:	9202      	str	r2, [sp, #8]
 8012b30:	9303      	str	r3, [sp, #12]
 8012b32:	d11e      	bne.n	8012b72 <_sfread_r+0x54>
 8012b34:	0020      	movs	r0, r4
 8012b36:	b007      	add	sp, #28
 8012b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b3a:	003a      	movs	r2, r7
 8012b3c:	9801      	ldr	r0, [sp, #4]
 8012b3e:	f7fa fd6c 	bl	800d61a <memcpy>
 8012b42:	682b      	ldr	r3, [r5, #0]
 8012b44:	0029      	movs	r1, r5
 8012b46:	19db      	adds	r3, r3, r7
 8012b48:	602b      	str	r3, [r5, #0]
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	606b      	str	r3, [r5, #4]
 8012b4e:	9b01      	ldr	r3, [sp, #4]
 8012b50:	9805      	ldr	r0, [sp, #20]
 8012b52:	19db      	adds	r3, r3, r7
 8012b54:	9301      	str	r3, [sp, #4]
 8012b56:	1bf3      	subs	r3, r6, r7
 8012b58:	9304      	str	r3, [sp, #16]
 8012b5a:	f7ff ffc1 	bl	8012ae0 <__ssrefill_r>
 8012b5e:	2800      	cmp	r0, #0
 8012b60:	d006      	beq.n	8012b70 <_sfread_r+0x52>
 8012b62:	193c      	adds	r4, r7, r4
 8012b64:	1ba0      	subs	r0, r4, r6
 8012b66:	9902      	ldr	r1, [sp, #8]
 8012b68:	f7ed fae8 	bl	800013c <__udivsi3>
 8012b6c:	0004      	movs	r4, r0
 8012b6e:	e7e1      	b.n	8012b34 <_sfread_r+0x16>
 8012b70:	9e04      	ldr	r6, [sp, #16]
 8012b72:	686f      	ldr	r7, [r5, #4]
 8012b74:	6829      	ldr	r1, [r5, #0]
 8012b76:	42b7      	cmp	r7, r6
 8012b78:	d3df      	bcc.n	8012b3a <_sfread_r+0x1c>
 8012b7a:	0032      	movs	r2, r6
 8012b7c:	9801      	ldr	r0, [sp, #4]
 8012b7e:	f7fa fd4c 	bl	800d61a <memcpy>
 8012b82:	686b      	ldr	r3, [r5, #4]
 8012b84:	9c03      	ldr	r4, [sp, #12]
 8012b86:	1b9b      	subs	r3, r3, r6
 8012b88:	606b      	str	r3, [r5, #4]
 8012b8a:	682b      	ldr	r3, [r5, #0]
 8012b8c:	199b      	adds	r3, r3, r6
 8012b8e:	602b      	str	r3, [r5, #0]
 8012b90:	e7d0      	b.n	8012b34 <_sfread_r+0x16>

08012b92 <__sprint_r>:
 8012b92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b94:	6893      	ldr	r3, [r2, #8]
 8012b96:	b085      	sub	sp, #20
 8012b98:	9001      	str	r0, [sp, #4]
 8012b9a:	000d      	movs	r5, r1
 8012b9c:	0014      	movs	r4, r2
 8012b9e:	1e18      	subs	r0, r3, #0
 8012ba0:	d018      	beq.n	8012bd4 <__sprint_r+0x42>
 8012ba2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8012ba4:	049b      	lsls	r3, r3, #18
 8012ba6:	d524      	bpl.n	8012bf2 <__sprint_r+0x60>
 8012ba8:	6817      	ldr	r7, [r2, #0]
 8012baa:	2600      	movs	r6, #0
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	9302      	str	r3, [sp, #8]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	9300      	str	r3, [sp, #0]
 8012bb4:	089b      	lsrs	r3, r3, #2
 8012bb6:	9303      	str	r3, [sp, #12]
 8012bb8:	9b03      	ldr	r3, [sp, #12]
 8012bba:	42b3      	cmp	r3, r6
 8012bbc:	dc0e      	bgt.n	8012bdc <__sprint_r+0x4a>
 8012bbe:	2203      	movs	r2, #3
 8012bc0:	9b00      	ldr	r3, [sp, #0]
 8012bc2:	68a0      	ldr	r0, [r4, #8]
 8012bc4:	4393      	bics	r3, r2
 8012bc6:	1ac0      	subs	r0, r0, r3
 8012bc8:	60a0      	str	r0, [r4, #8]
 8012bca:	3708      	adds	r7, #8
 8012bcc:	2800      	cmp	r0, #0
 8012bce:	d1ec      	bne.n	8012baa <__sprint_r+0x18>
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	60a3      	str	r3, [r4, #8]
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	6063      	str	r3, [r4, #4]
 8012bd8:	b005      	add	sp, #20
 8012bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bdc:	9902      	ldr	r1, [sp, #8]
 8012bde:	00b3      	lsls	r3, r6, #2
 8012be0:	58c9      	ldr	r1, [r1, r3]
 8012be2:	002a      	movs	r2, r5
 8012be4:	9801      	ldr	r0, [sp, #4]
 8012be6:	f000 ff59 	bl	8013a9c <_fputwc_r>
 8012bea:	1c43      	adds	r3, r0, #1
 8012bec:	d0f0      	beq.n	8012bd0 <__sprint_r+0x3e>
 8012bee:	3601      	adds	r6, #1
 8012bf0:	e7e2      	b.n	8012bb8 <__sprint_r+0x26>
 8012bf2:	9801      	ldr	r0, [sp, #4]
 8012bf4:	f000 fd14 	bl	8013620 <__sfvwrite_r>
 8012bf8:	e7ea      	b.n	8012bd0 <__sprint_r+0x3e>
	...

08012bfc <_vfiprintf_r>:
 8012bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bfe:	b0c1      	sub	sp, #260	; 0x104
 8012c00:	001c      	movs	r4, r3
 8012c02:	001f      	movs	r7, r3
 8012c04:	9006      	str	r0, [sp, #24]
 8012c06:	9103      	str	r1, [sp, #12]
 8012c08:	9207      	str	r2, [sp, #28]
 8012c0a:	2800      	cmp	r0, #0
 8012c0c:	d004      	beq.n	8012c18 <_vfiprintf_r+0x1c>
 8012c0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d101      	bne.n	8012c18 <_vfiprintf_r+0x1c>
 8012c14:	f7fa fad6 	bl	800d1c4 <__sinit>
 8012c18:	9b03      	ldr	r3, [sp, #12]
 8012c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012c1c:	07db      	lsls	r3, r3, #31
 8012c1e:	d407      	bmi.n	8012c30 <_vfiprintf_r+0x34>
 8012c20:	9b03      	ldr	r3, [sp, #12]
 8012c22:	899b      	ldrh	r3, [r3, #12]
 8012c24:	059b      	lsls	r3, r3, #22
 8012c26:	d403      	bmi.n	8012c30 <_vfiprintf_r+0x34>
 8012c28:	9b03      	ldr	r3, [sp, #12]
 8012c2a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012c2c:	f7fa fce8 	bl	800d600 <__retarget_lock_acquire_recursive>
 8012c30:	9b03      	ldr	r3, [sp, #12]
 8012c32:	220c      	movs	r2, #12
 8012c34:	5e9a      	ldrsh	r2, [r3, r2]
 8012c36:	2380      	movs	r3, #128	; 0x80
 8012c38:	019b      	lsls	r3, r3, #6
 8012c3a:	421a      	tst	r2, r3
 8012c3c:	d107      	bne.n	8012c4e <_vfiprintf_r+0x52>
 8012c3e:	4313      	orrs	r3, r2
 8012c40:	9a03      	ldr	r2, [sp, #12]
 8012c42:	8193      	strh	r3, [r2, #12]
 8012c44:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012c46:	4aa3      	ldr	r2, [pc, #652]	; (8012ed4 <_vfiprintf_r+0x2d8>)
 8012c48:	4013      	ands	r3, r2
 8012c4a:	9a03      	ldr	r2, [sp, #12]
 8012c4c:	6653      	str	r3, [r2, #100]	; 0x64
 8012c4e:	9b03      	ldr	r3, [sp, #12]
 8012c50:	899b      	ldrh	r3, [r3, #12]
 8012c52:	071b      	lsls	r3, r3, #28
 8012c54:	d503      	bpl.n	8012c5e <_vfiprintf_r+0x62>
 8012c56:	9b03      	ldr	r3, [sp, #12]
 8012c58:	691b      	ldr	r3, [r3, #16]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d118      	bne.n	8012c90 <_vfiprintf_r+0x94>
 8012c5e:	9903      	ldr	r1, [sp, #12]
 8012c60:	9806      	ldr	r0, [sp, #24]
 8012c62:	f000 fe79 	bl	8013958 <__swsetup_r>
 8012c66:	2800      	cmp	r0, #0
 8012c68:	d012      	beq.n	8012c90 <_vfiprintf_r+0x94>
 8012c6a:	9b03      	ldr	r3, [sp, #12]
 8012c6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012c6e:	07db      	lsls	r3, r3, #31
 8012c70:	d505      	bpl.n	8012c7e <_vfiprintf_r+0x82>
 8012c72:	2301      	movs	r3, #1
 8012c74:	425b      	negs	r3, r3
 8012c76:	9308      	str	r3, [sp, #32]
 8012c78:	9808      	ldr	r0, [sp, #32]
 8012c7a:	b041      	add	sp, #260	; 0x104
 8012c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c7e:	9b03      	ldr	r3, [sp, #12]
 8012c80:	899b      	ldrh	r3, [r3, #12]
 8012c82:	059b      	lsls	r3, r3, #22
 8012c84:	d4f5      	bmi.n	8012c72 <_vfiprintf_r+0x76>
 8012c86:	9b03      	ldr	r3, [sp, #12]
 8012c88:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012c8a:	f7fa fcba 	bl	800d602 <__retarget_lock_release_recursive>
 8012c8e:	e7f0      	b.n	8012c72 <_vfiprintf_r+0x76>
 8012c90:	221a      	movs	r2, #26
 8012c92:	9b03      	ldr	r3, [sp, #12]
 8012c94:	899b      	ldrh	r3, [r3, #12]
 8012c96:	401a      	ands	r2, r3
 8012c98:	2a0a      	cmp	r2, #10
 8012c9a:	d116      	bne.n	8012cca <_vfiprintf_r+0xce>
 8012c9c:	9a03      	ldr	r2, [sp, #12]
 8012c9e:	210e      	movs	r1, #14
 8012ca0:	5e52      	ldrsh	r2, [r2, r1]
 8012ca2:	2a00      	cmp	r2, #0
 8012ca4:	db11      	blt.n	8012cca <_vfiprintf_r+0xce>
 8012ca6:	9a03      	ldr	r2, [sp, #12]
 8012ca8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8012caa:	07d2      	lsls	r2, r2, #31
 8012cac:	d405      	bmi.n	8012cba <_vfiprintf_r+0xbe>
 8012cae:	059b      	lsls	r3, r3, #22
 8012cb0:	d403      	bmi.n	8012cba <_vfiprintf_r+0xbe>
 8012cb2:	9b03      	ldr	r3, [sp, #12]
 8012cb4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012cb6:	f7fa fca4 	bl	800d602 <__retarget_lock_release_recursive>
 8012cba:	0023      	movs	r3, r4
 8012cbc:	9a07      	ldr	r2, [sp, #28]
 8012cbe:	9903      	ldr	r1, [sp, #12]
 8012cc0:	9806      	ldr	r0, [sp, #24]
 8012cc2:	f000 fc69 	bl	8013598 <__sbprintf>
 8012cc6:	9008      	str	r0, [sp, #32]
 8012cc8:	e7d6      	b.n	8012c78 <_vfiprintf_r+0x7c>
 8012cca:	2300      	movs	r3, #0
 8012ccc:	ad17      	add	r5, sp, #92	; 0x5c
 8012cce:	9514      	str	r5, [sp, #80]	; 0x50
 8012cd0:	9316      	str	r3, [sp, #88]	; 0x58
 8012cd2:	9315      	str	r3, [sp, #84]	; 0x54
 8012cd4:	930c      	str	r3, [sp, #48]	; 0x30
 8012cd6:	930d      	str	r3, [sp, #52]	; 0x34
 8012cd8:	930e      	str	r3, [sp, #56]	; 0x38
 8012cda:	930f      	str	r3, [sp, #60]	; 0x3c
 8012cdc:	9308      	str	r3, [sp, #32]
 8012cde:	9c07      	ldr	r4, [sp, #28]
 8012ce0:	7823      	ldrb	r3, [r4, #0]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d002      	beq.n	8012cec <_vfiprintf_r+0xf0>
 8012ce6:	2b25      	cmp	r3, #37	; 0x25
 8012ce8:	d000      	beq.n	8012cec <_vfiprintf_r+0xf0>
 8012cea:	e08d      	b.n	8012e08 <_vfiprintf_r+0x20c>
 8012cec:	9b07      	ldr	r3, [sp, #28]
 8012cee:	1ae6      	subs	r6, r4, r3
 8012cf0:	429c      	cmp	r4, r3
 8012cf2:	d016      	beq.n	8012d22 <_vfiprintf_r+0x126>
 8012cf4:	602b      	str	r3, [r5, #0]
 8012cf6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012cf8:	606e      	str	r6, [r5, #4]
 8012cfa:	199b      	adds	r3, r3, r6
 8012cfc:	9316      	str	r3, [sp, #88]	; 0x58
 8012cfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012d00:	3508      	adds	r5, #8
 8012d02:	3301      	adds	r3, #1
 8012d04:	9315      	str	r3, [sp, #84]	; 0x54
 8012d06:	2b07      	cmp	r3, #7
 8012d08:	dd08      	ble.n	8012d1c <_vfiprintf_r+0x120>
 8012d0a:	9903      	ldr	r1, [sp, #12]
 8012d0c:	9806      	ldr	r0, [sp, #24]
 8012d0e:	aa14      	add	r2, sp, #80	; 0x50
 8012d10:	f7ff ff3f 	bl	8012b92 <__sprint_r>
 8012d14:	2800      	cmp	r0, #0
 8012d16:	d000      	beq.n	8012d1a <_vfiprintf_r+0x11e>
 8012d18:	e3d9      	b.n	80134ce <_vfiprintf_r+0x8d2>
 8012d1a:	ad17      	add	r5, sp, #92	; 0x5c
 8012d1c:	9b08      	ldr	r3, [sp, #32]
 8012d1e:	199b      	adds	r3, r3, r6
 8012d20:	9308      	str	r3, [sp, #32]
 8012d22:	7823      	ldrb	r3, [r4, #0]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d101      	bne.n	8012d2c <_vfiprintf_r+0x130>
 8012d28:	f000 fbf6 	bl	8013518 <_vfiprintf_r+0x91c>
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	a912      	add	r1, sp, #72	; 0x48
 8012d30:	70ca      	strb	r2, [r1, #3]
 8012d32:	2101      	movs	r1, #1
 8012d34:	1c63      	adds	r3, r4, #1
 8012d36:	0014      	movs	r4, r2
 8012d38:	4249      	negs	r1, r1
 8012d3a:	9105      	str	r1, [sp, #20]
 8012d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8012d3e:	1c5a      	adds	r2, r3, #1
 8012d40:	781b      	ldrb	r3, [r3, #0]
 8012d42:	9207      	str	r2, [sp, #28]
 8012d44:	0018      	movs	r0, r3
 8012d46:	3820      	subs	r0, #32
 8012d48:	285a      	cmp	r0, #90	; 0x5a
 8012d4a:	d900      	bls.n	8012d4e <_vfiprintf_r+0x152>
 8012d4c:	e362      	b.n	8013414 <_vfiprintf_r+0x818>
 8012d4e:	f7ed f9eb 	bl	8000128 <__gnu_thumb1_case_uhi>
 8012d52:	0078      	.short	0x0078
 8012d54:	03610361 	.word	0x03610361
 8012d58:	03610081 	.word	0x03610081
 8012d5c:	03610361 	.word	0x03610361
 8012d60:	0361005d 	.word	0x0361005d
 8012d64:	00830361 	.word	0x00830361
 8012d68:	0361008b 	.word	0x0361008b
 8012d6c:	008f0089 	.word	0x008f0089
 8012d70:	00ad0361 	.word	0x00ad0361
 8012d74:	00af00af 	.word	0x00af00af
 8012d78:	00af00af 	.word	0x00af00af
 8012d7c:	00af00af 	.word	0x00af00af
 8012d80:	00af00af 	.word	0x00af00af
 8012d84:	036100af 	.word	0x036100af
 8012d88:	03610361 	.word	0x03610361
 8012d8c:	03610361 	.word	0x03610361
 8012d90:	03610361 	.word	0x03610361
 8012d94:	03610361 	.word	0x03610361
 8012d98:	00e600da 	.word	0x00e600da
 8012d9c:	03610361 	.word	0x03610361
 8012da0:	03610361 	.word	0x03610361
 8012da4:	03610361 	.word	0x03610361
 8012da8:	03610361 	.word	0x03610361
 8012dac:	03610361 	.word	0x03610361
 8012db0:	03610143 	.word	0x03610143
 8012db4:	03610361 	.word	0x03610361
 8012db8:	03610182 	.word	0x03610182
 8012dbc:	0361027c 	.word	0x0361027c
 8012dc0:	02ae0361 	.word	0x02ae0361
 8012dc4:	03610361 	.word	0x03610361
 8012dc8:	03610361 	.word	0x03610361
 8012dcc:	03610361 	.word	0x03610361
 8012dd0:	03610361 	.word	0x03610361
 8012dd4:	03610361 	.word	0x03610361
 8012dd8:	00e800da 	.word	0x00e800da
 8012ddc:	03610361 	.word	0x03610361
 8012de0:	00c30361 	.word	0x00c30361
 8012de4:	00d600e8 	.word	0x00d600e8
 8012de8:	00cf0361 	.word	0x00cf0361
 8012dec:	01260361 	.word	0x01260361
 8012df0:	01740145 	.word	0x01740145
 8012df4:	036100d6 	.word	0x036100d6
 8012df8:	007f0182 	.word	0x007f0182
 8012dfc:	0361027e 	.word	0x0361027e
 8012e00:	02cd0361 	.word	0x02cd0361
 8012e04:	007f0361 	.word	0x007f0361
 8012e08:	3401      	adds	r4, #1
 8012e0a:	e769      	b.n	8012ce0 <_vfiprintf_r+0xe4>
 8012e0c:	9806      	ldr	r0, [sp, #24]
 8012e0e:	f7fe facd 	bl	80113ac <_localeconv_r>
 8012e12:	6843      	ldr	r3, [r0, #4]
 8012e14:	0018      	movs	r0, r3
 8012e16:	930f      	str	r3, [sp, #60]	; 0x3c
 8012e18:	f7ed f974 	bl	8000104 <strlen>
 8012e1c:	900e      	str	r0, [sp, #56]	; 0x38
 8012e1e:	9806      	ldr	r0, [sp, #24]
 8012e20:	f7fe fac4 	bl	80113ac <_localeconv_r>
 8012e24:	6883      	ldr	r3, [r0, #8]
 8012e26:	930d      	str	r3, [sp, #52]	; 0x34
 8012e28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d010      	beq.n	8012e50 <_vfiprintf_r+0x254>
 8012e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d00d      	beq.n	8012e50 <_vfiprintf_r+0x254>
 8012e34:	781b      	ldrb	r3, [r3, #0]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d00a      	beq.n	8012e50 <_vfiprintf_r+0x254>
 8012e3a:	2380      	movs	r3, #128	; 0x80
 8012e3c:	00db      	lsls	r3, r3, #3
 8012e3e:	431c      	orrs	r4, r3
 8012e40:	e006      	b.n	8012e50 <_vfiprintf_r+0x254>
 8012e42:	ab12      	add	r3, sp, #72	; 0x48
 8012e44:	78da      	ldrb	r2, [r3, #3]
 8012e46:	3303      	adds	r3, #3
 8012e48:	2a00      	cmp	r2, #0
 8012e4a:	d101      	bne.n	8012e50 <_vfiprintf_r+0x254>
 8012e4c:	3220      	adds	r2, #32
 8012e4e:	701a      	strb	r2, [r3, #0]
 8012e50:	9b07      	ldr	r3, [sp, #28]
 8012e52:	e774      	b.n	8012d3e <_vfiprintf_r+0x142>
 8012e54:	2301      	movs	r3, #1
 8012e56:	e7f2      	b.n	8012e3e <_vfiprintf_r+0x242>
 8012e58:	cf08      	ldmia	r7!, {r3}
 8012e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	daf7      	bge.n	8012e50 <_vfiprintf_r+0x254>
 8012e60:	425b      	negs	r3, r3
 8012e62:	9309      	str	r3, [sp, #36]	; 0x24
 8012e64:	2304      	movs	r3, #4
 8012e66:	e7ea      	b.n	8012e3e <_vfiprintf_r+0x242>
 8012e68:	222b      	movs	r2, #43	; 0x2b
 8012e6a:	ab12      	add	r3, sp, #72	; 0x48
 8012e6c:	70da      	strb	r2, [r3, #3]
 8012e6e:	e7ef      	b.n	8012e50 <_vfiprintf_r+0x254>
 8012e70:	9b07      	ldr	r3, [sp, #28]
 8012e72:	1c5a      	adds	r2, r3, #1
 8012e74:	781b      	ldrb	r3, [r3, #0]
 8012e76:	2b2a      	cmp	r3, #42	; 0x2a
 8012e78:	d00f      	beq.n	8012e9a <_vfiprintf_r+0x29e>
 8012e7a:	2100      	movs	r1, #0
 8012e7c:	9105      	str	r1, [sp, #20]
 8012e7e:	0019      	movs	r1, r3
 8012e80:	3930      	subs	r1, #48	; 0x30
 8012e82:	9207      	str	r2, [sp, #28]
 8012e84:	2909      	cmp	r1, #9
 8012e86:	d900      	bls.n	8012e8a <_vfiprintf_r+0x28e>
 8012e88:	e75c      	b.n	8012d44 <_vfiprintf_r+0x148>
 8012e8a:	200a      	movs	r0, #10
 8012e8c:	9b05      	ldr	r3, [sp, #20]
 8012e8e:	4343      	muls	r3, r0
 8012e90:	185b      	adds	r3, r3, r1
 8012e92:	9305      	str	r3, [sp, #20]
 8012e94:	7813      	ldrb	r3, [r2, #0]
 8012e96:	3201      	adds	r2, #1
 8012e98:	e7f1      	b.n	8012e7e <_vfiprintf_r+0x282>
 8012e9a:	cf08      	ldmia	r7!, {r3}
 8012e9c:	9305      	str	r3, [sp, #20]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	da02      	bge.n	8012ea8 <_vfiprintf_r+0x2ac>
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	425b      	negs	r3, r3
 8012ea6:	9305      	str	r3, [sp, #20]
 8012ea8:	9207      	str	r2, [sp, #28]
 8012eaa:	e7d1      	b.n	8012e50 <_vfiprintf_r+0x254>
 8012eac:	2380      	movs	r3, #128	; 0x80
 8012eae:	e7c6      	b.n	8012e3e <_vfiprintf_r+0x242>
 8012eb0:	2100      	movs	r1, #0
 8012eb2:	9a07      	ldr	r2, [sp, #28]
 8012eb4:	9109      	str	r1, [sp, #36]	; 0x24
 8012eb6:	200a      	movs	r0, #10
 8012eb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012eba:	3b30      	subs	r3, #48	; 0x30
 8012ebc:	4341      	muls	r1, r0
 8012ebe:	185b      	adds	r3, r3, r1
 8012ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8012ec2:	0013      	movs	r3, r2
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	3201      	adds	r2, #1
 8012ec8:	0019      	movs	r1, r3
 8012eca:	3930      	subs	r1, #48	; 0x30
 8012ecc:	9207      	str	r2, [sp, #28]
 8012ece:	2909      	cmp	r1, #9
 8012ed0:	d9f1      	bls.n	8012eb6 <_vfiprintf_r+0x2ba>
 8012ed2:	e737      	b.n	8012d44 <_vfiprintf_r+0x148>
 8012ed4:	ffffdfff 	.word	0xffffdfff
 8012ed8:	9b07      	ldr	r3, [sp, #28]
 8012eda:	781b      	ldrb	r3, [r3, #0]
 8012edc:	2b68      	cmp	r3, #104	; 0x68
 8012ede:	d105      	bne.n	8012eec <_vfiprintf_r+0x2f0>
 8012ee0:	9b07      	ldr	r3, [sp, #28]
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	9307      	str	r3, [sp, #28]
 8012ee6:	2380      	movs	r3, #128	; 0x80
 8012ee8:	009b      	lsls	r3, r3, #2
 8012eea:	e7a8      	b.n	8012e3e <_vfiprintf_r+0x242>
 8012eec:	2340      	movs	r3, #64	; 0x40
 8012eee:	e7a6      	b.n	8012e3e <_vfiprintf_r+0x242>
 8012ef0:	9b07      	ldr	r3, [sp, #28]
 8012ef2:	781b      	ldrb	r3, [r3, #0]
 8012ef4:	2b6c      	cmp	r3, #108	; 0x6c
 8012ef6:	d104      	bne.n	8012f02 <_vfiprintf_r+0x306>
 8012ef8:	9b07      	ldr	r3, [sp, #28]
 8012efa:	3301      	adds	r3, #1
 8012efc:	9307      	str	r3, [sp, #28]
 8012efe:	2320      	movs	r3, #32
 8012f00:	e79d      	b.n	8012e3e <_vfiprintf_r+0x242>
 8012f02:	2310      	movs	r3, #16
 8012f04:	e79b      	b.n	8012e3e <_vfiprintf_r+0x242>
 8012f06:	003a      	movs	r2, r7
 8012f08:	ca08      	ldmia	r2!, {r3}
 8012f0a:	ae27      	add	r6, sp, #156	; 0x9c
 8012f0c:	7033      	strb	r3, [r6, #0]
 8012f0e:	2300      	movs	r3, #0
 8012f10:	9204      	str	r2, [sp, #16]
 8012f12:	aa12      	add	r2, sp, #72	; 0x48
 8012f14:	70d3      	strb	r3, [r2, #3]
 8012f16:	2201      	movs	r2, #1
 8012f18:	930b      	str	r3, [sp, #44]	; 0x2c
 8012f1a:	9205      	str	r2, [sp, #20]
 8012f1c:	e0b0      	b.n	8013080 <_vfiprintf_r+0x484>
 8012f1e:	2310      	movs	r3, #16
 8012f20:	431c      	orrs	r4, r3
 8012f22:	06a3      	lsls	r3, r4, #26
 8012f24:	d52a      	bpl.n	8012f7c <_vfiprintf_r+0x380>
 8012f26:	2307      	movs	r3, #7
 8012f28:	3707      	adds	r7, #7
 8012f2a:	439f      	bics	r7, r3
 8012f2c:	0039      	movs	r1, r7
 8012f2e:	c90c      	ldmia	r1!, {r2, r3}
 8012f30:	9200      	str	r2, [sp, #0]
 8012f32:	9301      	str	r3, [sp, #4]
 8012f34:	9104      	str	r1, [sp, #16]
 8012f36:	9a01      	ldr	r2, [sp, #4]
 8012f38:	2301      	movs	r3, #1
 8012f3a:	2a00      	cmp	r2, #0
 8012f3c:	da09      	bge.n	8012f52 <_vfiprintf_r+0x356>
 8012f3e:	9e00      	ldr	r6, [sp, #0]
 8012f40:	9f01      	ldr	r7, [sp, #4]
 8012f42:	2200      	movs	r2, #0
 8012f44:	4271      	negs	r1, r6
 8012f46:	41ba      	sbcs	r2, r7
 8012f48:	9100      	str	r1, [sp, #0]
 8012f4a:	9201      	str	r2, [sp, #4]
 8012f4c:	212d      	movs	r1, #45	; 0x2d
 8012f4e:	aa12      	add	r2, sp, #72	; 0x48
 8012f50:	70d1      	strb	r1, [r2, #3]
 8012f52:	9901      	ldr	r1, [sp, #4]
 8012f54:	9a00      	ldr	r2, [sp, #0]
 8012f56:	430a      	orrs	r2, r1
 8012f58:	9905      	ldr	r1, [sp, #20]
 8012f5a:	3101      	adds	r1, #1
 8012f5c:	d100      	bne.n	8012f60 <_vfiprintf_r+0x364>
 8012f5e:	e2e9      	b.n	8013534 <_vfiprintf_r+0x938>
 8012f60:	2180      	movs	r1, #128	; 0x80
 8012f62:	0027      	movs	r7, r4
 8012f64:	438f      	bics	r7, r1
 8012f66:	2a00      	cmp	r2, #0
 8012f68:	d000      	beq.n	8012f6c <_vfiprintf_r+0x370>
 8012f6a:	e2e7      	b.n	801353c <_vfiprintf_r+0x940>
 8012f6c:	9a05      	ldr	r2, [sp, #20]
 8012f6e:	2a00      	cmp	r2, #0
 8012f70:	d100      	bne.n	8012f74 <_vfiprintf_r+0x378>
 8012f72:	e243      	b.n	80133fc <_vfiprintf_r+0x800>
 8012f74:	2b01      	cmp	r3, #1
 8012f76:	d000      	beq.n	8012f7a <_vfiprintf_r+0x37e>
 8012f78:	e2e3      	b.n	8013542 <_vfiprintf_r+0x946>
 8012f7a:	e1e7      	b.n	801334c <_vfiprintf_r+0x750>
 8012f7c:	003a      	movs	r2, r7
 8012f7e:	ca08      	ldmia	r2!, {r3}
 8012f80:	9204      	str	r2, [sp, #16]
 8012f82:	06e2      	lsls	r2, r4, #27
 8012f84:	d503      	bpl.n	8012f8e <_vfiprintf_r+0x392>
 8012f86:	9300      	str	r3, [sp, #0]
 8012f88:	17db      	asrs	r3, r3, #31
 8012f8a:	9301      	str	r3, [sp, #4]
 8012f8c:	e7d3      	b.n	8012f36 <_vfiprintf_r+0x33a>
 8012f8e:	0662      	lsls	r2, r4, #25
 8012f90:	d501      	bpl.n	8012f96 <_vfiprintf_r+0x39a>
 8012f92:	b21b      	sxth	r3, r3
 8012f94:	e7f7      	b.n	8012f86 <_vfiprintf_r+0x38a>
 8012f96:	05a2      	lsls	r2, r4, #22
 8012f98:	d5f5      	bpl.n	8012f86 <_vfiprintf_r+0x38a>
 8012f9a:	b25b      	sxtb	r3, r3
 8012f9c:	e7f3      	b.n	8012f86 <_vfiprintf_r+0x38a>
 8012f9e:	1d3b      	adds	r3, r7, #4
 8012fa0:	9304      	str	r3, [sp, #16]
 8012fa2:	06a3      	lsls	r3, r4, #26
 8012fa4:	d506      	bpl.n	8012fb4 <_vfiprintf_r+0x3b8>
 8012fa6:	683b      	ldr	r3, [r7, #0]
 8012fa8:	9a08      	ldr	r2, [sp, #32]
 8012faa:	601a      	str	r2, [r3, #0]
 8012fac:	17d2      	asrs	r2, r2, #31
 8012fae:	605a      	str	r2, [r3, #4]
 8012fb0:	9f04      	ldr	r7, [sp, #16]
 8012fb2:	e694      	b.n	8012cde <_vfiprintf_r+0xe2>
 8012fb4:	06e3      	lsls	r3, r4, #27
 8012fb6:	d503      	bpl.n	8012fc0 <_vfiprintf_r+0x3c4>
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	9a08      	ldr	r2, [sp, #32]
 8012fbc:	601a      	str	r2, [r3, #0]
 8012fbe:	e7f7      	b.n	8012fb0 <_vfiprintf_r+0x3b4>
 8012fc0:	0663      	lsls	r3, r4, #25
 8012fc2:	d503      	bpl.n	8012fcc <_vfiprintf_r+0x3d0>
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	9a08      	ldr	r2, [sp, #32]
 8012fc8:	801a      	strh	r2, [r3, #0]
 8012fca:	e7f1      	b.n	8012fb0 <_vfiprintf_r+0x3b4>
 8012fcc:	05a4      	lsls	r4, r4, #22
 8012fce:	d5f3      	bpl.n	8012fb8 <_vfiprintf_r+0x3bc>
 8012fd0:	683b      	ldr	r3, [r7, #0]
 8012fd2:	9a08      	ldr	r2, [sp, #32]
 8012fd4:	701a      	strb	r2, [r3, #0]
 8012fd6:	e7eb      	b.n	8012fb0 <_vfiprintf_r+0x3b4>
 8012fd8:	2310      	movs	r3, #16
 8012fda:	431c      	orrs	r4, r3
 8012fdc:	2320      	movs	r3, #32
 8012fde:	0020      	movs	r0, r4
 8012fe0:	4018      	ands	r0, r3
 8012fe2:	421c      	tst	r4, r3
 8012fe4:	d00d      	beq.n	8013002 <_vfiprintf_r+0x406>
 8012fe6:	3b19      	subs	r3, #25
 8012fe8:	3707      	adds	r7, #7
 8012fea:	439f      	bics	r7, r3
 8012fec:	0039      	movs	r1, r7
 8012fee:	c90c      	ldmia	r1!, {r2, r3}
 8012ff0:	9200      	str	r2, [sp, #0]
 8012ff2:	9301      	str	r3, [sp, #4]
 8012ff4:	9104      	str	r1, [sp, #16]
 8012ff6:	4bcc      	ldr	r3, [pc, #816]	; (8013328 <_vfiprintf_r+0x72c>)
 8012ff8:	401c      	ands	r4, r3
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	2100      	movs	r1, #0
 8012ffe:	aa12      	add	r2, sp, #72	; 0x48
 8013000:	e7a6      	b.n	8012f50 <_vfiprintf_r+0x354>
 8013002:	003a      	movs	r2, r7
 8013004:	ca08      	ldmia	r2!, {r3}
 8013006:	0021      	movs	r1, r4
 8013008:	9204      	str	r2, [sp, #16]
 801300a:	2210      	movs	r2, #16
 801300c:	4011      	ands	r1, r2
 801300e:	4214      	tst	r4, r2
 8013010:	d002      	beq.n	8013018 <_vfiprintf_r+0x41c>
 8013012:	9300      	str	r3, [sp, #0]
 8013014:	9001      	str	r0, [sp, #4]
 8013016:	e7ee      	b.n	8012ff6 <_vfiprintf_r+0x3fa>
 8013018:	2240      	movs	r2, #64	; 0x40
 801301a:	0020      	movs	r0, r4
 801301c:	4010      	ands	r0, r2
 801301e:	4214      	tst	r4, r2
 8013020:	d003      	beq.n	801302a <_vfiprintf_r+0x42e>
 8013022:	b29b      	uxth	r3, r3
 8013024:	9300      	str	r3, [sp, #0]
 8013026:	9101      	str	r1, [sp, #4]
 8013028:	e7e5      	b.n	8012ff6 <_vfiprintf_r+0x3fa>
 801302a:	2280      	movs	r2, #128	; 0x80
 801302c:	0021      	movs	r1, r4
 801302e:	0092      	lsls	r2, r2, #2
 8013030:	4011      	ands	r1, r2
 8013032:	4214      	tst	r4, r2
 8013034:	d0f6      	beq.n	8013024 <_vfiprintf_r+0x428>
 8013036:	b2db      	uxtb	r3, r3
 8013038:	e7eb      	b.n	8013012 <_vfiprintf_r+0x416>
 801303a:	003b      	movs	r3, r7
 801303c:	cb04      	ldmia	r3!, {r2}
 801303e:	49bb      	ldr	r1, [pc, #748]	; (801332c <_vfiprintf_r+0x730>)
 8013040:	9304      	str	r3, [sp, #16]
 8013042:	2300      	movs	r3, #0
 8013044:	9200      	str	r2, [sp, #0]
 8013046:	aa13      	add	r2, sp, #76	; 0x4c
 8013048:	8011      	strh	r1, [r2, #0]
 801304a:	4ab9      	ldr	r2, [pc, #740]	; (8013330 <_vfiprintf_r+0x734>)
 801304c:	9301      	str	r3, [sp, #4]
 801304e:	3302      	adds	r3, #2
 8013050:	431c      	orrs	r4, r3
 8013052:	920c      	str	r2, [sp, #48]	; 0x30
 8013054:	e7d2      	b.n	8012ffc <_vfiprintf_r+0x400>
 8013056:	003b      	movs	r3, r7
 8013058:	2700      	movs	r7, #0
 801305a:	cb40      	ldmia	r3!, {r6}
 801305c:	9304      	str	r3, [sp, #16]
 801305e:	ab12      	add	r3, sp, #72	; 0x48
 8013060:	70df      	strb	r7, [r3, #3]
 8013062:	9b05      	ldr	r3, [sp, #20]
 8013064:	3301      	adds	r3, #1
 8013066:	d100      	bne.n	801306a <_vfiprintf_r+0x46e>
 8013068:	e0ea      	b.n	8013240 <_vfiprintf_r+0x644>
 801306a:	0039      	movs	r1, r7
 801306c:	0030      	movs	r0, r6
 801306e:	9a05      	ldr	r2, [sp, #20]
 8013070:	f7fe f9b4 	bl	80113dc <memchr>
 8013074:	900b      	str	r0, [sp, #44]	; 0x2c
 8013076:	42b8      	cmp	r0, r7
 8013078:	d002      	beq.n	8013080 <_vfiprintf_r+0x484>
 801307a:	1b83      	subs	r3, r0, r6
 801307c:	9305      	str	r3, [sp, #20]
 801307e:	970b      	str	r7, [sp, #44]	; 0x2c
 8013080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013082:	9a05      	ldr	r2, [sp, #20]
 8013084:	930a      	str	r3, [sp, #40]	; 0x28
 8013086:	4293      	cmp	r3, r2
 8013088:	da00      	bge.n	801308c <_vfiprintf_r+0x490>
 801308a:	920a      	str	r2, [sp, #40]	; 0x28
 801308c:	ab12      	add	r3, sp, #72	; 0x48
 801308e:	3303      	adds	r3, #3
 8013090:	781b      	ldrb	r3, [r3, #0]
 8013092:	1e5a      	subs	r2, r3, #1
 8013094:	4193      	sbcs	r3, r2
 8013096:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013098:	18d3      	adds	r3, r2, r3
 801309a:	930a      	str	r3, [sp, #40]	; 0x28
 801309c:	0022      	movs	r2, r4
 801309e:	2302      	movs	r3, #2
 80130a0:	401a      	ands	r2, r3
 80130a2:	9210      	str	r2, [sp, #64]	; 0x40
 80130a4:	421c      	tst	r4, r3
 80130a6:	d002      	beq.n	80130ae <_vfiprintf_r+0x4b2>
 80130a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130aa:	3302      	adds	r3, #2
 80130ac:	930a      	str	r3, [sp, #40]	; 0x28
 80130ae:	2384      	movs	r3, #132	; 0x84
 80130b0:	0022      	movs	r2, r4
 80130b2:	401a      	ands	r2, r3
 80130b4:	9211      	str	r2, [sp, #68]	; 0x44
 80130b6:	421c      	tst	r4, r3
 80130b8:	d11e      	bne.n	80130f8 <_vfiprintf_r+0x4fc>
 80130ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130be:	1a9f      	subs	r7, r3, r2
 80130c0:	2f00      	cmp	r7, #0
 80130c2:	dd19      	ble.n	80130f8 <_vfiprintf_r+0x4fc>
 80130c4:	0029      	movs	r1, r5
 80130c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80130c8:	489a      	ldr	r0, [pc, #616]	; (8013334 <_vfiprintf_r+0x738>)
 80130ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80130cc:	3301      	adds	r3, #1
 80130ce:	3108      	adds	r1, #8
 80130d0:	6028      	str	r0, [r5, #0]
 80130d2:	2f10      	cmp	r7, #16
 80130d4:	dd00      	ble.n	80130d8 <_vfiprintf_r+0x4dc>
 80130d6:	e1a7      	b.n	8013428 <_vfiprintf_r+0x82c>
 80130d8:	606f      	str	r7, [r5, #4]
 80130da:	18bf      	adds	r7, r7, r2
 80130dc:	000d      	movs	r5, r1
 80130de:	9716      	str	r7, [sp, #88]	; 0x58
 80130e0:	9315      	str	r3, [sp, #84]	; 0x54
 80130e2:	2b07      	cmp	r3, #7
 80130e4:	dd08      	ble.n	80130f8 <_vfiprintf_r+0x4fc>
 80130e6:	9903      	ldr	r1, [sp, #12]
 80130e8:	9806      	ldr	r0, [sp, #24]
 80130ea:	aa14      	add	r2, sp, #80	; 0x50
 80130ec:	f7ff fd51 	bl	8012b92 <__sprint_r>
 80130f0:	2800      	cmp	r0, #0
 80130f2:	d000      	beq.n	80130f6 <_vfiprintf_r+0x4fa>
 80130f4:	e1eb      	b.n	80134ce <_vfiprintf_r+0x8d2>
 80130f6:	ad17      	add	r5, sp, #92	; 0x5c
 80130f8:	a912      	add	r1, sp, #72	; 0x48
 80130fa:	78c8      	ldrb	r0, [r1, #3]
 80130fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80130fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013100:	3103      	adds	r1, #3
 8013102:	2800      	cmp	r0, #0
 8013104:	d012      	beq.n	801312c <_vfiprintf_r+0x530>
 8013106:	6029      	str	r1, [r5, #0]
 8013108:	2101      	movs	r1, #1
 801310a:	3301      	adds	r3, #1
 801310c:	1852      	adds	r2, r2, r1
 801310e:	6069      	str	r1, [r5, #4]
 8013110:	9216      	str	r2, [sp, #88]	; 0x58
 8013112:	9315      	str	r3, [sp, #84]	; 0x54
 8013114:	3508      	adds	r5, #8
 8013116:	2b07      	cmp	r3, #7
 8013118:	dd08      	ble.n	801312c <_vfiprintf_r+0x530>
 801311a:	9903      	ldr	r1, [sp, #12]
 801311c:	9806      	ldr	r0, [sp, #24]
 801311e:	aa14      	add	r2, sp, #80	; 0x50
 8013120:	f7ff fd37 	bl	8012b92 <__sprint_r>
 8013124:	2800      	cmp	r0, #0
 8013126:	d000      	beq.n	801312a <_vfiprintf_r+0x52e>
 8013128:	e1d1      	b.n	80134ce <_vfiprintf_r+0x8d2>
 801312a:	ad17      	add	r5, sp, #92	; 0x5c
 801312c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801312e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013130:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013132:	2900      	cmp	r1, #0
 8013134:	d013      	beq.n	801315e <_vfiprintf_r+0x562>
 8013136:	a913      	add	r1, sp, #76	; 0x4c
 8013138:	6029      	str	r1, [r5, #0]
 801313a:	2102      	movs	r1, #2
 801313c:	3301      	adds	r3, #1
 801313e:	1852      	adds	r2, r2, r1
 8013140:	6069      	str	r1, [r5, #4]
 8013142:	9216      	str	r2, [sp, #88]	; 0x58
 8013144:	9315      	str	r3, [sp, #84]	; 0x54
 8013146:	3508      	adds	r5, #8
 8013148:	2b07      	cmp	r3, #7
 801314a:	dd08      	ble.n	801315e <_vfiprintf_r+0x562>
 801314c:	9903      	ldr	r1, [sp, #12]
 801314e:	9806      	ldr	r0, [sp, #24]
 8013150:	aa14      	add	r2, sp, #80	; 0x50
 8013152:	f7ff fd1e 	bl	8012b92 <__sprint_r>
 8013156:	2800      	cmp	r0, #0
 8013158:	d000      	beq.n	801315c <_vfiprintf_r+0x560>
 801315a:	e1b8      	b.n	80134ce <_vfiprintf_r+0x8d2>
 801315c:	ad17      	add	r5, sp, #92	; 0x5c
 801315e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013160:	2b80      	cmp	r3, #128	; 0x80
 8013162:	d11e      	bne.n	80131a2 <_vfiprintf_r+0x5a6>
 8013164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013168:	1a9f      	subs	r7, r3, r2
 801316a:	2f00      	cmp	r7, #0
 801316c:	dd19      	ble.n	80131a2 <_vfiprintf_r+0x5a6>
 801316e:	0029      	movs	r1, r5
 8013170:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013172:	4871      	ldr	r0, [pc, #452]	; (8013338 <_vfiprintf_r+0x73c>)
 8013174:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013176:	3301      	adds	r3, #1
 8013178:	3108      	adds	r1, #8
 801317a:	6028      	str	r0, [r5, #0]
 801317c:	2f10      	cmp	r7, #16
 801317e:	dd00      	ble.n	8013182 <_vfiprintf_r+0x586>
 8013180:	e164      	b.n	801344c <_vfiprintf_r+0x850>
 8013182:	606f      	str	r7, [r5, #4]
 8013184:	18bf      	adds	r7, r7, r2
 8013186:	000d      	movs	r5, r1
 8013188:	9716      	str	r7, [sp, #88]	; 0x58
 801318a:	9315      	str	r3, [sp, #84]	; 0x54
 801318c:	2b07      	cmp	r3, #7
 801318e:	dd08      	ble.n	80131a2 <_vfiprintf_r+0x5a6>
 8013190:	9903      	ldr	r1, [sp, #12]
 8013192:	9806      	ldr	r0, [sp, #24]
 8013194:	aa14      	add	r2, sp, #80	; 0x50
 8013196:	f7ff fcfc 	bl	8012b92 <__sprint_r>
 801319a:	2800      	cmp	r0, #0
 801319c:	d000      	beq.n	80131a0 <_vfiprintf_r+0x5a4>
 801319e:	e196      	b.n	80134ce <_vfiprintf_r+0x8d2>
 80131a0:	ad17      	add	r5, sp, #92	; 0x5c
 80131a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131a4:	9a05      	ldr	r2, [sp, #20]
 80131a6:	1a9f      	subs	r7, r3, r2
 80131a8:	2f00      	cmp	r7, #0
 80131aa:	dd19      	ble.n	80131e0 <_vfiprintf_r+0x5e4>
 80131ac:	0029      	movs	r1, r5
 80131ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131b0:	4861      	ldr	r0, [pc, #388]	; (8013338 <_vfiprintf_r+0x73c>)
 80131b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80131b4:	3301      	adds	r3, #1
 80131b6:	3108      	adds	r1, #8
 80131b8:	6028      	str	r0, [r5, #0]
 80131ba:	2f10      	cmp	r7, #16
 80131bc:	dd00      	ble.n	80131c0 <_vfiprintf_r+0x5c4>
 80131be:	e157      	b.n	8013470 <_vfiprintf_r+0x874>
 80131c0:	606f      	str	r7, [r5, #4]
 80131c2:	18bf      	adds	r7, r7, r2
 80131c4:	000d      	movs	r5, r1
 80131c6:	9716      	str	r7, [sp, #88]	; 0x58
 80131c8:	9315      	str	r3, [sp, #84]	; 0x54
 80131ca:	2b07      	cmp	r3, #7
 80131cc:	dd08      	ble.n	80131e0 <_vfiprintf_r+0x5e4>
 80131ce:	9903      	ldr	r1, [sp, #12]
 80131d0:	9806      	ldr	r0, [sp, #24]
 80131d2:	aa14      	add	r2, sp, #80	; 0x50
 80131d4:	f7ff fcdd 	bl	8012b92 <__sprint_r>
 80131d8:	2800      	cmp	r0, #0
 80131da:	d000      	beq.n	80131de <_vfiprintf_r+0x5e2>
 80131dc:	e177      	b.n	80134ce <_vfiprintf_r+0x8d2>
 80131de:	ad17      	add	r5, sp, #92	; 0x5c
 80131e0:	9b05      	ldr	r3, [sp, #20]
 80131e2:	9a05      	ldr	r2, [sp, #20]
 80131e4:	606b      	str	r3, [r5, #4]
 80131e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80131e8:	602e      	str	r6, [r5, #0]
 80131ea:	189b      	adds	r3, r3, r2
 80131ec:	9316      	str	r3, [sp, #88]	; 0x58
 80131ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131f0:	3508      	adds	r5, #8
 80131f2:	3301      	adds	r3, #1
 80131f4:	9315      	str	r3, [sp, #84]	; 0x54
 80131f6:	2b07      	cmp	r3, #7
 80131f8:	dd08      	ble.n	801320c <_vfiprintf_r+0x610>
 80131fa:	9903      	ldr	r1, [sp, #12]
 80131fc:	9806      	ldr	r0, [sp, #24]
 80131fe:	aa14      	add	r2, sp, #80	; 0x50
 8013200:	f7ff fcc7 	bl	8012b92 <__sprint_r>
 8013204:	2800      	cmp	r0, #0
 8013206:	d000      	beq.n	801320a <_vfiprintf_r+0x60e>
 8013208:	e161      	b.n	80134ce <_vfiprintf_r+0x8d2>
 801320a:	ad17      	add	r5, sp, #92	; 0x5c
 801320c:	0764      	lsls	r4, r4, #29
 801320e:	d500      	bpl.n	8013212 <_vfiprintf_r+0x616>
 8013210:	e140      	b.n	8013494 <_vfiprintf_r+0x898>
 8013212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013216:	4293      	cmp	r3, r2
 8013218:	da00      	bge.n	801321c <_vfiprintf_r+0x620>
 801321a:	0013      	movs	r3, r2
 801321c:	9a08      	ldr	r2, [sp, #32]
 801321e:	18d3      	adds	r3, r2, r3
 8013220:	9308      	str	r3, [sp, #32]
 8013222:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013224:	2b00      	cmp	r3, #0
 8013226:	d007      	beq.n	8013238 <_vfiprintf_r+0x63c>
 8013228:	9903      	ldr	r1, [sp, #12]
 801322a:	9806      	ldr	r0, [sp, #24]
 801322c:	aa14      	add	r2, sp, #80	; 0x50
 801322e:	f7ff fcb0 	bl	8012b92 <__sprint_r>
 8013232:	2800      	cmp	r0, #0
 8013234:	d000      	beq.n	8013238 <_vfiprintf_r+0x63c>
 8013236:	e14a      	b.n	80134ce <_vfiprintf_r+0x8d2>
 8013238:	2300      	movs	r3, #0
 801323a:	ad17      	add	r5, sp, #92	; 0x5c
 801323c:	9315      	str	r3, [sp, #84]	; 0x54
 801323e:	e6b7      	b.n	8012fb0 <_vfiprintf_r+0x3b4>
 8013240:	0030      	movs	r0, r6
 8013242:	f7ec ff5f 	bl	8000104 <strlen>
 8013246:	9005      	str	r0, [sp, #20]
 8013248:	e719      	b.n	801307e <_vfiprintf_r+0x482>
 801324a:	2310      	movs	r3, #16
 801324c:	431c      	orrs	r4, r3
 801324e:	2320      	movs	r3, #32
 8013250:	0020      	movs	r0, r4
 8013252:	4018      	ands	r0, r3
 8013254:	421c      	tst	r4, r3
 8013256:	d009      	beq.n	801326c <_vfiprintf_r+0x670>
 8013258:	3b19      	subs	r3, #25
 801325a:	3707      	adds	r7, #7
 801325c:	439f      	bics	r7, r3
 801325e:	0039      	movs	r1, r7
 8013260:	c90c      	ldmia	r1!, {r2, r3}
 8013262:	9200      	str	r2, [sp, #0]
 8013264:	9301      	str	r3, [sp, #4]
 8013266:	9104      	str	r1, [sp, #16]
 8013268:	2301      	movs	r3, #1
 801326a:	e6c7      	b.n	8012ffc <_vfiprintf_r+0x400>
 801326c:	003b      	movs	r3, r7
 801326e:	cb04      	ldmia	r3!, {r2}
 8013270:	0021      	movs	r1, r4
 8013272:	9304      	str	r3, [sp, #16]
 8013274:	2310      	movs	r3, #16
 8013276:	4019      	ands	r1, r3
 8013278:	421c      	tst	r4, r3
 801327a:	d003      	beq.n	8013284 <_vfiprintf_r+0x688>
 801327c:	9200      	str	r2, [sp, #0]
 801327e:	9001      	str	r0, [sp, #4]
 8013280:	3b0f      	subs	r3, #15
 8013282:	e6bb      	b.n	8012ffc <_vfiprintf_r+0x400>
 8013284:	2340      	movs	r3, #64	; 0x40
 8013286:	0020      	movs	r0, r4
 8013288:	4018      	ands	r0, r3
 801328a:	421c      	tst	r4, r3
 801328c:	d003      	beq.n	8013296 <_vfiprintf_r+0x69a>
 801328e:	b293      	uxth	r3, r2
 8013290:	9300      	str	r3, [sp, #0]
 8013292:	9101      	str	r1, [sp, #4]
 8013294:	e7e8      	b.n	8013268 <_vfiprintf_r+0x66c>
 8013296:	2380      	movs	r3, #128	; 0x80
 8013298:	0021      	movs	r1, r4
 801329a:	009b      	lsls	r3, r3, #2
 801329c:	4019      	ands	r1, r3
 801329e:	421c      	tst	r4, r3
 80132a0:	d003      	beq.n	80132aa <_vfiprintf_r+0x6ae>
 80132a2:	b2d3      	uxtb	r3, r2
 80132a4:	9300      	str	r3, [sp, #0]
 80132a6:	9001      	str	r0, [sp, #4]
 80132a8:	e7de      	b.n	8013268 <_vfiprintf_r+0x66c>
 80132aa:	9200      	str	r2, [sp, #0]
 80132ac:	e7f1      	b.n	8013292 <_vfiprintf_r+0x696>
 80132ae:	4a23      	ldr	r2, [pc, #140]	; (801333c <_vfiprintf_r+0x740>)
 80132b0:	0020      	movs	r0, r4
 80132b2:	920c      	str	r2, [sp, #48]	; 0x30
 80132b4:	2220      	movs	r2, #32
 80132b6:	4010      	ands	r0, r2
 80132b8:	4214      	tst	r4, r2
 80132ba:	d019      	beq.n	80132f0 <_vfiprintf_r+0x6f4>
 80132bc:	3a19      	subs	r2, #25
 80132be:	3707      	adds	r7, #7
 80132c0:	4397      	bics	r7, r2
 80132c2:	0038      	movs	r0, r7
 80132c4:	c806      	ldmia	r0!, {r1, r2}
 80132c6:	9100      	str	r1, [sp, #0]
 80132c8:	9201      	str	r2, [sp, #4]
 80132ca:	9004      	str	r0, [sp, #16]
 80132cc:	07e2      	lsls	r2, r4, #31
 80132ce:	d509      	bpl.n	80132e4 <_vfiprintf_r+0x6e8>
 80132d0:	9a00      	ldr	r2, [sp, #0]
 80132d2:	9901      	ldr	r1, [sp, #4]
 80132d4:	430a      	orrs	r2, r1
 80132d6:	d005      	beq.n	80132e4 <_vfiprintf_r+0x6e8>
 80132d8:	aa13      	add	r2, sp, #76	; 0x4c
 80132da:	2130      	movs	r1, #48	; 0x30
 80132dc:	7053      	strb	r3, [r2, #1]
 80132de:	2302      	movs	r3, #2
 80132e0:	7011      	strb	r1, [r2, #0]
 80132e2:	431c      	orrs	r4, r3
 80132e4:	4b10      	ldr	r3, [pc, #64]	; (8013328 <_vfiprintf_r+0x72c>)
 80132e6:	401c      	ands	r4, r3
 80132e8:	2302      	movs	r3, #2
 80132ea:	e687      	b.n	8012ffc <_vfiprintf_r+0x400>
 80132ec:	4a10      	ldr	r2, [pc, #64]	; (8013330 <_vfiprintf_r+0x734>)
 80132ee:	e7df      	b.n	80132b0 <_vfiprintf_r+0x6b4>
 80132f0:	0039      	movs	r1, r7
 80132f2:	c904      	ldmia	r1!, {r2}
 80132f4:	0026      	movs	r6, r4
 80132f6:	9104      	str	r1, [sp, #16]
 80132f8:	2110      	movs	r1, #16
 80132fa:	400e      	ands	r6, r1
 80132fc:	420c      	tst	r4, r1
 80132fe:	d002      	beq.n	8013306 <_vfiprintf_r+0x70a>
 8013300:	9200      	str	r2, [sp, #0]
 8013302:	9001      	str	r0, [sp, #4]
 8013304:	e7e2      	b.n	80132cc <_vfiprintf_r+0x6d0>
 8013306:	2140      	movs	r1, #64	; 0x40
 8013308:	0020      	movs	r0, r4
 801330a:	4008      	ands	r0, r1
 801330c:	420c      	tst	r4, r1
 801330e:	d003      	beq.n	8013318 <_vfiprintf_r+0x71c>
 8013310:	b292      	uxth	r2, r2
 8013312:	9200      	str	r2, [sp, #0]
 8013314:	9601      	str	r6, [sp, #4]
 8013316:	e7d9      	b.n	80132cc <_vfiprintf_r+0x6d0>
 8013318:	2180      	movs	r1, #128	; 0x80
 801331a:	0026      	movs	r6, r4
 801331c:	0089      	lsls	r1, r1, #2
 801331e:	400e      	ands	r6, r1
 8013320:	420c      	tst	r4, r1
 8013322:	d0f6      	beq.n	8013312 <_vfiprintf_r+0x716>
 8013324:	b2d2      	uxtb	r2, r2
 8013326:	e7eb      	b.n	8013300 <_vfiprintf_r+0x704>
 8013328:	fffffbff 	.word	0xfffffbff
 801332c:	00007830 	.word	0x00007830
 8013330:	08015e1c 	.word	0x08015e1c
 8013334:	08015f29 	.word	0x08015f29
 8013338:	08015f39 	.word	0x08015f39
 801333c:	08015e2d 	.word	0x08015e2d
 8013340:	9b01      	ldr	r3, [sp, #4]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d109      	bne.n	801335a <_vfiprintf_r+0x75e>
 8013346:	9b00      	ldr	r3, [sp, #0]
 8013348:	2b09      	cmp	r3, #9
 801334a:	d806      	bhi.n	801335a <_vfiprintf_r+0x75e>
 801334c:	26b7      	movs	r6, #183	; 0xb7
 801334e:	ab12      	add	r3, sp, #72	; 0x48
 8013350:	18f6      	adds	r6, r6, r3
 8013352:	9b00      	ldr	r3, [sp, #0]
 8013354:	3330      	adds	r3, #48	; 0x30
 8013356:	7033      	strb	r3, [r6, #0]
 8013358:	e115      	b.n	8013586 <_vfiprintf_r+0x98a>
 801335a:	2380      	movs	r3, #128	; 0x80
 801335c:	2400      	movs	r4, #0
 801335e:	00db      	lsls	r3, r3, #3
 8013360:	403b      	ands	r3, r7
 8013362:	ae40      	add	r6, sp, #256	; 0x100
 8013364:	930a      	str	r3, [sp, #40]	; 0x28
 8013366:	220a      	movs	r2, #10
 8013368:	9800      	ldr	r0, [sp, #0]
 801336a:	9901      	ldr	r1, [sp, #4]
 801336c:	2300      	movs	r3, #0
 801336e:	f7ed f899 	bl	80004a4 <__aeabi_uldivmod>
 8013372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013374:	3e01      	subs	r6, #1
 8013376:	3230      	adds	r2, #48	; 0x30
 8013378:	900b      	str	r0, [sp, #44]	; 0x2c
 801337a:	9110      	str	r1, [sp, #64]	; 0x40
 801337c:	7032      	strb	r2, [r6, #0]
 801337e:	3401      	adds	r4, #1
 8013380:	2b00      	cmp	r3, #0
 8013382:	d01a      	beq.n	80133ba <_vfiprintf_r+0x7be>
 8013384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	42a3      	cmp	r3, r4
 801338a:	d116      	bne.n	80133ba <_vfiprintf_r+0x7be>
 801338c:	2cff      	cmp	r4, #255	; 0xff
 801338e:	d014      	beq.n	80133ba <_vfiprintf_r+0x7be>
 8013390:	9b01      	ldr	r3, [sp, #4]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d102      	bne.n	801339c <_vfiprintf_r+0x7a0>
 8013396:	9b00      	ldr	r3, [sp, #0]
 8013398:	2b09      	cmp	r3, #9
 801339a:	d90e      	bls.n	80133ba <_vfiprintf_r+0x7be>
 801339c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801339e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80133a0:	1af6      	subs	r6, r6, r3
 80133a2:	001a      	movs	r2, r3
 80133a4:	0030      	movs	r0, r6
 80133a6:	f7fa f832 	bl	800d40e <strncpy>
 80133aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133ac:	2400      	movs	r4, #0
 80133ae:	785b      	ldrb	r3, [r3, #1]
 80133b0:	1e5a      	subs	r2, r3, #1
 80133b2:	4193      	sbcs	r3, r2
 80133b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80133b6:	18d3      	adds	r3, r2, r3
 80133b8:	930d      	str	r3, [sp, #52]	; 0x34
 80133ba:	9b01      	ldr	r3, [sp, #4]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d103      	bne.n	80133c8 <_vfiprintf_r+0x7cc>
 80133c0:	9b00      	ldr	r3, [sp, #0]
 80133c2:	2b09      	cmp	r3, #9
 80133c4:	d800      	bhi.n	80133c8 <_vfiprintf_r+0x7cc>
 80133c6:	e0de      	b.n	8013586 <_vfiprintf_r+0x98a>
 80133c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133ca:	9300      	str	r3, [sp, #0]
 80133cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80133ce:	9301      	str	r3, [sp, #4]
 80133d0:	e7c9      	b.n	8013366 <_vfiprintf_r+0x76a>
 80133d2:	200f      	movs	r0, #15
 80133d4:	9b00      	ldr	r3, [sp, #0]
 80133d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80133d8:	4003      	ands	r3, r0
 80133da:	5cd3      	ldrb	r3, [r2, r3]
 80133dc:	3e01      	subs	r6, #1
 80133de:	7033      	strb	r3, [r6, #0]
 80133e0:	9b01      	ldr	r3, [sp, #4]
 80133e2:	0719      	lsls	r1, r3, #28
 80133e4:	9b00      	ldr	r3, [sp, #0]
 80133e6:	091a      	lsrs	r2, r3, #4
 80133e8:	9b01      	ldr	r3, [sp, #4]
 80133ea:	4311      	orrs	r1, r2
 80133ec:	091b      	lsrs	r3, r3, #4
 80133ee:	9301      	str	r3, [sp, #4]
 80133f0:	000b      	movs	r3, r1
 80133f2:	9a01      	ldr	r2, [sp, #4]
 80133f4:	9100      	str	r1, [sp, #0]
 80133f6:	4313      	orrs	r3, r2
 80133f8:	d1ec      	bne.n	80133d4 <_vfiprintf_r+0x7d8>
 80133fa:	e0c4      	b.n	8013586 <_vfiprintf_r+0x98a>
 80133fc:	ae40      	add	r6, sp, #256	; 0x100
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d000      	beq.n	8013404 <_vfiprintf_r+0x808>
 8013402:	e0c0      	b.n	8013586 <_vfiprintf_r+0x98a>
 8013404:	07e4      	lsls	r4, r4, #31
 8013406:	d400      	bmi.n	801340a <_vfiprintf_r+0x80e>
 8013408:	e0bd      	b.n	8013586 <_vfiprintf_r+0x98a>
 801340a:	26b7      	movs	r6, #183	; 0xb7
 801340c:	ab12      	add	r3, sp, #72	; 0x48
 801340e:	18f6      	adds	r6, r6, r3
 8013410:	2330      	movs	r3, #48	; 0x30
 8013412:	e7a0      	b.n	8013356 <_vfiprintf_r+0x75a>
 8013414:	2b00      	cmp	r3, #0
 8013416:	d100      	bne.n	801341a <_vfiprintf_r+0x81e>
 8013418:	e07e      	b.n	8013518 <_vfiprintf_r+0x91c>
 801341a:	ae27      	add	r6, sp, #156	; 0x9c
 801341c:	7033      	strb	r3, [r6, #0]
 801341e:	2300      	movs	r3, #0
 8013420:	aa12      	add	r2, sp, #72	; 0x48
 8013422:	70d3      	strb	r3, [r2, #3]
 8013424:	9704      	str	r7, [sp, #16]
 8013426:	e576      	b.n	8012f16 <_vfiprintf_r+0x31a>
 8013428:	2010      	movs	r0, #16
 801342a:	1812      	adds	r2, r2, r0
 801342c:	6068      	str	r0, [r5, #4]
 801342e:	9216      	str	r2, [sp, #88]	; 0x58
 8013430:	9315      	str	r3, [sp, #84]	; 0x54
 8013432:	2b07      	cmp	r3, #7
 8013434:	dd07      	ble.n	8013446 <_vfiprintf_r+0x84a>
 8013436:	9903      	ldr	r1, [sp, #12]
 8013438:	9806      	ldr	r0, [sp, #24]
 801343a:	aa14      	add	r2, sp, #80	; 0x50
 801343c:	f7ff fba9 	bl	8012b92 <__sprint_r>
 8013440:	2800      	cmp	r0, #0
 8013442:	d144      	bne.n	80134ce <_vfiprintf_r+0x8d2>
 8013444:	a917      	add	r1, sp, #92	; 0x5c
 8013446:	000d      	movs	r5, r1
 8013448:	3f10      	subs	r7, #16
 801344a:	e63b      	b.n	80130c4 <_vfiprintf_r+0x4c8>
 801344c:	2010      	movs	r0, #16
 801344e:	1812      	adds	r2, r2, r0
 8013450:	6068      	str	r0, [r5, #4]
 8013452:	9216      	str	r2, [sp, #88]	; 0x58
 8013454:	9315      	str	r3, [sp, #84]	; 0x54
 8013456:	2b07      	cmp	r3, #7
 8013458:	dd07      	ble.n	801346a <_vfiprintf_r+0x86e>
 801345a:	9903      	ldr	r1, [sp, #12]
 801345c:	9806      	ldr	r0, [sp, #24]
 801345e:	aa14      	add	r2, sp, #80	; 0x50
 8013460:	f7ff fb97 	bl	8012b92 <__sprint_r>
 8013464:	2800      	cmp	r0, #0
 8013466:	d132      	bne.n	80134ce <_vfiprintf_r+0x8d2>
 8013468:	a917      	add	r1, sp, #92	; 0x5c
 801346a:	000d      	movs	r5, r1
 801346c:	3f10      	subs	r7, #16
 801346e:	e67e      	b.n	801316e <_vfiprintf_r+0x572>
 8013470:	2010      	movs	r0, #16
 8013472:	1812      	adds	r2, r2, r0
 8013474:	6068      	str	r0, [r5, #4]
 8013476:	9216      	str	r2, [sp, #88]	; 0x58
 8013478:	9315      	str	r3, [sp, #84]	; 0x54
 801347a:	2b07      	cmp	r3, #7
 801347c:	dd07      	ble.n	801348e <_vfiprintf_r+0x892>
 801347e:	9903      	ldr	r1, [sp, #12]
 8013480:	9806      	ldr	r0, [sp, #24]
 8013482:	aa14      	add	r2, sp, #80	; 0x50
 8013484:	f7ff fb85 	bl	8012b92 <__sprint_r>
 8013488:	2800      	cmp	r0, #0
 801348a:	d120      	bne.n	80134ce <_vfiprintf_r+0x8d2>
 801348c:	a917      	add	r1, sp, #92	; 0x5c
 801348e:	000d      	movs	r5, r1
 8013490:	3f10      	subs	r7, #16
 8013492:	e68b      	b.n	80131ac <_vfiprintf_r+0x5b0>
 8013494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013496:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013498:	2610      	movs	r6, #16
 801349a:	1a9c      	subs	r4, r3, r2
 801349c:	2c00      	cmp	r4, #0
 801349e:	dc00      	bgt.n	80134a2 <_vfiprintf_r+0x8a6>
 80134a0:	e6b7      	b.n	8013212 <_vfiprintf_r+0x616>
 80134a2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80134a4:	4a3b      	ldr	r2, [pc, #236]	; (8013594 <_vfiprintf_r+0x998>)
 80134a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80134a8:	3101      	adds	r1, #1
 80134aa:	602a      	str	r2, [r5, #0]
 80134ac:	2c10      	cmp	r4, #16
 80134ae:	dc22      	bgt.n	80134f6 <_vfiprintf_r+0x8fa>
 80134b0:	606c      	str	r4, [r5, #4]
 80134b2:	18e4      	adds	r4, r4, r3
 80134b4:	9416      	str	r4, [sp, #88]	; 0x58
 80134b6:	9115      	str	r1, [sp, #84]	; 0x54
 80134b8:	2907      	cmp	r1, #7
 80134ba:	dc00      	bgt.n	80134be <_vfiprintf_r+0x8c2>
 80134bc:	e6a9      	b.n	8013212 <_vfiprintf_r+0x616>
 80134be:	9903      	ldr	r1, [sp, #12]
 80134c0:	9806      	ldr	r0, [sp, #24]
 80134c2:	aa14      	add	r2, sp, #80	; 0x50
 80134c4:	f7ff fb65 	bl	8012b92 <__sprint_r>
 80134c8:	2800      	cmp	r0, #0
 80134ca:	d100      	bne.n	80134ce <_vfiprintf_r+0x8d2>
 80134cc:	e6a1      	b.n	8013212 <_vfiprintf_r+0x616>
 80134ce:	9b03      	ldr	r3, [sp, #12]
 80134d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80134d2:	07db      	lsls	r3, r3, #31
 80134d4:	d407      	bmi.n	80134e6 <_vfiprintf_r+0x8ea>
 80134d6:	9b03      	ldr	r3, [sp, #12]
 80134d8:	899b      	ldrh	r3, [r3, #12]
 80134da:	059b      	lsls	r3, r3, #22
 80134dc:	d403      	bmi.n	80134e6 <_vfiprintf_r+0x8ea>
 80134de:	9b03      	ldr	r3, [sp, #12]
 80134e0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80134e2:	f7fa f88e 	bl	800d602 <__retarget_lock_release_recursive>
 80134e6:	9b03      	ldr	r3, [sp, #12]
 80134e8:	899b      	ldrh	r3, [r3, #12]
 80134ea:	065b      	lsls	r3, r3, #25
 80134ec:	d401      	bmi.n	80134f2 <_vfiprintf_r+0x8f6>
 80134ee:	f7ff fbc3 	bl	8012c78 <_vfiprintf_r+0x7c>
 80134f2:	f7ff fbbe 	bl	8012c72 <_vfiprintf_r+0x76>
 80134f6:	3310      	adds	r3, #16
 80134f8:	606e      	str	r6, [r5, #4]
 80134fa:	9316      	str	r3, [sp, #88]	; 0x58
 80134fc:	9115      	str	r1, [sp, #84]	; 0x54
 80134fe:	3508      	adds	r5, #8
 8013500:	2907      	cmp	r1, #7
 8013502:	dd07      	ble.n	8013514 <_vfiprintf_r+0x918>
 8013504:	9903      	ldr	r1, [sp, #12]
 8013506:	9806      	ldr	r0, [sp, #24]
 8013508:	aa14      	add	r2, sp, #80	; 0x50
 801350a:	f7ff fb42 	bl	8012b92 <__sprint_r>
 801350e:	2800      	cmp	r0, #0
 8013510:	d1dd      	bne.n	80134ce <_vfiprintf_r+0x8d2>
 8013512:	ad17      	add	r5, sp, #92	; 0x5c
 8013514:	3c10      	subs	r4, #16
 8013516:	e7c4      	b.n	80134a2 <_vfiprintf_r+0x8a6>
 8013518:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801351a:	2b00      	cmp	r3, #0
 801351c:	d102      	bne.n	8013524 <_vfiprintf_r+0x928>
 801351e:	2300      	movs	r3, #0
 8013520:	9315      	str	r3, [sp, #84]	; 0x54
 8013522:	e7d4      	b.n	80134ce <_vfiprintf_r+0x8d2>
 8013524:	9903      	ldr	r1, [sp, #12]
 8013526:	9806      	ldr	r0, [sp, #24]
 8013528:	aa14      	add	r2, sp, #80	; 0x50
 801352a:	f7ff fb32 	bl	8012b92 <__sprint_r>
 801352e:	2800      	cmp	r0, #0
 8013530:	d0f5      	beq.n	801351e <_vfiprintf_r+0x922>
 8013532:	e7cc      	b.n	80134ce <_vfiprintf_r+0x8d2>
 8013534:	0027      	movs	r7, r4
 8013536:	2a00      	cmp	r2, #0
 8013538:	d100      	bne.n	801353c <_vfiprintf_r+0x940>
 801353a:	e51b      	b.n	8012f74 <_vfiprintf_r+0x378>
 801353c:	2b01      	cmp	r3, #1
 801353e:	d100      	bne.n	8013542 <_vfiprintf_r+0x946>
 8013540:	e6fe      	b.n	8013340 <_vfiprintf_r+0x744>
 8013542:	ae40      	add	r6, sp, #256	; 0x100
 8013544:	2b02      	cmp	r3, #2
 8013546:	d100      	bne.n	801354a <_vfiprintf_r+0x94e>
 8013548:	e743      	b.n	80133d2 <_vfiprintf_r+0x7d6>
 801354a:	2307      	movs	r3, #7
 801354c:	469c      	mov	ip, r3
 801354e:	4663      	mov	r3, ip
 8013550:	9900      	ldr	r1, [sp, #0]
 8013552:	0032      	movs	r2, r6
 8013554:	400b      	ands	r3, r1
 8013556:	9901      	ldr	r1, [sp, #4]
 8013558:	3e01      	subs	r6, #1
 801355a:	074c      	lsls	r4, r1, #29
 801355c:	9900      	ldr	r1, [sp, #0]
 801355e:	3330      	adds	r3, #48	; 0x30
 8013560:	08c8      	lsrs	r0, r1, #3
 8013562:	9901      	ldr	r1, [sp, #4]
 8013564:	4304      	orrs	r4, r0
 8013566:	08c9      	lsrs	r1, r1, #3
 8013568:	9101      	str	r1, [sp, #4]
 801356a:	0021      	movs	r1, r4
 801356c:	9801      	ldr	r0, [sp, #4]
 801356e:	7033      	strb	r3, [r6, #0]
 8013570:	9400      	str	r4, [sp, #0]
 8013572:	4301      	orrs	r1, r0
 8013574:	d1eb      	bne.n	801354e <_vfiprintf_r+0x952>
 8013576:	07f9      	lsls	r1, r7, #31
 8013578:	d505      	bpl.n	8013586 <_vfiprintf_r+0x98a>
 801357a:	2b30      	cmp	r3, #48	; 0x30
 801357c:	d003      	beq.n	8013586 <_vfiprintf_r+0x98a>
 801357e:	2330      	movs	r3, #48	; 0x30
 8013580:	3e01      	subs	r6, #1
 8013582:	7033      	strb	r3, [r6, #0]
 8013584:	1e96      	subs	r6, r2, #2
 8013586:	9b05      	ldr	r3, [sp, #20]
 8013588:	003c      	movs	r4, r7
 801358a:	930b      	str	r3, [sp, #44]	; 0x2c
 801358c:	ab40      	add	r3, sp, #256	; 0x100
 801358e:	1b9b      	subs	r3, r3, r6
 8013590:	9305      	str	r3, [sp, #20]
 8013592:	e575      	b.n	8013080 <_vfiprintf_r+0x484>
 8013594:	08015f29 	.word	0x08015f29

08013598 <__sbprintf>:
 8013598:	b5f0      	push	{r4, r5, r6, r7, lr}
 801359a:	0015      	movs	r5, r2
 801359c:	2202      	movs	r2, #2
 801359e:	4c1e      	ldr	r4, [pc, #120]	; (8013618 <__sbprintf+0x80>)
 80135a0:	001f      	movs	r7, r3
 80135a2:	898b      	ldrh	r3, [r1, #12]
 80135a4:	44a5      	add	sp, r4
 80135a6:	4393      	bics	r3, r2
 80135a8:	466a      	mov	r2, sp
 80135aa:	8193      	strh	r3, [r2, #12]
 80135ac:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80135ae:	0006      	movs	r6, r0
 80135b0:	9319      	str	r3, [sp, #100]	; 0x64
 80135b2:	89cb      	ldrh	r3, [r1, #14]
 80135b4:	a816      	add	r0, sp, #88	; 0x58
 80135b6:	81d3      	strh	r3, [r2, #14]
 80135b8:	69cb      	ldr	r3, [r1, #28]
 80135ba:	000c      	movs	r4, r1
 80135bc:	9307      	str	r3, [sp, #28]
 80135be:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80135c0:	9309      	str	r3, [sp, #36]	; 0x24
 80135c2:	ab1a      	add	r3, sp, #104	; 0x68
 80135c4:	9300      	str	r3, [sp, #0]
 80135c6:	9304      	str	r3, [sp, #16]
 80135c8:	2380      	movs	r3, #128	; 0x80
 80135ca:	00db      	lsls	r3, r3, #3
 80135cc:	9302      	str	r3, [sp, #8]
 80135ce:	9305      	str	r3, [sp, #20]
 80135d0:	2300      	movs	r3, #0
 80135d2:	9306      	str	r3, [sp, #24]
 80135d4:	f7fa f812 	bl	800d5fc <__retarget_lock_init_recursive>
 80135d8:	002a      	movs	r2, r5
 80135da:	003b      	movs	r3, r7
 80135dc:	4669      	mov	r1, sp
 80135de:	0030      	movs	r0, r6
 80135e0:	f7ff fb0c 	bl	8012bfc <_vfiprintf_r>
 80135e4:	1e05      	subs	r5, r0, #0
 80135e6:	db07      	blt.n	80135f8 <__sbprintf+0x60>
 80135e8:	4669      	mov	r1, sp
 80135ea:	0030      	movs	r0, r6
 80135ec:	f7fd fe7c 	bl	80112e8 <_fflush_r>
 80135f0:	2800      	cmp	r0, #0
 80135f2:	d001      	beq.n	80135f8 <__sbprintf+0x60>
 80135f4:	2501      	movs	r5, #1
 80135f6:	426d      	negs	r5, r5
 80135f8:	466b      	mov	r3, sp
 80135fa:	899a      	ldrh	r2, [r3, #12]
 80135fc:	2340      	movs	r3, #64	; 0x40
 80135fe:	421a      	tst	r2, r3
 8013600:	d002      	beq.n	8013608 <__sbprintf+0x70>
 8013602:	89a2      	ldrh	r2, [r4, #12]
 8013604:	4313      	orrs	r3, r2
 8013606:	81a3      	strh	r3, [r4, #12]
 8013608:	9816      	ldr	r0, [sp, #88]	; 0x58
 801360a:	f7f9 fff8 	bl	800d5fe <__retarget_lock_close_recursive>
 801360e:	0028      	movs	r0, r5
 8013610:	4b02      	ldr	r3, [pc, #8]	; (801361c <__sbprintf+0x84>)
 8013612:	449d      	add	sp, r3
 8013614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013616:	46c0      	nop			; (mov r8, r8)
 8013618:	fffffb94 	.word	0xfffffb94
 801361c:	0000046c 	.word	0x0000046c

08013620 <__sfvwrite_r>:
 8013620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013622:	6893      	ldr	r3, [r2, #8]
 8013624:	b087      	sub	sp, #28
 8013626:	000c      	movs	r4, r1
 8013628:	9002      	str	r0, [sp, #8]
 801362a:	9204      	str	r2, [sp, #16]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d102      	bne.n	8013636 <__sfvwrite_r+0x16>
 8013630:	2000      	movs	r0, #0
 8013632:	b007      	add	sp, #28
 8013634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013636:	898b      	ldrh	r3, [r1, #12]
 8013638:	071b      	lsls	r3, r3, #28
 801363a:	d557      	bpl.n	80136ec <__sfvwrite_r+0xcc>
 801363c:	690b      	ldr	r3, [r1, #16]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d054      	beq.n	80136ec <__sfvwrite_r+0xcc>
 8013642:	9b04      	ldr	r3, [sp, #16]
 8013644:	2202      	movs	r2, #2
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	9301      	str	r3, [sp, #4]
 801364a:	89a3      	ldrh	r3, [r4, #12]
 801364c:	001f      	movs	r7, r3
 801364e:	4017      	ands	r7, r2
 8013650:	4213      	tst	r3, r2
 8013652:	d171      	bne.n	8013738 <__sfvwrite_r+0x118>
 8013654:	2201      	movs	r2, #1
 8013656:	2101      	movs	r1, #1
 8013658:	401a      	ands	r2, r3
 801365a:	420b      	tst	r3, r1
 801365c:	d100      	bne.n	8013660 <__sfvwrite_r+0x40>
 801365e:	e0a5      	b.n	80137ac <__sfvwrite_r+0x18c>
 8013660:	0038      	movs	r0, r7
 8013662:	003e      	movs	r6, r7
 8013664:	9703      	str	r7, [sp, #12]
 8013666:	9b03      	ldr	r3, [sp, #12]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d100      	bne.n	801366e <__sfvwrite_r+0x4e>
 801366c:	e10b      	b.n	8013886 <__sfvwrite_r+0x266>
 801366e:	2800      	cmp	r0, #0
 8013670:	d10a      	bne.n	8013688 <__sfvwrite_r+0x68>
 8013672:	001a      	movs	r2, r3
 8013674:	210a      	movs	r1, #10
 8013676:	0030      	movs	r0, r6
 8013678:	f7fd feb0 	bl	80113dc <memchr>
 801367c:	9b03      	ldr	r3, [sp, #12]
 801367e:	1c5f      	adds	r7, r3, #1
 8013680:	2800      	cmp	r0, #0
 8013682:	d001      	beq.n	8013688 <__sfvwrite_r+0x68>
 8013684:	3001      	adds	r0, #1
 8013686:	1b87      	subs	r7, r0, r6
 8013688:	9b03      	ldr	r3, [sp, #12]
 801368a:	9705      	str	r7, [sp, #20]
 801368c:	429f      	cmp	r7, r3
 801368e:	d900      	bls.n	8013692 <__sfvwrite_r+0x72>
 8013690:	9305      	str	r3, [sp, #20]
 8013692:	6820      	ldr	r0, [r4, #0]
 8013694:	6922      	ldr	r2, [r4, #16]
 8013696:	68a5      	ldr	r5, [r4, #8]
 8013698:	6963      	ldr	r3, [r4, #20]
 801369a:	4290      	cmp	r0, r2
 801369c:	d800      	bhi.n	80136a0 <__sfvwrite_r+0x80>
 801369e:	e0fb      	b.n	8013898 <__sfvwrite_r+0x278>
 80136a0:	9a05      	ldr	r2, [sp, #20]
 80136a2:	18ed      	adds	r5, r5, r3
 80136a4:	42aa      	cmp	r2, r5
 80136a6:	dc00      	bgt.n	80136aa <__sfvwrite_r+0x8a>
 80136a8:	e0f6      	b.n	8013898 <__sfvwrite_r+0x278>
 80136aa:	0031      	movs	r1, r6
 80136ac:	002a      	movs	r2, r5
 80136ae:	f000 fa1e 	bl	8013aee <memmove>
 80136b2:	6823      	ldr	r3, [r4, #0]
 80136b4:	0021      	movs	r1, r4
 80136b6:	195b      	adds	r3, r3, r5
 80136b8:	9802      	ldr	r0, [sp, #8]
 80136ba:	6023      	str	r3, [r4, #0]
 80136bc:	f7fd fe14 	bl	80112e8 <_fflush_r>
 80136c0:	2800      	cmp	r0, #0
 80136c2:	d16e      	bne.n	80137a2 <__sfvwrite_r+0x182>
 80136c4:	2001      	movs	r0, #1
 80136c6:	1b7f      	subs	r7, r7, r5
 80136c8:	d105      	bne.n	80136d6 <__sfvwrite_r+0xb6>
 80136ca:	0021      	movs	r1, r4
 80136cc:	9802      	ldr	r0, [sp, #8]
 80136ce:	f7fd fe0b 	bl	80112e8 <_fflush_r>
 80136d2:	2800      	cmp	r0, #0
 80136d4:	d165      	bne.n	80137a2 <__sfvwrite_r+0x182>
 80136d6:	9b03      	ldr	r3, [sp, #12]
 80136d8:	9a04      	ldr	r2, [sp, #16]
 80136da:	1b5b      	subs	r3, r3, r5
 80136dc:	9303      	str	r3, [sp, #12]
 80136de:	9b04      	ldr	r3, [sp, #16]
 80136e0:	1976      	adds	r6, r6, r5
 80136e2:	689b      	ldr	r3, [r3, #8]
 80136e4:	1b5b      	subs	r3, r3, r5
 80136e6:	6093      	str	r3, [r2, #8]
 80136e8:	d1bd      	bne.n	8013666 <__sfvwrite_r+0x46>
 80136ea:	e7a1      	b.n	8013630 <__sfvwrite_r+0x10>
 80136ec:	0021      	movs	r1, r4
 80136ee:	9802      	ldr	r0, [sp, #8]
 80136f0:	f000 f932 	bl	8013958 <__swsetup_r>
 80136f4:	2800      	cmp	r0, #0
 80136f6:	d0a4      	beq.n	8013642 <__sfvwrite_r+0x22>
 80136f8:	2001      	movs	r0, #1
 80136fa:	4240      	negs	r0, r0
 80136fc:	e799      	b.n	8013632 <__sfvwrite_r+0x12>
 80136fe:	9b01      	ldr	r3, [sp, #4]
 8013700:	681e      	ldr	r6, [r3, #0]
 8013702:	685d      	ldr	r5, [r3, #4]
 8013704:	3308      	adds	r3, #8
 8013706:	9301      	str	r3, [sp, #4]
 8013708:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801370a:	69e1      	ldr	r1, [r4, #28]
 801370c:	2d00      	cmp	r5, #0
 801370e:	d0f6      	beq.n	80136fe <__sfvwrite_r+0xde>
 8013710:	4a6e      	ldr	r2, [pc, #440]	; (80138cc <__sfvwrite_r+0x2ac>)
 8013712:	002b      	movs	r3, r5
 8013714:	4295      	cmp	r5, r2
 8013716:	d900      	bls.n	801371a <__sfvwrite_r+0xfa>
 8013718:	0013      	movs	r3, r2
 801371a:	0032      	movs	r2, r6
 801371c:	9802      	ldr	r0, [sp, #8]
 801371e:	47b8      	blx	r7
 8013720:	2800      	cmp	r0, #0
 8013722:	dd3e      	ble.n	80137a2 <__sfvwrite_r+0x182>
 8013724:	9b04      	ldr	r3, [sp, #16]
 8013726:	9a04      	ldr	r2, [sp, #16]
 8013728:	689b      	ldr	r3, [r3, #8]
 801372a:	1836      	adds	r6, r6, r0
 801372c:	1a1b      	subs	r3, r3, r0
 801372e:	1a2d      	subs	r5, r5, r0
 8013730:	6093      	str	r3, [r2, #8]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d1e8      	bne.n	8013708 <__sfvwrite_r+0xe8>
 8013736:	e77b      	b.n	8013630 <__sfvwrite_r+0x10>
 8013738:	2600      	movs	r6, #0
 801373a:	0035      	movs	r5, r6
 801373c:	e7e4      	b.n	8013708 <__sfvwrite_r+0xe8>
 801373e:	9b01      	ldr	r3, [sp, #4]
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	9303      	str	r3, [sp, #12]
 8013744:	9b01      	ldr	r3, [sp, #4]
 8013746:	685d      	ldr	r5, [r3, #4]
 8013748:	3308      	adds	r3, #8
 801374a:	9301      	str	r3, [sp, #4]
 801374c:	220c      	movs	r2, #12
 801374e:	5ea3      	ldrsh	r3, [r4, r2]
 8013750:	6820      	ldr	r0, [r4, #0]
 8013752:	68a6      	ldr	r6, [r4, #8]
 8013754:	2d00      	cmp	r5, #0
 8013756:	d0f2      	beq.n	801373e <__sfvwrite_r+0x11e>
 8013758:	2180      	movs	r1, #128	; 0x80
 801375a:	0089      	lsls	r1, r1, #2
 801375c:	b29a      	uxth	r2, r3
 801375e:	420b      	tst	r3, r1
 8013760:	d062      	beq.n	8013828 <__sfvwrite_r+0x208>
 8013762:	42ae      	cmp	r6, r5
 8013764:	d837      	bhi.n	80137d6 <__sfvwrite_r+0x1b6>
 8013766:	2390      	movs	r3, #144	; 0x90
 8013768:	00db      	lsls	r3, r3, #3
 801376a:	421a      	tst	r2, r3
 801376c:	d033      	beq.n	80137d6 <__sfvwrite_r+0x1b6>
 801376e:	6921      	ldr	r1, [r4, #16]
 8013770:	1a43      	subs	r3, r0, r1
 8013772:	2003      	movs	r0, #3
 8013774:	9305      	str	r3, [sp, #20]
 8013776:	6963      	ldr	r3, [r4, #20]
 8013778:	4343      	muls	r3, r0
 801377a:	0fdf      	lsrs	r7, r3, #31
 801377c:	18ff      	adds	r7, r7, r3
 801377e:	9b05      	ldr	r3, [sp, #20]
 8013780:	107f      	asrs	r7, r7, #1
 8013782:	3301      	adds	r3, #1
 8013784:	195b      	adds	r3, r3, r5
 8013786:	42bb      	cmp	r3, r7
 8013788:	d900      	bls.n	801378c <__sfvwrite_r+0x16c>
 801378a:	001f      	movs	r7, r3
 801378c:	0552      	lsls	r2, r2, #21
 801378e:	d53c      	bpl.n	801380a <__sfvwrite_r+0x1ea>
 8013790:	0039      	movs	r1, r7
 8013792:	9802      	ldr	r0, [sp, #8]
 8013794:	f7f8 fb02 	bl	800bd9c <_malloc_r>
 8013798:	1e06      	subs	r6, r0, #0
 801379a:	d10a      	bne.n	80137b2 <__sfvwrite_r+0x192>
 801379c:	230c      	movs	r3, #12
 801379e:	9a02      	ldr	r2, [sp, #8]
 80137a0:	6013      	str	r3, [r2, #0]
 80137a2:	2340      	movs	r3, #64	; 0x40
 80137a4:	89a2      	ldrh	r2, [r4, #12]
 80137a6:	4313      	orrs	r3, r2
 80137a8:	81a3      	strh	r3, [r4, #12]
 80137aa:	e7a5      	b.n	80136f8 <__sfvwrite_r+0xd8>
 80137ac:	0015      	movs	r5, r2
 80137ae:	9203      	str	r2, [sp, #12]
 80137b0:	e7cc      	b.n	801374c <__sfvwrite_r+0x12c>
 80137b2:	9a05      	ldr	r2, [sp, #20]
 80137b4:	6921      	ldr	r1, [r4, #16]
 80137b6:	f7f9 ff30 	bl	800d61a <memcpy>
 80137ba:	89a2      	ldrh	r2, [r4, #12]
 80137bc:	4b44      	ldr	r3, [pc, #272]	; (80138d0 <__sfvwrite_r+0x2b0>)
 80137be:	401a      	ands	r2, r3
 80137c0:	2380      	movs	r3, #128	; 0x80
 80137c2:	4313      	orrs	r3, r2
 80137c4:	81a3      	strh	r3, [r4, #12]
 80137c6:	9b05      	ldr	r3, [sp, #20]
 80137c8:	6126      	str	r6, [r4, #16]
 80137ca:	18f6      	adds	r6, r6, r3
 80137cc:	6026      	str	r6, [r4, #0]
 80137ce:	002e      	movs	r6, r5
 80137d0:	6167      	str	r7, [r4, #20]
 80137d2:	1aff      	subs	r7, r7, r3
 80137d4:	60a7      	str	r7, [r4, #8]
 80137d6:	002f      	movs	r7, r5
 80137d8:	42ae      	cmp	r6, r5
 80137da:	d900      	bls.n	80137de <__sfvwrite_r+0x1be>
 80137dc:	002e      	movs	r6, r5
 80137de:	0032      	movs	r2, r6
 80137e0:	9903      	ldr	r1, [sp, #12]
 80137e2:	6820      	ldr	r0, [r4, #0]
 80137e4:	f000 f983 	bl	8013aee <memmove>
 80137e8:	68a3      	ldr	r3, [r4, #8]
 80137ea:	1b9b      	subs	r3, r3, r6
 80137ec:	60a3      	str	r3, [r4, #8]
 80137ee:	6823      	ldr	r3, [r4, #0]
 80137f0:	199b      	adds	r3, r3, r6
 80137f2:	6023      	str	r3, [r4, #0]
 80137f4:	9b03      	ldr	r3, [sp, #12]
 80137f6:	9a04      	ldr	r2, [sp, #16]
 80137f8:	19db      	adds	r3, r3, r7
 80137fa:	9303      	str	r3, [sp, #12]
 80137fc:	9b04      	ldr	r3, [sp, #16]
 80137fe:	1bed      	subs	r5, r5, r7
 8013800:	689b      	ldr	r3, [r3, #8]
 8013802:	1bdb      	subs	r3, r3, r7
 8013804:	6093      	str	r3, [r2, #8]
 8013806:	d1a1      	bne.n	801374c <__sfvwrite_r+0x12c>
 8013808:	e712      	b.n	8013630 <__sfvwrite_r+0x10>
 801380a:	003a      	movs	r2, r7
 801380c:	9802      	ldr	r0, [sp, #8]
 801380e:	f7fe fd5d 	bl	80122cc <_realloc_r>
 8013812:	1e06      	subs	r6, r0, #0
 8013814:	d1d7      	bne.n	80137c6 <__sfvwrite_r+0x1a6>
 8013816:	6921      	ldr	r1, [r4, #16]
 8013818:	9802      	ldr	r0, [sp, #8]
 801381a:	f7f9 ff79 	bl	800d710 <_free_r>
 801381e:	2280      	movs	r2, #128	; 0x80
 8013820:	89a3      	ldrh	r3, [r4, #12]
 8013822:	4393      	bics	r3, r2
 8013824:	81a3      	strh	r3, [r4, #12]
 8013826:	e7b9      	b.n	801379c <__sfvwrite_r+0x17c>
 8013828:	6923      	ldr	r3, [r4, #16]
 801382a:	4283      	cmp	r3, r0
 801382c:	d302      	bcc.n	8013834 <__sfvwrite_r+0x214>
 801382e:	6967      	ldr	r7, [r4, #20]
 8013830:	42af      	cmp	r7, r5
 8013832:	d916      	bls.n	8013862 <__sfvwrite_r+0x242>
 8013834:	42ae      	cmp	r6, r5
 8013836:	d900      	bls.n	801383a <__sfvwrite_r+0x21a>
 8013838:	002e      	movs	r6, r5
 801383a:	0032      	movs	r2, r6
 801383c:	9903      	ldr	r1, [sp, #12]
 801383e:	f000 f956 	bl	8013aee <memmove>
 8013842:	68a3      	ldr	r3, [r4, #8]
 8013844:	6822      	ldr	r2, [r4, #0]
 8013846:	1b9b      	subs	r3, r3, r6
 8013848:	1992      	adds	r2, r2, r6
 801384a:	0037      	movs	r7, r6
 801384c:	60a3      	str	r3, [r4, #8]
 801384e:	6022      	str	r2, [r4, #0]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d1cf      	bne.n	80137f4 <__sfvwrite_r+0x1d4>
 8013854:	0021      	movs	r1, r4
 8013856:	9802      	ldr	r0, [sp, #8]
 8013858:	f7fd fd46 	bl	80112e8 <_fflush_r>
 801385c:	2800      	cmp	r0, #0
 801385e:	d0c9      	beq.n	80137f4 <__sfvwrite_r+0x1d4>
 8013860:	e79f      	b.n	80137a2 <__sfvwrite_r+0x182>
 8013862:	4b1c      	ldr	r3, [pc, #112]	; (80138d4 <__sfvwrite_r+0x2b4>)
 8013864:	0028      	movs	r0, r5
 8013866:	429d      	cmp	r5, r3
 8013868:	d900      	bls.n	801386c <__sfvwrite_r+0x24c>
 801386a:	481b      	ldr	r0, [pc, #108]	; (80138d8 <__sfvwrite_r+0x2b8>)
 801386c:	0039      	movs	r1, r7
 801386e:	f7ec fcef 	bl	8000250 <__divsi3>
 8013872:	003b      	movs	r3, r7
 8013874:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013876:	4343      	muls	r3, r0
 8013878:	9a03      	ldr	r2, [sp, #12]
 801387a:	69e1      	ldr	r1, [r4, #28]
 801387c:	9802      	ldr	r0, [sp, #8]
 801387e:	47b0      	blx	r6
 8013880:	1e07      	subs	r7, r0, #0
 8013882:	dcb7      	bgt.n	80137f4 <__sfvwrite_r+0x1d4>
 8013884:	e78d      	b.n	80137a2 <__sfvwrite_r+0x182>
 8013886:	9b01      	ldr	r3, [sp, #4]
 8013888:	2000      	movs	r0, #0
 801388a:	681e      	ldr	r6, [r3, #0]
 801388c:	685b      	ldr	r3, [r3, #4]
 801388e:	9303      	str	r3, [sp, #12]
 8013890:	9b01      	ldr	r3, [sp, #4]
 8013892:	3308      	adds	r3, #8
 8013894:	9301      	str	r3, [sp, #4]
 8013896:	e6e6      	b.n	8013666 <__sfvwrite_r+0x46>
 8013898:	9a05      	ldr	r2, [sp, #20]
 801389a:	4293      	cmp	r3, r2
 801389c:	dc08      	bgt.n	80138b0 <__sfvwrite_r+0x290>
 801389e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80138a0:	0032      	movs	r2, r6
 80138a2:	69e1      	ldr	r1, [r4, #28]
 80138a4:	9802      	ldr	r0, [sp, #8]
 80138a6:	47a8      	blx	r5
 80138a8:	1e05      	subs	r5, r0, #0
 80138aa:	dd00      	ble.n	80138ae <__sfvwrite_r+0x28e>
 80138ac:	e70a      	b.n	80136c4 <__sfvwrite_r+0xa4>
 80138ae:	e778      	b.n	80137a2 <__sfvwrite_r+0x182>
 80138b0:	9a05      	ldr	r2, [sp, #20]
 80138b2:	0031      	movs	r1, r6
 80138b4:	f000 f91b 	bl	8013aee <memmove>
 80138b8:	9a05      	ldr	r2, [sp, #20]
 80138ba:	68a3      	ldr	r3, [r4, #8]
 80138bc:	0015      	movs	r5, r2
 80138be:	1a9b      	subs	r3, r3, r2
 80138c0:	60a3      	str	r3, [r4, #8]
 80138c2:	6823      	ldr	r3, [r4, #0]
 80138c4:	189b      	adds	r3, r3, r2
 80138c6:	6023      	str	r3, [r4, #0]
 80138c8:	e6fc      	b.n	80136c4 <__sfvwrite_r+0xa4>
 80138ca:	46c0      	nop			; (mov r8, r8)
 80138cc:	7ffffc00 	.word	0x7ffffc00
 80138d0:	fffffb7f 	.word	0xfffffb7f
 80138d4:	7ffffffe 	.word	0x7ffffffe
 80138d8:	7fffffff 	.word	0x7fffffff

080138dc <__submore>:
 80138dc:	000b      	movs	r3, r1
 80138de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80138e0:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80138e2:	3340      	adds	r3, #64	; 0x40
 80138e4:	000c      	movs	r4, r1
 80138e6:	429d      	cmp	r5, r3
 80138e8:	d11c      	bne.n	8013924 <__submore+0x48>
 80138ea:	2680      	movs	r6, #128	; 0x80
 80138ec:	00f6      	lsls	r6, r6, #3
 80138ee:	0031      	movs	r1, r6
 80138f0:	f7f8 fa54 	bl	800bd9c <_malloc_r>
 80138f4:	2800      	cmp	r0, #0
 80138f6:	d102      	bne.n	80138fe <__submore+0x22>
 80138f8:	2001      	movs	r0, #1
 80138fa:	4240      	negs	r0, r0
 80138fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80138fe:	0023      	movs	r3, r4
 8013900:	6320      	str	r0, [r4, #48]	; 0x30
 8013902:	6366      	str	r6, [r4, #52]	; 0x34
 8013904:	3342      	adds	r3, #66	; 0x42
 8013906:	781a      	ldrb	r2, [r3, #0]
 8013908:	4b10      	ldr	r3, [pc, #64]	; (801394c <__submore+0x70>)
 801390a:	54c2      	strb	r2, [r0, r3]
 801390c:	0023      	movs	r3, r4
 801390e:	3341      	adds	r3, #65	; 0x41
 8013910:	781a      	ldrb	r2, [r3, #0]
 8013912:	4b0f      	ldr	r3, [pc, #60]	; (8013950 <__submore+0x74>)
 8013914:	54c2      	strb	r2, [r0, r3]
 8013916:	782a      	ldrb	r2, [r5, #0]
 8013918:	4b0e      	ldr	r3, [pc, #56]	; (8013954 <__submore+0x78>)
 801391a:	54c2      	strb	r2, [r0, r3]
 801391c:	18c0      	adds	r0, r0, r3
 801391e:	6020      	str	r0, [r4, #0]
 8013920:	2000      	movs	r0, #0
 8013922:	e7eb      	b.n	80138fc <__submore+0x20>
 8013924:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8013926:	0029      	movs	r1, r5
 8013928:	0073      	lsls	r3, r6, #1
 801392a:	001a      	movs	r2, r3
 801392c:	9301      	str	r3, [sp, #4]
 801392e:	f7fe fccd 	bl	80122cc <_realloc_r>
 8013932:	1e05      	subs	r5, r0, #0
 8013934:	d0e0      	beq.n	80138f8 <__submore+0x1c>
 8013936:	1987      	adds	r7, r0, r6
 8013938:	0001      	movs	r1, r0
 801393a:	0032      	movs	r2, r6
 801393c:	0038      	movs	r0, r7
 801393e:	f7f9 fe6c 	bl	800d61a <memcpy>
 8013942:	9b01      	ldr	r3, [sp, #4]
 8013944:	6027      	str	r7, [r4, #0]
 8013946:	6325      	str	r5, [r4, #48]	; 0x30
 8013948:	6363      	str	r3, [r4, #52]	; 0x34
 801394a:	e7e9      	b.n	8013920 <__submore+0x44>
 801394c:	000003ff 	.word	0x000003ff
 8013950:	000003fe 	.word	0x000003fe
 8013954:	000003fd 	.word	0x000003fd

08013958 <__swsetup_r>:
 8013958:	4b30      	ldr	r3, [pc, #192]	; (8013a1c <__swsetup_r+0xc4>)
 801395a:	b570      	push	{r4, r5, r6, lr}
 801395c:	0005      	movs	r5, r0
 801395e:	6818      	ldr	r0, [r3, #0]
 8013960:	000c      	movs	r4, r1
 8013962:	2800      	cmp	r0, #0
 8013964:	d004      	beq.n	8013970 <__swsetup_r+0x18>
 8013966:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013968:	2b00      	cmp	r3, #0
 801396a:	d101      	bne.n	8013970 <__swsetup_r+0x18>
 801396c:	f7f9 fc2a 	bl	800d1c4 <__sinit>
 8013970:	230c      	movs	r3, #12
 8013972:	5ee2      	ldrsh	r2, [r4, r3]
 8013974:	b293      	uxth	r3, r2
 8013976:	0711      	lsls	r1, r2, #28
 8013978:	d423      	bmi.n	80139c2 <__swsetup_r+0x6a>
 801397a:	06d9      	lsls	r1, r3, #27
 801397c:	d407      	bmi.n	801398e <__swsetup_r+0x36>
 801397e:	2309      	movs	r3, #9
 8013980:	2001      	movs	r0, #1
 8013982:	602b      	str	r3, [r5, #0]
 8013984:	3337      	adds	r3, #55	; 0x37
 8013986:	4313      	orrs	r3, r2
 8013988:	81a3      	strh	r3, [r4, #12]
 801398a:	4240      	negs	r0, r0
 801398c:	bd70      	pop	{r4, r5, r6, pc}
 801398e:	075b      	lsls	r3, r3, #29
 8013990:	d513      	bpl.n	80139ba <__swsetup_r+0x62>
 8013992:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013994:	2900      	cmp	r1, #0
 8013996:	d008      	beq.n	80139aa <__swsetup_r+0x52>
 8013998:	0023      	movs	r3, r4
 801399a:	3340      	adds	r3, #64	; 0x40
 801399c:	4299      	cmp	r1, r3
 801399e:	d002      	beq.n	80139a6 <__swsetup_r+0x4e>
 80139a0:	0028      	movs	r0, r5
 80139a2:	f7f9 feb5 	bl	800d710 <_free_r>
 80139a6:	2300      	movs	r3, #0
 80139a8:	6323      	str	r3, [r4, #48]	; 0x30
 80139aa:	2224      	movs	r2, #36	; 0x24
 80139ac:	89a3      	ldrh	r3, [r4, #12]
 80139ae:	4393      	bics	r3, r2
 80139b0:	81a3      	strh	r3, [r4, #12]
 80139b2:	2300      	movs	r3, #0
 80139b4:	6063      	str	r3, [r4, #4]
 80139b6:	6923      	ldr	r3, [r4, #16]
 80139b8:	6023      	str	r3, [r4, #0]
 80139ba:	2308      	movs	r3, #8
 80139bc:	89a2      	ldrh	r2, [r4, #12]
 80139be:	4313      	orrs	r3, r2
 80139c0:	81a3      	strh	r3, [r4, #12]
 80139c2:	6923      	ldr	r3, [r4, #16]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d10b      	bne.n	80139e0 <__swsetup_r+0x88>
 80139c8:	21a0      	movs	r1, #160	; 0xa0
 80139ca:	2280      	movs	r2, #128	; 0x80
 80139cc:	89a3      	ldrh	r3, [r4, #12]
 80139ce:	0089      	lsls	r1, r1, #2
 80139d0:	0092      	lsls	r2, r2, #2
 80139d2:	400b      	ands	r3, r1
 80139d4:	4293      	cmp	r3, r2
 80139d6:	d003      	beq.n	80139e0 <__swsetup_r+0x88>
 80139d8:	0021      	movs	r1, r4
 80139da:	0028      	movs	r0, r5
 80139dc:	f000 f8e8 	bl	8013bb0 <__smakebuf_r>
 80139e0:	220c      	movs	r2, #12
 80139e2:	5ea3      	ldrsh	r3, [r4, r2]
 80139e4:	2001      	movs	r0, #1
 80139e6:	001a      	movs	r2, r3
 80139e8:	b299      	uxth	r1, r3
 80139ea:	4002      	ands	r2, r0
 80139ec:	4203      	tst	r3, r0
 80139ee:	d00f      	beq.n	8013a10 <__swsetup_r+0xb8>
 80139f0:	2200      	movs	r2, #0
 80139f2:	60a2      	str	r2, [r4, #8]
 80139f4:	6962      	ldr	r2, [r4, #20]
 80139f6:	4252      	negs	r2, r2
 80139f8:	61a2      	str	r2, [r4, #24]
 80139fa:	2000      	movs	r0, #0
 80139fc:	6922      	ldr	r2, [r4, #16]
 80139fe:	4282      	cmp	r2, r0
 8013a00:	d1c4      	bne.n	801398c <__swsetup_r+0x34>
 8013a02:	0609      	lsls	r1, r1, #24
 8013a04:	d5c2      	bpl.n	801398c <__swsetup_r+0x34>
 8013a06:	2240      	movs	r2, #64	; 0x40
 8013a08:	4313      	orrs	r3, r2
 8013a0a:	81a3      	strh	r3, [r4, #12]
 8013a0c:	3801      	subs	r0, #1
 8013a0e:	e7bd      	b.n	801398c <__swsetup_r+0x34>
 8013a10:	0788      	lsls	r0, r1, #30
 8013a12:	d400      	bmi.n	8013a16 <__swsetup_r+0xbe>
 8013a14:	6962      	ldr	r2, [r4, #20]
 8013a16:	60a2      	str	r2, [r4, #8]
 8013a18:	e7ef      	b.n	80139fa <__swsetup_r+0xa2>
 8013a1a:	46c0      	nop			; (mov r8, r8)
 8013a1c:	200006d0 	.word	0x200006d0

08013a20 <__fputwc>:
 8013a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a22:	b085      	sub	sp, #20
 8013a24:	000e      	movs	r6, r1
 8013a26:	0015      	movs	r5, r2
 8013a28:	9001      	str	r0, [sp, #4]
 8013a2a:	f7f9 fd55 	bl	800d4d8 <__locale_mb_cur_max>
 8013a2e:	0004      	movs	r4, r0
 8013a30:	2801      	cmp	r0, #1
 8013a32:	d119      	bne.n	8013a68 <__fputwc+0x48>
 8013a34:	1e73      	subs	r3, r6, #1
 8013a36:	2bfe      	cmp	r3, #254	; 0xfe
 8013a38:	d816      	bhi.n	8013a68 <__fputwc+0x48>
 8013a3a:	ab02      	add	r3, sp, #8
 8013a3c:	711e      	strb	r6, [r3, #4]
 8013a3e:	2700      	movs	r7, #0
 8013a40:	42a7      	cmp	r7, r4
 8013a42:	d020      	beq.n	8013a86 <__fputwc+0x66>
 8013a44:	ab03      	add	r3, sp, #12
 8013a46:	5dd9      	ldrb	r1, [r3, r7]
 8013a48:	68ab      	ldr	r3, [r5, #8]
 8013a4a:	3b01      	subs	r3, #1
 8013a4c:	60ab      	str	r3, [r5, #8]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	da04      	bge.n	8013a5c <__fputwc+0x3c>
 8013a52:	69aa      	ldr	r2, [r5, #24]
 8013a54:	4293      	cmp	r3, r2
 8013a56:	db19      	blt.n	8013a8c <__fputwc+0x6c>
 8013a58:	290a      	cmp	r1, #10
 8013a5a:	d017      	beq.n	8013a8c <__fputwc+0x6c>
 8013a5c:	682b      	ldr	r3, [r5, #0]
 8013a5e:	1c5a      	adds	r2, r3, #1
 8013a60:	602a      	str	r2, [r5, #0]
 8013a62:	7019      	strb	r1, [r3, #0]
 8013a64:	3701      	adds	r7, #1
 8013a66:	e7eb      	b.n	8013a40 <__fputwc+0x20>
 8013a68:	002b      	movs	r3, r5
 8013a6a:	0032      	movs	r2, r6
 8013a6c:	9801      	ldr	r0, [sp, #4]
 8013a6e:	335c      	adds	r3, #92	; 0x5c
 8013a70:	a903      	add	r1, sp, #12
 8013a72:	f000 f857 	bl	8013b24 <_wcrtomb_r>
 8013a76:	0004      	movs	r4, r0
 8013a78:	1c43      	adds	r3, r0, #1
 8013a7a:	d1e0      	bne.n	8013a3e <__fputwc+0x1e>
 8013a7c:	2340      	movs	r3, #64	; 0x40
 8013a7e:	0006      	movs	r6, r0
 8013a80:	89aa      	ldrh	r2, [r5, #12]
 8013a82:	4313      	orrs	r3, r2
 8013a84:	81ab      	strh	r3, [r5, #12]
 8013a86:	0030      	movs	r0, r6
 8013a88:	b005      	add	sp, #20
 8013a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a8c:	002a      	movs	r2, r5
 8013a8e:	9801      	ldr	r0, [sp, #4]
 8013a90:	f000 f8cc 	bl	8013c2c <__swbuf_r>
 8013a94:	1c43      	adds	r3, r0, #1
 8013a96:	d1e5      	bne.n	8013a64 <__fputwc+0x44>
 8013a98:	0006      	movs	r6, r0
 8013a9a:	e7f4      	b.n	8013a86 <__fputwc+0x66>

08013a9c <_fputwc_r>:
 8013a9c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8013a9e:	b570      	push	{r4, r5, r6, lr}
 8013aa0:	0005      	movs	r5, r0
 8013aa2:	000e      	movs	r6, r1
 8013aa4:	0014      	movs	r4, r2
 8013aa6:	07db      	lsls	r3, r3, #31
 8013aa8:	d405      	bmi.n	8013ab6 <_fputwc_r+0x1a>
 8013aaa:	8993      	ldrh	r3, [r2, #12]
 8013aac:	059b      	lsls	r3, r3, #22
 8013aae:	d402      	bmi.n	8013ab6 <_fputwc_r+0x1a>
 8013ab0:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8013ab2:	f7f9 fda5 	bl	800d600 <__retarget_lock_acquire_recursive>
 8013ab6:	230c      	movs	r3, #12
 8013ab8:	5ee2      	ldrsh	r2, [r4, r3]
 8013aba:	2380      	movs	r3, #128	; 0x80
 8013abc:	019b      	lsls	r3, r3, #6
 8013abe:	421a      	tst	r2, r3
 8013ac0:	d104      	bne.n	8013acc <_fputwc_r+0x30>
 8013ac2:	431a      	orrs	r2, r3
 8013ac4:	81a2      	strh	r2, [r4, #12]
 8013ac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013ac8:	4313      	orrs	r3, r2
 8013aca:	6663      	str	r3, [r4, #100]	; 0x64
 8013acc:	0028      	movs	r0, r5
 8013ace:	0022      	movs	r2, r4
 8013ad0:	0031      	movs	r1, r6
 8013ad2:	f7ff ffa5 	bl	8013a20 <__fputwc>
 8013ad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013ad8:	0005      	movs	r5, r0
 8013ada:	07db      	lsls	r3, r3, #31
 8013adc:	d405      	bmi.n	8013aea <_fputwc_r+0x4e>
 8013ade:	89a3      	ldrh	r3, [r4, #12]
 8013ae0:	059b      	lsls	r3, r3, #22
 8013ae2:	d402      	bmi.n	8013aea <_fputwc_r+0x4e>
 8013ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ae6:	f7f9 fd8c 	bl	800d602 <__retarget_lock_release_recursive>
 8013aea:	0028      	movs	r0, r5
 8013aec:	bd70      	pop	{r4, r5, r6, pc}

08013aee <memmove>:
 8013aee:	b510      	push	{r4, lr}
 8013af0:	4288      	cmp	r0, r1
 8013af2:	d902      	bls.n	8013afa <memmove+0xc>
 8013af4:	188b      	adds	r3, r1, r2
 8013af6:	4298      	cmp	r0, r3
 8013af8:	d303      	bcc.n	8013b02 <memmove+0x14>
 8013afa:	2300      	movs	r3, #0
 8013afc:	e007      	b.n	8013b0e <memmove+0x20>
 8013afe:	5c8b      	ldrb	r3, [r1, r2]
 8013b00:	5483      	strb	r3, [r0, r2]
 8013b02:	3a01      	subs	r2, #1
 8013b04:	d2fb      	bcs.n	8013afe <memmove+0x10>
 8013b06:	bd10      	pop	{r4, pc}
 8013b08:	5ccc      	ldrb	r4, [r1, r3]
 8013b0a:	54c4      	strb	r4, [r0, r3]
 8013b0c:	3301      	adds	r3, #1
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	d1fa      	bne.n	8013b08 <memmove+0x1a>
 8013b12:	e7f8      	b.n	8013b06 <memmove+0x18>

08013b14 <abort>:
 8013b14:	2006      	movs	r0, #6
 8013b16:	b510      	push	{r4, lr}
 8013b18:	f000 f906 	bl	8013d28 <raise>
 8013b1c:	2001      	movs	r0, #1
 8013b1e:	f7f0 fb57 	bl	80041d0 <_exit>
	...

08013b24 <_wcrtomb_r>:
 8013b24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013b26:	001d      	movs	r5, r3
 8013b28:	4b09      	ldr	r3, [pc, #36]	; (8013b50 <_wcrtomb_r+0x2c>)
 8013b2a:	0004      	movs	r4, r0
 8013b2c:	33e0      	adds	r3, #224	; 0xe0
 8013b2e:	681e      	ldr	r6, [r3, #0]
 8013b30:	002b      	movs	r3, r5
 8013b32:	2900      	cmp	r1, #0
 8013b34:	d101      	bne.n	8013b3a <_wcrtomb_r+0x16>
 8013b36:	000a      	movs	r2, r1
 8013b38:	a901      	add	r1, sp, #4
 8013b3a:	0020      	movs	r0, r4
 8013b3c:	47b0      	blx	r6
 8013b3e:	1c43      	adds	r3, r0, #1
 8013b40:	d103      	bne.n	8013b4a <_wcrtomb_r+0x26>
 8013b42:	2300      	movs	r3, #0
 8013b44:	602b      	str	r3, [r5, #0]
 8013b46:	338a      	adds	r3, #138	; 0x8a
 8013b48:	6023      	str	r3, [r4, #0]
 8013b4a:	b004      	add	sp, #16
 8013b4c:	bd70      	pop	{r4, r5, r6, pc}
 8013b4e:	46c0      	nop			; (mov r8, r8)
 8013b50:	20000444 	.word	0x20000444

08013b54 <__swhatbuf_r>:
 8013b54:	b570      	push	{r4, r5, r6, lr}
 8013b56:	000e      	movs	r6, r1
 8013b58:	001d      	movs	r5, r3
 8013b5a:	230e      	movs	r3, #14
 8013b5c:	5ec9      	ldrsh	r1, [r1, r3]
 8013b5e:	0014      	movs	r4, r2
 8013b60:	b096      	sub	sp, #88	; 0x58
 8013b62:	2900      	cmp	r1, #0
 8013b64:	da09      	bge.n	8013b7a <__swhatbuf_r+0x26>
 8013b66:	89b2      	ldrh	r2, [r6, #12]
 8013b68:	2380      	movs	r3, #128	; 0x80
 8013b6a:	0011      	movs	r1, r2
 8013b6c:	4019      	ands	r1, r3
 8013b6e:	421a      	tst	r2, r3
 8013b70:	d018      	beq.n	8013ba4 <__swhatbuf_r+0x50>
 8013b72:	2100      	movs	r1, #0
 8013b74:	3b40      	subs	r3, #64	; 0x40
 8013b76:	0008      	movs	r0, r1
 8013b78:	e010      	b.n	8013b9c <__swhatbuf_r+0x48>
 8013b7a:	466a      	mov	r2, sp
 8013b7c:	f000 f8de 	bl	8013d3c <_fstat_r>
 8013b80:	2800      	cmp	r0, #0
 8013b82:	dbf0      	blt.n	8013b66 <__swhatbuf_r+0x12>
 8013b84:	23f0      	movs	r3, #240	; 0xf0
 8013b86:	9901      	ldr	r1, [sp, #4]
 8013b88:	021b      	lsls	r3, r3, #8
 8013b8a:	4019      	ands	r1, r3
 8013b8c:	4b07      	ldr	r3, [pc, #28]	; (8013bac <__swhatbuf_r+0x58>)
 8013b8e:	2080      	movs	r0, #128	; 0x80
 8013b90:	18c9      	adds	r1, r1, r3
 8013b92:	424b      	negs	r3, r1
 8013b94:	4159      	adcs	r1, r3
 8013b96:	2380      	movs	r3, #128	; 0x80
 8013b98:	0100      	lsls	r0, r0, #4
 8013b9a:	00db      	lsls	r3, r3, #3
 8013b9c:	6029      	str	r1, [r5, #0]
 8013b9e:	6023      	str	r3, [r4, #0]
 8013ba0:	b016      	add	sp, #88	; 0x58
 8013ba2:	bd70      	pop	{r4, r5, r6, pc}
 8013ba4:	2380      	movs	r3, #128	; 0x80
 8013ba6:	00db      	lsls	r3, r3, #3
 8013ba8:	e7e5      	b.n	8013b76 <__swhatbuf_r+0x22>
 8013baa:	46c0      	nop			; (mov r8, r8)
 8013bac:	ffffe000 	.word	0xffffe000

08013bb0 <__smakebuf_r>:
 8013bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013bb2:	2602      	movs	r6, #2
 8013bb4:	898b      	ldrh	r3, [r1, #12]
 8013bb6:	0005      	movs	r5, r0
 8013bb8:	000c      	movs	r4, r1
 8013bba:	4233      	tst	r3, r6
 8013bbc:	d006      	beq.n	8013bcc <__smakebuf_r+0x1c>
 8013bbe:	0023      	movs	r3, r4
 8013bc0:	3343      	adds	r3, #67	; 0x43
 8013bc2:	6023      	str	r3, [r4, #0]
 8013bc4:	6123      	str	r3, [r4, #16]
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	6163      	str	r3, [r4, #20]
 8013bca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8013bcc:	466a      	mov	r2, sp
 8013bce:	ab01      	add	r3, sp, #4
 8013bd0:	f7ff ffc0 	bl	8013b54 <__swhatbuf_r>
 8013bd4:	9900      	ldr	r1, [sp, #0]
 8013bd6:	0007      	movs	r7, r0
 8013bd8:	0028      	movs	r0, r5
 8013bda:	f7f8 f8df 	bl	800bd9c <_malloc_r>
 8013bde:	2800      	cmp	r0, #0
 8013be0:	d108      	bne.n	8013bf4 <__smakebuf_r+0x44>
 8013be2:	220c      	movs	r2, #12
 8013be4:	5ea3      	ldrsh	r3, [r4, r2]
 8013be6:	059a      	lsls	r2, r3, #22
 8013be8:	d4ef      	bmi.n	8013bca <__smakebuf_r+0x1a>
 8013bea:	2203      	movs	r2, #3
 8013bec:	4393      	bics	r3, r2
 8013bee:	431e      	orrs	r6, r3
 8013bf0:	81a6      	strh	r6, [r4, #12]
 8013bf2:	e7e4      	b.n	8013bbe <__smakebuf_r+0xe>
 8013bf4:	2380      	movs	r3, #128	; 0x80
 8013bf6:	89a2      	ldrh	r2, [r4, #12]
 8013bf8:	6020      	str	r0, [r4, #0]
 8013bfa:	4313      	orrs	r3, r2
 8013bfc:	81a3      	strh	r3, [r4, #12]
 8013bfe:	9b00      	ldr	r3, [sp, #0]
 8013c00:	6120      	str	r0, [r4, #16]
 8013c02:	6163      	str	r3, [r4, #20]
 8013c04:	9b01      	ldr	r3, [sp, #4]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d00c      	beq.n	8013c24 <__smakebuf_r+0x74>
 8013c0a:	0028      	movs	r0, r5
 8013c0c:	230e      	movs	r3, #14
 8013c0e:	5ee1      	ldrsh	r1, [r4, r3]
 8013c10:	f000 f8a6 	bl	8013d60 <_isatty_r>
 8013c14:	2800      	cmp	r0, #0
 8013c16:	d005      	beq.n	8013c24 <__smakebuf_r+0x74>
 8013c18:	2303      	movs	r3, #3
 8013c1a:	89a2      	ldrh	r2, [r4, #12]
 8013c1c:	439a      	bics	r2, r3
 8013c1e:	3b02      	subs	r3, #2
 8013c20:	4313      	orrs	r3, r2
 8013c22:	81a3      	strh	r3, [r4, #12]
 8013c24:	89a3      	ldrh	r3, [r4, #12]
 8013c26:	433b      	orrs	r3, r7
 8013c28:	81a3      	strh	r3, [r4, #12]
 8013c2a:	e7ce      	b.n	8013bca <__smakebuf_r+0x1a>

08013c2c <__swbuf_r>:
 8013c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c2e:	0006      	movs	r6, r0
 8013c30:	000d      	movs	r5, r1
 8013c32:	0014      	movs	r4, r2
 8013c34:	2800      	cmp	r0, #0
 8013c36:	d004      	beq.n	8013c42 <__swbuf_r+0x16>
 8013c38:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d101      	bne.n	8013c42 <__swbuf_r+0x16>
 8013c3e:	f7f9 fac1 	bl	800d1c4 <__sinit>
 8013c42:	69a3      	ldr	r3, [r4, #24]
 8013c44:	60a3      	str	r3, [r4, #8]
 8013c46:	89a3      	ldrh	r3, [r4, #12]
 8013c48:	071b      	lsls	r3, r3, #28
 8013c4a:	d52e      	bpl.n	8013caa <__swbuf_r+0x7e>
 8013c4c:	6923      	ldr	r3, [r4, #16]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d02b      	beq.n	8013caa <__swbuf_r+0x7e>
 8013c52:	230c      	movs	r3, #12
 8013c54:	5ee2      	ldrsh	r2, [r4, r3]
 8013c56:	2380      	movs	r3, #128	; 0x80
 8013c58:	019b      	lsls	r3, r3, #6
 8013c5a:	b2ef      	uxtb	r7, r5
 8013c5c:	b2ed      	uxtb	r5, r5
 8013c5e:	421a      	tst	r2, r3
 8013c60:	d02c      	beq.n	8013cbc <__swbuf_r+0x90>
 8013c62:	6923      	ldr	r3, [r4, #16]
 8013c64:	6820      	ldr	r0, [r4, #0]
 8013c66:	1ac0      	subs	r0, r0, r3
 8013c68:	6963      	ldr	r3, [r4, #20]
 8013c6a:	4283      	cmp	r3, r0
 8013c6c:	dc05      	bgt.n	8013c7a <__swbuf_r+0x4e>
 8013c6e:	0021      	movs	r1, r4
 8013c70:	0030      	movs	r0, r6
 8013c72:	f7fd fb39 	bl	80112e8 <_fflush_r>
 8013c76:	2800      	cmp	r0, #0
 8013c78:	d11d      	bne.n	8013cb6 <__swbuf_r+0x8a>
 8013c7a:	68a3      	ldr	r3, [r4, #8]
 8013c7c:	3001      	adds	r0, #1
 8013c7e:	3b01      	subs	r3, #1
 8013c80:	60a3      	str	r3, [r4, #8]
 8013c82:	6823      	ldr	r3, [r4, #0]
 8013c84:	1c5a      	adds	r2, r3, #1
 8013c86:	6022      	str	r2, [r4, #0]
 8013c88:	701f      	strb	r7, [r3, #0]
 8013c8a:	6963      	ldr	r3, [r4, #20]
 8013c8c:	4283      	cmp	r3, r0
 8013c8e:	d004      	beq.n	8013c9a <__swbuf_r+0x6e>
 8013c90:	89a3      	ldrh	r3, [r4, #12]
 8013c92:	07db      	lsls	r3, r3, #31
 8013c94:	d507      	bpl.n	8013ca6 <__swbuf_r+0x7a>
 8013c96:	2d0a      	cmp	r5, #10
 8013c98:	d105      	bne.n	8013ca6 <__swbuf_r+0x7a>
 8013c9a:	0021      	movs	r1, r4
 8013c9c:	0030      	movs	r0, r6
 8013c9e:	f7fd fb23 	bl	80112e8 <_fflush_r>
 8013ca2:	2800      	cmp	r0, #0
 8013ca4:	d107      	bne.n	8013cb6 <__swbuf_r+0x8a>
 8013ca6:	0028      	movs	r0, r5
 8013ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013caa:	0021      	movs	r1, r4
 8013cac:	0030      	movs	r0, r6
 8013cae:	f7ff fe53 	bl	8013958 <__swsetup_r>
 8013cb2:	2800      	cmp	r0, #0
 8013cb4:	d0cd      	beq.n	8013c52 <__swbuf_r+0x26>
 8013cb6:	2501      	movs	r5, #1
 8013cb8:	426d      	negs	r5, r5
 8013cba:	e7f4      	b.n	8013ca6 <__swbuf_r+0x7a>
 8013cbc:	4313      	orrs	r3, r2
 8013cbe:	81a3      	strh	r3, [r4, #12]
 8013cc0:	4a02      	ldr	r2, [pc, #8]	; (8013ccc <__swbuf_r+0xa0>)
 8013cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013cc4:	4013      	ands	r3, r2
 8013cc6:	6663      	str	r3, [r4, #100]	; 0x64
 8013cc8:	e7cb      	b.n	8013c62 <__swbuf_r+0x36>
 8013cca:	46c0      	nop			; (mov r8, r8)
 8013ccc:	ffffdfff 	.word	0xffffdfff

08013cd0 <_raise_r>:
 8013cd0:	b570      	push	{r4, r5, r6, lr}
 8013cd2:	0004      	movs	r4, r0
 8013cd4:	000d      	movs	r5, r1
 8013cd6:	291f      	cmp	r1, #31
 8013cd8:	d904      	bls.n	8013ce4 <_raise_r+0x14>
 8013cda:	2316      	movs	r3, #22
 8013cdc:	6003      	str	r3, [r0, #0]
 8013cde:	2001      	movs	r0, #1
 8013ce0:	4240      	negs	r0, r0
 8013ce2:	bd70      	pop	{r4, r5, r6, pc}
 8013ce4:	0003      	movs	r3, r0
 8013ce6:	33fc      	adds	r3, #252	; 0xfc
 8013ce8:	69db      	ldr	r3, [r3, #28]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d004      	beq.n	8013cf8 <_raise_r+0x28>
 8013cee:	008a      	lsls	r2, r1, #2
 8013cf0:	189b      	adds	r3, r3, r2
 8013cf2:	681a      	ldr	r2, [r3, #0]
 8013cf4:	2a00      	cmp	r2, #0
 8013cf6:	d108      	bne.n	8013d0a <_raise_r+0x3a>
 8013cf8:	0020      	movs	r0, r4
 8013cfa:	f000 f855 	bl	8013da8 <_getpid_r>
 8013cfe:	002a      	movs	r2, r5
 8013d00:	0001      	movs	r1, r0
 8013d02:	0020      	movs	r0, r4
 8013d04:	f000 f83e 	bl	8013d84 <_kill_r>
 8013d08:	e7eb      	b.n	8013ce2 <_raise_r+0x12>
 8013d0a:	2000      	movs	r0, #0
 8013d0c:	2a01      	cmp	r2, #1
 8013d0e:	d0e8      	beq.n	8013ce2 <_raise_r+0x12>
 8013d10:	1c51      	adds	r1, r2, #1
 8013d12:	d103      	bne.n	8013d1c <_raise_r+0x4c>
 8013d14:	2316      	movs	r3, #22
 8013d16:	3001      	adds	r0, #1
 8013d18:	6023      	str	r3, [r4, #0]
 8013d1a:	e7e2      	b.n	8013ce2 <_raise_r+0x12>
 8013d1c:	2400      	movs	r4, #0
 8013d1e:	0028      	movs	r0, r5
 8013d20:	601c      	str	r4, [r3, #0]
 8013d22:	4790      	blx	r2
 8013d24:	0020      	movs	r0, r4
 8013d26:	e7dc      	b.n	8013ce2 <_raise_r+0x12>

08013d28 <raise>:
 8013d28:	b510      	push	{r4, lr}
 8013d2a:	4b03      	ldr	r3, [pc, #12]	; (8013d38 <raise+0x10>)
 8013d2c:	0001      	movs	r1, r0
 8013d2e:	6818      	ldr	r0, [r3, #0]
 8013d30:	f7ff ffce 	bl	8013cd0 <_raise_r>
 8013d34:	bd10      	pop	{r4, pc}
 8013d36:	46c0      	nop			; (mov r8, r8)
 8013d38:	200006d0 	.word	0x200006d0

08013d3c <_fstat_r>:
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	b570      	push	{r4, r5, r6, lr}
 8013d40:	4d06      	ldr	r5, [pc, #24]	; (8013d5c <_fstat_r+0x20>)
 8013d42:	0004      	movs	r4, r0
 8013d44:	0008      	movs	r0, r1
 8013d46:	0011      	movs	r1, r2
 8013d48:	602b      	str	r3, [r5, #0]
 8013d4a:	f7f0 fa90 	bl	800426e <_fstat>
 8013d4e:	1c43      	adds	r3, r0, #1
 8013d50:	d103      	bne.n	8013d5a <_fstat_r+0x1e>
 8013d52:	682b      	ldr	r3, [r5, #0]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d000      	beq.n	8013d5a <_fstat_r+0x1e>
 8013d58:	6023      	str	r3, [r4, #0]
 8013d5a:	bd70      	pop	{r4, r5, r6, pc}
 8013d5c:	20000db8 	.word	0x20000db8

08013d60 <_isatty_r>:
 8013d60:	2300      	movs	r3, #0
 8013d62:	b570      	push	{r4, r5, r6, lr}
 8013d64:	4d06      	ldr	r5, [pc, #24]	; (8013d80 <_isatty_r+0x20>)
 8013d66:	0004      	movs	r4, r0
 8013d68:	0008      	movs	r0, r1
 8013d6a:	602b      	str	r3, [r5, #0]
 8013d6c:	f7f0 fa8d 	bl	800428a <_isatty>
 8013d70:	1c43      	adds	r3, r0, #1
 8013d72:	d103      	bne.n	8013d7c <_isatty_r+0x1c>
 8013d74:	682b      	ldr	r3, [r5, #0]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d000      	beq.n	8013d7c <_isatty_r+0x1c>
 8013d7a:	6023      	str	r3, [r4, #0]
 8013d7c:	bd70      	pop	{r4, r5, r6, pc}
 8013d7e:	46c0      	nop			; (mov r8, r8)
 8013d80:	20000db8 	.word	0x20000db8

08013d84 <_kill_r>:
 8013d84:	2300      	movs	r3, #0
 8013d86:	b570      	push	{r4, r5, r6, lr}
 8013d88:	4d06      	ldr	r5, [pc, #24]	; (8013da4 <_kill_r+0x20>)
 8013d8a:	0004      	movs	r4, r0
 8013d8c:	0008      	movs	r0, r1
 8013d8e:	0011      	movs	r1, r2
 8013d90:	602b      	str	r3, [r5, #0]
 8013d92:	f7f0 fa0d 	bl	80041b0 <_kill>
 8013d96:	1c43      	adds	r3, r0, #1
 8013d98:	d103      	bne.n	8013da2 <_kill_r+0x1e>
 8013d9a:	682b      	ldr	r3, [r5, #0]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d000      	beq.n	8013da2 <_kill_r+0x1e>
 8013da0:	6023      	str	r3, [r4, #0]
 8013da2:	bd70      	pop	{r4, r5, r6, pc}
 8013da4:	20000db8 	.word	0x20000db8

08013da8 <_getpid_r>:
 8013da8:	b510      	push	{r4, lr}
 8013daa:	f7f0 f9fb 	bl	80041a4 <_getpid>
 8013dae:	bd10      	pop	{r4, pc}

08013db0 <round>:
 8013db0:	b570      	push	{r4, r5, r6, lr}
 8013db2:	004a      	lsls	r2, r1, #1
 8013db4:	000d      	movs	r5, r1
 8013db6:	4920      	ldr	r1, [pc, #128]	; (8013e38 <round+0x88>)
 8013db8:	0d52      	lsrs	r2, r2, #21
 8013dba:	1851      	adds	r1, r2, r1
 8013dbc:	0006      	movs	r6, r0
 8013dbe:	2913      	cmp	r1, #19
 8013dc0:	dc18      	bgt.n	8013df4 <round+0x44>
 8013dc2:	2900      	cmp	r1, #0
 8013dc4:	da09      	bge.n	8013dda <round+0x2a>
 8013dc6:	0feb      	lsrs	r3, r5, #31
 8013dc8:	2200      	movs	r2, #0
 8013dca:	07db      	lsls	r3, r3, #31
 8013dcc:	3101      	adds	r1, #1
 8013dce:	d101      	bne.n	8013dd4 <round+0x24>
 8013dd0:	491a      	ldr	r1, [pc, #104]	; (8013e3c <round+0x8c>)
 8013dd2:	430b      	orrs	r3, r1
 8013dd4:	0019      	movs	r1, r3
 8013dd6:	0010      	movs	r0, r2
 8013dd8:	e017      	b.n	8013e0a <round+0x5a>
 8013dda:	4c19      	ldr	r4, [pc, #100]	; (8013e40 <round+0x90>)
 8013ddc:	410c      	asrs	r4, r1
 8013dde:	0022      	movs	r2, r4
 8013de0:	402a      	ands	r2, r5
 8013de2:	4302      	orrs	r2, r0
 8013de4:	d013      	beq.n	8013e0e <round+0x5e>
 8013de6:	2280      	movs	r2, #128	; 0x80
 8013de8:	0312      	lsls	r2, r2, #12
 8013dea:	410a      	asrs	r2, r1
 8013dec:	1953      	adds	r3, r2, r5
 8013dee:	43a3      	bics	r3, r4
 8013df0:	2200      	movs	r2, #0
 8013df2:	e7ef      	b.n	8013dd4 <round+0x24>
 8013df4:	2933      	cmp	r1, #51	; 0x33
 8013df6:	dd0d      	ble.n	8013e14 <round+0x64>
 8013df8:	2380      	movs	r3, #128	; 0x80
 8013dfa:	00db      	lsls	r3, r3, #3
 8013dfc:	4299      	cmp	r1, r3
 8013dfe:	d106      	bne.n	8013e0e <round+0x5e>
 8013e00:	0002      	movs	r2, r0
 8013e02:	002b      	movs	r3, r5
 8013e04:	0029      	movs	r1, r5
 8013e06:	f7ec fcd7 	bl	80007b8 <__aeabi_dadd>
 8013e0a:	0006      	movs	r6, r0
 8013e0c:	000d      	movs	r5, r1
 8013e0e:	0030      	movs	r0, r6
 8013e10:	0029      	movs	r1, r5
 8013e12:	bd70      	pop	{r4, r5, r6, pc}
 8013e14:	4c0b      	ldr	r4, [pc, #44]	; (8013e44 <round+0x94>)
 8013e16:	1912      	adds	r2, r2, r4
 8013e18:	2401      	movs	r4, #1
 8013e1a:	4264      	negs	r4, r4
 8013e1c:	40d4      	lsrs	r4, r2
 8013e1e:	4220      	tst	r0, r4
 8013e20:	d0f5      	beq.n	8013e0e <round+0x5e>
 8013e22:	2233      	movs	r2, #51	; 0x33
 8013e24:	1a51      	subs	r1, r2, r1
 8013e26:	3a32      	subs	r2, #50	; 0x32
 8013e28:	408a      	lsls	r2, r1
 8013e2a:	1812      	adds	r2, r2, r0
 8013e2c:	4282      	cmp	r2, r0
 8013e2e:	4180      	sbcs	r0, r0
 8013e30:	4240      	negs	r0, r0
 8013e32:	182b      	adds	r3, r5, r0
 8013e34:	43a2      	bics	r2, r4
 8013e36:	e7cd      	b.n	8013dd4 <round+0x24>
 8013e38:	fffffc01 	.word	0xfffffc01
 8013e3c:	3ff00000 	.word	0x3ff00000
 8013e40:	000fffff 	.word	0x000fffff
 8013e44:	fffffbed 	.word	0xfffffbed

08013e48 <_init>:
 8013e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e4a:	46c0      	nop			; (mov r8, r8)
 8013e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e4e:	bc08      	pop	{r3}
 8013e50:	469e      	mov	lr, r3
 8013e52:	4770      	bx	lr

08013e54 <_fini>:
 8013e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e56:	46c0      	nop			; (mov r8, r8)
 8013e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e5a:	bc08      	pop	{r3}
 8013e5c:	469e      	mov	lr, r3
 8013e5e:	4770      	bx	lr
