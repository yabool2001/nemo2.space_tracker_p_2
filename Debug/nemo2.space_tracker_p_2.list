
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047b4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004870  08004870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004920  08004920  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004920  08004920  00014920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004928  08004928  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004928  08004928  00014928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000014  08004948  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08004948  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000154eb  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002997  00000000  00000000  0003556a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  00037f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5a  00000000  00000000  00039288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dd41  00000000  00000000  0003a1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ec4  00000000  00000000  00057f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4614  00000000  00000000  0006ede7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048fc  00000000  00000000  001333fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00137cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004858 	.word	0x08004858

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	08004858 	.word	0x08004858

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fe58 	bl	80012e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f828 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 faba 	bl	8000bb0 <MX_GPIO_Init>
  MX_RTC_Init();
 800063c:	f000 f87a 	bl	8000734 <MX_RTC_Init>
  MX_TIM6_Init();
 8000640:	f000 f95a 	bl	80008f8 <MX_TIM6_Init>
  MX_SPI1_Init();
 8000644:	f000 f91a 	bl	800087c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000648:	f000 f994 	bl	8000974 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800064c:	f000 f9e0 	bl	8000a10 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000650:	f000 fa2c 	bl	8000aac <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 8000654:	f000 fa78 	bl	8000b48 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  // System hello
  HAL_UART_Transmit ( &HUART_DBG , (uint8_t*) hello , strlen ( hello ) , UART_TIMEOUT ) ;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <main+0x54>)
 800065a:	681c      	ldr	r4, [r3, #0]
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <main+0x54>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff fd4f 	bl	8000104 <strlen>
 8000666:	0003      	movs	r3, r0
 8000668:	b29a      	uxth	r2, r3
 800066a:	23fa      	movs	r3, #250	; 0xfa
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <main+0x58>)
 8000670:	0021      	movs	r1, r4
 8000672:	f003 f913 	bl	800389c <HAL_UART_Transmit>
  blink_ldg ( 3 , 250 ) ;
 8000676:	21fa      	movs	r1, #250	; 0xfa
 8000678:	2003      	movs	r0, #3
 800067a:	f000 fb95 	bl	8000da8 <blink_ldg>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067e:	e7fe      	b.n	800067e <main+0x52>
 8000680:	20000000 	.word	0x20000000
 8000684:	200001a0 	.word	0x200001a0

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b095      	sub	sp, #84	; 0x54
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	2414      	movs	r4, #20
 8000690:	193b      	adds	r3, r7, r4
 8000692:	0018      	movs	r0, r3
 8000694:	233c      	movs	r3, #60	; 0x3c
 8000696:	001a      	movs	r2, r3
 8000698:	2100      	movs	r1, #0
 800069a:	f004 f847 	bl	800472c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	0018      	movs	r0, r3
 80006a2:	2310      	movs	r3, #16
 80006a4:	001a      	movs	r2, r3
 80006a6:	2100      	movs	r1, #0
 80006a8:	f004 f840 	bl	800472c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 f967 	bl	8001984 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b6:	f001 f957 	bl	8001968 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <SystemClock_Config+0xa8>)
 80006bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <SystemClock_Config+0xa8>)
 80006c0:	2118      	movs	r1, #24
 80006c2:	438a      	bics	r2, r1
 80006c4:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2206      	movs	r2, #6
 80006ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2201      	movs	r2, #1
 80006d0:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	0052      	lsls	r2, r2, #1
 80006d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2240      	movs	r2, #64	; 0x40
 80006e4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 f994 	bl	8001a1c <HAL_RCC_OscConfig>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006f8:	f000 fb84 	bl	8000e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2207      	movs	r2, #7
 8000700:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2100      	movs	r1, #0
 8000718:	0018      	movs	r0, r3
 800071a:	f001 fcdf 	bl	80020dc <HAL_RCC_ClockConfig>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000722:	f000 fb6f 	bl	8000e04 <Error_Handler>
  }
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b015      	add	sp, #84	; 0x54
 800072c:	bd90      	pop	{r4, r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	40021000 	.word	0x40021000

08000734 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b090      	sub	sp, #64	; 0x40
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800073a:	232c      	movs	r3, #44	; 0x2c
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	0018      	movs	r0, r3
 8000740:	2314      	movs	r3, #20
 8000742:	001a      	movs	r2, r3
 8000744:	2100      	movs	r1, #0
 8000746:	f003 fff1 	bl	800472c <memset>
  RTC_DateTypeDef sDate = {0};
 800074a:	2328      	movs	r3, #40	; 0x28
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000752:	003b      	movs	r3, r7
 8000754:	0018      	movs	r0, r3
 8000756:	2328      	movs	r3, #40	; 0x28
 8000758:	001a      	movs	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	f003 ffe6 	bl	800472c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000760:	4b44      	ldr	r3, [pc, #272]	; (8000874 <MX_RTC_Init+0x140>)
 8000762:	4a45      	ldr	r2, [pc, #276]	; (8000878 <MX_RTC_Init+0x144>)
 8000764:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000766:	4b43      	ldr	r3, [pc, #268]	; (8000874 <MX_RTC_Init+0x140>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800076c:	4b41      	ldr	r3, [pc, #260]	; (8000874 <MX_RTC_Init+0x140>)
 800076e:	227f      	movs	r2, #127	; 0x7f
 8000770:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000772:	4b40      	ldr	r3, [pc, #256]	; (8000874 <MX_RTC_Init+0x140>)
 8000774:	22ff      	movs	r2, #255	; 0xff
 8000776:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000778:	4b3e      	ldr	r3, [pc, #248]	; (8000874 <MX_RTC_Init+0x140>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800077e:	4b3d      	ldr	r3, [pc, #244]	; (8000874 <MX_RTC_Init+0x140>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000784:	4b3b      	ldr	r3, [pc, #236]	; (8000874 <MX_RTC_Init+0x140>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800078a:	4b3a      	ldr	r3, [pc, #232]	; (8000874 <MX_RTC_Init+0x140>)
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	05d2      	lsls	r2, r2, #23
 8000790:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000792:	4b38      	ldr	r3, [pc, #224]	; (8000874 <MX_RTC_Init+0x140>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000798:	4b36      	ldr	r3, [pc, #216]	; (8000874 <MX_RTC_Init+0x140>)
 800079a:	0018      	movs	r0, r3
 800079c:	f002 f884 	bl	80028a8 <HAL_RTC_Init>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80007a4:	f000 fb2e 	bl	8000e04 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80007a8:	212c      	movs	r1, #44	; 0x2c
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2200      	movs	r2, #0
 80007b4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2200      	movs	r2, #0
 80007ba:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007ce:	1879      	adds	r1, r7, r1
 80007d0:	4b28      	ldr	r3, [pc, #160]	; (8000874 <MX_RTC_Init+0x140>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	0018      	movs	r0, r3
 80007d6:	f002 f909 	bl	80029ec <HAL_RTC_SetTime>
 80007da:	1e03      	subs	r3, r0, #0
 80007dc:	d001      	beq.n	80007e2 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80007de:	f000 fb11 	bl	8000e04 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80007e2:	2128      	movs	r1, #40	; 0x28
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2206      	movs	r2, #6
 80007e8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2201      	movs	r2, #1
 80007ee:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2201      	movs	r2, #1
 80007f4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2200      	movs	r2, #0
 80007fa:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_RTC_Init+0x140>)
 8000800:	2201      	movs	r2, #1
 8000802:	0018      	movs	r0, r3
 8000804:	f002 f99a 	bl	8002b3c <HAL_RTC_SetDate>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 800080c:	f000 fafa 	bl	8000e04 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000810:	003b      	movs	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000816:	003b      	movs	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800081c:	003b      	movs	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000822:	003b      	movs	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000828:	003b      	movs	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800082e:	003b      	movs	r3, r7
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000834:	003b      	movs	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800083a:	003b      	movs	r3, r7
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000840:	003b      	movs	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000846:	003b      	movs	r3, r7
 8000848:	2220      	movs	r2, #32
 800084a:	2101      	movs	r1, #1
 800084c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800084e:	003b      	movs	r3, r7
 8000850:	2280      	movs	r2, #128	; 0x80
 8000852:	0052      	lsls	r2, r2, #1
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000856:	0039      	movs	r1, r7
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_RTC_Init+0x140>)
 800085a:	2201      	movs	r2, #1
 800085c:	0018      	movs	r0, r3
 800085e:	f002 f9ff 	bl	8002c60 <HAL_RTC_SetAlarm_IT>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8000866:	f000 facd 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b010      	add	sp, #64	; 0x40
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	20000030 	.word	0x20000030
 8000878:	40002800 	.word	0x40002800

0800087c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000882:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <MX_SPI1_Init+0x78>)
 8000884:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000888:	2282      	movs	r2, #130	; 0x82
 800088a:	0052      	lsls	r2, r2, #1
 800088c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000896:	22e0      	movs	r2, #224	; 0xe0
 8000898:	00d2      	lsls	r2, r2, #3
 800089a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_SPI1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	0092      	lsls	r2, r2, #2
 80008ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008ca:	2207      	movs	r2, #7
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008d6:	2208      	movs	r2, #8
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008dc:	0018      	movs	r0, r3
 80008de:	f002 fc21 	bl	8003124 <HAL_SPI_Init>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f000 fa8d 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000005c 	.word	0x2000005c
 80008f4:	40013000 	.word	0x40013000

080008f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	0018      	movs	r0, r3
 8000902:	230c      	movs	r3, #12
 8000904:	001a      	movs	r2, r3
 8000906:	2100      	movs	r1, #0
 8000908:	f003 ff10 	bl	800472c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_TIM6_Init+0x6c>)
 800090e:	4a16      	ldr	r2, [pc, #88]	; (8000968 <MX_TIM6_Init+0x70>)
 8000910:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_TIM6_Init+0x6c>)
 8000914:	4a15      	ldr	r2, [pc, #84]	; (800096c <MX_TIM6_Init+0x74>)
 8000916:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_TIM6_Init+0x6c>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_TIM6_Init+0x6c>)
 8000920:	4a13      	ldr	r2, [pc, #76]	; (8000970 <MX_TIM6_Init+0x78>)
 8000922:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_TIM6_Init+0x6c>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_TIM6_Init+0x6c>)
 800092c:	0018      	movs	r0, r3
 800092e:	f002 fcb1 	bl	8003294 <HAL_TIM_Base_Init>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000936:	f000 fa65 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000946:	1d3a      	adds	r2, r7, #4
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_TIM6_Init+0x6c>)
 800094a:	0011      	movs	r1, r2
 800094c:	0018      	movs	r0, r3
 800094e:	f002 fec1 	bl	80036d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d001      	beq.n	800095a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000956:	f000 fa55 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b004      	add	sp, #16
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	200000c0 	.word	0x200000c0
 8000968:	40001000 	.word	0x40001000
 800096c:	00003e7f 	.word	0x00003e7f
 8000970:	000003e7 	.word	0x000003e7

08000974 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000978:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <MX_USART1_UART_Init+0x94>)
 800097a:	4a24      	ldr	r2, [pc, #144]	; (8000a0c <MX_USART1_UART_Init+0x98>)
 800097c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800097e:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_USART1_UART_Init+0x94>)
 8000980:	22e1      	movs	r2, #225	; 0xe1
 8000982:	0252      	lsls	r2, r2, #9
 8000984:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_USART1_UART_Init+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_USART1_UART_Init+0x94>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_USART1_UART_Init+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_USART1_UART_Init+0x94>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_USART1_UART_Init+0x94>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_USART1_UART_Init+0x94>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_USART1_UART_Init+0x94>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_USART1_UART_Init+0x94>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_USART1_UART_Init+0x94>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_USART1_UART_Init+0x94>)
 80009be:	0018      	movs	r0, r3
 80009c0:	f002 ff16 	bl	80037f0 <HAL_UART_Init>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009c8:	f000 fa1c 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART1_UART_Init+0x94>)
 80009ce:	2100      	movs	r1, #0
 80009d0:	0018      	movs	r0, r3
 80009d2:	f003 fdcb 	bl	800456c <HAL_UARTEx_SetTxFifoThreshold>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d001      	beq.n	80009de <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009da:	f000 fa13 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <MX_USART1_UART_Init+0x94>)
 80009e0:	2100      	movs	r1, #0
 80009e2:	0018      	movs	r0, r3
 80009e4:	f003 fe02 	bl	80045ec <HAL_UARTEx_SetRxFifoThreshold>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009ec:	f000 fa0a 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <MX_USART1_UART_Init+0x94>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f003 fd80 	bl	80044f8 <HAL_UARTEx_DisableFifoMode>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009fc:	f000 fa02 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	2000010c 	.word	0x2000010c
 8000a0c:	40013800 	.word	0x40013800

08000a10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a14:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a16:	4a24      	ldr	r2, [pc, #144]	; (8000aa8 <MX_USART2_UART_Init+0x98>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a1a:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a1c:	22e1      	movs	r2, #225	; 0xe1
 8000a1e:	0252      	lsls	r2, r2, #9
 8000a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f002 fec8 	bl	80037f0 <HAL_UART_Init>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a64:	f000 f9ce 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f003 fd7d 	bl	800456c <HAL_UARTEx_SetTxFifoThreshold>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a76:	f000 f9c5 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f003 fdb4 	bl	80045ec <HAL_UARTEx_SetRxFifoThreshold>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a88:	f000 f9bc 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <MX_USART2_UART_Init+0x94>)
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f003 fd32 	bl	80044f8 <HAL_UARTEx_DisableFifoMode>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a98:	f000 f9b4 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	200001a0 	.word	0x200001a0
 8000aa8:	40004400 	.word	0x40004400

08000aac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab0:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <MX_USART3_UART_Init+0x94>)
 8000ab2:	4a24      	ldr	r2, [pc, #144]	; (8000b44 <MX_USART3_UART_Init+0x98>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <MX_USART3_UART_Init+0x94>)
 8000ab8:	2296      	movs	r2, #150	; 0x96
 8000aba:	0192      	lsls	r2, r2, #6
 8000abc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <MX_USART3_UART_Init+0x94>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <MX_USART3_UART_Init+0x94>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_USART3_UART_Init+0x94>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_USART3_UART_Init+0x94>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_USART3_UART_Init+0x94>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_USART3_UART_Init+0x94>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_USART3_UART_Init+0x94>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_USART3_UART_Init+0x94>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_USART3_UART_Init+0x94>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_USART3_UART_Init+0x94>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f002 fe7a 	bl	80037f0 <HAL_UART_Init>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b00:	f000 f980 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_USART3_UART_Init+0x94>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f003 fd2f 	bl	800456c <HAL_UARTEx_SetTxFifoThreshold>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b12:	f000 f977 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <MX_USART3_UART_Init+0x94>)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f003 fd66 	bl	80045ec <HAL_UARTEx_SetRxFifoThreshold>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b24:	f000 f96e 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <MX_USART3_UART_Init+0x94>)
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f003 fce4 	bl	80044f8 <HAL_UARTEx_DisableFifoMode>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b34:	f000 f966 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	20000234 	.word	0x20000234
 8000b44:	40004800 	.word	0x40004800

08000b48 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_USART5_UART_Init+0x60>)
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <MX_USART5_UART_Init+0x64>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_USART5_UART_Init+0x60>)
 8000b54:	22e1      	movs	r2, #225	; 0xe1
 8000b56:	0252      	lsls	r2, r2, #9
 8000b58:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_USART5_UART_Init+0x60>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_USART5_UART_Init+0x60>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_USART5_UART_Init+0x60>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_USART5_UART_Init+0x60>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <MX_USART5_UART_Init+0x60>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <MX_USART5_UART_Init+0x60>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <MX_USART5_UART_Init+0x60>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <MX_USART5_UART_Init+0x60>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MX_USART5_UART_Init+0x60>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <MX_USART5_UART_Init+0x60>)
 8000b92:	0018      	movs	r0, r3
 8000b94:	f002 fe2c 	bl	80037f0 <HAL_UART_Init>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8000b9c:	f000 f932 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	200002c8 	.word	0x200002c8
 8000bac:	40005000 	.word	0x40005000

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b08b      	sub	sp, #44	; 0x2c
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	2414      	movs	r4, #20
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	0018      	movs	r0, r3
 8000bbc:	2314      	movs	r3, #20
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f003 fdb3 	bl	800472c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc6:	4b72      	ldr	r3, [pc, #456]	; (8000d90 <MX_GPIO_Init+0x1e0>)
 8000bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bca:	4b71      	ldr	r3, [pc, #452]	; (8000d90 <MX_GPIO_Init+0x1e0>)
 8000bcc:	2104      	movs	r1, #4
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	635a      	str	r2, [r3, #52]	; 0x34
 8000bd2:	4b6f      	ldr	r3, [pc, #444]	; (8000d90 <MX_GPIO_Init+0x1e0>)
 8000bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	4b6c      	ldr	r3, [pc, #432]	; (8000d90 <MX_GPIO_Init+0x1e0>)
 8000be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000be2:	4b6b      	ldr	r3, [pc, #428]	; (8000d90 <MX_GPIO_Init+0x1e0>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	430a      	orrs	r2, r1
 8000be8:	635a      	str	r2, [r3, #52]	; 0x34
 8000bea:	4b69      	ldr	r3, [pc, #420]	; (8000d90 <MX_GPIO_Init+0x1e0>)
 8000bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	4b66      	ldr	r3, [pc, #408]	; (8000d90 <MX_GPIO_Init+0x1e0>)
 8000bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bfa:	4b65      	ldr	r3, [pc, #404]	; (8000d90 <MX_GPIO_Init+0x1e0>)
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	635a      	str	r2, [r3, #52]	; 0x34
 8000c02:	4b63      	ldr	r3, [pc, #396]	; (8000d90 <MX_GPIO_Init+0x1e0>)
 8000c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c06:	2202      	movs	r2, #2
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0e:	4b60      	ldr	r3, [pc, #384]	; (8000d90 <MX_GPIO_Init+0x1e0>)
 8000c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c12:	4b5f      	ldr	r3, [pc, #380]	; (8000d90 <MX_GPIO_Init+0x1e0>)
 8000c14:	2108      	movs	r1, #8
 8000c16:	430a      	orrs	r2, r1
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
 8000c1a:	4b5d      	ldr	r3, [pc, #372]	; (8000d90 <MX_GPIO_Init+0x1e0>)
 8000c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1e:	2208      	movs	r2, #8
 8000c20:	4013      	ands	r3, r2
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8000c26:	23a0      	movs	r3, #160	; 0xa0
 8000c28:	05db      	lsls	r3, r3, #23
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2110      	movs	r1, #16
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 fe62 	bl	80018f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8000c34:	4957      	ldr	r1, [pc, #348]	; (8000d94 <MX_GPIO_Init+0x1e4>)
 8000c36:	4b58      	ldr	r3, [pc, #352]	; (8000d98 <MX_GPIO_Init+0x1e8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f000 fe5c 	bl	80018f8 <HAL_GPIO_WritePin>
                          |GNSS_RST_Pin|GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8000c40:	4b56      	ldr	r3, [pc, #344]	; (8000d9c <MX_GPIO_Init+0x1ec>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	2103      	movs	r1, #3
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 fe56 	bl	80018f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8000c4c:	193b      	adds	r3, r7, r4
 8000c4e:	2201      	movs	r2, #1
 8000c50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	2288      	movs	r2, #136	; 0x88
 8000c56:	0352      	lsls	r2, r2, #13
 8000c58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8000c60:	193a      	adds	r2, r7, r4
 8000c62:	23a0      	movs	r3, #160	; 0xa0
 8000c64:	05db      	lsls	r3, r3, #23
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f000 fcd9 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2202      	movs	r2, #2
 8000c72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c80:	193a      	adds	r2, r7, r4
 8000c82:	23a0      	movs	r3, #160	; 0xa0
 8000c84:	05db      	lsls	r3, r3, #23
 8000c86:	0011      	movs	r1, r2
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f000 fcc9 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	2210      	movs	r2, #16
 8000c92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	2201      	movs	r2, #1
 8000c98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	193a      	adds	r2, r7, r4
 8000ca8:	23a0      	movs	r3, #160	; 0xa0
 8000caa:	05db      	lsls	r3, r3, #23
 8000cac:	0011      	movs	r1, r2
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 fcb6 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	4a3a      	ldr	r2, [pc, #232]	; (8000da0 <MX_GPIO_Init+0x1f0>)
 8000cb8:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	4a32      	ldr	r2, [pc, #200]	; (8000d98 <MX_GPIO_Init+0x1e8>)
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	0010      	movs	r0, r2
 8000cd4:	f000 fca4 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8000cd8:	0021      	movs	r1, r4
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2224      	movs	r2, #36	; 0x24
 8000cde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2288      	movs	r2, #136	; 0x88
 8000ce4:	0352      	lsls	r2, r2, #13
 8000ce6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	000c      	movs	r4, r1
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	4a29      	ldr	r2, [pc, #164]	; (8000d98 <MX_GPIO_Init+0x1e8>)
 8000cf4:	0019      	movs	r1, r3
 8000cf6:	0010      	movs	r0, r2
 8000cf8:	f000 fc92 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8000cfc:	0021      	movs	r1, r4
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	0192      	lsls	r2, r2, #6
 8000d04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d06:	000c      	movs	r4, r1
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	2211      	movs	r2, #17
 8000d0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	4a1e      	ldr	r2, [pc, #120]	; (8000d98 <MX_GPIO_Init+0x1e8>)
 8000d1e:	0019      	movs	r1, r3
 8000d20:	0010      	movs	r0, r2
 8000d22:	f000 fc7d 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8000d26:	193b      	adds	r3, r7, r4
 8000d28:	4a1e      	ldr	r2, [pc, #120]	; (8000da4 <MX_GPIO_Init+0x1f4>)
 8000d2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	193b      	adds	r3, r7, r4
 8000d2e:	2200      	movs	r2, #0
 8000d30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <MX_GPIO_Init+0x1e8>)
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	0010      	movs	r0, r2
 8000d40:	f000 fc6e 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	2203      	movs	r2, #3
 8000d48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <MX_GPIO_Init+0x1ec>)
 8000d60:	0019      	movs	r1, r3
 8000d62:	0010      	movs	r0, r2
 8000d64:	f000 fc5c 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000d68:	0021      	movs	r1, r4
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	220c      	movs	r2, #12
 8000d6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2200      	movs	r2, #0
 8000d74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <MX_GPIO_Init+0x1ec>)
 8000d80:	0019      	movs	r1, r3
 8000d82:	0010      	movs	r0, r2
 8000d84:	f000 fc4c 	bl	8001620 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b00b      	add	sp, #44	; 0x2c
 8000d8e:	bd90      	pop	{r4, r7, pc}
 8000d90:	40021000 	.word	0x40021000
 8000d94:	0000ac03 	.word	0x0000ac03
 8000d98:	50000400 	.word	0x50000400
 8000d9c:	50000c00 	.word	0x50000c00
 8000da0:	00008c03 	.word	0x00008c03
 8000da4:	00004040 	.word	0x00004040

08000da8 <blink_ldg>:
void sw_off_ldb ( void )
{
	HAL_GPIO_WritePin ( LDB_GPIO_Port , LDB_Pin , GPIO_PIN_RESET ) ;
}
void blink_ldg ( uint8_t i , uint16_t d )
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	0002      	movs	r2, r0
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	1c0a      	adds	r2, r1, #0
 8000db8:	801a      	strh	r2, [r3, #0]
	while ( i )
 8000dba:	e018      	b.n	8000dee <blink_ldg+0x46>
	{
		HAL_GPIO_TogglePin ( LDG_GPIO_Port , LDG_Pin ) ;
 8000dbc:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <blink_ldg+0x58>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f000 fdb6 	bl	8001932 <HAL_GPIO_TogglePin>
		HAL_Delay ( d ) ;
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f000 fb10 	bl	80013f0 <HAL_Delay>
		HAL_GPIO_TogglePin ( LDG_GPIO_Port , LDG_Pin ) ;
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <blink_ldg+0x58>)
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f000 fdac 	bl	8001932 <HAL_GPIO_TogglePin>
		HAL_Delay ( d ) ;
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 fb06 	bl	80013f0 <HAL_Delay>
		i-- ;
 8000de4:	1dfb      	adds	r3, r7, #7
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	1dfb      	adds	r3, r7, #7
 8000dea:	3a01      	subs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
	while ( i )
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1e2      	bne.n	8000dbc <blink_ldg+0x14>
	}
}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b002      	add	sp, #8
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	50000c00 	.word	0x50000c00

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <Error_Handler+0x8>
	...

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	641a      	str	r2, [r3, #64]	; 0x40
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	2201      	movs	r2, #1
 8000e28:	4013      	ands	r3, r2
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e34:	2180      	movs	r1, #128	; 0x80
 8000e36:	0549      	lsls	r1, r1, #21
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	055b      	lsls	r3, r3, #21
 8000e44:	4013      	ands	r3, r2
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000e4a:	23c0      	movs	r3, #192	; 0xc0
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f000 faf2 	bl	8001438 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b002      	add	sp, #8
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b097      	sub	sp, #92	; 0x5c
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e68:	240c      	movs	r4, #12
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	234c      	movs	r3, #76	; 0x4c
 8000e70:	001a      	movs	r2, r3
 8000e72:	2100      	movs	r1, #0
 8000e74:	f003 fc5a 	bl	800472c <memset>
  if(hrtc->Instance==RTC)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <HAL_RTC_MspInit+0x84>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d12c      	bne.n	8000edc <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	0292      	lsls	r2, r2, #10
 8000e88:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	0052      	lsls	r2, r2, #1
 8000e90:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	0018      	movs	r0, r3
 8000e96:	f001 facb 	bl	8002430 <HAL_RCCEx_PeriphCLKConfig>
 8000e9a:	1e03      	subs	r3, r0, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e9e:	f7ff ffb1 	bl	8000e04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_RTC_MspInit+0x88>)
 8000ea4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_RTC_MspInit+0x88>)
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	0209      	lsls	r1, r1, #8
 8000eac:	430a      	orrs	r2, r1
 8000eae:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_RTC_MspInit+0x88>)
 8000eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <HAL_RTC_MspInit+0x88>)
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	00c9      	lsls	r1, r1, #3
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_RTC_MspInit+0x88>)
 8000ec0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ec2:	2380      	movs	r3, #128	; 0x80
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2103      	movs	r1, #3
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f000 fb73 	bl	80015bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f000 fb85 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b017      	add	sp, #92	; 0x5c
 8000ee2:	bd90      	pop	{r4, r7, pc}
 8000ee4:	40002800 	.word	0x40002800
 8000ee8:	40021000 	.word	0x40021000

08000eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b08b      	sub	sp, #44	; 0x2c
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	2414      	movs	r4, #20
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	0018      	movs	r0, r3
 8000efa:	2314      	movs	r3, #20
 8000efc:	001a      	movs	r2, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	f003 fc14 	bl	800472c <memset>
  if(hspi->Instance==SPI1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <HAL_SPI_MspInit+0x8c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d130      	bne.n	8000f70 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <HAL_SPI_MspInit+0x90>)
 8000f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_SPI_MspInit+0x90>)
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	0149      	lsls	r1, r1, #5
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_SPI_MspInit+0x90>)
 8000f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	015b      	lsls	r3, r3, #5
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_SPI_MspInit+0x90>)
 8000f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <HAL_SPI_MspInit+0x90>)
 8000f30:	2101      	movs	r1, #1
 8000f32:	430a      	orrs	r2, r1
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_SPI_MspInit+0x90>)
 8000f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 8000f42:	0021      	movs	r1, r4
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	22e0      	movs	r2, #224	; 0xe0
 8000f48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	187a      	adds	r2, r7, r1
 8000f64:	23a0      	movs	r3, #160	; 0xa0
 8000f66:	05db      	lsls	r3, r3, #23
 8000f68:	0011      	movs	r1, r2
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f000 fb58 	bl	8001620 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b00b      	add	sp, #44	; 0x2c
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	40013000 	.word	0x40013000
 8000f7c:	40021000 	.word	0x40021000

08000f80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <HAL_TIM_Base_MspInit+0x44>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d113      	bne.n	8000fba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <HAL_TIM_Base_MspInit+0x48>)
 8000f94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_TIM_Base_MspInit+0x48>)
 8000f98:	2110      	movs	r1, #16
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_TIM_Base_MspInit+0x48>)
 8000fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2102      	movs	r1, #2
 8000fae:	2011      	movs	r0, #17
 8000fb0:	f000 fb04 	bl	80015bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000fb4:	2011      	movs	r0, #17
 8000fb6:	f000 fb16 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b004      	add	sp, #16
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	40001000 	.word	0x40001000
 8000fc8:	40021000 	.word	0x40021000

08000fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b0a3      	sub	sp, #140	; 0x8c
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	2374      	movs	r3, #116	; 0x74
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	0018      	movs	r0, r3
 8000fda:	2314      	movs	r3, #20
 8000fdc:	001a      	movs	r2, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	f003 fba4 	bl	800472c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe4:	2428      	movs	r4, #40	; 0x28
 8000fe6:	193b      	adds	r3, r7, r4
 8000fe8:	0018      	movs	r0, r3
 8000fea:	234c      	movs	r3, #76	; 0x4c
 8000fec:	001a      	movs	r2, r3
 8000fee:	2100      	movs	r1, #0
 8000ff0:	f003 fb9c 	bl	800472c <memset>
  if(huart->Instance==USART1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a84      	ldr	r2, [pc, #528]	; (800120c <HAL_UART_MspInit+0x240>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d140      	bne.n	8001080 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ffe:	193b      	adds	r3, r7, r4
 8001000:	2201      	movs	r2, #1
 8001002:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001004:	193b      	adds	r3, r7, r4
 8001006:	2200      	movs	r2, #0
 8001008:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100a:	193b      	adds	r3, r7, r4
 800100c:	0018      	movs	r0, r3
 800100e:	f001 fa0f 	bl	8002430 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	1e03      	subs	r3, r0, #0
 8001014:	d001      	beq.n	800101a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001016:	f7ff fef5 	bl	8000e04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800101a:	4b7d      	ldr	r3, [pc, #500]	; (8001210 <HAL_UART_MspInit+0x244>)
 800101c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800101e:	4b7c      	ldr	r3, [pc, #496]	; (8001210 <HAL_UART_MspInit+0x244>)
 8001020:	2180      	movs	r1, #128	; 0x80
 8001022:	01c9      	lsls	r1, r1, #7
 8001024:	430a      	orrs	r2, r1
 8001026:	641a      	str	r2, [r3, #64]	; 0x40
 8001028:	4b79      	ldr	r3, [pc, #484]	; (8001210 <HAL_UART_MspInit+0x244>)
 800102a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	01db      	lsls	r3, r3, #7
 8001030:	4013      	ands	r3, r2
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b76      	ldr	r3, [pc, #472]	; (8001210 <HAL_UART_MspInit+0x244>)
 8001038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800103a:	4b75      	ldr	r3, [pc, #468]	; (8001210 <HAL_UART_MspInit+0x244>)
 800103c:	2101      	movs	r1, #1
 800103e:	430a      	orrs	r2, r1
 8001040:	635a      	str	r2, [r3, #52]	; 0x34
 8001042:	4b73      	ldr	r3, [pc, #460]	; (8001210 <HAL_UART_MspInit+0x244>)
 8001044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001046:	2201      	movs	r2, #1
 8001048:	4013      	ands	r3, r2
 800104a:	623b      	str	r3, [r7, #32]
 800104c:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 800104e:	2174      	movs	r1, #116	; 0x74
 8001050:	187b      	adds	r3, r7, r1
 8001052:	22c0      	movs	r2, #192	; 0xc0
 8001054:	00d2      	lsls	r2, r2, #3
 8001056:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	187b      	adds	r3, r7, r1
 800105a:	2202      	movs	r2, #2
 800105c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	187b      	adds	r3, r7, r1
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	187b      	adds	r3, r7, r1
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800106a:	187b      	adds	r3, r7, r1
 800106c:	2201      	movs	r2, #1
 800106e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	187a      	adds	r2, r7, r1
 8001072:	23a0      	movs	r3, #160	; 0xa0
 8001074:	05db      	lsls	r3, r3, #23
 8001076:	0011      	movs	r1, r2
 8001078:	0018      	movs	r0, r3
 800107a:	f000 fad1 	bl	8001620 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 800107e:	e0c0      	b.n	8001202 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a63      	ldr	r2, [pc, #396]	; (8001214 <HAL_UART_MspInit+0x248>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d140      	bne.n	800110c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800108a:	2128      	movs	r1, #40	; 0x28
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2202      	movs	r2, #2
 8001090:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001098:	187b      	adds	r3, r7, r1
 800109a:	0018      	movs	r0, r3
 800109c:	f001 f9c8 	bl	8002430 <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	1e03      	subs	r3, r0, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 80010a4:	f7ff feae 	bl	8000e04 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a8:	4b59      	ldr	r3, [pc, #356]	; (8001210 <HAL_UART_MspInit+0x244>)
 80010aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010ac:	4b58      	ldr	r3, [pc, #352]	; (8001210 <HAL_UART_MspInit+0x244>)
 80010ae:	2180      	movs	r1, #128	; 0x80
 80010b0:	0289      	lsls	r1, r1, #10
 80010b2:	430a      	orrs	r2, r1
 80010b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80010b6:	4b56      	ldr	r3, [pc, #344]	; (8001210 <HAL_UART_MspInit+0x244>)
 80010b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	029b      	lsls	r3, r3, #10
 80010be:	4013      	ands	r3, r2
 80010c0:	61fb      	str	r3, [r7, #28]
 80010c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	4b52      	ldr	r3, [pc, #328]	; (8001210 <HAL_UART_MspInit+0x244>)
 80010c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c8:	4b51      	ldr	r3, [pc, #324]	; (8001210 <HAL_UART_MspInit+0x244>)
 80010ca:	2101      	movs	r1, #1
 80010cc:	430a      	orrs	r2, r1
 80010ce:	635a      	str	r2, [r3, #52]	; 0x34
 80010d0:	4b4f      	ldr	r3, [pc, #316]	; (8001210 <HAL_UART_MspInit+0x244>)
 80010d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d4:	2201      	movs	r2, #1
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 80010dc:	2174      	movs	r1, #116	; 0x74
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	220c      	movs	r2, #12
 80010e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2202      	movs	r2, #2
 80010e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2201      	movs	r2, #1
 80010fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	187a      	adds	r2, r7, r1
 80010fe:	23a0      	movs	r3, #160	; 0xa0
 8001100:	05db      	lsls	r3, r3, #23
 8001102:	0011      	movs	r1, r2
 8001104:	0018      	movs	r0, r3
 8001106:	f000 fa8b 	bl	8001620 <HAL_GPIO_Init>
}
 800110a:	e07a      	b.n	8001202 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a41      	ldr	r2, [pc, #260]	; (8001218 <HAL_UART_MspInit+0x24c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d140      	bne.n	8001198 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001116:	2128      	movs	r1, #40	; 0x28
 8001118:	187b      	adds	r3, r7, r1
 800111a:	2204      	movs	r2, #4
 800111c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800111e:	187b      	adds	r3, r7, r1
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001124:	187b      	adds	r3, r7, r1
 8001126:	0018      	movs	r0, r3
 8001128:	f001 f982 	bl	8002430 <HAL_RCCEx_PeriphCLKConfig>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d001      	beq.n	8001134 <HAL_UART_MspInit+0x168>
      Error_Handler();
 8001130:	f7ff fe68 	bl	8000e04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001134:	4b36      	ldr	r3, [pc, #216]	; (8001210 <HAL_UART_MspInit+0x244>)
 8001136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001138:	4b35      	ldr	r3, [pc, #212]	; (8001210 <HAL_UART_MspInit+0x244>)
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	02c9      	lsls	r1, r1, #11
 800113e:	430a      	orrs	r2, r1
 8001140:	63da      	str	r2, [r3, #60]	; 0x3c
 8001142:	4b33      	ldr	r3, [pc, #204]	; (8001210 <HAL_UART_MspInit+0x244>)
 8001144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	02db      	lsls	r3, r3, #11
 800114a:	4013      	ands	r3, r2
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <HAL_UART_MspInit+0x244>)
 8001152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001154:	4b2e      	ldr	r3, [pc, #184]	; (8001210 <HAL_UART_MspInit+0x244>)
 8001156:	2102      	movs	r1, #2
 8001158:	430a      	orrs	r2, r1
 800115a:	635a      	str	r2, [r3, #52]	; 0x34
 800115c:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <HAL_UART_MspInit+0x244>)
 800115e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001160:	2202      	movs	r2, #2
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8001168:	2174      	movs	r1, #116	; 0x74
 800116a:	187b      	adds	r3, r7, r1
 800116c:	22c0      	movs	r2, #192	; 0xc0
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2202      	movs	r2, #2
 8001176:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	187b      	adds	r3, r7, r1
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001184:	187b      	adds	r3, r7, r1
 8001186:	2204      	movs	r2, #4
 8001188:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	187b      	adds	r3, r7, r1
 800118c:	4a23      	ldr	r2, [pc, #140]	; (800121c <HAL_UART_MspInit+0x250>)
 800118e:	0019      	movs	r1, r3
 8001190:	0010      	movs	r0, r2
 8001192:	f000 fa45 	bl	8001620 <HAL_GPIO_Init>
}
 8001196:	e034      	b.n	8001202 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a20      	ldr	r2, [pc, #128]	; (8001220 <HAL_UART_MspInit+0x254>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d12f      	bne.n	8001202 <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_UART_MspInit+0x244>)
 80011a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <HAL_UART_MspInit+0x244>)
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	0049      	lsls	r1, r1, #1
 80011ac:	430a      	orrs	r2, r1
 80011ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_UART_MspInit+0x244>)
 80011b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4013      	ands	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_UART_MspInit+0x244>)
 80011c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <HAL_UART_MspInit+0x244>)
 80011c4:	2102      	movs	r1, #2
 80011c6:	430a      	orrs	r2, r1
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_UART_MspInit+0x244>)
 80011cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ce:	2202      	movs	r2, #2
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 80011d6:	2174      	movs	r1, #116	; 0x74
 80011d8:	187b      	adds	r3, r7, r1
 80011da:	2218      	movs	r2, #24
 80011dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	187b      	adds	r3, r7, r1
 80011e0:	2202      	movs	r2, #2
 80011e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	187b      	adds	r3, r7, r1
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	2203      	movs	r2, #3
 80011f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_UART_MspInit+0x250>)
 80011fa:	0019      	movs	r1, r3
 80011fc:	0010      	movs	r0, r2
 80011fe:	f000 fa0f 	bl	8001620 <HAL_GPIO_Init>
}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	b023      	add	sp, #140	; 0x8c
 8001208:	bd90      	pop	{r4, r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	40013800 	.word	0x40013800
 8001210:	40021000 	.word	0x40021000
 8001214:	40004400 	.word	0x40004400
 8001218:	40004800 	.word	0x40004800
 800121c:	50000400 	.word	0x50000400
 8001220:	40005000 	.word	0x40005000

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001228:	e7fe      	b.n	8001228 <NMI_Handler+0x4>

0800122a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <HardFault_Handler+0x4>

08001230 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001234:	46c0      	nop			; (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001248:	f000 f8b6 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <RTC_TAMP_IRQHandler+0x14>)
 800125a:	0018      	movs	r0, r3
 800125c:	f001 fe40 	bl	8002ee0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	20000030 	.word	0x20000030

0800126c <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8001272:	0018      	movs	r0, r3
 8001274:	f002 f866 	bl	8003344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	200000c0 	.word	0x200000c0

08001284 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001292:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001294:	f7ff fff6 	bl	8001284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <LoopForever+0x6>)
  ldr r1, =_edata
 800129a:	490d      	ldr	r1, [pc, #52]	; (80012d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <LoopForever+0xe>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b0:	4c0a      	ldr	r4, [pc, #40]	; (80012dc <LoopForever+0x16>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012be:	f003 fa3d 	bl	800473c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80012c2:	f7ff f9b3 	bl	800062c <main>

080012c6 <LoopForever>:

LoopForever:
  b LoopForever
 80012c6:	e7fe      	b.n	80012c6 <LoopForever>
  ldr   r0, =_estack
 80012c8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80012cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80012d4:	08004934 	.word	0x08004934
  ldr r2, =_sbss
 80012d8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80012dc:	200004f8 	.word	0x200004f8

080012e0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC1_COMP_IRQHandler>
	...

080012e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_Init+0x3c>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_Init+0x3c>)
 80012f6:	2180      	movs	r1, #128	; 0x80
 80012f8:	0049      	lsls	r1, r1, #1
 80012fa:	430a      	orrs	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012fe:	2003      	movs	r0, #3
 8001300:	f000 f810 	bl	8001324 <HAL_InitTick>
 8001304:	1e03      	subs	r3, r0, #0
 8001306:	d003      	beq.n	8001310 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001308:	1dfb      	adds	r3, r7, #7
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	e001      	b.n	8001314 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001310:	f7ff fd7e 	bl	8000e10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001314:	1dfb      	adds	r3, r7, #7
 8001316:	781b      	ldrb	r3, [r3, #0]
}
 8001318:	0018      	movs	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	b002      	add	sp, #8
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40022000 	.word	0x40022000

08001324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800132c:	230f      	movs	r3, #15
 800132e:	18fb      	adds	r3, r7, r3
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_InitTick+0x88>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d02b      	beq.n	8001394 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <HAL_InitTick+0x8c>)
 800133e:	681c      	ldr	r4, [r3, #0]
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <HAL_InitTick+0x88>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	0019      	movs	r1, r3
 8001346:	23fa      	movs	r3, #250	; 0xfa
 8001348:	0098      	lsls	r0, r3, #2
 800134a:	f7fe fee3 	bl	8000114 <__udivsi3>
 800134e:	0003      	movs	r3, r0
 8001350:	0019      	movs	r1, r3
 8001352:	0020      	movs	r0, r4
 8001354:	f7fe fede 	bl	8000114 <__udivsi3>
 8001358:	0003      	movs	r3, r0
 800135a:	0018      	movs	r0, r3
 800135c:	f000 f953 	bl	8001606 <HAL_SYSTICK_Config>
 8001360:	1e03      	subs	r3, r0, #0
 8001362:	d112      	bne.n	800138a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b03      	cmp	r3, #3
 8001368:	d80a      	bhi.n	8001380 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	2301      	movs	r3, #1
 800136e:	425b      	negs	r3, r3
 8001370:	2200      	movs	r2, #0
 8001372:	0018      	movs	r0, r3
 8001374:	f000 f922 	bl	80015bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_InitTick+0x90>)
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e00d      	b.n	800139c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001380:	230f      	movs	r3, #15
 8001382:	18fb      	adds	r3, r7, r3
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	e008      	b.n	800139c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800138a:	230f      	movs	r3, #15
 800138c:	18fb      	adds	r3, r7, r3
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e003      	b.n	800139c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001394:	230f      	movs	r3, #15
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800139c:	230f      	movs	r3, #15
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	781b      	ldrb	r3, [r3, #0]
}
 80013a2:	0018      	movs	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b005      	add	sp, #20
 80013a8:	bd90      	pop	{r4, r7, pc}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	2000000c 	.word	0x2000000c
 80013b0:	20000004 	.word	0x20000004
 80013b4:	20000008 	.word	0x20000008

080013b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_IncTick+0x1c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	001a      	movs	r2, r3
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_IncTick+0x20>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	18d2      	adds	r2, r2, r3
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_IncTick+0x20>)
 80013ca:	601a      	str	r2, [r3, #0]
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	2000000c 	.word	0x2000000c
 80013d8:	2000035c 	.word	0x2000035c

080013dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  return uwTick;
 80013e0:	4b02      	ldr	r3, [pc, #8]	; (80013ec <HAL_GetTick+0x10>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	0018      	movs	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	2000035c 	.word	0x2000035c

080013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff fff0 	bl	80013dc <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3301      	adds	r3, #1
 8001408:	d005      	beq.n	8001416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_Delay+0x44>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	001a      	movs	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	189b      	adds	r3, r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	f7ff ffe0 	bl	80013dc <HAL_GetTick>
 800141c:	0002      	movs	r2, r0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8f7      	bhi.n	8001418 <HAL_Delay+0x28>
  {
  }
}
 8001428:	46c0      	nop			; (mov r8, r8)
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	b004      	add	sp, #16
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	2000000c 	.word	0x2000000c

08001438 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001446:	4013      	ands	r3, r2
 8001448:	0019      	movs	r1, r3
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	430a      	orrs	r2, r1
 8001450:	601a      	str	r2, [r3, #0]
}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	b002      	add	sp, #8
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	40010000 	.word	0x40010000
 8001460:	fffff9ff 	.word	0xfffff9ff

08001464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	0002      	movs	r2, r0
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001470:	1dfb      	adds	r3, r7, #7
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b7f      	cmp	r3, #127	; 0x7f
 8001476:	d809      	bhi.n	800148c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001478:	1dfb      	adds	r3, r7, #7
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	001a      	movs	r2, r3
 800147e:	231f      	movs	r3, #31
 8001480:	401a      	ands	r2, r3
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <__NVIC_EnableIRQ+0x30>)
 8001484:	2101      	movs	r1, #1
 8001486:	4091      	lsls	r1, r2
 8001488:	000a      	movs	r2, r1
 800148a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b002      	add	sp, #8
 8001492:	bd80      	pop	{r7, pc}
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	0002      	movs	r2, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	1dfb      	adds	r3, r7, #7
 80014a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b7f      	cmp	r3, #127	; 0x7f
 80014ac:	d828      	bhi.n	8001500 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ae:	4a2f      	ldr	r2, [pc, #188]	; (800156c <__NVIC_SetPriority+0xd4>)
 80014b0:	1dfb      	adds	r3, r7, #7
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	33c0      	adds	r3, #192	; 0xc0
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	589b      	ldr	r3, [r3, r2]
 80014be:	1dfa      	adds	r2, r7, #7
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	0011      	movs	r1, r2
 80014c4:	2203      	movs	r2, #3
 80014c6:	400a      	ands	r2, r1
 80014c8:	00d2      	lsls	r2, r2, #3
 80014ca:	21ff      	movs	r1, #255	; 0xff
 80014cc:	4091      	lsls	r1, r2
 80014ce:	000a      	movs	r2, r1
 80014d0:	43d2      	mvns	r2, r2
 80014d2:	401a      	ands	r2, r3
 80014d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	019b      	lsls	r3, r3, #6
 80014da:	22ff      	movs	r2, #255	; 0xff
 80014dc:	401a      	ands	r2, r3
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	0018      	movs	r0, r3
 80014e4:	2303      	movs	r3, #3
 80014e6:	4003      	ands	r3, r0
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ec:	481f      	ldr	r0, [pc, #124]	; (800156c <__NVIC_SetPriority+0xd4>)
 80014ee:	1dfb      	adds	r3, r7, #7
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	430a      	orrs	r2, r1
 80014f8:	33c0      	adds	r3, #192	; 0xc0
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014fe:	e031      	b.n	8001564 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001500:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <__NVIC_SetPriority+0xd8>)
 8001502:	1dfb      	adds	r3, r7, #7
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	0019      	movs	r1, r3
 8001508:	230f      	movs	r3, #15
 800150a:	400b      	ands	r3, r1
 800150c:	3b08      	subs	r3, #8
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3306      	adds	r3, #6
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	18d3      	adds	r3, r2, r3
 8001516:	3304      	adds	r3, #4
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	1dfa      	adds	r2, r7, #7
 800151c:	7812      	ldrb	r2, [r2, #0]
 800151e:	0011      	movs	r1, r2
 8001520:	2203      	movs	r2, #3
 8001522:	400a      	ands	r2, r1
 8001524:	00d2      	lsls	r2, r2, #3
 8001526:	21ff      	movs	r1, #255	; 0xff
 8001528:	4091      	lsls	r1, r2
 800152a:	000a      	movs	r2, r1
 800152c:	43d2      	mvns	r2, r2
 800152e:	401a      	ands	r2, r3
 8001530:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	019b      	lsls	r3, r3, #6
 8001536:	22ff      	movs	r2, #255	; 0xff
 8001538:	401a      	ands	r2, r3
 800153a:	1dfb      	adds	r3, r7, #7
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	0018      	movs	r0, r3
 8001540:	2303      	movs	r3, #3
 8001542:	4003      	ands	r3, r0
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001548:	4809      	ldr	r0, [pc, #36]	; (8001570 <__NVIC_SetPriority+0xd8>)
 800154a:	1dfb      	adds	r3, r7, #7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	001c      	movs	r4, r3
 8001550:	230f      	movs	r3, #15
 8001552:	4023      	ands	r3, r4
 8001554:	3b08      	subs	r3, #8
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	430a      	orrs	r2, r1
 800155a:	3306      	adds	r3, #6
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	18c3      	adds	r3, r0, r3
 8001560:	3304      	adds	r3, #4
 8001562:	601a      	str	r2, [r3, #0]
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b003      	add	sp, #12
 800156a:	bd90      	pop	{r4, r7, pc}
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	1e5a      	subs	r2, r3, #1
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	045b      	lsls	r3, r3, #17
 8001584:	429a      	cmp	r2, r3
 8001586:	d301      	bcc.n	800158c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001588:	2301      	movs	r3, #1
 800158a:	e010      	b.n	80015ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <SysTick_Config+0x44>)
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	3a01      	subs	r2, #1
 8001592:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001594:	2301      	movs	r3, #1
 8001596:	425b      	negs	r3, r3
 8001598:	2103      	movs	r1, #3
 800159a:	0018      	movs	r0, r3
 800159c:	f7ff ff7c 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SysTick_Config+0x44>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SysTick_Config+0x44>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	0018      	movs	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b002      	add	sp, #8
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	210f      	movs	r1, #15
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	1c02      	adds	r2, r0, #0
 80015cc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b25b      	sxtb	r3, r3
 80015d6:	0011      	movs	r1, r2
 80015d8:	0018      	movs	r0, r3
 80015da:	f7ff ff5d 	bl	8001498 <__NVIC_SetPriority>
}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b004      	add	sp, #16
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	0002      	movs	r2, r0
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f2:	1dfb      	adds	r3, r7, #7
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff ff33 	bl	8001464 <__NVIC_EnableIRQ>
}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b002      	add	sp, #8
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	0018      	movs	r0, r3
 8001612:	f7ff ffaf 	bl	8001574 <SysTick_Config>
 8001616:	0003      	movs	r3, r0
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b002      	add	sp, #8
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162e:	e14d      	b.n	80018cc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2101      	movs	r1, #1
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	4091      	lsls	r1, r2
 800163a:	000a      	movs	r2, r1
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d100      	bne.n	8001648 <HAL_GPIO_Init+0x28>
 8001646:	e13e      	b.n	80018c6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2203      	movs	r2, #3
 800164e:	4013      	ands	r3, r2
 8001650:	2b01      	cmp	r3, #1
 8001652:	d005      	beq.n	8001660 <HAL_GPIO_Init+0x40>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2203      	movs	r2, #3
 800165a:	4013      	ands	r3, r2
 800165c:	2b02      	cmp	r3, #2
 800165e:	d130      	bne.n	80016c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	2203      	movs	r2, #3
 800166c:	409a      	lsls	r2, r3
 800166e:	0013      	movs	r3, r2
 8001670:	43da      	mvns	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	409a      	lsls	r2, r3
 8001682:	0013      	movs	r3, r2
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001696:	2201      	movs	r2, #1
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
 800169c:	0013      	movs	r3, r2
 800169e:	43da      	mvns	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	2201      	movs	r2, #1
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
 80016b4:	0013      	movs	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2203      	movs	r2, #3
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d017      	beq.n	80016fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2203      	movs	r2, #3
 80016da:	409a      	lsls	r2, r3
 80016dc:	0013      	movs	r3, r2
 80016de:	43da      	mvns	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	409a      	lsls	r2, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2203      	movs	r2, #3
 8001704:	4013      	ands	r3, r2
 8001706:	2b02      	cmp	r3, #2
 8001708:	d123      	bne.n	8001752 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	08da      	lsrs	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3208      	adds	r2, #8
 8001712:	0092      	lsls	r2, r2, #2
 8001714:	58d3      	ldr	r3, [r2, r3]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	2207      	movs	r2, #7
 800171c:	4013      	ands	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	220f      	movs	r2, #15
 8001722:	409a      	lsls	r2, r3
 8001724:	0013      	movs	r3, r2
 8001726:	43da      	mvns	r2, r3
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2107      	movs	r1, #7
 8001736:	400b      	ands	r3, r1
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	409a      	lsls	r2, r3
 800173c:	0013      	movs	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	08da      	lsrs	r2, r3, #3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3208      	adds	r2, #8
 800174c:	0092      	lsls	r2, r2, #2
 800174e:	6939      	ldr	r1, [r7, #16]
 8001750:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	409a      	lsls	r2, r3
 8001760:	0013      	movs	r3, r2
 8001762:	43da      	mvns	r2, r3
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2203      	movs	r2, #3
 8001770:	401a      	ands	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	409a      	lsls	r2, r3
 8001778:	0013      	movs	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	23c0      	movs	r3, #192	; 0xc0
 800178c:	029b      	lsls	r3, r3, #10
 800178e:	4013      	ands	r3, r2
 8001790:	d100      	bne.n	8001794 <HAL_GPIO_Init+0x174>
 8001792:	e098      	b.n	80018c6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001794:	4a53      	ldr	r2, [pc, #332]	; (80018e4 <HAL_GPIO_Init+0x2c4>)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	3318      	adds	r3, #24
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	589b      	ldr	r3, [r3, r2]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2203      	movs	r2, #3
 80017a6:	4013      	ands	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	220f      	movs	r2, #15
 80017ac:	409a      	lsls	r2, r3
 80017ae:	0013      	movs	r3, r2
 80017b0:	43da      	mvns	r2, r3
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	23a0      	movs	r3, #160	; 0xa0
 80017bc:	05db      	lsls	r3, r3, #23
 80017be:	429a      	cmp	r2, r3
 80017c0:	d019      	beq.n	80017f6 <HAL_GPIO_Init+0x1d6>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a48      	ldr	r2, [pc, #288]	; (80018e8 <HAL_GPIO_Init+0x2c8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <HAL_GPIO_Init+0x1d2>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a47      	ldr	r2, [pc, #284]	; (80018ec <HAL_GPIO_Init+0x2cc>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00d      	beq.n	80017ee <HAL_GPIO_Init+0x1ce>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a46      	ldr	r2, [pc, #280]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d007      	beq.n	80017ea <HAL_GPIO_Init+0x1ca>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a45      	ldr	r2, [pc, #276]	; (80018f4 <HAL_GPIO_Init+0x2d4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d101      	bne.n	80017e6 <HAL_GPIO_Init+0x1c6>
 80017e2:	2304      	movs	r3, #4
 80017e4:	e008      	b.n	80017f8 <HAL_GPIO_Init+0x1d8>
 80017e6:	2305      	movs	r3, #5
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x1d8>
 80017ea:	2303      	movs	r3, #3
 80017ec:	e004      	b.n	80017f8 <HAL_GPIO_Init+0x1d8>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_Init+0x1d8>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_GPIO_Init+0x1d8>
 80017f6:	2300      	movs	r3, #0
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	2103      	movs	r1, #3
 80017fc:	400a      	ands	r2, r1
 80017fe:	00d2      	lsls	r2, r2, #3
 8001800:	4093      	lsls	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001808:	4936      	ldr	r1, [pc, #216]	; (80018e4 <HAL_GPIO_Init+0x2c4>)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3318      	adds	r3, #24
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001816:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <HAL_GPIO_Init+0x2c4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43da      	mvns	r2, r3
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	035b      	lsls	r3, r3, #13
 800182e:	4013      	ands	r3, r2
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800183a:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <HAL_GPIO_Init+0x2c4>)
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001840:	4b28      	ldr	r3, [pc, #160]	; (80018e4 <HAL_GPIO_Init+0x2c4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43da      	mvns	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	039b      	lsls	r3, r3, #14
 8001858:	4013      	ands	r3, r2
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001864:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <HAL_GPIO_Init+0x2c4>)
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800186a:	4a1e      	ldr	r2, [pc, #120]	; (80018e4 <HAL_GPIO_Init+0x2c4>)
 800186c:	2384      	movs	r3, #132	; 0x84
 800186e:	58d3      	ldr	r3, [r2, r3]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	43da      	mvns	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	029b      	lsls	r3, r3, #10
 8001884:	4013      	ands	r3, r2
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001890:	4914      	ldr	r1, [pc, #80]	; (80018e4 <HAL_GPIO_Init+0x2c4>)
 8001892:	2284      	movs	r2, #132	; 0x84
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <HAL_GPIO_Init+0x2c4>)
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	58d3      	ldr	r3, [r2, r3]
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	43da      	mvns	r2, r3
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	025b      	lsls	r3, r3, #9
 80018b2:	4013      	ands	r3, r2
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018be:	4909      	ldr	r1, [pc, #36]	; (80018e4 <HAL_GPIO_Init+0x2c4>)
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	40da      	lsrs	r2, r3
 80018d4:	1e13      	subs	r3, r2, #0
 80018d6:	d000      	beq.n	80018da <HAL_GPIO_Init+0x2ba>
 80018d8:	e6aa      	b.n	8001630 <HAL_GPIO_Init+0x10>
  }
}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	b006      	add	sp, #24
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021800 	.word	0x40021800
 80018e8:	50000400 	.word	0x50000400
 80018ec:	50000800 	.word	0x50000800
 80018f0:	50000c00 	.word	0x50000c00
 80018f4:	50001000 	.word	0x50001000

080018f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	0008      	movs	r0, r1
 8001902:	0011      	movs	r1, r2
 8001904:	1cbb      	adds	r3, r7, #2
 8001906:	1c02      	adds	r2, r0, #0
 8001908:	801a      	strh	r2, [r3, #0]
 800190a:	1c7b      	adds	r3, r7, #1
 800190c:	1c0a      	adds	r2, r1, #0
 800190e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001910:	1c7b      	adds	r3, r7, #1
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d004      	beq.n	8001922 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001918:	1cbb      	adds	r3, r7, #2
 800191a:	881a      	ldrh	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001920:	e003      	b.n	800192a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001922:	1cbb      	adds	r3, r7, #2
 8001924:	881a      	ldrh	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	629a      	str	r2, [r3, #40]	; 0x28
}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	b002      	add	sp, #8
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	000a      	movs	r2, r1
 800193c:	1cbb      	adds	r3, r7, #2
 800193e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001946:	1cbb      	adds	r3, r7, #2
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	4013      	ands	r3, r2
 800194e:	041a      	lsls	r2, r3, #16
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43db      	mvns	r3, r3
 8001954:	1cb9      	adds	r1, r7, #2
 8001956:	8809      	ldrh	r1, [r1, #0]
 8001958:	400b      	ands	r3, r1
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	619a      	str	r2, [r3, #24]
}
 8001960:	46c0      	nop			; (mov r8, r8)
 8001962:	46bd      	mov	sp, r7
 8001964:	b004      	add	sp, #16
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <HAL_PWR_EnableBkUpAccess+0x18>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001972:	2180      	movs	r1, #128	; 0x80
 8001974:	0049      	lsls	r1, r1, #1
 8001976:	430a      	orrs	r2, r1
 8001978:	601a      	str	r2, [r3, #0]
}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40007000 	.word	0x40007000

08001984 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a19      	ldr	r2, [pc, #100]	; (80019f8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001992:	4013      	ands	r3, r2
 8001994:	0019      	movs	r1, r3
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d11f      	bne.n	80019e8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x78>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	0013      	movs	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	189b      	adds	r3, r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4912      	ldr	r1, [pc, #72]	; (8001a00 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80019b6:	0018      	movs	r0, r3
 80019b8:	f7fe fbac 	bl	8000114 <__udivsi3>
 80019bc:	0003      	movs	r3, r0
 80019be:	3301      	adds	r3, #1
 80019c0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019c2:	e008      	b.n	80019d6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	e001      	b.n	80019d6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e009      	b.n	80019ea <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	401a      	ands	r2, r3
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d0ed      	beq.n	80019c4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b004      	add	sp, #16
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	40007000 	.word	0x40007000
 80019f8:	fffff9ff 	.word	0xfffff9ff
 80019fc:	20000004 	.word	0x20000004
 8001a00:	000f4240 	.word	0x000f4240

08001a04 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	23e0      	movs	r3, #224	; 0xe0
 8001a0e:	01db      	lsls	r3, r3, #7
 8001a10:	4013      	ands	r3, r2
}
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f000 fb50 	bl	80020d0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2201      	movs	r2, #1
 8001a36:	4013      	ands	r3, r2
 8001a38:	d100      	bne.n	8001a3c <HAL_RCC_OscConfig+0x20>
 8001a3a:	e07c      	b.n	8001b36 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a3c:	4bc3      	ldr	r3, [pc, #780]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2238      	movs	r2, #56	; 0x38
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a46:	4bc1      	ldr	r3, [pc, #772]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2b10      	cmp	r3, #16
 8001a54:	d102      	bne.n	8001a5c <HAL_RCC_OscConfig+0x40>
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d002      	beq.n	8001a62 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d10b      	bne.n	8001a7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a62:	4bba      	ldr	r3, [pc, #744]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	029b      	lsls	r3, r3, #10
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d062      	beq.n	8001b34 <HAL_RCC_OscConfig+0x118>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d15e      	bne.n	8001b34 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e32a      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	025b      	lsls	r3, r3, #9
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_OscConfig+0x7a>
 8001a86:	4bb1      	ldr	r3, [pc, #708]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4bb0      	ldr	r3, [pc, #704]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001a8c:	2180      	movs	r1, #128	; 0x80
 8001a8e:	0249      	lsls	r1, r1, #9
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e020      	b.n	8001ad8 <HAL_RCC_OscConfig+0xbc>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	23a0      	movs	r3, #160	; 0xa0
 8001a9c:	02db      	lsls	r3, r3, #11
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d10e      	bne.n	8001ac0 <HAL_RCC_OscConfig+0xa4>
 8001aa2:	4baa      	ldr	r3, [pc, #680]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4ba9      	ldr	r3, [pc, #676]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	02c9      	lsls	r1, r1, #11
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	4ba6      	ldr	r3, [pc, #664]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4ba5      	ldr	r3, [pc, #660]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	0249      	lsls	r1, r1, #9
 8001aba:	430a      	orrs	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	e00b      	b.n	8001ad8 <HAL_RCC_OscConfig+0xbc>
 8001ac0:	4ba2      	ldr	r3, [pc, #648]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4ba1      	ldr	r3, [pc, #644]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001ac6:	49a2      	ldr	r1, [pc, #648]	; (8001d50 <HAL_RCC_OscConfig+0x334>)
 8001ac8:	400a      	ands	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	4b9f      	ldr	r3, [pc, #636]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b9e      	ldr	r3, [pc, #632]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001ad2:	49a0      	ldr	r1, [pc, #640]	; (8001d54 <HAL_RCC_OscConfig+0x338>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d014      	beq.n	8001b0a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fc7c 	bl	80013dc <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aea:	f7ff fc77 	bl	80013dc <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b64      	cmp	r3, #100	; 0x64
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e2e9      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afc:	4b93      	ldr	r3, [pc, #588]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	029b      	lsls	r3, r3, #10
 8001b04:	4013      	ands	r3, r2
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0xce>
 8001b08:	e015      	b.n	8001b36 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fc67 	bl	80013dc <HAL_GetTick>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff fc62 	bl	80013dc <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	; 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e2d4      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b26:	4b89      	ldr	r3, [pc, #548]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	029b      	lsls	r3, r3, #10
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0xf8>
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d100      	bne.n	8001b42 <HAL_RCC_OscConfig+0x126>
 8001b40:	e099      	b.n	8001c76 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b42:	4b82      	ldr	r3, [pc, #520]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2238      	movs	r2, #56	; 0x38
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b4c:	4b7f      	ldr	r3, [pc, #508]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2203      	movs	r2, #3
 8001b52:	4013      	ands	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	2b10      	cmp	r3, #16
 8001b5a:	d102      	bne.n	8001b62 <HAL_RCC_OscConfig+0x146>
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d002      	beq.n	8001b68 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d135      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b68:	4b78      	ldr	r3, [pc, #480]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4013      	ands	r3, r2
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_OscConfig+0x164>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e2a7      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b80:	4b72      	ldr	r3, [pc, #456]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a74      	ldr	r2, [pc, #464]	; (8001d58 <HAL_RCC_OscConfig+0x33c>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	0019      	movs	r1, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	021a      	lsls	r2, r3, #8
 8001b90:	4b6e      	ldr	r3, [pc, #440]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001b92:	430a      	orrs	r2, r1
 8001b94:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d112      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b9c:	4b6b      	ldr	r3, [pc, #428]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a6e      	ldr	r2, [pc, #440]	; (8001d5c <HAL_RCC_OscConfig+0x340>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691a      	ldr	r2, [r3, #16]
 8001baa:	4b68      	ldr	r3, [pc, #416]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001bac:	430a      	orrs	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001bb0:	4b66      	ldr	r3, [pc, #408]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	0adb      	lsrs	r3, r3, #11
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	4013      	ands	r3, r2
 8001bba:	4a69      	ldr	r2, [pc, #420]	; (8001d60 <HAL_RCC_OscConfig+0x344>)
 8001bbc:	40da      	lsrs	r2, r3
 8001bbe:	4b69      	ldr	r3, [pc, #420]	; (8001d64 <HAL_RCC_OscConfig+0x348>)
 8001bc0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bc2:	4b69      	ldr	r3, [pc, #420]	; (8001d68 <HAL_RCC_OscConfig+0x34c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f7ff fbac 	bl	8001324 <HAL_InitTick>
 8001bcc:	1e03      	subs	r3, r0, #0
 8001bce:	d051      	beq.n	8001c74 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e27d      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d030      	beq.n	8001c3e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bdc:	4b5b      	ldr	r3, [pc, #364]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a5e      	ldr	r2, [pc, #376]	; (8001d5c <HAL_RCC_OscConfig+0x340>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	4b58      	ldr	r3, [pc, #352]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001bec:	430a      	orrs	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001bf0:	4b56      	ldr	r3, [pc, #344]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b55      	ldr	r3, [pc, #340]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001bf6:	2180      	movs	r1, #128	; 0x80
 8001bf8:	0049      	lsls	r1, r1, #1
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fbed 	bl	80013dc <HAL_GetTick>
 8001c02:	0003      	movs	r3, r0
 8001c04:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c08:	f7ff fbe8 	bl	80013dc <HAL_GetTick>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e25a      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1a:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4013      	ands	r3, r2
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c26:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4a4b      	ldr	r2, [pc, #300]	; (8001d58 <HAL_RCC_OscConfig+0x33c>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	021a      	lsls	r2, r3, #8
 8001c36:	4b45      	ldr	r3, [pc, #276]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	e01b      	b.n	8001c76 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c3e:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b42      	ldr	r3, [pc, #264]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001c44:	4949      	ldr	r1, [pc, #292]	; (8001d6c <HAL_RCC_OscConfig+0x350>)
 8001c46:	400a      	ands	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7ff fbc7 	bl	80013dc <HAL_GetTick>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c54:	f7ff fbc2 	bl	80013dc <HAL_GetTick>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e234      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c66:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x238>
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c74:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2208      	movs	r2, #8
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d047      	beq.n	8001d10 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c80:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2238      	movs	r2, #56	; 0x38
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b18      	cmp	r3, #24
 8001c8a:	d10a      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001c8c:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c90:	2202      	movs	r2, #2
 8001c92:	4013      	ands	r3, r2
 8001c94:	d03c      	beq.n	8001d10 <HAL_RCC_OscConfig+0x2f4>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d138      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e216      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d019      	beq.n	8001cde <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001caa:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001cac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cae:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fb91 	bl	80013dc <HAL_GetTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fb8c 	bl	80013dc <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e1fe      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d0f1      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x2a4>
 8001cdc:	e018      	b.n	8001d10 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001cde:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001ce0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	438a      	bics	r2, r1
 8001ce8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cea:	f7ff fb77 	bl	80013dc <HAL_GetTick>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fb72 	bl	80013dc <HAL_GetTick>
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e1e4      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d1f1      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2204      	movs	r2, #4
 8001d16:	4013      	ands	r3, r2
 8001d18:	d100      	bne.n	8001d1c <HAL_RCC_OscConfig+0x300>
 8001d1a:	e0c7      	b.n	8001eac <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d1c:	231f      	movs	r3, #31
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2238      	movs	r2, #56	; 0x38
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	d11f      	bne.n	8001d70 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d34:	2202      	movs	r2, #2
 8001d36:	4013      	ands	r3, r2
 8001d38:	d100      	bne.n	8001d3c <HAL_RCC_OscConfig+0x320>
 8001d3a:	e0b7      	b.n	8001eac <HAL_RCC_OscConfig+0x490>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d000      	beq.n	8001d46 <HAL_RCC_OscConfig+0x32a>
 8001d44:	e0b2      	b.n	8001eac <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e1c2      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	fffeffff 	.word	0xfffeffff
 8001d54:	fffbffff 	.word	0xfffbffff
 8001d58:	ffff80ff 	.word	0xffff80ff
 8001d5c:	ffffc7ff 	.word	0xffffc7ff
 8001d60:	00f42400 	.word	0x00f42400
 8001d64:	20000004 	.word	0x20000004
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d70:	4bb5      	ldr	r3, [pc, #724]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	055b      	lsls	r3, r3, #21
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_OscConfig+0x364>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x366>
 8001d80:	2300      	movs	r3, #0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d011      	beq.n	8001daa <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4bb0      	ldr	r3, [pc, #704]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d8a:	4baf      	ldr	r3, [pc, #700]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001d8c:	2180      	movs	r1, #128	; 0x80
 8001d8e:	0549      	lsls	r1, r1, #21
 8001d90:	430a      	orrs	r2, r1
 8001d92:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d94:	4bac      	ldr	r3, [pc, #688]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	055b      	lsls	r3, r3, #21
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001da2:	231f      	movs	r3, #31
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001daa:	4ba8      	ldr	r3, [pc, #672]	; (800204c <HAL_RCC_OscConfig+0x630>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4013      	ands	r3, r2
 8001db4:	d11a      	bne.n	8001dec <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001db6:	4ba5      	ldr	r3, [pc, #660]	; (800204c <HAL_RCC_OscConfig+0x630>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4ba4      	ldr	r3, [pc, #656]	; (800204c <HAL_RCC_OscConfig+0x630>)
 8001dbc:	2180      	movs	r1, #128	; 0x80
 8001dbe:	0049      	lsls	r1, r1, #1
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fb0a 	bl	80013dc <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dce:	f7ff fb05 	bl	80013dc <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e177      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de0:	4b9a      	ldr	r3, [pc, #616]	; (800204c <HAL_RCC_OscConfig+0x630>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4013      	ands	r3, r2
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d106      	bne.n	8001e02 <HAL_RCC_OscConfig+0x3e6>
 8001df4:	4b94      	ldr	r3, [pc, #592]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001df6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001df8:	4b93      	ldr	r3, [pc, #588]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e00:	e01c      	b.n	8001e3c <HAL_RCC_OscConfig+0x420>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b05      	cmp	r3, #5
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x408>
 8001e0a:	4b8f      	ldr	r3, [pc, #572]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001e0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e0e:	4b8e      	ldr	r3, [pc, #568]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001e10:	2104      	movs	r1, #4
 8001e12:	430a      	orrs	r2, r1
 8001e14:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e16:	4b8c      	ldr	r3, [pc, #560]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001e18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e1a:	4b8b      	ldr	r3, [pc, #556]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e22:	e00b      	b.n	8001e3c <HAL_RCC_OscConfig+0x420>
 8001e24:	4b88      	ldr	r3, [pc, #544]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001e26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e28:	4b87      	ldr	r3, [pc, #540]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	438a      	bics	r2, r1
 8001e2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e30:	4b85      	ldr	r3, [pc, #532]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001e32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e34:	4b84      	ldr	r3, [pc, #528]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001e36:	2104      	movs	r1, #4
 8001e38:	438a      	bics	r2, r1
 8001e3a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d014      	beq.n	8001e6e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff faca 	bl	80013dc <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e4c:	e009      	b.n	8001e62 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7ff fac5 	bl	80013dc <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	4a7d      	ldr	r2, [pc, #500]	; (8002050 <HAL_RCC_OscConfig+0x634>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e136      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e62:	4b79      	ldr	r3, [pc, #484]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e66:	2202      	movs	r2, #2
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x432>
 8001e6c:	e013      	b.n	8001e96 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7ff fab5 	bl	80013dc <HAL_GetTick>
 8001e72:	0003      	movs	r3, r0
 8001e74:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e76:	e009      	b.n	8001e8c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e78:	f7ff fab0 	bl	80013dc <HAL_GetTick>
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	4a73      	ldr	r2, [pc, #460]	; (8002050 <HAL_RCC_OscConfig+0x634>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e121      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e8c:	4b6e      	ldr	r3, [pc, #440]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e90:	2202      	movs	r2, #2
 8001e92:	4013      	ands	r3, r2
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e96:	231f      	movs	r3, #31
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ea0:	4b69      	ldr	r3, [pc, #420]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ea4:	4b68      	ldr	r3, [pc, #416]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001ea6:	496b      	ldr	r1, [pc, #428]	; (8002054 <HAL_RCC_OscConfig+0x638>)
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d039      	beq.n	8001f2a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d01b      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ebe:	4b62      	ldr	r3, [pc, #392]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4b61      	ldr	r3, [pc, #388]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	03c9      	lsls	r1, r1, #15
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ecc:	f7ff fa86 	bl	80013dc <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed6:	f7ff fa81 	bl	80013dc <HAL_GetTick>
 8001eda:	0002      	movs	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e0f3      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ee8:	4b57      	ldr	r3, [pc, #348]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	041b      	lsls	r3, r3, #16
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x4ba>
 8001ef4:	e019      	b.n	8001f2a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ef6:	4b54      	ldr	r3, [pc, #336]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b53      	ldr	r3, [pc, #332]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001efc:	4956      	ldr	r1, [pc, #344]	; (8002058 <HAL_RCC_OscConfig+0x63c>)
 8001efe:	400a      	ands	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f02:	f7ff fa6b 	bl	80013dc <HAL_GetTick>
 8001f06:	0003      	movs	r3, r0
 8001f08:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f0c:	f7ff fa66 	bl	80013dc <HAL_GetTick>
 8001f10:	0002      	movs	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e0d8      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001f1e:	4b4a      	ldr	r3, [pc, #296]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	4013      	ands	r3, r2
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d100      	bne.n	8001f34 <HAL_RCC_OscConfig+0x518>
 8001f32:	e0cc      	b.n	80020ce <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f34:	4b44      	ldr	r3, [pc, #272]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2238      	movs	r2, #56	; 0x38
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b10      	cmp	r3, #16
 8001f3e:	d100      	bne.n	8001f42 <HAL_RCC_OscConfig+0x526>
 8001f40:	e07b      	b.n	800203a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d156      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4a:	4b3f      	ldr	r3, [pc, #252]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001f50:	4942      	ldr	r1, [pc, #264]	; (800205c <HAL_RCC_OscConfig+0x640>)
 8001f52:	400a      	ands	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f56:	f7ff fa41 	bl	80013dc <HAL_GetTick>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f60:	f7ff fa3c 	bl	80013dc <HAL_GetTick>
 8001f64:	0002      	movs	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e0ae      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f72:	4b35      	ldr	r3, [pc, #212]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	049b      	lsls	r3, r3, #18
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f7e:	4b32      	ldr	r3, [pc, #200]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	4a37      	ldr	r2, [pc, #220]	; (8002060 <HAL_RCC_OscConfig+0x644>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	0019      	movs	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001faa:	431a      	orrs	r2, r3
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb2:	4b25      	ldr	r3, [pc, #148]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001fb8:	2180      	movs	r1, #128	; 0x80
 8001fba:	0449      	lsls	r1, r1, #17
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001fc0:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001fc6:	2180      	movs	r1, #128	; 0x80
 8001fc8:	0549      	lsls	r1, r1, #21
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7ff fa05 	bl	80013dc <HAL_GetTick>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7ff fa00 	bl	80013dc <HAL_GetTick>
 8001fdc:	0002      	movs	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e072      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	049b      	lsls	r3, r3, #18
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x5bc>
 8001ff6:	e06a      	b.n	80020ce <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8001ffe:	4917      	ldr	r1, [pc, #92]	; (800205c <HAL_RCC_OscConfig+0x640>)
 8002000:	400a      	ands	r2, r1
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7ff f9ea 	bl	80013dc <HAL_GetTick>
 8002008:	0003      	movs	r3, r0
 800200a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200e:	f7ff f9e5 	bl	80013dc <HAL_GetTick>
 8002012:	0002      	movs	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e057      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	049b      	lsls	r3, r3, #18
 8002028:	4013      	ands	r3, r2
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_RCC_OscConfig+0x62c>)
 8002032:	490c      	ldr	r1, [pc, #48]	; (8002064 <HAL_RCC_OscConfig+0x648>)
 8002034:	400a      	ands	r2, r1
 8002036:	60da      	str	r2, [r3, #12]
 8002038:	e049      	b.n	80020ce <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d112      	bne.n	8002068 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e044      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	40021000 	.word	0x40021000
 800204c:	40007000 	.word	0x40007000
 8002050:	00001388 	.word	0x00001388
 8002054:	efffffff 	.word	0xefffffff
 8002058:	ffbfffff 	.word	0xffbfffff
 800205c:	feffffff 	.word	0xfeffffff
 8002060:	11c1808c 	.word	0x11c1808c
 8002064:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002068:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_RCC_OscConfig+0x6bc>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2203      	movs	r2, #3
 8002072:	401a      	ands	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	429a      	cmp	r2, r3
 800207a:	d126      	bne.n	80020ca <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2270      	movs	r2, #112	; 0x70
 8002080:	401a      	ands	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d11f      	bne.n	80020ca <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	23fe      	movs	r3, #254	; 0xfe
 800208e:	01db      	lsls	r3, r3, #7
 8002090:	401a      	ands	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d116      	bne.n	80020ca <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	23f8      	movs	r3, #248	; 0xf8
 80020a0:	039b      	lsls	r3, r3, #14
 80020a2:	401a      	ands	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d10e      	bne.n	80020ca <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	23e0      	movs	r3, #224	; 0xe0
 80020b0:	051b      	lsls	r3, r3, #20
 80020b2:	401a      	ands	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d106      	bne.n	80020ca <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	0f5b      	lsrs	r3, r3, #29
 80020c0:	075a      	lsls	r2, r3, #29
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	0018      	movs	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b008      	add	sp, #32
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000

080020dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0e9      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f0:	4b76      	ldr	r3, [pc, #472]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2207      	movs	r2, #7
 80020f6:	4013      	ands	r3, r2
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d91e      	bls.n	800213c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b73      	ldr	r3, [pc, #460]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2207      	movs	r2, #7
 8002104:	4393      	bics	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	4b70      	ldr	r3, [pc, #448]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002110:	f7ff f964 	bl	80013dc <HAL_GetTick>
 8002114:	0003      	movs	r3, r0
 8002116:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002118:	e009      	b.n	800212e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211a:	f7ff f95f 	bl	80013dc <HAL_GetTick>
 800211e:	0002      	movs	r2, r0
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	4a6a      	ldr	r2, [pc, #424]	; (80022d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e0ca      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800212e:	4b67      	ldr	r3, [pc, #412]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2207      	movs	r2, #7
 8002134:	4013      	ands	r3, r2
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d1ee      	bne.n	800211a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2202      	movs	r2, #2
 8002142:	4013      	ands	r3, r2
 8002144:	d015      	beq.n	8002172 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2204      	movs	r2, #4
 800214c:	4013      	ands	r3, r2
 800214e:	d006      	beq.n	800215e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002150:	4b60      	ldr	r3, [pc, #384]	; (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	4b5f      	ldr	r3, [pc, #380]	; (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002156:	21e0      	movs	r1, #224	; 0xe0
 8002158:	01c9      	lsls	r1, r1, #7
 800215a:	430a      	orrs	r2, r1
 800215c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800215e:	4b5d      	ldr	r3, [pc, #372]	; (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	4a5d      	ldr	r2, [pc, #372]	; (80022d8 <HAL_RCC_ClockConfig+0x1fc>)
 8002164:	4013      	ands	r3, r2
 8002166:	0019      	movs	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	4b59      	ldr	r3, [pc, #356]	; (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 800216e:	430a      	orrs	r2, r1
 8002170:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2201      	movs	r2, #1
 8002178:	4013      	ands	r3, r2
 800217a:	d057      	beq.n	800222c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d107      	bne.n	8002194 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002184:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	029b      	lsls	r3, r3, #10
 800218c:	4013      	ands	r3, r2
 800218e:	d12b      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e097      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d107      	bne.n	80021ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219c:	4b4d      	ldr	r3, [pc, #308]	; (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	049b      	lsls	r3, r3, #18
 80021a4:	4013      	ands	r3, r2
 80021a6:	d11f      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e08b      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d107      	bne.n	80021c4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021b4:	4b47      	ldr	r3, [pc, #284]	; (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4013      	ands	r3, r2
 80021be:	d113      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e07f      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d106      	bne.n	80021da <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021cc:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 80021ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d0:	2202      	movs	r2, #2
 80021d2:	4013      	ands	r3, r2
 80021d4:	d108      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e074      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021da:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 80021dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021de:	2202      	movs	r2, #2
 80021e0:	4013      	ands	r3, r2
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e06d      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021e8:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2207      	movs	r2, #7
 80021ee:	4393      	bics	r3, r2
 80021f0:	0019      	movs	r1, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 80021f8:	430a      	orrs	r2, r1
 80021fa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021fc:	f7ff f8ee 	bl	80013dc <HAL_GetTick>
 8002200:	0003      	movs	r3, r0
 8002202:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002204:	e009      	b.n	800221a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002206:	f7ff f8e9 	bl	80013dc <HAL_GetTick>
 800220a:	0002      	movs	r2, r0
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	4a2f      	ldr	r2, [pc, #188]	; (80022d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e054      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2238      	movs	r2, #56	; 0x38
 8002220:	401a      	ands	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	429a      	cmp	r2, r3
 800222a:	d1ec      	bne.n	8002206 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b27      	ldr	r3, [pc, #156]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2207      	movs	r2, #7
 8002232:	4013      	ands	r3, r2
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d21e      	bcs.n	8002278 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2207      	movs	r2, #7
 8002240:	4393      	bics	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	4b21      	ldr	r3, [pc, #132]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800224c:	f7ff f8c6 	bl	80013dc <HAL_GetTick>
 8002250:	0003      	movs	r3, r0
 8002252:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002254:	e009      	b.n	800226a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002256:	f7ff f8c1 	bl	80013dc <HAL_GetTick>
 800225a:	0002      	movs	r2, r0
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e02c      	b.n	80022c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2207      	movs	r2, #7
 8002270:	4013      	ands	r3, r2
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d1ee      	bne.n	8002256 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2204      	movs	r2, #4
 800227e:	4013      	ands	r3, r2
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002282:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4a15      	ldr	r2, [pc, #84]	; (80022dc <HAL_RCC_ClockConfig+0x200>)
 8002288:	4013      	ands	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002292:	430a      	orrs	r2, r1
 8002294:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002296:	f000 f829 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 800229a:	0001      	movs	r1, r0
 800229c:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	220f      	movs	r2, #15
 80022a4:	401a      	ands	r2, r3
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <HAL_RCC_ClockConfig+0x204>)
 80022a8:	0092      	lsls	r2, r2, #2
 80022aa:	58d3      	ldr	r3, [r2, r3]
 80022ac:	221f      	movs	r2, #31
 80022ae:	4013      	ands	r3, r2
 80022b0:	000a      	movs	r2, r1
 80022b2:	40da      	lsrs	r2, r3
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCC_ClockConfig+0x208>)
 80022b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_RCC_ClockConfig+0x20c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0018      	movs	r0, r3
 80022be:	f7ff f831 	bl	8001324 <HAL_InitTick>
 80022c2:	0003      	movs	r3, r0
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b004      	add	sp, #16
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40022000 	.word	0x40022000
 80022d0:	00001388 	.word	0x00001388
 80022d4:	40021000 	.word	0x40021000
 80022d8:	fffff0ff 	.word	0xfffff0ff
 80022dc:	ffff8fff 	.word	0xffff8fff
 80022e0:	08004898 	.word	0x08004898
 80022e4:	20000004 	.word	0x20000004
 80022e8:	20000008 	.word	0x20000008

080022ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f2:	4b3c      	ldr	r3, [pc, #240]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2238      	movs	r2, #56	; 0x38
 80022f8:	4013      	ands	r3, r2
 80022fa:	d10f      	bne.n	800231c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80022fc:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	0adb      	lsrs	r3, r3, #11
 8002302:	2207      	movs	r2, #7
 8002304:	4013      	ands	r3, r2
 8002306:	2201      	movs	r2, #1
 8002308:	409a      	lsls	r2, r3
 800230a:	0013      	movs	r3, r2
 800230c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800230e:	6839      	ldr	r1, [r7, #0]
 8002310:	4835      	ldr	r0, [pc, #212]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002312:	f7fd feff 	bl	8000114 <__udivsi3>
 8002316:	0003      	movs	r3, r0
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	e05d      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800231c:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2238      	movs	r2, #56	; 0x38
 8002322:	4013      	ands	r3, r2
 8002324:	2b08      	cmp	r3, #8
 8002326:	d102      	bne.n	800232e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002328:	4b30      	ldr	r3, [pc, #192]	; (80023ec <HAL_RCC_GetSysClockFreq+0x100>)
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	e054      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800232e:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2238      	movs	r2, #56	; 0x38
 8002334:	4013      	ands	r3, r2
 8002336:	2b10      	cmp	r3, #16
 8002338:	d138      	bne.n	80023ac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800233a:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2203      	movs	r2, #3
 8002340:	4013      	ands	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002344:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	2207      	movs	r2, #7
 800234c:	4013      	ands	r3, r2
 800234e:	3301      	adds	r3, #1
 8002350:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d10d      	bne.n	8002374 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	4824      	ldr	r0, [pc, #144]	; (80023ec <HAL_RCC_GetSysClockFreq+0x100>)
 800235c:	f7fd feda 	bl	8000114 <__udivsi3>
 8002360:	0003      	movs	r3, r0
 8002362:	0019      	movs	r1, r3
 8002364:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	227f      	movs	r2, #127	; 0x7f
 800236c:	4013      	ands	r3, r2
 800236e:	434b      	muls	r3, r1
 8002370:	617b      	str	r3, [r7, #20]
        break;
 8002372:	e00d      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	481c      	ldr	r0, [pc, #112]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002378:	f7fd fecc 	bl	8000114 <__udivsi3>
 800237c:	0003      	movs	r3, r0
 800237e:	0019      	movs	r1, r3
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	227f      	movs	r2, #127	; 0x7f
 8002388:	4013      	ands	r3, r2
 800238a:	434b      	muls	r3, r1
 800238c:	617b      	str	r3, [r7, #20]
        break;
 800238e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	0f5b      	lsrs	r3, r3, #29
 8002396:	2207      	movs	r2, #7
 8002398:	4013      	ands	r3, r2
 800239a:	3301      	adds	r3, #1
 800239c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	6978      	ldr	r0, [r7, #20]
 80023a2:	f7fd feb7 	bl	8000114 <__udivsi3>
 80023a6:	0003      	movs	r3, r0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	e015      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2238      	movs	r2, #56	; 0x38
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	d103      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2238      	movs	r2, #56	; 0x38
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b18      	cmp	r3, #24
 80023ca:	d103      	bne.n	80023d4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80023cc:	23fa      	movs	r3, #250	; 0xfa
 80023ce:	01db      	lsls	r3, r3, #7
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	e001      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023d8:	693b      	ldr	r3, [r7, #16]
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b006      	add	sp, #24
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	40021000 	.word	0x40021000
 80023e8:	00f42400 	.word	0x00f42400
 80023ec:	007a1200 	.word	0x007a1200

080023f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f4:	4b02      	ldr	r3, [pc, #8]	; (8002400 <HAL_RCC_GetHCLKFreq+0x10>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	0018      	movs	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	20000004 	.word	0x20000004

08002404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002404:	b5b0      	push	{r4, r5, r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002408:	f7ff fff2 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 800240c:	0004      	movs	r4, r0
 800240e:	f7ff faf9 	bl	8001a04 <LL_RCC_GetAPB1Prescaler>
 8002412:	0003      	movs	r3, r0
 8002414:	0b1a      	lsrs	r2, r3, #12
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002418:	0092      	lsls	r2, r2, #2
 800241a:	58d3      	ldr	r3, [r2, r3]
 800241c:	221f      	movs	r2, #31
 800241e:	4013      	ands	r3, r2
 8002420:	40dc      	lsrs	r4, r3
 8002422:	0023      	movs	r3, r4
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	bdb0      	pop	{r4, r5, r7, pc}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	080048d8 	.word	0x080048d8

08002430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002438:	2313      	movs	r3, #19
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002440:	2312      	movs	r3, #18
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	029b      	lsls	r3, r3, #10
 8002450:	4013      	ands	r3, r2
 8002452:	d100      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002454:	e0ad      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002456:	2011      	movs	r0, #17
 8002458:	183b      	adds	r3, r7, r0
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002460:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	055b      	lsls	r3, r3, #21
 8002466:	4013      	ands	r3, r2
 8002468:	d110      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	4b44      	ldr	r3, [pc, #272]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800246c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800246e:	4b43      	ldr	r3, [pc, #268]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002470:	2180      	movs	r1, #128	; 0x80
 8002472:	0549      	lsls	r1, r1, #21
 8002474:	430a      	orrs	r2, r1
 8002476:	63da      	str	r2, [r3, #60]	; 0x3c
 8002478:	4b40      	ldr	r3, [pc, #256]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800247a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	055b      	lsls	r3, r3, #21
 8002480:	4013      	ands	r3, r2
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002486:	183b      	adds	r3, r7, r0
 8002488:	2201      	movs	r2, #1
 800248a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800248c:	4b3c      	ldr	r3, [pc, #240]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002492:	2180      	movs	r1, #128	; 0x80
 8002494:	0049      	lsls	r1, r1, #1
 8002496:	430a      	orrs	r2, r1
 8002498:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800249a:	f7fe ff9f 	bl	80013dc <HAL_GetTick>
 800249e:	0003      	movs	r3, r0
 80024a0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024a2:	e00b      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a4:	f7fe ff9a 	bl	80013dc <HAL_GetTick>
 80024a8:	0002      	movs	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d904      	bls.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80024b2:	2313      	movs	r3, #19
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2203      	movs	r2, #3
 80024b8:	701a      	strb	r2, [r3, #0]
        break;
 80024ba:	e005      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024bc:	4b30      	ldr	r3, [pc, #192]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4013      	ands	r3, r2
 80024c6:	d0ed      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80024c8:	2313      	movs	r3, #19
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d15e      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024d2:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80024d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024d6:	23c0      	movs	r3, #192	; 0xc0
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4013      	ands	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d019      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d014      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024ee:	4b23      	ldr	r3, [pc, #140]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80024f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f2:	4a24      	ldr	r2, [pc, #144]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024f8:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80024fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024fc:	4b1f      	ldr	r3, [pc, #124]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80024fe:	2180      	movs	r1, #128	; 0x80
 8002500:	0249      	lsls	r1, r1, #9
 8002502:	430a      	orrs	r2, r1
 8002504:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002508:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800250a:	4b1c      	ldr	r3, [pc, #112]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800250c:	491e      	ldr	r1, [pc, #120]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800250e:	400a      	ands	r2, r1
 8002510:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002512:	4b1a      	ldr	r3, [pc, #104]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2201      	movs	r2, #1
 800251c:	4013      	ands	r3, r2
 800251e:	d016      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe ff5c 	bl	80013dc <HAL_GetTick>
 8002524:	0003      	movs	r3, r0
 8002526:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002528:	e00c      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7fe ff57 	bl	80013dc <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	4a15      	ldr	r2, [pc, #84]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d904      	bls.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800253a:	2313      	movs	r3, #19
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2203      	movs	r2, #3
 8002540:	701a      	strb	r2, [r3, #0]
            break;
 8002542:	e004      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002548:	2202      	movs	r2, #2
 800254a:	4013      	ands	r3, r2
 800254c:	d0ed      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800254e:	2313      	movs	r3, #19
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10a      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	4a09      	ldr	r2, [pc, #36]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800255e:	4013      	ands	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002568:	430a      	orrs	r2, r1
 800256a:	65da      	str	r2, [r3, #92]	; 0x5c
 800256c:	e016      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800256e:	2312      	movs	r3, #18
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	2213      	movs	r2, #19
 8002574:	18ba      	adds	r2, r7, r2
 8002576:	7812      	ldrb	r2, [r2, #0]
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	e00f      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800257c:	40021000 	.word	0x40021000
 8002580:	40007000 	.word	0x40007000
 8002584:	fffffcff 	.word	0xfffffcff
 8002588:	fffeffff 	.word	0xfffeffff
 800258c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002590:	2312      	movs	r3, #18
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	2213      	movs	r2, #19
 8002596:	18ba      	adds	r2, r7, r2
 8002598:	7812      	ldrb	r2, [r2, #0]
 800259a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800259c:	2311      	movs	r3, #17
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d105      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a6:	4bb6      	ldr	r3, [pc, #728]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025aa:	4bb5      	ldr	r3, [pc, #724]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025ac:	49b5      	ldr	r1, [pc, #724]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80025ae:	400a      	ands	r2, r1
 80025b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2201      	movs	r2, #1
 80025b8:	4013      	ands	r3, r2
 80025ba:	d009      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025bc:	4bb0      	ldr	r3, [pc, #704]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c0:	2203      	movs	r2, #3
 80025c2:	4393      	bics	r3, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4bad      	ldr	r3, [pc, #692]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025cc:	430a      	orrs	r2, r1
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2202      	movs	r2, #2
 80025d6:	4013      	ands	r3, r2
 80025d8:	d009      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025da:	4ba9      	ldr	r3, [pc, #676]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	220c      	movs	r2, #12
 80025e0:	4393      	bics	r3, r2
 80025e2:	0019      	movs	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	4ba5      	ldr	r3, [pc, #660]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025ea:	430a      	orrs	r2, r1
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2204      	movs	r2, #4
 80025f4:	4013      	ands	r3, r2
 80025f6:	d009      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025f8:	4ba1      	ldr	r3, [pc, #644]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fc:	2230      	movs	r2, #48	; 0x30
 80025fe:	4393      	bics	r3, r2
 8002600:	0019      	movs	r1, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	4b9e      	ldr	r3, [pc, #632]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002608:	430a      	orrs	r2, r1
 800260a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2210      	movs	r2, #16
 8002612:	4013      	ands	r3, r2
 8002614:	d009      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002616:	4b9a      	ldr	r3, [pc, #616]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	4a9b      	ldr	r2, [pc, #620]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800261c:	4013      	ands	r3, r2
 800261e:	0019      	movs	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	4b96      	ldr	r3, [pc, #600]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002626:	430a      	orrs	r2, r1
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	015b      	lsls	r3, r3, #5
 8002632:	4013      	ands	r3, r2
 8002634:	d009      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002636:	4b92      	ldr	r3, [pc, #584]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	4a94      	ldr	r2, [pc, #592]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800263c:	4013      	ands	r3, r2
 800263e:	0019      	movs	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	4b8e      	ldr	r3, [pc, #568]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002646:	430a      	orrs	r2, r1
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4013      	ands	r3, r2
 8002654:	d009      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002656:	4b8a      	ldr	r3, [pc, #552]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265a:	4a8d      	ldr	r2, [pc, #564]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800265c:	4013      	ands	r3, r2
 800265e:	0019      	movs	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002664:	4b86      	ldr	r3, [pc, #536]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002666:	430a      	orrs	r2, r1
 8002668:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4013      	ands	r3, r2
 8002674:	d009      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002676:	4b82      	ldr	r3, [pc, #520]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	4a86      	ldr	r2, [pc, #536]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800267c:	4013      	ands	r3, r2
 800267e:	0019      	movs	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002684:	4b7e      	ldr	r3, [pc, #504]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002686:	430a      	orrs	r2, r1
 8002688:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2220      	movs	r2, #32
 8002690:	4013      	ands	r3, r2
 8002692:	d009      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002694:	4b7a      	ldr	r3, [pc, #488]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002698:	4a7f      	ldr	r2, [pc, #508]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800269a:	4013      	ands	r3, r2
 800269c:	0019      	movs	r1, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	4b77      	ldr	r3, [pc, #476]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026a4:	430a      	orrs	r2, r1
 80026a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2240      	movs	r2, #64	; 0x40
 80026ae:	4013      	ands	r3, r2
 80026b0:	d009      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026b2:	4b73      	ldr	r3, [pc, #460]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	4a79      	ldr	r2, [pc, #484]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	0019      	movs	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	4b6f      	ldr	r3, [pc, #444]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026c2:	430a      	orrs	r2, r1
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	01db      	lsls	r3, r3, #7
 80026ce:	4013      	ands	r3, r2
 80026d0:	d015      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026d2:	4b6b      	ldr	r3, [pc, #428]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	0899      	lsrs	r1, r3, #2
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026de:	4b68      	ldr	r3, [pc, #416]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026e0:	430a      	orrs	r2, r1
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	05db      	lsls	r3, r3, #23
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d106      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80026f0:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	4b62      	ldr	r3, [pc, #392]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	0249      	lsls	r1, r1, #9
 80026fa:	430a      	orrs	r2, r1
 80026fc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	031b      	lsls	r3, r3, #12
 8002706:	4013      	ands	r3, r2
 8002708:	d009      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800270a:	4b5d      	ldr	r3, [pc, #372]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	2240      	movs	r2, #64	; 0x40
 8002710:	4393      	bics	r3, r2
 8002712:	0019      	movs	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002718:	4b59      	ldr	r3, [pc, #356]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800271a:	430a      	orrs	r2, r1
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	039b      	lsls	r3, r3, #14
 8002726:	4013      	ands	r3, r2
 8002728:	d016      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800272a:	4b55      	ldr	r3, [pc, #340]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	4a5c      	ldr	r2, [pc, #368]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002730:	4013      	ands	r3, r2
 8002732:	0019      	movs	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002738:	4b51      	ldr	r3, [pc, #324]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800273a:	430a      	orrs	r2, r1
 800273c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	03db      	lsls	r3, r3, #15
 8002746:	429a      	cmp	r2, r3
 8002748:	d106      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800274a:	4b4d      	ldr	r3, [pc, #308]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	4b4c      	ldr	r3, [pc, #304]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002750:	2180      	movs	r1, #128	; 0x80
 8002752:	0449      	lsls	r1, r1, #17
 8002754:	430a      	orrs	r2, r1
 8002756:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	03db      	lsls	r3, r3, #15
 8002760:	4013      	ands	r3, r2
 8002762:	d016      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002764:	4b46      	ldr	r3, [pc, #280]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002768:	4a4e      	ldr	r2, [pc, #312]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800276a:	4013      	ands	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002772:	4b43      	ldr	r3, [pc, #268]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002774:	430a      	orrs	r2, r1
 8002776:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	045b      	lsls	r3, r3, #17
 8002780:	429a      	cmp	r2, r3
 8002782:	d106      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002784:	4b3e      	ldr	r3, [pc, #248]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800278a:	2180      	movs	r1, #128	; 0x80
 800278c:	0449      	lsls	r1, r1, #17
 800278e:	430a      	orrs	r2, r1
 8002790:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	4013      	ands	r3, r2
 800279c:	d014      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800279e:	4b38      	ldr	r3, [pc, #224]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a2:	2203      	movs	r2, #3
 80027a4:	4393      	bics	r3, r2
 80027a6:	0019      	movs	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1a      	ldr	r2, [r3, #32]
 80027ac:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027ae:	430a      	orrs	r2, r1
 80027b0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d106      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80027ba:	4b31      	ldr	r3, [pc, #196]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	4b30      	ldr	r3, [pc, #192]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027c0:	2180      	movs	r1, #128	; 0x80
 80027c2:	0249      	lsls	r1, r1, #9
 80027c4:	430a      	orrs	r2, r1
 80027c6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	019b      	lsls	r3, r3, #6
 80027d0:	4013      	ands	r3, r2
 80027d2:	d014      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80027d4:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	220c      	movs	r2, #12
 80027da:	4393      	bics	r3, r2
 80027dc:	0019      	movs	r1, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e2:	4b27      	ldr	r3, [pc, #156]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027e4:	430a      	orrs	r2, r1
 80027e6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d106      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80027f0:	4b23      	ldr	r3, [pc, #140]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	4b22      	ldr	r3, [pc, #136]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027f6:	2180      	movs	r1, #128	; 0x80
 80027f8:	0249      	lsls	r1, r1, #9
 80027fa:	430a      	orrs	r2, r1
 80027fc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	045b      	lsls	r3, r3, #17
 8002806:	4013      	ands	r3, r2
 8002808:	d016      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	4a22      	ldr	r2, [pc, #136]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002810:	4013      	ands	r3, r2
 8002812:	0019      	movs	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800281a:	430a      	orrs	r2, r1
 800281c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	019b      	lsls	r3, r3, #6
 8002826:	429a      	cmp	r2, r3
 8002828:	d106      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	4b14      	ldr	r3, [pc, #80]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	0449      	lsls	r1, r1, #17
 8002834:	430a      	orrs	r2, r1
 8002836:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	049b      	lsls	r3, r3, #18
 8002840:	4013      	ands	r3, r2
 8002842:	d016      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	4a10      	ldr	r2, [pc, #64]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800284a:	4013      	ands	r3, r2
 800284c:	0019      	movs	r1, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002854:	430a      	orrs	r2, r1
 8002856:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	429a      	cmp	r2, r3
 8002862:	d106      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800286a:	2180      	movs	r1, #128	; 0x80
 800286c:	0449      	lsls	r1, r1, #17
 800286e:	430a      	orrs	r2, r1
 8002870:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002872:	2312      	movs	r3, #18
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	781b      	ldrb	r3, [r3, #0]
}
 8002878:	0018      	movs	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	b006      	add	sp, #24
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	efffffff 	.word	0xefffffff
 8002888:	fffff3ff 	.word	0xfffff3ff
 800288c:	fffffcff 	.word	0xfffffcff
 8002890:	fff3ffff 	.word	0xfff3ffff
 8002894:	ffcfffff 	.word	0xffcfffff
 8002898:	ffffcfff 	.word	0xffffcfff
 800289c:	ffff3fff 	.word	0xffff3fff
 80028a0:	ffbfffff 	.word	0xffbfffff
 80028a4:	feffffff 	.word	0xfeffffff

080028a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80028a8:	b5b0      	push	{r4, r5, r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80028b0:	230f      	movs	r3, #15
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d100      	bne.n	80028c0 <HAL_RTC_Init+0x18>
 80028be:	e08c      	b.n	80029da <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2229      	movs	r2, #41	; 0x29
 80028c4:	5c9b      	ldrb	r3, [r3, r2]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2228      	movs	r2, #40	; 0x28
 80028d0:	2100      	movs	r1, #0
 80028d2:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2288      	movs	r2, #136	; 0x88
 80028d8:	0212      	lsls	r2, r2, #8
 80028da:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	0018      	movs	r0, r3
 80028e0:	f7fe fabe 	bl	8000e60 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2229      	movs	r2, #41	; 0x29
 80028e8:	2102      	movs	r1, #2
 80028ea:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2210      	movs	r2, #16
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b10      	cmp	r3, #16
 80028f8:	d062      	beq.n	80029c0 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	22ca      	movs	r2, #202	; 0xca
 8002900:	625a      	str	r2, [r3, #36]	; 0x24
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2253      	movs	r2, #83	; 0x53
 8002908:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800290a:	250f      	movs	r5, #15
 800290c:	197c      	adds	r4, r7, r5
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0018      	movs	r0, r3
 8002912:	f000 fb51 	bl	8002fb8 <RTC_EnterInitMode>
 8002916:	0003      	movs	r3, r0
 8002918:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800291a:	0028      	movs	r0, r5
 800291c:	183b      	adds	r3, r7, r0
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d12c      	bne.n	800297e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	492e      	ldr	r1, [pc, #184]	; (80029e8 <HAL_RTC_Init+0x140>)
 8002930:	400a      	ands	r2, r1
 8002932:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6999      	ldr	r1, [r3, #24]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6912      	ldr	r2, [r2, #16]
 800295a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6919      	ldr	r1, [r3, #16]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	041a      	lsls	r2, r3, #16
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002970:	183c      	adds	r4, r7, r0
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	0018      	movs	r0, r3
 8002976:	f000 fb61 	bl	800303c <RTC_ExitInitMode>
 800297a:	0003      	movs	r3, r0
 800297c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800297e:	230f      	movs	r3, #15
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d116      	bne.n	80029b6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	00d2      	lsls	r2, r2, #3
 8002994:	08d2      	lsrs	r2, r2, #3
 8002996:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6999      	ldr	r1, [r3, #24]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	22ff      	movs	r2, #255	; 0xff
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24
 80029be:	e003      	b.n	80029c8 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80029c0:	230f      	movs	r3, #15
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80029c8:	230f      	movs	r3, #15
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d103      	bne.n	80029da <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2229      	movs	r2, #41	; 0x29
 80029d6:	2101      	movs	r1, #1
 80029d8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80029da:	230f      	movs	r3, #15
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	781b      	ldrb	r3, [r3, #0]
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b004      	add	sp, #16
 80029e6:	bdb0      	pop	{r4, r5, r7, pc}
 80029e8:	fb8fffbf 	.word	0xfb8fffbf

080029ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80029ec:	b5b0      	push	{r4, r5, r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2228      	movs	r2, #40	; 0x28
 80029fc:	5c9b      	ldrb	r3, [r3, r2]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_RTC_SetTime+0x1a>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e092      	b.n	8002b2c <HAL_RTC_SetTime+0x140>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2228      	movs	r2, #40	; 0x28
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2229      	movs	r2, #41	; 0x29
 8002a12:	2102      	movs	r1, #2
 8002a14:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	22ca      	movs	r2, #202	; 0xca
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2253      	movs	r2, #83	; 0x53
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a26:	2513      	movs	r5, #19
 8002a28:	197c      	adds	r4, r7, r5
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f000 fac3 	bl	8002fb8 <RTC_EnterInitMode>
 8002a32:	0003      	movs	r3, r0
 8002a34:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002a36:	197b      	adds	r3, r7, r5
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d162      	bne.n	8002b04 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d125      	bne.n	8002a90 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2240      	movs	r2, #64	; 0x40
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d102      	bne.n	8002a56 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2200      	movs	r2, #0
 8002a54:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 fb32 	bl	80030c4 <RTC_ByteToBcd2>
 8002a60:	0003      	movs	r3, r0
 8002a62:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	785b      	ldrb	r3, [r3, #1]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f000 fb2b 	bl	80030c4 <RTC_ByteToBcd2>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002a72:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	789b      	ldrb	r3, [r3, #2]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f000 fb23 	bl	80030c4 <RTC_ByteToBcd2>
 8002a7e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002a80:	0022      	movs	r2, r4
 8002a82:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	78db      	ldrb	r3, [r3, #3]
 8002a88:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e017      	b.n	8002ac0 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2240      	movs	r2, #64	; 0x40
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d102      	bne.n	8002aa2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	785b      	ldrb	r3, [r3, #1]
 8002aac:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002aae:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ab4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	78db      	ldrb	r3, [r3, #3]
 8002aba:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	491b      	ldr	r1, [pc, #108]	; (8002b34 <HAL_RTC_SetTime+0x148>)
 8002ac8:	400a      	ands	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4918      	ldr	r1, [pc, #96]	; (8002b38 <HAL_RTC_SetTime+0x14c>)
 8002ad8:	400a      	ands	r2, r1
 8002ada:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6999      	ldr	r1, [r3, #24]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002af4:	2313      	movs	r3, #19
 8002af6:	18fc      	adds	r4, r7, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	0018      	movs	r0, r3
 8002afc:	f000 fa9e 	bl	800303c <RTC_ExitInitMode>
 8002b00:	0003      	movs	r3, r0
 8002b02:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	22ff      	movs	r2, #255	; 0xff
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8002b0c:	2313      	movs	r3, #19
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d103      	bne.n	8002b1e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2229      	movs	r2, #41	; 0x29
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2228      	movs	r2, #40	; 0x28
 8002b22:	2100      	movs	r1, #0
 8002b24:	5499      	strb	r1, [r3, r2]

  return status;
 8002b26:	2313      	movs	r3, #19
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	781b      	ldrb	r3, [r3, #0]
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b006      	add	sp, #24
 8002b32:	bdb0      	pop	{r4, r5, r7, pc}
 8002b34:	007f7f7f 	.word	0x007f7f7f
 8002b38:	fffbffff 	.word	0xfffbffff

08002b3c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b3c:	b5b0      	push	{r4, r5, r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2228      	movs	r2, #40	; 0x28
 8002b4c:	5c9b      	ldrb	r3, [r3, r2]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_RTC_SetDate+0x1a>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e07e      	b.n	8002c54 <HAL_RTC_SetDate+0x118>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2228      	movs	r2, #40	; 0x28
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2229      	movs	r2, #41	; 0x29
 8002b62:	2102      	movs	r1, #2
 8002b64:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10e      	bne.n	8002b8a <HAL_RTC_SetDate+0x4e>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	785b      	ldrb	r3, [r3, #1]
 8002b70:	001a      	movs	r2, r3
 8002b72:	2310      	movs	r3, #16
 8002b74:	4013      	ands	r3, r2
 8002b76:	d008      	beq.n	8002b8a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	785b      	ldrb	r3, [r3, #1]
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	4393      	bics	r3, r2
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	330a      	adds	r3, #10
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d11c      	bne.n	8002bca <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	78db      	ldrb	r3, [r3, #3]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f000 fa95 	bl	80030c4 <RTC_ByteToBcd2>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	785b      	ldrb	r3, [r3, #1]
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f000 fa8e 	bl	80030c4 <RTC_ByteToBcd2>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002bac:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	789b      	ldrb	r3, [r3, #2]
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 fa86 	bl	80030c4 <RTC_ByteToBcd2>
 8002bb8:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002bba:	0022      	movs	r2, r4
 8002bbc:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	e00e      	b.n	8002be8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	78db      	ldrb	r3, [r3, #3]
 8002bce:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	785b      	ldrb	r3, [r3, #1]
 8002bd4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002bd6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002bdc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002be4:	4313      	orrs	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	22ca      	movs	r2, #202	; 0xca
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2253      	movs	r2, #83	; 0x53
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002bf8:	2513      	movs	r5, #19
 8002bfa:	197c      	adds	r4, r7, r5
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f000 f9da 	bl	8002fb8 <RTC_EnterInitMode>
 8002c04:	0003      	movs	r3, r0
 8002c06:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002c08:	0028      	movs	r0, r5
 8002c0a:	183b      	adds	r3, r7, r0
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10c      	bne.n	8002c2c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4910      	ldr	r1, [pc, #64]	; (8002c5c <HAL_RTC_SetDate+0x120>)
 8002c1a:	400a      	ands	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002c1e:	183c      	adds	r4, r7, r0
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	0018      	movs	r0, r3
 8002c24:	f000 fa0a 	bl	800303c <RTC_ExitInitMode>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	22ff      	movs	r2, #255	; 0xff
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002c34:	2313      	movs	r3, #19
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d103      	bne.n	8002c46 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2229      	movs	r2, #41	; 0x29
 8002c42:	2101      	movs	r1, #1
 8002c44:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2228      	movs	r2, #40	; 0x28
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	5499      	strb	r1, [r3, r2]

  return status;
 8002c4e:	2313      	movs	r3, #19
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	781b      	ldrb	r3, [r3, #0]
}
 8002c54:	0018      	movs	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b006      	add	sp, #24
 8002c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c5c:	00ffff3f 	.word	0x00ffff3f

08002c60 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b089      	sub	sp, #36	; 0x24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2228      	movs	r2, #40	; 0x28
 8002c70:	5c9b      	ldrb	r3, [r3, r2]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_RTC_SetAlarm_IT+0x1a>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e127      	b.n	8002eca <HAL_RTC_SetAlarm_IT+0x26a>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2228      	movs	r2, #40	; 0x28
 8002c7e:	2101      	movs	r1, #1
 8002c80:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2229      	movs	r2, #41	; 0x29
 8002c86:	2102      	movs	r1, #2
 8002c88:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d136      	bne.n	8002cfe <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2240      	movs	r2, #64	; 0x40
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d102      	bne.n	8002ca2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f000 fa0c 	bl	80030c4 <RTC_ByteToBcd2>
 8002cac:	0003      	movs	r3, r0
 8002cae:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	785b      	ldrb	r3, [r3, #1]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 fa05 	bl	80030c4 <RTC_ByteToBcd2>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002cbe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	789b      	ldrb	r3, [r3, #2]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 f9fd 	bl	80030c4 <RTC_ByteToBcd2>
 8002cca:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002ccc:	0022      	movs	r2, r4
 8002cce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	78db      	ldrb	r3, [r3, #3]
 8002cd4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	5c9b      	ldrb	r3, [r3, r2]
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f000 f9ef 	bl	80030c4 <RTC_ByteToBcd2>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002cea:	0022      	movs	r2, r4
 8002cec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002cf2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	e022      	b.n	8002d44 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2240      	movs	r2, #64	; 0x40
 8002d06:	4013      	ands	r3, r2
 8002d08:	d102      	bne.n	8002d10 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	785b      	ldrb	r3, [r3, #1]
 8002d1a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002d1c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002d22:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	78db      	ldrb	r3, [r3, #3]
 8002d28:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002d2a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2120      	movs	r1, #32
 8002d30:	5c5b      	ldrb	r3, [r3, r1]
 8002d32:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002d34:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002d3a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	22ca      	movs	r2, #202	; 0xca
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2253      	movs	r2, #83	; 0x53
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d14c      	bne.n	8002e06 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4957      	ldr	r1, [pc, #348]	; (8002ed4 <HAL_RTC_SetAlarm_IT+0x274>)
 8002d78:	400a      	ands	r2, r1
 8002d7a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2101      	movs	r1, #1
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8002d8c:	f7fe fb26 	bl	80013dc <HAL_GetTick>
 8002d90:	0003      	movs	r3, r0
 8002d92:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002d94:	e016      	b.n	8002dc4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d96:	f7fe fb21 	bl	80013dc <HAL_GetTick>
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	1ad2      	subs	r2, r2, r3
 8002da0:	23fa      	movs	r3, #250	; 0xfa
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d90d      	bls.n	8002dc4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	22ff      	movs	r2, #255	; 0xff
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2229      	movs	r2, #41	; 0x29
 8002db4:	2103      	movs	r1, #3
 8002db6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2228      	movs	r2, #40	; 0x28
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e082      	b.n	8002eca <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d0e2      	beq.n	8002d96 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2180      	movs	r1, #128	; 0x80
 8002dec:	0049      	lsls	r1, r1, #1
 8002dee:	430a      	orrs	r2, r1
 8002df0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2180      	movs	r1, #128	; 0x80
 8002dfe:	0149      	lsls	r1, r1, #5
 8002e00:	430a      	orrs	r2, r1
 8002e02:	619a      	str	r2, [r3, #24]
 8002e04:	e04b      	b.n	8002e9e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4931      	ldr	r1, [pc, #196]	; (8002ed8 <HAL_RTC_SetAlarm_IT+0x278>)
 8002e12:	400a      	ands	r2, r1
 8002e14:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2102      	movs	r1, #2
 8002e22:	430a      	orrs	r2, r1
 8002e24:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8002e26:	f7fe fad9 	bl	80013dc <HAL_GetTick>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002e2e:	e016      	b.n	8002e5e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e30:	f7fe fad4 	bl	80013dc <HAL_GetTick>
 8002e34:	0002      	movs	r2, r0
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	1ad2      	subs	r2, r2, r3
 8002e3a:	23fa      	movs	r3, #250	; 0xfa
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d90d      	bls.n	8002e5e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	22ff      	movs	r2, #255	; 0xff
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2229      	movs	r2, #41	; 0x29
 8002e4e:	2103      	movs	r1, #3
 8002e50:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2228      	movs	r2, #40	; 0x28
 8002e56:	2100      	movs	r1, #0
 8002e58:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e035      	b.n	8002eca <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	2202      	movs	r2, #2
 8002e66:	4013      	ands	r3, r2
 8002e68:	d0e2      	beq.n	8002e30 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699a      	ldr	r2, [r3, #24]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2180      	movs	r1, #128	; 0x80
 8002e86:	0089      	lsls	r1, r1, #2
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2180      	movs	r1, #128	; 0x80
 8002e98:	0189      	lsls	r1, r1, #6
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002e9e:	4a0f      	ldr	r2, [pc, #60]	; (8002edc <HAL_RTC_SetAlarm_IT+0x27c>)
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	58d3      	ldr	r3, [r2, r3]
 8002ea4:	490d      	ldr	r1, [pc, #52]	; (8002edc <HAL_RTC_SetAlarm_IT+0x27c>)
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	0312      	lsls	r2, r2, #12
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	2280      	movs	r2, #128	; 0x80
 8002eae:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	22ff      	movs	r2, #255	; 0xff
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2229      	movs	r2, #41	; 0x29
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2228      	movs	r2, #40	; 0x28
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	0018      	movs	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b009      	add	sp, #36	; 0x24
 8002ed0:	bd90      	pop	{r4, r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	fffffeff 	.word	0xfffffeff
 8002ed8:	fffffdff 	.word	0xfffffdff
 8002edc:	40021800 	.word	0x40021800

08002ee0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	015b      	lsls	r3, r3, #5
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d011      	beq.n	8002f1a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efc:	2201      	movs	r2, #1
 8002efe:	4013      	ands	r3, r2
 8002f00:	d00b      	beq.n	8002f1a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	0018      	movs	r0, r3
 8002f16:	f000 f821 	bl	8002f5c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	019b      	lsls	r3, r3, #6
 8002f24:	4013      	ands	r3, r2
 8002f26:	d011      	beq.n	8002f4c <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2e:	2202      	movs	r2, #2
 8002f30:	4013      	ands	r3, r2
 8002f32:	d00b      	beq.n	8002f4c <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2102      	movs	r1, #2
 8002f40:	430a      	orrs	r2, r1
 8002f42:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	0018      	movs	r0, r3
 8002f48:	f000 f8e4 	bl	8003114 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2229      	movs	r2, #41	; 0x29
 8002f50:	2101      	movs	r1, #1
 8002f52:	5499      	strb	r1, [r3, r2]
}
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b002      	add	sp, #8
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0e      	ldr	r2, [pc, #56]	; (8002fb4 <HAL_RTC_WaitForSynchro+0x48>)
 8002f7a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002f7c:	f7fe fa2e 	bl	80013dc <HAL_GetTick>
 8002f80:	0003      	movs	r3, r0
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002f84:	e00a      	b.n	8002f9c <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002f86:	f7fe fa29 	bl	80013dc <HAL_GetTick>
 8002f8a:	0002      	movs	r2, r0
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1ad2      	subs	r2, r2, r3
 8002f90:	23fa      	movs	r3, #250	; 0xfa
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d901      	bls.n	8002f9c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e006      	b.n	8002faa <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d0ee      	beq.n	8002f86 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b004      	add	sp, #16
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	0001005f 	.word	0x0001005f

08002fb8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002fc0:	230f      	movs	r3, #15
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	2240      	movs	r2, #64	; 0x40
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d12c      	bne.n	800302e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2180      	movs	r1, #128	; 0x80
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002fe4:	f7fe f9fa 	bl	80013dc <HAL_GetTick>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002fec:	e014      	b.n	8003018 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002fee:	f7fe f9f5 	bl	80013dc <HAL_GetTick>
 8002ff2:	0002      	movs	r2, r0
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	1ad2      	subs	r2, r2, r3
 8002ff8:	200f      	movs	r0, #15
 8002ffa:	183b      	adds	r3, r7, r0
 8002ffc:	1839      	adds	r1, r7, r0
 8002ffe:	7809      	ldrb	r1, [r1, #0]
 8003000:	7019      	strb	r1, [r3, #0]
 8003002:	23fa      	movs	r3, #250	; 0xfa
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	429a      	cmp	r2, r3
 8003008:	d906      	bls.n	8003018 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800300a:	183b      	adds	r3, r7, r0
 800300c:	2203      	movs	r2, #3
 800300e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2229      	movs	r2, #41	; 0x29
 8003014:	2103      	movs	r1, #3
 8003016:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2240      	movs	r2, #64	; 0x40
 8003020:	4013      	ands	r3, r2
 8003022:	d104      	bne.n	800302e <RTC_EnterInitMode+0x76>
 8003024:	230f      	movs	r3, #15
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b03      	cmp	r3, #3
 800302c:	d1df      	bne.n	8002fee <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800302e:	230f      	movs	r3, #15
 8003030:	18fb      	adds	r3, r7, r3
 8003032:	781b      	ldrb	r3, [r3, #0]
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b004      	add	sp, #16
 800303a:	bd80      	pop	{r7, pc}

0800303c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800303c:	b590      	push	{r4, r7, lr}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	240f      	movs	r4, #15
 8003046:	193b      	adds	r3, r7, r4
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800304c:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <RTC_ExitInitMode+0x84>)
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <RTC_ExitInitMode+0x84>)
 8003052:	2180      	movs	r1, #128	; 0x80
 8003054:	438a      	bics	r2, r1
 8003056:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003058:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <RTC_ExitInitMode+0x84>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	2220      	movs	r2, #32
 800305e:	4013      	ands	r3, r2
 8003060:	d10d      	bne.n	800307e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	0018      	movs	r0, r3
 8003066:	f7ff ff81 	bl	8002f6c <HAL_RTC_WaitForSynchro>
 800306a:	1e03      	subs	r3, r0, #0
 800306c:	d021      	beq.n	80030b2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2229      	movs	r2, #41	; 0x29
 8003072:	2103      	movs	r1, #3
 8003074:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003076:	193b      	adds	r3, r7, r4
 8003078:	2203      	movs	r2, #3
 800307a:	701a      	strb	r2, [r3, #0]
 800307c:	e019      	b.n	80030b2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <RTC_ExitInitMode+0x84>)
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <RTC_ExitInitMode+0x84>)
 8003084:	2120      	movs	r1, #32
 8003086:	438a      	bics	r2, r1
 8003088:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	0018      	movs	r0, r3
 800308e:	f7ff ff6d 	bl	8002f6c <HAL_RTC_WaitForSynchro>
 8003092:	1e03      	subs	r3, r0, #0
 8003094:	d007      	beq.n	80030a6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2229      	movs	r2, #41	; 0x29
 800309a:	2103      	movs	r1, #3
 800309c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800309e:	230f      	movs	r3, #15
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	2203      	movs	r2, #3
 80030a4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <RTC_ExitInitMode+0x84>)
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <RTC_ExitInitMode+0x84>)
 80030ac:	2120      	movs	r1, #32
 80030ae:	430a      	orrs	r2, r1
 80030b0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80030b2:	230f      	movs	r3, #15
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	781b      	ldrb	r3, [r3, #0]
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b005      	add	sp, #20
 80030be:	bd90      	pop	{r4, r7, pc}
 80030c0:	40002800 	.word	0x40002800

080030c4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	0002      	movs	r2, r0
 80030cc:	1dfb      	adds	r3, r7, #7
 80030ce:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80030d4:	230b      	movs	r3, #11
 80030d6:	18fb      	adds	r3, r7, r3
 80030d8:	1dfa      	adds	r2, r7, #7
 80030da:	7812      	ldrb	r2, [r2, #0]
 80030dc:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80030de:	e008      	b.n	80030f2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3301      	adds	r3, #1
 80030e4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80030e6:	220b      	movs	r2, #11
 80030e8:	18bb      	adds	r3, r7, r2
 80030ea:	18ba      	adds	r2, r7, r2
 80030ec:	7812      	ldrb	r2, [r2, #0]
 80030ee:	3a0a      	subs	r2, #10
 80030f0:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80030f2:	210b      	movs	r1, #11
 80030f4:	187b      	adds	r3, r7, r1
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b09      	cmp	r3, #9
 80030fa:	d8f1      	bhi.n	80030e0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	b2da      	uxtb	r2, r3
 8003104:	187b      	adds	r3, r7, r1
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	4313      	orrs	r3, r2
 800310a:	b2db      	uxtb	r3, r3
}
 800310c:	0018      	movs	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	b004      	add	sp, #16
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e0a8      	b.n	8003288 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	2382      	movs	r3, #130	; 0x82
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	429a      	cmp	r2, r3
 8003148:	d009      	beq.n	800315e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	61da      	str	r2, [r3, #28]
 8003150:	e005      	b.n	800315e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	225d      	movs	r2, #93	; 0x5d
 8003168:	5c9b      	ldrb	r3, [r3, r2]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d107      	bne.n	8003180 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	225c      	movs	r2, #92	; 0x5c
 8003174:	2100      	movs	r1, #0
 8003176:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	0018      	movs	r0, r3
 800317c:	f7fd feb6 	bl	8000eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	225d      	movs	r2, #93	; 0x5d
 8003184:	2102      	movs	r1, #2
 8003186:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2140      	movs	r1, #64	; 0x40
 8003194:	438a      	bics	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	23e0      	movs	r3, #224	; 0xe0
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d902      	bls.n	80031aa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	e002      	b.n	80031b0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	015b      	lsls	r3, r3, #5
 80031ae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	23f0      	movs	r3, #240	; 0xf0
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d008      	beq.n	80031ce <HAL_SPI_Init+0xaa>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	23e0      	movs	r3, #224	; 0xe0
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d002      	beq.n	80031ce <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	2382      	movs	r3, #130	; 0x82
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	401a      	ands	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6899      	ldr	r1, [r3, #8]
 80031dc:	2384      	movs	r3, #132	; 0x84
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	400b      	ands	r3, r1
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	2102      	movs	r1, #2
 80031ea:	400b      	ands	r3, r1
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	2101      	movs	r1, #1
 80031f4:	400b      	ands	r3, r1
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6999      	ldr	r1, [r3, #24]
 80031fc:	2380      	movs	r3, #128	; 0x80
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	400b      	ands	r3, r1
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	2138      	movs	r1, #56	; 0x38
 800320a:	400b      	ands	r3, r1
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	400b      	ands	r3, r1
 8003216:	431a      	orrs	r2, r3
 8003218:	0011      	movs	r1, r2
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	019b      	lsls	r3, r3, #6
 8003222:	401a      	ands	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	2204      	movs	r2, #4
 8003234:	401a      	ands	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2110      	movs	r1, #16
 800323c:	400b      	ands	r3, r1
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003244:	2108      	movs	r1, #8
 8003246:	400b      	ands	r3, r1
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68d9      	ldr	r1, [r3, #12]
 800324e:	23f0      	movs	r3, #240	; 0xf0
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	400b      	ands	r3, r1
 8003254:	431a      	orrs	r2, r3
 8003256:	0011      	movs	r1, r2
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	015b      	lsls	r3, r3, #5
 800325e:	401a      	ands	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	69da      	ldr	r2, [r3, #28]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4907      	ldr	r1, [pc, #28]	; (8003290 <HAL_SPI_Init+0x16c>)
 8003274:	400a      	ands	r2, r1
 8003276:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	225d      	movs	r2, #93	; 0x5d
 8003282:	2101      	movs	r1, #1
 8003284:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	0018      	movs	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	b004      	add	sp, #16
 800328e:	bd80      	pop	{r7, pc}
 8003290:	fffff7ff 	.word	0xfffff7ff

08003294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e04a      	b.n	800333c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	223d      	movs	r2, #61	; 0x3d
 80032aa:	5c9b      	ldrb	r3, [r3, r2]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d107      	bne.n	80032c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	223c      	movs	r2, #60	; 0x3c
 80032b6:	2100      	movs	r1, #0
 80032b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	0018      	movs	r0, r3
 80032be:	f7fd fe5f 	bl	8000f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	223d      	movs	r2, #61	; 0x3d
 80032c6:	2102      	movs	r1, #2
 80032c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3304      	adds	r3, #4
 80032d2:	0019      	movs	r1, r3
 80032d4:	0010      	movs	r0, r2
 80032d6:	f000 f965 	bl	80035a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2248      	movs	r2, #72	; 0x48
 80032de:	2101      	movs	r1, #1
 80032e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	223e      	movs	r2, #62	; 0x3e
 80032e6:	2101      	movs	r1, #1
 80032e8:	5499      	strb	r1, [r3, r2]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	223f      	movs	r2, #63	; 0x3f
 80032ee:	2101      	movs	r1, #1
 80032f0:	5499      	strb	r1, [r3, r2]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2240      	movs	r2, #64	; 0x40
 80032f6:	2101      	movs	r1, #1
 80032f8:	5499      	strb	r1, [r3, r2]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2241      	movs	r2, #65	; 0x41
 80032fe:	2101      	movs	r1, #1
 8003300:	5499      	strb	r1, [r3, r2]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2242      	movs	r2, #66	; 0x42
 8003306:	2101      	movs	r1, #1
 8003308:	5499      	strb	r1, [r3, r2]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2243      	movs	r2, #67	; 0x43
 800330e:	2101      	movs	r1, #1
 8003310:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2244      	movs	r2, #68	; 0x44
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2245      	movs	r2, #69	; 0x45
 800331e:	2101      	movs	r1, #1
 8003320:	5499      	strb	r1, [r3, r2]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2246      	movs	r2, #70	; 0x46
 8003326:	2101      	movs	r1, #1
 8003328:	5499      	strb	r1, [r3, r2]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2247      	movs	r2, #71	; 0x47
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	223d      	movs	r2, #61	; 0x3d
 8003336:	2101      	movs	r1, #1
 8003338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	0018      	movs	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	b002      	add	sp, #8
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2202      	movs	r2, #2
 8003360:	4013      	ands	r3, r2
 8003362:	d021      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2202      	movs	r2, #2
 8003368:	4013      	ands	r3, r2
 800336a:	d01d      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2203      	movs	r2, #3
 8003372:	4252      	negs	r2, r2
 8003374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2203      	movs	r2, #3
 8003384:	4013      	ands	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	0018      	movs	r0, r3
 800338c:	f000 f8f2 	bl	8003574 <HAL_TIM_IC_CaptureCallback>
 8003390:	e007      	b.n	80033a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	0018      	movs	r0, r3
 8003396:	f000 f8e5 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	0018      	movs	r0, r3
 800339e:	f000 f8f1 	bl	8003584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2204      	movs	r2, #4
 80033ac:	4013      	ands	r3, r2
 80033ae:	d022      	beq.n	80033f6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2204      	movs	r2, #4
 80033b4:	4013      	ands	r3, r2
 80033b6:	d01e      	beq.n	80033f6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2205      	movs	r2, #5
 80033be:	4252      	negs	r2, r2
 80033c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2202      	movs	r2, #2
 80033c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	23c0      	movs	r3, #192	; 0xc0
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4013      	ands	r3, r2
 80033d4:	d004      	beq.n	80033e0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	0018      	movs	r0, r3
 80033da:	f000 f8cb 	bl	8003574 <HAL_TIM_IC_CaptureCallback>
 80033de:	e007      	b.n	80033f0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	0018      	movs	r0, r3
 80033e4:	f000 f8be 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	0018      	movs	r0, r3
 80033ec:	f000 f8ca 	bl	8003584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2208      	movs	r2, #8
 80033fa:	4013      	ands	r3, r2
 80033fc:	d021      	beq.n	8003442 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2208      	movs	r2, #8
 8003402:	4013      	ands	r3, r2
 8003404:	d01d      	beq.n	8003442 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2209      	movs	r2, #9
 800340c:	4252      	negs	r2, r2
 800340e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2204      	movs	r2, #4
 8003414:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	2203      	movs	r2, #3
 800341e:	4013      	ands	r3, r2
 8003420:	d004      	beq.n	800342c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	0018      	movs	r0, r3
 8003426:	f000 f8a5 	bl	8003574 <HAL_TIM_IC_CaptureCallback>
 800342a:	e007      	b.n	800343c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	0018      	movs	r0, r3
 8003430:	f000 f898 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	0018      	movs	r0, r3
 8003438:	f000 f8a4 	bl	8003584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2210      	movs	r2, #16
 8003446:	4013      	ands	r3, r2
 8003448:	d022      	beq.n	8003490 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2210      	movs	r2, #16
 800344e:	4013      	ands	r3, r2
 8003450:	d01e      	beq.n	8003490 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2211      	movs	r2, #17
 8003458:	4252      	negs	r2, r2
 800345a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2208      	movs	r2, #8
 8003460:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	23c0      	movs	r3, #192	; 0xc0
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4013      	ands	r3, r2
 800346e:	d004      	beq.n	800347a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	0018      	movs	r0, r3
 8003474:	f000 f87e 	bl	8003574 <HAL_TIM_IC_CaptureCallback>
 8003478:	e007      	b.n	800348a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	0018      	movs	r0, r3
 800347e:	f000 f871 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	0018      	movs	r0, r3
 8003486:	f000 f87d 	bl	8003584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2201      	movs	r2, #1
 8003494:	4013      	ands	r3, r2
 8003496:	d00c      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	4013      	ands	r3, r2
 800349e:	d008      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2202      	movs	r2, #2
 80034a6:	4252      	negs	r2, r2
 80034a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	0018      	movs	r0, r3
 80034ae:	f000 f851 	bl	8003554 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2280      	movs	r2, #128	; 0x80
 80034b6:	4013      	ands	r3, r2
 80034b8:	d104      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	2380      	movs	r3, #128	; 0x80
 80034be:	019b      	lsls	r3, r3, #6
 80034c0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80034c2:	d00b      	beq.n	80034dc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2280      	movs	r2, #128	; 0x80
 80034c8:	4013      	ands	r3, r2
 80034ca:	d007      	beq.n	80034dc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1e      	ldr	r2, [pc, #120]	; (800354c <HAL_TIM_IRQHandler+0x208>)
 80034d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	0018      	movs	r0, r3
 80034d8:	f000 f97a 	bl	80037d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4013      	ands	r3, r2
 80034e4:	d00b      	beq.n	80034fe <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2280      	movs	r2, #128	; 0x80
 80034ea:	4013      	ands	r3, r2
 80034ec:	d007      	beq.n	80034fe <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a17      	ldr	r2, [pc, #92]	; (8003550 <HAL_TIM_IRQHandler+0x20c>)
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f000 f971 	bl	80037e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2240      	movs	r2, #64	; 0x40
 8003502:	4013      	ands	r3, r2
 8003504:	d00c      	beq.n	8003520 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2240      	movs	r2, #64	; 0x40
 800350a:	4013      	ands	r3, r2
 800350c:	d008      	beq.n	8003520 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2241      	movs	r2, #65	; 0x41
 8003514:	4252      	negs	r2, r2
 8003516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	0018      	movs	r0, r3
 800351c:	f000 f83a 	bl	8003594 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2220      	movs	r2, #32
 8003524:	4013      	ands	r3, r2
 8003526:	d00c      	beq.n	8003542 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	4013      	ands	r3, r2
 800352e:	d008      	beq.n	8003542 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2221      	movs	r2, #33	; 0x21
 8003536:	4252      	negs	r2, r2
 8003538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	0018      	movs	r0, r3
 800353e:	f000 f93f 	bl	80037c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	46bd      	mov	sp, r7
 8003546:	b004      	add	sp, #16
 8003548:	bd80      	pop	{r7, pc}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	ffffdf7f 	.word	0xffffdf7f
 8003550:	fffffeff 	.word	0xfffffeff

08003554 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	b002      	add	sp, #8
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b002      	add	sp, #8
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b002      	add	sp, #8
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b002      	add	sp, #8
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a3f      	ldr	r2, [pc, #252]	; (80036b4 <TIM_Base_SetConfig+0x110>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00c      	beq.n	80035d6 <TIM_Base_SetConfig+0x32>
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	05db      	lsls	r3, r3, #23
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d007      	beq.n	80035d6 <TIM_Base_SetConfig+0x32>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a3b      	ldr	r2, [pc, #236]	; (80036b8 <TIM_Base_SetConfig+0x114>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d003      	beq.n	80035d6 <TIM_Base_SetConfig+0x32>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a3a      	ldr	r2, [pc, #232]	; (80036bc <TIM_Base_SetConfig+0x118>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d108      	bne.n	80035e8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2270      	movs	r2, #112	; 0x70
 80035da:	4393      	bics	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a32      	ldr	r2, [pc, #200]	; (80036b4 <TIM_Base_SetConfig+0x110>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d01c      	beq.n	800362a <TIM_Base_SetConfig+0x86>
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	05db      	lsls	r3, r3, #23
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d017      	beq.n	800362a <TIM_Base_SetConfig+0x86>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2e      	ldr	r2, [pc, #184]	; (80036b8 <TIM_Base_SetConfig+0x114>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <TIM_Base_SetConfig+0x86>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a2d      	ldr	r2, [pc, #180]	; (80036bc <TIM_Base_SetConfig+0x118>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00f      	beq.n	800362a <TIM_Base_SetConfig+0x86>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a2c      	ldr	r2, [pc, #176]	; (80036c0 <TIM_Base_SetConfig+0x11c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00b      	beq.n	800362a <TIM_Base_SetConfig+0x86>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a2b      	ldr	r2, [pc, #172]	; (80036c4 <TIM_Base_SetConfig+0x120>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d007      	beq.n	800362a <TIM_Base_SetConfig+0x86>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a2a      	ldr	r2, [pc, #168]	; (80036c8 <TIM_Base_SetConfig+0x124>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d003      	beq.n	800362a <TIM_Base_SetConfig+0x86>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a29      	ldr	r2, [pc, #164]	; (80036cc <TIM_Base_SetConfig+0x128>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d108      	bne.n	800363c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4a28      	ldr	r2, [pc, #160]	; (80036d0 <TIM_Base_SetConfig+0x12c>)
 800362e:	4013      	ands	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2280      	movs	r2, #128	; 0x80
 8003640:	4393      	bics	r3, r2
 8003642:	001a      	movs	r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <TIM_Base_SetConfig+0x110>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00b      	beq.n	8003682 <TIM_Base_SetConfig+0xde>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <TIM_Base_SetConfig+0x120>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d007      	beq.n	8003682 <TIM_Base_SetConfig+0xde>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a14      	ldr	r2, [pc, #80]	; (80036c8 <TIM_Base_SetConfig+0x124>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d003      	beq.n	8003682 <TIM_Base_SetConfig+0xde>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a13      	ldr	r2, [pc, #76]	; (80036cc <TIM_Base_SetConfig+0x128>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d103      	bne.n	800368a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	2201      	movs	r2, #1
 8003696:	4013      	ands	r3, r2
 8003698:	2b01      	cmp	r3, #1
 800369a:	d106      	bne.n	80036aa <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	2201      	movs	r2, #1
 80036a2:	4393      	bics	r3, r2
 80036a4:	001a      	movs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	611a      	str	r2, [r3, #16]
  }
}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b004      	add	sp, #16
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	40012c00 	.word	0x40012c00
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40000800 	.word	0x40000800
 80036c0:	40002000 	.word	0x40002000
 80036c4:	40014000 	.word	0x40014000
 80036c8:	40014400 	.word	0x40014400
 80036cc:	40014800 	.word	0x40014800
 80036d0:	fffffcff 	.word	0xfffffcff

080036d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	223c      	movs	r2, #60	; 0x3c
 80036e2:	5c9b      	ldrb	r3, [r3, r2]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e05a      	b.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	223c      	movs	r2, #60	; 0x3c
 80036f0:	2101      	movs	r1, #1
 80036f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	223d      	movs	r2, #61	; 0x3d
 80036f8:	2102      	movs	r1, #2
 80036fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a26      	ldr	r2, [pc, #152]	; (80037ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d108      	bne.n	8003728 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a25      	ldr	r2, [pc, #148]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800371a:	4013      	ands	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2270      	movs	r2, #112	; 0x70
 800372c:	4393      	bics	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a19      	ldr	r2, [pc, #100]	; (80037ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d014      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	05db      	lsls	r3, r3, #23
 8003754:	429a      	cmp	r2, r3
 8003756:	d00e      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d009      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d004      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a12      	ldr	r2, [pc, #72]	; (80037bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d10c      	bne.n	8003790 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2280      	movs	r2, #128	; 0x80
 800377a:	4393      	bics	r3, r2
 800377c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	4313      	orrs	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	223d      	movs	r2, #61	; 0x3d
 8003794:	2101      	movs	r1, #1
 8003796:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	223c      	movs	r2, #60	; 0x3c
 800379c:	2100      	movs	r1, #0
 800379e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	0018      	movs	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b004      	add	sp, #16
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	ff0fffff 	.word	0xff0fffff
 80037b4:	40000400 	.word	0x40000400
 80037b8:	40000800 	.word	0x40000800
 80037bc:	40014000 	.word	0x40014000

080037c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037c8:	46c0      	nop			; (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b002      	add	sp, #8
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	46bd      	mov	sp, r7
 80037dc:	b002      	add	sp, #8
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037e8:	46c0      	nop			; (mov r8, r8)
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b002      	add	sp, #8
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e046      	b.n	8003890 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2288      	movs	r2, #136	; 0x88
 8003806:	589b      	ldr	r3, [r3, r2]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d107      	bne.n	800381c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2284      	movs	r2, #132	; 0x84
 8003810:	2100      	movs	r1, #0
 8003812:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	0018      	movs	r0, r3
 8003818:	f7fd fbd8 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2288      	movs	r2, #136	; 0x88
 8003820:	2124      	movs	r1, #36	; 0x24
 8003822:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2101      	movs	r1, #1
 8003830:	438a      	bics	r2, r1
 8003832:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	0018      	movs	r0, r3
 8003840:	f000 fc26 	bl	8004090 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	0018      	movs	r0, r3
 8003848:	f000 f8cc 	bl	80039e4 <UART_SetConfig>
 800384c:	0003      	movs	r3, r0
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e01c      	b.n	8003890 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	490d      	ldr	r1, [pc, #52]	; (8003898 <HAL_UART_Init+0xa8>)
 8003862:	400a      	ands	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	212a      	movs	r1, #42	; 0x2a
 8003872:	438a      	bics	r2, r1
 8003874:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2101      	movs	r1, #1
 8003882:	430a      	orrs	r2, r1
 8003884:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	0018      	movs	r0, r3
 800388a:	f000 fcb5 	bl	80041f8 <UART_CheckIdleState>
 800388e:	0003      	movs	r3, r0
}
 8003890:	0018      	movs	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	b002      	add	sp, #8
 8003896:	bd80      	pop	{r7, pc}
 8003898:	ffffb7ff 	.word	0xffffb7ff

0800389c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	; 0x28
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	1dbb      	adds	r3, r7, #6
 80038aa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2288      	movs	r2, #136	; 0x88
 80038b0:	589b      	ldr	r3, [r3, r2]
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d000      	beq.n	80038b8 <HAL_UART_Transmit+0x1c>
 80038b6:	e090      	b.n	80039da <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_UART_Transmit+0x2a>
 80038be:	1dbb      	adds	r3, r7, #6
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e088      	b.n	80039dc <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	015b      	lsls	r3, r3, #5
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d109      	bne.n	80038ea <HAL_UART_Transmit+0x4e>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d105      	bne.n	80038ea <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2201      	movs	r2, #1
 80038e2:	4013      	ands	r3, r2
 80038e4:	d001      	beq.n	80038ea <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e078      	b.n	80039dc <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2290      	movs	r2, #144	; 0x90
 80038ee:	2100      	movs	r1, #0
 80038f0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2288      	movs	r2, #136	; 0x88
 80038f6:	2121      	movs	r1, #33	; 0x21
 80038f8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038fa:	f7fd fd6f 	bl	80013dc <HAL_GetTick>
 80038fe:	0003      	movs	r3, r0
 8003900:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1dba      	adds	r2, r7, #6
 8003906:	2154      	movs	r1, #84	; 0x54
 8003908:	8812      	ldrh	r2, [r2, #0]
 800390a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1dba      	adds	r2, r7, #6
 8003910:	2156      	movs	r1, #86	; 0x56
 8003912:	8812      	ldrh	r2, [r2, #0]
 8003914:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	015b      	lsls	r3, r3, #5
 800391e:	429a      	cmp	r2, r3
 8003920:	d108      	bne.n	8003934 <HAL_UART_Transmit+0x98>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d104      	bne.n	8003934 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	e003      	b.n	800393c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003938:	2300      	movs	r3, #0
 800393a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800393c:	e030      	b.n	80039a0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	0013      	movs	r3, r2
 8003948:	2200      	movs	r2, #0
 800394a:	2180      	movs	r1, #128	; 0x80
 800394c:	f000 fcfe 	bl	800434c <UART_WaitOnFlagUntilTimeout>
 8003950:	1e03      	subs	r3, r0, #0
 8003952:	d005      	beq.n	8003960 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2288      	movs	r2, #136	; 0x88
 8003958:	2120      	movs	r1, #32
 800395a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e03d      	b.n	80039dc <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10b      	bne.n	800397e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	001a      	movs	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	05d2      	lsls	r2, r2, #23
 8003972:	0dd2      	lsrs	r2, r2, #23
 8003974:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	3302      	adds	r3, #2
 800397a:	61bb      	str	r3, [r7, #24]
 800397c:	e007      	b.n	800398e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	781a      	ldrb	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	3301      	adds	r3, #1
 800398c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2256      	movs	r2, #86	; 0x56
 8003992:	5a9b      	ldrh	r3, [r3, r2]
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b299      	uxth	r1, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2256      	movs	r2, #86	; 0x56
 800399e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2256      	movs	r2, #86	; 0x56
 80039a4:	5a9b      	ldrh	r3, [r3, r2]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1c8      	bne.n	800393e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	0013      	movs	r3, r2
 80039b6:	2200      	movs	r2, #0
 80039b8:	2140      	movs	r1, #64	; 0x40
 80039ba:	f000 fcc7 	bl	800434c <UART_WaitOnFlagUntilTimeout>
 80039be:	1e03      	subs	r3, r0, #0
 80039c0:	d005      	beq.n	80039ce <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2288      	movs	r2, #136	; 0x88
 80039c6:	2120      	movs	r1, #32
 80039c8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e006      	b.n	80039dc <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2288      	movs	r2, #136	; 0x88
 80039d2:	2120      	movs	r1, #32
 80039d4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	e000      	b.n	80039dc <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80039da:	2302      	movs	r3, #2
  }
}
 80039dc:	0018      	movs	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	b008      	add	sp, #32
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039e4:	b5b0      	push	{r4, r5, r7, lr}
 80039e6:	b090      	sub	sp, #64	; 0x40
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039ec:	231a      	movs	r3, #26
 80039ee:	2220      	movs	r2, #32
 80039f0:	189b      	adds	r3, r3, r2
 80039f2:	19db      	adds	r3, r3, r7
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4ac1      	ldr	r2, [pc, #772]	; (8003d1c <UART_SetConfig+0x338>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a22:	430b      	orrs	r3, r1
 8003a24:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4abc      	ldr	r2, [pc, #752]	; (8003d20 <UART_SetConfig+0x33c>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	0018      	movs	r0, r3
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	68d9      	ldr	r1, [r3, #12]
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	0003      	movs	r3, r0
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4ab6      	ldr	r2, [pc, #728]	; (8003d24 <UART_SetConfig+0x340>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <UART_SetConfig+0x80>
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4ab4      	ldr	r2, [pc, #720]	; (8003d28 <UART_SetConfig+0x344>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a60:	4313      	orrs	r3, r2
 8003a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	4ab0      	ldr	r2, [pc, #704]	; (8003d2c <UART_SetConfig+0x348>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	0019      	movs	r1, r3
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a76:	430b      	orrs	r3, r1
 8003a78:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	220f      	movs	r2, #15
 8003a82:	4393      	bics	r3, r2
 8003a84:	0018      	movs	r0, r3
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	0003      	movs	r3, r0
 8003a90:	430b      	orrs	r3, r1
 8003a92:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4aa5      	ldr	r2, [pc, #660]	; (8003d30 <UART_SetConfig+0x34c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d131      	bne.n	8003b02 <UART_SetConfig+0x11e>
 8003a9e:	4ba5      	ldr	r3, [pc, #660]	; (8003d34 <UART_SetConfig+0x350>)
 8003aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d01d      	beq.n	8003ae6 <UART_SetConfig+0x102>
 8003aaa:	d823      	bhi.n	8003af4 <UART_SetConfig+0x110>
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d00c      	beq.n	8003aca <UART_SetConfig+0xe6>
 8003ab0:	d820      	bhi.n	8003af4 <UART_SetConfig+0x110>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <UART_SetConfig+0xd8>
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d00e      	beq.n	8003ad8 <UART_SetConfig+0xf4>
 8003aba:	e01b      	b.n	8003af4 <UART_SetConfig+0x110>
 8003abc:	231b      	movs	r3, #27
 8003abe:	2220      	movs	r2, #32
 8003ac0:	189b      	adds	r3, r3, r2
 8003ac2:	19db      	adds	r3, r3, r7
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	701a      	strb	r2, [r3, #0]
 8003ac8:	e154      	b.n	8003d74 <UART_SetConfig+0x390>
 8003aca:	231b      	movs	r3, #27
 8003acc:	2220      	movs	r2, #32
 8003ace:	189b      	adds	r3, r3, r2
 8003ad0:	19db      	adds	r3, r3, r7
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	e14d      	b.n	8003d74 <UART_SetConfig+0x390>
 8003ad8:	231b      	movs	r3, #27
 8003ada:	2220      	movs	r2, #32
 8003adc:	189b      	adds	r3, r3, r2
 8003ade:	19db      	adds	r3, r3, r7
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	701a      	strb	r2, [r3, #0]
 8003ae4:	e146      	b.n	8003d74 <UART_SetConfig+0x390>
 8003ae6:	231b      	movs	r3, #27
 8003ae8:	2220      	movs	r2, #32
 8003aea:	189b      	adds	r3, r3, r2
 8003aec:	19db      	adds	r3, r3, r7
 8003aee:	2208      	movs	r2, #8
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	e13f      	b.n	8003d74 <UART_SetConfig+0x390>
 8003af4:	231b      	movs	r3, #27
 8003af6:	2220      	movs	r2, #32
 8003af8:	189b      	adds	r3, r3, r2
 8003afa:	19db      	adds	r3, r3, r7
 8003afc:	2210      	movs	r2, #16
 8003afe:	701a      	strb	r2, [r3, #0]
 8003b00:	e138      	b.n	8003d74 <UART_SetConfig+0x390>
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a8c      	ldr	r2, [pc, #560]	; (8003d38 <UART_SetConfig+0x354>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d131      	bne.n	8003b70 <UART_SetConfig+0x18c>
 8003b0c:	4b89      	ldr	r3, [pc, #548]	; (8003d34 <UART_SetConfig+0x350>)
 8003b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b10:	220c      	movs	r2, #12
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b0c      	cmp	r3, #12
 8003b16:	d01d      	beq.n	8003b54 <UART_SetConfig+0x170>
 8003b18:	d823      	bhi.n	8003b62 <UART_SetConfig+0x17e>
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d00c      	beq.n	8003b38 <UART_SetConfig+0x154>
 8003b1e:	d820      	bhi.n	8003b62 <UART_SetConfig+0x17e>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <UART_SetConfig+0x146>
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d00e      	beq.n	8003b46 <UART_SetConfig+0x162>
 8003b28:	e01b      	b.n	8003b62 <UART_SetConfig+0x17e>
 8003b2a:	231b      	movs	r3, #27
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	189b      	adds	r3, r3, r2
 8003b30:	19db      	adds	r3, r3, r7
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
 8003b36:	e11d      	b.n	8003d74 <UART_SetConfig+0x390>
 8003b38:	231b      	movs	r3, #27
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	189b      	adds	r3, r3, r2
 8003b3e:	19db      	adds	r3, r3, r7
 8003b40:	2202      	movs	r2, #2
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	e116      	b.n	8003d74 <UART_SetConfig+0x390>
 8003b46:	231b      	movs	r3, #27
 8003b48:	2220      	movs	r2, #32
 8003b4a:	189b      	adds	r3, r3, r2
 8003b4c:	19db      	adds	r3, r3, r7
 8003b4e:	2204      	movs	r2, #4
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	e10f      	b.n	8003d74 <UART_SetConfig+0x390>
 8003b54:	231b      	movs	r3, #27
 8003b56:	2220      	movs	r2, #32
 8003b58:	189b      	adds	r3, r3, r2
 8003b5a:	19db      	adds	r3, r3, r7
 8003b5c:	2208      	movs	r2, #8
 8003b5e:	701a      	strb	r2, [r3, #0]
 8003b60:	e108      	b.n	8003d74 <UART_SetConfig+0x390>
 8003b62:	231b      	movs	r3, #27
 8003b64:	2220      	movs	r2, #32
 8003b66:	189b      	adds	r3, r3, r2
 8003b68:	19db      	adds	r3, r3, r7
 8003b6a:	2210      	movs	r2, #16
 8003b6c:	701a      	strb	r2, [r3, #0]
 8003b6e:	e101      	b.n	8003d74 <UART_SetConfig+0x390>
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a71      	ldr	r2, [pc, #452]	; (8003d3c <UART_SetConfig+0x358>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d131      	bne.n	8003bde <UART_SetConfig+0x1fa>
 8003b7a:	4b6e      	ldr	r3, [pc, #440]	; (8003d34 <UART_SetConfig+0x350>)
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	2230      	movs	r2, #48	; 0x30
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b30      	cmp	r3, #48	; 0x30
 8003b84:	d01d      	beq.n	8003bc2 <UART_SetConfig+0x1de>
 8003b86:	d823      	bhi.n	8003bd0 <UART_SetConfig+0x1ec>
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	d00c      	beq.n	8003ba6 <UART_SetConfig+0x1c2>
 8003b8c:	d820      	bhi.n	8003bd0 <UART_SetConfig+0x1ec>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <UART_SetConfig+0x1b4>
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d00e      	beq.n	8003bb4 <UART_SetConfig+0x1d0>
 8003b96:	e01b      	b.n	8003bd0 <UART_SetConfig+0x1ec>
 8003b98:	231b      	movs	r3, #27
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	189b      	adds	r3, r3, r2
 8003b9e:	19db      	adds	r3, r3, r7
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	e0e6      	b.n	8003d74 <UART_SetConfig+0x390>
 8003ba6:	231b      	movs	r3, #27
 8003ba8:	2220      	movs	r2, #32
 8003baa:	189b      	adds	r3, r3, r2
 8003bac:	19db      	adds	r3, r3, r7
 8003bae:	2202      	movs	r2, #2
 8003bb0:	701a      	strb	r2, [r3, #0]
 8003bb2:	e0df      	b.n	8003d74 <UART_SetConfig+0x390>
 8003bb4:	231b      	movs	r3, #27
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	189b      	adds	r3, r3, r2
 8003bba:	19db      	adds	r3, r3, r7
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	e0d8      	b.n	8003d74 <UART_SetConfig+0x390>
 8003bc2:	231b      	movs	r3, #27
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	189b      	adds	r3, r3, r2
 8003bc8:	19db      	adds	r3, r3, r7
 8003bca:	2208      	movs	r2, #8
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	e0d1      	b.n	8003d74 <UART_SetConfig+0x390>
 8003bd0:	231b      	movs	r3, #27
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	189b      	adds	r3, r3, r2
 8003bd6:	19db      	adds	r3, r3, r7
 8003bd8:	2210      	movs	r2, #16
 8003bda:	701a      	strb	r2, [r3, #0]
 8003bdc:	e0ca      	b.n	8003d74 <UART_SetConfig+0x390>
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a57      	ldr	r2, [pc, #348]	; (8003d40 <UART_SetConfig+0x35c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d106      	bne.n	8003bf6 <UART_SetConfig+0x212>
 8003be8:	231b      	movs	r3, #27
 8003bea:	2220      	movs	r2, #32
 8003bec:	189b      	adds	r3, r3, r2
 8003bee:	19db      	adds	r3, r3, r7
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	e0be      	b.n	8003d74 <UART_SetConfig+0x390>
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a52      	ldr	r2, [pc, #328]	; (8003d44 <UART_SetConfig+0x360>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d106      	bne.n	8003c0e <UART_SetConfig+0x22a>
 8003c00:	231b      	movs	r3, #27
 8003c02:	2220      	movs	r2, #32
 8003c04:	189b      	adds	r3, r3, r2
 8003c06:	19db      	adds	r3, r3, r7
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]
 8003c0c:	e0b2      	b.n	8003d74 <UART_SetConfig+0x390>
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a4d      	ldr	r2, [pc, #308]	; (8003d48 <UART_SetConfig+0x364>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d106      	bne.n	8003c26 <UART_SetConfig+0x242>
 8003c18:	231b      	movs	r3, #27
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	189b      	adds	r3, r3, r2
 8003c1e:	19db      	adds	r3, r3, r7
 8003c20:	2200      	movs	r2, #0
 8003c22:	701a      	strb	r2, [r3, #0]
 8003c24:	e0a6      	b.n	8003d74 <UART_SetConfig+0x390>
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a3e      	ldr	r2, [pc, #248]	; (8003d24 <UART_SetConfig+0x340>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d13e      	bne.n	8003cae <UART_SetConfig+0x2ca>
 8003c30:	4b40      	ldr	r3, [pc, #256]	; (8003d34 <UART_SetConfig+0x350>)
 8003c32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c34:	23c0      	movs	r3, #192	; 0xc0
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	4013      	ands	r3, r2
 8003c3a:	22c0      	movs	r2, #192	; 0xc0
 8003c3c:	0112      	lsls	r2, r2, #4
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d027      	beq.n	8003c92 <UART_SetConfig+0x2ae>
 8003c42:	22c0      	movs	r2, #192	; 0xc0
 8003c44:	0112      	lsls	r2, r2, #4
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d82a      	bhi.n	8003ca0 <UART_SetConfig+0x2bc>
 8003c4a:	2280      	movs	r2, #128	; 0x80
 8003c4c:	0112      	lsls	r2, r2, #4
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d011      	beq.n	8003c76 <UART_SetConfig+0x292>
 8003c52:	2280      	movs	r2, #128	; 0x80
 8003c54:	0112      	lsls	r2, r2, #4
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d822      	bhi.n	8003ca0 <UART_SetConfig+0x2bc>
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d004      	beq.n	8003c68 <UART_SetConfig+0x284>
 8003c5e:	2280      	movs	r2, #128	; 0x80
 8003c60:	00d2      	lsls	r2, r2, #3
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00e      	beq.n	8003c84 <UART_SetConfig+0x2a0>
 8003c66:	e01b      	b.n	8003ca0 <UART_SetConfig+0x2bc>
 8003c68:	231b      	movs	r3, #27
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	189b      	adds	r3, r3, r2
 8003c6e:	19db      	adds	r3, r3, r7
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
 8003c74:	e07e      	b.n	8003d74 <UART_SetConfig+0x390>
 8003c76:	231b      	movs	r3, #27
 8003c78:	2220      	movs	r2, #32
 8003c7a:	189b      	adds	r3, r3, r2
 8003c7c:	19db      	adds	r3, r3, r7
 8003c7e:	2202      	movs	r2, #2
 8003c80:	701a      	strb	r2, [r3, #0]
 8003c82:	e077      	b.n	8003d74 <UART_SetConfig+0x390>
 8003c84:	231b      	movs	r3, #27
 8003c86:	2220      	movs	r2, #32
 8003c88:	189b      	adds	r3, r3, r2
 8003c8a:	19db      	adds	r3, r3, r7
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	701a      	strb	r2, [r3, #0]
 8003c90:	e070      	b.n	8003d74 <UART_SetConfig+0x390>
 8003c92:	231b      	movs	r3, #27
 8003c94:	2220      	movs	r2, #32
 8003c96:	189b      	adds	r3, r3, r2
 8003c98:	19db      	adds	r3, r3, r7
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e069      	b.n	8003d74 <UART_SetConfig+0x390>
 8003ca0:	231b      	movs	r3, #27
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	189b      	adds	r3, r3, r2
 8003ca6:	19db      	adds	r3, r3, r7
 8003ca8:	2210      	movs	r2, #16
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	e062      	b.n	8003d74 <UART_SetConfig+0x390>
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1d      	ldr	r2, [pc, #116]	; (8003d28 <UART_SetConfig+0x344>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d157      	bne.n	8003d68 <UART_SetConfig+0x384>
 8003cb8:	4b1e      	ldr	r3, [pc, #120]	; (8003d34 <UART_SetConfig+0x350>)
 8003cba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cbc:	23c0      	movs	r3, #192	; 0xc0
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	22c0      	movs	r2, #192	; 0xc0
 8003cc4:	0092      	lsls	r2, r2, #2
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d040      	beq.n	8003d4c <UART_SetConfig+0x368>
 8003cca:	22c0      	movs	r2, #192	; 0xc0
 8003ccc:	0092      	lsls	r2, r2, #2
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d843      	bhi.n	8003d5a <UART_SetConfig+0x376>
 8003cd2:	2280      	movs	r2, #128	; 0x80
 8003cd4:	0092      	lsls	r2, r2, #2
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d011      	beq.n	8003cfe <UART_SetConfig+0x31a>
 8003cda:	2280      	movs	r2, #128	; 0x80
 8003cdc:	0092      	lsls	r2, r2, #2
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d83b      	bhi.n	8003d5a <UART_SetConfig+0x376>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d004      	beq.n	8003cf0 <UART_SetConfig+0x30c>
 8003ce6:	2280      	movs	r2, #128	; 0x80
 8003ce8:	0052      	lsls	r2, r2, #1
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00e      	beq.n	8003d0c <UART_SetConfig+0x328>
 8003cee:	e034      	b.n	8003d5a <UART_SetConfig+0x376>
 8003cf0:	231b      	movs	r3, #27
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	189b      	adds	r3, r3, r2
 8003cf6:	19db      	adds	r3, r3, r7
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
 8003cfc:	e03a      	b.n	8003d74 <UART_SetConfig+0x390>
 8003cfe:	231b      	movs	r3, #27
 8003d00:	2220      	movs	r2, #32
 8003d02:	189b      	adds	r3, r3, r2
 8003d04:	19db      	adds	r3, r3, r7
 8003d06:	2202      	movs	r2, #2
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	e033      	b.n	8003d74 <UART_SetConfig+0x390>
 8003d0c:	231b      	movs	r3, #27
 8003d0e:	2220      	movs	r2, #32
 8003d10:	189b      	adds	r3, r3, r2
 8003d12:	19db      	adds	r3, r3, r7
 8003d14:	2204      	movs	r2, #4
 8003d16:	701a      	strb	r2, [r3, #0]
 8003d18:	e02c      	b.n	8003d74 <UART_SetConfig+0x390>
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	cfff69f3 	.word	0xcfff69f3
 8003d20:	ffffcfff 	.word	0xffffcfff
 8003d24:	40008000 	.word	0x40008000
 8003d28:	40008400 	.word	0x40008400
 8003d2c:	11fff4ff 	.word	0x11fff4ff
 8003d30:	40013800 	.word	0x40013800
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40004400 	.word	0x40004400
 8003d3c:	40004800 	.word	0x40004800
 8003d40:	40004c00 	.word	0x40004c00
 8003d44:	40005000 	.word	0x40005000
 8003d48:	40013c00 	.word	0x40013c00
 8003d4c:	231b      	movs	r3, #27
 8003d4e:	2220      	movs	r2, #32
 8003d50:	189b      	adds	r3, r3, r2
 8003d52:	19db      	adds	r3, r3, r7
 8003d54:	2208      	movs	r2, #8
 8003d56:	701a      	strb	r2, [r3, #0]
 8003d58:	e00c      	b.n	8003d74 <UART_SetConfig+0x390>
 8003d5a:	231b      	movs	r3, #27
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	189b      	adds	r3, r3, r2
 8003d60:	19db      	adds	r3, r3, r7
 8003d62:	2210      	movs	r2, #16
 8003d64:	701a      	strb	r2, [r3, #0]
 8003d66:	e005      	b.n	8003d74 <UART_SetConfig+0x390>
 8003d68:	231b      	movs	r3, #27
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	189b      	adds	r3, r3, r2
 8003d6e:	19db      	adds	r3, r3, r7
 8003d70:	2210      	movs	r2, #16
 8003d72:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4ac1      	ldr	r2, [pc, #772]	; (8004080 <UART_SetConfig+0x69c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d005      	beq.n	8003d8a <UART_SetConfig+0x3a6>
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4ac0      	ldr	r2, [pc, #768]	; (8004084 <UART_SetConfig+0x6a0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d000      	beq.n	8003d8a <UART_SetConfig+0x3a6>
 8003d88:	e093      	b.n	8003eb2 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d8a:	231b      	movs	r3, #27
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	19db      	adds	r3, r3, r7
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d015      	beq.n	8003dc4 <UART_SetConfig+0x3e0>
 8003d98:	dc18      	bgt.n	8003dcc <UART_SetConfig+0x3e8>
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d00d      	beq.n	8003dba <UART_SetConfig+0x3d6>
 8003d9e:	dc15      	bgt.n	8003dcc <UART_SetConfig+0x3e8>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <UART_SetConfig+0x3c6>
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d005      	beq.n	8003db4 <UART_SetConfig+0x3d0>
 8003da8:	e010      	b.n	8003dcc <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003daa:	f7fe fb2b 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 8003dae:	0003      	movs	r3, r0
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003db2:	e014      	b.n	8003dde <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db4:	4bb4      	ldr	r3, [pc, #720]	; (8004088 <UART_SetConfig+0x6a4>)
 8003db6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003db8:	e011      	b.n	8003dde <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dba:	f7fe fa97 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003dc2:	e00c      	b.n	8003dde <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003dca:	e008      	b.n	8003dde <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003dd0:	231a      	movs	r3, #26
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	189b      	adds	r3, r3, r2
 8003dd6:	19db      	adds	r3, r3, r7
 8003dd8:	2201      	movs	r2, #1
 8003dda:	701a      	strb	r2, [r3, #0]
        break;
 8003ddc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d100      	bne.n	8003de6 <UART_SetConfig+0x402>
 8003de4:	e135      	b.n	8004052 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dea:	4ba8      	ldr	r3, [pc, #672]	; (800408c <UART_SetConfig+0x6a8>)
 8003dec:	0052      	lsls	r2, r2, #1
 8003dee:	5ad3      	ldrh	r3, [r2, r3]
 8003df0:	0019      	movs	r1, r3
 8003df2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003df4:	f7fc f98e 	bl	8000114 <__udivsi3>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	0013      	movs	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	189b      	adds	r3, r3, r2
 8003e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d305      	bcc.n	8003e18 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d906      	bls.n	8003e26 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003e18:	231a      	movs	r3, #26
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	189b      	adds	r3, r3, r2
 8003e1e:	19db      	adds	r3, r3, r7
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	e044      	b.n	8003eb0 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e32:	4b96      	ldr	r3, [pc, #600]	; (800408c <UART_SetConfig+0x6a8>)
 8003e34:	0052      	lsls	r2, r2, #1
 8003e36:	5ad3      	ldrh	r3, [r2, r3]
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	69b8      	ldr	r0, [r7, #24]
 8003e44:	69f9      	ldr	r1, [r7, #28]
 8003e46:	f7fc fadb 	bl	8000400 <__aeabi_uldivmod>
 8003e4a:	0002      	movs	r2, r0
 8003e4c:	000b      	movs	r3, r1
 8003e4e:	0e11      	lsrs	r1, r2, #24
 8003e50:	021d      	lsls	r5, r3, #8
 8003e52:	430d      	orrs	r5, r1
 8003e54:	0214      	lsls	r4, r2, #8
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	085b      	lsrs	r3, r3, #1
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	68b8      	ldr	r0, [r7, #8]
 8003e64:	68f9      	ldr	r1, [r7, #12]
 8003e66:	1900      	adds	r0, r0, r4
 8003e68:	4169      	adcs	r1, r5
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	2300      	movs	r3, #0
 8003e72:	607b      	str	r3, [r7, #4]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f7fc fac2 	bl	8000400 <__aeabi_uldivmod>
 8003e7c:	0002      	movs	r2, r0
 8003e7e:	000b      	movs	r3, r1
 8003e80:	0013      	movs	r3, r2
 8003e82:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e86:	23c0      	movs	r3, #192	; 0xc0
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d309      	bcc.n	8003ea2 <UART_SetConfig+0x4be>
 8003e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e90:	2380      	movs	r3, #128	; 0x80
 8003e92:	035b      	lsls	r3, r3, #13
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d204      	bcs.n	8003ea2 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e9e:	60da      	str	r2, [r3, #12]
 8003ea0:	e006      	b.n	8003eb0 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003ea2:	231a      	movs	r3, #26
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	189b      	adds	r3, r3, r2
 8003ea8:	19db      	adds	r3, r3, r7
 8003eaa:	2201      	movs	r2, #1
 8003eac:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003eae:	e0d0      	b.n	8004052 <UART_SetConfig+0x66e>
 8003eb0:	e0cf      	b.n	8004052 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	2380      	movs	r3, #128	; 0x80
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d000      	beq.n	8003ec0 <UART_SetConfig+0x4dc>
 8003ebe:	e070      	b.n	8003fa2 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003ec0:	231b      	movs	r3, #27
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	189b      	adds	r3, r3, r2
 8003ec6:	19db      	adds	r3, r3, r7
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d015      	beq.n	8003efa <UART_SetConfig+0x516>
 8003ece:	dc18      	bgt.n	8003f02 <UART_SetConfig+0x51e>
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d00d      	beq.n	8003ef0 <UART_SetConfig+0x50c>
 8003ed4:	dc15      	bgt.n	8003f02 <UART_SetConfig+0x51e>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <UART_SetConfig+0x4fc>
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d005      	beq.n	8003eea <UART_SetConfig+0x506>
 8003ede:	e010      	b.n	8003f02 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee0:	f7fe fa90 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 8003ee4:	0003      	movs	r3, r0
 8003ee6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ee8:	e014      	b.n	8003f14 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eea:	4b67      	ldr	r3, [pc, #412]	; (8004088 <UART_SetConfig+0x6a4>)
 8003eec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003eee:	e011      	b.n	8003f14 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ef0:	f7fe f9fc 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ef8:	e00c      	b.n	8003f14 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f00:	e008      	b.n	8003f14 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003f06:	231a      	movs	r3, #26
 8003f08:	2220      	movs	r2, #32
 8003f0a:	189b      	adds	r3, r3, r2
 8003f0c:	19db      	adds	r3, r3, r7
 8003f0e:	2201      	movs	r2, #1
 8003f10:	701a      	strb	r2, [r3, #0]
        break;
 8003f12:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d100      	bne.n	8003f1c <UART_SetConfig+0x538>
 8003f1a:	e09a      	b.n	8004052 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f20:	4b5a      	ldr	r3, [pc, #360]	; (800408c <UART_SetConfig+0x6a8>)
 8003f22:	0052      	lsls	r2, r2, #1
 8003f24:	5ad3      	ldrh	r3, [r2, r3]
 8003f26:	0019      	movs	r1, r3
 8003f28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f2a:	f7fc f8f3 	bl	8000114 <__udivsi3>
 8003f2e:	0003      	movs	r3, r0
 8003f30:	005a      	lsls	r2, r3, #1
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	18d2      	adds	r2, r2, r3
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	0019      	movs	r1, r3
 8003f40:	0010      	movs	r0, r2
 8003f42:	f7fc f8e7 	bl	8000114 <__udivsi3>
 8003f46:	0003      	movs	r3, r0
 8003f48:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	2b0f      	cmp	r3, #15
 8003f4e:	d921      	bls.n	8003f94 <UART_SetConfig+0x5b0>
 8003f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	025b      	lsls	r3, r3, #9
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d21c      	bcs.n	8003f94 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	200e      	movs	r0, #14
 8003f60:	2420      	movs	r4, #32
 8003f62:	1903      	adds	r3, r0, r4
 8003f64:	19db      	adds	r3, r3, r7
 8003f66:	210f      	movs	r1, #15
 8003f68:	438a      	bics	r2, r1
 8003f6a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	085b      	lsrs	r3, r3, #1
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2207      	movs	r2, #7
 8003f74:	4013      	ands	r3, r2
 8003f76:	b299      	uxth	r1, r3
 8003f78:	1903      	adds	r3, r0, r4
 8003f7a:	19db      	adds	r3, r3, r7
 8003f7c:	1902      	adds	r2, r0, r4
 8003f7e:	19d2      	adds	r2, r2, r7
 8003f80:	8812      	ldrh	r2, [r2, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	1902      	adds	r2, r0, r4
 8003f8c:	19d2      	adds	r2, r2, r7
 8003f8e:	8812      	ldrh	r2, [r2, #0]
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	e05e      	b.n	8004052 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003f94:	231a      	movs	r3, #26
 8003f96:	2220      	movs	r2, #32
 8003f98:	189b      	adds	r3, r3, r2
 8003f9a:	19db      	adds	r3, r3, r7
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	e057      	b.n	8004052 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fa2:	231b      	movs	r3, #27
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	189b      	adds	r3, r3, r2
 8003fa8:	19db      	adds	r3, r3, r7
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d015      	beq.n	8003fdc <UART_SetConfig+0x5f8>
 8003fb0:	dc18      	bgt.n	8003fe4 <UART_SetConfig+0x600>
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d00d      	beq.n	8003fd2 <UART_SetConfig+0x5ee>
 8003fb6:	dc15      	bgt.n	8003fe4 <UART_SetConfig+0x600>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <UART_SetConfig+0x5de>
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d005      	beq.n	8003fcc <UART_SetConfig+0x5e8>
 8003fc0:	e010      	b.n	8003fe4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc2:	f7fe fa1f 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 8003fc6:	0003      	movs	r3, r0
 8003fc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fca:	e014      	b.n	8003ff6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fcc:	4b2e      	ldr	r3, [pc, #184]	; (8004088 <UART_SetConfig+0x6a4>)
 8003fce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fd0:	e011      	b.n	8003ff6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd2:	f7fe f98b 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 8003fd6:	0003      	movs	r3, r0
 8003fd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fda:	e00c      	b.n	8003ff6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fe2:	e008      	b.n	8003ff6 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003fe8:	231a      	movs	r3, #26
 8003fea:	2220      	movs	r2, #32
 8003fec:	189b      	adds	r3, r3, r2
 8003fee:	19db      	adds	r3, r3, r7
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	701a      	strb	r2, [r3, #0]
        break;
 8003ff4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d02a      	beq.n	8004052 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004000:	4b22      	ldr	r3, [pc, #136]	; (800408c <UART_SetConfig+0x6a8>)
 8004002:	0052      	lsls	r2, r2, #1
 8004004:	5ad3      	ldrh	r3, [r2, r3]
 8004006:	0019      	movs	r1, r3
 8004008:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800400a:	f7fc f883 	bl	8000114 <__udivsi3>
 800400e:	0003      	movs	r3, r0
 8004010:	001a      	movs	r2, r3
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	18d2      	adds	r2, r2, r3
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	0019      	movs	r1, r3
 8004020:	0010      	movs	r0, r2
 8004022:	f7fc f877 	bl	8000114 <__udivsi3>
 8004026:	0003      	movs	r3, r0
 8004028:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	2b0f      	cmp	r3, #15
 800402e:	d90a      	bls.n	8004046 <UART_SetConfig+0x662>
 8004030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	025b      	lsls	r3, r3, #9
 8004036:	429a      	cmp	r2, r3
 8004038:	d205      	bcs.n	8004046 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403c:	b29a      	uxth	r2, r3
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	60da      	str	r2, [r3, #12]
 8004044:	e005      	b.n	8004052 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004046:	231a      	movs	r3, #26
 8004048:	2220      	movs	r2, #32
 800404a:	189b      	adds	r3, r3, r2
 800404c:	19db      	adds	r3, r3, r7
 800404e:	2201      	movs	r2, #1
 8004050:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	226a      	movs	r2, #106	; 0x6a
 8004056:	2101      	movs	r1, #1
 8004058:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	2268      	movs	r2, #104	; 0x68
 800405e:	2101      	movs	r1, #1
 8004060:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	2200      	movs	r2, #0
 8004066:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	2200      	movs	r2, #0
 800406c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800406e:	231a      	movs	r3, #26
 8004070:	2220      	movs	r2, #32
 8004072:	189b      	adds	r3, r3, r2
 8004074:	19db      	adds	r3, r3, r7
 8004076:	781b      	ldrb	r3, [r3, #0]
}
 8004078:	0018      	movs	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	b010      	add	sp, #64	; 0x40
 800407e:	bdb0      	pop	{r4, r5, r7, pc}
 8004080:	40008000 	.word	0x40008000
 8004084:	40008400 	.word	0x40008400
 8004088:	00f42400 	.word	0x00f42400
 800408c:	080048f8 	.word	0x080048f8

08004090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	2208      	movs	r2, #8
 800409e:	4013      	ands	r3, r2
 80040a0:	d00b      	beq.n	80040ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	4a4a      	ldr	r2, [pc, #296]	; (80041d4 <UART_AdvFeatureConfig+0x144>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	0019      	movs	r1, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	2201      	movs	r2, #1
 80040c0:	4013      	ands	r3, r2
 80040c2:	d00b      	beq.n	80040dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4a43      	ldr	r2, [pc, #268]	; (80041d8 <UART_AdvFeatureConfig+0x148>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	0019      	movs	r1, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	2202      	movs	r2, #2
 80040e2:	4013      	ands	r3, r2
 80040e4:	d00b      	beq.n	80040fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4a3b      	ldr	r2, [pc, #236]	; (80041dc <UART_AdvFeatureConfig+0x14c>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	0019      	movs	r1, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	2204      	movs	r2, #4
 8004104:	4013      	ands	r3, r2
 8004106:	d00b      	beq.n	8004120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	4a34      	ldr	r2, [pc, #208]	; (80041e0 <UART_AdvFeatureConfig+0x150>)
 8004110:	4013      	ands	r3, r2
 8004112:	0019      	movs	r1, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	2210      	movs	r2, #16
 8004126:	4013      	ands	r3, r2
 8004128:	d00b      	beq.n	8004142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a2c      	ldr	r2, [pc, #176]	; (80041e4 <UART_AdvFeatureConfig+0x154>)
 8004132:	4013      	ands	r3, r2
 8004134:	0019      	movs	r1, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	2220      	movs	r2, #32
 8004148:	4013      	ands	r3, r2
 800414a:	d00b      	beq.n	8004164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	4a25      	ldr	r2, [pc, #148]	; (80041e8 <UART_AdvFeatureConfig+0x158>)
 8004154:	4013      	ands	r3, r2
 8004156:	0019      	movs	r1, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004168:	2240      	movs	r2, #64	; 0x40
 800416a:	4013      	ands	r3, r2
 800416c:	d01d      	beq.n	80041aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4a1d      	ldr	r2, [pc, #116]	; (80041ec <UART_AdvFeatureConfig+0x15c>)
 8004176:	4013      	ands	r3, r2
 8004178:	0019      	movs	r1, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800418a:	2380      	movs	r3, #128	; 0x80
 800418c:	035b      	lsls	r3, r3, #13
 800418e:	429a      	cmp	r2, r3
 8004190:	d10b      	bne.n	80041aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4a15      	ldr	r2, [pc, #84]	; (80041f0 <UART_AdvFeatureConfig+0x160>)
 800419a:	4013      	ands	r3, r2
 800419c:	0019      	movs	r1, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	2280      	movs	r2, #128	; 0x80
 80041b0:	4013      	ands	r3, r2
 80041b2:	d00b      	beq.n	80041cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4a0e      	ldr	r2, [pc, #56]	; (80041f4 <UART_AdvFeatureConfig+0x164>)
 80041bc:	4013      	ands	r3, r2
 80041be:	0019      	movs	r1, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]
  }
}
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	46bd      	mov	sp, r7
 80041d0:	b002      	add	sp, #8
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	ffff7fff 	.word	0xffff7fff
 80041d8:	fffdffff 	.word	0xfffdffff
 80041dc:	fffeffff 	.word	0xfffeffff
 80041e0:	fffbffff 	.word	0xfffbffff
 80041e4:	ffffefff 	.word	0xffffefff
 80041e8:	ffffdfff 	.word	0xffffdfff
 80041ec:	ffefffff 	.word	0xffefffff
 80041f0:	ff9fffff 	.word	0xff9fffff
 80041f4:	fff7ffff 	.word	0xfff7ffff

080041f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b092      	sub	sp, #72	; 0x48
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2290      	movs	r2, #144	; 0x90
 8004204:	2100      	movs	r1, #0
 8004206:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004208:	f7fd f8e8 	bl	80013dc <HAL_GetTick>
 800420c:	0003      	movs	r3, r0
 800420e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2208      	movs	r2, #8
 8004218:	4013      	ands	r3, r2
 800421a:	2b08      	cmp	r3, #8
 800421c:	d12d      	bne.n	800427a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800421e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004220:	2280      	movs	r2, #128	; 0x80
 8004222:	0391      	lsls	r1, r2, #14
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4a47      	ldr	r2, [pc, #284]	; (8004344 <UART_CheckIdleState+0x14c>)
 8004228:	9200      	str	r2, [sp, #0]
 800422a:	2200      	movs	r2, #0
 800422c:	f000 f88e 	bl	800434c <UART_WaitOnFlagUntilTimeout>
 8004230:	1e03      	subs	r3, r0, #0
 8004232:	d022      	beq.n	800427a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004234:	f3ef 8310 	mrs	r3, PRIMASK
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800423c:	63bb      	str	r3, [r7, #56]	; 0x38
 800423e:	2301      	movs	r3, #1
 8004240:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004244:	f383 8810 	msr	PRIMASK, r3
}
 8004248:	46c0      	nop			; (mov r8, r8)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2180      	movs	r1, #128	; 0x80
 8004256:	438a      	bics	r2, r1
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004260:	f383 8810 	msr	PRIMASK, r3
}
 8004264:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2288      	movs	r2, #136	; 0x88
 800426a:	2120      	movs	r1, #32
 800426c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2284      	movs	r2, #132	; 0x84
 8004272:	2100      	movs	r1, #0
 8004274:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e060      	b.n	800433c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2204      	movs	r2, #4
 8004282:	4013      	ands	r3, r2
 8004284:	2b04      	cmp	r3, #4
 8004286:	d146      	bne.n	8004316 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428a:	2280      	movs	r2, #128	; 0x80
 800428c:	03d1      	lsls	r1, r2, #15
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	4a2c      	ldr	r2, [pc, #176]	; (8004344 <UART_CheckIdleState+0x14c>)
 8004292:	9200      	str	r2, [sp, #0]
 8004294:	2200      	movs	r2, #0
 8004296:	f000 f859 	bl	800434c <UART_WaitOnFlagUntilTimeout>
 800429a:	1e03      	subs	r3, r0, #0
 800429c:	d03b      	beq.n	8004316 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800429e:	f3ef 8310 	mrs	r3, PRIMASK
 80042a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80042a4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042a6:	637b      	str	r3, [r7, #52]	; 0x34
 80042a8:	2301      	movs	r3, #1
 80042aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f383 8810 	msr	PRIMASK, r3
}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4922      	ldr	r1, [pc, #136]	; (8004348 <UART_CheckIdleState+0x150>)
 80042c0:	400a      	ands	r2, r1
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f383 8810 	msr	PRIMASK, r3
}
 80042ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d0:	f3ef 8310 	mrs	r3, PRIMASK
 80042d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80042d6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d8:	633b      	str	r3, [r7, #48]	; 0x30
 80042da:	2301      	movs	r3, #1
 80042dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	f383 8810 	msr	PRIMASK, r3
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2101      	movs	r1, #1
 80042f2:	438a      	bics	r2, r1
 80042f4:	609a      	str	r2, [r3, #8]
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	f383 8810 	msr	PRIMASK, r3
}
 8004300:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	228c      	movs	r2, #140	; 0x8c
 8004306:	2120      	movs	r1, #32
 8004308:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2284      	movs	r2, #132	; 0x84
 800430e:	2100      	movs	r1, #0
 8004310:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e012      	b.n	800433c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2288      	movs	r2, #136	; 0x88
 800431a:	2120      	movs	r1, #32
 800431c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	228c      	movs	r2, #140	; 0x8c
 8004322:	2120      	movs	r1, #32
 8004324:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2284      	movs	r2, #132	; 0x84
 8004336:	2100      	movs	r1, #0
 8004338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	0018      	movs	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	b010      	add	sp, #64	; 0x40
 8004342:	bd80      	pop	{r7, pc}
 8004344:	01ffffff 	.word	0x01ffffff
 8004348:	fffffedf 	.word	0xfffffedf

0800434c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	1dfb      	adds	r3, r7, #7
 800435a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435c:	e051      	b.n	8004402 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	3301      	adds	r3, #1
 8004362:	d04e      	beq.n	8004402 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004364:	f7fd f83a 	bl	80013dc <HAL_GetTick>
 8004368:	0002      	movs	r2, r0
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e051      	b.n	8004422 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2204      	movs	r2, #4
 8004386:	4013      	ands	r3, r2
 8004388:	d03b      	beq.n	8004402 <UART_WaitOnFlagUntilTimeout+0xb6>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b80      	cmp	r3, #128	; 0x80
 800438e:	d038      	beq.n	8004402 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b40      	cmp	r3, #64	; 0x40
 8004394:	d035      	beq.n	8004402 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	2208      	movs	r2, #8
 800439e:	4013      	ands	r3, r2
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d111      	bne.n	80043c8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2208      	movs	r2, #8
 80043aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	0018      	movs	r0, r3
 80043b0:	f000 f83c 	bl	800442c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2290      	movs	r2, #144	; 0x90
 80043b8:	2108      	movs	r1, #8
 80043ba:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2284      	movs	r2, #132	; 0x84
 80043c0:	2100      	movs	r1, #0
 80043c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e02c      	b.n	8004422 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69da      	ldr	r2, [r3, #28]
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	401a      	ands	r2, r3
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	429a      	cmp	r2, r3
 80043da:	d112      	bne.n	8004402 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2280      	movs	r2, #128	; 0x80
 80043e2:	0112      	lsls	r2, r2, #4
 80043e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	0018      	movs	r0, r3
 80043ea:	f000 f81f 	bl	800442c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2290      	movs	r2, #144	; 0x90
 80043f2:	2120      	movs	r1, #32
 80043f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2284      	movs	r2, #132	; 0x84
 80043fa:	2100      	movs	r1, #0
 80043fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e00f      	b.n	8004422 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	4013      	ands	r3, r2
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	425a      	negs	r2, r3
 8004412:	4153      	adcs	r3, r2
 8004414:	b2db      	uxtb	r3, r3
 8004416:	001a      	movs	r2, r3
 8004418:	1dfb      	adds	r3, r7, #7
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d09e      	beq.n	800435e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	0018      	movs	r0, r3
 8004424:	46bd      	mov	sp, r7
 8004426:	b004      	add	sp, #16
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08e      	sub	sp, #56	; 0x38
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004434:	f3ef 8310 	mrs	r3, PRIMASK
 8004438:	617b      	str	r3, [r7, #20]
  return(result);
 800443a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800443c:	637b      	str	r3, [r7, #52]	; 0x34
 800443e:	2301      	movs	r3, #1
 8004440:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	f383 8810 	msr	PRIMASK, r3
}
 8004448:	46c0      	nop			; (mov r8, r8)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4926      	ldr	r1, [pc, #152]	; (80044f0 <UART_EndRxTransfer+0xc4>)
 8004456:	400a      	ands	r2, r1
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800445c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f383 8810 	msr	PRIMASK, r3
}
 8004464:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004466:	f3ef 8310 	mrs	r3, PRIMASK
 800446a:	623b      	str	r3, [r7, #32]
  return(result);
 800446c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800446e:	633b      	str	r3, [r7, #48]	; 0x30
 8004470:	2301      	movs	r3, #1
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	f383 8810 	msr	PRIMASK, r3
}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	491b      	ldr	r1, [pc, #108]	; (80044f4 <UART_EndRxTransfer+0xc8>)
 8004488:	400a      	ands	r2, r1
 800448a:	609a      	str	r2, [r3, #8]
 800448c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	f383 8810 	msr	PRIMASK, r3
}
 8004496:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d118      	bne.n	80044d2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a0:	f3ef 8310 	mrs	r3, PRIMASK
 80044a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80044a6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044aa:	2301      	movs	r3, #1
 80044ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f383 8810 	msr	PRIMASK, r3
}
 80044b4:	46c0      	nop			; (mov r8, r8)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2110      	movs	r1, #16
 80044c2:	438a      	bics	r2, r1
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f383 8810 	msr	PRIMASK, r3
}
 80044d0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	228c      	movs	r2, #140	; 0x8c
 80044d6:	2120      	movs	r1, #32
 80044d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b00e      	add	sp, #56	; 0x38
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	fffffedf 	.word	0xfffffedf
 80044f4:	effffffe 	.word	0xeffffffe

080044f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2284      	movs	r2, #132	; 0x84
 8004504:	5c9b      	ldrb	r3, [r3, r2]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_UARTEx_DisableFifoMode+0x16>
 800450a:	2302      	movs	r3, #2
 800450c:	e027      	b.n	800455e <HAL_UARTEx_DisableFifoMode+0x66>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2284      	movs	r2, #132	; 0x84
 8004512:	2101      	movs	r1, #1
 8004514:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2288      	movs	r2, #136	; 0x88
 800451a:	2124      	movs	r1, #36	; 0x24
 800451c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2101      	movs	r1, #1
 8004532:	438a      	bics	r2, r1
 8004534:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4a0b      	ldr	r2, [pc, #44]	; (8004568 <HAL_UARTEx_DisableFifoMode+0x70>)
 800453a:	4013      	ands	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2288      	movs	r2, #136	; 0x88
 8004550:	2120      	movs	r1, #32
 8004552:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2284      	movs	r2, #132	; 0x84
 8004558:	2100      	movs	r1, #0
 800455a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	0018      	movs	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	b004      	add	sp, #16
 8004564:	bd80      	pop	{r7, pc}
 8004566:	46c0      	nop			; (mov r8, r8)
 8004568:	dfffffff 	.word	0xdfffffff

0800456c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2284      	movs	r2, #132	; 0x84
 800457a:	5c9b      	ldrb	r3, [r3, r2]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004580:	2302      	movs	r3, #2
 8004582:	e02e      	b.n	80045e2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2284      	movs	r2, #132	; 0x84
 8004588:	2101      	movs	r1, #1
 800458a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2288      	movs	r2, #136	; 0x88
 8004590:	2124      	movs	r1, #36	; 0x24
 8004592:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2101      	movs	r1, #1
 80045a8:	438a      	bics	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	08d9      	lsrs	r1, r3, #3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	0018      	movs	r0, r3
 80045c4:	f000 f854 	bl	8004670 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2288      	movs	r2, #136	; 0x88
 80045d4:	2120      	movs	r1, #32
 80045d6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2284      	movs	r2, #132	; 0x84
 80045dc:	2100      	movs	r1, #0
 80045de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	0018      	movs	r0, r3
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b004      	add	sp, #16
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2284      	movs	r2, #132	; 0x84
 80045fa:	5c9b      	ldrb	r3, [r3, r2]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004600:	2302      	movs	r3, #2
 8004602:	e02f      	b.n	8004664 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2284      	movs	r2, #132	; 0x84
 8004608:	2101      	movs	r1, #1
 800460a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2288      	movs	r2, #136	; 0x88
 8004610:	2124      	movs	r1, #36	; 0x24
 8004612:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2101      	movs	r1, #1
 8004628:	438a      	bics	r2, r1
 800462a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	4a0e      	ldr	r2, [pc, #56]	; (800466c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004634:	4013      	ands	r3, r2
 8004636:	0019      	movs	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	0018      	movs	r0, r3
 8004646:	f000 f813 	bl	8004670 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2288      	movs	r2, #136	; 0x88
 8004656:	2120      	movs	r1, #32
 8004658:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2284      	movs	r2, #132	; 0x84
 800465e:	2100      	movs	r1, #0
 8004660:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	0018      	movs	r0, r3
 8004666:	46bd      	mov	sp, r7
 8004668:	b004      	add	sp, #16
 800466a:	bd80      	pop	{r7, pc}
 800466c:	f1ffffff 	.word	0xf1ffffff

08004670 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800467c:	2b00      	cmp	r3, #0
 800467e:	d108      	bne.n	8004692 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	226a      	movs	r2, #106	; 0x6a
 8004684:	2101      	movs	r1, #1
 8004686:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2268      	movs	r2, #104	; 0x68
 800468c:	2101      	movs	r1, #1
 800468e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004690:	e043      	b.n	800471a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004692:	260f      	movs	r6, #15
 8004694:	19bb      	adds	r3, r7, r6
 8004696:	2208      	movs	r2, #8
 8004698:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800469a:	200e      	movs	r0, #14
 800469c:	183b      	adds	r3, r7, r0
 800469e:	2208      	movs	r2, #8
 80046a0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	0e5b      	lsrs	r3, r3, #25
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	240d      	movs	r4, #13
 80046ae:	193b      	adds	r3, r7, r4
 80046b0:	2107      	movs	r1, #7
 80046b2:	400a      	ands	r2, r1
 80046b4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	0f5b      	lsrs	r3, r3, #29
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	250c      	movs	r5, #12
 80046c2:	197b      	adds	r3, r7, r5
 80046c4:	2107      	movs	r1, #7
 80046c6:	400a      	ands	r2, r1
 80046c8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046ca:	183b      	adds	r3, r7, r0
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	197a      	adds	r2, r7, r5
 80046d0:	7812      	ldrb	r2, [r2, #0]
 80046d2:	4914      	ldr	r1, [pc, #80]	; (8004724 <UARTEx_SetNbDataToProcess+0xb4>)
 80046d4:	5c8a      	ldrb	r2, [r1, r2]
 80046d6:	435a      	muls	r2, r3
 80046d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80046da:	197b      	adds	r3, r7, r5
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	4a12      	ldr	r2, [pc, #72]	; (8004728 <UARTEx_SetNbDataToProcess+0xb8>)
 80046e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046e2:	0019      	movs	r1, r3
 80046e4:	f7fb fda0 	bl	8000228 <__divsi3>
 80046e8:	0003      	movs	r3, r0
 80046ea:	b299      	uxth	r1, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	226a      	movs	r2, #106	; 0x6a
 80046f0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046f2:	19bb      	adds	r3, r7, r6
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	193a      	adds	r2, r7, r4
 80046f8:	7812      	ldrb	r2, [r2, #0]
 80046fa:	490a      	ldr	r1, [pc, #40]	; (8004724 <UARTEx_SetNbDataToProcess+0xb4>)
 80046fc:	5c8a      	ldrb	r2, [r1, r2]
 80046fe:	435a      	muls	r2, r3
 8004700:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004702:	193b      	adds	r3, r7, r4
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	4a08      	ldr	r2, [pc, #32]	; (8004728 <UARTEx_SetNbDataToProcess+0xb8>)
 8004708:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800470a:	0019      	movs	r1, r3
 800470c:	f7fb fd8c 	bl	8000228 <__divsi3>
 8004710:	0003      	movs	r3, r0
 8004712:	b299      	uxth	r1, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2268      	movs	r2, #104	; 0x68
 8004718:	5299      	strh	r1, [r3, r2]
}
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	46bd      	mov	sp, r7
 800471e:	b005      	add	sp, #20
 8004720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	08004910 	.word	0x08004910
 8004728:	08004918 	.word	0x08004918

0800472c <memset>:
 800472c:	0003      	movs	r3, r0
 800472e:	1882      	adds	r2, r0, r2
 8004730:	4293      	cmp	r3, r2
 8004732:	d100      	bne.n	8004736 <memset+0xa>
 8004734:	4770      	bx	lr
 8004736:	7019      	strb	r1, [r3, #0]
 8004738:	3301      	adds	r3, #1
 800473a:	e7f9      	b.n	8004730 <memset+0x4>

0800473c <__libc_init_array>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	2600      	movs	r6, #0
 8004740:	4c0c      	ldr	r4, [pc, #48]	; (8004774 <__libc_init_array+0x38>)
 8004742:	4d0d      	ldr	r5, [pc, #52]	; (8004778 <__libc_init_array+0x3c>)
 8004744:	1b64      	subs	r4, r4, r5
 8004746:	10a4      	asrs	r4, r4, #2
 8004748:	42a6      	cmp	r6, r4
 800474a:	d109      	bne.n	8004760 <__libc_init_array+0x24>
 800474c:	2600      	movs	r6, #0
 800474e:	f000 f883 	bl	8004858 <_init>
 8004752:	4c0a      	ldr	r4, [pc, #40]	; (800477c <__libc_init_array+0x40>)
 8004754:	4d0a      	ldr	r5, [pc, #40]	; (8004780 <__libc_init_array+0x44>)
 8004756:	1b64      	subs	r4, r4, r5
 8004758:	10a4      	asrs	r4, r4, #2
 800475a:	42a6      	cmp	r6, r4
 800475c:	d105      	bne.n	800476a <__libc_init_array+0x2e>
 800475e:	bd70      	pop	{r4, r5, r6, pc}
 8004760:	00b3      	lsls	r3, r6, #2
 8004762:	58eb      	ldr	r3, [r5, r3]
 8004764:	4798      	blx	r3
 8004766:	3601      	adds	r6, #1
 8004768:	e7ee      	b.n	8004748 <__libc_init_array+0xc>
 800476a:	00b3      	lsls	r3, r6, #2
 800476c:	58eb      	ldr	r3, [r5, r3]
 800476e:	4798      	blx	r3
 8004770:	3601      	adds	r6, #1
 8004772:	e7f2      	b.n	800475a <__libc_init_array+0x1e>
 8004774:	08004928 	.word	0x08004928
 8004778:	08004928 	.word	0x08004928
 800477c:	08004930 	.word	0x08004930
 8004780:	08004928 	.word	0x08004928

08004784 <__retarget_lock_acquire_recursive>:
 8004784:	4770      	bx	lr

08004786 <__retarget_lock_release_recursive>:
 8004786:	4770      	bx	lr

08004788 <register_fini>:
 8004788:	4b03      	ldr	r3, [pc, #12]	; (8004798 <register_fini+0x10>)
 800478a:	b510      	push	{r4, lr}
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <register_fini+0xe>
 8004790:	4802      	ldr	r0, [pc, #8]	; (800479c <register_fini+0x14>)
 8004792:	f000 f805 	bl	80047a0 <atexit>
 8004796:	bd10      	pop	{r4, pc}
 8004798:	00000000 	.word	0x00000000
 800479c:	080047b1 	.word	0x080047b1

080047a0 <atexit>:
 80047a0:	2300      	movs	r3, #0
 80047a2:	b510      	push	{r4, lr}
 80047a4:	0001      	movs	r1, r0
 80047a6:	001a      	movs	r2, r3
 80047a8:	0018      	movs	r0, r3
 80047aa:	f000 f815 	bl	80047d8 <__register_exitproc>
 80047ae:	bd10      	pop	{r4, pc}

080047b0 <__libc_fini_array>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	4c07      	ldr	r4, [pc, #28]	; (80047d0 <__libc_fini_array+0x20>)
 80047b4:	4d07      	ldr	r5, [pc, #28]	; (80047d4 <__libc_fini_array+0x24>)
 80047b6:	1b64      	subs	r4, r4, r5
 80047b8:	10a4      	asrs	r4, r4, #2
 80047ba:	2c00      	cmp	r4, #0
 80047bc:	d102      	bne.n	80047c4 <__libc_fini_array+0x14>
 80047be:	f000 f851 	bl	8004864 <_fini>
 80047c2:	bd70      	pop	{r4, r5, r6, pc}
 80047c4:	3c01      	subs	r4, #1
 80047c6:	00a3      	lsls	r3, r4, #2
 80047c8:	58eb      	ldr	r3, [r5, r3]
 80047ca:	4798      	blx	r3
 80047cc:	e7f5      	b.n	80047ba <__libc_fini_array+0xa>
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	08004934 	.word	0x08004934
 80047d4:	08004930 	.word	0x08004930

080047d8 <__register_exitproc>:
 80047d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047da:	4f1c      	ldr	r7, [pc, #112]	; (800484c <__register_exitproc+0x74>)
 80047dc:	0004      	movs	r4, r0
 80047de:	6838      	ldr	r0, [r7, #0]
 80047e0:	0016      	movs	r6, r2
 80047e2:	9301      	str	r3, [sp, #4]
 80047e4:	9100      	str	r1, [sp, #0]
 80047e6:	f7ff ffcd 	bl	8004784 <__retarget_lock_acquire_recursive>
 80047ea:	4a19      	ldr	r2, [pc, #100]	; (8004850 <__register_exitproc+0x78>)
 80047ec:	6813      	ldr	r3, [r2, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <__register_exitproc+0x1e>
 80047f2:	4b18      	ldr	r3, [pc, #96]	; (8004854 <__register_exitproc+0x7c>)
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	6838      	ldr	r0, [r7, #0]
 80047fa:	2a1f      	cmp	r2, #31
 80047fc:	dd04      	ble.n	8004808 <__register_exitproc+0x30>
 80047fe:	f7ff ffc2 	bl	8004786 <__retarget_lock_release_recursive>
 8004802:	2001      	movs	r0, #1
 8004804:	4240      	negs	r0, r0
 8004806:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004808:	2c00      	cmp	r4, #0
 800480a:	d014      	beq.n	8004836 <__register_exitproc+0x5e>
 800480c:	0091      	lsls	r1, r2, #2
 800480e:	1859      	adds	r1, r3, r1
 8004810:	000f      	movs	r7, r1
 8004812:	3788      	adds	r7, #136	; 0x88
 8004814:	603e      	str	r6, [r7, #0]
 8004816:	2701      	movs	r7, #1
 8004818:	001e      	movs	r6, r3
 800481a:	4097      	lsls	r7, r2
 800481c:	3685      	adds	r6, #133	; 0x85
 800481e:	36ff      	adds	r6, #255	; 0xff
 8004820:	6875      	ldr	r5, [r6, #4]
 8004822:	31fc      	adds	r1, #252	; 0xfc
 8004824:	433d      	orrs	r5, r7
 8004826:	6075      	str	r5, [r6, #4]
 8004828:	9d01      	ldr	r5, [sp, #4]
 800482a:	60cd      	str	r5, [r1, #12]
 800482c:	2c02      	cmp	r4, #2
 800482e:	d102      	bne.n	8004836 <__register_exitproc+0x5e>
 8004830:	68b1      	ldr	r1, [r6, #8]
 8004832:	4339      	orrs	r1, r7
 8004834:	60b1      	str	r1, [r6, #8]
 8004836:	1c51      	adds	r1, r2, #1
 8004838:	6059      	str	r1, [r3, #4]
 800483a:	3202      	adds	r2, #2
 800483c:	9900      	ldr	r1, [sp, #0]
 800483e:	0092      	lsls	r2, r2, #2
 8004840:	50d1      	str	r1, [r2, r3]
 8004842:	f7ff ffa0 	bl	8004786 <__retarget_lock_release_recursive>
 8004846:	2000      	movs	r0, #0
 8004848:	e7dd      	b.n	8004806 <__register_exitproc+0x2e>
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	20000010 	.word	0x20000010
 8004850:	20000364 	.word	0x20000364
 8004854:	20000368 	.word	0x20000368

08004858 <_init>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr

08004864 <_fini>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486a:	bc08      	pop	{r3}
 800486c:	469e      	mov	lr, r3
 800486e:	4770      	bx	lr
