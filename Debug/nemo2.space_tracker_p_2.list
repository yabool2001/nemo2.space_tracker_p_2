
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f590  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  0800f650  0800f650  0001f650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcec  0800fcec  000206c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fcec  0800fcec  0001fcec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fcf4  0800fcf4  000206c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fcf4  0800fcf4  0001fcf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fcfc  0800fcfc  0001fcfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c8  20000000  0800fd00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  200006c8  080103c8  000206c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d3c  080103c8  00020d3c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000206c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000206f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017895  00000000  00000000  00020733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000326a  00000000  00000000  00037fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0003b238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001124  00000000  00000000  0003c830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000205c0  00000000  00000000  0003d954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001adeb  00000000  00000000  0005df14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8bf2  00000000  00000000  00078cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069d0  00000000  00000000  001418f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001482c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006c8 	.word	0x200006c8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800f634 	.word	0x0800f634

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006cc 	.word	0x200006cc
 8000100:	0800f634 	.word	0x0800f634

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	0800f7b8 	.word	0x0800f7b8
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ac:	f001 f818 	bl	80035e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b0:	f000 f83e 	bl	8002630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b4:	f000 fad0 	bl	8002b58 <MX_GPIO_Init>
  MX_RTC_Init();
 80025b8:	f000 f890 	bl	80026dc <MX_RTC_Init>
  MX_TIM6_Init();
 80025bc:	f000 f970 	bl	80028a0 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c0:	f000 f930 	bl	8002824 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025c4:	f000 f9aa 	bl	800291c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025c8:	f000 f9f6 	bl	80029b8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025cc:	f000 fa42 	bl	8002a54 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d0:	f000 fa8e 	bl	8002af0 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  // System hello
  send_debug_logs ( hello ) ;
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <main+0x78>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0018      	movs	r0, r3
 80025da:	f000 fbc1 	bl	8002d60 <send_debug_logs>
  //HAL_UART_Transmit ( &HUART_DBG , (uint8_t*) hello , strlen ( hello ) , UART_TIMEOUT ) ;

  if ( !is_system_initialized () )
 80025de:	f000 fbef 	bl	8002dc0 <is_system_initialized>
 80025e2:	0003      	movs	r3, r0
 80025e4:	001a      	movs	r2, r3
 80025e6:	2301      	movs	r3, #1
 80025e8:	4053      	eors	r3, r2
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d016      	beq.n	800261e <main+0x76>
  {
	  my_tim_init () ;
 80025f0:	f000 fc70 	bl	8002ed4 <my_tim_init>
	  my_gnss_sw_on () ;
 80025f4:	f000 fc32 	bl	8002e5c <my_gnss_sw_on>
	  my_tim_start () ;
 80025f8:	f000 fc78 	bl	8002eec <my_tim_start>
	  my_gnss_get_utc ( &tim_seconds , get_utc_time_ths ) ;
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <main+0x7c>)
 80025fe:	881a      	ldrh	r2, [r3, #0]
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <main+0x80>)
 8002602:	0011      	movs	r1, r2
 8002604:	0018      	movs	r0, r3
 8002606:	f004 fc85 	bl	8006f14 <my_gnss_get_utc>
	  my_tim_stop () ;
 800260a:	f000 fc7f 	bl	8002f0c <my_tim_stop>
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800260e:	4b07      	ldr	r3, [pc, #28]	; (800262c <main+0x84>)
 8002610:	0018      	movs	r0, r3
 8002612:	f004 fd2d 	bl	8007070 <my_rtc_get_dt_s>
	  send_debug_logs ( rtc_dt_s ) ;
 8002616:	4b05      	ldr	r3, [pc, #20]	; (800262c <main+0x84>)
 8002618:	0018      	movs	r0, r3
 800261a:	f000 fba1 	bl	8002d60 <send_debug_logs>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800261e:	e7fe      	b.n	800261e <main+0x76>
 8002620:	20000000 	.word	0x20000000
 8002624:	20000004 	.word	0x20000004
 8002628:	20000a24 	.word	0x20000a24
 800262c:	20000a10 	.word	0x20000a10

08002630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b095      	sub	sp, #84	; 0x54
 8002634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002636:	2414      	movs	r4, #20
 8002638:	193b      	adds	r3, r7, r4
 800263a:	0018      	movs	r0, r3
 800263c:	233c      	movs	r3, #60	; 0x3c
 800263e:	001a      	movs	r2, r3
 8002640:	2100      	movs	r1, #0
 8002642:	f006 fac1 	bl	8008bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002646:	1d3b      	adds	r3, r7, #4
 8002648:	0018      	movs	r0, r3
 800264a:	2310      	movs	r3, #16
 800264c:	001a      	movs	r2, r3
 800264e:	2100      	movs	r1, #0
 8002650:	f006 faba 	bl	8008bc8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	0018      	movs	r0, r3
 800265a:	f001 fae9 	bl	8003c30 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800265e:	f001 fad9 	bl	8003c14 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <SystemClock_Config+0xa8>)
 8002664:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002666:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <SystemClock_Config+0xa8>)
 8002668:	2118      	movs	r1, #24
 800266a:	438a      	bics	r2, r1
 800266c:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800266e:	193b      	adds	r3, r7, r4
 8002670:	2206      	movs	r2, #6
 8002672:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002674:	193b      	adds	r3, r7, r4
 8002676:	2201      	movs	r2, #1
 8002678:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800267a:	193b      	adds	r3, r7, r4
 800267c:	2280      	movs	r2, #128	; 0x80
 800267e:	0052      	lsls	r2, r2, #1
 8002680:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002682:	193b      	adds	r3, r7, r4
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002688:	193b      	adds	r3, r7, r4
 800268a:	2240      	movs	r2, #64	; 0x40
 800268c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800268e:	193b      	adds	r3, r7, r4
 8002690:	2200      	movs	r2, #0
 8002692:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002694:	193b      	adds	r3, r7, r4
 8002696:	0018      	movs	r0, r3
 8002698:	f001 fb16 	bl	8003cc8 <HAL_RCC_OscConfig>
 800269c:	1e03      	subs	r3, r0, #0
 800269e:	d001      	beq.n	80026a4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80026a0:	f000 fc70 	bl	8002f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	2207      	movs	r2, #7
 80026a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	2200      	movs	r2, #0
 80026ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	2200      	movs	r2, #0
 80026ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	2100      	movs	r1, #0
 80026c0:	0018      	movs	r0, r3
 80026c2:	f001 fe61 	bl	8004388 <HAL_RCC_ClockConfig>
 80026c6:	1e03      	subs	r3, r0, #0
 80026c8:	d001      	beq.n	80026ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80026ca:	f000 fc5b 	bl	8002f84 <Error_Handler>
  }
}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b015      	add	sp, #84	; 0x54
 80026d4:	bd90      	pop	{r4, r7, pc}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	40021000 	.word	0x40021000

080026dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b090      	sub	sp, #64	; 0x40
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80026e2:	232c      	movs	r3, #44	; 0x2c
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	0018      	movs	r0, r3
 80026e8:	2314      	movs	r3, #20
 80026ea:	001a      	movs	r2, r3
 80026ec:	2100      	movs	r1, #0
 80026ee:	f006 fa6b 	bl	8008bc8 <memset>
  RTC_DateTypeDef sDate = {0};
 80026f2:	2328      	movs	r3, #40	; 0x28
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80026fa:	003b      	movs	r3, r7
 80026fc:	0018      	movs	r0, r3
 80026fe:	2328      	movs	r3, #40	; 0x28
 8002700:	001a      	movs	r2, r3
 8002702:	2100      	movs	r1, #0
 8002704:	f006 fa60 	bl	8008bc8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002708:	4b44      	ldr	r3, [pc, #272]	; (800281c <MX_RTC_Init+0x140>)
 800270a:	4a45      	ldr	r2, [pc, #276]	; (8002820 <MX_RTC_Init+0x144>)
 800270c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800270e:	4b43      	ldr	r3, [pc, #268]	; (800281c <MX_RTC_Init+0x140>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002714:	4b41      	ldr	r3, [pc, #260]	; (800281c <MX_RTC_Init+0x140>)
 8002716:	227f      	movs	r2, #127	; 0x7f
 8002718:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800271a:	4b40      	ldr	r3, [pc, #256]	; (800281c <MX_RTC_Init+0x140>)
 800271c:	22ff      	movs	r2, #255	; 0xff
 800271e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002720:	4b3e      	ldr	r3, [pc, #248]	; (800281c <MX_RTC_Init+0x140>)
 8002722:	2200      	movs	r2, #0
 8002724:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002726:	4b3d      	ldr	r3, [pc, #244]	; (800281c <MX_RTC_Init+0x140>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800272c:	4b3b      	ldr	r3, [pc, #236]	; (800281c <MX_RTC_Init+0x140>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002732:	4b3a      	ldr	r3, [pc, #232]	; (800281c <MX_RTC_Init+0x140>)
 8002734:	2280      	movs	r2, #128	; 0x80
 8002736:	05d2      	lsls	r2, r2, #23
 8002738:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800273a:	4b38      	ldr	r3, [pc, #224]	; (800281c <MX_RTC_Init+0x140>)
 800273c:	2200      	movs	r2, #0
 800273e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002740:	4b36      	ldr	r3, [pc, #216]	; (800281c <MX_RTC_Init+0x140>)
 8002742:	0018      	movs	r0, r3
 8002744:	f002 fa06 	bl	8004b54 <HAL_RTC_Init>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	d001      	beq.n	8002750 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 800274c:	f000 fc1a 	bl	8002f84 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	187b      	adds	r3, r7, r1
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002758:	187b      	adds	r3, r7, r1
 800275a:	2200      	movs	r2, #0
 800275c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800275e:	187b      	adds	r3, r7, r1
 8002760:	2200      	movs	r2, #0
 8002762:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002764:	187b      	adds	r3, r7, r1
 8002766:	2200      	movs	r2, #0
 8002768:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800276a:	187b      	adds	r3, r7, r1
 800276c:	2200      	movs	r2, #0
 800276e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002770:	187b      	adds	r3, r7, r1
 8002772:	2200      	movs	r2, #0
 8002774:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002776:	1879      	adds	r1, r7, r1
 8002778:	4b28      	ldr	r3, [pc, #160]	; (800281c <MX_RTC_Init+0x140>)
 800277a:	2201      	movs	r2, #1
 800277c:	0018      	movs	r0, r3
 800277e:	f002 fa8b 	bl	8004c98 <HAL_RTC_SetTime>
 8002782:	1e03      	subs	r3, r0, #0
 8002784:	d001      	beq.n	800278a <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002786:	f000 fbfd 	bl	8002f84 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800278a:	2128      	movs	r1, #40	; 0x28
 800278c:	187b      	adds	r3, r7, r1
 800278e:	2206      	movs	r2, #6
 8002790:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002792:	187b      	adds	r3, r7, r1
 8002794:	2201      	movs	r2, #1
 8002796:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002798:	187b      	adds	r3, r7, r1
 800279a:	2201      	movs	r2, #1
 800279c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800279e:	187b      	adds	r3, r7, r1
 80027a0:	2200      	movs	r2, #0
 80027a2:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80027a4:	1879      	adds	r1, r7, r1
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <MX_RTC_Init+0x140>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	0018      	movs	r0, r3
 80027ac:	f002 fb78 	bl	8004ea0 <HAL_RTC_SetDate>
 80027b0:	1e03      	subs	r3, r0, #0
 80027b2:	d001      	beq.n	80027b8 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80027b4:	f000 fbe6 	bl	8002f84 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80027b8:	003b      	movs	r3, r7
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80027be:	003b      	movs	r3, r7
 80027c0:	2200      	movs	r2, #0
 80027c2:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80027c4:	003b      	movs	r3, r7
 80027c6:	2200      	movs	r2, #0
 80027c8:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80027ca:	003b      	movs	r3, r7
 80027cc:	2200      	movs	r2, #0
 80027ce:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80027d0:	003b      	movs	r3, r7
 80027d2:	2200      	movs	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80027d6:	003b      	movs	r3, r7
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80027dc:	003b      	movs	r3, r7
 80027de:	2200      	movs	r2, #0
 80027e0:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80027e2:	003b      	movs	r3, r7
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80027e8:	003b      	movs	r3, r7
 80027ea:	2200      	movs	r2, #0
 80027ec:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80027ee:	003b      	movs	r3, r7
 80027f0:	2220      	movs	r2, #32
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80027f6:	003b      	movs	r3, r7
 80027f8:	2280      	movs	r2, #128	; 0x80
 80027fa:	0052      	lsls	r2, r2, #1
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80027fe:	0039      	movs	r1, r7
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <MX_RTC_Init+0x140>)
 8002802:	2201      	movs	r2, #1
 8002804:	0018      	movs	r0, r3
 8002806:	f002 fc2b 	bl	8005060 <HAL_RTC_SetAlarm_IT>
 800280a:	1e03      	subs	r3, r0, #0
 800280c:	d001      	beq.n	8002812 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 800280e:	f000 fbb9 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	46bd      	mov	sp, r7
 8002816:	b010      	add	sp, #64	; 0x40
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	200006e4 	.word	0x200006e4
 8002820:	40002800 	.word	0x40002800

08002824 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <MX_SPI1_Init+0x74>)
 800282a:	4a1c      	ldr	r2, [pc, #112]	; (800289c <MX_SPI1_Init+0x78>)
 800282c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800282e:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <MX_SPI1_Init+0x74>)
 8002830:	2282      	movs	r2, #130	; 0x82
 8002832:	0052      	lsls	r2, r2, #1
 8002834:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <MX_SPI1_Init+0x74>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800283c:	4b16      	ldr	r3, [pc, #88]	; (8002898 <MX_SPI1_Init+0x74>)
 800283e:	22e0      	movs	r2, #224	; 0xe0
 8002840:	00d2      	lsls	r2, r2, #3
 8002842:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002844:	4b14      	ldr	r3, [pc, #80]	; (8002898 <MX_SPI1_Init+0x74>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800284a:	4b13      	ldr	r3, [pc, #76]	; (8002898 <MX_SPI1_Init+0x74>)
 800284c:	2200      	movs	r2, #0
 800284e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <MX_SPI1_Init+0x74>)
 8002852:	2280      	movs	r2, #128	; 0x80
 8002854:	0092      	lsls	r2, r2, #2
 8002856:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <MX_SPI1_Init+0x74>)
 800285a:	2200      	movs	r2, #0
 800285c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <MX_SPI1_Init+0x74>)
 8002860:	2200      	movs	r2, #0
 8002862:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <MX_SPI1_Init+0x74>)
 8002866:	2200      	movs	r2, #0
 8002868:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <MX_SPI1_Init+0x74>)
 800286c:	2200      	movs	r2, #0
 800286e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <MX_SPI1_Init+0x74>)
 8002872:	2207      	movs	r2, #7
 8002874:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002876:	4b08      	ldr	r3, [pc, #32]	; (8002898 <MX_SPI1_Init+0x74>)
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <MX_SPI1_Init+0x74>)
 800287e:	2208      	movs	r2, #8
 8002880:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <MX_SPI1_Init+0x74>)
 8002884:	0018      	movs	r0, r3
 8002886:	f002 fed3 	bl	8005630 <HAL_SPI_Init>
 800288a:	1e03      	subs	r3, r0, #0
 800288c:	d001      	beq.n	8002892 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800288e:	f000 fb79 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000710 	.word	0x20000710
 800289c:	40013000 	.word	0x40013000

080028a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	0018      	movs	r0, r3
 80028aa:	230c      	movs	r3, #12
 80028ac:	001a      	movs	r2, r3
 80028ae:	2100      	movs	r1, #0
 80028b0:	f006 f98a 	bl	8008bc8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80028b4:	4b15      	ldr	r3, [pc, #84]	; (800290c <MX_TIM6_Init+0x6c>)
 80028b6:	4a16      	ldr	r2, [pc, #88]	; (8002910 <MX_TIM6_Init+0x70>)
 80028b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80028ba:	4b14      	ldr	r3, [pc, #80]	; (800290c <MX_TIM6_Init+0x6c>)
 80028bc:	4a15      	ldr	r2, [pc, #84]	; (8002914 <MX_TIM6_Init+0x74>)
 80028be:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <MX_TIM6_Init+0x6c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <MX_TIM6_Init+0x6c>)
 80028c8:	4a13      	ldr	r2, [pc, #76]	; (8002918 <MX_TIM6_Init+0x78>)
 80028ca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <MX_TIM6_Init+0x6c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <MX_TIM6_Init+0x6c>)
 80028d4:	0018      	movs	r0, r3
 80028d6:	f002 ff63 	bl	80057a0 <HAL_TIM_Base_Init>
 80028da:	1e03      	subs	r3, r0, #0
 80028dc:	d001      	beq.n	80028e2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80028de:	f000 fb51 	bl	8002f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028ee:	1d3a      	adds	r2, r7, #4
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <MX_TIM6_Init+0x6c>)
 80028f2:	0011      	movs	r1, r2
 80028f4:	0018      	movs	r0, r3
 80028f6:	f003 f9fb 	bl	8005cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80028fa:	1e03      	subs	r3, r0, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80028fe:	f000 fb41 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	46bd      	mov	sp, r7
 8002906:	b004      	add	sp, #16
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	20000774 	.word	0x20000774
 8002910:	40001000 	.word	0x40001000
 8002914:	00003e7f 	.word	0x00003e7f
 8002918:	000003e7 	.word	0x000003e7

0800291c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002920:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <MX_USART1_UART_Init+0x94>)
 8002922:	4a24      	ldr	r2, [pc, #144]	; (80029b4 <MX_USART1_UART_Init+0x98>)
 8002924:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002926:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <MX_USART1_UART_Init+0x94>)
 8002928:	22e1      	movs	r2, #225	; 0xe1
 800292a:	0252      	lsls	r2, r2, #9
 800292c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800292e:	4b20      	ldr	r3, [pc, #128]	; (80029b0 <MX_USART1_UART_Init+0x94>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002934:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <MX_USART1_UART_Init+0x94>)
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800293a:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <MX_USART1_UART_Init+0x94>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002940:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <MX_USART1_UART_Init+0x94>)
 8002942:	220c      	movs	r2, #12
 8002944:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002946:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <MX_USART1_UART_Init+0x94>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800294c:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <MX_USART1_UART_Init+0x94>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002952:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <MX_USART1_UART_Init+0x94>)
 8002954:	2200      	movs	r2, #0
 8002956:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002958:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <MX_USART1_UART_Init+0x94>)
 800295a:	2200      	movs	r2, #0
 800295c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800295e:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <MX_USART1_UART_Init+0x94>)
 8002960:	2200      	movs	r2, #0
 8002962:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <MX_USART1_UART_Init+0x94>)
 8002966:	0018      	movs	r0, r3
 8002968:	f003 fa50 	bl	8005e0c <HAL_UART_Init>
 800296c:	1e03      	subs	r3, r0, #0
 800296e:	d001      	beq.n	8002974 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002970:	f000 fb08 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002974:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <MX_USART1_UART_Init+0x94>)
 8002976:	2100      	movs	r1, #0
 8002978:	0018      	movs	r0, r3
 800297a:	f004 f9eb 	bl	8006d54 <HAL_UARTEx_SetTxFifoThreshold>
 800297e:	1e03      	subs	r3, r0, #0
 8002980:	d001      	beq.n	8002986 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002982:	f000 faff 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <MX_USART1_UART_Init+0x94>)
 8002988:	2100      	movs	r1, #0
 800298a:	0018      	movs	r0, r3
 800298c:	f004 fa22 	bl	8006dd4 <HAL_UARTEx_SetRxFifoThreshold>
 8002990:	1e03      	subs	r3, r0, #0
 8002992:	d001      	beq.n	8002998 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002994:	f000 faf6 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <MX_USART1_UART_Init+0x94>)
 800299a:	0018      	movs	r0, r3
 800299c:	f004 f9a0 	bl	8006ce0 <HAL_UARTEx_DisableFifoMode>
 80029a0:	1e03      	subs	r3, r0, #0
 80029a2:	d001      	beq.n	80029a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80029a4:	f000 faee 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029a8:	46c0      	nop			; (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	200007c0 	.word	0x200007c0
 80029b4:	40013800 	.word	0x40013800

080029b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029bc:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <MX_USART2_UART_Init+0x94>)
 80029be:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <MX_USART2_UART_Init+0x98>)
 80029c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <MX_USART2_UART_Init+0x94>)
 80029c4:	22e1      	movs	r2, #225	; 0xe1
 80029c6:	0292      	lsls	r2, r2, #10
 80029c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <MX_USART2_UART_Init+0x94>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029d0:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <MX_USART2_UART_Init+0x94>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <MX_USART2_UART_Init+0x94>)
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <MX_USART2_UART_Init+0x94>)
 80029de:	220c      	movs	r2, #12
 80029e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <MX_USART2_UART_Init+0x94>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e8:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <MX_USART2_UART_Init+0x94>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029ee:	4b17      	ldr	r3, [pc, #92]	; (8002a4c <MX_USART2_UART_Init+0x94>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029f4:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <MX_USART2_UART_Init+0x94>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <MX_USART2_UART_Init+0x94>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <MX_USART2_UART_Init+0x94>)
 8002a02:	0018      	movs	r0, r3
 8002a04:	f003 fa02 	bl	8005e0c <HAL_UART_Init>
 8002a08:	1e03      	subs	r3, r0, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002a0c:	f000 faba 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a10:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <MX_USART2_UART_Init+0x94>)
 8002a12:	2100      	movs	r1, #0
 8002a14:	0018      	movs	r0, r3
 8002a16:	f004 f99d 	bl	8006d54 <HAL_UARTEx_SetTxFifoThreshold>
 8002a1a:	1e03      	subs	r3, r0, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002a1e:	f000 fab1 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <MX_USART2_UART_Init+0x94>)
 8002a24:	2100      	movs	r1, #0
 8002a26:	0018      	movs	r0, r3
 8002a28:	f004 f9d4 	bl	8006dd4 <HAL_UARTEx_SetRxFifoThreshold>
 8002a2c:	1e03      	subs	r3, r0, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002a30:	f000 faa8 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <MX_USART2_UART_Init+0x94>)
 8002a36:	0018      	movs	r0, r3
 8002a38:	f004 f952 	bl	8006ce0 <HAL_UARTEx_DisableFifoMode>
 8002a3c:	1e03      	subs	r3, r0, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002a40:	f000 faa0 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a44:	46c0      	nop			; (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	20000854 	.word	0x20000854
 8002a50:	40004400 	.word	0x40004400

08002a54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a58:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <MX_USART3_UART_Init+0x94>)
 8002a5a:	4a24      	ldr	r2, [pc, #144]	; (8002aec <MX_USART3_UART_Init+0x98>)
 8002a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002a5e:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <MX_USART3_UART_Init+0x94>)
 8002a60:	2296      	movs	r2, #150	; 0x96
 8002a62:	0192      	lsls	r2, r2, #6
 8002a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <MX_USART3_UART_Init+0x94>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <MX_USART3_UART_Init+0x94>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a72:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <MX_USART3_UART_Init+0x94>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <MX_USART3_UART_Init+0x94>)
 8002a7a:	220c      	movs	r2, #12
 8002a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <MX_USART3_UART_Init+0x94>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a84:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <MX_USART3_UART_Init+0x94>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a8a:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <MX_USART3_UART_Init+0x94>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a90:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <MX_USART3_UART_Init+0x94>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a96:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <MX_USART3_UART_Init+0x94>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <MX_USART3_UART_Init+0x94>)
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f003 f9b4 	bl	8005e0c <HAL_UART_Init>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d001      	beq.n	8002aac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002aa8:	f000 fa6c 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aac:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <MX_USART3_UART_Init+0x94>)
 8002aae:	2100      	movs	r1, #0
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f004 f94f 	bl	8006d54 <HAL_UARTEx_SetTxFifoThreshold>
 8002ab6:	1e03      	subs	r3, r0, #0
 8002ab8:	d001      	beq.n	8002abe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002aba:	f000 fa63 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <MX_USART3_UART_Init+0x94>)
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f004 f986 	bl	8006dd4 <HAL_UARTEx_SetRxFifoThreshold>
 8002ac8:	1e03      	subs	r3, r0, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002acc:	f000 fa5a 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <MX_USART3_UART_Init+0x94>)
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f004 f904 	bl	8006ce0 <HAL_UARTEx_DisableFifoMode>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002adc:	f000 fa52 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	200008e8 	.word	0x200008e8
 8002aec:	40004800 	.word	0x40004800

08002af0 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002af4:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <MX_USART5_UART_Init+0x60>)
 8002af6:	4a17      	ldr	r2, [pc, #92]	; (8002b54 <MX_USART5_UART_Init+0x64>)
 8002af8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <MX_USART5_UART_Init+0x60>)
 8002afc:	22e1      	movs	r2, #225	; 0xe1
 8002afe:	0252      	lsls	r2, r2, #9
 8002b00:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <MX_USART5_UART_Init+0x60>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <MX_USART5_UART_Init+0x60>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <MX_USART5_UART_Init+0x60>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <MX_USART5_UART_Init+0x60>)
 8002b16:	220c      	movs	r2, #12
 8002b18:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <MX_USART5_UART_Init+0x60>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <MX_USART5_UART_Init+0x60>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b26:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <MX_USART5_UART_Init+0x60>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b2c:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <MX_USART5_UART_Init+0x60>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b32:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <MX_USART5_UART_Init+0x60>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <MX_USART5_UART_Init+0x60>)
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f003 f966 	bl	8005e0c <HAL_UART_Init>
 8002b40:	1e03      	subs	r3, r0, #0
 8002b42:	d001      	beq.n	8002b48 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002b44:	f000 fa1e 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	2000097c 	.word	0x2000097c
 8002b54:	40005000 	.word	0x40005000

08002b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b08b      	sub	sp, #44	; 0x2c
 8002b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5e:	2414      	movs	r4, #20
 8002b60:	193b      	adds	r3, r7, r4
 8002b62:	0018      	movs	r0, r3
 8002b64:	2314      	movs	r3, #20
 8002b66:	001a      	movs	r2, r3
 8002b68:	2100      	movs	r1, #0
 8002b6a:	f006 f82d 	bl	8008bc8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6e:	4b76      	ldr	r3, [pc, #472]	; (8002d48 <MX_GPIO_Init+0x1f0>)
 8002b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b72:	4b75      	ldr	r3, [pc, #468]	; (8002d48 <MX_GPIO_Init+0x1f0>)
 8002b74:	2104      	movs	r1, #4
 8002b76:	430a      	orrs	r2, r1
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34
 8002b7a:	4b73      	ldr	r3, [pc, #460]	; (8002d48 <MX_GPIO_Init+0x1f0>)
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	2204      	movs	r2, #4
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b86:	4b70      	ldr	r3, [pc, #448]	; (8002d48 <MX_GPIO_Init+0x1f0>)
 8002b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b8a:	4b6f      	ldr	r3, [pc, #444]	; (8002d48 <MX_GPIO_Init+0x1f0>)
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	635a      	str	r2, [r3, #52]	; 0x34
 8002b92:	4b6d      	ldr	r3, [pc, #436]	; (8002d48 <MX_GPIO_Init+0x1f0>)
 8002b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b96:	2201      	movs	r2, #1
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9e:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <MX_GPIO_Init+0x1f0>)
 8002ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba2:	4b69      	ldr	r3, [pc, #420]	; (8002d48 <MX_GPIO_Init+0x1f0>)
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8002baa:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <MX_GPIO_Init+0x1f0>)
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bae:	2202      	movs	r2, #2
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bb6:	4b64      	ldr	r3, [pc, #400]	; (8002d48 <MX_GPIO_Init+0x1f0>)
 8002bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bba:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <MX_GPIO_Init+0x1f0>)
 8002bbc:	2108      	movs	r1, #8
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc2:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <MX_GPIO_Init+0x1f0>)
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	4013      	ands	r3, r2
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002bce:	23a0      	movs	r3, #160	; 0xa0
 8002bd0:	05db      	lsls	r3, r3, #23
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2110      	movs	r1, #16
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f000 fffe 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002bdc:	495b      	ldr	r1, [pc, #364]	; (8002d4c <MX_GPIO_Init+0x1f4>)
 8002bde:	4b5c      	ldr	r3, [pc, #368]	; (8002d50 <MX_GPIO_Init+0x1f8>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 fff8 	bl	8003bd8 <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	4858      	ldr	r0, [pc, #352]	; (8002d50 <MX_GPIO_Init+0x1f8>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	f000 fff1 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8002bf6:	4b57      	ldr	r3, [pc, #348]	; (8002d54 <MX_GPIO_Init+0x1fc>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2103      	movs	r1, #3
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f000 ffeb 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8002c02:	193b      	adds	r3, r7, r4
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c08:	193b      	adds	r3, r7, r4
 8002c0a:	2288      	movs	r2, #136	; 0x88
 8002c0c:	0352      	lsls	r2, r2, #13
 8002c0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	193b      	adds	r3, r7, r4
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8002c16:	193a      	adds	r2, r7, r4
 8002c18:	23a0      	movs	r3, #160	; 0xa0
 8002c1a:	05db      	lsls	r3, r3, #23
 8002c1c:	0011      	movs	r1, r2
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f000 fe6e 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8002c24:	193b      	adds	r3, r7, r4
 8002c26:	2202      	movs	r2, #2
 8002c28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c2a:	193b      	adds	r3, r7, r4
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	193b      	adds	r3, r7, r4
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8002c36:	193a      	adds	r2, r7, r4
 8002c38:	23a0      	movs	r3, #160	; 0xa0
 8002c3a:	05db      	lsls	r3, r3, #23
 8002c3c:	0011      	movs	r1, r2
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f000 fe5e 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8002c44:	193b      	adds	r3, r7, r4
 8002c46:	2210      	movs	r2, #16
 8002c48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c4a:	193b      	adds	r3, r7, r4
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	193b      	adds	r3, r7, r4
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	193b      	adds	r3, r7, r4
 8002c58:	2200      	movs	r2, #0
 8002c5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002c5c:	193a      	adds	r2, r7, r4
 8002c5e:	23a0      	movs	r3, #160	; 0xa0
 8002c60:	05db      	lsls	r3, r3, #23
 8002c62:	0011      	movs	r1, r2
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 fe4b 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8002c6a:	193b      	adds	r3, r7, r4
 8002c6c:	4a3a      	ldr	r2, [pc, #232]	; (8002d58 <MX_GPIO_Init+0x200>)
 8002c6e:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c70:	193b      	adds	r3, r7, r4
 8002c72:	2201      	movs	r2, #1
 8002c74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	193b      	adds	r3, r7, r4
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7c:	193b      	adds	r3, r7, r4
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c82:	193b      	adds	r3, r7, r4
 8002c84:	4a32      	ldr	r2, [pc, #200]	; (8002d50 <MX_GPIO_Init+0x1f8>)
 8002c86:	0019      	movs	r1, r3
 8002c88:	0010      	movs	r0, r2
 8002c8a:	f000 fe39 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8002c8e:	0021      	movs	r1, r4
 8002c90:	187b      	adds	r3, r7, r1
 8002c92:	2224      	movs	r2, #36	; 0x24
 8002c94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	2288      	movs	r2, #136	; 0x88
 8002c9a:	0352      	lsls	r2, r2, #13
 8002c9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	187b      	adds	r3, r7, r1
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca4:	000c      	movs	r4, r1
 8002ca6:	187b      	adds	r3, r7, r1
 8002ca8:	4a29      	ldr	r2, [pc, #164]	; (8002d50 <MX_GPIO_Init+0x1f8>)
 8002caa:	0019      	movs	r1, r3
 8002cac:	0010      	movs	r0, r2
 8002cae:	f000 fe27 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8002cb2:	0021      	movs	r1, r4
 8002cb4:	187b      	adds	r3, r7, r1
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	0192      	lsls	r2, r2, #6
 8002cba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002cbc:	000c      	movs	r4, r1
 8002cbe:	193b      	adds	r3, r7, r4
 8002cc0:	2211      	movs	r2, #17
 8002cc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	193b      	adds	r3, r7, r4
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	193b      	adds	r3, r7, r4
 8002ccc:	2200      	movs	r2, #0
 8002cce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8002cd0:	193b      	adds	r3, r7, r4
 8002cd2:	4a1f      	ldr	r2, [pc, #124]	; (8002d50 <MX_GPIO_Init+0x1f8>)
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	0010      	movs	r0, r2
 8002cd8:	f000 fe12 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8002cdc:	193b      	adds	r3, r7, r4
 8002cde:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <MX_GPIO_Init+0x204>)
 8002ce0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ce2:	193b      	adds	r3, r7, r4
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	193b      	adds	r3, r7, r4
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cee:	193b      	adds	r3, r7, r4
 8002cf0:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <MX_GPIO_Init+0x1f8>)
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	0010      	movs	r0, r2
 8002cf6:	f000 fe03 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8002cfa:	193b      	adds	r3, r7, r4
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d00:	193b      	adds	r3, r7, r4
 8002d02:	2201      	movs	r2, #1
 8002d04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	193b      	adds	r3, r7, r4
 8002d08:	2200      	movs	r2, #0
 8002d0a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0c:	193b      	adds	r3, r7, r4
 8002d0e:	2200      	movs	r2, #0
 8002d10:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d12:	193b      	adds	r3, r7, r4
 8002d14:	4a0f      	ldr	r2, [pc, #60]	; (8002d54 <MX_GPIO_Init+0x1fc>)
 8002d16:	0019      	movs	r1, r3
 8002d18:	0010      	movs	r0, r2
 8002d1a:	f000 fdf1 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8002d1e:	0021      	movs	r1, r4
 8002d20:	187b      	adds	r3, r7, r1
 8002d22:	220c      	movs	r2, #12
 8002d24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d26:	187b      	adds	r3, r7, r1
 8002d28:	2200      	movs	r2, #0
 8002d2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	187b      	adds	r3, r7, r1
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d32:	187b      	adds	r3, r7, r1
 8002d34:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <MX_GPIO_Init+0x1fc>)
 8002d36:	0019      	movs	r1, r3
 8002d38:	0010      	movs	r0, r2
 8002d3a:	f000 fde1 	bl	8003900 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b00b      	add	sp, #44	; 0x2c
 8002d44:	bd90      	pop	{r4, r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	0000a403 	.word	0x0000a403
 8002d50:	50000400 	.word	0x50000400
 8002d54:	50000c00 	.word	0x50000c00
 8002d58:	00008c03 	.word	0x00008c03
 8002d5c:	00004040 	.word	0x00004040

08002d60 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f7fd f9ca 	bl	8000104 <strlen>
 8002d70:	0003      	movs	r3, r0
 8002d72:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2bfa      	cmp	r3, #250	; 0xfa
 8002d78:	d908      	bls.n	8002d8c <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002d7a:	23fa      	movs	r3, #250	; 0xfa
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	490d      	ldr	r1, [pc, #52]	; (8002db4 <send_debug_logs+0x54>)
 8002d80:	480d      	ldr	r0, [pc, #52]	; (8002db8 <send_debug_logs+0x58>)
 8002d82:	222a      	movs	r2, #42	; 0x2a
 8002d84:	f003 f898 	bl	8005eb8 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002d88:	23fa      	movs	r3, #250	; 0xfa
 8002d8a:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	23fa      	movs	r3, #250	; 0xfa
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4808      	ldr	r0, [pc, #32]	; (8002db8 <send_debug_logs+0x58>)
 8002d98:	f003 f88e 	bl	8005eb8 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002d9c:	23fa      	movs	r3, #250	; 0xfa
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4906      	ldr	r1, [pc, #24]	; (8002dbc <send_debug_logs+0x5c>)
 8002da2:	4805      	ldr	r0, [pc, #20]	; (8002db8 <send_debug_logs+0x58>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	f003 f887 	bl	8005eb8 <HAL_UART_Transmit>
}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b004      	add	sp, #16
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	0800f678 	.word	0x0800f678
 8002db8:	20000854 	.word	0x20000854
 8002dbc:	0800f6a4 	.word	0x0800f6a4

08002dc0 <is_system_initialized>:
// System functions
bool is_system_initialized ( void )
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
	// Nie próbuj robić nic z Astronode, bo nie wiesz czy nie trzeba go zainicjować restartem. Ogranicz się do samego systemu.
	uint16_t yyyy = my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002dc6:	1dbc      	adds	r4, r7, #6
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <is_system_initialized+0x34>)
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f004 f950 	bl	8007070 <my_rtc_get_dt_s>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt_s ) ;
 8002dd4:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <is_system_initialized+0x34>)
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f7ff ffc2 	bl	8002d60 <send_debug_logs>
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
 8002ddc:	1dbb      	adds	r3, r7, #6
 8002dde:	8819      	ldrh	r1, [r3, #0]
 8002de0:	23fd      	movs	r3, #253	; 0xfd
 8002de2:	00da      	lsls	r2, r3, #3
 8002de4:	2300      	movs	r3, #0
 8002de6:	4291      	cmp	r1, r2
 8002de8:	415b      	adcs	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
}
 8002dec:	0018      	movs	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b003      	add	sp, #12
 8002df2:	bd90      	pop	{r4, r7, pc}
 8002df4:	20000a10 	.word	0x20000a10

08002df8 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	0002      	movs	r2, r0
 8002e00:	1dfb      	adds	r3, r7, #7
 8002e02:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 8002e04:	1dfb      	adds	r3, r7, #7
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d10e      	bne.n	8002e2a <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 8002e0c:	2380      	movs	r3, #128	; 0x80
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	4811      	ldr	r0, [pc, #68]	; (8002e58 <my_ant_sw_pos+0x60>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	0019      	movs	r1, r3
 8002e16:	f000 fedf 	bl	8003bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	480e      	ldr	r0, [pc, #56]	; (8002e58 <my_ant_sw_pos+0x60>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	0019      	movs	r1, r3
 8002e24:	f000 fed8 	bl	8003bd8 <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8002e28:	e011      	b.n	8002e4e <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 8002e2a:	1dfb      	adds	r3, r7, #7
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d10d      	bne.n	8002e4e <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	4808      	ldr	r0, [pc, #32]	; (8002e58 <my_ant_sw_pos+0x60>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	f000 fecc 	bl	8003bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4804      	ldr	r0, [pc, #16]	; (8002e58 <my_ant_sw_pos+0x60>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	0019      	movs	r1, r3
 8002e4a:	f000 fec5 	bl	8003bd8 <HAL_GPIO_WritePin>
}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b002      	add	sp, #8
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	50000400 	.word	0x50000400

08002e5c <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 8002e60:	2001      	movs	r0, #1
 8002e62:	f7ff ffc9 	bl	8002df8 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	021b      	lsls	r3, r3, #8
 8002e6a:	4808      	ldr	r0, [pc, #32]	; (8002e8c <my_gnss_sw_on+0x30>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	0019      	movs	r1, r3
 8002e70:	f000 feb2 	bl	8003bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	019b      	lsls	r3, r3, #6
 8002e78:	4804      	ldr	r0, [pc, #16]	; (8002e8c <my_gnss_sw_on+0x30>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	f000 feab 	bl	8003bd8 <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 8002e82:	f7ff fe35 	bl	8002af0 <MX_USART5_UART_Init>
}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	50000400 	.word	0x50000400

08002e90 <my_gnss_receive_byte>:
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
	HAL_UART_DeInit ( &HUART_GNSS ) ;

}
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	000a      	movs	r2, r1
 8002e9a:	1cfb      	adds	r3, r7, #3
 8002e9c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 8002e9e:	23fa      	movs	r3, #250	; 0xfa
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4809      	ldr	r0, [pc, #36]	; (8002ecc <my_gnss_receive_byte+0x3c>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f003 f8aa 	bl	8006000 <HAL_UART_Receive>
	if ( verbose )
 8002eac:	1cfb      	adds	r3, r7, #3
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d006      	beq.n	8002ec2 <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 8002eb4:	23fa      	movs	r3, #250	; 0xfa
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4805      	ldr	r0, [pc, #20]	; (8002ed0 <my_gnss_receive_byte+0x40>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f002 fffb 	bl	8005eb8 <HAL_UART_Transmit>
}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b002      	add	sp, #8
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	2000097c 	.word	0x2000097c
 8002ed0:	20000854 	.word	0x20000854

08002ed4 <my_tim_init>:
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
}

// TIM operations
void my_tim_init ()
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <my_tim_init+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2202      	movs	r2, #2
 8002ede:	4252      	negs	r2, r2
 8002ee0:	611a      	str	r2, [r3, #16]
}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000774 	.word	0x20000774

08002eec <my_tim_start>:

void my_tim_start ()
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <my_tim_start+0x18>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 8002ef6:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <my_tim_start+0x1c>)
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f002 fca9 	bl	8005850 <HAL_TIM_Base_Start_IT>
}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20000a24 	.word	0x20000a24
 8002f08:	20000774 	.word	0x20000774

08002f0c <my_tim_stop>:

void my_tim_stop ()
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <my_tim_stop+0x14>)
 8002f12:	0018      	movs	r0, r3
 8002f14:	f002 fcfe 	bl	8005914 <HAL_TIM_Base_Stop_IT>
}
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	20000774 	.word	0x20000774

08002f24 <HAL_TIM_PeriodElapsedCallback>:
// *** CALBACKS

// TIM Callback

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	char m[20] = { 0 } ;
 8002f2c:	230c      	movs	r3, #12
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	3304      	adds	r3, #4
 8002f36:	2210      	movs	r2, #16
 8002f38:	2100      	movs	r1, #0
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f005 fe44 	bl	8008bc8 <memset>
	if ( htim->Instance == TIM6 )
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0c      	ldr	r2, [pc, #48]	; (8002f78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d111      	bne.n	8002f6e <HAL_TIM_PeriodElapsedCallback+0x4a>
	{
		tim_seconds++ ;
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002f54:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 8002f56:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002f58:	881a      	ldrh	r2, [r3, #0]
 8002f5a:	2396      	movs	r3, #150	; 0x96
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d905      	bls.n	8002f6e <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			send_debug_logs ( "main.c,HAL_TIM_PeriodElapsedCallback,HAL_NVIC_SystemReset" ) ;
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002f64:	0018      	movs	r0, r3
 8002f66:	f7ff fefb 	bl	8002d60 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 8002f6a:	f000 fcb8 	bl	80038de <HAL_NVIC_SystemReset>
		}
	}
}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b008      	add	sp, #32
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	40001000 	.word	0x40001000
 8002f7c:	20000a24 	.word	0x20000a24
 8002f80:	0800f6cc 	.word	0x0800f6cc

08002f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f88:	b672      	cpsid	i
}
 8002f8a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f8c:	e7fe      	b.n	8002f8c <Error_Handler+0x8>
	...

08002f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f96:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <HAL_MspInit+0x4c>)
 8002f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <HAL_MspInit+0x4c>)
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <HAL_MspInit+0x4c>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4013      	ands	r3, r2
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_MspInit+0x4c>)
 8002fb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <HAL_MspInit+0x4c>)
 8002fb4:	2180      	movs	r1, #128	; 0x80
 8002fb6:	0549      	lsls	r1, r1, #21
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <HAL_MspInit+0x4c>)
 8002fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	055b      	lsls	r3, r3, #21
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002fca:	23c0      	movs	r3, #192	; 0xc0
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f000 fb8c 	bl	80036ec <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b002      	add	sp, #8
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40021000 	.word	0x40021000

08002fe0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b097      	sub	sp, #92	; 0x5c
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fe8:	240c      	movs	r4, #12
 8002fea:	193b      	adds	r3, r7, r4
 8002fec:	0018      	movs	r0, r3
 8002fee:	234c      	movs	r3, #76	; 0x4c
 8002ff0:	001a      	movs	r2, r3
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	f005 fde8 	bl	8008bc8 <memset>
  if(hrtc->Instance==RTC)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a19      	ldr	r2, [pc, #100]	; (8003064 <HAL_RTC_MspInit+0x84>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d12c      	bne.n	800305c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003002:	193b      	adds	r3, r7, r4
 8003004:	2280      	movs	r2, #128	; 0x80
 8003006:	0292      	lsls	r2, r2, #10
 8003008:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800300a:	193b      	adds	r3, r7, r4
 800300c:	2280      	movs	r2, #128	; 0x80
 800300e:	0052      	lsls	r2, r2, #1
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003012:	193b      	adds	r3, r7, r4
 8003014:	0018      	movs	r0, r3
 8003016:	f001 fb61 	bl	80046dc <HAL_RCCEx_PeriphCLKConfig>
 800301a:	1e03      	subs	r3, r0, #0
 800301c:	d001      	beq.n	8003022 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800301e:	f7ff ffb1 	bl	8002f84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003022:	4b11      	ldr	r3, [pc, #68]	; (8003068 <HAL_RTC_MspInit+0x88>)
 8003024:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <HAL_RTC_MspInit+0x88>)
 8003028:	2180      	movs	r1, #128	; 0x80
 800302a:	0209      	lsls	r1, r1, #8
 800302c:	430a      	orrs	r2, r1
 800302e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003030:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <HAL_RTC_MspInit+0x88>)
 8003032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <HAL_RTC_MspInit+0x88>)
 8003036:	2180      	movs	r1, #128	; 0x80
 8003038:	00c9      	lsls	r1, r1, #3
 800303a:	430a      	orrs	r2, r1
 800303c:	63da      	str	r2, [r3, #60]	; 0x3c
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_RTC_MspInit+0x88>)
 8003040:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4013      	ands	r3, r2
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 800304c:	2200      	movs	r2, #0
 800304e:	2103      	movs	r1, #3
 8003050:	2002      	movs	r0, #2
 8003052:	f000 fc1f 	bl	8003894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8003056:	2002      	movs	r0, #2
 8003058:	f000 fc31 	bl	80038be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	b017      	add	sp, #92	; 0x5c
 8003062:	bd90      	pop	{r4, r7, pc}
 8003064:	40002800 	.word	0x40002800
 8003068:	40021000 	.word	0x40021000

0800306c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b08b      	sub	sp, #44	; 0x2c
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003074:	2414      	movs	r4, #20
 8003076:	193b      	adds	r3, r7, r4
 8003078:	0018      	movs	r0, r3
 800307a:	2314      	movs	r3, #20
 800307c:	001a      	movs	r2, r3
 800307e:	2100      	movs	r1, #0
 8003080:	f005 fda2 	bl	8008bc8 <memset>
  if(hspi->Instance==SPI1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1b      	ldr	r2, [pc, #108]	; (80030f8 <HAL_SPI_MspInit+0x8c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d130      	bne.n	80030f0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800308e:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <HAL_SPI_MspInit+0x90>)
 8003090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003092:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <HAL_SPI_MspInit+0x90>)
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	0149      	lsls	r1, r1, #5
 8003098:	430a      	orrs	r2, r1
 800309a:	641a      	str	r2, [r3, #64]	; 0x40
 800309c:	4b17      	ldr	r3, [pc, #92]	; (80030fc <HAL_SPI_MspInit+0x90>)
 800309e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	015b      	lsls	r3, r3, #5
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030aa:	4b14      	ldr	r3, [pc, #80]	; (80030fc <HAL_SPI_MspInit+0x90>)
 80030ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_SPI_MspInit+0x90>)
 80030b0:	2101      	movs	r1, #1
 80030b2:	430a      	orrs	r2, r1
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_SPI_MspInit+0x90>)
 80030b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ba:	2201      	movs	r2, #1
 80030bc:	4013      	ands	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 80030c2:	0021      	movs	r1, r4
 80030c4:	187b      	adds	r3, r7, r1
 80030c6:	22e0      	movs	r2, #224	; 0xe0
 80030c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ca:	187b      	adds	r3, r7, r1
 80030cc:	2202      	movs	r2, #2
 80030ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	187b      	adds	r3, r7, r1
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	187b      	adds	r3, r7, r1
 80030d8:	2200      	movs	r2, #0
 80030da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80030dc:	187b      	adds	r3, r7, r1
 80030de:	2200      	movs	r2, #0
 80030e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e2:	187a      	adds	r2, r7, r1
 80030e4:	23a0      	movs	r3, #160	; 0xa0
 80030e6:	05db      	lsls	r3, r3, #23
 80030e8:	0011      	movs	r1, r2
 80030ea:	0018      	movs	r0, r3
 80030ec:	f000 fc08 	bl	8003900 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80030f0:	46c0      	nop			; (mov r8, r8)
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b00b      	add	sp, #44	; 0x2c
 80030f6:	bd90      	pop	{r4, r7, pc}
 80030f8:	40013000 	.word	0x40013000
 80030fc:	40021000 	.word	0x40021000

08003100 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0d      	ldr	r2, [pc, #52]	; (8003144 <HAL_TIM_Base_MspInit+0x44>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d113      	bne.n	800313a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003112:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <HAL_TIM_Base_MspInit+0x48>)
 8003114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003116:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <HAL_TIM_Base_MspInit+0x48>)
 8003118:	2110      	movs	r1, #16
 800311a:	430a      	orrs	r2, r1
 800311c:	63da      	str	r2, [r3, #60]	; 0x3c
 800311e:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HAL_TIM_Base_MspInit+0x48>)
 8003120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003122:	2210      	movs	r2, #16
 8003124:	4013      	ands	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	2102      	movs	r1, #2
 800312e:	2011      	movs	r0, #17
 8003130:	f000 fbb0 	bl	8003894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003134:	2011      	movs	r0, #17
 8003136:	f000 fbc2 	bl	80038be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	46bd      	mov	sp, r7
 800313e:	b004      	add	sp, #16
 8003140:	bd80      	pop	{r7, pc}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	40001000 	.word	0x40001000
 8003148:	40021000 	.word	0x40021000

0800314c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b0a3      	sub	sp, #140	; 0x8c
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003154:	2374      	movs	r3, #116	; 0x74
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	0018      	movs	r0, r3
 800315a:	2314      	movs	r3, #20
 800315c:	001a      	movs	r2, r3
 800315e:	2100      	movs	r1, #0
 8003160:	f005 fd32 	bl	8008bc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003164:	2428      	movs	r4, #40	; 0x28
 8003166:	193b      	adds	r3, r7, r4
 8003168:	0018      	movs	r0, r3
 800316a:	234c      	movs	r3, #76	; 0x4c
 800316c:	001a      	movs	r2, r3
 800316e:	2100      	movs	r1, #0
 8003170:	f005 fd2a 	bl	8008bc8 <memset>
  if(huart->Instance==USART1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a84      	ldr	r2, [pc, #528]	; (800338c <HAL_UART_MspInit+0x240>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d140      	bne.n	8003200 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800317e:	193b      	adds	r3, r7, r4
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003184:	193b      	adds	r3, r7, r4
 8003186:	2200      	movs	r2, #0
 8003188:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800318a:	193b      	adds	r3, r7, r4
 800318c:	0018      	movs	r0, r3
 800318e:	f001 faa5 	bl	80046dc <HAL_RCCEx_PeriphCLKConfig>
 8003192:	1e03      	subs	r3, r0, #0
 8003194:	d001      	beq.n	800319a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003196:	f7ff fef5 	bl	8002f84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800319a:	4b7d      	ldr	r3, [pc, #500]	; (8003390 <HAL_UART_MspInit+0x244>)
 800319c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800319e:	4b7c      	ldr	r3, [pc, #496]	; (8003390 <HAL_UART_MspInit+0x244>)
 80031a0:	2180      	movs	r1, #128	; 0x80
 80031a2:	01c9      	lsls	r1, r1, #7
 80031a4:	430a      	orrs	r2, r1
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
 80031a8:	4b79      	ldr	r3, [pc, #484]	; (8003390 <HAL_UART_MspInit+0x244>)
 80031aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	01db      	lsls	r3, r3, #7
 80031b0:	4013      	ands	r3, r2
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b6:	4b76      	ldr	r3, [pc, #472]	; (8003390 <HAL_UART_MspInit+0x244>)
 80031b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ba:	4b75      	ldr	r3, [pc, #468]	; (8003390 <HAL_UART_MspInit+0x244>)
 80031bc:	2101      	movs	r1, #1
 80031be:	430a      	orrs	r2, r1
 80031c0:	635a      	str	r2, [r3, #52]	; 0x34
 80031c2:	4b73      	ldr	r3, [pc, #460]	; (8003390 <HAL_UART_MspInit+0x244>)
 80031c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c6:	2201      	movs	r2, #1
 80031c8:	4013      	ands	r3, r2
 80031ca:	623b      	str	r3, [r7, #32]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 80031ce:	2174      	movs	r1, #116	; 0x74
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	22c0      	movs	r2, #192	; 0xc0
 80031d4:	00d2      	lsls	r2, r2, #3
 80031d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d8:	187b      	adds	r3, r7, r1
 80031da:	2202      	movs	r2, #2
 80031dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	187b      	adds	r3, r7, r1
 80031e0:	2200      	movs	r2, #0
 80031e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e4:	187b      	adds	r3, r7, r1
 80031e6:	2200      	movs	r2, #0
 80031e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80031ea:	187b      	adds	r3, r7, r1
 80031ec:	2201      	movs	r2, #1
 80031ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f0:	187a      	adds	r2, r7, r1
 80031f2:	23a0      	movs	r3, #160	; 0xa0
 80031f4:	05db      	lsls	r3, r3, #23
 80031f6:	0011      	movs	r1, r2
 80031f8:	0018      	movs	r0, r3
 80031fa:	f000 fb81 	bl	8003900 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 80031fe:	e0c0      	b.n	8003382 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a63      	ldr	r2, [pc, #396]	; (8003394 <HAL_UART_MspInit+0x248>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d140      	bne.n	800328c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800320a:	2128      	movs	r1, #40	; 0x28
 800320c:	187b      	adds	r3, r7, r1
 800320e:	2202      	movs	r2, #2
 8003210:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003212:	187b      	adds	r3, r7, r1
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003218:	187b      	adds	r3, r7, r1
 800321a:	0018      	movs	r0, r3
 800321c:	f001 fa5e 	bl	80046dc <HAL_RCCEx_PeriphCLKConfig>
 8003220:	1e03      	subs	r3, r0, #0
 8003222:	d001      	beq.n	8003228 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003224:	f7ff feae 	bl	8002f84 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003228:	4b59      	ldr	r3, [pc, #356]	; (8003390 <HAL_UART_MspInit+0x244>)
 800322a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800322c:	4b58      	ldr	r3, [pc, #352]	; (8003390 <HAL_UART_MspInit+0x244>)
 800322e:	2180      	movs	r1, #128	; 0x80
 8003230:	0289      	lsls	r1, r1, #10
 8003232:	430a      	orrs	r2, r1
 8003234:	63da      	str	r2, [r3, #60]	; 0x3c
 8003236:	4b56      	ldr	r3, [pc, #344]	; (8003390 <HAL_UART_MspInit+0x244>)
 8003238:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	029b      	lsls	r3, r3, #10
 800323e:	4013      	ands	r3, r2
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003244:	4b52      	ldr	r3, [pc, #328]	; (8003390 <HAL_UART_MspInit+0x244>)
 8003246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003248:	4b51      	ldr	r3, [pc, #324]	; (8003390 <HAL_UART_MspInit+0x244>)
 800324a:	2101      	movs	r1, #1
 800324c:	430a      	orrs	r2, r1
 800324e:	635a      	str	r2, [r3, #52]	; 0x34
 8003250:	4b4f      	ldr	r3, [pc, #316]	; (8003390 <HAL_UART_MspInit+0x244>)
 8003252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003254:	2201      	movs	r2, #1
 8003256:	4013      	ands	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 800325c:	2174      	movs	r1, #116	; 0x74
 800325e:	187b      	adds	r3, r7, r1
 8003260:	220c      	movs	r2, #12
 8003262:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003264:	187b      	adds	r3, r7, r1
 8003266:	2202      	movs	r2, #2
 8003268:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	187b      	adds	r3, r7, r1
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003270:	187b      	adds	r3, r7, r1
 8003272:	2200      	movs	r2, #0
 8003274:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003276:	187b      	adds	r3, r7, r1
 8003278:	2201      	movs	r2, #1
 800327a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327c:	187a      	adds	r2, r7, r1
 800327e:	23a0      	movs	r3, #160	; 0xa0
 8003280:	05db      	lsls	r3, r3, #23
 8003282:	0011      	movs	r1, r2
 8003284:	0018      	movs	r0, r3
 8003286:	f000 fb3b 	bl	8003900 <HAL_GPIO_Init>
}
 800328a:	e07a      	b.n	8003382 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a41      	ldr	r2, [pc, #260]	; (8003398 <HAL_UART_MspInit+0x24c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d140      	bne.n	8003318 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003296:	2128      	movs	r1, #40	; 0x28
 8003298:	187b      	adds	r3, r7, r1
 800329a:	2204      	movs	r2, #4
 800329c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800329e:	187b      	adds	r3, r7, r1
 80032a0:	2200      	movs	r2, #0
 80032a2:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032a4:	187b      	adds	r3, r7, r1
 80032a6:	0018      	movs	r0, r3
 80032a8:	f001 fa18 	bl	80046dc <HAL_RCCEx_PeriphCLKConfig>
 80032ac:	1e03      	subs	r3, r0, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_UART_MspInit+0x168>
      Error_Handler();
 80032b0:	f7ff fe68 	bl	8002f84 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032b4:	4b36      	ldr	r3, [pc, #216]	; (8003390 <HAL_UART_MspInit+0x244>)
 80032b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032b8:	4b35      	ldr	r3, [pc, #212]	; (8003390 <HAL_UART_MspInit+0x244>)
 80032ba:	2180      	movs	r1, #128	; 0x80
 80032bc:	02c9      	lsls	r1, r1, #11
 80032be:	430a      	orrs	r2, r1
 80032c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80032c2:	4b33      	ldr	r3, [pc, #204]	; (8003390 <HAL_UART_MspInit+0x244>)
 80032c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	02db      	lsls	r3, r3, #11
 80032ca:	4013      	ands	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d0:	4b2f      	ldr	r3, [pc, #188]	; (8003390 <HAL_UART_MspInit+0x244>)
 80032d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d4:	4b2e      	ldr	r3, [pc, #184]	; (8003390 <HAL_UART_MspInit+0x244>)
 80032d6:	2102      	movs	r1, #2
 80032d8:	430a      	orrs	r2, r1
 80032da:	635a      	str	r2, [r3, #52]	; 0x34
 80032dc:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <HAL_UART_MspInit+0x244>)
 80032de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e0:	2202      	movs	r2, #2
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 80032e8:	2174      	movs	r1, #116	; 0x74
 80032ea:	187b      	adds	r3, r7, r1
 80032ec:	22c0      	movs	r2, #192	; 0xc0
 80032ee:	0092      	lsls	r2, r2, #2
 80032f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	187b      	adds	r3, r7, r1
 80032f4:	2202      	movs	r2, #2
 80032f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	187b      	adds	r3, r7, r1
 80032fa:	2200      	movs	r2, #0
 80032fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fe:	187b      	adds	r3, r7, r1
 8003300:	2200      	movs	r2, #0
 8003302:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003304:	187b      	adds	r3, r7, r1
 8003306:	2204      	movs	r2, #4
 8003308:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800330a:	187b      	adds	r3, r7, r1
 800330c:	4a23      	ldr	r2, [pc, #140]	; (800339c <HAL_UART_MspInit+0x250>)
 800330e:	0019      	movs	r1, r3
 8003310:	0010      	movs	r0, r2
 8003312:	f000 faf5 	bl	8003900 <HAL_GPIO_Init>
}
 8003316:	e034      	b.n	8003382 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a20      	ldr	r2, [pc, #128]	; (80033a0 <HAL_UART_MspInit+0x254>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d12f      	bne.n	8003382 <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 8003322:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <HAL_UART_MspInit+0x244>)
 8003324:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003326:	4b1a      	ldr	r3, [pc, #104]	; (8003390 <HAL_UART_MspInit+0x244>)
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	0049      	lsls	r1, r1, #1
 800332c:	430a      	orrs	r2, r1
 800332e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003330:	4b17      	ldr	r3, [pc, #92]	; (8003390 <HAL_UART_MspInit+0x244>)
 8003332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4013      	ands	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800333e:	4b14      	ldr	r3, [pc, #80]	; (8003390 <HAL_UART_MspInit+0x244>)
 8003340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003342:	4b13      	ldr	r3, [pc, #76]	; (8003390 <HAL_UART_MspInit+0x244>)
 8003344:	2102      	movs	r1, #2
 8003346:	430a      	orrs	r2, r1
 8003348:	635a      	str	r2, [r3, #52]	; 0x34
 800334a:	4b11      	ldr	r3, [pc, #68]	; (8003390 <HAL_UART_MspInit+0x244>)
 800334c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334e:	2202      	movs	r2, #2
 8003350:	4013      	ands	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8003356:	2174      	movs	r1, #116	; 0x74
 8003358:	187b      	adds	r3, r7, r1
 800335a:	2218      	movs	r2, #24
 800335c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335e:	187b      	adds	r3, r7, r1
 8003360:	2202      	movs	r2, #2
 8003362:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	187b      	adds	r3, r7, r1
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336a:	187b      	adds	r3, r7, r1
 800336c:	2200      	movs	r2, #0
 800336e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8003370:	187b      	adds	r3, r7, r1
 8003372:	2203      	movs	r2, #3
 8003374:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003376:	187b      	adds	r3, r7, r1
 8003378:	4a08      	ldr	r2, [pc, #32]	; (800339c <HAL_UART_MspInit+0x250>)
 800337a:	0019      	movs	r1, r3
 800337c:	0010      	movs	r0, r2
 800337e:	f000 fabf 	bl	8003900 <HAL_GPIO_Init>
}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	46bd      	mov	sp, r7
 8003386:	b023      	add	sp, #140	; 0x8c
 8003388:	bd90      	pop	{r4, r7, pc}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	40013800 	.word	0x40013800
 8003390:	40021000 	.word	0x40021000
 8003394:	40004400 	.word	0x40004400
 8003398:	40004800 	.word	0x40004800
 800339c:	50000400 	.word	0x50000400
 80033a0:	40005000 	.word	0x40005000

080033a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033a8:	e7fe      	b.n	80033a8 <NMI_Handler+0x4>

080033aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ae:	e7fe      	b.n	80033ae <HardFault_Handler+0x4>

080033b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033c8:	f000 f974 	bl	80036b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80033d8:	4b03      	ldr	r3, [pc, #12]	; (80033e8 <RTC_TAMP_IRQHandler+0x14>)
 80033da:	0018      	movs	r0, r3
 80033dc:	f001 ff80 	bl	80052e0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80033e0:	46c0      	nop			; (mov r8, r8)
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	200006e4 	.word	0x200006e4

080033ec <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80033f2:	0018      	movs	r0, r3
 80033f4:	f002 fabc 	bl	8005970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	20000774 	.word	0x20000774

08003404 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  return 1;
 8003408:	2301      	movs	r3, #1
}
 800340a:	0018      	movs	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <_kill>:

int _kill(int pid, int sig)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800341a:	f005 fc81 	bl	8008d20 <__errno>
 800341e:	0003      	movs	r3, r0
 8003420:	2216      	movs	r2, #22
 8003422:	601a      	str	r2, [r3, #0]
  return -1;
 8003424:	2301      	movs	r3, #1
 8003426:	425b      	negs	r3, r3
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b002      	add	sp, #8
 800342e:	bd80      	pop	{r7, pc}

08003430 <_exit>:

void _exit (int status)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003438:	2301      	movs	r3, #1
 800343a:	425a      	negs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	0011      	movs	r1, r2
 8003440:	0018      	movs	r0, r3
 8003442:	f7ff ffe5 	bl	8003410 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003446:	e7fe      	b.n	8003446 <_exit+0x16>

08003448 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	e00a      	b.n	8003470 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800345a:	e000      	b.n	800345e <_read+0x16>
 800345c:	bf00      	nop
 800345e:	0001      	movs	r1, r0
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	60ba      	str	r2, [r7, #8]
 8003466:	b2ca      	uxtb	r2, r1
 8003468:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	3301      	adds	r3, #1
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	429a      	cmp	r2, r3
 8003476:	dbf0      	blt.n	800345a <_read+0x12>
  }

  return len;
 8003478:	687b      	ldr	r3, [r7, #4]
}
 800347a:	0018      	movs	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	b006      	add	sp, #24
 8003480:	bd80      	pop	{r7, pc}

08003482 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b086      	sub	sp, #24
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	e009      	b.n	80034a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	60ba      	str	r2, [r7, #8]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	0018      	movs	r0, r3
 800349e:	e000      	b.n	80034a2 <_write+0x20>
 80034a0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	3301      	adds	r3, #1
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	dbf1      	blt.n	8003494 <_write+0x12>
  }
  return len;
 80034b0:	687b      	ldr	r3, [r7, #4]
}
 80034b2:	0018      	movs	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b006      	add	sp, #24
 80034b8:	bd80      	pop	{r7, pc}

080034ba <_close>:

int _close(int file)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034c2:	2301      	movs	r3, #1
 80034c4:	425b      	negs	r3, r3
}
 80034c6:	0018      	movs	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b002      	add	sp, #8
 80034cc:	bd80      	pop	{r7, pc}

080034ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2280      	movs	r2, #128	; 0x80
 80034dc:	0192      	lsls	r2, r2, #6
 80034de:	605a      	str	r2, [r3, #4]
  return 0;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	0018      	movs	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b002      	add	sp, #8
 80034e8:	bd80      	pop	{r7, pc}

080034ea <_isatty>:

int _isatty(int file)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034f2:	2301      	movs	r3, #1
}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b002      	add	sp, #8
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003508:	2300      	movs	r3, #0
}
 800350a:	0018      	movs	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	b004      	add	sp, #16
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800351c:	4a14      	ldr	r2, [pc, #80]	; (8003570 <_sbrk+0x5c>)
 800351e:	4b15      	ldr	r3, [pc, #84]	; (8003574 <_sbrk+0x60>)
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003528:	4b13      	ldr	r3, [pc, #76]	; (8003578 <_sbrk+0x64>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003530:	4b11      	ldr	r3, [pc, #68]	; (8003578 <_sbrk+0x64>)
 8003532:	4a12      	ldr	r2, [pc, #72]	; (800357c <_sbrk+0x68>)
 8003534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003536:	4b10      	ldr	r3, [pc, #64]	; (8003578 <_sbrk+0x64>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	18d3      	adds	r3, r2, r3
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	429a      	cmp	r2, r3
 8003542:	d207      	bcs.n	8003554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003544:	f005 fbec 	bl	8008d20 <__errno>
 8003548:	0003      	movs	r3, r0
 800354a:	220c      	movs	r2, #12
 800354c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800354e:	2301      	movs	r3, #1
 8003550:	425b      	negs	r3, r3
 8003552:	e009      	b.n	8003568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003554:	4b08      	ldr	r3, [pc, #32]	; (8003578 <_sbrk+0x64>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800355a:	4b07      	ldr	r3, [pc, #28]	; (8003578 <_sbrk+0x64>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	18d2      	adds	r2, r2, r3
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <_sbrk+0x64>)
 8003564:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003566:	68fb      	ldr	r3, [r7, #12]
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b006      	add	sp, #24
 800356e:	bd80      	pop	{r7, pc}
 8003570:	20024000 	.word	0x20024000
 8003574:	00000400 	.word	0x00000400
 8003578:	20000a28 	.word	0x20000a28
 800357c:	20000d40 	.word	0x20000d40

08003580 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800358c:	480d      	ldr	r0, [pc, #52]	; (80035c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800358e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003590:	f7ff fff6 	bl	8003580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003594:	480c      	ldr	r0, [pc, #48]	; (80035c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003596:	490d      	ldr	r1, [pc, #52]	; (80035cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003598:	4a0d      	ldr	r2, [pc, #52]	; (80035d0 <LoopForever+0xe>)
  movs r3, #0
 800359a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800359c:	e002      	b.n	80035a4 <LoopCopyDataInit>

0800359e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800359e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035a2:	3304      	adds	r3, #4

080035a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035a8:	d3f9      	bcc.n	800359e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035aa:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035ac:	4c0a      	ldr	r4, [pc, #40]	; (80035d8 <LoopForever+0x16>)
  movs r3, #0
 80035ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035b0:	e001      	b.n	80035b6 <LoopFillZerobss>

080035b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035b4:	3204      	adds	r2, #4

080035b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035b8:	d3fb      	bcc.n	80035b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035ba:	f005 fbb7 	bl	8008d2c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80035be:	f7fe fff3 	bl	80025a8 <main>

080035c2 <LoopForever>:

LoopForever:
  b LoopForever
 80035c2:	e7fe      	b.n	80035c2 <LoopForever>
  ldr   r0, =_estack
 80035c4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80035c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035cc:	200006c8 	.word	0x200006c8
  ldr r2, =_sidata
 80035d0:	0800fd00 	.word	0x0800fd00
  ldr r2, =_sbss
 80035d4:	200006c8 	.word	0x200006c8
  ldr r4, =_ebss
 80035d8:	20000d3c 	.word	0x20000d3c

080035dc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035dc:	e7fe      	b.n	80035dc <ADC1_COMP_IRQHandler>
	...

080035e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035e6:	1dfb      	adds	r3, r7, #7
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_Init+0x3c>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4b0a      	ldr	r3, [pc, #40]	; (800361c <HAL_Init+0x3c>)
 80035f2:	2180      	movs	r1, #128	; 0x80
 80035f4:	0049      	lsls	r1, r1, #1
 80035f6:	430a      	orrs	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035fa:	2003      	movs	r0, #3
 80035fc:	f000 f810 	bl	8003620 <HAL_InitTick>
 8003600:	1e03      	subs	r3, r0, #0
 8003602:	d003      	beq.n	800360c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003604:	1dfb      	adds	r3, r7, #7
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	e001      	b.n	8003610 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800360c:	f7ff fcc0 	bl	8002f90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003610:	1dfb      	adds	r3, r7, #7
 8003612:	781b      	ldrb	r3, [r3, #0]
}
 8003614:	0018      	movs	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	b002      	add	sp, #8
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40022000 	.word	0x40022000

08003620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003620:	b590      	push	{r4, r7, lr}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003628:	230f      	movs	r3, #15
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003630:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <HAL_InitTick+0x88>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d02b      	beq.n	8003690 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003638:	4b1c      	ldr	r3, [pc, #112]	; (80036ac <HAL_InitTick+0x8c>)
 800363a:	681c      	ldr	r4, [r3, #0]
 800363c:	4b1a      	ldr	r3, [pc, #104]	; (80036a8 <HAL_InitTick+0x88>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	0019      	movs	r1, r3
 8003642:	23fa      	movs	r3, #250	; 0xfa
 8003644:	0098      	lsls	r0, r3, #2
 8003646:	f7fc fd79 	bl	800013c <__udivsi3>
 800364a:	0003      	movs	r3, r0
 800364c:	0019      	movs	r1, r3
 800364e:	0020      	movs	r0, r4
 8003650:	f7fc fd74 	bl	800013c <__udivsi3>
 8003654:	0003      	movs	r3, r0
 8003656:	0018      	movs	r0, r3
 8003658:	f000 f945 	bl	80038e6 <HAL_SYSTICK_Config>
 800365c:	1e03      	subs	r3, r0, #0
 800365e:	d112      	bne.n	8003686 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b03      	cmp	r3, #3
 8003664:	d80a      	bhi.n	800367c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	2301      	movs	r3, #1
 800366a:	425b      	negs	r3, r3
 800366c:	2200      	movs	r2, #0
 800366e:	0018      	movs	r0, r3
 8003670:	f000 f910 	bl	8003894 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003674:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <HAL_InitTick+0x90>)
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	e00d      	b.n	8003698 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800367c:	230f      	movs	r3, #15
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	2201      	movs	r2, #1
 8003682:	701a      	strb	r2, [r3, #0]
 8003684:	e008      	b.n	8003698 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003686:	230f      	movs	r3, #15
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e003      	b.n	8003698 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003690:	230f      	movs	r3, #15
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	2201      	movs	r2, #1
 8003696:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003698:	230f      	movs	r3, #15
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	781b      	ldrb	r3, [r3, #0]
}
 800369e:	0018      	movs	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b005      	add	sp, #20
 80036a4:	bd90      	pop	{r4, r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	20000010 	.word	0x20000010
 80036ac:	20000008 	.word	0x20000008
 80036b0:	2000000c 	.word	0x2000000c

080036b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_IncTick+0x1c>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	001a      	movs	r2, r3
 80036be:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_IncTick+0x20>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	18d2      	adds	r2, r2, r3
 80036c4:	4b03      	ldr	r3, [pc, #12]	; (80036d4 <HAL_IncTick+0x20>)
 80036c6:	601a      	str	r2, [r3, #0]
}
 80036c8:	46c0      	nop			; (mov r8, r8)
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	20000010 	.word	0x20000010
 80036d4:	20000a2c 	.word	0x20000a2c

080036d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  return uwTick;
 80036dc:	4b02      	ldr	r3, [pc, #8]	; (80036e8 <HAL_GetTick+0x10>)
 80036de:	681b      	ldr	r3, [r3, #0]
}
 80036e0:	0018      	movs	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	20000a2c 	.word	0x20000a2c

080036ec <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a06      	ldr	r2, [pc, #24]	; (8003714 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	0019      	movs	r1, r3
 80036fe:	4b04      	ldr	r3, [pc, #16]	; (8003710 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	430a      	orrs	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	b002      	add	sp, #8
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	40010000 	.word	0x40010000
 8003714:	fffff9ff 	.word	0xfffff9ff

08003718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	0002      	movs	r2, r0
 8003720:	1dfb      	adds	r3, r7, #7
 8003722:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003724:	1dfb      	adds	r3, r7, #7
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b7f      	cmp	r3, #127	; 0x7f
 800372a:	d809      	bhi.n	8003740 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800372c:	1dfb      	adds	r3, r7, #7
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	001a      	movs	r2, r3
 8003732:	231f      	movs	r3, #31
 8003734:	401a      	ands	r2, r3
 8003736:	4b04      	ldr	r3, [pc, #16]	; (8003748 <__NVIC_EnableIRQ+0x30>)
 8003738:	2101      	movs	r1, #1
 800373a:	4091      	lsls	r1, r2
 800373c:	000a      	movs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003740:	46c0      	nop			; (mov r8, r8)
 8003742:	46bd      	mov	sp, r7
 8003744:	b002      	add	sp, #8
 8003746:	bd80      	pop	{r7, pc}
 8003748:	e000e100 	.word	0xe000e100

0800374c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	0002      	movs	r2, r0
 8003754:	6039      	str	r1, [r7, #0]
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800375a:	1dfb      	adds	r3, r7, #7
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b7f      	cmp	r3, #127	; 0x7f
 8003760:	d828      	bhi.n	80037b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003762:	4a2f      	ldr	r2, [pc, #188]	; (8003820 <__NVIC_SetPriority+0xd4>)
 8003764:	1dfb      	adds	r3, r7, #7
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b25b      	sxtb	r3, r3
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	33c0      	adds	r3, #192	; 0xc0
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	589b      	ldr	r3, [r3, r2]
 8003772:	1dfa      	adds	r2, r7, #7
 8003774:	7812      	ldrb	r2, [r2, #0]
 8003776:	0011      	movs	r1, r2
 8003778:	2203      	movs	r2, #3
 800377a:	400a      	ands	r2, r1
 800377c:	00d2      	lsls	r2, r2, #3
 800377e:	21ff      	movs	r1, #255	; 0xff
 8003780:	4091      	lsls	r1, r2
 8003782:	000a      	movs	r2, r1
 8003784:	43d2      	mvns	r2, r2
 8003786:	401a      	ands	r2, r3
 8003788:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	019b      	lsls	r3, r3, #6
 800378e:	22ff      	movs	r2, #255	; 0xff
 8003790:	401a      	ands	r2, r3
 8003792:	1dfb      	adds	r3, r7, #7
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	0018      	movs	r0, r3
 8003798:	2303      	movs	r3, #3
 800379a:	4003      	ands	r3, r0
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037a0:	481f      	ldr	r0, [pc, #124]	; (8003820 <__NVIC_SetPriority+0xd4>)
 80037a2:	1dfb      	adds	r3, r7, #7
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	b25b      	sxtb	r3, r3
 80037a8:	089b      	lsrs	r3, r3, #2
 80037aa:	430a      	orrs	r2, r1
 80037ac:	33c0      	adds	r3, #192	; 0xc0
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80037b2:	e031      	b.n	8003818 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037b4:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <__NVIC_SetPriority+0xd8>)
 80037b6:	1dfb      	adds	r3, r7, #7
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	0019      	movs	r1, r3
 80037bc:	230f      	movs	r3, #15
 80037be:	400b      	ands	r3, r1
 80037c0:	3b08      	subs	r3, #8
 80037c2:	089b      	lsrs	r3, r3, #2
 80037c4:	3306      	adds	r3, #6
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	18d3      	adds	r3, r2, r3
 80037ca:	3304      	adds	r3, #4
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	1dfa      	adds	r2, r7, #7
 80037d0:	7812      	ldrb	r2, [r2, #0]
 80037d2:	0011      	movs	r1, r2
 80037d4:	2203      	movs	r2, #3
 80037d6:	400a      	ands	r2, r1
 80037d8:	00d2      	lsls	r2, r2, #3
 80037da:	21ff      	movs	r1, #255	; 0xff
 80037dc:	4091      	lsls	r1, r2
 80037de:	000a      	movs	r2, r1
 80037e0:	43d2      	mvns	r2, r2
 80037e2:	401a      	ands	r2, r3
 80037e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	019b      	lsls	r3, r3, #6
 80037ea:	22ff      	movs	r2, #255	; 0xff
 80037ec:	401a      	ands	r2, r3
 80037ee:	1dfb      	adds	r3, r7, #7
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	0018      	movs	r0, r3
 80037f4:	2303      	movs	r3, #3
 80037f6:	4003      	ands	r3, r0
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037fc:	4809      	ldr	r0, [pc, #36]	; (8003824 <__NVIC_SetPriority+0xd8>)
 80037fe:	1dfb      	adds	r3, r7, #7
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	001c      	movs	r4, r3
 8003804:	230f      	movs	r3, #15
 8003806:	4023      	ands	r3, r4
 8003808:	3b08      	subs	r3, #8
 800380a:	089b      	lsrs	r3, r3, #2
 800380c:	430a      	orrs	r2, r1
 800380e:	3306      	adds	r3, #6
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	18c3      	adds	r3, r0, r3
 8003814:	3304      	adds	r3, #4
 8003816:	601a      	str	r2, [r3, #0]
}
 8003818:	46c0      	nop			; (mov r8, r8)
 800381a:	46bd      	mov	sp, r7
 800381c:	b003      	add	sp, #12
 800381e:	bd90      	pop	{r4, r7, pc}
 8003820:	e000e100 	.word	0xe000e100
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800382c:	f3bf 8f4f 	dsb	sy
}
 8003830:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003832:	4b04      	ldr	r3, [pc, #16]	; (8003844 <__NVIC_SystemReset+0x1c>)
 8003834:	4a04      	ldr	r2, [pc, #16]	; (8003848 <__NVIC_SystemReset+0x20>)
 8003836:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003838:	f3bf 8f4f 	dsb	sy
}
 800383c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	e7fd      	b.n	800383e <__NVIC_SystemReset+0x16>
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	e000ed00 	.word	0xe000ed00
 8003848:	05fa0004 	.word	0x05fa0004

0800384c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	1e5a      	subs	r2, r3, #1
 8003858:	2380      	movs	r3, #128	; 0x80
 800385a:	045b      	lsls	r3, r3, #17
 800385c:	429a      	cmp	r2, r3
 800385e:	d301      	bcc.n	8003864 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003860:	2301      	movs	r3, #1
 8003862:	e010      	b.n	8003886 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003864:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <SysTick_Config+0x44>)
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	3a01      	subs	r2, #1
 800386a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800386c:	2301      	movs	r3, #1
 800386e:	425b      	negs	r3, r3
 8003870:	2103      	movs	r1, #3
 8003872:	0018      	movs	r0, r3
 8003874:	f7ff ff6a 	bl	800374c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <SysTick_Config+0x44>)
 800387a:	2200      	movs	r2, #0
 800387c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387e:	4b04      	ldr	r3, [pc, #16]	; (8003890 <SysTick_Config+0x44>)
 8003880:	2207      	movs	r2, #7
 8003882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003884:	2300      	movs	r3, #0
}
 8003886:	0018      	movs	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	b002      	add	sp, #8
 800388c:	bd80      	pop	{r7, pc}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	e000e010 	.word	0xe000e010

08003894 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
 800389e:	210f      	movs	r1, #15
 80038a0:	187b      	adds	r3, r7, r1
 80038a2:	1c02      	adds	r2, r0, #0
 80038a4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	187b      	adds	r3, r7, r1
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	b25b      	sxtb	r3, r3
 80038ae:	0011      	movs	r1, r2
 80038b0:	0018      	movs	r0, r3
 80038b2:	f7ff ff4b 	bl	800374c <__NVIC_SetPriority>
}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b004      	add	sp, #16
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	0002      	movs	r2, r0
 80038c6:	1dfb      	adds	r3, r7, #7
 80038c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ca:	1dfb      	adds	r3, r7, #7
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	b25b      	sxtb	r3, r3
 80038d0:	0018      	movs	r0, r3
 80038d2:	f7ff ff21 	bl	8003718 <__NVIC_EnableIRQ>
}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	46bd      	mov	sp, r7
 80038da:	b002      	add	sp, #8
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80038e2:	f7ff ffa1 	bl	8003828 <__NVIC_SystemReset>

080038e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	0018      	movs	r0, r3
 80038f2:	f7ff ffab 	bl	800384c <SysTick_Config>
 80038f6:	0003      	movs	r3, r0
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b002      	add	sp, #8
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800390e:	e14d      	b.n	8003bac <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2101      	movs	r1, #1
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4091      	lsls	r1, r2
 800391a:	000a      	movs	r2, r1
 800391c:	4013      	ands	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d100      	bne.n	8003928 <HAL_GPIO_Init+0x28>
 8003926:	e13e      	b.n	8003ba6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2203      	movs	r2, #3
 800392e:	4013      	ands	r3, r2
 8003930:	2b01      	cmp	r3, #1
 8003932:	d005      	beq.n	8003940 <HAL_GPIO_Init+0x40>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2203      	movs	r2, #3
 800393a:	4013      	ands	r3, r2
 800393c:	2b02      	cmp	r3, #2
 800393e:	d130      	bne.n	80039a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	2203      	movs	r2, #3
 800394c:	409a      	lsls	r2, r3
 800394e:	0013      	movs	r3, r2
 8003950:	43da      	mvns	r2, r3
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	409a      	lsls	r2, r3
 8003962:	0013      	movs	r3, r2
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003976:	2201      	movs	r2, #1
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	409a      	lsls	r2, r3
 800397c:	0013      	movs	r3, r2
 800397e:	43da      	mvns	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	2201      	movs	r2, #1
 800398e:	401a      	ands	r2, r3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	409a      	lsls	r2, r3
 8003994:	0013      	movs	r3, r2
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2203      	movs	r2, #3
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d017      	beq.n	80039de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	2203      	movs	r2, #3
 80039ba:	409a      	lsls	r2, r3
 80039bc:	0013      	movs	r3, r2
 80039be:	43da      	mvns	r2, r3
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	409a      	lsls	r2, r3
 80039d0:	0013      	movs	r3, r2
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2203      	movs	r2, #3
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d123      	bne.n	8003a32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	08da      	lsrs	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3208      	adds	r2, #8
 80039f2:	0092      	lsls	r2, r2, #2
 80039f4:	58d3      	ldr	r3, [r2, r3]
 80039f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2207      	movs	r2, #7
 80039fc:	4013      	ands	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	220f      	movs	r2, #15
 8003a02:	409a      	lsls	r2, r3
 8003a04:	0013      	movs	r3, r2
 8003a06:	43da      	mvns	r2, r3
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2107      	movs	r1, #7
 8003a16:	400b      	ands	r3, r1
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	0013      	movs	r3, r2
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	08da      	lsrs	r2, r3, #3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3208      	adds	r2, #8
 8003a2c:	0092      	lsls	r2, r2, #2
 8003a2e:	6939      	ldr	r1, [r7, #16]
 8003a30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	0013      	movs	r3, r2
 8003a42:	43da      	mvns	r2, r3
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4013      	ands	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2203      	movs	r2, #3
 8003a50:	401a      	ands	r2, r3
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	409a      	lsls	r2, r3
 8003a58:	0013      	movs	r3, r2
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	23c0      	movs	r3, #192	; 0xc0
 8003a6c:	029b      	lsls	r3, r3, #10
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d100      	bne.n	8003a74 <HAL_GPIO_Init+0x174>
 8003a72:	e098      	b.n	8003ba6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003a74:	4a53      	ldr	r2, [pc, #332]	; (8003bc4 <HAL_GPIO_Init+0x2c4>)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	089b      	lsrs	r3, r3, #2
 8003a7a:	3318      	adds	r3, #24
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	589b      	ldr	r3, [r3, r2]
 8003a80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2203      	movs	r2, #3
 8003a86:	4013      	ands	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	220f      	movs	r2, #15
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	0013      	movs	r3, r2
 8003a90:	43da      	mvns	r2, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	23a0      	movs	r3, #160	; 0xa0
 8003a9c:	05db      	lsls	r3, r3, #23
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d019      	beq.n	8003ad6 <HAL_GPIO_Init+0x1d6>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a48      	ldr	r2, [pc, #288]	; (8003bc8 <HAL_GPIO_Init+0x2c8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <HAL_GPIO_Init+0x1d2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a47      	ldr	r2, [pc, #284]	; (8003bcc <HAL_GPIO_Init+0x2cc>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00d      	beq.n	8003ace <HAL_GPIO_Init+0x1ce>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a46      	ldr	r2, [pc, #280]	; (8003bd0 <HAL_GPIO_Init+0x2d0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <HAL_GPIO_Init+0x1ca>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a45      	ldr	r2, [pc, #276]	; (8003bd4 <HAL_GPIO_Init+0x2d4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d101      	bne.n	8003ac6 <HAL_GPIO_Init+0x1c6>
 8003ac2:	2304      	movs	r3, #4
 8003ac4:	e008      	b.n	8003ad8 <HAL_GPIO_Init+0x1d8>
 8003ac6:	2305      	movs	r3, #5
 8003ac8:	e006      	b.n	8003ad8 <HAL_GPIO_Init+0x1d8>
 8003aca:	2303      	movs	r3, #3
 8003acc:	e004      	b.n	8003ad8 <HAL_GPIO_Init+0x1d8>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e002      	b.n	8003ad8 <HAL_GPIO_Init+0x1d8>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <HAL_GPIO_Init+0x1d8>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	2103      	movs	r1, #3
 8003adc:	400a      	ands	r2, r1
 8003ade:	00d2      	lsls	r2, r2, #3
 8003ae0:	4093      	lsls	r3, r2
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003ae8:	4936      	ldr	r1, [pc, #216]	; (8003bc4 <HAL_GPIO_Init+0x2c4>)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	089b      	lsrs	r3, r3, #2
 8003aee:	3318      	adds	r3, #24
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003af6:	4b33      	ldr	r3, [pc, #204]	; (8003bc4 <HAL_GPIO_Init+0x2c4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	43da      	mvns	r2, r3
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4013      	ands	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	2380      	movs	r3, #128	; 0x80
 8003b0c:	035b      	lsls	r3, r3, #13
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b1a:	4b2a      	ldr	r3, [pc, #168]	; (8003bc4 <HAL_GPIO_Init+0x2c4>)
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003b20:	4b28      	ldr	r3, [pc, #160]	; (8003bc4 <HAL_GPIO_Init+0x2c4>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	43da      	mvns	r2, r3
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	039b      	lsls	r3, r3, #14
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b44:	4b1f      	ldr	r3, [pc, #124]	; (8003bc4 <HAL_GPIO_Init+0x2c4>)
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b4a:	4a1e      	ldr	r2, [pc, #120]	; (8003bc4 <HAL_GPIO_Init+0x2c4>)
 8003b4c:	2384      	movs	r3, #132	; 0x84
 8003b4e:	58d3      	ldr	r3, [r2, r3]
 8003b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	43da      	mvns	r2, r3
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	029b      	lsls	r3, r3, #10
 8003b64:	4013      	ands	r3, r2
 8003b66:	d003      	beq.n	8003b70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b70:	4914      	ldr	r1, [pc, #80]	; (8003bc4 <HAL_GPIO_Init+0x2c4>)
 8003b72:	2284      	movs	r2, #132	; 0x84
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003b78:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <HAL_GPIO_Init+0x2c4>)
 8003b7a:	2380      	movs	r3, #128	; 0x80
 8003b7c:	58d3      	ldr	r3, [r2, r3]
 8003b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	43da      	mvns	r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4013      	ands	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	2380      	movs	r3, #128	; 0x80
 8003b90:	025b      	lsls	r3, r3, #9
 8003b92:	4013      	ands	r3, r2
 8003b94:	d003      	beq.n	8003b9e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b9e:	4909      	ldr	r1, [pc, #36]	; (8003bc4 <HAL_GPIO_Init+0x2c4>)
 8003ba0:	2280      	movs	r2, #128	; 0x80
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	40da      	lsrs	r2, r3
 8003bb4:	1e13      	subs	r3, r2, #0
 8003bb6:	d000      	beq.n	8003bba <HAL_GPIO_Init+0x2ba>
 8003bb8:	e6aa      	b.n	8003910 <HAL_GPIO_Init+0x10>
  }
}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b006      	add	sp, #24
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40021800 	.word	0x40021800
 8003bc8:	50000400 	.word	0x50000400
 8003bcc:	50000800 	.word	0x50000800
 8003bd0:	50000c00 	.word	0x50000c00
 8003bd4:	50001000 	.word	0x50001000

08003bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	0008      	movs	r0, r1
 8003be2:	0011      	movs	r1, r2
 8003be4:	1cbb      	adds	r3, r7, #2
 8003be6:	1c02      	adds	r2, r0, #0
 8003be8:	801a      	strh	r2, [r3, #0]
 8003bea:	1c7b      	adds	r3, r7, #1
 8003bec:	1c0a      	adds	r2, r1, #0
 8003bee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bf0:	1c7b      	adds	r3, r7, #1
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d004      	beq.n	8003c02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bf8:	1cbb      	adds	r3, r7, #2
 8003bfa:	881a      	ldrh	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c00:	e003      	b.n	8003c0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c02:	1cbb      	adds	r3, r7, #2
 8003c04:	881a      	ldrh	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b002      	add	sp, #8
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <HAL_PWR_EnableBkUpAccess+0x18>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <HAL_PWR_EnableBkUpAccess+0x18>)
 8003c1e:	2180      	movs	r1, #128	; 0x80
 8003c20:	0049      	lsls	r1, r1, #1
 8003c22:	430a      	orrs	r2, r1
 8003c24:	601a      	str	r2, [r3, #0]
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40007000 	.word	0x40007000

08003c30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003c38:	4b19      	ldr	r3, [pc, #100]	; (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a19      	ldr	r2, [pc, #100]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	0019      	movs	r1, r3
 8003c42:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d11f      	bne.n	8003c94 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003c54:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	0013      	movs	r3, r2
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	189b      	adds	r3, r3, r2
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	4912      	ldr	r1, [pc, #72]	; (8003cac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003c62:	0018      	movs	r0, r3
 8003c64:	f7fc fa6a 	bl	800013c <__udivsi3>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c6e:	e008      	b.n	8003c82 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	e001      	b.n	8003c82 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e009      	b.n	8003c96 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c82:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	401a      	ands	r2, r3
 8003c8c:	2380      	movs	r3, #128	; 0x80
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d0ed      	beq.n	8003c70 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	0018      	movs	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b004      	add	sp, #16
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	40007000 	.word	0x40007000
 8003ca4:	fffff9ff 	.word	0xfffff9ff
 8003ca8:	20000008 	.word	0x20000008
 8003cac:	000f4240 	.word	0x000f4240

08003cb0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003cb4:	4b03      	ldr	r3, [pc, #12]	; (8003cc4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	23e0      	movs	r3, #224	; 0xe0
 8003cba:	01db      	lsls	r3, r3, #7
 8003cbc:	4013      	ands	r3, r2
}
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f000 fb50 	bl	800437c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d100      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x20>
 8003ce6:	e07c      	b.n	8003de2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ce8:	4bc3      	ldr	r3, [pc, #780]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2238      	movs	r2, #56	; 0x38
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cf2:	4bc1      	ldr	r3, [pc, #772]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b10      	cmp	r3, #16
 8003d00:	d102      	bne.n	8003d08 <HAL_RCC_OscConfig+0x40>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d002      	beq.n	8003d0e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d10b      	bne.n	8003d26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0e:	4bba      	ldr	r3, [pc, #744]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	2380      	movs	r3, #128	; 0x80
 8003d14:	029b      	lsls	r3, r3, #10
 8003d16:	4013      	ands	r3, r2
 8003d18:	d062      	beq.n	8003de0 <HAL_RCC_OscConfig+0x118>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d15e      	bne.n	8003de0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e32a      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	2380      	movs	r3, #128	; 0x80
 8003d2c:	025b      	lsls	r3, r3, #9
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d107      	bne.n	8003d42 <HAL_RCC_OscConfig+0x7a>
 8003d32:	4bb1      	ldr	r3, [pc, #708]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4bb0      	ldr	r3, [pc, #704]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003d38:	2180      	movs	r1, #128	; 0x80
 8003d3a:	0249      	lsls	r1, r1, #9
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	e020      	b.n	8003d84 <HAL_RCC_OscConfig+0xbc>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	23a0      	movs	r3, #160	; 0xa0
 8003d48:	02db      	lsls	r3, r3, #11
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d10e      	bne.n	8003d6c <HAL_RCC_OscConfig+0xa4>
 8003d4e:	4baa      	ldr	r3, [pc, #680]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4ba9      	ldr	r3, [pc, #676]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003d54:	2180      	movs	r1, #128	; 0x80
 8003d56:	02c9      	lsls	r1, r1, #11
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	4ba6      	ldr	r3, [pc, #664]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	4ba5      	ldr	r3, [pc, #660]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003d62:	2180      	movs	r1, #128	; 0x80
 8003d64:	0249      	lsls	r1, r1, #9
 8003d66:	430a      	orrs	r2, r1
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	e00b      	b.n	8003d84 <HAL_RCC_OscConfig+0xbc>
 8003d6c:	4ba2      	ldr	r3, [pc, #648]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4ba1      	ldr	r3, [pc, #644]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003d72:	49a2      	ldr	r1, [pc, #648]	; (8003ffc <HAL_RCC_OscConfig+0x334>)
 8003d74:	400a      	ands	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	4b9f      	ldr	r3, [pc, #636]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	4b9e      	ldr	r3, [pc, #632]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003d7e:	49a0      	ldr	r1, [pc, #640]	; (8004000 <HAL_RCC_OscConfig+0x338>)
 8003d80:	400a      	ands	r2, r1
 8003d82:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d014      	beq.n	8003db6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7ff fca4 	bl	80036d8 <HAL_GetTick>
 8003d90:	0003      	movs	r3, r0
 8003d92:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d96:	f7ff fc9f 	bl	80036d8 <HAL_GetTick>
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b64      	cmp	r3, #100	; 0x64
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e2e9      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003da8:	4b93      	ldr	r3, [pc, #588]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	029b      	lsls	r3, r3, #10
 8003db0:	4013      	ands	r3, r2
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0xce>
 8003db4:	e015      	b.n	8003de2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db6:	f7ff fc8f 	bl	80036d8 <HAL_GetTick>
 8003dba:	0003      	movs	r3, r0
 8003dbc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc0:	f7ff fc8a 	bl	80036d8 <HAL_GetTick>
 8003dc4:	0002      	movs	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b64      	cmp	r3, #100	; 0x64
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e2d4      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dd2:	4b89      	ldr	r3, [pc, #548]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	029b      	lsls	r3, r3, #10
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0xf8>
 8003dde:	e000      	b.n	8003de2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2202      	movs	r2, #2
 8003de8:	4013      	ands	r3, r2
 8003dea:	d100      	bne.n	8003dee <HAL_RCC_OscConfig+0x126>
 8003dec:	e099      	b.n	8003f22 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dee:	4b82      	ldr	r3, [pc, #520]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2238      	movs	r2, #56	; 0x38
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003df8:	4b7f      	ldr	r3, [pc, #508]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	4013      	ands	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b10      	cmp	r3, #16
 8003e06:	d102      	bne.n	8003e0e <HAL_RCC_OscConfig+0x146>
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d002      	beq.n	8003e14 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d135      	bne.n	8003e80 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e14:	4b78      	ldr	r3, [pc, #480]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	2380      	movs	r3, #128	; 0x80
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_OscConfig+0x164>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e2a7      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2c:	4b72      	ldr	r3, [pc, #456]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4a74      	ldr	r2, [pc, #464]	; (8004004 <HAL_RCC_OscConfig+0x33c>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	0019      	movs	r1, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	021a      	lsls	r2, r3, #8
 8003e3c:	4b6e      	ldr	r3, [pc, #440]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d112      	bne.n	8003e6e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e48:	4b6b      	ldr	r3, [pc, #428]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a6e      	ldr	r2, [pc, #440]	; (8004008 <HAL_RCC_OscConfig+0x340>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	0019      	movs	r1, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	4b68      	ldr	r3, [pc, #416]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003e5c:	4b66      	ldr	r3, [pc, #408]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	0adb      	lsrs	r3, r3, #11
 8003e62:	2207      	movs	r2, #7
 8003e64:	4013      	ands	r3, r2
 8003e66:	4a69      	ldr	r2, [pc, #420]	; (800400c <HAL_RCC_OscConfig+0x344>)
 8003e68:	40da      	lsrs	r2, r3
 8003e6a:	4b69      	ldr	r3, [pc, #420]	; (8004010 <HAL_RCC_OscConfig+0x348>)
 8003e6c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e6e:	4b69      	ldr	r3, [pc, #420]	; (8004014 <HAL_RCC_OscConfig+0x34c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	0018      	movs	r0, r3
 8003e74:	f7ff fbd4 	bl	8003620 <HAL_InitTick>
 8003e78:	1e03      	subs	r3, r0, #0
 8003e7a:	d051      	beq.n	8003f20 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e27d      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d030      	beq.n	8003eea <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e88:	4b5b      	ldr	r3, [pc, #364]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a5e      	ldr	r2, [pc, #376]	; (8004008 <HAL_RCC_OscConfig+0x340>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	0019      	movs	r1, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	4b58      	ldr	r3, [pc, #352]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003e9c:	4b56      	ldr	r3, [pc, #344]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4b55      	ldr	r3, [pc, #340]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003ea2:	2180      	movs	r1, #128	; 0x80
 8003ea4:	0049      	lsls	r1, r1, #1
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eaa:	f7ff fc15 	bl	80036d8 <HAL_GetTick>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb4:	f7ff fc10 	bl	80036d8 <HAL_GetTick>
 8003eb8:	0002      	movs	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e25a      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec6:	4b4c      	ldr	r3, [pc, #304]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	2380      	movs	r3, #128	; 0x80
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed2:	4b49      	ldr	r3, [pc, #292]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4a4b      	ldr	r2, [pc, #300]	; (8004004 <HAL_RCC_OscConfig+0x33c>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	0019      	movs	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	021a      	lsls	r2, r3, #8
 8003ee2:	4b45      	ldr	r3, [pc, #276]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]
 8003ee8:	e01b      	b.n	8003f22 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003eea:	4b43      	ldr	r3, [pc, #268]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	4b42      	ldr	r3, [pc, #264]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003ef0:	4949      	ldr	r1, [pc, #292]	; (8004018 <HAL_RCC_OscConfig+0x350>)
 8003ef2:	400a      	ands	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef6:	f7ff fbef 	bl	80036d8 <HAL_GetTick>
 8003efa:	0003      	movs	r3, r0
 8003efc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f00:	f7ff fbea 	bl	80036d8 <HAL_GetTick>
 8003f04:	0002      	movs	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e234      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f12:	4b39      	ldr	r3, [pc, #228]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	2380      	movs	r3, #128	; 0x80
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x238>
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f20:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2208      	movs	r2, #8
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d047      	beq.n	8003fbc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f2c:	4b32      	ldr	r3, [pc, #200]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2238      	movs	r2, #56	; 0x38
 8003f32:	4013      	ands	r3, r2
 8003f34:	2b18      	cmp	r3, #24
 8003f36:	d10a      	bne.n	8003f4e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003f38:	4b2f      	ldr	r3, [pc, #188]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d03c      	beq.n	8003fbc <HAL_RCC_OscConfig+0x2f4>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d138      	bne.n	8003fbc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e216      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d019      	beq.n	8003f8a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003f56:	4b28      	ldr	r3, [pc, #160]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003f58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f5a:	4b27      	ldr	r3, [pc, #156]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f62:	f7ff fbb9 	bl	80036d8 <HAL_GetTick>
 8003f66:	0003      	movs	r3, r0
 8003f68:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f6c:	f7ff fbb4 	bl	80036d8 <HAL_GetTick>
 8003f70:	0002      	movs	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e1fe      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f82:	2202      	movs	r2, #2
 8003f84:	4013      	ands	r3, r2
 8003f86:	d0f1      	beq.n	8003f6c <HAL_RCC_OscConfig+0x2a4>
 8003f88:	e018      	b.n	8003fbc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003f8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003f90:	2101      	movs	r1, #1
 8003f92:	438a      	bics	r2, r1
 8003f94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f96:	f7ff fb9f 	bl	80036d8 <HAL_GetTick>
 8003f9a:	0003      	movs	r3, r0
 8003f9c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa0:	f7ff fb9a 	bl	80036d8 <HAL_GetTick>
 8003fa4:	0002      	movs	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e1e4      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fb2:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d1f1      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2204      	movs	r2, #4
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d100      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x300>
 8003fc6:	e0c7      	b.n	8004158 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc8:	231f      	movs	r3, #31
 8003fca:	18fb      	adds	r3, r7, r3
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2238      	movs	r2, #56	; 0x38
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d11f      	bne.n	800401c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_RCC_OscConfig+0x330>)
 8003fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	d100      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x320>
 8003fe6:	e0b7      	b.n	8004158 <HAL_RCC_OscConfig+0x490>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d000      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x32a>
 8003ff0:	e0b2      	b.n	8004158 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e1c2      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	fffeffff 	.word	0xfffeffff
 8004000:	fffbffff 	.word	0xfffbffff
 8004004:	ffff80ff 	.word	0xffff80ff
 8004008:	ffffc7ff 	.word	0xffffc7ff
 800400c:	00f42400 	.word	0x00f42400
 8004010:	20000008 	.word	0x20000008
 8004014:	2000000c 	.word	0x2000000c
 8004018:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800401c:	4bb5      	ldr	r3, [pc, #724]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 800401e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	055b      	lsls	r3, r3, #21
 8004024:	4013      	ands	r3, r2
 8004026:	d101      	bne.n	800402c <HAL_RCC_OscConfig+0x364>
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <HAL_RCC_OscConfig+0x366>
 800402c:	2300      	movs	r3, #0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d011      	beq.n	8004056 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004032:	4bb0      	ldr	r3, [pc, #704]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 8004034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004036:	4baf      	ldr	r3, [pc, #700]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 8004038:	2180      	movs	r1, #128	; 0x80
 800403a:	0549      	lsls	r1, r1, #21
 800403c:	430a      	orrs	r2, r1
 800403e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004040:	4bac      	ldr	r3, [pc, #688]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 8004042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004044:	2380      	movs	r3, #128	; 0x80
 8004046:	055b      	lsls	r3, r3, #21
 8004048:	4013      	ands	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800404e:	231f      	movs	r3, #31
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	2201      	movs	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004056:	4ba8      	ldr	r3, [pc, #672]	; (80042f8 <HAL_RCC_OscConfig+0x630>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	2380      	movs	r3, #128	; 0x80
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4013      	ands	r3, r2
 8004060:	d11a      	bne.n	8004098 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004062:	4ba5      	ldr	r3, [pc, #660]	; (80042f8 <HAL_RCC_OscConfig+0x630>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4ba4      	ldr	r3, [pc, #656]	; (80042f8 <HAL_RCC_OscConfig+0x630>)
 8004068:	2180      	movs	r1, #128	; 0x80
 800406a:	0049      	lsls	r1, r1, #1
 800406c:	430a      	orrs	r2, r1
 800406e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004070:	f7ff fb32 	bl	80036d8 <HAL_GetTick>
 8004074:	0003      	movs	r3, r0
 8004076:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407a:	f7ff fb2d 	bl	80036d8 <HAL_GetTick>
 800407e:	0002      	movs	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e177      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800408c:	4b9a      	ldr	r3, [pc, #616]	; (80042f8 <HAL_RCC_OscConfig+0x630>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4013      	ands	r3, r2
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d106      	bne.n	80040ae <HAL_RCC_OscConfig+0x3e6>
 80040a0:	4b94      	ldr	r3, [pc, #592]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80040a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040a4:	4b93      	ldr	r3, [pc, #588]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80040a6:	2101      	movs	r1, #1
 80040a8:	430a      	orrs	r2, r1
 80040aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80040ac:	e01c      	b.n	80040e8 <HAL_RCC_OscConfig+0x420>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b05      	cmp	r3, #5
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x408>
 80040b6:	4b8f      	ldr	r3, [pc, #572]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80040b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040ba:	4b8e      	ldr	r3, [pc, #568]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80040bc:	2104      	movs	r1, #4
 80040be:	430a      	orrs	r2, r1
 80040c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80040c2:	4b8c      	ldr	r3, [pc, #560]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80040c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040c6:	4b8b      	ldr	r3, [pc, #556]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80040c8:	2101      	movs	r1, #1
 80040ca:	430a      	orrs	r2, r1
 80040cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80040ce:	e00b      	b.n	80040e8 <HAL_RCC_OscConfig+0x420>
 80040d0:	4b88      	ldr	r3, [pc, #544]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80040d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040d4:	4b87      	ldr	r3, [pc, #540]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80040d6:	2101      	movs	r1, #1
 80040d8:	438a      	bics	r2, r1
 80040da:	65da      	str	r2, [r3, #92]	; 0x5c
 80040dc:	4b85      	ldr	r3, [pc, #532]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80040de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040e0:	4b84      	ldr	r3, [pc, #528]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80040e2:	2104      	movs	r1, #4
 80040e4:	438a      	bics	r2, r1
 80040e6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d014      	beq.n	800411a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7ff faf2 	bl	80036d8 <HAL_GetTick>
 80040f4:	0003      	movs	r3, r0
 80040f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f8:	e009      	b.n	800410e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fa:	f7ff faed 	bl	80036d8 <HAL_GetTick>
 80040fe:	0002      	movs	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	4a7d      	ldr	r2, [pc, #500]	; (80042fc <HAL_RCC_OscConfig+0x634>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e136      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800410e:	4b79      	ldr	r3, [pc, #484]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 8004110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004112:	2202      	movs	r2, #2
 8004114:	4013      	ands	r3, r2
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0x432>
 8004118:	e013      	b.n	8004142 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411a:	f7ff fadd 	bl	80036d8 <HAL_GetTick>
 800411e:	0003      	movs	r3, r0
 8004120:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004122:	e009      	b.n	8004138 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004124:	f7ff fad8 	bl	80036d8 <HAL_GetTick>
 8004128:	0002      	movs	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	4a73      	ldr	r2, [pc, #460]	; (80042fc <HAL_RCC_OscConfig+0x634>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e121      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004138:	4b6e      	ldr	r3, [pc, #440]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 800413a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413c:	2202      	movs	r2, #2
 800413e:	4013      	ands	r3, r2
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004142:	231f      	movs	r3, #31
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d105      	bne.n	8004158 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800414c:	4b69      	ldr	r3, [pc, #420]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 800414e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004150:	4b68      	ldr	r3, [pc, #416]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 8004152:	496b      	ldr	r1, [pc, #428]	; (8004300 <HAL_RCC_OscConfig+0x638>)
 8004154:	400a      	ands	r2, r1
 8004156:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2220      	movs	r2, #32
 800415e:	4013      	ands	r3, r2
 8004160:	d039      	beq.n	80041d6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01b      	beq.n	80041a2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800416a:	4b62      	ldr	r3, [pc, #392]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	4b61      	ldr	r3, [pc, #388]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 8004170:	2180      	movs	r1, #128	; 0x80
 8004172:	03c9      	lsls	r1, r1, #15
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7ff faae 	bl	80036d8 <HAL_GetTick>
 800417c:	0003      	movs	r3, r0
 800417e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004182:	f7ff faa9 	bl	80036d8 <HAL_GetTick>
 8004186:	0002      	movs	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e0f3      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004194:	4b57      	ldr	r3, [pc, #348]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	041b      	lsls	r3, r3, #16
 800419c:	4013      	ands	r3, r2
 800419e:	d0f0      	beq.n	8004182 <HAL_RCC_OscConfig+0x4ba>
 80041a0:	e019      	b.n	80041d6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041a2:	4b54      	ldr	r3, [pc, #336]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	4b53      	ldr	r3, [pc, #332]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80041a8:	4956      	ldr	r1, [pc, #344]	; (8004304 <HAL_RCC_OscConfig+0x63c>)
 80041aa:	400a      	ands	r2, r1
 80041ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ae:	f7ff fa93 	bl	80036d8 <HAL_GetTick>
 80041b2:	0003      	movs	r3, r0
 80041b4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041b8:	f7ff fa8e 	bl	80036d8 <HAL_GetTick>
 80041bc:	0002      	movs	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e0d8      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80041ca:	4b4a      	ldr	r3, [pc, #296]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	041b      	lsls	r3, r3, #16
 80041d2:	4013      	ands	r3, r2
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d100      	bne.n	80041e0 <HAL_RCC_OscConfig+0x518>
 80041de:	e0cc      	b.n	800437a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041e0:	4b44      	ldr	r3, [pc, #272]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2238      	movs	r2, #56	; 0x38
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b10      	cmp	r3, #16
 80041ea:	d100      	bne.n	80041ee <HAL_RCC_OscConfig+0x526>
 80041ec:	e07b      	b.n	80042e6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d156      	bne.n	80042a4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f6:	4b3f      	ldr	r3, [pc, #252]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4b3e      	ldr	r3, [pc, #248]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80041fc:	4942      	ldr	r1, [pc, #264]	; (8004308 <HAL_RCC_OscConfig+0x640>)
 80041fe:	400a      	ands	r2, r1
 8004200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004202:	f7ff fa69 	bl	80036d8 <HAL_GetTick>
 8004206:	0003      	movs	r3, r0
 8004208:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420c:	f7ff fa64 	bl	80036d8 <HAL_GetTick>
 8004210:	0002      	movs	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e0ae      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800421e:	4b35      	ldr	r3, [pc, #212]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	049b      	lsls	r3, r3, #18
 8004226:	4013      	ands	r3, r2
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800422a:	4b32      	ldr	r3, [pc, #200]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	4a37      	ldr	r2, [pc, #220]	; (800430c <HAL_RCC_OscConfig+0x644>)
 8004230:	4013      	ands	r3, r2
 8004232:	0019      	movs	r1, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	431a      	orrs	r2, r3
 8004258:	4b26      	ldr	r3, [pc, #152]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 800425a:	430a      	orrs	r2, r1
 800425c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800425e:	4b25      	ldr	r3, [pc, #148]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4b24      	ldr	r3, [pc, #144]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 8004264:	2180      	movs	r1, #128	; 0x80
 8004266:	0449      	lsls	r1, r1, #17
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800426c:	4b21      	ldr	r3, [pc, #132]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	4b20      	ldr	r3, [pc, #128]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 8004272:	2180      	movs	r1, #128	; 0x80
 8004274:	0549      	lsls	r1, r1, #21
 8004276:	430a      	orrs	r2, r1
 8004278:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427a:	f7ff fa2d 	bl	80036d8 <HAL_GetTick>
 800427e:	0003      	movs	r3, r0
 8004280:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004284:	f7ff fa28 	bl	80036d8 <HAL_GetTick>
 8004288:	0002      	movs	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e072      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004296:	4b17      	ldr	r3, [pc, #92]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	2380      	movs	r3, #128	; 0x80
 800429c:	049b      	lsls	r3, r3, #18
 800429e:	4013      	ands	r3, r2
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0x5bc>
 80042a2:	e06a      	b.n	800437a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a4:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80042aa:	4917      	ldr	r1, [pc, #92]	; (8004308 <HAL_RCC_OscConfig+0x640>)
 80042ac:	400a      	ands	r2, r1
 80042ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b0:	f7ff fa12 	bl	80036d8 <HAL_GetTick>
 80042b4:	0003      	movs	r3, r0
 80042b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ba:	f7ff fa0d 	bl	80036d8 <HAL_GetTick>
 80042be:	0002      	movs	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e057      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	2380      	movs	r3, #128	; 0x80
 80042d2:	049b      	lsls	r3, r3, #18
 80042d4:	4013      	ands	r3, r2
 80042d6:	d1f0      	bne.n	80042ba <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80042d8:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HAL_RCC_OscConfig+0x62c>)
 80042de:	490c      	ldr	r1, [pc, #48]	; (8004310 <HAL_RCC_OscConfig+0x648>)
 80042e0:	400a      	ands	r2, r1
 80042e2:	60da      	str	r2, [r3, #12]
 80042e4:	e049      	b.n	800437a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d112      	bne.n	8004314 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e044      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	40021000 	.word	0x40021000
 80042f8:	40007000 	.word	0x40007000
 80042fc:	00001388 	.word	0x00001388
 8004300:	efffffff 	.word	0xefffffff
 8004304:	ffbfffff 	.word	0xffbfffff
 8004308:	feffffff 	.word	0xfeffffff
 800430c:	11c1808c 	.word	0x11c1808c
 8004310:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <HAL_RCC_OscConfig+0x6bc>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2203      	movs	r2, #3
 800431e:	401a      	ands	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	429a      	cmp	r2, r3
 8004326:	d126      	bne.n	8004376 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2270      	movs	r2, #112	; 0x70
 800432c:	401a      	ands	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004332:	429a      	cmp	r2, r3
 8004334:	d11f      	bne.n	8004376 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	23fe      	movs	r3, #254	; 0xfe
 800433a:	01db      	lsls	r3, r3, #7
 800433c:	401a      	ands	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d116      	bne.n	8004376 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	23f8      	movs	r3, #248	; 0xf8
 800434c:	039b      	lsls	r3, r3, #14
 800434e:	401a      	ands	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004354:	429a      	cmp	r2, r3
 8004356:	d10e      	bne.n	8004376 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	23e0      	movs	r3, #224	; 0xe0
 800435c:	051b      	lsls	r3, r3, #20
 800435e:	401a      	ands	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d106      	bne.n	8004376 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	0f5b      	lsrs	r3, r3, #29
 800436c:	075a      	lsls	r2, r3, #29
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d001      	beq.n	800437a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	0018      	movs	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	b008      	add	sp, #32
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40021000 	.word	0x40021000

08004388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0e9      	b.n	8004570 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800439c:	4b76      	ldr	r3, [pc, #472]	; (8004578 <HAL_RCC_ClockConfig+0x1f0>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2207      	movs	r2, #7
 80043a2:	4013      	ands	r3, r2
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d91e      	bls.n	80043e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b73      	ldr	r3, [pc, #460]	; (8004578 <HAL_RCC_ClockConfig+0x1f0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2207      	movs	r2, #7
 80043b0:	4393      	bics	r3, r2
 80043b2:	0019      	movs	r1, r3
 80043b4:	4b70      	ldr	r3, [pc, #448]	; (8004578 <HAL_RCC_ClockConfig+0x1f0>)
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043bc:	f7ff f98c 	bl	80036d8 <HAL_GetTick>
 80043c0:	0003      	movs	r3, r0
 80043c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043c4:	e009      	b.n	80043da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c6:	f7ff f987 	bl	80036d8 <HAL_GetTick>
 80043ca:	0002      	movs	r2, r0
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	4a6a      	ldr	r2, [pc, #424]	; (800457c <HAL_RCC_ClockConfig+0x1f4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e0ca      	b.n	8004570 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043da:	4b67      	ldr	r3, [pc, #412]	; (8004578 <HAL_RCC_ClockConfig+0x1f0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2207      	movs	r2, #7
 80043e0:	4013      	ands	r3, r2
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d1ee      	bne.n	80043c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2202      	movs	r2, #2
 80043ee:	4013      	ands	r3, r2
 80043f0:	d015      	beq.n	800441e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2204      	movs	r2, #4
 80043f8:	4013      	ands	r3, r2
 80043fa:	d006      	beq.n	800440a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80043fc:	4b60      	ldr	r3, [pc, #384]	; (8004580 <HAL_RCC_ClockConfig+0x1f8>)
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	4b5f      	ldr	r3, [pc, #380]	; (8004580 <HAL_RCC_ClockConfig+0x1f8>)
 8004402:	21e0      	movs	r1, #224	; 0xe0
 8004404:	01c9      	lsls	r1, r1, #7
 8004406:	430a      	orrs	r2, r1
 8004408:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800440a:	4b5d      	ldr	r3, [pc, #372]	; (8004580 <HAL_RCC_ClockConfig+0x1f8>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	4a5d      	ldr	r2, [pc, #372]	; (8004584 <HAL_RCC_ClockConfig+0x1fc>)
 8004410:	4013      	ands	r3, r2
 8004412:	0019      	movs	r1, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	4b59      	ldr	r3, [pc, #356]	; (8004580 <HAL_RCC_ClockConfig+0x1f8>)
 800441a:	430a      	orrs	r2, r1
 800441c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2201      	movs	r2, #1
 8004424:	4013      	ands	r3, r2
 8004426:	d057      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d107      	bne.n	8004440 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004430:	4b53      	ldr	r3, [pc, #332]	; (8004580 <HAL_RCC_ClockConfig+0x1f8>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	029b      	lsls	r3, r3, #10
 8004438:	4013      	ands	r3, r2
 800443a:	d12b      	bne.n	8004494 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e097      	b.n	8004570 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d107      	bne.n	8004458 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004448:	4b4d      	ldr	r3, [pc, #308]	; (8004580 <HAL_RCC_ClockConfig+0x1f8>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	049b      	lsls	r3, r3, #18
 8004450:	4013      	ands	r3, r2
 8004452:	d11f      	bne.n	8004494 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e08b      	b.n	8004570 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d107      	bne.n	8004470 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004460:	4b47      	ldr	r3, [pc, #284]	; (8004580 <HAL_RCC_ClockConfig+0x1f8>)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4013      	ands	r3, r2
 800446a:	d113      	bne.n	8004494 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e07f      	b.n	8004570 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b03      	cmp	r3, #3
 8004476:	d106      	bne.n	8004486 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004478:	4b41      	ldr	r3, [pc, #260]	; (8004580 <HAL_RCC_ClockConfig+0x1f8>)
 800447a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447c:	2202      	movs	r2, #2
 800447e:	4013      	ands	r3, r2
 8004480:	d108      	bne.n	8004494 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e074      	b.n	8004570 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004486:	4b3e      	ldr	r3, [pc, #248]	; (8004580 <HAL_RCC_ClockConfig+0x1f8>)
 8004488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448a:	2202      	movs	r2, #2
 800448c:	4013      	ands	r3, r2
 800448e:	d101      	bne.n	8004494 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e06d      	b.n	8004570 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004494:	4b3a      	ldr	r3, [pc, #232]	; (8004580 <HAL_RCC_ClockConfig+0x1f8>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2207      	movs	r2, #7
 800449a:	4393      	bics	r3, r2
 800449c:	0019      	movs	r1, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	4b37      	ldr	r3, [pc, #220]	; (8004580 <HAL_RCC_ClockConfig+0x1f8>)
 80044a4:	430a      	orrs	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a8:	f7ff f916 	bl	80036d8 <HAL_GetTick>
 80044ac:	0003      	movs	r3, r0
 80044ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b0:	e009      	b.n	80044c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b2:	f7ff f911 	bl	80036d8 <HAL_GetTick>
 80044b6:	0002      	movs	r2, r0
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	4a2f      	ldr	r2, [pc, #188]	; (800457c <HAL_RCC_ClockConfig+0x1f4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e054      	b.n	8004570 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c6:	4b2e      	ldr	r3, [pc, #184]	; (8004580 <HAL_RCC_ClockConfig+0x1f8>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2238      	movs	r2, #56	; 0x38
 80044cc:	401a      	ands	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d1ec      	bne.n	80044b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044d8:	4b27      	ldr	r3, [pc, #156]	; (8004578 <HAL_RCC_ClockConfig+0x1f0>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2207      	movs	r2, #7
 80044de:	4013      	ands	r3, r2
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d21e      	bcs.n	8004524 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b24      	ldr	r3, [pc, #144]	; (8004578 <HAL_RCC_ClockConfig+0x1f0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2207      	movs	r2, #7
 80044ec:	4393      	bics	r3, r2
 80044ee:	0019      	movs	r1, r3
 80044f0:	4b21      	ldr	r3, [pc, #132]	; (8004578 <HAL_RCC_ClockConfig+0x1f0>)
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044f8:	f7ff f8ee 	bl	80036d8 <HAL_GetTick>
 80044fc:	0003      	movs	r3, r0
 80044fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004500:	e009      	b.n	8004516 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004502:	f7ff f8e9 	bl	80036d8 <HAL_GetTick>
 8004506:	0002      	movs	r2, r0
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	4a1b      	ldr	r2, [pc, #108]	; (800457c <HAL_RCC_ClockConfig+0x1f4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e02c      	b.n	8004570 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004516:	4b18      	ldr	r3, [pc, #96]	; (8004578 <HAL_RCC_ClockConfig+0x1f0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2207      	movs	r2, #7
 800451c:	4013      	ands	r3, r2
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d1ee      	bne.n	8004502 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2204      	movs	r2, #4
 800452a:	4013      	ands	r3, r2
 800452c:	d009      	beq.n	8004542 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800452e:	4b14      	ldr	r3, [pc, #80]	; (8004580 <HAL_RCC_ClockConfig+0x1f8>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	4a15      	ldr	r2, [pc, #84]	; (8004588 <HAL_RCC_ClockConfig+0x200>)
 8004534:	4013      	ands	r3, r2
 8004536:	0019      	movs	r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	4b10      	ldr	r3, [pc, #64]	; (8004580 <HAL_RCC_ClockConfig+0x1f8>)
 800453e:	430a      	orrs	r2, r1
 8004540:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004542:	f000 f829 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8004546:	0001      	movs	r1, r0
 8004548:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <HAL_RCC_ClockConfig+0x1f8>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	0a1b      	lsrs	r3, r3, #8
 800454e:	220f      	movs	r2, #15
 8004550:	401a      	ands	r2, r3
 8004552:	4b0e      	ldr	r3, [pc, #56]	; (800458c <HAL_RCC_ClockConfig+0x204>)
 8004554:	0092      	lsls	r2, r2, #2
 8004556:	58d3      	ldr	r3, [r2, r3]
 8004558:	221f      	movs	r2, #31
 800455a:	4013      	ands	r3, r2
 800455c:	000a      	movs	r2, r1
 800455e:	40da      	lsrs	r2, r3
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCC_ClockConfig+0x208>)
 8004562:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_RCC_ClockConfig+0x20c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	0018      	movs	r0, r3
 800456a:	f7ff f859 	bl	8003620 <HAL_InitTick>
 800456e:	0003      	movs	r3, r0
}
 8004570:	0018      	movs	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	b004      	add	sp, #16
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40022000 	.word	0x40022000
 800457c:	00001388 	.word	0x00001388
 8004580:	40021000 	.word	0x40021000
 8004584:	fffff0ff 	.word	0xfffff0ff
 8004588:	ffff8fff 	.word	0xffff8fff
 800458c:	0800f7f8 	.word	0x0800f7f8
 8004590:	20000008 	.word	0x20000008
 8004594:	2000000c 	.word	0x2000000c

08004598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800459e:	4b3c      	ldr	r3, [pc, #240]	; (8004690 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2238      	movs	r2, #56	; 0x38
 80045a4:	4013      	ands	r3, r2
 80045a6:	d10f      	bne.n	80045c8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80045a8:	4b39      	ldr	r3, [pc, #228]	; (8004690 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	0adb      	lsrs	r3, r3, #11
 80045ae:	2207      	movs	r2, #7
 80045b0:	4013      	ands	r3, r2
 80045b2:	2201      	movs	r2, #1
 80045b4:	409a      	lsls	r2, r3
 80045b6:	0013      	movs	r3, r2
 80045b8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80045ba:	6839      	ldr	r1, [r7, #0]
 80045bc:	4835      	ldr	r0, [pc, #212]	; (8004694 <HAL_RCC_GetSysClockFreq+0xfc>)
 80045be:	f7fb fdbd 	bl	800013c <__udivsi3>
 80045c2:	0003      	movs	r3, r0
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	e05d      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045c8:	4b31      	ldr	r3, [pc, #196]	; (8004690 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2238      	movs	r2, #56	; 0x38
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d102      	bne.n	80045da <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045d4:	4b30      	ldr	r3, [pc, #192]	; (8004698 <HAL_RCC_GetSysClockFreq+0x100>)
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	e054      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045da:	4b2d      	ldr	r3, [pc, #180]	; (8004690 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2238      	movs	r2, #56	; 0x38
 80045e0:	4013      	ands	r3, r2
 80045e2:	2b10      	cmp	r3, #16
 80045e4:	d138      	bne.n	8004658 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80045e6:	4b2a      	ldr	r3, [pc, #168]	; (8004690 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	2203      	movs	r2, #3
 80045ec:	4013      	ands	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045f0:	4b27      	ldr	r3, [pc, #156]	; (8004690 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	2207      	movs	r2, #7
 80045f8:	4013      	ands	r3, r2
 80045fa:	3301      	adds	r3, #1
 80045fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b03      	cmp	r3, #3
 8004602:	d10d      	bne.n	8004620 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	4824      	ldr	r0, [pc, #144]	; (8004698 <HAL_RCC_GetSysClockFreq+0x100>)
 8004608:	f7fb fd98 	bl	800013c <__udivsi3>
 800460c:	0003      	movs	r3, r0
 800460e:	0019      	movs	r1, r3
 8004610:	4b1f      	ldr	r3, [pc, #124]	; (8004690 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	0a1b      	lsrs	r3, r3, #8
 8004616:	227f      	movs	r2, #127	; 0x7f
 8004618:	4013      	ands	r3, r2
 800461a:	434b      	muls	r3, r1
 800461c:	617b      	str	r3, [r7, #20]
        break;
 800461e:	e00d      	b.n	800463c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	481c      	ldr	r0, [pc, #112]	; (8004694 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004624:	f7fb fd8a 	bl	800013c <__udivsi3>
 8004628:	0003      	movs	r3, r0
 800462a:	0019      	movs	r1, r3
 800462c:	4b18      	ldr	r3, [pc, #96]	; (8004690 <HAL_RCC_GetSysClockFreq+0xf8>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	0a1b      	lsrs	r3, r3, #8
 8004632:	227f      	movs	r2, #127	; 0x7f
 8004634:	4013      	ands	r3, r2
 8004636:	434b      	muls	r3, r1
 8004638:	617b      	str	r3, [r7, #20]
        break;
 800463a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800463c:	4b14      	ldr	r3, [pc, #80]	; (8004690 <HAL_RCC_GetSysClockFreq+0xf8>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	0f5b      	lsrs	r3, r3, #29
 8004642:	2207      	movs	r2, #7
 8004644:	4013      	ands	r3, r2
 8004646:	3301      	adds	r3, #1
 8004648:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	6978      	ldr	r0, [r7, #20]
 800464e:	f7fb fd75 	bl	800013c <__udivsi3>
 8004652:	0003      	movs	r3, r0
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	e015      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004658:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <HAL_RCC_GetSysClockFreq+0xf8>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2238      	movs	r2, #56	; 0x38
 800465e:	4013      	ands	r3, r2
 8004660:	2b20      	cmp	r3, #32
 8004662:	d103      	bne.n	800466c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004664:	2380      	movs	r3, #128	; 0x80
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	e00b      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800466c:	4b08      	ldr	r3, [pc, #32]	; (8004690 <HAL_RCC_GetSysClockFreq+0xf8>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2238      	movs	r2, #56	; 0x38
 8004672:	4013      	ands	r3, r2
 8004674:	2b18      	cmp	r3, #24
 8004676:	d103      	bne.n	8004680 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004678:	23fa      	movs	r3, #250	; 0xfa
 800467a:	01db      	lsls	r3, r3, #7
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	e001      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004684:	693b      	ldr	r3, [r7, #16]
}
 8004686:	0018      	movs	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	b006      	add	sp, #24
 800468c:	bd80      	pop	{r7, pc}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	40021000 	.word	0x40021000
 8004694:	00f42400 	.word	0x00f42400
 8004698:	007a1200 	.word	0x007a1200

0800469c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046a0:	4b02      	ldr	r3, [pc, #8]	; (80046ac <HAL_RCC_GetHCLKFreq+0x10>)
 80046a2:	681b      	ldr	r3, [r3, #0]
}
 80046a4:	0018      	movs	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	20000008 	.word	0x20000008

080046b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046b0:	b5b0      	push	{r4, r5, r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80046b4:	f7ff fff2 	bl	800469c <HAL_RCC_GetHCLKFreq>
 80046b8:	0004      	movs	r4, r0
 80046ba:	f7ff faf9 	bl	8003cb0 <LL_RCC_GetAPB1Prescaler>
 80046be:	0003      	movs	r3, r0
 80046c0:	0b1a      	lsrs	r2, r3, #12
 80046c2:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046c4:	0092      	lsls	r2, r2, #2
 80046c6:	58d3      	ldr	r3, [r2, r3]
 80046c8:	221f      	movs	r2, #31
 80046ca:	4013      	ands	r3, r2
 80046cc:	40dc      	lsrs	r4, r3
 80046ce:	0023      	movs	r3, r4
}
 80046d0:	0018      	movs	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bdb0      	pop	{r4, r5, r7, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	0800f838 	.word	0x0800f838

080046dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80046e4:	2313      	movs	r3, #19
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	2200      	movs	r2, #0
 80046ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046ec:	2312      	movs	r3, #18
 80046ee:	18fb      	adds	r3, r7, r3
 80046f0:	2200      	movs	r2, #0
 80046f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	029b      	lsls	r3, r3, #10
 80046fc:	4013      	ands	r3, r2
 80046fe:	d100      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004700:	e0ad      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004702:	2011      	movs	r0, #17
 8004704:	183b      	adds	r3, r7, r0
 8004706:	2200      	movs	r2, #0
 8004708:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800470a:	4b47      	ldr	r3, [pc, #284]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800470c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800470e:	2380      	movs	r3, #128	; 0x80
 8004710:	055b      	lsls	r3, r3, #21
 8004712:	4013      	ands	r3, r2
 8004714:	d110      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004716:	4b44      	ldr	r3, [pc, #272]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800471a:	4b43      	ldr	r3, [pc, #268]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800471c:	2180      	movs	r1, #128	; 0x80
 800471e:	0549      	lsls	r1, r1, #21
 8004720:	430a      	orrs	r2, r1
 8004722:	63da      	str	r2, [r3, #60]	; 0x3c
 8004724:	4b40      	ldr	r3, [pc, #256]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	055b      	lsls	r3, r3, #21
 800472c:	4013      	ands	r3, r2
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004732:	183b      	adds	r3, r7, r0
 8004734:	2201      	movs	r2, #1
 8004736:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004738:	4b3c      	ldr	r3, [pc, #240]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	4b3b      	ldr	r3, [pc, #236]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800473e:	2180      	movs	r1, #128	; 0x80
 8004740:	0049      	lsls	r1, r1, #1
 8004742:	430a      	orrs	r2, r1
 8004744:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004746:	f7fe ffc7 	bl	80036d8 <HAL_GetTick>
 800474a:	0003      	movs	r3, r0
 800474c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800474e:	e00b      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004750:	f7fe ffc2 	bl	80036d8 <HAL_GetTick>
 8004754:	0002      	movs	r2, r0
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d904      	bls.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800475e:	2313      	movs	r3, #19
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	2203      	movs	r2, #3
 8004764:	701a      	strb	r2, [r3, #0]
        break;
 8004766:	e005      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004768:	4b30      	ldr	r3, [pc, #192]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	4013      	ands	r3, r2
 8004772:	d0ed      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004774:	2313      	movs	r3, #19
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d15e      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800477e:	4b2a      	ldr	r3, [pc, #168]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004780:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004782:	23c0      	movs	r3, #192	; 0xc0
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4013      	ands	r3, r2
 8004788:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d019      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	429a      	cmp	r2, r3
 8004798:	d014      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800479a:	4b23      	ldr	r3, [pc, #140]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800479c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479e:	4a24      	ldr	r2, [pc, #144]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047a4:	4b20      	ldr	r3, [pc, #128]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047a8:	4b1f      	ldr	r3, [pc, #124]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047aa:	2180      	movs	r1, #128	; 0x80
 80047ac:	0249      	lsls	r1, r1, #9
 80047ae:	430a      	orrs	r2, r1
 80047b0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047b2:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047b6:	4b1c      	ldr	r3, [pc, #112]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047b8:	491e      	ldr	r1, [pc, #120]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80047ba:	400a      	ands	r2, r1
 80047bc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047be:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2201      	movs	r2, #1
 80047c8:	4013      	ands	r3, r2
 80047ca:	d016      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fe ff84 	bl	80036d8 <HAL_GetTick>
 80047d0:	0003      	movs	r3, r0
 80047d2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d4:	e00c      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d6:	f7fe ff7f 	bl	80036d8 <HAL_GetTick>
 80047da:	0002      	movs	r2, r0
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	4a15      	ldr	r2, [pc, #84]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d904      	bls.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80047e6:	2313      	movs	r3, #19
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	2203      	movs	r2, #3
 80047ec:	701a      	strb	r2, [r3, #0]
            break;
 80047ee:	e004      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f0:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f4:	2202      	movs	r2, #2
 80047f6:	4013      	ands	r3, r2
 80047f8:	d0ed      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80047fa:	2313      	movs	r3, #19
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10a      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004804:	4b08      	ldr	r3, [pc, #32]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004808:	4a09      	ldr	r2, [pc, #36]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800480a:	4013      	ands	r3, r2
 800480c:	0019      	movs	r1, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004812:	4b05      	ldr	r3, [pc, #20]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004814:	430a      	orrs	r2, r1
 8004816:	65da      	str	r2, [r3, #92]	; 0x5c
 8004818:	e016      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800481a:	2312      	movs	r3, #18
 800481c:	18fb      	adds	r3, r7, r3
 800481e:	2213      	movs	r2, #19
 8004820:	18ba      	adds	r2, r7, r2
 8004822:	7812      	ldrb	r2, [r2, #0]
 8004824:	701a      	strb	r2, [r3, #0]
 8004826:	e00f      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004828:	40021000 	.word	0x40021000
 800482c:	40007000 	.word	0x40007000
 8004830:	fffffcff 	.word	0xfffffcff
 8004834:	fffeffff 	.word	0xfffeffff
 8004838:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483c:	2312      	movs	r3, #18
 800483e:	18fb      	adds	r3, r7, r3
 8004840:	2213      	movs	r2, #19
 8004842:	18ba      	adds	r2, r7, r2
 8004844:	7812      	ldrb	r2, [r2, #0]
 8004846:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004848:	2311      	movs	r3, #17
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d105      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004852:	4bb6      	ldr	r3, [pc, #728]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004854:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004856:	4bb5      	ldr	r3, [pc, #724]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004858:	49b5      	ldr	r1, [pc, #724]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800485a:	400a      	ands	r2, r1
 800485c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2201      	movs	r2, #1
 8004864:	4013      	ands	r3, r2
 8004866:	d009      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004868:	4bb0      	ldr	r3, [pc, #704]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486c:	2203      	movs	r2, #3
 800486e:	4393      	bics	r3, r2
 8004870:	0019      	movs	r1, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	4bad      	ldr	r3, [pc, #692]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004878:	430a      	orrs	r2, r1
 800487a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2202      	movs	r2, #2
 8004882:	4013      	ands	r3, r2
 8004884:	d009      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004886:	4ba9      	ldr	r3, [pc, #676]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488a:	220c      	movs	r2, #12
 800488c:	4393      	bics	r3, r2
 800488e:	0019      	movs	r1, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	4ba5      	ldr	r3, [pc, #660]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004896:	430a      	orrs	r2, r1
 8004898:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2204      	movs	r2, #4
 80048a0:	4013      	ands	r3, r2
 80048a2:	d009      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048a4:	4ba1      	ldr	r3, [pc, #644]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a8:	2230      	movs	r2, #48	; 0x30
 80048aa:	4393      	bics	r3, r2
 80048ac:	0019      	movs	r1, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	4b9e      	ldr	r3, [pc, #632]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048b4:	430a      	orrs	r2, r1
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2210      	movs	r2, #16
 80048be:	4013      	ands	r3, r2
 80048c0:	d009      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048c2:	4b9a      	ldr	r3, [pc, #616]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	4a9b      	ldr	r2, [pc, #620]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	0019      	movs	r1, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	4b96      	ldr	r3, [pc, #600]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048d2:	430a      	orrs	r2, r1
 80048d4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	2380      	movs	r3, #128	; 0x80
 80048dc:	015b      	lsls	r3, r3, #5
 80048de:	4013      	ands	r3, r2
 80048e0:	d009      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80048e2:	4b92      	ldr	r3, [pc, #584]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e6:	4a94      	ldr	r2, [pc, #592]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	0019      	movs	r1, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	4b8e      	ldr	r3, [pc, #568]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048f2:	430a      	orrs	r2, r1
 80048f4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	2380      	movs	r3, #128	; 0x80
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4013      	ands	r3, r2
 8004900:	d009      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004902:	4b8a      	ldr	r3, [pc, #552]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004906:	4a8d      	ldr	r2, [pc, #564]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004908:	4013      	ands	r3, r2
 800490a:	0019      	movs	r1, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004910:	4b86      	ldr	r3, [pc, #536]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004912:	430a      	orrs	r2, r1
 8004914:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	2380      	movs	r3, #128	; 0x80
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	4013      	ands	r3, r2
 8004920:	d009      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004922:	4b82      	ldr	r3, [pc, #520]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	4a86      	ldr	r2, [pc, #536]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004928:	4013      	ands	r3, r2
 800492a:	0019      	movs	r1, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004930:	4b7e      	ldr	r3, [pc, #504]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004932:	430a      	orrs	r2, r1
 8004934:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2220      	movs	r2, #32
 800493c:	4013      	ands	r3, r2
 800493e:	d009      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004940:	4b7a      	ldr	r3, [pc, #488]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004944:	4a7f      	ldr	r2, [pc, #508]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004946:	4013      	ands	r3, r2
 8004948:	0019      	movs	r1, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	4b77      	ldr	r3, [pc, #476]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004950:	430a      	orrs	r2, r1
 8004952:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2240      	movs	r2, #64	; 0x40
 800495a:	4013      	ands	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800495e:	4b73      	ldr	r3, [pc, #460]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004962:	4a79      	ldr	r2, [pc, #484]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004964:	4013      	ands	r3, r2
 8004966:	0019      	movs	r1, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69da      	ldr	r2, [r3, #28]
 800496c:	4b6f      	ldr	r3, [pc, #444]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800496e:	430a      	orrs	r2, r1
 8004970:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	2380      	movs	r3, #128	; 0x80
 8004978:	01db      	lsls	r3, r3, #7
 800497a:	4013      	ands	r3, r2
 800497c:	d015      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800497e:	4b6b      	ldr	r3, [pc, #428]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	0899      	lsrs	r1, r3, #2
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498a:	4b68      	ldr	r3, [pc, #416]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800498c:	430a      	orrs	r2, r1
 800498e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004994:	2380      	movs	r3, #128	; 0x80
 8004996:	05db      	lsls	r3, r3, #23
 8004998:	429a      	cmp	r2, r3
 800499a:	d106      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800499c:	4b63      	ldr	r3, [pc, #396]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	4b62      	ldr	r3, [pc, #392]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049a2:	2180      	movs	r1, #128	; 0x80
 80049a4:	0249      	lsls	r1, r1, #9
 80049a6:	430a      	orrs	r2, r1
 80049a8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	031b      	lsls	r3, r3, #12
 80049b2:	4013      	ands	r3, r2
 80049b4:	d009      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049b6:	4b5d      	ldr	r3, [pc, #372]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ba:	2240      	movs	r2, #64	; 0x40
 80049bc:	4393      	bics	r3, r2
 80049be:	0019      	movs	r1, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049c4:	4b59      	ldr	r3, [pc, #356]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049c6:	430a      	orrs	r2, r1
 80049c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	2380      	movs	r3, #128	; 0x80
 80049d0:	039b      	lsls	r3, r3, #14
 80049d2:	4013      	ands	r3, r2
 80049d4:	d016      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049d6:	4b55      	ldr	r3, [pc, #340]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049da:	4a5c      	ldr	r2, [pc, #368]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80049dc:	4013      	ands	r3, r2
 80049de:	0019      	movs	r1, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e4:	4b51      	ldr	r3, [pc, #324]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049e6:	430a      	orrs	r2, r1
 80049e8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ee:	2380      	movs	r3, #128	; 0x80
 80049f0:	03db      	lsls	r3, r3, #15
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d106      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80049f6:	4b4d      	ldr	r3, [pc, #308]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	4b4c      	ldr	r3, [pc, #304]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049fc:	2180      	movs	r1, #128	; 0x80
 80049fe:	0449      	lsls	r1, r1, #17
 8004a00:	430a      	orrs	r2, r1
 8004a02:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	03db      	lsls	r3, r3, #15
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d016      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a10:	4b46      	ldr	r3, [pc, #280]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a14:	4a4e      	ldr	r2, [pc, #312]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	0019      	movs	r1, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a1e:	4b43      	ldr	r3, [pc, #268]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a20:	430a      	orrs	r2, r1
 8004a22:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	045b      	lsls	r3, r3, #17
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a30:	4b3e      	ldr	r3, [pc, #248]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	4b3d      	ldr	r3, [pc, #244]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a36:	2180      	movs	r1, #128	; 0x80
 8004a38:	0449      	lsls	r1, r1, #17
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	2380      	movs	r3, #128	; 0x80
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	4013      	ands	r3, r2
 8004a48:	d014      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004a4a:	4b38      	ldr	r3, [pc, #224]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4e:	2203      	movs	r2, #3
 8004a50:	4393      	bics	r3, r2
 8004a52:	0019      	movs	r1, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a1a      	ldr	r2, [r3, #32]
 8004a58:	4b34      	ldr	r3, [pc, #208]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d106      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a66:	4b31      	ldr	r3, [pc, #196]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	4b30      	ldr	r3, [pc, #192]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a6c:	2180      	movs	r1, #128	; 0x80
 8004a6e:	0249      	lsls	r1, r1, #9
 8004a70:	430a      	orrs	r2, r1
 8004a72:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	2380      	movs	r3, #128	; 0x80
 8004a7a:	019b      	lsls	r3, r3, #6
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d014      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004a80:	4b2a      	ldr	r3, [pc, #168]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a84:	220c      	movs	r2, #12
 8004a86:	4393      	bics	r3, r2
 8004a88:	0019      	movs	r1, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a8e:	4b27      	ldr	r3, [pc, #156]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a90:	430a      	orrs	r2, r1
 8004a92:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d106      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a9c:	4b23      	ldr	r3, [pc, #140]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	4b22      	ldr	r3, [pc, #136]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aa2:	2180      	movs	r1, #128	; 0x80
 8004aa4:	0249      	lsls	r1, r1, #9
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	2380      	movs	r3, #128	; 0x80
 8004ab0:	045b      	lsls	r3, r3, #17
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d016      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ab6:	4b1d      	ldr	r3, [pc, #116]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aba:	4a22      	ldr	r2, [pc, #136]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	0019      	movs	r1, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac4:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ace:	2380      	movs	r3, #128	; 0x80
 8004ad0:	019b      	lsls	r3, r3, #6
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d106      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ad6:	4b15      	ldr	r3, [pc, #84]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	4b14      	ldr	r3, [pc, #80]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004adc:	2180      	movs	r1, #128	; 0x80
 8004ade:	0449      	lsls	r1, r1, #17
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	049b      	lsls	r3, r3, #18
 8004aec:	4013      	ands	r3, r2
 8004aee:	d016      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004af0:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af4:	4a10      	ldr	r2, [pc, #64]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	0019      	movs	r1, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004afe:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b00:	430a      	orrs	r2, r1
 8004b02:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d106      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b10:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b16:	2180      	movs	r1, #128	; 0x80
 8004b18:	0449      	lsls	r1, r1, #17
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004b1e:	2312      	movs	r3, #18
 8004b20:	18fb      	adds	r3, r7, r3
 8004b22:	781b      	ldrb	r3, [r3, #0]
}
 8004b24:	0018      	movs	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b006      	add	sp, #24
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	efffffff 	.word	0xefffffff
 8004b34:	fffff3ff 	.word	0xfffff3ff
 8004b38:	fffffcff 	.word	0xfffffcff
 8004b3c:	fff3ffff 	.word	0xfff3ffff
 8004b40:	ffcfffff 	.word	0xffcfffff
 8004b44:	ffffcfff 	.word	0xffffcfff
 8004b48:	ffff3fff 	.word	0xffff3fff
 8004b4c:	ffbfffff 	.word	0xffbfffff
 8004b50:	feffffff 	.word	0xfeffffff

08004b54 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b54:	b5b0      	push	{r4, r5, r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004b5c:	230f      	movs	r3, #15
 8004b5e:	18fb      	adds	r3, r7, r3
 8004b60:	2201      	movs	r2, #1
 8004b62:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d100      	bne.n	8004b6c <HAL_RTC_Init+0x18>
 8004b6a:	e08c      	b.n	8004c86 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2229      	movs	r2, #41	; 0x29
 8004b70:	5c9b      	ldrb	r3, [r3, r2]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10b      	bne.n	8004b90 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2228      	movs	r2, #40	; 0x28
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2288      	movs	r2, #136	; 0x88
 8004b84:	0212      	lsls	r2, r2, #8
 8004b86:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f7fe fa28 	bl	8002fe0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2229      	movs	r2, #41	; 0x29
 8004b94:	2102      	movs	r1, #2
 8004b96:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2210      	movs	r2, #16
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d062      	beq.n	8004c6c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	22ca      	movs	r2, #202	; 0xca
 8004bac:	625a      	str	r2, [r3, #36]	; 0x24
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2253      	movs	r2, #83	; 0x53
 8004bb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004bb6:	250f      	movs	r5, #15
 8004bb8:	197c      	adds	r4, r7, r5
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f000 fbfb 	bl	80053b8 <RTC_EnterInitMode>
 8004bc2:	0003      	movs	r3, r0
 8004bc4:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004bc6:	0028      	movs	r0, r5
 8004bc8:	183b      	adds	r3, r7, r0
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d12c      	bne.n	8004c2a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	492e      	ldr	r1, [pc, #184]	; (8004c94 <HAL_RTC_Init+0x140>)
 8004bdc:	400a      	ands	r2, r1
 8004bde:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6999      	ldr	r1, [r3, #24]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6912      	ldr	r2, [r2, #16]
 8004c06:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6919      	ldr	r1, [r3, #16]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	041a      	lsls	r2, r3, #16
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004c1c:	183c      	adds	r4, r7, r0
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	0018      	movs	r0, r3
 8004c22:	f000 fc0b 	bl	800543c <RTC_ExitInitMode>
 8004c26:	0003      	movs	r3, r0
 8004c28:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004c2a:	230f      	movs	r3, #15
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d116      	bne.n	8004c62 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	00d2      	lsls	r2, r2, #3
 8004c40:	08d2      	lsrs	r2, r2, #3
 8004c42:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6999      	ldr	r1, [r3, #24]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	22ff      	movs	r2, #255	; 0xff
 8004c68:	625a      	str	r2, [r3, #36]	; 0x24
 8004c6a:	e003      	b.n	8004c74 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004c6c:	230f      	movs	r3, #15
 8004c6e:	18fb      	adds	r3, r7, r3
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004c74:	230f      	movs	r3, #15
 8004c76:	18fb      	adds	r3, r7, r3
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2229      	movs	r2, #41	; 0x29
 8004c82:	2101      	movs	r1, #1
 8004c84:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004c86:	230f      	movs	r3, #15
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	781b      	ldrb	r3, [r3, #0]
}
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b004      	add	sp, #16
 8004c92:	bdb0      	pop	{r4, r5, r7, pc}
 8004c94:	fb8fffbf 	.word	0xfb8fffbf

08004c98 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c98:	b5b0      	push	{r4, r5, r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2228      	movs	r2, #40	; 0x28
 8004ca8:	5c9b      	ldrb	r3, [r3, r2]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_RTC_SetTime+0x1a>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e092      	b.n	8004dd8 <HAL_RTC_SetTime+0x140>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2228      	movs	r2, #40	; 0x28
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2229      	movs	r2, #41	; 0x29
 8004cbe:	2102      	movs	r1, #2
 8004cc0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	22ca      	movs	r2, #202	; 0xca
 8004cc8:	625a      	str	r2, [r3, #36]	; 0x24
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2253      	movs	r2, #83	; 0x53
 8004cd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004cd2:	2513      	movs	r5, #19
 8004cd4:	197c      	adds	r4, r7, r5
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f000 fb6d 	bl	80053b8 <RTC_EnterInitMode>
 8004cde:	0003      	movs	r3, r0
 8004ce0:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004ce2:	197b      	adds	r3, r7, r5
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d162      	bne.n	8004db0 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d125      	bne.n	8004d3c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	2240      	movs	r2, #64	; 0x40
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d102      	bne.n	8004d02 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	0018      	movs	r0, r3
 8004d08:	f000 fbdc 	bl	80054c4 <RTC_ByteToBcd2>
 8004d0c:	0003      	movs	r3, r0
 8004d0e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	0018      	movs	r0, r3
 8004d16:	f000 fbd5 	bl	80054c4 <RTC_ByteToBcd2>
 8004d1a:	0003      	movs	r3, r0
 8004d1c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d1e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	789b      	ldrb	r3, [r3, #2]
 8004d24:	0018      	movs	r0, r3
 8004d26:	f000 fbcd 	bl	80054c4 <RTC_ByteToBcd2>
 8004d2a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d2c:	0022      	movs	r2, r4
 8004d2e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	78db      	ldrb	r3, [r3, #3]
 8004d34:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d36:	4313      	orrs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]
 8004d3a:	e017      	b.n	8004d6c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	2240      	movs	r2, #64	; 0x40
 8004d44:	4013      	ands	r3, r2
 8004d46:	d102      	bne.n	8004d4e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	785b      	ldrb	r3, [r3, #1]
 8004d58:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d5a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d60:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	78db      	ldrb	r3, [r3, #3]
 8004d66:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	491b      	ldr	r1, [pc, #108]	; (8004de0 <HAL_RTC_SetTime+0x148>)
 8004d74:	400a      	ands	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4918      	ldr	r1, [pc, #96]	; (8004de4 <HAL_RTC_SetTime+0x14c>)
 8004d84:	400a      	ands	r2, r1
 8004d86:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6999      	ldr	r1, [r3, #24]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004da0:	2313      	movs	r3, #19
 8004da2:	18fc      	adds	r4, r7, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	0018      	movs	r0, r3
 8004da8:	f000 fb48 	bl	800543c <RTC_ExitInitMode>
 8004dac:	0003      	movs	r3, r0
 8004dae:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	22ff      	movs	r2, #255	; 0xff
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004db8:	2313      	movs	r3, #19
 8004dba:	18fb      	adds	r3, r7, r3
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d103      	bne.n	8004dca <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2229      	movs	r2, #41	; 0x29
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2228      	movs	r2, #40	; 0x28
 8004dce:	2100      	movs	r1, #0
 8004dd0:	5499      	strb	r1, [r3, r2]

  return status;
 8004dd2:	2313      	movs	r3, #19
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	781b      	ldrb	r3, [r3, #0]
}
 8004dd8:	0018      	movs	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b006      	add	sp, #24
 8004dde:	bdb0      	pop	{r4, r5, r7, pc}
 8004de0:	007f7f7f 	.word	0x007f7f7f
 8004de4:	fffbffff 	.word	0xfffbffff

08004de8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	045b      	lsls	r3, r3, #17
 8004e06:	0c5a      	lsrs	r2, r3, #17
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a22      	ldr	r2, [pc, #136]	; (8004e9c <HAL_RTC_GetTime+0xb4>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	0c1b      	lsrs	r3, r3, #16
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	223f      	movs	r2, #63	; 0x3f
 8004e20:	4013      	ands	r3, r2
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	0a1b      	lsrs	r3, r3, #8
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	227f      	movs	r2, #127	; 0x7f
 8004e30:	4013      	ands	r3, r2
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	227f      	movs	r2, #127	; 0x7f
 8004e3e:	4013      	ands	r3, r2
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	0d9b      	lsrs	r3, r3, #22
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	4013      	ands	r3, r2
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d11a      	bne.n	8004e92 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	0018      	movs	r0, r3
 8004e62:	f000 fb57 	bl	8005514 <RTC_Bcd2ToByte>
 8004e66:	0003      	movs	r3, r0
 8004e68:	001a      	movs	r2, r3
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	785b      	ldrb	r3, [r3, #1]
 8004e72:	0018      	movs	r0, r3
 8004e74:	f000 fb4e 	bl	8005514 <RTC_Bcd2ToByte>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	001a      	movs	r2, r3
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	789b      	ldrb	r3, [r3, #2]
 8004e84:	0018      	movs	r0, r3
 8004e86:	f000 fb45 	bl	8005514 <RTC_Bcd2ToByte>
 8004e8a:	0003      	movs	r3, r0
 8004e8c:	001a      	movs	r2, r3
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	0018      	movs	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b006      	add	sp, #24
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	007f7f7f 	.word	0x007f7f7f

08004ea0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ea0:	b5b0      	push	{r4, r5, r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2228      	movs	r2, #40	; 0x28
 8004eb0:	5c9b      	ldrb	r3, [r3, r2]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_RTC_SetDate+0x1a>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e07e      	b.n	8004fb8 <HAL_RTC_SetDate+0x118>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2228      	movs	r2, #40	; 0x28
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2229      	movs	r2, #41	; 0x29
 8004ec6:	2102      	movs	r1, #2
 8004ec8:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10e      	bne.n	8004eee <HAL_RTC_SetDate+0x4e>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	785b      	ldrb	r3, [r3, #1]
 8004ed4:	001a      	movs	r2, r3
 8004ed6:	2310      	movs	r3, #16
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d008      	beq.n	8004eee <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	785b      	ldrb	r3, [r3, #1]
 8004ee0:	2210      	movs	r2, #16
 8004ee2:	4393      	bics	r3, r2
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	330a      	adds	r3, #10
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d11c      	bne.n	8004f2e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	78db      	ldrb	r3, [r3, #3]
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f000 fae3 	bl	80054c4 <RTC_ByteToBcd2>
 8004efe:	0003      	movs	r3, r0
 8004f00:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	785b      	ldrb	r3, [r3, #1]
 8004f06:	0018      	movs	r0, r3
 8004f08:	f000 fadc 	bl	80054c4 <RTC_ByteToBcd2>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f10:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	789b      	ldrb	r3, [r3, #2]
 8004f16:	0018      	movs	r0, r3
 8004f18:	f000 fad4 	bl	80054c4 <RTC_ByteToBcd2>
 8004f1c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f1e:	0022      	movs	r2, r4
 8004f20:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	e00e      	b.n	8004f4c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	78db      	ldrb	r3, [r3, #3]
 8004f32:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f3a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004f40:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	22ca      	movs	r2, #202	; 0xca
 8004f52:	625a      	str	r2, [r3, #36]	; 0x24
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2253      	movs	r2, #83	; 0x53
 8004f5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f5c:	2513      	movs	r5, #19
 8004f5e:	197c      	adds	r4, r7, r5
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	0018      	movs	r0, r3
 8004f64:	f000 fa28 	bl	80053b8 <RTC_EnterInitMode>
 8004f68:	0003      	movs	r3, r0
 8004f6a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004f6c:	0028      	movs	r0, r5
 8004f6e:	183b      	adds	r3, r7, r0
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10c      	bne.n	8004f90 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4910      	ldr	r1, [pc, #64]	; (8004fc0 <HAL_RTC_SetDate+0x120>)
 8004f7e:	400a      	ands	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f82:	183c      	adds	r4, r7, r0
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	0018      	movs	r0, r3
 8004f88:	f000 fa58 	bl	800543c <RTC_ExitInitMode>
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	22ff      	movs	r2, #255	; 0xff
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004f98:	2313      	movs	r3, #19
 8004f9a:	18fb      	adds	r3, r7, r3
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d103      	bne.n	8004faa <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2229      	movs	r2, #41	; 0x29
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2228      	movs	r2, #40	; 0x28
 8004fae:	2100      	movs	r1, #0
 8004fb0:	5499      	strb	r1, [r3, r2]

  return status;
 8004fb2:	2313      	movs	r3, #19
 8004fb4:	18fb      	adds	r3, r7, r3
 8004fb6:	781b      	ldrb	r3, [r3, #0]
}
 8004fb8:	0018      	movs	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b006      	add	sp, #24
 8004fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8004fc0:	00ffff3f 	.word	0x00ffff3f

08004fc4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	4a21      	ldr	r2, [pc, #132]	; (800505c <HAL_RTC_GetDate+0x98>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	0c1b      	lsrs	r3, r3, #16
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	0a1b      	lsrs	r3, r3, #8
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	221f      	movs	r2, #31
 8004fee:	4013      	ands	r3, r2
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	223f      	movs	r2, #63	; 0x3f
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	0b5b      	lsrs	r3, r3, #13
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2207      	movs	r2, #7
 800500c:	4013      	ands	r3, r2
 800500e:	b2da      	uxtb	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d11a      	bne.n	8005050 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	78db      	ldrb	r3, [r3, #3]
 800501e:	0018      	movs	r0, r3
 8005020:	f000 fa78 	bl	8005514 <RTC_Bcd2ToByte>
 8005024:	0003      	movs	r3, r0
 8005026:	001a      	movs	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	785b      	ldrb	r3, [r3, #1]
 8005030:	0018      	movs	r0, r3
 8005032:	f000 fa6f 	bl	8005514 <RTC_Bcd2ToByte>
 8005036:	0003      	movs	r3, r0
 8005038:	001a      	movs	r2, r3
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	789b      	ldrb	r3, [r3, #2]
 8005042:	0018      	movs	r0, r3
 8005044:	f000 fa66 	bl	8005514 <RTC_Bcd2ToByte>
 8005048:	0003      	movs	r3, r0
 800504a:	001a      	movs	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	0018      	movs	r0, r3
 8005054:	46bd      	mov	sp, r7
 8005056:	b006      	add	sp, #24
 8005058:	bd80      	pop	{r7, pc}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	00ffff3f 	.word	0x00ffff3f

08005060 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005060:	b590      	push	{r4, r7, lr}
 8005062:	b089      	sub	sp, #36	; 0x24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2228      	movs	r2, #40	; 0x28
 8005070:	5c9b      	ldrb	r3, [r3, r2]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_RTC_SetAlarm_IT+0x1a>
 8005076:	2302      	movs	r3, #2
 8005078:	e127      	b.n	80052ca <HAL_RTC_SetAlarm_IT+0x26a>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2228      	movs	r2, #40	; 0x28
 800507e:	2101      	movs	r1, #1
 8005080:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2229      	movs	r2, #41	; 0x29
 8005086:	2102      	movs	r1, #2
 8005088:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d136      	bne.n	80050fe <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	2240      	movs	r2, #64	; 0x40
 8005098:	4013      	ands	r3, r2
 800509a:	d102      	bne.n	80050a2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2200      	movs	r2, #0
 80050a0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	0018      	movs	r0, r3
 80050a8:	f000 fa0c 	bl	80054c4 <RTC_ByteToBcd2>
 80050ac:	0003      	movs	r3, r0
 80050ae:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	0018      	movs	r0, r3
 80050b6:	f000 fa05 	bl	80054c4 <RTC_ByteToBcd2>
 80050ba:	0003      	movs	r3, r0
 80050bc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050be:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	789b      	ldrb	r3, [r3, #2]
 80050c4:	0018      	movs	r0, r3
 80050c6:	f000 f9fd 	bl	80054c4 <RTC_ByteToBcd2>
 80050ca:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80050cc:	0022      	movs	r2, r4
 80050ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	78db      	ldrb	r3, [r3, #3]
 80050d4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80050d6:	431a      	orrs	r2, r3
 80050d8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2220      	movs	r2, #32
 80050de:	5c9b      	ldrb	r3, [r3, r2]
 80050e0:	0018      	movs	r0, r3
 80050e2:	f000 f9ef 	bl	80054c4 <RTC_ByteToBcd2>
 80050e6:	0003      	movs	r3, r0
 80050e8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80050ea:	0022      	movs	r2, r4
 80050ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80050f2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050f8:	4313      	orrs	r3, r2
 80050fa:	61fb      	str	r3, [r7, #28]
 80050fc:	e022      	b.n	8005144 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	2240      	movs	r2, #64	; 0x40
 8005106:	4013      	ands	r3, r2
 8005108:	d102      	bne.n	8005110 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2200      	movs	r2, #0
 800510e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	785b      	ldrb	r3, [r3, #1]
 800511a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800511c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005122:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	78db      	ldrb	r3, [r3, #3]
 8005128:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800512a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2120      	movs	r1, #32
 8005130:	5c5b      	ldrb	r3, [r3, r1]
 8005132:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005134:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800513a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005140:	4313      	orrs	r3, r2
 8005142:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	4313      	orrs	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	22ca      	movs	r2, #202	; 0xca
 8005156:	625a      	str	r2, [r3, #36]	; 0x24
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2253      	movs	r2, #83	; 0x53
 800515e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005164:	2380      	movs	r3, #128	; 0x80
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	429a      	cmp	r2, r3
 800516a:	d14c      	bne.n	8005206 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4957      	ldr	r1, [pc, #348]	; (80052d4 <HAL_RTC_SetAlarm_IT+0x274>)
 8005178:	400a      	ands	r2, r1
 800517a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2101      	movs	r1, #1
 8005188:	430a      	orrs	r2, r1
 800518a:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800518c:	f7fe faa4 	bl	80036d8 <HAL_GetTick>
 8005190:	0003      	movs	r3, r0
 8005192:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005194:	e016      	b.n	80051c4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005196:	f7fe fa9f 	bl	80036d8 <HAL_GetTick>
 800519a:	0002      	movs	r2, r0
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	1ad2      	subs	r2, r2, r3
 80051a0:	23fa      	movs	r3, #250	; 0xfa
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d90d      	bls.n	80051c4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	22ff      	movs	r2, #255	; 0xff
 80051ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2229      	movs	r2, #41	; 0x29
 80051b4:	2103      	movs	r1, #3
 80051b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2228      	movs	r2, #40	; 0x28
 80051bc:	2100      	movs	r1, #0
 80051be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e082      	b.n	80052ca <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	4013      	ands	r3, r2
 80051ce:	d0e2      	beq.n	8005196 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699a      	ldr	r2, [r3, #24]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2180      	movs	r1, #128	; 0x80
 80051ec:	0049      	lsls	r1, r1, #1
 80051ee:	430a      	orrs	r2, r1
 80051f0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	699a      	ldr	r2, [r3, #24]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2180      	movs	r1, #128	; 0x80
 80051fe:	0149      	lsls	r1, r1, #5
 8005200:	430a      	orrs	r2, r1
 8005202:	619a      	str	r2, [r3, #24]
 8005204:	e04b      	b.n	800529e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699a      	ldr	r2, [r3, #24]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4931      	ldr	r1, [pc, #196]	; (80052d8 <HAL_RTC_SetAlarm_IT+0x278>)
 8005212:	400a      	ands	r2, r1
 8005214:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2102      	movs	r1, #2
 8005222:	430a      	orrs	r2, r1
 8005224:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005226:	f7fe fa57 	bl	80036d8 <HAL_GetTick>
 800522a:	0003      	movs	r3, r0
 800522c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800522e:	e016      	b.n	800525e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005230:	f7fe fa52 	bl	80036d8 <HAL_GetTick>
 8005234:	0002      	movs	r2, r0
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	1ad2      	subs	r2, r2, r3
 800523a:	23fa      	movs	r3, #250	; 0xfa
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	429a      	cmp	r2, r3
 8005240:	d90d      	bls.n	800525e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	22ff      	movs	r2, #255	; 0xff
 8005248:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2229      	movs	r2, #41	; 0x29
 800524e:	2103      	movs	r1, #3
 8005250:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2228      	movs	r2, #40	; 0x28
 8005256:	2100      	movs	r1, #0
 8005258:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e035      	b.n	80052ca <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2202      	movs	r2, #2
 8005266:	4013      	ands	r3, r2
 8005268:	d0e2      	beq.n	8005230 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699a      	ldr	r2, [r3, #24]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2180      	movs	r1, #128	; 0x80
 8005286:	0089      	lsls	r1, r1, #2
 8005288:	430a      	orrs	r2, r1
 800528a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699a      	ldr	r2, [r3, #24]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2180      	movs	r1, #128	; 0x80
 8005298:	0189      	lsls	r1, r1, #6
 800529a:	430a      	orrs	r2, r1
 800529c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800529e:	4a0f      	ldr	r2, [pc, #60]	; (80052dc <HAL_RTC_SetAlarm_IT+0x27c>)
 80052a0:	2380      	movs	r3, #128	; 0x80
 80052a2:	58d3      	ldr	r3, [r2, r3]
 80052a4:	490d      	ldr	r1, [pc, #52]	; (80052dc <HAL_RTC_SetAlarm_IT+0x27c>)
 80052a6:	2280      	movs	r2, #128	; 0x80
 80052a8:	0312      	lsls	r2, r2, #12
 80052aa:	4313      	orrs	r3, r2
 80052ac:	2280      	movs	r2, #128	; 0x80
 80052ae:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	22ff      	movs	r2, #255	; 0xff
 80052b6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2229      	movs	r2, #41	; 0x29
 80052bc:	2101      	movs	r1, #1
 80052be:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2228      	movs	r2, #40	; 0x28
 80052c4:	2100      	movs	r1, #0
 80052c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	0018      	movs	r0, r3
 80052cc:	46bd      	mov	sp, r7
 80052ce:	b009      	add	sp, #36	; 0x24
 80052d0:	bd90      	pop	{r4, r7, pc}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	fffffeff 	.word	0xfffffeff
 80052d8:	fffffdff 	.word	0xfffffdff
 80052dc:	40021800 	.word	0x40021800

080052e0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699a      	ldr	r2, [r3, #24]
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	015b      	lsls	r3, r3, #5
 80052f2:	4013      	ands	r3, r2
 80052f4:	d011      	beq.n	800531a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fc:	2201      	movs	r2, #1
 80052fe:	4013      	ands	r3, r2
 8005300:	d00b      	beq.n	800531a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2101      	movs	r1, #1
 800530e:	430a      	orrs	r2, r1
 8005310:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	0018      	movs	r0, r3
 8005316:	f000 f821 	bl	800535c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	699a      	ldr	r2, [r3, #24]
 8005320:	2380      	movs	r3, #128	; 0x80
 8005322:	019b      	lsls	r3, r3, #6
 8005324:	4013      	ands	r3, r2
 8005326:	d011      	beq.n	800534c <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532e:	2202      	movs	r2, #2
 8005330:	4013      	ands	r3, r2
 8005332:	d00b      	beq.n	800534c <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2102      	movs	r1, #2
 8005340:	430a      	orrs	r2, r1
 8005342:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	0018      	movs	r0, r3
 8005348:	f000 f969 	bl	800561e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2229      	movs	r2, #41	; 0x29
 8005350:	2101      	movs	r1, #1
 8005352:	5499      	strb	r1, [r3, r2]
}
 8005354:	46c0      	nop			; (mov r8, r8)
 8005356:	46bd      	mov	sp, r7
 8005358:	b002      	add	sp, #8
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005364:	46c0      	nop			; (mov r8, r8)
 8005366:	46bd      	mov	sp, r7
 8005368:	b002      	add	sp, #8
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a0e      	ldr	r2, [pc, #56]	; (80053b4 <HAL_RTC_WaitForSynchro+0x48>)
 800537a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800537c:	f7fe f9ac 	bl	80036d8 <HAL_GetTick>
 8005380:	0003      	movs	r3, r0
 8005382:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005384:	e00a      	b.n	800539c <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005386:	f7fe f9a7 	bl	80036d8 <HAL_GetTick>
 800538a:	0002      	movs	r2, r0
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	1ad2      	subs	r2, r2, r3
 8005390:	23fa      	movs	r3, #250	; 0xfa
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	429a      	cmp	r2, r3
 8005396:	d901      	bls.n	800539c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e006      	b.n	80053aa <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	4013      	ands	r3, r2
 80053a6:	d0ee      	beq.n	8005386 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	0018      	movs	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	b004      	add	sp, #16
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	0001005f 	.word	0x0001005f

080053b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80053c0:	230f      	movs	r3, #15
 80053c2:	18fb      	adds	r3, r7, r3
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	2240      	movs	r2, #64	; 0x40
 80053d0:	4013      	ands	r3, r2
 80053d2:	d12c      	bne.n	800542e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2180      	movs	r1, #128	; 0x80
 80053e0:	430a      	orrs	r2, r1
 80053e2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80053e4:	f7fe f978 	bl	80036d8 <HAL_GetTick>
 80053e8:	0003      	movs	r3, r0
 80053ea:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80053ec:	e014      	b.n	8005418 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80053ee:	f7fe f973 	bl	80036d8 <HAL_GetTick>
 80053f2:	0002      	movs	r2, r0
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	1ad2      	subs	r2, r2, r3
 80053f8:	200f      	movs	r0, #15
 80053fa:	183b      	adds	r3, r7, r0
 80053fc:	1839      	adds	r1, r7, r0
 80053fe:	7809      	ldrb	r1, [r1, #0]
 8005400:	7019      	strb	r1, [r3, #0]
 8005402:	23fa      	movs	r3, #250	; 0xfa
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	429a      	cmp	r2, r3
 8005408:	d906      	bls.n	8005418 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800540a:	183b      	adds	r3, r7, r0
 800540c:	2203      	movs	r2, #3
 800540e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2229      	movs	r2, #41	; 0x29
 8005414:	2103      	movs	r1, #3
 8005416:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	2240      	movs	r2, #64	; 0x40
 8005420:	4013      	ands	r3, r2
 8005422:	d104      	bne.n	800542e <RTC_EnterInitMode+0x76>
 8005424:	230f      	movs	r3, #15
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b03      	cmp	r3, #3
 800542c:	d1df      	bne.n	80053ee <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800542e:	230f      	movs	r3, #15
 8005430:	18fb      	adds	r3, r7, r3
 8005432:	781b      	ldrb	r3, [r3, #0]
}
 8005434:	0018      	movs	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	b004      	add	sp, #16
 800543a:	bd80      	pop	{r7, pc}

0800543c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005444:	240f      	movs	r4, #15
 8005446:	193b      	adds	r3, r7, r4
 8005448:	2200      	movs	r2, #0
 800544a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800544c:	4b1c      	ldr	r3, [pc, #112]	; (80054c0 <RTC_ExitInitMode+0x84>)
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	4b1b      	ldr	r3, [pc, #108]	; (80054c0 <RTC_ExitInitMode+0x84>)
 8005452:	2180      	movs	r1, #128	; 0x80
 8005454:	438a      	bics	r2, r1
 8005456:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005458:	4b19      	ldr	r3, [pc, #100]	; (80054c0 <RTC_ExitInitMode+0x84>)
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	2220      	movs	r2, #32
 800545e:	4013      	ands	r3, r2
 8005460:	d10d      	bne.n	800547e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	0018      	movs	r0, r3
 8005466:	f7ff ff81 	bl	800536c <HAL_RTC_WaitForSynchro>
 800546a:	1e03      	subs	r3, r0, #0
 800546c:	d021      	beq.n	80054b2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2229      	movs	r2, #41	; 0x29
 8005472:	2103      	movs	r1, #3
 8005474:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005476:	193b      	adds	r3, r7, r4
 8005478:	2203      	movs	r2, #3
 800547a:	701a      	strb	r2, [r3, #0]
 800547c:	e019      	b.n	80054b2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800547e:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <RTC_ExitInitMode+0x84>)
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	4b0f      	ldr	r3, [pc, #60]	; (80054c0 <RTC_ExitInitMode+0x84>)
 8005484:	2120      	movs	r1, #32
 8005486:	438a      	bics	r2, r1
 8005488:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	0018      	movs	r0, r3
 800548e:	f7ff ff6d 	bl	800536c <HAL_RTC_WaitForSynchro>
 8005492:	1e03      	subs	r3, r0, #0
 8005494:	d007      	beq.n	80054a6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2229      	movs	r2, #41	; 0x29
 800549a:	2103      	movs	r1, #3
 800549c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800549e:	230f      	movs	r3, #15
 80054a0:	18fb      	adds	r3, r7, r3
 80054a2:	2203      	movs	r2, #3
 80054a4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80054a6:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <RTC_ExitInitMode+0x84>)
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <RTC_ExitInitMode+0x84>)
 80054ac:	2120      	movs	r1, #32
 80054ae:	430a      	orrs	r2, r1
 80054b0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80054b2:	230f      	movs	r3, #15
 80054b4:	18fb      	adds	r3, r7, r3
 80054b6:	781b      	ldrb	r3, [r3, #0]
}
 80054b8:	0018      	movs	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b005      	add	sp, #20
 80054be:	bd90      	pop	{r4, r7, pc}
 80054c0:	40002800 	.word	0x40002800

080054c4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	0002      	movs	r2, r0
 80054cc:	1dfb      	adds	r3, r7, #7
 80054ce:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80054d4:	230b      	movs	r3, #11
 80054d6:	18fb      	adds	r3, r7, r3
 80054d8:	1dfa      	adds	r2, r7, #7
 80054da:	7812      	ldrb	r2, [r2, #0]
 80054dc:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80054de:	e008      	b.n	80054f2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3301      	adds	r3, #1
 80054e4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80054e6:	220b      	movs	r2, #11
 80054e8:	18bb      	adds	r3, r7, r2
 80054ea:	18ba      	adds	r2, r7, r2
 80054ec:	7812      	ldrb	r2, [r2, #0]
 80054ee:	3a0a      	subs	r2, #10
 80054f0:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80054f2:	210b      	movs	r1, #11
 80054f4:	187b      	adds	r3, r7, r1
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b09      	cmp	r3, #9
 80054fa:	d8f1      	bhi.n	80054e0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	b2da      	uxtb	r2, r3
 8005504:	187b      	adds	r3, r7, r1
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	4313      	orrs	r3, r2
 800550a:	b2db      	uxtb	r3, r3
}
 800550c:	0018      	movs	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	b004      	add	sp, #16
 8005512:	bd80      	pop	{r7, pc}

08005514 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	0002      	movs	r2, r0
 800551c:	1dfb      	adds	r3, r7, #7
 800551e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005520:	1dfb      	adds	r3, r7, #7
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	091b      	lsrs	r3, r3, #4
 8005526:	b2db      	uxtb	r3, r3
 8005528:	001a      	movs	r2, r3
 800552a:	0013      	movs	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	189b      	adds	r3, r3, r2
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	b2da      	uxtb	r2, r3
 8005538:	1dfb      	adds	r3, r7, #7
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	210f      	movs	r1, #15
 800553e:	400b      	ands	r3, r1
 8005540:	b2db      	uxtb	r3, r3
 8005542:	18d3      	adds	r3, r2, r3
 8005544:	b2db      	uxtb	r3, r3
}
 8005546:	0018      	movs	r0, r3
 8005548:	46bd      	mov	sp, r7
 800554a:	b004      	add	sp, #16
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2228      	movs	r2, #40	; 0x28
 800555a:	5c9b      	ldrb	r3, [r3, r2]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_RTCEx_EnableBypassShadow+0x16>
 8005560:	2302      	movs	r3, #2
 8005562:	e024      	b.n	80055ae <HAL_RTCEx_EnableBypassShadow+0x60>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2228      	movs	r2, #40	; 0x28
 8005568:	2101      	movs	r1, #1
 800556a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2229      	movs	r2, #41	; 0x29
 8005570:	2102      	movs	r1, #2
 8005572:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	22ca      	movs	r2, #202	; 0xca
 800557a:	625a      	str	r2, [r3, #36]	; 0x24
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2253      	movs	r2, #83	; 0x53
 8005582:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2120      	movs	r1, #32
 8005590:	430a      	orrs	r2, r1
 8005592:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	22ff      	movs	r2, #255	; 0xff
 800559a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2229      	movs	r2, #41	; 0x29
 80055a0:	2101      	movs	r1, #1
 80055a2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2228      	movs	r2, #40	; 0x28
 80055a8:	2100      	movs	r1, #0
 80055aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	0018      	movs	r0, r3
 80055b0:	46bd      	mov	sp, r7
 80055b2:	b002      	add	sp, #8
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b082      	sub	sp, #8
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2228      	movs	r2, #40	; 0x28
 80055c2:	5c9b      	ldrb	r3, [r3, r2]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_RTCEx_DisableBypassShadow+0x16>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e024      	b.n	8005616 <HAL_RTCEx_DisableBypassShadow+0x60>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2228      	movs	r2, #40	; 0x28
 80055d0:	2101      	movs	r1, #1
 80055d2:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2229      	movs	r2, #41	; 0x29
 80055d8:	2102      	movs	r1, #2
 80055da:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	22ca      	movs	r2, #202	; 0xca
 80055e2:	625a      	str	r2, [r3, #36]	; 0x24
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2253      	movs	r2, #83	; 0x53
 80055ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699a      	ldr	r2, [r3, #24]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	21df      	movs	r1, #223	; 0xdf
 80055f8:	400a      	ands	r2, r1
 80055fa:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	22ff      	movs	r2, #255	; 0xff
 8005602:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2229      	movs	r2, #41	; 0x29
 8005608:	2101      	movs	r1, #1
 800560a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2228      	movs	r2, #40	; 0x28
 8005610:	2100      	movs	r1, #0
 8005612:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	0018      	movs	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	b002      	add	sp, #8
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	46bd      	mov	sp, r7
 800562a:	b002      	add	sp, #8
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e0a8      	b.n	8005794 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	2b00      	cmp	r3, #0
 8005648:	d109      	bne.n	800565e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	2382      	movs	r3, #130	; 0x82
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	429a      	cmp	r2, r3
 8005654:	d009      	beq.n	800566a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	61da      	str	r2, [r3, #28]
 800565c:	e005      	b.n	800566a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	225d      	movs	r2, #93	; 0x5d
 8005674:	5c9b      	ldrb	r3, [r3, r2]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d107      	bne.n	800568c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	225c      	movs	r2, #92	; 0x5c
 8005680:	2100      	movs	r1, #0
 8005682:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	0018      	movs	r0, r3
 8005688:	f7fd fcf0 	bl	800306c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	225d      	movs	r2, #93	; 0x5d
 8005690:	2102      	movs	r1, #2
 8005692:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2140      	movs	r1, #64	; 0x40
 80056a0:	438a      	bics	r2, r1
 80056a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	23e0      	movs	r3, #224	; 0xe0
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d902      	bls.n	80056b6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056b0:	2300      	movs	r3, #0
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	e002      	b.n	80056bc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056b6:	2380      	movs	r3, #128	; 0x80
 80056b8:	015b      	lsls	r3, r3, #5
 80056ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	23f0      	movs	r3, #240	; 0xf0
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d008      	beq.n	80056da <HAL_SPI_Init+0xaa>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	23e0      	movs	r3, #224	; 0xe0
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d002      	beq.n	80056da <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	2382      	movs	r3, #130	; 0x82
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	401a      	ands	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6899      	ldr	r1, [r3, #8]
 80056e8:	2384      	movs	r3, #132	; 0x84
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	400b      	ands	r3, r1
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	2102      	movs	r1, #2
 80056f6:	400b      	ands	r3, r1
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	2101      	movs	r1, #1
 8005700:	400b      	ands	r3, r1
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6999      	ldr	r1, [r3, #24]
 8005708:	2380      	movs	r3, #128	; 0x80
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	400b      	ands	r3, r1
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	2138      	movs	r1, #56	; 0x38
 8005716:	400b      	ands	r3, r1
 8005718:	431a      	orrs	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	2180      	movs	r1, #128	; 0x80
 8005720:	400b      	ands	r3, r1
 8005722:	431a      	orrs	r2, r3
 8005724:	0011      	movs	r1, r2
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800572a:	2380      	movs	r3, #128	; 0x80
 800572c:	019b      	lsls	r3, r3, #6
 800572e:	401a      	ands	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	0c1b      	lsrs	r3, r3, #16
 800573e:	2204      	movs	r2, #4
 8005740:	401a      	ands	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	2110      	movs	r1, #16
 8005748:	400b      	ands	r3, r1
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005750:	2108      	movs	r1, #8
 8005752:	400b      	ands	r3, r1
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68d9      	ldr	r1, [r3, #12]
 800575a:	23f0      	movs	r3, #240	; 0xf0
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	400b      	ands	r3, r1
 8005760:	431a      	orrs	r2, r3
 8005762:	0011      	movs	r1, r2
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	2380      	movs	r3, #128	; 0x80
 8005768:	015b      	lsls	r3, r3, #5
 800576a:	401a      	ands	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69da      	ldr	r2, [r3, #28]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4907      	ldr	r1, [pc, #28]	; (800579c <HAL_SPI_Init+0x16c>)
 8005780:	400a      	ands	r2, r1
 8005782:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	225d      	movs	r2, #93	; 0x5d
 800578e:	2101      	movs	r1, #1
 8005790:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	0018      	movs	r0, r3
 8005796:	46bd      	mov	sp, r7
 8005798:	b004      	add	sp, #16
 800579a:	bd80      	pop	{r7, pc}
 800579c:	fffff7ff 	.word	0xfffff7ff

080057a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e04a      	b.n	8005848 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	223d      	movs	r2, #61	; 0x3d
 80057b6:	5c9b      	ldrb	r3, [r3, r2]
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d107      	bne.n	80057ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	223c      	movs	r2, #60	; 0x3c
 80057c2:	2100      	movs	r1, #0
 80057c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	0018      	movs	r0, r3
 80057ca:	f7fd fc99 	bl	8003100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	223d      	movs	r2, #61	; 0x3d
 80057d2:	2102      	movs	r1, #2
 80057d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3304      	adds	r3, #4
 80057de:	0019      	movs	r1, r3
 80057e0:	0010      	movs	r0, r2
 80057e2:	f000 f9ed 	bl	8005bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2248      	movs	r2, #72	; 0x48
 80057ea:	2101      	movs	r1, #1
 80057ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	223e      	movs	r2, #62	; 0x3e
 80057f2:	2101      	movs	r1, #1
 80057f4:	5499      	strb	r1, [r3, r2]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	223f      	movs	r2, #63	; 0x3f
 80057fa:	2101      	movs	r1, #1
 80057fc:	5499      	strb	r1, [r3, r2]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2240      	movs	r2, #64	; 0x40
 8005802:	2101      	movs	r1, #1
 8005804:	5499      	strb	r1, [r3, r2]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2241      	movs	r2, #65	; 0x41
 800580a:	2101      	movs	r1, #1
 800580c:	5499      	strb	r1, [r3, r2]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2242      	movs	r2, #66	; 0x42
 8005812:	2101      	movs	r1, #1
 8005814:	5499      	strb	r1, [r3, r2]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2243      	movs	r2, #67	; 0x43
 800581a:	2101      	movs	r1, #1
 800581c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2244      	movs	r2, #68	; 0x44
 8005822:	2101      	movs	r1, #1
 8005824:	5499      	strb	r1, [r3, r2]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2245      	movs	r2, #69	; 0x45
 800582a:	2101      	movs	r1, #1
 800582c:	5499      	strb	r1, [r3, r2]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2246      	movs	r2, #70	; 0x46
 8005832:	2101      	movs	r1, #1
 8005834:	5499      	strb	r1, [r3, r2]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2247      	movs	r2, #71	; 0x47
 800583a:	2101      	movs	r1, #1
 800583c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	223d      	movs	r2, #61	; 0x3d
 8005842:	2101      	movs	r1, #1
 8005844:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	0018      	movs	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	b002      	add	sp, #8
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	223d      	movs	r2, #61	; 0x3d
 800585c:	5c9b      	ldrb	r3, [r3, r2]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	d001      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e047      	b.n	80058f8 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	223d      	movs	r2, #61	; 0x3d
 800586c:	2102      	movs	r1, #2
 800586e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2101      	movs	r1, #1
 800587c:	430a      	orrs	r2, r1
 800587e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a1e      	ldr	r2, [pc, #120]	; (8005900 <HAL_TIM_Base_Start_IT+0xb0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d014      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0x64>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	2380      	movs	r3, #128	; 0x80
 8005890:	05db      	lsls	r3, r3, #23
 8005892:	429a      	cmp	r2, r3
 8005894:	d00e      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0x64>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a1a      	ldr	r2, [pc, #104]	; (8005904 <HAL_TIM_Base_Start_IT+0xb4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d009      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0x64>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a18      	ldr	r2, [pc, #96]	; (8005908 <HAL_TIM_Base_Start_IT+0xb8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d004      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0x64>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a17      	ldr	r2, [pc, #92]	; (800590c <HAL_TIM_Base_Start_IT+0xbc>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d116      	bne.n	80058e2 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	4a15      	ldr	r2, [pc, #84]	; (8005910 <HAL_TIM_Base_Start_IT+0xc0>)
 80058bc:	4013      	ands	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b06      	cmp	r3, #6
 80058c4:	d016      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0xa4>
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	2380      	movs	r3, #128	; 0x80
 80058ca:	025b      	lsls	r3, r3, #9
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d011      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2101      	movs	r1, #1
 80058dc:	430a      	orrs	r2, r1
 80058de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e0:	e008      	b.n	80058f4 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2101      	movs	r1, #1
 80058ee:	430a      	orrs	r2, r1
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e000      	b.n	80058f6 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	0018      	movs	r0, r3
 80058fa:	46bd      	mov	sp, r7
 80058fc:	b004      	add	sp, #16
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40000400 	.word	0x40000400
 8005908:	40000800 	.word	0x40000800
 800590c:	40014000 	.word	0x40014000
 8005910:	00010007 	.word	0x00010007

08005914 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2101      	movs	r1, #1
 8005928:	438a      	bics	r2, r1
 800592a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	4a0d      	ldr	r2, [pc, #52]	; (8005968 <HAL_TIM_Base_Stop_IT+0x54>)
 8005934:	4013      	ands	r3, r2
 8005936:	d10d      	bne.n	8005954 <HAL_TIM_Base_Stop_IT+0x40>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	4a0b      	ldr	r2, [pc, #44]	; (800596c <HAL_TIM_Base_Stop_IT+0x58>)
 8005940:	4013      	ands	r3, r2
 8005942:	d107      	bne.n	8005954 <HAL_TIM_Base_Stop_IT+0x40>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2101      	movs	r1, #1
 8005950:	438a      	bics	r2, r1
 8005952:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	223d      	movs	r2, #61	; 0x3d
 8005958:	2101      	movs	r1, #1
 800595a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	b002      	add	sp, #8
 8005964:	bd80      	pop	{r7, pc}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	00001111 	.word	0x00001111
 800596c:	00000444 	.word	0x00000444

08005970 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2202      	movs	r2, #2
 800598c:	4013      	ands	r3, r2
 800598e:	d021      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2202      	movs	r2, #2
 8005994:	4013      	ands	r3, r2
 8005996:	d01d      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2203      	movs	r2, #3
 800599e:	4252      	negs	r2, r2
 80059a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	2203      	movs	r2, #3
 80059b0:	4013      	ands	r3, r2
 80059b2:	d004      	beq.n	80059be <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	0018      	movs	r0, r3
 80059b8:	f000 f8ea 	bl	8005b90 <HAL_TIM_IC_CaptureCallback>
 80059bc:	e007      	b.n	80059ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	0018      	movs	r0, r3
 80059c2:	f000 f8dd 	bl	8005b80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	0018      	movs	r0, r3
 80059ca:	f000 f8e9 	bl	8005ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2204      	movs	r2, #4
 80059d8:	4013      	ands	r3, r2
 80059da:	d022      	beq.n	8005a22 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2204      	movs	r2, #4
 80059e0:	4013      	ands	r3, r2
 80059e2:	d01e      	beq.n	8005a22 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2205      	movs	r2, #5
 80059ea:	4252      	negs	r2, r2
 80059ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2202      	movs	r2, #2
 80059f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	23c0      	movs	r3, #192	; 0xc0
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4013      	ands	r3, r2
 8005a00:	d004      	beq.n	8005a0c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	0018      	movs	r0, r3
 8005a06:	f000 f8c3 	bl	8005b90 <HAL_TIM_IC_CaptureCallback>
 8005a0a:	e007      	b.n	8005a1c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f000 f8b6 	bl	8005b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	0018      	movs	r0, r3
 8005a18:	f000 f8c2 	bl	8005ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2208      	movs	r2, #8
 8005a26:	4013      	ands	r3, r2
 8005a28:	d021      	beq.n	8005a6e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2208      	movs	r2, #8
 8005a2e:	4013      	ands	r3, r2
 8005a30:	d01d      	beq.n	8005a6e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2209      	movs	r2, #9
 8005a38:	4252      	negs	r2, r2
 8005a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2204      	movs	r2, #4
 8005a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	2203      	movs	r2, #3
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	d004      	beq.n	8005a58 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	0018      	movs	r0, r3
 8005a52:	f000 f89d 	bl	8005b90 <HAL_TIM_IC_CaptureCallback>
 8005a56:	e007      	b.n	8005a68 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f000 f890 	bl	8005b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	0018      	movs	r0, r3
 8005a64:	f000 f89c 	bl	8005ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2210      	movs	r2, #16
 8005a72:	4013      	ands	r3, r2
 8005a74:	d022      	beq.n	8005abc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2210      	movs	r2, #16
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d01e      	beq.n	8005abc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2211      	movs	r2, #17
 8005a84:	4252      	negs	r2, r2
 8005a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2208      	movs	r2, #8
 8005a8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69da      	ldr	r2, [r3, #28]
 8005a94:	23c0      	movs	r3, #192	; 0xc0
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4013      	ands	r3, r2
 8005a9a:	d004      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f000 f876 	bl	8005b90 <HAL_TIM_IC_CaptureCallback>
 8005aa4:	e007      	b.n	8005ab6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	f000 f869 	bl	8005b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f000 f875 	bl	8005ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d00c      	beq.n	8005ade <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	4013      	ands	r3, r2
 8005aca:	d008      	beq.n	8005ade <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	4252      	negs	r2, r2
 8005ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	0018      	movs	r0, r3
 8005ada:	f7fd fa23 	bl	8002f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2280      	movs	r2, #128	; 0x80
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	d104      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	2380      	movs	r3, #128	; 0x80
 8005aea:	019b      	lsls	r3, r3, #6
 8005aec:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005aee:	d00b      	beq.n	8005b08 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2280      	movs	r2, #128	; 0x80
 8005af4:	4013      	ands	r3, r2
 8005af6:	d007      	beq.n	8005b08 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a1e      	ldr	r2, [pc, #120]	; (8005b78 <HAL_TIM_IRQHandler+0x208>)
 8005afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	0018      	movs	r0, r3
 8005b04:	f000 f972 	bl	8005dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	2380      	movs	r3, #128	; 0x80
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	4013      	ands	r3, r2
 8005b10:	d00b      	beq.n	8005b2a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2280      	movs	r2, #128	; 0x80
 8005b16:	4013      	ands	r3, r2
 8005b18:	d007      	beq.n	8005b2a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a17      	ldr	r2, [pc, #92]	; (8005b7c <HAL_TIM_IRQHandler+0x20c>)
 8005b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	0018      	movs	r0, r3
 8005b26:	f000 f969 	bl	8005dfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2240      	movs	r2, #64	; 0x40
 8005b2e:	4013      	ands	r3, r2
 8005b30:	d00c      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2240      	movs	r2, #64	; 0x40
 8005b36:	4013      	ands	r3, r2
 8005b38:	d008      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2241      	movs	r2, #65	; 0x41
 8005b40:	4252      	negs	r2, r2
 8005b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	0018      	movs	r0, r3
 8005b48:	f000 f832 	bl	8005bb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	4013      	ands	r3, r2
 8005b52:	d00c      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2220      	movs	r2, #32
 8005b58:	4013      	ands	r3, r2
 8005b5a:	d008      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2221      	movs	r2, #33	; 0x21
 8005b62:	4252      	negs	r2, r2
 8005b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f000 f937 	bl	8005ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b6e:	46c0      	nop			; (mov r8, r8)
 8005b70:	46bd      	mov	sp, r7
 8005b72:	b004      	add	sp, #16
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	ffffdf7f 	.word	0xffffdf7f
 8005b7c:	fffffeff 	.word	0xfffffeff

08005b80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b88:	46c0      	nop			; (mov r8, r8)
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	b002      	add	sp, #8
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b98:	46c0      	nop			; (mov r8, r8)
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	b002      	add	sp, #8
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ba8:	46c0      	nop			; (mov r8, r8)
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b002      	add	sp, #8
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bb8:	46c0      	nop			; (mov r8, r8)
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	b002      	add	sp, #8
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a3f      	ldr	r2, [pc, #252]	; (8005cd0 <TIM_Base_SetConfig+0x110>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00c      	beq.n	8005bf2 <TIM_Base_SetConfig+0x32>
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	2380      	movs	r3, #128	; 0x80
 8005bdc:	05db      	lsls	r3, r3, #23
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d007      	beq.n	8005bf2 <TIM_Base_SetConfig+0x32>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a3b      	ldr	r2, [pc, #236]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d003      	beq.n	8005bf2 <TIM_Base_SetConfig+0x32>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a3a      	ldr	r2, [pc, #232]	; (8005cd8 <TIM_Base_SetConfig+0x118>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d108      	bne.n	8005c04 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2270      	movs	r2, #112	; 0x70
 8005bf6:	4393      	bics	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a32      	ldr	r2, [pc, #200]	; (8005cd0 <TIM_Base_SetConfig+0x110>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d01c      	beq.n	8005c46 <TIM_Base_SetConfig+0x86>
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	2380      	movs	r3, #128	; 0x80
 8005c10:	05db      	lsls	r3, r3, #23
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d017      	beq.n	8005c46 <TIM_Base_SetConfig+0x86>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a2e      	ldr	r2, [pc, #184]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d013      	beq.n	8005c46 <TIM_Base_SetConfig+0x86>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a2d      	ldr	r2, [pc, #180]	; (8005cd8 <TIM_Base_SetConfig+0x118>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00f      	beq.n	8005c46 <TIM_Base_SetConfig+0x86>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a2c      	ldr	r2, [pc, #176]	; (8005cdc <TIM_Base_SetConfig+0x11c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00b      	beq.n	8005c46 <TIM_Base_SetConfig+0x86>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a2b      	ldr	r2, [pc, #172]	; (8005ce0 <TIM_Base_SetConfig+0x120>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d007      	beq.n	8005c46 <TIM_Base_SetConfig+0x86>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a2a      	ldr	r2, [pc, #168]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d003      	beq.n	8005c46 <TIM_Base_SetConfig+0x86>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a29      	ldr	r2, [pc, #164]	; (8005ce8 <TIM_Base_SetConfig+0x128>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d108      	bne.n	8005c58 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4a28      	ldr	r2, [pc, #160]	; (8005cec <TIM_Base_SetConfig+0x12c>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2280      	movs	r2, #128	; 0x80
 8005c5c:	4393      	bics	r3, r2
 8005c5e:	001a      	movs	r2, r3
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	689a      	ldr	r2, [r3, #8]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a13      	ldr	r2, [pc, #76]	; (8005cd0 <TIM_Base_SetConfig+0x110>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00b      	beq.n	8005c9e <TIM_Base_SetConfig+0xde>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a15      	ldr	r2, [pc, #84]	; (8005ce0 <TIM_Base_SetConfig+0x120>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d007      	beq.n	8005c9e <TIM_Base_SetConfig+0xde>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a14      	ldr	r2, [pc, #80]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d003      	beq.n	8005c9e <TIM_Base_SetConfig+0xde>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a13      	ldr	r2, [pc, #76]	; (8005ce8 <TIM_Base_SetConfig+0x128>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d103      	bne.n	8005ca6 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	691a      	ldr	r2, [r3, #16]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d106      	bne.n	8005cc6 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	4393      	bics	r3, r2
 8005cc0:	001a      	movs	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	611a      	str	r2, [r3, #16]
  }
}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	b004      	add	sp, #16
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	40012c00 	.word	0x40012c00
 8005cd4:	40000400 	.word	0x40000400
 8005cd8:	40000800 	.word	0x40000800
 8005cdc:	40002000 	.word	0x40002000
 8005ce0:	40014000 	.word	0x40014000
 8005ce4:	40014400 	.word	0x40014400
 8005ce8:	40014800 	.word	0x40014800
 8005cec:	fffffcff 	.word	0xfffffcff

08005cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	223c      	movs	r2, #60	; 0x3c
 8005cfe:	5c9b      	ldrb	r3, [r3, r2]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e05a      	b.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	223c      	movs	r2, #60	; 0x3c
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	223d      	movs	r2, #61	; 0x3d
 8005d14:	2102      	movs	r1, #2
 8005d16:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a26      	ldr	r2, [pc, #152]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d108      	bne.n	8005d44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4a25      	ldr	r2, [pc, #148]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d36:	4013      	ands	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2270      	movs	r2, #112	; 0x70
 8005d48:	4393      	bics	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a19      	ldr	r2, [pc, #100]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d014      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	2380      	movs	r3, #128	; 0x80
 8005d6e:	05db      	lsls	r3, r3, #23
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d00e      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a15      	ldr	r2, [pc, #84]	; (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d009      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a14      	ldr	r2, [pc, #80]	; (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d004      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a12      	ldr	r2, [pc, #72]	; (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d10c      	bne.n	8005dac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2280      	movs	r2, #128	; 0x80
 8005d96:	4393      	bics	r3, r2
 8005d98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	223d      	movs	r2, #61	; 0x3d
 8005db0:	2101      	movs	r1, #1
 8005db2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	223c      	movs	r2, #60	; 0x3c
 8005db8:	2100      	movs	r1, #0
 8005dba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	b004      	add	sp, #16
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	40012c00 	.word	0x40012c00
 8005dcc:	ff0fffff 	.word	0xff0fffff
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40000800 	.word	0x40000800
 8005dd8:	40014000 	.word	0x40014000

08005ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005de4:	46c0      	nop			; (mov r8, r8)
 8005de6:	46bd      	mov	sp, r7
 8005de8:	b002      	add	sp, #8
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005df4:	46c0      	nop			; (mov r8, r8)
 8005df6:	46bd      	mov	sp, r7
 8005df8:	b002      	add	sp, #8
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e04:	46c0      	nop			; (mov r8, r8)
 8005e06:	46bd      	mov	sp, r7
 8005e08:	b002      	add	sp, #8
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e046      	b.n	8005eac <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2288      	movs	r2, #136	; 0x88
 8005e22:	589b      	ldr	r3, [r3, r2]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d107      	bne.n	8005e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2284      	movs	r2, #132	; 0x84
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	0018      	movs	r0, r3
 8005e34:	f7fd f98a 	bl	800314c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2288      	movs	r2, #136	; 0x88
 8005e3c:	2124      	movs	r1, #36	; 0x24
 8005e3e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	438a      	bics	r2, r1
 8005e4e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	f000 fd0c 	bl	8006878 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	0018      	movs	r0, r3
 8005e64:	f000 f9b2 	bl	80061cc <UART_SetConfig>
 8005e68:	0003      	movs	r3, r0
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e01c      	b.n	8005eac <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	490d      	ldr	r1, [pc, #52]	; (8005eb4 <HAL_UART_Init+0xa8>)
 8005e7e:	400a      	ands	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	212a      	movs	r1, #42	; 0x2a
 8005e8e:	438a      	bics	r2, r1
 8005e90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	f000 fd9b 	bl	80069e0 <UART_CheckIdleState>
 8005eaa:	0003      	movs	r3, r0
}
 8005eac:	0018      	movs	r0, r3
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	b002      	add	sp, #8
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	ffffb7ff 	.word	0xffffb7ff

08005eb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08a      	sub	sp, #40	; 0x28
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	603b      	str	r3, [r7, #0]
 8005ec4:	1dbb      	adds	r3, r7, #6
 8005ec6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2288      	movs	r2, #136	; 0x88
 8005ecc:	589b      	ldr	r3, [r3, r2]
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d000      	beq.n	8005ed4 <HAL_UART_Transmit+0x1c>
 8005ed2:	e090      	b.n	8005ff6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_UART_Transmit+0x2a>
 8005eda:	1dbb      	adds	r3, r7, #6
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e088      	b.n	8005ff8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	2380      	movs	r3, #128	; 0x80
 8005eec:	015b      	lsls	r3, r3, #5
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d109      	bne.n	8005f06 <HAL_UART_Transmit+0x4e>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d105      	bne.n	8005f06 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2201      	movs	r2, #1
 8005efe:	4013      	ands	r3, r2
 8005f00:	d001      	beq.n	8005f06 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e078      	b.n	8005ff8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2290      	movs	r2, #144	; 0x90
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2288      	movs	r2, #136	; 0x88
 8005f12:	2121      	movs	r1, #33	; 0x21
 8005f14:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f16:	f7fd fbdf 	bl	80036d8 <HAL_GetTick>
 8005f1a:	0003      	movs	r3, r0
 8005f1c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1dba      	adds	r2, r7, #6
 8005f22:	2154      	movs	r1, #84	; 0x54
 8005f24:	8812      	ldrh	r2, [r2, #0]
 8005f26:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	1dba      	adds	r2, r7, #6
 8005f2c:	2156      	movs	r1, #86	; 0x56
 8005f2e:	8812      	ldrh	r2, [r2, #0]
 8005f30:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	2380      	movs	r3, #128	; 0x80
 8005f38:	015b      	lsls	r3, r3, #5
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d108      	bne.n	8005f50 <HAL_UART_Transmit+0x98>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d104      	bne.n	8005f50 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	61bb      	str	r3, [r7, #24]
 8005f4e:	e003      	b.n	8005f58 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f54:	2300      	movs	r3, #0
 8005f56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f58:	e030      	b.n	8005fbc <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	0013      	movs	r3, r2
 8005f64:	2200      	movs	r2, #0
 8005f66:	2180      	movs	r1, #128	; 0x80
 8005f68:	f000 fde4 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 8005f6c:	1e03      	subs	r3, r0, #0
 8005f6e:	d005      	beq.n	8005f7c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2288      	movs	r2, #136	; 0x88
 8005f74:	2120      	movs	r1, #32
 8005f76:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e03d      	b.n	8005ff8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10b      	bne.n	8005f9a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	001a      	movs	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	05d2      	lsls	r2, r2, #23
 8005f8e:	0dd2      	lsrs	r2, r2, #23
 8005f90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	3302      	adds	r3, #2
 8005f96:	61bb      	str	r3, [r7, #24]
 8005f98:	e007      	b.n	8005faa <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	781a      	ldrb	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2256      	movs	r2, #86	; 0x56
 8005fae:	5a9b      	ldrh	r3, [r3, r2]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b299      	uxth	r1, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2256      	movs	r2, #86	; 0x56
 8005fba:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2256      	movs	r2, #86	; 0x56
 8005fc0:	5a9b      	ldrh	r3, [r3, r2]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1c8      	bne.n	8005f5a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	0013      	movs	r3, r2
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2140      	movs	r1, #64	; 0x40
 8005fd6:	f000 fdad 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 8005fda:	1e03      	subs	r3, r0, #0
 8005fdc:	d005      	beq.n	8005fea <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2288      	movs	r2, #136	; 0x88
 8005fe2:	2120      	movs	r1, #32
 8005fe4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e006      	b.n	8005ff8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2288      	movs	r2, #136	; 0x88
 8005fee:	2120      	movs	r1, #32
 8005ff0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e000      	b.n	8005ff8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005ff6:	2302      	movs	r3, #2
  }
}
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	b008      	add	sp, #32
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08a      	sub	sp, #40	; 0x28
 8006004:	af02      	add	r7, sp, #8
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	1dbb      	adds	r3, r7, #6
 800600e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	228c      	movs	r2, #140	; 0x8c
 8006014:	589b      	ldr	r3, [r3, r2]
 8006016:	2b20      	cmp	r3, #32
 8006018:	d000      	beq.n	800601c <HAL_UART_Receive+0x1c>
 800601a:	e0d0      	b.n	80061be <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_UART_Receive+0x2a>
 8006022:	1dbb      	adds	r3, r7, #6
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e0c8      	b.n	80061c0 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	2380      	movs	r3, #128	; 0x80
 8006034:	015b      	lsls	r3, r3, #5
 8006036:	429a      	cmp	r2, r3
 8006038:	d109      	bne.n	800604e <HAL_UART_Receive+0x4e>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d105      	bne.n	800604e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2201      	movs	r2, #1
 8006046:	4013      	ands	r3, r2
 8006048:	d001      	beq.n	800604e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e0b8      	b.n	80061c0 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2290      	movs	r2, #144	; 0x90
 8006052:	2100      	movs	r1, #0
 8006054:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	228c      	movs	r2, #140	; 0x8c
 800605a:	2122      	movs	r1, #34	; 0x22
 800605c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006064:	f7fd fb38 	bl	80036d8 <HAL_GetTick>
 8006068:	0003      	movs	r3, r0
 800606a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	1dba      	adds	r2, r7, #6
 8006070:	215c      	movs	r1, #92	; 0x5c
 8006072:	8812      	ldrh	r2, [r2, #0]
 8006074:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	1dba      	adds	r2, r7, #6
 800607a:	215e      	movs	r1, #94	; 0x5e
 800607c:	8812      	ldrh	r2, [r2, #0]
 800607e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	2380      	movs	r3, #128	; 0x80
 8006086:	015b      	lsls	r3, r3, #5
 8006088:	429a      	cmp	r2, r3
 800608a:	d10d      	bne.n	80060a8 <HAL_UART_Receive+0xa8>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d104      	bne.n	800609e <HAL_UART_Receive+0x9e>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2260      	movs	r2, #96	; 0x60
 8006098:	494b      	ldr	r1, [pc, #300]	; (80061c8 <HAL_UART_Receive+0x1c8>)
 800609a:	5299      	strh	r1, [r3, r2]
 800609c:	e02e      	b.n	80060fc <HAL_UART_Receive+0xfc>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2260      	movs	r2, #96	; 0x60
 80060a2:	21ff      	movs	r1, #255	; 0xff
 80060a4:	5299      	strh	r1, [r3, r2]
 80060a6:	e029      	b.n	80060fc <HAL_UART_Receive+0xfc>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10d      	bne.n	80060cc <HAL_UART_Receive+0xcc>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d104      	bne.n	80060c2 <HAL_UART_Receive+0xc2>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2260      	movs	r2, #96	; 0x60
 80060bc:	21ff      	movs	r1, #255	; 0xff
 80060be:	5299      	strh	r1, [r3, r2]
 80060c0:	e01c      	b.n	80060fc <HAL_UART_Receive+0xfc>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2260      	movs	r2, #96	; 0x60
 80060c6:	217f      	movs	r1, #127	; 0x7f
 80060c8:	5299      	strh	r1, [r3, r2]
 80060ca:	e017      	b.n	80060fc <HAL_UART_Receive+0xfc>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	2380      	movs	r3, #128	; 0x80
 80060d2:	055b      	lsls	r3, r3, #21
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d10d      	bne.n	80060f4 <HAL_UART_Receive+0xf4>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <HAL_UART_Receive+0xea>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2260      	movs	r2, #96	; 0x60
 80060e4:	217f      	movs	r1, #127	; 0x7f
 80060e6:	5299      	strh	r1, [r3, r2]
 80060e8:	e008      	b.n	80060fc <HAL_UART_Receive+0xfc>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2260      	movs	r2, #96	; 0x60
 80060ee:	213f      	movs	r1, #63	; 0x3f
 80060f0:	5299      	strh	r1, [r3, r2]
 80060f2:	e003      	b.n	80060fc <HAL_UART_Receive+0xfc>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2260      	movs	r2, #96	; 0x60
 80060f8:	2100      	movs	r1, #0
 80060fa:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80060fc:	2312      	movs	r3, #18
 80060fe:	18fb      	adds	r3, r7, r3
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	2160      	movs	r1, #96	; 0x60
 8006104:	5a52      	ldrh	r2, [r2, r1]
 8006106:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	2380      	movs	r3, #128	; 0x80
 800610e:	015b      	lsls	r3, r3, #5
 8006110:	429a      	cmp	r2, r3
 8006112:	d108      	bne.n	8006126 <HAL_UART_Receive+0x126>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d104      	bne.n	8006126 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800611c:	2300      	movs	r3, #0
 800611e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	61bb      	str	r3, [r7, #24]
 8006124:	e003      	b.n	800612e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800612e:	e03a      	b.n	80061a6 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	0013      	movs	r3, r2
 800613a:	2200      	movs	r2, #0
 800613c:	2120      	movs	r1, #32
 800613e:	f000 fcf9 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 8006142:	1e03      	subs	r3, r0, #0
 8006144:	d005      	beq.n	8006152 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	228c      	movs	r2, #140	; 0x8c
 800614a:	2120      	movs	r1, #32
 800614c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e036      	b.n	80061c0 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10e      	bne.n	8006176 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	b29b      	uxth	r3, r3
 8006160:	2212      	movs	r2, #18
 8006162:	18ba      	adds	r2, r7, r2
 8006164:	8812      	ldrh	r2, [r2, #0]
 8006166:	4013      	ands	r3, r2
 8006168:	b29a      	uxth	r2, r3
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	3302      	adds	r3, #2
 8006172:	61bb      	str	r3, [r7, #24]
 8006174:	e00e      	b.n	8006194 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2212      	movs	r2, #18
 8006180:	18ba      	adds	r2, r7, r2
 8006182:	8812      	ldrh	r2, [r2, #0]
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	4013      	ands	r3, r2
 8006188:	b2da      	uxtb	r2, r3
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	3301      	adds	r3, #1
 8006192:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	225e      	movs	r2, #94	; 0x5e
 8006198:	5a9b      	ldrh	r3, [r3, r2]
 800619a:	b29b      	uxth	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b299      	uxth	r1, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	225e      	movs	r2, #94	; 0x5e
 80061a4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	225e      	movs	r2, #94	; 0x5e
 80061aa:	5a9b      	ldrh	r3, [r3, r2]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1be      	bne.n	8006130 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	228c      	movs	r2, #140	; 0x8c
 80061b6:	2120      	movs	r1, #32
 80061b8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	e000      	b.n	80061c0 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80061be:	2302      	movs	r3, #2
  }
}
 80061c0:	0018      	movs	r0, r3
 80061c2:	46bd      	mov	sp, r7
 80061c4:	b008      	add	sp, #32
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	000001ff 	.word	0x000001ff

080061cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061cc:	b5b0      	push	{r4, r5, r7, lr}
 80061ce:	b090      	sub	sp, #64	; 0x40
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061d4:	231a      	movs	r3, #26
 80061d6:	2220      	movs	r2, #32
 80061d8:	189b      	adds	r3, r3, r2
 80061da:	19db      	adds	r3, r3, r7
 80061dc:	2200      	movs	r2, #0
 80061de:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	431a      	orrs	r2, r3
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	431a      	orrs	r2, r3
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4ac1      	ldr	r2, [pc, #772]	; (8006504 <UART_SetConfig+0x338>)
 8006200:	4013      	ands	r3, r2
 8006202:	0019      	movs	r1, r3
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620a:	430b      	orrs	r3, r1
 800620c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	4abc      	ldr	r2, [pc, #752]	; (8006508 <UART_SetConfig+0x33c>)
 8006216:	4013      	ands	r3, r2
 8006218:	0018      	movs	r0, r3
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	68d9      	ldr	r1, [r3, #12]
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	0003      	movs	r3, r0
 8006224:	430b      	orrs	r3, r1
 8006226:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4ab6      	ldr	r2, [pc, #728]	; (800650c <UART_SetConfig+0x340>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d009      	beq.n	800624c <UART_SetConfig+0x80>
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4ab4      	ldr	r2, [pc, #720]	; (8006510 <UART_SetConfig+0x344>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006248:	4313      	orrs	r3, r2
 800624a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	4ab0      	ldr	r2, [pc, #704]	; (8006514 <UART_SetConfig+0x348>)
 8006254:	4013      	ands	r3, r2
 8006256:	0019      	movs	r1, r3
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800625e:	430b      	orrs	r3, r1
 8006260:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	220f      	movs	r2, #15
 800626a:	4393      	bics	r3, r2
 800626c:	0018      	movs	r0, r3
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	0003      	movs	r3, r0
 8006278:	430b      	orrs	r3, r1
 800627a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4aa5      	ldr	r2, [pc, #660]	; (8006518 <UART_SetConfig+0x34c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d131      	bne.n	80062ea <UART_SetConfig+0x11e>
 8006286:	4ba5      	ldr	r3, [pc, #660]	; (800651c <UART_SetConfig+0x350>)
 8006288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628a:	2203      	movs	r2, #3
 800628c:	4013      	ands	r3, r2
 800628e:	2b03      	cmp	r3, #3
 8006290:	d01d      	beq.n	80062ce <UART_SetConfig+0x102>
 8006292:	d823      	bhi.n	80062dc <UART_SetConfig+0x110>
 8006294:	2b02      	cmp	r3, #2
 8006296:	d00c      	beq.n	80062b2 <UART_SetConfig+0xe6>
 8006298:	d820      	bhi.n	80062dc <UART_SetConfig+0x110>
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <UART_SetConfig+0xd8>
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d00e      	beq.n	80062c0 <UART_SetConfig+0xf4>
 80062a2:	e01b      	b.n	80062dc <UART_SetConfig+0x110>
 80062a4:	231b      	movs	r3, #27
 80062a6:	2220      	movs	r2, #32
 80062a8:	189b      	adds	r3, r3, r2
 80062aa:	19db      	adds	r3, r3, r7
 80062ac:	2200      	movs	r2, #0
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	e154      	b.n	800655c <UART_SetConfig+0x390>
 80062b2:	231b      	movs	r3, #27
 80062b4:	2220      	movs	r2, #32
 80062b6:	189b      	adds	r3, r3, r2
 80062b8:	19db      	adds	r3, r3, r7
 80062ba:	2202      	movs	r2, #2
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	e14d      	b.n	800655c <UART_SetConfig+0x390>
 80062c0:	231b      	movs	r3, #27
 80062c2:	2220      	movs	r2, #32
 80062c4:	189b      	adds	r3, r3, r2
 80062c6:	19db      	adds	r3, r3, r7
 80062c8:	2204      	movs	r2, #4
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	e146      	b.n	800655c <UART_SetConfig+0x390>
 80062ce:	231b      	movs	r3, #27
 80062d0:	2220      	movs	r2, #32
 80062d2:	189b      	adds	r3, r3, r2
 80062d4:	19db      	adds	r3, r3, r7
 80062d6:	2208      	movs	r2, #8
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	e13f      	b.n	800655c <UART_SetConfig+0x390>
 80062dc:	231b      	movs	r3, #27
 80062de:	2220      	movs	r2, #32
 80062e0:	189b      	adds	r3, r3, r2
 80062e2:	19db      	adds	r3, r3, r7
 80062e4:	2210      	movs	r2, #16
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	e138      	b.n	800655c <UART_SetConfig+0x390>
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a8c      	ldr	r2, [pc, #560]	; (8006520 <UART_SetConfig+0x354>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d131      	bne.n	8006358 <UART_SetConfig+0x18c>
 80062f4:	4b89      	ldr	r3, [pc, #548]	; (800651c <UART_SetConfig+0x350>)
 80062f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f8:	220c      	movs	r2, #12
 80062fa:	4013      	ands	r3, r2
 80062fc:	2b0c      	cmp	r3, #12
 80062fe:	d01d      	beq.n	800633c <UART_SetConfig+0x170>
 8006300:	d823      	bhi.n	800634a <UART_SetConfig+0x17e>
 8006302:	2b08      	cmp	r3, #8
 8006304:	d00c      	beq.n	8006320 <UART_SetConfig+0x154>
 8006306:	d820      	bhi.n	800634a <UART_SetConfig+0x17e>
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <UART_SetConfig+0x146>
 800630c:	2b04      	cmp	r3, #4
 800630e:	d00e      	beq.n	800632e <UART_SetConfig+0x162>
 8006310:	e01b      	b.n	800634a <UART_SetConfig+0x17e>
 8006312:	231b      	movs	r3, #27
 8006314:	2220      	movs	r2, #32
 8006316:	189b      	adds	r3, r3, r2
 8006318:	19db      	adds	r3, r3, r7
 800631a:	2200      	movs	r2, #0
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	e11d      	b.n	800655c <UART_SetConfig+0x390>
 8006320:	231b      	movs	r3, #27
 8006322:	2220      	movs	r2, #32
 8006324:	189b      	adds	r3, r3, r2
 8006326:	19db      	adds	r3, r3, r7
 8006328:	2202      	movs	r2, #2
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	e116      	b.n	800655c <UART_SetConfig+0x390>
 800632e:	231b      	movs	r3, #27
 8006330:	2220      	movs	r2, #32
 8006332:	189b      	adds	r3, r3, r2
 8006334:	19db      	adds	r3, r3, r7
 8006336:	2204      	movs	r2, #4
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	e10f      	b.n	800655c <UART_SetConfig+0x390>
 800633c:	231b      	movs	r3, #27
 800633e:	2220      	movs	r2, #32
 8006340:	189b      	adds	r3, r3, r2
 8006342:	19db      	adds	r3, r3, r7
 8006344:	2208      	movs	r2, #8
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	e108      	b.n	800655c <UART_SetConfig+0x390>
 800634a:	231b      	movs	r3, #27
 800634c:	2220      	movs	r2, #32
 800634e:	189b      	adds	r3, r3, r2
 8006350:	19db      	adds	r3, r3, r7
 8006352:	2210      	movs	r2, #16
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e101      	b.n	800655c <UART_SetConfig+0x390>
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a71      	ldr	r2, [pc, #452]	; (8006524 <UART_SetConfig+0x358>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d131      	bne.n	80063c6 <UART_SetConfig+0x1fa>
 8006362:	4b6e      	ldr	r3, [pc, #440]	; (800651c <UART_SetConfig+0x350>)
 8006364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006366:	2230      	movs	r2, #48	; 0x30
 8006368:	4013      	ands	r3, r2
 800636a:	2b30      	cmp	r3, #48	; 0x30
 800636c:	d01d      	beq.n	80063aa <UART_SetConfig+0x1de>
 800636e:	d823      	bhi.n	80063b8 <UART_SetConfig+0x1ec>
 8006370:	2b20      	cmp	r3, #32
 8006372:	d00c      	beq.n	800638e <UART_SetConfig+0x1c2>
 8006374:	d820      	bhi.n	80063b8 <UART_SetConfig+0x1ec>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <UART_SetConfig+0x1b4>
 800637a:	2b10      	cmp	r3, #16
 800637c:	d00e      	beq.n	800639c <UART_SetConfig+0x1d0>
 800637e:	e01b      	b.n	80063b8 <UART_SetConfig+0x1ec>
 8006380:	231b      	movs	r3, #27
 8006382:	2220      	movs	r2, #32
 8006384:	189b      	adds	r3, r3, r2
 8006386:	19db      	adds	r3, r3, r7
 8006388:	2200      	movs	r2, #0
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	e0e6      	b.n	800655c <UART_SetConfig+0x390>
 800638e:	231b      	movs	r3, #27
 8006390:	2220      	movs	r2, #32
 8006392:	189b      	adds	r3, r3, r2
 8006394:	19db      	adds	r3, r3, r7
 8006396:	2202      	movs	r2, #2
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	e0df      	b.n	800655c <UART_SetConfig+0x390>
 800639c:	231b      	movs	r3, #27
 800639e:	2220      	movs	r2, #32
 80063a0:	189b      	adds	r3, r3, r2
 80063a2:	19db      	adds	r3, r3, r7
 80063a4:	2204      	movs	r2, #4
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	e0d8      	b.n	800655c <UART_SetConfig+0x390>
 80063aa:	231b      	movs	r3, #27
 80063ac:	2220      	movs	r2, #32
 80063ae:	189b      	adds	r3, r3, r2
 80063b0:	19db      	adds	r3, r3, r7
 80063b2:	2208      	movs	r2, #8
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	e0d1      	b.n	800655c <UART_SetConfig+0x390>
 80063b8:	231b      	movs	r3, #27
 80063ba:	2220      	movs	r2, #32
 80063bc:	189b      	adds	r3, r3, r2
 80063be:	19db      	adds	r3, r3, r7
 80063c0:	2210      	movs	r2, #16
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	e0ca      	b.n	800655c <UART_SetConfig+0x390>
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a57      	ldr	r2, [pc, #348]	; (8006528 <UART_SetConfig+0x35c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d106      	bne.n	80063de <UART_SetConfig+0x212>
 80063d0:	231b      	movs	r3, #27
 80063d2:	2220      	movs	r2, #32
 80063d4:	189b      	adds	r3, r3, r2
 80063d6:	19db      	adds	r3, r3, r7
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	e0be      	b.n	800655c <UART_SetConfig+0x390>
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a52      	ldr	r2, [pc, #328]	; (800652c <UART_SetConfig+0x360>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d106      	bne.n	80063f6 <UART_SetConfig+0x22a>
 80063e8:	231b      	movs	r3, #27
 80063ea:	2220      	movs	r2, #32
 80063ec:	189b      	adds	r3, r3, r2
 80063ee:	19db      	adds	r3, r3, r7
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	e0b2      	b.n	800655c <UART_SetConfig+0x390>
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a4d      	ldr	r2, [pc, #308]	; (8006530 <UART_SetConfig+0x364>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d106      	bne.n	800640e <UART_SetConfig+0x242>
 8006400:	231b      	movs	r3, #27
 8006402:	2220      	movs	r2, #32
 8006404:	189b      	adds	r3, r3, r2
 8006406:	19db      	adds	r3, r3, r7
 8006408:	2200      	movs	r2, #0
 800640a:	701a      	strb	r2, [r3, #0]
 800640c:	e0a6      	b.n	800655c <UART_SetConfig+0x390>
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a3e      	ldr	r2, [pc, #248]	; (800650c <UART_SetConfig+0x340>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d13e      	bne.n	8006496 <UART_SetConfig+0x2ca>
 8006418:	4b40      	ldr	r3, [pc, #256]	; (800651c <UART_SetConfig+0x350>)
 800641a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800641c:	23c0      	movs	r3, #192	; 0xc0
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	4013      	ands	r3, r2
 8006422:	22c0      	movs	r2, #192	; 0xc0
 8006424:	0112      	lsls	r2, r2, #4
 8006426:	4293      	cmp	r3, r2
 8006428:	d027      	beq.n	800647a <UART_SetConfig+0x2ae>
 800642a:	22c0      	movs	r2, #192	; 0xc0
 800642c:	0112      	lsls	r2, r2, #4
 800642e:	4293      	cmp	r3, r2
 8006430:	d82a      	bhi.n	8006488 <UART_SetConfig+0x2bc>
 8006432:	2280      	movs	r2, #128	; 0x80
 8006434:	0112      	lsls	r2, r2, #4
 8006436:	4293      	cmp	r3, r2
 8006438:	d011      	beq.n	800645e <UART_SetConfig+0x292>
 800643a:	2280      	movs	r2, #128	; 0x80
 800643c:	0112      	lsls	r2, r2, #4
 800643e:	4293      	cmp	r3, r2
 8006440:	d822      	bhi.n	8006488 <UART_SetConfig+0x2bc>
 8006442:	2b00      	cmp	r3, #0
 8006444:	d004      	beq.n	8006450 <UART_SetConfig+0x284>
 8006446:	2280      	movs	r2, #128	; 0x80
 8006448:	00d2      	lsls	r2, r2, #3
 800644a:	4293      	cmp	r3, r2
 800644c:	d00e      	beq.n	800646c <UART_SetConfig+0x2a0>
 800644e:	e01b      	b.n	8006488 <UART_SetConfig+0x2bc>
 8006450:	231b      	movs	r3, #27
 8006452:	2220      	movs	r2, #32
 8006454:	189b      	adds	r3, r3, r2
 8006456:	19db      	adds	r3, r3, r7
 8006458:	2200      	movs	r2, #0
 800645a:	701a      	strb	r2, [r3, #0]
 800645c:	e07e      	b.n	800655c <UART_SetConfig+0x390>
 800645e:	231b      	movs	r3, #27
 8006460:	2220      	movs	r2, #32
 8006462:	189b      	adds	r3, r3, r2
 8006464:	19db      	adds	r3, r3, r7
 8006466:	2202      	movs	r2, #2
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	e077      	b.n	800655c <UART_SetConfig+0x390>
 800646c:	231b      	movs	r3, #27
 800646e:	2220      	movs	r2, #32
 8006470:	189b      	adds	r3, r3, r2
 8006472:	19db      	adds	r3, r3, r7
 8006474:	2204      	movs	r2, #4
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	e070      	b.n	800655c <UART_SetConfig+0x390>
 800647a:	231b      	movs	r3, #27
 800647c:	2220      	movs	r2, #32
 800647e:	189b      	adds	r3, r3, r2
 8006480:	19db      	adds	r3, r3, r7
 8006482:	2208      	movs	r2, #8
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	e069      	b.n	800655c <UART_SetConfig+0x390>
 8006488:	231b      	movs	r3, #27
 800648a:	2220      	movs	r2, #32
 800648c:	189b      	adds	r3, r3, r2
 800648e:	19db      	adds	r3, r3, r7
 8006490:	2210      	movs	r2, #16
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	e062      	b.n	800655c <UART_SetConfig+0x390>
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a1d      	ldr	r2, [pc, #116]	; (8006510 <UART_SetConfig+0x344>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d157      	bne.n	8006550 <UART_SetConfig+0x384>
 80064a0:	4b1e      	ldr	r3, [pc, #120]	; (800651c <UART_SetConfig+0x350>)
 80064a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064a4:	23c0      	movs	r3, #192	; 0xc0
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4013      	ands	r3, r2
 80064aa:	22c0      	movs	r2, #192	; 0xc0
 80064ac:	0092      	lsls	r2, r2, #2
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d040      	beq.n	8006534 <UART_SetConfig+0x368>
 80064b2:	22c0      	movs	r2, #192	; 0xc0
 80064b4:	0092      	lsls	r2, r2, #2
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d843      	bhi.n	8006542 <UART_SetConfig+0x376>
 80064ba:	2280      	movs	r2, #128	; 0x80
 80064bc:	0092      	lsls	r2, r2, #2
 80064be:	4293      	cmp	r3, r2
 80064c0:	d011      	beq.n	80064e6 <UART_SetConfig+0x31a>
 80064c2:	2280      	movs	r2, #128	; 0x80
 80064c4:	0092      	lsls	r2, r2, #2
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d83b      	bhi.n	8006542 <UART_SetConfig+0x376>
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d004      	beq.n	80064d8 <UART_SetConfig+0x30c>
 80064ce:	2280      	movs	r2, #128	; 0x80
 80064d0:	0052      	lsls	r2, r2, #1
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d00e      	beq.n	80064f4 <UART_SetConfig+0x328>
 80064d6:	e034      	b.n	8006542 <UART_SetConfig+0x376>
 80064d8:	231b      	movs	r3, #27
 80064da:	2220      	movs	r2, #32
 80064dc:	189b      	adds	r3, r3, r2
 80064de:	19db      	adds	r3, r3, r7
 80064e0:	2200      	movs	r2, #0
 80064e2:	701a      	strb	r2, [r3, #0]
 80064e4:	e03a      	b.n	800655c <UART_SetConfig+0x390>
 80064e6:	231b      	movs	r3, #27
 80064e8:	2220      	movs	r2, #32
 80064ea:	189b      	adds	r3, r3, r2
 80064ec:	19db      	adds	r3, r3, r7
 80064ee:	2202      	movs	r2, #2
 80064f0:	701a      	strb	r2, [r3, #0]
 80064f2:	e033      	b.n	800655c <UART_SetConfig+0x390>
 80064f4:	231b      	movs	r3, #27
 80064f6:	2220      	movs	r2, #32
 80064f8:	189b      	adds	r3, r3, r2
 80064fa:	19db      	adds	r3, r3, r7
 80064fc:	2204      	movs	r2, #4
 80064fe:	701a      	strb	r2, [r3, #0]
 8006500:	e02c      	b.n	800655c <UART_SetConfig+0x390>
 8006502:	46c0      	nop			; (mov r8, r8)
 8006504:	cfff69f3 	.word	0xcfff69f3
 8006508:	ffffcfff 	.word	0xffffcfff
 800650c:	40008000 	.word	0x40008000
 8006510:	40008400 	.word	0x40008400
 8006514:	11fff4ff 	.word	0x11fff4ff
 8006518:	40013800 	.word	0x40013800
 800651c:	40021000 	.word	0x40021000
 8006520:	40004400 	.word	0x40004400
 8006524:	40004800 	.word	0x40004800
 8006528:	40004c00 	.word	0x40004c00
 800652c:	40005000 	.word	0x40005000
 8006530:	40013c00 	.word	0x40013c00
 8006534:	231b      	movs	r3, #27
 8006536:	2220      	movs	r2, #32
 8006538:	189b      	adds	r3, r3, r2
 800653a:	19db      	adds	r3, r3, r7
 800653c:	2208      	movs	r2, #8
 800653e:	701a      	strb	r2, [r3, #0]
 8006540:	e00c      	b.n	800655c <UART_SetConfig+0x390>
 8006542:	231b      	movs	r3, #27
 8006544:	2220      	movs	r2, #32
 8006546:	189b      	adds	r3, r3, r2
 8006548:	19db      	adds	r3, r3, r7
 800654a:	2210      	movs	r2, #16
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	e005      	b.n	800655c <UART_SetConfig+0x390>
 8006550:	231b      	movs	r3, #27
 8006552:	2220      	movs	r2, #32
 8006554:	189b      	adds	r3, r3, r2
 8006556:	19db      	adds	r3, r3, r7
 8006558:	2210      	movs	r2, #16
 800655a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4ac1      	ldr	r2, [pc, #772]	; (8006868 <UART_SetConfig+0x69c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d005      	beq.n	8006572 <UART_SetConfig+0x3a6>
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4ac0      	ldr	r2, [pc, #768]	; (800686c <UART_SetConfig+0x6a0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d000      	beq.n	8006572 <UART_SetConfig+0x3a6>
 8006570:	e093      	b.n	800669a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006572:	231b      	movs	r3, #27
 8006574:	2220      	movs	r2, #32
 8006576:	189b      	adds	r3, r3, r2
 8006578:	19db      	adds	r3, r3, r7
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b08      	cmp	r3, #8
 800657e:	d015      	beq.n	80065ac <UART_SetConfig+0x3e0>
 8006580:	dc18      	bgt.n	80065b4 <UART_SetConfig+0x3e8>
 8006582:	2b04      	cmp	r3, #4
 8006584:	d00d      	beq.n	80065a2 <UART_SetConfig+0x3d6>
 8006586:	dc15      	bgt.n	80065b4 <UART_SetConfig+0x3e8>
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <UART_SetConfig+0x3c6>
 800658c:	2b02      	cmp	r3, #2
 800658e:	d005      	beq.n	800659c <UART_SetConfig+0x3d0>
 8006590:	e010      	b.n	80065b4 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006592:	f7fe f88d 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 8006596:	0003      	movs	r3, r0
 8006598:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800659a:	e014      	b.n	80065c6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800659c:	4bb4      	ldr	r3, [pc, #720]	; (8006870 <UART_SetConfig+0x6a4>)
 800659e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065a0:	e011      	b.n	80065c6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065a2:	f7fd fff9 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 80065a6:	0003      	movs	r3, r0
 80065a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065aa:	e00c      	b.n	80065c6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ac:	2380      	movs	r3, #128	; 0x80
 80065ae:	021b      	lsls	r3, r3, #8
 80065b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065b2:	e008      	b.n	80065c6 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80065b8:	231a      	movs	r3, #26
 80065ba:	2220      	movs	r2, #32
 80065bc:	189b      	adds	r3, r3, r2
 80065be:	19db      	adds	r3, r3, r7
 80065c0:	2201      	movs	r2, #1
 80065c2:	701a      	strb	r2, [r3, #0]
        break;
 80065c4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d100      	bne.n	80065ce <UART_SetConfig+0x402>
 80065cc:	e135      	b.n	800683a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065d2:	4ba8      	ldr	r3, [pc, #672]	; (8006874 <UART_SetConfig+0x6a8>)
 80065d4:	0052      	lsls	r2, r2, #1
 80065d6:	5ad3      	ldrh	r3, [r2, r3]
 80065d8:	0019      	movs	r1, r3
 80065da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80065dc:	f7f9 fdae 	bl	800013c <__udivsi3>
 80065e0:	0003      	movs	r3, r0
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	0013      	movs	r3, r2
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	189b      	adds	r3, r3, r2
 80065ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d305      	bcc.n	8006600 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d906      	bls.n	800660e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8006600:	231a      	movs	r3, #26
 8006602:	2220      	movs	r2, #32
 8006604:	189b      	adds	r3, r3, r2
 8006606:	19db      	adds	r3, r3, r7
 8006608:	2201      	movs	r2, #1
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	e044      	b.n	8006698 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800660e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	2300      	movs	r3, #0
 8006614:	61fb      	str	r3, [r7, #28]
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800661a:	4b96      	ldr	r3, [pc, #600]	; (8006874 <UART_SetConfig+0x6a8>)
 800661c:	0052      	lsls	r2, r2, #1
 800661e:	5ad3      	ldrh	r3, [r2, r3]
 8006620:	613b      	str	r3, [r7, #16]
 8006622:	2300      	movs	r3, #0
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	69b8      	ldr	r0, [r7, #24]
 800662c:	69f9      	ldr	r1, [r7, #28]
 800662e:	f7f9 ff39 	bl	80004a4 <__aeabi_uldivmod>
 8006632:	0002      	movs	r2, r0
 8006634:	000b      	movs	r3, r1
 8006636:	0e11      	lsrs	r1, r2, #24
 8006638:	021d      	lsls	r5, r3, #8
 800663a:	430d      	orrs	r5, r1
 800663c:	0214      	lsls	r4, r2, #8
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	085b      	lsrs	r3, r3, #1
 8006644:	60bb      	str	r3, [r7, #8]
 8006646:	2300      	movs	r3, #0
 8006648:	60fb      	str	r3, [r7, #12]
 800664a:	68b8      	ldr	r0, [r7, #8]
 800664c:	68f9      	ldr	r1, [r7, #12]
 800664e:	1900      	adds	r0, r0, r4
 8006650:	4169      	adcs	r1, r5
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	2300      	movs	r3, #0
 800665a:	607b      	str	r3, [r7, #4]
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f7f9 ff20 	bl	80004a4 <__aeabi_uldivmod>
 8006664:	0002      	movs	r2, r0
 8006666:	000b      	movs	r3, r1
 8006668:	0013      	movs	r3, r2
 800666a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800666c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666e:	23c0      	movs	r3, #192	; 0xc0
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	429a      	cmp	r2, r3
 8006674:	d309      	bcc.n	800668a <UART_SetConfig+0x4be>
 8006676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006678:	2380      	movs	r3, #128	; 0x80
 800667a:	035b      	lsls	r3, r3, #13
 800667c:	429a      	cmp	r2, r3
 800667e:	d204      	bcs.n	800668a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006686:	60da      	str	r2, [r3, #12]
 8006688:	e006      	b.n	8006698 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800668a:	231a      	movs	r3, #26
 800668c:	2220      	movs	r2, #32
 800668e:	189b      	adds	r3, r3, r2
 8006690:	19db      	adds	r3, r3, r7
 8006692:	2201      	movs	r2, #1
 8006694:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8006696:	e0d0      	b.n	800683a <UART_SetConfig+0x66e>
 8006698:	e0cf      	b.n	800683a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	69da      	ldr	r2, [r3, #28]
 800669e:	2380      	movs	r3, #128	; 0x80
 80066a0:	021b      	lsls	r3, r3, #8
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d000      	beq.n	80066a8 <UART_SetConfig+0x4dc>
 80066a6:	e070      	b.n	800678a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80066a8:	231b      	movs	r3, #27
 80066aa:	2220      	movs	r2, #32
 80066ac:	189b      	adds	r3, r3, r2
 80066ae:	19db      	adds	r3, r3, r7
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b08      	cmp	r3, #8
 80066b4:	d015      	beq.n	80066e2 <UART_SetConfig+0x516>
 80066b6:	dc18      	bgt.n	80066ea <UART_SetConfig+0x51e>
 80066b8:	2b04      	cmp	r3, #4
 80066ba:	d00d      	beq.n	80066d8 <UART_SetConfig+0x50c>
 80066bc:	dc15      	bgt.n	80066ea <UART_SetConfig+0x51e>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <UART_SetConfig+0x4fc>
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d005      	beq.n	80066d2 <UART_SetConfig+0x506>
 80066c6:	e010      	b.n	80066ea <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c8:	f7fd fff2 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 80066cc:	0003      	movs	r3, r0
 80066ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066d0:	e014      	b.n	80066fc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066d2:	4b67      	ldr	r3, [pc, #412]	; (8006870 <UART_SetConfig+0x6a4>)
 80066d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066d6:	e011      	b.n	80066fc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066d8:	f7fd ff5e 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 80066dc:	0003      	movs	r3, r0
 80066de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066e0:	e00c      	b.n	80066fc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066e2:	2380      	movs	r3, #128	; 0x80
 80066e4:	021b      	lsls	r3, r3, #8
 80066e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066e8:	e008      	b.n	80066fc <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80066ee:	231a      	movs	r3, #26
 80066f0:	2220      	movs	r2, #32
 80066f2:	189b      	adds	r3, r3, r2
 80066f4:	19db      	adds	r3, r3, r7
 80066f6:	2201      	movs	r2, #1
 80066f8:	701a      	strb	r2, [r3, #0]
        break;
 80066fa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d100      	bne.n	8006704 <UART_SetConfig+0x538>
 8006702:	e09a      	b.n	800683a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006708:	4b5a      	ldr	r3, [pc, #360]	; (8006874 <UART_SetConfig+0x6a8>)
 800670a:	0052      	lsls	r2, r2, #1
 800670c:	5ad3      	ldrh	r3, [r2, r3]
 800670e:	0019      	movs	r1, r3
 8006710:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006712:	f7f9 fd13 	bl	800013c <__udivsi3>
 8006716:	0003      	movs	r3, r0
 8006718:	005a      	lsls	r2, r3, #1
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	085b      	lsrs	r3, r3, #1
 8006720:	18d2      	adds	r2, r2, r3
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	0019      	movs	r1, r3
 8006728:	0010      	movs	r0, r2
 800672a:	f7f9 fd07 	bl	800013c <__udivsi3>
 800672e:	0003      	movs	r3, r0
 8006730:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	2b0f      	cmp	r3, #15
 8006736:	d921      	bls.n	800677c <UART_SetConfig+0x5b0>
 8006738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800673a:	2380      	movs	r3, #128	; 0x80
 800673c:	025b      	lsls	r3, r3, #9
 800673e:	429a      	cmp	r2, r3
 8006740:	d21c      	bcs.n	800677c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	b29a      	uxth	r2, r3
 8006746:	200e      	movs	r0, #14
 8006748:	2420      	movs	r4, #32
 800674a:	1903      	adds	r3, r0, r4
 800674c:	19db      	adds	r3, r3, r7
 800674e:	210f      	movs	r1, #15
 8006750:	438a      	bics	r2, r1
 8006752:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	085b      	lsrs	r3, r3, #1
 8006758:	b29b      	uxth	r3, r3
 800675a:	2207      	movs	r2, #7
 800675c:	4013      	ands	r3, r2
 800675e:	b299      	uxth	r1, r3
 8006760:	1903      	adds	r3, r0, r4
 8006762:	19db      	adds	r3, r3, r7
 8006764:	1902      	adds	r2, r0, r4
 8006766:	19d2      	adds	r2, r2, r7
 8006768:	8812      	ldrh	r2, [r2, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	1902      	adds	r2, r0, r4
 8006774:	19d2      	adds	r2, r2, r7
 8006776:	8812      	ldrh	r2, [r2, #0]
 8006778:	60da      	str	r2, [r3, #12]
 800677a:	e05e      	b.n	800683a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800677c:	231a      	movs	r3, #26
 800677e:	2220      	movs	r2, #32
 8006780:	189b      	adds	r3, r3, r2
 8006782:	19db      	adds	r3, r3, r7
 8006784:	2201      	movs	r2, #1
 8006786:	701a      	strb	r2, [r3, #0]
 8006788:	e057      	b.n	800683a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800678a:	231b      	movs	r3, #27
 800678c:	2220      	movs	r2, #32
 800678e:	189b      	adds	r3, r3, r2
 8006790:	19db      	adds	r3, r3, r7
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b08      	cmp	r3, #8
 8006796:	d015      	beq.n	80067c4 <UART_SetConfig+0x5f8>
 8006798:	dc18      	bgt.n	80067cc <UART_SetConfig+0x600>
 800679a:	2b04      	cmp	r3, #4
 800679c:	d00d      	beq.n	80067ba <UART_SetConfig+0x5ee>
 800679e:	dc15      	bgt.n	80067cc <UART_SetConfig+0x600>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d002      	beq.n	80067aa <UART_SetConfig+0x5de>
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d005      	beq.n	80067b4 <UART_SetConfig+0x5e8>
 80067a8:	e010      	b.n	80067cc <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067aa:	f7fd ff81 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 80067ae:	0003      	movs	r3, r0
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067b2:	e014      	b.n	80067de <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067b4:	4b2e      	ldr	r3, [pc, #184]	; (8006870 <UART_SetConfig+0x6a4>)
 80067b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067b8:	e011      	b.n	80067de <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ba:	f7fd feed 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 80067be:	0003      	movs	r3, r0
 80067c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067c2:	e00c      	b.n	80067de <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067c4:	2380      	movs	r3, #128	; 0x80
 80067c6:	021b      	lsls	r3, r3, #8
 80067c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067ca:	e008      	b.n	80067de <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80067d0:	231a      	movs	r3, #26
 80067d2:	2220      	movs	r2, #32
 80067d4:	189b      	adds	r3, r3, r2
 80067d6:	19db      	adds	r3, r3, r7
 80067d8:	2201      	movs	r2, #1
 80067da:	701a      	strb	r2, [r3, #0]
        break;
 80067dc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80067de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d02a      	beq.n	800683a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067e8:	4b22      	ldr	r3, [pc, #136]	; (8006874 <UART_SetConfig+0x6a8>)
 80067ea:	0052      	lsls	r2, r2, #1
 80067ec:	5ad3      	ldrh	r3, [r2, r3]
 80067ee:	0019      	movs	r1, r3
 80067f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80067f2:	f7f9 fca3 	bl	800013c <__udivsi3>
 80067f6:	0003      	movs	r3, r0
 80067f8:	001a      	movs	r2, r3
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	085b      	lsrs	r3, r3, #1
 8006800:	18d2      	adds	r2, r2, r3
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	0019      	movs	r1, r3
 8006808:	0010      	movs	r0, r2
 800680a:	f7f9 fc97 	bl	800013c <__udivsi3>
 800680e:	0003      	movs	r3, r0
 8006810:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	2b0f      	cmp	r3, #15
 8006816:	d90a      	bls.n	800682e <UART_SetConfig+0x662>
 8006818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800681a:	2380      	movs	r3, #128	; 0x80
 800681c:	025b      	lsls	r3, r3, #9
 800681e:	429a      	cmp	r2, r3
 8006820:	d205      	bcs.n	800682e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	b29a      	uxth	r2, r3
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60da      	str	r2, [r3, #12]
 800682c:	e005      	b.n	800683a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800682e:	231a      	movs	r3, #26
 8006830:	2220      	movs	r2, #32
 8006832:	189b      	adds	r3, r3, r2
 8006834:	19db      	adds	r3, r3, r7
 8006836:	2201      	movs	r2, #1
 8006838:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	226a      	movs	r2, #106	; 0x6a
 800683e:	2101      	movs	r1, #1
 8006840:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	2268      	movs	r2, #104	; 0x68
 8006846:	2101      	movs	r1, #1
 8006848:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	2200      	movs	r2, #0
 800684e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	2200      	movs	r2, #0
 8006854:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006856:	231a      	movs	r3, #26
 8006858:	2220      	movs	r2, #32
 800685a:	189b      	adds	r3, r3, r2
 800685c:	19db      	adds	r3, r3, r7
 800685e:	781b      	ldrb	r3, [r3, #0]
}
 8006860:	0018      	movs	r0, r3
 8006862:	46bd      	mov	sp, r7
 8006864:	b010      	add	sp, #64	; 0x40
 8006866:	bdb0      	pop	{r4, r5, r7, pc}
 8006868:	40008000 	.word	0x40008000
 800686c:	40008400 	.word	0x40008400
 8006870:	00f42400 	.word	0x00f42400
 8006874:	0800f858 	.word	0x0800f858

08006878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006884:	2208      	movs	r2, #8
 8006886:	4013      	ands	r3, r2
 8006888:	d00b      	beq.n	80068a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	4a4a      	ldr	r2, [pc, #296]	; (80069bc <UART_AdvFeatureConfig+0x144>)
 8006892:	4013      	ands	r3, r2
 8006894:	0019      	movs	r1, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a6:	2201      	movs	r2, #1
 80068a8:	4013      	ands	r3, r2
 80068aa:	d00b      	beq.n	80068c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	4a43      	ldr	r2, [pc, #268]	; (80069c0 <UART_AdvFeatureConfig+0x148>)
 80068b4:	4013      	ands	r3, r2
 80068b6:	0019      	movs	r1, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c8:	2202      	movs	r2, #2
 80068ca:	4013      	ands	r3, r2
 80068cc:	d00b      	beq.n	80068e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	4a3b      	ldr	r2, [pc, #236]	; (80069c4 <UART_AdvFeatureConfig+0x14c>)
 80068d6:	4013      	ands	r3, r2
 80068d8:	0019      	movs	r1, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ea:	2204      	movs	r2, #4
 80068ec:	4013      	ands	r3, r2
 80068ee:	d00b      	beq.n	8006908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	4a34      	ldr	r2, [pc, #208]	; (80069c8 <UART_AdvFeatureConfig+0x150>)
 80068f8:	4013      	ands	r3, r2
 80068fa:	0019      	movs	r1, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690c:	2210      	movs	r2, #16
 800690e:	4013      	ands	r3, r2
 8006910:	d00b      	beq.n	800692a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	4a2c      	ldr	r2, [pc, #176]	; (80069cc <UART_AdvFeatureConfig+0x154>)
 800691a:	4013      	ands	r3, r2
 800691c:	0019      	movs	r1, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	2220      	movs	r2, #32
 8006930:	4013      	ands	r3, r2
 8006932:	d00b      	beq.n	800694c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	4a25      	ldr	r2, [pc, #148]	; (80069d0 <UART_AdvFeatureConfig+0x158>)
 800693c:	4013      	ands	r3, r2
 800693e:	0019      	movs	r1, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	2240      	movs	r2, #64	; 0x40
 8006952:	4013      	ands	r3, r2
 8006954:	d01d      	beq.n	8006992 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	4a1d      	ldr	r2, [pc, #116]	; (80069d4 <UART_AdvFeatureConfig+0x15c>)
 800695e:	4013      	ands	r3, r2
 8006960:	0019      	movs	r1, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006972:	2380      	movs	r3, #128	; 0x80
 8006974:	035b      	lsls	r3, r3, #13
 8006976:	429a      	cmp	r2, r3
 8006978:	d10b      	bne.n	8006992 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	4a15      	ldr	r2, [pc, #84]	; (80069d8 <UART_AdvFeatureConfig+0x160>)
 8006982:	4013      	ands	r3, r2
 8006984:	0019      	movs	r1, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	2280      	movs	r2, #128	; 0x80
 8006998:	4013      	ands	r3, r2
 800699a:	d00b      	beq.n	80069b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	4a0e      	ldr	r2, [pc, #56]	; (80069dc <UART_AdvFeatureConfig+0x164>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	0019      	movs	r1, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	605a      	str	r2, [r3, #4]
  }
}
 80069b4:	46c0      	nop			; (mov r8, r8)
 80069b6:	46bd      	mov	sp, r7
 80069b8:	b002      	add	sp, #8
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	ffff7fff 	.word	0xffff7fff
 80069c0:	fffdffff 	.word	0xfffdffff
 80069c4:	fffeffff 	.word	0xfffeffff
 80069c8:	fffbffff 	.word	0xfffbffff
 80069cc:	ffffefff 	.word	0xffffefff
 80069d0:	ffffdfff 	.word	0xffffdfff
 80069d4:	ffefffff 	.word	0xffefffff
 80069d8:	ff9fffff 	.word	0xff9fffff
 80069dc:	fff7ffff 	.word	0xfff7ffff

080069e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b092      	sub	sp, #72	; 0x48
 80069e4:	af02      	add	r7, sp, #8
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2290      	movs	r2, #144	; 0x90
 80069ec:	2100      	movs	r1, #0
 80069ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069f0:	f7fc fe72 	bl	80036d8 <HAL_GetTick>
 80069f4:	0003      	movs	r3, r0
 80069f6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2208      	movs	r2, #8
 8006a00:	4013      	ands	r3, r2
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d12d      	bne.n	8006a62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a08:	2280      	movs	r2, #128	; 0x80
 8006a0a:	0391      	lsls	r1, r2, #14
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	4a47      	ldr	r2, [pc, #284]	; (8006b2c <UART_CheckIdleState+0x14c>)
 8006a10:	9200      	str	r2, [sp, #0]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f000 f88e 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 8006a18:	1e03      	subs	r3, r0, #0
 8006a1a:	d022      	beq.n	8006a62 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a24:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a26:	2301      	movs	r3, #1
 8006a28:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2c:	f383 8810 	msr	PRIMASK, r3
}
 8006a30:	46c0      	nop			; (mov r8, r8)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2180      	movs	r1, #128	; 0x80
 8006a3e:	438a      	bics	r2, r1
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a48:	f383 8810 	msr	PRIMASK, r3
}
 8006a4c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2288      	movs	r2, #136	; 0x88
 8006a52:	2120      	movs	r1, #32
 8006a54:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2284      	movs	r2, #132	; 0x84
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e060      	b.n	8006b24 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2204      	movs	r2, #4
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	d146      	bne.n	8006afe <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a72:	2280      	movs	r2, #128	; 0x80
 8006a74:	03d1      	lsls	r1, r2, #15
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	4a2c      	ldr	r2, [pc, #176]	; (8006b2c <UART_CheckIdleState+0x14c>)
 8006a7a:	9200      	str	r2, [sp, #0]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f000 f859 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 8006a82:	1e03      	subs	r3, r0, #0
 8006a84:	d03b      	beq.n	8006afe <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a86:	f3ef 8310 	mrs	r3, PRIMASK
 8006a8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a90:	2301      	movs	r3, #1
 8006a92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f383 8810 	msr	PRIMASK, r3
}
 8006a9a:	46c0      	nop			; (mov r8, r8)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4922      	ldr	r1, [pc, #136]	; (8006b30 <UART_CheckIdleState+0x150>)
 8006aa8:	400a      	ands	r2, r1
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f383 8810 	msr	PRIMASK, r3
}
 8006ab6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8006abc:	61bb      	str	r3, [r7, #24]
  return(result);
 8006abe:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	f383 8810 	msr	PRIMASK, r3
}
 8006acc:	46c0      	nop			; (mov r8, r8)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2101      	movs	r1, #1
 8006ada:	438a      	bics	r2, r1
 8006adc:	609a      	str	r2, [r3, #8]
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	f383 8810 	msr	PRIMASK, r3
}
 8006ae8:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	228c      	movs	r2, #140	; 0x8c
 8006aee:	2120      	movs	r1, #32
 8006af0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2284      	movs	r2, #132	; 0x84
 8006af6:	2100      	movs	r1, #0
 8006af8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e012      	b.n	8006b24 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2288      	movs	r2, #136	; 0x88
 8006b02:	2120      	movs	r1, #32
 8006b04:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	228c      	movs	r2, #140	; 0x8c
 8006b0a:	2120      	movs	r1, #32
 8006b0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2284      	movs	r2, #132	; 0x84
 8006b1e:	2100      	movs	r1, #0
 8006b20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	0018      	movs	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b010      	add	sp, #64	; 0x40
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	01ffffff 	.word	0x01ffffff
 8006b30:	fffffedf 	.word	0xfffffedf

08006b34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	603b      	str	r3, [r7, #0]
 8006b40:	1dfb      	adds	r3, r7, #7
 8006b42:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b44:	e051      	b.n	8006bea <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	d04e      	beq.n	8006bea <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b4c:	f7fc fdc4 	bl	80036d8 <HAL_GetTick>
 8006b50:	0002      	movs	r2, r0
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d302      	bcc.n	8006b62 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e051      	b.n	8006c0a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2204      	movs	r2, #4
 8006b6e:	4013      	ands	r3, r2
 8006b70:	d03b      	beq.n	8006bea <UART_WaitOnFlagUntilTimeout+0xb6>
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2b80      	cmp	r3, #128	; 0x80
 8006b76:	d038      	beq.n	8006bea <UART_WaitOnFlagUntilTimeout+0xb6>
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b40      	cmp	r3, #64	; 0x40
 8006b7c:	d035      	beq.n	8006bea <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	2208      	movs	r2, #8
 8006b86:	4013      	ands	r3, r2
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d111      	bne.n	8006bb0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2208      	movs	r2, #8
 8006b92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	0018      	movs	r0, r3
 8006b98:	f000 f83c 	bl	8006c14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2290      	movs	r2, #144	; 0x90
 8006ba0:	2108      	movs	r1, #8
 8006ba2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2284      	movs	r2, #132	; 0x84
 8006ba8:	2100      	movs	r1, #0
 8006baa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e02c      	b.n	8006c0a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	69da      	ldr	r2, [r3, #28]
 8006bb6:	2380      	movs	r3, #128	; 0x80
 8006bb8:	011b      	lsls	r3, r3, #4
 8006bba:	401a      	ands	r2, r3
 8006bbc:	2380      	movs	r3, #128	; 0x80
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d112      	bne.n	8006bea <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2280      	movs	r2, #128	; 0x80
 8006bca:	0112      	lsls	r2, r2, #4
 8006bcc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	0018      	movs	r0, r3
 8006bd2:	f000 f81f 	bl	8006c14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2290      	movs	r2, #144	; 0x90
 8006bda:	2120      	movs	r1, #32
 8006bdc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2284      	movs	r2, #132	; 0x84
 8006be2:	2100      	movs	r1, #0
 8006be4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e00f      	b.n	8006c0a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	425a      	negs	r2, r3
 8006bfa:	4153      	adcs	r3, r2
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	001a      	movs	r2, r3
 8006c00:	1dfb      	adds	r3, r7, #7
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d09e      	beq.n	8006b46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	0018      	movs	r0, r3
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	b004      	add	sp, #16
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08e      	sub	sp, #56	; 0x38
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c20:	617b      	str	r3, [r7, #20]
  return(result);
 8006c22:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c24:	637b      	str	r3, [r7, #52]	; 0x34
 8006c26:	2301      	movs	r3, #1
 8006c28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	f383 8810 	msr	PRIMASK, r3
}
 8006c30:	46c0      	nop			; (mov r8, r8)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4926      	ldr	r1, [pc, #152]	; (8006cd8 <UART_EndRxTransfer+0xc4>)
 8006c3e:	400a      	ands	r2, r1
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	f383 8810 	msr	PRIMASK, r3
}
 8006c4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c52:	623b      	str	r3, [r7, #32]
  return(result);
 8006c54:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c56:	633b      	str	r3, [r7, #48]	; 0x30
 8006c58:	2301      	movs	r3, #1
 8006c5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	f383 8810 	msr	PRIMASK, r3
}
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	491b      	ldr	r1, [pc, #108]	; (8006cdc <UART_EndRxTransfer+0xc8>)
 8006c70:	400a      	ands	r2, r1
 8006c72:	609a      	str	r2, [r3, #8]
 8006c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	f383 8810 	msr	PRIMASK, r3
}
 8006c7e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d118      	bne.n	8006cba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c88:	f3ef 8310 	mrs	r3, PRIMASK
 8006c8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c92:	2301      	movs	r3, #1
 8006c94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f383 8810 	msr	PRIMASK, r3
}
 8006c9c:	46c0      	nop			; (mov r8, r8)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2110      	movs	r1, #16
 8006caa:	438a      	bics	r2, r1
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f383 8810 	msr	PRIMASK, r3
}
 8006cb8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	228c      	movs	r2, #140	; 0x8c
 8006cbe:	2120      	movs	r1, #32
 8006cc0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006cce:	46c0      	nop			; (mov r8, r8)
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	b00e      	add	sp, #56	; 0x38
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	46c0      	nop			; (mov r8, r8)
 8006cd8:	fffffedf 	.word	0xfffffedf
 8006cdc:	effffffe 	.word	0xeffffffe

08006ce0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2284      	movs	r2, #132	; 0x84
 8006cec:	5c9b      	ldrb	r3, [r3, r2]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d101      	bne.n	8006cf6 <HAL_UARTEx_DisableFifoMode+0x16>
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	e027      	b.n	8006d46 <HAL_UARTEx_DisableFifoMode+0x66>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2284      	movs	r2, #132	; 0x84
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2288      	movs	r2, #136	; 0x88
 8006d02:	2124      	movs	r1, #36	; 0x24
 8006d04:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2101      	movs	r1, #1
 8006d1a:	438a      	bics	r2, r1
 8006d1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4a0b      	ldr	r2, [pc, #44]	; (8006d50 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006d22:	4013      	ands	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2288      	movs	r2, #136	; 0x88
 8006d38:	2120      	movs	r1, #32
 8006d3a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2284      	movs	r2, #132	; 0x84
 8006d40:	2100      	movs	r1, #0
 8006d42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	0018      	movs	r0, r3
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	b004      	add	sp, #16
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	46c0      	nop			; (mov r8, r8)
 8006d50:	dfffffff 	.word	0xdfffffff

08006d54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2284      	movs	r2, #132	; 0x84
 8006d62:	5c9b      	ldrb	r3, [r3, r2]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e02e      	b.n	8006dca <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2284      	movs	r2, #132	; 0x84
 8006d70:	2101      	movs	r1, #1
 8006d72:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2288      	movs	r2, #136	; 0x88
 8006d78:	2124      	movs	r1, #36	; 0x24
 8006d7a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2101      	movs	r1, #1
 8006d90:	438a      	bics	r2, r1
 8006d92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	08d9      	lsrs	r1, r3, #3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	0018      	movs	r0, r3
 8006dac:	f000 f854 	bl	8006e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2288      	movs	r2, #136	; 0x88
 8006dbc:	2120      	movs	r1, #32
 8006dbe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2284      	movs	r2, #132	; 0x84
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	0018      	movs	r0, r3
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	b004      	add	sp, #16
 8006dd0:	bd80      	pop	{r7, pc}
	...

08006dd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2284      	movs	r2, #132	; 0x84
 8006de2:	5c9b      	ldrb	r3, [r3, r2]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e02f      	b.n	8006e4c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2284      	movs	r2, #132	; 0x84
 8006df0:	2101      	movs	r1, #1
 8006df2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2288      	movs	r2, #136	; 0x88
 8006df8:	2124      	movs	r1, #36	; 0x24
 8006dfa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2101      	movs	r1, #1
 8006e10:	438a      	bics	r2, r1
 8006e12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	4a0e      	ldr	r2, [pc, #56]	; (8006e54 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	0019      	movs	r1, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	f000 f813 	bl	8006e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2288      	movs	r2, #136	; 0x88
 8006e3e:	2120      	movs	r1, #32
 8006e40:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2284      	movs	r2, #132	; 0x84
 8006e46:	2100      	movs	r1, #0
 8006e48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	b004      	add	sp, #16
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	f1ffffff 	.word	0xf1ffffff

08006e58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d108      	bne.n	8006e7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	226a      	movs	r2, #106	; 0x6a
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2268      	movs	r2, #104	; 0x68
 8006e74:	2101      	movs	r1, #1
 8006e76:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e78:	e043      	b.n	8006f02 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e7a:	260f      	movs	r6, #15
 8006e7c:	19bb      	adds	r3, r7, r6
 8006e7e:	2208      	movs	r2, #8
 8006e80:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e82:	200e      	movs	r0, #14
 8006e84:	183b      	adds	r3, r7, r0
 8006e86:	2208      	movs	r2, #8
 8006e88:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	0e5b      	lsrs	r3, r3, #25
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	240d      	movs	r4, #13
 8006e96:	193b      	adds	r3, r7, r4
 8006e98:	2107      	movs	r1, #7
 8006e9a:	400a      	ands	r2, r1
 8006e9c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	0f5b      	lsrs	r3, r3, #29
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	250c      	movs	r5, #12
 8006eaa:	197b      	adds	r3, r7, r5
 8006eac:	2107      	movs	r1, #7
 8006eae:	400a      	ands	r2, r1
 8006eb0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006eb2:	183b      	adds	r3, r7, r0
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	197a      	adds	r2, r7, r5
 8006eb8:	7812      	ldrb	r2, [r2, #0]
 8006eba:	4914      	ldr	r1, [pc, #80]	; (8006f0c <UARTEx_SetNbDataToProcess+0xb4>)
 8006ebc:	5c8a      	ldrb	r2, [r1, r2]
 8006ebe:	435a      	muls	r2, r3
 8006ec0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ec2:	197b      	adds	r3, r7, r5
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	4a12      	ldr	r2, [pc, #72]	; (8006f10 <UARTEx_SetNbDataToProcess+0xb8>)
 8006ec8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006eca:	0019      	movs	r1, r3
 8006ecc:	f7f9 f9c0 	bl	8000250 <__divsi3>
 8006ed0:	0003      	movs	r3, r0
 8006ed2:	b299      	uxth	r1, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	226a      	movs	r2, #106	; 0x6a
 8006ed8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006eda:	19bb      	adds	r3, r7, r6
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	193a      	adds	r2, r7, r4
 8006ee0:	7812      	ldrb	r2, [r2, #0]
 8006ee2:	490a      	ldr	r1, [pc, #40]	; (8006f0c <UARTEx_SetNbDataToProcess+0xb4>)
 8006ee4:	5c8a      	ldrb	r2, [r1, r2]
 8006ee6:	435a      	muls	r2, r3
 8006ee8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006eea:	193b      	adds	r3, r7, r4
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	4a08      	ldr	r2, [pc, #32]	; (8006f10 <UARTEx_SetNbDataToProcess+0xb8>)
 8006ef0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ef2:	0019      	movs	r1, r3
 8006ef4:	f7f9 f9ac 	bl	8000250 <__divsi3>
 8006ef8:	0003      	movs	r3, r0
 8006efa:	b299      	uxth	r1, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2268      	movs	r2, #104	; 0x68
 8006f00:	5299      	strh	r1, [r3, r2]
}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	46bd      	mov	sp, r7
 8006f06:	b005      	add	sp, #20
 8006f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	0800f870 	.word	0x0800f870
 8006f10:	0800f878 	.word	0x0800f878

08006f14 <my_gnss_get_utc>:
		send_debug_logs ( "my_lx6_gnss.c: No fix." ) ;
	return r ;
}

bool my_gnss_get_utc ( uint16_t* timer , uint16_t time_ths )
{
 8006f14:	b5b0      	push	{r4, r5, r7, lr}
 8006f16:	b0c6      	sub	sp, #280	; 0x118
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	000a      	movs	r2, r1
 8006f1e:	4b4f      	ldr	r3, [pc, #316]	; (800705c <my_gnss_get_utc+0x148>)
 8006f20:	218c      	movs	r1, #140	; 0x8c
 8006f22:	0049      	lsls	r1, r1, #1
 8006f24:	185b      	adds	r3, r3, r1
 8006f26:	19db      	adds	r3, r3, r7
 8006f28:	801a      	strh	r2, [r3, #0]
	// jak będziesz miał więcej niż 1 sv w wiadomosci GPGSV to możesz brać czas z pakietu RMC
	uint8_t		rx_byte = 0 ;
 8006f2a:	230c      	movs	r3, #12
 8006f2c:	33ff      	adds	r3, #255	; 0xff
 8006f2e:	18fb      	adds	r3, r7, r3
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
	bool		r = false ;
 8006f34:	2318      	movs	r3, #24
 8006f36:	33ff      	adds	r3, #255	; 0xff
 8006f38:	18fb      	adds	r3, r7, r3
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[NMEA_MESSAGE_SIZE] = {0} ;
 8006f3e:	4b48      	ldr	r3, [pc, #288]	; (8007060 <my_gnss_get_utc+0x14c>)
 8006f40:	000c      	movs	r4, r1
 8006f42:	185b      	adds	r3, r3, r1
 8006f44:	19db      	adds	r3, r3, r7
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	22f6      	movs	r2, #246	; 0xf6
 8006f4e:	2100      	movs	r1, #0
 8006f50:	0018      	movs	r0, r3
 8006f52:	f001 fe39 	bl	8008bc8 <memset>
	uint8_t		i_nmea = 0 ;
 8006f56:	4b43      	ldr	r3, [pc, #268]	; (8007064 <my_gnss_get_utc+0x150>)
 8006f58:	191b      	adds	r3, r3, r4
 8006f5a:	19db      	adds	r3, r3, r7
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8006f60:	238b      	movs	r3, #139	; 0x8b
 8006f62:	005b      	lsls	r3, r3, #1
 8006f64:	18fb      	adds	r3, r7, r3
 8006f66:	2200      	movs	r2, #0
 8006f68:	701a      	strb	r2, [r3, #0]
	char* 		nmea_gsv_label = "GSV" ;
 8006f6a:	4b3f      	ldr	r3, [pc, #252]	; (8007068 <my_gnss_get_utc+0x154>)
 8006f6c:	2288      	movs	r2, #136	; 0x88
 8006f6e:	0052      	lsls	r2, r2, #1
 8006f70:	18ba      	adds	r2, r7, r2
 8006f72:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "RMC" ;
 8006f74:	4b3d      	ldr	r3, [pc, #244]	; (800706c <my_gnss_get_utc+0x158>)
 8006f76:	2286      	movs	r2, #134	; 0x86
 8006f78:	0052      	lsls	r2, r2, #1
 8006f7a:	18ba      	adds	r2, r7, r2
 8006f7c:	6013      	str	r3, [r2, #0]

	while ( *timer < time_ths  ) // 1200 = 10 min.
 8006f7e:	e05b      	b.n	8007038 <my_gnss_get_utc+0x124>
	{
		my_gnss_receive_byte ( &rx_byte, false ) ;
 8006f80:	240c      	movs	r4, #12
 8006f82:	34ff      	adds	r4, #255	; 0xff
 8006f84:	193b      	adds	r3, r7, r4
 8006f86:	2100      	movs	r1, #0
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f7fb ff81 	bl	8002e90 <my_gnss_receive_byte>
		if ( rx_byte )
 8006f8e:	0020      	movs	r0, r4
 8006f90:	183b      	adds	r3, r7, r0
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	248b      	movs	r4, #139	; 0x8b
 8006f96:	0064      	lsls	r4, r4, #1
 8006f98:	193a      	adds	r2, r7, r4
 8006f9a:	1939      	adds	r1, r7, r4
 8006f9c:	7809      	ldrb	r1, [r1, #0]
 8006f9e:	7011      	strb	r1, [r2, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d049      	beq.n	8007038 <my_gnss_get_utc+0x124>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 8006fa4:	230f      	movs	r3, #15
 8006fa6:	18fa      	adds	r2, r7, r3
 8006fa8:	2510      	movs	r5, #16
 8006faa:	1979      	adds	r1, r7, r5
 8006fac:	183b      	adds	r3, r7, r0
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f000 f939 	bl	8007226 <my_nmea_message>
 8006fb4:	0001      	movs	r1, r0
 8006fb6:	193b      	adds	r3, r7, r4
 8006fb8:	193a      	adds	r2, r7, r4
 8006fba:	7812      	ldrb	r2, [r2, #0]
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	2902      	cmp	r1, #2
 8006fc0:	d13a      	bne.n	8007038 <my_gnss_get_utc+0x124>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 8006fc2:	197b      	adds	r3, r7, r5
 8006fc4:	0018      	movs	r0, r3
 8006fc6:	f000 f99a 	bl	80072fe <is_my_nmea_checksum_ok>
 8006fca:	0003      	movs	r3, r0
 8006fcc:	0019      	movs	r1, r3
 8006fce:	193b      	adds	r3, r7, r4
 8006fd0:	193a      	adds	r2, r7, r4
 8006fd2:	7812      	ldrb	r2, [r2, #0]
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	2900      	cmp	r1, #0
 8006fd8:	d02e      	beq.n	8007038 <my_gnss_get_utc+0x124>
				{
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) )
 8006fda:	2388      	movs	r3, #136	; 0x88
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	18fb      	adds	r3, r7, r3
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	197b      	adds	r3, r7, r5
 8006fe4:	0011      	movs	r1, r2
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f001 fe1b 	bl	8008c22 <strstr>
 8006fec:	1e03      	subs	r3, r0, #0
 8006fee:	d007      	beq.n	8007000 <my_gnss_get_utc+0xec>
					{
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 8006ff0:	197b      	adds	r3, r7, r5
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	f000 f9ce 	bl	8007394 <my_nmea_get_gsv_tns>
 8006ff8:	0003      	movs	r3, r0
 8006ffa:	001a      	movs	r2, r3
 8006ffc:	193b      	adds	r3, r7, r4
 8006ffe:	701a      	strb	r2, [r3, #0]
					}
					if ( gsv_tns > 1 )
 8007000:	238b      	movs	r3, #139	; 0x8b
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	18fb      	adds	r3, r7, r3
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d915      	bls.n	8007038 <my_gnss_get_utc+0x124>
					{
						if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 800700c:	2386      	movs	r3, #134	; 0x86
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	18fb      	adds	r3, r7, r3
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	2410      	movs	r4, #16
 8007016:	193b      	adds	r3, r7, r4
 8007018:	0011      	movs	r1, r2
 800701a:	0018      	movs	r0, r3
 800701c:	f001 fe01 	bl	8008c22 <strstr>
 8007020:	1e03      	subs	r3, r0, #0
 8007022:	d009      	beq.n	8007038 <my_gnss_get_utc+0x124>
						{
							my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli więcej niż 1 satelitę to na pewno czas jest dobry
 8007024:	193b      	adds	r3, r7, r4
 8007026:	0018      	movs	r0, r3
 8007028:	f000 f864 	bl	80070f4 <my_rtc_set_dt_from_nmea_rmc>
							r = true ;
 800702c:	2318      	movs	r3, #24
 800702e:	33ff      	adds	r3, #255	; 0xff
 8007030:	18fb      	adds	r3, r7, r3
 8007032:	2201      	movs	r2, #1
 8007034:	701a      	strb	r2, [r3, #0]
							break ;
 8007036:	e009      	b.n	800704c <my_gnss_get_utc+0x138>
	while ( *timer < time_ths  ) // 1200 = 10 min.
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	4a07      	ldr	r2, [pc, #28]	; (800705c <my_gnss_get_utc+0x148>)
 800703e:	218c      	movs	r1, #140	; 0x8c
 8007040:	0049      	lsls	r1, r1, #1
 8007042:	1852      	adds	r2, r2, r1
 8007044:	19d2      	adds	r2, r2, r7
 8007046:	8812      	ldrh	r2, [r2, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d899      	bhi.n	8006f80 <my_gnss_get_utc+0x6c>
					}
				}
			}
		}
	}
	return r ;
 800704c:	2318      	movs	r3, #24
 800704e:	33ff      	adds	r3, #255	; 0xff
 8007050:	18fb      	adds	r3, r7, r3
 8007052:	781b      	ldrb	r3, [r3, #0]
}
 8007054:	0018      	movs	r0, r3
 8007056:	46bd      	mov	sp, r7
 8007058:	b046      	add	sp, #280	; 0x118
 800705a:	bdb0      	pop	{r4, r5, r7, pc}
 800705c:	fffffeea 	.word	0xfffffeea
 8007060:	fffffef8 	.word	0xfffffef8
 8007064:	fffffef7 	.word	0xfffffef7
 8007068:	0800f71c 	.word	0x0800f71c
 800706c:	0800f718 	.word	0x0800f718

08007070 <my_rtc_get_dt_s>:
{
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
}
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 8007070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007072:	b08d      	sub	sp, #52	; 0x34
 8007074:	af04      	add	r7, sp, #16
 8007076:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8007078:	2508      	movs	r5, #8
 800707a:	1979      	adds	r1, r7, r5
 800707c:	4b1b      	ldr	r3, [pc, #108]	; (80070ec <my_rtc_get_dt_s+0x7c>)
 800707e:	2200      	movs	r2, #0
 8007080:	0018      	movs	r0, r3
 8007082:	f7fd feb1 	bl	8004de8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8007086:	241c      	movs	r4, #28
 8007088:	1939      	adds	r1, r7, r4
 800708a:	4b18      	ldr	r3, [pc, #96]	; (80070ec <my_rtc_get_dt_s+0x7c>)
 800708c:	2200      	movs	r2, #0
 800708e:	0018      	movs	r0, r3
 8007090:	f7fd ff98 	bl	8004fc4 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 8007094:	0021      	movs	r1, r4
 8007096:	187b      	adds	r3, r7, r1
 8007098:	78db      	ldrb	r3, [r3, #3]
 800709a:	22fa      	movs	r2, #250	; 0xfa
 800709c:	00d2      	lsls	r2, r2, #3
 800709e:	189a      	adds	r2, r3, r2
 80070a0:	187b      	adds	r3, r7, r1
 80070a2:	785b      	ldrb	r3, [r3, #1]
 80070a4:	469c      	mov	ip, r3
 80070a6:	187b      	adds	r3, r7, r1
 80070a8:	789b      	ldrb	r3, [r3, #2]
 80070aa:	001c      	movs	r4, r3
 80070ac:	0028      	movs	r0, r5
 80070ae:	183b      	adds	r3, r7, r0
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	001d      	movs	r5, r3
 80070b4:	183b      	adds	r3, r7, r0
 80070b6:	785b      	ldrb	r3, [r3, #1]
 80070b8:	001e      	movs	r6, r3
 80070ba:	183b      	adds	r3, r7, r0
 80070bc:	789b      	ldrb	r3, [r3, #2]
 80070be:	490c      	ldr	r1, [pc, #48]	; (80070f0 <my_rtc_get_dt_s+0x80>)
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	9303      	str	r3, [sp, #12]
 80070c4:	9602      	str	r6, [sp, #8]
 80070c6:	9501      	str	r5, [sp, #4]
 80070c8:	9400      	str	r4, [sp, #0]
 80070ca:	4663      	mov	r3, ip
 80070cc:	f001 fce6 	bl	8008a9c <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 80070d0:	211c      	movs	r1, #28
 80070d2:	187b      	adds	r3, r7, r1
 80070d4:	78db      	ldrb	r3, [r3, #3]
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	22fa      	movs	r2, #250	; 0xfa
 80070da:	00d2      	lsls	r2, r2, #3
 80070dc:	4694      	mov	ip, r2
 80070de:	4463      	add	r3, ip
 80070e0:	b29b      	uxth	r3, r3
}
 80070e2:	0018      	movs	r0, r3
 80070e4:	46bd      	mov	sp, r7
 80070e6:	b009      	add	sp, #36	; 0x24
 80070e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	200006e4 	.word	0x200006e4
 80070f0:	0800f758 	.word	0x0800f758

080070f4 <my_rtc_set_dt_from_nmea_rmc>:
	}
	return false ;
}

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 80070f4:	b5b0      	push	{r4, r5, r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 80070fc:	2508      	movs	r5, #8
 80070fe:	197b      	adds	r3, r7, r5
 8007100:	1cda      	adds	r2, r3, #3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	0011      	movs	r1, r2
 8007106:	0018      	movs	r0, r3
 8007108:	f000 f97c 	bl	8007404 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 800710c:	197b      	adds	r3, r7, r5
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	0011      	movs	r1, r2
 8007114:	0018      	movs	r0, r3
 8007116:	f000 f9af 	bl	8007478 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 800711a:	197b      	adds	r3, r7, r5
 800711c:	1c9a      	adds	r2, r3, #2
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	0011      	movs	r1, r2
 8007122:	0018      	movs	r0, r3
 8007124:	f000 f9e2 	bl	80074ec <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 8007128:	240c      	movs	r4, #12
 800712a:	193a      	adds	r2, r7, r4
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	0011      	movs	r1, r2
 8007130:	0018      	movs	r0, r3
 8007132:	f000 fa15 	bl	8007560 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8007136:	193b      	adds	r3, r7, r4
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	0011      	movs	r1, r2
 800713e:	0018      	movs	r0, r3
 8007140:	f000 fa48 	bl	80075d4 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8007144:	193b      	adds	r3, r7, r4
 8007146:	1c9a      	adds	r2, r3, #2
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	0011      	movs	r1, r2
 800714c:	0018      	movs	r0, r3
 800714e:	f000 fa7b 	bl	8007648 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 8007152:	193b      	adds	r3, r7, r4
 8007154:	1d1a      	adds	r2, r3, #4
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	0011      	movs	r1, r2
 800715a:	0018      	movs	r0, r3
 800715c:	f000 faae 	bl	80076bc <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007160:	193b      	adds	r3, r7, r4
 8007162:	2200      	movs	r2, #0
 8007164:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007166:	193b      	adds	r3, r7, r4
 8007168:	2200      	movs	r2, #0
 800716a:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 800716c:	4b0b      	ldr	r3, [pc, #44]	; (800719c <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800716e:	0018      	movs	r0, r3
 8007170:	f7fe f9ed 	bl	800554e <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8007174:	1939      	adds	r1, r7, r4
 8007176:	4b09      	ldr	r3, [pc, #36]	; (800719c <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8007178:	2200      	movs	r2, #0
 800717a:	0018      	movs	r0, r3
 800717c:	f7fd fd8c 	bl	8004c98 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8007180:	1979      	adds	r1, r7, r5
 8007182:	4b06      	ldr	r3, [pc, #24]	; (800719c <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8007184:	2200      	movs	r2, #0
 8007186:	0018      	movs	r0, r3
 8007188:	f7fd fe8a 	bl	8004ea0 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 800718c:	4b03      	ldr	r3, [pc, #12]	; (800719c <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800718e:	0018      	movs	r0, r3
 8007190:	f7fe fa11 	bl	80055b6 <HAL_RTCEx_DisableBypassShadow>
}
 8007194:	46c0      	nop			; (mov r8, r8)
 8007196:	46bd      	mov	sp, r7
 8007198:	b008      	add	sp, #32
 800719a:	bdb0      	pop	{r4, r5, r7, pc}
 800719c:	200006e4 	.word	0x200006e4

080071a0 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	0008      	movs	r0, r1
 80071aa:	0011      	movs	r1, r2
 80071ac:	1cfb      	adds	r3, r7, #3
 80071ae:	1c02      	adds	r2, r0, #0
 80071b0:	701a      	strb	r2, [r3, #0]
 80071b2:	1cbb      	adds	r3, r7, #2
 80071b4:	1c0a      	adds	r2, r1, #0
 80071b6:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 80071b8:	230f      	movs	r3, #15
 80071ba:	18fb      	adds	r3, r7, r3
 80071bc:	2200      	movs	r2, #0
 80071be:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 80071c0:	230e      	movs	r3, #14
 80071c2:	18fb      	adds	r3, r7, r3
 80071c4:	2200      	movs	r2, #0
 80071c6:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 80071c8:	e01c      	b.n	8007204 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 80071ca:	230f      	movs	r3, #15
 80071cc:	18fb      	adds	r3, r7, r3
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	18d3      	adds	r3, r2, r3
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	1cfa      	adds	r2, r7, #3
 80071d8:	7812      	ldrb	r2, [r2, #0]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d105      	bne.n	80071ea <my_find_char_position+0x4a>
			p++ ;
 80071de:	210e      	movs	r1, #14
 80071e0:	187b      	adds	r3, r7, r1
 80071e2:	781a      	ldrb	r2, [r3, #0]
 80071e4:	187b      	adds	r3, r7, r1
 80071e6:	3201      	adds	r2, #1
 80071e8:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 80071ea:	230e      	movs	r3, #14
 80071ec:	18fa      	adds	r2, r7, r3
 80071ee:	1cbb      	adds	r3, r7, #2
 80071f0:	7812      	ldrb	r2, [r2, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d00e      	beq.n	8007216 <my_find_char_position+0x76>
			break ;
		i++ ;
 80071f8:	210f      	movs	r1, #15
 80071fa:	187b      	adds	r3, r7, r1
 80071fc:	781a      	ldrb	r2, [r3, #0]
 80071fe:	187b      	adds	r3, r7, r1
 8007200:	3201      	adds	r2, #1
 8007202:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8007204:	230f      	movs	r3, #15
 8007206:	18fb      	adds	r3, r7, r3
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	18d3      	adds	r3, r2, r3
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1da      	bne.n	80071ca <my_find_char_position+0x2a>
 8007214:	e000      	b.n	8007218 <my_find_char_position+0x78>
			break ;
 8007216:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8007218:	230f      	movs	r3, #15
 800721a:	18fb      	adds	r3, r7, r3
 800721c:	781b      	ldrb	r3, [r3, #0]
}
 800721e:	0018      	movs	r0, r3
 8007220:	46bd      	mov	sp, r7
 8007222:	b004      	add	sp, #16
 8007224:	bd80      	pop	{r7, pc}

08007226 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b084      	sub	sp, #16
 800722a:	af00      	add	r7, sp, #0
 800722c:	60f8      	str	r0, [r7, #12]
 800722e:	60b9      	str	r1, [r7, #8]
 8007230:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b24      	cmp	r3, #36	; 0x24
 8007238:	d117      	bne.n	800726a <my_nmea_message+0x44>
    {
        *i = 0 ;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	b2d1      	uxtb	r1, r2
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	7011      	strb	r1, [r2, #0]
 800724c:	001a      	movs	r2, r3
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	189b      	adds	r3, r3, r2
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	7812      	ldrb	r2, [r2, #0]
 8007256:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	001a      	movs	r2, r3
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	189b      	adds	r3, r3, r2
 8007262:	2200      	movs	r2, #0
 8007264:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8007266:	2300      	movs	r3, #0
 8007268:	e045      	b.n	80072f6 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	2b1f      	cmp	r3, #31
 8007270:	d907      	bls.n	8007282 <my_nmea_message+0x5c>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2b7e      	cmp	r3, #126	; 0x7e
 8007278:	d803      	bhi.n	8007282 <my_nmea_message+0x5c>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d103      	bne.n	800728a <my_nmea_message+0x64>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b0d      	cmp	r3, #13
 8007288:	d114      	bne.n	80072b4 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	b2d1      	uxtb	r1, r2
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	7011      	strb	r1, [r2, #0]
 8007296:	001a      	movs	r2, r3
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	189b      	adds	r3, r3, r2
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	7812      	ldrb	r2, [r2, #0]
 80072a0:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	001a      	movs	r2, r3
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	189b      	adds	r3, r3, r2
 80072ac:	2200      	movs	r2, #0
 80072ae:	701a      	strb	r2, [r3, #0]
        return 1 ;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e020      	b.n	80072f6 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b0a      	cmp	r3, #10
 80072ba:	d11a      	bne.n	80072f2 <my_nmea_message+0xcc>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d916      	bls.n	80072f2 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	3b01      	subs	r3, #1
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	701a      	strb	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	001a      	movs	r2, r3
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	189b      	adds	r3, r3, r2
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b0d      	cmp	r3, #13
 80072de:	d108      	bne.n	80072f2 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	001a      	movs	r2, r3
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	189b      	adds	r3, r3, r2
 80072ea:	2200      	movs	r2, #0
 80072ec:	701a      	strb	r2, [r3, #0]
            return 2 ;
 80072ee:	2302      	movs	r3, #2
 80072f0:	e001      	b.n	80072f6 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 80072f2:	2301      	movs	r3, #1
 80072f4:	425b      	negs	r3, r3
}
 80072f6:	0018      	movs	r0, r3
 80072f8:	46bd      	mov	sp, r7
 80072fa:	b004      	add	sp, #16
 80072fc:	bd80      	pop	{r7, pc}

080072fe <is_my_nmea_checksum_ok>:
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
}


bool is_my_nmea_checksum_ok ( const char* s )
{
 80072fe:	b590      	push	{r4, r7, lr}
 8007300:	b085      	sub	sp, #20
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8007306:	230f      	movs	r3, #15
 8007308:	18fb      	adds	r3, r7, r3
 800730a:	2200      	movs	r2, #0
 800730c:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800730e:	230e      	movs	r3, #14
 8007310:	18fb      	adds	r3, r7, r3
 8007312:	2201      	movs	r2, #1
 8007314:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8007316:	e00f      	b.n	8007338 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8007318:	220e      	movs	r2, #14
 800731a:	18bb      	adds	r3, r7, r2
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	18ba      	adds	r2, r7, r2
 8007320:	1c59      	adds	r1, r3, #1
 8007322:	7011      	strb	r1, [r2, #0]
 8007324:	001a      	movs	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	189b      	adds	r3, r3, r2
 800732a:	7819      	ldrb	r1, [r3, #0]
 800732c:	220f      	movs	r2, #15
 800732e:	18bb      	adds	r3, r7, r2
 8007330:	18ba      	adds	r2, r7, r2
 8007332:	7812      	ldrb	r2, [r2, #0]
 8007334:	404a      	eors	r2, r1
 8007336:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8007338:	210e      	movs	r1, #14
 800733a:	187b      	adds	r3, r7, r1
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	18d3      	adds	r3, r2, r3
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	2b2a      	cmp	r3, #42	; 0x2a
 8007346:	d00a      	beq.n	800735e <is_my_nmea_checksum_ok+0x60>
 8007348:	187b      	adds	r3, r7, r1
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	18d3      	adds	r3, r2, r3
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <is_my_nmea_checksum_ok+0x60>
 8007356:	187b      	adds	r3, r7, r1
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1dc      	bne.n	8007318 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800735e:	230f      	movs	r3, #15
 8007360:	18fb      	adds	r3, r7, r3
 8007362:	781c      	ldrb	r4, [r3, #0]
 8007364:	210e      	movs	r1, #14
 8007366:	187b      	adds	r3, r7, r1
 8007368:	187a      	adds	r2, r7, r1
 800736a:	7812      	ldrb	r2, [r2, #0]
 800736c:	3201      	adds	r2, #1
 800736e:	701a      	strb	r2, [r3, #0]
 8007370:	187b      	adds	r3, r7, r1
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	18d3      	adds	r3, r2, r3
 8007378:	2210      	movs	r2, #16
 800737a:	2100      	movs	r1, #0
 800737c:	0018      	movs	r0, r3
 800737e:	f001 fabd 	bl	80088fc <strtol>
 8007382:	0003      	movs	r3, r0
 8007384:	1ae3      	subs	r3, r4, r3
 8007386:	425a      	negs	r2, r3
 8007388:	4153      	adcs	r3, r2
 800738a:	b2db      	uxtb	r3, r3
}
 800738c:	0018      	movs	r0, r3
 800738e:	46bd      	mov	sp, r7
 8007390:	b005      	add	sp, #20
 8007392:	bd90      	pop	{r4, r7, pc}

08007394 <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 8007394:	b5b0      	push	{r4, r5, r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800739c:	240e      	movs	r4, #14
 800739e:	193b      	adds	r3, r7, r4
 80073a0:	2200      	movs	r2, #0
 80073a2:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2203      	movs	r2, #3
 80073a8:	212c      	movs	r1, #44	; 0x2c
 80073aa:	0018      	movs	r0, r3
 80073ac:	f7ff fef8 	bl	80071a0 <my_find_char_position>
 80073b0:	0003      	movs	r3, r0
 80073b2:	001a      	movs	r2, r3
 80073b4:	2517      	movs	r5, #23
 80073b6:	197b      	adds	r3, r7, r5
 80073b8:	3201      	adds	r2, #1
 80073ba:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80073bc:	2003      	movs	r0, #3
 80073be:	f000 f9b1 	bl	8007724 <malloc>
 80073c2:	0003      	movs	r3, r0
 80073c4:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80073c6:	197b      	adds	r3, r7, r5
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	18d1      	adds	r1, r2, r3
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2202      	movs	r2, #2
 80073d2:	0018      	movs	r0, r3
 80073d4:	f001 fc11 	bl	8008bfa <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	3302      	adds	r3, #2
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 80073e0:	193a      	adds	r2, r7, r4
 80073e2:	4907      	ldr	r1, [pc, #28]	; (8007400 <my_nmea_get_gsv_tns+0x6c>)
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	0018      	movs	r0, r3
 80073e8:	f001 fb78 	bl	8008adc <sscanf>
	free ( s ) ;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	0018      	movs	r0, r3
 80073f0:	f000 f9a2 	bl	8007738 <free>
	return tns ;
 80073f4:	193b      	adds	r3, r7, r4
 80073f6:	881b      	ldrh	r3, [r3, #0]
}
 80073f8:	0018      	movs	r0, r3
 80073fa:	46bd      	mov	sp, r7
 80073fc:	b006      	add	sp, #24
 80073fe:	bdb0      	pop	{r4, r5, r7, pc}
 8007400:	0800f7b0 	.word	0x0800f7b0

08007404 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 8007404:	b590      	push	{r4, r7, lr}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2209      	movs	r2, #9
 8007412:	212c      	movs	r1, #44	; 0x2c
 8007414:	0018      	movs	r0, r3
 8007416:	f7ff fec3 	bl	80071a0 <my_find_char_position>
 800741a:	0003      	movs	r3, r0
 800741c:	001a      	movs	r2, r3
 800741e:	2417      	movs	r4, #23
 8007420:	193b      	adds	r3, r7, r4
 8007422:	3205      	adds	r2, #5
 8007424:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8007426:	2003      	movs	r0, #3
 8007428:	f000 f97c 	bl	8007724 <malloc>
 800742c:	0003      	movs	r3, r0
 800742e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8007430:	193b      	adds	r3, r7, r4
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	18d1      	adds	r1, r2, r3
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	2202      	movs	r2, #2
 800743c:	0018      	movs	r0, r3
 800743e:	f001 fbdc 	bl	8008bfa <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	3302      	adds	r3, #2
 8007446:	2200      	movs	r2, #0
 8007448:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800744a:	240e      	movs	r4, #14
 800744c:	193a      	adds	r2, r7, r4
 800744e:	4909      	ldr	r1, [pc, #36]	; (8007474 <my_nmea_get_rmc_date_yy+0x70>)
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	0018      	movs	r0, r3
 8007454:	f001 fb42 	bl	8008adc <sscanf>
	free ( s ) ;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	0018      	movs	r0, r3
 800745c:	f000 f96c 	bl	8007738 <free>
	*yy = (uint8_t) temp ;
 8007460:	193b      	adds	r3, r7, r4
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	b2da      	uxtb	r2, r3
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	701a      	strb	r2, [r3, #0]

}
 800746a:	46c0      	nop			; (mov r8, r8)
 800746c:	46bd      	mov	sp, r7
 800746e:	b007      	add	sp, #28
 8007470:	bd90      	pop	{r4, r7, pc}
 8007472:	46c0      	nop			; (mov r8, r8)
 8007474:	0800f7b0 	.word	0x0800f7b0

08007478 <my_nmea_get_rmc_date_mm>:
void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 8007478:	b590      	push	{r4, r7, lr}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2209      	movs	r2, #9
 8007486:	212c      	movs	r1, #44	; 0x2c
 8007488:	0018      	movs	r0, r3
 800748a:	f7ff fe89 	bl	80071a0 <my_find_char_position>
 800748e:	0003      	movs	r3, r0
 8007490:	001a      	movs	r2, r3
 8007492:	2417      	movs	r4, #23
 8007494:	193b      	adds	r3, r7, r4
 8007496:	3203      	adds	r2, #3
 8007498:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800749a:	2003      	movs	r0, #3
 800749c:	f000 f942 	bl	8007724 <malloc>
 80074a0:	0003      	movs	r3, r0
 80074a2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80074a4:	193b      	adds	r3, r7, r4
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	18d1      	adds	r1, r2, r3
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	2202      	movs	r2, #2
 80074b0:	0018      	movs	r0, r3
 80074b2:	f001 fba2 	bl	8008bfa <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	3302      	adds	r3, #2
 80074ba:	2200      	movs	r2, #0
 80074bc:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 80074be:	240e      	movs	r4, #14
 80074c0:	193a      	adds	r2, r7, r4
 80074c2:	4909      	ldr	r1, [pc, #36]	; (80074e8 <my_nmea_get_rmc_date_mm+0x70>)
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	0018      	movs	r0, r3
 80074c8:	f001 fb08 	bl	8008adc <sscanf>
	free ( s ) ;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	0018      	movs	r0, r3
 80074d0:	f000 f932 	bl	8007738 <free>
	*mm = (uint8_t) temp ;
 80074d4:	193b      	adds	r3, r7, r4
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	701a      	strb	r2, [r3, #0]

}
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	46bd      	mov	sp, r7
 80074e2:	b007      	add	sp, #28
 80074e4:	bd90      	pop	{r4, r7, pc}
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	0800f7b0 	.word	0x0800f7b0

080074ec <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 80074ec:	b590      	push	{r4, r7, lr}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2209      	movs	r2, #9
 80074fa:	212c      	movs	r1, #44	; 0x2c
 80074fc:	0018      	movs	r0, r3
 80074fe:	f7ff fe4f 	bl	80071a0 <my_find_char_position>
 8007502:	0003      	movs	r3, r0
 8007504:	001a      	movs	r2, r3
 8007506:	2417      	movs	r4, #23
 8007508:	193b      	adds	r3, r7, r4
 800750a:	3201      	adds	r2, #1
 800750c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800750e:	2003      	movs	r0, #3
 8007510:	f000 f908 	bl	8007724 <malloc>
 8007514:	0003      	movs	r3, r0
 8007516:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8007518:	193b      	adds	r3, r7, r4
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	18d1      	adds	r1, r2, r3
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	2202      	movs	r2, #2
 8007524:	0018      	movs	r0, r3
 8007526:	f001 fb68 	bl	8008bfa <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	3302      	adds	r3, #2
 800752e:	2200      	movs	r2, #0
 8007530:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 8007532:	240e      	movs	r4, #14
 8007534:	193a      	adds	r2, r7, r4
 8007536:	4909      	ldr	r1, [pc, #36]	; (800755c <my_nmea_get_rmc_date_dd+0x70>)
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	0018      	movs	r0, r3
 800753c:	f001 face 	bl	8008adc <sscanf>
	free ( s ) ;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	0018      	movs	r0, r3
 8007544:	f000 f8f8 	bl	8007738 <free>
	*dd = (uint8_t) temp ;
 8007548:	193b      	adds	r3, r7, r4
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	b2da      	uxtb	r2, r3
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	701a      	strb	r2, [r3, #0]

}
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	46bd      	mov	sp, r7
 8007556:	b007      	add	sp, #28
 8007558:	bd90      	pop	{r4, r7, pc}
 800755a:	46c0      	nop			; (mov r8, r8)
 800755c:	0800f7b0 	.word	0x0800f7b0

08007560 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 8007560:	b590      	push	{r4, r7, lr}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	212c      	movs	r1, #44	; 0x2c
 8007570:	0018      	movs	r0, r3
 8007572:	f7ff fe15 	bl	80071a0 <my_find_char_position>
 8007576:	0003      	movs	r3, r0
 8007578:	001a      	movs	r2, r3
 800757a:	2417      	movs	r4, #23
 800757c:	193b      	adds	r3, r7, r4
 800757e:	3201      	adds	r2, #1
 8007580:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8007582:	2003      	movs	r0, #3
 8007584:	f000 f8ce 	bl	8007724 <malloc>
 8007588:	0003      	movs	r3, r0
 800758a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800758c:	193b      	adds	r3, r7, r4
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	18d1      	adds	r1, r2, r3
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	2202      	movs	r2, #2
 8007598:	0018      	movs	r0, r3
 800759a:	f001 fb2e 	bl	8008bfa <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	3302      	adds	r3, #2
 80075a2:	2200      	movs	r2, #0
 80075a4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 80075a6:	240e      	movs	r4, #14
 80075a8:	193a      	adds	r2, r7, r4
 80075aa:	4909      	ldr	r1, [pc, #36]	; (80075d0 <my_nmea_get_rmc_utc_hh+0x70>)
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	0018      	movs	r0, r3
 80075b0:	f001 fa94 	bl	8008adc <sscanf>
	free ( s ) ;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	0018      	movs	r0, r3
 80075b8:	f000 f8be 	bl	8007738 <free>
	*hh = (uint8_t) temp ;
 80075bc:	193b      	adds	r3, r7, r4
 80075be:	881b      	ldrh	r3, [r3, #0]
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	701a      	strb	r2, [r3, #0]

}
 80075c6:	46c0      	nop			; (mov r8, r8)
 80075c8:	46bd      	mov	sp, r7
 80075ca:	b007      	add	sp, #28
 80075cc:	bd90      	pop	{r4, r7, pc}
 80075ce:	46c0      	nop			; (mov r8, r8)
 80075d0:	0800f7b0 	.word	0x0800f7b0

080075d4 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 80075d4:	b590      	push	{r4, r7, lr}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	212c      	movs	r1, #44	; 0x2c
 80075e4:	0018      	movs	r0, r3
 80075e6:	f7ff fddb 	bl	80071a0 <my_find_char_position>
 80075ea:	0003      	movs	r3, r0
 80075ec:	001a      	movs	r2, r3
 80075ee:	2417      	movs	r4, #23
 80075f0:	193b      	adds	r3, r7, r4
 80075f2:	3203      	adds	r2, #3
 80075f4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80075f6:	2003      	movs	r0, #3
 80075f8:	f000 f894 	bl	8007724 <malloc>
 80075fc:	0003      	movs	r3, r0
 80075fe:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8007600:	193b      	adds	r3, r7, r4
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	18d1      	adds	r1, r2, r3
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	2202      	movs	r2, #2
 800760c:	0018      	movs	r0, r3
 800760e:	f001 faf4 	bl	8008bfa <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	3302      	adds	r3, #2
 8007616:	2200      	movs	r2, #0
 8007618:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800761a:	240e      	movs	r4, #14
 800761c:	193a      	adds	r2, r7, r4
 800761e:	4909      	ldr	r1, [pc, #36]	; (8007644 <my_nmea_get_rmc_utc_mm+0x70>)
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	0018      	movs	r0, r3
 8007624:	f001 fa5a 	bl	8008adc <sscanf>
	free ( s ) ;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	0018      	movs	r0, r3
 800762c:	f000 f884 	bl	8007738 <free>
	*mm = (uint8_t) temp ;
 8007630:	193b      	adds	r3, r7, r4
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	b2da      	uxtb	r2, r3
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	701a      	strb	r2, [r3, #0]

}
 800763a:	46c0      	nop			; (mov r8, r8)
 800763c:	46bd      	mov	sp, r7
 800763e:	b007      	add	sp, #28
 8007640:	bd90      	pop	{r4, r7, pc}
 8007642:	46c0      	nop			; (mov r8, r8)
 8007644:	0800f7b0 	.word	0x0800f7b0

08007648 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 8007648:	b590      	push	{r4, r7, lr}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	212c      	movs	r1, #44	; 0x2c
 8007658:	0018      	movs	r0, r3
 800765a:	f7ff fda1 	bl	80071a0 <my_find_char_position>
 800765e:	0003      	movs	r3, r0
 8007660:	001a      	movs	r2, r3
 8007662:	2417      	movs	r4, #23
 8007664:	193b      	adds	r3, r7, r4
 8007666:	3205      	adds	r2, #5
 8007668:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800766a:	2003      	movs	r0, #3
 800766c:	f000 f85a 	bl	8007724 <malloc>
 8007670:	0003      	movs	r3, r0
 8007672:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8007674:	193b      	adds	r3, r7, r4
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	18d1      	adds	r1, r2, r3
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	2202      	movs	r2, #2
 8007680:	0018      	movs	r0, r3
 8007682:	f001 faba 	bl	8008bfa <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	3302      	adds	r3, #2
 800768a:	2200      	movs	r2, #0
 800768c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800768e:	240e      	movs	r4, #14
 8007690:	193a      	adds	r2, r7, r4
 8007692:	4909      	ldr	r1, [pc, #36]	; (80076b8 <my_nmea_get_rmc_utc_ss+0x70>)
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	0018      	movs	r0, r3
 8007698:	f001 fa20 	bl	8008adc <sscanf>
	free ( s ) ;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	0018      	movs	r0, r3
 80076a0:	f000 f84a 	bl	8007738 <free>
	*ss = (uint8_t) temp ;
 80076a4:	193b      	adds	r3, r7, r4
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	701a      	strb	r2, [r3, #0]

}
 80076ae:	46c0      	nop			; (mov r8, r8)
 80076b0:	46bd      	mov	sp, r7
 80076b2:	b007      	add	sp, #28
 80076b4:	bd90      	pop	{r4, r7, pc}
 80076b6:	46c0      	nop			; (mov r8, r8)
 80076b8:	0800f7b0 	.word	0x0800f7b0

080076bc <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 80076bc:	b590      	push	{r4, r7, lr}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	212c      	movs	r1, #44	; 0x2c
 80076cc:	0018      	movs	r0, r3
 80076ce:	f7ff fd67 	bl	80071a0 <my_find_char_position>
 80076d2:	0003      	movs	r3, r0
 80076d4:	001a      	movs	r2, r3
 80076d6:	240f      	movs	r4, #15
 80076d8:	193b      	adds	r3, r7, r4
 80076da:	3208      	adds	r2, #8
 80076dc:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80076de:	2004      	movs	r0, #4
 80076e0:	f000 f820 	bl	8007724 <malloc>
 80076e4:	0003      	movs	r3, r0
 80076e6:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80076e8:	193b      	adds	r3, r7, r4
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	18d1      	adds	r1, r2, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2203      	movs	r2, #3
 80076f4:	0018      	movs	r0, r3
 80076f6:	f001 fa80 	bl	8008bfa <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	3303      	adds	r3, #3
 80076fe:	2200      	movs	r2, #0
 8007700:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	4906      	ldr	r1, [pc, #24]	; (8007720 <my_nmea_get_rmc_utc_sss+0x64>)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	0018      	movs	r0, r3
 800770a:	f001 f9e7 	bl	8008adc <sscanf>
	free ( s ) ;
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	0018      	movs	r0, r3
 8007712:	f000 f811 	bl	8007738 <free>
}
 8007716:	46c0      	nop			; (mov r8, r8)
 8007718:	46bd      	mov	sp, r7
 800771a:	b005      	add	sp, #20
 800771c:	bd90      	pop	{r4, r7, pc}
 800771e:	46c0      	nop			; (mov r8, r8)
 8007720:	0800f7b4 	.word	0x0800f7b4

08007724 <malloc>:
 8007724:	b510      	push	{r4, lr}
 8007726:	4b03      	ldr	r3, [pc, #12]	; (8007734 <malloc+0x10>)
 8007728:	0001      	movs	r1, r0
 800772a:	6818      	ldr	r0, [r3, #0]
 800772c:	f000 f80e 	bl	800774c <_malloc_r>
 8007730:	bd10      	pop	{r4, pc}
 8007732:	46c0      	nop			; (mov r8, r8)
 8007734:	200006c0 	.word	0x200006c0

08007738 <free>:
 8007738:	b510      	push	{r4, lr}
 800773a:	4b03      	ldr	r3, [pc, #12]	; (8007748 <free+0x10>)
 800773c:	0001      	movs	r1, r0
 800773e:	6818      	ldr	r0, [r3, #0]
 8007740:	f001 fba2 	bl	8008e88 <_free_r>
 8007744:	bd10      	pop	{r4, pc}
 8007746:	46c0      	nop			; (mov r8, r8)
 8007748:	200006c0 	.word	0x200006c0

0800774c <_malloc_r>:
 800774c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800774e:	000d      	movs	r5, r1
 8007750:	b087      	sub	sp, #28
 8007752:	350b      	adds	r5, #11
 8007754:	9001      	str	r0, [sp, #4]
 8007756:	2d16      	cmp	r5, #22
 8007758:	d908      	bls.n	800776c <_malloc_r+0x20>
 800775a:	2207      	movs	r2, #7
 800775c:	4395      	bics	r5, r2
 800775e:	d506      	bpl.n	800776e <_malloc_r+0x22>
 8007760:	230c      	movs	r3, #12
 8007762:	9a01      	ldr	r2, [sp, #4]
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	2000      	movs	r0, #0
 8007768:	b007      	add	sp, #28
 800776a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800776c:	2510      	movs	r5, #16
 800776e:	42a9      	cmp	r1, r5
 8007770:	d8f6      	bhi.n	8007760 <_malloc_r+0x14>
 8007772:	9801      	ldr	r0, [sp, #4]
 8007774:	f000 f9fe 	bl	8007b74 <__malloc_lock>
 8007778:	23fc      	movs	r3, #252	; 0xfc
 800777a:	4ebe      	ldr	r6, [pc, #760]	; (8007a74 <_malloc_r+0x328>)
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	429d      	cmp	r5, r3
 8007780:	d219      	bcs.n	80077b6 <_malloc_r+0x6a>
 8007782:	002a      	movs	r2, r5
 8007784:	3208      	adds	r2, #8
 8007786:	18b2      	adds	r2, r6, r2
 8007788:	0011      	movs	r1, r2
 800778a:	6854      	ldr	r4, [r2, #4]
 800778c:	3908      	subs	r1, #8
 800778e:	08eb      	lsrs	r3, r5, #3
 8007790:	428c      	cmp	r4, r1
 8007792:	d103      	bne.n	800779c <_malloc_r+0x50>
 8007794:	68d4      	ldr	r4, [r2, #12]
 8007796:	3302      	adds	r3, #2
 8007798:	42a2      	cmp	r2, r4
 800779a:	d022      	beq.n	80077e2 <_malloc_r+0x96>
 800779c:	2203      	movs	r2, #3
 800779e:	6863      	ldr	r3, [r4, #4]
 80077a0:	68a1      	ldr	r1, [r4, #8]
 80077a2:	4393      	bics	r3, r2
 80077a4:	68e2      	ldr	r2, [r4, #12]
 80077a6:	18e3      	adds	r3, r4, r3
 80077a8:	60ca      	str	r2, [r1, #12]
 80077aa:	6091      	str	r1, [r2, #8]
 80077ac:	2201      	movs	r2, #1
 80077ae:	6859      	ldr	r1, [r3, #4]
 80077b0:	430a      	orrs	r2, r1
 80077b2:	605a      	str	r2, [r3, #4]
 80077b4:	e02a      	b.n	800780c <_malloc_r+0xc0>
 80077b6:	233f      	movs	r3, #63	; 0x3f
 80077b8:	0a6a      	lsrs	r2, r5, #9
 80077ba:	d003      	beq.n	80077c4 <_malloc_r+0x78>
 80077bc:	2a04      	cmp	r2, #4
 80077be:	d82b      	bhi.n	8007818 <_malloc_r+0xcc>
 80077c0:	09ab      	lsrs	r3, r5, #6
 80077c2:	3338      	adds	r3, #56	; 0x38
 80077c4:	2203      	movs	r2, #3
 80077c6:	4694      	mov	ip, r2
 80077c8:	00d9      	lsls	r1, r3, #3
 80077ca:	1989      	adds	r1, r1, r6
 80077cc:	68cc      	ldr	r4, [r1, #12]
 80077ce:	428c      	cmp	r4, r1
 80077d0:	d006      	beq.n	80077e0 <_malloc_r+0x94>
 80077d2:	4660      	mov	r0, ip
 80077d4:	6862      	ldr	r2, [r4, #4]
 80077d6:	4382      	bics	r2, r0
 80077d8:	1b57      	subs	r7, r2, r5
 80077da:	2f0f      	cmp	r7, #15
 80077dc:	dd34      	ble.n	8007848 <_malloc_r+0xfc>
 80077de:	3b01      	subs	r3, #1
 80077e0:	3301      	adds	r3, #1
 80077e2:	6934      	ldr	r4, [r6, #16]
 80077e4:	49a4      	ldr	r1, [pc, #656]	; (8007a78 <_malloc_r+0x32c>)
 80077e6:	428c      	cmp	r4, r1
 80077e8:	d055      	beq.n	8007896 <_malloc_r+0x14a>
 80077ea:	2003      	movs	r0, #3
 80077ec:	6862      	ldr	r2, [r4, #4]
 80077ee:	4382      	bics	r2, r0
 80077f0:	1b50      	subs	r0, r2, r5
 80077f2:	280f      	cmp	r0, #15
 80077f4:	dd36      	ble.n	8007864 <_malloc_r+0x118>
 80077f6:	2301      	movs	r3, #1
 80077f8:	1967      	adds	r7, r4, r5
 80077fa:	431d      	orrs	r5, r3
 80077fc:	4303      	orrs	r3, r0
 80077fe:	6065      	str	r5, [r4, #4]
 8007800:	6177      	str	r7, [r6, #20]
 8007802:	6137      	str	r7, [r6, #16]
 8007804:	60f9      	str	r1, [r7, #12]
 8007806:	60b9      	str	r1, [r7, #8]
 8007808:	607b      	str	r3, [r7, #4]
 800780a:	50a0      	str	r0, [r4, r2]
 800780c:	9801      	ldr	r0, [sp, #4]
 800780e:	f000 f9b9 	bl	8007b84 <__malloc_unlock>
 8007812:	0020      	movs	r0, r4
 8007814:	3008      	adds	r0, #8
 8007816:	e7a7      	b.n	8007768 <_malloc_r+0x1c>
 8007818:	2a14      	cmp	r2, #20
 800781a:	d802      	bhi.n	8007822 <_malloc_r+0xd6>
 800781c:	0013      	movs	r3, r2
 800781e:	335b      	adds	r3, #91	; 0x5b
 8007820:	e7d0      	b.n	80077c4 <_malloc_r+0x78>
 8007822:	2a54      	cmp	r2, #84	; 0x54
 8007824:	d802      	bhi.n	800782c <_malloc_r+0xe0>
 8007826:	0b2b      	lsrs	r3, r5, #12
 8007828:	336e      	adds	r3, #110	; 0x6e
 800782a:	e7cb      	b.n	80077c4 <_malloc_r+0x78>
 800782c:	23aa      	movs	r3, #170	; 0xaa
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	429a      	cmp	r2, r3
 8007832:	d802      	bhi.n	800783a <_malloc_r+0xee>
 8007834:	0beb      	lsrs	r3, r5, #15
 8007836:	3377      	adds	r3, #119	; 0x77
 8007838:	e7c4      	b.n	80077c4 <_malloc_r+0x78>
 800783a:	4990      	ldr	r1, [pc, #576]	; (8007a7c <_malloc_r+0x330>)
 800783c:	237e      	movs	r3, #126	; 0x7e
 800783e:	428a      	cmp	r2, r1
 8007840:	d8c0      	bhi.n	80077c4 <_malloc_r+0x78>
 8007842:	0cab      	lsrs	r3, r5, #18
 8007844:	337c      	adds	r3, #124	; 0x7c
 8007846:	e7bd      	b.n	80077c4 <_malloc_r+0x78>
 8007848:	68e0      	ldr	r0, [r4, #12]
 800784a:	2f00      	cmp	r7, #0
 800784c:	db08      	blt.n	8007860 <_malloc_r+0x114>
 800784e:	68a3      	ldr	r3, [r4, #8]
 8007850:	60d8      	str	r0, [r3, #12]
 8007852:	6083      	str	r3, [r0, #8]
 8007854:	2301      	movs	r3, #1
 8007856:	18a2      	adds	r2, r4, r2
 8007858:	6851      	ldr	r1, [r2, #4]
 800785a:	430b      	orrs	r3, r1
 800785c:	6053      	str	r3, [r2, #4]
 800785e:	e7d5      	b.n	800780c <_malloc_r+0xc0>
 8007860:	0004      	movs	r4, r0
 8007862:	e7b4      	b.n	80077ce <_malloc_r+0x82>
 8007864:	6171      	str	r1, [r6, #20]
 8007866:	6131      	str	r1, [r6, #16]
 8007868:	2800      	cmp	r0, #0
 800786a:	daf3      	bge.n	8007854 <_malloc_r+0x108>
 800786c:	6871      	ldr	r1, [r6, #4]
 800786e:	468c      	mov	ip, r1
 8007870:	2180      	movs	r1, #128	; 0x80
 8007872:	0089      	lsls	r1, r1, #2
 8007874:	428a      	cmp	r2, r1
 8007876:	d300      	bcc.n	800787a <_malloc_r+0x12e>
 8007878:	e08c      	b.n	8007994 <_malloc_r+0x248>
 800787a:	08d1      	lsrs	r1, r2, #3
 800787c:	0950      	lsrs	r0, r2, #5
 800787e:	2201      	movs	r2, #1
 8007880:	4082      	lsls	r2, r0
 8007882:	4660      	mov	r0, ip
 8007884:	4302      	orrs	r2, r0
 8007886:	6072      	str	r2, [r6, #4]
 8007888:	00ca      	lsls	r2, r1, #3
 800788a:	1992      	adds	r2, r2, r6
 800788c:	6891      	ldr	r1, [r2, #8]
 800788e:	60e2      	str	r2, [r4, #12]
 8007890:	60a1      	str	r1, [r4, #8]
 8007892:	6094      	str	r4, [r2, #8]
 8007894:	60cc      	str	r4, [r1, #12]
 8007896:	2201      	movs	r2, #1
 8007898:	4876      	ldr	r0, [pc, #472]	; (8007a74 <_malloc_r+0x328>)
 800789a:	1099      	asrs	r1, r3, #2
 800789c:	408a      	lsls	r2, r1
 800789e:	6841      	ldr	r1, [r0, #4]
 80078a0:	4291      	cmp	r1, r2
 80078a2:	d328      	bcc.n	80078f6 <_malloc_r+0x1aa>
 80078a4:	420a      	tst	r2, r1
 80078a6:	d105      	bne.n	80078b4 <_malloc_r+0x168>
 80078a8:	2403      	movs	r4, #3
 80078aa:	43a3      	bics	r3, r4
 80078ac:	0052      	lsls	r2, r2, #1
 80078ae:	3304      	adds	r3, #4
 80078b0:	420a      	tst	r2, r1
 80078b2:	d0fb      	beq.n	80078ac <_malloc_r+0x160>
 80078b4:	496f      	ldr	r1, [pc, #444]	; (8007a74 <_malloc_r+0x328>)
 80078b6:	9104      	str	r1, [sp, #16]
 80078b8:	00d9      	lsls	r1, r3, #3
 80078ba:	1841      	adds	r1, r0, r1
 80078bc:	468c      	mov	ip, r1
 80078be:	000f      	movs	r7, r1
 80078c0:	9302      	str	r3, [sp, #8]
 80078c2:	68fc      	ldr	r4, [r7, #12]
 80078c4:	42bc      	cmp	r4, r7
 80078c6:	d000      	beq.n	80078ca <_malloc_r+0x17e>
 80078c8:	e09b      	b.n	8007a02 <_malloc_r+0x2b6>
 80078ca:	2403      	movs	r4, #3
 80078cc:	9902      	ldr	r1, [sp, #8]
 80078ce:	3708      	adds	r7, #8
 80078d0:	3101      	adds	r1, #1
 80078d2:	9102      	str	r1, [sp, #8]
 80078d4:	4221      	tst	r1, r4
 80078d6:	d1f4      	bne.n	80078c2 <_malloc_r+0x176>
 80078d8:	2103      	movs	r1, #3
 80078da:	420b      	tst	r3, r1
 80078dc:	d000      	beq.n	80078e0 <_malloc_r+0x194>
 80078de:	e0b7      	b.n	8007a50 <_malloc_r+0x304>
 80078e0:	6843      	ldr	r3, [r0, #4]
 80078e2:	4393      	bics	r3, r2
 80078e4:	6043      	str	r3, [r0, #4]
 80078e6:	9b04      	ldr	r3, [sp, #16]
 80078e8:	0052      	lsls	r2, r2, #1
 80078ea:	6859      	ldr	r1, [r3, #4]
 80078ec:	4291      	cmp	r1, r2
 80078ee:	d302      	bcc.n	80078f6 <_malloc_r+0x1aa>
 80078f0:	2a00      	cmp	r2, #0
 80078f2:	d000      	beq.n	80078f6 <_malloc_r+0x1aa>
 80078f4:	e0bb      	b.n	8007a6e <_malloc_r+0x322>
 80078f6:	2203      	movs	r2, #3
 80078f8:	6883      	ldr	r3, [r0, #8]
 80078fa:	9302      	str	r3, [sp, #8]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	4393      	bics	r3, r2
 8007900:	9303      	str	r3, [sp, #12]
 8007902:	42ab      	cmp	r3, r5
 8007904:	d303      	bcc.n	800790e <_malloc_r+0x1c2>
 8007906:	1b59      	subs	r1, r3, r5
 8007908:	290f      	cmp	r1, #15
 800790a:	dd00      	ble.n	800790e <_malloc_r+0x1c2>
 800790c:	e123      	b.n	8007b56 <_malloc_r+0x40a>
 800790e:	9b02      	ldr	r3, [sp, #8]
 8007910:	9a03      	ldr	r2, [sp, #12]
 8007912:	2008      	movs	r0, #8
 8007914:	189e      	adds	r6, r3, r2
 8007916:	4b5a      	ldr	r3, [pc, #360]	; (8007a80 <_malloc_r+0x334>)
 8007918:	681f      	ldr	r7, [r3, #0]
 800791a:	f001 fa2f 	bl	8008d7c <sysconf>
 800791e:	4b59      	ldr	r3, [pc, #356]	; (8007a84 <_malloc_r+0x338>)
 8007920:	3710      	adds	r7, #16
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	197f      	adds	r7, r7, r5
 8007926:	9004      	str	r0, [sp, #16]
 8007928:	3301      	adds	r3, #1
 800792a:	d003      	beq.n	8007934 <_malloc_r+0x1e8>
 800792c:	1e7b      	subs	r3, r7, #1
 800792e:	181b      	adds	r3, r3, r0
 8007930:	4247      	negs	r7, r0
 8007932:	401f      	ands	r7, r3
 8007934:	0039      	movs	r1, r7
 8007936:	9801      	ldr	r0, [sp, #4]
 8007938:	f001 f9cc 	bl	8008cd4 <_sbrk_r>
 800793c:	0004      	movs	r4, r0
 800793e:	1c43      	adds	r3, r0, #1
 8007940:	d100      	bne.n	8007944 <_malloc_r+0x1f8>
 8007942:	e0de      	b.n	8007b02 <_malloc_r+0x3b6>
 8007944:	4286      	cmp	r6, r0
 8007946:	d904      	bls.n	8007952 <_malloc_r+0x206>
 8007948:	4b4a      	ldr	r3, [pc, #296]	; (8007a74 <_malloc_r+0x328>)
 800794a:	9a02      	ldr	r2, [sp, #8]
 800794c:	429a      	cmp	r2, r3
 800794e:	d000      	beq.n	8007952 <_malloc_r+0x206>
 8007950:	e0d7      	b.n	8007b02 <_malloc_r+0x3b6>
 8007952:	4a4d      	ldr	r2, [pc, #308]	; (8007a88 <_malloc_r+0x33c>)
 8007954:	6813      	ldr	r3, [r2, #0]
 8007956:	18fb      	adds	r3, r7, r3
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	9a04      	ldr	r2, [sp, #16]
 800795c:	3a01      	subs	r2, #1
 800795e:	42a6      	cmp	r6, r4
 8007960:	d000      	beq.n	8007964 <_malloc_r+0x218>
 8007962:	e097      	b.n	8007a94 <_malloc_r+0x348>
 8007964:	4216      	tst	r6, r2
 8007966:	d000      	beq.n	800796a <_malloc_r+0x21e>
 8007968:	e094      	b.n	8007a94 <_malloc_r+0x348>
 800796a:	4b42      	ldr	r3, [pc, #264]	; (8007a74 <_malloc_r+0x328>)
 800796c:	689a      	ldr	r2, [r3, #8]
 800796e:	9b03      	ldr	r3, [sp, #12]
 8007970:	19df      	adds	r7, r3, r7
 8007972:	2301      	movs	r3, #1
 8007974:	433b      	orrs	r3, r7
 8007976:	6053      	str	r3, [r2, #4]
 8007978:	4b43      	ldr	r3, [pc, #268]	; (8007a88 <_malloc_r+0x33c>)
 800797a:	4a44      	ldr	r2, [pc, #272]	; (8007a8c <_malloc_r+0x340>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6811      	ldr	r1, [r2, #0]
 8007980:	428b      	cmp	r3, r1
 8007982:	d900      	bls.n	8007986 <_malloc_r+0x23a>
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	4a42      	ldr	r2, [pc, #264]	; (8007a90 <_malloc_r+0x344>)
 8007988:	6811      	ldr	r1, [r2, #0]
 800798a:	428b      	cmp	r3, r1
 800798c:	d800      	bhi.n	8007990 <_malloc_r+0x244>
 800798e:	e0b8      	b.n	8007b02 <_malloc_r+0x3b6>
 8007990:	6013      	str	r3, [r2, #0]
 8007992:	e0b6      	b.n	8007b02 <_malloc_r+0x3b6>
 8007994:	0a50      	lsrs	r0, r2, #9
 8007996:	2804      	cmp	r0, #4
 8007998:	d811      	bhi.n	80079be <_malloc_r+0x272>
 800799a:	0991      	lsrs	r1, r2, #6
 800799c:	3138      	adds	r1, #56	; 0x38
 800799e:	00cf      	lsls	r7, r1, #3
 80079a0:	19bf      	adds	r7, r7, r6
 80079a2:	68b8      	ldr	r0, [r7, #8]
 80079a4:	4287      	cmp	r7, r0
 80079a6:	d125      	bne.n	80079f4 <_malloc_r+0x2a8>
 80079a8:	2201      	movs	r2, #1
 80079aa:	1089      	asrs	r1, r1, #2
 80079ac:	408a      	lsls	r2, r1
 80079ae:	4661      	mov	r1, ip
 80079b0:	430a      	orrs	r2, r1
 80079b2:	6072      	str	r2, [r6, #4]
 80079b4:	60e7      	str	r7, [r4, #12]
 80079b6:	60a0      	str	r0, [r4, #8]
 80079b8:	60bc      	str	r4, [r7, #8]
 80079ba:	60c4      	str	r4, [r0, #12]
 80079bc:	e76b      	b.n	8007896 <_malloc_r+0x14a>
 80079be:	2814      	cmp	r0, #20
 80079c0:	d802      	bhi.n	80079c8 <_malloc_r+0x27c>
 80079c2:	0001      	movs	r1, r0
 80079c4:	315b      	adds	r1, #91	; 0x5b
 80079c6:	e7ea      	b.n	800799e <_malloc_r+0x252>
 80079c8:	2854      	cmp	r0, #84	; 0x54
 80079ca:	d802      	bhi.n	80079d2 <_malloc_r+0x286>
 80079cc:	0b11      	lsrs	r1, r2, #12
 80079ce:	316e      	adds	r1, #110	; 0x6e
 80079d0:	e7e5      	b.n	800799e <_malloc_r+0x252>
 80079d2:	21aa      	movs	r1, #170	; 0xaa
 80079d4:	0049      	lsls	r1, r1, #1
 80079d6:	4288      	cmp	r0, r1
 80079d8:	d802      	bhi.n	80079e0 <_malloc_r+0x294>
 80079da:	0bd1      	lsrs	r1, r2, #15
 80079dc:	3177      	adds	r1, #119	; 0x77
 80079de:	e7de      	b.n	800799e <_malloc_r+0x252>
 80079e0:	4f26      	ldr	r7, [pc, #152]	; (8007a7c <_malloc_r+0x330>)
 80079e2:	217e      	movs	r1, #126	; 0x7e
 80079e4:	42b8      	cmp	r0, r7
 80079e6:	d8da      	bhi.n	800799e <_malloc_r+0x252>
 80079e8:	0c91      	lsrs	r1, r2, #18
 80079ea:	317c      	adds	r1, #124	; 0x7c
 80079ec:	e7d7      	b.n	800799e <_malloc_r+0x252>
 80079ee:	6880      	ldr	r0, [r0, #8]
 80079f0:	4287      	cmp	r7, r0
 80079f2:	d004      	beq.n	80079fe <_malloc_r+0x2b2>
 80079f4:	2603      	movs	r6, #3
 80079f6:	6841      	ldr	r1, [r0, #4]
 80079f8:	43b1      	bics	r1, r6
 80079fa:	4291      	cmp	r1, r2
 80079fc:	d8f7      	bhi.n	80079ee <_malloc_r+0x2a2>
 80079fe:	68c7      	ldr	r7, [r0, #12]
 8007a00:	e7d8      	b.n	80079b4 <_malloc_r+0x268>
 8007a02:	2603      	movs	r6, #3
 8007a04:	6861      	ldr	r1, [r4, #4]
 8007a06:	43b1      	bics	r1, r6
 8007a08:	9103      	str	r1, [sp, #12]
 8007a0a:	68e6      	ldr	r6, [r4, #12]
 8007a0c:	1b49      	subs	r1, r1, r5
 8007a0e:	290f      	cmp	r1, #15
 8007a10:	dd10      	ble.n	8007a34 <_malloc_r+0x2e8>
 8007a12:	2201      	movs	r2, #1
 8007a14:	1963      	adds	r3, r4, r5
 8007a16:	4315      	orrs	r5, r2
 8007a18:	6065      	str	r5, [r4, #4]
 8007a1a:	68a5      	ldr	r5, [r4, #8]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	60ee      	str	r6, [r5, #12]
 8007a20:	60b5      	str	r5, [r6, #8]
 8007a22:	6143      	str	r3, [r0, #20]
 8007a24:	6103      	str	r3, [r0, #16]
 8007a26:	4814      	ldr	r0, [pc, #80]	; (8007a78 <_malloc_r+0x32c>)
 8007a28:	605a      	str	r2, [r3, #4]
 8007a2a:	60d8      	str	r0, [r3, #12]
 8007a2c:	6098      	str	r0, [r3, #8]
 8007a2e:	9b03      	ldr	r3, [sp, #12]
 8007a30:	50e1      	str	r1, [r4, r3]
 8007a32:	e6eb      	b.n	800780c <_malloc_r+0xc0>
 8007a34:	2900      	cmp	r1, #0
 8007a36:	db09      	blt.n	8007a4c <_malloc_r+0x300>
 8007a38:	9b03      	ldr	r3, [sp, #12]
 8007a3a:	18e1      	adds	r1, r4, r3
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	684a      	ldr	r2, [r1, #4]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	604b      	str	r3, [r1, #4]
 8007a44:	68a3      	ldr	r3, [r4, #8]
 8007a46:	60de      	str	r6, [r3, #12]
 8007a48:	60b3      	str	r3, [r6, #8]
 8007a4a:	e6df      	b.n	800780c <_malloc_r+0xc0>
 8007a4c:	0034      	movs	r4, r6
 8007a4e:	e739      	b.n	80078c4 <_malloc_r+0x178>
 8007a50:	2108      	movs	r1, #8
 8007a52:	4249      	negs	r1, r1
 8007a54:	448c      	add	ip, r1
 8007a56:	4661      	mov	r1, ip
 8007a58:	6889      	ldr	r1, [r1, #8]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	4561      	cmp	r1, ip
 8007a5e:	d100      	bne.n	8007a62 <_malloc_r+0x316>
 8007a60:	e73a      	b.n	80078d8 <_malloc_r+0x18c>
 8007a62:	e740      	b.n	80078e6 <_malloc_r+0x19a>
 8007a64:	3304      	adds	r3, #4
 8007a66:	0052      	lsls	r2, r2, #1
 8007a68:	420a      	tst	r2, r1
 8007a6a:	d0fb      	beq.n	8007a64 <_malloc_r+0x318>
 8007a6c:	e724      	b.n	80078b8 <_malloc_r+0x16c>
 8007a6e:	9b02      	ldr	r3, [sp, #8]
 8007a70:	e7fa      	b.n	8007a68 <_malloc_r+0x31c>
 8007a72:	46c0      	nop			; (mov r8, r8)
 8007a74:	20000014 	.word	0x20000014
 8007a78:	2000001c 	.word	0x2000001c
 8007a7c:	00000554 	.word	0x00000554
 8007a80:	20000a60 	.word	0x20000a60
 8007a84:	2000041c 	.word	0x2000041c
 8007a88:	20000a30 	.word	0x20000a30
 8007a8c:	20000a58 	.word	0x20000a58
 8007a90:	20000a5c 	.word	0x20000a5c
 8007a94:	4934      	ldr	r1, [pc, #208]	; (8007b68 <_malloc_r+0x41c>)
 8007a96:	6808      	ldr	r0, [r1, #0]
 8007a98:	3001      	adds	r0, #1
 8007a9a:	d140      	bne.n	8007b1e <_malloc_r+0x3d2>
 8007a9c:	600c      	str	r4, [r1, #0]
 8007a9e:	2107      	movs	r1, #7
 8007aa0:	0026      	movs	r6, r4
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	400e      	ands	r6, r1
 8007aa6:	420c      	tst	r4, r1
 8007aa8:	d002      	beq.n	8007ab0 <_malloc_r+0x364>
 8007aaa:	3308      	adds	r3, #8
 8007aac:	1b9b      	subs	r3, r3, r6
 8007aae:	18e4      	adds	r4, r4, r3
 8007ab0:	19e1      	adds	r1, r4, r7
 8007ab2:	9105      	str	r1, [sp, #20]
 8007ab4:	9f05      	ldr	r7, [sp, #20]
 8007ab6:	9904      	ldr	r1, [sp, #16]
 8007ab8:	4017      	ands	r7, r2
 8007aba:	18cb      	adds	r3, r1, r3
 8007abc:	1bdf      	subs	r7, r3, r7
 8007abe:	4017      	ands	r7, r2
 8007ac0:	0039      	movs	r1, r7
 8007ac2:	9801      	ldr	r0, [sp, #4]
 8007ac4:	f001 f906 	bl	8008cd4 <_sbrk_r>
 8007ac8:	1c43      	adds	r3, r0, #1
 8007aca:	d107      	bne.n	8007adc <_malloc_r+0x390>
 8007acc:	1e37      	subs	r7, r6, #0
 8007ace:	9805      	ldr	r0, [sp, #20]
 8007ad0:	d004      	beq.n	8007adc <_malloc_r+0x390>
 8007ad2:	0030      	movs	r0, r6
 8007ad4:	2700      	movs	r7, #0
 8007ad6:	9b05      	ldr	r3, [sp, #20]
 8007ad8:	3808      	subs	r0, #8
 8007ada:	1818      	adds	r0, r3, r0
 8007adc:	4a23      	ldr	r2, [pc, #140]	; (8007b6c <_malloc_r+0x420>)
 8007ade:	1b00      	subs	r0, r0, r4
 8007ae0:	6813      	ldr	r3, [r2, #0]
 8007ae2:	19c0      	adds	r0, r0, r7
 8007ae4:	19db      	adds	r3, r3, r7
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	4b21      	ldr	r3, [pc, #132]	; (8007b70 <_malloc_r+0x424>)
 8007aec:	9902      	ldr	r1, [sp, #8]
 8007aee:	4310      	orrs	r0, r2
 8007af0:	609c      	str	r4, [r3, #8]
 8007af2:	6060      	str	r0, [r4, #4]
 8007af4:	4299      	cmp	r1, r3
 8007af6:	d100      	bne.n	8007afa <_malloc_r+0x3ae>
 8007af8:	e73e      	b.n	8007978 <_malloc_r+0x22c>
 8007afa:	9b03      	ldr	r3, [sp, #12]
 8007afc:	2b0f      	cmp	r3, #15
 8007afe:	d813      	bhi.n	8007b28 <_malloc_r+0x3dc>
 8007b00:	6062      	str	r2, [r4, #4]
 8007b02:	2203      	movs	r2, #3
 8007b04:	4b1a      	ldr	r3, [pc, #104]	; (8007b70 <_malloc_r+0x424>)
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	4393      	bics	r3, r2
 8007b0c:	1b59      	subs	r1, r3, r5
 8007b0e:	42ab      	cmp	r3, r5
 8007b10:	d301      	bcc.n	8007b16 <_malloc_r+0x3ca>
 8007b12:	290f      	cmp	r1, #15
 8007b14:	dc1f      	bgt.n	8007b56 <_malloc_r+0x40a>
 8007b16:	9801      	ldr	r0, [sp, #4]
 8007b18:	f000 f834 	bl	8007b84 <__malloc_unlock>
 8007b1c:	e623      	b.n	8007766 <_malloc_r+0x1a>
 8007b1e:	4913      	ldr	r1, [pc, #76]	; (8007b6c <_malloc_r+0x420>)
 8007b20:	1ba6      	subs	r6, r4, r6
 8007b22:	18f6      	adds	r6, r6, r3
 8007b24:	600e      	str	r6, [r1, #0]
 8007b26:	e7ba      	b.n	8007a9e <_malloc_r+0x352>
 8007b28:	2107      	movs	r1, #7
 8007b2a:	9b03      	ldr	r3, [sp, #12]
 8007b2c:	3b0c      	subs	r3, #12
 8007b2e:	438b      	bics	r3, r1
 8007b30:	9902      	ldr	r1, [sp, #8]
 8007b32:	6849      	ldr	r1, [r1, #4]
 8007b34:	400a      	ands	r2, r1
 8007b36:	9902      	ldr	r1, [sp, #8]
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	604a      	str	r2, [r1, #4]
 8007b3c:	18ca      	adds	r2, r1, r3
 8007b3e:	2105      	movs	r1, #5
 8007b40:	6051      	str	r1, [r2, #4]
 8007b42:	6091      	str	r1, [r2, #8]
 8007b44:	2b0f      	cmp	r3, #15
 8007b46:	d800      	bhi.n	8007b4a <_malloc_r+0x3fe>
 8007b48:	e716      	b.n	8007978 <_malloc_r+0x22c>
 8007b4a:	9902      	ldr	r1, [sp, #8]
 8007b4c:	9801      	ldr	r0, [sp, #4]
 8007b4e:	3108      	adds	r1, #8
 8007b50:	f001 f99a 	bl	8008e88 <_free_r>
 8007b54:	e710      	b.n	8007978 <_malloc_r+0x22c>
 8007b56:	2201      	movs	r2, #1
 8007b58:	0013      	movs	r3, r2
 8007b5a:	4805      	ldr	r0, [pc, #20]	; (8007b70 <_malloc_r+0x424>)
 8007b5c:	432b      	orrs	r3, r5
 8007b5e:	6884      	ldr	r4, [r0, #8]
 8007b60:	6063      	str	r3, [r4, #4]
 8007b62:	1963      	adds	r3, r4, r5
 8007b64:	6083      	str	r3, [r0, #8]
 8007b66:	e623      	b.n	80077b0 <_malloc_r+0x64>
 8007b68:	2000041c 	.word	0x2000041c
 8007b6c:	20000a30 	.word	0x20000a30
 8007b70:	20000014 	.word	0x20000014

08007b74 <__malloc_lock>:
 8007b74:	b510      	push	{r4, lr}
 8007b76:	4802      	ldr	r0, [pc, #8]	; (8007b80 <__malloc_lock+0xc>)
 8007b78:	f001 f8fe 	bl	8008d78 <__retarget_lock_acquire_recursive>
 8007b7c:	bd10      	pop	{r4, pc}
 8007b7e:	46c0      	nop			; (mov r8, r8)
 8007b80:	20000ba5 	.word	0x20000ba5

08007b84 <__malloc_unlock>:
 8007b84:	b510      	push	{r4, lr}
 8007b86:	4802      	ldr	r0, [pc, #8]	; (8007b90 <__malloc_unlock+0xc>)
 8007b88:	f001 f8f7 	bl	8008d7a <__retarget_lock_release_recursive>
 8007b8c:	bd10      	pop	{r4, pc}
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	20000ba5 	.word	0x20000ba5

08007b94 <sulp>:
 8007b94:	b570      	push	{r4, r5, r6, lr}
 8007b96:	0016      	movs	r6, r2
 8007b98:	000d      	movs	r5, r1
 8007b9a:	f002 f8cb 	bl	8009d34 <__ulp>
 8007b9e:	2e00      	cmp	r6, #0
 8007ba0:	d00d      	beq.n	8007bbe <sulp+0x2a>
 8007ba2:	236b      	movs	r3, #107	; 0x6b
 8007ba4:	006a      	lsls	r2, r5, #1
 8007ba6:	0d52      	lsrs	r2, r2, #21
 8007ba8:	1a9b      	subs	r3, r3, r2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	dd07      	ble.n	8007bbe <sulp+0x2a>
 8007bae:	2400      	movs	r4, #0
 8007bb0:	4a03      	ldr	r2, [pc, #12]	; (8007bc0 <sulp+0x2c>)
 8007bb2:	051b      	lsls	r3, r3, #20
 8007bb4:	189d      	adds	r5, r3, r2
 8007bb6:	002b      	movs	r3, r5
 8007bb8:	0022      	movs	r2, r4
 8007bba:	f7f9 fd57 	bl	800166c <__aeabi_dmul>
 8007bbe:	bd70      	pop	{r4, r5, r6, pc}
 8007bc0:	3ff00000 	.word	0x3ff00000

08007bc4 <_strtod_l>:
 8007bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bc6:	b0a1      	sub	sp, #132	; 0x84
 8007bc8:	9219      	str	r2, [sp, #100]	; 0x64
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2600      	movs	r6, #0
 8007bce:	2700      	movs	r7, #0
 8007bd0:	9004      	str	r0, [sp, #16]
 8007bd2:	9107      	str	r1, [sp, #28]
 8007bd4:	921c      	str	r2, [sp, #112]	; 0x70
 8007bd6:	911b      	str	r1, [sp, #108]	; 0x6c
 8007bd8:	780a      	ldrb	r2, [r1, #0]
 8007bda:	2a2b      	cmp	r2, #43	; 0x2b
 8007bdc:	d055      	beq.n	8007c8a <_strtod_l+0xc6>
 8007bde:	d841      	bhi.n	8007c64 <_strtod_l+0xa0>
 8007be0:	2a0d      	cmp	r2, #13
 8007be2:	d83b      	bhi.n	8007c5c <_strtod_l+0x98>
 8007be4:	2a08      	cmp	r2, #8
 8007be6:	d83b      	bhi.n	8007c60 <_strtod_l+0x9c>
 8007be8:	2a00      	cmp	r2, #0
 8007bea:	d044      	beq.n	8007c76 <_strtod_l+0xb2>
 8007bec:	2200      	movs	r2, #0
 8007bee:	920f      	str	r2, [sp, #60]	; 0x3c
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007bf4:	9109      	str	r1, [sp, #36]	; 0x24
 8007bf6:	782a      	ldrb	r2, [r5, #0]
 8007bf8:	2a30      	cmp	r2, #48	; 0x30
 8007bfa:	d000      	beq.n	8007bfe <_strtod_l+0x3a>
 8007bfc:	e085      	b.n	8007d0a <_strtod_l+0x146>
 8007bfe:	786a      	ldrb	r2, [r5, #1]
 8007c00:	3120      	adds	r1, #32
 8007c02:	438a      	bics	r2, r1
 8007c04:	2a58      	cmp	r2, #88	; 0x58
 8007c06:	d000      	beq.n	8007c0a <_strtod_l+0x46>
 8007c08:	e075      	b.n	8007cf6 <_strtod_l+0x132>
 8007c0a:	9302      	str	r3, [sp, #8]
 8007c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c0e:	4a97      	ldr	r2, [pc, #604]	; (8007e6c <_strtod_l+0x2a8>)
 8007c10:	9301      	str	r3, [sp, #4]
 8007c12:	ab1c      	add	r3, sp, #112	; 0x70
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	9804      	ldr	r0, [sp, #16]
 8007c18:	ab1d      	add	r3, sp, #116	; 0x74
 8007c1a:	a91b      	add	r1, sp, #108	; 0x6c
 8007c1c:	f001 fa50 	bl	80090c0 <__gethex>
 8007c20:	230f      	movs	r3, #15
 8007c22:	0002      	movs	r2, r0
 8007c24:	401a      	ands	r2, r3
 8007c26:	0004      	movs	r4, r0
 8007c28:	9205      	str	r2, [sp, #20]
 8007c2a:	4218      	tst	r0, r3
 8007c2c:	d005      	beq.n	8007c3a <_strtod_l+0x76>
 8007c2e:	2a06      	cmp	r2, #6
 8007c30:	d12d      	bne.n	8007c8e <_strtod_l+0xca>
 8007c32:	1c6b      	adds	r3, r5, #1
 8007c34:	931b      	str	r3, [sp, #108]	; 0x6c
 8007c36:	2300      	movs	r3, #0
 8007c38:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <_strtod_l+0x82>
 8007c40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c42:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01b      	beq.n	8007c84 <_strtod_l+0xc0>
 8007c4c:	2380      	movs	r3, #128	; 0x80
 8007c4e:	0032      	movs	r2, r6
 8007c50:	061b      	lsls	r3, r3, #24
 8007c52:	18fb      	adds	r3, r7, r3
 8007c54:	0010      	movs	r0, r2
 8007c56:	0019      	movs	r1, r3
 8007c58:	b021      	add	sp, #132	; 0x84
 8007c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c5c:	2a20      	cmp	r2, #32
 8007c5e:	d1c5      	bne.n	8007bec <_strtod_l+0x28>
 8007c60:	3101      	adds	r1, #1
 8007c62:	e7b8      	b.n	8007bd6 <_strtod_l+0x12>
 8007c64:	2a2d      	cmp	r2, #45	; 0x2d
 8007c66:	d1c1      	bne.n	8007bec <_strtod_l+0x28>
 8007c68:	3a2c      	subs	r2, #44	; 0x2c
 8007c6a:	920f      	str	r2, [sp, #60]	; 0x3c
 8007c6c:	1c4a      	adds	r2, r1, #1
 8007c6e:	921b      	str	r2, [sp, #108]	; 0x6c
 8007c70:	784a      	ldrb	r2, [r1, #1]
 8007c72:	2a00      	cmp	r2, #0
 8007c74:	d1bc      	bne.n	8007bf0 <_strtod_l+0x2c>
 8007c76:	9b07      	ldr	r3, [sp, #28]
 8007c78:	931b      	str	r3, [sp, #108]	; 0x6c
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1dd      	bne.n	8007c40 <_strtod_l+0x7c>
 8007c84:	0032      	movs	r2, r6
 8007c86:	003b      	movs	r3, r7
 8007c88:	e7e4      	b.n	8007c54 <_strtod_l+0x90>
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	e7ed      	b.n	8007c6a <_strtod_l+0xa6>
 8007c8e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	d007      	beq.n	8007ca4 <_strtod_l+0xe0>
 8007c94:	2135      	movs	r1, #53	; 0x35
 8007c96:	a81e      	add	r0, sp, #120	; 0x78
 8007c98:	f002 f93d 	bl	8009f16 <__copybits>
 8007c9c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c9e:	9804      	ldr	r0, [sp, #16]
 8007ca0:	f001 fd3a 	bl	8009718 <_Bfree>
 8007ca4:	9805      	ldr	r0, [sp, #20]
 8007ca6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ca8:	3801      	subs	r0, #1
 8007caa:	2804      	cmp	r0, #4
 8007cac:	d806      	bhi.n	8007cbc <_strtod_l+0xf8>
 8007cae:	f7f8 fa31 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007cb2:	0312      	.short	0x0312
 8007cb4:	1e1c      	.short	0x1e1c
 8007cb6:	12          	.byte	0x12
 8007cb7:	00          	.byte	0x00
 8007cb8:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007cba:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8007cbc:	05e4      	lsls	r4, r4, #23
 8007cbe:	d502      	bpl.n	8007cc6 <_strtod_l+0x102>
 8007cc0:	2380      	movs	r3, #128	; 0x80
 8007cc2:	061b      	lsls	r3, r3, #24
 8007cc4:	431f      	orrs	r7, r3
 8007cc6:	4b6a      	ldr	r3, [pc, #424]	; (8007e70 <_strtod_l+0x2ac>)
 8007cc8:	423b      	tst	r3, r7
 8007cca:	d1b6      	bne.n	8007c3a <_strtod_l+0x76>
 8007ccc:	f001 f828 	bl	8008d20 <__errno>
 8007cd0:	2322      	movs	r3, #34	; 0x22
 8007cd2:	6003      	str	r3, [r0, #0]
 8007cd4:	e7b1      	b.n	8007c3a <_strtod_l+0x76>
 8007cd6:	4967      	ldr	r1, [pc, #412]	; (8007e74 <_strtod_l+0x2b0>)
 8007cd8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007cda:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007cdc:	400a      	ands	r2, r1
 8007cde:	4966      	ldr	r1, [pc, #408]	; (8007e78 <_strtod_l+0x2b4>)
 8007ce0:	185b      	adds	r3, r3, r1
 8007ce2:	051b      	lsls	r3, r3, #20
 8007ce4:	431a      	orrs	r2, r3
 8007ce6:	0017      	movs	r7, r2
 8007ce8:	e7e8      	b.n	8007cbc <_strtod_l+0xf8>
 8007cea:	4f61      	ldr	r7, [pc, #388]	; (8007e70 <_strtod_l+0x2ac>)
 8007cec:	e7e6      	b.n	8007cbc <_strtod_l+0xf8>
 8007cee:	2601      	movs	r6, #1
 8007cf0:	4f62      	ldr	r7, [pc, #392]	; (8007e7c <_strtod_l+0x2b8>)
 8007cf2:	4276      	negs	r6, r6
 8007cf4:	e7e2      	b.n	8007cbc <_strtod_l+0xf8>
 8007cf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cf8:	1c5a      	adds	r2, r3, #1
 8007cfa:	921b      	str	r2, [sp, #108]	; 0x6c
 8007cfc:	785b      	ldrb	r3, [r3, #1]
 8007cfe:	2b30      	cmp	r3, #48	; 0x30
 8007d00:	d0f9      	beq.n	8007cf6 <_strtod_l+0x132>
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d099      	beq.n	8007c3a <_strtod_l+0x76>
 8007d06:	2301      	movs	r3, #1
 8007d08:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0a:	2500      	movs	r5, #0
 8007d0c:	220a      	movs	r2, #10
 8007d0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d10:	950d      	str	r5, [sp, #52]	; 0x34
 8007d12:	9310      	str	r3, [sp, #64]	; 0x40
 8007d14:	9508      	str	r5, [sp, #32]
 8007d16:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007d18:	7804      	ldrb	r4, [r0, #0]
 8007d1a:	0023      	movs	r3, r4
 8007d1c:	3b30      	subs	r3, #48	; 0x30
 8007d1e:	b2d9      	uxtb	r1, r3
 8007d20:	2909      	cmp	r1, #9
 8007d22:	d927      	bls.n	8007d74 <_strtod_l+0x1b0>
 8007d24:	2201      	movs	r2, #1
 8007d26:	4956      	ldr	r1, [pc, #344]	; (8007e80 <_strtod_l+0x2bc>)
 8007d28:	f000 ff56 	bl	8008bd8 <strncmp>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d031      	beq.n	8007d94 <_strtod_l+0x1d0>
 8007d30:	2000      	movs	r0, #0
 8007d32:	0023      	movs	r3, r4
 8007d34:	4684      	mov	ip, r0
 8007d36:	9a08      	ldr	r2, [sp, #32]
 8007d38:	900c      	str	r0, [sp, #48]	; 0x30
 8007d3a:	9205      	str	r2, [sp, #20]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	0019      	movs	r1, r3
 8007d40:	4391      	bics	r1, r2
 8007d42:	000a      	movs	r2, r1
 8007d44:	2100      	movs	r1, #0
 8007d46:	9106      	str	r1, [sp, #24]
 8007d48:	2a45      	cmp	r2, #69	; 0x45
 8007d4a:	d000      	beq.n	8007d4e <_strtod_l+0x18a>
 8007d4c:	e0c2      	b.n	8007ed4 <_strtod_l+0x310>
 8007d4e:	9b05      	ldr	r3, [sp, #20]
 8007d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d52:	4303      	orrs	r3, r0
 8007d54:	4313      	orrs	r3, r2
 8007d56:	428b      	cmp	r3, r1
 8007d58:	d08d      	beq.n	8007c76 <_strtod_l+0xb2>
 8007d5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d5c:	9307      	str	r3, [sp, #28]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d62:	9b07      	ldr	r3, [sp, #28]
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	2b2b      	cmp	r3, #43	; 0x2b
 8007d68:	d071      	beq.n	8007e4e <_strtod_l+0x28a>
 8007d6a:	000c      	movs	r4, r1
 8007d6c:	2b2d      	cmp	r3, #45	; 0x2d
 8007d6e:	d174      	bne.n	8007e5a <_strtod_l+0x296>
 8007d70:	2401      	movs	r4, #1
 8007d72:	e06d      	b.n	8007e50 <_strtod_l+0x28c>
 8007d74:	9908      	ldr	r1, [sp, #32]
 8007d76:	2908      	cmp	r1, #8
 8007d78:	dc09      	bgt.n	8007d8e <_strtod_l+0x1ca>
 8007d7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007d7c:	4351      	muls	r1, r2
 8007d7e:	185b      	adds	r3, r3, r1
 8007d80:	930d      	str	r3, [sp, #52]	; 0x34
 8007d82:	9b08      	ldr	r3, [sp, #32]
 8007d84:	3001      	adds	r0, #1
 8007d86:	3301      	adds	r3, #1
 8007d88:	9308      	str	r3, [sp, #32]
 8007d8a:	901b      	str	r0, [sp, #108]	; 0x6c
 8007d8c:	e7c3      	b.n	8007d16 <_strtod_l+0x152>
 8007d8e:	4355      	muls	r5, r2
 8007d90:	195d      	adds	r5, r3, r5
 8007d92:	e7f6      	b.n	8007d82 <_strtod_l+0x1be>
 8007d94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d96:	1c5a      	adds	r2, r3, #1
 8007d98:	921b      	str	r2, [sp, #108]	; 0x6c
 8007d9a:	9a08      	ldr	r2, [sp, #32]
 8007d9c:	785b      	ldrb	r3, [r3, #1]
 8007d9e:	2a00      	cmp	r2, #0
 8007da0:	d03a      	beq.n	8007e18 <_strtod_l+0x254>
 8007da2:	900c      	str	r0, [sp, #48]	; 0x30
 8007da4:	9205      	str	r2, [sp, #20]
 8007da6:	001a      	movs	r2, r3
 8007da8:	3a30      	subs	r2, #48	; 0x30
 8007daa:	2a09      	cmp	r2, #9
 8007dac:	d912      	bls.n	8007dd4 <_strtod_l+0x210>
 8007dae:	2201      	movs	r2, #1
 8007db0:	4694      	mov	ip, r2
 8007db2:	e7c3      	b.n	8007d3c <_strtod_l+0x178>
 8007db4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007db6:	3001      	adds	r0, #1
 8007db8:	1c5a      	adds	r2, r3, #1
 8007dba:	921b      	str	r2, [sp, #108]	; 0x6c
 8007dbc:	785b      	ldrb	r3, [r3, #1]
 8007dbe:	2b30      	cmp	r3, #48	; 0x30
 8007dc0:	d0f8      	beq.n	8007db4 <_strtod_l+0x1f0>
 8007dc2:	001a      	movs	r2, r3
 8007dc4:	3a31      	subs	r2, #49	; 0x31
 8007dc6:	2a08      	cmp	r2, #8
 8007dc8:	d83c      	bhi.n	8007e44 <_strtod_l+0x280>
 8007dca:	900c      	str	r0, [sp, #48]	; 0x30
 8007dcc:	2000      	movs	r0, #0
 8007dce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007dd0:	9005      	str	r0, [sp, #20]
 8007dd2:	9210      	str	r2, [sp, #64]	; 0x40
 8007dd4:	001a      	movs	r2, r3
 8007dd6:	1c41      	adds	r1, r0, #1
 8007dd8:	3a30      	subs	r2, #48	; 0x30
 8007dda:	2b30      	cmp	r3, #48	; 0x30
 8007ddc:	d016      	beq.n	8007e0c <_strtod_l+0x248>
 8007dde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007de0:	185b      	adds	r3, r3, r1
 8007de2:	930c      	str	r3, [sp, #48]	; 0x30
 8007de4:	9b05      	ldr	r3, [sp, #20]
 8007de6:	210a      	movs	r1, #10
 8007de8:	469c      	mov	ip, r3
 8007dea:	4484      	add	ip, r0
 8007dec:	4563      	cmp	r3, ip
 8007dee:	d115      	bne.n	8007e1c <_strtod_l+0x258>
 8007df0:	9905      	ldr	r1, [sp, #20]
 8007df2:	9b05      	ldr	r3, [sp, #20]
 8007df4:	3101      	adds	r1, #1
 8007df6:	1809      	adds	r1, r1, r0
 8007df8:	181b      	adds	r3, r3, r0
 8007dfa:	9105      	str	r1, [sp, #20]
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	dc19      	bgt.n	8007e34 <_strtod_l+0x270>
 8007e00:	230a      	movs	r3, #10
 8007e02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007e04:	434b      	muls	r3, r1
 8007e06:	2100      	movs	r1, #0
 8007e08:	18d3      	adds	r3, r2, r3
 8007e0a:	930d      	str	r3, [sp, #52]	; 0x34
 8007e0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e0e:	0008      	movs	r0, r1
 8007e10:	1c5a      	adds	r2, r3, #1
 8007e12:	921b      	str	r2, [sp, #108]	; 0x6c
 8007e14:	785b      	ldrb	r3, [r3, #1]
 8007e16:	e7c6      	b.n	8007da6 <_strtod_l+0x1e2>
 8007e18:	9808      	ldr	r0, [sp, #32]
 8007e1a:	e7d0      	b.n	8007dbe <_strtod_l+0x1fa>
 8007e1c:	1c5c      	adds	r4, r3, #1
 8007e1e:	2b08      	cmp	r3, #8
 8007e20:	dc04      	bgt.n	8007e2c <_strtod_l+0x268>
 8007e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e24:	434b      	muls	r3, r1
 8007e26:	930d      	str	r3, [sp, #52]	; 0x34
 8007e28:	0023      	movs	r3, r4
 8007e2a:	e7df      	b.n	8007dec <_strtod_l+0x228>
 8007e2c:	2c10      	cmp	r4, #16
 8007e2e:	dcfb      	bgt.n	8007e28 <_strtod_l+0x264>
 8007e30:	434d      	muls	r5, r1
 8007e32:	e7f9      	b.n	8007e28 <_strtod_l+0x264>
 8007e34:	9b05      	ldr	r3, [sp, #20]
 8007e36:	2100      	movs	r1, #0
 8007e38:	2b10      	cmp	r3, #16
 8007e3a:	dce7      	bgt.n	8007e0c <_strtod_l+0x248>
 8007e3c:	230a      	movs	r3, #10
 8007e3e:	435d      	muls	r5, r3
 8007e40:	1955      	adds	r5, r2, r5
 8007e42:	e7e3      	b.n	8007e0c <_strtod_l+0x248>
 8007e44:	2200      	movs	r2, #0
 8007e46:	920c      	str	r2, [sp, #48]	; 0x30
 8007e48:	9205      	str	r2, [sp, #20]
 8007e4a:	3201      	adds	r2, #1
 8007e4c:	e7b0      	b.n	8007db0 <_strtod_l+0x1ec>
 8007e4e:	2400      	movs	r4, #0
 8007e50:	9b07      	ldr	r3, [sp, #28]
 8007e52:	3302      	adds	r3, #2
 8007e54:	931b      	str	r3, [sp, #108]	; 0x6c
 8007e56:	9b07      	ldr	r3, [sp, #28]
 8007e58:	789b      	ldrb	r3, [r3, #2]
 8007e5a:	001a      	movs	r2, r3
 8007e5c:	3a30      	subs	r2, #48	; 0x30
 8007e5e:	2a09      	cmp	r2, #9
 8007e60:	d914      	bls.n	8007e8c <_strtod_l+0x2c8>
 8007e62:	9a07      	ldr	r2, [sp, #28]
 8007e64:	921b      	str	r2, [sp, #108]	; 0x6c
 8007e66:	2200      	movs	r2, #0
 8007e68:	e033      	b.n	8007ed2 <_strtod_l+0x30e>
 8007e6a:	46c0      	nop			; (mov r8, r8)
 8007e6c:	0800f884 	.word	0x0800f884
 8007e70:	7ff00000 	.word	0x7ff00000
 8007e74:	ffefffff 	.word	0xffefffff
 8007e78:	00000433 	.word	0x00000433
 8007e7c:	7fffffff 	.word	0x7fffffff
 8007e80:	0800f880 	.word	0x0800f880
 8007e84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	921b      	str	r2, [sp, #108]	; 0x6c
 8007e8a:	785b      	ldrb	r3, [r3, #1]
 8007e8c:	2b30      	cmp	r3, #48	; 0x30
 8007e8e:	d0f9      	beq.n	8007e84 <_strtod_l+0x2c0>
 8007e90:	2200      	movs	r2, #0
 8007e92:	9206      	str	r2, [sp, #24]
 8007e94:	001a      	movs	r2, r3
 8007e96:	3a31      	subs	r2, #49	; 0x31
 8007e98:	2a08      	cmp	r2, #8
 8007e9a:	d81b      	bhi.n	8007ed4 <_strtod_l+0x310>
 8007e9c:	3b30      	subs	r3, #48	; 0x30
 8007e9e:	930e      	str	r3, [sp, #56]	; 0x38
 8007ea0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ea2:	9306      	str	r3, [sp, #24]
 8007ea4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ea6:	1c59      	adds	r1, r3, #1
 8007ea8:	911b      	str	r1, [sp, #108]	; 0x6c
 8007eaa:	785b      	ldrb	r3, [r3, #1]
 8007eac:	001a      	movs	r2, r3
 8007eae:	3a30      	subs	r2, #48	; 0x30
 8007eb0:	2a09      	cmp	r2, #9
 8007eb2:	d93a      	bls.n	8007f2a <_strtod_l+0x366>
 8007eb4:	9a06      	ldr	r2, [sp, #24]
 8007eb6:	1a8a      	subs	r2, r1, r2
 8007eb8:	49b2      	ldr	r1, [pc, #712]	; (8008184 <_strtod_l+0x5c0>)
 8007eba:	9106      	str	r1, [sp, #24]
 8007ebc:	2a08      	cmp	r2, #8
 8007ebe:	dc04      	bgt.n	8007eca <_strtod_l+0x306>
 8007ec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ec2:	9206      	str	r2, [sp, #24]
 8007ec4:	428a      	cmp	r2, r1
 8007ec6:	dd00      	ble.n	8007eca <_strtod_l+0x306>
 8007ec8:	9106      	str	r1, [sp, #24]
 8007eca:	2c00      	cmp	r4, #0
 8007ecc:	d002      	beq.n	8007ed4 <_strtod_l+0x310>
 8007ece:	9a06      	ldr	r2, [sp, #24]
 8007ed0:	4252      	negs	r2, r2
 8007ed2:	9206      	str	r2, [sp, #24]
 8007ed4:	9a05      	ldr	r2, [sp, #20]
 8007ed6:	2a00      	cmp	r2, #0
 8007ed8:	d14d      	bne.n	8007f76 <_strtod_l+0x3b2>
 8007eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007edc:	4310      	orrs	r0, r2
 8007ede:	d000      	beq.n	8007ee2 <_strtod_l+0x31e>
 8007ee0:	e6ab      	b.n	8007c3a <_strtod_l+0x76>
 8007ee2:	4662      	mov	r2, ip
 8007ee4:	2a00      	cmp	r2, #0
 8007ee6:	d000      	beq.n	8007eea <_strtod_l+0x326>
 8007ee8:	e6c5      	b.n	8007c76 <_strtod_l+0xb2>
 8007eea:	2b69      	cmp	r3, #105	; 0x69
 8007eec:	d027      	beq.n	8007f3e <_strtod_l+0x37a>
 8007eee:	dc23      	bgt.n	8007f38 <_strtod_l+0x374>
 8007ef0:	2b49      	cmp	r3, #73	; 0x49
 8007ef2:	d024      	beq.n	8007f3e <_strtod_l+0x37a>
 8007ef4:	2b4e      	cmp	r3, #78	; 0x4e
 8007ef6:	d000      	beq.n	8007efa <_strtod_l+0x336>
 8007ef8:	e6bd      	b.n	8007c76 <_strtod_l+0xb2>
 8007efa:	49a3      	ldr	r1, [pc, #652]	; (8008188 <_strtod_l+0x5c4>)
 8007efc:	a81b      	add	r0, sp, #108	; 0x6c
 8007efe:	f001 fb15 	bl	800952c <__match>
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d100      	bne.n	8007f08 <_strtod_l+0x344>
 8007f06:	e6b6      	b.n	8007c76 <_strtod_l+0xb2>
 8007f08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b28      	cmp	r3, #40	; 0x28
 8007f0e:	d12c      	bne.n	8007f6a <_strtod_l+0x3a6>
 8007f10:	499e      	ldr	r1, [pc, #632]	; (800818c <_strtod_l+0x5c8>)
 8007f12:	aa1e      	add	r2, sp, #120	; 0x78
 8007f14:	a81b      	add	r0, sp, #108	; 0x6c
 8007f16:	f001 fb1d 	bl	8009554 <__hexnan>
 8007f1a:	2805      	cmp	r0, #5
 8007f1c:	d125      	bne.n	8007f6a <_strtod_l+0x3a6>
 8007f1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f20:	4a9b      	ldr	r2, [pc, #620]	; (8008190 <_strtod_l+0x5cc>)
 8007f22:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007f24:	431a      	orrs	r2, r3
 8007f26:	0017      	movs	r7, r2
 8007f28:	e687      	b.n	8007c3a <_strtod_l+0x76>
 8007f2a:	220a      	movs	r2, #10
 8007f2c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007f2e:	434a      	muls	r2, r1
 8007f30:	18d2      	adds	r2, r2, r3
 8007f32:	3a30      	subs	r2, #48	; 0x30
 8007f34:	920e      	str	r2, [sp, #56]	; 0x38
 8007f36:	e7b5      	b.n	8007ea4 <_strtod_l+0x2e0>
 8007f38:	2b6e      	cmp	r3, #110	; 0x6e
 8007f3a:	d0de      	beq.n	8007efa <_strtod_l+0x336>
 8007f3c:	e69b      	b.n	8007c76 <_strtod_l+0xb2>
 8007f3e:	4995      	ldr	r1, [pc, #596]	; (8008194 <_strtod_l+0x5d0>)
 8007f40:	a81b      	add	r0, sp, #108	; 0x6c
 8007f42:	f001 faf3 	bl	800952c <__match>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d100      	bne.n	8007f4c <_strtod_l+0x388>
 8007f4a:	e694      	b.n	8007c76 <_strtod_l+0xb2>
 8007f4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f4e:	4992      	ldr	r1, [pc, #584]	; (8008198 <_strtod_l+0x5d4>)
 8007f50:	3b01      	subs	r3, #1
 8007f52:	a81b      	add	r0, sp, #108	; 0x6c
 8007f54:	931b      	str	r3, [sp, #108]	; 0x6c
 8007f56:	f001 fae9 	bl	800952c <__match>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	d102      	bne.n	8007f64 <_strtod_l+0x3a0>
 8007f5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f60:	3301      	adds	r3, #1
 8007f62:	931b      	str	r3, [sp, #108]	; 0x6c
 8007f64:	2600      	movs	r6, #0
 8007f66:	4f8a      	ldr	r7, [pc, #552]	; (8008190 <_strtod_l+0x5cc>)
 8007f68:	e667      	b.n	8007c3a <_strtod_l+0x76>
 8007f6a:	488c      	ldr	r0, [pc, #560]	; (800819c <_strtod_l+0x5d8>)
 8007f6c:	f000 ff1a 	bl	8008da4 <nan>
 8007f70:	0006      	movs	r6, r0
 8007f72:	000f      	movs	r7, r1
 8007f74:	e661      	b.n	8007c3a <_strtod_l+0x76>
 8007f76:	9b06      	ldr	r3, [sp, #24]
 8007f78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f7a:	1a9b      	subs	r3, r3, r2
 8007f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f7e:	9b08      	ldr	r3, [sp, #32]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <_strtod_l+0x3c4>
 8007f84:	9b05      	ldr	r3, [sp, #20]
 8007f86:	9308      	str	r3, [sp, #32]
 8007f88:	9c05      	ldr	r4, [sp, #20]
 8007f8a:	2c10      	cmp	r4, #16
 8007f8c:	dd00      	ble.n	8007f90 <_strtod_l+0x3cc>
 8007f8e:	2410      	movs	r4, #16
 8007f90:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007f92:	f7fa fa33 	bl	80023fc <__aeabi_ui2d>
 8007f96:	9b05      	ldr	r3, [sp, #20]
 8007f98:	0006      	movs	r6, r0
 8007f9a:	000f      	movs	r7, r1
 8007f9c:	2b09      	cmp	r3, #9
 8007f9e:	dd15      	ble.n	8007fcc <_strtod_l+0x408>
 8007fa0:	0022      	movs	r2, r4
 8007fa2:	4b7f      	ldr	r3, [pc, #508]	; (80081a0 <_strtod_l+0x5dc>)
 8007fa4:	3a09      	subs	r2, #9
 8007fa6:	00d2      	lsls	r2, r2, #3
 8007fa8:	189b      	adds	r3, r3, r2
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f7f9 fb5d 	bl	800166c <__aeabi_dmul>
 8007fb2:	0006      	movs	r6, r0
 8007fb4:	0028      	movs	r0, r5
 8007fb6:	000f      	movs	r7, r1
 8007fb8:	f7fa fa20 	bl	80023fc <__aeabi_ui2d>
 8007fbc:	0002      	movs	r2, r0
 8007fbe:	000b      	movs	r3, r1
 8007fc0:	0030      	movs	r0, r6
 8007fc2:	0039      	movs	r1, r7
 8007fc4:	f7f8 fbf8 	bl	80007b8 <__aeabi_dadd>
 8007fc8:	0006      	movs	r6, r0
 8007fca:	000f      	movs	r7, r1
 8007fcc:	9b05      	ldr	r3, [sp, #20]
 8007fce:	2b0f      	cmp	r3, #15
 8007fd0:	dc39      	bgt.n	8008046 <_strtod_l+0x482>
 8007fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d100      	bne.n	8007fda <_strtod_l+0x416>
 8007fd8:	e62f      	b.n	8007c3a <_strtod_l+0x76>
 8007fda:	dd24      	ble.n	8008026 <_strtod_l+0x462>
 8007fdc:	2b16      	cmp	r3, #22
 8007fde:	dc09      	bgt.n	8007ff4 <_strtod_l+0x430>
 8007fe0:	496f      	ldr	r1, [pc, #444]	; (80081a0 <_strtod_l+0x5dc>)
 8007fe2:	00db      	lsls	r3, r3, #3
 8007fe4:	18c9      	adds	r1, r1, r3
 8007fe6:	0032      	movs	r2, r6
 8007fe8:	6808      	ldr	r0, [r1, #0]
 8007fea:	6849      	ldr	r1, [r1, #4]
 8007fec:	003b      	movs	r3, r7
 8007fee:	f7f9 fb3d 	bl	800166c <__aeabi_dmul>
 8007ff2:	e7bd      	b.n	8007f70 <_strtod_l+0x3ac>
 8007ff4:	2325      	movs	r3, #37	; 0x25
 8007ff6:	9a05      	ldr	r2, [sp, #20]
 8007ff8:	1a9b      	subs	r3, r3, r2
 8007ffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	db22      	blt.n	8008046 <_strtod_l+0x482>
 8008000:	240f      	movs	r4, #15
 8008002:	9b05      	ldr	r3, [sp, #20]
 8008004:	4d66      	ldr	r5, [pc, #408]	; (80081a0 <_strtod_l+0x5dc>)
 8008006:	1ae4      	subs	r4, r4, r3
 8008008:	00e1      	lsls	r1, r4, #3
 800800a:	1869      	adds	r1, r5, r1
 800800c:	0032      	movs	r2, r6
 800800e:	6808      	ldr	r0, [r1, #0]
 8008010:	6849      	ldr	r1, [r1, #4]
 8008012:	003b      	movs	r3, r7
 8008014:	f7f9 fb2a 	bl	800166c <__aeabi_dmul>
 8008018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801a:	1b1c      	subs	r4, r3, r4
 800801c:	00e4      	lsls	r4, r4, #3
 800801e:	192d      	adds	r5, r5, r4
 8008020:	682a      	ldr	r2, [r5, #0]
 8008022:	686b      	ldr	r3, [r5, #4]
 8008024:	e7e3      	b.n	8007fee <_strtod_l+0x42a>
 8008026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008028:	3316      	adds	r3, #22
 800802a:	db0c      	blt.n	8008046 <_strtod_l+0x482>
 800802c:	9906      	ldr	r1, [sp, #24]
 800802e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008030:	4b5b      	ldr	r3, [pc, #364]	; (80081a0 <_strtod_l+0x5dc>)
 8008032:	1a52      	subs	r2, r2, r1
 8008034:	00d2      	lsls	r2, r2, #3
 8008036:	189b      	adds	r3, r3, r2
 8008038:	0030      	movs	r0, r6
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	0039      	movs	r1, r7
 8008040:	f7f8 ff1a 	bl	8000e78 <__aeabi_ddiv>
 8008044:	e794      	b.n	8007f70 <_strtod_l+0x3ac>
 8008046:	9b05      	ldr	r3, [sp, #20]
 8008048:	1b1c      	subs	r4, r3, r4
 800804a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800804c:	18e4      	adds	r4, r4, r3
 800804e:	2c00      	cmp	r4, #0
 8008050:	dd72      	ble.n	8008138 <_strtod_l+0x574>
 8008052:	220f      	movs	r2, #15
 8008054:	0023      	movs	r3, r4
 8008056:	4013      	ands	r3, r2
 8008058:	4214      	tst	r4, r2
 800805a:	d00a      	beq.n	8008072 <_strtod_l+0x4ae>
 800805c:	4950      	ldr	r1, [pc, #320]	; (80081a0 <_strtod_l+0x5dc>)
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	18c9      	adds	r1, r1, r3
 8008062:	0032      	movs	r2, r6
 8008064:	6808      	ldr	r0, [r1, #0]
 8008066:	6849      	ldr	r1, [r1, #4]
 8008068:	003b      	movs	r3, r7
 800806a:	f7f9 faff 	bl	800166c <__aeabi_dmul>
 800806e:	0006      	movs	r6, r0
 8008070:	000f      	movs	r7, r1
 8008072:	230f      	movs	r3, #15
 8008074:	439c      	bics	r4, r3
 8008076:	d04a      	beq.n	800810e <_strtod_l+0x54a>
 8008078:	3326      	adds	r3, #38	; 0x26
 800807a:	33ff      	adds	r3, #255	; 0xff
 800807c:	429c      	cmp	r4, r3
 800807e:	dd22      	ble.n	80080c6 <_strtod_l+0x502>
 8008080:	2300      	movs	r3, #0
 8008082:	9305      	str	r3, [sp, #20]
 8008084:	9306      	str	r3, [sp, #24]
 8008086:	930d      	str	r3, [sp, #52]	; 0x34
 8008088:	9308      	str	r3, [sp, #32]
 800808a:	2322      	movs	r3, #34	; 0x22
 800808c:	2600      	movs	r6, #0
 800808e:	9a04      	ldr	r2, [sp, #16]
 8008090:	4f3f      	ldr	r7, [pc, #252]	; (8008190 <_strtod_l+0x5cc>)
 8008092:	6013      	str	r3, [r2, #0]
 8008094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008096:	42b3      	cmp	r3, r6
 8008098:	d100      	bne.n	800809c <_strtod_l+0x4d8>
 800809a:	e5ce      	b.n	8007c3a <_strtod_l+0x76>
 800809c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800809e:	9804      	ldr	r0, [sp, #16]
 80080a0:	f001 fb3a 	bl	8009718 <_Bfree>
 80080a4:	9908      	ldr	r1, [sp, #32]
 80080a6:	9804      	ldr	r0, [sp, #16]
 80080a8:	f001 fb36 	bl	8009718 <_Bfree>
 80080ac:	9906      	ldr	r1, [sp, #24]
 80080ae:	9804      	ldr	r0, [sp, #16]
 80080b0:	f001 fb32 	bl	8009718 <_Bfree>
 80080b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80080b6:	9804      	ldr	r0, [sp, #16]
 80080b8:	f001 fb2e 	bl	8009718 <_Bfree>
 80080bc:	9905      	ldr	r1, [sp, #20]
 80080be:	9804      	ldr	r0, [sp, #16]
 80080c0:	f001 fb2a 	bl	8009718 <_Bfree>
 80080c4:	e5b9      	b.n	8007c3a <_strtod_l+0x76>
 80080c6:	2300      	movs	r3, #0
 80080c8:	0030      	movs	r0, r6
 80080ca:	0039      	movs	r1, r7
 80080cc:	4d35      	ldr	r5, [pc, #212]	; (80081a4 <_strtod_l+0x5e0>)
 80080ce:	1124      	asrs	r4, r4, #4
 80080d0:	9307      	str	r3, [sp, #28]
 80080d2:	2c01      	cmp	r4, #1
 80080d4:	dc1e      	bgt.n	8008114 <_strtod_l+0x550>
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <_strtod_l+0x51a>
 80080da:	0006      	movs	r6, r0
 80080dc:	000f      	movs	r7, r1
 80080de:	4b32      	ldr	r3, [pc, #200]	; (80081a8 <_strtod_l+0x5e4>)
 80080e0:	9a07      	ldr	r2, [sp, #28]
 80080e2:	18ff      	adds	r7, r7, r3
 80080e4:	4b2f      	ldr	r3, [pc, #188]	; (80081a4 <_strtod_l+0x5e0>)
 80080e6:	00d2      	lsls	r2, r2, #3
 80080e8:	189d      	adds	r5, r3, r2
 80080ea:	6828      	ldr	r0, [r5, #0]
 80080ec:	6869      	ldr	r1, [r5, #4]
 80080ee:	0032      	movs	r2, r6
 80080f0:	003b      	movs	r3, r7
 80080f2:	f7f9 fabb 	bl	800166c <__aeabi_dmul>
 80080f6:	4b26      	ldr	r3, [pc, #152]	; (8008190 <_strtod_l+0x5cc>)
 80080f8:	4a2c      	ldr	r2, [pc, #176]	; (80081ac <_strtod_l+0x5e8>)
 80080fa:	0006      	movs	r6, r0
 80080fc:	400b      	ands	r3, r1
 80080fe:	4293      	cmp	r3, r2
 8008100:	d8be      	bhi.n	8008080 <_strtod_l+0x4bc>
 8008102:	4a2b      	ldr	r2, [pc, #172]	; (80081b0 <_strtod_l+0x5ec>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d913      	bls.n	8008130 <_strtod_l+0x56c>
 8008108:	2601      	movs	r6, #1
 800810a:	4f2a      	ldr	r7, [pc, #168]	; (80081b4 <_strtod_l+0x5f0>)
 800810c:	4276      	negs	r6, r6
 800810e:	2300      	movs	r3, #0
 8008110:	9307      	str	r3, [sp, #28]
 8008112:	e088      	b.n	8008226 <_strtod_l+0x662>
 8008114:	2201      	movs	r2, #1
 8008116:	4214      	tst	r4, r2
 8008118:	d004      	beq.n	8008124 <_strtod_l+0x560>
 800811a:	682a      	ldr	r2, [r5, #0]
 800811c:	686b      	ldr	r3, [r5, #4]
 800811e:	f7f9 faa5 	bl	800166c <__aeabi_dmul>
 8008122:	2301      	movs	r3, #1
 8008124:	9a07      	ldr	r2, [sp, #28]
 8008126:	1064      	asrs	r4, r4, #1
 8008128:	3201      	adds	r2, #1
 800812a:	9207      	str	r2, [sp, #28]
 800812c:	3508      	adds	r5, #8
 800812e:	e7d0      	b.n	80080d2 <_strtod_l+0x50e>
 8008130:	23d4      	movs	r3, #212	; 0xd4
 8008132:	049b      	lsls	r3, r3, #18
 8008134:	18cf      	adds	r7, r1, r3
 8008136:	e7ea      	b.n	800810e <_strtod_l+0x54a>
 8008138:	2c00      	cmp	r4, #0
 800813a:	d0e8      	beq.n	800810e <_strtod_l+0x54a>
 800813c:	4264      	negs	r4, r4
 800813e:	230f      	movs	r3, #15
 8008140:	0022      	movs	r2, r4
 8008142:	401a      	ands	r2, r3
 8008144:	421c      	tst	r4, r3
 8008146:	d00a      	beq.n	800815e <_strtod_l+0x59a>
 8008148:	4b15      	ldr	r3, [pc, #84]	; (80081a0 <_strtod_l+0x5dc>)
 800814a:	00d2      	lsls	r2, r2, #3
 800814c:	189b      	adds	r3, r3, r2
 800814e:	0030      	movs	r0, r6
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	0039      	movs	r1, r7
 8008156:	f7f8 fe8f 	bl	8000e78 <__aeabi_ddiv>
 800815a:	0006      	movs	r6, r0
 800815c:	000f      	movs	r7, r1
 800815e:	1124      	asrs	r4, r4, #4
 8008160:	d0d5      	beq.n	800810e <_strtod_l+0x54a>
 8008162:	2c1f      	cmp	r4, #31
 8008164:	dd28      	ble.n	80081b8 <_strtod_l+0x5f4>
 8008166:	2300      	movs	r3, #0
 8008168:	9305      	str	r3, [sp, #20]
 800816a:	9306      	str	r3, [sp, #24]
 800816c:	930d      	str	r3, [sp, #52]	; 0x34
 800816e:	9308      	str	r3, [sp, #32]
 8008170:	2322      	movs	r3, #34	; 0x22
 8008172:	9a04      	ldr	r2, [sp, #16]
 8008174:	2600      	movs	r6, #0
 8008176:	6013      	str	r3, [r2, #0]
 8008178:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800817a:	2700      	movs	r7, #0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d18d      	bne.n	800809c <_strtod_l+0x4d8>
 8008180:	e55b      	b.n	8007c3a <_strtod_l+0x76>
 8008182:	46c0      	nop			; (mov r8, r8)
 8008184:	00004e1f 	.word	0x00004e1f
 8008188:	0800fbb9 	.word	0x0800fbb9
 800818c:	0800f898 	.word	0x0800f898
 8008190:	7ff00000 	.word	0x7ff00000
 8008194:	0800fbb1 	.word	0x0800fbb1
 8008198:	0800fc67 	.word	0x0800fc67
 800819c:	0800fc63 	.word	0x0800fc63
 80081a0:	0800fad8 	.word	0x0800fad8
 80081a4:	0800fab0 	.word	0x0800fab0
 80081a8:	fcb00000 	.word	0xfcb00000
 80081ac:	7ca00000 	.word	0x7ca00000
 80081b0:	7c900000 	.word	0x7c900000
 80081b4:	7fefffff 	.word	0x7fefffff
 80081b8:	2310      	movs	r3, #16
 80081ba:	0022      	movs	r2, r4
 80081bc:	401a      	ands	r2, r3
 80081be:	9207      	str	r2, [sp, #28]
 80081c0:	421c      	tst	r4, r3
 80081c2:	d001      	beq.n	80081c8 <_strtod_l+0x604>
 80081c4:	335a      	adds	r3, #90	; 0x5a
 80081c6:	9307      	str	r3, [sp, #28]
 80081c8:	0030      	movs	r0, r6
 80081ca:	0039      	movs	r1, r7
 80081cc:	2300      	movs	r3, #0
 80081ce:	4dc4      	ldr	r5, [pc, #784]	; (80084e0 <_strtod_l+0x91c>)
 80081d0:	2201      	movs	r2, #1
 80081d2:	4214      	tst	r4, r2
 80081d4:	d004      	beq.n	80081e0 <_strtod_l+0x61c>
 80081d6:	682a      	ldr	r2, [r5, #0]
 80081d8:	686b      	ldr	r3, [r5, #4]
 80081da:	f7f9 fa47 	bl	800166c <__aeabi_dmul>
 80081de:	2301      	movs	r3, #1
 80081e0:	1064      	asrs	r4, r4, #1
 80081e2:	3508      	adds	r5, #8
 80081e4:	2c00      	cmp	r4, #0
 80081e6:	d1f3      	bne.n	80081d0 <_strtod_l+0x60c>
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <_strtod_l+0x62c>
 80081ec:	0006      	movs	r6, r0
 80081ee:	000f      	movs	r7, r1
 80081f0:	9b07      	ldr	r3, [sp, #28]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00f      	beq.n	8008216 <_strtod_l+0x652>
 80081f6:	236b      	movs	r3, #107	; 0x6b
 80081f8:	007a      	lsls	r2, r7, #1
 80081fa:	0d52      	lsrs	r2, r2, #21
 80081fc:	0039      	movs	r1, r7
 80081fe:	1a9b      	subs	r3, r3, r2
 8008200:	2b00      	cmp	r3, #0
 8008202:	dd08      	ble.n	8008216 <_strtod_l+0x652>
 8008204:	2b1f      	cmp	r3, #31
 8008206:	dc00      	bgt.n	800820a <_strtod_l+0x646>
 8008208:	e121      	b.n	800844e <_strtod_l+0x88a>
 800820a:	2600      	movs	r6, #0
 800820c:	2b34      	cmp	r3, #52	; 0x34
 800820e:	dc00      	bgt.n	8008212 <_strtod_l+0x64e>
 8008210:	e116      	b.n	8008440 <_strtod_l+0x87c>
 8008212:	27dc      	movs	r7, #220	; 0xdc
 8008214:	04bf      	lsls	r7, r7, #18
 8008216:	2200      	movs	r2, #0
 8008218:	2300      	movs	r3, #0
 800821a:	0030      	movs	r0, r6
 800821c:	0039      	movs	r1, r7
 800821e:	f7f8 f913 	bl	8000448 <__aeabi_dcmpeq>
 8008222:	2800      	cmp	r0, #0
 8008224:	d19f      	bne.n	8008166 <_strtod_l+0x5a2>
 8008226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008228:	9a08      	ldr	r2, [sp, #32]
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800822e:	9b05      	ldr	r3, [sp, #20]
 8008230:	9804      	ldr	r0, [sp, #16]
 8008232:	f001 fabf 	bl	80097b4 <__s2b>
 8008236:	900d      	str	r0, [sp, #52]	; 0x34
 8008238:	2800      	cmp	r0, #0
 800823a:	d100      	bne.n	800823e <_strtod_l+0x67a>
 800823c:	e720      	b.n	8008080 <_strtod_l+0x4bc>
 800823e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008240:	9906      	ldr	r1, [sp, #24]
 8008242:	17da      	asrs	r2, r3, #31
 8008244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008246:	1a5b      	subs	r3, r3, r1
 8008248:	401a      	ands	r2, r3
 800824a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800824c:	9215      	str	r2, [sp, #84]	; 0x54
 800824e:	43db      	mvns	r3, r3
 8008250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008252:	17db      	asrs	r3, r3, #31
 8008254:	401a      	ands	r2, r3
 8008256:	2300      	movs	r3, #0
 8008258:	9218      	str	r2, [sp, #96]	; 0x60
 800825a:	9305      	str	r3, [sp, #20]
 800825c:	9306      	str	r3, [sp, #24]
 800825e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008260:	9804      	ldr	r0, [sp, #16]
 8008262:	6859      	ldr	r1, [r3, #4]
 8008264:	f001 fa30 	bl	80096c8 <_Balloc>
 8008268:	9008      	str	r0, [sp, #32]
 800826a:	2800      	cmp	r0, #0
 800826c:	d100      	bne.n	8008270 <_strtod_l+0x6ac>
 800826e:	e70c      	b.n	800808a <_strtod_l+0x4c6>
 8008270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008272:	300c      	adds	r0, #12
 8008274:	0019      	movs	r1, r3
 8008276:	691a      	ldr	r2, [r3, #16]
 8008278:	310c      	adds	r1, #12
 800827a:	3202      	adds	r2, #2
 800827c:	0092      	lsls	r2, r2, #2
 800827e:	f000 fd88 	bl	8008d92 <memcpy>
 8008282:	ab1e      	add	r3, sp, #120	; 0x78
 8008284:	9301      	str	r3, [sp, #4]
 8008286:	ab1d      	add	r3, sp, #116	; 0x74
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	0032      	movs	r2, r6
 800828c:	003b      	movs	r3, r7
 800828e:	9804      	ldr	r0, [sp, #16]
 8008290:	9610      	str	r6, [sp, #64]	; 0x40
 8008292:	9711      	str	r7, [sp, #68]	; 0x44
 8008294:	f001 fdb6 	bl	8009e04 <__d2b>
 8008298:	901c      	str	r0, [sp, #112]	; 0x70
 800829a:	2800      	cmp	r0, #0
 800829c:	d100      	bne.n	80082a0 <_strtod_l+0x6dc>
 800829e:	e6f4      	b.n	800808a <_strtod_l+0x4c6>
 80082a0:	2101      	movs	r1, #1
 80082a2:	9804      	ldr	r0, [sp, #16]
 80082a4:	f001 fb1a 	bl	80098dc <__i2b>
 80082a8:	9006      	str	r0, [sp, #24]
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d100      	bne.n	80082b0 <_strtod_l+0x6ec>
 80082ae:	e6ec      	b.n	800808a <_strtod_l+0x4c6>
 80082b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80082b4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80082b6:	1ad4      	subs	r4, r2, r3
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	db01      	blt.n	80082c0 <_strtod_l+0x6fc>
 80082bc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80082be:	195d      	adds	r5, r3, r5
 80082c0:	9907      	ldr	r1, [sp, #28]
 80082c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80082c4:	1a5b      	subs	r3, r3, r1
 80082c6:	2136      	movs	r1, #54	; 0x36
 80082c8:	189b      	adds	r3, r3, r2
 80082ca:	1a8a      	subs	r2, r1, r2
 80082cc:	4985      	ldr	r1, [pc, #532]	; (80084e4 <_strtod_l+0x920>)
 80082ce:	2001      	movs	r0, #1
 80082d0:	468c      	mov	ip, r1
 80082d2:	2100      	movs	r1, #0
 80082d4:	3b01      	subs	r3, #1
 80082d6:	9114      	str	r1, [sp, #80]	; 0x50
 80082d8:	9012      	str	r0, [sp, #72]	; 0x48
 80082da:	4563      	cmp	r3, ip
 80082dc:	da07      	bge.n	80082ee <_strtod_l+0x72a>
 80082de:	4661      	mov	r1, ip
 80082e0:	1ac9      	subs	r1, r1, r3
 80082e2:	1a52      	subs	r2, r2, r1
 80082e4:	291f      	cmp	r1, #31
 80082e6:	dd00      	ble.n	80082ea <_strtod_l+0x726>
 80082e8:	e0b6      	b.n	8008458 <_strtod_l+0x894>
 80082ea:	4088      	lsls	r0, r1
 80082ec:	9012      	str	r0, [sp, #72]	; 0x48
 80082ee:	18ab      	adds	r3, r5, r2
 80082f0:	930c      	str	r3, [sp, #48]	; 0x30
 80082f2:	18a4      	adds	r4, r4, r2
 80082f4:	9b07      	ldr	r3, [sp, #28]
 80082f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082f8:	191c      	adds	r4, r3, r4
 80082fa:	002b      	movs	r3, r5
 80082fc:	4295      	cmp	r5, r2
 80082fe:	dd00      	ble.n	8008302 <_strtod_l+0x73e>
 8008300:	0013      	movs	r3, r2
 8008302:	42a3      	cmp	r3, r4
 8008304:	dd00      	ble.n	8008308 <_strtod_l+0x744>
 8008306:	0023      	movs	r3, r4
 8008308:	2b00      	cmp	r3, #0
 800830a:	dd04      	ble.n	8008316 <_strtod_l+0x752>
 800830c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800830e:	1ae4      	subs	r4, r4, r3
 8008310:	1ad2      	subs	r2, r2, r3
 8008312:	920c      	str	r2, [sp, #48]	; 0x30
 8008314:	1aed      	subs	r5, r5, r3
 8008316:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008318:	2b00      	cmp	r3, #0
 800831a:	dd17      	ble.n	800834c <_strtod_l+0x788>
 800831c:	001a      	movs	r2, r3
 800831e:	9906      	ldr	r1, [sp, #24]
 8008320:	9804      	ldr	r0, [sp, #16]
 8008322:	f001 fba3 	bl	8009a6c <__pow5mult>
 8008326:	9006      	str	r0, [sp, #24]
 8008328:	2800      	cmp	r0, #0
 800832a:	d100      	bne.n	800832e <_strtod_l+0x76a>
 800832c:	e6ad      	b.n	800808a <_strtod_l+0x4c6>
 800832e:	0001      	movs	r1, r0
 8008330:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008332:	9804      	ldr	r0, [sp, #16]
 8008334:	f001 faea 	bl	800990c <__multiply>
 8008338:	900e      	str	r0, [sp, #56]	; 0x38
 800833a:	2800      	cmp	r0, #0
 800833c:	d100      	bne.n	8008340 <_strtod_l+0x77c>
 800833e:	e6a4      	b.n	800808a <_strtod_l+0x4c6>
 8008340:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008342:	9804      	ldr	r0, [sp, #16]
 8008344:	f001 f9e8 	bl	8009718 <_Bfree>
 8008348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800834a:	931c      	str	r3, [sp, #112]	; 0x70
 800834c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800834e:	2b00      	cmp	r3, #0
 8008350:	dd00      	ble.n	8008354 <_strtod_l+0x790>
 8008352:	e087      	b.n	8008464 <_strtod_l+0x8a0>
 8008354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008356:	2b00      	cmp	r3, #0
 8008358:	dd08      	ble.n	800836c <_strtod_l+0x7a8>
 800835a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800835c:	9908      	ldr	r1, [sp, #32]
 800835e:	9804      	ldr	r0, [sp, #16]
 8008360:	f001 fb84 	bl	8009a6c <__pow5mult>
 8008364:	9008      	str	r0, [sp, #32]
 8008366:	2800      	cmp	r0, #0
 8008368:	d100      	bne.n	800836c <_strtod_l+0x7a8>
 800836a:	e68e      	b.n	800808a <_strtod_l+0x4c6>
 800836c:	2c00      	cmp	r4, #0
 800836e:	dd08      	ble.n	8008382 <_strtod_l+0x7be>
 8008370:	0022      	movs	r2, r4
 8008372:	9908      	ldr	r1, [sp, #32]
 8008374:	9804      	ldr	r0, [sp, #16]
 8008376:	f001 fbbb 	bl	8009af0 <__lshift>
 800837a:	9008      	str	r0, [sp, #32]
 800837c:	2800      	cmp	r0, #0
 800837e:	d100      	bne.n	8008382 <_strtod_l+0x7be>
 8008380:	e683      	b.n	800808a <_strtod_l+0x4c6>
 8008382:	2d00      	cmp	r5, #0
 8008384:	dd08      	ble.n	8008398 <_strtod_l+0x7d4>
 8008386:	002a      	movs	r2, r5
 8008388:	9906      	ldr	r1, [sp, #24]
 800838a:	9804      	ldr	r0, [sp, #16]
 800838c:	f001 fbb0 	bl	8009af0 <__lshift>
 8008390:	9006      	str	r0, [sp, #24]
 8008392:	2800      	cmp	r0, #0
 8008394:	d100      	bne.n	8008398 <_strtod_l+0x7d4>
 8008396:	e678      	b.n	800808a <_strtod_l+0x4c6>
 8008398:	9a08      	ldr	r2, [sp, #32]
 800839a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800839c:	9804      	ldr	r0, [sp, #16]
 800839e:	f001 fc31 	bl	8009c04 <__mdiff>
 80083a2:	9005      	str	r0, [sp, #20]
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d100      	bne.n	80083aa <_strtod_l+0x7e6>
 80083a8:	e66f      	b.n	800808a <_strtod_l+0x4c6>
 80083aa:	2200      	movs	r2, #0
 80083ac:	68c3      	ldr	r3, [r0, #12]
 80083ae:	9906      	ldr	r1, [sp, #24]
 80083b0:	60c2      	str	r2, [r0, #12]
 80083b2:	930c      	str	r3, [sp, #48]	; 0x30
 80083b4:	f001 fc0a 	bl	8009bcc <__mcmp>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	da5d      	bge.n	8008478 <_strtod_l+0x8b4>
 80083bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083be:	4333      	orrs	r3, r6
 80083c0:	d000      	beq.n	80083c4 <_strtod_l+0x800>
 80083c2:	e088      	b.n	80084d6 <_strtod_l+0x912>
 80083c4:	033b      	lsls	r3, r7, #12
 80083c6:	d000      	beq.n	80083ca <_strtod_l+0x806>
 80083c8:	e085      	b.n	80084d6 <_strtod_l+0x912>
 80083ca:	22d6      	movs	r2, #214	; 0xd6
 80083cc:	4b46      	ldr	r3, [pc, #280]	; (80084e8 <_strtod_l+0x924>)
 80083ce:	04d2      	lsls	r2, r2, #19
 80083d0:	403b      	ands	r3, r7
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d97f      	bls.n	80084d6 <_strtod_l+0x912>
 80083d6:	9b05      	ldr	r3, [sp, #20]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d103      	bne.n	80083e6 <_strtod_l+0x822>
 80083de:	9b05      	ldr	r3, [sp, #20]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	dd77      	ble.n	80084d6 <_strtod_l+0x912>
 80083e6:	9905      	ldr	r1, [sp, #20]
 80083e8:	2201      	movs	r2, #1
 80083ea:	9804      	ldr	r0, [sp, #16]
 80083ec:	f001 fb80 	bl	8009af0 <__lshift>
 80083f0:	9906      	ldr	r1, [sp, #24]
 80083f2:	9005      	str	r0, [sp, #20]
 80083f4:	f001 fbea 	bl	8009bcc <__mcmp>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	dd6c      	ble.n	80084d6 <_strtod_l+0x912>
 80083fc:	9907      	ldr	r1, [sp, #28]
 80083fe:	003b      	movs	r3, r7
 8008400:	4a39      	ldr	r2, [pc, #228]	; (80084e8 <_strtod_l+0x924>)
 8008402:	2900      	cmp	r1, #0
 8008404:	d100      	bne.n	8008408 <_strtod_l+0x844>
 8008406:	e094      	b.n	8008532 <_strtod_l+0x96e>
 8008408:	0011      	movs	r1, r2
 800840a:	20d6      	movs	r0, #214	; 0xd6
 800840c:	4039      	ands	r1, r7
 800840e:	04c0      	lsls	r0, r0, #19
 8008410:	4281      	cmp	r1, r0
 8008412:	dd00      	ble.n	8008416 <_strtod_l+0x852>
 8008414:	e08d      	b.n	8008532 <_strtod_l+0x96e>
 8008416:	23dc      	movs	r3, #220	; 0xdc
 8008418:	049b      	lsls	r3, r3, #18
 800841a:	4299      	cmp	r1, r3
 800841c:	dc00      	bgt.n	8008420 <_strtod_l+0x85c>
 800841e:	e6a7      	b.n	8008170 <_strtod_l+0x5ac>
 8008420:	0030      	movs	r0, r6
 8008422:	0039      	movs	r1, r7
 8008424:	4b31      	ldr	r3, [pc, #196]	; (80084ec <_strtod_l+0x928>)
 8008426:	2200      	movs	r2, #0
 8008428:	f7f9 f920 	bl	800166c <__aeabi_dmul>
 800842c:	4b2e      	ldr	r3, [pc, #184]	; (80084e8 <_strtod_l+0x924>)
 800842e:	0006      	movs	r6, r0
 8008430:	000f      	movs	r7, r1
 8008432:	420b      	tst	r3, r1
 8008434:	d000      	beq.n	8008438 <_strtod_l+0x874>
 8008436:	e631      	b.n	800809c <_strtod_l+0x4d8>
 8008438:	2322      	movs	r3, #34	; 0x22
 800843a:	9a04      	ldr	r2, [sp, #16]
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	e62d      	b.n	800809c <_strtod_l+0x4d8>
 8008440:	234b      	movs	r3, #75	; 0x4b
 8008442:	1a9a      	subs	r2, r3, r2
 8008444:	3b4c      	subs	r3, #76	; 0x4c
 8008446:	4093      	lsls	r3, r2
 8008448:	4019      	ands	r1, r3
 800844a:	000f      	movs	r7, r1
 800844c:	e6e3      	b.n	8008216 <_strtod_l+0x652>
 800844e:	2201      	movs	r2, #1
 8008450:	4252      	negs	r2, r2
 8008452:	409a      	lsls	r2, r3
 8008454:	4016      	ands	r6, r2
 8008456:	e6de      	b.n	8008216 <_strtod_l+0x652>
 8008458:	4925      	ldr	r1, [pc, #148]	; (80084f0 <_strtod_l+0x92c>)
 800845a:	1acb      	subs	r3, r1, r3
 800845c:	0001      	movs	r1, r0
 800845e:	4099      	lsls	r1, r3
 8008460:	9114      	str	r1, [sp, #80]	; 0x50
 8008462:	e743      	b.n	80082ec <_strtod_l+0x728>
 8008464:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008466:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008468:	9804      	ldr	r0, [sp, #16]
 800846a:	f001 fb41 	bl	8009af0 <__lshift>
 800846e:	901c      	str	r0, [sp, #112]	; 0x70
 8008470:	2800      	cmp	r0, #0
 8008472:	d000      	beq.n	8008476 <_strtod_l+0x8b2>
 8008474:	e76e      	b.n	8008354 <_strtod_l+0x790>
 8008476:	e608      	b.n	800808a <_strtod_l+0x4c6>
 8008478:	970e      	str	r7, [sp, #56]	; 0x38
 800847a:	2800      	cmp	r0, #0
 800847c:	d177      	bne.n	800856e <_strtod_l+0x9aa>
 800847e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008480:	033b      	lsls	r3, r7, #12
 8008482:	0b1b      	lsrs	r3, r3, #12
 8008484:	2a00      	cmp	r2, #0
 8008486:	d039      	beq.n	80084fc <_strtod_l+0x938>
 8008488:	4a1a      	ldr	r2, [pc, #104]	; (80084f4 <_strtod_l+0x930>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d139      	bne.n	8008502 <_strtod_l+0x93e>
 800848e:	2101      	movs	r1, #1
 8008490:	9b07      	ldr	r3, [sp, #28]
 8008492:	4249      	negs	r1, r1
 8008494:	0032      	movs	r2, r6
 8008496:	0008      	movs	r0, r1
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00b      	beq.n	80084b4 <_strtod_l+0x8f0>
 800849c:	24d4      	movs	r4, #212	; 0xd4
 800849e:	4b12      	ldr	r3, [pc, #72]	; (80084e8 <_strtod_l+0x924>)
 80084a0:	0008      	movs	r0, r1
 80084a2:	403b      	ands	r3, r7
 80084a4:	04e4      	lsls	r4, r4, #19
 80084a6:	42a3      	cmp	r3, r4
 80084a8:	d804      	bhi.n	80084b4 <_strtod_l+0x8f0>
 80084aa:	306c      	adds	r0, #108	; 0x6c
 80084ac:	0d1b      	lsrs	r3, r3, #20
 80084ae:	1ac3      	subs	r3, r0, r3
 80084b0:	4099      	lsls	r1, r3
 80084b2:	0008      	movs	r0, r1
 80084b4:	4282      	cmp	r2, r0
 80084b6:	d124      	bne.n	8008502 <_strtod_l+0x93e>
 80084b8:	4b0f      	ldr	r3, [pc, #60]	; (80084f8 <_strtod_l+0x934>)
 80084ba:	990e      	ldr	r1, [sp, #56]	; 0x38
 80084bc:	4299      	cmp	r1, r3
 80084be:	d102      	bne.n	80084c6 <_strtod_l+0x902>
 80084c0:	3201      	adds	r2, #1
 80084c2:	d100      	bne.n	80084c6 <_strtod_l+0x902>
 80084c4:	e5e1      	b.n	800808a <_strtod_l+0x4c6>
 80084c6:	4b08      	ldr	r3, [pc, #32]	; (80084e8 <_strtod_l+0x924>)
 80084c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084ca:	2600      	movs	r6, #0
 80084cc:	401a      	ands	r2, r3
 80084ce:	0013      	movs	r3, r2
 80084d0:	2280      	movs	r2, #128	; 0x80
 80084d2:	0352      	lsls	r2, r2, #13
 80084d4:	189f      	adds	r7, r3, r2
 80084d6:	9b07      	ldr	r3, [sp, #28]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1a1      	bne.n	8008420 <_strtod_l+0x85c>
 80084dc:	e5de      	b.n	800809c <_strtod_l+0x4d8>
 80084de:	46c0      	nop			; (mov r8, r8)
 80084e0:	0800f8b0 	.word	0x0800f8b0
 80084e4:	fffffc02 	.word	0xfffffc02
 80084e8:	7ff00000 	.word	0x7ff00000
 80084ec:	39500000 	.word	0x39500000
 80084f0:	fffffbe2 	.word	0xfffffbe2
 80084f4:	000fffff 	.word	0x000fffff
 80084f8:	7fefffff 	.word	0x7fefffff
 80084fc:	4333      	orrs	r3, r6
 80084fe:	d100      	bne.n	8008502 <_strtod_l+0x93e>
 8008500:	e77c      	b.n	80083fc <_strtod_l+0x838>
 8008502:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008504:	2b00      	cmp	r3, #0
 8008506:	d01d      	beq.n	8008544 <_strtod_l+0x980>
 8008508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800850a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800850c:	4213      	tst	r3, r2
 800850e:	d0e2      	beq.n	80084d6 <_strtod_l+0x912>
 8008510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008512:	0030      	movs	r0, r6
 8008514:	0039      	movs	r1, r7
 8008516:	9a07      	ldr	r2, [sp, #28]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d017      	beq.n	800854c <_strtod_l+0x988>
 800851c:	f7ff fb3a 	bl	8007b94 <sulp>
 8008520:	0002      	movs	r2, r0
 8008522:	000b      	movs	r3, r1
 8008524:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008526:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008528:	f7f8 f946 	bl	80007b8 <__aeabi_dadd>
 800852c:	0006      	movs	r6, r0
 800852e:	000f      	movs	r7, r1
 8008530:	e7d1      	b.n	80084d6 <_strtod_l+0x912>
 8008532:	2601      	movs	r6, #1
 8008534:	4013      	ands	r3, r2
 8008536:	4a98      	ldr	r2, [pc, #608]	; (8008798 <_strtod_l+0xbd4>)
 8008538:	4276      	negs	r6, r6
 800853a:	189b      	adds	r3, r3, r2
 800853c:	4a97      	ldr	r2, [pc, #604]	; (800879c <_strtod_l+0xbd8>)
 800853e:	431a      	orrs	r2, r3
 8008540:	0017      	movs	r7, r2
 8008542:	e7c8      	b.n	80084d6 <_strtod_l+0x912>
 8008544:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008546:	4233      	tst	r3, r6
 8008548:	d0c5      	beq.n	80084d6 <_strtod_l+0x912>
 800854a:	e7e1      	b.n	8008510 <_strtod_l+0x94c>
 800854c:	f7ff fb22 	bl	8007b94 <sulp>
 8008550:	0002      	movs	r2, r0
 8008552:	000b      	movs	r3, r1
 8008554:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008556:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008558:	f7f9 fb4a 	bl	8001bf0 <__aeabi_dsub>
 800855c:	2200      	movs	r2, #0
 800855e:	2300      	movs	r3, #0
 8008560:	0006      	movs	r6, r0
 8008562:	000f      	movs	r7, r1
 8008564:	f7f7 ff70 	bl	8000448 <__aeabi_dcmpeq>
 8008568:	2800      	cmp	r0, #0
 800856a:	d0b4      	beq.n	80084d6 <_strtod_l+0x912>
 800856c:	e600      	b.n	8008170 <_strtod_l+0x5ac>
 800856e:	9906      	ldr	r1, [sp, #24]
 8008570:	9805      	ldr	r0, [sp, #20]
 8008572:	f001 fca7 	bl	8009ec4 <__ratio>
 8008576:	2380      	movs	r3, #128	; 0x80
 8008578:	2200      	movs	r2, #0
 800857a:	05db      	lsls	r3, r3, #23
 800857c:	0004      	movs	r4, r0
 800857e:	000d      	movs	r5, r1
 8008580:	f7f7 ff72 	bl	8000468 <__aeabi_dcmple>
 8008584:	2800      	cmp	r0, #0
 8008586:	d06d      	beq.n	8008664 <_strtod_l+0xaa0>
 8008588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800858a:	2b00      	cmp	r3, #0
 800858c:	d000      	beq.n	8008590 <_strtod_l+0x9cc>
 800858e:	e07e      	b.n	800868e <_strtod_l+0xaca>
 8008590:	2e00      	cmp	r6, #0
 8008592:	d158      	bne.n	8008646 <_strtod_l+0xa82>
 8008594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008596:	031b      	lsls	r3, r3, #12
 8008598:	d000      	beq.n	800859c <_strtod_l+0x9d8>
 800859a:	e07f      	b.n	800869c <_strtod_l+0xad8>
 800859c:	2200      	movs	r2, #0
 800859e:	0020      	movs	r0, r4
 80085a0:	0029      	movs	r1, r5
 80085a2:	4b7f      	ldr	r3, [pc, #508]	; (80087a0 <_strtod_l+0xbdc>)
 80085a4:	f7f7 ff56 	bl	8000454 <__aeabi_dcmplt>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d158      	bne.n	800865e <_strtod_l+0xa9a>
 80085ac:	0020      	movs	r0, r4
 80085ae:	0029      	movs	r1, r5
 80085b0:	2200      	movs	r2, #0
 80085b2:	4b7c      	ldr	r3, [pc, #496]	; (80087a4 <_strtod_l+0xbe0>)
 80085b4:	f7f9 f85a 	bl	800166c <__aeabi_dmul>
 80085b8:	0004      	movs	r4, r0
 80085ba:	000d      	movs	r5, r1
 80085bc:	2380      	movs	r3, #128	; 0x80
 80085be:	061b      	lsls	r3, r3, #24
 80085c0:	940a      	str	r4, [sp, #40]	; 0x28
 80085c2:	18eb      	adds	r3, r5, r3
 80085c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80085c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ca:	9212      	str	r2, [sp, #72]	; 0x48
 80085cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80085ce:	4a76      	ldr	r2, [pc, #472]	; (80087a8 <_strtod_l+0xbe4>)
 80085d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085d2:	4013      	ands	r3, r2
 80085d4:	9314      	str	r3, [sp, #80]	; 0x50
 80085d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80085d8:	4b74      	ldr	r3, [pc, #464]	; (80087ac <_strtod_l+0xbe8>)
 80085da:	429a      	cmp	r2, r3
 80085dc:	d000      	beq.n	80085e0 <_strtod_l+0xa1c>
 80085de:	e091      	b.n	8008704 <_strtod_l+0xb40>
 80085e0:	4a73      	ldr	r2, [pc, #460]	; (80087b0 <_strtod_l+0xbec>)
 80085e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085e4:	4694      	mov	ip, r2
 80085e6:	4463      	add	r3, ip
 80085e8:	001f      	movs	r7, r3
 80085ea:	0030      	movs	r0, r6
 80085ec:	0019      	movs	r1, r3
 80085ee:	f001 fba1 	bl	8009d34 <__ulp>
 80085f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085f6:	f7f9 f839 	bl	800166c <__aeabi_dmul>
 80085fa:	0032      	movs	r2, r6
 80085fc:	003b      	movs	r3, r7
 80085fe:	f7f8 f8db 	bl	80007b8 <__aeabi_dadd>
 8008602:	4a69      	ldr	r2, [pc, #420]	; (80087a8 <_strtod_l+0xbe4>)
 8008604:	4b6b      	ldr	r3, [pc, #428]	; (80087b4 <_strtod_l+0xbf0>)
 8008606:	0006      	movs	r6, r0
 8008608:	400a      	ands	r2, r1
 800860a:	429a      	cmp	r2, r3
 800860c:	d949      	bls.n	80086a2 <_strtod_l+0xade>
 800860e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008610:	4b69      	ldr	r3, [pc, #420]	; (80087b8 <_strtod_l+0xbf4>)
 8008612:	429a      	cmp	r2, r3
 8008614:	d103      	bne.n	800861e <_strtod_l+0xa5a>
 8008616:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008618:	3301      	adds	r3, #1
 800861a:	d100      	bne.n	800861e <_strtod_l+0xa5a>
 800861c:	e535      	b.n	800808a <_strtod_l+0x4c6>
 800861e:	2601      	movs	r6, #1
 8008620:	4f65      	ldr	r7, [pc, #404]	; (80087b8 <_strtod_l+0xbf4>)
 8008622:	4276      	negs	r6, r6
 8008624:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008626:	9804      	ldr	r0, [sp, #16]
 8008628:	f001 f876 	bl	8009718 <_Bfree>
 800862c:	9908      	ldr	r1, [sp, #32]
 800862e:	9804      	ldr	r0, [sp, #16]
 8008630:	f001 f872 	bl	8009718 <_Bfree>
 8008634:	9906      	ldr	r1, [sp, #24]
 8008636:	9804      	ldr	r0, [sp, #16]
 8008638:	f001 f86e 	bl	8009718 <_Bfree>
 800863c:	9905      	ldr	r1, [sp, #20]
 800863e:	9804      	ldr	r0, [sp, #16]
 8008640:	f001 f86a 	bl	8009718 <_Bfree>
 8008644:	e60b      	b.n	800825e <_strtod_l+0x69a>
 8008646:	2e01      	cmp	r6, #1
 8008648:	d103      	bne.n	8008652 <_strtod_l+0xa8e>
 800864a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800864c:	2b00      	cmp	r3, #0
 800864e:	d100      	bne.n	8008652 <_strtod_l+0xa8e>
 8008650:	e58e      	b.n	8008170 <_strtod_l+0x5ac>
 8008652:	2300      	movs	r3, #0
 8008654:	4c59      	ldr	r4, [pc, #356]	; (80087bc <_strtod_l+0xbf8>)
 8008656:	930a      	str	r3, [sp, #40]	; 0x28
 8008658:	940b      	str	r4, [sp, #44]	; 0x2c
 800865a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800865c:	e01c      	b.n	8008698 <_strtod_l+0xad4>
 800865e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008660:	4d50      	ldr	r5, [pc, #320]	; (80087a4 <_strtod_l+0xbe0>)
 8008662:	e7ab      	b.n	80085bc <_strtod_l+0x9f8>
 8008664:	2200      	movs	r2, #0
 8008666:	0020      	movs	r0, r4
 8008668:	0029      	movs	r1, r5
 800866a:	4b4e      	ldr	r3, [pc, #312]	; (80087a4 <_strtod_l+0xbe0>)
 800866c:	f7f8 fffe 	bl	800166c <__aeabi_dmul>
 8008670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008672:	0004      	movs	r4, r0
 8008674:	000b      	movs	r3, r1
 8008676:	000d      	movs	r5, r1
 8008678:	2a00      	cmp	r2, #0
 800867a:	d104      	bne.n	8008686 <_strtod_l+0xac2>
 800867c:	2280      	movs	r2, #128	; 0x80
 800867e:	0612      	lsls	r2, r2, #24
 8008680:	900a      	str	r0, [sp, #40]	; 0x28
 8008682:	188b      	adds	r3, r1, r2
 8008684:	e79e      	b.n	80085c4 <_strtod_l+0xa00>
 8008686:	0002      	movs	r2, r0
 8008688:	920a      	str	r2, [sp, #40]	; 0x28
 800868a:	930b      	str	r3, [sp, #44]	; 0x2c
 800868c:	e79b      	b.n	80085c6 <_strtod_l+0xa02>
 800868e:	2300      	movs	r3, #0
 8008690:	4c43      	ldr	r4, [pc, #268]	; (80087a0 <_strtod_l+0xbdc>)
 8008692:	930a      	str	r3, [sp, #40]	; 0x28
 8008694:	940b      	str	r4, [sp, #44]	; 0x2c
 8008696:	2400      	movs	r4, #0
 8008698:	4d41      	ldr	r5, [pc, #260]	; (80087a0 <_strtod_l+0xbdc>)
 800869a:	e794      	b.n	80085c6 <_strtod_l+0xa02>
 800869c:	2300      	movs	r3, #0
 800869e:	4c47      	ldr	r4, [pc, #284]	; (80087bc <_strtod_l+0xbf8>)
 80086a0:	e7f7      	b.n	8008692 <_strtod_l+0xace>
 80086a2:	23d4      	movs	r3, #212	; 0xd4
 80086a4:	049b      	lsls	r3, r3, #18
 80086a6:	18cf      	adds	r7, r1, r3
 80086a8:	9b07      	ldr	r3, [sp, #28]
 80086aa:	970e      	str	r7, [sp, #56]	; 0x38
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1b9      	bne.n	8008624 <_strtod_l+0xa60>
 80086b0:	4b3d      	ldr	r3, [pc, #244]	; (80087a8 <_strtod_l+0xbe4>)
 80086b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80086b4:	403b      	ands	r3, r7
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d1b4      	bne.n	8008624 <_strtod_l+0xa60>
 80086ba:	0020      	movs	r0, r4
 80086bc:	0029      	movs	r1, r5
 80086be:	f7f7 ff5d 	bl	800057c <__aeabi_d2lz>
 80086c2:	f7f7 ff97 	bl	80005f4 <__aeabi_l2d>
 80086c6:	0002      	movs	r2, r0
 80086c8:	000b      	movs	r3, r1
 80086ca:	0020      	movs	r0, r4
 80086cc:	0029      	movs	r1, r5
 80086ce:	f7f9 fa8f 	bl	8001bf0 <__aeabi_dsub>
 80086d2:	033b      	lsls	r3, r7, #12
 80086d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086d6:	0b1b      	lsrs	r3, r3, #12
 80086d8:	4333      	orrs	r3, r6
 80086da:	4313      	orrs	r3, r2
 80086dc:	0004      	movs	r4, r0
 80086de:	000d      	movs	r5, r1
 80086e0:	4a37      	ldr	r2, [pc, #220]	; (80087c0 <_strtod_l+0xbfc>)
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d054      	beq.n	8008790 <_strtod_l+0xbcc>
 80086e6:	4b37      	ldr	r3, [pc, #220]	; (80087c4 <_strtod_l+0xc00>)
 80086e8:	f7f7 feb4 	bl	8000454 <__aeabi_dcmplt>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d000      	beq.n	80086f2 <_strtod_l+0xb2e>
 80086f0:	e4d4      	b.n	800809c <_strtod_l+0x4d8>
 80086f2:	0020      	movs	r0, r4
 80086f4:	0029      	movs	r1, r5
 80086f6:	4a34      	ldr	r2, [pc, #208]	; (80087c8 <_strtod_l+0xc04>)
 80086f8:	4b2a      	ldr	r3, [pc, #168]	; (80087a4 <_strtod_l+0xbe0>)
 80086fa:	f7f7 febf 	bl	800047c <__aeabi_dcmpgt>
 80086fe:	2800      	cmp	r0, #0
 8008700:	d090      	beq.n	8008624 <_strtod_l+0xa60>
 8008702:	e4cb      	b.n	800809c <_strtod_l+0x4d8>
 8008704:	9b07      	ldr	r3, [sp, #28]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d02b      	beq.n	8008762 <_strtod_l+0xb9e>
 800870a:	23d4      	movs	r3, #212	; 0xd4
 800870c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800870e:	04db      	lsls	r3, r3, #19
 8008710:	429a      	cmp	r2, r3
 8008712:	d826      	bhi.n	8008762 <_strtod_l+0xb9e>
 8008714:	0020      	movs	r0, r4
 8008716:	0029      	movs	r1, r5
 8008718:	4a2c      	ldr	r2, [pc, #176]	; (80087cc <_strtod_l+0xc08>)
 800871a:	4b2d      	ldr	r3, [pc, #180]	; (80087d0 <_strtod_l+0xc0c>)
 800871c:	f7f7 fea4 	bl	8000468 <__aeabi_dcmple>
 8008720:	2800      	cmp	r0, #0
 8008722:	d017      	beq.n	8008754 <_strtod_l+0xb90>
 8008724:	0020      	movs	r0, r4
 8008726:	0029      	movs	r1, r5
 8008728:	f7f7 ff0a 	bl	8000540 <__aeabi_d2uiz>
 800872c:	2800      	cmp	r0, #0
 800872e:	d100      	bne.n	8008732 <_strtod_l+0xb6e>
 8008730:	3001      	adds	r0, #1
 8008732:	f7f9 fe63 	bl	80023fc <__aeabi_ui2d>
 8008736:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008738:	0004      	movs	r4, r0
 800873a:	000b      	movs	r3, r1
 800873c:	000d      	movs	r5, r1
 800873e:	2a00      	cmp	r2, #0
 8008740:	d122      	bne.n	8008788 <_strtod_l+0xbc4>
 8008742:	2280      	movs	r2, #128	; 0x80
 8008744:	0612      	lsls	r2, r2, #24
 8008746:	188b      	adds	r3, r1, r2
 8008748:	9016      	str	r0, [sp, #88]	; 0x58
 800874a:	9317      	str	r3, [sp, #92]	; 0x5c
 800874c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800874e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008750:	9212      	str	r2, [sp, #72]	; 0x48
 8008752:	9313      	str	r3, [sp, #76]	; 0x4c
 8008754:	22d6      	movs	r2, #214	; 0xd6
 8008756:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008758:	04d2      	lsls	r2, r2, #19
 800875a:	189b      	adds	r3, r3, r2
 800875c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800875e:	1a9b      	subs	r3, r3, r2
 8008760:	9313      	str	r3, [sp, #76]	; 0x4c
 8008762:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008764:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008766:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008768:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800876a:	f001 fae3 	bl	8009d34 <__ulp>
 800876e:	0002      	movs	r2, r0
 8008770:	000b      	movs	r3, r1
 8008772:	0030      	movs	r0, r6
 8008774:	0039      	movs	r1, r7
 8008776:	f7f8 ff79 	bl	800166c <__aeabi_dmul>
 800877a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800877c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800877e:	f7f8 f81b 	bl	80007b8 <__aeabi_dadd>
 8008782:	0006      	movs	r6, r0
 8008784:	000f      	movs	r7, r1
 8008786:	e78f      	b.n	80086a8 <_strtod_l+0xae4>
 8008788:	0002      	movs	r2, r0
 800878a:	9216      	str	r2, [sp, #88]	; 0x58
 800878c:	9317      	str	r3, [sp, #92]	; 0x5c
 800878e:	e7dd      	b.n	800874c <_strtod_l+0xb88>
 8008790:	4b10      	ldr	r3, [pc, #64]	; (80087d4 <_strtod_l+0xc10>)
 8008792:	f7f7 fe5f 	bl	8000454 <__aeabi_dcmplt>
 8008796:	e7b2      	b.n	80086fe <_strtod_l+0xb3a>
 8008798:	fff00000 	.word	0xfff00000
 800879c:	000fffff 	.word	0x000fffff
 80087a0:	3ff00000 	.word	0x3ff00000
 80087a4:	3fe00000 	.word	0x3fe00000
 80087a8:	7ff00000 	.word	0x7ff00000
 80087ac:	7fe00000 	.word	0x7fe00000
 80087b0:	fcb00000 	.word	0xfcb00000
 80087b4:	7c9fffff 	.word	0x7c9fffff
 80087b8:	7fefffff 	.word	0x7fefffff
 80087bc:	bff00000 	.word	0xbff00000
 80087c0:	94a03595 	.word	0x94a03595
 80087c4:	3fdfffff 	.word	0x3fdfffff
 80087c8:	35afe535 	.word	0x35afe535
 80087cc:	ffc00000 	.word	0xffc00000
 80087d0:	41dfffff 	.word	0x41dfffff
 80087d4:	3fcfffff 	.word	0x3fcfffff

080087d8 <_strtod_r>:
 80087d8:	b510      	push	{r4, lr}
 80087da:	4b02      	ldr	r3, [pc, #8]	; (80087e4 <_strtod_r+0xc>)
 80087dc:	f7ff f9f2 	bl	8007bc4 <_strtod_l>
 80087e0:	bd10      	pop	{r4, pc}
 80087e2:	46c0      	nop			; (mov r8, r8)
 80087e4:	20000430 	.word	0x20000430

080087e8 <_strtol_l.constprop.0>:
 80087e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ea:	b087      	sub	sp, #28
 80087ec:	001e      	movs	r6, r3
 80087ee:	9005      	str	r0, [sp, #20]
 80087f0:	9101      	str	r1, [sp, #4]
 80087f2:	9202      	str	r2, [sp, #8]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d048      	beq.n	800888a <_strtol_l.constprop.0+0xa2>
 80087f8:	000b      	movs	r3, r1
 80087fa:	2e24      	cmp	r6, #36	; 0x24
 80087fc:	d845      	bhi.n	800888a <_strtol_l.constprop.0+0xa2>
 80087fe:	4a3b      	ldr	r2, [pc, #236]	; (80088ec <_strtol_l.constprop.0+0x104>)
 8008800:	2108      	movs	r1, #8
 8008802:	4694      	mov	ip, r2
 8008804:	001a      	movs	r2, r3
 8008806:	4660      	mov	r0, ip
 8008808:	7814      	ldrb	r4, [r2, #0]
 800880a:	3301      	adds	r3, #1
 800880c:	5d00      	ldrb	r0, [r0, r4]
 800880e:	001d      	movs	r5, r3
 8008810:	0007      	movs	r7, r0
 8008812:	400f      	ands	r7, r1
 8008814:	4208      	tst	r0, r1
 8008816:	d1f5      	bne.n	8008804 <_strtol_l.constprop.0+0x1c>
 8008818:	2c2d      	cmp	r4, #45	; 0x2d
 800881a:	d13d      	bne.n	8008898 <_strtol_l.constprop.0+0xb0>
 800881c:	2701      	movs	r7, #1
 800881e:	781c      	ldrb	r4, [r3, #0]
 8008820:	1c95      	adds	r5, r2, #2
 8008822:	2e00      	cmp	r6, #0
 8008824:	d05e      	beq.n	80088e4 <_strtol_l.constprop.0+0xfc>
 8008826:	2e10      	cmp	r6, #16
 8008828:	d109      	bne.n	800883e <_strtol_l.constprop.0+0x56>
 800882a:	2c30      	cmp	r4, #48	; 0x30
 800882c:	d107      	bne.n	800883e <_strtol_l.constprop.0+0x56>
 800882e:	2220      	movs	r2, #32
 8008830:	782b      	ldrb	r3, [r5, #0]
 8008832:	4393      	bics	r3, r2
 8008834:	2b58      	cmp	r3, #88	; 0x58
 8008836:	d150      	bne.n	80088da <_strtol_l.constprop.0+0xf2>
 8008838:	2610      	movs	r6, #16
 800883a:	786c      	ldrb	r4, [r5, #1]
 800883c:	3502      	adds	r5, #2
 800883e:	4b2c      	ldr	r3, [pc, #176]	; (80088f0 <_strtol_l.constprop.0+0x108>)
 8008840:	0031      	movs	r1, r6
 8008842:	18fb      	adds	r3, r7, r3
 8008844:	0018      	movs	r0, r3
 8008846:	9303      	str	r3, [sp, #12]
 8008848:	f7f7 fcfe 	bl	8000248 <__aeabi_uidivmod>
 800884c:	2200      	movs	r2, #0
 800884e:	9104      	str	r1, [sp, #16]
 8008850:	2101      	movs	r1, #1
 8008852:	4684      	mov	ip, r0
 8008854:	0010      	movs	r0, r2
 8008856:	4249      	negs	r1, r1
 8008858:	0023      	movs	r3, r4
 800885a:	3b30      	subs	r3, #48	; 0x30
 800885c:	2b09      	cmp	r3, #9
 800885e:	d903      	bls.n	8008868 <_strtol_l.constprop.0+0x80>
 8008860:	3b11      	subs	r3, #17
 8008862:	2b19      	cmp	r3, #25
 8008864:	d81d      	bhi.n	80088a2 <_strtol_l.constprop.0+0xba>
 8008866:	330a      	adds	r3, #10
 8008868:	429e      	cmp	r6, r3
 800886a:	dd1e      	ble.n	80088aa <_strtol_l.constprop.0+0xc2>
 800886c:	1c54      	adds	r4, r2, #1
 800886e:	d009      	beq.n	8008884 <_strtol_l.constprop.0+0x9c>
 8008870:	000a      	movs	r2, r1
 8008872:	4584      	cmp	ip, r0
 8008874:	d306      	bcc.n	8008884 <_strtol_l.constprop.0+0x9c>
 8008876:	d102      	bne.n	800887e <_strtol_l.constprop.0+0x96>
 8008878:	9c04      	ldr	r4, [sp, #16]
 800887a:	429c      	cmp	r4, r3
 800887c:	db02      	blt.n	8008884 <_strtol_l.constprop.0+0x9c>
 800887e:	2201      	movs	r2, #1
 8008880:	4370      	muls	r0, r6
 8008882:	1818      	adds	r0, r3, r0
 8008884:	782c      	ldrb	r4, [r5, #0]
 8008886:	3501      	adds	r5, #1
 8008888:	e7e6      	b.n	8008858 <_strtol_l.constprop.0+0x70>
 800888a:	f000 fa49 	bl	8008d20 <__errno>
 800888e:	2316      	movs	r3, #22
 8008890:	6003      	str	r3, [r0, #0]
 8008892:	2000      	movs	r0, #0
 8008894:	b007      	add	sp, #28
 8008896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008898:	2c2b      	cmp	r4, #43	; 0x2b
 800889a:	d1c2      	bne.n	8008822 <_strtol_l.constprop.0+0x3a>
 800889c:	781c      	ldrb	r4, [r3, #0]
 800889e:	1c95      	adds	r5, r2, #2
 80088a0:	e7bf      	b.n	8008822 <_strtol_l.constprop.0+0x3a>
 80088a2:	0023      	movs	r3, r4
 80088a4:	3b61      	subs	r3, #97	; 0x61
 80088a6:	2b19      	cmp	r3, #25
 80088a8:	d9dd      	bls.n	8008866 <_strtol_l.constprop.0+0x7e>
 80088aa:	1c53      	adds	r3, r2, #1
 80088ac:	d109      	bne.n	80088c2 <_strtol_l.constprop.0+0xda>
 80088ae:	2322      	movs	r3, #34	; 0x22
 80088b0:	9a05      	ldr	r2, [sp, #20]
 80088b2:	9803      	ldr	r0, [sp, #12]
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	9b02      	ldr	r3, [sp, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d0eb      	beq.n	8008894 <_strtol_l.constprop.0+0xac>
 80088bc:	1e6b      	subs	r3, r5, #1
 80088be:	9301      	str	r3, [sp, #4]
 80088c0:	e007      	b.n	80088d2 <_strtol_l.constprop.0+0xea>
 80088c2:	2f00      	cmp	r7, #0
 80088c4:	d000      	beq.n	80088c8 <_strtol_l.constprop.0+0xe0>
 80088c6:	4240      	negs	r0, r0
 80088c8:	9b02      	ldr	r3, [sp, #8]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0e2      	beq.n	8008894 <_strtol_l.constprop.0+0xac>
 80088ce:	2a00      	cmp	r2, #0
 80088d0:	d1f4      	bne.n	80088bc <_strtol_l.constprop.0+0xd4>
 80088d2:	9b02      	ldr	r3, [sp, #8]
 80088d4:	9a01      	ldr	r2, [sp, #4]
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	e7dc      	b.n	8008894 <_strtol_l.constprop.0+0xac>
 80088da:	2430      	movs	r4, #48	; 0x30
 80088dc:	2e00      	cmp	r6, #0
 80088de:	d1ae      	bne.n	800883e <_strtol_l.constprop.0+0x56>
 80088e0:	3608      	adds	r6, #8
 80088e2:	e7ac      	b.n	800883e <_strtol_l.constprop.0+0x56>
 80088e4:	2c30      	cmp	r4, #48	; 0x30
 80088e6:	d0a2      	beq.n	800882e <_strtol_l.constprop.0+0x46>
 80088e8:	260a      	movs	r6, #10
 80088ea:	e7a8      	b.n	800883e <_strtol_l.constprop.0+0x56>
 80088ec:	0800f8d9 	.word	0x0800f8d9
 80088f0:	7fffffff 	.word	0x7fffffff

080088f4 <_strtol_r>:
 80088f4:	b510      	push	{r4, lr}
 80088f6:	f7ff ff77 	bl	80087e8 <_strtol_l.constprop.0>
 80088fa:	bd10      	pop	{r4, pc}

080088fc <strtol>:
 80088fc:	b510      	push	{r4, lr}
 80088fe:	4c04      	ldr	r4, [pc, #16]	; (8008910 <strtol+0x14>)
 8008900:	0013      	movs	r3, r2
 8008902:	000a      	movs	r2, r1
 8008904:	0001      	movs	r1, r0
 8008906:	6820      	ldr	r0, [r4, #0]
 8008908:	f7ff ff6e 	bl	80087e8 <_strtol_l.constprop.0>
 800890c:	bd10      	pop	{r4, pc}
 800890e:	46c0      	nop			; (mov r8, r8)
 8008910:	200006c0 	.word	0x200006c0

08008914 <std>:
 8008914:	2300      	movs	r3, #0
 8008916:	b510      	push	{r4, lr}
 8008918:	0004      	movs	r4, r0
 800891a:	6003      	str	r3, [r0, #0]
 800891c:	6043      	str	r3, [r0, #4]
 800891e:	6083      	str	r3, [r0, #8]
 8008920:	8181      	strh	r1, [r0, #12]
 8008922:	6643      	str	r3, [r0, #100]	; 0x64
 8008924:	81c2      	strh	r2, [r0, #14]
 8008926:	6103      	str	r3, [r0, #16]
 8008928:	6143      	str	r3, [r0, #20]
 800892a:	6183      	str	r3, [r0, #24]
 800892c:	0019      	movs	r1, r3
 800892e:	2208      	movs	r2, #8
 8008930:	305c      	adds	r0, #92	; 0x5c
 8008932:	f000 f949 	bl	8008bc8 <memset>
 8008936:	4b0b      	ldr	r3, [pc, #44]	; (8008964 <std+0x50>)
 8008938:	61e4      	str	r4, [r4, #28]
 800893a:	6223      	str	r3, [r4, #32]
 800893c:	4b0a      	ldr	r3, [pc, #40]	; (8008968 <std+0x54>)
 800893e:	6263      	str	r3, [r4, #36]	; 0x24
 8008940:	4b0a      	ldr	r3, [pc, #40]	; (800896c <std+0x58>)
 8008942:	62a3      	str	r3, [r4, #40]	; 0x28
 8008944:	4b0a      	ldr	r3, [pc, #40]	; (8008970 <std+0x5c>)
 8008946:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008948:	4b0a      	ldr	r3, [pc, #40]	; (8008974 <std+0x60>)
 800894a:	429c      	cmp	r4, r3
 800894c:	d005      	beq.n	800895a <std+0x46>
 800894e:	4b0a      	ldr	r3, [pc, #40]	; (8008978 <std+0x64>)
 8008950:	429c      	cmp	r4, r3
 8008952:	d002      	beq.n	800895a <std+0x46>
 8008954:	4b09      	ldr	r3, [pc, #36]	; (800897c <std+0x68>)
 8008956:	429c      	cmp	r4, r3
 8008958:	d103      	bne.n	8008962 <std+0x4e>
 800895a:	0020      	movs	r0, r4
 800895c:	3058      	adds	r0, #88	; 0x58
 800895e:	f000 fa09 	bl	8008d74 <__retarget_lock_init_recursive>
 8008962:	bd10      	pop	{r4, pc}
 8008964:	08008b2d 	.word	0x08008b2d
 8008968:	08008b59 	.word	0x08008b59
 800896c:	08008b91 	.word	0x08008b91
 8008970:	08008bbd 	.word	0x08008bbd
 8008974:	20000a64 	.word	0x20000a64
 8008978:	20000acc 	.word	0x20000acc
 800897c:	20000b34 	.word	0x20000b34

08008980 <stdio_exit_handler>:
 8008980:	b510      	push	{r4, lr}
 8008982:	4a03      	ldr	r2, [pc, #12]	; (8008990 <stdio_exit_handler+0x10>)
 8008984:	4903      	ldr	r1, [pc, #12]	; (8008994 <stdio_exit_handler+0x14>)
 8008986:	4804      	ldr	r0, [pc, #16]	; (8008998 <stdio_exit_handler+0x18>)
 8008988:	f000 f86c 	bl	8008a64 <_fwalk_sglue>
 800898c:	bd10      	pop	{r4, pc}
 800898e:	46c0      	nop			; (mov r8, r8)
 8008990:	20000424 	.word	0x20000424
 8008994:	0800c875 	.word	0x0800c875
 8008998:	200005a0 	.word	0x200005a0

0800899c <cleanup_stdio>:
 800899c:	6841      	ldr	r1, [r0, #4]
 800899e:	4b0b      	ldr	r3, [pc, #44]	; (80089cc <cleanup_stdio+0x30>)
 80089a0:	b510      	push	{r4, lr}
 80089a2:	0004      	movs	r4, r0
 80089a4:	4299      	cmp	r1, r3
 80089a6:	d001      	beq.n	80089ac <cleanup_stdio+0x10>
 80089a8:	f003 ff64 	bl	800c874 <_fclose_r>
 80089ac:	68a1      	ldr	r1, [r4, #8]
 80089ae:	4b08      	ldr	r3, [pc, #32]	; (80089d0 <cleanup_stdio+0x34>)
 80089b0:	4299      	cmp	r1, r3
 80089b2:	d002      	beq.n	80089ba <cleanup_stdio+0x1e>
 80089b4:	0020      	movs	r0, r4
 80089b6:	f003 ff5d 	bl	800c874 <_fclose_r>
 80089ba:	68e1      	ldr	r1, [r4, #12]
 80089bc:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <cleanup_stdio+0x38>)
 80089be:	4299      	cmp	r1, r3
 80089c0:	d002      	beq.n	80089c8 <cleanup_stdio+0x2c>
 80089c2:	0020      	movs	r0, r4
 80089c4:	f003 ff56 	bl	800c874 <_fclose_r>
 80089c8:	bd10      	pop	{r4, pc}
 80089ca:	46c0      	nop			; (mov r8, r8)
 80089cc:	20000a64 	.word	0x20000a64
 80089d0:	20000acc 	.word	0x20000acc
 80089d4:	20000b34 	.word	0x20000b34

080089d8 <global_stdio_init.part.0>:
 80089d8:	b510      	push	{r4, lr}
 80089da:	4b09      	ldr	r3, [pc, #36]	; (8008a00 <global_stdio_init.part.0+0x28>)
 80089dc:	4a09      	ldr	r2, [pc, #36]	; (8008a04 <global_stdio_init.part.0+0x2c>)
 80089de:	2104      	movs	r1, #4
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	4809      	ldr	r0, [pc, #36]	; (8008a08 <global_stdio_init.part.0+0x30>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	f7ff ff95 	bl	8008914 <std>
 80089ea:	2201      	movs	r2, #1
 80089ec:	2109      	movs	r1, #9
 80089ee:	4807      	ldr	r0, [pc, #28]	; (8008a0c <global_stdio_init.part.0+0x34>)
 80089f0:	f7ff ff90 	bl	8008914 <std>
 80089f4:	2202      	movs	r2, #2
 80089f6:	2112      	movs	r1, #18
 80089f8:	4805      	ldr	r0, [pc, #20]	; (8008a10 <global_stdio_init.part.0+0x38>)
 80089fa:	f7ff ff8b 	bl	8008914 <std>
 80089fe:	bd10      	pop	{r4, pc}
 8008a00:	20000b9c 	.word	0x20000b9c
 8008a04:	08008981 	.word	0x08008981
 8008a08:	20000a64 	.word	0x20000a64
 8008a0c:	20000acc 	.word	0x20000acc
 8008a10:	20000b34 	.word	0x20000b34

08008a14 <__sfp_lock_acquire>:
 8008a14:	b510      	push	{r4, lr}
 8008a16:	4802      	ldr	r0, [pc, #8]	; (8008a20 <__sfp_lock_acquire+0xc>)
 8008a18:	f000 f9ae 	bl	8008d78 <__retarget_lock_acquire_recursive>
 8008a1c:	bd10      	pop	{r4, pc}
 8008a1e:	46c0      	nop			; (mov r8, r8)
 8008a20:	20000ba6 	.word	0x20000ba6

08008a24 <__sfp_lock_release>:
 8008a24:	b510      	push	{r4, lr}
 8008a26:	4802      	ldr	r0, [pc, #8]	; (8008a30 <__sfp_lock_release+0xc>)
 8008a28:	f000 f9a7 	bl	8008d7a <__retarget_lock_release_recursive>
 8008a2c:	bd10      	pop	{r4, pc}
 8008a2e:	46c0      	nop			; (mov r8, r8)
 8008a30:	20000ba6 	.word	0x20000ba6

08008a34 <__sinit>:
 8008a34:	b510      	push	{r4, lr}
 8008a36:	0004      	movs	r4, r0
 8008a38:	f7ff ffec 	bl	8008a14 <__sfp_lock_acquire>
 8008a3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <__sinit+0x14>
 8008a42:	f7ff ffef 	bl	8008a24 <__sfp_lock_release>
 8008a46:	bd10      	pop	{r4, pc}
 8008a48:	4b04      	ldr	r3, [pc, #16]	; (8008a5c <__sinit+0x28>)
 8008a4a:	6363      	str	r3, [r4, #52]	; 0x34
 8008a4c:	4b04      	ldr	r3, [pc, #16]	; (8008a60 <__sinit+0x2c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1f6      	bne.n	8008a42 <__sinit+0xe>
 8008a54:	f7ff ffc0 	bl	80089d8 <global_stdio_init.part.0>
 8008a58:	e7f3      	b.n	8008a42 <__sinit+0xe>
 8008a5a:	46c0      	nop			; (mov r8, r8)
 8008a5c:	0800899d 	.word	0x0800899d
 8008a60:	20000b9c 	.word	0x20000b9c

08008a64 <_fwalk_sglue>:
 8008a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a66:	0014      	movs	r4, r2
 8008a68:	2600      	movs	r6, #0
 8008a6a:	9000      	str	r0, [sp, #0]
 8008a6c:	9101      	str	r1, [sp, #4]
 8008a6e:	68a5      	ldr	r5, [r4, #8]
 8008a70:	6867      	ldr	r7, [r4, #4]
 8008a72:	3f01      	subs	r7, #1
 8008a74:	d504      	bpl.n	8008a80 <_fwalk_sglue+0x1c>
 8008a76:	6824      	ldr	r4, [r4, #0]
 8008a78:	2c00      	cmp	r4, #0
 8008a7a:	d1f8      	bne.n	8008a6e <_fwalk_sglue+0xa>
 8008a7c:	0030      	movs	r0, r6
 8008a7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a80:	89ab      	ldrh	r3, [r5, #12]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d908      	bls.n	8008a98 <_fwalk_sglue+0x34>
 8008a86:	220e      	movs	r2, #14
 8008a88:	5eab      	ldrsh	r3, [r5, r2]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	d004      	beq.n	8008a98 <_fwalk_sglue+0x34>
 8008a8e:	0029      	movs	r1, r5
 8008a90:	9800      	ldr	r0, [sp, #0]
 8008a92:	9b01      	ldr	r3, [sp, #4]
 8008a94:	4798      	blx	r3
 8008a96:	4306      	orrs	r6, r0
 8008a98:	3568      	adds	r5, #104	; 0x68
 8008a9a:	e7ea      	b.n	8008a72 <_fwalk_sglue+0xe>

08008a9c <sprintf>:
 8008a9c:	b40e      	push	{r1, r2, r3}
 8008a9e:	b500      	push	{lr}
 8008aa0:	490b      	ldr	r1, [pc, #44]	; (8008ad0 <sprintf+0x34>)
 8008aa2:	b09c      	sub	sp, #112	; 0x70
 8008aa4:	ab1d      	add	r3, sp, #116	; 0x74
 8008aa6:	9002      	str	r0, [sp, #8]
 8008aa8:	9006      	str	r0, [sp, #24]
 8008aaa:	9107      	str	r1, [sp, #28]
 8008aac:	9104      	str	r1, [sp, #16]
 8008aae:	4809      	ldr	r0, [pc, #36]	; (8008ad4 <sprintf+0x38>)
 8008ab0:	4909      	ldr	r1, [pc, #36]	; (8008ad8 <sprintf+0x3c>)
 8008ab2:	cb04      	ldmia	r3!, {r2}
 8008ab4:	9105      	str	r1, [sp, #20]
 8008ab6:	6800      	ldr	r0, [r0, #0]
 8008ab8:	a902      	add	r1, sp, #8
 8008aba:	9301      	str	r3, [sp, #4]
 8008abc:	f001 fa7c 	bl	8009fb8 <_svfprintf_r>
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	9b02      	ldr	r3, [sp, #8]
 8008ac4:	701a      	strb	r2, [r3, #0]
 8008ac6:	b01c      	add	sp, #112	; 0x70
 8008ac8:	bc08      	pop	{r3}
 8008aca:	b003      	add	sp, #12
 8008acc:	4718      	bx	r3
 8008ace:	46c0      	nop			; (mov r8, r8)
 8008ad0:	7fffffff 	.word	0x7fffffff
 8008ad4:	200006c0 	.word	0x200006c0
 8008ad8:	ffff0208 	.word	0xffff0208

08008adc <sscanf>:
 8008adc:	b40e      	push	{r1, r2, r3}
 8008ade:	b530      	push	{r4, r5, lr}
 8008ae0:	2381      	movs	r3, #129	; 0x81
 8008ae2:	b09c      	sub	sp, #112	; 0x70
 8008ae4:	466a      	mov	r2, sp
 8008ae6:	ac1f      	add	r4, sp, #124	; 0x7c
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	cc20      	ldmia	r4!, {r5}
 8008aec:	8293      	strh	r3, [r2, #20]
 8008aee:	9002      	str	r0, [sp, #8]
 8008af0:	9006      	str	r0, [sp, #24]
 8008af2:	f7f7 fb07 	bl	8000104 <strlen>
 8008af6:	4b0b      	ldr	r3, [pc, #44]	; (8008b24 <sscanf+0x48>)
 8008af8:	466a      	mov	r2, sp
 8008afa:	930a      	str	r3, [sp, #40]	; 0x28
 8008afc:	2300      	movs	r3, #0
 8008afe:	9003      	str	r0, [sp, #12]
 8008b00:	9007      	str	r0, [sp, #28]
 8008b02:	4809      	ldr	r0, [pc, #36]	; (8008b28 <sscanf+0x4c>)
 8008b04:	930e      	str	r3, [sp, #56]	; 0x38
 8008b06:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	82d3      	strh	r3, [r2, #22]
 8008b0c:	a902      	add	r1, sp, #8
 8008b0e:	0023      	movs	r3, r4
 8008b10:	002a      	movs	r2, r5
 8008b12:	6800      	ldr	r0, [r0, #0]
 8008b14:	9401      	str	r4, [sp, #4]
 8008b16:	f002 fc91 	bl	800b43c <__ssvfscanf_r>
 8008b1a:	b01c      	add	sp, #112	; 0x70
 8008b1c:	bc30      	pop	{r4, r5}
 8008b1e:	bc08      	pop	{r3}
 8008b20:	b003      	add	sp, #12
 8008b22:	4718      	bx	r3
 8008b24:	08008b55 	.word	0x08008b55
 8008b28:	200006c0 	.word	0x200006c0

08008b2c <__sread>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	000c      	movs	r4, r1
 8008b30:	250e      	movs	r5, #14
 8008b32:	5f49      	ldrsh	r1, [r1, r5]
 8008b34:	f000 f8ba 	bl	8008cac <_read_r>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	db03      	blt.n	8008b44 <__sread+0x18>
 8008b3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008b3e:	181b      	adds	r3, r3, r0
 8008b40:	6523      	str	r3, [r4, #80]	; 0x50
 8008b42:	bd70      	pop	{r4, r5, r6, pc}
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	4a02      	ldr	r2, [pc, #8]	; (8008b50 <__sread+0x24>)
 8008b48:	4013      	ands	r3, r2
 8008b4a:	81a3      	strh	r3, [r4, #12]
 8008b4c:	e7f9      	b.n	8008b42 <__sread+0x16>
 8008b4e:	46c0      	nop			; (mov r8, r8)
 8008b50:	ffffefff 	.word	0xffffefff

08008b54 <__seofread>:
 8008b54:	2000      	movs	r0, #0
 8008b56:	4770      	bx	lr

08008b58 <__swrite>:
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5a:	001f      	movs	r7, r3
 8008b5c:	898b      	ldrh	r3, [r1, #12]
 8008b5e:	0005      	movs	r5, r0
 8008b60:	000c      	movs	r4, r1
 8008b62:	0016      	movs	r6, r2
 8008b64:	05db      	lsls	r3, r3, #23
 8008b66:	d505      	bpl.n	8008b74 <__swrite+0x1c>
 8008b68:	230e      	movs	r3, #14
 8008b6a:	5ec9      	ldrsh	r1, [r1, r3]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	2302      	movs	r3, #2
 8008b70:	f000 f888 	bl	8008c84 <_lseek_r>
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	4a05      	ldr	r2, [pc, #20]	; (8008b8c <__swrite+0x34>)
 8008b78:	0028      	movs	r0, r5
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	81a3      	strh	r3, [r4, #12]
 8008b7e:	0032      	movs	r2, r6
 8008b80:	230e      	movs	r3, #14
 8008b82:	5ee1      	ldrsh	r1, [r4, r3]
 8008b84:	003b      	movs	r3, r7
 8008b86:	f000 f8b7 	bl	8008cf8 <_write_r>
 8008b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b8c:	ffffefff 	.word	0xffffefff

08008b90 <__sseek>:
 8008b90:	b570      	push	{r4, r5, r6, lr}
 8008b92:	000c      	movs	r4, r1
 8008b94:	250e      	movs	r5, #14
 8008b96:	5f49      	ldrsh	r1, [r1, r5]
 8008b98:	f000 f874 	bl	8008c84 <_lseek_r>
 8008b9c:	89a3      	ldrh	r3, [r4, #12]
 8008b9e:	1c42      	adds	r2, r0, #1
 8008ba0:	d103      	bne.n	8008baa <__sseek+0x1a>
 8008ba2:	4a05      	ldr	r2, [pc, #20]	; (8008bb8 <__sseek+0x28>)
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	81a3      	strh	r3, [r4, #12]
 8008ba8:	bd70      	pop	{r4, r5, r6, pc}
 8008baa:	2280      	movs	r2, #128	; 0x80
 8008bac:	0152      	lsls	r2, r2, #5
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	81a3      	strh	r3, [r4, #12]
 8008bb2:	6520      	str	r0, [r4, #80]	; 0x50
 8008bb4:	e7f8      	b.n	8008ba8 <__sseek+0x18>
 8008bb6:	46c0      	nop			; (mov r8, r8)
 8008bb8:	ffffefff 	.word	0xffffefff

08008bbc <__sclose>:
 8008bbc:	b510      	push	{r4, lr}
 8008bbe:	230e      	movs	r3, #14
 8008bc0:	5ec9      	ldrsh	r1, [r1, r3]
 8008bc2:	f000 f84d 	bl	8008c60 <_close_r>
 8008bc6:	bd10      	pop	{r4, pc}

08008bc8 <memset>:
 8008bc8:	0003      	movs	r3, r0
 8008bca:	1882      	adds	r2, r0, r2
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d100      	bne.n	8008bd2 <memset+0xa>
 8008bd0:	4770      	bx	lr
 8008bd2:	7019      	strb	r1, [r3, #0]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	e7f9      	b.n	8008bcc <memset+0x4>

08008bd8 <strncmp>:
 8008bd8:	b530      	push	{r4, r5, lr}
 8008bda:	0005      	movs	r5, r0
 8008bdc:	1e10      	subs	r0, r2, #0
 8008bde:	d00b      	beq.n	8008bf8 <strncmp+0x20>
 8008be0:	2400      	movs	r4, #0
 8008be2:	3a01      	subs	r2, #1
 8008be4:	5d2b      	ldrb	r3, [r5, r4]
 8008be6:	5d08      	ldrb	r0, [r1, r4]
 8008be8:	4283      	cmp	r3, r0
 8008bea:	d104      	bne.n	8008bf6 <strncmp+0x1e>
 8008bec:	42a2      	cmp	r2, r4
 8008bee:	d002      	beq.n	8008bf6 <strncmp+0x1e>
 8008bf0:	3401      	adds	r4, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1f6      	bne.n	8008be4 <strncmp+0xc>
 8008bf6:	1a18      	subs	r0, r3, r0
 8008bf8:	bd30      	pop	{r4, r5, pc}

08008bfa <strncpy>:
 8008bfa:	0003      	movs	r3, r0
 8008bfc:	b530      	push	{r4, r5, lr}
 8008bfe:	001d      	movs	r5, r3
 8008c00:	2a00      	cmp	r2, #0
 8008c02:	d006      	beq.n	8008c12 <strncpy+0x18>
 8008c04:	780c      	ldrb	r4, [r1, #0]
 8008c06:	3a01      	subs	r2, #1
 8008c08:	3301      	adds	r3, #1
 8008c0a:	702c      	strb	r4, [r5, #0]
 8008c0c:	3101      	adds	r1, #1
 8008c0e:	2c00      	cmp	r4, #0
 8008c10:	d1f5      	bne.n	8008bfe <strncpy+0x4>
 8008c12:	2100      	movs	r1, #0
 8008c14:	189a      	adds	r2, r3, r2
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d100      	bne.n	8008c1c <strncpy+0x22>
 8008c1a:	bd30      	pop	{r4, r5, pc}
 8008c1c:	7019      	strb	r1, [r3, #0]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	e7f9      	b.n	8008c16 <strncpy+0x1c>

08008c22 <strstr>:
 8008c22:	780a      	ldrb	r2, [r1, #0]
 8008c24:	b530      	push	{r4, r5, lr}
 8008c26:	2a00      	cmp	r2, #0
 8008c28:	d10c      	bne.n	8008c44 <strstr+0x22>
 8008c2a:	bd30      	pop	{r4, r5, pc}
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d108      	bne.n	8008c42 <strstr+0x20>
 8008c30:	2301      	movs	r3, #1
 8008c32:	5ccc      	ldrb	r4, [r1, r3]
 8008c34:	2c00      	cmp	r4, #0
 8008c36:	d0f8      	beq.n	8008c2a <strstr+0x8>
 8008c38:	5cc5      	ldrb	r5, [r0, r3]
 8008c3a:	42a5      	cmp	r5, r4
 8008c3c:	d101      	bne.n	8008c42 <strstr+0x20>
 8008c3e:	3301      	adds	r3, #1
 8008c40:	e7f7      	b.n	8008c32 <strstr+0x10>
 8008c42:	3001      	adds	r0, #1
 8008c44:	7803      	ldrb	r3, [r0, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1f0      	bne.n	8008c2c <strstr+0xa>
 8008c4a:	0018      	movs	r0, r3
 8008c4c:	e7ed      	b.n	8008c2a <strstr+0x8>
	...

08008c50 <__locale_mb_cur_max>:
 8008c50:	2294      	movs	r2, #148	; 0x94
 8008c52:	4b02      	ldr	r3, [pc, #8]	; (8008c5c <__locale_mb_cur_max+0xc>)
 8008c54:	0052      	lsls	r2, r2, #1
 8008c56:	5c98      	ldrb	r0, [r3, r2]
 8008c58:	4770      	bx	lr
 8008c5a:	46c0      	nop			; (mov r8, r8)
 8008c5c:	20000430 	.word	0x20000430

08008c60 <_close_r>:
 8008c60:	2300      	movs	r3, #0
 8008c62:	b570      	push	{r4, r5, r6, lr}
 8008c64:	4d06      	ldr	r5, [pc, #24]	; (8008c80 <_close_r+0x20>)
 8008c66:	0004      	movs	r4, r0
 8008c68:	0008      	movs	r0, r1
 8008c6a:	602b      	str	r3, [r5, #0]
 8008c6c:	f7fa fc25 	bl	80034ba <_close>
 8008c70:	1c43      	adds	r3, r0, #1
 8008c72:	d103      	bne.n	8008c7c <_close_r+0x1c>
 8008c74:	682b      	ldr	r3, [r5, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d000      	beq.n	8008c7c <_close_r+0x1c>
 8008c7a:	6023      	str	r3, [r4, #0]
 8008c7c:	bd70      	pop	{r4, r5, r6, pc}
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	20000ba0 	.word	0x20000ba0

08008c84 <_lseek_r>:
 8008c84:	b570      	push	{r4, r5, r6, lr}
 8008c86:	0004      	movs	r4, r0
 8008c88:	0008      	movs	r0, r1
 8008c8a:	0011      	movs	r1, r2
 8008c8c:	001a      	movs	r2, r3
 8008c8e:	2300      	movs	r3, #0
 8008c90:	4d05      	ldr	r5, [pc, #20]	; (8008ca8 <_lseek_r+0x24>)
 8008c92:	602b      	str	r3, [r5, #0]
 8008c94:	f7fa fc32 	bl	80034fc <_lseek>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	d103      	bne.n	8008ca4 <_lseek_r+0x20>
 8008c9c:	682b      	ldr	r3, [r5, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d000      	beq.n	8008ca4 <_lseek_r+0x20>
 8008ca2:	6023      	str	r3, [r4, #0]
 8008ca4:	bd70      	pop	{r4, r5, r6, pc}
 8008ca6:	46c0      	nop			; (mov r8, r8)
 8008ca8:	20000ba0 	.word	0x20000ba0

08008cac <_read_r>:
 8008cac:	b570      	push	{r4, r5, r6, lr}
 8008cae:	0004      	movs	r4, r0
 8008cb0:	0008      	movs	r0, r1
 8008cb2:	0011      	movs	r1, r2
 8008cb4:	001a      	movs	r2, r3
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	4d05      	ldr	r5, [pc, #20]	; (8008cd0 <_read_r+0x24>)
 8008cba:	602b      	str	r3, [r5, #0]
 8008cbc:	f7fa fbc4 	bl	8003448 <_read>
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	d103      	bne.n	8008ccc <_read_r+0x20>
 8008cc4:	682b      	ldr	r3, [r5, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d000      	beq.n	8008ccc <_read_r+0x20>
 8008cca:	6023      	str	r3, [r4, #0]
 8008ccc:	bd70      	pop	{r4, r5, r6, pc}
 8008cce:	46c0      	nop			; (mov r8, r8)
 8008cd0:	20000ba0 	.word	0x20000ba0

08008cd4 <_sbrk_r>:
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	b570      	push	{r4, r5, r6, lr}
 8008cd8:	4d06      	ldr	r5, [pc, #24]	; (8008cf4 <_sbrk_r+0x20>)
 8008cda:	0004      	movs	r4, r0
 8008cdc:	0008      	movs	r0, r1
 8008cde:	602b      	str	r3, [r5, #0]
 8008ce0:	f7fa fc18 	bl	8003514 <_sbrk>
 8008ce4:	1c43      	adds	r3, r0, #1
 8008ce6:	d103      	bne.n	8008cf0 <_sbrk_r+0x1c>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d000      	beq.n	8008cf0 <_sbrk_r+0x1c>
 8008cee:	6023      	str	r3, [r4, #0]
 8008cf0:	bd70      	pop	{r4, r5, r6, pc}
 8008cf2:	46c0      	nop			; (mov r8, r8)
 8008cf4:	20000ba0 	.word	0x20000ba0

08008cf8 <_write_r>:
 8008cf8:	b570      	push	{r4, r5, r6, lr}
 8008cfa:	0004      	movs	r4, r0
 8008cfc:	0008      	movs	r0, r1
 8008cfe:	0011      	movs	r1, r2
 8008d00:	001a      	movs	r2, r3
 8008d02:	2300      	movs	r3, #0
 8008d04:	4d05      	ldr	r5, [pc, #20]	; (8008d1c <_write_r+0x24>)
 8008d06:	602b      	str	r3, [r5, #0]
 8008d08:	f7fa fbbb 	bl	8003482 <_write>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d103      	bne.n	8008d18 <_write_r+0x20>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d000      	beq.n	8008d18 <_write_r+0x20>
 8008d16:	6023      	str	r3, [r4, #0]
 8008d18:	bd70      	pop	{r4, r5, r6, pc}
 8008d1a:	46c0      	nop			; (mov r8, r8)
 8008d1c:	20000ba0 	.word	0x20000ba0

08008d20 <__errno>:
 8008d20:	4b01      	ldr	r3, [pc, #4]	; (8008d28 <__errno+0x8>)
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	4770      	bx	lr
 8008d26:	46c0      	nop			; (mov r8, r8)
 8008d28:	200006c0 	.word	0x200006c0

08008d2c <__libc_init_array>:
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	2600      	movs	r6, #0
 8008d30:	4c0c      	ldr	r4, [pc, #48]	; (8008d64 <__libc_init_array+0x38>)
 8008d32:	4d0d      	ldr	r5, [pc, #52]	; (8008d68 <__libc_init_array+0x3c>)
 8008d34:	1b64      	subs	r4, r4, r5
 8008d36:	10a4      	asrs	r4, r4, #2
 8008d38:	42a6      	cmp	r6, r4
 8008d3a:	d109      	bne.n	8008d50 <__libc_init_array+0x24>
 8008d3c:	2600      	movs	r6, #0
 8008d3e:	f006 fc79 	bl	800f634 <_init>
 8008d42:	4c0a      	ldr	r4, [pc, #40]	; (8008d6c <__libc_init_array+0x40>)
 8008d44:	4d0a      	ldr	r5, [pc, #40]	; (8008d70 <__libc_init_array+0x44>)
 8008d46:	1b64      	subs	r4, r4, r5
 8008d48:	10a4      	asrs	r4, r4, #2
 8008d4a:	42a6      	cmp	r6, r4
 8008d4c:	d105      	bne.n	8008d5a <__libc_init_array+0x2e>
 8008d4e:	bd70      	pop	{r4, r5, r6, pc}
 8008d50:	00b3      	lsls	r3, r6, #2
 8008d52:	58eb      	ldr	r3, [r5, r3]
 8008d54:	4798      	blx	r3
 8008d56:	3601      	adds	r6, #1
 8008d58:	e7ee      	b.n	8008d38 <__libc_init_array+0xc>
 8008d5a:	00b3      	lsls	r3, r6, #2
 8008d5c:	58eb      	ldr	r3, [r5, r3]
 8008d5e:	4798      	blx	r3
 8008d60:	3601      	adds	r6, #1
 8008d62:	e7f2      	b.n	8008d4a <__libc_init_array+0x1e>
 8008d64:	0800fcf4 	.word	0x0800fcf4
 8008d68:	0800fcf4 	.word	0x0800fcf4
 8008d6c:	0800fcfc 	.word	0x0800fcfc
 8008d70:	0800fcf4 	.word	0x0800fcf4

08008d74 <__retarget_lock_init_recursive>:
 8008d74:	4770      	bx	lr

08008d76 <__retarget_lock_close_recursive>:
 8008d76:	4770      	bx	lr

08008d78 <__retarget_lock_acquire_recursive>:
 8008d78:	4770      	bx	lr

08008d7a <__retarget_lock_release_recursive>:
 8008d7a:	4770      	bx	lr

08008d7c <sysconf>:
 8008d7c:	2380      	movs	r3, #128	; 0x80
 8008d7e:	b510      	push	{r4, lr}
 8008d80:	2808      	cmp	r0, #8
 8008d82:	d004      	beq.n	8008d8e <sysconf+0x12>
 8008d84:	f7ff ffcc 	bl	8008d20 <__errno>
 8008d88:	2316      	movs	r3, #22
 8008d8a:	6003      	str	r3, [r0, #0]
 8008d8c:	3b17      	subs	r3, #23
 8008d8e:	0018      	movs	r0, r3
 8008d90:	bd10      	pop	{r4, pc}

08008d92 <memcpy>:
 8008d92:	2300      	movs	r3, #0
 8008d94:	b510      	push	{r4, lr}
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d100      	bne.n	8008d9c <memcpy+0xa>
 8008d9a:	bd10      	pop	{r4, pc}
 8008d9c:	5ccc      	ldrb	r4, [r1, r3]
 8008d9e:	54c4      	strb	r4, [r0, r3]
 8008da0:	3301      	adds	r3, #1
 8008da2:	e7f8      	b.n	8008d96 <memcpy+0x4>

08008da4 <nan>:
 8008da4:	2000      	movs	r0, #0
 8008da6:	4901      	ldr	r1, [pc, #4]	; (8008dac <nan+0x8>)
 8008da8:	4770      	bx	lr
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	7ff80000 	.word	0x7ff80000

08008db0 <nanf>:
 8008db0:	4800      	ldr	r0, [pc, #0]	; (8008db4 <nanf+0x4>)
 8008db2:	4770      	bx	lr
 8008db4:	7fc00000 	.word	0x7fc00000

08008db8 <register_fini>:
 8008db8:	4b03      	ldr	r3, [pc, #12]	; (8008dc8 <register_fini+0x10>)
 8008dba:	b510      	push	{r4, lr}
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <register_fini+0xe>
 8008dc0:	4802      	ldr	r0, [pc, #8]	; (8008dcc <register_fini+0x14>)
 8008dc2:	f000 f805 	bl	8008dd0 <atexit>
 8008dc6:	bd10      	pop	{r4, pc}
 8008dc8:	00000000 	.word	0x00000000
 8008dcc:	0800cb2d 	.word	0x0800cb2d

08008dd0 <atexit>:
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	b510      	push	{r4, lr}
 8008dd4:	0001      	movs	r1, r0
 8008dd6:	001a      	movs	r2, r3
 8008dd8:	0018      	movs	r0, r3
 8008dda:	f003 fef9 	bl	800cbd0 <__register_exitproc>
 8008dde:	bd10      	pop	{r4, pc}

08008de0 <_malloc_trim_r>:
 8008de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008de2:	0004      	movs	r4, r0
 8008de4:	2008      	movs	r0, #8
 8008de6:	000d      	movs	r5, r1
 8008de8:	f7ff ffc8 	bl	8008d7c <sysconf>
 8008dec:	0006      	movs	r6, r0
 8008dee:	0020      	movs	r0, r4
 8008df0:	f7fe fec0 	bl	8007b74 <__malloc_lock>
 8008df4:	2203      	movs	r2, #3
 8008df6:	4f21      	ldr	r7, [pc, #132]	; (8008e7c <_malloc_trim_r+0x9c>)
 8008df8:	0031      	movs	r1, r6
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	4393      	bics	r3, r2
 8008e00:	1b58      	subs	r0, r3, r5
 8008e02:	3811      	subs	r0, #17
 8008e04:	1980      	adds	r0, r0, r6
 8008e06:	9301      	str	r3, [sp, #4]
 8008e08:	f7f7 f998 	bl	800013c <__udivsi3>
 8008e0c:	1e45      	subs	r5, r0, #1
 8008e0e:	4375      	muls	r5, r6
 8008e10:	42ae      	cmp	r6, r5
 8008e12:	dd04      	ble.n	8008e1e <_malloc_trim_r+0x3e>
 8008e14:	0020      	movs	r0, r4
 8008e16:	f7fe feb5 	bl	8007b84 <__malloc_unlock>
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e1e:	2100      	movs	r1, #0
 8008e20:	0020      	movs	r0, r4
 8008e22:	f7ff ff57 	bl	8008cd4 <_sbrk_r>
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	9a01      	ldr	r2, [sp, #4]
 8008e2a:	189b      	adds	r3, r3, r2
 8008e2c:	4298      	cmp	r0, r3
 8008e2e:	d1f1      	bne.n	8008e14 <_malloc_trim_r+0x34>
 8008e30:	0020      	movs	r0, r4
 8008e32:	4269      	negs	r1, r5
 8008e34:	f7ff ff4e 	bl	8008cd4 <_sbrk_r>
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d110      	bne.n	8008e5e <_malloc_trim_r+0x7e>
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	0020      	movs	r0, r4
 8008e40:	f7ff ff48 	bl	8008cd4 <_sbrk_r>
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	1a81      	subs	r1, r0, r2
 8008e48:	290f      	cmp	r1, #15
 8008e4a:	dde3      	ble.n	8008e14 <_malloc_trim_r+0x34>
 8008e4c:	4d0c      	ldr	r5, [pc, #48]	; (8008e80 <_malloc_trim_r+0xa0>)
 8008e4e:	4b0d      	ldr	r3, [pc, #52]	; (8008e84 <_malloc_trim_r+0xa4>)
 8008e50:	682d      	ldr	r5, [r5, #0]
 8008e52:	1b40      	subs	r0, r0, r5
 8008e54:	6018      	str	r0, [r3, #0]
 8008e56:	2301      	movs	r3, #1
 8008e58:	430b      	orrs	r3, r1
 8008e5a:	6053      	str	r3, [r2, #4]
 8008e5c:	e7da      	b.n	8008e14 <_malloc_trim_r+0x34>
 8008e5e:	2601      	movs	r6, #1
 8008e60:	9b01      	ldr	r3, [sp, #4]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	1b5b      	subs	r3, r3, r5
 8008e66:	4333      	orrs	r3, r6
 8008e68:	6053      	str	r3, [r2, #4]
 8008e6a:	4a06      	ldr	r2, [pc, #24]	; (8008e84 <_malloc_trim_r+0xa4>)
 8008e6c:	0020      	movs	r0, r4
 8008e6e:	6813      	ldr	r3, [r2, #0]
 8008e70:	1b5b      	subs	r3, r3, r5
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	f7fe fe86 	bl	8007b84 <__malloc_unlock>
 8008e78:	0030      	movs	r0, r6
 8008e7a:	e7cf      	b.n	8008e1c <_malloc_trim_r+0x3c>
 8008e7c:	20000014 	.word	0x20000014
 8008e80:	2000041c 	.word	0x2000041c
 8008e84:	20000a30 	.word	0x20000a30

08008e88 <_free_r>:
 8008e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e8a:	1e0d      	subs	r5, r1, #0
 8008e8c:	9001      	str	r0, [sp, #4]
 8008e8e:	d02d      	beq.n	8008eec <_free_r+0x64>
 8008e90:	f7fe fe70 	bl	8007b74 <__malloc_lock>
 8008e94:	2301      	movs	r3, #1
 8008e96:	0029      	movs	r1, r5
 8008e98:	469c      	mov	ip, r3
 8008e9a:	3908      	subs	r1, #8
 8008e9c:	684f      	ldr	r7, [r1, #4]
 8008e9e:	4662      	mov	r2, ip
 8008ea0:	003b      	movs	r3, r7
 8008ea2:	4664      	mov	r4, ip
 8008ea4:	4393      	bics	r3, r2
 8008ea6:	18c8      	adds	r0, r1, r3
 8008ea8:	6845      	ldr	r5, [r0, #4]
 8008eaa:	3202      	adds	r2, #2
 8008eac:	4395      	bics	r5, r2
 8008eae:	4a4a      	ldr	r2, [pc, #296]	; (8008fd8 <_free_r+0x150>)
 8008eb0:	4027      	ands	r7, r4
 8008eb2:	6896      	ldr	r6, [r2, #8]
 8008eb4:	4286      	cmp	r6, r0
 8008eb6:	d11a      	bne.n	8008eee <_free_r+0x66>
 8008eb8:	195b      	adds	r3, r3, r5
 8008eba:	2f00      	cmp	r7, #0
 8008ebc:	d106      	bne.n	8008ecc <_free_r+0x44>
 8008ebe:	6808      	ldr	r0, [r1, #0]
 8008ec0:	1a09      	subs	r1, r1, r0
 8008ec2:	688d      	ldr	r5, [r1, #8]
 8008ec4:	181b      	adds	r3, r3, r0
 8008ec6:	68c8      	ldr	r0, [r1, #12]
 8008ec8:	60e8      	str	r0, [r5, #12]
 8008eca:	6085      	str	r5, [r0, #8]
 8008ecc:	2001      	movs	r0, #1
 8008ece:	4318      	orrs	r0, r3
 8008ed0:	6048      	str	r0, [r1, #4]
 8008ed2:	6091      	str	r1, [r2, #8]
 8008ed4:	4a41      	ldr	r2, [pc, #260]	; (8008fdc <_free_r+0x154>)
 8008ed6:	6812      	ldr	r2, [r2, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d804      	bhi.n	8008ee6 <_free_r+0x5e>
 8008edc:	4b40      	ldr	r3, [pc, #256]	; (8008fe0 <_free_r+0x158>)
 8008ede:	9801      	ldr	r0, [sp, #4]
 8008ee0:	6819      	ldr	r1, [r3, #0]
 8008ee2:	f7ff ff7d 	bl	8008de0 <_malloc_trim_r>
 8008ee6:	9801      	ldr	r0, [sp, #4]
 8008ee8:	f7fe fe4c 	bl	8007b84 <__malloc_unlock>
 8008eec:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008eee:	2600      	movs	r6, #0
 8008ef0:	6045      	str	r5, [r0, #4]
 8008ef2:	42b7      	cmp	r7, r6
 8008ef4:	d109      	bne.n	8008f0a <_free_r+0x82>
 8008ef6:	680f      	ldr	r7, [r1, #0]
 8008ef8:	4c3a      	ldr	r4, [pc, #232]	; (8008fe4 <_free_r+0x15c>)
 8008efa:	1bc9      	subs	r1, r1, r7
 8008efc:	19db      	adds	r3, r3, r7
 8008efe:	688f      	ldr	r7, [r1, #8]
 8008f00:	42a7      	cmp	r7, r4
 8008f02:	d02c      	beq.n	8008f5e <_free_r+0xd6>
 8008f04:	68cc      	ldr	r4, [r1, #12]
 8008f06:	60fc      	str	r4, [r7, #12]
 8008f08:	60a7      	str	r7, [r4, #8]
 8008f0a:	1947      	adds	r7, r0, r5
 8008f0c:	687c      	ldr	r4, [r7, #4]
 8008f0e:	2701      	movs	r7, #1
 8008f10:	423c      	tst	r4, r7
 8008f12:	d10b      	bne.n	8008f2c <_free_r+0xa4>
 8008f14:	195b      	adds	r3, r3, r5
 8008f16:	6885      	ldr	r5, [r0, #8]
 8008f18:	2e00      	cmp	r6, #0
 8008f1a:	d122      	bne.n	8008f62 <_free_r+0xda>
 8008f1c:	4c31      	ldr	r4, [pc, #196]	; (8008fe4 <_free_r+0x15c>)
 8008f1e:	42a5      	cmp	r5, r4
 8008f20:	d11f      	bne.n	8008f62 <_free_r+0xda>
 8008f22:	003e      	movs	r6, r7
 8008f24:	6151      	str	r1, [r2, #20]
 8008f26:	6111      	str	r1, [r2, #16]
 8008f28:	60cd      	str	r5, [r1, #12]
 8008f2a:	608d      	str	r5, [r1, #8]
 8008f2c:	2501      	movs	r5, #1
 8008f2e:	0028      	movs	r0, r5
 8008f30:	4318      	orrs	r0, r3
 8008f32:	6048      	str	r0, [r1, #4]
 8008f34:	50cb      	str	r3, [r1, r3]
 8008f36:	2e00      	cmp	r6, #0
 8008f38:	d1d5      	bne.n	8008ee6 <_free_r+0x5e>
 8008f3a:	2080      	movs	r0, #128	; 0x80
 8008f3c:	0080      	lsls	r0, r0, #2
 8008f3e:	4283      	cmp	r3, r0
 8008f40:	d213      	bcs.n	8008f6a <_free_r+0xe2>
 8008f42:	08d8      	lsrs	r0, r3, #3
 8008f44:	095b      	lsrs	r3, r3, #5
 8008f46:	409d      	lsls	r5, r3
 8008f48:	6853      	ldr	r3, [r2, #4]
 8008f4a:	431d      	orrs	r5, r3
 8008f4c:	00c3      	lsls	r3, r0, #3
 8008f4e:	189b      	adds	r3, r3, r2
 8008f50:	6055      	str	r5, [r2, #4]
 8008f52:	689a      	ldr	r2, [r3, #8]
 8008f54:	60cb      	str	r3, [r1, #12]
 8008f56:	608a      	str	r2, [r1, #8]
 8008f58:	6099      	str	r1, [r3, #8]
 8008f5a:	60d1      	str	r1, [r2, #12]
 8008f5c:	e7c3      	b.n	8008ee6 <_free_r+0x5e>
 8008f5e:	4666      	mov	r6, ip
 8008f60:	e7d3      	b.n	8008f0a <_free_r+0x82>
 8008f62:	68c0      	ldr	r0, [r0, #12]
 8008f64:	60e8      	str	r0, [r5, #12]
 8008f66:	6085      	str	r5, [r0, #8]
 8008f68:	e7e0      	b.n	8008f2c <_free_r+0xa4>
 8008f6a:	0a5d      	lsrs	r5, r3, #9
 8008f6c:	2d04      	cmp	r5, #4
 8008f6e:	d812      	bhi.n	8008f96 <_free_r+0x10e>
 8008f70:	0998      	lsrs	r0, r3, #6
 8008f72:	3038      	adds	r0, #56	; 0x38
 8008f74:	00c6      	lsls	r6, r0, #3
 8008f76:	18b6      	adds	r6, r6, r2
 8008f78:	68b5      	ldr	r5, [r6, #8]
 8008f7a:	2703      	movs	r7, #3
 8008f7c:	42ae      	cmp	r6, r5
 8008f7e:	d125      	bne.n	8008fcc <_free_r+0x144>
 8008f80:	2301      	movs	r3, #1
 8008f82:	1080      	asrs	r0, r0, #2
 8008f84:	4083      	lsls	r3, r0
 8008f86:	6850      	ldr	r0, [r2, #4]
 8008f88:	4303      	orrs	r3, r0
 8008f8a:	6053      	str	r3, [r2, #4]
 8008f8c:	60ce      	str	r6, [r1, #12]
 8008f8e:	608d      	str	r5, [r1, #8]
 8008f90:	60b1      	str	r1, [r6, #8]
 8008f92:	60e9      	str	r1, [r5, #12]
 8008f94:	e7a7      	b.n	8008ee6 <_free_r+0x5e>
 8008f96:	2d14      	cmp	r5, #20
 8008f98:	d802      	bhi.n	8008fa0 <_free_r+0x118>
 8008f9a:	0028      	movs	r0, r5
 8008f9c:	305b      	adds	r0, #91	; 0x5b
 8008f9e:	e7e9      	b.n	8008f74 <_free_r+0xec>
 8008fa0:	2d54      	cmp	r5, #84	; 0x54
 8008fa2:	d802      	bhi.n	8008faa <_free_r+0x122>
 8008fa4:	0b18      	lsrs	r0, r3, #12
 8008fa6:	306e      	adds	r0, #110	; 0x6e
 8008fa8:	e7e4      	b.n	8008f74 <_free_r+0xec>
 8008faa:	20aa      	movs	r0, #170	; 0xaa
 8008fac:	0040      	lsls	r0, r0, #1
 8008fae:	4285      	cmp	r5, r0
 8008fb0:	d802      	bhi.n	8008fb8 <_free_r+0x130>
 8008fb2:	0bd8      	lsrs	r0, r3, #15
 8008fb4:	3077      	adds	r0, #119	; 0x77
 8008fb6:	e7dd      	b.n	8008f74 <_free_r+0xec>
 8008fb8:	4e0b      	ldr	r6, [pc, #44]	; (8008fe8 <_free_r+0x160>)
 8008fba:	207e      	movs	r0, #126	; 0x7e
 8008fbc:	42b5      	cmp	r5, r6
 8008fbe:	d8d9      	bhi.n	8008f74 <_free_r+0xec>
 8008fc0:	0c98      	lsrs	r0, r3, #18
 8008fc2:	307c      	adds	r0, #124	; 0x7c
 8008fc4:	e7d6      	b.n	8008f74 <_free_r+0xec>
 8008fc6:	68ad      	ldr	r5, [r5, #8]
 8008fc8:	42ae      	cmp	r6, r5
 8008fca:	d003      	beq.n	8008fd4 <_free_r+0x14c>
 8008fcc:	686a      	ldr	r2, [r5, #4]
 8008fce:	43ba      	bics	r2, r7
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d8f8      	bhi.n	8008fc6 <_free_r+0x13e>
 8008fd4:	68ee      	ldr	r6, [r5, #12]
 8008fd6:	e7d9      	b.n	8008f8c <_free_r+0x104>
 8008fd8:	20000014 	.word	0x20000014
 8008fdc:	20000420 	.word	0x20000420
 8008fe0:	20000a60 	.word	0x20000a60
 8008fe4:	2000001c 	.word	0x2000001c
 8008fe8:	00000554 	.word	0x00000554

08008fec <rshift>:
 8008fec:	0002      	movs	r2, r0
 8008fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ff0:	6904      	ldr	r4, [r0, #16]
 8008ff2:	114b      	asrs	r3, r1, #5
 8008ff4:	b085      	sub	sp, #20
 8008ff6:	3214      	adds	r2, #20
 8008ff8:	9302      	str	r3, [sp, #8]
 8008ffa:	114d      	asrs	r5, r1, #5
 8008ffc:	0013      	movs	r3, r2
 8008ffe:	42ac      	cmp	r4, r5
 8009000:	dd32      	ble.n	8009068 <rshift+0x7c>
 8009002:	261f      	movs	r6, #31
 8009004:	000f      	movs	r7, r1
 8009006:	114b      	asrs	r3, r1, #5
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	00a5      	lsls	r5, r4, #2
 800900c:	18d3      	adds	r3, r2, r3
 800900e:	4037      	ands	r7, r6
 8009010:	1955      	adds	r5, r2, r5
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	9701      	str	r7, [sp, #4]
 8009016:	4231      	tst	r1, r6
 8009018:	d10d      	bne.n	8009036 <rshift+0x4a>
 800901a:	0016      	movs	r6, r2
 800901c:	0019      	movs	r1, r3
 800901e:	428d      	cmp	r5, r1
 8009020:	d836      	bhi.n	8009090 <rshift+0xa4>
 8009022:	9900      	ldr	r1, [sp, #0]
 8009024:	2300      	movs	r3, #0
 8009026:	3903      	subs	r1, #3
 8009028:	428d      	cmp	r5, r1
 800902a:	d302      	bcc.n	8009032 <rshift+0x46>
 800902c:	9b02      	ldr	r3, [sp, #8]
 800902e:	1ae4      	subs	r4, r4, r3
 8009030:	00a3      	lsls	r3, r4, #2
 8009032:	18d3      	adds	r3, r2, r3
 8009034:	e018      	b.n	8009068 <rshift+0x7c>
 8009036:	2120      	movs	r1, #32
 8009038:	9e01      	ldr	r6, [sp, #4]
 800903a:	9f01      	ldr	r7, [sp, #4]
 800903c:	1b89      	subs	r1, r1, r6
 800903e:	9e00      	ldr	r6, [sp, #0]
 8009040:	9103      	str	r1, [sp, #12]
 8009042:	ce02      	ldmia	r6!, {r1}
 8009044:	4694      	mov	ip, r2
 8009046:	40f9      	lsrs	r1, r7
 8009048:	42b5      	cmp	r5, r6
 800904a:	d816      	bhi.n	800907a <rshift+0x8e>
 800904c:	9e00      	ldr	r6, [sp, #0]
 800904e:	2300      	movs	r3, #0
 8009050:	3601      	adds	r6, #1
 8009052:	42b5      	cmp	r5, r6
 8009054:	d303      	bcc.n	800905e <rshift+0x72>
 8009056:	9b02      	ldr	r3, [sp, #8]
 8009058:	1ae3      	subs	r3, r4, r3
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	3b04      	subs	r3, #4
 800905e:	18d3      	adds	r3, r2, r3
 8009060:	6019      	str	r1, [r3, #0]
 8009062:	2900      	cmp	r1, #0
 8009064:	d000      	beq.n	8009068 <rshift+0x7c>
 8009066:	3304      	adds	r3, #4
 8009068:	1a99      	subs	r1, r3, r2
 800906a:	1089      	asrs	r1, r1, #2
 800906c:	6101      	str	r1, [r0, #16]
 800906e:	4293      	cmp	r3, r2
 8009070:	d101      	bne.n	8009076 <rshift+0x8a>
 8009072:	2300      	movs	r3, #0
 8009074:	6143      	str	r3, [r0, #20]
 8009076:	b005      	add	sp, #20
 8009078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800907a:	6837      	ldr	r7, [r6, #0]
 800907c:	9b03      	ldr	r3, [sp, #12]
 800907e:	409f      	lsls	r7, r3
 8009080:	430f      	orrs	r7, r1
 8009082:	4661      	mov	r1, ip
 8009084:	c180      	stmia	r1!, {r7}
 8009086:	468c      	mov	ip, r1
 8009088:	9b01      	ldr	r3, [sp, #4]
 800908a:	ce02      	ldmia	r6!, {r1}
 800908c:	40d9      	lsrs	r1, r3
 800908e:	e7db      	b.n	8009048 <rshift+0x5c>
 8009090:	c980      	ldmia	r1!, {r7}
 8009092:	c680      	stmia	r6!, {r7}
 8009094:	e7c3      	b.n	800901e <rshift+0x32>

08009096 <__hexdig_fun>:
 8009096:	0002      	movs	r2, r0
 8009098:	3a30      	subs	r2, #48	; 0x30
 800909a:	0003      	movs	r3, r0
 800909c:	2a09      	cmp	r2, #9
 800909e:	d802      	bhi.n	80090a6 <__hexdig_fun+0x10>
 80090a0:	3b20      	subs	r3, #32
 80090a2:	b2d8      	uxtb	r0, r3
 80090a4:	4770      	bx	lr
 80090a6:	0002      	movs	r2, r0
 80090a8:	3a61      	subs	r2, #97	; 0x61
 80090aa:	2a05      	cmp	r2, #5
 80090ac:	d801      	bhi.n	80090b2 <__hexdig_fun+0x1c>
 80090ae:	3b47      	subs	r3, #71	; 0x47
 80090b0:	e7f7      	b.n	80090a2 <__hexdig_fun+0xc>
 80090b2:	001a      	movs	r2, r3
 80090b4:	3a41      	subs	r2, #65	; 0x41
 80090b6:	2000      	movs	r0, #0
 80090b8:	2a05      	cmp	r2, #5
 80090ba:	d8f3      	bhi.n	80090a4 <__hexdig_fun+0xe>
 80090bc:	3b27      	subs	r3, #39	; 0x27
 80090be:	e7f0      	b.n	80090a2 <__hexdig_fun+0xc>

080090c0 <__gethex>:
 80090c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090c2:	b089      	sub	sp, #36	; 0x24
 80090c4:	9307      	str	r3, [sp, #28]
 80090c6:	2302      	movs	r3, #2
 80090c8:	9201      	str	r2, [sp, #4]
 80090ca:	680a      	ldr	r2, [r1, #0]
 80090cc:	425b      	negs	r3, r3
 80090ce:	9003      	str	r0, [sp, #12]
 80090d0:	9106      	str	r1, [sp, #24]
 80090d2:	1c96      	adds	r6, r2, #2
 80090d4:	1a9b      	subs	r3, r3, r2
 80090d6:	199a      	adds	r2, r3, r6
 80090d8:	9600      	str	r6, [sp, #0]
 80090da:	9205      	str	r2, [sp, #20]
 80090dc:	9a00      	ldr	r2, [sp, #0]
 80090de:	3601      	adds	r6, #1
 80090e0:	7810      	ldrb	r0, [r2, #0]
 80090e2:	2830      	cmp	r0, #48	; 0x30
 80090e4:	d0f7      	beq.n	80090d6 <__gethex+0x16>
 80090e6:	f7ff ffd6 	bl	8009096 <__hexdig_fun>
 80090ea:	2300      	movs	r3, #0
 80090ec:	001d      	movs	r5, r3
 80090ee:	9302      	str	r3, [sp, #8]
 80090f0:	4298      	cmp	r0, r3
 80090f2:	d11d      	bne.n	8009130 <__gethex+0x70>
 80090f4:	2201      	movs	r2, #1
 80090f6:	49a6      	ldr	r1, [pc, #664]	; (8009390 <__gethex+0x2d0>)
 80090f8:	9800      	ldr	r0, [sp, #0]
 80090fa:	f7ff fd6d 	bl	8008bd8 <strncmp>
 80090fe:	0007      	movs	r7, r0
 8009100:	42a8      	cmp	r0, r5
 8009102:	d169      	bne.n	80091d8 <__gethex+0x118>
 8009104:	9b00      	ldr	r3, [sp, #0]
 8009106:	0034      	movs	r4, r6
 8009108:	7858      	ldrb	r0, [r3, #1]
 800910a:	f7ff ffc4 	bl	8009096 <__hexdig_fun>
 800910e:	2301      	movs	r3, #1
 8009110:	9302      	str	r3, [sp, #8]
 8009112:	42a8      	cmp	r0, r5
 8009114:	d02f      	beq.n	8009176 <__gethex+0xb6>
 8009116:	9600      	str	r6, [sp, #0]
 8009118:	9b00      	ldr	r3, [sp, #0]
 800911a:	7818      	ldrb	r0, [r3, #0]
 800911c:	2830      	cmp	r0, #48	; 0x30
 800911e:	d009      	beq.n	8009134 <__gethex+0x74>
 8009120:	f7ff ffb9 	bl	8009096 <__hexdig_fun>
 8009124:	4242      	negs	r2, r0
 8009126:	4142      	adcs	r2, r0
 8009128:	2301      	movs	r3, #1
 800912a:	0035      	movs	r5, r6
 800912c:	9202      	str	r2, [sp, #8]
 800912e:	9305      	str	r3, [sp, #20]
 8009130:	9c00      	ldr	r4, [sp, #0]
 8009132:	e004      	b.n	800913e <__gethex+0x7e>
 8009134:	9b00      	ldr	r3, [sp, #0]
 8009136:	3301      	adds	r3, #1
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	e7ed      	b.n	8009118 <__gethex+0x58>
 800913c:	3401      	adds	r4, #1
 800913e:	7820      	ldrb	r0, [r4, #0]
 8009140:	f7ff ffa9 	bl	8009096 <__hexdig_fun>
 8009144:	1e07      	subs	r7, r0, #0
 8009146:	d1f9      	bne.n	800913c <__gethex+0x7c>
 8009148:	2201      	movs	r2, #1
 800914a:	0020      	movs	r0, r4
 800914c:	4990      	ldr	r1, [pc, #576]	; (8009390 <__gethex+0x2d0>)
 800914e:	f7ff fd43 	bl	8008bd8 <strncmp>
 8009152:	2800      	cmp	r0, #0
 8009154:	d10d      	bne.n	8009172 <__gethex+0xb2>
 8009156:	2d00      	cmp	r5, #0
 8009158:	d106      	bne.n	8009168 <__gethex+0xa8>
 800915a:	3401      	adds	r4, #1
 800915c:	0025      	movs	r5, r4
 800915e:	7820      	ldrb	r0, [r4, #0]
 8009160:	f7ff ff99 	bl	8009096 <__hexdig_fun>
 8009164:	2800      	cmp	r0, #0
 8009166:	d102      	bne.n	800916e <__gethex+0xae>
 8009168:	1b2d      	subs	r5, r5, r4
 800916a:	00af      	lsls	r7, r5, #2
 800916c:	e003      	b.n	8009176 <__gethex+0xb6>
 800916e:	3401      	adds	r4, #1
 8009170:	e7f5      	b.n	800915e <__gethex+0x9e>
 8009172:	2d00      	cmp	r5, #0
 8009174:	d1f8      	bne.n	8009168 <__gethex+0xa8>
 8009176:	2220      	movs	r2, #32
 8009178:	7823      	ldrb	r3, [r4, #0]
 800917a:	0026      	movs	r6, r4
 800917c:	4393      	bics	r3, r2
 800917e:	2b50      	cmp	r3, #80	; 0x50
 8009180:	d11d      	bne.n	80091be <__gethex+0xfe>
 8009182:	7863      	ldrb	r3, [r4, #1]
 8009184:	2b2b      	cmp	r3, #43	; 0x2b
 8009186:	d02c      	beq.n	80091e2 <__gethex+0x122>
 8009188:	2b2d      	cmp	r3, #45	; 0x2d
 800918a:	d02e      	beq.n	80091ea <__gethex+0x12a>
 800918c:	2300      	movs	r3, #0
 800918e:	1c66      	adds	r6, r4, #1
 8009190:	9304      	str	r3, [sp, #16]
 8009192:	7830      	ldrb	r0, [r6, #0]
 8009194:	f7ff ff7f 	bl	8009096 <__hexdig_fun>
 8009198:	1e43      	subs	r3, r0, #1
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b18      	cmp	r3, #24
 800919e:	d82b      	bhi.n	80091f8 <__gethex+0x138>
 80091a0:	3810      	subs	r0, #16
 80091a2:	0005      	movs	r5, r0
 80091a4:	7870      	ldrb	r0, [r6, #1]
 80091a6:	f7ff ff76 	bl	8009096 <__hexdig_fun>
 80091aa:	1e43      	subs	r3, r0, #1
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	3601      	adds	r6, #1
 80091b0:	2b18      	cmp	r3, #24
 80091b2:	d91c      	bls.n	80091ee <__gethex+0x12e>
 80091b4:	9b04      	ldr	r3, [sp, #16]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d000      	beq.n	80091bc <__gethex+0xfc>
 80091ba:	426d      	negs	r5, r5
 80091bc:	197f      	adds	r7, r7, r5
 80091be:	9b06      	ldr	r3, [sp, #24]
 80091c0:	601e      	str	r6, [r3, #0]
 80091c2:	9b02      	ldr	r3, [sp, #8]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d019      	beq.n	80091fc <__gethex+0x13c>
 80091c8:	2600      	movs	r6, #0
 80091ca:	9b05      	ldr	r3, [sp, #20]
 80091cc:	42b3      	cmp	r3, r6
 80091ce:	d100      	bne.n	80091d2 <__gethex+0x112>
 80091d0:	3606      	adds	r6, #6
 80091d2:	0030      	movs	r0, r6
 80091d4:	b009      	add	sp, #36	; 0x24
 80091d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091d8:	2301      	movs	r3, #1
 80091da:	2700      	movs	r7, #0
 80091dc:	9c00      	ldr	r4, [sp, #0]
 80091de:	9302      	str	r3, [sp, #8]
 80091e0:	e7c9      	b.n	8009176 <__gethex+0xb6>
 80091e2:	2300      	movs	r3, #0
 80091e4:	9304      	str	r3, [sp, #16]
 80091e6:	1ca6      	adds	r6, r4, #2
 80091e8:	e7d3      	b.n	8009192 <__gethex+0xd2>
 80091ea:	2301      	movs	r3, #1
 80091ec:	e7fa      	b.n	80091e4 <__gethex+0x124>
 80091ee:	230a      	movs	r3, #10
 80091f0:	435d      	muls	r5, r3
 80091f2:	182d      	adds	r5, r5, r0
 80091f4:	3d10      	subs	r5, #16
 80091f6:	e7d5      	b.n	80091a4 <__gethex+0xe4>
 80091f8:	0026      	movs	r6, r4
 80091fa:	e7e0      	b.n	80091be <__gethex+0xfe>
 80091fc:	9b00      	ldr	r3, [sp, #0]
 80091fe:	9902      	ldr	r1, [sp, #8]
 8009200:	1ae3      	subs	r3, r4, r3
 8009202:	3b01      	subs	r3, #1
 8009204:	2b07      	cmp	r3, #7
 8009206:	dc0a      	bgt.n	800921e <__gethex+0x15e>
 8009208:	9803      	ldr	r0, [sp, #12]
 800920a:	f000 fa5d 	bl	80096c8 <_Balloc>
 800920e:	1e05      	subs	r5, r0, #0
 8009210:	d108      	bne.n	8009224 <__gethex+0x164>
 8009212:	002a      	movs	r2, r5
 8009214:	21e4      	movs	r1, #228	; 0xe4
 8009216:	4b5f      	ldr	r3, [pc, #380]	; (8009394 <__gethex+0x2d4>)
 8009218:	485f      	ldr	r0, [pc, #380]	; (8009398 <__gethex+0x2d8>)
 800921a:	f003 fd19 	bl	800cc50 <__assert_func>
 800921e:	3101      	adds	r1, #1
 8009220:	105b      	asrs	r3, r3, #1
 8009222:	e7ef      	b.n	8009204 <__gethex+0x144>
 8009224:	0003      	movs	r3, r0
 8009226:	3314      	adds	r3, #20
 8009228:	9302      	str	r3, [sp, #8]
 800922a:	9305      	str	r3, [sp, #20]
 800922c:	2300      	movs	r3, #0
 800922e:	001e      	movs	r6, r3
 8009230:	9304      	str	r3, [sp, #16]
 8009232:	9b00      	ldr	r3, [sp, #0]
 8009234:	42a3      	cmp	r3, r4
 8009236:	d33f      	bcc.n	80092b8 <__gethex+0x1f8>
 8009238:	9c05      	ldr	r4, [sp, #20]
 800923a:	9b02      	ldr	r3, [sp, #8]
 800923c:	c440      	stmia	r4!, {r6}
 800923e:	1ae4      	subs	r4, r4, r3
 8009240:	10a4      	asrs	r4, r4, #2
 8009242:	0030      	movs	r0, r6
 8009244:	612c      	str	r4, [r5, #16]
 8009246:	f000 fb01 	bl	800984c <__hi0bits>
 800924a:	9b01      	ldr	r3, [sp, #4]
 800924c:	0164      	lsls	r4, r4, #5
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	1a26      	subs	r6, r4, r0
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	429e      	cmp	r6, r3
 8009256:	dd51      	ble.n	80092fc <__gethex+0x23c>
 8009258:	1af6      	subs	r6, r6, r3
 800925a:	0031      	movs	r1, r6
 800925c:	0028      	movs	r0, r5
 800925e:	f000 fe7b 	bl	8009f58 <__any_on>
 8009262:	1e04      	subs	r4, r0, #0
 8009264:	d016      	beq.n	8009294 <__gethex+0x1d4>
 8009266:	2401      	movs	r4, #1
 8009268:	231f      	movs	r3, #31
 800926a:	0020      	movs	r0, r4
 800926c:	1e72      	subs	r2, r6, #1
 800926e:	4013      	ands	r3, r2
 8009270:	4098      	lsls	r0, r3
 8009272:	0003      	movs	r3, r0
 8009274:	1151      	asrs	r1, r2, #5
 8009276:	9802      	ldr	r0, [sp, #8]
 8009278:	0089      	lsls	r1, r1, #2
 800927a:	5809      	ldr	r1, [r1, r0]
 800927c:	4219      	tst	r1, r3
 800927e:	d009      	beq.n	8009294 <__gethex+0x1d4>
 8009280:	42a2      	cmp	r2, r4
 8009282:	dd06      	ble.n	8009292 <__gethex+0x1d2>
 8009284:	0028      	movs	r0, r5
 8009286:	1eb1      	subs	r1, r6, #2
 8009288:	f000 fe66 	bl	8009f58 <__any_on>
 800928c:	3402      	adds	r4, #2
 800928e:	2800      	cmp	r0, #0
 8009290:	d100      	bne.n	8009294 <__gethex+0x1d4>
 8009292:	2402      	movs	r4, #2
 8009294:	0031      	movs	r1, r6
 8009296:	0028      	movs	r0, r5
 8009298:	f7ff fea8 	bl	8008fec <rshift>
 800929c:	19bf      	adds	r7, r7, r6
 800929e:	9b01      	ldr	r3, [sp, #4]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	42bb      	cmp	r3, r7
 80092a4:	da3a      	bge.n	800931c <__gethex+0x25c>
 80092a6:	0029      	movs	r1, r5
 80092a8:	9803      	ldr	r0, [sp, #12]
 80092aa:	f000 fa35 	bl	8009718 <_Bfree>
 80092ae:	2300      	movs	r3, #0
 80092b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092b2:	26a3      	movs	r6, #163	; 0xa3
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	e78c      	b.n	80091d2 <__gethex+0x112>
 80092b8:	3c01      	subs	r4, #1
 80092ba:	7823      	ldrb	r3, [r4, #0]
 80092bc:	2b2e      	cmp	r3, #46	; 0x2e
 80092be:	d012      	beq.n	80092e6 <__gethex+0x226>
 80092c0:	9b04      	ldr	r3, [sp, #16]
 80092c2:	2b20      	cmp	r3, #32
 80092c4:	d104      	bne.n	80092d0 <__gethex+0x210>
 80092c6:	9b05      	ldr	r3, [sp, #20]
 80092c8:	c340      	stmia	r3!, {r6}
 80092ca:	2600      	movs	r6, #0
 80092cc:	9305      	str	r3, [sp, #20]
 80092ce:	9604      	str	r6, [sp, #16]
 80092d0:	7820      	ldrb	r0, [r4, #0]
 80092d2:	f7ff fee0 	bl	8009096 <__hexdig_fun>
 80092d6:	230f      	movs	r3, #15
 80092d8:	4018      	ands	r0, r3
 80092da:	9b04      	ldr	r3, [sp, #16]
 80092dc:	4098      	lsls	r0, r3
 80092de:	3304      	adds	r3, #4
 80092e0:	4306      	orrs	r6, r0
 80092e2:	9304      	str	r3, [sp, #16]
 80092e4:	e7a5      	b.n	8009232 <__gethex+0x172>
 80092e6:	9b00      	ldr	r3, [sp, #0]
 80092e8:	42a3      	cmp	r3, r4
 80092ea:	d8e9      	bhi.n	80092c0 <__gethex+0x200>
 80092ec:	2201      	movs	r2, #1
 80092ee:	0020      	movs	r0, r4
 80092f0:	4927      	ldr	r1, [pc, #156]	; (8009390 <__gethex+0x2d0>)
 80092f2:	f7ff fc71 	bl	8008bd8 <strncmp>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	d1e2      	bne.n	80092c0 <__gethex+0x200>
 80092fa:	e79a      	b.n	8009232 <__gethex+0x172>
 80092fc:	9b00      	ldr	r3, [sp, #0]
 80092fe:	2400      	movs	r4, #0
 8009300:	429e      	cmp	r6, r3
 8009302:	dacc      	bge.n	800929e <__gethex+0x1de>
 8009304:	1b9e      	subs	r6, r3, r6
 8009306:	0029      	movs	r1, r5
 8009308:	0032      	movs	r2, r6
 800930a:	9803      	ldr	r0, [sp, #12]
 800930c:	f000 fbf0 	bl	8009af0 <__lshift>
 8009310:	0003      	movs	r3, r0
 8009312:	3314      	adds	r3, #20
 8009314:	0005      	movs	r5, r0
 8009316:	1bbf      	subs	r7, r7, r6
 8009318:	9302      	str	r3, [sp, #8]
 800931a:	e7c0      	b.n	800929e <__gethex+0x1de>
 800931c:	9b01      	ldr	r3, [sp, #4]
 800931e:	685e      	ldr	r6, [r3, #4]
 8009320:	42be      	cmp	r6, r7
 8009322:	dd70      	ble.n	8009406 <__gethex+0x346>
 8009324:	9b00      	ldr	r3, [sp, #0]
 8009326:	1bf6      	subs	r6, r6, r7
 8009328:	42b3      	cmp	r3, r6
 800932a:	dc37      	bgt.n	800939c <__gethex+0x2dc>
 800932c:	9b01      	ldr	r3, [sp, #4]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	2b02      	cmp	r3, #2
 8009332:	d024      	beq.n	800937e <__gethex+0x2be>
 8009334:	2b03      	cmp	r3, #3
 8009336:	d026      	beq.n	8009386 <__gethex+0x2c6>
 8009338:	2b01      	cmp	r3, #1
 800933a:	d117      	bne.n	800936c <__gethex+0x2ac>
 800933c:	9b00      	ldr	r3, [sp, #0]
 800933e:	42b3      	cmp	r3, r6
 8009340:	d114      	bne.n	800936c <__gethex+0x2ac>
 8009342:	2b01      	cmp	r3, #1
 8009344:	d10b      	bne.n	800935e <__gethex+0x29e>
 8009346:	9b01      	ldr	r3, [sp, #4]
 8009348:	9a07      	ldr	r2, [sp, #28]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	2662      	movs	r6, #98	; 0x62
 800934e:	6013      	str	r3, [r2, #0]
 8009350:	2301      	movs	r3, #1
 8009352:	9a02      	ldr	r2, [sp, #8]
 8009354:	612b      	str	r3, [r5, #16]
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800935a:	601d      	str	r5, [r3, #0]
 800935c:	e739      	b.n	80091d2 <__gethex+0x112>
 800935e:	9900      	ldr	r1, [sp, #0]
 8009360:	0028      	movs	r0, r5
 8009362:	3901      	subs	r1, #1
 8009364:	f000 fdf8 	bl	8009f58 <__any_on>
 8009368:	2800      	cmp	r0, #0
 800936a:	d1ec      	bne.n	8009346 <__gethex+0x286>
 800936c:	0029      	movs	r1, r5
 800936e:	9803      	ldr	r0, [sp, #12]
 8009370:	f000 f9d2 	bl	8009718 <_Bfree>
 8009374:	2300      	movs	r3, #0
 8009376:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009378:	2650      	movs	r6, #80	; 0x50
 800937a:	6013      	str	r3, [r2, #0]
 800937c:	e729      	b.n	80091d2 <__gethex+0x112>
 800937e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1f3      	bne.n	800936c <__gethex+0x2ac>
 8009384:	e7df      	b.n	8009346 <__gethex+0x286>
 8009386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1dc      	bne.n	8009346 <__gethex+0x286>
 800938c:	e7ee      	b.n	800936c <__gethex+0x2ac>
 800938e:	46c0      	nop			; (mov r8, r8)
 8009390:	0800f880 	.word	0x0800f880
 8009394:	0800f9e1 	.word	0x0800f9e1
 8009398:	0800f9f2 	.word	0x0800f9f2
 800939c:	1e77      	subs	r7, r6, #1
 800939e:	2c00      	cmp	r4, #0
 80093a0:	d12f      	bne.n	8009402 <__gethex+0x342>
 80093a2:	2f00      	cmp	r7, #0
 80093a4:	d004      	beq.n	80093b0 <__gethex+0x2f0>
 80093a6:	0039      	movs	r1, r7
 80093a8:	0028      	movs	r0, r5
 80093aa:	f000 fdd5 	bl	8009f58 <__any_on>
 80093ae:	0004      	movs	r4, r0
 80093b0:	231f      	movs	r3, #31
 80093b2:	117a      	asrs	r2, r7, #5
 80093b4:	401f      	ands	r7, r3
 80093b6:	3b1e      	subs	r3, #30
 80093b8:	40bb      	lsls	r3, r7
 80093ba:	9902      	ldr	r1, [sp, #8]
 80093bc:	0092      	lsls	r2, r2, #2
 80093be:	5852      	ldr	r2, [r2, r1]
 80093c0:	421a      	tst	r2, r3
 80093c2:	d001      	beq.n	80093c8 <__gethex+0x308>
 80093c4:	2302      	movs	r3, #2
 80093c6:	431c      	orrs	r4, r3
 80093c8:	9b00      	ldr	r3, [sp, #0]
 80093ca:	0031      	movs	r1, r6
 80093cc:	1b9b      	subs	r3, r3, r6
 80093ce:	2602      	movs	r6, #2
 80093d0:	0028      	movs	r0, r5
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	f7ff fe0a 	bl	8008fec <rshift>
 80093d8:	9b01      	ldr	r3, [sp, #4]
 80093da:	685f      	ldr	r7, [r3, #4]
 80093dc:	2c00      	cmp	r4, #0
 80093de:	d041      	beq.n	8009464 <__gethex+0x3a4>
 80093e0:	9b01      	ldr	r3, [sp, #4]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d010      	beq.n	800940a <__gethex+0x34a>
 80093e8:	2b03      	cmp	r3, #3
 80093ea:	d012      	beq.n	8009412 <__gethex+0x352>
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d106      	bne.n	80093fe <__gethex+0x33e>
 80093f0:	07a2      	lsls	r2, r4, #30
 80093f2:	d504      	bpl.n	80093fe <__gethex+0x33e>
 80093f4:	9a02      	ldr	r2, [sp, #8]
 80093f6:	6812      	ldr	r2, [r2, #0]
 80093f8:	4314      	orrs	r4, r2
 80093fa:	421c      	tst	r4, r3
 80093fc:	d10c      	bne.n	8009418 <__gethex+0x358>
 80093fe:	2310      	movs	r3, #16
 8009400:	e02f      	b.n	8009462 <__gethex+0x3a2>
 8009402:	2401      	movs	r4, #1
 8009404:	e7d4      	b.n	80093b0 <__gethex+0x2f0>
 8009406:	2601      	movs	r6, #1
 8009408:	e7e8      	b.n	80093dc <__gethex+0x31c>
 800940a:	2301      	movs	r3, #1
 800940c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800940e:	1a9b      	subs	r3, r3, r2
 8009410:	930f      	str	r3, [sp, #60]	; 0x3c
 8009412:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009414:	2b00      	cmp	r3, #0
 8009416:	d0f2      	beq.n	80093fe <__gethex+0x33e>
 8009418:	692b      	ldr	r3, [r5, #16]
 800941a:	2000      	movs	r0, #0
 800941c:	9302      	str	r3, [sp, #8]
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	9304      	str	r3, [sp, #16]
 8009422:	002b      	movs	r3, r5
 8009424:	9a04      	ldr	r2, [sp, #16]
 8009426:	3314      	adds	r3, #20
 8009428:	1899      	adds	r1, r3, r2
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	1c54      	adds	r4, r2, #1
 800942e:	d01e      	beq.n	800946e <__gethex+0x3ae>
 8009430:	3201      	adds	r2, #1
 8009432:	601a      	str	r2, [r3, #0]
 8009434:	002b      	movs	r3, r5
 8009436:	3314      	adds	r3, #20
 8009438:	2e02      	cmp	r6, #2
 800943a:	d141      	bne.n	80094c0 <__gethex+0x400>
 800943c:	9a01      	ldr	r2, [sp, #4]
 800943e:	9900      	ldr	r1, [sp, #0]
 8009440:	6812      	ldr	r2, [r2, #0]
 8009442:	3a01      	subs	r2, #1
 8009444:	428a      	cmp	r2, r1
 8009446:	d10b      	bne.n	8009460 <__gethex+0x3a0>
 8009448:	221f      	movs	r2, #31
 800944a:	9800      	ldr	r0, [sp, #0]
 800944c:	1149      	asrs	r1, r1, #5
 800944e:	4002      	ands	r2, r0
 8009450:	2001      	movs	r0, #1
 8009452:	0004      	movs	r4, r0
 8009454:	4094      	lsls	r4, r2
 8009456:	0089      	lsls	r1, r1, #2
 8009458:	58cb      	ldr	r3, [r1, r3]
 800945a:	4223      	tst	r3, r4
 800945c:	d000      	beq.n	8009460 <__gethex+0x3a0>
 800945e:	2601      	movs	r6, #1
 8009460:	2320      	movs	r3, #32
 8009462:	431e      	orrs	r6, r3
 8009464:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009466:	601d      	str	r5, [r3, #0]
 8009468:	9b07      	ldr	r3, [sp, #28]
 800946a:	601f      	str	r7, [r3, #0]
 800946c:	e6b1      	b.n	80091d2 <__gethex+0x112>
 800946e:	c301      	stmia	r3!, {r0}
 8009470:	4299      	cmp	r1, r3
 8009472:	d8da      	bhi.n	800942a <__gethex+0x36a>
 8009474:	68ab      	ldr	r3, [r5, #8]
 8009476:	9a02      	ldr	r2, [sp, #8]
 8009478:	429a      	cmp	r2, r3
 800947a:	db18      	blt.n	80094ae <__gethex+0x3ee>
 800947c:	6869      	ldr	r1, [r5, #4]
 800947e:	9803      	ldr	r0, [sp, #12]
 8009480:	3101      	adds	r1, #1
 8009482:	f000 f921 	bl	80096c8 <_Balloc>
 8009486:	1e04      	subs	r4, r0, #0
 8009488:	d104      	bne.n	8009494 <__gethex+0x3d4>
 800948a:	0022      	movs	r2, r4
 800948c:	2184      	movs	r1, #132	; 0x84
 800948e:	4b1c      	ldr	r3, [pc, #112]	; (8009500 <__gethex+0x440>)
 8009490:	481c      	ldr	r0, [pc, #112]	; (8009504 <__gethex+0x444>)
 8009492:	e6c2      	b.n	800921a <__gethex+0x15a>
 8009494:	0029      	movs	r1, r5
 8009496:	692a      	ldr	r2, [r5, #16]
 8009498:	310c      	adds	r1, #12
 800949a:	3202      	adds	r2, #2
 800949c:	0092      	lsls	r2, r2, #2
 800949e:	300c      	adds	r0, #12
 80094a0:	f7ff fc77 	bl	8008d92 <memcpy>
 80094a4:	0029      	movs	r1, r5
 80094a6:	9803      	ldr	r0, [sp, #12]
 80094a8:	f000 f936 	bl	8009718 <_Bfree>
 80094ac:	0025      	movs	r5, r4
 80094ae:	692b      	ldr	r3, [r5, #16]
 80094b0:	1c5a      	adds	r2, r3, #1
 80094b2:	612a      	str	r2, [r5, #16]
 80094b4:	2201      	movs	r2, #1
 80094b6:	3304      	adds	r3, #4
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	18eb      	adds	r3, r5, r3
 80094bc:	605a      	str	r2, [r3, #4]
 80094be:	e7b9      	b.n	8009434 <__gethex+0x374>
 80094c0:	692a      	ldr	r2, [r5, #16]
 80094c2:	9902      	ldr	r1, [sp, #8]
 80094c4:	428a      	cmp	r2, r1
 80094c6:	dd09      	ble.n	80094dc <__gethex+0x41c>
 80094c8:	2101      	movs	r1, #1
 80094ca:	0028      	movs	r0, r5
 80094cc:	f7ff fd8e 	bl	8008fec <rshift>
 80094d0:	9b01      	ldr	r3, [sp, #4]
 80094d2:	3701      	adds	r7, #1
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	42bb      	cmp	r3, r7
 80094d8:	dac1      	bge.n	800945e <__gethex+0x39e>
 80094da:	e6e4      	b.n	80092a6 <__gethex+0x1e6>
 80094dc:	221f      	movs	r2, #31
 80094de:	9c00      	ldr	r4, [sp, #0]
 80094e0:	9900      	ldr	r1, [sp, #0]
 80094e2:	2601      	movs	r6, #1
 80094e4:	4014      	ands	r4, r2
 80094e6:	4211      	tst	r1, r2
 80094e8:	d0ba      	beq.n	8009460 <__gethex+0x3a0>
 80094ea:	9a04      	ldr	r2, [sp, #16]
 80094ec:	189b      	adds	r3, r3, r2
 80094ee:	3b04      	subs	r3, #4
 80094f0:	6818      	ldr	r0, [r3, #0]
 80094f2:	f000 f9ab 	bl	800984c <__hi0bits>
 80094f6:	2320      	movs	r3, #32
 80094f8:	1b1b      	subs	r3, r3, r4
 80094fa:	4298      	cmp	r0, r3
 80094fc:	dbe4      	blt.n	80094c8 <__gethex+0x408>
 80094fe:	e7af      	b.n	8009460 <__gethex+0x3a0>
 8009500:	0800f9e1 	.word	0x0800f9e1
 8009504:	0800f9f2 	.word	0x0800f9f2

08009508 <L_shift>:
 8009508:	2308      	movs	r3, #8
 800950a:	b570      	push	{r4, r5, r6, lr}
 800950c:	2520      	movs	r5, #32
 800950e:	1a9a      	subs	r2, r3, r2
 8009510:	0092      	lsls	r2, r2, #2
 8009512:	1aad      	subs	r5, r5, r2
 8009514:	6843      	ldr	r3, [r0, #4]
 8009516:	6804      	ldr	r4, [r0, #0]
 8009518:	001e      	movs	r6, r3
 800951a:	40ae      	lsls	r6, r5
 800951c:	40d3      	lsrs	r3, r2
 800951e:	4334      	orrs	r4, r6
 8009520:	6004      	str	r4, [r0, #0]
 8009522:	6043      	str	r3, [r0, #4]
 8009524:	3004      	adds	r0, #4
 8009526:	4288      	cmp	r0, r1
 8009528:	d3f4      	bcc.n	8009514 <L_shift+0xc>
 800952a:	bd70      	pop	{r4, r5, r6, pc}

0800952c <__match>:
 800952c:	b530      	push	{r4, r5, lr}
 800952e:	6803      	ldr	r3, [r0, #0]
 8009530:	780c      	ldrb	r4, [r1, #0]
 8009532:	3301      	adds	r3, #1
 8009534:	2c00      	cmp	r4, #0
 8009536:	d102      	bne.n	800953e <__match+0x12>
 8009538:	6003      	str	r3, [r0, #0]
 800953a:	2001      	movs	r0, #1
 800953c:	bd30      	pop	{r4, r5, pc}
 800953e:	781a      	ldrb	r2, [r3, #0]
 8009540:	0015      	movs	r5, r2
 8009542:	3d41      	subs	r5, #65	; 0x41
 8009544:	2d19      	cmp	r5, #25
 8009546:	d800      	bhi.n	800954a <__match+0x1e>
 8009548:	3220      	adds	r2, #32
 800954a:	3101      	adds	r1, #1
 800954c:	42a2      	cmp	r2, r4
 800954e:	d0ef      	beq.n	8009530 <__match+0x4>
 8009550:	2000      	movs	r0, #0
 8009552:	e7f3      	b.n	800953c <__match+0x10>

08009554 <__hexnan>:
 8009554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009556:	680b      	ldr	r3, [r1, #0]
 8009558:	b08b      	sub	sp, #44	; 0x2c
 800955a:	9201      	str	r2, [sp, #4]
 800955c:	9901      	ldr	r1, [sp, #4]
 800955e:	115a      	asrs	r2, r3, #5
 8009560:	0092      	lsls	r2, r2, #2
 8009562:	188a      	adds	r2, r1, r2
 8009564:	9202      	str	r2, [sp, #8]
 8009566:	0019      	movs	r1, r3
 8009568:	221f      	movs	r2, #31
 800956a:	4011      	ands	r1, r2
 800956c:	9008      	str	r0, [sp, #32]
 800956e:	9106      	str	r1, [sp, #24]
 8009570:	4213      	tst	r3, r2
 8009572:	d002      	beq.n	800957a <__hexnan+0x26>
 8009574:	9b02      	ldr	r3, [sp, #8]
 8009576:	3304      	adds	r3, #4
 8009578:	9302      	str	r3, [sp, #8]
 800957a:	9b02      	ldr	r3, [sp, #8]
 800957c:	2500      	movs	r5, #0
 800957e:	1f1f      	subs	r7, r3, #4
 8009580:	003e      	movs	r6, r7
 8009582:	003c      	movs	r4, r7
 8009584:	9b08      	ldr	r3, [sp, #32]
 8009586:	603d      	str	r5, [r7, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	9507      	str	r5, [sp, #28]
 800958c:	9305      	str	r3, [sp, #20]
 800958e:	9503      	str	r5, [sp, #12]
 8009590:	9b05      	ldr	r3, [sp, #20]
 8009592:	3301      	adds	r3, #1
 8009594:	9309      	str	r3, [sp, #36]	; 0x24
 8009596:	9b05      	ldr	r3, [sp, #20]
 8009598:	785b      	ldrb	r3, [r3, #1]
 800959a:	9304      	str	r3, [sp, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d028      	beq.n	80095f2 <__hexnan+0x9e>
 80095a0:	9804      	ldr	r0, [sp, #16]
 80095a2:	f7ff fd78 	bl	8009096 <__hexdig_fun>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d154      	bne.n	8009654 <__hexnan+0x100>
 80095aa:	9b04      	ldr	r3, [sp, #16]
 80095ac:	2b20      	cmp	r3, #32
 80095ae:	d819      	bhi.n	80095e4 <__hexnan+0x90>
 80095b0:	9b03      	ldr	r3, [sp, #12]
 80095b2:	9a07      	ldr	r2, [sp, #28]
 80095b4:	4293      	cmp	r3, r2
 80095b6:	dd12      	ble.n	80095de <__hexnan+0x8a>
 80095b8:	42b4      	cmp	r4, r6
 80095ba:	d206      	bcs.n	80095ca <__hexnan+0x76>
 80095bc:	2d07      	cmp	r5, #7
 80095be:	dc04      	bgt.n	80095ca <__hexnan+0x76>
 80095c0:	002a      	movs	r2, r5
 80095c2:	0031      	movs	r1, r6
 80095c4:	0020      	movs	r0, r4
 80095c6:	f7ff ff9f 	bl	8009508 <L_shift>
 80095ca:	9b01      	ldr	r3, [sp, #4]
 80095cc:	2508      	movs	r5, #8
 80095ce:	429c      	cmp	r4, r3
 80095d0:	d905      	bls.n	80095de <__hexnan+0x8a>
 80095d2:	1f26      	subs	r6, r4, #4
 80095d4:	2500      	movs	r5, #0
 80095d6:	0034      	movs	r4, r6
 80095d8:	9b03      	ldr	r3, [sp, #12]
 80095da:	6035      	str	r5, [r6, #0]
 80095dc:	9307      	str	r3, [sp, #28]
 80095de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e0:	9305      	str	r3, [sp, #20]
 80095e2:	e7d5      	b.n	8009590 <__hexnan+0x3c>
 80095e4:	9b04      	ldr	r3, [sp, #16]
 80095e6:	2b29      	cmp	r3, #41	; 0x29
 80095e8:	d159      	bne.n	800969e <__hexnan+0x14a>
 80095ea:	9b05      	ldr	r3, [sp, #20]
 80095ec:	9a08      	ldr	r2, [sp, #32]
 80095ee:	3302      	adds	r3, #2
 80095f0:	6013      	str	r3, [r2, #0]
 80095f2:	9b03      	ldr	r3, [sp, #12]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d052      	beq.n	800969e <__hexnan+0x14a>
 80095f8:	42b4      	cmp	r4, r6
 80095fa:	d206      	bcs.n	800960a <__hexnan+0xb6>
 80095fc:	2d07      	cmp	r5, #7
 80095fe:	dc04      	bgt.n	800960a <__hexnan+0xb6>
 8009600:	002a      	movs	r2, r5
 8009602:	0031      	movs	r1, r6
 8009604:	0020      	movs	r0, r4
 8009606:	f7ff ff7f 	bl	8009508 <L_shift>
 800960a:	9b01      	ldr	r3, [sp, #4]
 800960c:	429c      	cmp	r4, r3
 800960e:	d935      	bls.n	800967c <__hexnan+0x128>
 8009610:	001a      	movs	r2, r3
 8009612:	0023      	movs	r3, r4
 8009614:	cb02      	ldmia	r3!, {r1}
 8009616:	c202      	stmia	r2!, {r1}
 8009618:	429f      	cmp	r7, r3
 800961a:	d2fb      	bcs.n	8009614 <__hexnan+0xc0>
 800961c:	9b02      	ldr	r3, [sp, #8]
 800961e:	1c62      	adds	r2, r4, #1
 8009620:	1ed9      	subs	r1, r3, #3
 8009622:	2304      	movs	r3, #4
 8009624:	4291      	cmp	r1, r2
 8009626:	d305      	bcc.n	8009634 <__hexnan+0xe0>
 8009628:	9b02      	ldr	r3, [sp, #8]
 800962a:	3b04      	subs	r3, #4
 800962c:	1b1b      	subs	r3, r3, r4
 800962e:	089b      	lsrs	r3, r3, #2
 8009630:	3301      	adds	r3, #1
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	9a01      	ldr	r2, [sp, #4]
 8009636:	18d3      	adds	r3, r2, r3
 8009638:	2200      	movs	r2, #0
 800963a:	c304      	stmia	r3!, {r2}
 800963c:	429f      	cmp	r7, r3
 800963e:	d2fc      	bcs.n	800963a <__hexnan+0xe6>
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d104      	bne.n	8009650 <__hexnan+0xfc>
 8009646:	9b01      	ldr	r3, [sp, #4]
 8009648:	429f      	cmp	r7, r3
 800964a:	d126      	bne.n	800969a <__hexnan+0x146>
 800964c:	2301      	movs	r3, #1
 800964e:	603b      	str	r3, [r7, #0]
 8009650:	2005      	movs	r0, #5
 8009652:	e025      	b.n	80096a0 <__hexnan+0x14c>
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	3501      	adds	r5, #1
 8009658:	3301      	adds	r3, #1
 800965a:	9303      	str	r3, [sp, #12]
 800965c:	2d08      	cmp	r5, #8
 800965e:	dd06      	ble.n	800966e <__hexnan+0x11a>
 8009660:	9b01      	ldr	r3, [sp, #4]
 8009662:	429c      	cmp	r4, r3
 8009664:	d9bb      	bls.n	80095de <__hexnan+0x8a>
 8009666:	2300      	movs	r3, #0
 8009668:	2501      	movs	r5, #1
 800966a:	3c04      	subs	r4, #4
 800966c:	6023      	str	r3, [r4, #0]
 800966e:	220f      	movs	r2, #15
 8009670:	6823      	ldr	r3, [r4, #0]
 8009672:	4010      	ands	r0, r2
 8009674:	011b      	lsls	r3, r3, #4
 8009676:	4303      	orrs	r3, r0
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	e7b0      	b.n	80095de <__hexnan+0x8a>
 800967c:	9b06      	ldr	r3, [sp, #24]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0de      	beq.n	8009640 <__hexnan+0xec>
 8009682:	2320      	movs	r3, #32
 8009684:	9a06      	ldr	r2, [sp, #24]
 8009686:	9902      	ldr	r1, [sp, #8]
 8009688:	1a9b      	subs	r3, r3, r2
 800968a:	2201      	movs	r2, #1
 800968c:	4252      	negs	r2, r2
 800968e:	40da      	lsrs	r2, r3
 8009690:	3904      	subs	r1, #4
 8009692:	680b      	ldr	r3, [r1, #0]
 8009694:	4013      	ands	r3, r2
 8009696:	600b      	str	r3, [r1, #0]
 8009698:	e7d2      	b.n	8009640 <__hexnan+0xec>
 800969a:	3f04      	subs	r7, #4
 800969c:	e7d0      	b.n	8009640 <__hexnan+0xec>
 800969e:	2004      	movs	r0, #4
 80096a0:	b00b      	add	sp, #44	; 0x2c
 80096a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096a4 <__ascii_mbtowc>:
 80096a4:	b082      	sub	sp, #8
 80096a6:	2900      	cmp	r1, #0
 80096a8:	d100      	bne.n	80096ac <__ascii_mbtowc+0x8>
 80096aa:	a901      	add	r1, sp, #4
 80096ac:	1e10      	subs	r0, r2, #0
 80096ae:	d006      	beq.n	80096be <__ascii_mbtowc+0x1a>
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d006      	beq.n	80096c2 <__ascii_mbtowc+0x1e>
 80096b4:	7813      	ldrb	r3, [r2, #0]
 80096b6:	600b      	str	r3, [r1, #0]
 80096b8:	7810      	ldrb	r0, [r2, #0]
 80096ba:	1e43      	subs	r3, r0, #1
 80096bc:	4198      	sbcs	r0, r3
 80096be:	b002      	add	sp, #8
 80096c0:	4770      	bx	lr
 80096c2:	2002      	movs	r0, #2
 80096c4:	4240      	negs	r0, r0
 80096c6:	e7fa      	b.n	80096be <__ascii_mbtowc+0x1a>

080096c8 <_Balloc>:
 80096c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80096ca:	b570      	push	{r4, r5, r6, lr}
 80096cc:	0006      	movs	r6, r0
 80096ce:	000c      	movs	r4, r1
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d012      	beq.n	80096fa <_Balloc+0x32>
 80096d4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80096d6:	00a2      	lsls	r2, r4, #2
 80096d8:	189b      	adds	r3, r3, r2
 80096da:	6818      	ldr	r0, [r3, #0]
 80096dc:	2800      	cmp	r0, #0
 80096de:	d115      	bne.n	800970c <_Balloc+0x44>
 80096e0:	2101      	movs	r1, #1
 80096e2:	000d      	movs	r5, r1
 80096e4:	40a5      	lsls	r5, r4
 80096e6:	1d6a      	adds	r2, r5, #5
 80096e8:	0030      	movs	r0, r6
 80096ea:	0092      	lsls	r2, r2, #2
 80096ec:	f003 face 	bl	800cc8c <_calloc_r>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d009      	beq.n	8009708 <_Balloc+0x40>
 80096f4:	6044      	str	r4, [r0, #4]
 80096f6:	6085      	str	r5, [r0, #8]
 80096f8:	e00a      	b.n	8009710 <_Balloc+0x48>
 80096fa:	2221      	movs	r2, #33	; 0x21
 80096fc:	2104      	movs	r1, #4
 80096fe:	f003 fac5 	bl	800cc8c <_calloc_r>
 8009702:	6470      	str	r0, [r6, #68]	; 0x44
 8009704:	2800      	cmp	r0, #0
 8009706:	d1e5      	bne.n	80096d4 <_Balloc+0xc>
 8009708:	2000      	movs	r0, #0
 800970a:	bd70      	pop	{r4, r5, r6, pc}
 800970c:	6802      	ldr	r2, [r0, #0]
 800970e:	601a      	str	r2, [r3, #0]
 8009710:	2300      	movs	r3, #0
 8009712:	6103      	str	r3, [r0, #16]
 8009714:	60c3      	str	r3, [r0, #12]
 8009716:	e7f8      	b.n	800970a <_Balloc+0x42>

08009718 <_Bfree>:
 8009718:	2900      	cmp	r1, #0
 800971a:	d006      	beq.n	800972a <_Bfree+0x12>
 800971c:	684a      	ldr	r2, [r1, #4]
 800971e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009720:	0092      	lsls	r2, r2, #2
 8009722:	189b      	adds	r3, r3, r2
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	600a      	str	r2, [r1, #0]
 8009728:	6019      	str	r1, [r3, #0]
 800972a:	4770      	bx	lr

0800972c <__multadd>:
 800972c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800972e:	000e      	movs	r6, r1
 8009730:	9001      	str	r0, [sp, #4]
 8009732:	000c      	movs	r4, r1
 8009734:	001d      	movs	r5, r3
 8009736:	2000      	movs	r0, #0
 8009738:	690f      	ldr	r7, [r1, #16]
 800973a:	3614      	adds	r6, #20
 800973c:	6833      	ldr	r3, [r6, #0]
 800973e:	3001      	adds	r0, #1
 8009740:	b299      	uxth	r1, r3
 8009742:	4351      	muls	r1, r2
 8009744:	0c1b      	lsrs	r3, r3, #16
 8009746:	4353      	muls	r3, r2
 8009748:	1949      	adds	r1, r1, r5
 800974a:	0c0d      	lsrs	r5, r1, #16
 800974c:	195b      	adds	r3, r3, r5
 800974e:	0c1d      	lsrs	r5, r3, #16
 8009750:	b289      	uxth	r1, r1
 8009752:	041b      	lsls	r3, r3, #16
 8009754:	185b      	adds	r3, r3, r1
 8009756:	c608      	stmia	r6!, {r3}
 8009758:	4287      	cmp	r7, r0
 800975a:	dcef      	bgt.n	800973c <__multadd+0x10>
 800975c:	2d00      	cmp	r5, #0
 800975e:	d022      	beq.n	80097a6 <__multadd+0x7a>
 8009760:	68a3      	ldr	r3, [r4, #8]
 8009762:	42bb      	cmp	r3, r7
 8009764:	dc19      	bgt.n	800979a <__multadd+0x6e>
 8009766:	6861      	ldr	r1, [r4, #4]
 8009768:	9801      	ldr	r0, [sp, #4]
 800976a:	3101      	adds	r1, #1
 800976c:	f7ff ffac 	bl	80096c8 <_Balloc>
 8009770:	1e06      	subs	r6, r0, #0
 8009772:	d105      	bne.n	8009780 <__multadd+0x54>
 8009774:	0032      	movs	r2, r6
 8009776:	21ba      	movs	r1, #186	; 0xba
 8009778:	4b0c      	ldr	r3, [pc, #48]	; (80097ac <__multadd+0x80>)
 800977a:	480d      	ldr	r0, [pc, #52]	; (80097b0 <__multadd+0x84>)
 800977c:	f003 fa68 	bl	800cc50 <__assert_func>
 8009780:	0021      	movs	r1, r4
 8009782:	6922      	ldr	r2, [r4, #16]
 8009784:	310c      	adds	r1, #12
 8009786:	3202      	adds	r2, #2
 8009788:	0092      	lsls	r2, r2, #2
 800978a:	300c      	adds	r0, #12
 800978c:	f7ff fb01 	bl	8008d92 <memcpy>
 8009790:	0021      	movs	r1, r4
 8009792:	9801      	ldr	r0, [sp, #4]
 8009794:	f7ff ffc0 	bl	8009718 <_Bfree>
 8009798:	0034      	movs	r4, r6
 800979a:	1d3b      	adds	r3, r7, #4
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	18e3      	adds	r3, r4, r3
 80097a0:	605d      	str	r5, [r3, #4]
 80097a2:	1c7b      	adds	r3, r7, #1
 80097a4:	6123      	str	r3, [r4, #16]
 80097a6:	0020      	movs	r0, r4
 80097a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097aa:	46c0      	nop			; (mov r8, r8)
 80097ac:	0800f9e1 	.word	0x0800f9e1
 80097b0:	0800fa52 	.word	0x0800fa52

080097b4 <__s2b>:
 80097b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097b6:	0006      	movs	r6, r0
 80097b8:	0018      	movs	r0, r3
 80097ba:	000c      	movs	r4, r1
 80097bc:	3008      	adds	r0, #8
 80097be:	2109      	movs	r1, #9
 80097c0:	9301      	str	r3, [sp, #4]
 80097c2:	0015      	movs	r5, r2
 80097c4:	f7f6 fd44 	bl	8000250 <__divsi3>
 80097c8:	2301      	movs	r3, #1
 80097ca:	2100      	movs	r1, #0
 80097cc:	4283      	cmp	r3, r0
 80097ce:	db0a      	blt.n	80097e6 <__s2b+0x32>
 80097d0:	0030      	movs	r0, r6
 80097d2:	f7ff ff79 	bl	80096c8 <_Balloc>
 80097d6:	1e01      	subs	r1, r0, #0
 80097d8:	d108      	bne.n	80097ec <__s2b+0x38>
 80097da:	000a      	movs	r2, r1
 80097dc:	4b19      	ldr	r3, [pc, #100]	; (8009844 <__s2b+0x90>)
 80097de:	481a      	ldr	r0, [pc, #104]	; (8009848 <__s2b+0x94>)
 80097e0:	31d3      	adds	r1, #211	; 0xd3
 80097e2:	f003 fa35 	bl	800cc50 <__assert_func>
 80097e6:	005b      	lsls	r3, r3, #1
 80097e8:	3101      	adds	r1, #1
 80097ea:	e7ef      	b.n	80097cc <__s2b+0x18>
 80097ec:	9b08      	ldr	r3, [sp, #32]
 80097ee:	6143      	str	r3, [r0, #20]
 80097f0:	2301      	movs	r3, #1
 80097f2:	6103      	str	r3, [r0, #16]
 80097f4:	2d09      	cmp	r5, #9
 80097f6:	dd18      	ble.n	800982a <__s2b+0x76>
 80097f8:	0023      	movs	r3, r4
 80097fa:	3309      	adds	r3, #9
 80097fc:	001f      	movs	r7, r3
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	1964      	adds	r4, r4, r5
 8009802:	783b      	ldrb	r3, [r7, #0]
 8009804:	220a      	movs	r2, #10
 8009806:	0030      	movs	r0, r6
 8009808:	3b30      	subs	r3, #48	; 0x30
 800980a:	f7ff ff8f 	bl	800972c <__multadd>
 800980e:	3701      	adds	r7, #1
 8009810:	0001      	movs	r1, r0
 8009812:	42a7      	cmp	r7, r4
 8009814:	d1f5      	bne.n	8009802 <__s2b+0x4e>
 8009816:	002c      	movs	r4, r5
 8009818:	9b00      	ldr	r3, [sp, #0]
 800981a:	3c08      	subs	r4, #8
 800981c:	191c      	adds	r4, r3, r4
 800981e:	002f      	movs	r7, r5
 8009820:	9b01      	ldr	r3, [sp, #4]
 8009822:	429f      	cmp	r7, r3
 8009824:	db04      	blt.n	8009830 <__s2b+0x7c>
 8009826:	0008      	movs	r0, r1
 8009828:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800982a:	2509      	movs	r5, #9
 800982c:	340a      	adds	r4, #10
 800982e:	e7f6      	b.n	800981e <__s2b+0x6a>
 8009830:	1b63      	subs	r3, r4, r5
 8009832:	5ddb      	ldrb	r3, [r3, r7]
 8009834:	220a      	movs	r2, #10
 8009836:	0030      	movs	r0, r6
 8009838:	3b30      	subs	r3, #48	; 0x30
 800983a:	f7ff ff77 	bl	800972c <__multadd>
 800983e:	3701      	adds	r7, #1
 8009840:	0001      	movs	r1, r0
 8009842:	e7ed      	b.n	8009820 <__s2b+0x6c>
 8009844:	0800f9e1 	.word	0x0800f9e1
 8009848:	0800fa52 	.word	0x0800fa52

0800984c <__hi0bits>:
 800984c:	0003      	movs	r3, r0
 800984e:	0c02      	lsrs	r2, r0, #16
 8009850:	2000      	movs	r0, #0
 8009852:	4282      	cmp	r2, r0
 8009854:	d101      	bne.n	800985a <__hi0bits+0xe>
 8009856:	041b      	lsls	r3, r3, #16
 8009858:	3010      	adds	r0, #16
 800985a:	0e1a      	lsrs	r2, r3, #24
 800985c:	d101      	bne.n	8009862 <__hi0bits+0x16>
 800985e:	3008      	adds	r0, #8
 8009860:	021b      	lsls	r3, r3, #8
 8009862:	0f1a      	lsrs	r2, r3, #28
 8009864:	d101      	bne.n	800986a <__hi0bits+0x1e>
 8009866:	3004      	adds	r0, #4
 8009868:	011b      	lsls	r3, r3, #4
 800986a:	0f9a      	lsrs	r2, r3, #30
 800986c:	d101      	bne.n	8009872 <__hi0bits+0x26>
 800986e:	3002      	adds	r0, #2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	2b00      	cmp	r3, #0
 8009874:	db03      	blt.n	800987e <__hi0bits+0x32>
 8009876:	3001      	adds	r0, #1
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	d400      	bmi.n	800987e <__hi0bits+0x32>
 800987c:	2020      	movs	r0, #32
 800987e:	4770      	bx	lr

08009880 <__lo0bits>:
 8009880:	6803      	ldr	r3, [r0, #0]
 8009882:	0001      	movs	r1, r0
 8009884:	2207      	movs	r2, #7
 8009886:	0018      	movs	r0, r3
 8009888:	4010      	ands	r0, r2
 800988a:	4213      	tst	r3, r2
 800988c:	d00d      	beq.n	80098aa <__lo0bits+0x2a>
 800988e:	3a06      	subs	r2, #6
 8009890:	2000      	movs	r0, #0
 8009892:	4213      	tst	r3, r2
 8009894:	d105      	bne.n	80098a2 <__lo0bits+0x22>
 8009896:	3002      	adds	r0, #2
 8009898:	4203      	tst	r3, r0
 800989a:	d003      	beq.n	80098a4 <__lo0bits+0x24>
 800989c:	40d3      	lsrs	r3, r2
 800989e:	0010      	movs	r0, r2
 80098a0:	600b      	str	r3, [r1, #0]
 80098a2:	4770      	bx	lr
 80098a4:	089b      	lsrs	r3, r3, #2
 80098a6:	600b      	str	r3, [r1, #0]
 80098a8:	e7fb      	b.n	80098a2 <__lo0bits+0x22>
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	2a00      	cmp	r2, #0
 80098ae:	d101      	bne.n	80098b4 <__lo0bits+0x34>
 80098b0:	2010      	movs	r0, #16
 80098b2:	0c1b      	lsrs	r3, r3, #16
 80098b4:	b2da      	uxtb	r2, r3
 80098b6:	2a00      	cmp	r2, #0
 80098b8:	d101      	bne.n	80098be <__lo0bits+0x3e>
 80098ba:	3008      	adds	r0, #8
 80098bc:	0a1b      	lsrs	r3, r3, #8
 80098be:	071a      	lsls	r2, r3, #28
 80098c0:	d101      	bne.n	80098c6 <__lo0bits+0x46>
 80098c2:	3004      	adds	r0, #4
 80098c4:	091b      	lsrs	r3, r3, #4
 80098c6:	079a      	lsls	r2, r3, #30
 80098c8:	d101      	bne.n	80098ce <__lo0bits+0x4e>
 80098ca:	3002      	adds	r0, #2
 80098cc:	089b      	lsrs	r3, r3, #2
 80098ce:	07da      	lsls	r2, r3, #31
 80098d0:	d4e9      	bmi.n	80098a6 <__lo0bits+0x26>
 80098d2:	3001      	adds	r0, #1
 80098d4:	085b      	lsrs	r3, r3, #1
 80098d6:	d1e6      	bne.n	80098a6 <__lo0bits+0x26>
 80098d8:	2020      	movs	r0, #32
 80098da:	e7e2      	b.n	80098a2 <__lo0bits+0x22>

080098dc <__i2b>:
 80098dc:	b510      	push	{r4, lr}
 80098de:	000c      	movs	r4, r1
 80098e0:	2101      	movs	r1, #1
 80098e2:	f7ff fef1 	bl	80096c8 <_Balloc>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	d107      	bne.n	80098fa <__i2b+0x1e>
 80098ea:	2146      	movs	r1, #70	; 0x46
 80098ec:	4c05      	ldr	r4, [pc, #20]	; (8009904 <__i2b+0x28>)
 80098ee:	0002      	movs	r2, r0
 80098f0:	4b05      	ldr	r3, [pc, #20]	; (8009908 <__i2b+0x2c>)
 80098f2:	0020      	movs	r0, r4
 80098f4:	31ff      	adds	r1, #255	; 0xff
 80098f6:	f003 f9ab 	bl	800cc50 <__assert_func>
 80098fa:	2301      	movs	r3, #1
 80098fc:	6144      	str	r4, [r0, #20]
 80098fe:	6103      	str	r3, [r0, #16]
 8009900:	bd10      	pop	{r4, pc}
 8009902:	46c0      	nop			; (mov r8, r8)
 8009904:	0800fa52 	.word	0x0800fa52
 8009908:	0800f9e1 	.word	0x0800f9e1

0800990c <__multiply>:
 800990c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800990e:	0015      	movs	r5, r2
 8009910:	690a      	ldr	r2, [r1, #16]
 8009912:	692b      	ldr	r3, [r5, #16]
 8009914:	000c      	movs	r4, r1
 8009916:	b08b      	sub	sp, #44	; 0x2c
 8009918:	429a      	cmp	r2, r3
 800991a:	da01      	bge.n	8009920 <__multiply+0x14>
 800991c:	002c      	movs	r4, r5
 800991e:	000d      	movs	r5, r1
 8009920:	6927      	ldr	r7, [r4, #16]
 8009922:	692e      	ldr	r6, [r5, #16]
 8009924:	6861      	ldr	r1, [r4, #4]
 8009926:	19bb      	adds	r3, r7, r6
 8009928:	9303      	str	r3, [sp, #12]
 800992a:	68a3      	ldr	r3, [r4, #8]
 800992c:	19ba      	adds	r2, r7, r6
 800992e:	4293      	cmp	r3, r2
 8009930:	da00      	bge.n	8009934 <__multiply+0x28>
 8009932:	3101      	adds	r1, #1
 8009934:	f7ff fec8 	bl	80096c8 <_Balloc>
 8009938:	9002      	str	r0, [sp, #8]
 800993a:	2800      	cmp	r0, #0
 800993c:	d106      	bne.n	800994c <__multiply+0x40>
 800993e:	21b1      	movs	r1, #177	; 0xb1
 8009940:	4b48      	ldr	r3, [pc, #288]	; (8009a64 <__multiply+0x158>)
 8009942:	4849      	ldr	r0, [pc, #292]	; (8009a68 <__multiply+0x15c>)
 8009944:	9a02      	ldr	r2, [sp, #8]
 8009946:	0049      	lsls	r1, r1, #1
 8009948:	f003 f982 	bl	800cc50 <__assert_func>
 800994c:	9b02      	ldr	r3, [sp, #8]
 800994e:	2200      	movs	r2, #0
 8009950:	3314      	adds	r3, #20
 8009952:	469c      	mov	ip, r3
 8009954:	19bb      	adds	r3, r7, r6
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4463      	add	r3, ip
 800995a:	9304      	str	r3, [sp, #16]
 800995c:	4663      	mov	r3, ip
 800995e:	9904      	ldr	r1, [sp, #16]
 8009960:	428b      	cmp	r3, r1
 8009962:	d32a      	bcc.n	80099ba <__multiply+0xae>
 8009964:	0023      	movs	r3, r4
 8009966:	00bf      	lsls	r7, r7, #2
 8009968:	3314      	adds	r3, #20
 800996a:	3514      	adds	r5, #20
 800996c:	9308      	str	r3, [sp, #32]
 800996e:	00b6      	lsls	r6, r6, #2
 8009970:	19db      	adds	r3, r3, r7
 8009972:	9305      	str	r3, [sp, #20]
 8009974:	19ab      	adds	r3, r5, r6
 8009976:	9309      	str	r3, [sp, #36]	; 0x24
 8009978:	2304      	movs	r3, #4
 800997a:	9306      	str	r3, [sp, #24]
 800997c:	0023      	movs	r3, r4
 800997e:	9a05      	ldr	r2, [sp, #20]
 8009980:	3315      	adds	r3, #21
 8009982:	9501      	str	r5, [sp, #4]
 8009984:	429a      	cmp	r2, r3
 8009986:	d305      	bcc.n	8009994 <__multiply+0x88>
 8009988:	1b13      	subs	r3, r2, r4
 800998a:	3b15      	subs	r3, #21
 800998c:	089b      	lsrs	r3, r3, #2
 800998e:	3301      	adds	r3, #1
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	9306      	str	r3, [sp, #24]
 8009994:	9b01      	ldr	r3, [sp, #4]
 8009996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009998:	4293      	cmp	r3, r2
 800999a:	d310      	bcc.n	80099be <__multiply+0xb2>
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	dd05      	ble.n	80099ae <__multiply+0xa2>
 80099a2:	9b04      	ldr	r3, [sp, #16]
 80099a4:	3b04      	subs	r3, #4
 80099a6:	9304      	str	r3, [sp, #16]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d056      	beq.n	8009a5c <__multiply+0x150>
 80099ae:	9b02      	ldr	r3, [sp, #8]
 80099b0:	9a03      	ldr	r2, [sp, #12]
 80099b2:	0018      	movs	r0, r3
 80099b4:	611a      	str	r2, [r3, #16]
 80099b6:	b00b      	add	sp, #44	; 0x2c
 80099b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ba:	c304      	stmia	r3!, {r2}
 80099bc:	e7cf      	b.n	800995e <__multiply+0x52>
 80099be:	9b01      	ldr	r3, [sp, #4]
 80099c0:	6818      	ldr	r0, [r3, #0]
 80099c2:	b280      	uxth	r0, r0
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d01e      	beq.n	8009a06 <__multiply+0xfa>
 80099c8:	4667      	mov	r7, ip
 80099ca:	2500      	movs	r5, #0
 80099cc:	9e08      	ldr	r6, [sp, #32]
 80099ce:	ce02      	ldmia	r6!, {r1}
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	9307      	str	r3, [sp, #28]
 80099d4:	b28b      	uxth	r3, r1
 80099d6:	4343      	muls	r3, r0
 80099d8:	001a      	movs	r2, r3
 80099da:	466b      	mov	r3, sp
 80099dc:	8b9b      	ldrh	r3, [r3, #28]
 80099de:	18d3      	adds	r3, r2, r3
 80099e0:	195b      	adds	r3, r3, r5
 80099e2:	0c0d      	lsrs	r5, r1, #16
 80099e4:	4345      	muls	r5, r0
 80099e6:	9a07      	ldr	r2, [sp, #28]
 80099e8:	0c11      	lsrs	r1, r2, #16
 80099ea:	1869      	adds	r1, r5, r1
 80099ec:	0c1a      	lsrs	r2, r3, #16
 80099ee:	188a      	adds	r2, r1, r2
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	0c15      	lsrs	r5, r2, #16
 80099f4:	0412      	lsls	r2, r2, #16
 80099f6:	431a      	orrs	r2, r3
 80099f8:	9b05      	ldr	r3, [sp, #20]
 80099fa:	c704      	stmia	r7!, {r2}
 80099fc:	42b3      	cmp	r3, r6
 80099fe:	d8e6      	bhi.n	80099ce <__multiply+0xc2>
 8009a00:	4663      	mov	r3, ip
 8009a02:	9a06      	ldr	r2, [sp, #24]
 8009a04:	509d      	str	r5, [r3, r2]
 8009a06:	9b01      	ldr	r3, [sp, #4]
 8009a08:	6818      	ldr	r0, [r3, #0]
 8009a0a:	0c00      	lsrs	r0, r0, #16
 8009a0c:	d020      	beq.n	8009a50 <__multiply+0x144>
 8009a0e:	4663      	mov	r3, ip
 8009a10:	0025      	movs	r5, r4
 8009a12:	4661      	mov	r1, ip
 8009a14:	2700      	movs	r7, #0
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	3514      	adds	r5, #20
 8009a1a:	682a      	ldr	r2, [r5, #0]
 8009a1c:	680e      	ldr	r6, [r1, #0]
 8009a1e:	b292      	uxth	r2, r2
 8009a20:	4342      	muls	r2, r0
 8009a22:	0c36      	lsrs	r6, r6, #16
 8009a24:	1992      	adds	r2, r2, r6
 8009a26:	19d2      	adds	r2, r2, r7
 8009a28:	0416      	lsls	r6, r2, #16
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	431e      	orrs	r6, r3
 8009a2e:	600e      	str	r6, [r1, #0]
 8009a30:	cd40      	ldmia	r5!, {r6}
 8009a32:	684b      	ldr	r3, [r1, #4]
 8009a34:	0c36      	lsrs	r6, r6, #16
 8009a36:	4346      	muls	r6, r0
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	0c12      	lsrs	r2, r2, #16
 8009a3c:	18f3      	adds	r3, r6, r3
 8009a3e:	189b      	adds	r3, r3, r2
 8009a40:	9a05      	ldr	r2, [sp, #20]
 8009a42:	0c1f      	lsrs	r7, r3, #16
 8009a44:	3104      	adds	r1, #4
 8009a46:	42aa      	cmp	r2, r5
 8009a48:	d8e7      	bhi.n	8009a1a <__multiply+0x10e>
 8009a4a:	4662      	mov	r2, ip
 8009a4c:	9906      	ldr	r1, [sp, #24]
 8009a4e:	5053      	str	r3, [r2, r1]
 8009a50:	9b01      	ldr	r3, [sp, #4]
 8009a52:	3304      	adds	r3, #4
 8009a54:	9301      	str	r3, [sp, #4]
 8009a56:	2304      	movs	r3, #4
 8009a58:	449c      	add	ip, r3
 8009a5a:	e79b      	b.n	8009994 <__multiply+0x88>
 8009a5c:	9b03      	ldr	r3, [sp, #12]
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	9303      	str	r3, [sp, #12]
 8009a62:	e79b      	b.n	800999c <__multiply+0x90>
 8009a64:	0800f9e1 	.word	0x0800f9e1
 8009a68:	0800fa52 	.word	0x0800fa52

08009a6c <__pow5mult>:
 8009a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a6e:	2303      	movs	r3, #3
 8009a70:	0015      	movs	r5, r2
 8009a72:	0007      	movs	r7, r0
 8009a74:	000e      	movs	r6, r1
 8009a76:	401a      	ands	r2, r3
 8009a78:	421d      	tst	r5, r3
 8009a7a:	d008      	beq.n	8009a8e <__pow5mult+0x22>
 8009a7c:	491a      	ldr	r1, [pc, #104]	; (8009ae8 <__pow5mult+0x7c>)
 8009a7e:	3a01      	subs	r2, #1
 8009a80:	0092      	lsls	r2, r2, #2
 8009a82:	5852      	ldr	r2, [r2, r1]
 8009a84:	2300      	movs	r3, #0
 8009a86:	0031      	movs	r1, r6
 8009a88:	f7ff fe50 	bl	800972c <__multadd>
 8009a8c:	0006      	movs	r6, r0
 8009a8e:	10ad      	asrs	r5, r5, #2
 8009a90:	d027      	beq.n	8009ae2 <__pow5mult+0x76>
 8009a92:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8009a94:	2c00      	cmp	r4, #0
 8009a96:	d107      	bne.n	8009aa8 <__pow5mult+0x3c>
 8009a98:	0038      	movs	r0, r7
 8009a9a:	4914      	ldr	r1, [pc, #80]	; (8009aec <__pow5mult+0x80>)
 8009a9c:	f7ff ff1e 	bl	80098dc <__i2b>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	0004      	movs	r4, r0
 8009aa4:	6438      	str	r0, [r7, #64]	; 0x40
 8009aa6:	6003      	str	r3, [r0, #0]
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	421d      	tst	r5, r3
 8009aac:	d00a      	beq.n	8009ac4 <__pow5mult+0x58>
 8009aae:	0031      	movs	r1, r6
 8009ab0:	0022      	movs	r2, r4
 8009ab2:	0038      	movs	r0, r7
 8009ab4:	f7ff ff2a 	bl	800990c <__multiply>
 8009ab8:	0031      	movs	r1, r6
 8009aba:	9001      	str	r0, [sp, #4]
 8009abc:	0038      	movs	r0, r7
 8009abe:	f7ff fe2b 	bl	8009718 <_Bfree>
 8009ac2:	9e01      	ldr	r6, [sp, #4]
 8009ac4:	106d      	asrs	r5, r5, #1
 8009ac6:	d00c      	beq.n	8009ae2 <__pow5mult+0x76>
 8009ac8:	6820      	ldr	r0, [r4, #0]
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d107      	bne.n	8009ade <__pow5mult+0x72>
 8009ace:	0022      	movs	r2, r4
 8009ad0:	0021      	movs	r1, r4
 8009ad2:	0038      	movs	r0, r7
 8009ad4:	f7ff ff1a 	bl	800990c <__multiply>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	6020      	str	r0, [r4, #0]
 8009adc:	6003      	str	r3, [r0, #0]
 8009ade:	0004      	movs	r4, r0
 8009ae0:	e7e2      	b.n	8009aa8 <__pow5mult+0x3c>
 8009ae2:	0030      	movs	r0, r6
 8009ae4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ae6:	46c0      	nop			; (mov r8, r8)
 8009ae8:	0800fba0 	.word	0x0800fba0
 8009aec:	00000271 	.word	0x00000271

08009af0 <__lshift>:
 8009af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009af2:	000c      	movs	r4, r1
 8009af4:	0017      	movs	r7, r2
 8009af6:	6923      	ldr	r3, [r4, #16]
 8009af8:	1155      	asrs	r5, r2, #5
 8009afa:	b087      	sub	sp, #28
 8009afc:	18eb      	adds	r3, r5, r3
 8009afe:	9302      	str	r3, [sp, #8]
 8009b00:	3301      	adds	r3, #1
 8009b02:	9301      	str	r3, [sp, #4]
 8009b04:	6849      	ldr	r1, [r1, #4]
 8009b06:	68a3      	ldr	r3, [r4, #8]
 8009b08:	9004      	str	r0, [sp, #16]
 8009b0a:	9a01      	ldr	r2, [sp, #4]
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	db10      	blt.n	8009b32 <__lshift+0x42>
 8009b10:	9804      	ldr	r0, [sp, #16]
 8009b12:	f7ff fdd9 	bl	80096c8 <_Balloc>
 8009b16:	2300      	movs	r3, #0
 8009b18:	0002      	movs	r2, r0
 8009b1a:	0006      	movs	r6, r0
 8009b1c:	0019      	movs	r1, r3
 8009b1e:	3214      	adds	r2, #20
 8009b20:	4298      	cmp	r0, r3
 8009b22:	d10c      	bne.n	8009b3e <__lshift+0x4e>
 8009b24:	31df      	adds	r1, #223	; 0xdf
 8009b26:	0032      	movs	r2, r6
 8009b28:	4b26      	ldr	r3, [pc, #152]	; (8009bc4 <__lshift+0xd4>)
 8009b2a:	4827      	ldr	r0, [pc, #156]	; (8009bc8 <__lshift+0xd8>)
 8009b2c:	31ff      	adds	r1, #255	; 0xff
 8009b2e:	f003 f88f 	bl	800cc50 <__assert_func>
 8009b32:	3101      	adds	r1, #1
 8009b34:	005b      	lsls	r3, r3, #1
 8009b36:	e7e8      	b.n	8009b0a <__lshift+0x1a>
 8009b38:	0098      	lsls	r0, r3, #2
 8009b3a:	5011      	str	r1, [r2, r0]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	42ab      	cmp	r3, r5
 8009b40:	dbfa      	blt.n	8009b38 <__lshift+0x48>
 8009b42:	43eb      	mvns	r3, r5
 8009b44:	17db      	asrs	r3, r3, #31
 8009b46:	401d      	ands	r5, r3
 8009b48:	211f      	movs	r1, #31
 8009b4a:	0023      	movs	r3, r4
 8009b4c:	0038      	movs	r0, r7
 8009b4e:	00ad      	lsls	r5, r5, #2
 8009b50:	1955      	adds	r5, r2, r5
 8009b52:	6922      	ldr	r2, [r4, #16]
 8009b54:	3314      	adds	r3, #20
 8009b56:	0092      	lsls	r2, r2, #2
 8009b58:	4008      	ands	r0, r1
 8009b5a:	4684      	mov	ip, r0
 8009b5c:	189a      	adds	r2, r3, r2
 8009b5e:	420f      	tst	r7, r1
 8009b60:	d02a      	beq.n	8009bb8 <__lshift+0xc8>
 8009b62:	3101      	adds	r1, #1
 8009b64:	1a09      	subs	r1, r1, r0
 8009b66:	9105      	str	r1, [sp, #20]
 8009b68:	2100      	movs	r1, #0
 8009b6a:	9503      	str	r5, [sp, #12]
 8009b6c:	4667      	mov	r7, ip
 8009b6e:	6818      	ldr	r0, [r3, #0]
 8009b70:	40b8      	lsls	r0, r7
 8009b72:	4308      	orrs	r0, r1
 8009b74:	9903      	ldr	r1, [sp, #12]
 8009b76:	c101      	stmia	r1!, {r0}
 8009b78:	9103      	str	r1, [sp, #12]
 8009b7a:	9805      	ldr	r0, [sp, #20]
 8009b7c:	cb02      	ldmia	r3!, {r1}
 8009b7e:	40c1      	lsrs	r1, r0
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d8f3      	bhi.n	8009b6c <__lshift+0x7c>
 8009b84:	0020      	movs	r0, r4
 8009b86:	3015      	adds	r0, #21
 8009b88:	2304      	movs	r3, #4
 8009b8a:	4282      	cmp	r2, r0
 8009b8c:	d304      	bcc.n	8009b98 <__lshift+0xa8>
 8009b8e:	1b13      	subs	r3, r2, r4
 8009b90:	3b15      	subs	r3, #21
 8009b92:	089b      	lsrs	r3, r3, #2
 8009b94:	3301      	adds	r3, #1
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	50e9      	str	r1, [r5, r3]
 8009b9a:	2900      	cmp	r1, #0
 8009b9c:	d002      	beq.n	8009ba4 <__lshift+0xb4>
 8009b9e:	9b02      	ldr	r3, [sp, #8]
 8009ba0:	3302      	adds	r3, #2
 8009ba2:	9301      	str	r3, [sp, #4]
 8009ba4:	9b01      	ldr	r3, [sp, #4]
 8009ba6:	9804      	ldr	r0, [sp, #16]
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	0021      	movs	r1, r4
 8009bac:	6133      	str	r3, [r6, #16]
 8009bae:	f7ff fdb3 	bl	8009718 <_Bfree>
 8009bb2:	0030      	movs	r0, r6
 8009bb4:	b007      	add	sp, #28
 8009bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bb8:	cb02      	ldmia	r3!, {r1}
 8009bba:	c502      	stmia	r5!, {r1}
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d8fb      	bhi.n	8009bb8 <__lshift+0xc8>
 8009bc0:	e7f0      	b.n	8009ba4 <__lshift+0xb4>
 8009bc2:	46c0      	nop			; (mov r8, r8)
 8009bc4:	0800f9e1 	.word	0x0800f9e1
 8009bc8:	0800fa52 	.word	0x0800fa52

08009bcc <__mcmp>:
 8009bcc:	b530      	push	{r4, r5, lr}
 8009bce:	690b      	ldr	r3, [r1, #16]
 8009bd0:	6904      	ldr	r4, [r0, #16]
 8009bd2:	0002      	movs	r2, r0
 8009bd4:	1ae0      	subs	r0, r4, r3
 8009bd6:	429c      	cmp	r4, r3
 8009bd8:	d10e      	bne.n	8009bf8 <__mcmp+0x2c>
 8009bda:	3214      	adds	r2, #20
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	3114      	adds	r1, #20
 8009be0:	0014      	movs	r4, r2
 8009be2:	18c9      	adds	r1, r1, r3
 8009be4:	18d2      	adds	r2, r2, r3
 8009be6:	3a04      	subs	r2, #4
 8009be8:	3904      	subs	r1, #4
 8009bea:	6815      	ldr	r5, [r2, #0]
 8009bec:	680b      	ldr	r3, [r1, #0]
 8009bee:	429d      	cmp	r5, r3
 8009bf0:	d003      	beq.n	8009bfa <__mcmp+0x2e>
 8009bf2:	2001      	movs	r0, #1
 8009bf4:	429d      	cmp	r5, r3
 8009bf6:	d303      	bcc.n	8009c00 <__mcmp+0x34>
 8009bf8:	bd30      	pop	{r4, r5, pc}
 8009bfa:	4294      	cmp	r4, r2
 8009bfc:	d3f3      	bcc.n	8009be6 <__mcmp+0x1a>
 8009bfe:	e7fb      	b.n	8009bf8 <__mcmp+0x2c>
 8009c00:	4240      	negs	r0, r0
 8009c02:	e7f9      	b.n	8009bf8 <__mcmp+0x2c>

08009c04 <__mdiff>:
 8009c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c06:	000e      	movs	r6, r1
 8009c08:	0007      	movs	r7, r0
 8009c0a:	0011      	movs	r1, r2
 8009c0c:	0030      	movs	r0, r6
 8009c0e:	b087      	sub	sp, #28
 8009c10:	0014      	movs	r4, r2
 8009c12:	f7ff ffdb 	bl	8009bcc <__mcmp>
 8009c16:	1e05      	subs	r5, r0, #0
 8009c18:	d110      	bne.n	8009c3c <__mdiff+0x38>
 8009c1a:	0001      	movs	r1, r0
 8009c1c:	0038      	movs	r0, r7
 8009c1e:	f7ff fd53 	bl	80096c8 <_Balloc>
 8009c22:	1e02      	subs	r2, r0, #0
 8009c24:	d104      	bne.n	8009c30 <__mdiff+0x2c>
 8009c26:	4b3f      	ldr	r3, [pc, #252]	; (8009d24 <__mdiff+0x120>)
 8009c28:	483f      	ldr	r0, [pc, #252]	; (8009d28 <__mdiff+0x124>)
 8009c2a:	4940      	ldr	r1, [pc, #256]	; (8009d2c <__mdiff+0x128>)
 8009c2c:	f003 f810 	bl	800cc50 <__assert_func>
 8009c30:	2301      	movs	r3, #1
 8009c32:	6145      	str	r5, [r0, #20]
 8009c34:	6103      	str	r3, [r0, #16]
 8009c36:	0010      	movs	r0, r2
 8009c38:	b007      	add	sp, #28
 8009c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	9301      	str	r3, [sp, #4]
 8009c40:	2800      	cmp	r0, #0
 8009c42:	db04      	blt.n	8009c4e <__mdiff+0x4a>
 8009c44:	0023      	movs	r3, r4
 8009c46:	0034      	movs	r4, r6
 8009c48:	001e      	movs	r6, r3
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	9301      	str	r3, [sp, #4]
 8009c4e:	0038      	movs	r0, r7
 8009c50:	6861      	ldr	r1, [r4, #4]
 8009c52:	f7ff fd39 	bl	80096c8 <_Balloc>
 8009c56:	1e02      	subs	r2, r0, #0
 8009c58:	d103      	bne.n	8009c62 <__mdiff+0x5e>
 8009c5a:	4b32      	ldr	r3, [pc, #200]	; (8009d24 <__mdiff+0x120>)
 8009c5c:	4832      	ldr	r0, [pc, #200]	; (8009d28 <__mdiff+0x124>)
 8009c5e:	4934      	ldr	r1, [pc, #208]	; (8009d30 <__mdiff+0x12c>)
 8009c60:	e7e4      	b.n	8009c2c <__mdiff+0x28>
 8009c62:	9b01      	ldr	r3, [sp, #4]
 8009c64:	2700      	movs	r7, #0
 8009c66:	60c3      	str	r3, [r0, #12]
 8009c68:	6920      	ldr	r0, [r4, #16]
 8009c6a:	3414      	adds	r4, #20
 8009c6c:	0083      	lsls	r3, r0, #2
 8009c6e:	18e3      	adds	r3, r4, r3
 8009c70:	0021      	movs	r1, r4
 8009c72:	9401      	str	r4, [sp, #4]
 8009c74:	0034      	movs	r4, r6
 8009c76:	9302      	str	r3, [sp, #8]
 8009c78:	6933      	ldr	r3, [r6, #16]
 8009c7a:	3414      	adds	r4, #20
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	18e3      	adds	r3, r4, r3
 8009c80:	9303      	str	r3, [sp, #12]
 8009c82:	0013      	movs	r3, r2
 8009c84:	3314      	adds	r3, #20
 8009c86:	469c      	mov	ip, r3
 8009c88:	9305      	str	r3, [sp, #20]
 8009c8a:	9104      	str	r1, [sp, #16]
 8009c8c:	9b04      	ldr	r3, [sp, #16]
 8009c8e:	cc02      	ldmia	r4!, {r1}
 8009c90:	cb20      	ldmia	r3!, {r5}
 8009c92:	9304      	str	r3, [sp, #16]
 8009c94:	b2ab      	uxth	r3, r5
 8009c96:	19df      	adds	r7, r3, r7
 8009c98:	b28b      	uxth	r3, r1
 8009c9a:	1afb      	subs	r3, r7, r3
 8009c9c:	0c09      	lsrs	r1, r1, #16
 8009c9e:	0c2d      	lsrs	r5, r5, #16
 8009ca0:	1a6d      	subs	r5, r5, r1
 8009ca2:	1419      	asrs	r1, r3, #16
 8009ca4:	1869      	adds	r1, r5, r1
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	140f      	asrs	r7, r1, #16
 8009caa:	0409      	lsls	r1, r1, #16
 8009cac:	4319      	orrs	r1, r3
 8009cae:	4663      	mov	r3, ip
 8009cb0:	c302      	stmia	r3!, {r1}
 8009cb2:	469c      	mov	ip, r3
 8009cb4:	9b03      	ldr	r3, [sp, #12]
 8009cb6:	42a3      	cmp	r3, r4
 8009cb8:	d8e8      	bhi.n	8009c8c <__mdiff+0x88>
 8009cba:	0031      	movs	r1, r6
 8009cbc:	9c03      	ldr	r4, [sp, #12]
 8009cbe:	3115      	adds	r1, #21
 8009cc0:	2304      	movs	r3, #4
 8009cc2:	428c      	cmp	r4, r1
 8009cc4:	d304      	bcc.n	8009cd0 <__mdiff+0xcc>
 8009cc6:	1ba3      	subs	r3, r4, r6
 8009cc8:	3b15      	subs	r3, #21
 8009cca:	089b      	lsrs	r3, r3, #2
 8009ccc:	3301      	adds	r3, #1
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	9901      	ldr	r1, [sp, #4]
 8009cd2:	18cd      	adds	r5, r1, r3
 8009cd4:	9905      	ldr	r1, [sp, #20]
 8009cd6:	002e      	movs	r6, r5
 8009cd8:	18cb      	adds	r3, r1, r3
 8009cda:	469c      	mov	ip, r3
 8009cdc:	9902      	ldr	r1, [sp, #8]
 8009cde:	428e      	cmp	r6, r1
 8009ce0:	d310      	bcc.n	8009d04 <__mdiff+0x100>
 8009ce2:	9e02      	ldr	r6, [sp, #8]
 8009ce4:	1ee9      	subs	r1, r5, #3
 8009ce6:	2400      	movs	r4, #0
 8009ce8:	428e      	cmp	r6, r1
 8009cea:	d304      	bcc.n	8009cf6 <__mdiff+0xf2>
 8009cec:	0031      	movs	r1, r6
 8009cee:	3103      	adds	r1, #3
 8009cf0:	1b49      	subs	r1, r1, r5
 8009cf2:	0889      	lsrs	r1, r1, #2
 8009cf4:	008c      	lsls	r4, r1, #2
 8009cf6:	191b      	adds	r3, r3, r4
 8009cf8:	3b04      	subs	r3, #4
 8009cfa:	6819      	ldr	r1, [r3, #0]
 8009cfc:	2900      	cmp	r1, #0
 8009cfe:	d00f      	beq.n	8009d20 <__mdiff+0x11c>
 8009d00:	6110      	str	r0, [r2, #16]
 8009d02:	e798      	b.n	8009c36 <__mdiff+0x32>
 8009d04:	ce02      	ldmia	r6!, {r1}
 8009d06:	b28c      	uxth	r4, r1
 8009d08:	19e4      	adds	r4, r4, r7
 8009d0a:	0c0f      	lsrs	r7, r1, #16
 8009d0c:	1421      	asrs	r1, r4, #16
 8009d0e:	1879      	adds	r1, r7, r1
 8009d10:	b2a4      	uxth	r4, r4
 8009d12:	140f      	asrs	r7, r1, #16
 8009d14:	0409      	lsls	r1, r1, #16
 8009d16:	4321      	orrs	r1, r4
 8009d18:	4664      	mov	r4, ip
 8009d1a:	c402      	stmia	r4!, {r1}
 8009d1c:	46a4      	mov	ip, r4
 8009d1e:	e7dd      	b.n	8009cdc <__mdiff+0xd8>
 8009d20:	3801      	subs	r0, #1
 8009d22:	e7e9      	b.n	8009cf8 <__mdiff+0xf4>
 8009d24:	0800f9e1 	.word	0x0800f9e1
 8009d28:	0800fa52 	.word	0x0800fa52
 8009d2c:	00000237 	.word	0x00000237
 8009d30:	00000245 	.word	0x00000245

08009d34 <__ulp>:
 8009d34:	2000      	movs	r0, #0
 8009d36:	4b0b      	ldr	r3, [pc, #44]	; (8009d64 <__ulp+0x30>)
 8009d38:	4019      	ands	r1, r3
 8009d3a:	4b0b      	ldr	r3, [pc, #44]	; (8009d68 <__ulp+0x34>)
 8009d3c:	18c9      	adds	r1, r1, r3
 8009d3e:	4281      	cmp	r1, r0
 8009d40:	dc06      	bgt.n	8009d50 <__ulp+0x1c>
 8009d42:	4249      	negs	r1, r1
 8009d44:	150b      	asrs	r3, r1, #20
 8009d46:	2b13      	cmp	r3, #19
 8009d48:	dc03      	bgt.n	8009d52 <__ulp+0x1e>
 8009d4a:	2180      	movs	r1, #128	; 0x80
 8009d4c:	0309      	lsls	r1, r1, #12
 8009d4e:	4119      	asrs	r1, r3
 8009d50:	4770      	bx	lr
 8009d52:	3b14      	subs	r3, #20
 8009d54:	2001      	movs	r0, #1
 8009d56:	2b1e      	cmp	r3, #30
 8009d58:	dc02      	bgt.n	8009d60 <__ulp+0x2c>
 8009d5a:	2080      	movs	r0, #128	; 0x80
 8009d5c:	0600      	lsls	r0, r0, #24
 8009d5e:	40d8      	lsrs	r0, r3
 8009d60:	2100      	movs	r1, #0
 8009d62:	e7f5      	b.n	8009d50 <__ulp+0x1c>
 8009d64:	7ff00000 	.word	0x7ff00000
 8009d68:	fcc00000 	.word	0xfcc00000

08009d6c <__b2d>:
 8009d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d6e:	0006      	movs	r6, r0
 8009d70:	6903      	ldr	r3, [r0, #16]
 8009d72:	3614      	adds	r6, #20
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	18f3      	adds	r3, r6, r3
 8009d78:	1f1d      	subs	r5, r3, #4
 8009d7a:	682c      	ldr	r4, [r5, #0]
 8009d7c:	000f      	movs	r7, r1
 8009d7e:	0020      	movs	r0, r4
 8009d80:	9301      	str	r3, [sp, #4]
 8009d82:	f7ff fd63 	bl	800984c <__hi0bits>
 8009d86:	2220      	movs	r2, #32
 8009d88:	1a12      	subs	r2, r2, r0
 8009d8a:	603a      	str	r2, [r7, #0]
 8009d8c:	0003      	movs	r3, r0
 8009d8e:	4a1c      	ldr	r2, [pc, #112]	; (8009e00 <__b2d+0x94>)
 8009d90:	280a      	cmp	r0, #10
 8009d92:	dc15      	bgt.n	8009dc0 <__b2d+0x54>
 8009d94:	210b      	movs	r1, #11
 8009d96:	0027      	movs	r7, r4
 8009d98:	1a09      	subs	r1, r1, r0
 8009d9a:	40cf      	lsrs	r7, r1
 8009d9c:	433a      	orrs	r2, r7
 8009d9e:	468c      	mov	ip, r1
 8009da0:	0011      	movs	r1, r2
 8009da2:	2200      	movs	r2, #0
 8009da4:	42ae      	cmp	r6, r5
 8009da6:	d202      	bcs.n	8009dae <__b2d+0x42>
 8009da8:	9a01      	ldr	r2, [sp, #4]
 8009daa:	3a08      	subs	r2, #8
 8009dac:	6812      	ldr	r2, [r2, #0]
 8009dae:	3315      	adds	r3, #21
 8009db0:	409c      	lsls	r4, r3
 8009db2:	4663      	mov	r3, ip
 8009db4:	0027      	movs	r7, r4
 8009db6:	40da      	lsrs	r2, r3
 8009db8:	4317      	orrs	r7, r2
 8009dba:	0038      	movs	r0, r7
 8009dbc:	b003      	add	sp, #12
 8009dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dc0:	2700      	movs	r7, #0
 8009dc2:	42ae      	cmp	r6, r5
 8009dc4:	d202      	bcs.n	8009dcc <__b2d+0x60>
 8009dc6:	9d01      	ldr	r5, [sp, #4]
 8009dc8:	3d08      	subs	r5, #8
 8009dca:	682f      	ldr	r7, [r5, #0]
 8009dcc:	210b      	movs	r1, #11
 8009dce:	4249      	negs	r1, r1
 8009dd0:	468c      	mov	ip, r1
 8009dd2:	449c      	add	ip, r3
 8009dd4:	2b0b      	cmp	r3, #11
 8009dd6:	d010      	beq.n	8009dfa <__b2d+0x8e>
 8009dd8:	4661      	mov	r1, ip
 8009dda:	2320      	movs	r3, #32
 8009ddc:	408c      	lsls	r4, r1
 8009dde:	1a5b      	subs	r3, r3, r1
 8009de0:	0039      	movs	r1, r7
 8009de2:	40d9      	lsrs	r1, r3
 8009de4:	430c      	orrs	r4, r1
 8009de6:	4322      	orrs	r2, r4
 8009de8:	0011      	movs	r1, r2
 8009dea:	2200      	movs	r2, #0
 8009dec:	42b5      	cmp	r5, r6
 8009dee:	d901      	bls.n	8009df4 <__b2d+0x88>
 8009df0:	3d04      	subs	r5, #4
 8009df2:	682a      	ldr	r2, [r5, #0]
 8009df4:	4664      	mov	r4, ip
 8009df6:	40a7      	lsls	r7, r4
 8009df8:	e7dd      	b.n	8009db6 <__b2d+0x4a>
 8009dfa:	4322      	orrs	r2, r4
 8009dfc:	0011      	movs	r1, r2
 8009dfe:	e7dc      	b.n	8009dba <__b2d+0x4e>
 8009e00:	3ff00000 	.word	0x3ff00000

08009e04 <__d2b>:
 8009e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e06:	2101      	movs	r1, #1
 8009e08:	0014      	movs	r4, r2
 8009e0a:	001d      	movs	r5, r3
 8009e0c:	9f08      	ldr	r7, [sp, #32]
 8009e0e:	f7ff fc5b 	bl	80096c8 <_Balloc>
 8009e12:	1e06      	subs	r6, r0, #0
 8009e14:	d105      	bne.n	8009e22 <__d2b+0x1e>
 8009e16:	0032      	movs	r2, r6
 8009e18:	4b24      	ldr	r3, [pc, #144]	; (8009eac <__d2b+0xa8>)
 8009e1a:	4825      	ldr	r0, [pc, #148]	; (8009eb0 <__d2b+0xac>)
 8009e1c:	4925      	ldr	r1, [pc, #148]	; (8009eb4 <__d2b+0xb0>)
 8009e1e:	f002 ff17 	bl	800cc50 <__assert_func>
 8009e22:	032b      	lsls	r3, r5, #12
 8009e24:	006d      	lsls	r5, r5, #1
 8009e26:	0b1b      	lsrs	r3, r3, #12
 8009e28:	0d6d      	lsrs	r5, r5, #21
 8009e2a:	d125      	bne.n	8009e78 <__d2b+0x74>
 8009e2c:	9301      	str	r3, [sp, #4]
 8009e2e:	2c00      	cmp	r4, #0
 8009e30:	d028      	beq.n	8009e84 <__d2b+0x80>
 8009e32:	4668      	mov	r0, sp
 8009e34:	9400      	str	r4, [sp, #0]
 8009e36:	f7ff fd23 	bl	8009880 <__lo0bits>
 8009e3a:	9b01      	ldr	r3, [sp, #4]
 8009e3c:	9900      	ldr	r1, [sp, #0]
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d01e      	beq.n	8009e80 <__d2b+0x7c>
 8009e42:	2220      	movs	r2, #32
 8009e44:	001c      	movs	r4, r3
 8009e46:	1a12      	subs	r2, r2, r0
 8009e48:	4094      	lsls	r4, r2
 8009e4a:	0022      	movs	r2, r4
 8009e4c:	40c3      	lsrs	r3, r0
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	6172      	str	r2, [r6, #20]
 8009e52:	9301      	str	r3, [sp, #4]
 8009e54:	9c01      	ldr	r4, [sp, #4]
 8009e56:	61b4      	str	r4, [r6, #24]
 8009e58:	1e63      	subs	r3, r4, #1
 8009e5a:	419c      	sbcs	r4, r3
 8009e5c:	3401      	adds	r4, #1
 8009e5e:	6134      	str	r4, [r6, #16]
 8009e60:	2d00      	cmp	r5, #0
 8009e62:	d017      	beq.n	8009e94 <__d2b+0x90>
 8009e64:	2435      	movs	r4, #53	; 0x35
 8009e66:	4b14      	ldr	r3, [pc, #80]	; (8009eb8 <__d2b+0xb4>)
 8009e68:	18ed      	adds	r5, r5, r3
 8009e6a:	182d      	adds	r5, r5, r0
 8009e6c:	603d      	str	r5, [r7, #0]
 8009e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e70:	1a24      	subs	r4, r4, r0
 8009e72:	601c      	str	r4, [r3, #0]
 8009e74:	0030      	movs	r0, r6
 8009e76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e78:	2280      	movs	r2, #128	; 0x80
 8009e7a:	0352      	lsls	r2, r2, #13
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	e7d5      	b.n	8009e2c <__d2b+0x28>
 8009e80:	6171      	str	r1, [r6, #20]
 8009e82:	e7e7      	b.n	8009e54 <__d2b+0x50>
 8009e84:	a801      	add	r0, sp, #4
 8009e86:	f7ff fcfb 	bl	8009880 <__lo0bits>
 8009e8a:	9b01      	ldr	r3, [sp, #4]
 8009e8c:	2401      	movs	r4, #1
 8009e8e:	6173      	str	r3, [r6, #20]
 8009e90:	3020      	adds	r0, #32
 8009e92:	e7e4      	b.n	8009e5e <__d2b+0x5a>
 8009e94:	4b09      	ldr	r3, [pc, #36]	; (8009ebc <__d2b+0xb8>)
 8009e96:	18c0      	adds	r0, r0, r3
 8009e98:	4b09      	ldr	r3, [pc, #36]	; (8009ec0 <__d2b+0xbc>)
 8009e9a:	6038      	str	r0, [r7, #0]
 8009e9c:	18e3      	adds	r3, r4, r3
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	18f3      	adds	r3, r6, r3
 8009ea2:	6958      	ldr	r0, [r3, #20]
 8009ea4:	f7ff fcd2 	bl	800984c <__hi0bits>
 8009ea8:	0164      	lsls	r4, r4, #5
 8009eaa:	e7e0      	b.n	8009e6e <__d2b+0x6a>
 8009eac:	0800f9e1 	.word	0x0800f9e1
 8009eb0:	0800fa52 	.word	0x0800fa52
 8009eb4:	0000030f 	.word	0x0000030f
 8009eb8:	fffffbcd 	.word	0xfffffbcd
 8009ebc:	fffffbce 	.word	0xfffffbce
 8009ec0:	3fffffff 	.word	0x3fffffff

08009ec4 <__ratio>:
 8009ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ec6:	b087      	sub	sp, #28
 8009ec8:	000f      	movs	r7, r1
 8009eca:	a904      	add	r1, sp, #16
 8009ecc:	0006      	movs	r6, r0
 8009ece:	f7ff ff4d 	bl	8009d6c <__b2d>
 8009ed2:	9000      	str	r0, [sp, #0]
 8009ed4:	9101      	str	r1, [sp, #4]
 8009ed6:	9c00      	ldr	r4, [sp, #0]
 8009ed8:	9d01      	ldr	r5, [sp, #4]
 8009eda:	0038      	movs	r0, r7
 8009edc:	a905      	add	r1, sp, #20
 8009ede:	f7ff ff45 	bl	8009d6c <__b2d>
 8009ee2:	9002      	str	r0, [sp, #8]
 8009ee4:	9103      	str	r1, [sp, #12]
 8009ee6:	9a02      	ldr	r2, [sp, #8]
 8009ee8:	9b03      	ldr	r3, [sp, #12]
 8009eea:	6930      	ldr	r0, [r6, #16]
 8009eec:	6939      	ldr	r1, [r7, #16]
 8009eee:	9e04      	ldr	r6, [sp, #16]
 8009ef0:	1a40      	subs	r0, r0, r1
 8009ef2:	9905      	ldr	r1, [sp, #20]
 8009ef4:	0140      	lsls	r0, r0, #5
 8009ef6:	1a71      	subs	r1, r6, r1
 8009ef8:	1841      	adds	r1, r0, r1
 8009efa:	0508      	lsls	r0, r1, #20
 8009efc:	2900      	cmp	r1, #0
 8009efe:	dd07      	ble.n	8009f10 <__ratio+0x4c>
 8009f00:	9901      	ldr	r1, [sp, #4]
 8009f02:	1845      	adds	r5, r0, r1
 8009f04:	0020      	movs	r0, r4
 8009f06:	0029      	movs	r1, r5
 8009f08:	f7f6 ffb6 	bl	8000e78 <__aeabi_ddiv>
 8009f0c:	b007      	add	sp, #28
 8009f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f10:	9903      	ldr	r1, [sp, #12]
 8009f12:	1a0b      	subs	r3, r1, r0
 8009f14:	e7f6      	b.n	8009f04 <__ratio+0x40>

08009f16 <__copybits>:
 8009f16:	b570      	push	{r4, r5, r6, lr}
 8009f18:	0014      	movs	r4, r2
 8009f1a:	0005      	movs	r5, r0
 8009f1c:	3901      	subs	r1, #1
 8009f1e:	6913      	ldr	r3, [r2, #16]
 8009f20:	1149      	asrs	r1, r1, #5
 8009f22:	3101      	adds	r1, #1
 8009f24:	0089      	lsls	r1, r1, #2
 8009f26:	3414      	adds	r4, #20
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	1841      	adds	r1, r0, r1
 8009f2c:	18e3      	adds	r3, r4, r3
 8009f2e:	42a3      	cmp	r3, r4
 8009f30:	d80d      	bhi.n	8009f4e <__copybits+0x38>
 8009f32:	0014      	movs	r4, r2
 8009f34:	3411      	adds	r4, #17
 8009f36:	2500      	movs	r5, #0
 8009f38:	429c      	cmp	r4, r3
 8009f3a:	d803      	bhi.n	8009f44 <__copybits+0x2e>
 8009f3c:	1a9b      	subs	r3, r3, r2
 8009f3e:	3b11      	subs	r3, #17
 8009f40:	089b      	lsrs	r3, r3, #2
 8009f42:	009d      	lsls	r5, r3, #2
 8009f44:	2300      	movs	r3, #0
 8009f46:	1940      	adds	r0, r0, r5
 8009f48:	4281      	cmp	r1, r0
 8009f4a:	d803      	bhi.n	8009f54 <__copybits+0x3e>
 8009f4c:	bd70      	pop	{r4, r5, r6, pc}
 8009f4e:	cc40      	ldmia	r4!, {r6}
 8009f50:	c540      	stmia	r5!, {r6}
 8009f52:	e7ec      	b.n	8009f2e <__copybits+0x18>
 8009f54:	c008      	stmia	r0!, {r3}
 8009f56:	e7f7      	b.n	8009f48 <__copybits+0x32>

08009f58 <__any_on>:
 8009f58:	0002      	movs	r2, r0
 8009f5a:	6900      	ldr	r0, [r0, #16]
 8009f5c:	b510      	push	{r4, lr}
 8009f5e:	3214      	adds	r2, #20
 8009f60:	114b      	asrs	r3, r1, #5
 8009f62:	4298      	cmp	r0, r3
 8009f64:	db13      	blt.n	8009f8e <__any_on+0x36>
 8009f66:	dd0c      	ble.n	8009f82 <__any_on+0x2a>
 8009f68:	241f      	movs	r4, #31
 8009f6a:	0008      	movs	r0, r1
 8009f6c:	4020      	ands	r0, r4
 8009f6e:	4221      	tst	r1, r4
 8009f70:	d007      	beq.n	8009f82 <__any_on+0x2a>
 8009f72:	0099      	lsls	r1, r3, #2
 8009f74:	588c      	ldr	r4, [r1, r2]
 8009f76:	0021      	movs	r1, r4
 8009f78:	40c1      	lsrs	r1, r0
 8009f7a:	4081      	lsls	r1, r0
 8009f7c:	2001      	movs	r0, #1
 8009f7e:	428c      	cmp	r4, r1
 8009f80:	d104      	bne.n	8009f8c <__any_on+0x34>
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	18d3      	adds	r3, r2, r3
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d803      	bhi.n	8009f92 <__any_on+0x3a>
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	bd10      	pop	{r4, pc}
 8009f8e:	0003      	movs	r3, r0
 8009f90:	e7f7      	b.n	8009f82 <__any_on+0x2a>
 8009f92:	3b04      	subs	r3, #4
 8009f94:	6819      	ldr	r1, [r3, #0]
 8009f96:	2900      	cmp	r1, #0
 8009f98:	d0f5      	beq.n	8009f86 <__any_on+0x2e>
 8009f9a:	2001      	movs	r0, #1
 8009f9c:	e7f6      	b.n	8009f8c <__any_on+0x34>

08009f9e <__ascii_wctomb>:
 8009f9e:	0003      	movs	r3, r0
 8009fa0:	1e08      	subs	r0, r1, #0
 8009fa2:	d005      	beq.n	8009fb0 <__ascii_wctomb+0x12>
 8009fa4:	2aff      	cmp	r2, #255	; 0xff
 8009fa6:	d904      	bls.n	8009fb2 <__ascii_wctomb+0x14>
 8009fa8:	228a      	movs	r2, #138	; 0x8a
 8009faa:	2001      	movs	r0, #1
 8009fac:	601a      	str	r2, [r3, #0]
 8009fae:	4240      	negs	r0, r0
 8009fb0:	4770      	bx	lr
 8009fb2:	2001      	movs	r0, #1
 8009fb4:	700a      	strb	r2, [r1, #0]
 8009fb6:	e7fb      	b.n	8009fb0 <__ascii_wctomb+0x12>

08009fb8 <_svfprintf_r>:
 8009fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fba:	b0d9      	sub	sp, #356	; 0x164
 8009fbc:	001c      	movs	r4, r3
 8009fbe:	910b      	str	r1, [sp, #44]	; 0x2c
 8009fc0:	9208      	str	r2, [sp, #32]
 8009fc2:	900a      	str	r0, [sp, #40]	; 0x28
 8009fc4:	f002 fdae 	bl	800cb24 <_localeconv_r>
 8009fc8:	6803      	ldr	r3, [r0, #0]
 8009fca:	0018      	movs	r0, r3
 8009fcc:	931c      	str	r3, [sp, #112]	; 0x70
 8009fce:	f7f6 f899 	bl	8000104 <strlen>
 8009fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fd4:	9016      	str	r0, [sp, #88]	; 0x58
 8009fd6:	899b      	ldrh	r3, [r3, #12]
 8009fd8:	061b      	lsls	r3, r3, #24
 8009fda:	d517      	bpl.n	800a00c <_svfprintf_r+0x54>
 8009fdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d113      	bne.n	800a00c <_svfprintf_r+0x54>
 8009fe4:	2140      	movs	r1, #64	; 0x40
 8009fe6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009fe8:	f7fd fbb0 	bl	800774c <_malloc_r>
 8009fec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fee:	6018      	str	r0, [r3, #0]
 8009ff0:	6118      	str	r0, [r3, #16]
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d107      	bne.n	800a006 <_svfprintf_r+0x4e>
 8009ff6:	230c      	movs	r3, #12
 8009ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ffa:	6013      	str	r3, [r2, #0]
 8009ffc:	3b0d      	subs	r3, #13
 8009ffe:	9317      	str	r3, [sp, #92]	; 0x5c
 800a000:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a002:	b059      	add	sp, #356	; 0x164
 800a004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a006:	2340      	movs	r3, #64	; 0x40
 800a008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a00a:	6153      	str	r3, [r2, #20]
 800a00c:	2300      	movs	r3, #0
 800a00e:	2200      	movs	r2, #0
 800a010:	932e      	str	r3, [sp, #184]	; 0xb8
 800a012:	932d      	str	r3, [sp, #180]	; 0xb4
 800a014:	930e      	str	r3, [sp, #56]	; 0x38
 800a016:	2300      	movs	r3, #0
 800a018:	9214      	str	r2, [sp, #80]	; 0x50
 800a01a:	9315      	str	r3, [sp, #84]	; 0x54
 800a01c:	2300      	movs	r3, #0
 800a01e:	af2f      	add	r7, sp, #188	; 0xbc
 800a020:	972c      	str	r7, [sp, #176]	; 0xb0
 800a022:	931f      	str	r3, [sp, #124]	; 0x7c
 800a024:	931e      	str	r3, [sp, #120]	; 0x78
 800a026:	9312      	str	r3, [sp, #72]	; 0x48
 800a028:	931b      	str	r3, [sp, #108]	; 0x6c
 800a02a:	931d      	str	r3, [sp, #116]	; 0x74
 800a02c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a02e:	9d08      	ldr	r5, [sp, #32]
 800a030:	782b      	ldrb	r3, [r5, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d002      	beq.n	800a03c <_svfprintf_r+0x84>
 800a036:	2b25      	cmp	r3, #37	; 0x25
 800a038:	d000      	beq.n	800a03c <_svfprintf_r+0x84>
 800a03a:	e091      	b.n	800a160 <_svfprintf_r+0x1a8>
 800a03c:	9b08      	ldr	r3, [sp, #32]
 800a03e:	1aee      	subs	r6, r5, r3
 800a040:	429d      	cmp	r5, r3
 800a042:	d016      	beq.n	800a072 <_svfprintf_r+0xba>
 800a044:	603b      	str	r3, [r7, #0]
 800a046:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a048:	607e      	str	r6, [r7, #4]
 800a04a:	199b      	adds	r3, r3, r6
 800a04c:	932e      	str	r3, [sp, #184]	; 0xb8
 800a04e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a050:	3708      	adds	r7, #8
 800a052:	3301      	adds	r3, #1
 800a054:	932d      	str	r3, [sp, #180]	; 0xb4
 800a056:	2b07      	cmp	r3, #7
 800a058:	dd08      	ble.n	800a06c <_svfprintf_r+0xb4>
 800a05a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a05c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a05e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a060:	f004 f8c0 	bl	800e1e4 <__ssprint_r>
 800a064:	2800      	cmp	r0, #0
 800a066:	d000      	beq.n	800a06a <_svfprintf_r+0xb2>
 800a068:	e1cf      	b.n	800a40a <_svfprintf_r+0x452>
 800a06a:	af2f      	add	r7, sp, #188	; 0xbc
 800a06c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a06e:	199b      	adds	r3, r3, r6
 800a070:	9317      	str	r3, [sp, #92]	; 0x5c
 800a072:	782b      	ldrb	r3, [r5, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d101      	bne.n	800a07c <_svfprintf_r+0xc4>
 800a078:	f001 f99e 	bl	800b3b8 <_svfprintf_r+0x1400>
 800a07c:	221b      	movs	r2, #27
 800a07e:	2300      	movs	r3, #0
 800a080:	a91e      	add	r1, sp, #120	; 0x78
 800a082:	1852      	adds	r2, r2, r1
 800a084:	7013      	strb	r3, [r2, #0]
 800a086:	2201      	movs	r2, #1
 800a088:	001e      	movs	r6, r3
 800a08a:	4252      	negs	r2, r2
 800a08c:	3501      	adds	r5, #1
 800a08e:	9209      	str	r2, [sp, #36]	; 0x24
 800a090:	9318      	str	r3, [sp, #96]	; 0x60
 800a092:	1c6b      	adds	r3, r5, #1
 800a094:	9313      	str	r3, [sp, #76]	; 0x4c
 800a096:	782b      	ldrb	r3, [r5, #0]
 800a098:	930f      	str	r3, [sp, #60]	; 0x3c
 800a09a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a09c:	3820      	subs	r0, #32
 800a09e:	285a      	cmp	r0, #90	; 0x5a
 800a0a0:	d901      	bls.n	800a0a6 <_svfprintf_r+0xee>
 800a0a2:	f000 fe20 	bl	800ace6 <_svfprintf_r+0xd2e>
 800a0a6:	f7f6 f83f 	bl	8000128 <__gnu_thumb1_case_uhi>
 800a0aa:	0078      	.short	0x0078
 800a0ac:	061e061e 	.word	0x061e061e
 800a0b0:	061e0082 	.word	0x061e0082
 800a0b4:	061e061e 	.word	0x061e061e
 800a0b8:	061e005d 	.word	0x061e005d
 800a0bc:	0084061e 	.word	0x0084061e
 800a0c0:	061e008c 	.word	0x061e008c
 800a0c4:	0091008a 	.word	0x0091008a
 800a0c8:	00b2061e 	.word	0x00b2061e
 800a0cc:	00b400b4 	.word	0x00b400b4
 800a0d0:	00b400b4 	.word	0x00b400b4
 800a0d4:	00b400b4 	.word	0x00b400b4
 800a0d8:	00b400b4 	.word	0x00b400b4
 800a0dc:	061e00b4 	.word	0x061e00b4
 800a0e0:	061e061e 	.word	0x061e061e
 800a0e4:	061e061e 	.word	0x061e061e
 800a0e8:	061e061e 	.word	0x061e061e
 800a0ec:	061e013b 	.word	0x061e013b
 800a0f0:	00f400e0 	.word	0x00f400e0
 800a0f4:	013b013b 	.word	0x013b013b
 800a0f8:	061e013b 	.word	0x061e013b
 800a0fc:	061e061e 	.word	0x061e061e
 800a100:	00c7061e 	.word	0x00c7061e
 800a104:	061e061e 	.word	0x061e061e
 800a108:	061e04c7 	.word	0x061e04c7
 800a10c:	061e061e 	.word	0x061e061e
 800a110:	061e050a 	.word	0x061e050a
 800a114:	061e052a 	.word	0x061e052a
 800a118:	055c061e 	.word	0x055c061e
 800a11c:	061e061e 	.word	0x061e061e
 800a120:	061e061e 	.word	0x061e061e
 800a124:	061e061e 	.word	0x061e061e
 800a128:	061e061e 	.word	0x061e061e
 800a12c:	061e013b 	.word	0x061e013b
 800a130:	00f600e0 	.word	0x00f600e0
 800a134:	013b013b 	.word	0x013b013b
 800a138:	00c9013b 	.word	0x00c9013b
 800a13c:	00dc00f6 	.word	0x00dc00f6
 800a140:	00d5061e 	.word	0x00d5061e
 800a144:	04a7061e 	.word	0x04a7061e
 800a148:	04fa04c9 	.word	0x04fa04c9
 800a14c:	061e00dc 	.word	0x061e00dc
 800a150:	0080050a 	.word	0x0080050a
 800a154:	061e052c 	.word	0x061e052c
 800a158:	057c061e 	.word	0x057c061e
 800a15c:	0080061e 	.word	0x0080061e
 800a160:	3501      	adds	r5, #1
 800a162:	e765      	b.n	800a030 <_svfprintf_r+0x78>
 800a164:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a166:	f002 fcdd 	bl	800cb24 <_localeconv_r>
 800a16a:	6843      	ldr	r3, [r0, #4]
 800a16c:	0018      	movs	r0, r3
 800a16e:	931d      	str	r3, [sp, #116]	; 0x74
 800a170:	f7f5 ffc8 	bl	8000104 <strlen>
 800a174:	901b      	str	r0, [sp, #108]	; 0x6c
 800a176:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a178:	f002 fcd4 	bl	800cb24 <_localeconv_r>
 800a17c:	6883      	ldr	r3, [r0, #8]
 800a17e:	9312      	str	r3, [sp, #72]	; 0x48
 800a180:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a182:	2b00      	cmp	r3, #0
 800a184:	d011      	beq.n	800a1aa <_svfprintf_r+0x1f2>
 800a186:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00e      	beq.n	800a1aa <_svfprintf_r+0x1f2>
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00b      	beq.n	800a1aa <_svfprintf_r+0x1f2>
 800a192:	2380      	movs	r3, #128	; 0x80
 800a194:	00db      	lsls	r3, r3, #3
 800a196:	431e      	orrs	r6, r3
 800a198:	e007      	b.n	800a1aa <_svfprintf_r+0x1f2>
 800a19a:	231b      	movs	r3, #27
 800a19c:	aa1e      	add	r2, sp, #120	; 0x78
 800a19e:	189b      	adds	r3, r3, r2
 800a1a0:	781a      	ldrb	r2, [r3, #0]
 800a1a2:	2a00      	cmp	r2, #0
 800a1a4:	d101      	bne.n	800a1aa <_svfprintf_r+0x1f2>
 800a1a6:	3220      	adds	r2, #32
 800a1a8:	701a      	strb	r2, [r3, #0]
 800a1aa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800a1ac:	e771      	b.n	800a092 <_svfprintf_r+0xda>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e7f1      	b.n	800a196 <_svfprintf_r+0x1de>
 800a1b2:	cc08      	ldmia	r4!, {r3}
 800a1b4:	9318      	str	r3, [sp, #96]	; 0x60
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	daf7      	bge.n	800a1aa <_svfprintf_r+0x1f2>
 800a1ba:	425b      	negs	r3, r3
 800a1bc:	9318      	str	r3, [sp, #96]	; 0x60
 800a1be:	2304      	movs	r3, #4
 800a1c0:	e7e9      	b.n	800a196 <_svfprintf_r+0x1de>
 800a1c2:	231b      	movs	r3, #27
 800a1c4:	aa1e      	add	r2, sp, #120	; 0x78
 800a1c6:	189b      	adds	r3, r3, r2
 800a1c8:	222b      	movs	r2, #43	; 0x2b
 800a1ca:	e7ed      	b.n	800a1a8 <_svfprintf_r+0x1f0>
 800a1cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a1ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a1d0:	7812      	ldrb	r2, [r2, #0]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	920f      	str	r2, [sp, #60]	; 0x3c
 800a1d6:	2a2a      	cmp	r2, #42	; 0x2a
 800a1d8:	d010      	beq.n	800a1fc <_svfprintf_r+0x244>
 800a1da:	2200      	movs	r2, #0
 800a1dc:	9209      	str	r2, [sp, #36]	; 0x24
 800a1de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1e2:	3a30      	subs	r2, #48	; 0x30
 800a1e4:	2a09      	cmp	r2, #9
 800a1e6:	d900      	bls.n	800a1ea <_svfprintf_r+0x232>
 800a1e8:	e757      	b.n	800a09a <_svfprintf_r+0xe2>
 800a1ea:	200a      	movs	r0, #10
 800a1ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1ee:	4341      	muls	r1, r0
 800a1f0:	188a      	adds	r2, r1, r2
 800a1f2:	9209      	str	r2, [sp, #36]	; 0x24
 800a1f4:	781a      	ldrb	r2, [r3, #0]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	920f      	str	r2, [sp, #60]	; 0x3c
 800a1fa:	e7f0      	b.n	800a1de <_svfprintf_r+0x226>
 800a1fc:	cc04      	ldmia	r4!, {r2}
 800a1fe:	9209      	str	r2, [sp, #36]	; 0x24
 800a200:	2a00      	cmp	r2, #0
 800a202:	da02      	bge.n	800a20a <_svfprintf_r+0x252>
 800a204:	2201      	movs	r2, #1
 800a206:	4252      	negs	r2, r2
 800a208:	9209      	str	r2, [sp, #36]	; 0x24
 800a20a:	9313      	str	r3, [sp, #76]	; 0x4c
 800a20c:	e7cd      	b.n	800a1aa <_svfprintf_r+0x1f2>
 800a20e:	2380      	movs	r3, #128	; 0x80
 800a210:	e7c1      	b.n	800a196 <_svfprintf_r+0x1de>
 800a212:	2200      	movs	r2, #0
 800a214:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a216:	9218      	str	r2, [sp, #96]	; 0x60
 800a218:	210a      	movs	r1, #10
 800a21a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a21c:	434a      	muls	r2, r1
 800a21e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a220:	3930      	subs	r1, #48	; 0x30
 800a222:	188a      	adds	r2, r1, r2
 800a224:	9218      	str	r2, [sp, #96]	; 0x60
 800a226:	001a      	movs	r2, r3
 800a228:	7812      	ldrb	r2, [r2, #0]
 800a22a:	3301      	adds	r3, #1
 800a22c:	920f      	str	r2, [sp, #60]	; 0x3c
 800a22e:	3a30      	subs	r2, #48	; 0x30
 800a230:	9313      	str	r3, [sp, #76]	; 0x4c
 800a232:	2a09      	cmp	r2, #9
 800a234:	d9f0      	bls.n	800a218 <_svfprintf_r+0x260>
 800a236:	e730      	b.n	800a09a <_svfprintf_r+0xe2>
 800a238:	2308      	movs	r3, #8
 800a23a:	e7ac      	b.n	800a196 <_svfprintf_r+0x1de>
 800a23c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	2b68      	cmp	r3, #104	; 0x68
 800a242:	d105      	bne.n	800a250 <_svfprintf_r+0x298>
 800a244:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a246:	3301      	adds	r3, #1
 800a248:	9313      	str	r3, [sp, #76]	; 0x4c
 800a24a:	2380      	movs	r3, #128	; 0x80
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	e7a2      	b.n	800a196 <_svfprintf_r+0x1de>
 800a250:	2340      	movs	r3, #64	; 0x40
 800a252:	e7a0      	b.n	800a196 <_svfprintf_r+0x1de>
 800a254:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	2b6c      	cmp	r3, #108	; 0x6c
 800a25a:	d104      	bne.n	800a266 <_svfprintf_r+0x2ae>
 800a25c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a25e:	3301      	adds	r3, #1
 800a260:	9313      	str	r3, [sp, #76]	; 0x4c
 800a262:	2320      	movs	r3, #32
 800a264:	e797      	b.n	800a196 <_svfprintf_r+0x1de>
 800a266:	2310      	movs	r3, #16
 800a268:	e795      	b.n	800a196 <_svfprintf_r+0x1de>
 800a26a:	0021      	movs	r1, r4
 800a26c:	c904      	ldmia	r1!, {r2}
 800a26e:	ab3f      	add	r3, sp, #252	; 0xfc
 800a270:	910d      	str	r1, [sp, #52]	; 0x34
 800a272:	211b      	movs	r1, #27
 800a274:	701a      	strb	r2, [r3, #0]
 800a276:	2200      	movs	r2, #0
 800a278:	a81e      	add	r0, sp, #120	; 0x78
 800a27a:	1809      	adds	r1, r1, r0
 800a27c:	700a      	strb	r2, [r1, #0]
 800a27e:	920c      	str	r2, [sp, #48]	; 0x30
 800a280:	3201      	adds	r2, #1
 800a282:	9209      	str	r2, [sp, #36]	; 0x24
 800a284:	2200      	movs	r2, #0
 800a286:	9308      	str	r3, [sp, #32]
 800a288:	0015      	movs	r5, r2
 800a28a:	9219      	str	r2, [sp, #100]	; 0x64
 800a28c:	9210      	str	r2, [sp, #64]	; 0x40
 800a28e:	9211      	str	r2, [sp, #68]	; 0x44
 800a290:	e1f1      	b.n	800a676 <_svfprintf_r+0x6be>
 800a292:	2310      	movs	r3, #16
 800a294:	431e      	orrs	r6, r3
 800a296:	06b3      	lsls	r3, r6, #26
 800a298:	d531      	bpl.n	800a2fe <_svfprintf_r+0x346>
 800a29a:	2307      	movs	r3, #7
 800a29c:	3407      	adds	r4, #7
 800a29e:	439c      	bics	r4, r3
 800a2a0:	0022      	movs	r2, r4
 800a2a2:	ca18      	ldmia	r2!, {r3, r4}
 800a2a4:	9306      	str	r3, [sp, #24]
 800a2a6:	9407      	str	r4, [sp, #28]
 800a2a8:	920d      	str	r2, [sp, #52]	; 0x34
 800a2aa:	9a07      	ldr	r2, [sp, #28]
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	2a00      	cmp	r2, #0
 800a2b0:	da0b      	bge.n	800a2ca <_svfprintf_r+0x312>
 800a2b2:	9c06      	ldr	r4, [sp, #24]
 800a2b4:	9d07      	ldr	r5, [sp, #28]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	4261      	negs	r1, r4
 800a2ba:	41aa      	sbcs	r2, r5
 800a2bc:	9106      	str	r1, [sp, #24]
 800a2be:	9207      	str	r2, [sp, #28]
 800a2c0:	221b      	movs	r2, #27
 800a2c2:	a91e      	add	r1, sp, #120	; 0x78
 800a2c4:	1852      	adds	r2, r2, r1
 800a2c6:	212d      	movs	r1, #45	; 0x2d
 800a2c8:	7011      	strb	r1, [r2, #0]
 800a2ca:	9907      	ldr	r1, [sp, #28]
 800a2cc:	9a06      	ldr	r2, [sp, #24]
 800a2ce:	430a      	orrs	r2, r1
 800a2d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2d2:	3101      	adds	r1, #1
 800a2d4:	d101      	bne.n	800a2da <_svfprintf_r+0x322>
 800a2d6:	f001 f87b 	bl	800b3d0 <_svfprintf_r+0x1418>
 800a2da:	2180      	movs	r1, #128	; 0x80
 800a2dc:	0034      	movs	r4, r6
 800a2de:	438c      	bics	r4, r1
 800a2e0:	2a00      	cmp	r2, #0
 800a2e2:	d001      	beq.n	800a2e8 <_svfprintf_r+0x330>
 800a2e4:	f001 f879 	bl	800b3da <_svfprintf_r+0x1422>
 800a2e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2ea:	2a00      	cmp	r2, #0
 800a2ec:	d101      	bne.n	800a2f2 <_svfprintf_r+0x33a>
 800a2ee:	f000 fcef 	bl	800acd0 <_svfprintf_r+0xd18>
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d001      	beq.n	800a2fa <_svfprintf_r+0x342>
 800a2f6:	f001 f874 	bl	800b3e2 <_svfprintf_r+0x142a>
 800a2fa:	f000 fc79 	bl	800abf0 <_svfprintf_r+0xc38>
 800a2fe:	0022      	movs	r2, r4
 800a300:	ca08      	ldmia	r2!, {r3}
 800a302:	920d      	str	r2, [sp, #52]	; 0x34
 800a304:	06f2      	lsls	r2, r6, #27
 800a306:	d503      	bpl.n	800a310 <_svfprintf_r+0x358>
 800a308:	9306      	str	r3, [sp, #24]
 800a30a:	17db      	asrs	r3, r3, #31
 800a30c:	9307      	str	r3, [sp, #28]
 800a30e:	e7cc      	b.n	800a2aa <_svfprintf_r+0x2f2>
 800a310:	0672      	lsls	r2, r6, #25
 800a312:	d501      	bpl.n	800a318 <_svfprintf_r+0x360>
 800a314:	b21b      	sxth	r3, r3
 800a316:	e7f7      	b.n	800a308 <_svfprintf_r+0x350>
 800a318:	05b2      	lsls	r2, r6, #22
 800a31a:	d5f5      	bpl.n	800a308 <_svfprintf_r+0x350>
 800a31c:	b25b      	sxtb	r3, r3
 800a31e:	e7f3      	b.n	800a308 <_svfprintf_r+0x350>
 800a320:	2307      	movs	r3, #7
 800a322:	3407      	adds	r4, #7
 800a324:	439c      	bics	r4, r3
 800a326:	0022      	movs	r2, r4
 800a328:	ca18      	ldmia	r2!, {r3, r4}
 800a32a:	920d      	str	r2, [sp, #52]	; 0x34
 800a32c:	2201      	movs	r2, #1
 800a32e:	9314      	str	r3, [sp, #80]	; 0x50
 800a330:	9415      	str	r4, [sp, #84]	; 0x54
 800a332:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a334:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a336:	005c      	lsls	r4, r3, #1
 800a338:	0864      	lsrs	r4, r4, #1
 800a33a:	0028      	movs	r0, r5
 800a33c:	0021      	movs	r1, r4
 800a33e:	4b3e      	ldr	r3, [pc, #248]	; (800a438 <_svfprintf_r+0x480>)
 800a340:	4252      	negs	r2, r2
 800a342:	f7f7 ffd7 	bl	80022f4 <__aeabi_dcmpun>
 800a346:	2800      	cmp	r0, #0
 800a348:	d126      	bne.n	800a398 <_svfprintf_r+0x3e0>
 800a34a:	2201      	movs	r2, #1
 800a34c:	0028      	movs	r0, r5
 800a34e:	0021      	movs	r1, r4
 800a350:	4b39      	ldr	r3, [pc, #228]	; (800a438 <_svfprintf_r+0x480>)
 800a352:	4252      	negs	r2, r2
 800a354:	f7f6 f888 	bl	8000468 <__aeabi_dcmple>
 800a358:	2800      	cmp	r0, #0
 800a35a:	d11d      	bne.n	800a398 <_svfprintf_r+0x3e0>
 800a35c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a35e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a360:	2200      	movs	r2, #0
 800a362:	2300      	movs	r3, #0
 800a364:	f7f6 f876 	bl	8000454 <__aeabi_dcmplt>
 800a368:	2800      	cmp	r0, #0
 800a36a:	d004      	beq.n	800a376 <_svfprintf_r+0x3be>
 800a36c:	231b      	movs	r3, #27
 800a36e:	aa1e      	add	r2, sp, #120	; 0x78
 800a370:	189b      	adds	r3, r3, r2
 800a372:	222d      	movs	r2, #45	; 0x2d
 800a374:	701a      	strb	r2, [r3, #0]
 800a376:	4b31      	ldr	r3, [pc, #196]	; (800a43c <_svfprintf_r+0x484>)
 800a378:	9308      	str	r3, [sp, #32]
 800a37a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a37c:	2b47      	cmp	r3, #71	; 0x47
 800a37e:	dd01      	ble.n	800a384 <_svfprintf_r+0x3cc>
 800a380:	4b2f      	ldr	r3, [pc, #188]	; (800a440 <_svfprintf_r+0x488>)
 800a382:	9308      	str	r3, [sp, #32]
 800a384:	2380      	movs	r3, #128	; 0x80
 800a386:	439e      	bics	r6, r3
 800a388:	2300      	movs	r3, #0
 800a38a:	930c      	str	r3, [sp, #48]	; 0x30
 800a38c:	3303      	adds	r3, #3
 800a38e:	9309      	str	r3, [sp, #36]	; 0x24
 800a390:	2300      	movs	r3, #0
 800a392:	9319      	str	r3, [sp, #100]	; 0x64
 800a394:	f000 fc78 	bl	800ac88 <_svfprintf_r+0xcd0>
 800a398:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a39a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a39c:	0010      	movs	r0, r2
 800a39e:	0019      	movs	r1, r3
 800a3a0:	f7f7 ffa8 	bl	80022f4 <__aeabi_dcmpun>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d00e      	beq.n	800a3c6 <_svfprintf_r+0x40e>
 800a3a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	da04      	bge.n	800a3b8 <_svfprintf_r+0x400>
 800a3ae:	231b      	movs	r3, #27
 800a3b0:	aa1e      	add	r2, sp, #120	; 0x78
 800a3b2:	189b      	adds	r3, r3, r2
 800a3b4:	222d      	movs	r2, #45	; 0x2d
 800a3b6:	701a      	strb	r2, [r3, #0]
 800a3b8:	4b22      	ldr	r3, [pc, #136]	; (800a444 <_svfprintf_r+0x48c>)
 800a3ba:	9308      	str	r3, [sp, #32]
 800a3bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3be:	2b47      	cmp	r3, #71	; 0x47
 800a3c0:	dde0      	ble.n	800a384 <_svfprintf_r+0x3cc>
 800a3c2:	4b21      	ldr	r3, [pc, #132]	; (800a448 <_svfprintf_r+0x490>)
 800a3c4:	e7dd      	b.n	800a382 <_svfprintf_r+0x3ca>
 800a3c6:	2320      	movs	r3, #32
 800a3c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3ca:	439a      	bics	r2, r3
 800a3cc:	9210      	str	r2, [sp, #64]	; 0x40
 800a3ce:	2a41      	cmp	r2, #65	; 0x41
 800a3d0:	d123      	bne.n	800a41a <_svfprintf_r+0x462>
 800a3d2:	2230      	movs	r2, #48	; 0x30
 800a3d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a3d6:	ab25      	add	r3, sp, #148	; 0x94
 800a3d8:	701a      	strb	r2, [r3, #0]
 800a3da:	3248      	adds	r2, #72	; 0x48
 800a3dc:	2961      	cmp	r1, #97	; 0x61
 800a3de:	d000      	beq.n	800a3e2 <_svfprintf_r+0x42a>
 800a3e0:	3a20      	subs	r2, #32
 800a3e2:	705a      	strb	r2, [r3, #1]
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	431e      	orrs	r6, r3
 800a3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ea:	2b63      	cmp	r3, #99	; 0x63
 800a3ec:	dd2e      	ble.n	800a44c <_svfprintf_r+0x494>
 800a3ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a3f0:	1c59      	adds	r1, r3, #1
 800a3f2:	f7fd f9ab 	bl	800774c <_malloc_r>
 800a3f6:	9008      	str	r0, [sp, #32]
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d000      	beq.n	800a3fe <_svfprintf_r+0x446>
 800a3fc:	e216      	b.n	800a82c <_svfprintf_r+0x874>
 800a3fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a400:	899a      	ldrh	r2, [r3, #12]
 800a402:	2340      	movs	r3, #64	; 0x40
 800a404:	4313      	orrs	r3, r2
 800a406:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a408:	8193      	strh	r3, [r2, #12]
 800a40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a40c:	899b      	ldrh	r3, [r3, #12]
 800a40e:	065b      	lsls	r3, r3, #25
 800a410:	d400      	bmi.n	800a414 <_svfprintf_r+0x45c>
 800a412:	e5f5      	b.n	800a000 <_svfprintf_r+0x48>
 800a414:	2301      	movs	r3, #1
 800a416:	425b      	negs	r3, r3
 800a418:	e5f1      	b.n	8009ffe <_svfprintf_r+0x46>
 800a41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a41c:	900c      	str	r0, [sp, #48]	; 0x30
 800a41e:	3301      	adds	r3, #1
 800a420:	d100      	bne.n	800a424 <_svfprintf_r+0x46c>
 800a422:	e206      	b.n	800a832 <_svfprintf_r+0x87a>
 800a424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a426:	2b47      	cmp	r3, #71	; 0x47
 800a428:	d114      	bne.n	800a454 <_svfprintf_r+0x49c>
 800a42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d111      	bne.n	800a454 <_svfprintf_r+0x49c>
 800a430:	3301      	adds	r3, #1
 800a432:	9309      	str	r3, [sp, #36]	; 0x24
 800a434:	e00e      	b.n	800a454 <_svfprintf_r+0x49c>
 800a436:	46c0      	nop			; (mov r8, r8)
 800a438:	7fefffff 	.word	0x7fefffff
 800a43c:	0800fbac 	.word	0x0800fbac
 800a440:	0800fbb0 	.word	0x0800fbb0
 800a444:	0800fbb4 	.word	0x0800fbb4
 800a448:	0800fbb8 	.word	0x0800fbb8
 800a44c:	2300      	movs	r3, #0
 800a44e:	930c      	str	r3, [sp, #48]	; 0x30
 800a450:	ab3f      	add	r3, sp, #252	; 0xfc
 800a452:	9308      	str	r3, [sp, #32]
 800a454:	2380      	movs	r3, #128	; 0x80
 800a456:	005b      	lsls	r3, r3, #1
 800a458:	4333      	orrs	r3, r6
 800a45a:	931a      	str	r3, [sp, #104]	; 0x68
 800a45c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a45e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a460:	2b00      	cmp	r3, #0
 800a462:	db00      	blt.n	800a466 <_svfprintf_r+0x4ae>
 800a464:	e1e7      	b.n	800a836 <_svfprintf_r+0x87e>
 800a466:	2280      	movs	r2, #128	; 0x80
 800a468:	0612      	lsls	r2, r2, #24
 800a46a:	4694      	mov	ip, r2
 800a46c:	4463      	add	r3, ip
 800a46e:	930e      	str	r3, [sp, #56]	; 0x38
 800a470:	232d      	movs	r3, #45	; 0x2d
 800a472:	9322      	str	r3, [sp, #136]	; 0x88
 800a474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a476:	2b41      	cmp	r3, #65	; 0x41
 800a478:	d000      	beq.n	800a47c <_svfprintf_r+0x4c4>
 800a47a:	e1f5      	b.n	800a868 <_svfprintf_r+0x8b0>
 800a47c:	0028      	movs	r0, r5
 800a47e:	aa26      	add	r2, sp, #152	; 0x98
 800a480:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a482:	f002 fb73 	bl	800cb6c <frexp>
 800a486:	23ff      	movs	r3, #255	; 0xff
 800a488:	2200      	movs	r2, #0
 800a48a:	059b      	lsls	r3, r3, #22
 800a48c:	f7f7 f8ee 	bl	800166c <__aeabi_dmul>
 800a490:	2200      	movs	r2, #0
 800a492:	2300      	movs	r3, #0
 800a494:	0004      	movs	r4, r0
 800a496:	000d      	movs	r5, r1
 800a498:	f7f5 ffd6 	bl	8000448 <__aeabi_dcmpeq>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	d001      	beq.n	800a4a4 <_svfprintf_r+0x4ec>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	9326      	str	r3, [sp, #152]	; 0x98
 800a4a4:	4bda      	ldr	r3, [pc, #872]	; (800a810 <_svfprintf_r+0x858>)
 800a4a6:	9319      	str	r3, [sp, #100]	; 0x64
 800a4a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4aa:	2b61      	cmp	r3, #97	; 0x61
 800a4ac:	d001      	beq.n	800a4b2 <_svfprintf_r+0x4fa>
 800a4ae:	4bd9      	ldr	r3, [pc, #868]	; (800a814 <_svfprintf_r+0x85c>)
 800a4b0:	9319      	str	r3, [sp, #100]	; 0x64
 800a4b2:	9b08      	ldr	r3, [sp, #32]
 800a4b4:	930e      	str	r3, [sp, #56]	; 0x38
 800a4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	9311      	str	r3, [sp, #68]	; 0x44
 800a4bc:	2200      	movs	r2, #0
 800a4be:	4bd6      	ldr	r3, [pc, #856]	; (800a818 <_svfprintf_r+0x860>)
 800a4c0:	0020      	movs	r0, r4
 800a4c2:	0029      	movs	r1, r5
 800a4c4:	f7f7 f8d2 	bl	800166c <__aeabi_dmul>
 800a4c8:	000d      	movs	r5, r1
 800a4ca:	0004      	movs	r4, r0
 800a4cc:	f7f7 ff30 	bl	8002330 <__aeabi_d2iz>
 800a4d0:	9021      	str	r0, [sp, #132]	; 0x84
 800a4d2:	f7f7 ff63 	bl	800239c <__aeabi_i2d>
 800a4d6:	0002      	movs	r2, r0
 800a4d8:	000b      	movs	r3, r1
 800a4da:	0020      	movs	r0, r4
 800a4dc:	0029      	movs	r1, r5
 800a4de:	f7f7 fb87 	bl	8001bf0 <__aeabi_dsub>
 800a4e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4e4:	000d      	movs	r5, r1
 800a4e6:	001a      	movs	r2, r3
 800a4e8:	3201      	adds	r2, #1
 800a4ea:	9921      	ldr	r1, [sp, #132]	; 0x84
 800a4ec:	920e      	str	r2, [sp, #56]	; 0x38
 800a4ee:	9223      	str	r2, [sp, #140]	; 0x8c
 800a4f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a4f2:	0004      	movs	r4, r0
 800a4f4:	5c52      	ldrb	r2, [r2, r1]
 800a4f6:	701a      	strb	r2, [r3, #0]
 800a4f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4fa:	9320      	str	r3, [sp, #128]	; 0x80
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	d00a      	beq.n	800a516 <_svfprintf_r+0x55e>
 800a500:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a502:	2200      	movs	r2, #0
 800a504:	3b01      	subs	r3, #1
 800a506:	9311      	str	r3, [sp, #68]	; 0x44
 800a508:	0020      	movs	r0, r4
 800a50a:	2300      	movs	r3, #0
 800a50c:	0029      	movs	r1, r5
 800a50e:	f7f5 ff9b 	bl	8000448 <__aeabi_dcmpeq>
 800a512:	2800      	cmp	r0, #0
 800a514:	d0d2      	beq.n	800a4bc <_svfprintf_r+0x504>
 800a516:	2200      	movs	r2, #0
 800a518:	0020      	movs	r0, r4
 800a51a:	0029      	movs	r1, r5
 800a51c:	4bbf      	ldr	r3, [pc, #764]	; (800a81c <_svfprintf_r+0x864>)
 800a51e:	f7f5 ffad 	bl	800047c <__aeabi_dcmpgt>
 800a522:	2800      	cmp	r0, #0
 800a524:	d10c      	bne.n	800a540 <_svfprintf_r+0x588>
 800a526:	2200      	movs	r2, #0
 800a528:	0020      	movs	r0, r4
 800a52a:	0029      	movs	r1, r5
 800a52c:	4bbb      	ldr	r3, [pc, #748]	; (800a81c <_svfprintf_r+0x864>)
 800a52e:	f7f5 ff8b 	bl	8000448 <__aeabi_dcmpeq>
 800a532:	2800      	cmp	r0, #0
 800a534:	d100      	bne.n	800a538 <_svfprintf_r+0x580>
 800a536:	e191      	b.n	800a85c <_svfprintf_r+0x8a4>
 800a538:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a53a:	07db      	lsls	r3, r3, #31
 800a53c:	d400      	bmi.n	800a540 <_svfprintf_r+0x588>
 800a53e:	e18d      	b.n	800a85c <_svfprintf_r+0x8a4>
 800a540:	2030      	movs	r0, #48	; 0x30
 800a542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a544:	932a      	str	r3, [sp, #168]	; 0xa8
 800a546:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a548:	7bdb      	ldrb	r3, [r3, #15]
 800a54a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a54c:	3a01      	subs	r2, #1
 800a54e:	922a      	str	r2, [sp, #168]	; 0xa8
 800a550:	7811      	ldrb	r1, [r2, #0]
 800a552:	4299      	cmp	r1, r3
 800a554:	d100      	bne.n	800a558 <_svfprintf_r+0x5a0>
 800a556:	e171      	b.n	800a83c <_svfprintf_r+0x884>
 800a558:	1c4b      	adds	r3, r1, #1
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	2939      	cmp	r1, #57	; 0x39
 800a55e:	d101      	bne.n	800a564 <_svfprintf_r+0x5ac>
 800a560:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a562:	7a9b      	ldrb	r3, [r3, #10]
 800a564:	7013      	strb	r3, [r2, #0]
 800a566:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a568:	9a08      	ldr	r2, [sp, #32]
 800a56a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a56c:	1a9b      	subs	r3, r3, r2
 800a56e:	930e      	str	r3, [sp, #56]	; 0x38
 800a570:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a572:	2b47      	cmp	r3, #71	; 0x47
 800a574:	d000      	beq.n	800a578 <_svfprintf_r+0x5c0>
 800a576:	e1c4      	b.n	800a902 <_svfprintf_r+0x94a>
 800a578:	1ceb      	adds	r3, r5, #3
 800a57a:	db03      	blt.n	800a584 <_svfprintf_r+0x5cc>
 800a57c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a57e:	42ab      	cmp	r3, r5
 800a580:	db00      	blt.n	800a584 <_svfprintf_r+0x5cc>
 800a582:	e1e6      	b.n	800a952 <_svfprintf_r+0x99a>
 800a584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a586:	3b02      	subs	r3, #2
 800a588:	930f      	str	r3, [sp, #60]	; 0x3c
 800a58a:	223c      	movs	r2, #60	; 0x3c
 800a58c:	466b      	mov	r3, sp
 800a58e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a590:	189b      	adds	r3, r3, r2
 800a592:	1e6c      	subs	r4, r5, #1
 800a594:	3a1c      	subs	r2, #28
 800a596:	2000      	movs	r0, #0
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	9426      	str	r4, [sp, #152]	; 0x98
 800a59c:	4391      	bics	r1, r2
 800a59e:	2941      	cmp	r1, #65	; 0x41
 800a5a0:	d102      	bne.n	800a5a8 <_svfprintf_r+0x5f0>
 800a5a2:	330f      	adds	r3, #15
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	a928      	add	r1, sp, #160	; 0xa0
 800a5aa:	700b      	strb	r3, [r1, #0]
 800a5ac:	232b      	movs	r3, #43	; 0x2b
 800a5ae:	2c00      	cmp	r4, #0
 800a5b0:	da02      	bge.n	800a5b8 <_svfprintf_r+0x600>
 800a5b2:	2401      	movs	r4, #1
 800a5b4:	3302      	adds	r3, #2
 800a5b6:	1b64      	subs	r4, r4, r5
 800a5b8:	704b      	strb	r3, [r1, #1]
 800a5ba:	2c09      	cmp	r4, #9
 800a5bc:	dc00      	bgt.n	800a5c0 <_svfprintf_r+0x608>
 800a5be:	e1ba      	b.n	800a936 <_svfprintf_r+0x97e>
 800a5c0:	2337      	movs	r3, #55	; 0x37
 800a5c2:	250a      	movs	r5, #10
 800a5c4:	aa1e      	add	r2, sp, #120	; 0x78
 800a5c6:	189b      	adds	r3, r3, r2
 800a5c8:	9310      	str	r3, [sp, #64]	; 0x40
 800a5ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5cc:	0020      	movs	r0, r4
 800a5ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a5d0:	0029      	movs	r1, r5
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	9310      	str	r3, [sp, #64]	; 0x40
 800a5d6:	f7f5 ff21 	bl	800041c <__aeabi_idivmod>
 800a5da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5dc:	3130      	adds	r1, #48	; 0x30
 800a5de:	7019      	strb	r1, [r3, #0]
 800a5e0:	0020      	movs	r0, r4
 800a5e2:	0029      	movs	r1, r5
 800a5e4:	9411      	str	r4, [sp, #68]	; 0x44
 800a5e6:	f7f5 fe33 	bl	8000250 <__divsi3>
 800a5ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5ec:	0004      	movs	r4, r0
 800a5ee:	2b63      	cmp	r3, #99	; 0x63
 800a5f0:	dceb      	bgt.n	800a5ca <_svfprintf_r+0x612>
 800a5f2:	222a      	movs	r2, #42	; 0x2a
 800a5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f6:	a81e      	add	r0, sp, #120	; 0x78
 800a5f8:	1e99      	subs	r1, r3, #2
 800a5fa:	1812      	adds	r2, r2, r0
 800a5fc:	2037      	movs	r0, #55	; 0x37
 800a5fe:	000b      	movs	r3, r1
 800a600:	3430      	adds	r4, #48	; 0x30
 800a602:	700c      	strb	r4, [r1, #0]
 800a604:	ac1e      	add	r4, sp, #120	; 0x78
 800a606:	1900      	adds	r0, r0, r4
 800a608:	4283      	cmp	r3, r0
 800a60a:	d200      	bcs.n	800a60e <_svfprintf_r+0x656>
 800a60c:	e18e      	b.n	800a92c <_svfprintf_r+0x974>
 800a60e:	2300      	movs	r3, #0
 800a610:	4281      	cmp	r1, r0
 800a612:	d804      	bhi.n	800a61e <_svfprintf_r+0x666>
 800a614:	aa1e      	add	r2, sp, #120	; 0x78
 800a616:	3339      	adds	r3, #57	; 0x39
 800a618:	189b      	adds	r3, r3, r2
 800a61a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a61c:	1a9b      	subs	r3, r3, r2
 800a61e:	222a      	movs	r2, #42	; 0x2a
 800a620:	a91e      	add	r1, sp, #120	; 0x78
 800a622:	1852      	adds	r2, r2, r1
 800a624:	18d3      	adds	r3, r2, r3
 800a626:	aa28      	add	r2, sp, #160	; 0xa0
 800a628:	1a9b      	subs	r3, r3, r2
 800a62a:	931e      	str	r3, [sp, #120]	; 0x78
 800a62c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a62e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a630:	4694      	mov	ip, r2
 800a632:	4463      	add	r3, ip
 800a634:	9309      	str	r3, [sp, #36]	; 0x24
 800a636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a638:	2b01      	cmp	r3, #1
 800a63a:	dc01      	bgt.n	800a640 <_svfprintf_r+0x688>
 800a63c:	07f3      	lsls	r3, r6, #31
 800a63e:	d504      	bpl.n	800a64a <_svfprintf_r+0x692>
 800a640:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a644:	4694      	mov	ip, r2
 800a646:	4463      	add	r3, ip
 800a648:	9309      	str	r3, [sp, #36]	; 0x24
 800a64a:	2280      	movs	r2, #128	; 0x80
 800a64c:	4b74      	ldr	r3, [pc, #464]	; (800a820 <_svfprintf_r+0x868>)
 800a64e:	0052      	lsls	r2, r2, #1
 800a650:	4033      	ands	r3, r6
 800a652:	431a      	orrs	r2, r3
 800a654:	2300      	movs	r3, #0
 800a656:	001d      	movs	r5, r3
 800a658:	921a      	str	r2, [sp, #104]	; 0x68
 800a65a:	9310      	str	r3, [sp, #64]	; 0x40
 800a65c:	9311      	str	r3, [sp, #68]	; 0x44
 800a65e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a660:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a662:	9319      	str	r3, [sp, #100]	; 0x64
 800a664:	2b00      	cmp	r3, #0
 800a666:	d006      	beq.n	800a676 <_svfprintf_r+0x6be>
 800a668:	231b      	movs	r3, #27
 800a66a:	aa1e      	add	r2, sp, #120	; 0x78
 800a66c:	189b      	adds	r3, r3, r2
 800a66e:	222d      	movs	r2, #45	; 0x2d
 800a670:	701a      	strb	r2, [r3, #0]
 800a672:	2300      	movs	r3, #0
 800a674:	9319      	str	r3, [sp, #100]	; 0x64
 800a676:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a678:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a67a:	931a      	str	r3, [sp, #104]	; 0x68
 800a67c:	4293      	cmp	r3, r2
 800a67e:	da00      	bge.n	800a682 <_svfprintf_r+0x6ca>
 800a680:	921a      	str	r2, [sp, #104]	; 0x68
 800a682:	231b      	movs	r3, #27
 800a684:	aa1e      	add	r2, sp, #120	; 0x78
 800a686:	189b      	adds	r3, r3, r2
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	1e5a      	subs	r2, r3, #1
 800a68c:	4193      	sbcs	r3, r2
 800a68e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a690:	18d3      	adds	r3, r2, r3
 800a692:	931a      	str	r3, [sp, #104]	; 0x68
 800a694:	0032      	movs	r2, r6
 800a696:	2302      	movs	r3, #2
 800a698:	401a      	ands	r2, r3
 800a69a:	9220      	str	r2, [sp, #128]	; 0x80
 800a69c:	421e      	tst	r6, r3
 800a69e:	d002      	beq.n	800a6a6 <_svfprintf_r+0x6ee>
 800a6a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a6a2:	3302      	adds	r3, #2
 800a6a4:	931a      	str	r3, [sp, #104]	; 0x68
 800a6a6:	2384      	movs	r3, #132	; 0x84
 800a6a8:	0032      	movs	r2, r6
 800a6aa:	401a      	ands	r2, r3
 800a6ac:	9221      	str	r2, [sp, #132]	; 0x84
 800a6ae:	421e      	tst	r6, r3
 800a6b0:	d11f      	bne.n	800a6f2 <_svfprintf_r+0x73a>
 800a6b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a6b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a6b6:	1a9c      	subs	r4, r3, r2
 800a6b8:	2c00      	cmp	r4, #0
 800a6ba:	dd1a      	ble.n	800a6f2 <_svfprintf_r+0x73a>
 800a6bc:	0039      	movs	r1, r7
 800a6be:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a6c0:	4858      	ldr	r0, [pc, #352]	; (800a824 <_svfprintf_r+0x86c>)
 800a6c2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	3108      	adds	r1, #8
 800a6c8:	6038      	str	r0, [r7, #0]
 800a6ca:	2c10      	cmp	r4, #16
 800a6cc:	dd00      	ble.n	800a6d0 <_svfprintf_r+0x718>
 800a6ce:	e31c      	b.n	800ad0a <_svfprintf_r+0xd52>
 800a6d0:	607c      	str	r4, [r7, #4]
 800a6d2:	18a4      	adds	r4, r4, r2
 800a6d4:	000f      	movs	r7, r1
 800a6d6:	942e      	str	r4, [sp, #184]	; 0xb8
 800a6d8:	932d      	str	r3, [sp, #180]	; 0xb4
 800a6da:	2b07      	cmp	r3, #7
 800a6dc:	dd09      	ble.n	800a6f2 <_svfprintf_r+0x73a>
 800a6de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6e2:	aa2c      	add	r2, sp, #176	; 0xb0
 800a6e4:	f003 fd7e 	bl	800e1e4 <__ssprint_r>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	d001      	beq.n	800a6f0 <_svfprintf_r+0x738>
 800a6ec:	f000 fe43 	bl	800b376 <_svfprintf_r+0x13be>
 800a6f0:	af2f      	add	r7, sp, #188	; 0xbc
 800a6f2:	221b      	movs	r2, #27
 800a6f4:	a91e      	add	r1, sp, #120	; 0x78
 800a6f6:	1852      	adds	r2, r2, r1
 800a6f8:	7811      	ldrb	r1, [r2, #0]
 800a6fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a6fc:	2900      	cmp	r1, #0
 800a6fe:	d014      	beq.n	800a72a <_svfprintf_r+0x772>
 800a700:	603a      	str	r2, [r7, #0]
 800a702:	2201      	movs	r2, #1
 800a704:	189b      	adds	r3, r3, r2
 800a706:	932e      	str	r3, [sp, #184]	; 0xb8
 800a708:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	189b      	adds	r3, r3, r2
 800a70e:	932d      	str	r3, [sp, #180]	; 0xb4
 800a710:	3708      	adds	r7, #8
 800a712:	2b07      	cmp	r3, #7
 800a714:	dd09      	ble.n	800a72a <_svfprintf_r+0x772>
 800a716:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a718:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a71a:	aa2c      	add	r2, sp, #176	; 0xb0
 800a71c:	f003 fd62 	bl	800e1e4 <__ssprint_r>
 800a720:	2800      	cmp	r0, #0
 800a722:	d001      	beq.n	800a728 <_svfprintf_r+0x770>
 800a724:	f000 fe27 	bl	800b376 <_svfprintf_r+0x13be>
 800a728:	af2f      	add	r7, sp, #188	; 0xbc
 800a72a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a72c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a72e:	2a00      	cmp	r2, #0
 800a730:	d015      	beq.n	800a75e <_svfprintf_r+0x7a6>
 800a732:	aa25      	add	r2, sp, #148	; 0x94
 800a734:	603a      	str	r2, [r7, #0]
 800a736:	2202      	movs	r2, #2
 800a738:	189b      	adds	r3, r3, r2
 800a73a:	932e      	str	r3, [sp, #184]	; 0xb8
 800a73c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a73e:	607a      	str	r2, [r7, #4]
 800a740:	3301      	adds	r3, #1
 800a742:	932d      	str	r3, [sp, #180]	; 0xb4
 800a744:	3708      	adds	r7, #8
 800a746:	2b07      	cmp	r3, #7
 800a748:	dd09      	ble.n	800a75e <_svfprintf_r+0x7a6>
 800a74a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a74c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a74e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a750:	f003 fd48 	bl	800e1e4 <__ssprint_r>
 800a754:	2800      	cmp	r0, #0
 800a756:	d001      	beq.n	800a75c <_svfprintf_r+0x7a4>
 800a758:	f000 fe0d 	bl	800b376 <_svfprintf_r+0x13be>
 800a75c:	af2f      	add	r7, sp, #188	; 0xbc
 800a75e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a760:	2b80      	cmp	r3, #128	; 0x80
 800a762:	d11f      	bne.n	800a7a4 <_svfprintf_r+0x7ec>
 800a764:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a766:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a768:	1a9c      	subs	r4, r3, r2
 800a76a:	2c00      	cmp	r4, #0
 800a76c:	dd1a      	ble.n	800a7a4 <_svfprintf_r+0x7ec>
 800a76e:	0039      	movs	r1, r7
 800a770:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a772:	482d      	ldr	r0, [pc, #180]	; (800a828 <_svfprintf_r+0x870>)
 800a774:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a776:	3301      	adds	r3, #1
 800a778:	3108      	adds	r1, #8
 800a77a:	6038      	str	r0, [r7, #0]
 800a77c:	2c10      	cmp	r4, #16
 800a77e:	dd00      	ble.n	800a782 <_svfprintf_r+0x7ca>
 800a780:	e2d6      	b.n	800ad30 <_svfprintf_r+0xd78>
 800a782:	607c      	str	r4, [r7, #4]
 800a784:	18a4      	adds	r4, r4, r2
 800a786:	000f      	movs	r7, r1
 800a788:	942e      	str	r4, [sp, #184]	; 0xb8
 800a78a:	932d      	str	r3, [sp, #180]	; 0xb4
 800a78c:	2b07      	cmp	r3, #7
 800a78e:	dd09      	ble.n	800a7a4 <_svfprintf_r+0x7ec>
 800a790:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a792:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a794:	aa2c      	add	r2, sp, #176	; 0xb0
 800a796:	f003 fd25 	bl	800e1e4 <__ssprint_r>
 800a79a:	2800      	cmp	r0, #0
 800a79c:	d001      	beq.n	800a7a2 <_svfprintf_r+0x7ea>
 800a79e:	f000 fdea 	bl	800b376 <_svfprintf_r+0x13be>
 800a7a2:	af2f      	add	r7, sp, #188	; 0xbc
 800a7a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a7a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7a8:	1a9c      	subs	r4, r3, r2
 800a7aa:	2c00      	cmp	r4, #0
 800a7ac:	dd1a      	ble.n	800a7e4 <_svfprintf_r+0x82c>
 800a7ae:	0039      	movs	r1, r7
 800a7b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a7b2:	481d      	ldr	r0, [pc, #116]	; (800a828 <_svfprintf_r+0x870>)
 800a7b4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	3108      	adds	r1, #8
 800a7ba:	6038      	str	r0, [r7, #0]
 800a7bc:	2c10      	cmp	r4, #16
 800a7be:	dd00      	ble.n	800a7c2 <_svfprintf_r+0x80a>
 800a7c0:	e2c9      	b.n	800ad56 <_svfprintf_r+0xd9e>
 800a7c2:	18a2      	adds	r2, r4, r2
 800a7c4:	607c      	str	r4, [r7, #4]
 800a7c6:	922e      	str	r2, [sp, #184]	; 0xb8
 800a7c8:	000f      	movs	r7, r1
 800a7ca:	932d      	str	r3, [sp, #180]	; 0xb4
 800a7cc:	2b07      	cmp	r3, #7
 800a7ce:	dd09      	ble.n	800a7e4 <_svfprintf_r+0x82c>
 800a7d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a7d4:	aa2c      	add	r2, sp, #176	; 0xb0
 800a7d6:	f003 fd05 	bl	800e1e4 <__ssprint_r>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d001      	beq.n	800a7e2 <_svfprintf_r+0x82a>
 800a7de:	f000 fdca 	bl	800b376 <_svfprintf_r+0x13be>
 800a7e2:	af2f      	add	r7, sp, #188	; 0xbc
 800a7e4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a7e6:	9319      	str	r3, [sp, #100]	; 0x64
 800a7e8:	05f3      	lsls	r3, r6, #23
 800a7ea:	d500      	bpl.n	800a7ee <_svfprintf_r+0x836>
 800a7ec:	e2ce      	b.n	800ad8c <_svfprintf_r+0xdd4>
 800a7ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7f0:	9b08      	ldr	r3, [sp, #32]
 800a7f2:	4694      	mov	ip, r2
 800a7f4:	603b      	str	r3, [r7, #0]
 800a7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f8:	607b      	str	r3, [r7, #4]
 800a7fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a7fc:	4463      	add	r3, ip
 800a7fe:	932e      	str	r3, [sp, #184]	; 0xb8
 800a800:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a802:	3301      	adds	r3, #1
 800a804:	932d      	str	r3, [sp, #180]	; 0xb4
 800a806:	2b07      	cmp	r3, #7
 800a808:	dd00      	ble.n	800a80c <_svfprintf_r+0x854>
 800a80a:	e3a3      	b.n	800af54 <_svfprintf_r+0xf9c>
 800a80c:	3708      	adds	r7, #8
 800a80e:	e301      	b.n	800ae14 <_svfprintf_r+0xe5c>
 800a810:	0800fbbc 	.word	0x0800fbbc
 800a814:	0800fbcd 	.word	0x0800fbcd
 800a818:	40300000 	.word	0x40300000
 800a81c:	3fe00000 	.word	0x3fe00000
 800a820:	fffffbff 	.word	0xfffffbff
 800a824:	0800fbe0 	.word	0x0800fbe0
 800a828:	0800fbf0 	.word	0x0800fbf0
 800a82c:	9b08      	ldr	r3, [sp, #32]
 800a82e:	930c      	str	r3, [sp, #48]	; 0x30
 800a830:	e610      	b.n	800a454 <_svfprintf_r+0x49c>
 800a832:	2306      	movs	r3, #6
 800a834:	e5fd      	b.n	800a432 <_svfprintf_r+0x47a>
 800a836:	930e      	str	r3, [sp, #56]	; 0x38
 800a838:	2300      	movs	r3, #0
 800a83a:	e61a      	b.n	800a472 <_svfprintf_r+0x4ba>
 800a83c:	7010      	strb	r0, [r2, #0]
 800a83e:	e684      	b.n	800a54a <_svfprintf_r+0x592>
 800a840:	7018      	strb	r0, [r3, #0]
 800a842:	3301      	adds	r3, #1
 800a844:	1aca      	subs	r2, r1, r3
 800a846:	d5fb      	bpl.n	800a840 <_svfprintf_r+0x888>
 800a848:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a84a:	2300      	movs	r3, #0
 800a84c:	3201      	adds	r2, #1
 800a84e:	db01      	blt.n	800a854 <_svfprintf_r+0x89c>
 800a850:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a852:	3301      	adds	r3, #1
 800a854:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a856:	18d3      	adds	r3, r2, r3
 800a858:	9323      	str	r3, [sp, #140]	; 0x8c
 800a85a:	e684      	b.n	800a566 <_svfprintf_r+0x5ae>
 800a85c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a85e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a860:	2030      	movs	r0, #48	; 0x30
 800a862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a864:	1851      	adds	r1, r2, r1
 800a866:	e7ed      	b.n	800a844 <_svfprintf_r+0x88c>
 800a868:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a86a:	2303      	movs	r3, #3
 800a86c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a86e:	2a46      	cmp	r2, #70	; 0x46
 800a870:	d006      	beq.n	800a880 <_svfprintf_r+0x8c8>
 800a872:	0014      	movs	r4, r2
 800a874:	3c45      	subs	r4, #69	; 0x45
 800a876:	4262      	negs	r2, r4
 800a878:	4154      	adcs	r4, r2
 800a87a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a87c:	3b01      	subs	r3, #1
 800a87e:	1914      	adds	r4, r2, r4
 800a880:	aa2a      	add	r2, sp, #168	; 0xa8
 800a882:	9204      	str	r2, [sp, #16]
 800a884:	aa27      	add	r2, sp, #156	; 0x9c
 800a886:	9203      	str	r2, [sp, #12]
 800a888:	aa26      	add	r2, sp, #152	; 0x98
 800a88a:	9202      	str	r2, [sp, #8]
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	002a      	movs	r2, r5
 800a890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a892:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a894:	9401      	str	r4, [sp, #4]
 800a896:	f002 fad7 	bl	800ce48 <_dtoa_r>
 800a89a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a89c:	9008      	str	r0, [sp, #32]
 800a89e:	2b47      	cmp	r3, #71	; 0x47
 800a8a0:	d103      	bne.n	800a8aa <_svfprintf_r+0x8f2>
 800a8a2:	07f3      	lsls	r3, r6, #31
 800a8a4:	d401      	bmi.n	800a8aa <_svfprintf_r+0x8f2>
 800a8a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800a8a8:	e65e      	b.n	800a568 <_svfprintf_r+0x5b0>
 800a8aa:	9b08      	ldr	r3, [sp, #32]
 800a8ac:	191b      	adds	r3, r3, r4
 800a8ae:	9311      	str	r3, [sp, #68]	; 0x44
 800a8b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8b2:	2b46      	cmp	r3, #70	; 0x46
 800a8b4:	d112      	bne.n	800a8dc <_svfprintf_r+0x924>
 800a8b6:	9b08      	ldr	r3, [sp, #32]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	2b30      	cmp	r3, #48	; 0x30
 800a8bc:	d10a      	bne.n	800a8d4 <_svfprintf_r+0x91c>
 800a8be:	2200      	movs	r2, #0
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	0028      	movs	r0, r5
 800a8c4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a8c6:	f7f5 fdbf 	bl	8000448 <__aeabi_dcmpeq>
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d102      	bne.n	800a8d4 <_svfprintf_r+0x91c>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	1b1b      	subs	r3, r3, r4
 800a8d2:	9326      	str	r3, [sp, #152]	; 0x98
 800a8d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a8d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a8d8:	18d3      	adds	r3, r2, r3
 800a8da:	9311      	str	r3, [sp, #68]	; 0x44
 800a8dc:	2200      	movs	r2, #0
 800a8de:	2300      	movs	r3, #0
 800a8e0:	0028      	movs	r0, r5
 800a8e2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a8e4:	f7f5 fdb0 	bl	8000448 <__aeabi_dcmpeq>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d001      	beq.n	800a8f0 <_svfprintf_r+0x938>
 800a8ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8ee:	932a      	str	r3, [sp, #168]	; 0xa8
 800a8f0:	2230      	movs	r2, #48	; 0x30
 800a8f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800a8f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a8f6:	4299      	cmp	r1, r3
 800a8f8:	d9d5      	bls.n	800a8a6 <_svfprintf_r+0x8ee>
 800a8fa:	1c59      	adds	r1, r3, #1
 800a8fc:	912a      	str	r1, [sp, #168]	; 0xa8
 800a8fe:	701a      	strb	r2, [r3, #0]
 800a900:	e7f7      	b.n	800a8f2 <_svfprintf_r+0x93a>
 800a902:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a904:	2b46      	cmp	r3, #70	; 0x46
 800a906:	d000      	beq.n	800a90a <_svfprintf_r+0x952>
 800a908:	e63f      	b.n	800a58a <_svfprintf_r+0x5d2>
 800a90a:	2201      	movs	r2, #1
 800a90c:	0033      	movs	r3, r6
 800a90e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a910:	4013      	ands	r3, r2
 800a912:	430b      	orrs	r3, r1
 800a914:	2d00      	cmp	r5, #0
 800a916:	dd2c      	ble.n	800a972 <_svfprintf_r+0x9ba>
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d046      	beq.n	800a9aa <_svfprintf_r+0x9f2>
 800a91c:	000a      	movs	r2, r1
 800a91e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a920:	18eb      	adds	r3, r5, r3
 800a922:	18d3      	adds	r3, r2, r3
 800a924:	9309      	str	r3, [sp, #36]	; 0x24
 800a926:	2366      	movs	r3, #102	; 0x66
 800a928:	930f      	str	r3, [sp, #60]	; 0x3c
 800a92a:	e030      	b.n	800a98e <_svfprintf_r+0x9d6>
 800a92c:	781c      	ldrb	r4, [r3, #0]
 800a92e:	3301      	adds	r3, #1
 800a930:	7014      	strb	r4, [r2, #0]
 800a932:	3201      	adds	r2, #1
 800a934:	e668      	b.n	800a608 <_svfprintf_r+0x650>
 800a936:	222a      	movs	r2, #42	; 0x2a
 800a938:	ab1e      	add	r3, sp, #120	; 0x78
 800a93a:	18d2      	adds	r2, r2, r3
 800a93c:	2800      	cmp	r0, #0
 800a93e:	d104      	bne.n	800a94a <_svfprintf_r+0x992>
 800a940:	2330      	movs	r3, #48	; 0x30
 800a942:	222b      	movs	r2, #43	; 0x2b
 800a944:	708b      	strb	r3, [r1, #2]
 800a946:	ab1e      	add	r3, sp, #120	; 0x78
 800a948:	18d2      	adds	r2, r2, r3
 800a94a:	3430      	adds	r4, #48	; 0x30
 800a94c:	1c53      	adds	r3, r2, #1
 800a94e:	7014      	strb	r4, [r2, #0]
 800a950:	e669      	b.n	800a626 <_svfprintf_r+0x66e>
 800a952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a954:	42ab      	cmp	r3, r5
 800a956:	dd12      	ble.n	800a97e <_svfprintf_r+0x9c6>
 800a958:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a95a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a95c:	4694      	mov	ip, r2
 800a95e:	4463      	add	r3, ip
 800a960:	9309      	str	r3, [sp, #36]	; 0x24
 800a962:	2367      	movs	r3, #103	; 0x67
 800a964:	930f      	str	r3, [sp, #60]	; 0x3c
 800a966:	2d00      	cmp	r5, #0
 800a968:	dc11      	bgt.n	800a98e <_svfprintf_r+0x9d6>
 800a96a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a96c:	1b5b      	subs	r3, r3, r5
 800a96e:	3301      	adds	r3, #1
 800a970:	e00c      	b.n	800a98c <_svfprintf_r+0x9d4>
 800a972:	2b00      	cmp	r3, #0
 800a974:	d01b      	beq.n	800a9ae <_svfprintf_r+0x9f6>
 800a976:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a97a:	3301      	adds	r3, #1
 800a97c:	e7d1      	b.n	800a922 <_svfprintf_r+0x96a>
 800a97e:	2367      	movs	r3, #103	; 0x67
 800a980:	9509      	str	r5, [sp, #36]	; 0x24
 800a982:	930f      	str	r3, [sp, #60]	; 0x3c
 800a984:	07f3      	lsls	r3, r6, #31
 800a986:	d502      	bpl.n	800a98e <_svfprintf_r+0x9d6>
 800a988:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a98a:	18eb      	adds	r3, r5, r3
 800a98c:	9309      	str	r3, [sp, #36]	; 0x24
 800a98e:	2380      	movs	r3, #128	; 0x80
 800a990:	0032      	movs	r2, r6
 800a992:	00db      	lsls	r3, r3, #3
 800a994:	401a      	ands	r2, r3
 800a996:	9211      	str	r2, [sp, #68]	; 0x44
 800a998:	2200      	movs	r2, #0
 800a99a:	9210      	str	r2, [sp, #64]	; 0x40
 800a99c:	421e      	tst	r6, r3
 800a99e:	d100      	bne.n	800a9a2 <_svfprintf_r+0x9ea>
 800a9a0:	e65d      	b.n	800a65e <_svfprintf_r+0x6a6>
 800a9a2:	4295      	cmp	r5, r2
 800a9a4:	dc25      	bgt.n	800a9f2 <_svfprintf_r+0xa3a>
 800a9a6:	9211      	str	r2, [sp, #68]	; 0x44
 800a9a8:	e659      	b.n	800a65e <_svfprintf_r+0x6a6>
 800a9aa:	9509      	str	r5, [sp, #36]	; 0x24
 800a9ac:	e7bb      	b.n	800a926 <_svfprintf_r+0x96e>
 800a9ae:	2366      	movs	r3, #102	; 0x66
 800a9b0:	9209      	str	r2, [sp, #36]	; 0x24
 800a9b2:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9b4:	e7eb      	b.n	800a98e <_svfprintf_r+0x9d6>
 800a9b6:	42ab      	cmp	r3, r5
 800a9b8:	da0e      	bge.n	800a9d8 <_svfprintf_r+0xa20>
 800a9ba:	1aed      	subs	r5, r5, r3
 800a9bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9be:	785b      	ldrb	r3, [r3, #1]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d012      	beq.n	800a9ea <_svfprintf_r+0xa32>
 800a9c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	9311      	str	r3, [sp, #68]	; 0x44
 800a9ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	9312      	str	r3, [sp, #72]	; 0x48
 800a9d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	2bff      	cmp	r3, #255	; 0xff
 800a9d6:	d1ee      	bne.n	800a9b6 <_svfprintf_r+0x9fe>
 800a9d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9dc:	189b      	adds	r3, r3, r2
 800a9de:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a9e0:	4353      	muls	r3, r2
 800a9e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9e4:	189b      	adds	r3, r3, r2
 800a9e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9e8:	e639      	b.n	800a65e <_svfprintf_r+0x6a6>
 800a9ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	9310      	str	r3, [sp, #64]	; 0x40
 800a9f0:	e7ee      	b.n	800a9d0 <_svfprintf_r+0xa18>
 800a9f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9f4:	9311      	str	r3, [sp, #68]	; 0x44
 800a9f6:	e7eb      	b.n	800a9d0 <_svfprintf_r+0xa18>
 800a9f8:	1d23      	adds	r3, r4, #4
 800a9fa:	930d      	str	r3, [sp, #52]	; 0x34
 800a9fc:	06b3      	lsls	r3, r6, #26
 800a9fe:	d509      	bpl.n	800aa14 <_svfprintf_r+0xa5c>
 800aa00:	6823      	ldr	r3, [r4, #0]
 800aa02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa04:	601a      	str	r2, [r3, #0]
 800aa06:	17d2      	asrs	r2, r2, #31
 800aa08:	605a      	str	r2, [r3, #4]
 800aa0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa0c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800aa0e:	9308      	str	r3, [sp, #32]
 800aa10:	f7ff fb0d 	bl	800a02e <_svfprintf_r+0x76>
 800aa14:	06f3      	lsls	r3, r6, #27
 800aa16:	d503      	bpl.n	800aa20 <_svfprintf_r+0xa68>
 800aa18:	6823      	ldr	r3, [r4, #0]
 800aa1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	e7f4      	b.n	800aa0a <_svfprintf_r+0xa52>
 800aa20:	0673      	lsls	r3, r6, #25
 800aa22:	d503      	bpl.n	800aa2c <_svfprintf_r+0xa74>
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa28:	801a      	strh	r2, [r3, #0]
 800aa2a:	e7ee      	b.n	800aa0a <_svfprintf_r+0xa52>
 800aa2c:	05b6      	lsls	r6, r6, #22
 800aa2e:	d5f3      	bpl.n	800aa18 <_svfprintf_r+0xa60>
 800aa30:	6823      	ldr	r3, [r4, #0]
 800aa32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa34:	701a      	strb	r2, [r3, #0]
 800aa36:	e7e8      	b.n	800aa0a <_svfprintf_r+0xa52>
 800aa38:	2310      	movs	r3, #16
 800aa3a:	431e      	orrs	r6, r3
 800aa3c:	2320      	movs	r3, #32
 800aa3e:	0030      	movs	r0, r6
 800aa40:	4018      	ands	r0, r3
 800aa42:	421e      	tst	r6, r3
 800aa44:	d00f      	beq.n	800aa66 <_svfprintf_r+0xaae>
 800aa46:	3b19      	subs	r3, #25
 800aa48:	3407      	adds	r4, #7
 800aa4a:	439c      	bics	r4, r3
 800aa4c:	0022      	movs	r2, r4
 800aa4e:	ca18      	ldmia	r2!, {r3, r4}
 800aa50:	9306      	str	r3, [sp, #24]
 800aa52:	9407      	str	r4, [sp, #28]
 800aa54:	920d      	str	r2, [sp, #52]	; 0x34
 800aa56:	4bc9      	ldr	r3, [pc, #804]	; (800ad7c <_svfprintf_r+0xdc4>)
 800aa58:	401e      	ands	r6, r3
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	221b      	movs	r2, #27
 800aa5e:	a91e      	add	r1, sp, #120	; 0x78
 800aa60:	1852      	adds	r2, r2, r1
 800aa62:	2100      	movs	r1, #0
 800aa64:	e430      	b.n	800a2c8 <_svfprintf_r+0x310>
 800aa66:	0022      	movs	r2, r4
 800aa68:	ca08      	ldmia	r2!, {r3}
 800aa6a:	0031      	movs	r1, r6
 800aa6c:	920d      	str	r2, [sp, #52]	; 0x34
 800aa6e:	2210      	movs	r2, #16
 800aa70:	4011      	ands	r1, r2
 800aa72:	4216      	tst	r6, r2
 800aa74:	d002      	beq.n	800aa7c <_svfprintf_r+0xac4>
 800aa76:	9306      	str	r3, [sp, #24]
 800aa78:	9007      	str	r0, [sp, #28]
 800aa7a:	e7ec      	b.n	800aa56 <_svfprintf_r+0xa9e>
 800aa7c:	2240      	movs	r2, #64	; 0x40
 800aa7e:	0030      	movs	r0, r6
 800aa80:	4010      	ands	r0, r2
 800aa82:	4216      	tst	r6, r2
 800aa84:	d003      	beq.n	800aa8e <_svfprintf_r+0xad6>
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	9306      	str	r3, [sp, #24]
 800aa8a:	9107      	str	r1, [sp, #28]
 800aa8c:	e7e3      	b.n	800aa56 <_svfprintf_r+0xa9e>
 800aa8e:	2280      	movs	r2, #128	; 0x80
 800aa90:	0031      	movs	r1, r6
 800aa92:	0092      	lsls	r2, r2, #2
 800aa94:	4011      	ands	r1, r2
 800aa96:	4216      	tst	r6, r2
 800aa98:	d0f6      	beq.n	800aa88 <_svfprintf_r+0xad0>
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	e7eb      	b.n	800aa76 <_svfprintf_r+0xabe>
 800aa9e:	0023      	movs	r3, r4
 800aaa0:	cb04      	ldmia	r3!, {r2}
 800aaa2:	49b7      	ldr	r1, [pc, #732]	; (800ad80 <_svfprintf_r+0xdc8>)
 800aaa4:	9206      	str	r2, [sp, #24]
 800aaa6:	aa25      	add	r2, sp, #148	; 0x94
 800aaa8:	8011      	strh	r1, [r2, #0]
 800aaaa:	4ab6      	ldr	r2, [pc, #728]	; (800ad84 <_svfprintf_r+0xdcc>)
 800aaac:	930d      	str	r3, [sp, #52]	; 0x34
 800aaae:	2300      	movs	r3, #0
 800aab0:	921f      	str	r2, [sp, #124]	; 0x7c
 800aab2:	2278      	movs	r2, #120	; 0x78
 800aab4:	9307      	str	r3, [sp, #28]
 800aab6:	3302      	adds	r3, #2
 800aab8:	431e      	orrs	r6, r3
 800aaba:	920f      	str	r2, [sp, #60]	; 0x3c
 800aabc:	e7ce      	b.n	800aa5c <_svfprintf_r+0xaa4>
 800aabe:	0023      	movs	r3, r4
 800aac0:	cb04      	ldmia	r3!, {r2}
 800aac2:	2400      	movs	r4, #0
 800aac4:	930d      	str	r3, [sp, #52]	; 0x34
 800aac6:	231b      	movs	r3, #27
 800aac8:	9208      	str	r2, [sp, #32]
 800aaca:	aa1e      	add	r2, sp, #120	; 0x78
 800aacc:	189b      	adds	r3, r3, r2
 800aace:	701c      	strb	r4, [r3, #0]
 800aad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aad2:	3301      	adds	r3, #1
 800aad4:	d00e      	beq.n	800aaf4 <_svfprintf_r+0xb3c>
 800aad6:	0021      	movs	r1, r4
 800aad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aada:	9808      	ldr	r0, [sp, #32]
 800aadc:	f002 f83a 	bl	800cb54 <memchr>
 800aae0:	900c      	str	r0, [sp, #48]	; 0x30
 800aae2:	42a0      	cmp	r0, r4
 800aae4:	d100      	bne.n	800aae8 <_svfprintf_r+0xb30>
 800aae6:	e10d      	b.n	800ad04 <_svfprintf_r+0xd4c>
 800aae8:	9a08      	ldr	r2, [sp, #32]
 800aaea:	1a83      	subs	r3, r0, r2
 800aaec:	9309      	str	r3, [sp, #36]	; 0x24
 800aaee:	0023      	movs	r3, r4
 800aaf0:	940c      	str	r4, [sp, #48]	; 0x30
 800aaf2:	e44e      	b.n	800a392 <_svfprintf_r+0x3da>
 800aaf4:	9808      	ldr	r0, [sp, #32]
 800aaf6:	f7f5 fb05 	bl	8000104 <strlen>
 800aafa:	9009      	str	r0, [sp, #36]	; 0x24
 800aafc:	e7f7      	b.n	800aaee <_svfprintf_r+0xb36>
 800aafe:	2310      	movs	r3, #16
 800ab00:	431e      	orrs	r6, r3
 800ab02:	2320      	movs	r3, #32
 800ab04:	0030      	movs	r0, r6
 800ab06:	4018      	ands	r0, r3
 800ab08:	421e      	tst	r6, r3
 800ab0a:	d009      	beq.n	800ab20 <_svfprintf_r+0xb68>
 800ab0c:	3b19      	subs	r3, #25
 800ab0e:	3407      	adds	r4, #7
 800ab10:	439c      	bics	r4, r3
 800ab12:	0022      	movs	r2, r4
 800ab14:	ca18      	ldmia	r2!, {r3, r4}
 800ab16:	9306      	str	r3, [sp, #24]
 800ab18:	9407      	str	r4, [sp, #28]
 800ab1a:	920d      	str	r2, [sp, #52]	; 0x34
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e79d      	b.n	800aa5c <_svfprintf_r+0xaa4>
 800ab20:	0023      	movs	r3, r4
 800ab22:	cb04      	ldmia	r3!, {r2}
 800ab24:	0031      	movs	r1, r6
 800ab26:	930d      	str	r3, [sp, #52]	; 0x34
 800ab28:	2310      	movs	r3, #16
 800ab2a:	4019      	ands	r1, r3
 800ab2c:	421e      	tst	r6, r3
 800ab2e:	d003      	beq.n	800ab38 <_svfprintf_r+0xb80>
 800ab30:	9206      	str	r2, [sp, #24]
 800ab32:	9007      	str	r0, [sp, #28]
 800ab34:	3b0f      	subs	r3, #15
 800ab36:	e791      	b.n	800aa5c <_svfprintf_r+0xaa4>
 800ab38:	2340      	movs	r3, #64	; 0x40
 800ab3a:	0030      	movs	r0, r6
 800ab3c:	4018      	ands	r0, r3
 800ab3e:	421e      	tst	r6, r3
 800ab40:	d003      	beq.n	800ab4a <_svfprintf_r+0xb92>
 800ab42:	b293      	uxth	r3, r2
 800ab44:	9306      	str	r3, [sp, #24]
 800ab46:	9107      	str	r1, [sp, #28]
 800ab48:	e7e8      	b.n	800ab1c <_svfprintf_r+0xb64>
 800ab4a:	2380      	movs	r3, #128	; 0x80
 800ab4c:	0031      	movs	r1, r6
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	4019      	ands	r1, r3
 800ab52:	421e      	tst	r6, r3
 800ab54:	d003      	beq.n	800ab5e <_svfprintf_r+0xba6>
 800ab56:	b2d3      	uxtb	r3, r2
 800ab58:	9306      	str	r3, [sp, #24]
 800ab5a:	9007      	str	r0, [sp, #28]
 800ab5c:	e7de      	b.n	800ab1c <_svfprintf_r+0xb64>
 800ab5e:	9206      	str	r2, [sp, #24]
 800ab60:	e7f1      	b.n	800ab46 <_svfprintf_r+0xb8e>
 800ab62:	4b89      	ldr	r3, [pc, #548]	; (800ad88 <_svfprintf_r+0xdd0>)
 800ab64:	0030      	movs	r0, r6
 800ab66:	931f      	str	r3, [sp, #124]	; 0x7c
 800ab68:	2320      	movs	r3, #32
 800ab6a:	4018      	ands	r0, r3
 800ab6c:	421e      	tst	r6, r3
 800ab6e:	d01a      	beq.n	800aba6 <_svfprintf_r+0xbee>
 800ab70:	3b19      	subs	r3, #25
 800ab72:	3407      	adds	r4, #7
 800ab74:	439c      	bics	r4, r3
 800ab76:	0022      	movs	r2, r4
 800ab78:	ca18      	ldmia	r2!, {r3, r4}
 800ab7a:	9306      	str	r3, [sp, #24]
 800ab7c:	9407      	str	r4, [sp, #28]
 800ab7e:	920d      	str	r2, [sp, #52]	; 0x34
 800ab80:	07f3      	lsls	r3, r6, #31
 800ab82:	d50a      	bpl.n	800ab9a <_svfprintf_r+0xbe2>
 800ab84:	9b06      	ldr	r3, [sp, #24]
 800ab86:	9a07      	ldr	r2, [sp, #28]
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	d006      	beq.n	800ab9a <_svfprintf_r+0xbe2>
 800ab8c:	2230      	movs	r2, #48	; 0x30
 800ab8e:	ab25      	add	r3, sp, #148	; 0x94
 800ab90:	701a      	strb	r2, [r3, #0]
 800ab92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab94:	705a      	strb	r2, [r3, #1]
 800ab96:	2302      	movs	r3, #2
 800ab98:	431e      	orrs	r6, r3
 800ab9a:	4b78      	ldr	r3, [pc, #480]	; (800ad7c <_svfprintf_r+0xdc4>)
 800ab9c:	401e      	ands	r6, r3
 800ab9e:	2302      	movs	r3, #2
 800aba0:	e75c      	b.n	800aa5c <_svfprintf_r+0xaa4>
 800aba2:	4b78      	ldr	r3, [pc, #480]	; (800ad84 <_svfprintf_r+0xdcc>)
 800aba4:	e7de      	b.n	800ab64 <_svfprintf_r+0xbac>
 800aba6:	0023      	movs	r3, r4
 800aba8:	cb04      	ldmia	r3!, {r2}
 800abaa:	0031      	movs	r1, r6
 800abac:	930d      	str	r3, [sp, #52]	; 0x34
 800abae:	2310      	movs	r3, #16
 800abb0:	4019      	ands	r1, r3
 800abb2:	421e      	tst	r6, r3
 800abb4:	d002      	beq.n	800abbc <_svfprintf_r+0xc04>
 800abb6:	9206      	str	r2, [sp, #24]
 800abb8:	9007      	str	r0, [sp, #28]
 800abba:	e7e1      	b.n	800ab80 <_svfprintf_r+0xbc8>
 800abbc:	2340      	movs	r3, #64	; 0x40
 800abbe:	0030      	movs	r0, r6
 800abc0:	4018      	ands	r0, r3
 800abc2:	421e      	tst	r6, r3
 800abc4:	d003      	beq.n	800abce <_svfprintf_r+0xc16>
 800abc6:	b293      	uxth	r3, r2
 800abc8:	9306      	str	r3, [sp, #24]
 800abca:	9107      	str	r1, [sp, #28]
 800abcc:	e7d8      	b.n	800ab80 <_svfprintf_r+0xbc8>
 800abce:	2380      	movs	r3, #128	; 0x80
 800abd0:	0031      	movs	r1, r6
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4019      	ands	r1, r3
 800abd6:	421e      	tst	r6, r3
 800abd8:	d002      	beq.n	800abe0 <_svfprintf_r+0xc28>
 800abda:	b2d3      	uxtb	r3, r2
 800abdc:	9306      	str	r3, [sp, #24]
 800abde:	e7eb      	b.n	800abb8 <_svfprintf_r+0xc00>
 800abe0:	9206      	str	r2, [sp, #24]
 800abe2:	e7f2      	b.n	800abca <_svfprintf_r+0xc12>
 800abe4:	9b07      	ldr	r3, [sp, #28]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d10a      	bne.n	800ac00 <_svfprintf_r+0xc48>
 800abea:	9b06      	ldr	r3, [sp, #24]
 800abec:	2b09      	cmp	r3, #9
 800abee:	d807      	bhi.n	800ac00 <_svfprintf_r+0xc48>
 800abf0:	23e7      	movs	r3, #231	; 0xe7
 800abf2:	aa1e      	add	r2, sp, #120	; 0x78
 800abf4:	189b      	adds	r3, r3, r2
 800abf6:	9a06      	ldr	r2, [sp, #24]
 800abf8:	3230      	adds	r2, #48	; 0x30
 800abfa:	701a      	strb	r2, [r3, #0]
 800abfc:	f000 fc18 	bl	800b430 <_svfprintf_r+0x1478>
 800ac00:	2680      	movs	r6, #128	; 0x80
 800ac02:	2300      	movs	r3, #0
 800ac04:	00f6      	lsls	r6, r6, #3
 800ac06:	930e      	str	r3, [sp, #56]	; 0x38
 800ac08:	ad58      	add	r5, sp, #352	; 0x160
 800ac0a:	4026      	ands	r6, r4
 800ac0c:	220a      	movs	r2, #10
 800ac0e:	9806      	ldr	r0, [sp, #24]
 800ac10:	9907      	ldr	r1, [sp, #28]
 800ac12:	2300      	movs	r3, #0
 800ac14:	f7f5 fc46 	bl	80004a4 <__aeabi_uldivmod>
 800ac18:	1e6b      	subs	r3, r5, #1
 800ac1a:	3230      	adds	r2, #48	; 0x30
 800ac1c:	9308      	str	r3, [sp, #32]
 800ac1e:	701a      	strb	r2, [r3, #0]
 800ac20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac22:	900c      	str	r0, [sp, #48]	; 0x30
 800ac24:	3301      	adds	r3, #1
 800ac26:	9110      	str	r1, [sp, #64]	; 0x40
 800ac28:	930e      	str	r3, [sp, #56]	; 0x38
 800ac2a:	2e00      	cmp	r6, #0
 800ac2c:	d01d      	beq.n	800ac6a <_svfprintf_r+0xcb2>
 800ac2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d118      	bne.n	800ac6a <_svfprintf_r+0xcb2>
 800ac38:	2aff      	cmp	r2, #255	; 0xff
 800ac3a:	d016      	beq.n	800ac6a <_svfprintf_r+0xcb2>
 800ac3c:	9b07      	ldr	r3, [sp, #28]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d102      	bne.n	800ac48 <_svfprintf_r+0xc90>
 800ac42:	9b06      	ldr	r3, [sp, #24]
 800ac44:	2b09      	cmp	r3, #9
 800ac46:	d910      	bls.n	800ac6a <_svfprintf_r+0xcb2>
 800ac48:	9b08      	ldr	r3, [sp, #32]
 800ac4a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ac4c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ac4e:	1a9b      	subs	r3, r3, r2
 800ac50:	0018      	movs	r0, r3
 800ac52:	9308      	str	r3, [sp, #32]
 800ac54:	f7fd ffd1 	bl	8008bfa <strncpy>
 800ac58:	2200      	movs	r2, #0
 800ac5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac5c:	920e      	str	r2, [sp, #56]	; 0x38
 800ac5e:	785b      	ldrb	r3, [r3, #1]
 800ac60:	1e5a      	subs	r2, r3, #1
 800ac62:	4193      	sbcs	r3, r2
 800ac64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac66:	18d3      	adds	r3, r2, r3
 800ac68:	9312      	str	r3, [sp, #72]	; 0x48
 800ac6a:	9b07      	ldr	r3, [sp, #28]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10f      	bne.n	800ac90 <_svfprintf_r+0xcd8>
 800ac70:	9b06      	ldr	r3, [sp, #24]
 800ac72:	2b09      	cmp	r3, #9
 800ac74:	d80c      	bhi.n	800ac90 <_svfprintf_r+0xcd8>
 800ac76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac78:	9a08      	ldr	r2, [sp, #32]
 800ac7a:	9319      	str	r3, [sp, #100]	; 0x64
 800ac7c:	ab58      	add	r3, sp, #352	; 0x160
 800ac7e:	1a9b      	subs	r3, r3, r2
 800ac80:	9309      	str	r3, [sp, #36]	; 0x24
 800ac82:	2300      	movs	r3, #0
 800ac84:	0026      	movs	r6, r4
 800ac86:	930c      	str	r3, [sp, #48]	; 0x30
 800ac88:	001d      	movs	r5, r3
 800ac8a:	9310      	str	r3, [sp, #64]	; 0x40
 800ac8c:	9311      	str	r3, [sp, #68]	; 0x44
 800ac8e:	e4f2      	b.n	800a676 <_svfprintf_r+0x6be>
 800ac90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac92:	9d08      	ldr	r5, [sp, #32]
 800ac94:	9306      	str	r3, [sp, #24]
 800ac96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac98:	9307      	str	r3, [sp, #28]
 800ac9a:	e7b7      	b.n	800ac0c <_svfprintf_r+0xc54>
 800ac9c:	200f      	movs	r0, #15
 800ac9e:	ab58      	add	r3, sp, #352	; 0x160
 800aca0:	9308      	str	r3, [sp, #32]
 800aca2:	9b08      	ldr	r3, [sp, #32]
 800aca4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800aca6:	3b01      	subs	r3, #1
 800aca8:	9308      	str	r3, [sp, #32]
 800acaa:	9b06      	ldr	r3, [sp, #24]
 800acac:	4003      	ands	r3, r0
 800acae:	5cd3      	ldrb	r3, [r2, r3]
 800acb0:	9a08      	ldr	r2, [sp, #32]
 800acb2:	7013      	strb	r3, [r2, #0]
 800acb4:	9b07      	ldr	r3, [sp, #28]
 800acb6:	0719      	lsls	r1, r3, #28
 800acb8:	9b06      	ldr	r3, [sp, #24]
 800acba:	091a      	lsrs	r2, r3, #4
 800acbc:	9b07      	ldr	r3, [sp, #28]
 800acbe:	4311      	orrs	r1, r2
 800acc0:	091b      	lsrs	r3, r3, #4
 800acc2:	9307      	str	r3, [sp, #28]
 800acc4:	000b      	movs	r3, r1
 800acc6:	9a07      	ldr	r2, [sp, #28]
 800acc8:	9106      	str	r1, [sp, #24]
 800acca:	4313      	orrs	r3, r2
 800accc:	d1e9      	bne.n	800aca2 <_svfprintf_r+0xcea>
 800acce:	e7d2      	b.n	800ac76 <_svfprintf_r+0xcbe>
 800acd0:	aa58      	add	r2, sp, #352	; 0x160
 800acd2:	9208      	str	r2, [sp, #32]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1ce      	bne.n	800ac76 <_svfprintf_r+0xcbe>
 800acd8:	07f6      	lsls	r6, r6, #31
 800acda:	d5cc      	bpl.n	800ac76 <_svfprintf_r+0xcbe>
 800acdc:	aa1e      	add	r2, sp, #120	; 0x78
 800acde:	33e7      	adds	r3, #231	; 0xe7
 800ace0:	189b      	adds	r3, r3, r2
 800ace2:	2230      	movs	r2, #48	; 0x30
 800ace4:	e789      	b.n	800abfa <_svfprintf_r+0xc42>
 800ace6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d100      	bne.n	800acee <_svfprintf_r+0xd36>
 800acec:	e364      	b.n	800b3b8 <_svfprintf_r+0x1400>
 800acee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acf0:	211b      	movs	r1, #27
 800acf2:	ab3f      	add	r3, sp, #252	; 0xfc
 800acf4:	701a      	strb	r2, [r3, #0]
 800acf6:	2200      	movs	r2, #0
 800acf8:	a81e      	add	r0, sp, #120	; 0x78
 800acfa:	1809      	adds	r1, r1, r0
 800acfc:	700a      	strb	r2, [r1, #0]
 800acfe:	940d      	str	r4, [sp, #52]	; 0x34
 800ad00:	f7ff fabd 	bl	800a27e <_svfprintf_r+0x2c6>
 800ad04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad06:	f7ff fb44 	bl	800a392 <_svfprintf_r+0x3da>
 800ad0a:	2010      	movs	r0, #16
 800ad0c:	1812      	adds	r2, r2, r0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	922e      	str	r2, [sp, #184]	; 0xb8
 800ad12:	932d      	str	r3, [sp, #180]	; 0xb4
 800ad14:	2b07      	cmp	r3, #7
 800ad16:	dd08      	ble.n	800ad2a <_svfprintf_r+0xd72>
 800ad18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad1c:	aa2c      	add	r2, sp, #176	; 0xb0
 800ad1e:	f003 fa61 	bl	800e1e4 <__ssprint_r>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d000      	beq.n	800ad28 <_svfprintf_r+0xd70>
 800ad26:	e326      	b.n	800b376 <_svfprintf_r+0x13be>
 800ad28:	a92f      	add	r1, sp, #188	; 0xbc
 800ad2a:	000f      	movs	r7, r1
 800ad2c:	3c10      	subs	r4, #16
 800ad2e:	e4c5      	b.n	800a6bc <_svfprintf_r+0x704>
 800ad30:	2010      	movs	r0, #16
 800ad32:	1812      	adds	r2, r2, r0
 800ad34:	6078      	str	r0, [r7, #4]
 800ad36:	922e      	str	r2, [sp, #184]	; 0xb8
 800ad38:	932d      	str	r3, [sp, #180]	; 0xb4
 800ad3a:	2b07      	cmp	r3, #7
 800ad3c:	dd08      	ble.n	800ad50 <_svfprintf_r+0xd98>
 800ad3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad40:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad42:	aa2c      	add	r2, sp, #176	; 0xb0
 800ad44:	f003 fa4e 	bl	800e1e4 <__ssprint_r>
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	d000      	beq.n	800ad4e <_svfprintf_r+0xd96>
 800ad4c:	e313      	b.n	800b376 <_svfprintf_r+0x13be>
 800ad4e:	a92f      	add	r1, sp, #188	; 0xbc
 800ad50:	000f      	movs	r7, r1
 800ad52:	3c10      	subs	r4, #16
 800ad54:	e50b      	b.n	800a76e <_svfprintf_r+0x7b6>
 800ad56:	2010      	movs	r0, #16
 800ad58:	1812      	adds	r2, r2, r0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	922e      	str	r2, [sp, #184]	; 0xb8
 800ad5e:	932d      	str	r3, [sp, #180]	; 0xb4
 800ad60:	2b07      	cmp	r3, #7
 800ad62:	dd08      	ble.n	800ad76 <_svfprintf_r+0xdbe>
 800ad64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad66:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad68:	aa2c      	add	r2, sp, #176	; 0xb0
 800ad6a:	f003 fa3b 	bl	800e1e4 <__ssprint_r>
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	d000      	beq.n	800ad74 <_svfprintf_r+0xdbc>
 800ad72:	e300      	b.n	800b376 <_svfprintf_r+0x13be>
 800ad74:	a92f      	add	r1, sp, #188	; 0xbc
 800ad76:	000f      	movs	r7, r1
 800ad78:	3c10      	subs	r4, #16
 800ad7a:	e518      	b.n	800a7ae <_svfprintf_r+0x7f6>
 800ad7c:	fffffbff 	.word	0xfffffbff
 800ad80:	00007830 	.word	0x00007830
 800ad84:	0800fbbc 	.word	0x0800fbbc
 800ad88:	0800fbcd 	.word	0x0800fbcd
 800ad8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad8e:	2b65      	cmp	r3, #101	; 0x65
 800ad90:	dc00      	bgt.n	800ad94 <_svfprintf_r+0xddc>
 800ad92:	e241      	b.n	800b218 <_svfprintf_r+0x1260>
 800ad94:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ad96:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ad98:	2200      	movs	r2, #0
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	f7f5 fb54 	bl	8000448 <__aeabi_dcmpeq>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	d077      	beq.n	800ae94 <_svfprintf_r+0xedc>
 800ada4:	4bca      	ldr	r3, [pc, #808]	; (800b0d0 <_svfprintf_r+0x1118>)
 800ada6:	603b      	str	r3, [r7, #0]
 800ada8:	2301      	movs	r3, #1
 800adaa:	607b      	str	r3, [r7, #4]
 800adac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adae:	3708      	adds	r7, #8
 800adb0:	3301      	adds	r3, #1
 800adb2:	932e      	str	r3, [sp, #184]	; 0xb8
 800adb4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800adb6:	3301      	adds	r3, #1
 800adb8:	932d      	str	r3, [sp, #180]	; 0xb4
 800adba:	2b07      	cmp	r3, #7
 800adbc:	dd08      	ble.n	800add0 <_svfprintf_r+0xe18>
 800adbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800adc0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800adc2:	aa2c      	add	r2, sp, #176	; 0xb0
 800adc4:	f003 fa0e 	bl	800e1e4 <__ssprint_r>
 800adc8:	2800      	cmp	r0, #0
 800adca:	d000      	beq.n	800adce <_svfprintf_r+0xe16>
 800adcc:	e2d3      	b.n	800b376 <_svfprintf_r+0x13be>
 800adce:	af2f      	add	r7, sp, #188	; 0xbc
 800add0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800add2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800add4:	4293      	cmp	r3, r2
 800add6:	db01      	blt.n	800addc <_svfprintf_r+0xe24>
 800add8:	07f3      	lsls	r3, r6, #31
 800adda:	d51b      	bpl.n	800ae14 <_svfprintf_r+0xe5c>
 800addc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800adde:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ade0:	603b      	str	r3, [r7, #0]
 800ade2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ade4:	607b      	str	r3, [r7, #4]
 800ade6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ade8:	3708      	adds	r7, #8
 800adea:	189b      	adds	r3, r3, r2
 800adec:	932e      	str	r3, [sp, #184]	; 0xb8
 800adee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800adf0:	3301      	adds	r3, #1
 800adf2:	932d      	str	r3, [sp, #180]	; 0xb4
 800adf4:	2b07      	cmp	r3, #7
 800adf6:	dd08      	ble.n	800ae0a <_svfprintf_r+0xe52>
 800adf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800adfa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800adfc:	aa2c      	add	r2, sp, #176	; 0xb0
 800adfe:	f003 f9f1 	bl	800e1e4 <__ssprint_r>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d000      	beq.n	800ae08 <_svfprintf_r+0xe50>
 800ae06:	e2b6      	b.n	800b376 <_svfprintf_r+0x13be>
 800ae08:	af2f      	add	r7, sp, #188	; 0xbc
 800ae0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae0c:	2510      	movs	r5, #16
 800ae0e:	1e5c      	subs	r4, r3, #1
 800ae10:	2c00      	cmp	r4, #0
 800ae12:	dc2e      	bgt.n	800ae72 <_svfprintf_r+0xeba>
 800ae14:	0776      	lsls	r6, r6, #29
 800ae16:	d500      	bpl.n	800ae1a <_svfprintf_r+0xe62>
 800ae18:	e290      	b.n	800b33c <_svfprintf_r+0x1384>
 800ae1a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ae1c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	da00      	bge.n	800ae24 <_svfprintf_r+0xe6c>
 800ae22:	0013      	movs	r3, r2
 800ae24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae26:	18d3      	adds	r3, r2, r3
 800ae28:	9317      	str	r3, [sp, #92]	; 0x5c
 800ae2a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d007      	beq.n	800ae40 <_svfprintf_r+0xe88>
 800ae30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae32:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae34:	aa2c      	add	r2, sp, #176	; 0xb0
 800ae36:	f003 f9d5 	bl	800e1e4 <__ssprint_r>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d000      	beq.n	800ae40 <_svfprintf_r+0xe88>
 800ae3e:	e29a      	b.n	800b376 <_svfprintf_r+0x13be>
 800ae40:	2300      	movs	r3, #0
 800ae42:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d000      	beq.n	800ae4c <_svfprintf_r+0xe94>
 800ae4a:	e2b0      	b.n	800b3ae <_svfprintf_r+0x13f6>
 800ae4c:	af2f      	add	r7, sp, #188	; 0xbc
 800ae4e:	e5dc      	b.n	800aa0a <_svfprintf_r+0xa52>
 800ae50:	3210      	adds	r2, #16
 800ae52:	607d      	str	r5, [r7, #4]
 800ae54:	922e      	str	r2, [sp, #184]	; 0xb8
 800ae56:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae58:	2b07      	cmp	r3, #7
 800ae5a:	dd08      	ble.n	800ae6e <_svfprintf_r+0xeb6>
 800ae5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae60:	aa2c      	add	r2, sp, #176	; 0xb0
 800ae62:	f003 f9bf 	bl	800e1e4 <__ssprint_r>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d000      	beq.n	800ae6c <_svfprintf_r+0xeb4>
 800ae6a:	e284      	b.n	800b376 <_svfprintf_r+0x13be>
 800ae6c:	a92f      	add	r1, sp, #188	; 0xbc
 800ae6e:	000f      	movs	r7, r1
 800ae70:	3c10      	subs	r4, #16
 800ae72:	0039      	movs	r1, r7
 800ae74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ae76:	4897      	ldr	r0, [pc, #604]	; (800b0d4 <_svfprintf_r+0x111c>)
 800ae78:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	3108      	adds	r1, #8
 800ae7e:	6038      	str	r0, [r7, #0]
 800ae80:	2c10      	cmp	r4, #16
 800ae82:	dce5      	bgt.n	800ae50 <_svfprintf_r+0xe98>
 800ae84:	607c      	str	r4, [r7, #4]
 800ae86:	18a4      	adds	r4, r4, r2
 800ae88:	942e      	str	r4, [sp, #184]	; 0xb8
 800ae8a:	000f      	movs	r7, r1
 800ae8c:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae8e:	2b07      	cmp	r3, #7
 800ae90:	ddc0      	ble.n	800ae14 <_svfprintf_r+0xe5c>
 800ae92:	e05f      	b.n	800af54 <_svfprintf_r+0xf9c>
 800ae94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	dc78      	bgt.n	800af8c <_svfprintf_r+0xfd4>
 800ae9a:	4b8d      	ldr	r3, [pc, #564]	; (800b0d0 <_svfprintf_r+0x1118>)
 800ae9c:	603b      	str	r3, [r7, #0]
 800ae9e:	2301      	movs	r3, #1
 800aea0:	607b      	str	r3, [r7, #4]
 800aea2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aea4:	3708      	adds	r7, #8
 800aea6:	3301      	adds	r3, #1
 800aea8:	932e      	str	r3, [sp, #184]	; 0xb8
 800aeaa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800aeac:	3301      	adds	r3, #1
 800aeae:	932d      	str	r3, [sp, #180]	; 0xb4
 800aeb0:	2b07      	cmp	r3, #7
 800aeb2:	dd08      	ble.n	800aec6 <_svfprintf_r+0xf0e>
 800aeb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aeb6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aeb8:	aa2c      	add	r2, sp, #176	; 0xb0
 800aeba:	f003 f993 	bl	800e1e4 <__ssprint_r>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d000      	beq.n	800aec4 <_svfprintf_r+0xf0c>
 800aec2:	e258      	b.n	800b376 <_svfprintf_r+0x13be>
 800aec4:	af2f      	add	r7, sp, #188	; 0xbc
 800aec6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aec8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aeca:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800aecc:	430b      	orrs	r3, r1
 800aece:	2101      	movs	r1, #1
 800aed0:	4031      	ands	r1, r6
 800aed2:	430b      	orrs	r3, r1
 800aed4:	d09e      	beq.n	800ae14 <_svfprintf_r+0xe5c>
 800aed6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800aed8:	603b      	str	r3, [r7, #0]
 800aeda:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aedc:	607b      	str	r3, [r7, #4]
 800aede:	189a      	adds	r2, r3, r2
 800aee0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800aee2:	922e      	str	r2, [sp, #184]	; 0xb8
 800aee4:	3301      	adds	r3, #1
 800aee6:	932d      	str	r3, [sp, #180]	; 0xb4
 800aee8:	3708      	adds	r7, #8
 800aeea:	2b07      	cmp	r3, #7
 800aeec:	dd08      	ble.n	800af00 <_svfprintf_r+0xf48>
 800aeee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aef0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aef2:	aa2c      	add	r2, sp, #176	; 0xb0
 800aef4:	f003 f976 	bl	800e1e4 <__ssprint_r>
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d000      	beq.n	800aefe <_svfprintf_r+0xf46>
 800aefc:	e23b      	b.n	800b376 <_svfprintf_r+0x13be>
 800aefe:	af2f      	add	r7, sp, #188	; 0xbc
 800af00:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800af02:	2c00      	cmp	r4, #0
 800af04:	da19      	bge.n	800af3a <_svfprintf_r+0xf82>
 800af06:	0038      	movs	r0, r7
 800af08:	2510      	movs	r5, #16
 800af0a:	4264      	negs	r4, r4
 800af0c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800af0e:	4a71      	ldr	r2, [pc, #452]	; (800b0d4 <_svfprintf_r+0x111c>)
 800af10:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800af12:	3101      	adds	r1, #1
 800af14:	3708      	adds	r7, #8
 800af16:	6002      	str	r2, [r0, #0]
 800af18:	2c10      	cmp	r4, #16
 800af1a:	dc25      	bgt.n	800af68 <_svfprintf_r+0xfb0>
 800af1c:	6044      	str	r4, [r0, #4]
 800af1e:	18e4      	adds	r4, r4, r3
 800af20:	942e      	str	r4, [sp, #184]	; 0xb8
 800af22:	912d      	str	r1, [sp, #180]	; 0xb4
 800af24:	2907      	cmp	r1, #7
 800af26:	dd08      	ble.n	800af3a <_svfprintf_r+0xf82>
 800af28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af2c:	aa2c      	add	r2, sp, #176	; 0xb0
 800af2e:	f003 f959 	bl	800e1e4 <__ssprint_r>
 800af32:	2800      	cmp	r0, #0
 800af34:	d000      	beq.n	800af38 <_svfprintf_r+0xf80>
 800af36:	e21e      	b.n	800b376 <_svfprintf_r+0x13be>
 800af38:	af2f      	add	r7, sp, #188	; 0xbc
 800af3a:	9b08      	ldr	r3, [sp, #32]
 800af3c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800af3e:	603b      	str	r3, [r7, #0]
 800af40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af42:	18d2      	adds	r2, r2, r3
 800af44:	922e      	str	r2, [sp, #184]	; 0xb8
 800af46:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800af48:	607b      	str	r3, [r7, #4]
 800af4a:	3201      	adds	r2, #1
 800af4c:	922d      	str	r2, [sp, #180]	; 0xb4
 800af4e:	2a07      	cmp	r2, #7
 800af50:	dc00      	bgt.n	800af54 <_svfprintf_r+0xf9c>
 800af52:	e45b      	b.n	800a80c <_svfprintf_r+0x854>
 800af54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af56:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af58:	aa2c      	add	r2, sp, #176	; 0xb0
 800af5a:	f003 f943 	bl	800e1e4 <__ssprint_r>
 800af5e:	2800      	cmp	r0, #0
 800af60:	d000      	beq.n	800af64 <_svfprintf_r+0xfac>
 800af62:	e208      	b.n	800b376 <_svfprintf_r+0x13be>
 800af64:	af2f      	add	r7, sp, #188	; 0xbc
 800af66:	e755      	b.n	800ae14 <_svfprintf_r+0xe5c>
 800af68:	3310      	adds	r3, #16
 800af6a:	6045      	str	r5, [r0, #4]
 800af6c:	932e      	str	r3, [sp, #184]	; 0xb8
 800af6e:	912d      	str	r1, [sp, #180]	; 0xb4
 800af70:	2907      	cmp	r1, #7
 800af72:	dd08      	ble.n	800af86 <_svfprintf_r+0xfce>
 800af74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af76:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af78:	aa2c      	add	r2, sp, #176	; 0xb0
 800af7a:	f003 f933 	bl	800e1e4 <__ssprint_r>
 800af7e:	2800      	cmp	r0, #0
 800af80:	d000      	beq.n	800af84 <_svfprintf_r+0xfcc>
 800af82:	e1f8      	b.n	800b376 <_svfprintf_r+0x13be>
 800af84:	af2f      	add	r7, sp, #188	; 0xbc
 800af86:	0038      	movs	r0, r7
 800af88:	3c10      	subs	r4, #16
 800af8a:	e7bf      	b.n	800af0c <_svfprintf_r+0xf54>
 800af8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af8e:	002c      	movs	r4, r5
 800af90:	429d      	cmp	r5, r3
 800af92:	dd00      	ble.n	800af96 <_svfprintf_r+0xfde>
 800af94:	001c      	movs	r4, r3
 800af96:	2c00      	cmp	r4, #0
 800af98:	dd14      	ble.n	800afc4 <_svfprintf_r+0x100c>
 800af9a:	9b08      	ldr	r3, [sp, #32]
 800af9c:	607c      	str	r4, [r7, #4]
 800af9e:	603b      	str	r3, [r7, #0]
 800afa0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800afa2:	3708      	adds	r7, #8
 800afa4:	18e3      	adds	r3, r4, r3
 800afa6:	932e      	str	r3, [sp, #184]	; 0xb8
 800afa8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800afaa:	3301      	adds	r3, #1
 800afac:	932d      	str	r3, [sp, #180]	; 0xb4
 800afae:	2b07      	cmp	r3, #7
 800afb0:	dd08      	ble.n	800afc4 <_svfprintf_r+0x100c>
 800afb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800afb6:	aa2c      	add	r2, sp, #176	; 0xb0
 800afb8:	f003 f914 	bl	800e1e4 <__ssprint_r>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	d000      	beq.n	800afc2 <_svfprintf_r+0x100a>
 800afc0:	e1d9      	b.n	800b376 <_svfprintf_r+0x13be>
 800afc2:	af2f      	add	r7, sp, #188	; 0xbc
 800afc4:	43e3      	mvns	r3, r4
 800afc6:	17db      	asrs	r3, r3, #31
 800afc8:	401c      	ands	r4, r3
 800afca:	1b2c      	subs	r4, r5, r4
 800afcc:	2c00      	cmp	r4, #0
 800afce:	dd18      	ble.n	800b002 <_svfprintf_r+0x104a>
 800afd0:	0039      	movs	r1, r7
 800afd2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800afd4:	483f      	ldr	r0, [pc, #252]	; (800b0d4 <_svfprintf_r+0x111c>)
 800afd6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800afd8:	3301      	adds	r3, #1
 800afda:	3108      	adds	r1, #8
 800afdc:	6038      	str	r0, [r7, #0]
 800afde:	2c10      	cmp	r4, #16
 800afe0:	dc7a      	bgt.n	800b0d8 <_svfprintf_r+0x1120>
 800afe2:	607c      	str	r4, [r7, #4]
 800afe4:	18a4      	adds	r4, r4, r2
 800afe6:	000f      	movs	r7, r1
 800afe8:	942e      	str	r4, [sp, #184]	; 0xb8
 800afea:	932d      	str	r3, [sp, #180]	; 0xb4
 800afec:	2b07      	cmp	r3, #7
 800afee:	dd08      	ble.n	800b002 <_svfprintf_r+0x104a>
 800aff0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aff2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aff4:	aa2c      	add	r2, sp, #176	; 0xb0
 800aff6:	f003 f8f5 	bl	800e1e4 <__ssprint_r>
 800affa:	2800      	cmp	r0, #0
 800affc:	d000      	beq.n	800b000 <_svfprintf_r+0x1048>
 800affe:	e1ba      	b.n	800b376 <_svfprintf_r+0x13be>
 800b000:	af2f      	add	r7, sp, #188	; 0xbc
 800b002:	9b08      	ldr	r3, [sp, #32]
 800b004:	195d      	adds	r5, r3, r5
 800b006:	0573      	lsls	r3, r6, #21
 800b008:	d50b      	bpl.n	800b022 <_svfprintf_r+0x106a>
 800b00a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d176      	bne.n	800b0fe <_svfprintf_r+0x1146>
 800b010:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b012:	2b00      	cmp	r3, #0
 800b014:	d176      	bne.n	800b104 <_svfprintf_r+0x114c>
 800b016:	9b08      	ldr	r3, [sp, #32]
 800b018:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b01a:	189b      	adds	r3, r3, r2
 800b01c:	429d      	cmp	r5, r3
 800b01e:	d900      	bls.n	800b022 <_svfprintf_r+0x106a>
 800b020:	001d      	movs	r5, r3
 800b022:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b024:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b026:	4293      	cmp	r3, r2
 800b028:	db01      	blt.n	800b02e <_svfprintf_r+0x1076>
 800b02a:	07f3      	lsls	r3, r6, #31
 800b02c:	d516      	bpl.n	800b05c <_svfprintf_r+0x10a4>
 800b02e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b030:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b032:	603b      	str	r3, [r7, #0]
 800b034:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b036:	607b      	str	r3, [r7, #4]
 800b038:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b03a:	3708      	adds	r7, #8
 800b03c:	189b      	adds	r3, r3, r2
 800b03e:	932e      	str	r3, [sp, #184]	; 0xb8
 800b040:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b042:	3301      	adds	r3, #1
 800b044:	932d      	str	r3, [sp, #180]	; 0xb4
 800b046:	2b07      	cmp	r3, #7
 800b048:	dd08      	ble.n	800b05c <_svfprintf_r+0x10a4>
 800b04a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b04c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b04e:	aa2c      	add	r2, sp, #176	; 0xb0
 800b050:	f003 f8c8 	bl	800e1e4 <__ssprint_r>
 800b054:	2800      	cmp	r0, #0
 800b056:	d000      	beq.n	800b05a <_svfprintf_r+0x10a2>
 800b058:	e18d      	b.n	800b376 <_svfprintf_r+0x13be>
 800b05a:	af2f      	add	r7, sp, #188	; 0xbc
 800b05c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b05e:	9b08      	ldr	r3, [sp, #32]
 800b060:	4694      	mov	ip, r2
 800b062:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800b064:	4463      	add	r3, ip
 800b066:	1b5b      	subs	r3, r3, r5
 800b068:	1b14      	subs	r4, r2, r4
 800b06a:	429c      	cmp	r4, r3
 800b06c:	dd00      	ble.n	800b070 <_svfprintf_r+0x10b8>
 800b06e:	001c      	movs	r4, r3
 800b070:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b072:	2c00      	cmp	r4, #0
 800b074:	dd12      	ble.n	800b09c <_svfprintf_r+0x10e4>
 800b076:	18e3      	adds	r3, r4, r3
 800b078:	932e      	str	r3, [sp, #184]	; 0xb8
 800b07a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b07c:	603d      	str	r5, [r7, #0]
 800b07e:	3301      	adds	r3, #1
 800b080:	607c      	str	r4, [r7, #4]
 800b082:	932d      	str	r3, [sp, #180]	; 0xb4
 800b084:	3708      	adds	r7, #8
 800b086:	2b07      	cmp	r3, #7
 800b088:	dd08      	ble.n	800b09c <_svfprintf_r+0x10e4>
 800b08a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b08c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b08e:	aa2c      	add	r2, sp, #176	; 0xb0
 800b090:	f003 f8a8 	bl	800e1e4 <__ssprint_r>
 800b094:	2800      	cmp	r0, #0
 800b096:	d000      	beq.n	800b09a <_svfprintf_r+0x10e2>
 800b098:	e16d      	b.n	800b376 <_svfprintf_r+0x13be>
 800b09a:	af2f      	add	r7, sp, #188	; 0xbc
 800b09c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b09e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b0a0:	2510      	movs	r5, #16
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	43e2      	mvns	r2, r4
 800b0a6:	17d2      	asrs	r2, r2, #31
 800b0a8:	4014      	ands	r4, r2
 800b0aa:	1b1c      	subs	r4, r3, r4
 800b0ac:	2c00      	cmp	r4, #0
 800b0ae:	dc00      	bgt.n	800b0b2 <_svfprintf_r+0x10fa>
 800b0b0:	e6b0      	b.n	800ae14 <_svfprintf_r+0xe5c>
 800b0b2:	0039      	movs	r1, r7
 800b0b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b0b6:	4807      	ldr	r0, [pc, #28]	; (800b0d4 <_svfprintf_r+0x111c>)
 800b0b8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	3108      	adds	r1, #8
 800b0be:	6038      	str	r0, [r7, #0]
 800b0c0:	2c10      	cmp	r4, #16
 800b0c2:	dd00      	ble.n	800b0c6 <_svfprintf_r+0x110e>
 800b0c4:	e096      	b.n	800b1f4 <_svfprintf_r+0x123c>
 800b0c6:	1912      	adds	r2, r2, r4
 800b0c8:	607c      	str	r4, [r7, #4]
 800b0ca:	922e      	str	r2, [sp, #184]	; 0xb8
 800b0cc:	e6dd      	b.n	800ae8a <_svfprintf_r+0xed2>
 800b0ce:	46c0      	nop			; (mov r8, r8)
 800b0d0:	0800fbde 	.word	0x0800fbde
 800b0d4:	0800fbf0 	.word	0x0800fbf0
 800b0d8:	2010      	movs	r0, #16
 800b0da:	1812      	adds	r2, r2, r0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	922e      	str	r2, [sp, #184]	; 0xb8
 800b0e0:	932d      	str	r3, [sp, #180]	; 0xb4
 800b0e2:	2b07      	cmp	r3, #7
 800b0e4:	dd08      	ble.n	800b0f8 <_svfprintf_r+0x1140>
 800b0e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b0ea:	aa2c      	add	r2, sp, #176	; 0xb0
 800b0ec:	f003 f87a 	bl	800e1e4 <__ssprint_r>
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	d000      	beq.n	800b0f6 <_svfprintf_r+0x113e>
 800b0f4:	e13f      	b.n	800b376 <_svfprintf_r+0x13be>
 800b0f6:	a92f      	add	r1, sp, #188	; 0xbc
 800b0f8:	000f      	movs	r7, r1
 800b0fa:	3c10      	subs	r4, #16
 800b0fc:	e768      	b.n	800afd0 <_svfprintf_r+0x1018>
 800b0fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b100:	2b00      	cmp	r3, #0
 800b102:	d05d      	beq.n	800b1c0 <_svfprintf_r+0x1208>
 800b104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b106:	3b01      	subs	r3, #1
 800b108:	9310      	str	r3, [sp, #64]	; 0x40
 800b10a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b10c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b10e:	603b      	str	r3, [r7, #0]
 800b110:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b112:	607b      	str	r3, [r7, #4]
 800b114:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b116:	3708      	adds	r7, #8
 800b118:	189b      	adds	r3, r3, r2
 800b11a:	932e      	str	r3, [sp, #184]	; 0xb8
 800b11c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b11e:	3301      	adds	r3, #1
 800b120:	932d      	str	r3, [sp, #180]	; 0xb4
 800b122:	2b07      	cmp	r3, #7
 800b124:	dd08      	ble.n	800b138 <_svfprintf_r+0x1180>
 800b126:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b128:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b12a:	aa2c      	add	r2, sp, #176	; 0xb0
 800b12c:	f003 f85a 	bl	800e1e4 <__ssprint_r>
 800b130:	2800      	cmp	r0, #0
 800b132:	d000      	beq.n	800b136 <_svfprintf_r+0x117e>
 800b134:	e11f      	b.n	800b376 <_svfprintf_r+0x13be>
 800b136:	af2f      	add	r7, sp, #188	; 0xbc
 800b138:	9b08      	ldr	r3, [sp, #32]
 800b13a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b13c:	189c      	adds	r4, r3, r2
 800b13e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b140:	1b64      	subs	r4, r4, r5
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	429c      	cmp	r4, r3
 800b146:	dd00      	ble.n	800b14a <_svfprintf_r+0x1192>
 800b148:	001c      	movs	r4, r3
 800b14a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b14c:	2c00      	cmp	r4, #0
 800b14e:	dd12      	ble.n	800b176 <_svfprintf_r+0x11be>
 800b150:	18e3      	adds	r3, r4, r3
 800b152:	932e      	str	r3, [sp, #184]	; 0xb8
 800b154:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b156:	603d      	str	r5, [r7, #0]
 800b158:	3301      	adds	r3, #1
 800b15a:	607c      	str	r4, [r7, #4]
 800b15c:	932d      	str	r3, [sp, #180]	; 0xb4
 800b15e:	3708      	adds	r7, #8
 800b160:	2b07      	cmp	r3, #7
 800b162:	dd08      	ble.n	800b176 <_svfprintf_r+0x11be>
 800b164:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b166:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b168:	aa2c      	add	r2, sp, #176	; 0xb0
 800b16a:	f003 f83b 	bl	800e1e4 <__ssprint_r>
 800b16e:	2800      	cmp	r0, #0
 800b170:	d000      	beq.n	800b174 <_svfprintf_r+0x11bc>
 800b172:	e100      	b.n	800b376 <_svfprintf_r+0x13be>
 800b174:	af2f      	add	r7, sp, #188	; 0xbc
 800b176:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b178:	781a      	ldrb	r2, [r3, #0]
 800b17a:	43e3      	mvns	r3, r4
 800b17c:	17db      	asrs	r3, r3, #31
 800b17e:	401c      	ands	r4, r3
 800b180:	1b14      	subs	r4, r2, r4
 800b182:	2c00      	cmp	r4, #0
 800b184:	dd18      	ble.n	800b1b8 <_svfprintf_r+0x1200>
 800b186:	0039      	movs	r1, r7
 800b188:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b18a:	48aa      	ldr	r0, [pc, #680]	; (800b434 <_svfprintf_r+0x147c>)
 800b18c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b18e:	3301      	adds	r3, #1
 800b190:	3108      	adds	r1, #8
 800b192:	6038      	str	r0, [r7, #0]
 800b194:	2c10      	cmp	r4, #16
 800b196:	dc1a      	bgt.n	800b1ce <_svfprintf_r+0x1216>
 800b198:	1912      	adds	r2, r2, r4
 800b19a:	607c      	str	r4, [r7, #4]
 800b19c:	922e      	str	r2, [sp, #184]	; 0xb8
 800b19e:	000f      	movs	r7, r1
 800b1a0:	932d      	str	r3, [sp, #180]	; 0xb4
 800b1a2:	2b07      	cmp	r3, #7
 800b1a4:	dd08      	ble.n	800b1b8 <_svfprintf_r+0x1200>
 800b1a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b1aa:	aa2c      	add	r2, sp, #176	; 0xb0
 800b1ac:	f003 f81a 	bl	800e1e4 <__ssprint_r>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d000      	beq.n	800b1b6 <_svfprintf_r+0x11fe>
 800b1b4:	e0df      	b.n	800b376 <_svfprintf_r+0x13be>
 800b1b6:	af2f      	add	r7, sp, #188	; 0xbc
 800b1b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	18ed      	adds	r5, r5, r3
 800b1be:	e724      	b.n	800b00a <_svfprintf_r+0x1052>
 800b1c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	9312      	str	r3, [sp, #72]	; 0x48
 800b1c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	9311      	str	r3, [sp, #68]	; 0x44
 800b1cc:	e79d      	b.n	800b10a <_svfprintf_r+0x1152>
 800b1ce:	2010      	movs	r0, #16
 800b1d0:	1812      	adds	r2, r2, r0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	922e      	str	r2, [sp, #184]	; 0xb8
 800b1d6:	932d      	str	r3, [sp, #180]	; 0xb4
 800b1d8:	2b07      	cmp	r3, #7
 800b1da:	dd08      	ble.n	800b1ee <_svfprintf_r+0x1236>
 800b1dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1de:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b1e0:	aa2c      	add	r2, sp, #176	; 0xb0
 800b1e2:	f002 ffff 	bl	800e1e4 <__ssprint_r>
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	d000      	beq.n	800b1ec <_svfprintf_r+0x1234>
 800b1ea:	e0c4      	b.n	800b376 <_svfprintf_r+0x13be>
 800b1ec:	a92f      	add	r1, sp, #188	; 0xbc
 800b1ee:	000f      	movs	r7, r1
 800b1f0:	3c10      	subs	r4, #16
 800b1f2:	e7c8      	b.n	800b186 <_svfprintf_r+0x11ce>
 800b1f4:	3210      	adds	r2, #16
 800b1f6:	607d      	str	r5, [r7, #4]
 800b1f8:	922e      	str	r2, [sp, #184]	; 0xb8
 800b1fa:	932d      	str	r3, [sp, #180]	; 0xb4
 800b1fc:	2b07      	cmp	r3, #7
 800b1fe:	dd08      	ble.n	800b212 <_svfprintf_r+0x125a>
 800b200:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b202:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b204:	aa2c      	add	r2, sp, #176	; 0xb0
 800b206:	f002 ffed 	bl	800e1e4 <__ssprint_r>
 800b20a:	2800      	cmp	r0, #0
 800b20c:	d000      	beq.n	800b210 <_svfprintf_r+0x1258>
 800b20e:	e0b2      	b.n	800b376 <_svfprintf_r+0x13be>
 800b210:	a92f      	add	r1, sp, #188	; 0xbc
 800b212:	000f      	movs	r7, r1
 800b214:	3c10      	subs	r4, #16
 800b216:	e74c      	b.n	800b0b2 <_svfprintf_r+0x10fa>
 800b218:	003c      	movs	r4, r7
 800b21a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b21c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b21e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b220:	3101      	adds	r1, #1
 800b222:	3301      	adds	r3, #1
 800b224:	3408      	adds	r4, #8
 800b226:	2a01      	cmp	r2, #1
 800b228:	dc03      	bgt.n	800b232 <_svfprintf_r+0x127a>
 800b22a:	2201      	movs	r2, #1
 800b22c:	4216      	tst	r6, r2
 800b22e:	d100      	bne.n	800b232 <_svfprintf_r+0x127a>
 800b230:	e07f      	b.n	800b332 <_svfprintf_r+0x137a>
 800b232:	9a08      	ldr	r2, [sp, #32]
 800b234:	912e      	str	r1, [sp, #184]	; 0xb8
 800b236:	603a      	str	r2, [r7, #0]
 800b238:	2201      	movs	r2, #1
 800b23a:	932d      	str	r3, [sp, #180]	; 0xb4
 800b23c:	607a      	str	r2, [r7, #4]
 800b23e:	2b07      	cmp	r3, #7
 800b240:	dd08      	ble.n	800b254 <_svfprintf_r+0x129c>
 800b242:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b244:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b246:	aa2c      	add	r2, sp, #176	; 0xb0
 800b248:	f002 ffcc 	bl	800e1e4 <__ssprint_r>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d000      	beq.n	800b252 <_svfprintf_r+0x129a>
 800b250:	e091      	b.n	800b376 <_svfprintf_r+0x13be>
 800b252:	ac2f      	add	r4, sp, #188	; 0xbc
 800b254:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b256:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b25c:	6063      	str	r3, [r4, #4]
 800b25e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b260:	3408      	adds	r4, #8
 800b262:	189b      	adds	r3, r3, r2
 800b264:	932e      	str	r3, [sp, #184]	; 0xb8
 800b266:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b268:	3301      	adds	r3, #1
 800b26a:	932d      	str	r3, [sp, #180]	; 0xb4
 800b26c:	2b07      	cmp	r3, #7
 800b26e:	dd07      	ble.n	800b280 <_svfprintf_r+0x12c8>
 800b270:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b272:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b274:	aa2c      	add	r2, sp, #176	; 0xb0
 800b276:	f002 ffb5 	bl	800e1e4 <__ssprint_r>
 800b27a:	2800      	cmp	r0, #0
 800b27c:	d17b      	bne.n	800b376 <_svfprintf_r+0x13be>
 800b27e:	ac2f      	add	r4, sp, #188	; 0xbc
 800b280:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b282:	2200      	movs	r2, #0
 800b284:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b286:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b288:	9309      	str	r3, [sp, #36]	; 0x24
 800b28a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b28c:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800b28e:	1e5d      	subs	r5, r3, #1
 800b290:	2300      	movs	r3, #0
 800b292:	f7f5 f8d9 	bl	8000448 <__aeabi_dcmpeq>
 800b296:	2800      	cmp	r0, #0
 800b298:	d126      	bne.n	800b2e8 <_svfprintf_r+0x1330>
 800b29a:	9b08      	ldr	r3, [sp, #32]
 800b29c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b29e:	3301      	adds	r3, #1
 800b2a0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b2a2:	6023      	str	r3, [r4, #0]
 800b2a4:	1e7b      	subs	r3, r7, #1
 800b2a6:	3201      	adds	r2, #1
 800b2a8:	185b      	adds	r3, r3, r1
 800b2aa:	6065      	str	r5, [r4, #4]
 800b2ac:	932e      	str	r3, [sp, #184]	; 0xb8
 800b2ae:	922d      	str	r2, [sp, #180]	; 0xb4
 800b2b0:	3408      	adds	r4, #8
 800b2b2:	2a07      	cmp	r2, #7
 800b2b4:	dd07      	ble.n	800b2c6 <_svfprintf_r+0x130e>
 800b2b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b2b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b2ba:	aa2c      	add	r2, sp, #176	; 0xb0
 800b2bc:	f002 ff92 	bl	800e1e4 <__ssprint_r>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d158      	bne.n	800b376 <_svfprintf_r+0x13be>
 800b2c4:	ac2f      	add	r4, sp, #188	; 0xbc
 800b2c6:	ab28      	add	r3, sp, #160	; 0xa0
 800b2c8:	6023      	str	r3, [r4, #0]
 800b2ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b2cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b2ce:	6063      	str	r3, [r4, #4]
 800b2d0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b2d2:	189b      	adds	r3, r3, r2
 800b2d4:	932e      	str	r3, [sp, #184]	; 0xb8
 800b2d6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b2d8:	3301      	adds	r3, #1
 800b2da:	932d      	str	r3, [sp, #180]	; 0xb4
 800b2dc:	2b07      	cmp	r3, #7
 800b2de:	dd00      	ble.n	800b2e2 <_svfprintf_r+0x132a>
 800b2e0:	e638      	b.n	800af54 <_svfprintf_r+0xf9c>
 800b2e2:	3408      	adds	r4, #8
 800b2e4:	0027      	movs	r7, r4
 800b2e6:	e595      	b.n	800ae14 <_svfprintf_r+0xe5c>
 800b2e8:	2710      	movs	r7, #16
 800b2ea:	2d00      	cmp	r5, #0
 800b2ec:	ddeb      	ble.n	800b2c6 <_svfprintf_r+0x130e>
 800b2ee:	0021      	movs	r1, r4
 800b2f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b2f2:	4850      	ldr	r0, [pc, #320]	; (800b434 <_svfprintf_r+0x147c>)
 800b2f4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	3108      	adds	r1, #8
 800b2fa:	6020      	str	r0, [r4, #0]
 800b2fc:	2d10      	cmp	r5, #16
 800b2fe:	dc07      	bgt.n	800b310 <_svfprintf_r+0x1358>
 800b300:	6065      	str	r5, [r4, #4]
 800b302:	000c      	movs	r4, r1
 800b304:	18ad      	adds	r5, r5, r2
 800b306:	952e      	str	r5, [sp, #184]	; 0xb8
 800b308:	932d      	str	r3, [sp, #180]	; 0xb4
 800b30a:	2b07      	cmp	r3, #7
 800b30c:	dddb      	ble.n	800b2c6 <_svfprintf_r+0x130e>
 800b30e:	e7d2      	b.n	800b2b6 <_svfprintf_r+0x12fe>
 800b310:	3210      	adds	r2, #16
 800b312:	6067      	str	r7, [r4, #4]
 800b314:	922e      	str	r2, [sp, #184]	; 0xb8
 800b316:	932d      	str	r3, [sp, #180]	; 0xb4
 800b318:	2b07      	cmp	r3, #7
 800b31a:	dd07      	ble.n	800b32c <_svfprintf_r+0x1374>
 800b31c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b31e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b320:	aa2c      	add	r2, sp, #176	; 0xb0
 800b322:	f002 ff5f 	bl	800e1e4 <__ssprint_r>
 800b326:	2800      	cmp	r0, #0
 800b328:	d125      	bne.n	800b376 <_svfprintf_r+0x13be>
 800b32a:	a92f      	add	r1, sp, #188	; 0xbc
 800b32c:	000c      	movs	r4, r1
 800b32e:	3d10      	subs	r5, #16
 800b330:	e7dd      	b.n	800b2ee <_svfprintf_r+0x1336>
 800b332:	9808      	ldr	r0, [sp, #32]
 800b334:	912e      	str	r1, [sp, #184]	; 0xb8
 800b336:	c705      	stmia	r7!, {r0, r2}
 800b338:	932d      	str	r3, [sp, #180]	; 0xb4
 800b33a:	e7e6      	b.n	800b30a <_svfprintf_r+0x1352>
 800b33c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b33e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b340:	2510      	movs	r5, #16
 800b342:	1a9c      	subs	r4, r3, r2
 800b344:	2c00      	cmp	r4, #0
 800b346:	dc00      	bgt.n	800b34a <_svfprintf_r+0x1392>
 800b348:	e567      	b.n	800ae1a <_svfprintf_r+0xe62>
 800b34a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b34c:	493a      	ldr	r1, [pc, #232]	; (800b438 <_svfprintf_r+0x1480>)
 800b34e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b350:	3301      	adds	r3, #1
 800b352:	6039      	str	r1, [r7, #0]
 800b354:	2c10      	cmp	r4, #16
 800b356:	dc19      	bgt.n	800b38c <_svfprintf_r+0x13d4>
 800b358:	607c      	str	r4, [r7, #4]
 800b35a:	18a4      	adds	r4, r4, r2
 800b35c:	942e      	str	r4, [sp, #184]	; 0xb8
 800b35e:	932d      	str	r3, [sp, #180]	; 0xb4
 800b360:	2b07      	cmp	r3, #7
 800b362:	dc00      	bgt.n	800b366 <_svfprintf_r+0x13ae>
 800b364:	e559      	b.n	800ae1a <_svfprintf_r+0xe62>
 800b366:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b368:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b36a:	aa2c      	add	r2, sp, #176	; 0xb0
 800b36c:	f002 ff3a 	bl	800e1e4 <__ssprint_r>
 800b370:	2800      	cmp	r0, #0
 800b372:	d100      	bne.n	800b376 <_svfprintf_r+0x13be>
 800b374:	e551      	b.n	800ae1a <_svfprintf_r+0xe62>
 800b376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d101      	bne.n	800b380 <_svfprintf_r+0x13c8>
 800b37c:	f7ff f845 	bl	800a40a <_svfprintf_r+0x452>
 800b380:	0019      	movs	r1, r3
 800b382:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b384:	f7fd fd80 	bl	8008e88 <_free_r>
 800b388:	f7ff f83f 	bl	800a40a <_svfprintf_r+0x452>
 800b38c:	3210      	adds	r2, #16
 800b38e:	607d      	str	r5, [r7, #4]
 800b390:	922e      	str	r2, [sp, #184]	; 0xb8
 800b392:	932d      	str	r3, [sp, #180]	; 0xb4
 800b394:	3708      	adds	r7, #8
 800b396:	2b07      	cmp	r3, #7
 800b398:	dd07      	ble.n	800b3aa <_svfprintf_r+0x13f2>
 800b39a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b39c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b39e:	aa2c      	add	r2, sp, #176	; 0xb0
 800b3a0:	f002 ff20 	bl	800e1e4 <__ssprint_r>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d1e6      	bne.n	800b376 <_svfprintf_r+0x13be>
 800b3a8:	af2f      	add	r7, sp, #188	; 0xbc
 800b3aa:	3c10      	subs	r4, #16
 800b3ac:	e7cd      	b.n	800b34a <_svfprintf_r+0x1392>
 800b3ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b3b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b3b2:	f7fd fd69 	bl	8008e88 <_free_r>
 800b3b6:	e549      	b.n	800ae4c <_svfprintf_r+0xe94>
 800b3b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d101      	bne.n	800b3c2 <_svfprintf_r+0x140a>
 800b3be:	f7ff f824 	bl	800a40a <_svfprintf_r+0x452>
 800b3c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b3c6:	aa2c      	add	r2, sp, #176	; 0xb0
 800b3c8:	f002 ff0c 	bl	800e1e4 <__ssprint_r>
 800b3cc:	f7ff f81d 	bl	800a40a <_svfprintf_r+0x452>
 800b3d0:	0034      	movs	r4, r6
 800b3d2:	2a00      	cmp	r2, #0
 800b3d4:	d101      	bne.n	800b3da <_svfprintf_r+0x1422>
 800b3d6:	f7fe ff8c 	bl	800a2f2 <_svfprintf_r+0x33a>
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d101      	bne.n	800b3e2 <_svfprintf_r+0x142a>
 800b3de:	f7ff fc01 	bl	800abe4 <_svfprintf_r+0xc2c>
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	d100      	bne.n	800b3e8 <_svfprintf_r+0x1430>
 800b3e6:	e459      	b.n	800ac9c <_svfprintf_r+0xce4>
 800b3e8:	2507      	movs	r5, #7
 800b3ea:	ab58      	add	r3, sp, #352	; 0x160
 800b3ec:	9308      	str	r3, [sp, #32]
 800b3ee:	9a08      	ldr	r2, [sp, #32]
 800b3f0:	0013      	movs	r3, r2
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	9308      	str	r3, [sp, #32]
 800b3f6:	9b06      	ldr	r3, [sp, #24]
 800b3f8:	9908      	ldr	r1, [sp, #32]
 800b3fa:	402b      	ands	r3, r5
 800b3fc:	3330      	adds	r3, #48	; 0x30
 800b3fe:	700b      	strb	r3, [r1, #0]
 800b400:	9907      	ldr	r1, [sp, #28]
 800b402:	074e      	lsls	r6, r1, #29
 800b404:	9906      	ldr	r1, [sp, #24]
 800b406:	08c8      	lsrs	r0, r1, #3
 800b408:	9907      	ldr	r1, [sp, #28]
 800b40a:	4306      	orrs	r6, r0
 800b40c:	08c9      	lsrs	r1, r1, #3
 800b40e:	9107      	str	r1, [sp, #28]
 800b410:	0031      	movs	r1, r6
 800b412:	9807      	ldr	r0, [sp, #28]
 800b414:	9606      	str	r6, [sp, #24]
 800b416:	4301      	orrs	r1, r0
 800b418:	d1e9      	bne.n	800b3ee <_svfprintf_r+0x1436>
 800b41a:	07e1      	lsls	r1, r4, #31
 800b41c:	d400      	bmi.n	800b420 <_svfprintf_r+0x1468>
 800b41e:	e42a      	b.n	800ac76 <_svfprintf_r+0xcbe>
 800b420:	2b30      	cmp	r3, #48	; 0x30
 800b422:	d100      	bne.n	800b426 <_svfprintf_r+0x146e>
 800b424:	e427      	b.n	800ac76 <_svfprintf_r+0xcbe>
 800b426:	2130      	movs	r1, #48	; 0x30
 800b428:	9b08      	ldr	r3, [sp, #32]
 800b42a:	3b01      	subs	r3, #1
 800b42c:	7019      	strb	r1, [r3, #0]
 800b42e:	1e93      	subs	r3, r2, #2
 800b430:	9308      	str	r3, [sp, #32]
 800b432:	e420      	b.n	800ac76 <_svfprintf_r+0xcbe>
 800b434:	0800fbf0 	.word	0x0800fbf0
 800b438:	0800fbe0 	.word	0x0800fbe0

0800b43c <__ssvfscanf_r>:
 800b43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b43e:	4ca7      	ldr	r4, [pc, #668]	; (800b6dc <__ssvfscanf_r+0x2a0>)
 800b440:	44a5      	add	sp, r4
 800b442:	af02      	add	r7, sp, #8
 800b444:	633b      	str	r3, [r7, #48]	; 0x30
 800b446:	000b      	movs	r3, r1
 800b448:	6378      	str	r0, [r7, #52]	; 0x34
 800b44a:	6479      	str	r1, [r7, #68]	; 0x44
 800b44c:	61ba      	str	r2, [r7, #24]
 800b44e:	220c      	movs	r2, #12
 800b450:	5e9a      	ldrsh	r2, [r3, r2]
 800b452:	2380      	movs	r3, #128	; 0x80
 800b454:	019b      	lsls	r3, r3, #6
 800b456:	421a      	tst	r2, r3
 800b458:	d105      	bne.n	800b466 <__ssvfscanf_r+0x2a>
 800b45a:	4313      	orrs	r3, r2
 800b45c:	818b      	strh	r3, [r1, #12]
 800b45e:	4aa0      	ldr	r2, [pc, #640]	; (800b6e0 <__ssvfscanf_r+0x2a4>)
 800b460:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b462:	4013      	ands	r3, r2
 800b464:	664b      	str	r3, [r1, #100]	; 0x64
 800b466:	2300      	movs	r3, #0
 800b468:	617b      	str	r3, [r7, #20]
 800b46a:	643b      	str	r3, [r7, #64]	; 0x40
 800b46c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b46e:	627b      	str	r3, [r7, #36]	; 0x24
 800b470:	63bb      	str	r3, [r7, #56]	; 0x38
 800b472:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	69ba      	ldr	r2, [r7, #24]
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	3201      	adds	r2, #1
 800b47c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b47e:	61ba      	str	r2, [r7, #24]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d100      	bne.n	800b486 <__ssvfscanf_r+0x4a>
 800b484:	e0d7      	b.n	800b636 <__ssvfscanf_r+0x1fa>
 800b486:	2608      	movs	r6, #8
 800b488:	2108      	movs	r1, #8
 800b48a:	4a96      	ldr	r2, [pc, #600]	; (800b6e4 <__ssvfscanf_r+0x2a8>)
 800b48c:	5cd2      	ldrb	r2, [r2, r3]
 800b48e:	4016      	ands	r6, r2
 800b490:	420a      	tst	r2, r1
 800b492:	d01d      	beq.n	800b4d0 <__ssvfscanf_r+0x94>
 800b494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	dd12      	ble.n	800b4c2 <__ssvfscanf_r+0x86>
 800b49c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b49e:	4991      	ldr	r1, [pc, #580]	; (800b6e4 <__ssvfscanf_r+0x2a8>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	781a      	ldrb	r2, [r3, #0]
 800b4a4:	5c8a      	ldrb	r2, [r1, r2]
 800b4a6:	2108      	movs	r1, #8
 800b4a8:	420a      	tst	r2, r1
 800b4aa:	d0e3      	beq.n	800b474 <__ssvfscanf_r+0x38>
 800b4ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b4b0:	3201      	adds	r2, #1
 800b4b2:	63ba      	str	r2, [r7, #56]	; 0x38
 800b4b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	6852      	ldr	r2, [r2, #4]
 800b4ba:	600b      	str	r3, [r1, #0]
 800b4bc:	3a01      	subs	r2, #1
 800b4be:	604a      	str	r2, [r1, #4]
 800b4c0:	e7e8      	b.n	800b494 <__ssvfscanf_r+0x58>
 800b4c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b4c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b4c6:	f002 ff4d 	bl	800e364 <__ssrefill_r>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d0e6      	beq.n	800b49c <__ssvfscanf_r+0x60>
 800b4ce:	e7d1      	b.n	800b474 <__ssvfscanf_r+0x38>
 800b4d0:	2b25      	cmp	r3, #37	; 0x25
 800b4d2:	d165      	bne.n	800b5a0 <__ssvfscanf_r+0x164>
 800b4d4:	250a      	movs	r5, #10
 800b4d6:	2480      	movs	r4, #128	; 0x80
 800b4d8:	69ba      	ldr	r2, [r7, #24]
 800b4da:	63fe      	str	r6, [r7, #60]	; 0x3c
 800b4dc:	3b16      	subs	r3, #22
 800b4de:	69b9      	ldr	r1, [r7, #24]
 800b4e0:	3101      	adds	r1, #1
 800b4e2:	61b9      	str	r1, [r7, #24]
 800b4e4:	7811      	ldrb	r1, [r2, #0]
 800b4e6:	0008      	movs	r0, r1
 800b4e8:	3825      	subs	r0, #37	; 0x25
 800b4ea:	2855      	cmp	r0, #85	; 0x55
 800b4ec:	d900      	bls.n	800b4f0 <__ssvfscanf_r+0xb4>
 800b4ee:	e170      	b.n	800b7d2 <__ssvfscanf_r+0x396>
 800b4f0:	f7f4 fe1a 	bl	8000128 <__gnu_thumb1_case_uhi>
 800b4f4:	016f0056 	.word	0x016f0056
 800b4f8:	016f016f 	.word	0x016f016f
 800b4fc:	0081016f 	.word	0x0081016f
 800b500:	016f016f 	.word	0x016f016f
 800b504:	016f016f 	.word	0x016f016f
 800b508:	00b8016f 	.word	0x00b8016f
 800b50c:	00b800b8 	.word	0x00b800b8
 800b510:	00b800b8 	.word	0x00b800b8
 800b514:	00b800b8 	.word	0x00b800b8
 800b518:	00b800b8 	.word	0x00b800b8
 800b51c:	016f00b8 	.word	0x016f00b8
 800b520:	016f016f 	.word	0x016f016f
 800b524:	016f016f 	.word	0x016f016f
 800b528:	016f016f 	.word	0x016f016f
 800b52c:	016f00d8 	.word	0x016f00d8
 800b530:	00c1010a 	.word	0x00c1010a
 800b534:	00d800d8 	.word	0x00d800d8
 800b538:	016f00d8 	.word	0x016f00d8
 800b53c:	016f016f 	.word	0x016f016f
 800b540:	009f016f 	.word	0x009f016f
 800b544:	016f016f 	.word	0x016f016f
 800b548:	016f00c9 	.word	0x016f00c9
 800b54c:	016f016f 	.word	0x016f016f
 800b550:	016f00f0 	.word	0x016f00f0
 800b554:	016f016f 	.word	0x016f016f
 800b558:	00d1016f 	.word	0x00d1016f
 800b55c:	016f016f 	.word	0x016f016f
 800b560:	016f00fe 	.word	0x016f00fe
 800b564:	016f016f 	.word	0x016f016f
 800b568:	016f016f 	.word	0x016f016f
 800b56c:	016f00d8 	.word	0x016f00d8
 800b570:	00c3010c 	.word	0x00c3010c
 800b574:	00d800d8 	.word	0x00d800d8
 800b578:	009400d8 	.word	0x009400d8
 800b57c:	009f012f 	.word	0x009f012f
 800b580:	0088016f 	.word	0x0088016f
 800b584:	011200a9 	.word	0x011200a9
 800b588:	011000cb 	.word	0x011000cb
 800b58c:	016f016f 	.word	0x016f016f
 800b590:	00a600f2 	.word	0x00a600f2
 800b594:	016f00cf 	.word	0x016f00cf
 800b598:	00d1016f 	.word	0x00d1016f
 800b59c:	00a6016f 	.word	0x00a6016f
 800b5a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	dd12      	ble.n	800b5ce <__ssvfscanf_r+0x192>
 800b5a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5aa:	69ba      	ldr	r2, [r7, #24]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	3a01      	subs	r2, #1
 800b5b0:	7819      	ldrb	r1, [r3, #0]
 800b5b2:	7812      	ldrb	r2, [r2, #0]
 800b5b4:	4291      	cmp	r1, r2
 800b5b6:	d13e      	bne.n	800b636 <__ssvfscanf_r+0x1fa>
 800b5b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b5bc:	6852      	ldr	r2, [r2, #4]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	600b      	str	r3, [r1, #0]
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c4:	3a01      	subs	r2, #1
 800b5c6:	604a      	str	r2, [r1, #4]
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5cc:	e752      	b.n	800b474 <__ssvfscanf_r+0x38>
 800b5ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b5d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b5d2:	f002 fec7 	bl	800e364 <__ssrefill_r>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d0e6      	beq.n	800b5a8 <__ssvfscanf_r+0x16c>
 800b5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d003      	beq.n	800b5e8 <__ssvfscanf_r+0x1ac>
 800b5e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5e2:	899b      	ldrh	r3, [r3, #12]
 800b5e4:	065b      	lsls	r3, r3, #25
 800b5e6:	d526      	bpl.n	800b636 <__ssvfscanf_r+0x1fa>
 800b5e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d000      	beq.n	800b5f0 <__ssvfscanf_r+0x1b4>
 800b5ee:	e0f6      	b.n	800b7de <__ssvfscanf_r+0x3a2>
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5f4:	e104      	b.n	800b800 <__ssvfscanf_r+0x3c4>
 800b5f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5f8:	4332      	orrs	r2, r6
 800b5fa:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b5fc:	d11b      	bne.n	800b636 <__ssvfscanf_r+0x1fa>
 800b5fe:	2610      	movs	r6, #16
 800b600:	69ba      	ldr	r2, [r7, #24]
 800b602:	e76c      	b.n	800b4de <__ssvfscanf_r+0xa2>
 800b604:	421e      	tst	r6, r3
 800b606:	d116      	bne.n	800b636 <__ssvfscanf_r+0x1fa>
 800b608:	7851      	ldrb	r1, [r2, #1]
 800b60a:	296c      	cmp	r1, #108	; 0x6c
 800b60c:	d103      	bne.n	800b616 <__ssvfscanf_r+0x1da>
 800b60e:	3202      	adds	r2, #2
 800b610:	61ba      	str	r2, [r7, #24]
 800b612:	2202      	movs	r2, #2
 800b614:	e000      	b.n	800b618 <__ssvfscanf_r+0x1dc>
 800b616:	2201      	movs	r2, #1
 800b618:	4316      	orrs	r6, r2
 800b61a:	e7f1      	b.n	800b600 <__ssvfscanf_r+0x1c4>
 800b61c:	421e      	tst	r6, r3
 800b61e:	d10a      	bne.n	800b636 <__ssvfscanf_r+0x1fa>
 800b620:	7851      	ldrb	r1, [r2, #1]
 800b622:	2968      	cmp	r1, #104	; 0x68
 800b624:	d103      	bne.n	800b62e <__ssvfscanf_r+0x1f2>
 800b626:	3202      	adds	r2, #2
 800b628:	61ba      	str	r2, [r7, #24]
 800b62a:	2208      	movs	r2, #8
 800b62c:	e7f4      	b.n	800b618 <__ssvfscanf_r+0x1dc>
 800b62e:	2204      	movs	r2, #4
 800b630:	e7f2      	b.n	800b618 <__ssvfscanf_r+0x1dc>
 800b632:	421e      	tst	r6, r3
 800b634:	d0ed      	beq.n	800b612 <__ssvfscanf_r+0x1d6>
 800b636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d000      	beq.n	800b63e <__ssvfscanf_r+0x202>
 800b63c:	e0da      	b.n	800b7f4 <__ssvfscanf_r+0x3b8>
 800b63e:	e0df      	b.n	800b800 <__ssvfscanf_r+0x3c4>
 800b640:	421e      	tst	r6, r3
 800b642:	d0dd      	beq.n	800b600 <__ssvfscanf_r+0x1c4>
 800b644:	e7f7      	b.n	800b636 <__ssvfscanf_r+0x1fa>
 800b646:	228f      	movs	r2, #143	; 0x8f
 800b648:	218f      	movs	r1, #143	; 0x8f
 800b64a:	4032      	ands	r2, r6
 800b64c:	420e      	tst	r6, r1
 800b64e:	d1f2      	bne.n	800b636 <__ssvfscanf_r+0x1fa>
 800b650:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b652:	2900      	cmp	r1, #0
 800b654:	d104      	bne.n	800b660 <__ssvfscanf_r+0x224>
 800b656:	b082      	sub	sp, #8
 800b658:	a902      	add	r1, sp, #8
 800b65a:	6439      	str	r1, [r7, #64]	; 0x40
 800b65c:	600a      	str	r2, [r1, #0]
 800b65e:	604a      	str	r2, [r1, #4]
 800b660:	4326      	orrs	r6, r4
 800b662:	e7cd      	b.n	800b600 <__ssvfscanf_r+0x1c4>
 800b664:	228f      	movs	r2, #143	; 0x8f
 800b666:	4216      	tst	r6, r2
 800b668:	d1e5      	bne.n	800b636 <__ssvfscanf_r+0x1fa>
 800b66a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b66c:	436a      	muls	r2, r5
 800b66e:	3a30      	subs	r2, #48	; 0x30
 800b670:	188a      	adds	r2, r1, r2
 800b672:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b674:	e7c4      	b.n	800b600 <__ssvfscanf_r+0x1c4>
 800b676:	2301      	movs	r3, #1
 800b678:	431e      	orrs	r6, r3
 800b67a:	4b1b      	ldr	r3, [pc, #108]	; (800b6e8 <__ssvfscanf_r+0x2ac>)
 800b67c:	617b      	str	r3, [r7, #20]
 800b67e:	230a      	movs	r3, #10
 800b680:	2403      	movs	r4, #3
 800b682:	627b      	str	r3, [r7, #36]	; 0x24
 800b684:	e00f      	b.n	800b6a6 <__ssvfscanf_r+0x26a>
 800b686:	2301      	movs	r3, #1
 800b688:	431e      	orrs	r6, r3
 800b68a:	4b18      	ldr	r3, [pc, #96]	; (800b6ec <__ssvfscanf_r+0x2b0>)
 800b68c:	617b      	str	r3, [r7, #20]
 800b68e:	2308      	movs	r3, #8
 800b690:	e7f6      	b.n	800b680 <__ssvfscanf_r+0x244>
 800b692:	4b16      	ldr	r3, [pc, #88]	; (800b6ec <__ssvfscanf_r+0x2b0>)
 800b694:	e7f2      	b.n	800b67c <__ssvfscanf_r+0x240>
 800b696:	2380      	movs	r3, #128	; 0x80
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	431e      	orrs	r6, r3
 800b69c:	4b13      	ldr	r3, [pc, #76]	; (800b6ec <__ssvfscanf_r+0x2b0>)
 800b69e:	617b      	str	r3, [r7, #20]
 800b6a0:	2310      	movs	r3, #16
 800b6a2:	e7ed      	b.n	800b680 <__ssvfscanf_r+0x244>
 800b6a4:	2404      	movs	r4, #4
 800b6a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	dd55      	ble.n	800b75a <__ssvfscanf_r+0x31e>
 800b6ae:	0673      	lsls	r3, r6, #25
 800b6b0:	d407      	bmi.n	800b6c2 <__ssvfscanf_r+0x286>
 800b6b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6b4:	490b      	ldr	r1, [pc, #44]	; (800b6e4 <__ssvfscanf_r+0x2a8>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	781a      	ldrb	r2, [r3, #0]
 800b6ba:	5c8a      	ldrb	r2, [r1, r2]
 800b6bc:	2108      	movs	r1, #8
 800b6be:	420a      	tst	r2, r1
 800b6c0:	d152      	bne.n	800b768 <__ssvfscanf_r+0x32c>
 800b6c2:	1e60      	subs	r0, r4, #1
 800b6c4:	2803      	cmp	r0, #3
 800b6c6:	d863      	bhi.n	800b790 <__ssvfscanf_r+0x354>
 800b6c8:	f7f4 fd2e 	bl	8000128 <__gnu_thumb1_case_uhi>
 800b6cc:	03bd01da 	.word	0x03bd01da
 800b6d0:	068a0579 	.word	0x068a0579
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	431e      	orrs	r6, r3
 800b6d8:	2402      	movs	r4, #2
 800b6da:	e7e4      	b.n	800b6a6 <__ssvfscanf_r+0x26a>
 800b6dc:	fffffd34 	.word	0xfffffd34
 800b6e0:	ffffdfff 	.word	0xffffdfff
 800b6e4:	0800f8d9 	.word	0x0800f8d9
 800b6e8:	080088f5 	.word	0x080088f5
 800b6ec:	0800de95 	.word	0x0800de95
 800b6f0:	2248      	movs	r2, #72	; 0x48
 800b6f2:	2318      	movs	r3, #24
 800b6f4:	189b      	adds	r3, r3, r2
 800b6f6:	19d8      	adds	r0, r3, r7
 800b6f8:	69b9      	ldr	r1, [r7, #24]
 800b6fa:	f001 f9d7 	bl	800caac <__sccl>
 800b6fe:	2340      	movs	r3, #64	; 0x40
 800b700:	2401      	movs	r4, #1
 800b702:	61b8      	str	r0, [r7, #24]
 800b704:	431e      	orrs	r6, r3
 800b706:	e7ce      	b.n	800b6a6 <__ssvfscanf_r+0x26a>
 800b708:	2301      	movs	r3, #1
 800b70a:	431e      	orrs	r6, r3
 800b70c:	2340      	movs	r3, #64	; 0x40
 800b70e:	2400      	movs	r4, #0
 800b710:	431e      	orrs	r6, r3
 800b712:	e7c8      	b.n	800b6a6 <__ssvfscanf_r+0x26a>
 800b714:	2388      	movs	r3, #136	; 0x88
 800b716:	e7bf      	b.n	800b698 <__ssvfscanf_r+0x25c>
 800b718:	06f3      	lsls	r3, r6, #27
 800b71a:	d500      	bpl.n	800b71e <__ssvfscanf_r+0x2e2>
 800b71c:	e6aa      	b.n	800b474 <__ssvfscanf_r+0x38>
 800b71e:	2108      	movs	r1, #8
 800b720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b722:	cb04      	ldmia	r3!, {r2}
 800b724:	420e      	tst	r6, r1
 800b726:	d003      	beq.n	800b730 <__ssvfscanf_r+0x2f4>
 800b728:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b72a:	7011      	strb	r1, [r2, #0]
 800b72c:	633b      	str	r3, [r7, #48]	; 0x30
 800b72e:	e6a1      	b.n	800b474 <__ssvfscanf_r+0x38>
 800b730:	0771      	lsls	r1, r6, #29
 800b732:	d502      	bpl.n	800b73a <__ssvfscanf_r+0x2fe>
 800b734:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b736:	8011      	strh	r1, [r2, #0]
 800b738:	e7f8      	b.n	800b72c <__ssvfscanf_r+0x2f0>
 800b73a:	07f1      	lsls	r1, r6, #31
 800b73c:	d502      	bpl.n	800b744 <__ssvfscanf_r+0x308>
 800b73e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b740:	6011      	str	r1, [r2, #0]
 800b742:	e7f3      	b.n	800b72c <__ssvfscanf_r+0x2f0>
 800b744:	07b6      	lsls	r6, r6, #30
 800b746:	d5fa      	bpl.n	800b73e <__ssvfscanf_r+0x302>
 800b748:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b74a:	6011      	str	r1, [r2, #0]
 800b74c:	17c9      	asrs	r1, r1, #31
 800b74e:	6051      	str	r1, [r2, #4]
 800b750:	e7ec      	b.n	800b72c <__ssvfscanf_r+0x2f0>
 800b752:	4ba2      	ldr	r3, [pc, #648]	; (800b9dc <__ssvfscanf_r+0x5a0>)
 800b754:	617b      	str	r3, [r7, #20]
 800b756:	2300      	movs	r3, #0
 800b758:	e792      	b.n	800b680 <__ssvfscanf_r+0x244>
 800b75a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b75c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b75e:	f002 fe01 	bl	800e364 <__ssrefill_r>
 800b762:	2800      	cmp	r0, #0
 800b764:	d0a3      	beq.n	800b6ae <__ssvfscanf_r+0x272>
 800b766:	e738      	b.n	800b5da <__ssvfscanf_r+0x19e>
 800b768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b76a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b76c:	3201      	adds	r2, #1
 800b76e:	63ba      	str	r2, [r7, #56]	; 0x38
 800b770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b772:	6852      	ldr	r2, [r2, #4]
 800b774:	3a01      	subs	r2, #1
 800b776:	604a      	str	r2, [r1, #4]
 800b778:	2a00      	cmp	r2, #0
 800b77a:	dd02      	ble.n	800b782 <__ssvfscanf_r+0x346>
 800b77c:	3301      	adds	r3, #1
 800b77e:	600b      	str	r3, [r1, #0]
 800b780:	e797      	b.n	800b6b2 <__ssvfscanf_r+0x276>
 800b782:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b784:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b786:	f002 fded 	bl	800e364 <__ssrefill_r>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	d091      	beq.n	800b6b2 <__ssvfscanf_r+0x276>
 800b78e:	e724      	b.n	800b5da <__ssvfscanf_r+0x19e>
 800b790:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b792:	2301      	movs	r3, #1
 800b794:	2a00      	cmp	r2, #0
 800b796:	d100      	bne.n	800b79a <__ssvfscanf_r+0x35e>
 800b798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b79a:	2210      	movs	r2, #16
 800b79c:	0034      	movs	r4, r6
 800b79e:	4032      	ands	r2, r6
 800b7a0:	623a      	str	r2, [r7, #32]
 800b7a2:	401c      	ands	r4, r3
 800b7a4:	421e      	tst	r6, r3
 800b7a6:	d100      	bne.n	800b7aa <__ssvfscanf_r+0x36e>
 800b7a8:	e0f3      	b.n	800b992 <__ssvfscanf_r+0x556>
 800b7aa:	2a00      	cmp	r2, #0
 800b7ac:	d000      	beq.n	800b7b0 <__ssvfscanf_r+0x374>
 800b7ae:	e0b6      	b.n	800b91e <__ssvfscanf_r+0x4e2>
 800b7b0:	2080      	movs	r0, #128	; 0x80
 800b7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b4:	cb10      	ldmia	r3!, {r4}
 800b7b6:	613b      	str	r3, [r7, #16]
 800b7b8:	4206      	tst	r6, r0
 800b7ba:	d100      	bne.n	800b7be <__ssvfscanf_r+0x382>
 800b7bc:	e0b7      	b.n	800b92e <__ssvfscanf_r+0x4f2>
 800b7be:	2c00      	cmp	r4, #0
 800b7c0:	d007      	beq.n	800b7d2 <__ssvfscanf_r+0x396>
 800b7c2:	f7fb ffaf 	bl	8007724 <malloc>
 800b7c6:	6338      	str	r0, [r7, #48]	; 0x30
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d11f      	bne.n	800b80c <__ssvfscanf_r+0x3d0>
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	425b      	negs	r3, r3
 800b7d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d013      	beq.n	800b800 <__ssvfscanf_r+0x3c4>
 800b7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7da:	3301      	adds	r3, #1
 800b7dc:	d10a      	bne.n	800b7f4 <__ssvfscanf_r+0x3b8>
 800b7de:	2400      	movs	r4, #0
 800b7e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7e2:	681d      	ldr	r5, [r3, #0]
 800b7e4:	88db      	ldrh	r3, [r3, #6]
 800b7e6:	42a3      	cmp	r3, r4
 800b7e8:	dd01      	ble.n	800b7ee <__ssvfscanf_r+0x3b2>
 800b7ea:	f001 f82a 	bl	800c842 <__ssvfscanf_r+0x1406>
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	425b      	negs	r3, r3
 800b7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7f6:	6818      	ldr	r0, [r3, #0]
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d001      	beq.n	800b800 <__ssvfscanf_r+0x3c4>
 800b7fc:	f7fb ff9c 	bl	8007738 <free>
 800b800:	46bd      	mov	sp, r7
 800b802:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b804:	23b1      	movs	r3, #177	; 0xb1
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	449d      	add	sp, r3
 800b80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80e:	6023      	str	r3, [r4, #0]
 800b810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b812:	88de      	ldrh	r6, [r3, #6]
 800b814:	889d      	ldrh	r5, [r3, #4]
 800b816:	42ae      	cmp	r6, r5
 800b818:	d30e      	bcc.n	800b838 <__ssvfscanf_r+0x3fc>
 800b81a:	4b71      	ldr	r3, [pc, #452]	; (800b9e0 <__ssvfscanf_r+0x5a4>)
 800b81c:	429d      	cmp	r5, r3
 800b81e:	d8d5      	bhi.n	800b7cc <__ssvfscanf_r+0x390>
 800b820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b822:	3508      	adds	r5, #8
 800b824:	b2ad      	uxth	r5, r5
 800b826:	6818      	ldr	r0, [r3, #0]
 800b828:	00a9      	lsls	r1, r5, #2
 800b82a:	f002 f901 	bl	800da30 <realloc>
 800b82e:	2800      	cmp	r0, #0
 800b830:	d0cc      	beq.n	800b7cc <__ssvfscanf_r+0x390>
 800b832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b834:	6018      	str	r0, [r3, #0]
 800b836:	809d      	strh	r5, [r3, #4]
 800b838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b83a:	1c72      	adds	r2, r6, #1
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	00b6      	lsls	r6, r6, #2
 800b840:	50f4      	str	r4, [r6, r3]
 800b842:	2320      	movs	r3, #32
 800b844:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b846:	0026      	movs	r6, r4
 800b848:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800b84a:	80ca      	strh	r2, [r1, #6]
 800b84c:	61fb      	str	r3, [r7, #28]
 800b84e:	2500      	movs	r5, #0
 800b850:	f7fd f9fe 	bl	8008c50 <__locale_mb_cur_max>
 800b854:	42a8      	cmp	r0, r5
 800b856:	d100      	bne.n	800b85a <__ssvfscanf_r+0x41e>
 800b858:	e6bf      	b.n	800b5da <__ssvfscanf_r+0x19e>
 800b85a:	1c6a      	adds	r2, r5, #1
 800b85c:	60fa      	str	r2, [r7, #12]
 800b85e:	228c      	movs	r2, #140	; 0x8c
 800b860:	2048      	movs	r0, #72	; 0x48
 800b862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b864:	0052      	lsls	r2, r2, #1
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	1812      	adds	r2, r2, r0
 800b86a:	7819      	ldrb	r1, [r3, #0]
 800b86c:	19d2      	adds	r2, r2, r7
 800b86e:	5551      	strb	r1, [r2, r5]
 800b870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b872:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b874:	6852      	ldr	r2, [r2, #4]
 800b876:	3301      	adds	r3, #1
 800b878:	600b      	str	r3, [r1, #0]
 800b87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87c:	3a01      	subs	r2, #1
 800b87e:	604a      	str	r2, [r1, #4]
 800b880:	2b03      	cmp	r3, #3
 800b882:	d102      	bne.n	800b88a <__ssvfscanf_r+0x44e>
 800b884:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b886:	2b04      	cmp	r3, #4
 800b888:	d007      	beq.n	800b89a <__ssvfscanf_r+0x45e>
 800b88a:	2048      	movs	r0, #72	; 0x48
 800b88c:	2310      	movs	r3, #16
 800b88e:	181b      	adds	r3, r3, r0
 800b890:	2208      	movs	r2, #8
 800b892:	2100      	movs	r1, #0
 800b894:	19d8      	adds	r0, r3, r7
 800b896:	f7fd f997 	bl	8008bc8 <memset>
 800b89a:	2148      	movs	r1, #72	; 0x48
 800b89c:	2310      	movs	r3, #16
 800b89e:	228c      	movs	r2, #140	; 0x8c
 800b8a0:	185b      	adds	r3, r3, r1
 800b8a2:	0052      	lsls	r2, r2, #1
 800b8a4:	19db      	adds	r3, r3, r7
 800b8a6:	1852      	adds	r2, r2, r1
 800b8a8:	9300      	str	r3, [sp, #0]
 800b8aa:	0021      	movs	r1, r4
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b8b0:	19d2      	adds	r2, r2, r7
 800b8b2:	f002 fc57 	bl	800e164 <_mbrtowc_r>
 800b8b6:	0003      	movs	r3, r0
 800b8b8:	62b8      	str	r0, [r7, #40]	; 0x28
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	d100      	bne.n	800b8c0 <__ssvfscanf_r+0x484>
 800b8be:	e68c      	b.n	800b5da <__ssvfscanf_r+0x19e>
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	d139      	bne.n	800b938 <__ssvfscanf_r+0x4fc>
 800b8c4:	6a3b      	ldr	r3, [r7, #32]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d100      	bne.n	800b8cc <__ssvfscanf_r+0x490>
 800b8ca:	6023      	str	r3, [r4, #0]
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d0:	4694      	mov	ip, r2
 800b8d2:	4463      	add	r3, ip
 800b8d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d8:	2b03      	cmp	r3, #3
 800b8da:	d102      	bne.n	800b8e2 <__ssvfscanf_r+0x4a6>
 800b8dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b8de:	2b04      	cmp	r3, #4
 800b8e0:	d002      	beq.n	800b8e8 <__ssvfscanf_r+0x4ac>
 800b8e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8e8:	6a3b      	ldr	r3, [r7, #32]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d115      	bne.n	800b91a <__ssvfscanf_r+0x4de>
 800b8ee:	2e00      	cmp	r6, #0
 800b8f0:	d012      	beq.n	800b918 <__ssvfscanf_r+0x4dc>
 800b8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f4:	69fa      	ldr	r2, [r7, #28]
 800b8f6:	1ae5      	subs	r5, r4, r3
 800b8f8:	10ab      	asrs	r3, r5, #2
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d30c      	bcc.n	800b918 <__ssvfscanf_r+0x4dc>
 800b8fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b900:	00d1      	lsls	r1, r2, #3
 800b902:	f002 f895 	bl	800da30 <realloc>
 800b906:	6338      	str	r0, [r7, #48]	; 0x30
 800b908:	2800      	cmp	r0, #0
 800b90a:	d100      	bne.n	800b90e <__ssvfscanf_r+0x4d2>
 800b90c:	e75e      	b.n	800b7cc <__ssvfscanf_r+0x390>
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	1944      	adds	r4, r0, r5
 800b912:	005b      	lsls	r3, r3, #1
 800b914:	6030      	str	r0, [r6, #0]
 800b916:	61fb      	str	r3, [r7, #28]
 800b918:	3404      	adds	r4, #4
 800b91a:	2500      	movs	r5, #0
 800b91c:	e010      	b.n	800b940 <__ssvfscanf_r+0x504>
 800b91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b920:	613b      	str	r3, [r7, #16]
 800b922:	2300      	movs	r3, #0
 800b924:	001e      	movs	r6, r3
 800b926:	001c      	movs	r4, r3
 800b928:	61fb      	str	r3, [r7, #28]
 800b92a:	633b      	str	r3, [r7, #48]	; 0x30
 800b92c:	e78f      	b.n	800b84e <__ssvfscanf_r+0x412>
 800b92e:	6a3b      	ldr	r3, [r7, #32]
 800b930:	001e      	movs	r6, r3
 800b932:	61fb      	str	r3, [r7, #28]
 800b934:	633b      	str	r3, [r7, #48]	; 0x30
 800b936:	e78a      	b.n	800b84e <__ssvfscanf_r+0x412>
 800b938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93a:	68fd      	ldr	r5, [r7, #12]
 800b93c:	3302      	adds	r3, #2
 800b93e:	d1c5      	bne.n	800b8cc <__ssvfscanf_r+0x490>
 800b940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	dc12      	bgt.n	800b96e <__ssvfscanf_r+0x532>
 800b948:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b94a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b94c:	f002 fd0a 	bl	800e364 <__ssrefill_r>
 800b950:	2800      	cmp	r0, #0
 800b952:	d00c      	beq.n	800b96e <__ssvfscanf_r+0x532>
 800b954:	2d00      	cmp	r5, #0
 800b956:	d000      	beq.n	800b95a <__ssvfscanf_r+0x51e>
 800b958:	e63f      	b.n	800b5da <__ssvfscanf_r+0x19e>
 800b95a:	2e00      	cmp	r6, #0
 800b95c:	d10c      	bne.n	800b978 <__ssvfscanf_r+0x53c>
 800b95e:	6a3b      	ldr	r3, [r7, #32]
 800b960:	425a      	negs	r2, r3
 800b962:	4153      	adcs	r3, r2
 800b964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b966:	18d3      	adds	r3, r2, r3
 800b968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	e6de      	b.n	800b72c <__ssvfscanf_r+0x2f0>
 800b96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b970:	2b00      	cmp	r3, #0
 800b972:	d000      	beq.n	800b976 <__ssvfscanf_r+0x53a>
 800b974:	e76c      	b.n	800b850 <__ssvfscanf_r+0x414>
 800b976:	e7f0      	b.n	800b95a <__ssvfscanf_r+0x51e>
 800b978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97a:	69fa      	ldr	r2, [r7, #28]
 800b97c:	1ae1      	subs	r1, r4, r3
 800b97e:	108b      	asrs	r3, r1, #2
 800b980:	429a      	cmp	r2, r3
 800b982:	d9ec      	bls.n	800b95e <__ssvfscanf_r+0x522>
 800b984:	6830      	ldr	r0, [r6, #0]
 800b986:	f002 f853 	bl	800da30 <realloc>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	d0e7      	beq.n	800b95e <__ssvfscanf_r+0x522>
 800b98e:	6030      	str	r0, [r6, #0]
 800b990:	e7e5      	b.n	800b95e <__ssvfscanf_r+0x522>
 800b992:	6a3b      	ldr	r3, [r7, #32]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d025      	beq.n	800b9e4 <__ssvfscanf_r+0x5a8>
 800b998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b99a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b9a0:	6812      	ldr	r2, [r2, #0]
 800b9a2:	4299      	cmp	r1, r3
 800b9a4:	dd11      	ble.n	800b9ca <__ssvfscanf_r+0x58e>
 800b9a6:	1ac9      	subs	r1, r1, r3
 800b9a8:	18d2      	adds	r2, r2, r3
 800b9aa:	18e4      	adds	r4, r4, r3
 800b9ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9ae:	63f9      	str	r1, [r7, #60]	; 0x3c
 800b9b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b9b2:	0019      	movs	r1, r3
 800b9b4:	601a      	str	r2, [r3, #0]
 800b9b6:	f002 fcd5 	bl	800e364 <__ssrefill_r>
 800b9ba:	2800      	cmp	r0, #0
 800b9bc:	d0ec      	beq.n	800b998 <__ssvfscanf_r+0x55c>
 800b9be:	2c00      	cmp	r4, #0
 800b9c0:	d100      	bne.n	800b9c4 <__ssvfscanf_r+0x588>
 800b9c2:	e60a      	b.n	800b5da <__ssvfscanf_r+0x19e>
 800b9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c6:	191b      	adds	r3, r3, r4
 800b9c8:	e5ff      	b.n	800b5ca <__ssvfscanf_r+0x18e>
 800b9ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b9cc:	1a5b      	subs	r3, r3, r1
 800b9ce:	1864      	adds	r4, r4, r1
 800b9d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b9d2:	604b      	str	r3, [r1, #4]
 800b9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d6:	18d2      	adds	r2, r2, r3
 800b9d8:	600a      	str	r2, [r1, #0]
 800b9da:	e7f3      	b.n	800b9c4 <__ssvfscanf_r+0x588>
 800b9dc:	080088f5 	.word	0x080088f5
 800b9e0:	0000fff6 	.word	0x0000fff6
 800b9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e6:	0034      	movs	r4, r6
 800b9e8:	cb20      	ldmia	r3!, {r5}
 800b9ea:	633b      	str	r3, [r7, #48]	; 0x30
 800b9ec:	2380      	movs	r3, #128	; 0x80
 800b9ee:	401c      	ands	r4, r3
 800b9f0:	421e      	tst	r6, r3
 800b9f2:	d028      	beq.n	800ba46 <__ssvfscanf_r+0x60a>
 800b9f4:	2d00      	cmp	r5, #0
 800b9f6:	d100      	bne.n	800b9fa <__ssvfscanf_r+0x5be>
 800b9f8:	e61d      	b.n	800b636 <__ssvfscanf_r+0x1fa>
 800b9fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b9fc:	f7fb fe92 	bl	8007724 <malloc>
 800ba00:	6238      	str	r0, [r7, #32]
 800ba02:	2800      	cmp	r0, #0
 800ba04:	d100      	bne.n	800ba08 <__ssvfscanf_r+0x5cc>
 800ba06:	e5ef      	b.n	800b5e8 <__ssvfscanf_r+0x1ac>
 800ba08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba0a:	6028      	str	r0, [r5, #0]
 800ba0c:	88de      	ldrh	r6, [r3, #6]
 800ba0e:	889c      	ldrh	r4, [r3, #4]
 800ba10:	6818      	ldr	r0, [r3, #0]
 800ba12:	42a6      	cmp	r6, r4
 800ba14:	d30e      	bcc.n	800ba34 <__ssvfscanf_r+0x5f8>
 800ba16:	4bbf      	ldr	r3, [pc, #764]	; (800bd14 <__ssvfscanf_r+0x8d8>)
 800ba18:	429c      	cmp	r4, r3
 800ba1a:	d900      	bls.n	800ba1e <__ssvfscanf_r+0x5e2>
 800ba1c:	e6df      	b.n	800b7de <__ssvfscanf_r+0x3a2>
 800ba1e:	3408      	adds	r4, #8
 800ba20:	b2a4      	uxth	r4, r4
 800ba22:	00a1      	lsls	r1, r4, #2
 800ba24:	f002 f804 	bl	800da30 <realloc>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d100      	bne.n	800ba2e <__ssvfscanf_r+0x5f2>
 800ba2c:	e6d7      	b.n	800b7de <__ssvfscanf_r+0x3a2>
 800ba2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba30:	6018      	str	r0, [r3, #0]
 800ba32:	809c      	strh	r4, [r3, #4]
 800ba34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba36:	1c72      	adds	r2, r6, #1
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba3c:	00b6      	lsls	r6, r6, #2
 800ba3e:	002c      	movs	r4, r5
 800ba40:	50f5      	str	r5, [r6, r3]
 800ba42:	6a3d      	ldr	r5, [r7, #32]
 800ba44:	80ca      	strh	r2, [r1, #6]
 800ba46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba48:	0029      	movs	r1, r5
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ba52:	f002 fca6 	bl	800e3a2 <_sfread_r>
 800ba56:	1e05      	subs	r5, r0, #0
 800ba58:	d100      	bne.n	800ba5c <__ssvfscanf_r+0x620>
 800ba5a:	e5be      	b.n	800b5da <__ssvfscanf_r+0x19e>
 800ba5c:	2c00      	cmp	r4, #0
 800ba5e:	d009      	beq.n	800ba74 <__ssvfscanf_r+0x638>
 800ba60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba62:	4283      	cmp	r3, r0
 800ba64:	d906      	bls.n	800ba74 <__ssvfscanf_r+0x638>
 800ba66:	0001      	movs	r1, r0
 800ba68:	6820      	ldr	r0, [r4, #0]
 800ba6a:	f001 ffe1 	bl	800da30 <realloc>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	d000      	beq.n	800ba74 <__ssvfscanf_r+0x638>
 800ba72:	6020      	str	r0, [r4, #0]
 800ba74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba76:	195b      	adds	r3, r3, r5
 800ba78:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	e4f8      	b.n	800b472 <__ssvfscanf_r+0x36>
 800ba80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d101      	bne.n	800ba8a <__ssvfscanf_r+0x64e>
 800ba86:	3b01      	subs	r3, #1
 800ba88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba8a:	2210      	movs	r2, #16
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	0034      	movs	r4, r6
 800ba90:	4032      	ands	r2, r6
 800ba92:	401c      	ands	r4, r3
 800ba94:	623a      	str	r2, [r7, #32]
 800ba96:	421e      	tst	r6, r3
 800ba98:	d100      	bne.n	800ba9c <__ssvfscanf_r+0x660>
 800ba9a:	e116      	b.n	800bcca <__ssvfscanf_r+0x88e>
 800ba9c:	2a00      	cmp	r2, #0
 800ba9e:	d000      	beq.n	800baa2 <__ssvfscanf_r+0x666>
 800baa0:	e0b0      	b.n	800bc04 <__ssvfscanf_r+0x7c8>
 800baa2:	2080      	movs	r0, #128	; 0x80
 800baa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa6:	cb10      	ldmia	r3!, {r4}
 800baa8:	60fb      	str	r3, [r7, #12]
 800baaa:	4206      	tst	r6, r0
 800baac:	d100      	bne.n	800bab0 <__ssvfscanf_r+0x674>
 800baae:	e0b2      	b.n	800bc16 <__ssvfscanf_r+0x7da>
 800bab0:	2c00      	cmp	r4, #0
 800bab2:	d100      	bne.n	800bab6 <__ssvfscanf_r+0x67a>
 800bab4:	e68d      	b.n	800b7d2 <__ssvfscanf_r+0x396>
 800bab6:	f7fb fe35 	bl	8007724 <malloc>
 800baba:	6338      	str	r0, [r7, #48]	; 0x30
 800babc:	2800      	cmp	r0, #0
 800babe:	d100      	bne.n	800bac2 <__ssvfscanf_r+0x686>
 800bac0:	e684      	b.n	800b7cc <__ssvfscanf_r+0x390>
 800bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac4:	6023      	str	r3, [r4, #0]
 800bac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bac8:	88de      	ldrh	r6, [r3, #6]
 800baca:	889d      	ldrh	r5, [r3, #4]
 800bacc:	42ae      	cmp	r6, r5
 800bace:	d310      	bcc.n	800baf2 <__ssvfscanf_r+0x6b6>
 800bad0:	4b90      	ldr	r3, [pc, #576]	; (800bd14 <__ssvfscanf_r+0x8d8>)
 800bad2:	429d      	cmp	r5, r3
 800bad4:	d900      	bls.n	800bad8 <__ssvfscanf_r+0x69c>
 800bad6:	e679      	b.n	800b7cc <__ssvfscanf_r+0x390>
 800bad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bada:	3508      	adds	r5, #8
 800badc:	b2ad      	uxth	r5, r5
 800bade:	6818      	ldr	r0, [r3, #0]
 800bae0:	00a9      	lsls	r1, r5, #2
 800bae2:	f001 ffa5 	bl	800da30 <realloc>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d100      	bne.n	800baec <__ssvfscanf_r+0x6b0>
 800baea:	e66f      	b.n	800b7cc <__ssvfscanf_r+0x390>
 800baec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baee:	6018      	str	r0, [r3, #0]
 800baf0:	809d      	strh	r5, [r3, #4]
 800baf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baf4:	1c72      	adds	r2, r6, #1
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	00b6      	lsls	r6, r6, #2
 800bafa:	50f4      	str	r4, [r6, r3]
 800bafc:	2320      	movs	r3, #32
 800bafe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb00:	0026      	movs	r6, r4
 800bb02:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800bb04:	80ca      	strh	r2, [r1, #6]
 800bb06:	613b      	str	r3, [r7, #16]
 800bb08:	2500      	movs	r5, #0
 800bb0a:	f7fd f8a1 	bl	8008c50 <__locale_mb_cur_max>
 800bb0e:	42a8      	cmp	r0, r5
 800bb10:	d100      	bne.n	800bb14 <__ssvfscanf_r+0x6d8>
 800bb12:	e562      	b.n	800b5da <__ssvfscanf_r+0x19e>
 800bb14:	1c6a      	adds	r2, r5, #1
 800bb16:	61fa      	str	r2, [r7, #28]
 800bb18:	228c      	movs	r2, #140	; 0x8c
 800bb1a:	2048      	movs	r0, #72	; 0x48
 800bb1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb1e:	0052      	lsls	r2, r2, #1
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	1812      	adds	r2, r2, r0
 800bb24:	7819      	ldrb	r1, [r3, #0]
 800bb26:	19d2      	adds	r2, r2, r7
 800bb28:	5551      	strb	r1, [r2, r5]
 800bb2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb2e:	6852      	ldr	r2, [r2, #4]
 800bb30:	3301      	adds	r3, #1
 800bb32:	600b      	str	r3, [r1, #0]
 800bb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb36:	3a01      	subs	r2, #1
 800bb38:	604a      	str	r2, [r1, #4]
 800bb3a:	2b03      	cmp	r3, #3
 800bb3c:	d102      	bne.n	800bb44 <__ssvfscanf_r+0x708>
 800bb3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb40:	2b04      	cmp	r3, #4
 800bb42:	d006      	beq.n	800bb52 <__ssvfscanf_r+0x716>
 800bb44:	2048      	movs	r0, #72	; 0x48
 800bb46:	2208      	movs	r2, #8
 800bb48:	1813      	adds	r3, r2, r0
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	19d8      	adds	r0, r3, r7
 800bb4e:	f7fd f83b 	bl	8008bc8 <memset>
 800bb52:	2148      	movs	r1, #72	; 0x48
 800bb54:	2308      	movs	r3, #8
 800bb56:	228c      	movs	r2, #140	; 0x8c
 800bb58:	185b      	adds	r3, r3, r1
 800bb5a:	0052      	lsls	r2, r2, #1
 800bb5c:	19db      	adds	r3, r3, r7
 800bb5e:	1852      	adds	r2, r2, r1
 800bb60:	9300      	str	r3, [sp, #0]
 800bb62:	0021      	movs	r1, r4
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bb68:	19d2      	adds	r2, r2, r7
 800bb6a:	f002 fafb 	bl	800e164 <_mbrtowc_r>
 800bb6e:	0003      	movs	r3, r0
 800bb70:	62b8      	str	r0, [r7, #40]	; 0x28
 800bb72:	3301      	adds	r3, #1
 800bb74:	d100      	bne.n	800bb78 <__ssvfscanf_r+0x73c>
 800bb76:	e530      	b.n	800b5da <__ssvfscanf_r+0x19e>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	d151      	bne.n	800bc20 <__ssvfscanf_r+0x7e4>
 800bb7c:	6020      	str	r0, [r4, #0]
 800bb7e:	2301      	movs	r3, #1
 800bb80:	6825      	ldr	r5, [r4, #0]
 800bb82:	425b      	negs	r3, r3
 800bb84:	1c6a      	adds	r2, r5, #1
 800bb86:	d01a      	beq.n	800bbbe <__ssvfscanf_r+0x782>
 800bb88:	2048      	movs	r0, #72	; 0x48
 800bb8a:	3311      	adds	r3, #17
 800bb8c:	181b      	adds	r3, r3, r0
 800bb8e:	2208      	movs	r2, #8
 800bb90:	2100      	movs	r1, #0
 800bb92:	19d8      	adds	r0, r3, r7
 800bb94:	f7fd f818 	bl	8008bc8 <memset>
 800bb98:	4b5f      	ldr	r3, [pc, #380]	; (800bd18 <__ssvfscanf_r+0x8dc>)
 800bb9a:	2148      	movs	r1, #72	; 0x48
 800bb9c:	33e0      	adds	r3, #224	; 0xe0
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	2310      	movs	r3, #16
 800bba2:	4694      	mov	ip, r2
 800bba4:	185b      	adds	r3, r3, r1
 800bba6:	002a      	movs	r2, r5
 800bba8:	19db      	adds	r3, r3, r7
 800bbaa:	4665      	mov	r5, ip
 800bbac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bbae:	1879      	adds	r1, r7, r1
 800bbb0:	47a8      	blx	r5
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	2801      	cmp	r0, #1
 800bbb6:	d102      	bne.n	800bbbe <__ssvfscanf_r+0x782>
 800bbb8:	3348      	adds	r3, #72	; 0x48
 800bbba:	18fb      	adds	r3, r7, r3
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	2218      	movs	r2, #24
 800bbc0:	2148      	movs	r1, #72	; 0x48
 800bbc2:	1852      	adds	r2, r2, r1
 800bbc4:	19d2      	adds	r2, r2, r7
 800bbc6:	5cd3      	ldrb	r3, [r2, r3]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d149      	bne.n	800bc60 <__ssvfscanf_r+0x824>
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d137      	bne.n	800bc42 <__ssvfscanf_r+0x806>
 800bbd2:	6a3b      	ldr	r3, [r7, #32]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d113      	bne.n	800bc00 <__ssvfscanf_r+0x7c4>
 800bbd8:	6023      	str	r3, [r4, #0]
 800bbda:	2e00      	cmp	r6, #0
 800bbdc:	d00d      	beq.n	800bbfa <__ssvfscanf_r+0x7be>
 800bbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	1ae4      	subs	r4, r4, r3
 800bbe4:	10a3      	asrs	r3, r4, #2
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d906      	bls.n	800bbfa <__ssvfscanf_r+0x7be>
 800bbec:	6830      	ldr	r0, [r6, #0]
 800bbee:	1d21      	adds	r1, r4, #4
 800bbf0:	f001 ff1e 	bl	800da30 <realloc>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d000      	beq.n	800bbfa <__ssvfscanf_r+0x7be>
 800bbf8:	6030      	str	r0, [r6, #0]
 800bbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	e593      	b.n	800b72c <__ssvfscanf_r+0x2f0>
 800bc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc06:	60fb      	str	r3, [r7, #12]
 800bc08:	2300      	movs	r3, #0
 800bc0a:	001e      	movs	r6, r3
 800bc0c:	613b      	str	r3, [r7, #16]
 800bc0e:	633b      	str	r3, [r7, #48]	; 0x30
 800bc10:	334c      	adds	r3, #76	; 0x4c
 800bc12:	18fc      	adds	r4, r7, r3
 800bc14:	e778      	b.n	800bb08 <__ssvfscanf_r+0x6cc>
 800bc16:	6a3b      	ldr	r3, [r7, #32]
 800bc18:	001e      	movs	r6, r3
 800bc1a:	613b      	str	r3, [r7, #16]
 800bc1c:	633b      	str	r3, [r7, #48]	; 0x30
 800bc1e:	e773      	b.n	800bb08 <__ssvfscanf_r+0x6cc>
 800bc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc22:	69fd      	ldr	r5, [r7, #28]
 800bc24:	3302      	adds	r3, #2
 800bc26:	d1aa      	bne.n	800bb7e <__ssvfscanf_r+0x742>
 800bc28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	dc47      	bgt.n	800bcc0 <__ssvfscanf_r+0x884>
 800bc30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bc34:	f002 fb96 	bl	800e364 <__ssrefill_r>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	d041      	beq.n	800bcc0 <__ssvfscanf_r+0x884>
 800bc3c:	2d00      	cmp	r5, #0
 800bc3e:	d0c8      	beq.n	800bbd2 <__ssvfscanf_r+0x796>
 800bc40:	e4cb      	b.n	800b5da <__ssvfscanf_r+0x19e>
 800bc42:	69fb      	ldr	r3, [r7, #28]
 800bc44:	2248      	movs	r2, #72	; 0x48
 800bc46:	3b01      	subs	r3, #1
 800bc48:	61fb      	str	r3, [r7, #28]
 800bc4a:	238c      	movs	r3, #140	; 0x8c
 800bc4c:	005b      	lsls	r3, r3, #1
 800bc4e:	189b      	adds	r3, r3, r2
 800bc50:	69fa      	ldr	r2, [r7, #28]
 800bc52:	19db      	adds	r3, r3, r7
 800bc54:	5cd1      	ldrb	r1, [r2, r3]
 800bc56:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bc58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc5a:	f002 fb47 	bl	800e2ec <_sungetc_r>
 800bc5e:	e7b5      	b.n	800bbcc <__ssvfscanf_r+0x790>
 800bc60:	69fa      	ldr	r2, [r7, #28]
 800bc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc64:	4694      	mov	ip, r2
 800bc66:	4463      	add	r3, ip
 800bc68:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6c:	2b03      	cmp	r3, #3
 800bc6e:	d102      	bne.n	800bc76 <__ssvfscanf_r+0x83a>
 800bc70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc72:	2b04      	cmp	r3, #4
 800bc74:	d002      	beq.n	800bc7c <__ssvfscanf_r+0x840>
 800bc76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc78:	3b01      	subs	r3, #1
 800bc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc7c:	6a3b      	ldr	r3, [r7, #32]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d11a      	bne.n	800bcb8 <__ssvfscanf_r+0x87c>
 800bc82:	3404      	adds	r4, #4
 800bc84:	2e00      	cmp	r6, #0
 800bc86:	d019      	beq.n	800bcbc <__ssvfscanf_r+0x880>
 800bc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8a:	693a      	ldr	r2, [r7, #16]
 800bc8c:	1ae3      	subs	r3, r4, r3
 800bc8e:	61fb      	str	r3, [r7, #28]
 800bc90:	6a3d      	ldr	r5, [r7, #32]
 800bc92:	109b      	asrs	r3, r3, #2
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d3c7      	bcc.n	800bc28 <__ssvfscanf_r+0x7ec>
 800bc98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc9a:	00d1      	lsls	r1, r2, #3
 800bc9c:	f001 fec8 	bl	800da30 <realloc>
 800bca0:	6338      	str	r0, [r7, #48]	; 0x30
 800bca2:	2800      	cmp	r0, #0
 800bca4:	d100      	bne.n	800bca8 <__ssvfscanf_r+0x86c>
 800bca6:	e591      	b.n	800b7cc <__ssvfscanf_r+0x390>
 800bca8:	4684      	mov	ip, r0
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	69fc      	ldr	r4, [r7, #28]
 800bcae:	005b      	lsls	r3, r3, #1
 800bcb0:	4464      	add	r4, ip
 800bcb2:	6030      	str	r0, [r6, #0]
 800bcb4:	613b      	str	r3, [r7, #16]
 800bcb6:	e7b7      	b.n	800bc28 <__ssvfscanf_r+0x7ec>
 800bcb8:	2500      	movs	r5, #0
 800bcba:	e7b5      	b.n	800bc28 <__ssvfscanf_r+0x7ec>
 800bcbc:	0035      	movs	r5, r6
 800bcbe:	e7b3      	b.n	800bc28 <__ssvfscanf_r+0x7ec>
 800bcc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d000      	beq.n	800bcc8 <__ssvfscanf_r+0x88c>
 800bcc6:	e720      	b.n	800bb0a <__ssvfscanf_r+0x6ce>
 800bcc8:	e783      	b.n	800bbd2 <__ssvfscanf_r+0x796>
 800bcca:	6a3b      	ldr	r3, [r7, #32]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d025      	beq.n	800bd1c <__ssvfscanf_r+0x8e0>
 800bcd0:	2118      	movs	r1, #24
 800bcd2:	2048      	movs	r0, #72	; 0x48
 800bcd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcd6:	1809      	adds	r1, r1, r0
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	19c9      	adds	r1, r1, r7
 800bcdc:	781a      	ldrb	r2, [r3, #0]
 800bcde:	5c8a      	ldrb	r2, [r1, r2]
 800bce0:	2a00      	cmp	r2, #0
 800bce2:	d103      	bne.n	800bcec <__ssvfscanf_r+0x8b0>
 800bce4:	2c00      	cmp	r4, #0
 800bce6:	d000      	beq.n	800bcea <__ssvfscanf_r+0x8ae>
 800bce8:	e66c      	b.n	800b9c4 <__ssvfscanf_r+0x588>
 800bcea:	e4a4      	b.n	800b636 <__ssvfscanf_r+0x1fa>
 800bcec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bcf0:	6852      	ldr	r2, [r2, #4]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	600b      	str	r3, [r1, #0]
 800bcf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf8:	3a01      	subs	r2, #1
 800bcfa:	3401      	adds	r4, #1
 800bcfc:	604a      	str	r2, [r1, #4]
 800bcfe:	429c      	cmp	r4, r3
 800bd00:	d100      	bne.n	800bd04 <__ssvfscanf_r+0x8c8>
 800bd02:	e65f      	b.n	800b9c4 <__ssvfscanf_r+0x588>
 800bd04:	2a00      	cmp	r2, #0
 800bd06:	dce3      	bgt.n	800bcd0 <__ssvfscanf_r+0x894>
 800bd08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bd0a:	f002 fb2b 	bl	800e364 <__ssrefill_r>
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	d0de      	beq.n	800bcd0 <__ssvfscanf_r+0x894>
 800bd12:	e657      	b.n	800b9c4 <__ssvfscanf_r+0x588>
 800bd14:	0000fff6 	.word	0x0000fff6
 800bd18:	20000430 	.word	0x20000430
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1e:	0032      	movs	r2, r6
 800bd20:	cb20      	ldmia	r3!, {r5}
 800bd22:	61fb      	str	r3, [r7, #28]
 800bd24:	2380      	movs	r3, #128	; 0x80
 800bd26:	401a      	ands	r2, r3
 800bd28:	421e      	tst	r6, r3
 800bd2a:	d100      	bne.n	800bd2e <__ssvfscanf_r+0x8f2>
 800bd2c:	e086      	b.n	800be3c <__ssvfscanf_r+0xa00>
 800bd2e:	2d00      	cmp	r5, #0
 800bd30:	d100      	bne.n	800bd34 <__ssvfscanf_r+0x8f8>
 800bd32:	e480      	b.n	800b636 <__ssvfscanf_r+0x1fa>
 800bd34:	2020      	movs	r0, #32
 800bd36:	f7fb fcf5 	bl	8007724 <malloc>
 800bd3a:	6338      	str	r0, [r7, #48]	; 0x30
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d100      	bne.n	800bd42 <__ssvfscanf_r+0x906>
 800bd40:	e452      	b.n	800b5e8 <__ssvfscanf_r+0x1ac>
 800bd42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd44:	6028      	str	r0, [r5, #0]
 800bd46:	88de      	ldrh	r6, [r3, #6]
 800bd48:	889c      	ldrh	r4, [r3, #4]
 800bd4a:	6818      	ldr	r0, [r3, #0]
 800bd4c:	42a6      	cmp	r6, r4
 800bd4e:	d30e      	bcc.n	800bd6e <__ssvfscanf_r+0x932>
 800bd50:	4bc3      	ldr	r3, [pc, #780]	; (800c060 <__ssvfscanf_r+0xc24>)
 800bd52:	429c      	cmp	r4, r3
 800bd54:	d900      	bls.n	800bd58 <__ssvfscanf_r+0x91c>
 800bd56:	e542      	b.n	800b7de <__ssvfscanf_r+0x3a2>
 800bd58:	3408      	adds	r4, #8
 800bd5a:	b2a4      	uxth	r4, r4
 800bd5c:	00a1      	lsls	r1, r4, #2
 800bd5e:	f001 fe67 	bl	800da30 <realloc>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	d100      	bne.n	800bd68 <__ssvfscanf_r+0x92c>
 800bd66:	e53a      	b.n	800b7de <__ssvfscanf_r+0x3a2>
 800bd68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd6a:	6018      	str	r0, [r3, #0]
 800bd6c:	809c      	strh	r4, [r3, #4]
 800bd6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd70:	1c72      	adds	r2, r6, #1
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	00b6      	lsls	r6, r6, #2
 800bd76:	50f5      	str	r5, [r6, r3]
 800bd78:	2320      	movs	r3, #32
 800bd7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd7c:	002e      	movs	r6, r5
 800bd7e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800bd80:	80ca      	strh	r2, [r1, #6]
 800bd82:	623b      	str	r3, [r7, #32]
 800bd84:	002c      	movs	r4, r5
 800bd86:	2118      	movs	r1, #24
 800bd88:	2048      	movs	r0, #72	; 0x48
 800bd8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd8c:	1809      	adds	r1, r1, r0
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	19c9      	adds	r1, r1, r7
 800bd92:	781a      	ldrb	r2, [r3, #0]
 800bd94:	5c8a      	ldrb	r2, [r1, r2]
 800bd96:	2a00      	cmp	r2, #0
 800bd98:	d101      	bne.n	800bd9e <__ssvfscanf_r+0x962>
 800bd9a:	633d      	str	r5, [r7, #48]	; 0x30
 800bd9c:	e031      	b.n	800be02 <__ssvfscanf_r+0x9c6>
 800bd9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bda0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bda2:	6852      	ldr	r2, [r2, #4]
 800bda4:	3a01      	subs	r2, #1
 800bda6:	604a      	str	r2, [r1, #4]
 800bda8:	1c5a      	adds	r2, r3, #1
 800bdaa:	600a      	str	r2, [r1, #0]
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	1c6a      	adds	r2, r5, #1
 800bdb0:	633a      	str	r2, [r7, #48]	; 0x30
 800bdb2:	702b      	strb	r3, [r5, #0]
 800bdb4:	2e00      	cmp	r6, #0
 800bdb6:	d010      	beq.n	800bdda <__ssvfscanf_r+0x99e>
 800bdb8:	6a3b      	ldr	r3, [r7, #32]
 800bdba:	1b15      	subs	r5, r2, r4
 800bdbc:	429d      	cmp	r5, r3
 800bdbe:	d30c      	bcc.n	800bdda <__ssvfscanf_r+0x99e>
 800bdc0:	005b      	lsls	r3, r3, #1
 800bdc2:	0020      	movs	r0, r4
 800bdc4:	0019      	movs	r1, r3
 800bdc6:	623b      	str	r3, [r7, #32]
 800bdc8:	f001 fe32 	bl	800da30 <realloc>
 800bdcc:	1e04      	subs	r4, r0, #0
 800bdce:	d101      	bne.n	800bdd4 <__ssvfscanf_r+0x998>
 800bdd0:	f7ff fc0a 	bl	800b5e8 <__ssvfscanf_r+0x1ac>
 800bdd4:	1943      	adds	r3, r0, r5
 800bdd6:	633b      	str	r3, [r7, #48]	; 0x30
 800bdd8:	6030      	str	r0, [r6, #0]
 800bdda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bddc:	3b01      	subs	r3, #1
 800bdde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00e      	beq.n	800be02 <__ssvfscanf_r+0x9c6>
 800bde4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	dc2a      	bgt.n	800be42 <__ssvfscanf_r+0xa06>
 800bdec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bdee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bdf0:	f002 fab8 	bl	800e364 <__ssrefill_r>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	d024      	beq.n	800be42 <__ssvfscanf_r+0xa06>
 800bdf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfa:	42a3      	cmp	r3, r4
 800bdfc:	d101      	bne.n	800be02 <__ssvfscanf_r+0x9c6>
 800bdfe:	f7ff fbec 	bl	800b5da <__ssvfscanf_r+0x19e>
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	1b1d      	subs	r5, r3, r4
 800be06:	42a3      	cmp	r3, r4
 800be08:	d101      	bne.n	800be0e <__ssvfscanf_r+0x9d2>
 800be0a:	f7ff fc14 	bl	800b636 <__ssvfscanf_r+0x1fa>
 800be0e:	2300      	movs	r3, #0
 800be10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be12:	7013      	strb	r3, [r2, #0]
 800be14:	429e      	cmp	r6, r3
 800be16:	d009      	beq.n	800be2c <__ssvfscanf_r+0x9f0>
 800be18:	6a3b      	ldr	r3, [r7, #32]
 800be1a:	1c69      	adds	r1, r5, #1
 800be1c:	428b      	cmp	r3, r1
 800be1e:	d905      	bls.n	800be2c <__ssvfscanf_r+0x9f0>
 800be20:	6830      	ldr	r0, [r6, #0]
 800be22:	f001 fe05 	bl	800da30 <realloc>
 800be26:	2800      	cmp	r0, #0
 800be28:	d000      	beq.n	800be2c <__ssvfscanf_r+0x9f0>
 800be2a:	6030      	str	r0, [r6, #0]
 800be2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2e:	3301      	adds	r3, #1
 800be30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be34:	195b      	adds	r3, r3, r5
 800be36:	63bb      	str	r3, [r7, #56]	; 0x38
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	e477      	b.n	800b72c <__ssvfscanf_r+0x2f0>
 800be3c:	0016      	movs	r6, r2
 800be3e:	623a      	str	r2, [r7, #32]
 800be40:	e7a0      	b.n	800bd84 <__ssvfscanf_r+0x948>
 800be42:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800be44:	e79f      	b.n	800bd86 <__ssvfscanf_r+0x94a>
 800be46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d101      	bne.n	800be50 <__ssvfscanf_r+0xa14>
 800be4c:	3b01      	subs	r3, #1
 800be4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be50:	2210      	movs	r2, #16
 800be52:	2301      	movs	r3, #1
 800be54:	0034      	movs	r4, r6
 800be56:	4032      	ands	r2, r6
 800be58:	401c      	ands	r4, r3
 800be5a:	61fa      	str	r2, [r7, #28]
 800be5c:	421e      	tst	r6, r3
 800be5e:	d100      	bne.n	800be62 <__ssvfscanf_r+0xa26>
 800be60:	e102      	b.n	800c068 <__ssvfscanf_r+0xc2c>
 800be62:	2a00      	cmp	r2, #0
 800be64:	d000      	beq.n	800be68 <__ssvfscanf_r+0xa2c>
 800be66:	e09f      	b.n	800bfa8 <__ssvfscanf_r+0xb6c>
 800be68:	2080      	movs	r0, #128	; 0x80
 800be6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6c:	cb10      	ldmia	r3!, {r4}
 800be6e:	60fb      	str	r3, [r7, #12]
 800be70:	4206      	tst	r6, r0
 800be72:	d100      	bne.n	800be76 <__ssvfscanf_r+0xa3a>
 800be74:	e0a1      	b.n	800bfba <__ssvfscanf_r+0xb7e>
 800be76:	2c00      	cmp	r4, #0
 800be78:	d100      	bne.n	800be7c <__ssvfscanf_r+0xa40>
 800be7a:	e4aa      	b.n	800b7d2 <__ssvfscanf_r+0x396>
 800be7c:	f7fb fc52 	bl	8007724 <malloc>
 800be80:	6338      	str	r0, [r7, #48]	; 0x30
 800be82:	2800      	cmp	r0, #0
 800be84:	d100      	bne.n	800be88 <__ssvfscanf_r+0xa4c>
 800be86:	e4a1      	b.n	800b7cc <__ssvfscanf_r+0x390>
 800be88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8a:	6023      	str	r3, [r4, #0]
 800be8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be8e:	88de      	ldrh	r6, [r3, #6]
 800be90:	889d      	ldrh	r5, [r3, #4]
 800be92:	42ae      	cmp	r6, r5
 800be94:	d310      	bcc.n	800beb8 <__ssvfscanf_r+0xa7c>
 800be96:	4b72      	ldr	r3, [pc, #456]	; (800c060 <__ssvfscanf_r+0xc24>)
 800be98:	429d      	cmp	r5, r3
 800be9a:	d900      	bls.n	800be9e <__ssvfscanf_r+0xa62>
 800be9c:	e496      	b.n	800b7cc <__ssvfscanf_r+0x390>
 800be9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bea0:	3508      	adds	r5, #8
 800bea2:	b2ad      	uxth	r5, r5
 800bea4:	6818      	ldr	r0, [r3, #0]
 800bea6:	00a9      	lsls	r1, r5, #2
 800bea8:	f001 fdc2 	bl	800da30 <realloc>
 800beac:	2800      	cmp	r0, #0
 800beae:	d100      	bne.n	800beb2 <__ssvfscanf_r+0xa76>
 800beb0:	e48c      	b.n	800b7cc <__ssvfscanf_r+0x390>
 800beb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beb4:	6018      	str	r0, [r3, #0]
 800beb6:	809d      	strh	r5, [r3, #4]
 800beb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beba:	1c72      	adds	r2, r6, #1
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	00b6      	lsls	r6, r6, #2
 800bec0:	50f4      	str	r4, [r6, r3]
 800bec2:	2320      	movs	r3, #32
 800bec4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bec6:	0025      	movs	r5, r4
 800bec8:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800beca:	80ca      	strh	r2, [r1, #6]
 800becc:	613b      	str	r3, [r7, #16]
 800bece:	2300      	movs	r3, #0
 800bed0:	623b      	str	r3, [r7, #32]
 800bed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bed4:	4a63      	ldr	r2, [pc, #396]	; (800c064 <__ssvfscanf_r+0xc28>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	5cd3      	ldrb	r3, [r2, r3]
 800bedc:	2208      	movs	r2, #8
 800bede:	4213      	tst	r3, r2
 800bee0:	d149      	bne.n	800bf76 <__ssvfscanf_r+0xb3a>
 800bee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d046      	beq.n	800bf76 <__ssvfscanf_r+0xb3a>
 800bee8:	f7fc feb2 	bl	8008c50 <__locale_mb_cur_max>
 800beec:	6a3b      	ldr	r3, [r7, #32]
 800beee:	4298      	cmp	r0, r3
 800bef0:	d101      	bne.n	800bef6 <__ssvfscanf_r+0xaba>
 800bef2:	f7ff fb72 	bl	800b5da <__ssvfscanf_r+0x19e>
 800bef6:	6a3a      	ldr	r2, [r7, #32]
 800bef8:	2048      	movs	r0, #72	; 0x48
 800befa:	1c56      	adds	r6, r2, #1
 800befc:	228c      	movs	r2, #140	; 0x8c
 800befe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf00:	0052      	lsls	r2, r2, #1
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	1812      	adds	r2, r2, r0
 800bf06:	7819      	ldrb	r1, [r3, #0]
 800bf08:	6a38      	ldr	r0, [r7, #32]
 800bf0a:	19d2      	adds	r2, r2, r7
 800bf0c:	5411      	strb	r1, [r2, r0]
 800bf0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf10:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf12:	6852      	ldr	r2, [r2, #4]
 800bf14:	3301      	adds	r3, #1
 800bf16:	600b      	str	r3, [r1, #0]
 800bf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1a:	3a01      	subs	r2, #1
 800bf1c:	604a      	str	r2, [r1, #4]
 800bf1e:	2b03      	cmp	r3, #3
 800bf20:	d102      	bne.n	800bf28 <__ssvfscanf_r+0xaec>
 800bf22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf24:	2b04      	cmp	r3, #4
 800bf26:	d007      	beq.n	800bf38 <__ssvfscanf_r+0xafc>
 800bf28:	2048      	movs	r0, #72	; 0x48
 800bf2a:	2310      	movs	r3, #16
 800bf2c:	181b      	adds	r3, r3, r0
 800bf2e:	2208      	movs	r2, #8
 800bf30:	2100      	movs	r1, #0
 800bf32:	19d8      	adds	r0, r3, r7
 800bf34:	f7fc fe48 	bl	8008bc8 <memset>
 800bf38:	2148      	movs	r1, #72	; 0x48
 800bf3a:	2310      	movs	r3, #16
 800bf3c:	228c      	movs	r2, #140	; 0x8c
 800bf3e:	185b      	adds	r3, r3, r1
 800bf40:	0052      	lsls	r2, r2, #1
 800bf42:	19db      	adds	r3, r3, r7
 800bf44:	1852      	adds	r2, r2, r1
 800bf46:	9300      	str	r3, [sp, #0]
 800bf48:	0021      	movs	r1, r4
 800bf4a:	0033      	movs	r3, r6
 800bf4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bf4e:	19d2      	adds	r2, r2, r7
 800bf50:	f002 f908 	bl	800e164 <_mbrtowc_r>
 800bf54:	0003      	movs	r3, r0
 800bf56:	62b8      	str	r0, [r7, #40]	; 0x28
 800bf58:	3301      	adds	r3, #1
 800bf5a:	d101      	bne.n	800bf60 <__ssvfscanf_r+0xb24>
 800bf5c:	f7ff fb3d 	bl	800b5da <__ssvfscanf_r+0x19e>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d12f      	bne.n	800bfc4 <__ssvfscanf_r+0xb88>
 800bf64:	6020      	str	r0, [r4, #0]
 800bf66:	6820      	ldr	r0, [r4, #0]
 800bf68:	f002 f91a 	bl	800e1a0 <iswspace>
 800bf6c:	6238      	str	r0, [r7, #32]
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	d04a      	beq.n	800c008 <__ssvfscanf_r+0xbcc>
 800bf72:	2e00      	cmp	r6, #0
 800bf74:	d13c      	bne.n	800bff0 <__ssvfscanf_r+0xbb4>
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d000      	beq.n	800bf7e <__ssvfscanf_r+0xb42>
 800bf7c:	e640      	b.n	800bc00 <__ssvfscanf_r+0x7c4>
 800bf7e:	6023      	str	r3, [r4, #0]
 800bf80:	2d00      	cmp	r5, #0
 800bf82:	d100      	bne.n	800bf86 <__ssvfscanf_r+0xb4a>
 800bf84:	e639      	b.n	800bbfa <__ssvfscanf_r+0x7be>
 800bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf88:	693a      	ldr	r2, [r7, #16]
 800bf8a:	1ae4      	subs	r4, r4, r3
 800bf8c:	10a3      	asrs	r3, r4, #2
 800bf8e:	3301      	adds	r3, #1
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d800      	bhi.n	800bf96 <__ssvfscanf_r+0xb5a>
 800bf94:	e631      	b.n	800bbfa <__ssvfscanf_r+0x7be>
 800bf96:	6828      	ldr	r0, [r5, #0]
 800bf98:	1d21      	adds	r1, r4, #4
 800bf9a:	f001 fd49 	bl	800da30 <realloc>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d100      	bne.n	800bfa4 <__ssvfscanf_r+0xb68>
 800bfa2:	e62a      	b.n	800bbfa <__ssvfscanf_r+0x7be>
 800bfa4:	6028      	str	r0, [r5, #0]
 800bfa6:	e628      	b.n	800bbfa <__ssvfscanf_r+0x7be>
 800bfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfaa:	60fb      	str	r3, [r7, #12]
 800bfac:	2300      	movs	r3, #0
 800bfae:	001d      	movs	r5, r3
 800bfb0:	613b      	str	r3, [r7, #16]
 800bfb2:	633b      	str	r3, [r7, #48]	; 0x30
 800bfb4:	334c      	adds	r3, #76	; 0x4c
 800bfb6:	18fc      	adds	r4, r7, r3
 800bfb8:	e789      	b.n	800bece <__ssvfscanf_r+0xa92>
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	001d      	movs	r5, r3
 800bfbe:	613b      	str	r3, [r7, #16]
 800bfc0:	633b      	str	r3, [r7, #48]	; 0x30
 800bfc2:	e784      	b.n	800bece <__ssvfscanf_r+0xa92>
 800bfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc6:	623e      	str	r6, [r7, #32]
 800bfc8:	3302      	adds	r3, #2
 800bfca:	d1cc      	bne.n	800bf66 <__ssvfscanf_r+0xb2a>
 800bfcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	dd00      	ble.n	800bfd6 <__ssvfscanf_r+0xb9a>
 800bfd4:	e77d      	b.n	800bed2 <__ssvfscanf_r+0xa96>
 800bfd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bfd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bfda:	f002 f9c3 	bl	800e364 <__ssrefill_r>
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	d100      	bne.n	800bfe4 <__ssvfscanf_r+0xba8>
 800bfe2:	e776      	b.n	800bed2 <__ssvfscanf_r+0xa96>
 800bfe4:	6a3b      	ldr	r3, [r7, #32]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d001      	beq.n	800bfee <__ssvfscanf_r+0xbb2>
 800bfea:	f7ff faf6 	bl	800b5da <__ssvfscanf_r+0x19e>
 800bfee:	e7c2      	b.n	800bf76 <__ssvfscanf_r+0xb3a>
 800bff0:	238c      	movs	r3, #140	; 0x8c
 800bff2:	2248      	movs	r2, #72	; 0x48
 800bff4:	005b      	lsls	r3, r3, #1
 800bff6:	189b      	adds	r3, r3, r2
 800bff8:	3e01      	subs	r6, #1
 800bffa:	19db      	adds	r3, r3, r7
 800bffc:	5cf1      	ldrb	r1, [r6, r3]
 800bffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c000:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c002:	f002 f973 	bl	800e2ec <_sungetc_r>
 800c006:	e7b4      	b.n	800bf72 <__ssvfscanf_r+0xb36>
 800c008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c00a:	199b      	adds	r3, r3, r6
 800c00c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c010:	2b03      	cmp	r3, #3
 800c012:	d102      	bne.n	800c01a <__ssvfscanf_r+0xbde>
 800c014:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c016:	2b04      	cmp	r3, #4
 800c018:	d002      	beq.n	800c020 <__ssvfscanf_r+0xbe4>
 800c01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c01c:	3b01      	subs	r3, #1
 800c01e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1d2      	bne.n	800bfcc <__ssvfscanf_r+0xb90>
 800c026:	3404      	adds	r4, #4
 800c028:	2d00      	cmp	r5, #0
 800c02a:	d016      	beq.n	800c05a <__ssvfscanf_r+0xc1e>
 800c02c:	69fa      	ldr	r2, [r7, #28]
 800c02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c030:	623a      	str	r2, [r7, #32]
 800c032:	693a      	ldr	r2, [r7, #16]
 800c034:	1ae6      	subs	r6, r4, r3
 800c036:	10b3      	asrs	r3, r6, #2
 800c038:	4293      	cmp	r3, r2
 800c03a:	d3c7      	bcc.n	800bfcc <__ssvfscanf_r+0xb90>
 800c03c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c03e:	00d1      	lsls	r1, r2, #3
 800c040:	f001 fcf6 	bl	800da30 <realloc>
 800c044:	6338      	str	r0, [r7, #48]	; 0x30
 800c046:	2800      	cmp	r0, #0
 800c048:	d101      	bne.n	800c04e <__ssvfscanf_r+0xc12>
 800c04a:	f7ff fbbf 	bl	800b7cc <__ssvfscanf_r+0x390>
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	1984      	adds	r4, r0, r6
 800c052:	005b      	lsls	r3, r3, #1
 800c054:	6028      	str	r0, [r5, #0]
 800c056:	613b      	str	r3, [r7, #16]
 800c058:	e7b8      	b.n	800bfcc <__ssvfscanf_r+0xb90>
 800c05a:	623d      	str	r5, [r7, #32]
 800c05c:	e7b6      	b.n	800bfcc <__ssvfscanf_r+0xb90>
 800c05e:	46c0      	nop			; (mov r8, r8)
 800c060:	0000fff6 	.word	0x0000fff6
 800c064:	0800f8d9 	.word	0x0800f8d9
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d01c      	beq.n	800c0a8 <__ssvfscanf_r+0xc6c>
 800c06e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c070:	49bf      	ldr	r1, [pc, #764]	; (800c370 <__ssvfscanf_r+0xf34>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	781a      	ldrb	r2, [r3, #0]
 800c076:	5c8a      	ldrb	r2, [r1, r2]
 800c078:	2108      	movs	r1, #8
 800c07a:	420a      	tst	r2, r1
 800c07c:	d000      	beq.n	800c080 <__ssvfscanf_r+0xc44>
 800c07e:	e4a1      	b.n	800b9c4 <__ssvfscanf_r+0x588>
 800c080:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c082:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c084:	6852      	ldr	r2, [r2, #4]
 800c086:	3301      	adds	r3, #1
 800c088:	600b      	str	r3, [r1, #0]
 800c08a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c08c:	3a01      	subs	r2, #1
 800c08e:	3401      	adds	r4, #1
 800c090:	604a      	str	r2, [r1, #4]
 800c092:	429c      	cmp	r4, r3
 800c094:	d100      	bne.n	800c098 <__ssvfscanf_r+0xc5c>
 800c096:	e495      	b.n	800b9c4 <__ssvfscanf_r+0x588>
 800c098:	2a00      	cmp	r2, #0
 800c09a:	dce8      	bgt.n	800c06e <__ssvfscanf_r+0xc32>
 800c09c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c09e:	f002 f961 	bl	800e364 <__ssrefill_r>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d0e3      	beq.n	800c06e <__ssvfscanf_r+0xc32>
 800c0a6:	e48d      	b.n	800b9c4 <__ssvfscanf_r+0x588>
 800c0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0aa:	0032      	movs	r2, r6
 800c0ac:	cb10      	ldmia	r3!, {r4}
 800c0ae:	61fb      	str	r3, [r7, #28]
 800c0b0:	2380      	movs	r3, #128	; 0x80
 800c0b2:	401a      	ands	r2, r3
 800c0b4:	421e      	tst	r6, r3
 800c0b6:	d039      	beq.n	800c12c <__ssvfscanf_r+0xcf0>
 800c0b8:	2c00      	cmp	r4, #0
 800c0ba:	d101      	bne.n	800c0c0 <__ssvfscanf_r+0xc84>
 800c0bc:	f7ff fabb 	bl	800b636 <__ssvfscanf_r+0x1fa>
 800c0c0:	2020      	movs	r0, #32
 800c0c2:	f7fb fb2f 	bl	8007724 <malloc>
 800c0c6:	6338      	str	r0, [r7, #48]	; 0x30
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d101      	bne.n	800c0d0 <__ssvfscanf_r+0xc94>
 800c0cc:	f7ff fa8c 	bl	800b5e8 <__ssvfscanf_r+0x1ac>
 800c0d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0d2:	6020      	str	r0, [r4, #0]
 800c0d4:	88de      	ldrh	r6, [r3, #6]
 800c0d6:	889d      	ldrh	r5, [r3, #4]
 800c0d8:	6818      	ldr	r0, [r3, #0]
 800c0da:	42ae      	cmp	r6, r5
 800c0dc:	d310      	bcc.n	800c100 <__ssvfscanf_r+0xcc4>
 800c0de:	4ba5      	ldr	r3, [pc, #660]	; (800c374 <__ssvfscanf_r+0xf38>)
 800c0e0:	429d      	cmp	r5, r3
 800c0e2:	d901      	bls.n	800c0e8 <__ssvfscanf_r+0xcac>
 800c0e4:	f7ff fb7b 	bl	800b7de <__ssvfscanf_r+0x3a2>
 800c0e8:	3508      	adds	r5, #8
 800c0ea:	b2ad      	uxth	r5, r5
 800c0ec:	00a9      	lsls	r1, r5, #2
 800c0ee:	f001 fc9f 	bl	800da30 <realloc>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d101      	bne.n	800c0fa <__ssvfscanf_r+0xcbe>
 800c0f6:	f7ff fb72 	bl	800b7de <__ssvfscanf_r+0x3a2>
 800c0fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0fc:	6018      	str	r0, [r3, #0]
 800c0fe:	809d      	strh	r5, [r3, #4]
 800c100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c102:	1c72      	adds	r2, r6, #1
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	00b6      	lsls	r6, r6, #2
 800c108:	50f4      	str	r4, [r6, r3]
 800c10a:	2320      	movs	r3, #32
 800c10c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c10e:	0026      	movs	r6, r4
 800c110:	80ca      	strh	r2, [r1, #6]
 800c112:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800c114:	633b      	str	r3, [r7, #48]	; 0x30
 800c116:	0025      	movs	r5, r4
 800c118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c11a:	4995      	ldr	r1, [pc, #596]	; (800c370 <__ssvfscanf_r+0xf34>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	781a      	ldrb	r2, [r3, #0]
 800c120:	5c8a      	ldrb	r2, [r1, r2]
 800c122:	2108      	movs	r1, #8
 800c124:	420a      	tst	r2, r1
 800c126:	d004      	beq.n	800c132 <__ssvfscanf_r+0xcf6>
 800c128:	623c      	str	r4, [r7, #32]
 800c12a:	e031      	b.n	800c190 <__ssvfscanf_r+0xd54>
 800c12c:	0016      	movs	r6, r2
 800c12e:	633a      	str	r2, [r7, #48]	; 0x30
 800c130:	e7f1      	b.n	800c116 <__ssvfscanf_r+0xcda>
 800c132:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c134:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c136:	6852      	ldr	r2, [r2, #4]
 800c138:	3a01      	subs	r2, #1
 800c13a:	604a      	str	r2, [r1, #4]
 800c13c:	1c5a      	adds	r2, r3, #1
 800c13e:	600a      	str	r2, [r1, #0]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	1c62      	adds	r2, r4, #1
 800c144:	623a      	str	r2, [r7, #32]
 800c146:	7023      	strb	r3, [r4, #0]
 800c148:	2e00      	cmp	r6, #0
 800c14a:	d010      	beq.n	800c16e <__ssvfscanf_r+0xd32>
 800c14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14e:	1b54      	subs	r4, r2, r5
 800c150:	429c      	cmp	r4, r3
 800c152:	d30c      	bcc.n	800c16e <__ssvfscanf_r+0xd32>
 800c154:	005b      	lsls	r3, r3, #1
 800c156:	0028      	movs	r0, r5
 800c158:	0019      	movs	r1, r3
 800c15a:	633b      	str	r3, [r7, #48]	; 0x30
 800c15c:	f001 fc68 	bl	800da30 <realloc>
 800c160:	1e05      	subs	r5, r0, #0
 800c162:	d101      	bne.n	800c168 <__ssvfscanf_r+0xd2c>
 800c164:	f7ff fa40 	bl	800b5e8 <__ssvfscanf_r+0x1ac>
 800c168:	1903      	adds	r3, r0, r4
 800c16a:	623b      	str	r3, [r7, #32]
 800c16c:	6030      	str	r0, [r6, #0]
 800c16e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c170:	3b01      	subs	r3, #1
 800c172:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00b      	beq.n	800c190 <__ssvfscanf_r+0xd54>
 800c178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	dd01      	ble.n	800c184 <__ssvfscanf_r+0xd48>
 800c180:	6a3c      	ldr	r4, [r7, #32]
 800c182:	e7c9      	b.n	800c118 <__ssvfscanf_r+0xcdc>
 800c184:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c186:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c188:	f002 f8ec 	bl	800e364 <__ssrefill_r>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	d0f7      	beq.n	800c180 <__ssvfscanf_r+0xd44>
 800c190:	2300      	movs	r3, #0
 800c192:	6a3a      	ldr	r2, [r7, #32]
 800c194:	7013      	strb	r3, [r2, #0]
 800c196:	1b55      	subs	r5, r2, r5
 800c198:	2e00      	cmp	r6, #0
 800c19a:	d009      	beq.n	800c1b0 <__ssvfscanf_r+0xd74>
 800c19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19e:	1c69      	adds	r1, r5, #1
 800c1a0:	428b      	cmp	r3, r1
 800c1a2:	d905      	bls.n	800c1b0 <__ssvfscanf_r+0xd74>
 800c1a4:	6830      	ldr	r0, [r6, #0]
 800c1a6:	f001 fc43 	bl	800da30 <realloc>
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d000      	beq.n	800c1b0 <__ssvfscanf_r+0xd74>
 800c1ae:	6030      	str	r0, [r6, #0]
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b2:	195b      	adds	r3, r3, r5
 800c1b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1bc:	e63c      	b.n	800be38 <__ssvfscanf_r+0x9fc>
 800c1be:	22ae      	movs	r2, #174	; 0xae
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1c4:	0052      	lsls	r2, r2, #1
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	6239      	str	r1, [r7, #32]
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d906      	bls.n	800c1dc <__ssvfscanf_r+0xda0>
 800c1ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1d0:	3b5e      	subs	r3, #94	; 0x5e
 800c1d2:	3bff      	subs	r3, #255	; 0xff
 800c1d4:	623b      	str	r3, [r7, #32]
 800c1d6:	235e      	movs	r3, #94	; 0x5e
 800c1d8:	33ff      	adds	r3, #255	; 0xff
 800c1da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1dc:	24d8      	movs	r4, #216	; 0xd8
 800c1de:	2300      	movs	r3, #0
 800c1e0:	2248      	movs	r2, #72	; 0x48
 800c1e2:	0124      	lsls	r4, r4, #4
 800c1e4:	4334      	orrs	r4, r6
 800c1e6:	2680      	movs	r6, #128	; 0x80
 800c1e8:	61fb      	str	r3, [r7, #28]
 800c1ea:	3319      	adds	r3, #25
 800c1ec:	33ff      	adds	r3, #255	; 0xff
 800c1ee:	189b      	adds	r3, r3, r2
 800c1f0:	19dd      	adds	r5, r3, r7
 800c1f2:	00b6      	lsls	r6, r6, #2
 800c1f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1f6:	681a      	ldr	r2, [r3, #0]
 800c1f8:	7813      	ldrb	r3, [r2, #0]
 800c1fa:	2b39      	cmp	r3, #57	; 0x39
 800c1fc:	d80f      	bhi.n	800c21e <__ssvfscanf_r+0xde2>
 800c1fe:	2b2a      	cmp	r3, #42	; 0x2a
 800c200:	d91b      	bls.n	800c23a <__ssvfscanf_r+0xdfe>
 800c202:	0018      	movs	r0, r3
 800c204:	382b      	subs	r0, #43	; 0x2b
 800c206:	280e      	cmp	r0, #14
 800c208:	d817      	bhi.n	800c23a <__ssvfscanf_r+0xdfe>
 800c20a:	f7f3 ff83 	bl	8000114 <__gnu_thumb1_case_uqi>
 800c20e:	168f      	.short	0x168f
 800c210:	5416168f 	.word	0x5416168f
 800c214:	80808080 	.word	0x80808080
 800c218:	87808080 	.word	0x87808080
 800c21c:	87          	.byte	0x87
 800c21d:	00          	.byte	0x00
 800c21e:	2b66      	cmp	r3, #102	; 0x66
 800c220:	d83a      	bhi.n	800c298 <__ssvfscanf_r+0xe5c>
 800c222:	2b60      	cmp	r3, #96	; 0x60
 800c224:	d803      	bhi.n	800c22e <__ssvfscanf_r+0xdf2>
 800c226:	2b46      	cmp	r3, #70	; 0x46
 800c228:	d805      	bhi.n	800c236 <__ssvfscanf_r+0xdfa>
 800c22a:	2b40      	cmp	r3, #64	; 0x40
 800c22c:	d905      	bls.n	800c23a <__ssvfscanf_r+0xdfe>
 800c22e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c230:	290a      	cmp	r1, #10
 800c232:	dc71      	bgt.n	800c318 <__ssvfscanf_r+0xedc>
 800c234:	e001      	b.n	800c23a <__ssvfscanf_r+0xdfe>
 800c236:	2b58      	cmp	r3, #88	; 0x58
 800c238:	d030      	beq.n	800c29c <__ssvfscanf_r+0xe60>
 800c23a:	05e3      	lsls	r3, r4, #23
 800c23c:	d515      	bpl.n	800c26a <__ssvfscanf_r+0xe2e>
 800c23e:	238c      	movs	r3, #140	; 0x8c
 800c240:	2248      	movs	r2, #72	; 0x48
 800c242:	005b      	lsls	r3, r3, #1
 800c244:	189b      	adds	r3, r3, r2
 800c246:	19db      	adds	r3, r3, r7
 800c248:	429d      	cmp	r5, r3
 800c24a:	d905      	bls.n	800c258 <__ssvfscanf_r+0xe1c>
 800c24c:	3d01      	subs	r5, #1
 800c24e:	7829      	ldrb	r1, [r5, #0]
 800c250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c252:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c254:	f002 f84a 	bl	800e2ec <_sungetc_r>
 800c258:	238c      	movs	r3, #140	; 0x8c
 800c25a:	2248      	movs	r2, #72	; 0x48
 800c25c:	005b      	lsls	r3, r3, #1
 800c25e:	189b      	adds	r3, r3, r2
 800c260:	19db      	adds	r3, r3, r7
 800c262:	429d      	cmp	r5, r3
 800c264:	d101      	bne.n	800c26a <__ssvfscanf_r+0xe2e>
 800c266:	f7ff f9e6 	bl	800b636 <__ssvfscanf_r+0x1fa>
 800c26a:	2310      	movs	r3, #16
 800c26c:	0022      	movs	r2, r4
 800c26e:	401a      	ands	r2, r3
 800c270:	421c      	tst	r4, r3
 800c272:	d171      	bne.n	800c358 <__ssvfscanf_r+0xf1c>
 800c274:	218c      	movs	r1, #140	; 0x8c
 800c276:	2048      	movs	r0, #72	; 0x48
 800c278:	0049      	lsls	r1, r1, #1
 800c27a:	1809      	adds	r1, r1, r0
 800c27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27e:	697e      	ldr	r6, [r7, #20]
 800c280:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c282:	19c9      	adds	r1, r1, r7
 800c284:	702a      	strb	r2, [r5, #0]
 800c286:	47b0      	blx	r6
 800c288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28a:	1d1e      	adds	r6, r3, #4
 800c28c:	06a3      	lsls	r3, r4, #26
 800c28e:	d559      	bpl.n	800c344 <__ssvfscanf_r+0xf08>
 800c290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	6018      	str	r0, [r3, #0]
 800c296:	e05b      	b.n	800c350 <__ssvfscanf_r+0xf14>
 800c298:	2b78      	cmp	r3, #120	; 0x78
 800c29a:	d1ce      	bne.n	800c23a <__ssvfscanf_r+0xdfe>
 800c29c:	21c0      	movs	r1, #192	; 0xc0
 800c29e:	00c9      	lsls	r1, r1, #3
 800c2a0:	4021      	ands	r1, r4
 800c2a2:	42b1      	cmp	r1, r6
 800c2a4:	d1c9      	bne.n	800c23a <__ssvfscanf_r+0xdfe>
 800c2a6:	4934      	ldr	r1, [pc, #208]	; (800c378 <__ssvfscanf_r+0xf3c>)
 800c2a8:	4021      	ands	r1, r4
 800c2aa:	24a0      	movs	r4, #160	; 0xa0
 800c2ac:	00e4      	lsls	r4, r4, #3
 800c2ae:	430c      	orrs	r4, r1
 800c2b0:	2110      	movs	r1, #16
 800c2b2:	6279      	str	r1, [r7, #36]	; 0x24
 800c2b4:	e00b      	b.n	800c2ce <__ssvfscanf_r+0xe92>
 800c2b6:	0521      	lsls	r1, r4, #20
 800c2b8:	d509      	bpl.n	800c2ce <__ssvfscanf_r+0xe92>
 800c2ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2bc:	2900      	cmp	r1, #0
 800c2be:	d102      	bne.n	800c2c6 <__ssvfscanf_r+0xe8a>
 800c2c0:	3108      	adds	r1, #8
 800c2c2:	4334      	orrs	r4, r6
 800c2c4:	6279      	str	r1, [r7, #36]	; 0x24
 800c2c6:	0561      	lsls	r1, r4, #21
 800c2c8:	d504      	bpl.n	800c2d4 <__ssvfscanf_r+0xe98>
 800c2ca:	492c      	ldr	r1, [pc, #176]	; (800c37c <__ssvfscanf_r+0xf40>)
 800c2cc:	400c      	ands	r4, r1
 800c2ce:	702b      	strb	r3, [r5, #0]
 800c2d0:	3501      	adds	r5, #1
 800c2d2:	e00c      	b.n	800c2ee <__ssvfscanf_r+0xeb2>
 800c2d4:	4b2a      	ldr	r3, [pc, #168]	; (800c380 <__ssvfscanf_r+0xf44>)
 800c2d6:	401c      	ands	r4, r3
 800c2d8:	6a3b      	ldr	r3, [r7, #32]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d004      	beq.n	800c2e8 <__ssvfscanf_r+0xeac>
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	623b      	str	r3, [r7, #32]
 800c2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	61fb      	str	r3, [r7, #28]
 800c2ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	3b01      	subs	r3, #1
 800c2f6:	604b      	str	r3, [r1, #4]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	dd1c      	ble.n	800c336 <__ssvfscanf_r+0xefa>
 800c2fc:	3201      	adds	r2, #1
 800c2fe:	600a      	str	r2, [r1, #0]
 800c300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c302:	3b01      	subs	r3, #1
 800c304:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c306:	2b00      	cmp	r3, #0
 800c308:	d000      	beq.n	800c30c <__ssvfscanf_r+0xed0>
 800c30a:	e773      	b.n	800c1f4 <__ssvfscanf_r+0xdb8>
 800c30c:	e795      	b.n	800c23a <__ssvfscanf_r+0xdfe>
 800c30e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c310:	491c      	ldr	r1, [pc, #112]	; (800c384 <__ssvfscanf_r+0xf48>)
 800c312:	0040      	lsls	r0, r0, #1
 800c314:	5e41      	ldrsh	r1, [r0, r1]
 800c316:	6279      	str	r1, [r7, #36]	; 0x24
 800c318:	491b      	ldr	r1, [pc, #108]	; (800c388 <__ssvfscanf_r+0xf4c>)
 800c31a:	e7d7      	b.n	800c2cc <__ssvfscanf_r+0xe90>
 800c31c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c31e:	4919      	ldr	r1, [pc, #100]	; (800c384 <__ssvfscanf_r+0xf48>)
 800c320:	0040      	lsls	r0, r0, #1
 800c322:	5e41      	ldrsh	r1, [r0, r1]
 800c324:	6279      	str	r1, [r7, #36]	; 0x24
 800c326:	2908      	cmp	r1, #8
 800c328:	dcf6      	bgt.n	800c318 <__ssvfscanf_r+0xedc>
 800c32a:	e786      	b.n	800c23a <__ssvfscanf_r+0xdfe>
 800c32c:	2180      	movs	r1, #128	; 0x80
 800c32e:	420c      	tst	r4, r1
 800c330:	d083      	beq.n	800c23a <__ssvfscanf_r+0xdfe>
 800c332:	438c      	bics	r4, r1
 800c334:	e7cb      	b.n	800c2ce <__ssvfscanf_r+0xe92>
 800c336:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c338:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c33a:	f002 f813 	bl	800e364 <__ssrefill_r>
 800c33e:	2800      	cmp	r0, #0
 800c340:	d0de      	beq.n	800c300 <__ssvfscanf_r+0xec4>
 800c342:	e77a      	b.n	800c23a <__ssvfscanf_r+0xdfe>
 800c344:	2308      	movs	r3, #8
 800c346:	421c      	tst	r4, r3
 800c348:	d020      	beq.n	800c38c <__ssvfscanf_r+0xf50>
 800c34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	7018      	strb	r0, [r3, #0]
 800c350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c352:	633e      	str	r6, [r7, #48]	; 0x30
 800c354:	3301      	adds	r3, #1
 800c356:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c358:	238c      	movs	r3, #140	; 0x8c
 800c35a:	2248      	movs	r2, #72	; 0x48
 800c35c:	005b      	lsls	r3, r3, #1
 800c35e:	189b      	adds	r3, r3, r2
 800c360:	19db      	adds	r3, r3, r7
 800c362:	1aed      	subs	r5, r5, r3
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	18ed      	adds	r5, r5, r3
 800c368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36a:	195b      	adds	r3, r3, r5
 800c36c:	f7ff f92d 	bl	800b5ca <__ssvfscanf_r+0x18e>
 800c370:	0800f8d9 	.word	0x0800f8d9
 800c374:	0000fff6 	.word	0x0000fff6
 800c378:	fffffdff 	.word	0xfffffdff
 800c37c:	fffffa7f 	.word	0xfffffa7f
 800c380:	fffffc7f 	.word	0xfffffc7f
 800c384:	0800fc06 	.word	0x0800fc06
 800c388:	fffff47f 	.word	0xfffff47f
 800c38c:	0763      	lsls	r3, r4, #29
 800c38e:	d503      	bpl.n	800c398 <__ssvfscanf_r+0xf5c>
 800c390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	8018      	strh	r0, [r3, #0]
 800c396:	e7db      	b.n	800c350 <__ssvfscanf_r+0xf14>
 800c398:	2301      	movs	r3, #1
 800c39a:	0022      	movs	r2, r4
 800c39c:	401a      	ands	r2, r3
 800c39e:	421c      	tst	r4, r3
 800c3a0:	d000      	beq.n	800c3a4 <__ssvfscanf_r+0xf68>
 800c3a2:	e775      	b.n	800c290 <__ssvfscanf_r+0xe54>
 800c3a4:	07a4      	lsls	r4, r4, #30
 800c3a6:	d400      	bmi.n	800c3aa <__ssvfscanf_r+0xf6e>
 800c3a8:	e772      	b.n	800c290 <__ssvfscanf_r+0xe54>
 800c3aa:	4ba8      	ldr	r3, [pc, #672]	; (800c64c <__ssvfscanf_r+0x1210>)
 800c3ac:	6979      	ldr	r1, [r7, #20]
 800c3ae:	4299      	cmp	r1, r3
 800c3b0:	d10c      	bne.n	800c3cc <__ssvfscanf_r+0xf90>
 800c3b2:	218c      	movs	r1, #140	; 0x8c
 800c3b4:	2048      	movs	r0, #72	; 0x48
 800c3b6:	0049      	lsls	r1, r1, #1
 800c3b8:	1809      	adds	r1, r1, r0
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c3be:	19c9      	adds	r1, r1, r7
 800c3c0:	f001 fecc 	bl	800e15c <_strtoull_r>
 800c3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	c303      	stmia	r3!, {r0, r1}
 800c3ca:	e7c1      	b.n	800c350 <__ssvfscanf_r+0xf14>
 800c3cc:	218c      	movs	r1, #140	; 0x8c
 800c3ce:	2048      	movs	r0, #72	; 0x48
 800c3d0:	0049      	lsls	r1, r1, #1
 800c3d2:	1809      	adds	r1, r1, r0
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c3d8:	19c9      	adds	r1, r1, r7
 800c3da:	f001 fe0d 	bl	800dff8 <_strtoll_r>
 800c3de:	e7f1      	b.n	800c3c4 <__ssvfscanf_r+0xf88>
 800c3e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c3e2:	f000 fb9f 	bl	800cb24 <_localeconv_r>
 800c3e6:	22ae      	movs	r2, #174	; 0xae
 800c3e8:	2100      	movs	r1, #0
 800c3ea:	6803      	ldr	r3, [r0, #0]
 800c3ec:	0052      	lsls	r2, r2, #1
 800c3ee:	603b      	str	r3, [r7, #0]
 800c3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f2:	60f9      	str	r1, [r7, #12]
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d906      	bls.n	800c408 <__ssvfscanf_r+0xfcc>
 800c3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3fc:	3b5e      	subs	r3, #94	; 0x5e
 800c3fe:	3bff      	subs	r3, #255	; 0xff
 800c400:	60fb      	str	r3, [r7, #12]
 800c402:	235e      	movs	r3, #94	; 0x5e
 800c404:	33ff      	adds	r3, #255	; 0xff
 800c406:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c408:	23f0      	movs	r3, #240	; 0xf0
 800c40a:	00db      	lsls	r3, r3, #3
 800c40c:	431e      	orrs	r6, r3
 800c40e:	238c      	movs	r3, #140	; 0x8c
 800c410:	2248      	movs	r2, #72	; 0x48
 800c412:	2400      	movs	r4, #0
 800c414:	005b      	lsls	r3, r3, #1
 800c416:	189b      	adds	r3, r3, r2
 800c418:	623c      	str	r4, [r7, #32]
 800c41a:	607c      	str	r4, [r7, #4]
 800c41c:	60bc      	str	r4, [r7, #8]
 800c41e:	61fc      	str	r4, [r7, #28]
 800c420:	613c      	str	r4, [r7, #16]
 800c422:	19dd      	adds	r5, r3, r7
 800c424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	781a      	ldrb	r2, [r3, #0]
 800c42a:	0010      	movs	r0, r2
 800c42c:	382b      	subs	r0, #43	; 0x2b
 800c42e:	284e      	cmp	r0, #78	; 0x4e
 800c430:	d900      	bls.n	800c434 <__ssvfscanf_r+0xff8>
 800c432:	e133      	b.n	800c69c <__ssvfscanf_r+0x1260>
 800c434:	f7f3 fe78 	bl	8000128 <__gnu_thumb1_case_uhi>
 800c438:	0132009b 	.word	0x0132009b
 800c43c:	0132009b 	.word	0x0132009b
 800c440:	004f0132 	.word	0x004f0132
 800c444:	00720072 	.word	0x00720072
 800c448:	00720072 	.word	0x00720072
 800c44c:	00720072 	.word	0x00720072
 800c450:	00720072 	.word	0x00720072
 800c454:	01320072 	.word	0x01320072
 800c458:	01320132 	.word	0x01320132
 800c45c:	01320132 	.word	0x01320132
 800c460:	01320132 	.word	0x01320132
 800c464:	007b00bc 	.word	0x007b00bc
 800c468:	007b007b 	.word	0x007b007b
 800c46c:	00f7012f 	.word	0x00f7012f
 800c470:	01320132 	.word	0x01320132
 800c474:	013200e3 	.word	0x013200e3
 800c478:	01320132 	.word	0x01320132
 800c47c:	00a00132 	.word	0x00a00132
 800c480:	01120132 	.word	0x01120132
 800c484:	01320132 	.word	0x01320132
 800c488:	01010132 	.word	0x01010132
 800c48c:	01320132 	.word	0x01320132
 800c490:	00820132 	.word	0x00820132
 800c494:	01320105 	.word	0x01320105
 800c498:	01320132 	.word	0x01320132
 800c49c:	01320132 	.word	0x01320132
 800c4a0:	01320132 	.word	0x01320132
 800c4a4:	007b00bc 	.word	0x007b00bc
 800c4a8:	007b007b 	.word	0x007b007b
 800c4ac:	00f7012f 	.word	0x00f7012f
 800c4b0:	01320132 	.word	0x01320132
 800c4b4:	013200e3 	.word	0x013200e3
 800c4b8:	01320132 	.word	0x01320132
 800c4bc:	00a00132 	.word	0x00a00132
 800c4c0:	01120132 	.word	0x01120132
 800c4c4:	01320132 	.word	0x01320132
 800c4c8:	01010132 	.word	0x01010132
 800c4cc:	01320132 	.word	0x01320132
 800c4d0:	00820132 	.word	0x00820132
 800c4d4:	0105      	.short	0x0105
 800c4d6:	05f1      	lsls	r1, r6, #23
 800c4d8:	d520      	bpl.n	800c51c <__ssvfscanf_r+0x10e0>
 800c4da:	2280      	movs	r2, #128	; 0x80
 800c4dc:	4396      	bics	r6, r2
 800c4de:	69fa      	ldr	r2, [r7, #28]
 800c4e0:	3201      	adds	r2, #1
 800c4e2:	61fa      	str	r2, [r7, #28]
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	2a00      	cmp	r2, #0
 800c4e8:	d004      	beq.n	800c4f4 <__ssvfscanf_r+0x10b8>
 800c4ea:	3a01      	subs	r2, #1
 800c4ec:	60fa      	str	r2, [r7, #12]
 800c4ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c4f0:	3201      	adds	r2, #1
 800c4f2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c4f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c4f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c4f8:	3a01      	subs	r2, #1
 800c4fa:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c4fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4fe:	3201      	adds	r2, #1
 800c500:	63ba      	str	r2, [r7, #56]	; 0x38
 800c502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c504:	6852      	ldr	r2, [r2, #4]
 800c506:	3a01      	subs	r2, #1
 800c508:	604a      	str	r2, [r1, #4]
 800c50a:	2a00      	cmp	r2, #0
 800c50c:	dc00      	bgt.n	800c510 <__ssvfscanf_r+0x10d4>
 800c50e:	e0d6      	b.n	800c6be <__ssvfscanf_r+0x1282>
 800c510:	3301      	adds	r3, #1
 800c512:	600b      	str	r3, [r1, #0]
 800c514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c516:	2b00      	cmp	r3, #0
 800c518:	d184      	bne.n	800c424 <__ssvfscanf_r+0xfe8>
 800c51a:	e057      	b.n	800c5cc <__ssvfscanf_r+0x1190>
 800c51c:	6a39      	ldr	r1, [r7, #32]
 800c51e:	1909      	adds	r1, r1, r4
 800c520:	2900      	cmp	r1, #0
 800c522:	d153      	bne.n	800c5cc <__ssvfscanf_r+0x1190>
 800c524:	494a      	ldr	r1, [pc, #296]	; (800c650 <__ssvfscanf_r+0x1214>)
 800c526:	400e      	ands	r6, r1
 800c528:	702a      	strb	r2, [r5, #0]
 800c52a:	3501      	adds	r5, #1
 800c52c:	e7e2      	b.n	800c4f4 <__ssvfscanf_r+0x10b8>
 800c52e:	0531      	lsls	r1, r6, #20
 800c530:	d54c      	bpl.n	800c5cc <__ssvfscanf_r+0x1190>
 800c532:	6a39      	ldr	r1, [r7, #32]
 800c534:	1909      	adds	r1, r1, r4
 800c536:	2900      	cmp	r1, #0
 800c538:	d040      	beq.n	800c5bc <__ssvfscanf_r+0x1180>
 800c53a:	e047      	b.n	800c5cc <__ssvfscanf_r+0x1190>
 800c53c:	2198      	movs	r1, #152	; 0x98
 800c53e:	2080      	movs	r0, #128	; 0x80
 800c540:	0109      	lsls	r1, r1, #4
 800c542:	4031      	ands	r1, r6
 800c544:	0040      	lsls	r0, r0, #1
 800c546:	4281      	cmp	r1, r0
 800c548:	d140      	bne.n	800c5cc <__ssvfscanf_r+0x1190>
 800c54a:	69f9      	ldr	r1, [r7, #28]
 800c54c:	2901      	cmp	r1, #1
 800c54e:	d13d      	bne.n	800c5cc <__ssvfscanf_r+0x1190>
 800c550:	2080      	movs	r0, #128	; 0x80
 800c552:	4940      	ldr	r1, [pc, #256]	; (800c654 <__ssvfscanf_r+0x1218>)
 800c554:	0100      	lsls	r0, r0, #4
 800c556:	400e      	ands	r6, r1
 800c558:	3132      	adds	r1, #50	; 0x32
 800c55a:	31ff      	adds	r1, #255	; 0xff
 800c55c:	7029      	strb	r1, [r5, #0]
 800c55e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c560:	4306      	orrs	r6, r0
 800c562:	3901      	subs	r1, #1
 800c564:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c566:	3501      	adds	r5, #1
 800c568:	2100      	movs	r1, #0
 800c56a:	61f9      	str	r1, [r7, #28]
 800c56c:	e7dc      	b.n	800c528 <__ssvfscanf_r+0x10ec>
 800c56e:	2180      	movs	r1, #128	; 0x80
 800c570:	420e      	tst	r6, r1
 800c572:	d02b      	beq.n	800c5cc <__ssvfscanf_r+0x1190>
 800c574:	438e      	bics	r6, r1
 800c576:	e7d7      	b.n	800c528 <__ssvfscanf_r+0x10ec>
 800c578:	6a39      	ldr	r1, [r7, #32]
 800c57a:	2900      	cmp	r1, #0
 800c57c:	d10d      	bne.n	800c59a <__ssvfscanf_r+0x115e>
 800c57e:	69f9      	ldr	r1, [r7, #28]
 800c580:	2900      	cmp	r1, #0
 800c582:	d10e      	bne.n	800c5a2 <__ssvfscanf_r+0x1166>
 800c584:	21e0      	movs	r1, #224	; 0xe0
 800c586:	0030      	movs	r0, r6
 800c588:	00c9      	lsls	r1, r1, #3
 800c58a:	4008      	ands	r0, r1
 800c58c:	4288      	cmp	r0, r1
 800c58e:	d108      	bne.n	800c5a2 <__ssvfscanf_r+0x1166>
 800c590:	4931      	ldr	r1, [pc, #196]	; (800c658 <__ssvfscanf_r+0x121c>)
 800c592:	400e      	ands	r6, r1
 800c594:	2101      	movs	r1, #1
 800c596:	6239      	str	r1, [r7, #32]
 800c598:	e7c6      	b.n	800c528 <__ssvfscanf_r+0x10ec>
 800c59a:	6a39      	ldr	r1, [r7, #32]
 800c59c:	2902      	cmp	r1, #2
 800c59e:	d100      	bne.n	800c5a2 <__ssvfscanf_r+0x1166>
 800c5a0:	e089      	b.n	800c6b6 <__ssvfscanf_r+0x127a>
 800c5a2:	2c01      	cmp	r4, #1
 800c5a4:	d001      	beq.n	800c5aa <__ssvfscanf_r+0x116e>
 800c5a6:	2c04      	cmp	r4, #4
 800c5a8:	d110      	bne.n	800c5cc <__ssvfscanf_r+0x1190>
 800c5aa:	3401      	adds	r4, #1
 800c5ac:	b2e4      	uxtb	r4, r4
 800c5ae:	e7bb      	b.n	800c528 <__ssvfscanf_r+0x10ec>
 800c5b0:	0531      	lsls	r1, r6, #20
 800c5b2:	d508      	bpl.n	800c5c6 <__ssvfscanf_r+0x118a>
 800c5b4:	6a39      	ldr	r1, [r7, #32]
 800c5b6:	1909      	adds	r1, r1, r4
 800c5b8:	2900      	cmp	r1, #0
 800c5ba:	d104      	bne.n	800c5c6 <__ssvfscanf_r+0x118a>
 800c5bc:	4824      	ldr	r0, [pc, #144]	; (800c650 <__ssvfscanf_r+0x1214>)
 800c5be:	000c      	movs	r4, r1
 800c5c0:	4006      	ands	r6, r0
 800c5c2:	6239      	str	r1, [r7, #32]
 800c5c4:	e7b0      	b.n	800c528 <__ssvfscanf_r+0x10ec>
 800c5c6:	6a39      	ldr	r1, [r7, #32]
 800c5c8:	2901      	cmp	r1, #1
 800c5ca:	d076      	beq.n	800c6ba <__ssvfscanf_r+0x127e>
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d001      	beq.n	800c5d6 <__ssvfscanf_r+0x119a>
 800c5d2:	4b20      	ldr	r3, [pc, #128]	; (800c654 <__ssvfscanf_r+0x1218>)
 800c5d4:	401e      	ands	r6, r3
 800c5d6:	6a3b      	ldr	r3, [r7, #32]
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d877      	bhi.n	800c6ce <__ssvfscanf_r+0x1292>
 800c5de:	238c      	movs	r3, #140	; 0x8c
 800c5e0:	2248      	movs	r2, #72	; 0x48
 800c5e2:	005b      	lsls	r3, r3, #1
 800c5e4:	189b      	adds	r3, r3, r2
 800c5e6:	19db      	adds	r3, r3, r7
 800c5e8:	429d      	cmp	r5, r3
 800c5ea:	d801      	bhi.n	800c5f0 <__ssvfscanf_r+0x11b4>
 800c5ec:	f7ff f823 	bl	800b636 <__ssvfscanf_r+0x1fa>
 800c5f0:	3d01      	subs	r5, #1
 800c5f2:	7829      	ldrb	r1, [r5, #0]
 800c5f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c5f8:	f001 fe78 	bl	800e2ec <_sungetc_r>
 800c5fc:	e7ef      	b.n	800c5de <__ssvfscanf_r+0x11a2>
 800c5fe:	2c00      	cmp	r4, #0
 800c600:	d10c      	bne.n	800c61c <__ssvfscanf_r+0x11e0>
 800c602:	69f9      	ldr	r1, [r7, #28]
 800c604:	2900      	cmp	r1, #0
 800c606:	d1e4      	bne.n	800c5d2 <__ssvfscanf_r+0x1196>
 800c608:	21e0      	movs	r1, #224	; 0xe0
 800c60a:	0030      	movs	r0, r6
 800c60c:	00c9      	lsls	r1, r1, #3
 800c60e:	4008      	ands	r0, r1
 800c610:	4288      	cmp	r0, r1
 800c612:	d1e0      	bne.n	800c5d6 <__ssvfscanf_r+0x119a>
 800c614:	4910      	ldr	r1, [pc, #64]	; (800c658 <__ssvfscanf_r+0x121c>)
 800c616:	3401      	adds	r4, #1
 800c618:	400e      	ands	r6, r1
 800c61a:	e785      	b.n	800c528 <__ssvfscanf_r+0x10ec>
 800c61c:	20fd      	movs	r0, #253	; 0xfd
 800c61e:	1ee1      	subs	r1, r4, #3
 800c620:	4201      	tst	r1, r0
 800c622:	d1d3      	bne.n	800c5cc <__ssvfscanf_r+0x1190>
 800c624:	e7c1      	b.n	800c5aa <__ssvfscanf_r+0x116e>
 800c626:	0531      	lsls	r1, r6, #20
 800c628:	d503      	bpl.n	800c632 <__ssvfscanf_r+0x11f6>
 800c62a:	6a39      	ldr	r1, [r7, #32]
 800c62c:	1909      	adds	r1, r1, r4
 800c62e:	2900      	cmp	r1, #0
 800c630:	d0c4      	beq.n	800c5bc <__ssvfscanf_r+0x1180>
 800c632:	2c02      	cmp	r4, #2
 800c634:	d1ca      	bne.n	800c5cc <__ssvfscanf_r+0x1190>
 800c636:	2403      	movs	r4, #3
 800c638:	e776      	b.n	800c528 <__ssvfscanf_r+0x10ec>
 800c63a:	2c06      	cmp	r4, #6
 800c63c:	d1c6      	bne.n	800c5cc <__ssvfscanf_r+0x1190>
 800c63e:	2407      	movs	r4, #7
 800c640:	e772      	b.n	800c528 <__ssvfscanf_r+0x10ec>
 800c642:	2c07      	cmp	r4, #7
 800c644:	d1c2      	bne.n	800c5cc <__ssvfscanf_r+0x1190>
 800c646:	2408      	movs	r4, #8
 800c648:	e76e      	b.n	800c528 <__ssvfscanf_r+0x10ec>
 800c64a:	46c0      	nop			; (mov r8, r8)
 800c64c:	0800de95 	.word	0x0800de95
 800c650:	fffffe7f 	.word	0xfffffe7f
 800c654:	fffffeff 	.word	0xfffffeff
 800c658:	fffff87f 	.word	0xfffff87f
 800c65c:	0531      	lsls	r1, r6, #20
 800c65e:	d5b5      	bpl.n	800c5cc <__ssvfscanf_r+0x1190>
 800c660:	21a0      	movs	r1, #160	; 0xa0
 800c662:	2080      	movs	r0, #128	; 0x80
 800c664:	00c9      	lsls	r1, r1, #3
 800c666:	00c0      	lsls	r0, r0, #3
 800c668:	4031      	ands	r1, r6
 800c66a:	4281      	cmp	r1, r0
 800c66c:	d004      	beq.n	800c678 <__ssvfscanf_r+0x123c>
 800c66e:	4206      	tst	r6, r0
 800c670:	d0ac      	beq.n	800c5cc <__ssvfscanf_r+0x1190>
 800c672:	69f9      	ldr	r1, [r7, #28]
 800c674:	2900      	cmp	r1, #0
 800c676:	d0ae      	beq.n	800c5d6 <__ssvfscanf_r+0x119a>
 800c678:	2180      	movs	r1, #128	; 0x80
 800c67a:	0089      	lsls	r1, r1, #2
 800c67c:	420e      	tst	r6, r1
 800c67e:	d104      	bne.n	800c68a <__ssvfscanf_r+0x124e>
 800c680:	69f9      	ldr	r1, [r7, #28]
 800c682:	6938      	ldr	r0, [r7, #16]
 800c684:	607d      	str	r5, [r7, #4]
 800c686:	1a09      	subs	r1, r1, r0
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	20c0      	movs	r0, #192	; 0xc0
 800c68c:	4973      	ldr	r1, [pc, #460]	; (800c85c <__ssvfscanf_r+0x1420>)
 800c68e:	0040      	lsls	r0, r0, #1
 800c690:	400e      	ands	r6, r1
 800c692:	4306      	orrs	r6, r0
 800c694:	e768      	b.n	800c568 <__ssvfscanf_r+0x112c>
 800c696:	0531      	lsls	r1, r6, #20
 800c698:	d5e2      	bpl.n	800c660 <__ssvfscanf_r+0x1224>
 800c69a:	e74a      	b.n	800c532 <__ssvfscanf_r+0x10f6>
 800c69c:	6839      	ldr	r1, [r7, #0]
 800c69e:	7809      	ldrb	r1, [r1, #0]
 800c6a0:	4291      	cmp	r1, r2
 800c6a2:	d193      	bne.n	800c5cc <__ssvfscanf_r+0x1190>
 800c6a4:	2180      	movs	r1, #128	; 0x80
 800c6a6:	0089      	lsls	r1, r1, #2
 800c6a8:	420e      	tst	r6, r1
 800c6aa:	d08f      	beq.n	800c5cc <__ssvfscanf_r+0x1190>
 800c6ac:	496c      	ldr	r1, [pc, #432]	; (800c860 <__ssvfscanf_r+0x1424>)
 800c6ae:	400e      	ands	r6, r1
 800c6b0:	69f9      	ldr	r1, [r7, #28]
 800c6b2:	6139      	str	r1, [r7, #16]
 800c6b4:	e738      	b.n	800c528 <__ssvfscanf_r+0x10ec>
 800c6b6:	2103      	movs	r1, #3
 800c6b8:	e76d      	b.n	800c596 <__ssvfscanf_r+0x115a>
 800c6ba:	2102      	movs	r1, #2
 800c6bc:	e76b      	b.n	800c596 <__ssvfscanf_r+0x115a>
 800c6be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c6c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c6c2:	f001 fe4f 	bl	800e364 <__ssrefill_r>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d100      	bne.n	800c6cc <__ssvfscanf_r+0x1290>
 800c6ca:	e723      	b.n	800c514 <__ssvfscanf_r+0x10d8>
 800c6cc:	e77e      	b.n	800c5cc <__ssvfscanf_r+0x1190>
 800c6ce:	1e63      	subs	r3, r4, #1
 800c6d0:	2b06      	cmp	r3, #6
 800c6d2:	d825      	bhi.n	800c720 <__ssvfscanf_r+0x12e4>
 800c6d4:	2c02      	cmp	r4, #2
 800c6d6:	d837      	bhi.n	800c748 <__ssvfscanf_r+0x130c>
 800c6d8:	238c      	movs	r3, #140	; 0x8c
 800c6da:	2248      	movs	r2, #72	; 0x48
 800c6dc:	005b      	lsls	r3, r3, #1
 800c6de:	189b      	adds	r3, r3, r2
 800c6e0:	19db      	adds	r3, r3, r7
 800c6e2:	429d      	cmp	r5, r3
 800c6e4:	d801      	bhi.n	800c6ea <__ssvfscanf_r+0x12ae>
 800c6e6:	f7fe ffa6 	bl	800b636 <__ssvfscanf_r+0x1fa>
 800c6ea:	3d01      	subs	r5, #1
 800c6ec:	7829      	ldrb	r1, [r5, #0]
 800c6ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c6f2:	f001 fdfb 	bl	800e2ec <_sungetc_r>
 800c6f6:	e7ef      	b.n	800c6d8 <__ssvfscanf_r+0x129c>
 800c6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	7819      	ldrb	r1, [r3, #0]
 800c700:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c702:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c704:	f001 fdf2 	bl	800e2ec <_sungetc_r>
 800c708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c70a:	6a3a      	ldr	r2, [r7, #32]
 800c70c:	189b      	adds	r3, r3, r2
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	2b03      	cmp	r3, #3
 800c712:	d8f1      	bhi.n	800c6f8 <__ssvfscanf_r+0x12bc>
 800c714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c716:	3c03      	subs	r4, #3
 800c718:	b2e4      	uxtb	r4, r4
 800c71a:	1b1b      	subs	r3, r3, r4
 800c71c:	1b2d      	subs	r5, r5, r4
 800c71e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c720:	05f3      	lsls	r3, r6, #23
 800c722:	d52f      	bpl.n	800c784 <__ssvfscanf_r+0x1348>
 800c724:	0573      	lsls	r3, r6, #21
 800c726:	d514      	bpl.n	800c752 <__ssvfscanf_r+0x1316>
 800c728:	238c      	movs	r3, #140	; 0x8c
 800c72a:	2248      	movs	r2, #72	; 0x48
 800c72c:	005b      	lsls	r3, r3, #1
 800c72e:	189b      	adds	r3, r3, r2
 800c730:	19db      	adds	r3, r3, r7
 800c732:	429d      	cmp	r5, r3
 800c734:	d801      	bhi.n	800c73a <__ssvfscanf_r+0x12fe>
 800c736:	f7fe ff7e 	bl	800b636 <__ssvfscanf_r+0x1fa>
 800c73a:	3d01      	subs	r5, #1
 800c73c:	7829      	ldrb	r1, [r5, #0]
 800c73e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c740:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c742:	f001 fdd3 	bl	800e2ec <_sungetc_r>
 800c746:	e7ef      	b.n	800c728 <__ssvfscanf_r+0x12ec>
 800c748:	1b63      	subs	r3, r4, r5
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	63fd      	str	r5, [r7, #60]	; 0x3c
 800c74e:	623b      	str	r3, [r7, #32]
 800c750:	e7da      	b.n	800c708 <__ssvfscanf_r+0x12cc>
 800c752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c754:	1e6c      	subs	r4, r5, #1
 800c756:	7821      	ldrb	r1, [r4, #0]
 800c758:	3b01      	subs	r3, #1
 800c75a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c75c:	2965      	cmp	r1, #101	; 0x65
 800c75e:	d00a      	beq.n	800c776 <__ssvfscanf_r+0x133a>
 800c760:	2945      	cmp	r1, #69	; 0x45
 800c762:	d008      	beq.n	800c776 <__ssvfscanf_r+0x133a>
 800c764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c766:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c768:	f001 fdc0 	bl	800e2ec <_sungetc_r>
 800c76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76e:	1eac      	subs	r4, r5, #2
 800c770:	3b02      	subs	r3, #2
 800c772:	7821      	ldrb	r1, [r4, #0]
 800c774:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c776:	0025      	movs	r5, r4
 800c778:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c77a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c77c:	f001 fdb6 	bl	800e2ec <_sungetc_r>
 800c780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c782:	63bb      	str	r3, [r7, #56]	; 0x38
 800c784:	2310      	movs	r3, #16
 800c786:	0032      	movs	r2, r6
 800c788:	401a      	ands	r2, r3
 800c78a:	421e      	tst	r6, r3
 800c78c:	d001      	beq.n	800c792 <__ssvfscanf_r+0x1356>
 800c78e:	f7fe fe71 	bl	800b474 <__ssvfscanf_r+0x38>
 800c792:	23c0      	movs	r3, #192	; 0xc0
 800c794:	2180      	movs	r1, #128	; 0x80
 800c796:	00db      	lsls	r3, r3, #3
 800c798:	702a      	strb	r2, [r5, #0]
 800c79a:	4033      	ands	r3, r6
 800c79c:	00c9      	lsls	r1, r1, #3
 800c79e:	428b      	cmp	r3, r1
 800c7a0:	d11f      	bne.n	800c7e2 <__ssvfscanf_r+0x13a6>
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	69fa      	ldr	r2, [r7, #28]
 800c7a6:	69f9      	ldr	r1, [r7, #28]
 800c7a8:	1a9a      	subs	r2, r3, r2
 800c7aa:	428b      	cmp	r3, r1
 800c7ac:	d125      	bne.n	800c7fa <__ssvfscanf_r+0x13be>
 800c7ae:	238c      	movs	r3, #140	; 0x8c
 800c7b0:	2148      	movs	r1, #72	; 0x48
 800c7b2:	005b      	lsls	r3, r3, #1
 800c7b4:	185b      	adds	r3, r3, r1
 800c7b6:	19d9      	adds	r1, r3, r7
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c7bc:	f7fc f80c 	bl	80087d8 <_strtod_r>
 800c7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c2:	0004      	movs	r4, r0
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	000d      	movs	r5, r1
 800c7c8:	623b      	str	r3, [r7, #32]
 800c7ca:	07f3      	lsls	r3, r6, #31
 800c7cc:	d523      	bpl.n	800c816 <__ssvfscanf_r+0x13da>
 800c7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	601c      	str	r4, [r3, #0]
 800c7d4:	605d      	str	r5, [r3, #4]
 800c7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d8:	3301      	adds	r3, #1
 800c7da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7dc:	6a3b      	ldr	r3, [r7, #32]
 800c7de:	f7fe ffa5 	bl	800b72c <__ssvfscanf_r+0x2f0>
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d0e2      	beq.n	800c7ae <__ssvfscanf_r+0x1372>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c7ec:	1c59      	adds	r1, r3, #1
 800c7ee:	230a      	movs	r3, #10
 800c7f0:	f7fc f880 	bl	80088f4 <_strtol_r>
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	687d      	ldr	r5, [r7, #4]
 800c7f8:	1ac2      	subs	r2, r0, r3
 800c7fa:	2148      	movs	r1, #72	; 0x48
 800c7fc:	4b19      	ldr	r3, [pc, #100]	; (800c864 <__ssvfscanf_r+0x1428>)
 800c7fe:	185b      	adds	r3, r3, r1
 800c800:	19db      	adds	r3, r3, r7
 800c802:	429d      	cmp	r5, r3
 800c804:	d302      	bcc.n	800c80c <__ssvfscanf_r+0x13d0>
 800c806:	4b18      	ldr	r3, [pc, #96]	; (800c868 <__ssvfscanf_r+0x142c>)
 800c808:	185b      	adds	r3, r3, r1
 800c80a:	19dd      	adds	r5, r3, r7
 800c80c:	0028      	movs	r0, r5
 800c80e:	4917      	ldr	r1, [pc, #92]	; (800c86c <__ssvfscanf_r+0x1430>)
 800c810:	f7fc f944 	bl	8008a9c <sprintf>
 800c814:	e7cb      	b.n	800c7ae <__ssvfscanf_r+0x1372>
 800c816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c81c:	07b6      	lsls	r6, r6, #30
 800c81e:	d4d8      	bmi.n	800c7d2 <__ssvfscanf_r+0x1396>
 800c820:	0002      	movs	r2, r0
 800c822:	000b      	movs	r3, r1
 800c824:	f7f5 fd66 	bl	80022f4 <__aeabi_dcmpun>
 800c828:	2800      	cmp	r0, #0
 800c82a:	d005      	beq.n	800c838 <__ssvfscanf_r+0x13fc>
 800c82c:	4810      	ldr	r0, [pc, #64]	; (800c870 <__ssvfscanf_r+0x1434>)
 800c82e:	f7fc fabf 	bl	8008db0 <nanf>
 800c832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c834:	6018      	str	r0, [r3, #0]
 800c836:	e7ce      	b.n	800c7d6 <__ssvfscanf_r+0x139a>
 800c838:	0020      	movs	r0, r4
 800c83a:	0029      	movs	r1, r5
 800c83c:	f7f5 fe04 	bl	8002448 <__aeabi_d2f>
 800c840:	e7f7      	b.n	800c832 <__ssvfscanf_r+0x13f6>
 800c842:	00a3      	lsls	r3, r4, #2
 800c844:	18ed      	adds	r5, r5, r3
 800c846:	682b      	ldr	r3, [r5, #0]
 800c848:	3401      	adds	r4, #1
 800c84a:	6818      	ldr	r0, [r3, #0]
 800c84c:	f7fa ff74 	bl	8007738 <free>
 800c850:	2200      	movs	r2, #0
 800c852:	682b      	ldr	r3, [r5, #0]
 800c854:	601a      	str	r2, [r3, #0]
 800c856:	f7fe ffc3 	bl	800b7e0 <__ssvfscanf_r+0x3a4>
 800c85a:	46c0      	nop			; (mov r8, r8)
 800c85c:	fffff07f 	.word	0xfffff07f
 800c860:	fffffd7f 	.word	0xfffffd7f
 800c864:	0000026b 	.word	0x0000026b
 800c868:	0000026a 	.word	0x0000026a
 800c86c:	0800fc00 	.word	0x0800fc00
 800c870:	0800fc63 	.word	0x0800fc63

0800c874 <_fclose_r>:
 800c874:	b570      	push	{r4, r5, r6, lr}
 800c876:	0005      	movs	r5, r0
 800c878:	1e0c      	subs	r4, r1, #0
 800c87a:	d102      	bne.n	800c882 <_fclose_r+0xe>
 800c87c:	2600      	movs	r6, #0
 800c87e:	0030      	movs	r0, r6
 800c880:	bd70      	pop	{r4, r5, r6, pc}
 800c882:	2800      	cmp	r0, #0
 800c884:	d004      	beq.n	800c890 <_fclose_r+0x1c>
 800c886:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d101      	bne.n	800c890 <_fclose_r+0x1c>
 800c88c:	f7fc f8d2 	bl	8008a34 <__sinit>
 800c890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c892:	07db      	lsls	r3, r3, #31
 800c894:	d405      	bmi.n	800c8a2 <_fclose_r+0x2e>
 800c896:	89a3      	ldrh	r3, [r4, #12]
 800c898:	059b      	lsls	r3, r3, #22
 800c89a:	d402      	bmi.n	800c8a2 <_fclose_r+0x2e>
 800c89c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c89e:	f7fc fa6b 	bl	8008d78 <__retarget_lock_acquire_recursive>
 800c8a2:	220c      	movs	r2, #12
 800c8a4:	5ea3      	ldrsh	r3, [r4, r2]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d109      	bne.n	800c8be <_fclose_r+0x4a>
 800c8aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	0016      	movs	r6, r2
 800c8b0:	401e      	ands	r6, r3
 800c8b2:	421a      	tst	r2, r3
 800c8b4:	d1e2      	bne.n	800c87c <_fclose_r+0x8>
 800c8b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8b8:	f7fc fa5f 	bl	8008d7a <__retarget_lock_release_recursive>
 800c8bc:	e7df      	b.n	800c87e <_fclose_r+0xa>
 800c8be:	0021      	movs	r1, r4
 800c8c0:	0028      	movs	r0, r5
 800c8c2:	f000 f837 	bl	800c934 <__sflush_r>
 800c8c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c8c8:	0006      	movs	r6, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d006      	beq.n	800c8dc <_fclose_r+0x68>
 800c8ce:	0028      	movs	r0, r5
 800c8d0:	69e1      	ldr	r1, [r4, #28]
 800c8d2:	4798      	blx	r3
 800c8d4:	2800      	cmp	r0, #0
 800c8d6:	da01      	bge.n	800c8dc <_fclose_r+0x68>
 800c8d8:	2601      	movs	r6, #1
 800c8da:	4276      	negs	r6, r6
 800c8dc:	89a3      	ldrh	r3, [r4, #12]
 800c8de:	061b      	lsls	r3, r3, #24
 800c8e0:	d503      	bpl.n	800c8ea <_fclose_r+0x76>
 800c8e2:	0028      	movs	r0, r5
 800c8e4:	6921      	ldr	r1, [r4, #16]
 800c8e6:	f7fc facf 	bl	8008e88 <_free_r>
 800c8ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c8ec:	2900      	cmp	r1, #0
 800c8ee:	d008      	beq.n	800c902 <_fclose_r+0x8e>
 800c8f0:	0023      	movs	r3, r4
 800c8f2:	3340      	adds	r3, #64	; 0x40
 800c8f4:	4299      	cmp	r1, r3
 800c8f6:	d002      	beq.n	800c8fe <_fclose_r+0x8a>
 800c8f8:	0028      	movs	r0, r5
 800c8fa:	f7fc fac5 	bl	8008e88 <_free_r>
 800c8fe:	2300      	movs	r3, #0
 800c900:	6323      	str	r3, [r4, #48]	; 0x30
 800c902:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c904:	2900      	cmp	r1, #0
 800c906:	d004      	beq.n	800c912 <_fclose_r+0x9e>
 800c908:	0028      	movs	r0, r5
 800c90a:	f7fc fabd 	bl	8008e88 <_free_r>
 800c90e:	2300      	movs	r3, #0
 800c910:	6463      	str	r3, [r4, #68]	; 0x44
 800c912:	f7fc f87f 	bl	8008a14 <__sfp_lock_acquire>
 800c916:	2300      	movs	r3, #0
 800c918:	81a3      	strh	r3, [r4, #12]
 800c91a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c91c:	07db      	lsls	r3, r3, #31
 800c91e:	d402      	bmi.n	800c926 <_fclose_r+0xb2>
 800c920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c922:	f7fc fa2a 	bl	8008d7a <__retarget_lock_release_recursive>
 800c926:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c928:	f7fc fa25 	bl	8008d76 <__retarget_lock_close_recursive>
 800c92c:	f7fc f87a 	bl	8008a24 <__sfp_lock_release>
 800c930:	e7a5      	b.n	800c87e <_fclose_r+0xa>
	...

0800c934 <__sflush_r>:
 800c934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c936:	230c      	movs	r3, #12
 800c938:	5eca      	ldrsh	r2, [r1, r3]
 800c93a:	000c      	movs	r4, r1
 800c93c:	0005      	movs	r5, r0
 800c93e:	b291      	uxth	r1, r2
 800c940:	0713      	lsls	r3, r2, #28
 800c942:	d464      	bmi.n	800ca0e <__sflush_r+0xda>
 800c944:	2380      	movs	r3, #128	; 0x80
 800c946:	011b      	lsls	r3, r3, #4
 800c948:	4313      	orrs	r3, r2
 800c94a:	6862      	ldr	r2, [r4, #4]
 800c94c:	81a3      	strh	r3, [r4, #12]
 800c94e:	2a00      	cmp	r2, #0
 800c950:	dc04      	bgt.n	800c95c <__sflush_r+0x28>
 800c952:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c954:	2a00      	cmp	r2, #0
 800c956:	dc01      	bgt.n	800c95c <__sflush_r+0x28>
 800c958:	2000      	movs	r0, #0
 800c95a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c95c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800c95e:	2f00      	cmp	r7, #0
 800c960:	d0fa      	beq.n	800c958 <__sflush_r+0x24>
 800c962:	2200      	movs	r2, #0
 800c964:	2080      	movs	r0, #128	; 0x80
 800c966:	682e      	ldr	r6, [r5, #0]
 800c968:	602a      	str	r2, [r5, #0]
 800c96a:	001a      	movs	r2, r3
 800c96c:	0140      	lsls	r0, r0, #5
 800c96e:	69e1      	ldr	r1, [r4, #28]
 800c970:	4002      	ands	r2, r0
 800c972:	4203      	tst	r3, r0
 800c974:	d038      	beq.n	800c9e8 <__sflush_r+0xb4>
 800c976:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c978:	89a3      	ldrh	r3, [r4, #12]
 800c97a:	075b      	lsls	r3, r3, #29
 800c97c:	d506      	bpl.n	800c98c <__sflush_r+0x58>
 800c97e:	6863      	ldr	r3, [r4, #4]
 800c980:	1ac0      	subs	r0, r0, r3
 800c982:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c984:	2b00      	cmp	r3, #0
 800c986:	d001      	beq.n	800c98c <__sflush_r+0x58>
 800c988:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c98a:	1ac0      	subs	r0, r0, r3
 800c98c:	0002      	movs	r2, r0
 800c98e:	2300      	movs	r3, #0
 800c990:	0028      	movs	r0, r5
 800c992:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800c994:	69e1      	ldr	r1, [r4, #28]
 800c996:	47b8      	blx	r7
 800c998:	89a2      	ldrh	r2, [r4, #12]
 800c99a:	1c43      	adds	r3, r0, #1
 800c99c:	d106      	bne.n	800c9ac <__sflush_r+0x78>
 800c99e:	6829      	ldr	r1, [r5, #0]
 800c9a0:	291d      	cmp	r1, #29
 800c9a2:	d830      	bhi.n	800ca06 <__sflush_r+0xd2>
 800c9a4:	4b2c      	ldr	r3, [pc, #176]	; (800ca58 <__sflush_r+0x124>)
 800c9a6:	410b      	asrs	r3, r1
 800c9a8:	07db      	lsls	r3, r3, #31
 800c9aa:	d42c      	bmi.n	800ca06 <__sflush_r+0xd2>
 800c9ac:	4b2b      	ldr	r3, [pc, #172]	; (800ca5c <__sflush_r+0x128>)
 800c9ae:	4013      	ands	r3, r2
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	6062      	str	r2, [r4, #4]
 800c9b4:	6922      	ldr	r2, [r4, #16]
 800c9b6:	b21b      	sxth	r3, r3
 800c9b8:	81a3      	strh	r3, [r4, #12]
 800c9ba:	6022      	str	r2, [r4, #0]
 800c9bc:	04db      	lsls	r3, r3, #19
 800c9be:	d505      	bpl.n	800c9cc <__sflush_r+0x98>
 800c9c0:	1c43      	adds	r3, r0, #1
 800c9c2:	d102      	bne.n	800c9ca <__sflush_r+0x96>
 800c9c4:	682b      	ldr	r3, [r5, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d100      	bne.n	800c9cc <__sflush_r+0x98>
 800c9ca:	6520      	str	r0, [r4, #80]	; 0x50
 800c9cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c9ce:	602e      	str	r6, [r5, #0]
 800c9d0:	2900      	cmp	r1, #0
 800c9d2:	d0c1      	beq.n	800c958 <__sflush_r+0x24>
 800c9d4:	0023      	movs	r3, r4
 800c9d6:	3340      	adds	r3, #64	; 0x40
 800c9d8:	4299      	cmp	r1, r3
 800c9da:	d002      	beq.n	800c9e2 <__sflush_r+0xae>
 800c9dc:	0028      	movs	r0, r5
 800c9de:	f7fc fa53 	bl	8008e88 <_free_r>
 800c9e2:	2000      	movs	r0, #0
 800c9e4:	6320      	str	r0, [r4, #48]	; 0x30
 800c9e6:	e7b8      	b.n	800c95a <__sflush_r+0x26>
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	0028      	movs	r0, r5
 800c9ec:	47b8      	blx	r7
 800c9ee:	1c43      	adds	r3, r0, #1
 800c9f0:	d1c2      	bne.n	800c978 <__sflush_r+0x44>
 800c9f2:	682b      	ldr	r3, [r5, #0]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d0bf      	beq.n	800c978 <__sflush_r+0x44>
 800c9f8:	2b1d      	cmp	r3, #29
 800c9fa:	d001      	beq.n	800ca00 <__sflush_r+0xcc>
 800c9fc:	2b16      	cmp	r3, #22
 800c9fe:	d101      	bne.n	800ca04 <__sflush_r+0xd0>
 800ca00:	602e      	str	r6, [r5, #0]
 800ca02:	e7a9      	b.n	800c958 <__sflush_r+0x24>
 800ca04:	89a2      	ldrh	r2, [r4, #12]
 800ca06:	2340      	movs	r3, #64	; 0x40
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	81a3      	strh	r3, [r4, #12]
 800ca0c:	e7a5      	b.n	800c95a <__sflush_r+0x26>
 800ca0e:	6926      	ldr	r6, [r4, #16]
 800ca10:	2e00      	cmp	r6, #0
 800ca12:	d0a1      	beq.n	800c958 <__sflush_r+0x24>
 800ca14:	6827      	ldr	r7, [r4, #0]
 800ca16:	6026      	str	r6, [r4, #0]
 800ca18:	1bbb      	subs	r3, r7, r6
 800ca1a:	9301      	str	r3, [sp, #4]
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	0789      	lsls	r1, r1, #30
 800ca20:	d100      	bne.n	800ca24 <__sflush_r+0xf0>
 800ca22:	6963      	ldr	r3, [r4, #20]
 800ca24:	60a3      	str	r3, [r4, #8]
 800ca26:	9b01      	ldr	r3, [sp, #4]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	dc00      	bgt.n	800ca2e <__sflush_r+0xfa>
 800ca2c:	e794      	b.n	800c958 <__sflush_r+0x24>
 800ca2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca30:	0032      	movs	r2, r6
 800ca32:	001f      	movs	r7, r3
 800ca34:	0028      	movs	r0, r5
 800ca36:	9b01      	ldr	r3, [sp, #4]
 800ca38:	69e1      	ldr	r1, [r4, #28]
 800ca3a:	47b8      	blx	r7
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	dc06      	bgt.n	800ca4e <__sflush_r+0x11a>
 800ca40:	2340      	movs	r3, #64	; 0x40
 800ca42:	2001      	movs	r0, #1
 800ca44:	89a2      	ldrh	r2, [r4, #12]
 800ca46:	4240      	negs	r0, r0
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	81a3      	strh	r3, [r4, #12]
 800ca4c:	e785      	b.n	800c95a <__sflush_r+0x26>
 800ca4e:	9b01      	ldr	r3, [sp, #4]
 800ca50:	1836      	adds	r6, r6, r0
 800ca52:	1a1b      	subs	r3, r3, r0
 800ca54:	9301      	str	r3, [sp, #4]
 800ca56:	e7e6      	b.n	800ca26 <__sflush_r+0xf2>
 800ca58:	dfbffffe 	.word	0xdfbffffe
 800ca5c:	fffff7ff 	.word	0xfffff7ff

0800ca60 <_fflush_r>:
 800ca60:	b570      	push	{r4, r5, r6, lr}
 800ca62:	0005      	movs	r5, r0
 800ca64:	000c      	movs	r4, r1
 800ca66:	2800      	cmp	r0, #0
 800ca68:	d004      	beq.n	800ca74 <_fflush_r+0x14>
 800ca6a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d101      	bne.n	800ca74 <_fflush_r+0x14>
 800ca70:	f7fb ffe0 	bl	8008a34 <__sinit>
 800ca74:	220c      	movs	r2, #12
 800ca76:	5ea3      	ldrsh	r3, [r4, r2]
 800ca78:	1e1e      	subs	r6, r3, #0
 800ca7a:	d015      	beq.n	800caa8 <_fflush_r+0x48>
 800ca7c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca7e:	07d2      	lsls	r2, r2, #31
 800ca80:	d404      	bmi.n	800ca8c <_fflush_r+0x2c>
 800ca82:	059b      	lsls	r3, r3, #22
 800ca84:	d402      	bmi.n	800ca8c <_fflush_r+0x2c>
 800ca86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca88:	f7fc f976 	bl	8008d78 <__retarget_lock_acquire_recursive>
 800ca8c:	0021      	movs	r1, r4
 800ca8e:	0028      	movs	r0, r5
 800ca90:	f7ff ff50 	bl	800c934 <__sflush_r>
 800ca94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca96:	0006      	movs	r6, r0
 800ca98:	07db      	lsls	r3, r3, #31
 800ca9a:	d405      	bmi.n	800caa8 <_fflush_r+0x48>
 800ca9c:	89a3      	ldrh	r3, [r4, #12]
 800ca9e:	059b      	lsls	r3, r3, #22
 800caa0:	d402      	bmi.n	800caa8 <_fflush_r+0x48>
 800caa2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800caa4:	f7fc f969 	bl	8008d7a <__retarget_lock_release_recursive>
 800caa8:	0030      	movs	r0, r6
 800caaa:	bd70      	pop	{r4, r5, r6, pc}

0800caac <__sccl>:
 800caac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caae:	780b      	ldrb	r3, [r1, #0]
 800cab0:	0004      	movs	r4, r0
 800cab2:	2b5e      	cmp	r3, #94	; 0x5e
 800cab4:	d019      	beq.n	800caea <__sccl+0x3e>
 800cab6:	2200      	movs	r2, #0
 800cab8:	1c4d      	adds	r5, r1, #1
 800caba:	0021      	movs	r1, r4
 800cabc:	1c60      	adds	r0, r4, #1
 800cabe:	30ff      	adds	r0, #255	; 0xff
 800cac0:	700a      	strb	r2, [r1, #0]
 800cac2:	3101      	adds	r1, #1
 800cac4:	4281      	cmp	r1, r0
 800cac6:	d1fb      	bne.n	800cac0 <__sccl+0x14>
 800cac8:	1e68      	subs	r0, r5, #1
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00c      	beq.n	800cae8 <__sccl+0x3c>
 800cace:	2101      	movs	r1, #1
 800cad0:	262d      	movs	r6, #45	; 0x2d
 800cad2:	404a      	eors	r2, r1
 800cad4:	0028      	movs	r0, r5
 800cad6:	54e2      	strb	r2, [r4, r3]
 800cad8:	7801      	ldrb	r1, [r0, #0]
 800cada:	1c45      	adds	r5, r0, #1
 800cadc:	292d      	cmp	r1, #45	; 0x2d
 800cade:	d00c      	beq.n	800cafa <__sccl+0x4e>
 800cae0:	295d      	cmp	r1, #93	; 0x5d
 800cae2:	d01d      	beq.n	800cb20 <__sccl+0x74>
 800cae4:	2900      	cmp	r1, #0
 800cae6:	d104      	bne.n	800caf2 <__sccl+0x46>
 800cae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caea:	2201      	movs	r2, #1
 800caec:	784b      	ldrb	r3, [r1, #1]
 800caee:	1c8d      	adds	r5, r1, #2
 800caf0:	e7e3      	b.n	800caba <__sccl+0xe>
 800caf2:	000b      	movs	r3, r1
 800caf4:	e7ee      	b.n	800cad4 <__sccl+0x28>
 800caf6:	0033      	movs	r3, r6
 800caf8:	e7ec      	b.n	800cad4 <__sccl+0x28>
 800cafa:	7841      	ldrb	r1, [r0, #1]
 800cafc:	295d      	cmp	r1, #93	; 0x5d
 800cafe:	d0fa      	beq.n	800caf6 <__sccl+0x4a>
 800cb00:	428b      	cmp	r3, r1
 800cb02:	dcf8      	bgt.n	800caf6 <__sccl+0x4a>
 800cb04:	001d      	movs	r5, r3
 800cb06:	3002      	adds	r0, #2
 800cb08:	3501      	adds	r5, #1
 800cb0a:	5562      	strb	r2, [r4, r5]
 800cb0c:	42a9      	cmp	r1, r5
 800cb0e:	dcfb      	bgt.n	800cb08 <__sccl+0x5c>
 800cb10:	2500      	movs	r5, #0
 800cb12:	1c5f      	adds	r7, r3, #1
 800cb14:	428b      	cmp	r3, r1
 800cb16:	da01      	bge.n	800cb1c <__sccl+0x70>
 800cb18:	1acd      	subs	r5, r1, r3
 800cb1a:	3d01      	subs	r5, #1
 800cb1c:	197b      	adds	r3, r7, r5
 800cb1e:	e7db      	b.n	800cad8 <__sccl+0x2c>
 800cb20:	0028      	movs	r0, r5
 800cb22:	e7e1      	b.n	800cae8 <__sccl+0x3c>

0800cb24 <_localeconv_r>:
 800cb24:	4800      	ldr	r0, [pc, #0]	; (800cb28 <_localeconv_r+0x4>)
 800cb26:	4770      	bx	lr
 800cb28:	20000520 	.word	0x20000520

0800cb2c <__libc_fini_array>:
 800cb2c:	b570      	push	{r4, r5, r6, lr}
 800cb2e:	4c07      	ldr	r4, [pc, #28]	; (800cb4c <__libc_fini_array+0x20>)
 800cb30:	4d07      	ldr	r5, [pc, #28]	; (800cb50 <__libc_fini_array+0x24>)
 800cb32:	1b64      	subs	r4, r4, r5
 800cb34:	10a4      	asrs	r4, r4, #2
 800cb36:	2c00      	cmp	r4, #0
 800cb38:	d102      	bne.n	800cb40 <__libc_fini_array+0x14>
 800cb3a:	f002 fd81 	bl	800f640 <_fini>
 800cb3e:	bd70      	pop	{r4, r5, r6, pc}
 800cb40:	3c01      	subs	r4, #1
 800cb42:	00a3      	lsls	r3, r4, #2
 800cb44:	58eb      	ldr	r3, [r5, r3]
 800cb46:	4798      	blx	r3
 800cb48:	e7f5      	b.n	800cb36 <__libc_fini_array+0xa>
 800cb4a:	46c0      	nop			; (mov r8, r8)
 800cb4c:	0800fd00 	.word	0x0800fd00
 800cb50:	0800fcfc 	.word	0x0800fcfc

0800cb54 <memchr>:
 800cb54:	b2c9      	uxtb	r1, r1
 800cb56:	1882      	adds	r2, r0, r2
 800cb58:	4290      	cmp	r0, r2
 800cb5a:	d101      	bne.n	800cb60 <memchr+0xc>
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	4770      	bx	lr
 800cb60:	7803      	ldrb	r3, [r0, #0]
 800cb62:	428b      	cmp	r3, r1
 800cb64:	d0fb      	beq.n	800cb5e <memchr+0xa>
 800cb66:	3001      	adds	r0, #1
 800cb68:	e7f6      	b.n	800cb58 <memchr+0x4>
	...

0800cb6c <frexp>:
 800cb6c:	b570      	push	{r4, r5, r6, lr}
 800cb6e:	0014      	movs	r4, r2
 800cb70:	2500      	movs	r5, #0
 800cb72:	6025      	str	r5, [r4, #0]
 800cb74:	4d10      	ldr	r5, [pc, #64]	; (800cbb8 <frexp+0x4c>)
 800cb76:	004b      	lsls	r3, r1, #1
 800cb78:	000a      	movs	r2, r1
 800cb7a:	085b      	lsrs	r3, r3, #1
 800cb7c:	42ab      	cmp	r3, r5
 800cb7e:	dc1a      	bgt.n	800cbb6 <frexp+0x4a>
 800cb80:	001d      	movs	r5, r3
 800cb82:	4305      	orrs	r5, r0
 800cb84:	d017      	beq.n	800cbb6 <frexp+0x4a>
 800cb86:	4d0d      	ldr	r5, [pc, #52]	; (800cbbc <frexp+0x50>)
 800cb88:	4229      	tst	r1, r5
 800cb8a:	d109      	bne.n	800cba0 <frexp+0x34>
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	4b0c      	ldr	r3, [pc, #48]	; (800cbc0 <frexp+0x54>)
 800cb90:	f7f4 fd6c 	bl	800166c <__aeabi_dmul>
 800cb94:	2536      	movs	r5, #54	; 0x36
 800cb96:	000a      	movs	r2, r1
 800cb98:	004b      	lsls	r3, r1, #1
 800cb9a:	426d      	negs	r5, r5
 800cb9c:	085b      	lsrs	r3, r3, #1
 800cb9e:	6025      	str	r5, [r4, #0]
 800cba0:	4d08      	ldr	r5, [pc, #32]	; (800cbc4 <frexp+0x58>)
 800cba2:	151b      	asrs	r3, r3, #20
 800cba4:	195b      	adds	r3, r3, r5
 800cba6:	6825      	ldr	r5, [r4, #0]
 800cba8:	18eb      	adds	r3, r5, r3
 800cbaa:	6023      	str	r3, [r4, #0]
 800cbac:	4b06      	ldr	r3, [pc, #24]	; (800cbc8 <frexp+0x5c>)
 800cbae:	401a      	ands	r2, r3
 800cbb0:	4b06      	ldr	r3, [pc, #24]	; (800cbcc <frexp+0x60>)
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	0019      	movs	r1, r3
 800cbb6:	bd70      	pop	{r4, r5, r6, pc}
 800cbb8:	7fefffff 	.word	0x7fefffff
 800cbbc:	7ff00000 	.word	0x7ff00000
 800cbc0:	43500000 	.word	0x43500000
 800cbc4:	fffffc02 	.word	0xfffffc02
 800cbc8:	800fffff 	.word	0x800fffff
 800cbcc:	3fe00000 	.word	0x3fe00000

0800cbd0 <__register_exitproc>:
 800cbd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbd2:	4f1c      	ldr	r7, [pc, #112]	; (800cc44 <__register_exitproc+0x74>)
 800cbd4:	0004      	movs	r4, r0
 800cbd6:	6838      	ldr	r0, [r7, #0]
 800cbd8:	0016      	movs	r6, r2
 800cbda:	9301      	str	r3, [sp, #4]
 800cbdc:	9100      	str	r1, [sp, #0]
 800cbde:	f7fc f8cb 	bl	8008d78 <__retarget_lock_acquire_recursive>
 800cbe2:	4a19      	ldr	r2, [pc, #100]	; (800cc48 <__register_exitproc+0x78>)
 800cbe4:	6813      	ldr	r3, [r2, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d101      	bne.n	800cbee <__register_exitproc+0x1e>
 800cbea:	4b18      	ldr	r3, [pc, #96]	; (800cc4c <__register_exitproc+0x7c>)
 800cbec:	6013      	str	r3, [r2, #0]
 800cbee:	685a      	ldr	r2, [r3, #4]
 800cbf0:	6838      	ldr	r0, [r7, #0]
 800cbf2:	2a1f      	cmp	r2, #31
 800cbf4:	dd04      	ble.n	800cc00 <__register_exitproc+0x30>
 800cbf6:	f7fc f8c0 	bl	8008d7a <__retarget_lock_release_recursive>
 800cbfa:	2001      	movs	r0, #1
 800cbfc:	4240      	negs	r0, r0
 800cbfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc00:	2c00      	cmp	r4, #0
 800cc02:	d014      	beq.n	800cc2e <__register_exitproc+0x5e>
 800cc04:	0091      	lsls	r1, r2, #2
 800cc06:	1859      	adds	r1, r3, r1
 800cc08:	000f      	movs	r7, r1
 800cc0a:	3788      	adds	r7, #136	; 0x88
 800cc0c:	603e      	str	r6, [r7, #0]
 800cc0e:	2701      	movs	r7, #1
 800cc10:	001e      	movs	r6, r3
 800cc12:	4097      	lsls	r7, r2
 800cc14:	3685      	adds	r6, #133	; 0x85
 800cc16:	36ff      	adds	r6, #255	; 0xff
 800cc18:	6875      	ldr	r5, [r6, #4]
 800cc1a:	31fc      	adds	r1, #252	; 0xfc
 800cc1c:	433d      	orrs	r5, r7
 800cc1e:	6075      	str	r5, [r6, #4]
 800cc20:	9d01      	ldr	r5, [sp, #4]
 800cc22:	60cd      	str	r5, [r1, #12]
 800cc24:	2c02      	cmp	r4, #2
 800cc26:	d102      	bne.n	800cc2e <__register_exitproc+0x5e>
 800cc28:	68b1      	ldr	r1, [r6, #8]
 800cc2a:	4339      	orrs	r1, r7
 800cc2c:	60b1      	str	r1, [r6, #8]
 800cc2e:	1c51      	adds	r1, r2, #1
 800cc30:	6059      	str	r1, [r3, #4]
 800cc32:	3202      	adds	r2, #2
 800cc34:	9900      	ldr	r1, [sp, #0]
 800cc36:	0092      	lsls	r2, r2, #2
 800cc38:	50d1      	str	r1, [r2, r3]
 800cc3a:	f7fc f89e 	bl	8008d7a <__retarget_lock_release_recursive>
 800cc3e:	2000      	movs	r0, #0
 800cc40:	e7dd      	b.n	800cbfe <__register_exitproc+0x2e>
 800cc42:	46c0      	nop			; (mov r8, r8)
 800cc44:	200006c4 	.word	0x200006c4
 800cc48:	20000ba8 	.word	0x20000ba8
 800cc4c:	20000bac 	.word	0x20000bac

0800cc50 <__assert_func>:
 800cc50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cc52:	0014      	movs	r4, r2
 800cc54:	001a      	movs	r2, r3
 800cc56:	4b09      	ldr	r3, [pc, #36]	; (800cc7c <__assert_func+0x2c>)
 800cc58:	0005      	movs	r5, r0
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	000e      	movs	r6, r1
 800cc5e:	68d8      	ldr	r0, [r3, #12]
 800cc60:	4b07      	ldr	r3, [pc, #28]	; (800cc80 <__assert_func+0x30>)
 800cc62:	2c00      	cmp	r4, #0
 800cc64:	d101      	bne.n	800cc6a <__assert_func+0x1a>
 800cc66:	4b07      	ldr	r3, [pc, #28]	; (800cc84 <__assert_func+0x34>)
 800cc68:	001c      	movs	r4, r3
 800cc6a:	4907      	ldr	r1, [pc, #28]	; (800cc88 <__assert_func+0x38>)
 800cc6c:	9301      	str	r3, [sp, #4]
 800cc6e:	9402      	str	r4, [sp, #8]
 800cc70:	002b      	movs	r3, r5
 800cc72:	9600      	str	r6, [sp, #0]
 800cc74:	f001 faa6 	bl	800e1c4 <fiprintf>
 800cc78:	f002 fb8e 	bl	800f398 <abort>
 800cc7c:	200006c0 	.word	0x200006c0
 800cc80:	0800fc28 	.word	0x0800fc28
 800cc84:	0800fc63 	.word	0x0800fc63
 800cc88:	0800fc35 	.word	0x0800fc35

0800cc8c <_calloc_r>:
 800cc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc8e:	2400      	movs	r4, #0
 800cc90:	0c0b      	lsrs	r3, r1, #16
 800cc92:	0c16      	lsrs	r6, r2, #16
 800cc94:	42a3      	cmp	r3, r4
 800cc96:	d133      	bne.n	800cd00 <_calloc_r+0x74>
 800cc98:	42a6      	cmp	r6, r4
 800cc9a:	d121      	bne.n	800cce0 <_calloc_r+0x54>
 800cc9c:	b28b      	uxth	r3, r1
 800cc9e:	b291      	uxth	r1, r2
 800cca0:	4359      	muls	r1, r3
 800cca2:	f7fa fd53 	bl	800774c <_malloc_r>
 800cca6:	1e05      	subs	r5, r0, #0
 800cca8:	d033      	beq.n	800cd12 <_calloc_r+0x86>
 800ccaa:	0003      	movs	r3, r0
 800ccac:	3b08      	subs	r3, #8
 800ccae:	685a      	ldr	r2, [r3, #4]
 800ccb0:	2303      	movs	r3, #3
 800ccb2:	439a      	bics	r2, r3
 800ccb4:	3a04      	subs	r2, #4
 800ccb6:	2a24      	cmp	r2, #36	; 0x24
 800ccb8:	d832      	bhi.n	800cd20 <_calloc_r+0x94>
 800ccba:	0003      	movs	r3, r0
 800ccbc:	2a13      	cmp	r2, #19
 800ccbe:	d90a      	bls.n	800ccd6 <_calloc_r+0x4a>
 800ccc0:	6004      	str	r4, [r0, #0]
 800ccc2:	6044      	str	r4, [r0, #4]
 800ccc4:	3308      	adds	r3, #8
 800ccc6:	2a1b      	cmp	r2, #27
 800ccc8:	d905      	bls.n	800ccd6 <_calloc_r+0x4a>
 800ccca:	6084      	str	r4, [r0, #8]
 800cccc:	60c4      	str	r4, [r0, #12]
 800ccce:	2a24      	cmp	r2, #36	; 0x24
 800ccd0:	d021      	beq.n	800cd16 <_calloc_r+0x8a>
 800ccd2:	0003      	movs	r3, r0
 800ccd4:	3310      	adds	r3, #16
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	601a      	str	r2, [r3, #0]
 800ccda:	605a      	str	r2, [r3, #4]
 800ccdc:	609a      	str	r2, [r3, #8]
 800ccde:	e018      	b.n	800cd12 <_calloc_r+0x86>
 800cce0:	1c33      	adds	r3, r6, #0
 800cce2:	1c0d      	adds	r5, r1, #0
 800cce4:	b289      	uxth	r1, r1
 800cce6:	b292      	uxth	r2, r2
 800cce8:	434a      	muls	r2, r1
 800ccea:	b2ad      	uxth	r5, r5
 800ccec:	b299      	uxth	r1, r3
 800ccee:	4369      	muls	r1, r5
 800ccf0:	0c13      	lsrs	r3, r2, #16
 800ccf2:	18c9      	adds	r1, r1, r3
 800ccf4:	0c0b      	lsrs	r3, r1, #16
 800ccf6:	d107      	bne.n	800cd08 <_calloc_r+0x7c>
 800ccf8:	0409      	lsls	r1, r1, #16
 800ccfa:	b292      	uxth	r2, r2
 800ccfc:	4311      	orrs	r1, r2
 800ccfe:	e7d0      	b.n	800cca2 <_calloc_r+0x16>
 800cd00:	2e00      	cmp	r6, #0
 800cd02:	d101      	bne.n	800cd08 <_calloc_r+0x7c>
 800cd04:	1c15      	adds	r5, r2, #0
 800cd06:	e7ed      	b.n	800cce4 <_calloc_r+0x58>
 800cd08:	f7fc f80a 	bl	8008d20 <__errno>
 800cd0c:	230c      	movs	r3, #12
 800cd0e:	2500      	movs	r5, #0
 800cd10:	6003      	str	r3, [r0, #0]
 800cd12:	0028      	movs	r0, r5
 800cd14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd16:	0003      	movs	r3, r0
 800cd18:	6104      	str	r4, [r0, #16]
 800cd1a:	3318      	adds	r3, #24
 800cd1c:	6144      	str	r4, [r0, #20]
 800cd1e:	e7da      	b.n	800ccd6 <_calloc_r+0x4a>
 800cd20:	2100      	movs	r1, #0
 800cd22:	f7fb ff51 	bl	8008bc8 <memset>
 800cd26:	e7f4      	b.n	800cd12 <_calloc_r+0x86>

0800cd28 <quorem>:
 800cd28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd2a:	6902      	ldr	r2, [r0, #16]
 800cd2c:	690b      	ldr	r3, [r1, #16]
 800cd2e:	b089      	sub	sp, #36	; 0x24
 800cd30:	0007      	movs	r7, r0
 800cd32:	9104      	str	r1, [sp, #16]
 800cd34:	2000      	movs	r0, #0
 800cd36:	429a      	cmp	r2, r3
 800cd38:	db69      	blt.n	800ce0e <quorem+0xe6>
 800cd3a:	3b01      	subs	r3, #1
 800cd3c:	009c      	lsls	r4, r3, #2
 800cd3e:	9301      	str	r3, [sp, #4]
 800cd40:	000b      	movs	r3, r1
 800cd42:	3314      	adds	r3, #20
 800cd44:	9306      	str	r3, [sp, #24]
 800cd46:	191b      	adds	r3, r3, r4
 800cd48:	9305      	str	r3, [sp, #20]
 800cd4a:	003b      	movs	r3, r7
 800cd4c:	3314      	adds	r3, #20
 800cd4e:	9303      	str	r3, [sp, #12]
 800cd50:	191c      	adds	r4, r3, r4
 800cd52:	9b05      	ldr	r3, [sp, #20]
 800cd54:	6826      	ldr	r6, [r4, #0]
 800cd56:	681d      	ldr	r5, [r3, #0]
 800cd58:	0030      	movs	r0, r6
 800cd5a:	3501      	adds	r5, #1
 800cd5c:	0029      	movs	r1, r5
 800cd5e:	f7f3 f9ed 	bl	800013c <__udivsi3>
 800cd62:	9002      	str	r0, [sp, #8]
 800cd64:	42ae      	cmp	r6, r5
 800cd66:	d329      	bcc.n	800cdbc <quorem+0x94>
 800cd68:	9b06      	ldr	r3, [sp, #24]
 800cd6a:	2600      	movs	r6, #0
 800cd6c:	469c      	mov	ip, r3
 800cd6e:	9d03      	ldr	r5, [sp, #12]
 800cd70:	9606      	str	r6, [sp, #24]
 800cd72:	4662      	mov	r2, ip
 800cd74:	ca08      	ldmia	r2!, {r3}
 800cd76:	6828      	ldr	r0, [r5, #0]
 800cd78:	4694      	mov	ip, r2
 800cd7a:	9a02      	ldr	r2, [sp, #8]
 800cd7c:	b299      	uxth	r1, r3
 800cd7e:	4351      	muls	r1, r2
 800cd80:	0c1b      	lsrs	r3, r3, #16
 800cd82:	4353      	muls	r3, r2
 800cd84:	1989      	adds	r1, r1, r6
 800cd86:	0c0a      	lsrs	r2, r1, #16
 800cd88:	189b      	adds	r3, r3, r2
 800cd8a:	9307      	str	r3, [sp, #28]
 800cd8c:	0c1e      	lsrs	r6, r3, #16
 800cd8e:	9b06      	ldr	r3, [sp, #24]
 800cd90:	b282      	uxth	r2, r0
 800cd92:	18d2      	adds	r2, r2, r3
 800cd94:	466b      	mov	r3, sp
 800cd96:	b289      	uxth	r1, r1
 800cd98:	8b9b      	ldrh	r3, [r3, #28]
 800cd9a:	1a52      	subs	r2, r2, r1
 800cd9c:	0c01      	lsrs	r1, r0, #16
 800cd9e:	1ac9      	subs	r1, r1, r3
 800cda0:	1413      	asrs	r3, r2, #16
 800cda2:	18cb      	adds	r3, r1, r3
 800cda4:	1419      	asrs	r1, r3, #16
 800cda6:	b292      	uxth	r2, r2
 800cda8:	041b      	lsls	r3, r3, #16
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	c508      	stmia	r5!, {r3}
 800cdae:	9b05      	ldr	r3, [sp, #20]
 800cdb0:	9106      	str	r1, [sp, #24]
 800cdb2:	4563      	cmp	r3, ip
 800cdb4:	d2dd      	bcs.n	800cd72 <quorem+0x4a>
 800cdb6:	6823      	ldr	r3, [r4, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d030      	beq.n	800ce1e <quorem+0xf6>
 800cdbc:	0038      	movs	r0, r7
 800cdbe:	9904      	ldr	r1, [sp, #16]
 800cdc0:	f7fc ff04 	bl	8009bcc <__mcmp>
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	db21      	blt.n	800ce0c <quorem+0xe4>
 800cdc8:	0038      	movs	r0, r7
 800cdca:	2600      	movs	r6, #0
 800cdcc:	9b02      	ldr	r3, [sp, #8]
 800cdce:	9c04      	ldr	r4, [sp, #16]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	9302      	str	r3, [sp, #8]
 800cdd4:	3014      	adds	r0, #20
 800cdd6:	3414      	adds	r4, #20
 800cdd8:	6803      	ldr	r3, [r0, #0]
 800cdda:	cc02      	ldmia	r4!, {r1}
 800cddc:	b29d      	uxth	r5, r3
 800cdde:	19ad      	adds	r5, r5, r6
 800cde0:	b28a      	uxth	r2, r1
 800cde2:	1aaa      	subs	r2, r5, r2
 800cde4:	0c09      	lsrs	r1, r1, #16
 800cde6:	0c1b      	lsrs	r3, r3, #16
 800cde8:	1a5b      	subs	r3, r3, r1
 800cdea:	1411      	asrs	r1, r2, #16
 800cdec:	185b      	adds	r3, r3, r1
 800cdee:	141e      	asrs	r6, r3, #16
 800cdf0:	b292      	uxth	r2, r2
 800cdf2:	041b      	lsls	r3, r3, #16
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	c008      	stmia	r0!, {r3}
 800cdf8:	9b05      	ldr	r3, [sp, #20]
 800cdfa:	42a3      	cmp	r3, r4
 800cdfc:	d2ec      	bcs.n	800cdd8 <quorem+0xb0>
 800cdfe:	9b01      	ldr	r3, [sp, #4]
 800ce00:	9a03      	ldr	r2, [sp, #12]
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	18d3      	adds	r3, r2, r3
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	2a00      	cmp	r2, #0
 800ce0a:	d015      	beq.n	800ce38 <quorem+0x110>
 800ce0c:	9802      	ldr	r0, [sp, #8]
 800ce0e:	b009      	add	sp, #36	; 0x24
 800ce10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce12:	6823      	ldr	r3, [r4, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d106      	bne.n	800ce26 <quorem+0xfe>
 800ce18:	9b01      	ldr	r3, [sp, #4]
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	9301      	str	r3, [sp, #4]
 800ce1e:	9b03      	ldr	r3, [sp, #12]
 800ce20:	3c04      	subs	r4, #4
 800ce22:	42a3      	cmp	r3, r4
 800ce24:	d3f5      	bcc.n	800ce12 <quorem+0xea>
 800ce26:	9b01      	ldr	r3, [sp, #4]
 800ce28:	613b      	str	r3, [r7, #16]
 800ce2a:	e7c7      	b.n	800cdbc <quorem+0x94>
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	2a00      	cmp	r2, #0
 800ce30:	d106      	bne.n	800ce40 <quorem+0x118>
 800ce32:	9a01      	ldr	r2, [sp, #4]
 800ce34:	3a01      	subs	r2, #1
 800ce36:	9201      	str	r2, [sp, #4]
 800ce38:	9a03      	ldr	r2, [sp, #12]
 800ce3a:	3b04      	subs	r3, #4
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d3f5      	bcc.n	800ce2c <quorem+0x104>
 800ce40:	9b01      	ldr	r3, [sp, #4]
 800ce42:	613b      	str	r3, [r7, #16]
 800ce44:	e7e2      	b.n	800ce0c <quorem+0xe4>
	...

0800ce48 <_dtoa_r>:
 800ce48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce4a:	0014      	movs	r4, r2
 800ce4c:	001d      	movs	r5, r3
 800ce4e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800ce50:	b09d      	sub	sp, #116	; 0x74
 800ce52:	9408      	str	r4, [sp, #32]
 800ce54:	9509      	str	r5, [sp, #36]	; 0x24
 800ce56:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800ce58:	9004      	str	r0, [sp, #16]
 800ce5a:	2900      	cmp	r1, #0
 800ce5c:	d009      	beq.n	800ce72 <_dtoa_r+0x2a>
 800ce5e:	2301      	movs	r3, #1
 800ce60:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ce62:	4093      	lsls	r3, r2
 800ce64:	604a      	str	r2, [r1, #4]
 800ce66:	608b      	str	r3, [r1, #8]
 800ce68:	f7fc fc56 	bl	8009718 <_Bfree>
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	9a04      	ldr	r2, [sp, #16]
 800ce70:	6393      	str	r3, [r2, #56]	; 0x38
 800ce72:	2d00      	cmp	r5, #0
 800ce74:	da1e      	bge.n	800ceb4 <_dtoa_r+0x6c>
 800ce76:	2301      	movs	r3, #1
 800ce78:	6033      	str	r3, [r6, #0]
 800ce7a:	006b      	lsls	r3, r5, #1
 800ce7c:	085b      	lsrs	r3, r3, #1
 800ce7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce80:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ce82:	4bb5      	ldr	r3, [pc, #724]	; (800d158 <_dtoa_r+0x310>)
 800ce84:	4ab4      	ldr	r2, [pc, #720]	; (800d158 <_dtoa_r+0x310>)
 800ce86:	403b      	ands	r3, r7
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d116      	bne.n	800ceba <_dtoa_r+0x72>
 800ce8c:	4bb3      	ldr	r3, [pc, #716]	; (800d15c <_dtoa_r+0x314>)
 800ce8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ce90:	6013      	str	r3, [r2, #0]
 800ce92:	033b      	lsls	r3, r7, #12
 800ce94:	0b1b      	lsrs	r3, r3, #12
 800ce96:	4323      	orrs	r3, r4
 800ce98:	d101      	bne.n	800ce9e <_dtoa_r+0x56>
 800ce9a:	f000 fdb2 	bl	800da02 <_dtoa_r+0xbba>
 800ce9e:	4bb0      	ldr	r3, [pc, #704]	; (800d160 <_dtoa_r+0x318>)
 800cea0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cea2:	9306      	str	r3, [sp, #24]
 800cea4:	2a00      	cmp	r2, #0
 800cea6:	d002      	beq.n	800ceae <_dtoa_r+0x66>
 800cea8:	4bae      	ldr	r3, [pc, #696]	; (800d164 <_dtoa_r+0x31c>)
 800ceaa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ceac:	6013      	str	r3, [r2, #0]
 800ceae:	9806      	ldr	r0, [sp, #24]
 800ceb0:	b01d      	add	sp, #116	; 0x74
 800ceb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	6033      	str	r3, [r6, #0]
 800ceb8:	e7e2      	b.n	800ce80 <_dtoa_r+0x38>
 800ceba:	9a08      	ldr	r2, [sp, #32]
 800cebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cebe:	9210      	str	r2, [sp, #64]	; 0x40
 800cec0:	9311      	str	r3, [sp, #68]	; 0x44
 800cec2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cec4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cec6:	2200      	movs	r2, #0
 800cec8:	2300      	movs	r3, #0
 800ceca:	f7f3 fabd 	bl	8000448 <__aeabi_dcmpeq>
 800cece:	1e06      	subs	r6, r0, #0
 800ced0:	d009      	beq.n	800cee6 <_dtoa_r+0x9e>
 800ced2:	2301      	movs	r3, #1
 800ced4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ced6:	6013      	str	r3, [r2, #0]
 800ced8:	4ba3      	ldr	r3, [pc, #652]	; (800d168 <_dtoa_r+0x320>)
 800ceda:	9306      	str	r3, [sp, #24]
 800cedc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d0e5      	beq.n	800ceae <_dtoa_r+0x66>
 800cee2:	4ba2      	ldr	r3, [pc, #648]	; (800d16c <_dtoa_r+0x324>)
 800cee4:	e7e1      	b.n	800ceaa <_dtoa_r+0x62>
 800cee6:	ab1a      	add	r3, sp, #104	; 0x68
 800cee8:	9301      	str	r3, [sp, #4]
 800ceea:	ab1b      	add	r3, sp, #108	; 0x6c
 800ceec:	9300      	str	r3, [sp, #0]
 800ceee:	9804      	ldr	r0, [sp, #16]
 800cef0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cef2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cef4:	f7fc ff86 	bl	8009e04 <__d2b>
 800cef8:	007a      	lsls	r2, r7, #1
 800cefa:	9005      	str	r0, [sp, #20]
 800cefc:	0d52      	lsrs	r2, r2, #21
 800cefe:	d100      	bne.n	800cf02 <_dtoa_r+0xba>
 800cf00:	e07b      	b.n	800cffa <_dtoa_r+0x1b2>
 800cf02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cf04:	9617      	str	r6, [sp, #92]	; 0x5c
 800cf06:	0319      	lsls	r1, r3, #12
 800cf08:	4b99      	ldr	r3, [pc, #612]	; (800d170 <_dtoa_r+0x328>)
 800cf0a:	0b09      	lsrs	r1, r1, #12
 800cf0c:	430b      	orrs	r3, r1
 800cf0e:	4999      	ldr	r1, [pc, #612]	; (800d174 <_dtoa_r+0x32c>)
 800cf10:	1857      	adds	r7, r2, r1
 800cf12:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cf14:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cf16:	0019      	movs	r1, r3
 800cf18:	2200      	movs	r2, #0
 800cf1a:	4b97      	ldr	r3, [pc, #604]	; (800d178 <_dtoa_r+0x330>)
 800cf1c:	f7f4 fe68 	bl	8001bf0 <__aeabi_dsub>
 800cf20:	4a96      	ldr	r2, [pc, #600]	; (800d17c <_dtoa_r+0x334>)
 800cf22:	4b97      	ldr	r3, [pc, #604]	; (800d180 <_dtoa_r+0x338>)
 800cf24:	f7f4 fba2 	bl	800166c <__aeabi_dmul>
 800cf28:	4a96      	ldr	r2, [pc, #600]	; (800d184 <_dtoa_r+0x33c>)
 800cf2a:	4b97      	ldr	r3, [pc, #604]	; (800d188 <_dtoa_r+0x340>)
 800cf2c:	f7f3 fc44 	bl	80007b8 <__aeabi_dadd>
 800cf30:	0004      	movs	r4, r0
 800cf32:	0038      	movs	r0, r7
 800cf34:	000d      	movs	r5, r1
 800cf36:	f7f5 fa31 	bl	800239c <__aeabi_i2d>
 800cf3a:	4a94      	ldr	r2, [pc, #592]	; (800d18c <_dtoa_r+0x344>)
 800cf3c:	4b94      	ldr	r3, [pc, #592]	; (800d190 <_dtoa_r+0x348>)
 800cf3e:	f7f4 fb95 	bl	800166c <__aeabi_dmul>
 800cf42:	0002      	movs	r2, r0
 800cf44:	000b      	movs	r3, r1
 800cf46:	0020      	movs	r0, r4
 800cf48:	0029      	movs	r1, r5
 800cf4a:	f7f3 fc35 	bl	80007b8 <__aeabi_dadd>
 800cf4e:	0004      	movs	r4, r0
 800cf50:	000d      	movs	r5, r1
 800cf52:	f7f5 f9ed 	bl	8002330 <__aeabi_d2iz>
 800cf56:	2200      	movs	r2, #0
 800cf58:	9003      	str	r0, [sp, #12]
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	0020      	movs	r0, r4
 800cf5e:	0029      	movs	r1, r5
 800cf60:	f7f3 fa78 	bl	8000454 <__aeabi_dcmplt>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d00b      	beq.n	800cf80 <_dtoa_r+0x138>
 800cf68:	9803      	ldr	r0, [sp, #12]
 800cf6a:	f7f5 fa17 	bl	800239c <__aeabi_i2d>
 800cf6e:	002b      	movs	r3, r5
 800cf70:	0022      	movs	r2, r4
 800cf72:	f7f3 fa69 	bl	8000448 <__aeabi_dcmpeq>
 800cf76:	4243      	negs	r3, r0
 800cf78:	4158      	adcs	r0, r3
 800cf7a:	9b03      	ldr	r3, [sp, #12]
 800cf7c:	1a1b      	subs	r3, r3, r0
 800cf7e:	9303      	str	r3, [sp, #12]
 800cf80:	2301      	movs	r3, #1
 800cf82:	9316      	str	r3, [sp, #88]	; 0x58
 800cf84:	9b03      	ldr	r3, [sp, #12]
 800cf86:	2b16      	cmp	r3, #22
 800cf88:	d810      	bhi.n	800cfac <_dtoa_r+0x164>
 800cf8a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cf8c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cf8e:	9a03      	ldr	r2, [sp, #12]
 800cf90:	4b80      	ldr	r3, [pc, #512]	; (800d194 <_dtoa_r+0x34c>)
 800cf92:	00d2      	lsls	r2, r2, #3
 800cf94:	189b      	adds	r3, r3, r2
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	f7f3 fa5b 	bl	8000454 <__aeabi_dcmplt>
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d047      	beq.n	800d032 <_dtoa_r+0x1ea>
 800cfa2:	9b03      	ldr	r3, [sp, #12]
 800cfa4:	3b01      	subs	r3, #1
 800cfa6:	9303      	str	r3, [sp, #12]
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	9316      	str	r3, [sp, #88]	; 0x58
 800cfac:	2200      	movs	r2, #0
 800cfae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cfb0:	920a      	str	r2, [sp, #40]	; 0x28
 800cfb2:	1bdb      	subs	r3, r3, r7
 800cfb4:	1e5a      	subs	r2, r3, #1
 800cfb6:	d53e      	bpl.n	800d036 <_dtoa_r+0x1ee>
 800cfb8:	2201      	movs	r2, #1
 800cfba:	1ad3      	subs	r3, r2, r3
 800cfbc:	930a      	str	r3, [sp, #40]	; 0x28
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	930c      	str	r3, [sp, #48]	; 0x30
 800cfc2:	9b03      	ldr	r3, [sp, #12]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	db38      	blt.n	800d03a <_dtoa_r+0x1f2>
 800cfc8:	9a03      	ldr	r2, [sp, #12]
 800cfca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfcc:	4694      	mov	ip, r2
 800cfce:	4463      	add	r3, ip
 800cfd0:	930c      	str	r3, [sp, #48]	; 0x30
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	9213      	str	r2, [sp, #76]	; 0x4c
 800cfd6:	930d      	str	r3, [sp, #52]	; 0x34
 800cfd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cfda:	2401      	movs	r4, #1
 800cfdc:	2b09      	cmp	r3, #9
 800cfde:	d867      	bhi.n	800d0b0 <_dtoa_r+0x268>
 800cfe0:	2b05      	cmp	r3, #5
 800cfe2:	dd02      	ble.n	800cfea <_dtoa_r+0x1a2>
 800cfe4:	2400      	movs	r4, #0
 800cfe6:	3b04      	subs	r3, #4
 800cfe8:	9322      	str	r3, [sp, #136]	; 0x88
 800cfea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cfec:	1e98      	subs	r0, r3, #2
 800cfee:	2803      	cmp	r0, #3
 800cff0:	d867      	bhi.n	800d0c2 <_dtoa_r+0x27a>
 800cff2:	f7f3 f88f 	bl	8000114 <__gnu_thumb1_case_uqi>
 800cff6:	3a2b      	.short	0x3a2b
 800cff8:	5b38      	.short	0x5b38
 800cffa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cffc:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800cffe:	18f6      	adds	r6, r6, r3
 800d000:	4b65      	ldr	r3, [pc, #404]	; (800d198 <_dtoa_r+0x350>)
 800d002:	18f2      	adds	r2, r6, r3
 800d004:	2a20      	cmp	r2, #32
 800d006:	dd0f      	ble.n	800d028 <_dtoa_r+0x1e0>
 800d008:	2340      	movs	r3, #64	; 0x40
 800d00a:	1a9b      	subs	r3, r3, r2
 800d00c:	409f      	lsls	r7, r3
 800d00e:	4b63      	ldr	r3, [pc, #396]	; (800d19c <_dtoa_r+0x354>)
 800d010:	0038      	movs	r0, r7
 800d012:	18f3      	adds	r3, r6, r3
 800d014:	40dc      	lsrs	r4, r3
 800d016:	4320      	orrs	r0, r4
 800d018:	f7f5 f9f0 	bl	80023fc <__aeabi_ui2d>
 800d01c:	2201      	movs	r2, #1
 800d01e:	4b60      	ldr	r3, [pc, #384]	; (800d1a0 <_dtoa_r+0x358>)
 800d020:	1e77      	subs	r7, r6, #1
 800d022:	18cb      	adds	r3, r1, r3
 800d024:	9217      	str	r2, [sp, #92]	; 0x5c
 800d026:	e776      	b.n	800cf16 <_dtoa_r+0xce>
 800d028:	2320      	movs	r3, #32
 800d02a:	0020      	movs	r0, r4
 800d02c:	1a9b      	subs	r3, r3, r2
 800d02e:	4098      	lsls	r0, r3
 800d030:	e7f2      	b.n	800d018 <_dtoa_r+0x1d0>
 800d032:	9016      	str	r0, [sp, #88]	; 0x58
 800d034:	e7ba      	b.n	800cfac <_dtoa_r+0x164>
 800d036:	920c      	str	r2, [sp, #48]	; 0x30
 800d038:	e7c3      	b.n	800cfc2 <_dtoa_r+0x17a>
 800d03a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d03c:	9a03      	ldr	r2, [sp, #12]
 800d03e:	1a9b      	subs	r3, r3, r2
 800d040:	930a      	str	r3, [sp, #40]	; 0x28
 800d042:	4253      	negs	r3, r2
 800d044:	930d      	str	r3, [sp, #52]	; 0x34
 800d046:	2300      	movs	r3, #0
 800d048:	9313      	str	r3, [sp, #76]	; 0x4c
 800d04a:	e7c5      	b.n	800cfd8 <_dtoa_r+0x190>
 800d04c:	2300      	movs	r3, #0
 800d04e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d050:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d052:	930b      	str	r3, [sp, #44]	; 0x2c
 800d054:	9307      	str	r3, [sp, #28]
 800d056:	2b00      	cmp	r3, #0
 800d058:	dc13      	bgt.n	800d082 <_dtoa_r+0x23a>
 800d05a:	2301      	movs	r3, #1
 800d05c:	001a      	movs	r2, r3
 800d05e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d060:	9307      	str	r3, [sp, #28]
 800d062:	9223      	str	r2, [sp, #140]	; 0x8c
 800d064:	e00d      	b.n	800d082 <_dtoa_r+0x23a>
 800d066:	2301      	movs	r3, #1
 800d068:	e7f1      	b.n	800d04e <_dtoa_r+0x206>
 800d06a:	2300      	movs	r3, #0
 800d06c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800d06e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d070:	4694      	mov	ip, r2
 800d072:	9b03      	ldr	r3, [sp, #12]
 800d074:	4463      	add	r3, ip
 800d076:	930b      	str	r3, [sp, #44]	; 0x2c
 800d078:	3301      	adds	r3, #1
 800d07a:	9307      	str	r3, [sp, #28]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	dc00      	bgt.n	800d082 <_dtoa_r+0x23a>
 800d080:	2301      	movs	r3, #1
 800d082:	2100      	movs	r1, #0
 800d084:	2204      	movs	r2, #4
 800d086:	0010      	movs	r0, r2
 800d088:	3014      	adds	r0, #20
 800d08a:	4298      	cmp	r0, r3
 800d08c:	d91d      	bls.n	800d0ca <_dtoa_r+0x282>
 800d08e:	9b04      	ldr	r3, [sp, #16]
 800d090:	0018      	movs	r0, r3
 800d092:	63d9      	str	r1, [r3, #60]	; 0x3c
 800d094:	f7fc fb18 	bl	80096c8 <_Balloc>
 800d098:	9006      	str	r0, [sp, #24]
 800d09a:	2800      	cmp	r0, #0
 800d09c:	d118      	bne.n	800d0d0 <_dtoa_r+0x288>
 800d09e:	21b0      	movs	r1, #176	; 0xb0
 800d0a0:	4b40      	ldr	r3, [pc, #256]	; (800d1a4 <_dtoa_r+0x35c>)
 800d0a2:	4841      	ldr	r0, [pc, #260]	; (800d1a8 <_dtoa_r+0x360>)
 800d0a4:	9a06      	ldr	r2, [sp, #24]
 800d0a6:	31ff      	adds	r1, #255	; 0xff
 800d0a8:	f7ff fdd2 	bl	800cc50 <__assert_func>
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e7dd      	b.n	800d06c <_dtoa_r+0x224>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	940f      	str	r4, [sp, #60]	; 0x3c
 800d0b4:	9322      	str	r3, [sp, #136]	; 0x88
 800d0b6:	3b01      	subs	r3, #1
 800d0b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0ba:	9307      	str	r3, [sp, #28]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	3313      	adds	r3, #19
 800d0c0:	e7cf      	b.n	800d062 <_dtoa_r+0x21a>
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0c6:	3b02      	subs	r3, #2
 800d0c8:	e7f6      	b.n	800d0b8 <_dtoa_r+0x270>
 800d0ca:	3101      	adds	r1, #1
 800d0cc:	0052      	lsls	r2, r2, #1
 800d0ce:	e7da      	b.n	800d086 <_dtoa_r+0x23e>
 800d0d0:	9b04      	ldr	r3, [sp, #16]
 800d0d2:	9a06      	ldr	r2, [sp, #24]
 800d0d4:	639a      	str	r2, [r3, #56]	; 0x38
 800d0d6:	9b07      	ldr	r3, [sp, #28]
 800d0d8:	2b0e      	cmp	r3, #14
 800d0da:	d900      	bls.n	800d0de <_dtoa_r+0x296>
 800d0dc:	e0e3      	b.n	800d2a6 <_dtoa_r+0x45e>
 800d0de:	2c00      	cmp	r4, #0
 800d0e0:	d100      	bne.n	800d0e4 <_dtoa_r+0x29c>
 800d0e2:	e0e0      	b.n	800d2a6 <_dtoa_r+0x45e>
 800d0e4:	9b03      	ldr	r3, [sp, #12]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	dd62      	ble.n	800d1b0 <_dtoa_r+0x368>
 800d0ea:	210f      	movs	r1, #15
 800d0ec:	9a03      	ldr	r2, [sp, #12]
 800d0ee:	4b29      	ldr	r3, [pc, #164]	; (800d194 <_dtoa_r+0x34c>)
 800d0f0:	400a      	ands	r2, r1
 800d0f2:	00d2      	lsls	r2, r2, #3
 800d0f4:	189b      	adds	r3, r3, r2
 800d0f6:	681e      	ldr	r6, [r3, #0]
 800d0f8:	685f      	ldr	r7, [r3, #4]
 800d0fa:	9b03      	ldr	r3, [sp, #12]
 800d0fc:	2402      	movs	r4, #2
 800d0fe:	111d      	asrs	r5, r3, #4
 800d100:	05db      	lsls	r3, r3, #23
 800d102:	d50a      	bpl.n	800d11a <_dtoa_r+0x2d2>
 800d104:	4b29      	ldr	r3, [pc, #164]	; (800d1ac <_dtoa_r+0x364>)
 800d106:	400d      	ands	r5, r1
 800d108:	6a1a      	ldr	r2, [r3, #32]
 800d10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d10e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d110:	f7f3 feb2 	bl	8000e78 <__aeabi_ddiv>
 800d114:	9008      	str	r0, [sp, #32]
 800d116:	9109      	str	r1, [sp, #36]	; 0x24
 800d118:	3401      	adds	r4, #1
 800d11a:	4b24      	ldr	r3, [pc, #144]	; (800d1ac <_dtoa_r+0x364>)
 800d11c:	930e      	str	r3, [sp, #56]	; 0x38
 800d11e:	2d00      	cmp	r5, #0
 800d120:	d108      	bne.n	800d134 <_dtoa_r+0x2ec>
 800d122:	9808      	ldr	r0, [sp, #32]
 800d124:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d126:	0032      	movs	r2, r6
 800d128:	003b      	movs	r3, r7
 800d12a:	f7f3 fea5 	bl	8000e78 <__aeabi_ddiv>
 800d12e:	9008      	str	r0, [sp, #32]
 800d130:	9109      	str	r1, [sp, #36]	; 0x24
 800d132:	e058      	b.n	800d1e6 <_dtoa_r+0x39e>
 800d134:	2301      	movs	r3, #1
 800d136:	421d      	tst	r5, r3
 800d138:	d009      	beq.n	800d14e <_dtoa_r+0x306>
 800d13a:	18e4      	adds	r4, r4, r3
 800d13c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d13e:	0030      	movs	r0, r6
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	0039      	movs	r1, r7
 800d146:	f7f4 fa91 	bl	800166c <__aeabi_dmul>
 800d14a:	0006      	movs	r6, r0
 800d14c:	000f      	movs	r7, r1
 800d14e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d150:	106d      	asrs	r5, r5, #1
 800d152:	3308      	adds	r3, #8
 800d154:	e7e2      	b.n	800d11c <_dtoa_r+0x2d4>
 800d156:	46c0      	nop			; (mov r8, r8)
 800d158:	7ff00000 	.word	0x7ff00000
 800d15c:	0000270f 	.word	0x0000270f
 800d160:	0800fc6d 	.word	0x0800fc6d
 800d164:	0800fc70 	.word	0x0800fc70
 800d168:	0800fbde 	.word	0x0800fbde
 800d16c:	0800fbdf 	.word	0x0800fbdf
 800d170:	3ff00000 	.word	0x3ff00000
 800d174:	fffffc01 	.word	0xfffffc01
 800d178:	3ff80000 	.word	0x3ff80000
 800d17c:	636f4361 	.word	0x636f4361
 800d180:	3fd287a7 	.word	0x3fd287a7
 800d184:	8b60c8b3 	.word	0x8b60c8b3
 800d188:	3fc68a28 	.word	0x3fc68a28
 800d18c:	509f79fb 	.word	0x509f79fb
 800d190:	3fd34413 	.word	0x3fd34413
 800d194:	0800fad8 	.word	0x0800fad8
 800d198:	00000432 	.word	0x00000432
 800d19c:	00000412 	.word	0x00000412
 800d1a0:	fe100000 	.word	0xfe100000
 800d1a4:	0800f9e1 	.word	0x0800f9e1
 800d1a8:	0800fc71 	.word	0x0800fc71
 800d1ac:	0800fab0 	.word	0x0800fab0
 800d1b0:	9b03      	ldr	r3, [sp, #12]
 800d1b2:	2402      	movs	r4, #2
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d016      	beq.n	800d1e6 <_dtoa_r+0x39e>
 800d1b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d1ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d1bc:	220f      	movs	r2, #15
 800d1be:	425d      	negs	r5, r3
 800d1c0:	402a      	ands	r2, r5
 800d1c2:	4bdd      	ldr	r3, [pc, #884]	; (800d538 <_dtoa_r+0x6f0>)
 800d1c4:	00d2      	lsls	r2, r2, #3
 800d1c6:	189b      	adds	r3, r3, r2
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	f7f4 fa4e 	bl	800166c <__aeabi_dmul>
 800d1d0:	2701      	movs	r7, #1
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	9008      	str	r0, [sp, #32]
 800d1d6:	9109      	str	r1, [sp, #36]	; 0x24
 800d1d8:	4ed8      	ldr	r6, [pc, #864]	; (800d53c <_dtoa_r+0x6f4>)
 800d1da:	112d      	asrs	r5, r5, #4
 800d1dc:	2d00      	cmp	r5, #0
 800d1de:	d000      	beq.n	800d1e2 <_dtoa_r+0x39a>
 800d1e0:	e091      	b.n	800d306 <_dtoa_r+0x4be>
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1a3      	bne.n	800d12e <_dtoa_r+0x2e6>
 800d1e6:	9e08      	ldr	r6, [sp, #32]
 800d1e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d1ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d100      	bne.n	800d1f2 <_dtoa_r+0x3aa>
 800d1f0:	e094      	b.n	800d31c <_dtoa_r+0x4d4>
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	0030      	movs	r0, r6
 800d1f6:	0039      	movs	r1, r7
 800d1f8:	4bd1      	ldr	r3, [pc, #836]	; (800d540 <_dtoa_r+0x6f8>)
 800d1fa:	f7f3 f92b 	bl	8000454 <__aeabi_dcmplt>
 800d1fe:	2800      	cmp	r0, #0
 800d200:	d100      	bne.n	800d204 <_dtoa_r+0x3bc>
 800d202:	e08b      	b.n	800d31c <_dtoa_r+0x4d4>
 800d204:	9b07      	ldr	r3, [sp, #28]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d100      	bne.n	800d20c <_dtoa_r+0x3c4>
 800d20a:	e087      	b.n	800d31c <_dtoa_r+0x4d4>
 800d20c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d20e:	2b00      	cmp	r3, #0
 800d210:	dd45      	ble.n	800d29e <_dtoa_r+0x456>
 800d212:	9b03      	ldr	r3, [sp, #12]
 800d214:	2200      	movs	r2, #0
 800d216:	3b01      	subs	r3, #1
 800d218:	930e      	str	r3, [sp, #56]	; 0x38
 800d21a:	0030      	movs	r0, r6
 800d21c:	4bc9      	ldr	r3, [pc, #804]	; (800d544 <_dtoa_r+0x6fc>)
 800d21e:	0039      	movs	r1, r7
 800d220:	f7f4 fa24 	bl	800166c <__aeabi_dmul>
 800d224:	9008      	str	r0, [sp, #32]
 800d226:	9109      	str	r1, [sp, #36]	; 0x24
 800d228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d22a:	3401      	adds	r4, #1
 800d22c:	0020      	movs	r0, r4
 800d22e:	9e08      	ldr	r6, [sp, #32]
 800d230:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d232:	9312      	str	r3, [sp, #72]	; 0x48
 800d234:	f7f5 f8b2 	bl	800239c <__aeabi_i2d>
 800d238:	0032      	movs	r2, r6
 800d23a:	003b      	movs	r3, r7
 800d23c:	f7f4 fa16 	bl	800166c <__aeabi_dmul>
 800d240:	2200      	movs	r2, #0
 800d242:	4bc1      	ldr	r3, [pc, #772]	; (800d548 <_dtoa_r+0x700>)
 800d244:	f7f3 fab8 	bl	80007b8 <__aeabi_dadd>
 800d248:	4ac0      	ldr	r2, [pc, #768]	; (800d54c <_dtoa_r+0x704>)
 800d24a:	9014      	str	r0, [sp, #80]	; 0x50
 800d24c:	9115      	str	r1, [sp, #84]	; 0x54
 800d24e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d250:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800d252:	4694      	mov	ip, r2
 800d254:	9308      	str	r3, [sp, #32]
 800d256:	9409      	str	r4, [sp, #36]	; 0x24
 800d258:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d25a:	4463      	add	r3, ip
 800d25c:	9318      	str	r3, [sp, #96]	; 0x60
 800d25e:	9309      	str	r3, [sp, #36]	; 0x24
 800d260:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d262:	2b00      	cmp	r3, #0
 800d264:	d15e      	bne.n	800d324 <_dtoa_r+0x4dc>
 800d266:	2200      	movs	r2, #0
 800d268:	4bb9      	ldr	r3, [pc, #740]	; (800d550 <_dtoa_r+0x708>)
 800d26a:	0030      	movs	r0, r6
 800d26c:	0039      	movs	r1, r7
 800d26e:	f7f4 fcbf 	bl	8001bf0 <__aeabi_dsub>
 800d272:	9a08      	ldr	r2, [sp, #32]
 800d274:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d276:	0004      	movs	r4, r0
 800d278:	000d      	movs	r5, r1
 800d27a:	f7f3 f8ff 	bl	800047c <__aeabi_dcmpgt>
 800d27e:	2800      	cmp	r0, #0
 800d280:	d000      	beq.n	800d284 <_dtoa_r+0x43c>
 800d282:	e2b3      	b.n	800d7ec <_dtoa_r+0x9a4>
 800d284:	48b3      	ldr	r0, [pc, #716]	; (800d554 <_dtoa_r+0x70c>)
 800d286:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d288:	4684      	mov	ip, r0
 800d28a:	4461      	add	r1, ip
 800d28c:	000b      	movs	r3, r1
 800d28e:	0020      	movs	r0, r4
 800d290:	0029      	movs	r1, r5
 800d292:	9a08      	ldr	r2, [sp, #32]
 800d294:	f7f3 f8de 	bl	8000454 <__aeabi_dcmplt>
 800d298:	2800      	cmp	r0, #0
 800d29a:	d000      	beq.n	800d29e <_dtoa_r+0x456>
 800d29c:	e2a3      	b.n	800d7e6 <_dtoa_r+0x99e>
 800d29e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2a0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800d2a2:	9308      	str	r3, [sp, #32]
 800d2a4:	9409      	str	r4, [sp, #36]	; 0x24
 800d2a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	da00      	bge.n	800d2ae <_dtoa_r+0x466>
 800d2ac:	e179      	b.n	800d5a2 <_dtoa_r+0x75a>
 800d2ae:	9a03      	ldr	r2, [sp, #12]
 800d2b0:	2a0e      	cmp	r2, #14
 800d2b2:	dd00      	ble.n	800d2b6 <_dtoa_r+0x46e>
 800d2b4:	e175      	b.n	800d5a2 <_dtoa_r+0x75a>
 800d2b6:	4ba0      	ldr	r3, [pc, #640]	; (800d538 <_dtoa_r+0x6f0>)
 800d2b8:	00d2      	lsls	r2, r2, #3
 800d2ba:	189b      	adds	r3, r3, r2
 800d2bc:	681e      	ldr	r6, [r3, #0]
 800d2be:	685f      	ldr	r7, [r3, #4]
 800d2c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	db00      	blt.n	800d2c8 <_dtoa_r+0x480>
 800d2c6:	e0e5      	b.n	800d494 <_dtoa_r+0x64c>
 800d2c8:	9b07      	ldr	r3, [sp, #28]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	dd00      	ble.n	800d2d0 <_dtoa_r+0x488>
 800d2ce:	e0e1      	b.n	800d494 <_dtoa_r+0x64c>
 800d2d0:	d000      	beq.n	800d2d4 <_dtoa_r+0x48c>
 800d2d2:	e288      	b.n	800d7e6 <_dtoa_r+0x99e>
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	0030      	movs	r0, r6
 800d2d8:	0039      	movs	r1, r7
 800d2da:	4b9d      	ldr	r3, [pc, #628]	; (800d550 <_dtoa_r+0x708>)
 800d2dc:	f7f4 f9c6 	bl	800166c <__aeabi_dmul>
 800d2e0:	9a08      	ldr	r2, [sp, #32]
 800d2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e4:	f7f3 f8d4 	bl	8000490 <__aeabi_dcmpge>
 800d2e8:	9e07      	ldr	r6, [sp, #28]
 800d2ea:	0037      	movs	r7, r6
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	d000      	beq.n	800d2f2 <_dtoa_r+0x4aa>
 800d2f0:	e25f      	b.n	800d7b2 <_dtoa_r+0x96a>
 800d2f2:	9b06      	ldr	r3, [sp, #24]
 800d2f4:	9a06      	ldr	r2, [sp, #24]
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	9308      	str	r3, [sp, #32]
 800d2fa:	2331      	movs	r3, #49	; 0x31
 800d2fc:	7013      	strb	r3, [r2, #0]
 800d2fe:	9b03      	ldr	r3, [sp, #12]
 800d300:	3301      	adds	r3, #1
 800d302:	9303      	str	r3, [sp, #12]
 800d304:	e25a      	b.n	800d7bc <_dtoa_r+0x974>
 800d306:	423d      	tst	r5, r7
 800d308:	d005      	beq.n	800d316 <_dtoa_r+0x4ce>
 800d30a:	6832      	ldr	r2, [r6, #0]
 800d30c:	6873      	ldr	r3, [r6, #4]
 800d30e:	f7f4 f9ad 	bl	800166c <__aeabi_dmul>
 800d312:	003b      	movs	r3, r7
 800d314:	3401      	adds	r4, #1
 800d316:	106d      	asrs	r5, r5, #1
 800d318:	3608      	adds	r6, #8
 800d31a:	e75f      	b.n	800d1dc <_dtoa_r+0x394>
 800d31c:	9b03      	ldr	r3, [sp, #12]
 800d31e:	930e      	str	r3, [sp, #56]	; 0x38
 800d320:	9b07      	ldr	r3, [sp, #28]
 800d322:	e783      	b.n	800d22c <_dtoa_r+0x3e4>
 800d324:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d326:	4b84      	ldr	r3, [pc, #528]	; (800d538 <_dtoa_r+0x6f0>)
 800d328:	3a01      	subs	r2, #1
 800d32a:	00d2      	lsls	r2, r2, #3
 800d32c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d32e:	189b      	adds	r3, r3, r2
 800d330:	9c08      	ldr	r4, [sp, #32]
 800d332:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	2900      	cmp	r1, #0
 800d33a:	d051      	beq.n	800d3e0 <_dtoa_r+0x598>
 800d33c:	2000      	movs	r0, #0
 800d33e:	4986      	ldr	r1, [pc, #536]	; (800d558 <_dtoa_r+0x710>)
 800d340:	f7f3 fd9a 	bl	8000e78 <__aeabi_ddiv>
 800d344:	0022      	movs	r2, r4
 800d346:	002b      	movs	r3, r5
 800d348:	f7f4 fc52 	bl	8001bf0 <__aeabi_dsub>
 800d34c:	9a06      	ldr	r2, [sp, #24]
 800d34e:	0004      	movs	r4, r0
 800d350:	4694      	mov	ip, r2
 800d352:	000d      	movs	r5, r1
 800d354:	9b06      	ldr	r3, [sp, #24]
 800d356:	9314      	str	r3, [sp, #80]	; 0x50
 800d358:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d35a:	4463      	add	r3, ip
 800d35c:	9318      	str	r3, [sp, #96]	; 0x60
 800d35e:	0039      	movs	r1, r7
 800d360:	0030      	movs	r0, r6
 800d362:	f7f4 ffe5 	bl	8002330 <__aeabi_d2iz>
 800d366:	9012      	str	r0, [sp, #72]	; 0x48
 800d368:	f7f5 f818 	bl	800239c <__aeabi_i2d>
 800d36c:	0002      	movs	r2, r0
 800d36e:	000b      	movs	r3, r1
 800d370:	0030      	movs	r0, r6
 800d372:	0039      	movs	r1, r7
 800d374:	f7f4 fc3c 	bl	8001bf0 <__aeabi_dsub>
 800d378:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d37a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d37c:	3301      	adds	r3, #1
 800d37e:	9308      	str	r3, [sp, #32]
 800d380:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d382:	0006      	movs	r6, r0
 800d384:	3330      	adds	r3, #48	; 0x30
 800d386:	7013      	strb	r3, [r2, #0]
 800d388:	0022      	movs	r2, r4
 800d38a:	002b      	movs	r3, r5
 800d38c:	000f      	movs	r7, r1
 800d38e:	f7f3 f861 	bl	8000454 <__aeabi_dcmplt>
 800d392:	2800      	cmp	r0, #0
 800d394:	d174      	bne.n	800d480 <_dtoa_r+0x638>
 800d396:	0032      	movs	r2, r6
 800d398:	003b      	movs	r3, r7
 800d39a:	2000      	movs	r0, #0
 800d39c:	4968      	ldr	r1, [pc, #416]	; (800d540 <_dtoa_r+0x6f8>)
 800d39e:	f7f4 fc27 	bl	8001bf0 <__aeabi_dsub>
 800d3a2:	0022      	movs	r2, r4
 800d3a4:	002b      	movs	r3, r5
 800d3a6:	f7f3 f855 	bl	8000454 <__aeabi_dcmplt>
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	d000      	beq.n	800d3b0 <_dtoa_r+0x568>
 800d3ae:	e0d7      	b.n	800d560 <_dtoa_r+0x718>
 800d3b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d3b2:	9a08      	ldr	r2, [sp, #32]
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d100      	bne.n	800d3ba <_dtoa_r+0x572>
 800d3b8:	e771      	b.n	800d29e <_dtoa_r+0x456>
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	0020      	movs	r0, r4
 800d3be:	0029      	movs	r1, r5
 800d3c0:	4b60      	ldr	r3, [pc, #384]	; (800d544 <_dtoa_r+0x6fc>)
 800d3c2:	f7f4 f953 	bl	800166c <__aeabi_dmul>
 800d3c6:	4b5f      	ldr	r3, [pc, #380]	; (800d544 <_dtoa_r+0x6fc>)
 800d3c8:	0004      	movs	r4, r0
 800d3ca:	000d      	movs	r5, r1
 800d3cc:	0030      	movs	r0, r6
 800d3ce:	0039      	movs	r1, r7
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	f7f4 f94b 	bl	800166c <__aeabi_dmul>
 800d3d6:	9b08      	ldr	r3, [sp, #32]
 800d3d8:	0006      	movs	r6, r0
 800d3da:	000f      	movs	r7, r1
 800d3dc:	9314      	str	r3, [sp, #80]	; 0x50
 800d3de:	e7be      	b.n	800d35e <_dtoa_r+0x516>
 800d3e0:	0020      	movs	r0, r4
 800d3e2:	0029      	movs	r1, r5
 800d3e4:	f7f4 f942 	bl	800166c <__aeabi_dmul>
 800d3e8:	9a06      	ldr	r2, [sp, #24]
 800d3ea:	9b06      	ldr	r3, [sp, #24]
 800d3ec:	4694      	mov	ip, r2
 800d3ee:	9308      	str	r3, [sp, #32]
 800d3f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d3f2:	9014      	str	r0, [sp, #80]	; 0x50
 800d3f4:	9115      	str	r1, [sp, #84]	; 0x54
 800d3f6:	4463      	add	r3, ip
 800d3f8:	9319      	str	r3, [sp, #100]	; 0x64
 800d3fa:	0030      	movs	r0, r6
 800d3fc:	0039      	movs	r1, r7
 800d3fe:	f7f4 ff97 	bl	8002330 <__aeabi_d2iz>
 800d402:	9018      	str	r0, [sp, #96]	; 0x60
 800d404:	f7f4 ffca 	bl	800239c <__aeabi_i2d>
 800d408:	0002      	movs	r2, r0
 800d40a:	000b      	movs	r3, r1
 800d40c:	0030      	movs	r0, r6
 800d40e:	0039      	movs	r1, r7
 800d410:	f7f4 fbee 	bl	8001bf0 <__aeabi_dsub>
 800d414:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800d416:	9b08      	ldr	r3, [sp, #32]
 800d418:	3630      	adds	r6, #48	; 0x30
 800d41a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d41c:	701e      	strb	r6, [r3, #0]
 800d41e:	3301      	adds	r3, #1
 800d420:	0004      	movs	r4, r0
 800d422:	000d      	movs	r5, r1
 800d424:	9308      	str	r3, [sp, #32]
 800d426:	4293      	cmp	r3, r2
 800d428:	d12d      	bne.n	800d486 <_dtoa_r+0x63e>
 800d42a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d42c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d42e:	9a06      	ldr	r2, [sp, #24]
 800d430:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d432:	4694      	mov	ip, r2
 800d434:	4463      	add	r3, ip
 800d436:	2200      	movs	r2, #0
 800d438:	9308      	str	r3, [sp, #32]
 800d43a:	4b47      	ldr	r3, [pc, #284]	; (800d558 <_dtoa_r+0x710>)
 800d43c:	f7f3 f9bc 	bl	80007b8 <__aeabi_dadd>
 800d440:	0002      	movs	r2, r0
 800d442:	000b      	movs	r3, r1
 800d444:	0020      	movs	r0, r4
 800d446:	0029      	movs	r1, r5
 800d448:	f7f3 f818 	bl	800047c <__aeabi_dcmpgt>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d000      	beq.n	800d452 <_dtoa_r+0x60a>
 800d450:	e086      	b.n	800d560 <_dtoa_r+0x718>
 800d452:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d454:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d456:	2000      	movs	r0, #0
 800d458:	493f      	ldr	r1, [pc, #252]	; (800d558 <_dtoa_r+0x710>)
 800d45a:	f7f4 fbc9 	bl	8001bf0 <__aeabi_dsub>
 800d45e:	0002      	movs	r2, r0
 800d460:	000b      	movs	r3, r1
 800d462:	0020      	movs	r0, r4
 800d464:	0029      	movs	r1, r5
 800d466:	f7f2 fff5 	bl	8000454 <__aeabi_dcmplt>
 800d46a:	2800      	cmp	r0, #0
 800d46c:	d100      	bne.n	800d470 <_dtoa_r+0x628>
 800d46e:	e716      	b.n	800d29e <_dtoa_r+0x456>
 800d470:	9b08      	ldr	r3, [sp, #32]
 800d472:	001a      	movs	r2, r3
 800d474:	3a01      	subs	r2, #1
 800d476:	9208      	str	r2, [sp, #32]
 800d478:	7812      	ldrb	r2, [r2, #0]
 800d47a:	2a30      	cmp	r2, #48	; 0x30
 800d47c:	d0f8      	beq.n	800d470 <_dtoa_r+0x628>
 800d47e:	9308      	str	r3, [sp, #32]
 800d480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d482:	9303      	str	r3, [sp, #12]
 800d484:	e046      	b.n	800d514 <_dtoa_r+0x6cc>
 800d486:	2200      	movs	r2, #0
 800d488:	4b2e      	ldr	r3, [pc, #184]	; (800d544 <_dtoa_r+0x6fc>)
 800d48a:	f7f4 f8ef 	bl	800166c <__aeabi_dmul>
 800d48e:	0006      	movs	r6, r0
 800d490:	000f      	movs	r7, r1
 800d492:	e7b2      	b.n	800d3fa <_dtoa_r+0x5b2>
 800d494:	9b06      	ldr	r3, [sp, #24]
 800d496:	9a06      	ldr	r2, [sp, #24]
 800d498:	930a      	str	r3, [sp, #40]	; 0x28
 800d49a:	9b07      	ldr	r3, [sp, #28]
 800d49c:	9c08      	ldr	r4, [sp, #32]
 800d49e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d4a0:	3b01      	subs	r3, #1
 800d4a2:	189b      	adds	r3, r3, r2
 800d4a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4a6:	0032      	movs	r2, r6
 800d4a8:	003b      	movs	r3, r7
 800d4aa:	0020      	movs	r0, r4
 800d4ac:	0029      	movs	r1, r5
 800d4ae:	f7f3 fce3 	bl	8000e78 <__aeabi_ddiv>
 800d4b2:	f7f4 ff3d 	bl	8002330 <__aeabi_d2iz>
 800d4b6:	9007      	str	r0, [sp, #28]
 800d4b8:	f7f4 ff70 	bl	800239c <__aeabi_i2d>
 800d4bc:	0032      	movs	r2, r6
 800d4be:	003b      	movs	r3, r7
 800d4c0:	f7f4 f8d4 	bl	800166c <__aeabi_dmul>
 800d4c4:	0002      	movs	r2, r0
 800d4c6:	000b      	movs	r3, r1
 800d4c8:	0020      	movs	r0, r4
 800d4ca:	0029      	movs	r1, r5
 800d4cc:	f7f4 fb90 	bl	8001bf0 <__aeabi_dsub>
 800d4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4d2:	001a      	movs	r2, r3
 800d4d4:	3201      	adds	r2, #1
 800d4d6:	920a      	str	r2, [sp, #40]	; 0x28
 800d4d8:	9208      	str	r2, [sp, #32]
 800d4da:	9a07      	ldr	r2, [sp, #28]
 800d4dc:	3230      	adds	r2, #48	; 0x30
 800d4de:	701a      	strb	r2, [r3, #0]
 800d4e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d14f      	bne.n	800d586 <_dtoa_r+0x73e>
 800d4e6:	0002      	movs	r2, r0
 800d4e8:	000b      	movs	r3, r1
 800d4ea:	f7f3 f965 	bl	80007b8 <__aeabi_dadd>
 800d4ee:	0032      	movs	r2, r6
 800d4f0:	003b      	movs	r3, r7
 800d4f2:	0004      	movs	r4, r0
 800d4f4:	000d      	movs	r5, r1
 800d4f6:	f7f2 ffc1 	bl	800047c <__aeabi_dcmpgt>
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	d12e      	bne.n	800d55c <_dtoa_r+0x714>
 800d4fe:	0032      	movs	r2, r6
 800d500:	003b      	movs	r3, r7
 800d502:	0020      	movs	r0, r4
 800d504:	0029      	movs	r1, r5
 800d506:	f7f2 ff9f 	bl	8000448 <__aeabi_dcmpeq>
 800d50a:	2800      	cmp	r0, #0
 800d50c:	d002      	beq.n	800d514 <_dtoa_r+0x6cc>
 800d50e:	9b07      	ldr	r3, [sp, #28]
 800d510:	07de      	lsls	r6, r3, #31
 800d512:	d423      	bmi.n	800d55c <_dtoa_r+0x714>
 800d514:	9905      	ldr	r1, [sp, #20]
 800d516:	9804      	ldr	r0, [sp, #16]
 800d518:	f7fc f8fe 	bl	8009718 <_Bfree>
 800d51c:	2300      	movs	r3, #0
 800d51e:	9a08      	ldr	r2, [sp, #32]
 800d520:	7013      	strb	r3, [r2, #0]
 800d522:	9b03      	ldr	r3, [sp, #12]
 800d524:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d526:	3301      	adds	r3, #1
 800d528:	6013      	str	r3, [r2, #0]
 800d52a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d100      	bne.n	800d532 <_dtoa_r+0x6ea>
 800d530:	e4bd      	b.n	800ceae <_dtoa_r+0x66>
 800d532:	9a08      	ldr	r2, [sp, #32]
 800d534:	601a      	str	r2, [r3, #0]
 800d536:	e4ba      	b.n	800ceae <_dtoa_r+0x66>
 800d538:	0800fad8 	.word	0x0800fad8
 800d53c:	0800fab0 	.word	0x0800fab0
 800d540:	3ff00000 	.word	0x3ff00000
 800d544:	40240000 	.word	0x40240000
 800d548:	401c0000 	.word	0x401c0000
 800d54c:	fcc00000 	.word	0xfcc00000
 800d550:	40140000 	.word	0x40140000
 800d554:	7cc00000 	.word	0x7cc00000
 800d558:	3fe00000 	.word	0x3fe00000
 800d55c:	9b03      	ldr	r3, [sp, #12]
 800d55e:	930e      	str	r3, [sp, #56]	; 0x38
 800d560:	9b08      	ldr	r3, [sp, #32]
 800d562:	9308      	str	r3, [sp, #32]
 800d564:	3b01      	subs	r3, #1
 800d566:	781a      	ldrb	r2, [r3, #0]
 800d568:	2a39      	cmp	r2, #57	; 0x39
 800d56a:	d108      	bne.n	800d57e <_dtoa_r+0x736>
 800d56c:	9a06      	ldr	r2, [sp, #24]
 800d56e:	429a      	cmp	r2, r3
 800d570:	d1f7      	bne.n	800d562 <_dtoa_r+0x71a>
 800d572:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d574:	9906      	ldr	r1, [sp, #24]
 800d576:	3201      	adds	r2, #1
 800d578:	920e      	str	r2, [sp, #56]	; 0x38
 800d57a:	2230      	movs	r2, #48	; 0x30
 800d57c:	700a      	strb	r2, [r1, #0]
 800d57e:	781a      	ldrb	r2, [r3, #0]
 800d580:	3201      	adds	r2, #1
 800d582:	701a      	strb	r2, [r3, #0]
 800d584:	e77c      	b.n	800d480 <_dtoa_r+0x638>
 800d586:	2200      	movs	r2, #0
 800d588:	4ba9      	ldr	r3, [pc, #676]	; (800d830 <_dtoa_r+0x9e8>)
 800d58a:	f7f4 f86f 	bl	800166c <__aeabi_dmul>
 800d58e:	2200      	movs	r2, #0
 800d590:	2300      	movs	r3, #0
 800d592:	0004      	movs	r4, r0
 800d594:	000d      	movs	r5, r1
 800d596:	f7f2 ff57 	bl	8000448 <__aeabi_dcmpeq>
 800d59a:	2800      	cmp	r0, #0
 800d59c:	d100      	bne.n	800d5a0 <_dtoa_r+0x758>
 800d59e:	e782      	b.n	800d4a6 <_dtoa_r+0x65e>
 800d5a0:	e7b8      	b.n	800d514 <_dtoa_r+0x6cc>
 800d5a2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800d5a4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d5a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d5a8:	2f00      	cmp	r7, #0
 800d5aa:	d012      	beq.n	800d5d2 <_dtoa_r+0x78a>
 800d5ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d5ae:	2a01      	cmp	r2, #1
 800d5b0:	dc6e      	bgt.n	800d690 <_dtoa_r+0x848>
 800d5b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d5b4:	2a00      	cmp	r2, #0
 800d5b6:	d065      	beq.n	800d684 <_dtoa_r+0x83c>
 800d5b8:	4a9e      	ldr	r2, [pc, #632]	; (800d834 <_dtoa_r+0x9ec>)
 800d5ba:	189b      	adds	r3, r3, r2
 800d5bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5be:	2101      	movs	r1, #1
 800d5c0:	18d2      	adds	r2, r2, r3
 800d5c2:	920a      	str	r2, [sp, #40]	; 0x28
 800d5c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5c6:	9804      	ldr	r0, [sp, #16]
 800d5c8:	18d3      	adds	r3, r2, r3
 800d5ca:	930c      	str	r3, [sp, #48]	; 0x30
 800d5cc:	f7fc f986 	bl	80098dc <__i2b>
 800d5d0:	0007      	movs	r7, r0
 800d5d2:	2c00      	cmp	r4, #0
 800d5d4:	d00e      	beq.n	800d5f4 <_dtoa_r+0x7ac>
 800d5d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	dd0b      	ble.n	800d5f4 <_dtoa_r+0x7ac>
 800d5dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5de:	0023      	movs	r3, r4
 800d5e0:	4294      	cmp	r4, r2
 800d5e2:	dd00      	ble.n	800d5e6 <_dtoa_r+0x79e>
 800d5e4:	0013      	movs	r3, r2
 800d5e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5e8:	1ae4      	subs	r4, r4, r3
 800d5ea:	1ad2      	subs	r2, r2, r3
 800d5ec:	920a      	str	r2, [sp, #40]	; 0x28
 800d5ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5f0:	1ad3      	subs	r3, r2, r3
 800d5f2:	930c      	str	r3, [sp, #48]	; 0x30
 800d5f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d01e      	beq.n	800d638 <_dtoa_r+0x7f0>
 800d5fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d05c      	beq.n	800d6ba <_dtoa_r+0x872>
 800d600:	2d00      	cmp	r5, #0
 800d602:	dd10      	ble.n	800d626 <_dtoa_r+0x7de>
 800d604:	0039      	movs	r1, r7
 800d606:	002a      	movs	r2, r5
 800d608:	9804      	ldr	r0, [sp, #16]
 800d60a:	f7fc fa2f 	bl	8009a6c <__pow5mult>
 800d60e:	9a05      	ldr	r2, [sp, #20]
 800d610:	0001      	movs	r1, r0
 800d612:	0007      	movs	r7, r0
 800d614:	9804      	ldr	r0, [sp, #16]
 800d616:	f7fc f979 	bl	800990c <__multiply>
 800d61a:	0006      	movs	r6, r0
 800d61c:	9905      	ldr	r1, [sp, #20]
 800d61e:	9804      	ldr	r0, [sp, #16]
 800d620:	f7fc f87a 	bl	8009718 <_Bfree>
 800d624:	9605      	str	r6, [sp, #20]
 800d626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d628:	1b5a      	subs	r2, r3, r5
 800d62a:	42ab      	cmp	r3, r5
 800d62c:	d004      	beq.n	800d638 <_dtoa_r+0x7f0>
 800d62e:	9905      	ldr	r1, [sp, #20]
 800d630:	9804      	ldr	r0, [sp, #16]
 800d632:	f7fc fa1b 	bl	8009a6c <__pow5mult>
 800d636:	9005      	str	r0, [sp, #20]
 800d638:	2101      	movs	r1, #1
 800d63a:	9804      	ldr	r0, [sp, #16]
 800d63c:	f7fc f94e 	bl	80098dc <__i2b>
 800d640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d642:	0006      	movs	r6, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	dd3a      	ble.n	800d6be <_dtoa_r+0x876>
 800d648:	001a      	movs	r2, r3
 800d64a:	0001      	movs	r1, r0
 800d64c:	9804      	ldr	r0, [sp, #16]
 800d64e:	f7fc fa0d 	bl	8009a6c <__pow5mult>
 800d652:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d654:	0006      	movs	r6, r0
 800d656:	2500      	movs	r5, #0
 800d658:	2b01      	cmp	r3, #1
 800d65a:	dc38      	bgt.n	800d6ce <_dtoa_r+0x886>
 800d65c:	2500      	movs	r5, #0
 800d65e:	9b08      	ldr	r3, [sp, #32]
 800d660:	42ab      	cmp	r3, r5
 800d662:	d130      	bne.n	800d6c6 <_dtoa_r+0x87e>
 800d664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d666:	031b      	lsls	r3, r3, #12
 800d668:	42ab      	cmp	r3, r5
 800d66a:	d12c      	bne.n	800d6c6 <_dtoa_r+0x87e>
 800d66c:	4b72      	ldr	r3, [pc, #456]	; (800d838 <_dtoa_r+0x9f0>)
 800d66e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d670:	4213      	tst	r3, r2
 800d672:	d028      	beq.n	800d6c6 <_dtoa_r+0x87e>
 800d674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d676:	3501      	adds	r5, #1
 800d678:	3301      	adds	r3, #1
 800d67a:	930a      	str	r3, [sp, #40]	; 0x28
 800d67c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d67e:	3301      	adds	r3, #1
 800d680:	930c      	str	r3, [sp, #48]	; 0x30
 800d682:	e020      	b.n	800d6c6 <_dtoa_r+0x87e>
 800d684:	2336      	movs	r3, #54	; 0x36
 800d686:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d688:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d68a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d68c:	1a9b      	subs	r3, r3, r2
 800d68e:	e795      	b.n	800d5bc <_dtoa_r+0x774>
 800d690:	9b07      	ldr	r3, [sp, #28]
 800d692:	1e5d      	subs	r5, r3, #1
 800d694:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d696:	42ab      	cmp	r3, r5
 800d698:	db07      	blt.n	800d6aa <_dtoa_r+0x862>
 800d69a:	1b5d      	subs	r5, r3, r5
 800d69c:	9b07      	ldr	r3, [sp, #28]
 800d69e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	da8b      	bge.n	800d5bc <_dtoa_r+0x774>
 800d6a4:	1ae4      	subs	r4, r4, r3
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	e788      	b.n	800d5bc <_dtoa_r+0x774>
 800d6aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d6ae:	1aeb      	subs	r3, r5, r3
 800d6b0:	18d3      	adds	r3, r2, r3
 800d6b2:	950d      	str	r5, [sp, #52]	; 0x34
 800d6b4:	9313      	str	r3, [sp, #76]	; 0x4c
 800d6b6:	2500      	movs	r5, #0
 800d6b8:	e7f0      	b.n	800d69c <_dtoa_r+0x854>
 800d6ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6bc:	e7b7      	b.n	800d62e <_dtoa_r+0x7e6>
 800d6be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d6c0:	2500      	movs	r5, #0
 800d6c2:	2b01      	cmp	r3, #1
 800d6c4:	ddca      	ble.n	800d65c <_dtoa_r+0x814>
 800d6c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d6c8:	2001      	movs	r0, #1
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d008      	beq.n	800d6e0 <_dtoa_r+0x898>
 800d6ce:	6933      	ldr	r3, [r6, #16]
 800d6d0:	3303      	adds	r3, #3
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	18f3      	adds	r3, r6, r3
 800d6d6:	6858      	ldr	r0, [r3, #4]
 800d6d8:	f7fc f8b8 	bl	800984c <__hi0bits>
 800d6dc:	2320      	movs	r3, #32
 800d6de:	1a18      	subs	r0, r3, r0
 800d6e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6e2:	1818      	adds	r0, r3, r0
 800d6e4:	0002      	movs	r2, r0
 800d6e6:	231f      	movs	r3, #31
 800d6e8:	401a      	ands	r2, r3
 800d6ea:	4218      	tst	r0, r3
 800d6ec:	d047      	beq.n	800d77e <_dtoa_r+0x936>
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	1a9b      	subs	r3, r3, r2
 800d6f2:	2b04      	cmp	r3, #4
 800d6f4:	dd3f      	ble.n	800d776 <_dtoa_r+0x92e>
 800d6f6:	231c      	movs	r3, #28
 800d6f8:	1a9b      	subs	r3, r3, r2
 800d6fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6fc:	18e4      	adds	r4, r4, r3
 800d6fe:	18d2      	adds	r2, r2, r3
 800d700:	920a      	str	r2, [sp, #40]	; 0x28
 800d702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d704:	18d3      	adds	r3, r2, r3
 800d706:	930c      	str	r3, [sp, #48]	; 0x30
 800d708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	dd05      	ble.n	800d71a <_dtoa_r+0x8d2>
 800d70e:	001a      	movs	r2, r3
 800d710:	9905      	ldr	r1, [sp, #20]
 800d712:	9804      	ldr	r0, [sp, #16]
 800d714:	f7fc f9ec 	bl	8009af0 <__lshift>
 800d718:	9005      	str	r0, [sp, #20]
 800d71a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	dd05      	ble.n	800d72c <_dtoa_r+0x8e4>
 800d720:	0031      	movs	r1, r6
 800d722:	001a      	movs	r2, r3
 800d724:	9804      	ldr	r0, [sp, #16]
 800d726:	f7fc f9e3 	bl	8009af0 <__lshift>
 800d72a:	0006      	movs	r6, r0
 800d72c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d027      	beq.n	800d782 <_dtoa_r+0x93a>
 800d732:	0031      	movs	r1, r6
 800d734:	9805      	ldr	r0, [sp, #20]
 800d736:	f7fc fa49 	bl	8009bcc <__mcmp>
 800d73a:	2800      	cmp	r0, #0
 800d73c:	da21      	bge.n	800d782 <_dtoa_r+0x93a>
 800d73e:	9b03      	ldr	r3, [sp, #12]
 800d740:	220a      	movs	r2, #10
 800d742:	3b01      	subs	r3, #1
 800d744:	9303      	str	r3, [sp, #12]
 800d746:	9905      	ldr	r1, [sp, #20]
 800d748:	2300      	movs	r3, #0
 800d74a:	9804      	ldr	r0, [sp, #16]
 800d74c:	f7fb ffee 	bl	800972c <__multadd>
 800d750:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d752:	9005      	str	r0, [sp, #20]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d100      	bne.n	800d75a <_dtoa_r+0x912>
 800d758:	e15d      	b.n	800da16 <_dtoa_r+0xbce>
 800d75a:	2300      	movs	r3, #0
 800d75c:	0039      	movs	r1, r7
 800d75e:	220a      	movs	r2, #10
 800d760:	9804      	ldr	r0, [sp, #16]
 800d762:	f7fb ffe3 	bl	800972c <__multadd>
 800d766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d768:	0007      	movs	r7, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	dc49      	bgt.n	800d802 <_dtoa_r+0x9ba>
 800d76e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d770:	2b02      	cmp	r3, #2
 800d772:	dc0e      	bgt.n	800d792 <_dtoa_r+0x94a>
 800d774:	e045      	b.n	800d802 <_dtoa_r+0x9ba>
 800d776:	2b04      	cmp	r3, #4
 800d778:	d0c6      	beq.n	800d708 <_dtoa_r+0x8c0>
 800d77a:	331c      	adds	r3, #28
 800d77c:	e7bd      	b.n	800d6fa <_dtoa_r+0x8b2>
 800d77e:	0013      	movs	r3, r2
 800d780:	e7fb      	b.n	800d77a <_dtoa_r+0x932>
 800d782:	9b07      	ldr	r3, [sp, #28]
 800d784:	2b00      	cmp	r3, #0
 800d786:	dc36      	bgt.n	800d7f6 <_dtoa_r+0x9ae>
 800d788:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d78a:	2b02      	cmp	r3, #2
 800d78c:	dd33      	ble.n	800d7f6 <_dtoa_r+0x9ae>
 800d78e:	9b07      	ldr	r3, [sp, #28]
 800d790:	930b      	str	r3, [sp, #44]	; 0x2c
 800d792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d794:	2b00      	cmp	r3, #0
 800d796:	d10c      	bne.n	800d7b2 <_dtoa_r+0x96a>
 800d798:	0031      	movs	r1, r6
 800d79a:	2205      	movs	r2, #5
 800d79c:	9804      	ldr	r0, [sp, #16]
 800d79e:	f7fb ffc5 	bl	800972c <__multadd>
 800d7a2:	0006      	movs	r6, r0
 800d7a4:	0001      	movs	r1, r0
 800d7a6:	9805      	ldr	r0, [sp, #20]
 800d7a8:	f7fc fa10 	bl	8009bcc <__mcmp>
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	dd00      	ble.n	800d7b2 <_dtoa_r+0x96a>
 800d7b0:	e59f      	b.n	800d2f2 <_dtoa_r+0x4aa>
 800d7b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d7b4:	43db      	mvns	r3, r3
 800d7b6:	9303      	str	r3, [sp, #12]
 800d7b8:	9b06      	ldr	r3, [sp, #24]
 800d7ba:	9308      	str	r3, [sp, #32]
 800d7bc:	2500      	movs	r5, #0
 800d7be:	0031      	movs	r1, r6
 800d7c0:	9804      	ldr	r0, [sp, #16]
 800d7c2:	f7fb ffa9 	bl	8009718 <_Bfree>
 800d7c6:	2f00      	cmp	r7, #0
 800d7c8:	d100      	bne.n	800d7cc <_dtoa_r+0x984>
 800d7ca:	e6a3      	b.n	800d514 <_dtoa_r+0x6cc>
 800d7cc:	2d00      	cmp	r5, #0
 800d7ce:	d005      	beq.n	800d7dc <_dtoa_r+0x994>
 800d7d0:	42bd      	cmp	r5, r7
 800d7d2:	d003      	beq.n	800d7dc <_dtoa_r+0x994>
 800d7d4:	0029      	movs	r1, r5
 800d7d6:	9804      	ldr	r0, [sp, #16]
 800d7d8:	f7fb ff9e 	bl	8009718 <_Bfree>
 800d7dc:	0039      	movs	r1, r7
 800d7de:	9804      	ldr	r0, [sp, #16]
 800d7e0:	f7fb ff9a 	bl	8009718 <_Bfree>
 800d7e4:	e696      	b.n	800d514 <_dtoa_r+0x6cc>
 800d7e6:	2600      	movs	r6, #0
 800d7e8:	0037      	movs	r7, r6
 800d7ea:	e7e2      	b.n	800d7b2 <_dtoa_r+0x96a>
 800d7ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7ee:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d7f0:	9303      	str	r3, [sp, #12]
 800d7f2:	0037      	movs	r7, r6
 800d7f4:	e57d      	b.n	800d2f2 <_dtoa_r+0x4aa>
 800d7f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d100      	bne.n	800d7fe <_dtoa_r+0x9b6>
 800d7fc:	e0c3      	b.n	800d986 <_dtoa_r+0xb3e>
 800d7fe:	9b07      	ldr	r3, [sp, #28]
 800d800:	930b      	str	r3, [sp, #44]	; 0x2c
 800d802:	2c00      	cmp	r4, #0
 800d804:	dd05      	ble.n	800d812 <_dtoa_r+0x9ca>
 800d806:	0039      	movs	r1, r7
 800d808:	0022      	movs	r2, r4
 800d80a:	9804      	ldr	r0, [sp, #16]
 800d80c:	f7fc f970 	bl	8009af0 <__lshift>
 800d810:	0007      	movs	r7, r0
 800d812:	0038      	movs	r0, r7
 800d814:	2d00      	cmp	r5, #0
 800d816:	d024      	beq.n	800d862 <_dtoa_r+0xa1a>
 800d818:	6879      	ldr	r1, [r7, #4]
 800d81a:	9804      	ldr	r0, [sp, #16]
 800d81c:	f7fb ff54 	bl	80096c8 <_Balloc>
 800d820:	1e04      	subs	r4, r0, #0
 800d822:	d111      	bne.n	800d848 <_dtoa_r+0xa00>
 800d824:	0022      	movs	r2, r4
 800d826:	4b05      	ldr	r3, [pc, #20]	; (800d83c <_dtoa_r+0x9f4>)
 800d828:	4805      	ldr	r0, [pc, #20]	; (800d840 <_dtoa_r+0x9f8>)
 800d82a:	4906      	ldr	r1, [pc, #24]	; (800d844 <_dtoa_r+0x9fc>)
 800d82c:	e43c      	b.n	800d0a8 <_dtoa_r+0x260>
 800d82e:	46c0      	nop			; (mov r8, r8)
 800d830:	40240000 	.word	0x40240000
 800d834:	00000433 	.word	0x00000433
 800d838:	7ff00000 	.word	0x7ff00000
 800d83c:	0800f9e1 	.word	0x0800f9e1
 800d840:	0800fc71 	.word	0x0800fc71
 800d844:	000002ef 	.word	0x000002ef
 800d848:	0039      	movs	r1, r7
 800d84a:	693a      	ldr	r2, [r7, #16]
 800d84c:	310c      	adds	r1, #12
 800d84e:	3202      	adds	r2, #2
 800d850:	0092      	lsls	r2, r2, #2
 800d852:	300c      	adds	r0, #12
 800d854:	f7fb fa9d 	bl	8008d92 <memcpy>
 800d858:	2201      	movs	r2, #1
 800d85a:	0021      	movs	r1, r4
 800d85c:	9804      	ldr	r0, [sp, #16]
 800d85e:	f7fc f947 	bl	8009af0 <__lshift>
 800d862:	9b06      	ldr	r3, [sp, #24]
 800d864:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d866:	9307      	str	r3, [sp, #28]
 800d868:	3b01      	subs	r3, #1
 800d86a:	189b      	adds	r3, r3, r2
 800d86c:	2201      	movs	r2, #1
 800d86e:	003d      	movs	r5, r7
 800d870:	0007      	movs	r7, r0
 800d872:	930e      	str	r3, [sp, #56]	; 0x38
 800d874:	9b08      	ldr	r3, [sp, #32]
 800d876:	4013      	ands	r3, r2
 800d878:	930d      	str	r3, [sp, #52]	; 0x34
 800d87a:	0031      	movs	r1, r6
 800d87c:	9805      	ldr	r0, [sp, #20]
 800d87e:	f7ff fa53 	bl	800cd28 <quorem>
 800d882:	0029      	movs	r1, r5
 800d884:	0004      	movs	r4, r0
 800d886:	900b      	str	r0, [sp, #44]	; 0x2c
 800d888:	9805      	ldr	r0, [sp, #20]
 800d88a:	f7fc f99f 	bl	8009bcc <__mcmp>
 800d88e:	003a      	movs	r2, r7
 800d890:	900c      	str	r0, [sp, #48]	; 0x30
 800d892:	0031      	movs	r1, r6
 800d894:	9804      	ldr	r0, [sp, #16]
 800d896:	f7fc f9b5 	bl	8009c04 <__mdiff>
 800d89a:	2201      	movs	r2, #1
 800d89c:	68c3      	ldr	r3, [r0, #12]
 800d89e:	3430      	adds	r4, #48	; 0x30
 800d8a0:	9008      	str	r0, [sp, #32]
 800d8a2:	920a      	str	r2, [sp, #40]	; 0x28
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d104      	bne.n	800d8b2 <_dtoa_r+0xa6a>
 800d8a8:	0001      	movs	r1, r0
 800d8aa:	9805      	ldr	r0, [sp, #20]
 800d8ac:	f7fc f98e 	bl	8009bcc <__mcmp>
 800d8b0:	900a      	str	r0, [sp, #40]	; 0x28
 800d8b2:	9908      	ldr	r1, [sp, #32]
 800d8b4:	9804      	ldr	r0, [sp, #16]
 800d8b6:	f7fb ff2f 	bl	8009718 <_Bfree>
 800d8ba:	9b07      	ldr	r3, [sp, #28]
 800d8bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8be:	3301      	adds	r3, #1
 800d8c0:	9308      	str	r3, [sp, #32]
 800d8c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	d109      	bne.n	800d8e0 <_dtoa_r+0xa98>
 800d8cc:	2c39      	cmp	r4, #57	; 0x39
 800d8ce:	d022      	beq.n	800d916 <_dtoa_r+0xace>
 800d8d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	dd01      	ble.n	800d8da <_dtoa_r+0xa92>
 800d8d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d8d8:	3431      	adds	r4, #49	; 0x31
 800d8da:	9b07      	ldr	r3, [sp, #28]
 800d8dc:	701c      	strb	r4, [r3, #0]
 800d8de:	e76e      	b.n	800d7be <_dtoa_r+0x976>
 800d8e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	db04      	blt.n	800d8f0 <_dtoa_r+0xaa8>
 800d8e6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d8ec:	4313      	orrs	r3, r2
 800d8ee:	d11e      	bne.n	800d92e <_dtoa_r+0xae6>
 800d8f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	ddf1      	ble.n	800d8da <_dtoa_r+0xa92>
 800d8f6:	9905      	ldr	r1, [sp, #20]
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	9804      	ldr	r0, [sp, #16]
 800d8fc:	f7fc f8f8 	bl	8009af0 <__lshift>
 800d900:	0031      	movs	r1, r6
 800d902:	9005      	str	r0, [sp, #20]
 800d904:	f7fc f962 	bl	8009bcc <__mcmp>
 800d908:	2800      	cmp	r0, #0
 800d90a:	dc02      	bgt.n	800d912 <_dtoa_r+0xaca>
 800d90c:	d1e5      	bne.n	800d8da <_dtoa_r+0xa92>
 800d90e:	07e3      	lsls	r3, r4, #31
 800d910:	d5e3      	bpl.n	800d8da <_dtoa_r+0xa92>
 800d912:	2c39      	cmp	r4, #57	; 0x39
 800d914:	d1df      	bne.n	800d8d6 <_dtoa_r+0xa8e>
 800d916:	2339      	movs	r3, #57	; 0x39
 800d918:	9a07      	ldr	r2, [sp, #28]
 800d91a:	7013      	strb	r3, [r2, #0]
 800d91c:	9b08      	ldr	r3, [sp, #32]
 800d91e:	9308      	str	r3, [sp, #32]
 800d920:	3b01      	subs	r3, #1
 800d922:	781a      	ldrb	r2, [r3, #0]
 800d924:	2a39      	cmp	r2, #57	; 0x39
 800d926:	d063      	beq.n	800d9f0 <_dtoa_r+0xba8>
 800d928:	3201      	adds	r2, #1
 800d92a:	701a      	strb	r2, [r3, #0]
 800d92c:	e747      	b.n	800d7be <_dtoa_r+0x976>
 800d92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d930:	2b00      	cmp	r3, #0
 800d932:	dd03      	ble.n	800d93c <_dtoa_r+0xaf4>
 800d934:	2c39      	cmp	r4, #57	; 0x39
 800d936:	d0ee      	beq.n	800d916 <_dtoa_r+0xace>
 800d938:	3401      	adds	r4, #1
 800d93a:	e7ce      	b.n	800d8da <_dtoa_r+0xa92>
 800d93c:	9b07      	ldr	r3, [sp, #28]
 800d93e:	9a07      	ldr	r2, [sp, #28]
 800d940:	701c      	strb	r4, [r3, #0]
 800d942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d944:	4293      	cmp	r3, r2
 800d946:	d03e      	beq.n	800d9c6 <_dtoa_r+0xb7e>
 800d948:	2300      	movs	r3, #0
 800d94a:	220a      	movs	r2, #10
 800d94c:	9905      	ldr	r1, [sp, #20]
 800d94e:	9804      	ldr	r0, [sp, #16]
 800d950:	f7fb feec 	bl	800972c <__multadd>
 800d954:	2300      	movs	r3, #0
 800d956:	9005      	str	r0, [sp, #20]
 800d958:	220a      	movs	r2, #10
 800d95a:	0029      	movs	r1, r5
 800d95c:	9804      	ldr	r0, [sp, #16]
 800d95e:	42bd      	cmp	r5, r7
 800d960:	d106      	bne.n	800d970 <_dtoa_r+0xb28>
 800d962:	f7fb fee3 	bl	800972c <__multadd>
 800d966:	0005      	movs	r5, r0
 800d968:	0007      	movs	r7, r0
 800d96a:	9b08      	ldr	r3, [sp, #32]
 800d96c:	9307      	str	r3, [sp, #28]
 800d96e:	e784      	b.n	800d87a <_dtoa_r+0xa32>
 800d970:	f7fb fedc 	bl	800972c <__multadd>
 800d974:	0039      	movs	r1, r7
 800d976:	0005      	movs	r5, r0
 800d978:	2300      	movs	r3, #0
 800d97a:	220a      	movs	r2, #10
 800d97c:	9804      	ldr	r0, [sp, #16]
 800d97e:	f7fb fed5 	bl	800972c <__multadd>
 800d982:	0007      	movs	r7, r0
 800d984:	e7f1      	b.n	800d96a <_dtoa_r+0xb22>
 800d986:	9b07      	ldr	r3, [sp, #28]
 800d988:	930b      	str	r3, [sp, #44]	; 0x2c
 800d98a:	2500      	movs	r5, #0
 800d98c:	0031      	movs	r1, r6
 800d98e:	9805      	ldr	r0, [sp, #20]
 800d990:	f7ff f9ca 	bl	800cd28 <quorem>
 800d994:	9b06      	ldr	r3, [sp, #24]
 800d996:	3030      	adds	r0, #48	; 0x30
 800d998:	5558      	strb	r0, [r3, r5]
 800d99a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d99c:	3501      	adds	r5, #1
 800d99e:	0004      	movs	r4, r0
 800d9a0:	42ab      	cmp	r3, r5
 800d9a2:	dd07      	ble.n	800d9b4 <_dtoa_r+0xb6c>
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	220a      	movs	r2, #10
 800d9a8:	9905      	ldr	r1, [sp, #20]
 800d9aa:	9804      	ldr	r0, [sp, #16]
 800d9ac:	f7fb febe 	bl	800972c <__multadd>
 800d9b0:	9005      	str	r0, [sp, #20]
 800d9b2:	e7eb      	b.n	800d98c <_dtoa_r+0xb44>
 800d9b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	2a00      	cmp	r2, #0
 800d9ba:	dd00      	ble.n	800d9be <_dtoa_r+0xb76>
 800d9bc:	0013      	movs	r3, r2
 800d9be:	2500      	movs	r5, #0
 800d9c0:	9a06      	ldr	r2, [sp, #24]
 800d9c2:	18d3      	adds	r3, r2, r3
 800d9c4:	9308      	str	r3, [sp, #32]
 800d9c6:	9905      	ldr	r1, [sp, #20]
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	9804      	ldr	r0, [sp, #16]
 800d9cc:	f7fc f890 	bl	8009af0 <__lshift>
 800d9d0:	0031      	movs	r1, r6
 800d9d2:	9005      	str	r0, [sp, #20]
 800d9d4:	f7fc f8fa 	bl	8009bcc <__mcmp>
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	dc9f      	bgt.n	800d91c <_dtoa_r+0xad4>
 800d9dc:	d101      	bne.n	800d9e2 <_dtoa_r+0xb9a>
 800d9de:	07e4      	lsls	r4, r4, #31
 800d9e0:	d49c      	bmi.n	800d91c <_dtoa_r+0xad4>
 800d9e2:	9b08      	ldr	r3, [sp, #32]
 800d9e4:	9308      	str	r3, [sp, #32]
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	781a      	ldrb	r2, [r3, #0]
 800d9ea:	2a30      	cmp	r2, #48	; 0x30
 800d9ec:	d0fa      	beq.n	800d9e4 <_dtoa_r+0xb9c>
 800d9ee:	e6e6      	b.n	800d7be <_dtoa_r+0x976>
 800d9f0:	9a06      	ldr	r2, [sp, #24]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d193      	bne.n	800d91e <_dtoa_r+0xad6>
 800d9f6:	9b03      	ldr	r3, [sp, #12]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	9303      	str	r3, [sp, #12]
 800d9fc:	2331      	movs	r3, #49	; 0x31
 800d9fe:	7013      	strb	r3, [r2, #0]
 800da00:	e6dd      	b.n	800d7be <_dtoa_r+0x976>
 800da02:	4b09      	ldr	r3, [pc, #36]	; (800da28 <_dtoa_r+0xbe0>)
 800da04:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800da06:	9306      	str	r3, [sp, #24]
 800da08:	4b08      	ldr	r3, [pc, #32]	; (800da2c <_dtoa_r+0xbe4>)
 800da0a:	2a00      	cmp	r2, #0
 800da0c:	d001      	beq.n	800da12 <_dtoa_r+0xbca>
 800da0e:	f7ff fa4c 	bl	800ceaa <_dtoa_r+0x62>
 800da12:	f7ff fa4c 	bl	800ceae <_dtoa_r+0x66>
 800da16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da18:	2b00      	cmp	r3, #0
 800da1a:	dcb6      	bgt.n	800d98a <_dtoa_r+0xb42>
 800da1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800da1e:	2b02      	cmp	r3, #2
 800da20:	dd00      	ble.n	800da24 <_dtoa_r+0xbdc>
 800da22:	e6b6      	b.n	800d792 <_dtoa_r+0x94a>
 800da24:	e7b1      	b.n	800d98a <_dtoa_r+0xb42>
 800da26:	46c0      	nop			; (mov r8, r8)
 800da28:	0800fc64 	.word	0x0800fc64
 800da2c:	0800fc6c 	.word	0x0800fc6c

0800da30 <realloc>:
 800da30:	b510      	push	{r4, lr}
 800da32:	4b03      	ldr	r3, [pc, #12]	; (800da40 <realloc+0x10>)
 800da34:	000a      	movs	r2, r1
 800da36:	0001      	movs	r1, r0
 800da38:	6818      	ldr	r0, [r3, #0]
 800da3a:	f000 f803 	bl	800da44 <_realloc_r>
 800da3e:	bd10      	pop	{r4, pc}
 800da40:	200006c0 	.word	0x200006c0

0800da44 <_realloc_r>:
 800da44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da46:	b087      	sub	sp, #28
 800da48:	1e0c      	subs	r4, r1, #0
 800da4a:	9001      	str	r0, [sp, #4]
 800da4c:	9205      	str	r2, [sp, #20]
 800da4e:	d106      	bne.n	800da5e <_realloc_r+0x1a>
 800da50:	0011      	movs	r1, r2
 800da52:	f7f9 fe7b 	bl	800774c <_malloc_r>
 800da56:	0007      	movs	r7, r0
 800da58:	0038      	movs	r0, r7
 800da5a:	b007      	add	sp, #28
 800da5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da5e:	9801      	ldr	r0, [sp, #4]
 800da60:	f7fa f888 	bl	8007b74 <__malloc_lock>
 800da64:	0023      	movs	r3, r4
 800da66:	3b08      	subs	r3, #8
 800da68:	685f      	ldr	r7, [r3, #4]
 800da6a:	9304      	str	r3, [sp, #16]
 800da6c:	9b05      	ldr	r3, [sp, #20]
 800da6e:	330b      	adds	r3, #11
 800da70:	2b16      	cmp	r3, #22
 800da72:	d908      	bls.n	800da86 <_realloc_r+0x42>
 800da74:	2207      	movs	r2, #7
 800da76:	4393      	bics	r3, r2
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	d506      	bpl.n	800da8a <_realloc_r+0x46>
 800da7c:	230c      	movs	r3, #12
 800da7e:	9a01      	ldr	r2, [sp, #4]
 800da80:	2700      	movs	r7, #0
 800da82:	6013      	str	r3, [r2, #0]
 800da84:	e7e8      	b.n	800da58 <_realloc_r+0x14>
 800da86:	2310      	movs	r3, #16
 800da88:	9300      	str	r3, [sp, #0]
 800da8a:	9b00      	ldr	r3, [sp, #0]
 800da8c:	9a05      	ldr	r2, [sp, #20]
 800da8e:	4293      	cmp	r3, r2
 800da90:	d3f4      	bcc.n	800da7c <_realloc_r+0x38>
 800da92:	9b04      	ldr	r3, [sp, #16]
 800da94:	003a      	movs	r2, r7
 800da96:	9302      	str	r3, [sp, #8]
 800da98:	2303      	movs	r3, #3
 800da9a:	439a      	bics	r2, r3
 800da9c:	9b00      	ldr	r3, [sp, #0]
 800da9e:	9203      	str	r2, [sp, #12]
 800daa0:	4293      	cmp	r3, r2
 800daa2:	dc00      	bgt.n	800daa6 <_realloc_r+0x62>
 800daa4:	e169      	b.n	800dd7a <_realloc_r+0x336>
 800daa6:	9b04      	ldr	r3, [sp, #16]
 800daa8:	48b8      	ldr	r0, [pc, #736]	; (800dd8c <_realloc_r+0x348>)
 800daaa:	189b      	adds	r3, r3, r2
 800daac:	6882      	ldr	r2, [r0, #8]
 800daae:	4694      	mov	ip, r2
 800dab0:	685a      	ldr	r2, [r3, #4]
 800dab2:	459c      	cmp	ip, r3
 800dab4:	d006      	beq.n	800dac4 <_realloc_r+0x80>
 800dab6:	2501      	movs	r5, #1
 800dab8:	0011      	movs	r1, r2
 800daba:	43a9      	bics	r1, r5
 800dabc:	1859      	adds	r1, r3, r1
 800dabe:	6849      	ldr	r1, [r1, #4]
 800dac0:	4229      	tst	r1, r5
 800dac2:	d144      	bne.n	800db4e <_realloc_r+0x10a>
 800dac4:	2103      	movs	r1, #3
 800dac6:	438a      	bics	r2, r1
 800dac8:	9903      	ldr	r1, [sp, #12]
 800daca:	188e      	adds	r6, r1, r2
 800dacc:	9900      	ldr	r1, [sp, #0]
 800dace:	459c      	cmp	ip, r3
 800dad0:	d117      	bne.n	800db02 <_realloc_r+0xbe>
 800dad2:	3110      	adds	r1, #16
 800dad4:	42b1      	cmp	r1, r6
 800dad6:	dc3c      	bgt.n	800db52 <_realloc_r+0x10e>
 800dad8:	9a00      	ldr	r2, [sp, #0]
 800dada:	2101      	movs	r1, #1
 800dadc:	4694      	mov	ip, r2
 800dade:	1ab6      	subs	r6, r6, r2
 800dae0:	0022      	movs	r2, r4
 800dae2:	9b04      	ldr	r3, [sp, #16]
 800dae4:	430e      	orrs	r6, r1
 800dae6:	4463      	add	r3, ip
 800dae8:	6083      	str	r3, [r0, #8]
 800daea:	3a08      	subs	r2, #8
 800daec:	605e      	str	r6, [r3, #4]
 800daee:	6853      	ldr	r3, [r2, #4]
 800daf0:	9801      	ldr	r0, [sp, #4]
 800daf2:	400b      	ands	r3, r1
 800daf4:	4661      	mov	r1, ip
 800daf6:	430b      	orrs	r3, r1
 800daf8:	6053      	str	r3, [r2, #4]
 800dafa:	f7fa f843 	bl	8007b84 <__malloc_unlock>
 800dafe:	0027      	movs	r7, r4
 800db00:	e7aa      	b.n	800da58 <_realloc_r+0x14>
 800db02:	42b1      	cmp	r1, r6
 800db04:	dc25      	bgt.n	800db52 <_realloc_r+0x10e>
 800db06:	68da      	ldr	r2, [r3, #12]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	60da      	str	r2, [r3, #12]
 800db0c:	6093      	str	r3, [r2, #8]
 800db0e:	9b00      	ldr	r3, [sp, #0]
 800db10:	9a02      	ldr	r2, [sp, #8]
 800db12:	1af4      	subs	r4, r6, r3
 800db14:	9b02      	ldr	r3, [sp, #8]
 800db16:	1992      	adds	r2, r2, r6
 800db18:	6858      	ldr	r0, [r3, #4]
 800db1a:	2301      	movs	r3, #1
 800db1c:	4018      	ands	r0, r3
 800db1e:	2c0f      	cmp	r4, #15
 800db20:	d800      	bhi.n	800db24 <_realloc_r+0xe0>
 800db22:	e12c      	b.n	800dd7e <_realloc_r+0x33a>
 800db24:	9d00      	ldr	r5, [sp, #0]
 800db26:	9902      	ldr	r1, [sp, #8]
 800db28:	4328      	orrs	r0, r5
 800db2a:	1949      	adds	r1, r1, r5
 800db2c:	9d02      	ldr	r5, [sp, #8]
 800db2e:	431c      	orrs	r4, r3
 800db30:	6068      	str	r0, [r5, #4]
 800db32:	604c      	str	r4, [r1, #4]
 800db34:	6850      	ldr	r0, [r2, #4]
 800db36:	3108      	adds	r1, #8
 800db38:	4303      	orrs	r3, r0
 800db3a:	6053      	str	r3, [r2, #4]
 800db3c:	9801      	ldr	r0, [sp, #4]
 800db3e:	f7fb f9a3 	bl	8008e88 <_free_r>
 800db42:	9801      	ldr	r0, [sp, #4]
 800db44:	f7fa f81e 	bl	8007b84 <__malloc_unlock>
 800db48:	9f02      	ldr	r7, [sp, #8]
 800db4a:	3708      	adds	r7, #8
 800db4c:	e784      	b.n	800da58 <_realloc_r+0x14>
 800db4e:	2200      	movs	r2, #0
 800db50:	0013      	movs	r3, r2
 800db52:	07ff      	lsls	r7, r7, #31
 800db54:	d500      	bpl.n	800db58 <_realloc_r+0x114>
 800db56:	e0c6      	b.n	800dce6 <_realloc_r+0x2a2>
 800db58:	0021      	movs	r1, r4
 800db5a:	2003      	movs	r0, #3
 800db5c:	3908      	subs	r1, #8
 800db5e:	680d      	ldr	r5, [r1, #0]
 800db60:	9904      	ldr	r1, [sp, #16]
 800db62:	1b4d      	subs	r5, r1, r5
 800db64:	6869      	ldr	r1, [r5, #4]
 800db66:	4381      	bics	r1, r0
 800db68:	9803      	ldr	r0, [sp, #12]
 800db6a:	180f      	adds	r7, r1, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d100      	bne.n	800db72 <_realloc_r+0x12e>
 800db70:	e084      	b.n	800dc7c <_realloc_r+0x238>
 800db72:	19d6      	adds	r6, r2, r7
 800db74:	459c      	cmp	ip, r3
 800db76:	d148      	bne.n	800dc0a <_realloc_r+0x1c6>
 800db78:	9b00      	ldr	r3, [sp, #0]
 800db7a:	3310      	adds	r3, #16
 800db7c:	42b3      	cmp	r3, r6
 800db7e:	dc7d      	bgt.n	800dc7c <_realloc_r+0x238>
 800db80:	68aa      	ldr	r2, [r5, #8]
 800db82:	68eb      	ldr	r3, [r5, #12]
 800db84:	002f      	movs	r7, r5
 800db86:	60d3      	str	r3, [r2, #12]
 800db88:	609a      	str	r2, [r3, #8]
 800db8a:	0002      	movs	r2, r0
 800db8c:	3a04      	subs	r2, #4
 800db8e:	3708      	adds	r7, #8
 800db90:	2a24      	cmp	r2, #36	; 0x24
 800db92:	d835      	bhi.n	800dc00 <_realloc_r+0x1bc>
 800db94:	003b      	movs	r3, r7
 800db96:	2a13      	cmp	r2, #19
 800db98:	d908      	bls.n	800dbac <_realloc_r+0x168>
 800db9a:	6823      	ldr	r3, [r4, #0]
 800db9c:	60ab      	str	r3, [r5, #8]
 800db9e:	6863      	ldr	r3, [r4, #4]
 800dba0:	60eb      	str	r3, [r5, #12]
 800dba2:	2a1b      	cmp	r2, #27
 800dba4:	d81a      	bhi.n	800dbdc <_realloc_r+0x198>
 800dba6:	002b      	movs	r3, r5
 800dba8:	3408      	adds	r4, #8
 800dbaa:	3310      	adds	r3, #16
 800dbac:	6822      	ldr	r2, [r4, #0]
 800dbae:	601a      	str	r2, [r3, #0]
 800dbb0:	6862      	ldr	r2, [r4, #4]
 800dbb2:	605a      	str	r2, [r3, #4]
 800dbb4:	68a2      	ldr	r2, [r4, #8]
 800dbb6:	609a      	str	r2, [r3, #8]
 800dbb8:	9b00      	ldr	r3, [sp, #0]
 800dbba:	4a74      	ldr	r2, [pc, #464]	; (800dd8c <_realloc_r+0x348>)
 800dbbc:	18eb      	adds	r3, r5, r3
 800dbbe:	6093      	str	r3, [r2, #8]
 800dbc0:	9a00      	ldr	r2, [sp, #0]
 800dbc2:	1ab6      	subs	r6, r6, r2
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	4316      	orrs	r6, r2
 800dbc8:	605e      	str	r6, [r3, #4]
 800dbca:	686b      	ldr	r3, [r5, #4]
 800dbcc:	4013      	ands	r3, r2
 800dbce:	9a00      	ldr	r2, [sp, #0]
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	606b      	str	r3, [r5, #4]
 800dbd4:	9801      	ldr	r0, [sp, #4]
 800dbd6:	f7f9 ffd5 	bl	8007b84 <__malloc_unlock>
 800dbda:	e73d      	b.n	800da58 <_realloc_r+0x14>
 800dbdc:	68a3      	ldr	r3, [r4, #8]
 800dbde:	612b      	str	r3, [r5, #16]
 800dbe0:	68e3      	ldr	r3, [r4, #12]
 800dbe2:	616b      	str	r3, [r5, #20]
 800dbe4:	2a24      	cmp	r2, #36	; 0x24
 800dbe6:	d003      	beq.n	800dbf0 <_realloc_r+0x1ac>
 800dbe8:	002b      	movs	r3, r5
 800dbea:	3410      	adds	r4, #16
 800dbec:	3318      	adds	r3, #24
 800dbee:	e7dd      	b.n	800dbac <_realloc_r+0x168>
 800dbf0:	6923      	ldr	r3, [r4, #16]
 800dbf2:	61ab      	str	r3, [r5, #24]
 800dbf4:	002b      	movs	r3, r5
 800dbf6:	6962      	ldr	r2, [r4, #20]
 800dbf8:	3320      	adds	r3, #32
 800dbfa:	61ea      	str	r2, [r5, #28]
 800dbfc:	3418      	adds	r4, #24
 800dbfe:	e7d5      	b.n	800dbac <_realloc_r+0x168>
 800dc00:	0021      	movs	r1, r4
 800dc02:	0038      	movs	r0, r7
 800dc04:	f001 fbb5 	bl	800f372 <memmove>
 800dc08:	e7d6      	b.n	800dbb8 <_realloc_r+0x174>
 800dc0a:	9a00      	ldr	r2, [sp, #0]
 800dc0c:	42b2      	cmp	r2, r6
 800dc0e:	dc35      	bgt.n	800dc7c <_realloc_r+0x238>
 800dc10:	0028      	movs	r0, r5
 800dc12:	68da      	ldr	r2, [r3, #12]
 800dc14:	689b      	ldr	r3, [r3, #8]
 800dc16:	3008      	adds	r0, #8
 800dc18:	60da      	str	r2, [r3, #12]
 800dc1a:	6093      	str	r3, [r2, #8]
 800dc1c:	68aa      	ldr	r2, [r5, #8]
 800dc1e:	68eb      	ldr	r3, [r5, #12]
 800dc20:	60d3      	str	r3, [r2, #12]
 800dc22:	609a      	str	r2, [r3, #8]
 800dc24:	9a03      	ldr	r2, [sp, #12]
 800dc26:	3a04      	subs	r2, #4
 800dc28:	2a24      	cmp	r2, #36	; 0x24
 800dc2a:	d823      	bhi.n	800dc74 <_realloc_r+0x230>
 800dc2c:	2a13      	cmp	r2, #19
 800dc2e:	d907      	bls.n	800dc40 <_realloc_r+0x1fc>
 800dc30:	6823      	ldr	r3, [r4, #0]
 800dc32:	60ab      	str	r3, [r5, #8]
 800dc34:	6863      	ldr	r3, [r4, #4]
 800dc36:	60eb      	str	r3, [r5, #12]
 800dc38:	2a1b      	cmp	r2, #27
 800dc3a:	d809      	bhi.n	800dc50 <_realloc_r+0x20c>
 800dc3c:	3408      	adds	r4, #8
 800dc3e:	3008      	adds	r0, #8
 800dc40:	6823      	ldr	r3, [r4, #0]
 800dc42:	6003      	str	r3, [r0, #0]
 800dc44:	6863      	ldr	r3, [r4, #4]
 800dc46:	6043      	str	r3, [r0, #4]
 800dc48:	68a3      	ldr	r3, [r4, #8]
 800dc4a:	6083      	str	r3, [r0, #8]
 800dc4c:	9502      	str	r5, [sp, #8]
 800dc4e:	e75e      	b.n	800db0e <_realloc_r+0xca>
 800dc50:	68a3      	ldr	r3, [r4, #8]
 800dc52:	612b      	str	r3, [r5, #16]
 800dc54:	68e3      	ldr	r3, [r4, #12]
 800dc56:	616b      	str	r3, [r5, #20]
 800dc58:	2a24      	cmp	r2, #36	; 0x24
 800dc5a:	d003      	beq.n	800dc64 <_realloc_r+0x220>
 800dc5c:	0028      	movs	r0, r5
 800dc5e:	3410      	adds	r4, #16
 800dc60:	3018      	adds	r0, #24
 800dc62:	e7ed      	b.n	800dc40 <_realloc_r+0x1fc>
 800dc64:	0028      	movs	r0, r5
 800dc66:	6923      	ldr	r3, [r4, #16]
 800dc68:	3020      	adds	r0, #32
 800dc6a:	61ab      	str	r3, [r5, #24]
 800dc6c:	6963      	ldr	r3, [r4, #20]
 800dc6e:	3418      	adds	r4, #24
 800dc70:	61eb      	str	r3, [r5, #28]
 800dc72:	e7e5      	b.n	800dc40 <_realloc_r+0x1fc>
 800dc74:	0021      	movs	r1, r4
 800dc76:	f001 fb7c 	bl	800f372 <memmove>
 800dc7a:	e7e7      	b.n	800dc4c <_realloc_r+0x208>
 800dc7c:	9b00      	ldr	r3, [sp, #0]
 800dc7e:	42bb      	cmp	r3, r7
 800dc80:	dc31      	bgt.n	800dce6 <_realloc_r+0x2a2>
 800dc82:	0028      	movs	r0, r5
 800dc84:	68aa      	ldr	r2, [r5, #8]
 800dc86:	68eb      	ldr	r3, [r5, #12]
 800dc88:	3008      	adds	r0, #8
 800dc8a:	60d3      	str	r3, [r2, #12]
 800dc8c:	609a      	str	r2, [r3, #8]
 800dc8e:	9a03      	ldr	r2, [sp, #12]
 800dc90:	3a04      	subs	r2, #4
 800dc92:	2a24      	cmp	r2, #36	; 0x24
 800dc94:	d823      	bhi.n	800dcde <_realloc_r+0x29a>
 800dc96:	2a13      	cmp	r2, #19
 800dc98:	d907      	bls.n	800dcaa <_realloc_r+0x266>
 800dc9a:	6823      	ldr	r3, [r4, #0]
 800dc9c:	60ab      	str	r3, [r5, #8]
 800dc9e:	6863      	ldr	r3, [r4, #4]
 800dca0:	60eb      	str	r3, [r5, #12]
 800dca2:	2a1b      	cmp	r2, #27
 800dca4:	d809      	bhi.n	800dcba <_realloc_r+0x276>
 800dca6:	3408      	adds	r4, #8
 800dca8:	3008      	adds	r0, #8
 800dcaa:	6823      	ldr	r3, [r4, #0]
 800dcac:	6003      	str	r3, [r0, #0]
 800dcae:	6863      	ldr	r3, [r4, #4]
 800dcb0:	6043      	str	r3, [r0, #4]
 800dcb2:	68a3      	ldr	r3, [r4, #8]
 800dcb4:	6083      	str	r3, [r0, #8]
 800dcb6:	003e      	movs	r6, r7
 800dcb8:	e7c8      	b.n	800dc4c <_realloc_r+0x208>
 800dcba:	68a3      	ldr	r3, [r4, #8]
 800dcbc:	612b      	str	r3, [r5, #16]
 800dcbe:	68e3      	ldr	r3, [r4, #12]
 800dcc0:	616b      	str	r3, [r5, #20]
 800dcc2:	2a24      	cmp	r2, #36	; 0x24
 800dcc4:	d003      	beq.n	800dcce <_realloc_r+0x28a>
 800dcc6:	0028      	movs	r0, r5
 800dcc8:	3410      	adds	r4, #16
 800dcca:	3018      	adds	r0, #24
 800dccc:	e7ed      	b.n	800dcaa <_realloc_r+0x266>
 800dcce:	0028      	movs	r0, r5
 800dcd0:	6923      	ldr	r3, [r4, #16]
 800dcd2:	3020      	adds	r0, #32
 800dcd4:	61ab      	str	r3, [r5, #24]
 800dcd6:	6963      	ldr	r3, [r4, #20]
 800dcd8:	3418      	adds	r4, #24
 800dcda:	61eb      	str	r3, [r5, #28]
 800dcdc:	e7e5      	b.n	800dcaa <_realloc_r+0x266>
 800dcde:	0021      	movs	r1, r4
 800dce0:	f001 fb47 	bl	800f372 <memmove>
 800dce4:	e7e7      	b.n	800dcb6 <_realloc_r+0x272>
 800dce6:	9905      	ldr	r1, [sp, #20]
 800dce8:	9801      	ldr	r0, [sp, #4]
 800dcea:	f7f9 fd2f 	bl	800774c <_malloc_r>
 800dcee:	1e07      	subs	r7, r0, #0
 800dcf0:	d100      	bne.n	800dcf4 <_realloc_r+0x2b0>
 800dcf2:	e76f      	b.n	800dbd4 <_realloc_r+0x190>
 800dcf4:	0023      	movs	r3, r4
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	3b08      	subs	r3, #8
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	4393      	bics	r3, r2
 800dcfe:	9a04      	ldr	r2, [sp, #16]
 800dd00:	18d3      	adds	r3, r2, r3
 800dd02:	0002      	movs	r2, r0
 800dd04:	3a08      	subs	r2, #8
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d105      	bne.n	800dd16 <_realloc_r+0x2d2>
 800dd0a:	685e      	ldr	r6, [r3, #4]
 800dd0c:	2303      	movs	r3, #3
 800dd0e:	439e      	bics	r6, r3
 800dd10:	9b03      	ldr	r3, [sp, #12]
 800dd12:	18f6      	adds	r6, r6, r3
 800dd14:	e6fb      	b.n	800db0e <_realloc_r+0xca>
 800dd16:	9a03      	ldr	r2, [sp, #12]
 800dd18:	3a04      	subs	r2, #4
 800dd1a:	2a24      	cmp	r2, #36	; 0x24
 800dd1c:	d829      	bhi.n	800dd72 <_realloc_r+0x32e>
 800dd1e:	0003      	movs	r3, r0
 800dd20:	0021      	movs	r1, r4
 800dd22:	2a13      	cmp	r2, #19
 800dd24:	d908      	bls.n	800dd38 <_realloc_r+0x2f4>
 800dd26:	6823      	ldr	r3, [r4, #0]
 800dd28:	6003      	str	r3, [r0, #0]
 800dd2a:	6863      	ldr	r3, [r4, #4]
 800dd2c:	6043      	str	r3, [r0, #4]
 800dd2e:	2a1b      	cmp	r2, #27
 800dd30:	d80d      	bhi.n	800dd4e <_realloc_r+0x30a>
 800dd32:	0003      	movs	r3, r0
 800dd34:	3108      	adds	r1, #8
 800dd36:	3308      	adds	r3, #8
 800dd38:	680a      	ldr	r2, [r1, #0]
 800dd3a:	601a      	str	r2, [r3, #0]
 800dd3c:	684a      	ldr	r2, [r1, #4]
 800dd3e:	605a      	str	r2, [r3, #4]
 800dd40:	688a      	ldr	r2, [r1, #8]
 800dd42:	609a      	str	r2, [r3, #8]
 800dd44:	0021      	movs	r1, r4
 800dd46:	9801      	ldr	r0, [sp, #4]
 800dd48:	f7fb f89e 	bl	8008e88 <_free_r>
 800dd4c:	e742      	b.n	800dbd4 <_realloc_r+0x190>
 800dd4e:	68a3      	ldr	r3, [r4, #8]
 800dd50:	6083      	str	r3, [r0, #8]
 800dd52:	68e3      	ldr	r3, [r4, #12]
 800dd54:	60c3      	str	r3, [r0, #12]
 800dd56:	2a24      	cmp	r2, #36	; 0x24
 800dd58:	d003      	beq.n	800dd62 <_realloc_r+0x31e>
 800dd5a:	0003      	movs	r3, r0
 800dd5c:	3110      	adds	r1, #16
 800dd5e:	3310      	adds	r3, #16
 800dd60:	e7ea      	b.n	800dd38 <_realloc_r+0x2f4>
 800dd62:	6923      	ldr	r3, [r4, #16]
 800dd64:	3118      	adds	r1, #24
 800dd66:	6103      	str	r3, [r0, #16]
 800dd68:	0003      	movs	r3, r0
 800dd6a:	6962      	ldr	r2, [r4, #20]
 800dd6c:	3318      	adds	r3, #24
 800dd6e:	6142      	str	r2, [r0, #20]
 800dd70:	e7e2      	b.n	800dd38 <_realloc_r+0x2f4>
 800dd72:	0021      	movs	r1, r4
 800dd74:	f001 fafd 	bl	800f372 <memmove>
 800dd78:	e7e4      	b.n	800dd44 <_realloc_r+0x300>
 800dd7a:	9e03      	ldr	r6, [sp, #12]
 800dd7c:	e6c7      	b.n	800db0e <_realloc_r+0xca>
 800dd7e:	9902      	ldr	r1, [sp, #8]
 800dd80:	4306      	orrs	r6, r0
 800dd82:	604e      	str	r6, [r1, #4]
 800dd84:	6851      	ldr	r1, [r2, #4]
 800dd86:	430b      	orrs	r3, r1
 800dd88:	6053      	str	r3, [r2, #4]
 800dd8a:	e6da      	b.n	800db42 <_realloc_r+0xfe>
 800dd8c:	20000014 	.word	0x20000014

0800dd90 <_strtoul_l.constprop.0>:
 800dd90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd92:	b087      	sub	sp, #28
 800dd94:	9202      	str	r2, [sp, #8]
 800dd96:	4a3e      	ldr	r2, [pc, #248]	; (800de90 <_strtoul_l.constprop.0+0x100>)
 800dd98:	001e      	movs	r6, r3
 800dd9a:	9101      	str	r1, [sp, #4]
 800dd9c:	000b      	movs	r3, r1
 800dd9e:	4694      	mov	ip, r2
 800dda0:	2108      	movs	r1, #8
 800dda2:	9005      	str	r0, [sp, #20]
 800dda4:	001a      	movs	r2, r3
 800dda6:	4660      	mov	r0, ip
 800dda8:	7814      	ldrb	r4, [r2, #0]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	5d00      	ldrb	r0, [r0, r4]
 800ddae:	001d      	movs	r5, r3
 800ddb0:	0007      	movs	r7, r0
 800ddb2:	400f      	ands	r7, r1
 800ddb4:	4208      	tst	r0, r1
 800ddb6:	d1f5      	bne.n	800dda4 <_strtoul_l.constprop.0+0x14>
 800ddb8:	2c2d      	cmp	r4, #45	; 0x2d
 800ddba:	d13d      	bne.n	800de38 <_strtoul_l.constprop.0+0xa8>
 800ddbc:	2701      	movs	r7, #1
 800ddbe:	781c      	ldrb	r4, [r3, #0]
 800ddc0:	1c95      	adds	r5, r2, #2
 800ddc2:	2e00      	cmp	r6, #0
 800ddc4:	d05f      	beq.n	800de86 <_strtoul_l.constprop.0+0xf6>
 800ddc6:	2e10      	cmp	r6, #16
 800ddc8:	d109      	bne.n	800ddde <_strtoul_l.constprop.0+0x4e>
 800ddca:	2c30      	cmp	r4, #48	; 0x30
 800ddcc:	d107      	bne.n	800ddde <_strtoul_l.constprop.0+0x4e>
 800ddce:	2220      	movs	r2, #32
 800ddd0:	782b      	ldrb	r3, [r5, #0]
 800ddd2:	4393      	bics	r3, r2
 800ddd4:	2b58      	cmp	r3, #88	; 0x58
 800ddd6:	d151      	bne.n	800de7c <_strtoul_l.constprop.0+0xec>
 800ddd8:	2610      	movs	r6, #16
 800ddda:	786c      	ldrb	r4, [r5, #1]
 800dddc:	3502      	adds	r5, #2
 800ddde:	2001      	movs	r0, #1
 800dde0:	0031      	movs	r1, r6
 800dde2:	4240      	negs	r0, r0
 800dde4:	f7f2 f9aa 	bl	800013c <__udivsi3>
 800dde8:	9003      	str	r0, [sp, #12]
 800ddea:	2001      	movs	r0, #1
 800ddec:	0031      	movs	r1, r6
 800ddee:	4240      	negs	r0, r0
 800ddf0:	f7f2 fa2a 	bl	8000248 <__aeabi_uidivmod>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	9104      	str	r1, [sp, #16]
 800ddfa:	2101      	movs	r1, #1
 800ddfc:	0018      	movs	r0, r3
 800ddfe:	4694      	mov	ip, r2
 800de00:	4249      	negs	r1, r1
 800de02:	0022      	movs	r2, r4
 800de04:	3a30      	subs	r2, #48	; 0x30
 800de06:	2a09      	cmp	r2, #9
 800de08:	d903      	bls.n	800de12 <_strtoul_l.constprop.0+0x82>
 800de0a:	3a11      	subs	r2, #17
 800de0c:	2a19      	cmp	r2, #25
 800de0e:	d818      	bhi.n	800de42 <_strtoul_l.constprop.0+0xb2>
 800de10:	320a      	adds	r2, #10
 800de12:	4296      	cmp	r6, r2
 800de14:	dd19      	ble.n	800de4a <_strtoul_l.constprop.0+0xba>
 800de16:	1c5c      	adds	r4, r3, #1
 800de18:	d00b      	beq.n	800de32 <_strtoul_l.constprop.0+0xa2>
 800de1a:	9c03      	ldr	r4, [sp, #12]
 800de1c:	000b      	movs	r3, r1
 800de1e:	4284      	cmp	r4, r0
 800de20:	d307      	bcc.n	800de32 <_strtoul_l.constprop.0+0xa2>
 800de22:	d103      	bne.n	800de2c <_strtoul_l.constprop.0+0x9c>
 800de24:	9c04      	ldr	r4, [sp, #16]
 800de26:	000b      	movs	r3, r1
 800de28:	4294      	cmp	r4, r2
 800de2a:	db02      	blt.n	800de32 <_strtoul_l.constprop.0+0xa2>
 800de2c:	4663      	mov	r3, ip
 800de2e:	4370      	muls	r0, r6
 800de30:	1810      	adds	r0, r2, r0
 800de32:	782c      	ldrb	r4, [r5, #0]
 800de34:	3501      	adds	r5, #1
 800de36:	e7e4      	b.n	800de02 <_strtoul_l.constprop.0+0x72>
 800de38:	2c2b      	cmp	r4, #43	; 0x2b
 800de3a:	d1c2      	bne.n	800ddc2 <_strtoul_l.constprop.0+0x32>
 800de3c:	781c      	ldrb	r4, [r3, #0]
 800de3e:	1c95      	adds	r5, r2, #2
 800de40:	e7bf      	b.n	800ddc2 <_strtoul_l.constprop.0+0x32>
 800de42:	0022      	movs	r2, r4
 800de44:	3a61      	subs	r2, #97	; 0x61
 800de46:	2a19      	cmp	r2, #25
 800de48:	d9e2      	bls.n	800de10 <_strtoul_l.constprop.0+0x80>
 800de4a:	1c5a      	adds	r2, r3, #1
 800de4c:	d108      	bne.n	800de60 <_strtoul_l.constprop.0+0xd0>
 800de4e:	2222      	movs	r2, #34	; 0x22
 800de50:	9905      	ldr	r1, [sp, #20]
 800de52:	0018      	movs	r0, r3
 800de54:	600a      	str	r2, [r1, #0]
 800de56:	9a02      	ldr	r2, [sp, #8]
 800de58:	2a00      	cmp	r2, #0
 800de5a:	d109      	bne.n	800de70 <_strtoul_l.constprop.0+0xe0>
 800de5c:	b007      	add	sp, #28
 800de5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de60:	2f00      	cmp	r7, #0
 800de62:	d000      	beq.n	800de66 <_strtoul_l.constprop.0+0xd6>
 800de64:	4240      	negs	r0, r0
 800de66:	9a02      	ldr	r2, [sp, #8]
 800de68:	2a00      	cmp	r2, #0
 800de6a:	d0f7      	beq.n	800de5c <_strtoul_l.constprop.0+0xcc>
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d001      	beq.n	800de74 <_strtoul_l.constprop.0+0xe4>
 800de70:	1e6b      	subs	r3, r5, #1
 800de72:	9301      	str	r3, [sp, #4]
 800de74:	9b02      	ldr	r3, [sp, #8]
 800de76:	9a01      	ldr	r2, [sp, #4]
 800de78:	601a      	str	r2, [r3, #0]
 800de7a:	e7ef      	b.n	800de5c <_strtoul_l.constprop.0+0xcc>
 800de7c:	2430      	movs	r4, #48	; 0x30
 800de7e:	2e00      	cmp	r6, #0
 800de80:	d1ad      	bne.n	800ddde <_strtoul_l.constprop.0+0x4e>
 800de82:	3608      	adds	r6, #8
 800de84:	e7ab      	b.n	800ddde <_strtoul_l.constprop.0+0x4e>
 800de86:	2c30      	cmp	r4, #48	; 0x30
 800de88:	d0a1      	beq.n	800ddce <_strtoul_l.constprop.0+0x3e>
 800de8a:	260a      	movs	r6, #10
 800de8c:	e7a7      	b.n	800ddde <_strtoul_l.constprop.0+0x4e>
 800de8e:	46c0      	nop			; (mov r8, r8)
 800de90:	0800f8d9 	.word	0x0800f8d9

0800de94 <_strtoul_r>:
 800de94:	b510      	push	{r4, lr}
 800de96:	f7ff ff7b 	bl	800dd90 <_strtoul_l.constprop.0>
 800de9a:	bd10      	pop	{r4, pc}

0800de9c <_strtoll_l.constprop.0>:
 800de9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de9e:	b08d      	sub	sp, #52	; 0x34
 800dea0:	9203      	str	r2, [sp, #12]
 800dea2:	4a53      	ldr	r2, [pc, #332]	; (800dff0 <_strtoll_l.constprop.0+0x154>)
 800dea4:	001e      	movs	r6, r3
 800dea6:	9102      	str	r1, [sp, #8]
 800dea8:	000b      	movs	r3, r1
 800deaa:	4694      	mov	ip, r2
 800deac:	2108      	movs	r1, #8
 800deae:	900a      	str	r0, [sp, #40]	; 0x28
 800deb0:	001a      	movs	r2, r3
 800deb2:	4660      	mov	r0, ip
 800deb4:	7814      	ldrb	r4, [r2, #0]
 800deb6:	3301      	adds	r3, #1
 800deb8:	5d00      	ldrb	r0, [r0, r4]
 800deba:	001d      	movs	r5, r3
 800debc:	0007      	movs	r7, r0
 800debe:	400f      	ands	r7, r1
 800dec0:	4208      	tst	r0, r1
 800dec2:	d1f5      	bne.n	800deb0 <_strtoll_l.constprop.0+0x14>
 800dec4:	2c2d      	cmp	r4, #45	; 0x2d
 800dec6:	d153      	bne.n	800df70 <_strtoll_l.constprop.0+0xd4>
 800dec8:	781c      	ldrb	r4, [r3, #0]
 800deca:	2301      	movs	r3, #1
 800decc:	1c95      	adds	r5, r2, #2
 800dece:	9301      	str	r3, [sp, #4]
 800ded0:	2e00      	cmp	r6, #0
 800ded2:	d100      	bne.n	800ded6 <_strtoll_l.constprop.0+0x3a>
 800ded4:	e086      	b.n	800dfe4 <_strtoll_l.constprop.0+0x148>
 800ded6:	2e10      	cmp	r6, #16
 800ded8:	d10a      	bne.n	800def0 <_strtoll_l.constprop.0+0x54>
 800deda:	2c30      	cmp	r4, #48	; 0x30
 800dedc:	d108      	bne.n	800def0 <_strtoll_l.constprop.0+0x54>
 800dede:	2220      	movs	r2, #32
 800dee0:	782b      	ldrb	r3, [r5, #0]
 800dee2:	4393      	bics	r3, r2
 800dee4:	2b58      	cmp	r3, #88	; 0x58
 800dee6:	d000      	beq.n	800deea <_strtoll_l.constprop.0+0x4e>
 800dee8:	e076      	b.n	800dfd8 <_strtoll_l.constprop.0+0x13c>
 800deea:	2610      	movs	r6, #16
 800deec:	786c      	ldrb	r4, [r5, #1]
 800deee:	3502      	adds	r5, #2
 800def0:	2001      	movs	r0, #1
 800def2:	2300      	movs	r3, #0
 800def4:	493f      	ldr	r1, [pc, #252]	; (800dff4 <_strtoll_l.constprop.0+0x158>)
 800def6:	9a01      	ldr	r2, [sp, #4]
 800def8:	4240      	negs	r0, r0
 800defa:	1812      	adds	r2, r2, r0
 800defc:	414b      	adcs	r3, r1
 800defe:	9204      	str	r2, [sp, #16]
 800df00:	9305      	str	r3, [sp, #20]
 800df02:	9804      	ldr	r0, [sp, #16]
 800df04:	9905      	ldr	r1, [sp, #20]
 800df06:	17f3      	asrs	r3, r6, #31
 800df08:	0032      	movs	r2, r6
 800df0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800df0c:	f7f2 faca 	bl	80004a4 <__aeabi_uldivmod>
 800df10:	2300      	movs	r3, #0
 800df12:	000f      	movs	r7, r1
 800df14:	9008      	str	r0, [sp, #32]
 800df16:	2100      	movs	r1, #0
 800df18:	2000      	movs	r0, #0
 800df1a:	9209      	str	r2, [sp, #36]	; 0x24
 800df1c:	0022      	movs	r2, r4
 800df1e:	3a30      	subs	r2, #48	; 0x30
 800df20:	2a09      	cmp	r2, #9
 800df22:	d82b      	bhi.n	800df7c <_strtoll_l.constprop.0+0xe0>
 800df24:	0014      	movs	r4, r2
 800df26:	42a6      	cmp	r6, r4
 800df28:	dd37      	ble.n	800df9a <_strtoll_l.constprop.0+0xfe>
 800df2a:	1c5a      	adds	r2, r3, #1
 800df2c:	d01d      	beq.n	800df6a <_strtoll_l.constprop.0+0xce>
 800df2e:	42b9      	cmp	r1, r7
 800df30:	d830      	bhi.n	800df94 <_strtoll_l.constprop.0+0xf8>
 800df32:	d102      	bne.n	800df3a <_strtoll_l.constprop.0+0x9e>
 800df34:	9b08      	ldr	r3, [sp, #32]
 800df36:	4298      	cmp	r0, r3
 800df38:	d82c      	bhi.n	800df94 <_strtoll_l.constprop.0+0xf8>
 800df3a:	9b08      	ldr	r3, [sp, #32]
 800df3c:	4283      	cmp	r3, r0
 800df3e:	d106      	bne.n	800df4e <_strtoll_l.constprop.0+0xb2>
 800df40:	428f      	cmp	r7, r1
 800df42:	d104      	bne.n	800df4e <_strtoll_l.constprop.0+0xb2>
 800df44:	2301      	movs	r3, #1
 800df46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df48:	425b      	negs	r3, r3
 800df4a:	42a2      	cmp	r2, r4
 800df4c:	db0d      	blt.n	800df6a <_strtoll_l.constprop.0+0xce>
 800df4e:	000b      	movs	r3, r1
 800df50:	0002      	movs	r2, r0
 800df52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df54:	0030      	movs	r0, r6
 800df56:	f7f2 fac5 	bl	80004e4 <__aeabi_lmul>
 800df5a:	17e3      	asrs	r3, r4, #31
 800df5c:	9406      	str	r4, [sp, #24]
 800df5e:	9307      	str	r3, [sp, #28]
 800df60:	9b06      	ldr	r3, [sp, #24]
 800df62:	9c07      	ldr	r4, [sp, #28]
 800df64:	18c0      	adds	r0, r0, r3
 800df66:	4161      	adcs	r1, r4
 800df68:	2301      	movs	r3, #1
 800df6a:	782c      	ldrb	r4, [r5, #0]
 800df6c:	3501      	adds	r5, #1
 800df6e:	e7d5      	b.n	800df1c <_strtoll_l.constprop.0+0x80>
 800df70:	9701      	str	r7, [sp, #4]
 800df72:	2c2b      	cmp	r4, #43	; 0x2b
 800df74:	d1ac      	bne.n	800ded0 <_strtoll_l.constprop.0+0x34>
 800df76:	781c      	ldrb	r4, [r3, #0]
 800df78:	1c95      	adds	r5, r2, #2
 800df7a:	e7a9      	b.n	800ded0 <_strtoll_l.constprop.0+0x34>
 800df7c:	0022      	movs	r2, r4
 800df7e:	3a41      	subs	r2, #65	; 0x41
 800df80:	2a19      	cmp	r2, #25
 800df82:	d801      	bhi.n	800df88 <_strtoll_l.constprop.0+0xec>
 800df84:	3c37      	subs	r4, #55	; 0x37
 800df86:	e7ce      	b.n	800df26 <_strtoll_l.constprop.0+0x8a>
 800df88:	0022      	movs	r2, r4
 800df8a:	3a61      	subs	r2, #97	; 0x61
 800df8c:	2a19      	cmp	r2, #25
 800df8e:	d804      	bhi.n	800df9a <_strtoll_l.constprop.0+0xfe>
 800df90:	3c57      	subs	r4, #87	; 0x57
 800df92:	e7c8      	b.n	800df26 <_strtoll_l.constprop.0+0x8a>
 800df94:	2301      	movs	r3, #1
 800df96:	425b      	negs	r3, r3
 800df98:	e7e7      	b.n	800df6a <_strtoll_l.constprop.0+0xce>
 800df9a:	1c5a      	adds	r2, r3, #1
 800df9c:	d109      	bne.n	800dfb2 <_strtoll_l.constprop.0+0x116>
 800df9e:	9804      	ldr	r0, [sp, #16]
 800dfa0:	9905      	ldr	r1, [sp, #20]
 800dfa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dfa4:	3323      	adds	r3, #35	; 0x23
 800dfa6:	6013      	str	r3, [r2, #0]
 800dfa8:	9b03      	ldr	r3, [sp, #12]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d10e      	bne.n	800dfcc <_strtoll_l.constprop.0+0x130>
 800dfae:	b00d      	add	sp, #52	; 0x34
 800dfb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfb2:	9a01      	ldr	r2, [sp, #4]
 800dfb4:	2a00      	cmp	r2, #0
 800dfb6:	d004      	beq.n	800dfc2 <_strtoll_l.constprop.0+0x126>
 800dfb8:	0006      	movs	r6, r0
 800dfba:	000f      	movs	r7, r1
 800dfbc:	2100      	movs	r1, #0
 800dfbe:	4270      	negs	r0, r6
 800dfc0:	41b9      	sbcs	r1, r7
 800dfc2:	9a03      	ldr	r2, [sp, #12]
 800dfc4:	2a00      	cmp	r2, #0
 800dfc6:	d0f2      	beq.n	800dfae <_strtoll_l.constprop.0+0x112>
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d001      	beq.n	800dfd0 <_strtoll_l.constprop.0+0x134>
 800dfcc:	1e6b      	subs	r3, r5, #1
 800dfce:	9302      	str	r3, [sp, #8]
 800dfd0:	9b03      	ldr	r3, [sp, #12]
 800dfd2:	9a02      	ldr	r2, [sp, #8]
 800dfd4:	601a      	str	r2, [r3, #0]
 800dfd6:	e7ea      	b.n	800dfae <_strtoll_l.constprop.0+0x112>
 800dfd8:	2430      	movs	r4, #48	; 0x30
 800dfda:	2e00      	cmp	r6, #0
 800dfdc:	d000      	beq.n	800dfe0 <_strtoll_l.constprop.0+0x144>
 800dfde:	e787      	b.n	800def0 <_strtoll_l.constprop.0+0x54>
 800dfe0:	3608      	adds	r6, #8
 800dfe2:	e785      	b.n	800def0 <_strtoll_l.constprop.0+0x54>
 800dfe4:	2c30      	cmp	r4, #48	; 0x30
 800dfe6:	d100      	bne.n	800dfea <_strtoll_l.constprop.0+0x14e>
 800dfe8:	e779      	b.n	800dede <_strtoll_l.constprop.0+0x42>
 800dfea:	260a      	movs	r6, #10
 800dfec:	e780      	b.n	800def0 <_strtoll_l.constprop.0+0x54>
 800dfee:	46c0      	nop			; (mov r8, r8)
 800dff0:	0800f8d9 	.word	0x0800f8d9
 800dff4:	7fffffff 	.word	0x7fffffff

0800dff8 <_strtoll_r>:
 800dff8:	b510      	push	{r4, lr}
 800dffa:	f7ff ff4f 	bl	800de9c <_strtoll_l.constprop.0>
 800dffe:	bd10      	pop	{r4, pc}

0800e000 <_strtoull_l.constprop.0>:
 800e000:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e002:	b08b      	sub	sp, #44	; 0x2c
 800e004:	9202      	str	r2, [sp, #8]
 800e006:	4a54      	ldr	r2, [pc, #336]	; (800e158 <_strtoull_l.constprop.0+0x158>)
 800e008:	001e      	movs	r6, r3
 800e00a:	9101      	str	r1, [sp, #4]
 800e00c:	000b      	movs	r3, r1
 800e00e:	4694      	mov	ip, r2
 800e010:	2108      	movs	r1, #8
 800e012:	9009      	str	r0, [sp, #36]	; 0x24
 800e014:	001a      	movs	r2, r3
 800e016:	4660      	mov	r0, ip
 800e018:	7814      	ldrb	r4, [r2, #0]
 800e01a:	3301      	adds	r3, #1
 800e01c:	5d00      	ldrb	r0, [r0, r4]
 800e01e:	001d      	movs	r5, r3
 800e020:	0007      	movs	r7, r0
 800e022:	400f      	ands	r7, r1
 800e024:	4208      	tst	r0, r1
 800e026:	d1f5      	bne.n	800e014 <_strtoull_l.constprop.0+0x14>
 800e028:	2c2d      	cmp	r4, #45	; 0x2d
 800e02a:	d154      	bne.n	800e0d6 <_strtoull_l.constprop.0+0xd6>
 800e02c:	781c      	ldrb	r4, [r3, #0]
 800e02e:	2301      	movs	r3, #1
 800e030:	1c95      	adds	r5, r2, #2
 800e032:	9306      	str	r3, [sp, #24]
 800e034:	2e00      	cmp	r6, #0
 800e036:	d100      	bne.n	800e03a <_strtoull_l.constprop.0+0x3a>
 800e038:	e088      	b.n	800e14c <_strtoull_l.constprop.0+0x14c>
 800e03a:	2e10      	cmp	r6, #16
 800e03c:	d10a      	bne.n	800e054 <_strtoull_l.constprop.0+0x54>
 800e03e:	2c30      	cmp	r4, #48	; 0x30
 800e040:	d108      	bne.n	800e054 <_strtoull_l.constprop.0+0x54>
 800e042:	2220      	movs	r2, #32
 800e044:	782b      	ldrb	r3, [r5, #0]
 800e046:	4393      	bics	r3, r2
 800e048:	2b58      	cmp	r3, #88	; 0x58
 800e04a:	d000      	beq.n	800e04e <_strtoull_l.constprop.0+0x4e>
 800e04c:	e078      	b.n	800e140 <_strtoull_l.constprop.0+0x140>
 800e04e:	2610      	movs	r6, #16
 800e050:	786c      	ldrb	r4, [r5, #1]
 800e052:	3502      	adds	r5, #2
 800e054:	17f7      	asrs	r7, r6, #31
 800e056:	0032      	movs	r2, r6
 800e058:	003b      	movs	r3, r7
 800e05a:	2001      	movs	r0, #1
 800e05c:	4240      	negs	r0, r0
 800e05e:	17c1      	asrs	r1, r0, #31
 800e060:	f7f2 fa20 	bl	80004a4 <__aeabi_uldivmod>
 800e064:	0032      	movs	r2, r6
 800e066:	9007      	str	r0, [sp, #28]
 800e068:	9103      	str	r1, [sp, #12]
 800e06a:	003b      	movs	r3, r7
 800e06c:	2001      	movs	r0, #1
 800e06e:	4240      	negs	r0, r0
 800e070:	17c1      	asrs	r1, r0, #31
 800e072:	f7f2 fa17 	bl	80004a4 <__aeabi_uldivmod>
 800e076:	2300      	movs	r3, #0
 800e078:	2000      	movs	r0, #0
 800e07a:	2100      	movs	r1, #0
 800e07c:	9208      	str	r2, [sp, #32]
 800e07e:	0022      	movs	r2, r4
 800e080:	3a30      	subs	r2, #48	; 0x30
 800e082:	2a09      	cmp	r2, #9
 800e084:	d82d      	bhi.n	800e0e2 <_strtoull_l.constprop.0+0xe2>
 800e086:	0014      	movs	r4, r2
 800e088:	42a6      	cmp	r6, r4
 800e08a:	dd39      	ble.n	800e100 <_strtoull_l.constprop.0+0x100>
 800e08c:	1c5a      	adds	r2, r3, #1
 800e08e:	d01f      	beq.n	800e0d0 <_strtoull_l.constprop.0+0xd0>
 800e090:	9b03      	ldr	r3, [sp, #12]
 800e092:	4299      	cmp	r1, r3
 800e094:	d831      	bhi.n	800e0fa <_strtoull_l.constprop.0+0xfa>
 800e096:	d102      	bne.n	800e09e <_strtoull_l.constprop.0+0x9e>
 800e098:	9b07      	ldr	r3, [sp, #28]
 800e09a:	4298      	cmp	r0, r3
 800e09c:	d82d      	bhi.n	800e0fa <_strtoull_l.constprop.0+0xfa>
 800e09e:	9b07      	ldr	r3, [sp, #28]
 800e0a0:	4283      	cmp	r3, r0
 800e0a2:	d107      	bne.n	800e0b4 <_strtoull_l.constprop.0+0xb4>
 800e0a4:	9b03      	ldr	r3, [sp, #12]
 800e0a6:	428b      	cmp	r3, r1
 800e0a8:	d104      	bne.n	800e0b4 <_strtoull_l.constprop.0+0xb4>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	9a08      	ldr	r2, [sp, #32]
 800e0ae:	425b      	negs	r3, r3
 800e0b0:	42a2      	cmp	r2, r4
 800e0b2:	db0d      	blt.n	800e0d0 <_strtoull_l.constprop.0+0xd0>
 800e0b4:	000b      	movs	r3, r1
 800e0b6:	0002      	movs	r2, r0
 800e0b8:	0039      	movs	r1, r7
 800e0ba:	0030      	movs	r0, r6
 800e0bc:	f7f2 fa12 	bl	80004e4 <__aeabi_lmul>
 800e0c0:	17e3      	asrs	r3, r4, #31
 800e0c2:	9404      	str	r4, [sp, #16]
 800e0c4:	9305      	str	r3, [sp, #20]
 800e0c6:	9b04      	ldr	r3, [sp, #16]
 800e0c8:	9c05      	ldr	r4, [sp, #20]
 800e0ca:	18c0      	adds	r0, r0, r3
 800e0cc:	4161      	adcs	r1, r4
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	782c      	ldrb	r4, [r5, #0]
 800e0d2:	3501      	adds	r5, #1
 800e0d4:	e7d3      	b.n	800e07e <_strtoull_l.constprop.0+0x7e>
 800e0d6:	9706      	str	r7, [sp, #24]
 800e0d8:	2c2b      	cmp	r4, #43	; 0x2b
 800e0da:	d1ab      	bne.n	800e034 <_strtoull_l.constprop.0+0x34>
 800e0dc:	781c      	ldrb	r4, [r3, #0]
 800e0de:	1c95      	adds	r5, r2, #2
 800e0e0:	e7a8      	b.n	800e034 <_strtoull_l.constprop.0+0x34>
 800e0e2:	0022      	movs	r2, r4
 800e0e4:	3a41      	subs	r2, #65	; 0x41
 800e0e6:	2a19      	cmp	r2, #25
 800e0e8:	d801      	bhi.n	800e0ee <_strtoull_l.constprop.0+0xee>
 800e0ea:	3c37      	subs	r4, #55	; 0x37
 800e0ec:	e7cc      	b.n	800e088 <_strtoull_l.constprop.0+0x88>
 800e0ee:	0022      	movs	r2, r4
 800e0f0:	3a61      	subs	r2, #97	; 0x61
 800e0f2:	2a19      	cmp	r2, #25
 800e0f4:	d804      	bhi.n	800e100 <_strtoull_l.constprop.0+0x100>
 800e0f6:	3c57      	subs	r4, #87	; 0x57
 800e0f8:	e7c6      	b.n	800e088 <_strtoull_l.constprop.0+0x88>
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	425b      	negs	r3, r3
 800e0fe:	e7e7      	b.n	800e0d0 <_strtoull_l.constprop.0+0xd0>
 800e100:	1c5a      	adds	r2, r3, #1
 800e102:	d10a      	bne.n	800e11a <_strtoull_l.constprop.0+0x11a>
 800e104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e106:	3323      	adds	r3, #35	; 0x23
 800e108:	6013      	str	r3, [r2, #0]
 800e10a:	9b02      	ldr	r3, [sp, #8]
 800e10c:	2001      	movs	r0, #1
 800e10e:	4240      	negs	r0, r0
 800e110:	17c1      	asrs	r1, r0, #31
 800e112:	2b00      	cmp	r3, #0
 800e114:	d10e      	bne.n	800e134 <_strtoull_l.constprop.0+0x134>
 800e116:	b00b      	add	sp, #44	; 0x2c
 800e118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e11a:	9a06      	ldr	r2, [sp, #24]
 800e11c:	2a00      	cmp	r2, #0
 800e11e:	d004      	beq.n	800e12a <_strtoull_l.constprop.0+0x12a>
 800e120:	0006      	movs	r6, r0
 800e122:	000f      	movs	r7, r1
 800e124:	2100      	movs	r1, #0
 800e126:	4270      	negs	r0, r6
 800e128:	41b9      	sbcs	r1, r7
 800e12a:	9a02      	ldr	r2, [sp, #8]
 800e12c:	2a00      	cmp	r2, #0
 800e12e:	d0f2      	beq.n	800e116 <_strtoull_l.constprop.0+0x116>
 800e130:	2b00      	cmp	r3, #0
 800e132:	d001      	beq.n	800e138 <_strtoull_l.constprop.0+0x138>
 800e134:	1e6b      	subs	r3, r5, #1
 800e136:	9301      	str	r3, [sp, #4]
 800e138:	9b02      	ldr	r3, [sp, #8]
 800e13a:	9a01      	ldr	r2, [sp, #4]
 800e13c:	601a      	str	r2, [r3, #0]
 800e13e:	e7ea      	b.n	800e116 <_strtoull_l.constprop.0+0x116>
 800e140:	2430      	movs	r4, #48	; 0x30
 800e142:	2e00      	cmp	r6, #0
 800e144:	d000      	beq.n	800e148 <_strtoull_l.constprop.0+0x148>
 800e146:	e785      	b.n	800e054 <_strtoull_l.constprop.0+0x54>
 800e148:	3608      	adds	r6, #8
 800e14a:	e783      	b.n	800e054 <_strtoull_l.constprop.0+0x54>
 800e14c:	2c30      	cmp	r4, #48	; 0x30
 800e14e:	d100      	bne.n	800e152 <_strtoull_l.constprop.0+0x152>
 800e150:	e777      	b.n	800e042 <_strtoull_l.constprop.0+0x42>
 800e152:	260a      	movs	r6, #10
 800e154:	e77e      	b.n	800e054 <_strtoull_l.constprop.0+0x54>
 800e156:	46c0      	nop			; (mov r8, r8)
 800e158:	0800f8d9 	.word	0x0800f8d9

0800e15c <_strtoull_r>:
 800e15c:	b510      	push	{r4, lr}
 800e15e:	f7ff ff4f 	bl	800e000 <_strtoull_l.constprop.0>
 800e162:	bd10      	pop	{r4, pc}

0800e164 <_mbrtowc_r>:
 800e164:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e166:	0004      	movs	r4, r0
 800e168:	0010      	movs	r0, r2
 800e16a:	4a0b      	ldr	r2, [pc, #44]	; (800e198 <_mbrtowc_r+0x34>)
 800e16c:	9d06      	ldr	r5, [sp, #24]
 800e16e:	32e4      	adds	r2, #228	; 0xe4
 800e170:	6816      	ldr	r6, [r2, #0]
 800e172:	2800      	cmp	r0, #0
 800e174:	d10c      	bne.n	800e190 <_mbrtowc_r+0x2c>
 800e176:	2301      	movs	r3, #1
 800e178:	0001      	movs	r1, r0
 800e17a:	4a08      	ldr	r2, [pc, #32]	; (800e19c <_mbrtowc_r+0x38>)
 800e17c:	9500      	str	r5, [sp, #0]
 800e17e:	0020      	movs	r0, r4
 800e180:	47b0      	blx	r6
 800e182:	1c43      	adds	r3, r0, #1
 800e184:	d103      	bne.n	800e18e <_mbrtowc_r+0x2a>
 800e186:	2300      	movs	r3, #0
 800e188:	602b      	str	r3, [r5, #0]
 800e18a:	338a      	adds	r3, #138	; 0x8a
 800e18c:	6023      	str	r3, [r4, #0]
 800e18e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800e190:	0002      	movs	r2, r0
 800e192:	9500      	str	r5, [sp, #0]
 800e194:	e7f3      	b.n	800e17e <_mbrtowc_r+0x1a>
 800e196:	46c0      	nop			; (mov r8, r8)
 800e198:	20000430 	.word	0x20000430
 800e19c:	0800fc63 	.word	0x0800fc63

0800e1a0 <iswspace>:
 800e1a0:	b510      	push	{r4, lr}
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	f000 f802 	bl	800e1ac <iswspace_l>
 800e1a8:	bd10      	pop	{r4, pc}
	...

0800e1ac <iswspace_l>:
 800e1ac:	0003      	movs	r3, r0
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	2bff      	cmp	r3, #255	; 0xff
 800e1b2:	d803      	bhi.n	800e1bc <iswspace_l+0x10>
 800e1b4:	4a02      	ldr	r2, [pc, #8]	; (800e1c0 <iswspace_l+0x14>)
 800e1b6:	5cd0      	ldrb	r0, [r2, r3]
 800e1b8:	2308      	movs	r3, #8
 800e1ba:	4018      	ands	r0, r3
 800e1bc:	4770      	bx	lr
 800e1be:	46c0      	nop			; (mov r8, r8)
 800e1c0:	0800f8d9 	.word	0x0800f8d9

0800e1c4 <fiprintf>:
 800e1c4:	b40e      	push	{r1, r2, r3}
 800e1c6:	b517      	push	{r0, r1, r2, r4, lr}
 800e1c8:	4c05      	ldr	r4, [pc, #20]	; (800e1e0 <fiprintf+0x1c>)
 800e1ca:	ab05      	add	r3, sp, #20
 800e1cc:	cb04      	ldmia	r3!, {r2}
 800e1ce:	0001      	movs	r1, r0
 800e1d0:	6820      	ldr	r0, [r4, #0]
 800e1d2:	9301      	str	r3, [sp, #4]
 800e1d4:	f000 f954 	bl	800e480 <_vfiprintf_r>
 800e1d8:	bc1e      	pop	{r1, r2, r3, r4}
 800e1da:	bc08      	pop	{r3}
 800e1dc:	b003      	add	sp, #12
 800e1de:	4718      	bx	r3
 800e1e0:	200006c0 	.word	0x200006c0

0800e1e4 <__ssprint_r>:
 800e1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1e6:	6813      	ldr	r3, [r2, #0]
 800e1e8:	b087      	sub	sp, #28
 800e1ea:	0017      	movs	r7, r2
 800e1ec:	9303      	str	r3, [sp, #12]
 800e1ee:	6893      	ldr	r3, [r2, #8]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	000c      	movs	r4, r1
 800e1f4:	9005      	str	r0, [sp, #20]
 800e1f6:	9202      	str	r2, [sp, #8]
 800e1f8:	9201      	str	r2, [sp, #4]
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d10d      	bne.n	800e21a <__ssprint_r+0x36>
 800e1fe:	2000      	movs	r0, #0
 800e200:	2300      	movs	r3, #0
 800e202:	607b      	str	r3, [r7, #4]
 800e204:	b007      	add	sp, #28
 800e206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e208:	9b03      	ldr	r3, [sp, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	9302      	str	r3, [sp, #8]
 800e20e:	9b03      	ldr	r3, [sp, #12]
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	9301      	str	r3, [sp, #4]
 800e214:	9b03      	ldr	r3, [sp, #12]
 800e216:	3308      	adds	r3, #8
 800e218:	9303      	str	r3, [sp, #12]
 800e21a:	9a01      	ldr	r2, [sp, #4]
 800e21c:	68a6      	ldr	r6, [r4, #8]
 800e21e:	6823      	ldr	r3, [r4, #0]
 800e220:	2a00      	cmp	r2, #0
 800e222:	d0f1      	beq.n	800e208 <__ssprint_r+0x24>
 800e224:	42b2      	cmp	r2, r6
 800e226:	d32e      	bcc.n	800e286 <__ssprint_r+0xa2>
 800e228:	2190      	movs	r1, #144	; 0x90
 800e22a:	89a2      	ldrh	r2, [r4, #12]
 800e22c:	00c9      	lsls	r1, r1, #3
 800e22e:	420a      	tst	r2, r1
 800e230:	d029      	beq.n	800e286 <__ssprint_r+0xa2>
 800e232:	2003      	movs	r0, #3
 800e234:	6921      	ldr	r1, [r4, #16]
 800e236:	1a5b      	subs	r3, r3, r1
 800e238:	9304      	str	r3, [sp, #16]
 800e23a:	6963      	ldr	r3, [r4, #20]
 800e23c:	4343      	muls	r3, r0
 800e23e:	0fdd      	lsrs	r5, r3, #31
 800e240:	18ed      	adds	r5, r5, r3
 800e242:	9b04      	ldr	r3, [sp, #16]
 800e244:	9801      	ldr	r0, [sp, #4]
 800e246:	3301      	adds	r3, #1
 800e248:	181b      	adds	r3, r3, r0
 800e24a:	106d      	asrs	r5, r5, #1
 800e24c:	42ab      	cmp	r3, r5
 800e24e:	d900      	bls.n	800e252 <__ssprint_r+0x6e>
 800e250:	001d      	movs	r5, r3
 800e252:	0552      	lsls	r2, r2, #21
 800e254:	d532      	bpl.n	800e2bc <__ssprint_r+0xd8>
 800e256:	0029      	movs	r1, r5
 800e258:	9805      	ldr	r0, [sp, #20]
 800e25a:	f7f9 fa77 	bl	800774c <_malloc_r>
 800e25e:	1e06      	subs	r6, r0, #0
 800e260:	d036      	beq.n	800e2d0 <__ssprint_r+0xec>
 800e262:	9a04      	ldr	r2, [sp, #16]
 800e264:	6921      	ldr	r1, [r4, #16]
 800e266:	f7fa fd94 	bl	8008d92 <memcpy>
 800e26a:	89a2      	ldrh	r2, [r4, #12]
 800e26c:	4b1e      	ldr	r3, [pc, #120]	; (800e2e8 <__ssprint_r+0x104>)
 800e26e:	401a      	ands	r2, r3
 800e270:	2380      	movs	r3, #128	; 0x80
 800e272:	4313      	orrs	r3, r2
 800e274:	81a3      	strh	r3, [r4, #12]
 800e276:	9b04      	ldr	r3, [sp, #16]
 800e278:	6126      	str	r6, [r4, #16]
 800e27a:	18f6      	adds	r6, r6, r3
 800e27c:	6026      	str	r6, [r4, #0]
 800e27e:	6165      	str	r5, [r4, #20]
 800e280:	9e01      	ldr	r6, [sp, #4]
 800e282:	1aed      	subs	r5, r5, r3
 800e284:	60a5      	str	r5, [r4, #8]
 800e286:	9b01      	ldr	r3, [sp, #4]
 800e288:	429e      	cmp	r6, r3
 800e28a:	d900      	bls.n	800e28e <__ssprint_r+0xaa>
 800e28c:	001e      	movs	r6, r3
 800e28e:	0032      	movs	r2, r6
 800e290:	9902      	ldr	r1, [sp, #8]
 800e292:	6820      	ldr	r0, [r4, #0]
 800e294:	f001 f86d 	bl	800f372 <memmove>
 800e298:	9a01      	ldr	r2, [sp, #4]
 800e29a:	68a3      	ldr	r3, [r4, #8]
 800e29c:	4694      	mov	ip, r2
 800e29e:	1b9b      	subs	r3, r3, r6
 800e2a0:	60a3      	str	r3, [r4, #8]
 800e2a2:	6823      	ldr	r3, [r4, #0]
 800e2a4:	199b      	adds	r3, r3, r6
 800e2a6:	6023      	str	r3, [r4, #0]
 800e2a8:	9b02      	ldr	r3, [sp, #8]
 800e2aa:	4463      	add	r3, ip
 800e2ac:	9302      	str	r3, [sp, #8]
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	1a9b      	subs	r3, r3, r2
 800e2b2:	60bb      	str	r3, [r7, #8]
 800e2b4:	d0a3      	beq.n	800e1fe <__ssprint_r+0x1a>
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	9301      	str	r3, [sp, #4]
 800e2ba:	e7ae      	b.n	800e21a <__ssprint_r+0x36>
 800e2bc:	002a      	movs	r2, r5
 800e2be:	9805      	ldr	r0, [sp, #20]
 800e2c0:	f7ff fbc0 	bl	800da44 <_realloc_r>
 800e2c4:	1e06      	subs	r6, r0, #0
 800e2c6:	d1d6      	bne.n	800e276 <__ssprint_r+0x92>
 800e2c8:	6921      	ldr	r1, [r4, #16]
 800e2ca:	9805      	ldr	r0, [sp, #20]
 800e2cc:	f7fa fddc 	bl	8008e88 <_free_r>
 800e2d0:	230c      	movs	r3, #12
 800e2d2:	9a05      	ldr	r2, [sp, #20]
 800e2d4:	2001      	movs	r0, #1
 800e2d6:	6013      	str	r3, [r2, #0]
 800e2d8:	89a2      	ldrh	r2, [r4, #12]
 800e2da:	3334      	adds	r3, #52	; 0x34
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	81a3      	strh	r3, [r4, #12]
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	4240      	negs	r0, r0
 800e2e4:	60bb      	str	r3, [r7, #8]
 800e2e6:	e78b      	b.n	800e200 <__ssprint_r+0x1c>
 800e2e8:	fffffb7f 	.word	0xfffffb7f

0800e2ec <_sungetc_r>:
 800e2ec:	b570      	push	{r4, r5, r6, lr}
 800e2ee:	0014      	movs	r4, r2
 800e2f0:	1c4b      	adds	r3, r1, #1
 800e2f2:	d103      	bne.n	800e2fc <_sungetc_r+0x10>
 800e2f4:	2501      	movs	r5, #1
 800e2f6:	426d      	negs	r5, r5
 800e2f8:	0028      	movs	r0, r5
 800e2fa:	bd70      	pop	{r4, r5, r6, pc}
 800e2fc:	8993      	ldrh	r3, [r2, #12]
 800e2fe:	2220      	movs	r2, #32
 800e300:	4393      	bics	r3, r2
 800e302:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e304:	81a3      	strh	r3, [r4, #12]
 800e306:	b2ce      	uxtb	r6, r1
 800e308:	6863      	ldr	r3, [r4, #4]
 800e30a:	b2cd      	uxtb	r5, r1
 800e30c:	2a00      	cmp	r2, #0
 800e30e:	d010      	beq.n	800e332 <_sungetc_r+0x46>
 800e310:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e312:	429a      	cmp	r2, r3
 800e314:	dd07      	ble.n	800e326 <_sungetc_r+0x3a>
 800e316:	6823      	ldr	r3, [r4, #0]
 800e318:	3b01      	subs	r3, #1
 800e31a:	6023      	str	r3, [r4, #0]
 800e31c:	701e      	strb	r6, [r3, #0]
 800e31e:	6863      	ldr	r3, [r4, #4]
 800e320:	3301      	adds	r3, #1
 800e322:	6063      	str	r3, [r4, #4]
 800e324:	e7e8      	b.n	800e2f8 <_sungetc_r+0xc>
 800e326:	0021      	movs	r1, r4
 800e328:	f000 ff1a 	bl	800f160 <__submore>
 800e32c:	2800      	cmp	r0, #0
 800e32e:	d0f2      	beq.n	800e316 <_sungetc_r+0x2a>
 800e330:	e7e0      	b.n	800e2f4 <_sungetc_r+0x8>
 800e332:	6921      	ldr	r1, [r4, #16]
 800e334:	6822      	ldr	r2, [r4, #0]
 800e336:	2900      	cmp	r1, #0
 800e338:	d007      	beq.n	800e34a <_sungetc_r+0x5e>
 800e33a:	4291      	cmp	r1, r2
 800e33c:	d205      	bcs.n	800e34a <_sungetc_r+0x5e>
 800e33e:	1e51      	subs	r1, r2, #1
 800e340:	7808      	ldrb	r0, [r1, #0]
 800e342:	42a8      	cmp	r0, r5
 800e344:	d101      	bne.n	800e34a <_sungetc_r+0x5e>
 800e346:	6021      	str	r1, [r4, #0]
 800e348:	e7ea      	b.n	800e320 <_sungetc_r+0x34>
 800e34a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e34c:	0023      	movs	r3, r4
 800e34e:	3340      	adds	r3, #64	; 0x40
 800e350:	6323      	str	r3, [r4, #48]	; 0x30
 800e352:	2303      	movs	r3, #3
 800e354:	6363      	str	r3, [r4, #52]	; 0x34
 800e356:	0023      	movs	r3, r4
 800e358:	3342      	adds	r3, #66	; 0x42
 800e35a:	63a2      	str	r2, [r4, #56]	; 0x38
 800e35c:	701e      	strb	r6, [r3, #0]
 800e35e:	6023      	str	r3, [r4, #0]
 800e360:	2301      	movs	r3, #1
 800e362:	e7de      	b.n	800e322 <_sungetc_r+0x36>

0800e364 <__ssrefill_r>:
 800e364:	b510      	push	{r4, lr}
 800e366:	000c      	movs	r4, r1
 800e368:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800e36a:	2900      	cmp	r1, #0
 800e36c:	d00e      	beq.n	800e38c <__ssrefill_r+0x28>
 800e36e:	0023      	movs	r3, r4
 800e370:	3340      	adds	r3, #64	; 0x40
 800e372:	4299      	cmp	r1, r3
 800e374:	d001      	beq.n	800e37a <__ssrefill_r+0x16>
 800e376:	f7fa fd87 	bl	8008e88 <_free_r>
 800e37a:	2000      	movs	r0, #0
 800e37c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e37e:	6320      	str	r0, [r4, #48]	; 0x30
 800e380:	6063      	str	r3, [r4, #4]
 800e382:	4283      	cmp	r3, r0
 800e384:	d002      	beq.n	800e38c <__ssrefill_r+0x28>
 800e386:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e388:	6023      	str	r3, [r4, #0]
 800e38a:	bd10      	pop	{r4, pc}
 800e38c:	6923      	ldr	r3, [r4, #16]
 800e38e:	2001      	movs	r0, #1
 800e390:	6023      	str	r3, [r4, #0]
 800e392:	2300      	movs	r3, #0
 800e394:	89a2      	ldrh	r2, [r4, #12]
 800e396:	6063      	str	r3, [r4, #4]
 800e398:	3320      	adds	r3, #32
 800e39a:	4313      	orrs	r3, r2
 800e39c:	81a3      	strh	r3, [r4, #12]
 800e39e:	4240      	negs	r0, r0
 800e3a0:	e7f3      	b.n	800e38a <__ssrefill_r+0x26>

0800e3a2 <_sfread_r>:
 800e3a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3a4:	0014      	movs	r4, r2
 800e3a6:	435c      	muls	r4, r3
 800e3a8:	b087      	sub	sp, #28
 800e3aa:	1e26      	subs	r6, r4, #0
 800e3ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e3ae:	9005      	str	r0, [sp, #20]
 800e3b0:	9101      	str	r1, [sp, #4]
 800e3b2:	9202      	str	r2, [sp, #8]
 800e3b4:	9303      	str	r3, [sp, #12]
 800e3b6:	d11e      	bne.n	800e3f6 <_sfread_r+0x54>
 800e3b8:	0020      	movs	r0, r4
 800e3ba:	b007      	add	sp, #28
 800e3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3be:	003a      	movs	r2, r7
 800e3c0:	9801      	ldr	r0, [sp, #4]
 800e3c2:	f7fa fce6 	bl	8008d92 <memcpy>
 800e3c6:	682b      	ldr	r3, [r5, #0]
 800e3c8:	0029      	movs	r1, r5
 800e3ca:	19db      	adds	r3, r3, r7
 800e3cc:	602b      	str	r3, [r5, #0]
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	606b      	str	r3, [r5, #4]
 800e3d2:	9b01      	ldr	r3, [sp, #4]
 800e3d4:	9805      	ldr	r0, [sp, #20]
 800e3d6:	19db      	adds	r3, r3, r7
 800e3d8:	9301      	str	r3, [sp, #4]
 800e3da:	1bf3      	subs	r3, r6, r7
 800e3dc:	9304      	str	r3, [sp, #16]
 800e3de:	f7ff ffc1 	bl	800e364 <__ssrefill_r>
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	d006      	beq.n	800e3f4 <_sfread_r+0x52>
 800e3e6:	193c      	adds	r4, r7, r4
 800e3e8:	1ba0      	subs	r0, r4, r6
 800e3ea:	9902      	ldr	r1, [sp, #8]
 800e3ec:	f7f1 fea6 	bl	800013c <__udivsi3>
 800e3f0:	0004      	movs	r4, r0
 800e3f2:	e7e1      	b.n	800e3b8 <_sfread_r+0x16>
 800e3f4:	9e04      	ldr	r6, [sp, #16]
 800e3f6:	686f      	ldr	r7, [r5, #4]
 800e3f8:	6829      	ldr	r1, [r5, #0]
 800e3fa:	42b7      	cmp	r7, r6
 800e3fc:	d3df      	bcc.n	800e3be <_sfread_r+0x1c>
 800e3fe:	0032      	movs	r2, r6
 800e400:	9801      	ldr	r0, [sp, #4]
 800e402:	f7fa fcc6 	bl	8008d92 <memcpy>
 800e406:	686b      	ldr	r3, [r5, #4]
 800e408:	9c03      	ldr	r4, [sp, #12]
 800e40a:	1b9b      	subs	r3, r3, r6
 800e40c:	606b      	str	r3, [r5, #4]
 800e40e:	682b      	ldr	r3, [r5, #0]
 800e410:	199b      	adds	r3, r3, r6
 800e412:	602b      	str	r3, [r5, #0]
 800e414:	e7d0      	b.n	800e3b8 <_sfread_r+0x16>

0800e416 <__sprint_r>:
 800e416:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e418:	6893      	ldr	r3, [r2, #8]
 800e41a:	b085      	sub	sp, #20
 800e41c:	9001      	str	r0, [sp, #4]
 800e41e:	000d      	movs	r5, r1
 800e420:	0014      	movs	r4, r2
 800e422:	1e18      	subs	r0, r3, #0
 800e424:	d018      	beq.n	800e458 <__sprint_r+0x42>
 800e426:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e428:	049b      	lsls	r3, r3, #18
 800e42a:	d524      	bpl.n	800e476 <__sprint_r+0x60>
 800e42c:	6817      	ldr	r7, [r2, #0]
 800e42e:	2600      	movs	r6, #0
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	9302      	str	r3, [sp, #8]
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	9300      	str	r3, [sp, #0]
 800e438:	089b      	lsrs	r3, r3, #2
 800e43a:	9303      	str	r3, [sp, #12]
 800e43c:	9b03      	ldr	r3, [sp, #12]
 800e43e:	42b3      	cmp	r3, r6
 800e440:	dc0e      	bgt.n	800e460 <__sprint_r+0x4a>
 800e442:	2203      	movs	r2, #3
 800e444:	9b00      	ldr	r3, [sp, #0]
 800e446:	68a0      	ldr	r0, [r4, #8]
 800e448:	4393      	bics	r3, r2
 800e44a:	1ac0      	subs	r0, r0, r3
 800e44c:	60a0      	str	r0, [r4, #8]
 800e44e:	3708      	adds	r7, #8
 800e450:	2800      	cmp	r0, #0
 800e452:	d1ec      	bne.n	800e42e <__sprint_r+0x18>
 800e454:	2300      	movs	r3, #0
 800e456:	60a3      	str	r3, [r4, #8]
 800e458:	2300      	movs	r3, #0
 800e45a:	6063      	str	r3, [r4, #4]
 800e45c:	b005      	add	sp, #20
 800e45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e460:	9902      	ldr	r1, [sp, #8]
 800e462:	00b3      	lsls	r3, r6, #2
 800e464:	58c9      	ldr	r1, [r1, r3]
 800e466:	002a      	movs	r2, r5
 800e468:	9801      	ldr	r0, [sp, #4]
 800e46a:	f000 ff59 	bl	800f320 <_fputwc_r>
 800e46e:	1c43      	adds	r3, r0, #1
 800e470:	d0f0      	beq.n	800e454 <__sprint_r+0x3e>
 800e472:	3601      	adds	r6, #1
 800e474:	e7e2      	b.n	800e43c <__sprint_r+0x26>
 800e476:	9801      	ldr	r0, [sp, #4]
 800e478:	f000 fd14 	bl	800eea4 <__sfvwrite_r>
 800e47c:	e7ea      	b.n	800e454 <__sprint_r+0x3e>
	...

0800e480 <_vfiprintf_r>:
 800e480:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e482:	b0c1      	sub	sp, #260	; 0x104
 800e484:	001c      	movs	r4, r3
 800e486:	001f      	movs	r7, r3
 800e488:	9006      	str	r0, [sp, #24]
 800e48a:	9103      	str	r1, [sp, #12]
 800e48c:	9207      	str	r2, [sp, #28]
 800e48e:	2800      	cmp	r0, #0
 800e490:	d004      	beq.n	800e49c <_vfiprintf_r+0x1c>
 800e492:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e494:	2b00      	cmp	r3, #0
 800e496:	d101      	bne.n	800e49c <_vfiprintf_r+0x1c>
 800e498:	f7fa facc 	bl	8008a34 <__sinit>
 800e49c:	9b03      	ldr	r3, [sp, #12]
 800e49e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4a0:	07db      	lsls	r3, r3, #31
 800e4a2:	d407      	bmi.n	800e4b4 <_vfiprintf_r+0x34>
 800e4a4:	9b03      	ldr	r3, [sp, #12]
 800e4a6:	899b      	ldrh	r3, [r3, #12]
 800e4a8:	059b      	lsls	r3, r3, #22
 800e4aa:	d403      	bmi.n	800e4b4 <_vfiprintf_r+0x34>
 800e4ac:	9b03      	ldr	r3, [sp, #12]
 800e4ae:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e4b0:	f7fa fc62 	bl	8008d78 <__retarget_lock_acquire_recursive>
 800e4b4:	9b03      	ldr	r3, [sp, #12]
 800e4b6:	220c      	movs	r2, #12
 800e4b8:	5e9a      	ldrsh	r2, [r3, r2]
 800e4ba:	2380      	movs	r3, #128	; 0x80
 800e4bc:	019b      	lsls	r3, r3, #6
 800e4be:	421a      	tst	r2, r3
 800e4c0:	d107      	bne.n	800e4d2 <_vfiprintf_r+0x52>
 800e4c2:	4313      	orrs	r3, r2
 800e4c4:	9a03      	ldr	r2, [sp, #12]
 800e4c6:	8193      	strh	r3, [r2, #12]
 800e4c8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800e4ca:	4aa3      	ldr	r2, [pc, #652]	; (800e758 <_vfiprintf_r+0x2d8>)
 800e4cc:	4013      	ands	r3, r2
 800e4ce:	9a03      	ldr	r2, [sp, #12]
 800e4d0:	6653      	str	r3, [r2, #100]	; 0x64
 800e4d2:	9b03      	ldr	r3, [sp, #12]
 800e4d4:	899b      	ldrh	r3, [r3, #12]
 800e4d6:	071b      	lsls	r3, r3, #28
 800e4d8:	d503      	bpl.n	800e4e2 <_vfiprintf_r+0x62>
 800e4da:	9b03      	ldr	r3, [sp, #12]
 800e4dc:	691b      	ldr	r3, [r3, #16]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d118      	bne.n	800e514 <_vfiprintf_r+0x94>
 800e4e2:	9903      	ldr	r1, [sp, #12]
 800e4e4:	9806      	ldr	r0, [sp, #24]
 800e4e6:	f000 fe79 	bl	800f1dc <__swsetup_r>
 800e4ea:	2800      	cmp	r0, #0
 800e4ec:	d012      	beq.n	800e514 <_vfiprintf_r+0x94>
 800e4ee:	9b03      	ldr	r3, [sp, #12]
 800e4f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4f2:	07db      	lsls	r3, r3, #31
 800e4f4:	d505      	bpl.n	800e502 <_vfiprintf_r+0x82>
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	425b      	negs	r3, r3
 800e4fa:	9308      	str	r3, [sp, #32]
 800e4fc:	9808      	ldr	r0, [sp, #32]
 800e4fe:	b041      	add	sp, #260	; 0x104
 800e500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e502:	9b03      	ldr	r3, [sp, #12]
 800e504:	899b      	ldrh	r3, [r3, #12]
 800e506:	059b      	lsls	r3, r3, #22
 800e508:	d4f5      	bmi.n	800e4f6 <_vfiprintf_r+0x76>
 800e50a:	9b03      	ldr	r3, [sp, #12]
 800e50c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e50e:	f7fa fc34 	bl	8008d7a <__retarget_lock_release_recursive>
 800e512:	e7f0      	b.n	800e4f6 <_vfiprintf_r+0x76>
 800e514:	221a      	movs	r2, #26
 800e516:	9b03      	ldr	r3, [sp, #12]
 800e518:	899b      	ldrh	r3, [r3, #12]
 800e51a:	401a      	ands	r2, r3
 800e51c:	2a0a      	cmp	r2, #10
 800e51e:	d116      	bne.n	800e54e <_vfiprintf_r+0xce>
 800e520:	9a03      	ldr	r2, [sp, #12]
 800e522:	210e      	movs	r1, #14
 800e524:	5e52      	ldrsh	r2, [r2, r1]
 800e526:	2a00      	cmp	r2, #0
 800e528:	db11      	blt.n	800e54e <_vfiprintf_r+0xce>
 800e52a:	9a03      	ldr	r2, [sp, #12]
 800e52c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e52e:	07d2      	lsls	r2, r2, #31
 800e530:	d405      	bmi.n	800e53e <_vfiprintf_r+0xbe>
 800e532:	059b      	lsls	r3, r3, #22
 800e534:	d403      	bmi.n	800e53e <_vfiprintf_r+0xbe>
 800e536:	9b03      	ldr	r3, [sp, #12]
 800e538:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e53a:	f7fa fc1e 	bl	8008d7a <__retarget_lock_release_recursive>
 800e53e:	0023      	movs	r3, r4
 800e540:	9a07      	ldr	r2, [sp, #28]
 800e542:	9903      	ldr	r1, [sp, #12]
 800e544:	9806      	ldr	r0, [sp, #24]
 800e546:	f000 fc69 	bl	800ee1c <__sbprintf>
 800e54a:	9008      	str	r0, [sp, #32]
 800e54c:	e7d6      	b.n	800e4fc <_vfiprintf_r+0x7c>
 800e54e:	2300      	movs	r3, #0
 800e550:	ad17      	add	r5, sp, #92	; 0x5c
 800e552:	9514      	str	r5, [sp, #80]	; 0x50
 800e554:	9316      	str	r3, [sp, #88]	; 0x58
 800e556:	9315      	str	r3, [sp, #84]	; 0x54
 800e558:	930c      	str	r3, [sp, #48]	; 0x30
 800e55a:	930d      	str	r3, [sp, #52]	; 0x34
 800e55c:	930e      	str	r3, [sp, #56]	; 0x38
 800e55e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e560:	9308      	str	r3, [sp, #32]
 800e562:	9c07      	ldr	r4, [sp, #28]
 800e564:	7823      	ldrb	r3, [r4, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d002      	beq.n	800e570 <_vfiprintf_r+0xf0>
 800e56a:	2b25      	cmp	r3, #37	; 0x25
 800e56c:	d000      	beq.n	800e570 <_vfiprintf_r+0xf0>
 800e56e:	e08d      	b.n	800e68c <_vfiprintf_r+0x20c>
 800e570:	9b07      	ldr	r3, [sp, #28]
 800e572:	1ae6      	subs	r6, r4, r3
 800e574:	429c      	cmp	r4, r3
 800e576:	d016      	beq.n	800e5a6 <_vfiprintf_r+0x126>
 800e578:	602b      	str	r3, [r5, #0]
 800e57a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e57c:	606e      	str	r6, [r5, #4]
 800e57e:	199b      	adds	r3, r3, r6
 800e580:	9316      	str	r3, [sp, #88]	; 0x58
 800e582:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e584:	3508      	adds	r5, #8
 800e586:	3301      	adds	r3, #1
 800e588:	9315      	str	r3, [sp, #84]	; 0x54
 800e58a:	2b07      	cmp	r3, #7
 800e58c:	dd08      	ble.n	800e5a0 <_vfiprintf_r+0x120>
 800e58e:	9903      	ldr	r1, [sp, #12]
 800e590:	9806      	ldr	r0, [sp, #24]
 800e592:	aa14      	add	r2, sp, #80	; 0x50
 800e594:	f7ff ff3f 	bl	800e416 <__sprint_r>
 800e598:	2800      	cmp	r0, #0
 800e59a:	d000      	beq.n	800e59e <_vfiprintf_r+0x11e>
 800e59c:	e3d9      	b.n	800ed52 <_vfiprintf_r+0x8d2>
 800e59e:	ad17      	add	r5, sp, #92	; 0x5c
 800e5a0:	9b08      	ldr	r3, [sp, #32]
 800e5a2:	199b      	adds	r3, r3, r6
 800e5a4:	9308      	str	r3, [sp, #32]
 800e5a6:	7823      	ldrb	r3, [r4, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d101      	bne.n	800e5b0 <_vfiprintf_r+0x130>
 800e5ac:	f000 fbf6 	bl	800ed9c <_vfiprintf_r+0x91c>
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	a912      	add	r1, sp, #72	; 0x48
 800e5b4:	70ca      	strb	r2, [r1, #3]
 800e5b6:	2101      	movs	r1, #1
 800e5b8:	1c63      	adds	r3, r4, #1
 800e5ba:	0014      	movs	r4, r2
 800e5bc:	4249      	negs	r1, r1
 800e5be:	9105      	str	r1, [sp, #20]
 800e5c0:	9209      	str	r2, [sp, #36]	; 0x24
 800e5c2:	1c5a      	adds	r2, r3, #1
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	9207      	str	r2, [sp, #28]
 800e5c8:	0018      	movs	r0, r3
 800e5ca:	3820      	subs	r0, #32
 800e5cc:	285a      	cmp	r0, #90	; 0x5a
 800e5ce:	d900      	bls.n	800e5d2 <_vfiprintf_r+0x152>
 800e5d0:	e362      	b.n	800ec98 <_vfiprintf_r+0x818>
 800e5d2:	f7f1 fda9 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e5d6:	0078      	.short	0x0078
 800e5d8:	03610361 	.word	0x03610361
 800e5dc:	03610081 	.word	0x03610081
 800e5e0:	03610361 	.word	0x03610361
 800e5e4:	0361005d 	.word	0x0361005d
 800e5e8:	00830361 	.word	0x00830361
 800e5ec:	0361008b 	.word	0x0361008b
 800e5f0:	008f0089 	.word	0x008f0089
 800e5f4:	00ad0361 	.word	0x00ad0361
 800e5f8:	00af00af 	.word	0x00af00af
 800e5fc:	00af00af 	.word	0x00af00af
 800e600:	00af00af 	.word	0x00af00af
 800e604:	00af00af 	.word	0x00af00af
 800e608:	036100af 	.word	0x036100af
 800e60c:	03610361 	.word	0x03610361
 800e610:	03610361 	.word	0x03610361
 800e614:	03610361 	.word	0x03610361
 800e618:	03610361 	.word	0x03610361
 800e61c:	00e600da 	.word	0x00e600da
 800e620:	03610361 	.word	0x03610361
 800e624:	03610361 	.word	0x03610361
 800e628:	03610361 	.word	0x03610361
 800e62c:	03610361 	.word	0x03610361
 800e630:	03610361 	.word	0x03610361
 800e634:	03610143 	.word	0x03610143
 800e638:	03610361 	.word	0x03610361
 800e63c:	03610182 	.word	0x03610182
 800e640:	0361027c 	.word	0x0361027c
 800e644:	02ae0361 	.word	0x02ae0361
 800e648:	03610361 	.word	0x03610361
 800e64c:	03610361 	.word	0x03610361
 800e650:	03610361 	.word	0x03610361
 800e654:	03610361 	.word	0x03610361
 800e658:	03610361 	.word	0x03610361
 800e65c:	00e800da 	.word	0x00e800da
 800e660:	03610361 	.word	0x03610361
 800e664:	00c30361 	.word	0x00c30361
 800e668:	00d600e8 	.word	0x00d600e8
 800e66c:	00cf0361 	.word	0x00cf0361
 800e670:	01260361 	.word	0x01260361
 800e674:	01740145 	.word	0x01740145
 800e678:	036100d6 	.word	0x036100d6
 800e67c:	007f0182 	.word	0x007f0182
 800e680:	0361027e 	.word	0x0361027e
 800e684:	02cd0361 	.word	0x02cd0361
 800e688:	007f0361 	.word	0x007f0361
 800e68c:	3401      	adds	r4, #1
 800e68e:	e769      	b.n	800e564 <_vfiprintf_r+0xe4>
 800e690:	9806      	ldr	r0, [sp, #24]
 800e692:	f7fe fa47 	bl	800cb24 <_localeconv_r>
 800e696:	6843      	ldr	r3, [r0, #4]
 800e698:	0018      	movs	r0, r3
 800e69a:	930f      	str	r3, [sp, #60]	; 0x3c
 800e69c:	f7f1 fd32 	bl	8000104 <strlen>
 800e6a0:	900e      	str	r0, [sp, #56]	; 0x38
 800e6a2:	9806      	ldr	r0, [sp, #24]
 800e6a4:	f7fe fa3e 	bl	800cb24 <_localeconv_r>
 800e6a8:	6883      	ldr	r3, [r0, #8]
 800e6aa:	930d      	str	r3, [sp, #52]	; 0x34
 800e6ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d010      	beq.n	800e6d4 <_vfiprintf_r+0x254>
 800e6b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00d      	beq.n	800e6d4 <_vfiprintf_r+0x254>
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00a      	beq.n	800e6d4 <_vfiprintf_r+0x254>
 800e6be:	2380      	movs	r3, #128	; 0x80
 800e6c0:	00db      	lsls	r3, r3, #3
 800e6c2:	431c      	orrs	r4, r3
 800e6c4:	e006      	b.n	800e6d4 <_vfiprintf_r+0x254>
 800e6c6:	ab12      	add	r3, sp, #72	; 0x48
 800e6c8:	78da      	ldrb	r2, [r3, #3]
 800e6ca:	3303      	adds	r3, #3
 800e6cc:	2a00      	cmp	r2, #0
 800e6ce:	d101      	bne.n	800e6d4 <_vfiprintf_r+0x254>
 800e6d0:	3220      	adds	r2, #32
 800e6d2:	701a      	strb	r2, [r3, #0]
 800e6d4:	9b07      	ldr	r3, [sp, #28]
 800e6d6:	e774      	b.n	800e5c2 <_vfiprintf_r+0x142>
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e7f2      	b.n	800e6c2 <_vfiprintf_r+0x242>
 800e6dc:	cf08      	ldmia	r7!, {r3}
 800e6de:	9309      	str	r3, [sp, #36]	; 0x24
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	daf7      	bge.n	800e6d4 <_vfiprintf_r+0x254>
 800e6e4:	425b      	negs	r3, r3
 800e6e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e6e8:	2304      	movs	r3, #4
 800e6ea:	e7ea      	b.n	800e6c2 <_vfiprintf_r+0x242>
 800e6ec:	222b      	movs	r2, #43	; 0x2b
 800e6ee:	ab12      	add	r3, sp, #72	; 0x48
 800e6f0:	70da      	strb	r2, [r3, #3]
 800e6f2:	e7ef      	b.n	800e6d4 <_vfiprintf_r+0x254>
 800e6f4:	9b07      	ldr	r3, [sp, #28]
 800e6f6:	1c5a      	adds	r2, r3, #1
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	2b2a      	cmp	r3, #42	; 0x2a
 800e6fc:	d00f      	beq.n	800e71e <_vfiprintf_r+0x29e>
 800e6fe:	2100      	movs	r1, #0
 800e700:	9105      	str	r1, [sp, #20]
 800e702:	0019      	movs	r1, r3
 800e704:	3930      	subs	r1, #48	; 0x30
 800e706:	9207      	str	r2, [sp, #28]
 800e708:	2909      	cmp	r1, #9
 800e70a:	d900      	bls.n	800e70e <_vfiprintf_r+0x28e>
 800e70c:	e75c      	b.n	800e5c8 <_vfiprintf_r+0x148>
 800e70e:	200a      	movs	r0, #10
 800e710:	9b05      	ldr	r3, [sp, #20]
 800e712:	4343      	muls	r3, r0
 800e714:	185b      	adds	r3, r3, r1
 800e716:	9305      	str	r3, [sp, #20]
 800e718:	7813      	ldrb	r3, [r2, #0]
 800e71a:	3201      	adds	r2, #1
 800e71c:	e7f1      	b.n	800e702 <_vfiprintf_r+0x282>
 800e71e:	cf08      	ldmia	r7!, {r3}
 800e720:	9305      	str	r3, [sp, #20]
 800e722:	2b00      	cmp	r3, #0
 800e724:	da02      	bge.n	800e72c <_vfiprintf_r+0x2ac>
 800e726:	2301      	movs	r3, #1
 800e728:	425b      	negs	r3, r3
 800e72a:	9305      	str	r3, [sp, #20]
 800e72c:	9207      	str	r2, [sp, #28]
 800e72e:	e7d1      	b.n	800e6d4 <_vfiprintf_r+0x254>
 800e730:	2380      	movs	r3, #128	; 0x80
 800e732:	e7c6      	b.n	800e6c2 <_vfiprintf_r+0x242>
 800e734:	2100      	movs	r1, #0
 800e736:	9a07      	ldr	r2, [sp, #28]
 800e738:	9109      	str	r1, [sp, #36]	; 0x24
 800e73a:	200a      	movs	r0, #10
 800e73c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e73e:	3b30      	subs	r3, #48	; 0x30
 800e740:	4341      	muls	r1, r0
 800e742:	185b      	adds	r3, r3, r1
 800e744:	9309      	str	r3, [sp, #36]	; 0x24
 800e746:	0013      	movs	r3, r2
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	3201      	adds	r2, #1
 800e74c:	0019      	movs	r1, r3
 800e74e:	3930      	subs	r1, #48	; 0x30
 800e750:	9207      	str	r2, [sp, #28]
 800e752:	2909      	cmp	r1, #9
 800e754:	d9f1      	bls.n	800e73a <_vfiprintf_r+0x2ba>
 800e756:	e737      	b.n	800e5c8 <_vfiprintf_r+0x148>
 800e758:	ffffdfff 	.word	0xffffdfff
 800e75c:	9b07      	ldr	r3, [sp, #28]
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	2b68      	cmp	r3, #104	; 0x68
 800e762:	d105      	bne.n	800e770 <_vfiprintf_r+0x2f0>
 800e764:	9b07      	ldr	r3, [sp, #28]
 800e766:	3301      	adds	r3, #1
 800e768:	9307      	str	r3, [sp, #28]
 800e76a:	2380      	movs	r3, #128	; 0x80
 800e76c:	009b      	lsls	r3, r3, #2
 800e76e:	e7a8      	b.n	800e6c2 <_vfiprintf_r+0x242>
 800e770:	2340      	movs	r3, #64	; 0x40
 800e772:	e7a6      	b.n	800e6c2 <_vfiprintf_r+0x242>
 800e774:	9b07      	ldr	r3, [sp, #28]
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	2b6c      	cmp	r3, #108	; 0x6c
 800e77a:	d104      	bne.n	800e786 <_vfiprintf_r+0x306>
 800e77c:	9b07      	ldr	r3, [sp, #28]
 800e77e:	3301      	adds	r3, #1
 800e780:	9307      	str	r3, [sp, #28]
 800e782:	2320      	movs	r3, #32
 800e784:	e79d      	b.n	800e6c2 <_vfiprintf_r+0x242>
 800e786:	2310      	movs	r3, #16
 800e788:	e79b      	b.n	800e6c2 <_vfiprintf_r+0x242>
 800e78a:	003a      	movs	r2, r7
 800e78c:	ca08      	ldmia	r2!, {r3}
 800e78e:	ae27      	add	r6, sp, #156	; 0x9c
 800e790:	7033      	strb	r3, [r6, #0]
 800e792:	2300      	movs	r3, #0
 800e794:	9204      	str	r2, [sp, #16]
 800e796:	aa12      	add	r2, sp, #72	; 0x48
 800e798:	70d3      	strb	r3, [r2, #3]
 800e79a:	2201      	movs	r2, #1
 800e79c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e79e:	9205      	str	r2, [sp, #20]
 800e7a0:	e0b0      	b.n	800e904 <_vfiprintf_r+0x484>
 800e7a2:	2310      	movs	r3, #16
 800e7a4:	431c      	orrs	r4, r3
 800e7a6:	06a3      	lsls	r3, r4, #26
 800e7a8:	d52a      	bpl.n	800e800 <_vfiprintf_r+0x380>
 800e7aa:	2307      	movs	r3, #7
 800e7ac:	3707      	adds	r7, #7
 800e7ae:	439f      	bics	r7, r3
 800e7b0:	0039      	movs	r1, r7
 800e7b2:	c90c      	ldmia	r1!, {r2, r3}
 800e7b4:	9200      	str	r2, [sp, #0]
 800e7b6:	9301      	str	r3, [sp, #4]
 800e7b8:	9104      	str	r1, [sp, #16]
 800e7ba:	9a01      	ldr	r2, [sp, #4]
 800e7bc:	2301      	movs	r3, #1
 800e7be:	2a00      	cmp	r2, #0
 800e7c0:	da09      	bge.n	800e7d6 <_vfiprintf_r+0x356>
 800e7c2:	9e00      	ldr	r6, [sp, #0]
 800e7c4:	9f01      	ldr	r7, [sp, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	4271      	negs	r1, r6
 800e7ca:	41ba      	sbcs	r2, r7
 800e7cc:	9100      	str	r1, [sp, #0]
 800e7ce:	9201      	str	r2, [sp, #4]
 800e7d0:	212d      	movs	r1, #45	; 0x2d
 800e7d2:	aa12      	add	r2, sp, #72	; 0x48
 800e7d4:	70d1      	strb	r1, [r2, #3]
 800e7d6:	9901      	ldr	r1, [sp, #4]
 800e7d8:	9a00      	ldr	r2, [sp, #0]
 800e7da:	430a      	orrs	r2, r1
 800e7dc:	9905      	ldr	r1, [sp, #20]
 800e7de:	3101      	adds	r1, #1
 800e7e0:	d100      	bne.n	800e7e4 <_vfiprintf_r+0x364>
 800e7e2:	e2e9      	b.n	800edb8 <_vfiprintf_r+0x938>
 800e7e4:	2180      	movs	r1, #128	; 0x80
 800e7e6:	0027      	movs	r7, r4
 800e7e8:	438f      	bics	r7, r1
 800e7ea:	2a00      	cmp	r2, #0
 800e7ec:	d000      	beq.n	800e7f0 <_vfiprintf_r+0x370>
 800e7ee:	e2e7      	b.n	800edc0 <_vfiprintf_r+0x940>
 800e7f0:	9a05      	ldr	r2, [sp, #20]
 800e7f2:	2a00      	cmp	r2, #0
 800e7f4:	d100      	bne.n	800e7f8 <_vfiprintf_r+0x378>
 800e7f6:	e243      	b.n	800ec80 <_vfiprintf_r+0x800>
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d000      	beq.n	800e7fe <_vfiprintf_r+0x37e>
 800e7fc:	e2e3      	b.n	800edc6 <_vfiprintf_r+0x946>
 800e7fe:	e1e7      	b.n	800ebd0 <_vfiprintf_r+0x750>
 800e800:	003a      	movs	r2, r7
 800e802:	ca08      	ldmia	r2!, {r3}
 800e804:	9204      	str	r2, [sp, #16]
 800e806:	06e2      	lsls	r2, r4, #27
 800e808:	d503      	bpl.n	800e812 <_vfiprintf_r+0x392>
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	17db      	asrs	r3, r3, #31
 800e80e:	9301      	str	r3, [sp, #4]
 800e810:	e7d3      	b.n	800e7ba <_vfiprintf_r+0x33a>
 800e812:	0662      	lsls	r2, r4, #25
 800e814:	d501      	bpl.n	800e81a <_vfiprintf_r+0x39a>
 800e816:	b21b      	sxth	r3, r3
 800e818:	e7f7      	b.n	800e80a <_vfiprintf_r+0x38a>
 800e81a:	05a2      	lsls	r2, r4, #22
 800e81c:	d5f5      	bpl.n	800e80a <_vfiprintf_r+0x38a>
 800e81e:	b25b      	sxtb	r3, r3
 800e820:	e7f3      	b.n	800e80a <_vfiprintf_r+0x38a>
 800e822:	1d3b      	adds	r3, r7, #4
 800e824:	9304      	str	r3, [sp, #16]
 800e826:	06a3      	lsls	r3, r4, #26
 800e828:	d506      	bpl.n	800e838 <_vfiprintf_r+0x3b8>
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	9a08      	ldr	r2, [sp, #32]
 800e82e:	601a      	str	r2, [r3, #0]
 800e830:	17d2      	asrs	r2, r2, #31
 800e832:	605a      	str	r2, [r3, #4]
 800e834:	9f04      	ldr	r7, [sp, #16]
 800e836:	e694      	b.n	800e562 <_vfiprintf_r+0xe2>
 800e838:	06e3      	lsls	r3, r4, #27
 800e83a:	d503      	bpl.n	800e844 <_vfiprintf_r+0x3c4>
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	9a08      	ldr	r2, [sp, #32]
 800e840:	601a      	str	r2, [r3, #0]
 800e842:	e7f7      	b.n	800e834 <_vfiprintf_r+0x3b4>
 800e844:	0663      	lsls	r3, r4, #25
 800e846:	d503      	bpl.n	800e850 <_vfiprintf_r+0x3d0>
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	9a08      	ldr	r2, [sp, #32]
 800e84c:	801a      	strh	r2, [r3, #0]
 800e84e:	e7f1      	b.n	800e834 <_vfiprintf_r+0x3b4>
 800e850:	05a4      	lsls	r4, r4, #22
 800e852:	d5f3      	bpl.n	800e83c <_vfiprintf_r+0x3bc>
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	9a08      	ldr	r2, [sp, #32]
 800e858:	701a      	strb	r2, [r3, #0]
 800e85a:	e7eb      	b.n	800e834 <_vfiprintf_r+0x3b4>
 800e85c:	2310      	movs	r3, #16
 800e85e:	431c      	orrs	r4, r3
 800e860:	2320      	movs	r3, #32
 800e862:	0020      	movs	r0, r4
 800e864:	4018      	ands	r0, r3
 800e866:	421c      	tst	r4, r3
 800e868:	d00d      	beq.n	800e886 <_vfiprintf_r+0x406>
 800e86a:	3b19      	subs	r3, #25
 800e86c:	3707      	adds	r7, #7
 800e86e:	439f      	bics	r7, r3
 800e870:	0039      	movs	r1, r7
 800e872:	c90c      	ldmia	r1!, {r2, r3}
 800e874:	9200      	str	r2, [sp, #0]
 800e876:	9301      	str	r3, [sp, #4]
 800e878:	9104      	str	r1, [sp, #16]
 800e87a:	4bcc      	ldr	r3, [pc, #816]	; (800ebac <_vfiprintf_r+0x72c>)
 800e87c:	401c      	ands	r4, r3
 800e87e:	2300      	movs	r3, #0
 800e880:	2100      	movs	r1, #0
 800e882:	aa12      	add	r2, sp, #72	; 0x48
 800e884:	e7a6      	b.n	800e7d4 <_vfiprintf_r+0x354>
 800e886:	003a      	movs	r2, r7
 800e888:	ca08      	ldmia	r2!, {r3}
 800e88a:	0021      	movs	r1, r4
 800e88c:	9204      	str	r2, [sp, #16]
 800e88e:	2210      	movs	r2, #16
 800e890:	4011      	ands	r1, r2
 800e892:	4214      	tst	r4, r2
 800e894:	d002      	beq.n	800e89c <_vfiprintf_r+0x41c>
 800e896:	9300      	str	r3, [sp, #0]
 800e898:	9001      	str	r0, [sp, #4]
 800e89a:	e7ee      	b.n	800e87a <_vfiprintf_r+0x3fa>
 800e89c:	2240      	movs	r2, #64	; 0x40
 800e89e:	0020      	movs	r0, r4
 800e8a0:	4010      	ands	r0, r2
 800e8a2:	4214      	tst	r4, r2
 800e8a4:	d003      	beq.n	800e8ae <_vfiprintf_r+0x42e>
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	9300      	str	r3, [sp, #0]
 800e8aa:	9101      	str	r1, [sp, #4]
 800e8ac:	e7e5      	b.n	800e87a <_vfiprintf_r+0x3fa>
 800e8ae:	2280      	movs	r2, #128	; 0x80
 800e8b0:	0021      	movs	r1, r4
 800e8b2:	0092      	lsls	r2, r2, #2
 800e8b4:	4011      	ands	r1, r2
 800e8b6:	4214      	tst	r4, r2
 800e8b8:	d0f6      	beq.n	800e8a8 <_vfiprintf_r+0x428>
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	e7eb      	b.n	800e896 <_vfiprintf_r+0x416>
 800e8be:	003b      	movs	r3, r7
 800e8c0:	cb04      	ldmia	r3!, {r2}
 800e8c2:	49bb      	ldr	r1, [pc, #748]	; (800ebb0 <_vfiprintf_r+0x730>)
 800e8c4:	9304      	str	r3, [sp, #16]
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	9200      	str	r2, [sp, #0]
 800e8ca:	aa13      	add	r2, sp, #76	; 0x4c
 800e8cc:	8011      	strh	r1, [r2, #0]
 800e8ce:	4ab9      	ldr	r2, [pc, #740]	; (800ebb4 <_vfiprintf_r+0x734>)
 800e8d0:	9301      	str	r3, [sp, #4]
 800e8d2:	3302      	adds	r3, #2
 800e8d4:	431c      	orrs	r4, r3
 800e8d6:	920c      	str	r2, [sp, #48]	; 0x30
 800e8d8:	e7d2      	b.n	800e880 <_vfiprintf_r+0x400>
 800e8da:	003b      	movs	r3, r7
 800e8dc:	2700      	movs	r7, #0
 800e8de:	cb40      	ldmia	r3!, {r6}
 800e8e0:	9304      	str	r3, [sp, #16]
 800e8e2:	ab12      	add	r3, sp, #72	; 0x48
 800e8e4:	70df      	strb	r7, [r3, #3]
 800e8e6:	9b05      	ldr	r3, [sp, #20]
 800e8e8:	3301      	adds	r3, #1
 800e8ea:	d100      	bne.n	800e8ee <_vfiprintf_r+0x46e>
 800e8ec:	e0ea      	b.n	800eac4 <_vfiprintf_r+0x644>
 800e8ee:	0039      	movs	r1, r7
 800e8f0:	0030      	movs	r0, r6
 800e8f2:	9a05      	ldr	r2, [sp, #20]
 800e8f4:	f7fe f92e 	bl	800cb54 <memchr>
 800e8f8:	900b      	str	r0, [sp, #44]	; 0x2c
 800e8fa:	42b8      	cmp	r0, r7
 800e8fc:	d002      	beq.n	800e904 <_vfiprintf_r+0x484>
 800e8fe:	1b83      	subs	r3, r0, r6
 800e900:	9305      	str	r3, [sp, #20]
 800e902:	970b      	str	r7, [sp, #44]	; 0x2c
 800e904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e906:	9a05      	ldr	r2, [sp, #20]
 800e908:	930a      	str	r3, [sp, #40]	; 0x28
 800e90a:	4293      	cmp	r3, r2
 800e90c:	da00      	bge.n	800e910 <_vfiprintf_r+0x490>
 800e90e:	920a      	str	r2, [sp, #40]	; 0x28
 800e910:	ab12      	add	r3, sp, #72	; 0x48
 800e912:	3303      	adds	r3, #3
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	1e5a      	subs	r2, r3, #1
 800e918:	4193      	sbcs	r3, r2
 800e91a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e91c:	18d3      	adds	r3, r2, r3
 800e91e:	930a      	str	r3, [sp, #40]	; 0x28
 800e920:	0022      	movs	r2, r4
 800e922:	2302      	movs	r3, #2
 800e924:	401a      	ands	r2, r3
 800e926:	9210      	str	r2, [sp, #64]	; 0x40
 800e928:	421c      	tst	r4, r3
 800e92a:	d002      	beq.n	800e932 <_vfiprintf_r+0x4b2>
 800e92c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e92e:	3302      	adds	r3, #2
 800e930:	930a      	str	r3, [sp, #40]	; 0x28
 800e932:	2384      	movs	r3, #132	; 0x84
 800e934:	0022      	movs	r2, r4
 800e936:	401a      	ands	r2, r3
 800e938:	9211      	str	r2, [sp, #68]	; 0x44
 800e93a:	421c      	tst	r4, r3
 800e93c:	d11e      	bne.n	800e97c <_vfiprintf_r+0x4fc>
 800e93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e942:	1a9f      	subs	r7, r3, r2
 800e944:	2f00      	cmp	r7, #0
 800e946:	dd19      	ble.n	800e97c <_vfiprintf_r+0x4fc>
 800e948:	0029      	movs	r1, r5
 800e94a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e94c:	489a      	ldr	r0, [pc, #616]	; (800ebb8 <_vfiprintf_r+0x738>)
 800e94e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e950:	3301      	adds	r3, #1
 800e952:	3108      	adds	r1, #8
 800e954:	6028      	str	r0, [r5, #0]
 800e956:	2f10      	cmp	r7, #16
 800e958:	dd00      	ble.n	800e95c <_vfiprintf_r+0x4dc>
 800e95a:	e1a7      	b.n	800ecac <_vfiprintf_r+0x82c>
 800e95c:	606f      	str	r7, [r5, #4]
 800e95e:	18bf      	adds	r7, r7, r2
 800e960:	000d      	movs	r5, r1
 800e962:	9716      	str	r7, [sp, #88]	; 0x58
 800e964:	9315      	str	r3, [sp, #84]	; 0x54
 800e966:	2b07      	cmp	r3, #7
 800e968:	dd08      	ble.n	800e97c <_vfiprintf_r+0x4fc>
 800e96a:	9903      	ldr	r1, [sp, #12]
 800e96c:	9806      	ldr	r0, [sp, #24]
 800e96e:	aa14      	add	r2, sp, #80	; 0x50
 800e970:	f7ff fd51 	bl	800e416 <__sprint_r>
 800e974:	2800      	cmp	r0, #0
 800e976:	d000      	beq.n	800e97a <_vfiprintf_r+0x4fa>
 800e978:	e1eb      	b.n	800ed52 <_vfiprintf_r+0x8d2>
 800e97a:	ad17      	add	r5, sp, #92	; 0x5c
 800e97c:	a912      	add	r1, sp, #72	; 0x48
 800e97e:	78c8      	ldrb	r0, [r1, #3]
 800e980:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e982:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e984:	3103      	adds	r1, #3
 800e986:	2800      	cmp	r0, #0
 800e988:	d012      	beq.n	800e9b0 <_vfiprintf_r+0x530>
 800e98a:	6029      	str	r1, [r5, #0]
 800e98c:	2101      	movs	r1, #1
 800e98e:	3301      	adds	r3, #1
 800e990:	1852      	adds	r2, r2, r1
 800e992:	6069      	str	r1, [r5, #4]
 800e994:	9216      	str	r2, [sp, #88]	; 0x58
 800e996:	9315      	str	r3, [sp, #84]	; 0x54
 800e998:	3508      	adds	r5, #8
 800e99a:	2b07      	cmp	r3, #7
 800e99c:	dd08      	ble.n	800e9b0 <_vfiprintf_r+0x530>
 800e99e:	9903      	ldr	r1, [sp, #12]
 800e9a0:	9806      	ldr	r0, [sp, #24]
 800e9a2:	aa14      	add	r2, sp, #80	; 0x50
 800e9a4:	f7ff fd37 	bl	800e416 <__sprint_r>
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	d000      	beq.n	800e9ae <_vfiprintf_r+0x52e>
 800e9ac:	e1d1      	b.n	800ed52 <_vfiprintf_r+0x8d2>
 800e9ae:	ad17      	add	r5, sp, #92	; 0x5c
 800e9b0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e9b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e9b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e9b6:	2900      	cmp	r1, #0
 800e9b8:	d013      	beq.n	800e9e2 <_vfiprintf_r+0x562>
 800e9ba:	a913      	add	r1, sp, #76	; 0x4c
 800e9bc:	6029      	str	r1, [r5, #0]
 800e9be:	2102      	movs	r1, #2
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	1852      	adds	r2, r2, r1
 800e9c4:	6069      	str	r1, [r5, #4]
 800e9c6:	9216      	str	r2, [sp, #88]	; 0x58
 800e9c8:	9315      	str	r3, [sp, #84]	; 0x54
 800e9ca:	3508      	adds	r5, #8
 800e9cc:	2b07      	cmp	r3, #7
 800e9ce:	dd08      	ble.n	800e9e2 <_vfiprintf_r+0x562>
 800e9d0:	9903      	ldr	r1, [sp, #12]
 800e9d2:	9806      	ldr	r0, [sp, #24]
 800e9d4:	aa14      	add	r2, sp, #80	; 0x50
 800e9d6:	f7ff fd1e 	bl	800e416 <__sprint_r>
 800e9da:	2800      	cmp	r0, #0
 800e9dc:	d000      	beq.n	800e9e0 <_vfiprintf_r+0x560>
 800e9de:	e1b8      	b.n	800ed52 <_vfiprintf_r+0x8d2>
 800e9e0:	ad17      	add	r5, sp, #92	; 0x5c
 800e9e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e9e4:	2b80      	cmp	r3, #128	; 0x80
 800e9e6:	d11e      	bne.n	800ea26 <_vfiprintf_r+0x5a6>
 800e9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9ec:	1a9f      	subs	r7, r3, r2
 800e9ee:	2f00      	cmp	r7, #0
 800e9f0:	dd19      	ble.n	800ea26 <_vfiprintf_r+0x5a6>
 800e9f2:	0029      	movs	r1, r5
 800e9f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e9f6:	4871      	ldr	r0, [pc, #452]	; (800ebbc <_vfiprintf_r+0x73c>)
 800e9f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	3108      	adds	r1, #8
 800e9fe:	6028      	str	r0, [r5, #0]
 800ea00:	2f10      	cmp	r7, #16
 800ea02:	dd00      	ble.n	800ea06 <_vfiprintf_r+0x586>
 800ea04:	e164      	b.n	800ecd0 <_vfiprintf_r+0x850>
 800ea06:	606f      	str	r7, [r5, #4]
 800ea08:	18bf      	adds	r7, r7, r2
 800ea0a:	000d      	movs	r5, r1
 800ea0c:	9716      	str	r7, [sp, #88]	; 0x58
 800ea0e:	9315      	str	r3, [sp, #84]	; 0x54
 800ea10:	2b07      	cmp	r3, #7
 800ea12:	dd08      	ble.n	800ea26 <_vfiprintf_r+0x5a6>
 800ea14:	9903      	ldr	r1, [sp, #12]
 800ea16:	9806      	ldr	r0, [sp, #24]
 800ea18:	aa14      	add	r2, sp, #80	; 0x50
 800ea1a:	f7ff fcfc 	bl	800e416 <__sprint_r>
 800ea1e:	2800      	cmp	r0, #0
 800ea20:	d000      	beq.n	800ea24 <_vfiprintf_r+0x5a4>
 800ea22:	e196      	b.n	800ed52 <_vfiprintf_r+0x8d2>
 800ea24:	ad17      	add	r5, sp, #92	; 0x5c
 800ea26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea28:	9a05      	ldr	r2, [sp, #20]
 800ea2a:	1a9f      	subs	r7, r3, r2
 800ea2c:	2f00      	cmp	r7, #0
 800ea2e:	dd19      	ble.n	800ea64 <_vfiprintf_r+0x5e4>
 800ea30:	0029      	movs	r1, r5
 800ea32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea34:	4861      	ldr	r0, [pc, #388]	; (800ebbc <_vfiprintf_r+0x73c>)
 800ea36:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ea38:	3301      	adds	r3, #1
 800ea3a:	3108      	adds	r1, #8
 800ea3c:	6028      	str	r0, [r5, #0]
 800ea3e:	2f10      	cmp	r7, #16
 800ea40:	dd00      	ble.n	800ea44 <_vfiprintf_r+0x5c4>
 800ea42:	e157      	b.n	800ecf4 <_vfiprintf_r+0x874>
 800ea44:	606f      	str	r7, [r5, #4]
 800ea46:	18bf      	adds	r7, r7, r2
 800ea48:	000d      	movs	r5, r1
 800ea4a:	9716      	str	r7, [sp, #88]	; 0x58
 800ea4c:	9315      	str	r3, [sp, #84]	; 0x54
 800ea4e:	2b07      	cmp	r3, #7
 800ea50:	dd08      	ble.n	800ea64 <_vfiprintf_r+0x5e4>
 800ea52:	9903      	ldr	r1, [sp, #12]
 800ea54:	9806      	ldr	r0, [sp, #24]
 800ea56:	aa14      	add	r2, sp, #80	; 0x50
 800ea58:	f7ff fcdd 	bl	800e416 <__sprint_r>
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d000      	beq.n	800ea62 <_vfiprintf_r+0x5e2>
 800ea60:	e177      	b.n	800ed52 <_vfiprintf_r+0x8d2>
 800ea62:	ad17      	add	r5, sp, #92	; 0x5c
 800ea64:	9b05      	ldr	r3, [sp, #20]
 800ea66:	9a05      	ldr	r2, [sp, #20]
 800ea68:	606b      	str	r3, [r5, #4]
 800ea6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ea6c:	602e      	str	r6, [r5, #0]
 800ea6e:	189b      	adds	r3, r3, r2
 800ea70:	9316      	str	r3, [sp, #88]	; 0x58
 800ea72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea74:	3508      	adds	r5, #8
 800ea76:	3301      	adds	r3, #1
 800ea78:	9315      	str	r3, [sp, #84]	; 0x54
 800ea7a:	2b07      	cmp	r3, #7
 800ea7c:	dd08      	ble.n	800ea90 <_vfiprintf_r+0x610>
 800ea7e:	9903      	ldr	r1, [sp, #12]
 800ea80:	9806      	ldr	r0, [sp, #24]
 800ea82:	aa14      	add	r2, sp, #80	; 0x50
 800ea84:	f7ff fcc7 	bl	800e416 <__sprint_r>
 800ea88:	2800      	cmp	r0, #0
 800ea8a:	d000      	beq.n	800ea8e <_vfiprintf_r+0x60e>
 800ea8c:	e161      	b.n	800ed52 <_vfiprintf_r+0x8d2>
 800ea8e:	ad17      	add	r5, sp, #92	; 0x5c
 800ea90:	0764      	lsls	r4, r4, #29
 800ea92:	d500      	bpl.n	800ea96 <_vfiprintf_r+0x616>
 800ea94:	e140      	b.n	800ed18 <_vfiprintf_r+0x898>
 800ea96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	da00      	bge.n	800eaa0 <_vfiprintf_r+0x620>
 800ea9e:	0013      	movs	r3, r2
 800eaa0:	9a08      	ldr	r2, [sp, #32]
 800eaa2:	18d3      	adds	r3, r2, r3
 800eaa4:	9308      	str	r3, [sp, #32]
 800eaa6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d007      	beq.n	800eabc <_vfiprintf_r+0x63c>
 800eaac:	9903      	ldr	r1, [sp, #12]
 800eaae:	9806      	ldr	r0, [sp, #24]
 800eab0:	aa14      	add	r2, sp, #80	; 0x50
 800eab2:	f7ff fcb0 	bl	800e416 <__sprint_r>
 800eab6:	2800      	cmp	r0, #0
 800eab8:	d000      	beq.n	800eabc <_vfiprintf_r+0x63c>
 800eaba:	e14a      	b.n	800ed52 <_vfiprintf_r+0x8d2>
 800eabc:	2300      	movs	r3, #0
 800eabe:	ad17      	add	r5, sp, #92	; 0x5c
 800eac0:	9315      	str	r3, [sp, #84]	; 0x54
 800eac2:	e6b7      	b.n	800e834 <_vfiprintf_r+0x3b4>
 800eac4:	0030      	movs	r0, r6
 800eac6:	f7f1 fb1d 	bl	8000104 <strlen>
 800eaca:	9005      	str	r0, [sp, #20]
 800eacc:	e719      	b.n	800e902 <_vfiprintf_r+0x482>
 800eace:	2310      	movs	r3, #16
 800ead0:	431c      	orrs	r4, r3
 800ead2:	2320      	movs	r3, #32
 800ead4:	0020      	movs	r0, r4
 800ead6:	4018      	ands	r0, r3
 800ead8:	421c      	tst	r4, r3
 800eada:	d009      	beq.n	800eaf0 <_vfiprintf_r+0x670>
 800eadc:	3b19      	subs	r3, #25
 800eade:	3707      	adds	r7, #7
 800eae0:	439f      	bics	r7, r3
 800eae2:	0039      	movs	r1, r7
 800eae4:	c90c      	ldmia	r1!, {r2, r3}
 800eae6:	9200      	str	r2, [sp, #0]
 800eae8:	9301      	str	r3, [sp, #4]
 800eaea:	9104      	str	r1, [sp, #16]
 800eaec:	2301      	movs	r3, #1
 800eaee:	e6c7      	b.n	800e880 <_vfiprintf_r+0x400>
 800eaf0:	003b      	movs	r3, r7
 800eaf2:	cb04      	ldmia	r3!, {r2}
 800eaf4:	0021      	movs	r1, r4
 800eaf6:	9304      	str	r3, [sp, #16]
 800eaf8:	2310      	movs	r3, #16
 800eafa:	4019      	ands	r1, r3
 800eafc:	421c      	tst	r4, r3
 800eafe:	d003      	beq.n	800eb08 <_vfiprintf_r+0x688>
 800eb00:	9200      	str	r2, [sp, #0]
 800eb02:	9001      	str	r0, [sp, #4]
 800eb04:	3b0f      	subs	r3, #15
 800eb06:	e6bb      	b.n	800e880 <_vfiprintf_r+0x400>
 800eb08:	2340      	movs	r3, #64	; 0x40
 800eb0a:	0020      	movs	r0, r4
 800eb0c:	4018      	ands	r0, r3
 800eb0e:	421c      	tst	r4, r3
 800eb10:	d003      	beq.n	800eb1a <_vfiprintf_r+0x69a>
 800eb12:	b293      	uxth	r3, r2
 800eb14:	9300      	str	r3, [sp, #0]
 800eb16:	9101      	str	r1, [sp, #4]
 800eb18:	e7e8      	b.n	800eaec <_vfiprintf_r+0x66c>
 800eb1a:	2380      	movs	r3, #128	; 0x80
 800eb1c:	0021      	movs	r1, r4
 800eb1e:	009b      	lsls	r3, r3, #2
 800eb20:	4019      	ands	r1, r3
 800eb22:	421c      	tst	r4, r3
 800eb24:	d003      	beq.n	800eb2e <_vfiprintf_r+0x6ae>
 800eb26:	b2d3      	uxtb	r3, r2
 800eb28:	9300      	str	r3, [sp, #0]
 800eb2a:	9001      	str	r0, [sp, #4]
 800eb2c:	e7de      	b.n	800eaec <_vfiprintf_r+0x66c>
 800eb2e:	9200      	str	r2, [sp, #0]
 800eb30:	e7f1      	b.n	800eb16 <_vfiprintf_r+0x696>
 800eb32:	4a23      	ldr	r2, [pc, #140]	; (800ebc0 <_vfiprintf_r+0x740>)
 800eb34:	0020      	movs	r0, r4
 800eb36:	920c      	str	r2, [sp, #48]	; 0x30
 800eb38:	2220      	movs	r2, #32
 800eb3a:	4010      	ands	r0, r2
 800eb3c:	4214      	tst	r4, r2
 800eb3e:	d019      	beq.n	800eb74 <_vfiprintf_r+0x6f4>
 800eb40:	3a19      	subs	r2, #25
 800eb42:	3707      	adds	r7, #7
 800eb44:	4397      	bics	r7, r2
 800eb46:	0038      	movs	r0, r7
 800eb48:	c806      	ldmia	r0!, {r1, r2}
 800eb4a:	9100      	str	r1, [sp, #0]
 800eb4c:	9201      	str	r2, [sp, #4]
 800eb4e:	9004      	str	r0, [sp, #16]
 800eb50:	07e2      	lsls	r2, r4, #31
 800eb52:	d509      	bpl.n	800eb68 <_vfiprintf_r+0x6e8>
 800eb54:	9a00      	ldr	r2, [sp, #0]
 800eb56:	9901      	ldr	r1, [sp, #4]
 800eb58:	430a      	orrs	r2, r1
 800eb5a:	d005      	beq.n	800eb68 <_vfiprintf_r+0x6e8>
 800eb5c:	aa13      	add	r2, sp, #76	; 0x4c
 800eb5e:	2130      	movs	r1, #48	; 0x30
 800eb60:	7053      	strb	r3, [r2, #1]
 800eb62:	2302      	movs	r3, #2
 800eb64:	7011      	strb	r1, [r2, #0]
 800eb66:	431c      	orrs	r4, r3
 800eb68:	4b10      	ldr	r3, [pc, #64]	; (800ebac <_vfiprintf_r+0x72c>)
 800eb6a:	401c      	ands	r4, r3
 800eb6c:	2302      	movs	r3, #2
 800eb6e:	e687      	b.n	800e880 <_vfiprintf_r+0x400>
 800eb70:	4a10      	ldr	r2, [pc, #64]	; (800ebb4 <_vfiprintf_r+0x734>)
 800eb72:	e7df      	b.n	800eb34 <_vfiprintf_r+0x6b4>
 800eb74:	0039      	movs	r1, r7
 800eb76:	c904      	ldmia	r1!, {r2}
 800eb78:	0026      	movs	r6, r4
 800eb7a:	9104      	str	r1, [sp, #16]
 800eb7c:	2110      	movs	r1, #16
 800eb7e:	400e      	ands	r6, r1
 800eb80:	420c      	tst	r4, r1
 800eb82:	d002      	beq.n	800eb8a <_vfiprintf_r+0x70a>
 800eb84:	9200      	str	r2, [sp, #0]
 800eb86:	9001      	str	r0, [sp, #4]
 800eb88:	e7e2      	b.n	800eb50 <_vfiprintf_r+0x6d0>
 800eb8a:	2140      	movs	r1, #64	; 0x40
 800eb8c:	0020      	movs	r0, r4
 800eb8e:	4008      	ands	r0, r1
 800eb90:	420c      	tst	r4, r1
 800eb92:	d003      	beq.n	800eb9c <_vfiprintf_r+0x71c>
 800eb94:	b292      	uxth	r2, r2
 800eb96:	9200      	str	r2, [sp, #0]
 800eb98:	9601      	str	r6, [sp, #4]
 800eb9a:	e7d9      	b.n	800eb50 <_vfiprintf_r+0x6d0>
 800eb9c:	2180      	movs	r1, #128	; 0x80
 800eb9e:	0026      	movs	r6, r4
 800eba0:	0089      	lsls	r1, r1, #2
 800eba2:	400e      	ands	r6, r1
 800eba4:	420c      	tst	r4, r1
 800eba6:	d0f6      	beq.n	800eb96 <_vfiprintf_r+0x716>
 800eba8:	b2d2      	uxtb	r2, r2
 800ebaa:	e7eb      	b.n	800eb84 <_vfiprintf_r+0x704>
 800ebac:	fffffbff 	.word	0xfffffbff
 800ebb0:	00007830 	.word	0x00007830
 800ebb4:	0800fbbc 	.word	0x0800fbbc
 800ebb8:	0800fcc9 	.word	0x0800fcc9
 800ebbc:	0800fcd9 	.word	0x0800fcd9
 800ebc0:	0800fbcd 	.word	0x0800fbcd
 800ebc4:	9b01      	ldr	r3, [sp, #4]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d109      	bne.n	800ebde <_vfiprintf_r+0x75e>
 800ebca:	9b00      	ldr	r3, [sp, #0]
 800ebcc:	2b09      	cmp	r3, #9
 800ebce:	d806      	bhi.n	800ebde <_vfiprintf_r+0x75e>
 800ebd0:	26b7      	movs	r6, #183	; 0xb7
 800ebd2:	ab12      	add	r3, sp, #72	; 0x48
 800ebd4:	18f6      	adds	r6, r6, r3
 800ebd6:	9b00      	ldr	r3, [sp, #0]
 800ebd8:	3330      	adds	r3, #48	; 0x30
 800ebda:	7033      	strb	r3, [r6, #0]
 800ebdc:	e115      	b.n	800ee0a <_vfiprintf_r+0x98a>
 800ebde:	2380      	movs	r3, #128	; 0x80
 800ebe0:	2400      	movs	r4, #0
 800ebe2:	00db      	lsls	r3, r3, #3
 800ebe4:	403b      	ands	r3, r7
 800ebe6:	ae40      	add	r6, sp, #256	; 0x100
 800ebe8:	930a      	str	r3, [sp, #40]	; 0x28
 800ebea:	220a      	movs	r2, #10
 800ebec:	9800      	ldr	r0, [sp, #0]
 800ebee:	9901      	ldr	r1, [sp, #4]
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	f7f1 fc57 	bl	80004a4 <__aeabi_uldivmod>
 800ebf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebf8:	3e01      	subs	r6, #1
 800ebfa:	3230      	adds	r2, #48	; 0x30
 800ebfc:	900b      	str	r0, [sp, #44]	; 0x2c
 800ebfe:	9110      	str	r1, [sp, #64]	; 0x40
 800ec00:	7032      	strb	r2, [r6, #0]
 800ec02:	3401      	adds	r4, #1
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d01a      	beq.n	800ec3e <_vfiprintf_r+0x7be>
 800ec08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	42a3      	cmp	r3, r4
 800ec0e:	d116      	bne.n	800ec3e <_vfiprintf_r+0x7be>
 800ec10:	2cff      	cmp	r4, #255	; 0xff
 800ec12:	d014      	beq.n	800ec3e <_vfiprintf_r+0x7be>
 800ec14:	9b01      	ldr	r3, [sp, #4]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d102      	bne.n	800ec20 <_vfiprintf_r+0x7a0>
 800ec1a:	9b00      	ldr	r3, [sp, #0]
 800ec1c:	2b09      	cmp	r3, #9
 800ec1e:	d90e      	bls.n	800ec3e <_vfiprintf_r+0x7be>
 800ec20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec22:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ec24:	1af6      	subs	r6, r6, r3
 800ec26:	001a      	movs	r2, r3
 800ec28:	0030      	movs	r0, r6
 800ec2a:	f7f9 ffe6 	bl	8008bfa <strncpy>
 800ec2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec30:	2400      	movs	r4, #0
 800ec32:	785b      	ldrb	r3, [r3, #1]
 800ec34:	1e5a      	subs	r2, r3, #1
 800ec36:	4193      	sbcs	r3, r2
 800ec38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec3a:	18d3      	adds	r3, r2, r3
 800ec3c:	930d      	str	r3, [sp, #52]	; 0x34
 800ec3e:	9b01      	ldr	r3, [sp, #4]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d103      	bne.n	800ec4c <_vfiprintf_r+0x7cc>
 800ec44:	9b00      	ldr	r3, [sp, #0]
 800ec46:	2b09      	cmp	r3, #9
 800ec48:	d800      	bhi.n	800ec4c <_vfiprintf_r+0x7cc>
 800ec4a:	e0de      	b.n	800ee0a <_vfiprintf_r+0x98a>
 800ec4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec4e:	9300      	str	r3, [sp, #0]
 800ec50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec52:	9301      	str	r3, [sp, #4]
 800ec54:	e7c9      	b.n	800ebea <_vfiprintf_r+0x76a>
 800ec56:	200f      	movs	r0, #15
 800ec58:	9b00      	ldr	r3, [sp, #0]
 800ec5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec5c:	4003      	ands	r3, r0
 800ec5e:	5cd3      	ldrb	r3, [r2, r3]
 800ec60:	3e01      	subs	r6, #1
 800ec62:	7033      	strb	r3, [r6, #0]
 800ec64:	9b01      	ldr	r3, [sp, #4]
 800ec66:	0719      	lsls	r1, r3, #28
 800ec68:	9b00      	ldr	r3, [sp, #0]
 800ec6a:	091a      	lsrs	r2, r3, #4
 800ec6c:	9b01      	ldr	r3, [sp, #4]
 800ec6e:	4311      	orrs	r1, r2
 800ec70:	091b      	lsrs	r3, r3, #4
 800ec72:	9301      	str	r3, [sp, #4]
 800ec74:	000b      	movs	r3, r1
 800ec76:	9a01      	ldr	r2, [sp, #4]
 800ec78:	9100      	str	r1, [sp, #0]
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	d1ec      	bne.n	800ec58 <_vfiprintf_r+0x7d8>
 800ec7e:	e0c4      	b.n	800ee0a <_vfiprintf_r+0x98a>
 800ec80:	ae40      	add	r6, sp, #256	; 0x100
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d000      	beq.n	800ec88 <_vfiprintf_r+0x808>
 800ec86:	e0c0      	b.n	800ee0a <_vfiprintf_r+0x98a>
 800ec88:	07e4      	lsls	r4, r4, #31
 800ec8a:	d400      	bmi.n	800ec8e <_vfiprintf_r+0x80e>
 800ec8c:	e0bd      	b.n	800ee0a <_vfiprintf_r+0x98a>
 800ec8e:	26b7      	movs	r6, #183	; 0xb7
 800ec90:	ab12      	add	r3, sp, #72	; 0x48
 800ec92:	18f6      	adds	r6, r6, r3
 800ec94:	2330      	movs	r3, #48	; 0x30
 800ec96:	e7a0      	b.n	800ebda <_vfiprintf_r+0x75a>
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d100      	bne.n	800ec9e <_vfiprintf_r+0x81e>
 800ec9c:	e07e      	b.n	800ed9c <_vfiprintf_r+0x91c>
 800ec9e:	ae27      	add	r6, sp, #156	; 0x9c
 800eca0:	7033      	strb	r3, [r6, #0]
 800eca2:	2300      	movs	r3, #0
 800eca4:	aa12      	add	r2, sp, #72	; 0x48
 800eca6:	70d3      	strb	r3, [r2, #3]
 800eca8:	9704      	str	r7, [sp, #16]
 800ecaa:	e576      	b.n	800e79a <_vfiprintf_r+0x31a>
 800ecac:	2010      	movs	r0, #16
 800ecae:	1812      	adds	r2, r2, r0
 800ecb0:	6068      	str	r0, [r5, #4]
 800ecb2:	9216      	str	r2, [sp, #88]	; 0x58
 800ecb4:	9315      	str	r3, [sp, #84]	; 0x54
 800ecb6:	2b07      	cmp	r3, #7
 800ecb8:	dd07      	ble.n	800ecca <_vfiprintf_r+0x84a>
 800ecba:	9903      	ldr	r1, [sp, #12]
 800ecbc:	9806      	ldr	r0, [sp, #24]
 800ecbe:	aa14      	add	r2, sp, #80	; 0x50
 800ecc0:	f7ff fba9 	bl	800e416 <__sprint_r>
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	d144      	bne.n	800ed52 <_vfiprintf_r+0x8d2>
 800ecc8:	a917      	add	r1, sp, #92	; 0x5c
 800ecca:	000d      	movs	r5, r1
 800eccc:	3f10      	subs	r7, #16
 800ecce:	e63b      	b.n	800e948 <_vfiprintf_r+0x4c8>
 800ecd0:	2010      	movs	r0, #16
 800ecd2:	1812      	adds	r2, r2, r0
 800ecd4:	6068      	str	r0, [r5, #4]
 800ecd6:	9216      	str	r2, [sp, #88]	; 0x58
 800ecd8:	9315      	str	r3, [sp, #84]	; 0x54
 800ecda:	2b07      	cmp	r3, #7
 800ecdc:	dd07      	ble.n	800ecee <_vfiprintf_r+0x86e>
 800ecde:	9903      	ldr	r1, [sp, #12]
 800ece0:	9806      	ldr	r0, [sp, #24]
 800ece2:	aa14      	add	r2, sp, #80	; 0x50
 800ece4:	f7ff fb97 	bl	800e416 <__sprint_r>
 800ece8:	2800      	cmp	r0, #0
 800ecea:	d132      	bne.n	800ed52 <_vfiprintf_r+0x8d2>
 800ecec:	a917      	add	r1, sp, #92	; 0x5c
 800ecee:	000d      	movs	r5, r1
 800ecf0:	3f10      	subs	r7, #16
 800ecf2:	e67e      	b.n	800e9f2 <_vfiprintf_r+0x572>
 800ecf4:	2010      	movs	r0, #16
 800ecf6:	1812      	adds	r2, r2, r0
 800ecf8:	6068      	str	r0, [r5, #4]
 800ecfa:	9216      	str	r2, [sp, #88]	; 0x58
 800ecfc:	9315      	str	r3, [sp, #84]	; 0x54
 800ecfe:	2b07      	cmp	r3, #7
 800ed00:	dd07      	ble.n	800ed12 <_vfiprintf_r+0x892>
 800ed02:	9903      	ldr	r1, [sp, #12]
 800ed04:	9806      	ldr	r0, [sp, #24]
 800ed06:	aa14      	add	r2, sp, #80	; 0x50
 800ed08:	f7ff fb85 	bl	800e416 <__sprint_r>
 800ed0c:	2800      	cmp	r0, #0
 800ed0e:	d120      	bne.n	800ed52 <_vfiprintf_r+0x8d2>
 800ed10:	a917      	add	r1, sp, #92	; 0x5c
 800ed12:	000d      	movs	r5, r1
 800ed14:	3f10      	subs	r7, #16
 800ed16:	e68b      	b.n	800ea30 <_vfiprintf_r+0x5b0>
 800ed18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed1c:	2610      	movs	r6, #16
 800ed1e:	1a9c      	subs	r4, r3, r2
 800ed20:	2c00      	cmp	r4, #0
 800ed22:	dc00      	bgt.n	800ed26 <_vfiprintf_r+0x8a6>
 800ed24:	e6b7      	b.n	800ea96 <_vfiprintf_r+0x616>
 800ed26:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ed28:	4a3b      	ldr	r2, [pc, #236]	; (800ee18 <_vfiprintf_r+0x998>)
 800ed2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ed2c:	3101      	adds	r1, #1
 800ed2e:	602a      	str	r2, [r5, #0]
 800ed30:	2c10      	cmp	r4, #16
 800ed32:	dc22      	bgt.n	800ed7a <_vfiprintf_r+0x8fa>
 800ed34:	606c      	str	r4, [r5, #4]
 800ed36:	18e4      	adds	r4, r4, r3
 800ed38:	9416      	str	r4, [sp, #88]	; 0x58
 800ed3a:	9115      	str	r1, [sp, #84]	; 0x54
 800ed3c:	2907      	cmp	r1, #7
 800ed3e:	dc00      	bgt.n	800ed42 <_vfiprintf_r+0x8c2>
 800ed40:	e6a9      	b.n	800ea96 <_vfiprintf_r+0x616>
 800ed42:	9903      	ldr	r1, [sp, #12]
 800ed44:	9806      	ldr	r0, [sp, #24]
 800ed46:	aa14      	add	r2, sp, #80	; 0x50
 800ed48:	f7ff fb65 	bl	800e416 <__sprint_r>
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	d100      	bne.n	800ed52 <_vfiprintf_r+0x8d2>
 800ed50:	e6a1      	b.n	800ea96 <_vfiprintf_r+0x616>
 800ed52:	9b03      	ldr	r3, [sp, #12]
 800ed54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed56:	07db      	lsls	r3, r3, #31
 800ed58:	d407      	bmi.n	800ed6a <_vfiprintf_r+0x8ea>
 800ed5a:	9b03      	ldr	r3, [sp, #12]
 800ed5c:	899b      	ldrh	r3, [r3, #12]
 800ed5e:	059b      	lsls	r3, r3, #22
 800ed60:	d403      	bmi.n	800ed6a <_vfiprintf_r+0x8ea>
 800ed62:	9b03      	ldr	r3, [sp, #12]
 800ed64:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800ed66:	f7fa f808 	bl	8008d7a <__retarget_lock_release_recursive>
 800ed6a:	9b03      	ldr	r3, [sp, #12]
 800ed6c:	899b      	ldrh	r3, [r3, #12]
 800ed6e:	065b      	lsls	r3, r3, #25
 800ed70:	d401      	bmi.n	800ed76 <_vfiprintf_r+0x8f6>
 800ed72:	f7ff fbc3 	bl	800e4fc <_vfiprintf_r+0x7c>
 800ed76:	f7ff fbbe 	bl	800e4f6 <_vfiprintf_r+0x76>
 800ed7a:	3310      	adds	r3, #16
 800ed7c:	606e      	str	r6, [r5, #4]
 800ed7e:	9316      	str	r3, [sp, #88]	; 0x58
 800ed80:	9115      	str	r1, [sp, #84]	; 0x54
 800ed82:	3508      	adds	r5, #8
 800ed84:	2907      	cmp	r1, #7
 800ed86:	dd07      	ble.n	800ed98 <_vfiprintf_r+0x918>
 800ed88:	9903      	ldr	r1, [sp, #12]
 800ed8a:	9806      	ldr	r0, [sp, #24]
 800ed8c:	aa14      	add	r2, sp, #80	; 0x50
 800ed8e:	f7ff fb42 	bl	800e416 <__sprint_r>
 800ed92:	2800      	cmp	r0, #0
 800ed94:	d1dd      	bne.n	800ed52 <_vfiprintf_r+0x8d2>
 800ed96:	ad17      	add	r5, sp, #92	; 0x5c
 800ed98:	3c10      	subs	r4, #16
 800ed9a:	e7c4      	b.n	800ed26 <_vfiprintf_r+0x8a6>
 800ed9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d102      	bne.n	800eda8 <_vfiprintf_r+0x928>
 800eda2:	2300      	movs	r3, #0
 800eda4:	9315      	str	r3, [sp, #84]	; 0x54
 800eda6:	e7d4      	b.n	800ed52 <_vfiprintf_r+0x8d2>
 800eda8:	9903      	ldr	r1, [sp, #12]
 800edaa:	9806      	ldr	r0, [sp, #24]
 800edac:	aa14      	add	r2, sp, #80	; 0x50
 800edae:	f7ff fb32 	bl	800e416 <__sprint_r>
 800edb2:	2800      	cmp	r0, #0
 800edb4:	d0f5      	beq.n	800eda2 <_vfiprintf_r+0x922>
 800edb6:	e7cc      	b.n	800ed52 <_vfiprintf_r+0x8d2>
 800edb8:	0027      	movs	r7, r4
 800edba:	2a00      	cmp	r2, #0
 800edbc:	d100      	bne.n	800edc0 <_vfiprintf_r+0x940>
 800edbe:	e51b      	b.n	800e7f8 <_vfiprintf_r+0x378>
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d100      	bne.n	800edc6 <_vfiprintf_r+0x946>
 800edc4:	e6fe      	b.n	800ebc4 <_vfiprintf_r+0x744>
 800edc6:	ae40      	add	r6, sp, #256	; 0x100
 800edc8:	2b02      	cmp	r3, #2
 800edca:	d100      	bne.n	800edce <_vfiprintf_r+0x94e>
 800edcc:	e743      	b.n	800ec56 <_vfiprintf_r+0x7d6>
 800edce:	2307      	movs	r3, #7
 800edd0:	469c      	mov	ip, r3
 800edd2:	4663      	mov	r3, ip
 800edd4:	9900      	ldr	r1, [sp, #0]
 800edd6:	0032      	movs	r2, r6
 800edd8:	400b      	ands	r3, r1
 800edda:	9901      	ldr	r1, [sp, #4]
 800eddc:	3e01      	subs	r6, #1
 800edde:	074c      	lsls	r4, r1, #29
 800ede0:	9900      	ldr	r1, [sp, #0]
 800ede2:	3330      	adds	r3, #48	; 0x30
 800ede4:	08c8      	lsrs	r0, r1, #3
 800ede6:	9901      	ldr	r1, [sp, #4]
 800ede8:	4304      	orrs	r4, r0
 800edea:	08c9      	lsrs	r1, r1, #3
 800edec:	9101      	str	r1, [sp, #4]
 800edee:	0021      	movs	r1, r4
 800edf0:	9801      	ldr	r0, [sp, #4]
 800edf2:	7033      	strb	r3, [r6, #0]
 800edf4:	9400      	str	r4, [sp, #0]
 800edf6:	4301      	orrs	r1, r0
 800edf8:	d1eb      	bne.n	800edd2 <_vfiprintf_r+0x952>
 800edfa:	07f9      	lsls	r1, r7, #31
 800edfc:	d505      	bpl.n	800ee0a <_vfiprintf_r+0x98a>
 800edfe:	2b30      	cmp	r3, #48	; 0x30
 800ee00:	d003      	beq.n	800ee0a <_vfiprintf_r+0x98a>
 800ee02:	2330      	movs	r3, #48	; 0x30
 800ee04:	3e01      	subs	r6, #1
 800ee06:	7033      	strb	r3, [r6, #0]
 800ee08:	1e96      	subs	r6, r2, #2
 800ee0a:	9b05      	ldr	r3, [sp, #20]
 800ee0c:	003c      	movs	r4, r7
 800ee0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee10:	ab40      	add	r3, sp, #256	; 0x100
 800ee12:	1b9b      	subs	r3, r3, r6
 800ee14:	9305      	str	r3, [sp, #20]
 800ee16:	e575      	b.n	800e904 <_vfiprintf_r+0x484>
 800ee18:	0800fcc9 	.word	0x0800fcc9

0800ee1c <__sbprintf>:
 800ee1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee1e:	0015      	movs	r5, r2
 800ee20:	2202      	movs	r2, #2
 800ee22:	4c1e      	ldr	r4, [pc, #120]	; (800ee9c <__sbprintf+0x80>)
 800ee24:	001f      	movs	r7, r3
 800ee26:	898b      	ldrh	r3, [r1, #12]
 800ee28:	44a5      	add	sp, r4
 800ee2a:	4393      	bics	r3, r2
 800ee2c:	466a      	mov	r2, sp
 800ee2e:	8193      	strh	r3, [r2, #12]
 800ee30:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ee32:	0006      	movs	r6, r0
 800ee34:	9319      	str	r3, [sp, #100]	; 0x64
 800ee36:	89cb      	ldrh	r3, [r1, #14]
 800ee38:	a816      	add	r0, sp, #88	; 0x58
 800ee3a:	81d3      	strh	r3, [r2, #14]
 800ee3c:	69cb      	ldr	r3, [r1, #28]
 800ee3e:	000c      	movs	r4, r1
 800ee40:	9307      	str	r3, [sp, #28]
 800ee42:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800ee44:	9309      	str	r3, [sp, #36]	; 0x24
 800ee46:	ab1a      	add	r3, sp, #104	; 0x68
 800ee48:	9300      	str	r3, [sp, #0]
 800ee4a:	9304      	str	r3, [sp, #16]
 800ee4c:	2380      	movs	r3, #128	; 0x80
 800ee4e:	00db      	lsls	r3, r3, #3
 800ee50:	9302      	str	r3, [sp, #8]
 800ee52:	9305      	str	r3, [sp, #20]
 800ee54:	2300      	movs	r3, #0
 800ee56:	9306      	str	r3, [sp, #24]
 800ee58:	f7f9 ff8c 	bl	8008d74 <__retarget_lock_init_recursive>
 800ee5c:	002a      	movs	r2, r5
 800ee5e:	003b      	movs	r3, r7
 800ee60:	4669      	mov	r1, sp
 800ee62:	0030      	movs	r0, r6
 800ee64:	f7ff fb0c 	bl	800e480 <_vfiprintf_r>
 800ee68:	1e05      	subs	r5, r0, #0
 800ee6a:	db07      	blt.n	800ee7c <__sbprintf+0x60>
 800ee6c:	4669      	mov	r1, sp
 800ee6e:	0030      	movs	r0, r6
 800ee70:	f7fd fdf6 	bl	800ca60 <_fflush_r>
 800ee74:	2800      	cmp	r0, #0
 800ee76:	d001      	beq.n	800ee7c <__sbprintf+0x60>
 800ee78:	2501      	movs	r5, #1
 800ee7a:	426d      	negs	r5, r5
 800ee7c:	466b      	mov	r3, sp
 800ee7e:	899a      	ldrh	r2, [r3, #12]
 800ee80:	2340      	movs	r3, #64	; 0x40
 800ee82:	421a      	tst	r2, r3
 800ee84:	d002      	beq.n	800ee8c <__sbprintf+0x70>
 800ee86:	89a2      	ldrh	r2, [r4, #12]
 800ee88:	4313      	orrs	r3, r2
 800ee8a:	81a3      	strh	r3, [r4, #12]
 800ee8c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ee8e:	f7f9 ff72 	bl	8008d76 <__retarget_lock_close_recursive>
 800ee92:	0028      	movs	r0, r5
 800ee94:	4b02      	ldr	r3, [pc, #8]	; (800eea0 <__sbprintf+0x84>)
 800ee96:	449d      	add	sp, r3
 800ee98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee9a:	46c0      	nop			; (mov r8, r8)
 800ee9c:	fffffb94 	.word	0xfffffb94
 800eea0:	0000046c 	.word	0x0000046c

0800eea4 <__sfvwrite_r>:
 800eea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eea6:	6893      	ldr	r3, [r2, #8]
 800eea8:	b087      	sub	sp, #28
 800eeaa:	000c      	movs	r4, r1
 800eeac:	9002      	str	r0, [sp, #8]
 800eeae:	9204      	str	r2, [sp, #16]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d102      	bne.n	800eeba <__sfvwrite_r+0x16>
 800eeb4:	2000      	movs	r0, #0
 800eeb6:	b007      	add	sp, #28
 800eeb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeba:	898b      	ldrh	r3, [r1, #12]
 800eebc:	071b      	lsls	r3, r3, #28
 800eebe:	d557      	bpl.n	800ef70 <__sfvwrite_r+0xcc>
 800eec0:	690b      	ldr	r3, [r1, #16]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d054      	beq.n	800ef70 <__sfvwrite_r+0xcc>
 800eec6:	9b04      	ldr	r3, [sp, #16]
 800eec8:	2202      	movs	r2, #2
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	9301      	str	r3, [sp, #4]
 800eece:	89a3      	ldrh	r3, [r4, #12]
 800eed0:	001f      	movs	r7, r3
 800eed2:	4017      	ands	r7, r2
 800eed4:	4213      	tst	r3, r2
 800eed6:	d171      	bne.n	800efbc <__sfvwrite_r+0x118>
 800eed8:	2201      	movs	r2, #1
 800eeda:	2101      	movs	r1, #1
 800eedc:	401a      	ands	r2, r3
 800eede:	420b      	tst	r3, r1
 800eee0:	d100      	bne.n	800eee4 <__sfvwrite_r+0x40>
 800eee2:	e0a5      	b.n	800f030 <__sfvwrite_r+0x18c>
 800eee4:	0038      	movs	r0, r7
 800eee6:	003e      	movs	r6, r7
 800eee8:	9703      	str	r7, [sp, #12]
 800eeea:	9b03      	ldr	r3, [sp, #12]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d100      	bne.n	800eef2 <__sfvwrite_r+0x4e>
 800eef0:	e10b      	b.n	800f10a <__sfvwrite_r+0x266>
 800eef2:	2800      	cmp	r0, #0
 800eef4:	d10a      	bne.n	800ef0c <__sfvwrite_r+0x68>
 800eef6:	001a      	movs	r2, r3
 800eef8:	210a      	movs	r1, #10
 800eefa:	0030      	movs	r0, r6
 800eefc:	f7fd fe2a 	bl	800cb54 <memchr>
 800ef00:	9b03      	ldr	r3, [sp, #12]
 800ef02:	1c5f      	adds	r7, r3, #1
 800ef04:	2800      	cmp	r0, #0
 800ef06:	d001      	beq.n	800ef0c <__sfvwrite_r+0x68>
 800ef08:	3001      	adds	r0, #1
 800ef0a:	1b87      	subs	r7, r0, r6
 800ef0c:	9b03      	ldr	r3, [sp, #12]
 800ef0e:	9705      	str	r7, [sp, #20]
 800ef10:	429f      	cmp	r7, r3
 800ef12:	d900      	bls.n	800ef16 <__sfvwrite_r+0x72>
 800ef14:	9305      	str	r3, [sp, #20]
 800ef16:	6820      	ldr	r0, [r4, #0]
 800ef18:	6922      	ldr	r2, [r4, #16]
 800ef1a:	68a5      	ldr	r5, [r4, #8]
 800ef1c:	6963      	ldr	r3, [r4, #20]
 800ef1e:	4290      	cmp	r0, r2
 800ef20:	d800      	bhi.n	800ef24 <__sfvwrite_r+0x80>
 800ef22:	e0fb      	b.n	800f11c <__sfvwrite_r+0x278>
 800ef24:	9a05      	ldr	r2, [sp, #20]
 800ef26:	18ed      	adds	r5, r5, r3
 800ef28:	42aa      	cmp	r2, r5
 800ef2a:	dc00      	bgt.n	800ef2e <__sfvwrite_r+0x8a>
 800ef2c:	e0f6      	b.n	800f11c <__sfvwrite_r+0x278>
 800ef2e:	0031      	movs	r1, r6
 800ef30:	002a      	movs	r2, r5
 800ef32:	f000 fa1e 	bl	800f372 <memmove>
 800ef36:	6823      	ldr	r3, [r4, #0]
 800ef38:	0021      	movs	r1, r4
 800ef3a:	195b      	adds	r3, r3, r5
 800ef3c:	9802      	ldr	r0, [sp, #8]
 800ef3e:	6023      	str	r3, [r4, #0]
 800ef40:	f7fd fd8e 	bl	800ca60 <_fflush_r>
 800ef44:	2800      	cmp	r0, #0
 800ef46:	d16e      	bne.n	800f026 <__sfvwrite_r+0x182>
 800ef48:	2001      	movs	r0, #1
 800ef4a:	1b7f      	subs	r7, r7, r5
 800ef4c:	d105      	bne.n	800ef5a <__sfvwrite_r+0xb6>
 800ef4e:	0021      	movs	r1, r4
 800ef50:	9802      	ldr	r0, [sp, #8]
 800ef52:	f7fd fd85 	bl	800ca60 <_fflush_r>
 800ef56:	2800      	cmp	r0, #0
 800ef58:	d165      	bne.n	800f026 <__sfvwrite_r+0x182>
 800ef5a:	9b03      	ldr	r3, [sp, #12]
 800ef5c:	9a04      	ldr	r2, [sp, #16]
 800ef5e:	1b5b      	subs	r3, r3, r5
 800ef60:	9303      	str	r3, [sp, #12]
 800ef62:	9b04      	ldr	r3, [sp, #16]
 800ef64:	1976      	adds	r6, r6, r5
 800ef66:	689b      	ldr	r3, [r3, #8]
 800ef68:	1b5b      	subs	r3, r3, r5
 800ef6a:	6093      	str	r3, [r2, #8]
 800ef6c:	d1bd      	bne.n	800eeea <__sfvwrite_r+0x46>
 800ef6e:	e7a1      	b.n	800eeb4 <__sfvwrite_r+0x10>
 800ef70:	0021      	movs	r1, r4
 800ef72:	9802      	ldr	r0, [sp, #8]
 800ef74:	f000 f932 	bl	800f1dc <__swsetup_r>
 800ef78:	2800      	cmp	r0, #0
 800ef7a:	d0a4      	beq.n	800eec6 <__sfvwrite_r+0x22>
 800ef7c:	2001      	movs	r0, #1
 800ef7e:	4240      	negs	r0, r0
 800ef80:	e799      	b.n	800eeb6 <__sfvwrite_r+0x12>
 800ef82:	9b01      	ldr	r3, [sp, #4]
 800ef84:	681e      	ldr	r6, [r3, #0]
 800ef86:	685d      	ldr	r5, [r3, #4]
 800ef88:	3308      	adds	r3, #8
 800ef8a:	9301      	str	r3, [sp, #4]
 800ef8c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800ef8e:	69e1      	ldr	r1, [r4, #28]
 800ef90:	2d00      	cmp	r5, #0
 800ef92:	d0f6      	beq.n	800ef82 <__sfvwrite_r+0xde>
 800ef94:	4a6e      	ldr	r2, [pc, #440]	; (800f150 <__sfvwrite_r+0x2ac>)
 800ef96:	002b      	movs	r3, r5
 800ef98:	4295      	cmp	r5, r2
 800ef9a:	d900      	bls.n	800ef9e <__sfvwrite_r+0xfa>
 800ef9c:	0013      	movs	r3, r2
 800ef9e:	0032      	movs	r2, r6
 800efa0:	9802      	ldr	r0, [sp, #8]
 800efa2:	47b8      	blx	r7
 800efa4:	2800      	cmp	r0, #0
 800efa6:	dd3e      	ble.n	800f026 <__sfvwrite_r+0x182>
 800efa8:	9b04      	ldr	r3, [sp, #16]
 800efaa:	9a04      	ldr	r2, [sp, #16]
 800efac:	689b      	ldr	r3, [r3, #8]
 800efae:	1836      	adds	r6, r6, r0
 800efb0:	1a1b      	subs	r3, r3, r0
 800efb2:	1a2d      	subs	r5, r5, r0
 800efb4:	6093      	str	r3, [r2, #8]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1e8      	bne.n	800ef8c <__sfvwrite_r+0xe8>
 800efba:	e77b      	b.n	800eeb4 <__sfvwrite_r+0x10>
 800efbc:	2600      	movs	r6, #0
 800efbe:	0035      	movs	r5, r6
 800efc0:	e7e4      	b.n	800ef8c <__sfvwrite_r+0xe8>
 800efc2:	9b01      	ldr	r3, [sp, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	9303      	str	r3, [sp, #12]
 800efc8:	9b01      	ldr	r3, [sp, #4]
 800efca:	685d      	ldr	r5, [r3, #4]
 800efcc:	3308      	adds	r3, #8
 800efce:	9301      	str	r3, [sp, #4]
 800efd0:	220c      	movs	r2, #12
 800efd2:	5ea3      	ldrsh	r3, [r4, r2]
 800efd4:	6820      	ldr	r0, [r4, #0]
 800efd6:	68a6      	ldr	r6, [r4, #8]
 800efd8:	2d00      	cmp	r5, #0
 800efda:	d0f2      	beq.n	800efc2 <__sfvwrite_r+0x11e>
 800efdc:	2180      	movs	r1, #128	; 0x80
 800efde:	0089      	lsls	r1, r1, #2
 800efe0:	b29a      	uxth	r2, r3
 800efe2:	420b      	tst	r3, r1
 800efe4:	d062      	beq.n	800f0ac <__sfvwrite_r+0x208>
 800efe6:	42ae      	cmp	r6, r5
 800efe8:	d837      	bhi.n	800f05a <__sfvwrite_r+0x1b6>
 800efea:	2390      	movs	r3, #144	; 0x90
 800efec:	00db      	lsls	r3, r3, #3
 800efee:	421a      	tst	r2, r3
 800eff0:	d033      	beq.n	800f05a <__sfvwrite_r+0x1b6>
 800eff2:	6921      	ldr	r1, [r4, #16]
 800eff4:	1a43      	subs	r3, r0, r1
 800eff6:	2003      	movs	r0, #3
 800eff8:	9305      	str	r3, [sp, #20]
 800effa:	6963      	ldr	r3, [r4, #20]
 800effc:	4343      	muls	r3, r0
 800effe:	0fdf      	lsrs	r7, r3, #31
 800f000:	18ff      	adds	r7, r7, r3
 800f002:	9b05      	ldr	r3, [sp, #20]
 800f004:	107f      	asrs	r7, r7, #1
 800f006:	3301      	adds	r3, #1
 800f008:	195b      	adds	r3, r3, r5
 800f00a:	42bb      	cmp	r3, r7
 800f00c:	d900      	bls.n	800f010 <__sfvwrite_r+0x16c>
 800f00e:	001f      	movs	r7, r3
 800f010:	0552      	lsls	r2, r2, #21
 800f012:	d53c      	bpl.n	800f08e <__sfvwrite_r+0x1ea>
 800f014:	0039      	movs	r1, r7
 800f016:	9802      	ldr	r0, [sp, #8]
 800f018:	f7f8 fb98 	bl	800774c <_malloc_r>
 800f01c:	1e06      	subs	r6, r0, #0
 800f01e:	d10a      	bne.n	800f036 <__sfvwrite_r+0x192>
 800f020:	230c      	movs	r3, #12
 800f022:	9a02      	ldr	r2, [sp, #8]
 800f024:	6013      	str	r3, [r2, #0]
 800f026:	2340      	movs	r3, #64	; 0x40
 800f028:	89a2      	ldrh	r2, [r4, #12]
 800f02a:	4313      	orrs	r3, r2
 800f02c:	81a3      	strh	r3, [r4, #12]
 800f02e:	e7a5      	b.n	800ef7c <__sfvwrite_r+0xd8>
 800f030:	0015      	movs	r5, r2
 800f032:	9203      	str	r2, [sp, #12]
 800f034:	e7cc      	b.n	800efd0 <__sfvwrite_r+0x12c>
 800f036:	9a05      	ldr	r2, [sp, #20]
 800f038:	6921      	ldr	r1, [r4, #16]
 800f03a:	f7f9 feaa 	bl	8008d92 <memcpy>
 800f03e:	89a2      	ldrh	r2, [r4, #12]
 800f040:	4b44      	ldr	r3, [pc, #272]	; (800f154 <__sfvwrite_r+0x2b0>)
 800f042:	401a      	ands	r2, r3
 800f044:	2380      	movs	r3, #128	; 0x80
 800f046:	4313      	orrs	r3, r2
 800f048:	81a3      	strh	r3, [r4, #12]
 800f04a:	9b05      	ldr	r3, [sp, #20]
 800f04c:	6126      	str	r6, [r4, #16]
 800f04e:	18f6      	adds	r6, r6, r3
 800f050:	6026      	str	r6, [r4, #0]
 800f052:	002e      	movs	r6, r5
 800f054:	6167      	str	r7, [r4, #20]
 800f056:	1aff      	subs	r7, r7, r3
 800f058:	60a7      	str	r7, [r4, #8]
 800f05a:	002f      	movs	r7, r5
 800f05c:	42ae      	cmp	r6, r5
 800f05e:	d900      	bls.n	800f062 <__sfvwrite_r+0x1be>
 800f060:	002e      	movs	r6, r5
 800f062:	0032      	movs	r2, r6
 800f064:	9903      	ldr	r1, [sp, #12]
 800f066:	6820      	ldr	r0, [r4, #0]
 800f068:	f000 f983 	bl	800f372 <memmove>
 800f06c:	68a3      	ldr	r3, [r4, #8]
 800f06e:	1b9b      	subs	r3, r3, r6
 800f070:	60a3      	str	r3, [r4, #8]
 800f072:	6823      	ldr	r3, [r4, #0]
 800f074:	199b      	adds	r3, r3, r6
 800f076:	6023      	str	r3, [r4, #0]
 800f078:	9b03      	ldr	r3, [sp, #12]
 800f07a:	9a04      	ldr	r2, [sp, #16]
 800f07c:	19db      	adds	r3, r3, r7
 800f07e:	9303      	str	r3, [sp, #12]
 800f080:	9b04      	ldr	r3, [sp, #16]
 800f082:	1bed      	subs	r5, r5, r7
 800f084:	689b      	ldr	r3, [r3, #8]
 800f086:	1bdb      	subs	r3, r3, r7
 800f088:	6093      	str	r3, [r2, #8]
 800f08a:	d1a1      	bne.n	800efd0 <__sfvwrite_r+0x12c>
 800f08c:	e712      	b.n	800eeb4 <__sfvwrite_r+0x10>
 800f08e:	003a      	movs	r2, r7
 800f090:	9802      	ldr	r0, [sp, #8]
 800f092:	f7fe fcd7 	bl	800da44 <_realloc_r>
 800f096:	1e06      	subs	r6, r0, #0
 800f098:	d1d7      	bne.n	800f04a <__sfvwrite_r+0x1a6>
 800f09a:	6921      	ldr	r1, [r4, #16]
 800f09c:	9802      	ldr	r0, [sp, #8]
 800f09e:	f7f9 fef3 	bl	8008e88 <_free_r>
 800f0a2:	2280      	movs	r2, #128	; 0x80
 800f0a4:	89a3      	ldrh	r3, [r4, #12]
 800f0a6:	4393      	bics	r3, r2
 800f0a8:	81a3      	strh	r3, [r4, #12]
 800f0aa:	e7b9      	b.n	800f020 <__sfvwrite_r+0x17c>
 800f0ac:	6923      	ldr	r3, [r4, #16]
 800f0ae:	4283      	cmp	r3, r0
 800f0b0:	d302      	bcc.n	800f0b8 <__sfvwrite_r+0x214>
 800f0b2:	6967      	ldr	r7, [r4, #20]
 800f0b4:	42af      	cmp	r7, r5
 800f0b6:	d916      	bls.n	800f0e6 <__sfvwrite_r+0x242>
 800f0b8:	42ae      	cmp	r6, r5
 800f0ba:	d900      	bls.n	800f0be <__sfvwrite_r+0x21a>
 800f0bc:	002e      	movs	r6, r5
 800f0be:	0032      	movs	r2, r6
 800f0c0:	9903      	ldr	r1, [sp, #12]
 800f0c2:	f000 f956 	bl	800f372 <memmove>
 800f0c6:	68a3      	ldr	r3, [r4, #8]
 800f0c8:	6822      	ldr	r2, [r4, #0]
 800f0ca:	1b9b      	subs	r3, r3, r6
 800f0cc:	1992      	adds	r2, r2, r6
 800f0ce:	0037      	movs	r7, r6
 800f0d0:	60a3      	str	r3, [r4, #8]
 800f0d2:	6022      	str	r2, [r4, #0]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d1cf      	bne.n	800f078 <__sfvwrite_r+0x1d4>
 800f0d8:	0021      	movs	r1, r4
 800f0da:	9802      	ldr	r0, [sp, #8]
 800f0dc:	f7fd fcc0 	bl	800ca60 <_fflush_r>
 800f0e0:	2800      	cmp	r0, #0
 800f0e2:	d0c9      	beq.n	800f078 <__sfvwrite_r+0x1d4>
 800f0e4:	e79f      	b.n	800f026 <__sfvwrite_r+0x182>
 800f0e6:	4b1c      	ldr	r3, [pc, #112]	; (800f158 <__sfvwrite_r+0x2b4>)
 800f0e8:	0028      	movs	r0, r5
 800f0ea:	429d      	cmp	r5, r3
 800f0ec:	d900      	bls.n	800f0f0 <__sfvwrite_r+0x24c>
 800f0ee:	481b      	ldr	r0, [pc, #108]	; (800f15c <__sfvwrite_r+0x2b8>)
 800f0f0:	0039      	movs	r1, r7
 800f0f2:	f7f1 f8ad 	bl	8000250 <__divsi3>
 800f0f6:	003b      	movs	r3, r7
 800f0f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f0fa:	4343      	muls	r3, r0
 800f0fc:	9a03      	ldr	r2, [sp, #12]
 800f0fe:	69e1      	ldr	r1, [r4, #28]
 800f100:	9802      	ldr	r0, [sp, #8]
 800f102:	47b0      	blx	r6
 800f104:	1e07      	subs	r7, r0, #0
 800f106:	dcb7      	bgt.n	800f078 <__sfvwrite_r+0x1d4>
 800f108:	e78d      	b.n	800f026 <__sfvwrite_r+0x182>
 800f10a:	9b01      	ldr	r3, [sp, #4]
 800f10c:	2000      	movs	r0, #0
 800f10e:	681e      	ldr	r6, [r3, #0]
 800f110:	685b      	ldr	r3, [r3, #4]
 800f112:	9303      	str	r3, [sp, #12]
 800f114:	9b01      	ldr	r3, [sp, #4]
 800f116:	3308      	adds	r3, #8
 800f118:	9301      	str	r3, [sp, #4]
 800f11a:	e6e6      	b.n	800eeea <__sfvwrite_r+0x46>
 800f11c:	9a05      	ldr	r2, [sp, #20]
 800f11e:	4293      	cmp	r3, r2
 800f120:	dc08      	bgt.n	800f134 <__sfvwrite_r+0x290>
 800f122:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f124:	0032      	movs	r2, r6
 800f126:	69e1      	ldr	r1, [r4, #28]
 800f128:	9802      	ldr	r0, [sp, #8]
 800f12a:	47a8      	blx	r5
 800f12c:	1e05      	subs	r5, r0, #0
 800f12e:	dd00      	ble.n	800f132 <__sfvwrite_r+0x28e>
 800f130:	e70a      	b.n	800ef48 <__sfvwrite_r+0xa4>
 800f132:	e778      	b.n	800f026 <__sfvwrite_r+0x182>
 800f134:	9a05      	ldr	r2, [sp, #20]
 800f136:	0031      	movs	r1, r6
 800f138:	f000 f91b 	bl	800f372 <memmove>
 800f13c:	9a05      	ldr	r2, [sp, #20]
 800f13e:	68a3      	ldr	r3, [r4, #8]
 800f140:	0015      	movs	r5, r2
 800f142:	1a9b      	subs	r3, r3, r2
 800f144:	60a3      	str	r3, [r4, #8]
 800f146:	6823      	ldr	r3, [r4, #0]
 800f148:	189b      	adds	r3, r3, r2
 800f14a:	6023      	str	r3, [r4, #0]
 800f14c:	e6fc      	b.n	800ef48 <__sfvwrite_r+0xa4>
 800f14e:	46c0      	nop			; (mov r8, r8)
 800f150:	7ffffc00 	.word	0x7ffffc00
 800f154:	fffffb7f 	.word	0xfffffb7f
 800f158:	7ffffffe 	.word	0x7ffffffe
 800f15c:	7fffffff 	.word	0x7fffffff

0800f160 <__submore>:
 800f160:	000b      	movs	r3, r1
 800f162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f164:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800f166:	3340      	adds	r3, #64	; 0x40
 800f168:	000c      	movs	r4, r1
 800f16a:	429d      	cmp	r5, r3
 800f16c:	d11c      	bne.n	800f1a8 <__submore+0x48>
 800f16e:	2680      	movs	r6, #128	; 0x80
 800f170:	00f6      	lsls	r6, r6, #3
 800f172:	0031      	movs	r1, r6
 800f174:	f7f8 faea 	bl	800774c <_malloc_r>
 800f178:	2800      	cmp	r0, #0
 800f17a:	d102      	bne.n	800f182 <__submore+0x22>
 800f17c:	2001      	movs	r0, #1
 800f17e:	4240      	negs	r0, r0
 800f180:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f182:	0023      	movs	r3, r4
 800f184:	6320      	str	r0, [r4, #48]	; 0x30
 800f186:	6366      	str	r6, [r4, #52]	; 0x34
 800f188:	3342      	adds	r3, #66	; 0x42
 800f18a:	781a      	ldrb	r2, [r3, #0]
 800f18c:	4b10      	ldr	r3, [pc, #64]	; (800f1d0 <__submore+0x70>)
 800f18e:	54c2      	strb	r2, [r0, r3]
 800f190:	0023      	movs	r3, r4
 800f192:	3341      	adds	r3, #65	; 0x41
 800f194:	781a      	ldrb	r2, [r3, #0]
 800f196:	4b0f      	ldr	r3, [pc, #60]	; (800f1d4 <__submore+0x74>)
 800f198:	54c2      	strb	r2, [r0, r3]
 800f19a:	782a      	ldrb	r2, [r5, #0]
 800f19c:	4b0e      	ldr	r3, [pc, #56]	; (800f1d8 <__submore+0x78>)
 800f19e:	54c2      	strb	r2, [r0, r3]
 800f1a0:	18c0      	adds	r0, r0, r3
 800f1a2:	6020      	str	r0, [r4, #0]
 800f1a4:	2000      	movs	r0, #0
 800f1a6:	e7eb      	b.n	800f180 <__submore+0x20>
 800f1a8:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800f1aa:	0029      	movs	r1, r5
 800f1ac:	0073      	lsls	r3, r6, #1
 800f1ae:	001a      	movs	r2, r3
 800f1b0:	9301      	str	r3, [sp, #4]
 800f1b2:	f7fe fc47 	bl	800da44 <_realloc_r>
 800f1b6:	1e05      	subs	r5, r0, #0
 800f1b8:	d0e0      	beq.n	800f17c <__submore+0x1c>
 800f1ba:	1987      	adds	r7, r0, r6
 800f1bc:	0001      	movs	r1, r0
 800f1be:	0032      	movs	r2, r6
 800f1c0:	0038      	movs	r0, r7
 800f1c2:	f7f9 fde6 	bl	8008d92 <memcpy>
 800f1c6:	9b01      	ldr	r3, [sp, #4]
 800f1c8:	6027      	str	r7, [r4, #0]
 800f1ca:	6325      	str	r5, [r4, #48]	; 0x30
 800f1cc:	6363      	str	r3, [r4, #52]	; 0x34
 800f1ce:	e7e9      	b.n	800f1a4 <__submore+0x44>
 800f1d0:	000003ff 	.word	0x000003ff
 800f1d4:	000003fe 	.word	0x000003fe
 800f1d8:	000003fd 	.word	0x000003fd

0800f1dc <__swsetup_r>:
 800f1dc:	4b30      	ldr	r3, [pc, #192]	; (800f2a0 <__swsetup_r+0xc4>)
 800f1de:	b570      	push	{r4, r5, r6, lr}
 800f1e0:	0005      	movs	r5, r0
 800f1e2:	6818      	ldr	r0, [r3, #0]
 800f1e4:	000c      	movs	r4, r1
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	d004      	beq.n	800f1f4 <__swsetup_r+0x18>
 800f1ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d101      	bne.n	800f1f4 <__swsetup_r+0x18>
 800f1f0:	f7f9 fc20 	bl	8008a34 <__sinit>
 800f1f4:	230c      	movs	r3, #12
 800f1f6:	5ee2      	ldrsh	r2, [r4, r3]
 800f1f8:	b293      	uxth	r3, r2
 800f1fa:	0711      	lsls	r1, r2, #28
 800f1fc:	d423      	bmi.n	800f246 <__swsetup_r+0x6a>
 800f1fe:	06d9      	lsls	r1, r3, #27
 800f200:	d407      	bmi.n	800f212 <__swsetup_r+0x36>
 800f202:	2309      	movs	r3, #9
 800f204:	2001      	movs	r0, #1
 800f206:	602b      	str	r3, [r5, #0]
 800f208:	3337      	adds	r3, #55	; 0x37
 800f20a:	4313      	orrs	r3, r2
 800f20c:	81a3      	strh	r3, [r4, #12]
 800f20e:	4240      	negs	r0, r0
 800f210:	bd70      	pop	{r4, r5, r6, pc}
 800f212:	075b      	lsls	r3, r3, #29
 800f214:	d513      	bpl.n	800f23e <__swsetup_r+0x62>
 800f216:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f218:	2900      	cmp	r1, #0
 800f21a:	d008      	beq.n	800f22e <__swsetup_r+0x52>
 800f21c:	0023      	movs	r3, r4
 800f21e:	3340      	adds	r3, #64	; 0x40
 800f220:	4299      	cmp	r1, r3
 800f222:	d002      	beq.n	800f22a <__swsetup_r+0x4e>
 800f224:	0028      	movs	r0, r5
 800f226:	f7f9 fe2f 	bl	8008e88 <_free_r>
 800f22a:	2300      	movs	r3, #0
 800f22c:	6323      	str	r3, [r4, #48]	; 0x30
 800f22e:	2224      	movs	r2, #36	; 0x24
 800f230:	89a3      	ldrh	r3, [r4, #12]
 800f232:	4393      	bics	r3, r2
 800f234:	81a3      	strh	r3, [r4, #12]
 800f236:	2300      	movs	r3, #0
 800f238:	6063      	str	r3, [r4, #4]
 800f23a:	6923      	ldr	r3, [r4, #16]
 800f23c:	6023      	str	r3, [r4, #0]
 800f23e:	2308      	movs	r3, #8
 800f240:	89a2      	ldrh	r2, [r4, #12]
 800f242:	4313      	orrs	r3, r2
 800f244:	81a3      	strh	r3, [r4, #12]
 800f246:	6923      	ldr	r3, [r4, #16]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d10b      	bne.n	800f264 <__swsetup_r+0x88>
 800f24c:	21a0      	movs	r1, #160	; 0xa0
 800f24e:	2280      	movs	r2, #128	; 0x80
 800f250:	89a3      	ldrh	r3, [r4, #12]
 800f252:	0089      	lsls	r1, r1, #2
 800f254:	0092      	lsls	r2, r2, #2
 800f256:	400b      	ands	r3, r1
 800f258:	4293      	cmp	r3, r2
 800f25a:	d003      	beq.n	800f264 <__swsetup_r+0x88>
 800f25c:	0021      	movs	r1, r4
 800f25e:	0028      	movs	r0, r5
 800f260:	f000 f8e8 	bl	800f434 <__smakebuf_r>
 800f264:	220c      	movs	r2, #12
 800f266:	5ea3      	ldrsh	r3, [r4, r2]
 800f268:	2001      	movs	r0, #1
 800f26a:	001a      	movs	r2, r3
 800f26c:	b299      	uxth	r1, r3
 800f26e:	4002      	ands	r2, r0
 800f270:	4203      	tst	r3, r0
 800f272:	d00f      	beq.n	800f294 <__swsetup_r+0xb8>
 800f274:	2200      	movs	r2, #0
 800f276:	60a2      	str	r2, [r4, #8]
 800f278:	6962      	ldr	r2, [r4, #20]
 800f27a:	4252      	negs	r2, r2
 800f27c:	61a2      	str	r2, [r4, #24]
 800f27e:	2000      	movs	r0, #0
 800f280:	6922      	ldr	r2, [r4, #16]
 800f282:	4282      	cmp	r2, r0
 800f284:	d1c4      	bne.n	800f210 <__swsetup_r+0x34>
 800f286:	0609      	lsls	r1, r1, #24
 800f288:	d5c2      	bpl.n	800f210 <__swsetup_r+0x34>
 800f28a:	2240      	movs	r2, #64	; 0x40
 800f28c:	4313      	orrs	r3, r2
 800f28e:	81a3      	strh	r3, [r4, #12]
 800f290:	3801      	subs	r0, #1
 800f292:	e7bd      	b.n	800f210 <__swsetup_r+0x34>
 800f294:	0788      	lsls	r0, r1, #30
 800f296:	d400      	bmi.n	800f29a <__swsetup_r+0xbe>
 800f298:	6962      	ldr	r2, [r4, #20]
 800f29a:	60a2      	str	r2, [r4, #8]
 800f29c:	e7ef      	b.n	800f27e <__swsetup_r+0xa2>
 800f29e:	46c0      	nop			; (mov r8, r8)
 800f2a0:	200006c0 	.word	0x200006c0

0800f2a4 <__fputwc>:
 800f2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	000e      	movs	r6, r1
 800f2aa:	0015      	movs	r5, r2
 800f2ac:	9001      	str	r0, [sp, #4]
 800f2ae:	f7f9 fccf 	bl	8008c50 <__locale_mb_cur_max>
 800f2b2:	0004      	movs	r4, r0
 800f2b4:	2801      	cmp	r0, #1
 800f2b6:	d119      	bne.n	800f2ec <__fputwc+0x48>
 800f2b8:	1e73      	subs	r3, r6, #1
 800f2ba:	2bfe      	cmp	r3, #254	; 0xfe
 800f2bc:	d816      	bhi.n	800f2ec <__fputwc+0x48>
 800f2be:	ab02      	add	r3, sp, #8
 800f2c0:	711e      	strb	r6, [r3, #4]
 800f2c2:	2700      	movs	r7, #0
 800f2c4:	42a7      	cmp	r7, r4
 800f2c6:	d020      	beq.n	800f30a <__fputwc+0x66>
 800f2c8:	ab03      	add	r3, sp, #12
 800f2ca:	5dd9      	ldrb	r1, [r3, r7]
 800f2cc:	68ab      	ldr	r3, [r5, #8]
 800f2ce:	3b01      	subs	r3, #1
 800f2d0:	60ab      	str	r3, [r5, #8]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	da04      	bge.n	800f2e0 <__fputwc+0x3c>
 800f2d6:	69aa      	ldr	r2, [r5, #24]
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	db19      	blt.n	800f310 <__fputwc+0x6c>
 800f2dc:	290a      	cmp	r1, #10
 800f2de:	d017      	beq.n	800f310 <__fputwc+0x6c>
 800f2e0:	682b      	ldr	r3, [r5, #0]
 800f2e2:	1c5a      	adds	r2, r3, #1
 800f2e4:	602a      	str	r2, [r5, #0]
 800f2e6:	7019      	strb	r1, [r3, #0]
 800f2e8:	3701      	adds	r7, #1
 800f2ea:	e7eb      	b.n	800f2c4 <__fputwc+0x20>
 800f2ec:	002b      	movs	r3, r5
 800f2ee:	0032      	movs	r2, r6
 800f2f0:	9801      	ldr	r0, [sp, #4]
 800f2f2:	335c      	adds	r3, #92	; 0x5c
 800f2f4:	a903      	add	r1, sp, #12
 800f2f6:	f000 f857 	bl	800f3a8 <_wcrtomb_r>
 800f2fa:	0004      	movs	r4, r0
 800f2fc:	1c43      	adds	r3, r0, #1
 800f2fe:	d1e0      	bne.n	800f2c2 <__fputwc+0x1e>
 800f300:	2340      	movs	r3, #64	; 0x40
 800f302:	0006      	movs	r6, r0
 800f304:	89aa      	ldrh	r2, [r5, #12]
 800f306:	4313      	orrs	r3, r2
 800f308:	81ab      	strh	r3, [r5, #12]
 800f30a:	0030      	movs	r0, r6
 800f30c:	b005      	add	sp, #20
 800f30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f310:	002a      	movs	r2, r5
 800f312:	9801      	ldr	r0, [sp, #4]
 800f314:	f000 f8cc 	bl	800f4b0 <__swbuf_r>
 800f318:	1c43      	adds	r3, r0, #1
 800f31a:	d1e5      	bne.n	800f2e8 <__fputwc+0x44>
 800f31c:	0006      	movs	r6, r0
 800f31e:	e7f4      	b.n	800f30a <__fputwc+0x66>

0800f320 <_fputwc_r>:
 800f320:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800f322:	b570      	push	{r4, r5, r6, lr}
 800f324:	0005      	movs	r5, r0
 800f326:	000e      	movs	r6, r1
 800f328:	0014      	movs	r4, r2
 800f32a:	07db      	lsls	r3, r3, #31
 800f32c:	d405      	bmi.n	800f33a <_fputwc_r+0x1a>
 800f32e:	8993      	ldrh	r3, [r2, #12]
 800f330:	059b      	lsls	r3, r3, #22
 800f332:	d402      	bmi.n	800f33a <_fputwc_r+0x1a>
 800f334:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800f336:	f7f9 fd1f 	bl	8008d78 <__retarget_lock_acquire_recursive>
 800f33a:	230c      	movs	r3, #12
 800f33c:	5ee2      	ldrsh	r2, [r4, r3]
 800f33e:	2380      	movs	r3, #128	; 0x80
 800f340:	019b      	lsls	r3, r3, #6
 800f342:	421a      	tst	r2, r3
 800f344:	d104      	bne.n	800f350 <_fputwc_r+0x30>
 800f346:	431a      	orrs	r2, r3
 800f348:	81a2      	strh	r2, [r4, #12]
 800f34a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f34c:	4313      	orrs	r3, r2
 800f34e:	6663      	str	r3, [r4, #100]	; 0x64
 800f350:	0028      	movs	r0, r5
 800f352:	0022      	movs	r2, r4
 800f354:	0031      	movs	r1, r6
 800f356:	f7ff ffa5 	bl	800f2a4 <__fputwc>
 800f35a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f35c:	0005      	movs	r5, r0
 800f35e:	07db      	lsls	r3, r3, #31
 800f360:	d405      	bmi.n	800f36e <_fputwc_r+0x4e>
 800f362:	89a3      	ldrh	r3, [r4, #12]
 800f364:	059b      	lsls	r3, r3, #22
 800f366:	d402      	bmi.n	800f36e <_fputwc_r+0x4e>
 800f368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f36a:	f7f9 fd06 	bl	8008d7a <__retarget_lock_release_recursive>
 800f36e:	0028      	movs	r0, r5
 800f370:	bd70      	pop	{r4, r5, r6, pc}

0800f372 <memmove>:
 800f372:	b510      	push	{r4, lr}
 800f374:	4288      	cmp	r0, r1
 800f376:	d902      	bls.n	800f37e <memmove+0xc>
 800f378:	188b      	adds	r3, r1, r2
 800f37a:	4298      	cmp	r0, r3
 800f37c:	d303      	bcc.n	800f386 <memmove+0x14>
 800f37e:	2300      	movs	r3, #0
 800f380:	e007      	b.n	800f392 <memmove+0x20>
 800f382:	5c8b      	ldrb	r3, [r1, r2]
 800f384:	5483      	strb	r3, [r0, r2]
 800f386:	3a01      	subs	r2, #1
 800f388:	d2fb      	bcs.n	800f382 <memmove+0x10>
 800f38a:	bd10      	pop	{r4, pc}
 800f38c:	5ccc      	ldrb	r4, [r1, r3]
 800f38e:	54c4      	strb	r4, [r0, r3]
 800f390:	3301      	adds	r3, #1
 800f392:	429a      	cmp	r2, r3
 800f394:	d1fa      	bne.n	800f38c <memmove+0x1a>
 800f396:	e7f8      	b.n	800f38a <memmove+0x18>

0800f398 <abort>:
 800f398:	2006      	movs	r0, #6
 800f39a:	b510      	push	{r4, lr}
 800f39c:	f000 f906 	bl	800f5ac <raise>
 800f3a0:	2001      	movs	r0, #1
 800f3a2:	f7f4 f845 	bl	8003430 <_exit>
	...

0800f3a8 <_wcrtomb_r>:
 800f3a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f3aa:	001d      	movs	r5, r3
 800f3ac:	4b09      	ldr	r3, [pc, #36]	; (800f3d4 <_wcrtomb_r+0x2c>)
 800f3ae:	0004      	movs	r4, r0
 800f3b0:	33e0      	adds	r3, #224	; 0xe0
 800f3b2:	681e      	ldr	r6, [r3, #0]
 800f3b4:	002b      	movs	r3, r5
 800f3b6:	2900      	cmp	r1, #0
 800f3b8:	d101      	bne.n	800f3be <_wcrtomb_r+0x16>
 800f3ba:	000a      	movs	r2, r1
 800f3bc:	a901      	add	r1, sp, #4
 800f3be:	0020      	movs	r0, r4
 800f3c0:	47b0      	blx	r6
 800f3c2:	1c43      	adds	r3, r0, #1
 800f3c4:	d103      	bne.n	800f3ce <_wcrtomb_r+0x26>
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	602b      	str	r3, [r5, #0]
 800f3ca:	338a      	adds	r3, #138	; 0x8a
 800f3cc:	6023      	str	r3, [r4, #0]
 800f3ce:	b004      	add	sp, #16
 800f3d0:	bd70      	pop	{r4, r5, r6, pc}
 800f3d2:	46c0      	nop			; (mov r8, r8)
 800f3d4:	20000430 	.word	0x20000430

0800f3d8 <__swhatbuf_r>:
 800f3d8:	b570      	push	{r4, r5, r6, lr}
 800f3da:	000e      	movs	r6, r1
 800f3dc:	001d      	movs	r5, r3
 800f3de:	230e      	movs	r3, #14
 800f3e0:	5ec9      	ldrsh	r1, [r1, r3]
 800f3e2:	0014      	movs	r4, r2
 800f3e4:	b096      	sub	sp, #88	; 0x58
 800f3e6:	2900      	cmp	r1, #0
 800f3e8:	da09      	bge.n	800f3fe <__swhatbuf_r+0x26>
 800f3ea:	89b2      	ldrh	r2, [r6, #12]
 800f3ec:	2380      	movs	r3, #128	; 0x80
 800f3ee:	0011      	movs	r1, r2
 800f3f0:	4019      	ands	r1, r3
 800f3f2:	421a      	tst	r2, r3
 800f3f4:	d018      	beq.n	800f428 <__swhatbuf_r+0x50>
 800f3f6:	2100      	movs	r1, #0
 800f3f8:	3b40      	subs	r3, #64	; 0x40
 800f3fa:	0008      	movs	r0, r1
 800f3fc:	e010      	b.n	800f420 <__swhatbuf_r+0x48>
 800f3fe:	466a      	mov	r2, sp
 800f400:	f000 f8de 	bl	800f5c0 <_fstat_r>
 800f404:	2800      	cmp	r0, #0
 800f406:	dbf0      	blt.n	800f3ea <__swhatbuf_r+0x12>
 800f408:	23f0      	movs	r3, #240	; 0xf0
 800f40a:	9901      	ldr	r1, [sp, #4]
 800f40c:	021b      	lsls	r3, r3, #8
 800f40e:	4019      	ands	r1, r3
 800f410:	4b07      	ldr	r3, [pc, #28]	; (800f430 <__swhatbuf_r+0x58>)
 800f412:	2080      	movs	r0, #128	; 0x80
 800f414:	18c9      	adds	r1, r1, r3
 800f416:	424b      	negs	r3, r1
 800f418:	4159      	adcs	r1, r3
 800f41a:	2380      	movs	r3, #128	; 0x80
 800f41c:	0100      	lsls	r0, r0, #4
 800f41e:	00db      	lsls	r3, r3, #3
 800f420:	6029      	str	r1, [r5, #0]
 800f422:	6023      	str	r3, [r4, #0]
 800f424:	b016      	add	sp, #88	; 0x58
 800f426:	bd70      	pop	{r4, r5, r6, pc}
 800f428:	2380      	movs	r3, #128	; 0x80
 800f42a:	00db      	lsls	r3, r3, #3
 800f42c:	e7e5      	b.n	800f3fa <__swhatbuf_r+0x22>
 800f42e:	46c0      	nop			; (mov r8, r8)
 800f430:	ffffe000 	.word	0xffffe000

0800f434 <__smakebuf_r>:
 800f434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f436:	2602      	movs	r6, #2
 800f438:	898b      	ldrh	r3, [r1, #12]
 800f43a:	0005      	movs	r5, r0
 800f43c:	000c      	movs	r4, r1
 800f43e:	4233      	tst	r3, r6
 800f440:	d006      	beq.n	800f450 <__smakebuf_r+0x1c>
 800f442:	0023      	movs	r3, r4
 800f444:	3343      	adds	r3, #67	; 0x43
 800f446:	6023      	str	r3, [r4, #0]
 800f448:	6123      	str	r3, [r4, #16]
 800f44a:	2301      	movs	r3, #1
 800f44c:	6163      	str	r3, [r4, #20]
 800f44e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f450:	466a      	mov	r2, sp
 800f452:	ab01      	add	r3, sp, #4
 800f454:	f7ff ffc0 	bl	800f3d8 <__swhatbuf_r>
 800f458:	9900      	ldr	r1, [sp, #0]
 800f45a:	0007      	movs	r7, r0
 800f45c:	0028      	movs	r0, r5
 800f45e:	f7f8 f975 	bl	800774c <_malloc_r>
 800f462:	2800      	cmp	r0, #0
 800f464:	d108      	bne.n	800f478 <__smakebuf_r+0x44>
 800f466:	220c      	movs	r2, #12
 800f468:	5ea3      	ldrsh	r3, [r4, r2]
 800f46a:	059a      	lsls	r2, r3, #22
 800f46c:	d4ef      	bmi.n	800f44e <__smakebuf_r+0x1a>
 800f46e:	2203      	movs	r2, #3
 800f470:	4393      	bics	r3, r2
 800f472:	431e      	orrs	r6, r3
 800f474:	81a6      	strh	r6, [r4, #12]
 800f476:	e7e4      	b.n	800f442 <__smakebuf_r+0xe>
 800f478:	2380      	movs	r3, #128	; 0x80
 800f47a:	89a2      	ldrh	r2, [r4, #12]
 800f47c:	6020      	str	r0, [r4, #0]
 800f47e:	4313      	orrs	r3, r2
 800f480:	81a3      	strh	r3, [r4, #12]
 800f482:	9b00      	ldr	r3, [sp, #0]
 800f484:	6120      	str	r0, [r4, #16]
 800f486:	6163      	str	r3, [r4, #20]
 800f488:	9b01      	ldr	r3, [sp, #4]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d00c      	beq.n	800f4a8 <__smakebuf_r+0x74>
 800f48e:	0028      	movs	r0, r5
 800f490:	230e      	movs	r3, #14
 800f492:	5ee1      	ldrsh	r1, [r4, r3]
 800f494:	f000 f8a6 	bl	800f5e4 <_isatty_r>
 800f498:	2800      	cmp	r0, #0
 800f49a:	d005      	beq.n	800f4a8 <__smakebuf_r+0x74>
 800f49c:	2303      	movs	r3, #3
 800f49e:	89a2      	ldrh	r2, [r4, #12]
 800f4a0:	439a      	bics	r2, r3
 800f4a2:	3b02      	subs	r3, #2
 800f4a4:	4313      	orrs	r3, r2
 800f4a6:	81a3      	strh	r3, [r4, #12]
 800f4a8:	89a3      	ldrh	r3, [r4, #12]
 800f4aa:	433b      	orrs	r3, r7
 800f4ac:	81a3      	strh	r3, [r4, #12]
 800f4ae:	e7ce      	b.n	800f44e <__smakebuf_r+0x1a>

0800f4b0 <__swbuf_r>:
 800f4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4b2:	0006      	movs	r6, r0
 800f4b4:	000d      	movs	r5, r1
 800f4b6:	0014      	movs	r4, r2
 800f4b8:	2800      	cmp	r0, #0
 800f4ba:	d004      	beq.n	800f4c6 <__swbuf_r+0x16>
 800f4bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d101      	bne.n	800f4c6 <__swbuf_r+0x16>
 800f4c2:	f7f9 fab7 	bl	8008a34 <__sinit>
 800f4c6:	69a3      	ldr	r3, [r4, #24]
 800f4c8:	60a3      	str	r3, [r4, #8]
 800f4ca:	89a3      	ldrh	r3, [r4, #12]
 800f4cc:	071b      	lsls	r3, r3, #28
 800f4ce:	d52e      	bpl.n	800f52e <__swbuf_r+0x7e>
 800f4d0:	6923      	ldr	r3, [r4, #16]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d02b      	beq.n	800f52e <__swbuf_r+0x7e>
 800f4d6:	230c      	movs	r3, #12
 800f4d8:	5ee2      	ldrsh	r2, [r4, r3]
 800f4da:	2380      	movs	r3, #128	; 0x80
 800f4dc:	019b      	lsls	r3, r3, #6
 800f4de:	b2ef      	uxtb	r7, r5
 800f4e0:	b2ed      	uxtb	r5, r5
 800f4e2:	421a      	tst	r2, r3
 800f4e4:	d02c      	beq.n	800f540 <__swbuf_r+0x90>
 800f4e6:	6923      	ldr	r3, [r4, #16]
 800f4e8:	6820      	ldr	r0, [r4, #0]
 800f4ea:	1ac0      	subs	r0, r0, r3
 800f4ec:	6963      	ldr	r3, [r4, #20]
 800f4ee:	4283      	cmp	r3, r0
 800f4f0:	dc05      	bgt.n	800f4fe <__swbuf_r+0x4e>
 800f4f2:	0021      	movs	r1, r4
 800f4f4:	0030      	movs	r0, r6
 800f4f6:	f7fd fab3 	bl	800ca60 <_fflush_r>
 800f4fa:	2800      	cmp	r0, #0
 800f4fc:	d11d      	bne.n	800f53a <__swbuf_r+0x8a>
 800f4fe:	68a3      	ldr	r3, [r4, #8]
 800f500:	3001      	adds	r0, #1
 800f502:	3b01      	subs	r3, #1
 800f504:	60a3      	str	r3, [r4, #8]
 800f506:	6823      	ldr	r3, [r4, #0]
 800f508:	1c5a      	adds	r2, r3, #1
 800f50a:	6022      	str	r2, [r4, #0]
 800f50c:	701f      	strb	r7, [r3, #0]
 800f50e:	6963      	ldr	r3, [r4, #20]
 800f510:	4283      	cmp	r3, r0
 800f512:	d004      	beq.n	800f51e <__swbuf_r+0x6e>
 800f514:	89a3      	ldrh	r3, [r4, #12]
 800f516:	07db      	lsls	r3, r3, #31
 800f518:	d507      	bpl.n	800f52a <__swbuf_r+0x7a>
 800f51a:	2d0a      	cmp	r5, #10
 800f51c:	d105      	bne.n	800f52a <__swbuf_r+0x7a>
 800f51e:	0021      	movs	r1, r4
 800f520:	0030      	movs	r0, r6
 800f522:	f7fd fa9d 	bl	800ca60 <_fflush_r>
 800f526:	2800      	cmp	r0, #0
 800f528:	d107      	bne.n	800f53a <__swbuf_r+0x8a>
 800f52a:	0028      	movs	r0, r5
 800f52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f52e:	0021      	movs	r1, r4
 800f530:	0030      	movs	r0, r6
 800f532:	f7ff fe53 	bl	800f1dc <__swsetup_r>
 800f536:	2800      	cmp	r0, #0
 800f538:	d0cd      	beq.n	800f4d6 <__swbuf_r+0x26>
 800f53a:	2501      	movs	r5, #1
 800f53c:	426d      	negs	r5, r5
 800f53e:	e7f4      	b.n	800f52a <__swbuf_r+0x7a>
 800f540:	4313      	orrs	r3, r2
 800f542:	81a3      	strh	r3, [r4, #12]
 800f544:	4a02      	ldr	r2, [pc, #8]	; (800f550 <__swbuf_r+0xa0>)
 800f546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f548:	4013      	ands	r3, r2
 800f54a:	6663      	str	r3, [r4, #100]	; 0x64
 800f54c:	e7cb      	b.n	800f4e6 <__swbuf_r+0x36>
 800f54e:	46c0      	nop			; (mov r8, r8)
 800f550:	ffffdfff 	.word	0xffffdfff

0800f554 <_raise_r>:
 800f554:	b570      	push	{r4, r5, r6, lr}
 800f556:	0004      	movs	r4, r0
 800f558:	000d      	movs	r5, r1
 800f55a:	291f      	cmp	r1, #31
 800f55c:	d904      	bls.n	800f568 <_raise_r+0x14>
 800f55e:	2316      	movs	r3, #22
 800f560:	6003      	str	r3, [r0, #0]
 800f562:	2001      	movs	r0, #1
 800f564:	4240      	negs	r0, r0
 800f566:	bd70      	pop	{r4, r5, r6, pc}
 800f568:	0003      	movs	r3, r0
 800f56a:	33fc      	adds	r3, #252	; 0xfc
 800f56c:	69db      	ldr	r3, [r3, #28]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d004      	beq.n	800f57c <_raise_r+0x28>
 800f572:	008a      	lsls	r2, r1, #2
 800f574:	189b      	adds	r3, r3, r2
 800f576:	681a      	ldr	r2, [r3, #0]
 800f578:	2a00      	cmp	r2, #0
 800f57a:	d108      	bne.n	800f58e <_raise_r+0x3a>
 800f57c:	0020      	movs	r0, r4
 800f57e:	f000 f855 	bl	800f62c <_getpid_r>
 800f582:	002a      	movs	r2, r5
 800f584:	0001      	movs	r1, r0
 800f586:	0020      	movs	r0, r4
 800f588:	f000 f83e 	bl	800f608 <_kill_r>
 800f58c:	e7eb      	b.n	800f566 <_raise_r+0x12>
 800f58e:	2000      	movs	r0, #0
 800f590:	2a01      	cmp	r2, #1
 800f592:	d0e8      	beq.n	800f566 <_raise_r+0x12>
 800f594:	1c51      	adds	r1, r2, #1
 800f596:	d103      	bne.n	800f5a0 <_raise_r+0x4c>
 800f598:	2316      	movs	r3, #22
 800f59a:	3001      	adds	r0, #1
 800f59c:	6023      	str	r3, [r4, #0]
 800f59e:	e7e2      	b.n	800f566 <_raise_r+0x12>
 800f5a0:	2400      	movs	r4, #0
 800f5a2:	0028      	movs	r0, r5
 800f5a4:	601c      	str	r4, [r3, #0]
 800f5a6:	4790      	blx	r2
 800f5a8:	0020      	movs	r0, r4
 800f5aa:	e7dc      	b.n	800f566 <_raise_r+0x12>

0800f5ac <raise>:
 800f5ac:	b510      	push	{r4, lr}
 800f5ae:	4b03      	ldr	r3, [pc, #12]	; (800f5bc <raise+0x10>)
 800f5b0:	0001      	movs	r1, r0
 800f5b2:	6818      	ldr	r0, [r3, #0]
 800f5b4:	f7ff ffce 	bl	800f554 <_raise_r>
 800f5b8:	bd10      	pop	{r4, pc}
 800f5ba:	46c0      	nop			; (mov r8, r8)
 800f5bc:	200006c0 	.word	0x200006c0

0800f5c0 <_fstat_r>:
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	b570      	push	{r4, r5, r6, lr}
 800f5c4:	4d06      	ldr	r5, [pc, #24]	; (800f5e0 <_fstat_r+0x20>)
 800f5c6:	0004      	movs	r4, r0
 800f5c8:	0008      	movs	r0, r1
 800f5ca:	0011      	movs	r1, r2
 800f5cc:	602b      	str	r3, [r5, #0]
 800f5ce:	f7f3 ff7e 	bl	80034ce <_fstat>
 800f5d2:	1c43      	adds	r3, r0, #1
 800f5d4:	d103      	bne.n	800f5de <_fstat_r+0x1e>
 800f5d6:	682b      	ldr	r3, [r5, #0]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d000      	beq.n	800f5de <_fstat_r+0x1e>
 800f5dc:	6023      	str	r3, [r4, #0]
 800f5de:	bd70      	pop	{r4, r5, r6, pc}
 800f5e0:	20000ba0 	.word	0x20000ba0

0800f5e4 <_isatty_r>:
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	b570      	push	{r4, r5, r6, lr}
 800f5e8:	4d06      	ldr	r5, [pc, #24]	; (800f604 <_isatty_r+0x20>)
 800f5ea:	0004      	movs	r4, r0
 800f5ec:	0008      	movs	r0, r1
 800f5ee:	602b      	str	r3, [r5, #0]
 800f5f0:	f7f3 ff7b 	bl	80034ea <_isatty>
 800f5f4:	1c43      	adds	r3, r0, #1
 800f5f6:	d103      	bne.n	800f600 <_isatty_r+0x1c>
 800f5f8:	682b      	ldr	r3, [r5, #0]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d000      	beq.n	800f600 <_isatty_r+0x1c>
 800f5fe:	6023      	str	r3, [r4, #0]
 800f600:	bd70      	pop	{r4, r5, r6, pc}
 800f602:	46c0      	nop			; (mov r8, r8)
 800f604:	20000ba0 	.word	0x20000ba0

0800f608 <_kill_r>:
 800f608:	2300      	movs	r3, #0
 800f60a:	b570      	push	{r4, r5, r6, lr}
 800f60c:	4d06      	ldr	r5, [pc, #24]	; (800f628 <_kill_r+0x20>)
 800f60e:	0004      	movs	r4, r0
 800f610:	0008      	movs	r0, r1
 800f612:	0011      	movs	r1, r2
 800f614:	602b      	str	r3, [r5, #0]
 800f616:	f7f3 fefb 	bl	8003410 <_kill>
 800f61a:	1c43      	adds	r3, r0, #1
 800f61c:	d103      	bne.n	800f626 <_kill_r+0x1e>
 800f61e:	682b      	ldr	r3, [r5, #0]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d000      	beq.n	800f626 <_kill_r+0x1e>
 800f624:	6023      	str	r3, [r4, #0]
 800f626:	bd70      	pop	{r4, r5, r6, pc}
 800f628:	20000ba0 	.word	0x20000ba0

0800f62c <_getpid_r>:
 800f62c:	b510      	push	{r4, lr}
 800f62e:	f7f3 fee9 	bl	8003404 <_getpid>
 800f632:	bd10      	pop	{r4, pc}

0800f634 <_init>:
 800f634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f636:	46c0      	nop			; (mov r8, r8)
 800f638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f63a:	bc08      	pop	{r3}
 800f63c:	469e      	mov	lr, r3
 800f63e:	4770      	bx	lr

0800f640 <_fini>:
 800f640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f642:	46c0      	nop			; (mov r8, r8)
 800f644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f646:	bc08      	pop	{r3}
 800f648:	469e      	mov	lr, r3
 800f64a:	4770      	bx	lr
