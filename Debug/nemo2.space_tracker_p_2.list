
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012800  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000205c  080128c0  080128c0  000228c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801491c  0801491c  000306d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801491c  0801491c  0002491c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014924  08014924  000306d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014924  08014924  00024924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801492c  0801492c  0002492c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d8  20000000  08014930  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  200006d8  08015008  000306d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f44  08015008  00030f44  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a047  00000000  00000000  00030743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003adc  00000000  00000000  0004a78a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001870  00000000  00000000  0004e268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000131d  00000000  00000000  0004fad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d2c  00000000  00000000  00050df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f2b9  00000000  00000000  00072b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caf94  00000000  00000000  00091dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000073a0  00000000  00000000  0015cd70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00164110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d8 	.word	0x200006d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080128a4 	.word	0x080128a4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006dc 	.word	0x200006dc
 8000100:	080128a4 	.word	0x080128a4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	080143b4 	.word	0x080143b4
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	46ce      	mov	lr, r9
 80025ac:	4647      	mov	r7, r8
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b08b      	sub	sp, #44	; 0x2c
 80025b2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b4:	f001 fbce 	bl	8003d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b8:	f000 fa0c 	bl	80029d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025bc:	f000 fc9e 	bl	8002efc <MX_GPIO_Init>
  MX_RTC_Init();
 80025c0:	f000 fa5e 	bl	8002a80 <MX_RTC_Init>
  MX_TIM6_Init();
 80025c4:	f000 fb3e 	bl	8002c44 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c8:	f000 fafe 	bl	8002bc8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025cc:	f000 fb78 	bl	8002cc0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025d0:	f000 fbc4 	bl	8002d5c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025d4:	f000 fc10 	bl	8002df8 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d8:	f000 fc5c 	bl	8002e94 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  // Kod testowy do usunięcia
  char test[] = "32,35678" ;
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	4ae3      	ldr	r2, [pc, #908]	; (800296c <main+0x3c4>)
 80025e0:	ca03      	ldmia	r2!, {r0, r1}
 80025e2:	c303      	stmia	r3!, {r0, r1}
 80025e4:	7812      	ldrb	r2, [r2, #0]
 80025e6:	701a      	strb	r2, [r3, #0]
  if ( my_tracker_api_is_cmd ( test ) )
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	0018      	movs	r0, r3
 80025ec:	f008 f842 	bl	800a674 <my_tracker_api_is_cmd>
 80025f0:	1e03      	subs	r3, r0, #0
 80025f2:	d005      	beq.n	8002600 <main+0x58>
  {
	  my_tracker_api_parse_cmd ( &my_astro_cmd , test ) ;
 80025f4:	1d3a      	adds	r2, r7, #4
 80025f6:	4bde      	ldr	r3, [pc, #888]	; (8002970 <main+0x3c8>)
 80025f8:	0011      	movs	r1, r2
 80025fa:	0018      	movs	r0, r3
 80025fc:	f008 f8a4 	bl	800a748 <my_tracker_api_parse_cmd>
	  my_astro_cmd.value = my_tracker_api_get_cmd_value ( test ) ;*/
  }



  send_debug_logs ( hello ) ;
 8002600:	4bdc      	ldr	r3, [pc, #880]	; (8002974 <main+0x3cc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0018      	movs	r0, r3
 8002606:	f000 fd85 	bl	8003114 <send_debug_logs>

  my_sys_init () ;
 800260a:	f000 fdb3 	bl	8003174 <my_sys_init>
  sprintf ( dbg_payload , "System mode: %u" , sys_mode ) ;
 800260e:	4bda      	ldr	r3, [pc, #872]	; (8002978 <main+0x3d0>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	001a      	movs	r2, r3
 8002614:	49d9      	ldr	r1, [pc, #868]	; (800297c <main+0x3d4>)
 8002616:	4bda      	ldr	r3, [pc, #872]	; (8002980 <main+0x3d8>)
 8002618:	0018      	movs	r0, r3
 800261a:	f009 fb69 	bl	800bcf0 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 800261e:	4bd8      	ldr	r3, [pc, #864]	; (8002980 <main+0x3d8>)
 8002620:	0018      	movs	r0, r3
 8002622:	f000 fd77 	bl	8003114 <send_debug_logs>

  my_tim_init () ;
 8002626:	f000 ff7f 	bl	8003528 <my_tim_init>
  my_ant_sw_pos ( 2 ) ;
 800262a:	2002      	movs	r0, #2
 800262c:	f000 fe6c 	bl	8003308 <my_ant_sw_pos>

  // my_gnss_verbose ( 15 ) ;

  my_gnss_sw_on () ;
 8002630:	f000 fe9c 	bl	800336c <my_gnss_sw_on>
  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002634:	4bd3      	ldr	r3, [pc, #844]	; (8002984 <main+0x3dc>)
 8002636:	0018      	movs	r0, r3
 8002638:	f006 ff86 	bl	8009548 <my_gnss_acq_coordinates>
 800263c:	0003      	movs	r3, r0
 800263e:	001a      	movs	r2, r3
 8002640:	4bd1      	ldr	r3, [pc, #836]	; (8002988 <main+0x3e0>)
 8002642:	701a      	strb	r2, [r3, #0]
  my_gnss_sw_off () ;
 8002644:	f000 feac 	bl	80033a0 <my_gnss_sw_off>
  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002648:	4bd0      	ldr	r3, [pc, #832]	; (800298c <main+0x3e4>)
 800264a:	0018      	movs	r0, r3
 800264c:	f007 f902 	bl	8009854 <my_rtc_get_dt_s>
  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 8002650:	4bcc      	ldr	r3, [pc, #816]	; (8002984 <main+0x3dc>)
 8002652:	7c1b      	ldrb	r3, [r3, #16]
 8002654:	001e      	movs	r6, r3
 8002656:	4bcb      	ldr	r3, [pc, #812]	; (8002984 <main+0x3dc>)
 8002658:	689c      	ldr	r4, [r3, #8]
 800265a:	68dd      	ldr	r5, [r3, #12]
 800265c:	4bc9      	ldr	r3, [pc, #804]	; (8002984 <main+0x3dc>)
 800265e:	8a5b      	ldrh	r3, [r3, #18]
 8002660:	4698      	mov	r8, r3
 8002662:	4bc8      	ldr	r3, [pc, #800]	; (8002984 <main+0x3dc>)
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	213c      	movs	r1, #60	; 0x3c
 8002668:	0018      	movs	r0, r3
 800266a:	f7fd fd67 	bl	800013c <__udivsi3>
 800266e:	0003      	movs	r3, r0
 8002670:	4ac7      	ldr	r2, [pc, #796]	; (8002990 <main+0x3e8>)
 8002672:	49c8      	ldr	r1, [pc, #800]	; (8002994 <main+0x3ec>)
 8002674:	48c2      	ldr	r0, [pc, #776]	; (8002980 <main+0x3d8>)
 8002676:	9305      	str	r3, [sp, #20]
 8002678:	4643      	mov	r3, r8
 800267a:	9304      	str	r3, [sp, #16]
 800267c:	9402      	str	r4, [sp, #8]
 800267e:	9503      	str	r5, [sp, #12]
 8002680:	9601      	str	r6, [sp, #4]
 8002682:	4bc2      	ldr	r3, [pc, #776]	; (800298c <main+0x3e4>)
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	23bc      	movs	r3, #188	; 0xbc
 8002688:	f009 fb32 	bl	800bcf0 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 800268c:	4bbc      	ldr	r3, [pc, #752]	; (8002980 <main+0x3d8>)
 800268e:	0018      	movs	r0, r3
 8002690:	f000 fd40 	bl	8003114 <send_debug_logs>
  if ( !my_gnss_3dfix_flag )
 8002694:	4bbc      	ldr	r3, [pc, #752]	; (8002988 <main+0x3e0>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2201      	movs	r2, #1
 800269a:	4053      	eors	r3, r2
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d027      	beq.n	80026f2 <main+0x14a>
  {
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 80026a2:	4bbd      	ldr	r3, [pc, #756]	; (8002998 <main+0x3f0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	0018      	movs	r0, r3
 80026a8:	f007 f916 	bl	80098d8 <my_rtc_set_alarm>
 80026ac:	1e03      	subs	r3, r0, #0
 80026ae:	d020      	beq.n	80026f2 <main+0x14a>
	  {
		  sprintf ( dbg_payload , "%s,%d,HAL_PWR_EnterSTANDBYMode" , __FILE__ , __LINE__ ) ;
 80026b0:	4ab7      	ldr	r2, [pc, #732]	; (8002990 <main+0x3e8>)
 80026b2:	49ba      	ldr	r1, [pc, #744]	; (800299c <main+0x3f4>)
 80026b4:	48b2      	ldr	r0, [pc, #712]	; (8002980 <main+0x3d8>)
 80026b6:	23c2      	movs	r3, #194	; 0xc2
 80026b8:	f009 fb1a 	bl	800bcf0 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026bc:	4bb0      	ldr	r3, [pc, #704]	; (8002980 <main+0x3d8>)
 80026be:	0018      	movs	r0, r3
 80026c0:	f000 fd28 	bl	8003114 <send_debug_logs>
		  my_tim_stop () ;
 80026c4:	f000 ff4c 	bl	8003560 <my_tim_stop>
		  my_rtc_alarm_flag = false ;
 80026c8:	4bb5      	ldr	r3, [pc, #724]	; (80029a0 <main+0x3f8>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTANDBYMode () ;
 80026ce:	f002 f809 	bl	80046e4 <HAL_PWR_EnterSTANDBYMode>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80026d2:	4bae      	ldr	r3, [pc, #696]	; (800298c <main+0x3e4>)
 80026d4:	0018      	movs	r0, r3
 80026d6:	f007 f8bd 	bl	8009854 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80026da:	4aad      	ldr	r2, [pc, #692]	; (8002990 <main+0x3e8>)
 80026dc:	49b1      	ldr	r1, [pc, #708]	; (80029a4 <main+0x3fc>)
 80026de:	48a8      	ldr	r0, [pc, #672]	; (8002980 <main+0x3d8>)
 80026e0:	4baa      	ldr	r3, [pc, #680]	; (800298c <main+0x3e4>)
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	23c8      	movs	r3, #200	; 0xc8
 80026e6:	f009 fb03 	bl	800bcf0 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026ea:	4ba5      	ldr	r3, [pc, #660]	; (8002980 <main+0x3d8>)
 80026ec:	0018      	movs	r0, r3
 80026ee:	f000 fd11 	bl	8003114 <send_debug_logs>
	  }
  }

  if ( !my_astro_init () )
 80026f2:	f006 fe77 	bl	80093e4 <my_astro_init>
 80026f6:	0003      	movs	r3, r0
 80026f8:	001a      	movs	r2, r3
 80026fa:	2301      	movs	r3, #1
 80026fc:	4053      	eors	r3, r2
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01e      	beq.n	8002742 <main+0x19a>
  {
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002704:	4ba1      	ldr	r3, [pc, #644]	; (800298c <main+0x3e4>)
 8002706:	0018      	movs	r0, r3
 8002708:	f007 f8a4 	bl	8009854 <my_rtc_get_dt_s>
	  sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800270c:	4aa0      	ldr	r2, [pc, #640]	; (8002990 <main+0x3e8>)
 800270e:	49a6      	ldr	r1, [pc, #664]	; (80029a8 <main+0x400>)
 8002710:	489b      	ldr	r0, [pc, #620]	; (8002980 <main+0x3d8>)
 8002712:	4b9e      	ldr	r3, [pc, #632]	; (800298c <main+0x3e4>)
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	23d0      	movs	r3, #208	; 0xd0
 8002718:	f009 faea 	bl	800bcf0 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 800271c:	4b98      	ldr	r3, [pc, #608]	; (8002980 <main+0x3d8>)
 800271e:	0018      	movs	r0, r3
 8002720:	f000 fcf8 	bl	8003114 <send_debug_logs>
	  HAL_NVIC_SystemReset () ;
 8002724:	f001 fcd5 	bl	80040d2 <HAL_NVIC_SystemReset>
 8002728:	e061      	b.n	80027ee <main+0x246>
  }
  else
  {
	  while ( my_astro_evt_pin () )
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 800272a:	4a99      	ldr	r2, [pc, #612]	; (8002990 <main+0x3e8>)
 800272c:	499f      	ldr	r1, [pc, #636]	; (80029ac <main+0x404>)
 800272e:	4894      	ldr	r0, [pc, #592]	; (8002980 <main+0x3d8>)
 8002730:	23d8      	movs	r3, #216	; 0xd8
 8002732:	f009 fadd 	bl	800bcf0 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002736:	4b92      	ldr	r3, [pc, #584]	; (8002980 <main+0x3d8>)
 8002738:	0018      	movs	r0, r3
 800273a:	f000 fceb 	bl	8003114 <send_debug_logs>
		  my_astro_handle_evt () ;
 800273e:	f006 feb1 	bl	80094a4 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 8002742:	f000 fedf 	bl	8003504 <my_astro_evt_pin>
 8002746:	1e03      	subs	r3, r0, #0
 8002748:	d1ef      	bne.n	800272a <main+0x182>
	  }
	  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s" , my_astro_payload_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv ) ;
 800274a:	4b99      	ldr	r3, [pc, #612]	; (80029b0 <main+0x408>)
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	4698      	mov	r8, r3
 8002750:	4b8c      	ldr	r3, [pc, #560]	; (8002984 <main+0x3dc>)
 8002752:	689c      	ldr	r4, [r3, #8]
 8002754:	68dd      	ldr	r5, [r3, #12]
 8002756:	4b8b      	ldr	r3, [pc, #556]	; (8002984 <main+0x3dc>)
 8002758:	8a5b      	ldrh	r3, [r3, #18]
 800275a:	001e      	movs	r6, r3
 800275c:	4b89      	ldr	r3, [pc, #548]	; (8002984 <main+0x3dc>)
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	213c      	movs	r1, #60	; 0x3c
 8002762:	0018      	movs	r0, r3
 8002764:	f7fd fcea 	bl	800013c <__udivsi3>
 8002768:	0003      	movs	r3, r0
 800276a:	001a      	movs	r2, r3
 800276c:	4b91      	ldr	r3, [pc, #580]	; (80029b4 <main+0x40c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4991      	ldr	r1, [pc, #580]	; (80029b8 <main+0x410>)
 8002772:	4892      	ldr	r0, [pc, #584]	; (80029bc <main+0x414>)
 8002774:	9304      	str	r3, [sp, #16]
 8002776:	9203      	str	r2, [sp, #12]
 8002778:	9602      	str	r6, [sp, #8]
 800277a:	9400      	str	r4, [sp, #0]
 800277c:	9501      	str	r5, [sp, #4]
 800277e:	4642      	mov	r2, r8
 8002780:	f009 fab6 	bl	800bcf0 <sprintf>
	  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8002784:	4a82      	ldr	r2, [pc, #520]	; (8002990 <main+0x3e8>)
 8002786:	498e      	ldr	r1, [pc, #568]	; (80029c0 <main+0x418>)
 8002788:	487d      	ldr	r0, [pc, #500]	; (8002980 <main+0x3d8>)
 800278a:	4b8c      	ldr	r3, [pc, #560]	; (80029bc <main+0x414>)
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	23dd      	movs	r3, #221	; 0xdd
 8002790:	f009 faae 	bl	800bcf0 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 8002794:	4b7a      	ldr	r3, [pc, #488]	; (8002980 <main+0x3d8>)
 8002796:	0018      	movs	r0, r3
 8002798:	f000 fcbc 	bl	8003114 <send_debug_logs>
	  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 800279c:	4b79      	ldr	r3, [pc, #484]	; (8002984 <main+0x3dc>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b78      	ldr	r3, [pc, #480]	; (8002984 <main+0x3dc>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	0019      	movs	r1, r3
 80027a6:	0010      	movs	r0, r2
 80027a8:	f006 febe 	bl	8009528 <my_astro_write_coordinates>
	  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 80027ac:	4b80      	ldr	r3, [pc, #512]	; (80029b0 <main+0x408>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	b291      	uxth	r1, r2
 80027b4:	4a7e      	ldr	r2, [pc, #504]	; (80029b0 <main+0x408>)
 80027b6:	8011      	strh	r1, [r2, #0]
 80027b8:	4a80      	ldr	r2, [pc, #512]	; (80029bc <main+0x414>)
 80027ba:	0011      	movs	r1, r2
 80027bc:	0018      	movs	r0, r3
 80027be:	f006 fe49 	bl	8009454 <my_astro_add_payload_2_queue>
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 80027c2:	4b75      	ldr	r3, [pc, #468]	; (8002998 <main+0x3f0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	0018      	movs	r0, r3
 80027c8:	f007 f886 	bl	80098d8 <my_rtc_set_alarm>
 80027cc:	1e03      	subs	r3, r0, #0
 80027ce:	d00e      	beq.n	80027ee <main+0x246>
	  {
		  my_sys_deepsleep () ;
 80027d0:	f000 fd58 	bl	8003284 <my_sys_deepsleep>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( my_astro_evt_pin () )
 80027d4:	e00b      	b.n	80027ee <main+0x246>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80027d6:	4a6e      	ldr	r2, [pc, #440]	; (8002990 <main+0x3e8>)
 80027d8:	4974      	ldr	r1, [pc, #464]	; (80029ac <main+0x404>)
 80027da:	4869      	ldr	r0, [pc, #420]	; (8002980 <main+0x3d8>)
 80027dc:	23ef      	movs	r3, #239	; 0xef
 80027de:	f009 fa87 	bl	800bcf0 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80027e2:	4b67      	ldr	r3, [pc, #412]	; (8002980 <main+0x3d8>)
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 fc95 	bl	8003114 <send_debug_logs>
		  my_astro_handle_evt () ;
 80027ea:	f006 fe5b 	bl	80094a4 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 80027ee:	f000 fe89 	bl	8003504 <my_astro_evt_pin>
 80027f2:	1e03      	subs	r3, r0, #0
 80027f4:	d1ef      	bne.n	80027d6 <main+0x22e>
	  }
	  if ( astro_rcv_cmd_flag )
 80027f6:	4b73      	ldr	r3, [pc, #460]	; (80029c4 <main+0x41c>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d025      	beq.n	800284a <main+0x2a2>
	  {
		  astro_rcv_cmd_flag = false ;
 80027fe:	4b71      	ldr	r3, [pc, #452]	; (80029c4 <main+0x41c>)
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
		  if ( my_tracker_api_is_cmd ( test ) )
 8002804:	1d3b      	adds	r3, r7, #4
 8002806:	0018      	movs	r0, r3
 8002808:	f007 ff34 	bl	800a674 <my_tracker_api_is_cmd>
 800280c:	1e03      	subs	r3, r0, #0
 800280e:	d019      	beq.n	8002844 <main+0x29c>
		  {
			  if ( strstr ( my_astro_rcv_cmd , (char*) SYS_RESET_CMD ) )
 8002810:	4a6d      	ldr	r2, [pc, #436]	; (80029c8 <main+0x420>)
 8002812:	4b6e      	ldr	r3, [pc, #440]	; (80029cc <main+0x424>)
 8002814:	0011      	movs	r1, r2
 8002816:	0018      	movs	r0, r3
 8002818:	f009 fb75 	bl	800bf06 <strstr>
 800281c:	1e03      	subs	r3, r0, #0
 800281e:	d011      	beq.n	8002844 <main+0x29c>
			  {
				  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002820:	4b5a      	ldr	r3, [pc, #360]	; (800298c <main+0x3e4>)
 8002822:	0018      	movs	r0, r3
 8002824:	f007 f816 	bl	8009854 <my_rtc_get_dt_s>
				  sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002828:	4a59      	ldr	r2, [pc, #356]	; (8002990 <main+0x3e8>)
 800282a:	495f      	ldr	r1, [pc, #380]	; (80029a8 <main+0x400>)
 800282c:	4854      	ldr	r0, [pc, #336]	; (8002980 <main+0x3d8>)
 800282e:	4b57      	ldr	r3, [pc, #348]	; (800298c <main+0x3e4>)
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	23fb      	movs	r3, #251	; 0xfb
 8002834:	f009 fa5c 	bl	800bcf0 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8002838:	4b51      	ldr	r3, [pc, #324]	; (8002980 <main+0x3d8>)
 800283a:	0018      	movs	r0, r3
 800283c:	f000 fc6a 	bl	8003114 <send_debug_logs>
				  HAL_NVIC_SystemReset () ;
 8002840:	f001 fc47 	bl	80040d2 <HAL_NVIC_SystemReset>
			  }
		  }
		  my_astro_rcv_cmd[0] = 0 ;
 8002844:	4b61      	ldr	r3, [pc, #388]	; (80029cc <main+0x424>)
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
	  }
	  if ( my_rtc_alarm_flag )
 800284a:	4b55      	ldr	r3, [pc, #340]	; (80029a0 <main+0x3f8>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d100      	bne.n	8002854 <main+0x2ac>
 8002852:	e080      	b.n	8002956 <main+0x3ae>
	  {
		  my_rtc_alarm_flag = false ;
 8002854:	4b52      	ldr	r3, [pc, #328]	; (80029a0 <main+0x3f8>)
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_on () ;
 800285a:	f000 fd87 	bl	800336c <my_gnss_sw_on>
		  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 800285e:	4b49      	ldr	r3, [pc, #292]	; (8002984 <main+0x3dc>)
 8002860:	0018      	movs	r0, r3
 8002862:	f006 fe71 	bl	8009548 <my_gnss_acq_coordinates>
 8002866:	0003      	movs	r3, r0
 8002868:	001a      	movs	r2, r3
 800286a:	4b47      	ldr	r3, [pc, #284]	; (8002988 <main+0x3e0>)
 800286c:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_off () ;
 800286e:	f000 fd97 	bl	80033a0 <my_gnss_sw_off>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002872:	4b46      	ldr	r3, [pc, #280]	; (800298c <main+0x3e4>)
 8002874:	0018      	movs	r0, r3
 8002876:	f006 ffed 	bl	8009854 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 800287a:	4b42      	ldr	r3, [pc, #264]	; (8002984 <main+0x3dc>)
 800287c:	7c1b      	ldrb	r3, [r3, #16]
 800287e:	4698      	mov	r8, r3
 8002880:	4b40      	ldr	r3, [pc, #256]	; (8002984 <main+0x3dc>)
 8002882:	689c      	ldr	r4, [r3, #8]
 8002884:	68dd      	ldr	r5, [r3, #12]
 8002886:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <main+0x3dc>)
 8002888:	8a5b      	ldrh	r3, [r3, #18]
 800288a:	4699      	mov	r9, r3
 800288c:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <main+0x3dc>)
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	213c      	movs	r1, #60	; 0x3c
 8002892:	0018      	movs	r0, r3
 8002894:	f7fd fc52 	bl	800013c <__udivsi3>
 8002898:	0003      	movs	r3, r0
 800289a:	469c      	mov	ip, r3
 800289c:	230a      	movs	r3, #10
 800289e:	33ff      	adds	r3, #255	; 0xff
 80028a0:	001e      	movs	r6, r3
 80028a2:	4a3b      	ldr	r2, [pc, #236]	; (8002990 <main+0x3e8>)
 80028a4:	493b      	ldr	r1, [pc, #236]	; (8002994 <main+0x3ec>)
 80028a6:	4836      	ldr	r0, [pc, #216]	; (8002980 <main+0x3d8>)
 80028a8:	4663      	mov	r3, ip
 80028aa:	9305      	str	r3, [sp, #20]
 80028ac:	464b      	mov	r3, r9
 80028ae:	9304      	str	r3, [sp, #16]
 80028b0:	9402      	str	r4, [sp, #8]
 80028b2:	9503      	str	r5, [sp, #12]
 80028b4:	4643      	mov	r3, r8
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	4b34      	ldr	r3, [pc, #208]	; (800298c <main+0x3e4>)
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	0033      	movs	r3, r6
 80028be:	f009 fa17 	bl	800bcf0 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80028c2:	4b2f      	ldr	r3, [pc, #188]	; (8002980 <main+0x3d8>)
 80028c4:	0018      	movs	r0, r3
 80028c6:	f000 fc25 	bl	8003114 <send_debug_logs>
		  if ( my_gnss_3dfix_flag )
 80028ca:	4b2f      	ldr	r3, [pc, #188]	; (8002988 <main+0x3e0>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d041      	beq.n	8002956 <main+0x3ae>
		  {
			  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80028d2:	4b2c      	ldr	r3, [pc, #176]	; (8002984 <main+0x3dc>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <main+0x3dc>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	0019      	movs	r1, r3
 80028dc:	0010      	movs	r0, r2
 80028de:	f006 fe23 	bl	8009528 <my_astro_write_coordinates>
			  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%ld,%ld" , my_astro_payload_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80028e2:	4b33      	ldr	r3, [pc, #204]	; (80029b0 <main+0x408>)
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	4698      	mov	r8, r3
 80028e8:	4b26      	ldr	r3, [pc, #152]	; (8002984 <main+0x3dc>)
 80028ea:	689c      	ldr	r4, [r3, #8]
 80028ec:	68dd      	ldr	r5, [r3, #12]
 80028ee:	4b25      	ldr	r3, [pc, #148]	; (8002984 <main+0x3dc>)
 80028f0:	8a5b      	ldrh	r3, [r3, #18]
 80028f2:	001e      	movs	r6, r3
 80028f4:	4b23      	ldr	r3, [pc, #140]	; (8002984 <main+0x3dc>)
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	213c      	movs	r1, #60	; 0x3c
 80028fa:	0018      	movs	r0, r3
 80028fc:	f7fd fc1e 	bl	800013c <__udivsi3>
 8002900:	0003      	movs	r3, r0
 8002902:	469c      	mov	ip, r3
 8002904:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <main+0x3dc>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <main+0x3dc>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4930      	ldr	r1, [pc, #192]	; (80029d0 <main+0x428>)
 800290e:	482b      	ldr	r0, [pc, #172]	; (80029bc <main+0x414>)
 8002910:	9305      	str	r3, [sp, #20]
 8002912:	9204      	str	r2, [sp, #16]
 8002914:	4663      	mov	r3, ip
 8002916:	9303      	str	r3, [sp, #12]
 8002918:	9602      	str	r6, [sp, #8]
 800291a:	9400      	str	r4, [sp, #0]
 800291c:	9501      	str	r5, [sp, #4]
 800291e:	4642      	mov	r2, r8
 8002920:	f009 f9e6 	bl	800bcf0 <sprintf>
			  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8002924:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <main+0x408>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	b291      	uxth	r1, r2
 800292c:	4a20      	ldr	r2, [pc, #128]	; (80029b0 <main+0x408>)
 800292e:	8011      	strh	r1, [r2, #0]
 8002930:	4a22      	ldr	r2, [pc, #136]	; (80029bc <main+0x414>)
 8002932:	0011      	movs	r1, r2
 8002934:	0018      	movs	r0, r3
 8002936:	f006 fd8d 	bl	8009454 <my_astro_add_payload_2_queue>
			  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ;
 800293a:	2388      	movs	r3, #136	; 0x88
 800293c:	005c      	lsls	r4, r3, #1
 800293e:	4a14      	ldr	r2, [pc, #80]	; (8002990 <main+0x3e8>)
 8002940:	491f      	ldr	r1, [pc, #124]	; (80029c0 <main+0x418>)
 8002942:	480f      	ldr	r0, [pc, #60]	; (8002980 <main+0x3d8>)
 8002944:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <main+0x414>)
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	0023      	movs	r3, r4
 800294a:	f009 f9d1 	bl	800bcf0 <sprintf>
			  send_debug_logs ( dbg_payload ) ;
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <main+0x3d8>)
 8002950:	0018      	movs	r0, r3
 8002952:	f000 fbdf 	bl	8003114 <send_debug_logs>
		  }
	  }
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <main+0x3f0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	0018      	movs	r0, r3
 800295c:	f006 ffbc 	bl	80098d8 <my_rtc_set_alarm>
 8002960:	1e03      	subs	r3, r0, #0
 8002962:	d100      	bne.n	8002966 <main+0x3be>
 8002964:	e743      	b.n	80027ee <main+0x246>
	  {
		  my_sys_deepsleep () ;
 8002966:	f000 fc8d 	bl	8003284 <my_sys_deepsleep>
	  while ( my_astro_evt_pin () )
 800296a:	e740      	b.n	80027ee <main+0x246>
 800296c:	080129f8 	.word	0x080129f8
 8002970:	20000adc 	.word	0x20000adc
 8002974:	20000000 	.word	0x20000000
 8002978:	20000a22 	.word	0x20000a22
 800297c:	080128ec 	.word	0x080128ec
 8002980:	20000b10 	.word	0x20000b10
 8002984:	20000ae8 	.word	0x20000ae8
 8002988:	20000b01 	.word	0x20000b01
 800298c:	20000a24 	.word	0x20000a24
 8002990:	080128fc 	.word	0x080128fc
 8002994:	08012910 	.word	0x08012910
 8002998:	20000008 	.word	0x20000008
 800299c:	08012950 	.word	0x08012950
 80029a0:	20000b00 	.word	0x20000b00
 80029a4:	08012970 	.word	0x08012970
 80029a8:	0801297c 	.word	0x0801297c
 80029ac:	0801299c 	.word	0x0801299c
 80029b0:	20000a38 	.word	0x20000a38
 80029b4:	20000004 	.word	0x20000004
 80029b8:	080129b4 	.word	0x080129b4
 80029bc:	20000a3c 	.word	0x20000a3c
 80029c0:	080129c8 	.word	0x080129c8
 80029c4:	20000c0a 	.word	0x20000c0a
 80029c8:	080129dc 	.word	0x080129dc
 80029cc:	20000c0c 	.word	0x20000c0c
 80029d0:	080129e0 	.word	0x080129e0

080029d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b095      	sub	sp, #84	; 0x54
 80029d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029da:	2414      	movs	r4, #20
 80029dc:	193b      	adds	r3, r7, r4
 80029de:	0018      	movs	r0, r3
 80029e0:	233c      	movs	r3, #60	; 0x3c
 80029e2:	001a      	movs	r2, r3
 80029e4:	2100      	movs	r1, #0
 80029e6:	f009 fa19 	bl	800be1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	0018      	movs	r0, r3
 80029ee:	2310      	movs	r3, #16
 80029f0:	001a      	movs	r2, r3
 80029f2:	2100      	movs	r1, #0
 80029f4:	f009 fa12 	bl	800be1c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	0018      	movs	r0, r3
 80029fe:	f001 fe8b 	bl	8004718 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a02:	f001 fe29 	bl	8004658 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002a06:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <SystemClock_Config+0xa8>)
 8002a08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a0a:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <SystemClock_Config+0xa8>)
 8002a0c:	2118      	movs	r1, #24
 8002a0e:	438a      	bics	r2, r1
 8002a10:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	2206      	movs	r2, #6
 8002a16:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a18:	193b      	adds	r3, r7, r4
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a1e:	193b      	adds	r3, r7, r4
 8002a20:	2280      	movs	r2, #128	; 0x80
 8002a22:	0052      	lsls	r2, r2, #1
 8002a24:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002a26:	193b      	adds	r3, r7, r4
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a2c:	193b      	adds	r3, r7, r4
 8002a2e:	2240      	movs	r2, #64	; 0x40
 8002a30:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a32:	193b      	adds	r3, r7, r4
 8002a34:	2200      	movs	r2, #0
 8002a36:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a38:	193b      	adds	r3, r7, r4
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f001 feb8 	bl	80047b0 <HAL_RCC_OscConfig>
 8002a40:	1e03      	subs	r3, r0, #0
 8002a42:	d001      	beq.n	8002a48 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002a44:	f000 fdea 	bl	800361c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	2207      	movs	r2, #7
 8002a4c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	2200      	movs	r2, #0
 8002a52:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a54:	1d3b      	adds	r3, r7, #4
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	2100      	movs	r1, #0
 8002a64:	0018      	movs	r0, r3
 8002a66:	f002 fa03 	bl	8004e70 <HAL_RCC_ClockConfig>
 8002a6a:	1e03      	subs	r3, r0, #0
 8002a6c:	d001      	beq.n	8002a72 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002a6e:	f000 fdd5 	bl	800361c <Error_Handler>
  }
}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b015      	add	sp, #84	; 0x54
 8002a78:	bd90      	pop	{r4, r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	40021000 	.word	0x40021000

08002a80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b090      	sub	sp, #64	; 0x40
 8002a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002a86:	232c      	movs	r3, #44	; 0x2c
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	2314      	movs	r3, #20
 8002a8e:	001a      	movs	r2, r3
 8002a90:	2100      	movs	r1, #0
 8002a92:	f009 f9c3 	bl	800be1c <memset>
  RTC_DateTypeDef sDate = {0};
 8002a96:	2328      	movs	r3, #40	; 0x28
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002a9e:	003b      	movs	r3, r7
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	2328      	movs	r3, #40	; 0x28
 8002aa4:	001a      	movs	r2, r3
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	f009 f9b8 	bl	800be1c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002aac:	4b44      	ldr	r3, [pc, #272]	; (8002bc0 <MX_RTC_Init+0x140>)
 8002aae:	4a45      	ldr	r2, [pc, #276]	; (8002bc4 <MX_RTC_Init+0x144>)
 8002ab0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ab2:	4b43      	ldr	r3, [pc, #268]	; (8002bc0 <MX_RTC_Init+0x140>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002ab8:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <MX_RTC_Init+0x140>)
 8002aba:	227f      	movs	r2, #127	; 0x7f
 8002abc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002abe:	4b40      	ldr	r3, [pc, #256]	; (8002bc0 <MX_RTC_Init+0x140>)
 8002ac0:	22ff      	movs	r2, #255	; 0xff
 8002ac2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ac4:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <MX_RTC_Init+0x140>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002aca:	4b3d      	ldr	r3, [pc, #244]	; (8002bc0 <MX_RTC_Init+0x140>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ad0:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <MX_RTC_Init+0x140>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ad6:	4b3a      	ldr	r3, [pc, #232]	; (8002bc0 <MX_RTC_Init+0x140>)
 8002ad8:	2280      	movs	r2, #128	; 0x80
 8002ada:	05d2      	lsls	r2, r2, #23
 8002adc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002ade:	4b38      	ldr	r3, [pc, #224]	; (8002bc0 <MX_RTC_Init+0x140>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ae4:	4b36      	ldr	r3, [pc, #216]	; (8002bc0 <MX_RTC_Init+0x140>)
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f002 fda8 	bl	800563c <HAL_RTC_Init>
 8002aec:	1e03      	subs	r3, r0, #0
 8002aee:	d001      	beq.n	8002af4 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002af0:	f000 fd94 	bl	800361c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	187b      	adds	r3, r7, r1
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	2200      	movs	r2, #0
 8002b00:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002b02:	187b      	adds	r3, r7, r1
 8002b04:	2200      	movs	r2, #0
 8002b06:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002b08:	187b      	adds	r3, r7, r1
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b0e:	187b      	adds	r3, r7, r1
 8002b10:	2200      	movs	r2, #0
 8002b12:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b14:	187b      	adds	r3, r7, r1
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002b1a:	1879      	adds	r1, r7, r1
 8002b1c:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <MX_RTC_Init+0x140>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	0018      	movs	r0, r3
 8002b22:	f002 fe2d 	bl	8005780 <HAL_RTC_SetTime>
 8002b26:	1e03      	subs	r3, r0, #0
 8002b28:	d001      	beq.n	8002b2e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002b2a:	f000 fd77 	bl	800361c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002b2e:	2128      	movs	r1, #40	; 0x28
 8002b30:	187b      	adds	r3, r7, r1
 8002b32:	2206      	movs	r2, #6
 8002b34:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002b36:	187b      	adds	r3, r7, r1
 8002b38:	2201      	movs	r2, #1
 8002b3a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002b3c:	187b      	adds	r3, r7, r1
 8002b3e:	2201      	movs	r2, #1
 8002b40:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002b42:	187b      	adds	r3, r7, r1
 8002b44:	2200      	movs	r2, #0
 8002b46:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b48:	1879      	adds	r1, r7, r1
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <MX_RTC_Init+0x140>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f002 ff1a 	bl	8005988 <HAL_RTC_SetDate>
 8002b54:	1e03      	subs	r3, r0, #0
 8002b56:	d001      	beq.n	8002b5c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002b58:	f000 fd60 	bl	800361c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002b5c:	003b      	movs	r3, r7
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002b62:	003b      	movs	r3, r7
 8002b64:	2200      	movs	r2, #0
 8002b66:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002b68:	003b      	movs	r3, r7
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002b6e:	003b      	movs	r3, r7
 8002b70:	2200      	movs	r2, #0
 8002b72:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b74:	003b      	movs	r3, r7
 8002b76:	2200      	movs	r2, #0
 8002b78:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b7a:	003b      	movs	r3, r7
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002b80:	003b      	movs	r3, r7
 8002b82:	2200      	movs	r2, #0
 8002b84:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002b86:	003b      	movs	r3, r7
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002b8c:	003b      	movs	r3, r7
 8002b8e:	2200      	movs	r2, #0
 8002b90:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002b92:	003b      	movs	r3, r7
 8002b94:	2220      	movs	r2, #32
 8002b96:	2101      	movs	r1, #1
 8002b98:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002b9a:	003b      	movs	r3, r7
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	0052      	lsls	r2, r2, #1
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002ba2:	0039      	movs	r1, r7
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <MX_RTC_Init+0x140>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f002 ffcd 	bl	8005b48 <HAL_RTC_SetAlarm_IT>
 8002bae:	1e03      	subs	r3, r0, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002bb2:	f000 fd33 	bl	800361c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b010      	add	sp, #64	; 0x40
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	200006f4 	.word	0x200006f4
 8002bc4:	40002800 	.word	0x40002800

08002bc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <MX_SPI1_Init+0x74>)
 8002bce:	4a1c      	ldr	r2, [pc, #112]	; (8002c40 <MX_SPI1_Init+0x78>)
 8002bd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <MX_SPI1_Init+0x74>)
 8002bd4:	2282      	movs	r2, #130	; 0x82
 8002bd6:	0052      	lsls	r2, r2, #1
 8002bd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bda:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <MX_SPI1_Init+0x74>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002be0:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <MX_SPI1_Init+0x74>)
 8002be2:	22e0      	movs	r2, #224	; 0xe0
 8002be4:	00d2      	lsls	r2, r2, #3
 8002be6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002be8:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <MX_SPI1_Init+0x74>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bee:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <MX_SPI1_Init+0x74>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bf4:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <MX_SPI1_Init+0x74>)
 8002bf6:	2280      	movs	r2, #128	; 0x80
 8002bf8:	0092      	lsls	r2, r2, #2
 8002bfa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bfc:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <MX_SPI1_Init+0x74>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c02:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <MX_SPI1_Init+0x74>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <MX_SPI1_Init+0x74>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <MX_SPI1_Init+0x74>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <MX_SPI1_Init+0x74>)
 8002c16:	2207      	movs	r2, #7
 8002c18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <MX_SPI1_Init+0x74>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <MX_SPI1_Init+0x74>)
 8002c22:	2208      	movs	r2, #8
 8002c24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <MX_SPI1_Init+0x74>)
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f003 fa6d 	bl	8006108 <HAL_SPI_Init>
 8002c2e:	1e03      	subs	r3, r0, #0
 8002c30:	d001      	beq.n	8002c36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002c32:	f000 fcf3 	bl	800361c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000720 	.word	0x20000720
 8002c40:	40013000 	.word	0x40013000

08002c44 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	230c      	movs	r3, #12
 8002c50:	001a      	movs	r2, r3
 8002c52:	2100      	movs	r1, #0
 8002c54:	f009 f8e2 	bl	800be1c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c58:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <MX_TIM6_Init+0x6c>)
 8002c5a:	4a16      	ldr	r2, [pc, #88]	; (8002cb4 <MX_TIM6_Init+0x70>)
 8002c5c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002c5e:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <MX_TIM6_Init+0x6c>)
 8002c60:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <MX_TIM6_Init+0x74>)
 8002c62:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c64:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <MX_TIM6_Init+0x6c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <MX_TIM6_Init+0x6c>)
 8002c6c:	4a13      	ldr	r2, [pc, #76]	; (8002cbc <MX_TIM6_Init+0x78>)
 8002c6e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <MX_TIM6_Init+0x6c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <MX_TIM6_Init+0x6c>)
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f003 fafd 	bl	8006278 <HAL_TIM_Base_Init>
 8002c7e:	1e03      	subs	r3, r0, #0
 8002c80:	d001      	beq.n	8002c86 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002c82:	f000 fccb 	bl	800361c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c86:	1d3b      	adds	r3, r7, #4
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c92:	1d3a      	adds	r2, r7, #4
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <MX_TIM6_Init+0x6c>)
 8002c96:	0011      	movs	r1, r2
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f003 fd95 	bl	80067c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c9e:	1e03      	subs	r3, r0, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002ca2:	f000 fcbb 	bl	800361c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b004      	add	sp, #16
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	20000784 	.word	0x20000784
 8002cb4:	40001000 	.word	0x40001000
 8002cb8:	00003e7f 	.word	0x00003e7f
 8002cbc:	000003e7 	.word	0x000003e7

08002cc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cc4:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002cc6:	4a24      	ldr	r2, [pc, #144]	; (8002d58 <MX_USART1_UART_Init+0x98>)
 8002cc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cca:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002ccc:	22e1      	movs	r2, #225	; 0xe1
 8002cce:	0252      	lsls	r2, r2, #9
 8002cd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cde:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002ce6:	220c      	movs	r2, #12
 8002ce8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cea:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cf6:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cfc:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d02:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f003 fdea 	bl	80068e4 <HAL_UART_Init>
 8002d10:	1e03      	subs	r3, r0, #0
 8002d12:	d001      	beq.n	8002d18 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d14:	f000 fc82 	bl	800361c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d18:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f004 fdc5 	bl	80078ac <HAL_UARTEx_SetTxFifoThreshold>
 8002d22:	1e03      	subs	r3, r0, #0
 8002d24:	d001      	beq.n	8002d2a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d26:	f000 fc79 	bl	800361c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f004 fdfc 	bl	800792c <HAL_UARTEx_SetRxFifoThreshold>
 8002d34:	1e03      	subs	r3, r0, #0
 8002d36:	d001      	beq.n	8002d3c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d38:	f000 fc70 	bl	800361c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <MX_USART1_UART_Init+0x94>)
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f004 fd7a 	bl	8007838 <HAL_UARTEx_DisableFifoMode>
 8002d44:	1e03      	subs	r3, r0, #0
 8002d46:	d001      	beq.n	8002d4c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d48:	f000 fc68 	bl	800361c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	200007d0 	.word	0x200007d0
 8002d58:	40013800 	.word	0x40013800

08002d5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d60:	4b23      	ldr	r3, [pc, #140]	; (8002df0 <MX_USART2_UART_Init+0x94>)
 8002d62:	4a24      	ldr	r2, [pc, #144]	; (8002df4 <MX_USART2_UART_Init+0x98>)
 8002d64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d66:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <MX_USART2_UART_Init+0x94>)
 8002d68:	22e1      	movs	r2, #225	; 0xe1
 8002d6a:	0252      	lsls	r2, r2, #9
 8002d6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d6e:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <MX_USART2_UART_Init+0x94>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d74:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <MX_USART2_UART_Init+0x94>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <MX_USART2_UART_Init+0x94>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <MX_USART2_UART_Init+0x94>)
 8002d82:	220c      	movs	r2, #12
 8002d84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <MX_USART2_UART_Init+0x94>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d8c:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <MX_USART2_UART_Init+0x94>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d92:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <MX_USART2_UART_Init+0x94>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d98:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <MX_USART2_UART_Init+0x94>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <MX_USART2_UART_Init+0x94>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <MX_USART2_UART_Init+0x94>)
 8002da6:	0018      	movs	r0, r3
 8002da8:	f003 fd9c 	bl	80068e4 <HAL_UART_Init>
 8002dac:	1e03      	subs	r3, r0, #0
 8002dae:	d001      	beq.n	8002db4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002db0:	f000 fc34 	bl	800361c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <MX_USART2_UART_Init+0x94>)
 8002db6:	2100      	movs	r1, #0
 8002db8:	0018      	movs	r0, r3
 8002dba:	f004 fd77 	bl	80078ac <HAL_UARTEx_SetTxFifoThreshold>
 8002dbe:	1e03      	subs	r3, r0, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002dc2:	f000 fc2b 	bl	800361c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <MX_USART2_UART_Init+0x94>)
 8002dc8:	2100      	movs	r1, #0
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f004 fdae 	bl	800792c <HAL_UARTEx_SetRxFifoThreshold>
 8002dd0:	1e03      	subs	r3, r0, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002dd4:	f000 fc22 	bl	800361c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <MX_USART2_UART_Init+0x94>)
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f004 fd2c 	bl	8007838 <HAL_UARTEx_DisableFifoMode>
 8002de0:	1e03      	subs	r3, r0, #0
 8002de2:	d001      	beq.n	8002de8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002de4:	f000 fc1a 	bl	800361c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	20000864 	.word	0x20000864
 8002df4:	40004400 	.word	0x40004400

08002df8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002dfc:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <MX_USART3_UART_Init+0x94>)
 8002dfe:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <MX_USART3_UART_Init+0x98>)
 8002e00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002e02:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <MX_USART3_UART_Init+0x94>)
 8002e04:	2296      	movs	r2, #150	; 0x96
 8002e06:	0192      	lsls	r2, r2, #6
 8002e08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e0a:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <MX_USART3_UART_Init+0x94>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e10:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <MX_USART3_UART_Init+0x94>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e16:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <MX_USART3_UART_Init+0x94>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <MX_USART3_UART_Init+0x94>)
 8002e1e:	220c      	movs	r2, #12
 8002e20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e22:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <MX_USART3_UART_Init+0x94>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e28:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <MX_USART3_UART_Init+0x94>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <MX_USART3_UART_Init+0x94>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e34:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <MX_USART3_UART_Init+0x94>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e3a:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <MX_USART3_UART_Init+0x94>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e40:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <MX_USART3_UART_Init+0x94>)
 8002e42:	0018      	movs	r0, r3
 8002e44:	f003 fd4e 	bl	80068e4 <HAL_UART_Init>
 8002e48:	1e03      	subs	r3, r0, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e4c:	f000 fbe6 	bl	800361c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e50:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <MX_USART3_UART_Init+0x94>)
 8002e52:	2100      	movs	r1, #0
 8002e54:	0018      	movs	r0, r3
 8002e56:	f004 fd29 	bl	80078ac <HAL_UARTEx_SetTxFifoThreshold>
 8002e5a:	1e03      	subs	r3, r0, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e5e:	f000 fbdd 	bl	800361c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <MX_USART3_UART_Init+0x94>)
 8002e64:	2100      	movs	r1, #0
 8002e66:	0018      	movs	r0, r3
 8002e68:	f004 fd60 	bl	800792c <HAL_UARTEx_SetRxFifoThreshold>
 8002e6c:	1e03      	subs	r3, r0, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e70:	f000 fbd4 	bl	800361c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <MX_USART3_UART_Init+0x94>)
 8002e76:	0018      	movs	r0, r3
 8002e78:	f004 fcde 	bl	8007838 <HAL_UARTEx_DisableFifoMode>
 8002e7c:	1e03      	subs	r3, r0, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002e80:	f000 fbcc 	bl	800361c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	200008f8 	.word	0x200008f8
 8002e90:	40004800 	.word	0x40004800

08002e94 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002e98:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <MX_USART5_UART_Init+0x60>)
 8002e9a:	4a17      	ldr	r2, [pc, #92]	; (8002ef8 <MX_USART5_UART_Init+0x64>)
 8002e9c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002e9e:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <MX_USART5_UART_Init+0x60>)
 8002ea0:	2296      	movs	r2, #150	; 0x96
 8002ea2:	0192      	lsls	r2, r2, #6
 8002ea4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea6:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <MX_USART5_UART_Init+0x60>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <MX_USART5_UART_Init+0x60>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002eb2:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <MX_USART5_UART_Init+0x60>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <MX_USART5_UART_Init+0x60>)
 8002eba:	220c      	movs	r2, #12
 8002ebc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <MX_USART5_UART_Init+0x60>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <MX_USART5_UART_Init+0x60>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <MX_USART5_UART_Init+0x60>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <MX_USART5_UART_Init+0x60>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ed6:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <MX_USART5_UART_Init+0x60>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <MX_USART5_UART_Init+0x60>)
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f003 fd00 	bl	80068e4 <HAL_UART_Init>
 8002ee4:	1e03      	subs	r3, r0, #0
 8002ee6:	d001      	beq.n	8002eec <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002ee8:	f000 fb98 	bl	800361c <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	2000098c 	.word	0x2000098c
 8002ef8:	40005000 	.word	0x40005000

08002efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002efc:	b590      	push	{r4, r7, lr}
 8002efe:	b08b      	sub	sp, #44	; 0x2c
 8002f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f02:	2414      	movs	r4, #20
 8002f04:	193b      	adds	r3, r7, r4
 8002f06:	0018      	movs	r0, r3
 8002f08:	2314      	movs	r3, #20
 8002f0a:	001a      	movs	r2, r3
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	f008 ff85 	bl	800be1c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f12:	4b7a      	ldr	r3, [pc, #488]	; (80030fc <MX_GPIO_Init+0x200>)
 8002f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f16:	4b79      	ldr	r3, [pc, #484]	; (80030fc <MX_GPIO_Init+0x200>)
 8002f18:	2104      	movs	r1, #4
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f1e:	4b77      	ldr	r3, [pc, #476]	; (80030fc <MX_GPIO_Init+0x200>)
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f22:	2204      	movs	r2, #4
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	4b74      	ldr	r3, [pc, #464]	; (80030fc <MX_GPIO_Init+0x200>)
 8002f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f2e:	4b73      	ldr	r3, [pc, #460]	; (80030fc <MX_GPIO_Init+0x200>)
 8002f30:	2101      	movs	r1, #1
 8002f32:	430a      	orrs	r2, r1
 8002f34:	635a      	str	r2, [r3, #52]	; 0x34
 8002f36:	4b71      	ldr	r3, [pc, #452]	; (80030fc <MX_GPIO_Init+0x200>)
 8002f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f42:	4b6e      	ldr	r3, [pc, #440]	; (80030fc <MX_GPIO_Init+0x200>)
 8002f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f46:	4b6d      	ldr	r3, [pc, #436]	; (80030fc <MX_GPIO_Init+0x200>)
 8002f48:	2102      	movs	r1, #2
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f4e:	4b6b      	ldr	r3, [pc, #428]	; (80030fc <MX_GPIO_Init+0x200>)
 8002f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f52:	2202      	movs	r2, #2
 8002f54:	4013      	ands	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f5a:	4b68      	ldr	r3, [pc, #416]	; (80030fc <MX_GPIO_Init+0x200>)
 8002f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5e:	4b67      	ldr	r3, [pc, #412]	; (80030fc <MX_GPIO_Init+0x200>)
 8002f60:	2108      	movs	r1, #8
 8002f62:	430a      	orrs	r2, r1
 8002f64:	635a      	str	r2, [r3, #52]	; 0x34
 8002f66:	4b65      	ldr	r3, [pc, #404]	; (80030fc <MX_GPIO_Init+0x200>)
 8002f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6a:	2208      	movs	r2, #8
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	607b      	str	r3, [r7, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002f72:	23a0      	movs	r3, #160	; 0xa0
 8002f74:	05db      	lsls	r3, r3, #23
 8002f76:	2200      	movs	r2, #0
 8002f78:	2110      	movs	r1, #16
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f001 fb1b 	bl	80045b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002f80:	495f      	ldr	r1, [pc, #380]	; (8003100 <MX_GPIO_Init+0x204>)
 8002f82:	4b60      	ldr	r3, [pc, #384]	; (8003104 <MX_GPIO_Init+0x208>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	0018      	movs	r0, r3
 8002f88:	f001 fb15 	bl	80045b6 <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	485c      	ldr	r0, [pc, #368]	; (8003104 <MX_GPIO_Init+0x208>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	0019      	movs	r1, r3
 8002f96:	f001 fb0e 	bl	80045b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8002f9a:	4b5b      	ldr	r3, [pc, #364]	; (8003108 <MX_GPIO_Init+0x20c>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2103      	movs	r1, #3
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f001 fb08 	bl	80045b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8002fa6:	193b      	adds	r3, r7, r4
 8002fa8:	2201      	movs	r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fac:	193b      	adds	r3, r7, r4
 8002fae:	2288      	movs	r2, #136	; 0x88
 8002fb0:	0352      	lsls	r2, r2, #13
 8002fb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	193b      	adds	r3, r7, r4
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8002fba:	193a      	adds	r2, r7, r4
 8002fbc:	23a0      	movs	r3, #160	; 0xa0
 8002fbe:	05db      	lsls	r3, r3, #23
 8002fc0:	0011      	movs	r1, r2
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f001 f896 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8002fc8:	193b      	adds	r3, r7, r4
 8002fca:	2202      	movs	r2, #2
 8002fcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fce:	193b      	adds	r3, r7, r4
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	193b      	adds	r3, r7, r4
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8002fda:	193a      	adds	r2, r7, r4
 8002fdc:	23a0      	movs	r3, #160	; 0xa0
 8002fde:	05db      	lsls	r3, r3, #23
 8002fe0:	0011      	movs	r1, r2
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f001 f886 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8002fe8:	193b      	adds	r3, r7, r4
 8002fea:	2210      	movs	r2, #16
 8002fec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	193b      	adds	r3, r7, r4
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffa:	193b      	adds	r3, r7, r4
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003000:	193a      	adds	r2, r7, r4
 8003002:	23a0      	movs	r3, #160	; 0xa0
 8003004:	05db      	lsls	r3, r3, #23
 8003006:	0011      	movs	r1, r2
 8003008:	0018      	movs	r0, r3
 800300a:	f001 f873 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 800300e:	193b      	adds	r3, r7, r4
 8003010:	4a3e      	ldr	r2, [pc, #248]	; (800310c <MX_GPIO_Init+0x210>)
 8003012:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003014:	193b      	adds	r3, r7, r4
 8003016:	2201      	movs	r2, #1
 8003018:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	193b      	adds	r3, r7, r4
 800301c:	2200      	movs	r2, #0
 800301e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003020:	193b      	adds	r3, r7, r4
 8003022:	2200      	movs	r2, #0
 8003024:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003026:	193b      	adds	r3, r7, r4
 8003028:	4a36      	ldr	r2, [pc, #216]	; (8003104 <MX_GPIO_Init+0x208>)
 800302a:	0019      	movs	r1, r3
 800302c:	0010      	movs	r0, r2
 800302e:	f001 f861 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8003032:	0021      	movs	r1, r4
 8003034:	187b      	adds	r3, r7, r1
 8003036:	2224      	movs	r2, #36	; 0x24
 8003038:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800303a:	187b      	adds	r3, r7, r1
 800303c:	2288      	movs	r2, #136	; 0x88
 800303e:	0352      	lsls	r2, r2, #13
 8003040:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003042:	187b      	adds	r3, r7, r1
 8003044:	2200      	movs	r2, #0
 8003046:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003048:	000c      	movs	r4, r1
 800304a:	187b      	adds	r3, r7, r1
 800304c:	4a2d      	ldr	r2, [pc, #180]	; (8003104 <MX_GPIO_Init+0x208>)
 800304e:	0019      	movs	r1, r3
 8003050:	0010      	movs	r0, r2
 8003052:	f001 f84f 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8003056:	0021      	movs	r1, r4
 8003058:	187b      	adds	r3, r7, r1
 800305a:	2280      	movs	r2, #128	; 0x80
 800305c:	0192      	lsls	r2, r2, #6
 800305e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003060:	000c      	movs	r4, r1
 8003062:	193b      	adds	r3, r7, r4
 8003064:	2211      	movs	r2, #17
 8003066:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	193b      	adds	r3, r7, r4
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306e:	193b      	adds	r3, r7, r4
 8003070:	2200      	movs	r2, #0
 8003072:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8003074:	193b      	adds	r3, r7, r4
 8003076:	4a23      	ldr	r2, [pc, #140]	; (8003104 <MX_GPIO_Init+0x208>)
 8003078:	0019      	movs	r1, r3
 800307a:	0010      	movs	r0, r2
 800307c:	f001 f83a 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8003080:	193b      	adds	r3, r7, r4
 8003082:	4a23      	ldr	r2, [pc, #140]	; (8003110 <MX_GPIO_Init+0x214>)
 8003084:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003086:	193b      	adds	r3, r7, r4
 8003088:	2200      	movs	r2, #0
 800308a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308c:	193b      	adds	r3, r7, r4
 800308e:	2200      	movs	r2, #0
 8003090:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003092:	193b      	adds	r3, r7, r4
 8003094:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <MX_GPIO_Init+0x208>)
 8003096:	0019      	movs	r1, r3
 8003098:	0010      	movs	r0, r2
 800309a:	f001 f82b 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 800309e:	193b      	adds	r3, r7, r4
 80030a0:	2203      	movs	r2, #3
 80030a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a4:	193b      	adds	r3, r7, r4
 80030a6:	2201      	movs	r2, #1
 80030a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030aa:	193b      	adds	r3, r7, r4
 80030ac:	2200      	movs	r2, #0
 80030ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b0:	193b      	adds	r3, r7, r4
 80030b2:	2200      	movs	r2, #0
 80030b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030b6:	193b      	adds	r3, r7, r4
 80030b8:	4a13      	ldr	r2, [pc, #76]	; (8003108 <MX_GPIO_Init+0x20c>)
 80030ba:	0019      	movs	r1, r3
 80030bc:	0010      	movs	r0, r2
 80030be:	f001 f819 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80030c2:	0021      	movs	r1, r4
 80030c4:	187b      	adds	r3, r7, r1
 80030c6:	220c      	movs	r2, #12
 80030c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ca:	187b      	adds	r3, r7, r1
 80030cc:	2200      	movs	r2, #0
 80030ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030d0:	187b      	adds	r3, r7, r1
 80030d2:	2201      	movs	r2, #1
 80030d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030d6:	187b      	adds	r3, r7, r1
 80030d8:	4a0b      	ldr	r2, [pc, #44]	; (8003108 <MX_GPIO_Init+0x20c>)
 80030da:	0019      	movs	r1, r3
 80030dc:	0010      	movs	r0, r2
 80030de:	f001 f809 	bl	80040f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80030e2:	2200      	movs	r2, #0
 80030e4:	2100      	movs	r1, #0
 80030e6:	2006      	movs	r0, #6
 80030e8:	f000 ffce 	bl	8004088 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80030ec:	2006      	movs	r0, #6
 80030ee:	f000 ffe0 	bl	80040b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b00b      	add	sp, #44	; 0x2c
 80030f8:	bd90      	pop	{r4, r7, pc}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	40021000 	.word	0x40021000
 8003100:	0000a403 	.word	0x0000a403
 8003104:	50000400 	.word	0x50000400
 8003108:	50000c00 	.word	0x50000c00
 800310c:	00008c03 	.word	0x00008c03
 8003110:	00004040 	.word	0x00004040

08003114 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	0018      	movs	r0, r3
 8003120:	f7fc fff0 	bl	8000104 <strlen>
 8003124:	0003      	movs	r3, r0
 8003126:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2bfa      	cmp	r3, #250	; 0xfa
 800312c:	d908      	bls.n	8003140 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 800312e:	23fa      	movs	r3, #250	; 0xfa
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	490d      	ldr	r1, [pc, #52]	; (8003168 <send_debug_logs+0x54>)
 8003134:	480d      	ldr	r0, [pc, #52]	; (800316c <send_debug_logs+0x58>)
 8003136:	222a      	movs	r2, #42	; 0x2a
 8003138:	f003 fc6a 	bl	8006a10 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 800313c:	23fa      	movs	r3, #250	; 0xfa
 800313e:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	b29a      	uxth	r2, r3
 8003144:	23fa      	movs	r3, #250	; 0xfa
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4808      	ldr	r0, [pc, #32]	; (800316c <send_debug_logs+0x58>)
 800314c:	f003 fc60 	bl	8006a10 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8003150:	23fa      	movs	r3, #250	; 0xfa
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4906      	ldr	r1, [pc, #24]	; (8003170 <send_debug_logs+0x5c>)
 8003156:	4805      	ldr	r0, [pc, #20]	; (800316c <send_debug_logs+0x58>)
 8003158:	2201      	movs	r2, #1
 800315a:	f003 fc59 	bl	8006a10 <HAL_UART_Transmit>
}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	46bd      	mov	sp, r7
 8003162:	b004      	add	sp, #16
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	08012a04 	.word	0x08012a04
 800316c:	20000864 	.word	0x20000864
 8003170:	08012a30 	.word	0x08012a30

08003174 <my_sys_init>:
// SYS functions
void my_sys_init ( void )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
	fix3d.acq_time = 0 ;
 8003178:	4b3a      	ldr	r3, [pc, #232]	; (8003264 <my_sys_init+0xf0>)
 800317a:	2200      	movs	r2, #0
 800317c:	825a      	strh	r2, [r3, #18]
	fix3d.acq_total_time = 0 ;
 800317e:	4b39      	ldr	r3, [pc, #228]	; (8003264 <my_sys_init+0xf0>)
 8003180:	2200      	movs	r2, #0
 8003182:	615a      	str	r2, [r3, #20]
	sw1 = HAL_GPIO_ReadPin ( SW1_GPIO_Port , SW1_Pin ) ;
 8003184:	4b38      	ldr	r3, [pc, #224]	; (8003268 <my_sys_init+0xf4>)
 8003186:	2104      	movs	r1, #4
 8003188:	0018      	movs	r0, r3
 800318a:	f001 f9f7 	bl	800457c <HAL_GPIO_ReadPin>
 800318e:	0003      	movs	r3, r0
 8003190:	1e5a      	subs	r2, r3, #1
 8003192:	4193      	sbcs	r3, r2
 8003194:	b2da      	uxtb	r2, r3
 8003196:	4b35      	ldr	r3, [pc, #212]	; (800326c <my_sys_init+0xf8>)
 8003198:	701a      	strb	r2, [r3, #0]
	sw2 = HAL_GPIO_ReadPin ( SW2_GPIO_Port , SW2_Pin ) ;
 800319a:	4b33      	ldr	r3, [pc, #204]	; (8003268 <my_sys_init+0xf4>)
 800319c:	2108      	movs	r1, #8
 800319e:	0018      	movs	r0, r3
 80031a0:	f001 f9ec 	bl	800457c <HAL_GPIO_ReadPin>
 80031a4:	0003      	movs	r3, r0
 80031a6:	1e5a      	subs	r2, r3, #1
 80031a8:	4193      	sbcs	r3, r2
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	4b30      	ldr	r3, [pc, #192]	; (8003270 <my_sys_init+0xfc>)
 80031ae:	701a      	strb	r2, [r3, #0]
	if ( !sw1 && !sw2 )
 80031b0:	4b2e      	ldr	r3, [pc, #184]	; (800326c <my_sys_init+0xf8>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2201      	movs	r2, #1
 80031b6:	4053      	eors	r3, r2
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d013      	beq.n	80031e6 <my_sys_init+0x72>
 80031be:	4b2c      	ldr	r3, [pc, #176]	; (8003270 <my_sys_init+0xfc>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2201      	movs	r2, #1
 80031c4:	4053      	eors	r3, r2
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00c      	beq.n	80031e6 <my_sys_init+0x72>
	{
		sys_mode = 0 ;
 80031cc:	4b29      	ldr	r3, [pc, #164]	; (8003274 <my_sys_init+0x100>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 80031d2:	4b29      	ldr	r3, [pc, #164]	; (8003278 <my_sys_init+0x104>)
 80031d4:	22e1      	movs	r2, #225	; 0xe1
 80031d6:	0112      	lsls	r2, r2, #4
 80031d8:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 80031da:	4b28      	ldr	r3, [pc, #160]	; (800327c <my_sys_init+0x108>)
 80031dc:	2278      	movs	r2, #120	; 0x78
 80031de:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 80031e0:	4b27      	ldr	r3, [pc, #156]	; (8003280 <my_sys_init+0x10c>)
 80031e2:	221e      	movs	r2, #30
 80031e4:	801a      	strh	r2, [r3, #0]
	}
	if ( sw1 && !sw2 )
 80031e6:	4b21      	ldr	r3, [pc, #132]	; (800326c <my_sys_init+0xf8>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d013      	beq.n	8003216 <my_sys_init+0xa2>
 80031ee:	4b20      	ldr	r3, [pc, #128]	; (8003270 <my_sys_init+0xfc>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2201      	movs	r2, #1
 80031f4:	4053      	eors	r3, r2
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00c      	beq.n	8003216 <my_sys_init+0xa2>
	{
		sys_mode = 1 ;
 80031fc:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <my_sys_init+0x100>)
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 8003202:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <my_sys_init+0x104>)
 8003204:	22e1      	movs	r2, #225	; 0xe1
 8003206:	0112      	lsls	r2, r2, #4
 8003208:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 800320a:	4b1c      	ldr	r3, [pc, #112]	; (800327c <my_sys_init+0x108>)
 800320c:	2278      	movs	r2, #120	; 0x78
 800320e:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <my_sys_init+0x10c>)
 8003212:	221e      	movs	r2, #30
 8003214:	801a      	strh	r2, [r3, #0]
	}
	if ( !sw1 && sw2 )
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <my_sys_init+0xf8>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2201      	movs	r2, #1
 800321c:	4053      	eors	r3, r2
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d011      	beq.n	8003248 <my_sys_init+0xd4>
 8003224:	4b12      	ldr	r3, [pc, #72]	; (8003270 <my_sys_init+0xfc>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00d      	beq.n	8003248 <my_sys_init+0xd4>
	{
		sys_mode = 2 ;
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <my_sys_init+0x100>)
 800322e:	2202      	movs	r2, #2
 8003230:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_5_MIN ;
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <my_sys_init+0x104>)
 8003234:	2296      	movs	r2, #150	; 0x96
 8003236:	0052      	lsls	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_10_MIN ;
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <my_sys_init+0x108>)
 800323c:	2296      	movs	r2, #150	; 0x96
 800323e:	0092      	lsls	r2, r2, #2
 8003240:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_1_MIN ;
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <my_sys_init+0x10c>)
 8003244:	223c      	movs	r2, #60	; 0x3c
 8003246:	801a      	strh	r2, [r3, #0]
	}
	if ( sw1 && sw2 )
 8003248:	4b08      	ldr	r3, [pc, #32]	; (800326c <my_sys_init+0xf8>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d006      	beq.n	800325e <my_sys_init+0xea>
 8003250:	4b07      	ldr	r3, [pc, #28]	; (8003270 <my_sys_init+0xfc>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <my_sys_init+0xea>
	{
		sys_mode = 3 ;
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <my_sys_init+0x100>)
 800325a:	2203      	movs	r2, #3
 800325c:	701a      	strb	r2, [r3, #0]
	}
}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20000ae8 	.word	0x20000ae8
 8003268:	50000c00 	.word	0x50000c00
 800326c:	20000a20 	.word	0x20000a20
 8003270:	20000a21 	.word	0x20000a21
 8003274:	20000a22 	.word	0x20000a22
 8003278:	20000008 	.word	0x20000008
 800327c:	20000016 	.word	0x20000016
 8003280:	20000018 	.word	0x20000018

08003284 <my_sys_deepsleep>:
	uint16_t yyyy = my_rtc_get_dt_s ( rtc_dt_s ) ;
	send_debug_logs ( rtc_dt_s ) ;
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
}
void my_sys_deepsleep ( void )
{
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b083      	sub	sp, #12
 8003288:	af02      	add	r7, sp, #8
	sprintf ( dbg_payload , "%s,%d,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE" , __FILE__ , __LINE__ ) ;
 800328a:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <my_sys_deepsleep+0x64>)
 800328c:	4a17      	ldr	r2, [pc, #92]	; (80032ec <my_sys_deepsleep+0x68>)
 800328e:	4918      	ldr	r1, [pc, #96]	; (80032f0 <my_sys_deepsleep+0x6c>)
 8003290:	4818      	ldr	r0, [pc, #96]	; (80032f4 <my_sys_deepsleep+0x70>)
 8003292:	f008 fd2d 	bl	800bcf0 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 8003296:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <my_sys_deepsleep+0x70>)
 8003298:	0018      	movs	r0, r3
 800329a:	f7ff ff3b 	bl	8003114 <send_debug_logs>
	my_tim_stop () ;
 800329e:	f000 f95f 	bl	8003560 <my_tim_stop>
	HAL_SuspendTick () ;
 80032a2:	f000 fe01 	bl	8003ea8 <HAL_SuspendTick>
	my_rtc_alarm_flag = false ;
 80032a6:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <my_sys_deepsleep+0x74>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
	HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	01db      	lsls	r3, r3, #7
 80032b0:	2102      	movs	r1, #2
 80032b2:	0018      	movs	r0, r3
 80032b4:	f001 f9de 	bl	8004674 <HAL_PWR_EnterSTOPMode>
	HAL_ResumeTick () ;
 80032b8:	f000 fe04 	bl	8003ec4 <HAL_ResumeTick>
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <my_sys_deepsleep+0x78>)
 80032be:	0018      	movs	r0, r3
 80032c0:	f006 fac8 	bl	8009854 <my_rtc_get_dt_s>
	sprintf ( dbg_payload , "%s,%d,%s,Wake-up" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80032c4:	4c0e      	ldr	r4, [pc, #56]	; (8003300 <my_sys_deepsleep+0x7c>)
 80032c6:	4a09      	ldr	r2, [pc, #36]	; (80032ec <my_sys_deepsleep+0x68>)
 80032c8:	490e      	ldr	r1, [pc, #56]	; (8003304 <my_sys_deepsleep+0x80>)
 80032ca:	480a      	ldr	r0, [pc, #40]	; (80032f4 <my_sys_deepsleep+0x70>)
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <my_sys_deepsleep+0x78>)
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	0023      	movs	r3, r4
 80032d2:	f008 fd0d 	bl	800bcf0 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 80032d6:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <my_sys_deepsleep+0x70>)
 80032d8:	0018      	movs	r0, r3
 80032da:	f7ff ff1b 	bl	8003114 <send_debug_logs>
}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b001      	add	sp, #4
 80032e4:	bd90      	pop	{r4, r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	00000343 	.word	0x00000343
 80032ec:	080128fc 	.word	0x080128fc
 80032f0:	08012a34 	.word	0x08012a34
 80032f4:	20000b10 	.word	0x20000b10
 80032f8:	20000b00 	.word	0x20000b00
 80032fc:	20000a24 	.word	0x20000a24
 8003300:	0000034b 	.word	0x0000034b
 8003304:	08012a68 	.word	0x08012a68

08003308 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	0002      	movs	r2, r0
 8003310:	1dfb      	adds	r3, r7, #7
 8003312:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 8003314:	1dfb      	adds	r3, r7, #7
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d10e      	bne.n	800333a <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	4811      	ldr	r0, [pc, #68]	; (8003368 <my_ant_sw_pos+0x60>)
 8003322:	2200      	movs	r2, #0
 8003324:	0019      	movs	r1, r3
 8003326:	f001 f946 	bl	80045b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	480e      	ldr	r0, [pc, #56]	; (8003368 <my_ant_sw_pos+0x60>)
 8003330:	2201      	movs	r2, #1
 8003332:	0019      	movs	r1, r3
 8003334:	f001 f93f 	bl	80045b6 <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8003338:	e011      	b.n	800335e <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d10d      	bne.n	800335e <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	4808      	ldr	r0, [pc, #32]	; (8003368 <my_ant_sw_pos+0x60>)
 8003348:	2201      	movs	r2, #1
 800334a:	0019      	movs	r1, r3
 800334c:	f001 f933 	bl	80045b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4804      	ldr	r0, [pc, #16]	; (8003368 <my_ant_sw_pos+0x60>)
 8003356:	2200      	movs	r2, #0
 8003358:	0019      	movs	r1, r3
 800335a:	f001 f92c 	bl	80045b6 <HAL_GPIO_WritePin>
}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	46bd      	mov	sp, r7
 8003362:	b002      	add	sp, #8
 8003364:	bd80      	pop	{r7, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	50000400 	.word	0x50000400

0800336c <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 8003370:	2001      	movs	r0, #1
 8003372:	f7ff ffc9 	bl	8003308 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	4808      	ldr	r0, [pc, #32]	; (800339c <my_gnss_sw_on+0x30>)
 800337c:	2201      	movs	r2, #1
 800337e:	0019      	movs	r1, r3
 8003380:	f001 f919 	bl	80045b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	019b      	lsls	r3, r3, #6
 8003388:	4804      	ldr	r0, [pc, #16]	; (800339c <my_gnss_sw_on+0x30>)
 800338a:	2201      	movs	r2, #1
 800338c:	0019      	movs	r1, r3
 800338e:	f001 f912 	bl	80045b6 <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 8003392:	f7ff fd7f 	bl	8002e94 <MX_USART5_UART_Init>
}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	50000400 	.word	0x50000400

080033a0 <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 80033a4:	2002      	movs	r0, #2
 80033a6:	f7ff ffaf 	bl	8003308 <my_ant_sw_pos>
	if ( sys_mode < 2 )
 80033aa:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <my_gnss_sw_off+0x3c>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d811      	bhi.n	80033d6 <my_gnss_sw_off+0x36>
	{
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 80033b2:	2380      	movs	r3, #128	; 0x80
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	480a      	ldr	r0, [pc, #40]	; (80033e0 <my_gnss_sw_off+0x40>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	0019      	movs	r1, r3
 80033bc:	f001 f8fb 	bl	80045b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	019b      	lsls	r3, r3, #6
 80033c4:	4806      	ldr	r0, [pc, #24]	; (80033e0 <my_gnss_sw_off+0x40>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	0019      	movs	r1, r3
 80033ca:	f001 f8f4 	bl	80045b6 <HAL_GPIO_WritePin>
		HAL_UART_DeInit ( &HUART_GNSS ) ;
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <my_gnss_sw_off+0x44>)
 80033d0:	0018      	movs	r0, r3
 80033d2:	f003 fadd 	bl	8006990 <HAL_UART_DeInit>
	}
}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000a22 	.word	0x20000a22
 80033e0:	50000400 	.word	0x50000400
 80033e4:	2000098c 	.word	0x2000098c

080033e8 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	000a      	movs	r2, r1
 80033f2:	1cfb      	adds	r3, r7, #3
 80033f4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 80033f6:	23fa      	movs	r3, #250	; 0xfa
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4809      	ldr	r0, [pc, #36]	; (8003424 <my_gnss_receive_byte+0x3c>)
 80033fe:	2201      	movs	r2, #1
 8003400:	f003 fbaa 	bl	8006b58 <HAL_UART_Receive>
	if ( sys_mode > 0 )
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <my_gnss_receive_byte+0x40>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d006      	beq.n	800341a <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 800340c:	23fa      	movs	r3, #250	; 0xfa
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4806      	ldr	r0, [pc, #24]	; (800342c <my_gnss_receive_byte+0x44>)
 8003414:	2201      	movs	r2, #1
 8003416:	f003 fafb 	bl	8006a10 <HAL_UART_Transmit>
}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b002      	add	sp, #8
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	2000098c 	.word	0x2000098c
 8003428:	20000a22 	.word	0x20000a22
 800342c:	20000864 	.word	0x20000864

08003430 <my_astronode_reset>:
}


// ** ASTRO Operations
void my_astronode_reset ( void )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8003434:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <my_astronode_reset+0x30>)
 8003436:	2201      	movs	r2, #1
 8003438:	2102      	movs	r1, #2
 800343a:	0018      	movs	r0, r3
 800343c:	f001 f8bb 	bl	80045b6 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8003440:	2001      	movs	r0, #1
 8003442:	f000 fd0d 	bl	8003e60 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <my_astronode_reset+0x30>)
 8003448:	2200      	movs	r2, #0
 800344a:	2102      	movs	r1, #2
 800344c:	0018      	movs	r0, r3
 800344e:	f001 f8b2 	bl	80045b6 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8003452:	20fa      	movs	r0, #250	; 0xfa
 8003454:	f000 fd04 	bl	8003e60 <HAL_Delay>
}
 8003458:	46c0      	nop			; (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	50000400 	.word	0x50000400

08003464 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <send_astronode_request+0x34>)
 8003470:	0018      	movs	r0, r3
 8003472:	f7ff fe4f 	bl	8003114 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	0018      	movs	r0, r3
 800347a:	f7ff fe4b 	bl	8003114 <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	b29a      	uxth	r2, r3
 8003482:	23fa      	movs	r3, #250	; 0xfa
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4804      	ldr	r0, [pc, #16]	; (800349c <send_astronode_request+0x38>)
 800348a:	f003 fac1 	bl	8006a10 <HAL_UART_Transmit>
}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	b002      	add	sp, #8
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	08012a84 	.word	0x08012a84
 800349c:	200008f8 	.word	0x200008f8

080034a0 <get_systick>:
uint32_t get_systick ( void )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 80034a4:	f000 fcd2 	bl	8003e4c <HAL_GetTick>
 80034a8:	0003      	movs	r3, r0
}
 80034aa:	0018      	movs	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	000a      	movs	r2, r1
 80034ba:	1cbb      	adds	r3, r7, #2
 80034bc:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 80034be:	f7ff ffef 	bl	80034a0 <get_systick>
 80034c2:	0002      	movs	r2, r0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	1cba      	adds	r2, r7, #2
 80034ca:	8812      	ldrh	r2, [r2, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	419b      	sbcs	r3, r3
 80034d0:	425b      	negs	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b002      	add	sp, #8
 80034da:	bd80      	pop	{r7, pc}

080034dc <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4806      	ldr	r0, [pc, #24]	; (8003500 <is_astronode_character_received+0x24>)
 80034e8:	2364      	movs	r3, #100	; 0x64
 80034ea:	2201      	movs	r2, #1
 80034ec:	f003 fb34 	bl	8006b58 <HAL_UART_Receive>
 80034f0:	0003      	movs	r3, r0
 80034f2:	425a      	negs	r2, r3
 80034f4:	4153      	adcs	r3, r2
 80034f6:	b2db      	uxtb	r3, r3
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b002      	add	sp, #8
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	200008f8 	.word	0x200008f8

08003504 <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <my_astro_evt_pin+0x20>)
 800350a:	2104      	movs	r1, #4
 800350c:	0018      	movs	r0, r3
 800350e:	f001 f835 	bl	800457c <HAL_GPIO_ReadPin>
 8003512:	0003      	movs	r3, r0
 8003514:	3b01      	subs	r3, #1
 8003516:	425a      	negs	r2, r3
 8003518:	4153      	adcs	r3, r2
 800351a:	b2db      	uxtb	r3, r3
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	50000400 	.word	0x50000400

08003528 <my_tim_init>:

// TIM operations
void my_tim_init ()
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <my_tim_init+0x14>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2202      	movs	r2, #2
 8003532:	4252      	negs	r2, r2
 8003534:	611a      	str	r2, [r3, #16]
}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20000784 	.word	0x20000784

08003540 <my_tim_start>:

void my_tim_start ()
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <my_tim_start+0x18>)
 8003546:	2200      	movs	r2, #0
 8003548:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <my_tim_start+0x1c>)
 800354c:	0018      	movs	r0, r3
 800354e:	f002 feeb 	bl	8006328 <HAL_TIM_Base_Start_IT>
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000c34 	.word	0x20000c34
 800355c:	20000784 	.word	0x20000784

08003560 <my_tim_stop>:

void my_tim_stop ()
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <my_tim_stop+0x14>)
 8003566:	0018      	movs	r0, r3
 8003568:	f002 ff40 	bl	80063ec <HAL_TIM_Base_Stop_IT>
}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	20000784 	.word	0x20000784

08003578 <HAL_TIM_PeriodElapsedCallback>:

// *** CALBACKS

// TIM Callback
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b085      	sub	sp, #20
 800357c:	af02      	add	r7, sp, #8
 800357e:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a12      	ldr	r2, [pc, #72]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d11e      	bne.n	80035c8 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		tim_seconds++ ;
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	3301      	adds	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003594:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIME_THS_15_MIN )
 8003596:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003598:	881a      	ldrh	r2, [r3, #0]
 800359a:	23e1      	movs	r3, #225	; 0xe1
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	429a      	cmp	r2, r3
 80035a0:	d912      	bls.n	80035c8 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			my_rtc_get_dt_s ( rtc_dt_s ) ;
 80035a2:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80035a4:	0018      	movs	r0, r3
 80035a6:	f006 f955 	bl	8009854 <my_rtc_get_dt_s>
			sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80035aa:	4c0c      	ldr	r4, [pc, #48]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80035ac:	4a0c      	ldr	r2, [pc, #48]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80035ae:	490d      	ldr	r1, [pc, #52]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80035b0:	480d      	ldr	r0, [pc, #52]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	0023      	movs	r3, r4
 80035b8:	f008 fb9a 	bl	800bcf0 <sprintf>
			send_debug_logs ( dbg_payload ) ;
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80035be:	0018      	movs	r0, r3
 80035c0:	f7ff fda8 	bl	8003114 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 80035c4:	f000 fd85 	bl	80040d2 <HAL_NVIC_SystemReset>
		}
	}
}
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b003      	add	sp, #12
 80035ce:	bd90      	pop	{r4, r7, pc}
 80035d0:	40001000 	.word	0x40001000
 80035d4:	20000c34 	.word	0x20000c34
 80035d8:	20000a24 	.word	0x20000a24
 80035dc:	000003ef 	.word	0x000003ef
 80035e0:	080128fc 	.word	0x080128fc
 80035e4:	0801297c 	.word	0x0801297c
 80035e8:	20000b10 	.word	0x20000b10

080035ec <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	my_rtc_alarm_flag = true ;
 80035f4:	4b03      	ldr	r3, [pc, #12]	; (8003604 <HAL_RTC_AlarmAEventCallback+0x18>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	701a      	strb	r2, [r3, #0]
}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b002      	add	sp, #8
 8003600:	bd80      	pop	{r7, pc}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	20000b00 	.word	0x20000b00

08003608 <HAL_GPIO_EXTI_Rising_Callback>:

// ASTRO EVT Callbacks
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	0002      	movs	r2, r0
 8003610:	1dbb      	adds	r3, r7, #6
 8003612:	801a      	strh	r2, [r3, #0]

}
 8003614:	46c0      	nop			; (mov r8, r8)
 8003616:	46bd      	mov	sp, r7
 8003618:	b002      	add	sp, #8
 800361a:	bd80      	pop	{r7, pc}

0800361c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003620:	b672      	cpsid	i
}
 8003622:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003624:	e7fe      	b.n	8003624 <Error_Handler+0x8>
	...

08003628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_MspInit+0x4c>)
 8003630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_MspInit+0x4c>)
 8003634:	2101      	movs	r1, #1
 8003636:	430a      	orrs	r2, r1
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
 800363a:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <HAL_MspInit+0x4c>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	2201      	movs	r2, #1
 8003640:	4013      	ands	r3, r2
 8003642:	607b      	str	r3, [r7, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_MspInit+0x4c>)
 8003648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <HAL_MspInit+0x4c>)
 800364c:	2180      	movs	r1, #128	; 0x80
 800364e:	0549      	lsls	r1, r1, #21
 8003650:	430a      	orrs	r2, r1
 8003652:	63da      	str	r2, [r3, #60]	; 0x3c
 8003654:	4b07      	ldr	r3, [pc, #28]	; (8003674 <HAL_MspInit+0x4c>)
 8003656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	055b      	lsls	r3, r3, #21
 800365c:	4013      	ands	r3, r2
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003662:	23c0      	movs	r3, #192	; 0xc0
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	0018      	movs	r0, r3
 8003668:	f000 fc3a 	bl	8003ee0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800366c:	46c0      	nop			; (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	b002      	add	sp, #8
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021000 	.word	0x40021000

08003678 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003678:	b590      	push	{r4, r7, lr}
 800367a:	b097      	sub	sp, #92	; 0x5c
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003680:	240c      	movs	r4, #12
 8003682:	193b      	adds	r3, r7, r4
 8003684:	0018      	movs	r0, r3
 8003686:	234c      	movs	r3, #76	; 0x4c
 8003688:	001a      	movs	r2, r3
 800368a:	2100      	movs	r1, #0
 800368c:	f008 fbc6 	bl	800be1c <memset>
  if(hrtc->Instance==RTC)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a19      	ldr	r2, [pc, #100]	; (80036fc <HAL_RTC_MspInit+0x84>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d12c      	bne.n	80036f4 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800369a:	193b      	adds	r3, r7, r4
 800369c:	2280      	movs	r2, #128	; 0x80
 800369e:	0292      	lsls	r2, r2, #10
 80036a0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80036a2:	193b      	adds	r3, r7, r4
 80036a4:	2280      	movs	r2, #128	; 0x80
 80036a6:	0052      	lsls	r2, r2, #1
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036aa:	193b      	adds	r3, r7, r4
 80036ac:	0018      	movs	r0, r3
 80036ae:	f001 fd89 	bl	80051c4 <HAL_RCCEx_PeriphCLKConfig>
 80036b2:	1e03      	subs	r3, r0, #0
 80036b4:	d001      	beq.n	80036ba <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80036b6:	f7ff ffb1 	bl	800361c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80036ba:	4b11      	ldr	r3, [pc, #68]	; (8003700 <HAL_RTC_MspInit+0x88>)
 80036bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_RTC_MspInit+0x88>)
 80036c0:	2180      	movs	r1, #128	; 0x80
 80036c2:	0209      	lsls	r1, r1, #8
 80036c4:	430a      	orrs	r2, r1
 80036c6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <HAL_RTC_MspInit+0x88>)
 80036ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <HAL_RTC_MspInit+0x88>)
 80036ce:	2180      	movs	r1, #128	; 0x80
 80036d0:	00c9      	lsls	r1, r1, #3
 80036d2:	430a      	orrs	r2, r1
 80036d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80036d6:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <HAL_RTC_MspInit+0x88>)
 80036d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4013      	ands	r3, r2
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 80036e4:	2200      	movs	r2, #0
 80036e6:	2103      	movs	r1, #3
 80036e8:	2002      	movs	r0, #2
 80036ea:	f000 fccd 	bl	8004088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80036ee:	2002      	movs	r0, #2
 80036f0:	f000 fcdf 	bl	80040b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b017      	add	sp, #92	; 0x5c
 80036fa:	bd90      	pop	{r4, r7, pc}
 80036fc:	40002800 	.word	0x40002800
 8003700:	40021000 	.word	0x40021000

08003704 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b08b      	sub	sp, #44	; 0x2c
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370c:	2414      	movs	r4, #20
 800370e:	193b      	adds	r3, r7, r4
 8003710:	0018      	movs	r0, r3
 8003712:	2314      	movs	r3, #20
 8003714:	001a      	movs	r2, r3
 8003716:	2100      	movs	r1, #0
 8003718:	f008 fb80 	bl	800be1c <memset>
  if(hspi->Instance==SPI1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1b      	ldr	r2, [pc, #108]	; (8003790 <HAL_SPI_MspInit+0x8c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d130      	bne.n	8003788 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003726:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_SPI_MspInit+0x90>)
 8003728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800372a:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <HAL_SPI_MspInit+0x90>)
 800372c:	2180      	movs	r1, #128	; 0x80
 800372e:	0149      	lsls	r1, r1, #5
 8003730:	430a      	orrs	r2, r1
 8003732:	641a      	str	r2, [r3, #64]	; 0x40
 8003734:	4b17      	ldr	r3, [pc, #92]	; (8003794 <HAL_SPI_MspInit+0x90>)
 8003736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	015b      	lsls	r3, r3, #5
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003742:	4b14      	ldr	r3, [pc, #80]	; (8003794 <HAL_SPI_MspInit+0x90>)
 8003744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003746:	4b13      	ldr	r3, [pc, #76]	; (8003794 <HAL_SPI_MspInit+0x90>)
 8003748:	2101      	movs	r1, #1
 800374a:	430a      	orrs	r2, r1
 800374c:	635a      	str	r2, [r3, #52]	; 0x34
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_SPI_MspInit+0x90>)
 8003750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003752:	2201      	movs	r2, #1
 8003754:	4013      	ands	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 800375a:	0021      	movs	r1, r4
 800375c:	187b      	adds	r3, r7, r1
 800375e:	22e0      	movs	r2, #224	; 0xe0
 8003760:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003762:	187b      	adds	r3, r7, r1
 8003764:	2202      	movs	r2, #2
 8003766:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	187b      	adds	r3, r7, r1
 800376a:	2200      	movs	r2, #0
 800376c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376e:	187b      	adds	r3, r7, r1
 8003770:	2200      	movs	r2, #0
 8003772:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003774:	187b      	adds	r3, r7, r1
 8003776:	2200      	movs	r2, #0
 8003778:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377a:	187a      	adds	r2, r7, r1
 800377c:	23a0      	movs	r3, #160	; 0xa0
 800377e:	05db      	lsls	r3, r3, #23
 8003780:	0011      	movs	r1, r2
 8003782:	0018      	movs	r0, r3
 8003784:	f000 fcb6 	bl	80040f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	b00b      	add	sp, #44	; 0x2c
 800378e:	bd90      	pop	{r4, r7, pc}
 8003790:	40013000 	.word	0x40013000
 8003794:	40021000 	.word	0x40021000

08003798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0d      	ldr	r2, [pc, #52]	; (80037dc <HAL_TIM_Base_MspInit+0x44>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d113      	bne.n	80037d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80037aa:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <HAL_TIM_Base_MspInit+0x48>)
 80037ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037ae:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <HAL_TIM_Base_MspInit+0x48>)
 80037b0:	2110      	movs	r1, #16
 80037b2:	430a      	orrs	r2, r1
 80037b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80037b6:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <HAL_TIM_Base_MspInit+0x48>)
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	2210      	movs	r2, #16
 80037bc:	4013      	ands	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 80037c2:	2200      	movs	r2, #0
 80037c4:	2102      	movs	r1, #2
 80037c6:	2011      	movs	r0, #17
 80037c8:	f000 fc5e 	bl	8004088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80037cc:	2011      	movs	r0, #17
 80037ce:	f000 fc70 	bl	80040b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b004      	add	sp, #16
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	40001000 	.word	0x40001000
 80037e0:	40021000 	.word	0x40021000

080037e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b0a3      	sub	sp, #140	; 0x8c
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ec:	2374      	movs	r3, #116	; 0x74
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	0018      	movs	r0, r3
 80037f2:	2314      	movs	r3, #20
 80037f4:	001a      	movs	r2, r3
 80037f6:	2100      	movs	r1, #0
 80037f8:	f008 fb10 	bl	800be1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037fc:	2428      	movs	r4, #40	; 0x28
 80037fe:	193b      	adds	r3, r7, r4
 8003800:	0018      	movs	r0, r3
 8003802:	234c      	movs	r3, #76	; 0x4c
 8003804:	001a      	movs	r2, r3
 8003806:	2100      	movs	r1, #0
 8003808:	f008 fb08 	bl	800be1c <memset>
  if(huart->Instance==USART1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a84      	ldr	r2, [pc, #528]	; (8003a24 <HAL_UART_MspInit+0x240>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d140      	bne.n	8003898 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003816:	193b      	adds	r3, r7, r4
 8003818:	2201      	movs	r2, #1
 800381a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800381c:	193b      	adds	r3, r7, r4
 800381e:	2200      	movs	r2, #0
 8003820:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003822:	193b      	adds	r3, r7, r4
 8003824:	0018      	movs	r0, r3
 8003826:	f001 fccd 	bl	80051c4 <HAL_RCCEx_PeriphCLKConfig>
 800382a:	1e03      	subs	r3, r0, #0
 800382c:	d001      	beq.n	8003832 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800382e:	f7ff fef5 	bl	800361c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003832:	4b7d      	ldr	r3, [pc, #500]	; (8003a28 <HAL_UART_MspInit+0x244>)
 8003834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003836:	4b7c      	ldr	r3, [pc, #496]	; (8003a28 <HAL_UART_MspInit+0x244>)
 8003838:	2180      	movs	r1, #128	; 0x80
 800383a:	01c9      	lsls	r1, r1, #7
 800383c:	430a      	orrs	r2, r1
 800383e:	641a      	str	r2, [r3, #64]	; 0x40
 8003840:	4b79      	ldr	r3, [pc, #484]	; (8003a28 <HAL_UART_MspInit+0x244>)
 8003842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	01db      	lsls	r3, r3, #7
 8003848:	4013      	ands	r3, r2
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800384e:	4b76      	ldr	r3, [pc, #472]	; (8003a28 <HAL_UART_MspInit+0x244>)
 8003850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003852:	4b75      	ldr	r3, [pc, #468]	; (8003a28 <HAL_UART_MspInit+0x244>)
 8003854:	2101      	movs	r1, #1
 8003856:	430a      	orrs	r2, r1
 8003858:	635a      	str	r2, [r3, #52]	; 0x34
 800385a:	4b73      	ldr	r3, [pc, #460]	; (8003a28 <HAL_UART_MspInit+0x244>)
 800385c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385e:	2201      	movs	r2, #1
 8003860:	4013      	ands	r3, r2
 8003862:	623b      	str	r3, [r7, #32]
 8003864:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 8003866:	2174      	movs	r1, #116	; 0x74
 8003868:	187b      	adds	r3, r7, r1
 800386a:	22c0      	movs	r2, #192	; 0xc0
 800386c:	00d2      	lsls	r2, r2, #3
 800386e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003870:	187b      	adds	r3, r7, r1
 8003872:	2202      	movs	r2, #2
 8003874:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003876:	187b      	adds	r3, r7, r1
 8003878:	2200      	movs	r2, #0
 800387a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387c:	187b      	adds	r3, r7, r1
 800387e:	2200      	movs	r2, #0
 8003880:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003882:	187b      	adds	r3, r7, r1
 8003884:	2201      	movs	r2, #1
 8003886:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003888:	187a      	adds	r2, r7, r1
 800388a:	23a0      	movs	r3, #160	; 0xa0
 800388c:	05db      	lsls	r3, r3, #23
 800388e:	0011      	movs	r1, r2
 8003890:	0018      	movs	r0, r3
 8003892:	f000 fc2f 	bl	80040f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003896:	e0c0      	b.n	8003a1a <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a63      	ldr	r2, [pc, #396]	; (8003a2c <HAL_UART_MspInit+0x248>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d140      	bne.n	8003924 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80038a2:	2128      	movs	r1, #40	; 0x28
 80038a4:	187b      	adds	r3, r7, r1
 80038a6:	2202      	movs	r2, #2
 80038a8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80038aa:	187b      	adds	r3, r7, r1
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038b0:	187b      	adds	r3, r7, r1
 80038b2:	0018      	movs	r0, r3
 80038b4:	f001 fc86 	bl	80051c4 <HAL_RCCEx_PeriphCLKConfig>
 80038b8:	1e03      	subs	r3, r0, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 80038bc:	f7ff feae 	bl	800361c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038c0:	4b59      	ldr	r3, [pc, #356]	; (8003a28 <HAL_UART_MspInit+0x244>)
 80038c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038c4:	4b58      	ldr	r3, [pc, #352]	; (8003a28 <HAL_UART_MspInit+0x244>)
 80038c6:	2180      	movs	r1, #128	; 0x80
 80038c8:	0289      	lsls	r1, r1, #10
 80038ca:	430a      	orrs	r2, r1
 80038cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80038ce:	4b56      	ldr	r3, [pc, #344]	; (8003a28 <HAL_UART_MspInit+0x244>)
 80038d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	029b      	lsls	r3, r3, #10
 80038d6:	4013      	ands	r3, r2
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038dc:	4b52      	ldr	r3, [pc, #328]	; (8003a28 <HAL_UART_MspInit+0x244>)
 80038de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e0:	4b51      	ldr	r3, [pc, #324]	; (8003a28 <HAL_UART_MspInit+0x244>)
 80038e2:	2101      	movs	r1, #1
 80038e4:	430a      	orrs	r2, r1
 80038e6:	635a      	str	r2, [r3, #52]	; 0x34
 80038e8:	4b4f      	ldr	r3, [pc, #316]	; (8003a28 <HAL_UART_MspInit+0x244>)
 80038ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ec:	2201      	movs	r2, #1
 80038ee:	4013      	ands	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 80038f4:	2174      	movs	r1, #116	; 0x74
 80038f6:	187b      	adds	r3, r7, r1
 80038f8:	220c      	movs	r2, #12
 80038fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fc:	187b      	adds	r3, r7, r1
 80038fe:	2202      	movs	r2, #2
 8003900:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003902:	187b      	adds	r3, r7, r1
 8003904:	2200      	movs	r2, #0
 8003906:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003908:	187b      	adds	r3, r7, r1
 800390a:	2200      	movs	r2, #0
 800390c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800390e:	187b      	adds	r3, r7, r1
 8003910:	2201      	movs	r2, #1
 8003912:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003914:	187a      	adds	r2, r7, r1
 8003916:	23a0      	movs	r3, #160	; 0xa0
 8003918:	05db      	lsls	r3, r3, #23
 800391a:	0011      	movs	r1, r2
 800391c:	0018      	movs	r0, r3
 800391e:	f000 fbe9 	bl	80040f4 <HAL_GPIO_Init>
}
 8003922:	e07a      	b.n	8003a1a <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a41      	ldr	r2, [pc, #260]	; (8003a30 <HAL_UART_MspInit+0x24c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d140      	bne.n	80039b0 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800392e:	2128      	movs	r1, #40	; 0x28
 8003930:	187b      	adds	r3, r7, r1
 8003932:	2204      	movs	r2, #4
 8003934:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003936:	187b      	adds	r3, r7, r1
 8003938:	2200      	movs	r2, #0
 800393a:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800393c:	187b      	adds	r3, r7, r1
 800393e:	0018      	movs	r0, r3
 8003940:	f001 fc40 	bl	80051c4 <HAL_RCCEx_PeriphCLKConfig>
 8003944:	1e03      	subs	r3, r0, #0
 8003946:	d001      	beq.n	800394c <HAL_UART_MspInit+0x168>
      Error_Handler();
 8003948:	f7ff fe68 	bl	800361c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800394c:	4b36      	ldr	r3, [pc, #216]	; (8003a28 <HAL_UART_MspInit+0x244>)
 800394e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003950:	4b35      	ldr	r3, [pc, #212]	; (8003a28 <HAL_UART_MspInit+0x244>)
 8003952:	2180      	movs	r1, #128	; 0x80
 8003954:	02c9      	lsls	r1, r1, #11
 8003956:	430a      	orrs	r2, r1
 8003958:	63da      	str	r2, [r3, #60]	; 0x3c
 800395a:	4b33      	ldr	r3, [pc, #204]	; (8003a28 <HAL_UART_MspInit+0x244>)
 800395c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	02db      	lsls	r3, r3, #11
 8003962:	4013      	ands	r3, r2
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003968:	4b2f      	ldr	r3, [pc, #188]	; (8003a28 <HAL_UART_MspInit+0x244>)
 800396a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800396c:	4b2e      	ldr	r3, [pc, #184]	; (8003a28 <HAL_UART_MspInit+0x244>)
 800396e:	2102      	movs	r1, #2
 8003970:	430a      	orrs	r2, r1
 8003972:	635a      	str	r2, [r3, #52]	; 0x34
 8003974:	4b2c      	ldr	r3, [pc, #176]	; (8003a28 <HAL_UART_MspInit+0x244>)
 8003976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003978:	2202      	movs	r2, #2
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8003980:	2174      	movs	r1, #116	; 0x74
 8003982:	187b      	adds	r3, r7, r1
 8003984:	22c0      	movs	r2, #192	; 0xc0
 8003986:	0092      	lsls	r2, r2, #2
 8003988:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398a:	187b      	adds	r3, r7, r1
 800398c:	2202      	movs	r2, #2
 800398e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003990:	187b      	adds	r3, r7, r1
 8003992:	2200      	movs	r2, #0
 8003994:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003996:	187b      	adds	r3, r7, r1
 8003998:	2200      	movs	r2, #0
 800399a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800399c:	187b      	adds	r3, r7, r1
 800399e:	2204      	movs	r2, #4
 80039a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a2:	187b      	adds	r3, r7, r1
 80039a4:	4a23      	ldr	r2, [pc, #140]	; (8003a34 <HAL_UART_MspInit+0x250>)
 80039a6:	0019      	movs	r1, r3
 80039a8:	0010      	movs	r0, r2
 80039aa:	f000 fba3 	bl	80040f4 <HAL_GPIO_Init>
}
 80039ae:	e034      	b.n	8003a1a <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a20      	ldr	r2, [pc, #128]	; (8003a38 <HAL_UART_MspInit+0x254>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d12f      	bne.n	8003a1a <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 80039ba:	4b1b      	ldr	r3, [pc, #108]	; (8003a28 <HAL_UART_MspInit+0x244>)
 80039bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039be:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <HAL_UART_MspInit+0x244>)
 80039c0:	2180      	movs	r1, #128	; 0x80
 80039c2:	0049      	lsls	r1, r1, #1
 80039c4:	430a      	orrs	r2, r1
 80039c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80039c8:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <HAL_UART_MspInit+0x244>)
 80039ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039cc:	2380      	movs	r3, #128	; 0x80
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	4013      	ands	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d6:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <HAL_UART_MspInit+0x244>)
 80039d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <HAL_UART_MspInit+0x244>)
 80039dc:	2102      	movs	r1, #2
 80039de:	430a      	orrs	r2, r1
 80039e0:	635a      	str	r2, [r3, #52]	; 0x34
 80039e2:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <HAL_UART_MspInit+0x244>)
 80039e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e6:	2202      	movs	r2, #2
 80039e8:	4013      	ands	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 80039ee:	2174      	movs	r1, #116	; 0x74
 80039f0:	187b      	adds	r3, r7, r1
 80039f2:	2218      	movs	r2, #24
 80039f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f6:	187b      	adds	r3, r7, r1
 80039f8:	2202      	movs	r2, #2
 80039fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fc:	187b      	adds	r3, r7, r1
 80039fe:	2200      	movs	r2, #0
 8003a00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a02:	187b      	adds	r3, r7, r1
 8003a04:	2200      	movs	r2, #0
 8003a06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8003a08:	187b      	adds	r3, r7, r1
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a0e:	187b      	adds	r3, r7, r1
 8003a10:	4a08      	ldr	r2, [pc, #32]	; (8003a34 <HAL_UART_MspInit+0x250>)
 8003a12:	0019      	movs	r1, r3
 8003a14:	0010      	movs	r0, r2
 8003a16:	f000 fb6d 	bl	80040f4 <HAL_GPIO_Init>
}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b023      	add	sp, #140	; 0x8c
 8003a20:	bd90      	pop	{r4, r7, pc}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	40013800 	.word	0x40013800
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40004400 	.word	0x40004400
 8003a30:	40004800 	.word	0x40004800
 8003a34:	50000400 	.word	0x50000400
 8003a38:	40005000 	.word	0x40005000

08003a3c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a25      	ldr	r2, [pc, #148]	; (8003ae0 <HAL_UART_MspDeInit+0xa4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d10e      	bne.n	8003a6c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003a4e:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <HAL_UART_MspDeInit+0xa8>)
 8003a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a52:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <HAL_UART_MspDeInit+0xa8>)
 8003a54:	4924      	ldr	r1, [pc, #144]	; (8003ae8 <HAL_UART_MspDeInit+0xac>)
 8003a56:	400a      	ands	r2, r1
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 8003a5a:	23c0      	movs	r3, #192	; 0xc0
 8003a5c:	00da      	lsls	r2, r3, #3
 8003a5e:	23a0      	movs	r3, #160	; 0xa0
 8003a60:	05db      	lsls	r3, r3, #23
 8003a62:	0011      	movs	r1, r2
 8003a64:	0018      	movs	r0, r3
 8003a66:	f000 fcb1 	bl	80043cc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 8003a6a:	e034      	b.n	8003ad6 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1e      	ldr	r2, [pc, #120]	; (8003aec <HAL_UART_MspDeInit+0xb0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d10c      	bne.n	8003a90 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003a76:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <HAL_UART_MspDeInit+0xa8>)
 8003a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <HAL_UART_MspDeInit+0xa8>)
 8003a7c:	491c      	ldr	r1, [pc, #112]	; (8003af0 <HAL_UART_MspDeInit+0xb4>)
 8003a7e:	400a      	ands	r2, r1
 8003a80:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 8003a82:	23a0      	movs	r3, #160	; 0xa0
 8003a84:	05db      	lsls	r3, r3, #23
 8003a86:	210c      	movs	r1, #12
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f000 fc9f 	bl	80043cc <HAL_GPIO_DeInit>
}
 8003a8e:	e022      	b.n	8003ad6 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a17      	ldr	r2, [pc, #92]	; (8003af4 <HAL_UART_MspDeInit+0xb8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10d      	bne.n	8003ab6 <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003a9a:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <HAL_UART_MspDeInit+0xa8>)
 8003a9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a9e:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <HAL_UART_MspDeInit+0xa8>)
 8003aa0:	4915      	ldr	r1, [pc, #84]	; (8003af8 <HAL_UART_MspDeInit+0xbc>)
 8003aa2:	400a      	ands	r2, r1
 8003aa4:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 8003aa6:	23c0      	movs	r3, #192	; 0xc0
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4a14      	ldr	r2, [pc, #80]	; (8003afc <HAL_UART_MspDeInit+0xc0>)
 8003aac:	0019      	movs	r1, r3
 8003aae:	0010      	movs	r0, r2
 8003ab0:	f000 fc8c 	bl	80043cc <HAL_GPIO_DeInit>
}
 8003ab4:	e00f      	b.n	8003ad6 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a11      	ldr	r2, [pc, #68]	; (8003b00 <HAL_UART_MspDeInit+0xc4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d10a      	bne.n	8003ad6 <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 8003ac0:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <HAL_UART_MspDeInit+0xa8>)
 8003ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac4:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <HAL_UART_MspDeInit+0xa8>)
 8003ac6:	490f      	ldr	r1, [pc, #60]	; (8003b04 <HAL_UART_MspDeInit+0xc8>)
 8003ac8:	400a      	ands	r2, r1
 8003aca:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <HAL_UART_MspDeInit+0xc0>)
 8003ace:	2118      	movs	r1, #24
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f000 fc7b 	bl	80043cc <HAL_GPIO_DeInit>
}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b002      	add	sp, #8
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	40013800 	.word	0x40013800
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	ffffbfff 	.word	0xffffbfff
 8003aec:	40004400 	.word	0x40004400
 8003af0:	fffdffff 	.word	0xfffdffff
 8003af4:	40004800 	.word	0x40004800
 8003af8:	fffbffff 	.word	0xfffbffff
 8003afc:	50000400 	.word	0x50000400
 8003b00:	40005000 	.word	0x40005000
 8003b04:	fffffeff 	.word	0xfffffeff

08003b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b0c:	e7fe      	b.n	8003b0c <NMI_Handler+0x4>

08003b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b12:	e7fe      	b.n	8003b12 <HardFault_Handler+0x4>

08003b14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b18:	46c0      	nop			; (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b2c:	f000 f97c 	bl	8003e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <RTC_TAMP_IRQHandler+0x14>)
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f002 f942 	bl	8005dc8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	200006f4 	.word	0x200006f4

08003b50 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_Pin);
 8003b54:	2004      	movs	r0, #4
 8003b56:	f000 fd4b 	bl	80045f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8003b66:	0018      	movs	r0, r3
 8003b68:	f002 fc6e 	bl	8006448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	20000784 	.word	0x20000784

08003b78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  return 1;
 8003b7c:	2301      	movs	r3, #1
}
 8003b7e:	0018      	movs	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <_kill>:

int _kill(int pid, int sig)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b8e:	f008 fa39 	bl	800c004 <__errno>
 8003b92:	0003      	movs	r3, r0
 8003b94:	2216      	movs	r2, #22
 8003b96:	601a      	str	r2, [r3, #0]
  return -1;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	425b      	negs	r3, r3
}
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <_exit>:

void _exit (int status)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bac:	2301      	movs	r3, #1
 8003bae:	425a      	negs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	0011      	movs	r1, r2
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7ff ffe5 	bl	8003b84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003bba:	e7fe      	b.n	8003bba <_exit+0x16>

08003bbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	e00a      	b.n	8003be4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bce:	e000      	b.n	8003bd2 <_read+0x16>
 8003bd0:	bf00      	nop
 8003bd2:	0001      	movs	r1, r0
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	60ba      	str	r2, [r7, #8]
 8003bda:	b2ca      	uxtb	r2, r1
 8003bdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	3301      	adds	r3, #1
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	dbf0      	blt.n	8003bce <_read+0x12>
  }

  return len;
 8003bec:	687b      	ldr	r3, [r7, #4]
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b006      	add	sp, #24
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	e009      	b.n	8003c1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	60ba      	str	r2, [r7, #8]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	0018      	movs	r0, r3
 8003c12:	e000      	b.n	8003c16 <_write+0x20>
 8003c14:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	dbf1      	blt.n	8003c08 <_write+0x12>
  }
  return len;
 8003c24:	687b      	ldr	r3, [r7, #4]
}
 8003c26:	0018      	movs	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b006      	add	sp, #24
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <_close>:

int _close(int file)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c36:	2301      	movs	r3, #1
 8003c38:	425b      	negs	r3, r3
}
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b002      	add	sp, #8
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2280      	movs	r2, #128	; 0x80
 8003c50:	0192      	lsls	r2, r2, #6
 8003c52:	605a      	str	r2, [r3, #4]
  return 0;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b002      	add	sp, #8
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <_isatty>:

int _isatty(int file)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c66:	2301      	movs	r3, #1
}
 8003c68:	0018      	movs	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b002      	add	sp, #8
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	0018      	movs	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b004      	add	sp, #16
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c90:	4a14      	ldr	r2, [pc, #80]	; (8003ce4 <_sbrk+0x5c>)
 8003c92:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <_sbrk+0x60>)
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c9c:	4b13      	ldr	r3, [pc, #76]	; (8003cec <_sbrk+0x64>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d102      	bne.n	8003caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <_sbrk+0x64>)
 8003ca6:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <_sbrk+0x68>)
 8003ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003caa:	4b10      	ldr	r3, [pc, #64]	; (8003cec <_sbrk+0x64>)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	18d3      	adds	r3, r2, r3
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d207      	bcs.n	8003cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cb8:	f008 f9a4 	bl	800c004 <__errno>
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	220c      	movs	r2, #12
 8003cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	425b      	negs	r3, r3
 8003cc6:	e009      	b.n	8003cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cc8:	4b08      	ldr	r3, [pc, #32]	; (8003cec <_sbrk+0x64>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cce:	4b07      	ldr	r3, [pc, #28]	; (8003cec <_sbrk+0x64>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	18d2      	adds	r2, r2, r3
 8003cd6:	4b05      	ldr	r3, [pc, #20]	; (8003cec <_sbrk+0x64>)
 8003cd8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003cda:	68fb      	ldr	r3, [r7, #12]
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b006      	add	sp, #24
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20024000 	.word	0x20024000
 8003ce8:	00000400 	.word	0x00000400
 8003cec:	20000b04 	.word	0x20000b04
 8003cf0:	20000f48 	.word	0x20000f48

08003cf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d00:	480d      	ldr	r0, [pc, #52]	; (8003d38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d04:	f7ff fff6 	bl	8003cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d08:	480c      	ldr	r0, [pc, #48]	; (8003d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8003d0a:	490d      	ldr	r1, [pc, #52]	; (8003d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d0c:	4a0d      	ldr	r2, [pc, #52]	; (8003d44 <LoopForever+0xe>)
  movs r3, #0
 8003d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d10:	e002      	b.n	8003d18 <LoopCopyDataInit>

08003d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d16:	3304      	adds	r3, #4

08003d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d1c:	d3f9      	bcc.n	8003d12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d20:	4c0a      	ldr	r4, [pc, #40]	; (8003d4c <LoopForever+0x16>)
  movs r3, #0
 8003d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d24:	e001      	b.n	8003d2a <LoopFillZerobss>

08003d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d28:	3204      	adds	r2, #4

08003d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d2c:	d3fb      	bcc.n	8003d26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003d2e:	f008 f96f 	bl	800c010 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003d32:	f7fe fc39 	bl	80025a8 <main>

08003d36 <LoopForever>:

LoopForever:
  b LoopForever
 8003d36:	e7fe      	b.n	8003d36 <LoopForever>
  ldr   r0, =_estack
 8003d38:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d40:	200006d8 	.word	0x200006d8
  ldr r2, =_sidata
 8003d44:	08014930 	.word	0x08014930
  ldr r2, =_sbss
 8003d48:	200006d8 	.word	0x200006d8
  ldr r4, =_ebss
 8003d4c:	20000f44 	.word	0x20000f44

08003d50 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d50:	e7fe      	b.n	8003d50 <ADC1_COMP_IRQHandler>
	...

08003d54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d5a:	1dfb      	adds	r3, r7, #7
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_Init+0x3c>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <HAL_Init+0x3c>)
 8003d66:	2180      	movs	r1, #128	; 0x80
 8003d68:	0049      	lsls	r1, r1, #1
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d6e:	2003      	movs	r0, #3
 8003d70:	f000 f810 	bl	8003d94 <HAL_InitTick>
 8003d74:	1e03      	subs	r3, r0, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003d78:	1dfb      	adds	r3, r7, #7
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	e001      	b.n	8003d84 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003d80:	f7ff fc52 	bl	8003628 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d84:	1dfb      	adds	r3, r7, #7
 8003d86:	781b      	ldrb	r3, [r3, #0]
}
 8003d88:	0018      	movs	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b002      	add	sp, #8
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40022000 	.word	0x40022000

08003d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d94:	b590      	push	{r4, r7, lr}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d9c:	230f      	movs	r3, #15
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	2200      	movs	r2, #0
 8003da2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003da4:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <HAL_InitTick+0x88>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d02b      	beq.n	8003e04 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003dac:	4b1c      	ldr	r3, [pc, #112]	; (8003e20 <HAL_InitTick+0x8c>)
 8003dae:	681c      	ldr	r4, [r3, #0]
 8003db0:	4b1a      	ldr	r3, [pc, #104]	; (8003e1c <HAL_InitTick+0x88>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	0019      	movs	r1, r3
 8003db6:	23fa      	movs	r3, #250	; 0xfa
 8003db8:	0098      	lsls	r0, r3, #2
 8003dba:	f7fc f9bf 	bl	800013c <__udivsi3>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	0019      	movs	r1, r3
 8003dc2:	0020      	movs	r0, r4
 8003dc4:	f7fc f9ba 	bl	800013c <__udivsi3>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f000 f985 	bl	80040da <HAL_SYSTICK_Config>
 8003dd0:	1e03      	subs	r3, r0, #0
 8003dd2:	d112      	bne.n	8003dfa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d80a      	bhi.n	8003df0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	2301      	movs	r3, #1
 8003dde:	425b      	negs	r3, r3
 8003de0:	2200      	movs	r2, #0
 8003de2:	0018      	movs	r0, r3
 8003de4:	f000 f950 	bl	8004088 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003de8:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <HAL_InitTick+0x90>)
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	e00d      	b.n	8003e0c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003df0:	230f      	movs	r3, #15
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	e008      	b.n	8003e0c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003dfa:	230f      	movs	r3, #15
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	2201      	movs	r2, #1
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e003      	b.n	8003e0c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e04:	230f      	movs	r3, #15
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003e0c:	230f      	movs	r3, #15
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	781b      	ldrb	r3, [r3, #0]
}
 8003e12:	0018      	movs	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b005      	add	sp, #20
 8003e18:	bd90      	pop	{r4, r7, pc}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	20000014 	.word	0x20000014
 8003e20:	2000000c 	.word	0x2000000c
 8003e24:	20000010 	.word	0x20000010

08003e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <HAL_IncTick+0x1c>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	001a      	movs	r2, r3
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_IncTick+0x20>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	18d2      	adds	r2, r2, r3
 8003e38:	4b03      	ldr	r3, [pc, #12]	; (8003e48 <HAL_IncTick+0x20>)
 8003e3a:	601a      	str	r2, [r3, #0]
}
 8003e3c:	46c0      	nop			; (mov r8, r8)
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	20000014 	.word	0x20000014
 8003e48:	20000b08 	.word	0x20000b08

08003e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e50:	4b02      	ldr	r3, [pc, #8]	; (8003e5c <HAL_GetTick+0x10>)
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	20000b08 	.word	0x20000b08

08003e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e68:	f7ff fff0 	bl	8003e4c <HAL_GetTick>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3301      	adds	r3, #1
 8003e78:	d005      	beq.n	8003e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <HAL_Delay+0x44>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	001a      	movs	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	189b      	adds	r3, r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	f7ff ffe0 	bl	8003e4c <HAL_GetTick>
 8003e8c:	0002      	movs	r2, r0
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d8f7      	bhi.n	8003e88 <HAL_Delay+0x28>
  {
  }
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b004      	add	sp, #16
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	20000014 	.word	0x20000014

08003ea8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003eac:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <HAL_SuspendTick+0x18>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <HAL_SuspendTick+0x18>)
 8003eb2:	2102      	movs	r1, #2
 8003eb4:	438a      	bics	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]
}
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	e000e010 	.word	0xe000e010

08003ec4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003ec8:	4b04      	ldr	r3, [pc, #16]	; (8003edc <HAL_ResumeTick+0x18>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b03      	ldr	r3, [pc, #12]	; (8003edc <HAL_ResumeTick+0x18>)
 8003ece:	2102      	movs	r1, #2
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]
}
 8003ed4:	46c0      	nop			; (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	e000e010 	.word	0xe000e010

08003ee0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a06      	ldr	r2, [pc, #24]	; (8003f08 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]
}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	46bd      	mov	sp, r7
 8003efe:	b002      	add	sp, #8
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	40010000 	.word	0x40010000
 8003f08:	fffff9ff 	.word	0xfffff9ff

08003f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	0002      	movs	r2, r0
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f18:	1dfb      	adds	r3, r7, #7
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f1e:	d809      	bhi.n	8003f34 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f20:	1dfb      	adds	r3, r7, #7
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	001a      	movs	r2, r3
 8003f26:	231f      	movs	r3, #31
 8003f28:	401a      	ands	r2, r3
 8003f2a:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <__NVIC_EnableIRQ+0x30>)
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	4091      	lsls	r1, r2
 8003f30:	000a      	movs	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003f34:	46c0      	nop			; (mov r8, r8)
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	e000e100 	.word	0xe000e100

08003f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f40:	b590      	push	{r4, r7, lr}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	0002      	movs	r2, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	1dfb      	adds	r3, r7, #7
 8003f4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f4e:	1dfb      	adds	r3, r7, #7
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b7f      	cmp	r3, #127	; 0x7f
 8003f54:	d828      	bhi.n	8003fa8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f56:	4a2f      	ldr	r2, [pc, #188]	; (8004014 <__NVIC_SetPriority+0xd4>)
 8003f58:	1dfb      	adds	r3, r7, #7
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	b25b      	sxtb	r3, r3
 8003f5e:	089b      	lsrs	r3, r3, #2
 8003f60:	33c0      	adds	r3, #192	; 0xc0
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	589b      	ldr	r3, [r3, r2]
 8003f66:	1dfa      	adds	r2, r7, #7
 8003f68:	7812      	ldrb	r2, [r2, #0]
 8003f6a:	0011      	movs	r1, r2
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	400a      	ands	r2, r1
 8003f70:	00d2      	lsls	r2, r2, #3
 8003f72:	21ff      	movs	r1, #255	; 0xff
 8003f74:	4091      	lsls	r1, r2
 8003f76:	000a      	movs	r2, r1
 8003f78:	43d2      	mvns	r2, r2
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	019b      	lsls	r3, r3, #6
 8003f82:	22ff      	movs	r2, #255	; 0xff
 8003f84:	401a      	ands	r2, r3
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	4003      	ands	r3, r0
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f94:	481f      	ldr	r0, [pc, #124]	; (8004014 <__NVIC_SetPriority+0xd4>)
 8003f96:	1dfb      	adds	r3, r7, #7
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	b25b      	sxtb	r3, r3
 8003f9c:	089b      	lsrs	r3, r3, #2
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	33c0      	adds	r3, #192	; 0xc0
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003fa6:	e031      	b.n	800400c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fa8:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <__NVIC_SetPriority+0xd8>)
 8003faa:	1dfb      	adds	r3, r7, #7
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	0019      	movs	r1, r3
 8003fb0:	230f      	movs	r3, #15
 8003fb2:	400b      	ands	r3, r1
 8003fb4:	3b08      	subs	r3, #8
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	3306      	adds	r3, #6
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	18d3      	adds	r3, r2, r3
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	1dfa      	adds	r2, r7, #7
 8003fc4:	7812      	ldrb	r2, [r2, #0]
 8003fc6:	0011      	movs	r1, r2
 8003fc8:	2203      	movs	r2, #3
 8003fca:	400a      	ands	r2, r1
 8003fcc:	00d2      	lsls	r2, r2, #3
 8003fce:	21ff      	movs	r1, #255	; 0xff
 8003fd0:	4091      	lsls	r1, r2
 8003fd2:	000a      	movs	r2, r1
 8003fd4:	43d2      	mvns	r2, r2
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	019b      	lsls	r3, r3, #6
 8003fde:	22ff      	movs	r2, #255	; 0xff
 8003fe0:	401a      	ands	r2, r3
 8003fe2:	1dfb      	adds	r3, r7, #7
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	2303      	movs	r3, #3
 8003fea:	4003      	ands	r3, r0
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ff0:	4809      	ldr	r0, [pc, #36]	; (8004018 <__NVIC_SetPriority+0xd8>)
 8003ff2:	1dfb      	adds	r3, r7, #7
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	001c      	movs	r4, r3
 8003ff8:	230f      	movs	r3, #15
 8003ffa:	4023      	ands	r3, r4
 8003ffc:	3b08      	subs	r3, #8
 8003ffe:	089b      	lsrs	r3, r3, #2
 8004000:	430a      	orrs	r2, r1
 8004002:	3306      	adds	r3, #6
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	18c3      	adds	r3, r0, r3
 8004008:	3304      	adds	r3, #4
 800400a:	601a      	str	r2, [r3, #0]
}
 800400c:	46c0      	nop			; (mov r8, r8)
 800400e:	46bd      	mov	sp, r7
 8004010:	b003      	add	sp, #12
 8004012:	bd90      	pop	{r4, r7, pc}
 8004014:	e000e100 	.word	0xe000e100
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004020:	f3bf 8f4f 	dsb	sy
}
 8004024:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004026:	4b04      	ldr	r3, [pc, #16]	; (8004038 <__NVIC_SystemReset+0x1c>)
 8004028:	4a04      	ldr	r2, [pc, #16]	; (800403c <__NVIC_SystemReset+0x20>)
 800402a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800402c:	f3bf 8f4f 	dsb	sy
}
 8004030:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	e7fd      	b.n	8004032 <__NVIC_SystemReset+0x16>
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	e000ed00 	.word	0xe000ed00
 800403c:	05fa0004 	.word	0x05fa0004

08004040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	1e5a      	subs	r2, r3, #1
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	045b      	lsls	r3, r3, #17
 8004050:	429a      	cmp	r2, r3
 8004052:	d301      	bcc.n	8004058 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004054:	2301      	movs	r3, #1
 8004056:	e010      	b.n	800407a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004058:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <SysTick_Config+0x44>)
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	3a01      	subs	r2, #1
 800405e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004060:	2301      	movs	r3, #1
 8004062:	425b      	negs	r3, r3
 8004064:	2103      	movs	r1, #3
 8004066:	0018      	movs	r0, r3
 8004068:	f7ff ff6a 	bl	8003f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800406c:	4b05      	ldr	r3, [pc, #20]	; (8004084 <SysTick_Config+0x44>)
 800406e:	2200      	movs	r2, #0
 8004070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004072:	4b04      	ldr	r3, [pc, #16]	; (8004084 <SysTick_Config+0x44>)
 8004074:	2207      	movs	r2, #7
 8004076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004078:	2300      	movs	r3, #0
}
 800407a:	0018      	movs	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	b002      	add	sp, #8
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	e000e010 	.word	0xe000e010

08004088 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
 8004092:	210f      	movs	r1, #15
 8004094:	187b      	adds	r3, r7, r1
 8004096:	1c02      	adds	r2, r0, #0
 8004098:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	187b      	adds	r3, r7, r1
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	b25b      	sxtb	r3, r3
 80040a2:	0011      	movs	r1, r2
 80040a4:	0018      	movs	r0, r3
 80040a6:	f7ff ff4b 	bl	8003f40 <__NVIC_SetPriority>
}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	46bd      	mov	sp, r7
 80040ae:	b004      	add	sp, #16
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	0002      	movs	r2, r0
 80040ba:	1dfb      	adds	r3, r7, #7
 80040bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040be:	1dfb      	adds	r3, r7, #7
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	b25b      	sxtb	r3, r3
 80040c4:	0018      	movs	r0, r3
 80040c6:	f7ff ff21 	bl	8003f0c <__NVIC_EnableIRQ>
}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b002      	add	sp, #8
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80040d6:	f7ff ffa1 	bl	800401c <__NVIC_SystemReset>

080040da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7ff ffab 	bl	8004040 <SysTick_Config>
 80040ea:	0003      	movs	r3, r0
}
 80040ec:	0018      	movs	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b002      	add	sp, #8
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004102:	e14d      	b.n	80043a0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2101      	movs	r1, #1
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4091      	lsls	r1, r2
 800410e:	000a      	movs	r2, r1
 8004110:	4013      	ands	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d100      	bne.n	800411c <HAL_GPIO_Init+0x28>
 800411a:	e13e      	b.n	800439a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2203      	movs	r2, #3
 8004122:	4013      	ands	r3, r2
 8004124:	2b01      	cmp	r3, #1
 8004126:	d005      	beq.n	8004134 <HAL_GPIO_Init+0x40>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2203      	movs	r2, #3
 800412e:	4013      	ands	r3, r2
 8004130:	2b02      	cmp	r3, #2
 8004132:	d130      	bne.n	8004196 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	2203      	movs	r2, #3
 8004140:	409a      	lsls	r2, r3
 8004142:	0013      	movs	r3, r2
 8004144:	43da      	mvns	r2, r3
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4013      	ands	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	409a      	lsls	r2, r3
 8004156:	0013      	movs	r3, r2
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800416a:	2201      	movs	r2, #1
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	409a      	lsls	r2, r3
 8004170:	0013      	movs	r3, r2
 8004172:	43da      	mvns	r2, r3
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4013      	ands	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	2201      	movs	r2, #1
 8004182:	401a      	ands	r2, r3
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	409a      	lsls	r2, r3
 8004188:	0013      	movs	r3, r2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2203      	movs	r2, #3
 800419c:	4013      	ands	r3, r2
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d017      	beq.n	80041d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	2203      	movs	r2, #3
 80041ae:	409a      	lsls	r2, r3
 80041b0:	0013      	movs	r3, r2
 80041b2:	43da      	mvns	r2, r3
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4013      	ands	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	409a      	lsls	r2, r3
 80041c4:	0013      	movs	r3, r2
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2203      	movs	r2, #3
 80041d8:	4013      	ands	r3, r2
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d123      	bne.n	8004226 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	08da      	lsrs	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3208      	adds	r2, #8
 80041e6:	0092      	lsls	r2, r2, #2
 80041e8:	58d3      	ldr	r3, [r2, r3]
 80041ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2207      	movs	r2, #7
 80041f0:	4013      	ands	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	220f      	movs	r2, #15
 80041f6:	409a      	lsls	r2, r3
 80041f8:	0013      	movs	r3, r2
 80041fa:	43da      	mvns	r2, r3
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4013      	ands	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	691a      	ldr	r2, [r3, #16]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2107      	movs	r1, #7
 800420a:	400b      	ands	r3, r1
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	409a      	lsls	r2, r3
 8004210:	0013      	movs	r3, r2
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	08da      	lsrs	r2, r3, #3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3208      	adds	r2, #8
 8004220:	0092      	lsls	r2, r2, #2
 8004222:	6939      	ldr	r1, [r7, #16]
 8004224:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	2203      	movs	r2, #3
 8004232:	409a      	lsls	r2, r3
 8004234:	0013      	movs	r3, r2
 8004236:	43da      	mvns	r2, r3
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4013      	ands	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2203      	movs	r2, #3
 8004244:	401a      	ands	r2, r3
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	409a      	lsls	r2, r3
 800424c:	0013      	movs	r3, r2
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	23c0      	movs	r3, #192	; 0xc0
 8004260:	029b      	lsls	r3, r3, #10
 8004262:	4013      	ands	r3, r2
 8004264:	d100      	bne.n	8004268 <HAL_GPIO_Init+0x174>
 8004266:	e098      	b.n	800439a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004268:	4a53      	ldr	r2, [pc, #332]	; (80043b8 <HAL_GPIO_Init+0x2c4>)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	089b      	lsrs	r3, r3, #2
 800426e:	3318      	adds	r3, #24
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	589b      	ldr	r3, [r3, r2]
 8004274:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2203      	movs	r2, #3
 800427a:	4013      	ands	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	220f      	movs	r2, #15
 8004280:	409a      	lsls	r2, r3
 8004282:	0013      	movs	r3, r2
 8004284:	43da      	mvns	r2, r3
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	4013      	ands	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	23a0      	movs	r3, #160	; 0xa0
 8004290:	05db      	lsls	r3, r3, #23
 8004292:	429a      	cmp	r2, r3
 8004294:	d019      	beq.n	80042ca <HAL_GPIO_Init+0x1d6>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a48      	ldr	r2, [pc, #288]	; (80043bc <HAL_GPIO_Init+0x2c8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <HAL_GPIO_Init+0x1d2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a47      	ldr	r2, [pc, #284]	; (80043c0 <HAL_GPIO_Init+0x2cc>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00d      	beq.n	80042c2 <HAL_GPIO_Init+0x1ce>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a46      	ldr	r2, [pc, #280]	; (80043c4 <HAL_GPIO_Init+0x2d0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d007      	beq.n	80042be <HAL_GPIO_Init+0x1ca>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a45      	ldr	r2, [pc, #276]	; (80043c8 <HAL_GPIO_Init+0x2d4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <HAL_GPIO_Init+0x1c6>
 80042b6:	2304      	movs	r3, #4
 80042b8:	e008      	b.n	80042cc <HAL_GPIO_Init+0x1d8>
 80042ba:	2305      	movs	r3, #5
 80042bc:	e006      	b.n	80042cc <HAL_GPIO_Init+0x1d8>
 80042be:	2303      	movs	r3, #3
 80042c0:	e004      	b.n	80042cc <HAL_GPIO_Init+0x1d8>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e002      	b.n	80042cc <HAL_GPIO_Init+0x1d8>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <HAL_GPIO_Init+0x1d8>
 80042ca:	2300      	movs	r3, #0
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	2103      	movs	r1, #3
 80042d0:	400a      	ands	r2, r1
 80042d2:	00d2      	lsls	r2, r2, #3
 80042d4:	4093      	lsls	r3, r2
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80042dc:	4936      	ldr	r1, [pc, #216]	; (80043b8 <HAL_GPIO_Init+0x2c4>)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	089b      	lsrs	r3, r3, #2
 80042e2:	3318      	adds	r3, #24
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042ea:	4b33      	ldr	r3, [pc, #204]	; (80043b8 <HAL_GPIO_Init+0x2c4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	43da      	mvns	r2, r3
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4013      	ands	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	2380      	movs	r3, #128	; 0x80
 8004300:	035b      	lsls	r3, r3, #13
 8004302:	4013      	ands	r3, r2
 8004304:	d003      	beq.n	800430e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800430e:	4b2a      	ldr	r3, [pc, #168]	; (80043b8 <HAL_GPIO_Init+0x2c4>)
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004314:	4b28      	ldr	r3, [pc, #160]	; (80043b8 <HAL_GPIO_Init+0x2c4>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	43da      	mvns	r2, r3
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4013      	ands	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	039b      	lsls	r3, r3, #14
 800432c:	4013      	ands	r3, r2
 800432e:	d003      	beq.n	8004338 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004338:	4b1f      	ldr	r3, [pc, #124]	; (80043b8 <HAL_GPIO_Init+0x2c4>)
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800433e:	4a1e      	ldr	r2, [pc, #120]	; (80043b8 <HAL_GPIO_Init+0x2c4>)
 8004340:	2384      	movs	r3, #132	; 0x84
 8004342:	58d3      	ldr	r3, [r2, r3]
 8004344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	43da      	mvns	r2, r3
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4013      	ands	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	029b      	lsls	r3, r3, #10
 8004358:	4013      	ands	r3, r2
 800435a:	d003      	beq.n	8004364 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004364:	4914      	ldr	r1, [pc, #80]	; (80043b8 <HAL_GPIO_Init+0x2c4>)
 8004366:	2284      	movs	r2, #132	; 0x84
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800436c:	4a12      	ldr	r2, [pc, #72]	; (80043b8 <HAL_GPIO_Init+0x2c4>)
 800436e:	2380      	movs	r3, #128	; 0x80
 8004370:	58d3      	ldr	r3, [r2, r3]
 8004372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	43da      	mvns	r2, r3
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4013      	ands	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	2380      	movs	r3, #128	; 0x80
 8004384:	025b      	lsls	r3, r3, #9
 8004386:	4013      	ands	r3, r2
 8004388:	d003      	beq.n	8004392 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004392:	4909      	ldr	r1, [pc, #36]	; (80043b8 <HAL_GPIO_Init+0x2c4>)
 8004394:	2280      	movs	r2, #128	; 0x80
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	3301      	adds	r3, #1
 800439e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	40da      	lsrs	r2, r3
 80043a8:	1e13      	subs	r3, r2, #0
 80043aa:	d000      	beq.n	80043ae <HAL_GPIO_Init+0x2ba>
 80043ac:	e6aa      	b.n	8004104 <HAL_GPIO_Init+0x10>
  }
}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	46c0      	nop			; (mov r8, r8)
 80043b2:	46bd      	mov	sp, r7
 80043b4:	b006      	add	sp, #24
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40021800 	.word	0x40021800
 80043bc:	50000400 	.word	0x50000400
 80043c0:	50000800 	.word	0x50000800
 80043c4:	50000c00 	.word	0x50000c00
 80043c8:	50001000 	.word	0x50001000

080043cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80043da:	e0ba      	b.n	8004552 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80043dc:	2201      	movs	r2, #1
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	409a      	lsls	r2, r3
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	4013      	ands	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d100      	bne.n	80043f0 <HAL_GPIO_DeInit+0x24>
 80043ee:	e0ad      	b.n	800454c <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80043f0:	4a5d      	ldr	r2, [pc, #372]	; (8004568 <HAL_GPIO_DeInit+0x19c>)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	089b      	lsrs	r3, r3, #2
 80043f6:	3318      	adds	r3, #24
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	589b      	ldr	r3, [r3, r2]
 80043fc:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2203      	movs	r2, #3
 8004402:	4013      	ands	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	220f      	movs	r2, #15
 8004408:	409a      	lsls	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4013      	ands	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	23a0      	movs	r3, #160	; 0xa0
 8004414:	05db      	lsls	r3, r3, #23
 8004416:	429a      	cmp	r2, r3
 8004418:	d019      	beq.n	800444e <HAL_GPIO_DeInit+0x82>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a53      	ldr	r2, [pc, #332]	; (800456c <HAL_GPIO_DeInit+0x1a0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d013      	beq.n	800444a <HAL_GPIO_DeInit+0x7e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a52      	ldr	r2, [pc, #328]	; (8004570 <HAL_GPIO_DeInit+0x1a4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00d      	beq.n	8004446 <HAL_GPIO_DeInit+0x7a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a51      	ldr	r2, [pc, #324]	; (8004574 <HAL_GPIO_DeInit+0x1a8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d007      	beq.n	8004442 <HAL_GPIO_DeInit+0x76>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a50      	ldr	r2, [pc, #320]	; (8004578 <HAL_GPIO_DeInit+0x1ac>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d101      	bne.n	800443e <HAL_GPIO_DeInit+0x72>
 800443a:	2304      	movs	r3, #4
 800443c:	e008      	b.n	8004450 <HAL_GPIO_DeInit+0x84>
 800443e:	2305      	movs	r3, #5
 8004440:	e006      	b.n	8004450 <HAL_GPIO_DeInit+0x84>
 8004442:	2303      	movs	r3, #3
 8004444:	e004      	b.n	8004450 <HAL_GPIO_DeInit+0x84>
 8004446:	2302      	movs	r3, #2
 8004448:	e002      	b.n	8004450 <HAL_GPIO_DeInit+0x84>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <HAL_GPIO_DeInit+0x84>
 800444e:	2300      	movs	r3, #0
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	2103      	movs	r1, #3
 8004454:	400a      	ands	r2, r1
 8004456:	00d2      	lsls	r2, r2, #3
 8004458:	4093      	lsls	r3, r2
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	429a      	cmp	r2, r3
 800445e:	d136      	bne.n	80044ce <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004460:	4a41      	ldr	r2, [pc, #260]	; (8004568 <HAL_GPIO_DeInit+0x19c>)
 8004462:	2380      	movs	r3, #128	; 0x80
 8004464:	58d3      	ldr	r3, [r2, r3]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	43d2      	mvns	r2, r2
 800446a:	493f      	ldr	r1, [pc, #252]	; (8004568 <HAL_GPIO_DeInit+0x19c>)
 800446c:	4013      	ands	r3, r2
 800446e:	2280      	movs	r2, #128	; 0x80
 8004470:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8004472:	4a3d      	ldr	r2, [pc, #244]	; (8004568 <HAL_GPIO_DeInit+0x19c>)
 8004474:	2384      	movs	r3, #132	; 0x84
 8004476:	58d3      	ldr	r3, [r2, r3]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	43d2      	mvns	r2, r2
 800447c:	493a      	ldr	r1, [pc, #232]	; (8004568 <HAL_GPIO_DeInit+0x19c>)
 800447e:	4013      	ands	r3, r2
 8004480:	2284      	movs	r2, #132	; 0x84
 8004482:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004484:	4b38      	ldr	r3, [pc, #224]	; (8004568 <HAL_GPIO_DeInit+0x19c>)
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	43d9      	mvns	r1, r3
 800448c:	4b36      	ldr	r3, [pc, #216]	; (8004568 <HAL_GPIO_DeInit+0x19c>)
 800448e:	400a      	ands	r2, r1
 8004490:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004492:	4b35      	ldr	r3, [pc, #212]	; (8004568 <HAL_GPIO_DeInit+0x19c>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	43d9      	mvns	r1, r3
 800449a:	4b33      	ldr	r3, [pc, #204]	; (8004568 <HAL_GPIO_DeInit+0x19c>)
 800449c:	400a      	ands	r2, r1
 800449e:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2203      	movs	r2, #3
 80044a4:	4013      	ands	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	220f      	movs	r2, #15
 80044aa:	409a      	lsls	r2, r3
 80044ac:	0013      	movs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80044b0:	4a2d      	ldr	r2, [pc, #180]	; (8004568 <HAL_GPIO_DeInit+0x19c>)
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	089b      	lsrs	r3, r3, #2
 80044b6:	3318      	adds	r3, #24
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	589a      	ldr	r2, [r3, r2]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	43d9      	mvns	r1, r3
 80044c0:	4829      	ldr	r0, [pc, #164]	; (8004568 <HAL_GPIO_DeInit+0x19c>)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	089b      	lsrs	r3, r3, #2
 80044c6:	400a      	ands	r2, r1
 80044c8:	3318      	adds	r3, #24
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	2103      	movs	r1, #3
 80044d8:	4099      	lsls	r1, r3
 80044da:	000b      	movs	r3, r1
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	08da      	lsrs	r2, r3, #3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	3208      	adds	r2, #8
 80044ea:	0092      	lsls	r2, r2, #2
 80044ec:	58d3      	ldr	r3, [r2, r3]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	2107      	movs	r1, #7
 80044f2:	400a      	ands	r2, r1
 80044f4:	0092      	lsls	r2, r2, #2
 80044f6:	210f      	movs	r1, #15
 80044f8:	4091      	lsls	r1, r2
 80044fa:	000a      	movs	r2, r1
 80044fc:	43d1      	mvns	r1, r2
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	08d2      	lsrs	r2, r2, #3
 8004502:	4019      	ands	r1, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3208      	adds	r2, #8
 8004508:	0092      	lsls	r2, r2, #2
 800450a:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	0052      	lsls	r2, r2, #1
 8004514:	2103      	movs	r1, #3
 8004516:	4091      	lsls	r1, r2
 8004518:	000a      	movs	r2, r1
 800451a:	43d2      	mvns	r2, r2
 800451c:	401a      	ands	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2101      	movs	r1, #1
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4091      	lsls	r1, r2
 800452c:	000a      	movs	r2, r1
 800452e:	43d2      	mvns	r2, r2
 8004530:	401a      	ands	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	0052      	lsls	r2, r2, #1
 800453e:	2103      	movs	r1, #3
 8004540:	4091      	lsls	r1, r2
 8004542:	000a      	movs	r2, r1
 8004544:	43d2      	mvns	r2, r2
 8004546:	401a      	ands	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	3301      	adds	r3, #1
 8004550:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	40da      	lsrs	r2, r3
 8004558:	1e13      	subs	r3, r2, #0
 800455a:	d000      	beq.n	800455e <HAL_GPIO_DeInit+0x192>
 800455c:	e73e      	b.n	80043dc <HAL_GPIO_DeInit+0x10>
  }
}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	46c0      	nop			; (mov r8, r8)
 8004562:	46bd      	mov	sp, r7
 8004564:	b006      	add	sp, #24
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40021800 	.word	0x40021800
 800456c:	50000400 	.word	0x50000400
 8004570:	50000800 	.word	0x50000800
 8004574:	50000c00 	.word	0x50000c00
 8004578:	50001000 	.word	0x50001000

0800457c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	000a      	movs	r2, r1
 8004586:	1cbb      	adds	r3, r7, #2
 8004588:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	1cba      	adds	r2, r7, #2
 8004590:	8812      	ldrh	r2, [r2, #0]
 8004592:	4013      	ands	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004596:	230f      	movs	r3, #15
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	2201      	movs	r2, #1
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	e003      	b.n	80045a8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045a0:	230f      	movs	r3, #15
 80045a2:	18fb      	adds	r3, r7, r3
 80045a4:	2200      	movs	r2, #0
 80045a6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80045a8:	230f      	movs	r3, #15
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	781b      	ldrb	r3, [r3, #0]
}
 80045ae:	0018      	movs	r0, r3
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b004      	add	sp, #16
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	0008      	movs	r0, r1
 80045c0:	0011      	movs	r1, r2
 80045c2:	1cbb      	adds	r3, r7, #2
 80045c4:	1c02      	adds	r2, r0, #0
 80045c6:	801a      	strh	r2, [r3, #0]
 80045c8:	1c7b      	adds	r3, r7, #1
 80045ca:	1c0a      	adds	r2, r1, #0
 80045cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045ce:	1c7b      	adds	r3, r7, #1
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d004      	beq.n	80045e0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045d6:	1cbb      	adds	r3, r7, #2
 80045d8:	881a      	ldrh	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045de:	e003      	b.n	80045e8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045e0:	1cbb      	adds	r3, r7, #2
 80045e2:	881a      	ldrh	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045e8:	46c0      	nop			; (mov r8, r8)
 80045ea:	46bd      	mov	sp, r7
 80045ec:	b002      	add	sp, #8
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	0002      	movs	r2, r0
 80045f8:	1dbb      	adds	r3, r7, #6
 80045fa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80045fc:	4b10      	ldr	r3, [pc, #64]	; (8004640 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	1dba      	adds	r2, r7, #6
 8004602:	8812      	ldrh	r2, [r2, #0]
 8004604:	4013      	ands	r3, r2
 8004606:	d008      	beq.n	800461a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004608:	4b0d      	ldr	r3, [pc, #52]	; (8004640 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800460a:	1dba      	adds	r2, r7, #6
 800460c:	8812      	ldrh	r2, [r2, #0]
 800460e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004610:	1dbb      	adds	r3, r7, #6
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	0018      	movs	r0, r3
 8004616:	f7fe fff7 	bl	8003608 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800461a:	4b09      	ldr	r3, [pc, #36]	; (8004640 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	1dba      	adds	r2, r7, #6
 8004620:	8812      	ldrh	r2, [r2, #0]
 8004622:	4013      	ands	r3, r2
 8004624:	d008      	beq.n	8004638 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004626:	4b06      	ldr	r3, [pc, #24]	; (8004640 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004628:	1dba      	adds	r2, r7, #6
 800462a:	8812      	ldrh	r2, [r2, #0]
 800462c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800462e:	1dbb      	adds	r3, r7, #6
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	0018      	movs	r0, r3
 8004634:	f000 f806 	bl	8004644 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004638:	46c0      	nop			; (mov r8, r8)
 800463a:	46bd      	mov	sp, r7
 800463c:	b002      	add	sp, #8
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40021800 	.word	0x40021800

08004644 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	0002      	movs	r2, r0
 800464c:	1dbb      	adds	r3, r7, #6
 800464e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004650:	46c0      	nop			; (mov r8, r8)
 8004652:	46bd      	mov	sp, r7
 8004654:	b002      	add	sp, #8
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <HAL_PWR_EnableBkUpAccess+0x18>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b03      	ldr	r3, [pc, #12]	; (8004670 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004662:	2180      	movs	r1, #128	; 0x80
 8004664:	0049      	lsls	r1, r1, #1
 8004666:	430a      	orrs	r2, r1
 8004668:	601a      	str	r2, [r3, #0]
}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40007000 	.word	0x40007000

08004674 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	000a      	movs	r2, r1
 800467e:	1cfb      	adds	r3, r7, #3
 8004680:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d009      	beq.n	800469c <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004688:	4b14      	ldr	r3, [pc, #80]	; (80046dc <HAL_PWR_EnterSTOPMode+0x68>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2207      	movs	r2, #7
 800468e:	4393      	bics	r3, r2
 8004690:	001a      	movs	r2, r3
 8004692:	4b12      	ldr	r3, [pc, #72]	; (80046dc <HAL_PWR_EnterSTOPMode+0x68>)
 8004694:	2101      	movs	r1, #1
 8004696:	430a      	orrs	r2, r1
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	e005      	b.n	80046a8 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 800469c:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <HAL_PWR_EnterSTOPMode+0x68>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <HAL_PWR_EnterSTOPMode+0x68>)
 80046a2:	2107      	movs	r1, #7
 80046a4:	438a      	bics	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80046a8:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <HAL_PWR_EnterSTOPMode+0x6c>)
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <HAL_PWR_EnterSTOPMode+0x6c>)
 80046ae:	2104      	movs	r1, #4
 80046b0:	430a      	orrs	r2, r1
 80046b2:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80046b4:	1cfb      	adds	r3, r7, #3
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80046bc:	bf30      	wfi
 80046be:	e002      	b.n	80046c6 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80046c0:	bf40      	sev
    __WFE();
 80046c2:	bf20      	wfe
    __WFE();
 80046c4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80046c6:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <HAL_PWR_EnterSTOPMode+0x6c>)
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <HAL_PWR_EnterSTOPMode+0x6c>)
 80046cc:	2104      	movs	r1, #4
 80046ce:	438a      	bics	r2, r1
 80046d0:	611a      	str	r2, [r3, #16]
}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	46bd      	mov	sp, r7
 80046d6:	b002      	add	sp, #8
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	40007000 	.word	0x40007000
 80046e0:	e000ed00 	.word	0xe000ed00

080046e4 <HAL_PWR_EnterSTANDBYMode>:
  *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @note   Sram content can be kept setting RRS through HAL_PWREx_EnableSRAMRetention()
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2207      	movs	r2, #7
 80046ee:	4393      	bics	r3, r2
 80046f0:	001a      	movs	r2, r3
 80046f2:	4b07      	ldr	r3, [pc, #28]	; (8004710 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80046f4:	2103      	movs	r1, #3
 80046f6:	430a      	orrs	r2, r1
 80046f8:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	4b05      	ldr	r3, [pc, #20]	; (8004714 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004700:	2104      	movs	r1, #4
 8004702:	430a      	orrs	r2, r1
 8004704:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8004706:	bf30      	wfi
}
 8004708:	46c0      	nop			; (mov r8, r8)
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	40007000 	.word	0x40007000
 8004714:	e000ed00 	.word	0xe000ed00

08004718 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004720:	4b19      	ldr	r3, [pc, #100]	; (8004788 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a19      	ldr	r2, [pc, #100]	; (800478c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004726:	4013      	ands	r3, r2
 8004728:	0019      	movs	r1, r3
 800472a:	4b17      	ldr	r3, [pc, #92]	; (8004788 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	430a      	orrs	r2, r1
 8004730:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	2380      	movs	r3, #128	; 0x80
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	429a      	cmp	r2, r3
 800473a:	d11f      	bne.n	800477c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800473c:	4b14      	ldr	r3, [pc, #80]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	0013      	movs	r3, r2
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	189b      	adds	r3, r3, r2
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	4912      	ldr	r1, [pc, #72]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800474a:	0018      	movs	r0, r3
 800474c:	f7fb fcf6 	bl	800013c <__udivsi3>
 8004750:	0003      	movs	r3, r0
 8004752:	3301      	adds	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004756:	e008      	b.n	800476a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3b01      	subs	r3, #1
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e001      	b.n	800476a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e009      	b.n	800477e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800476a:	4b07      	ldr	r3, [pc, #28]	; (8004788 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800476c:	695a      	ldr	r2, [r3, #20]
 800476e:	2380      	movs	r3, #128	; 0x80
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	401a      	ands	r2, r3
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	429a      	cmp	r2, r3
 800477a:	d0ed      	beq.n	8004758 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	0018      	movs	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	b004      	add	sp, #16
 8004784:	bd80      	pop	{r7, pc}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	40007000 	.word	0x40007000
 800478c:	fffff9ff 	.word	0xfffff9ff
 8004790:	2000000c 	.word	0x2000000c
 8004794:	000f4240 	.word	0x000f4240

08004798 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800479c:	4b03      	ldr	r3, [pc, #12]	; (80047ac <LL_RCC_GetAPB1Prescaler+0x14>)
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	23e0      	movs	r3, #224	; 0xe0
 80047a2:	01db      	lsls	r3, r3, #7
 80047a4:	4013      	ands	r3, r2
}
 80047a6:	0018      	movs	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40021000 	.word	0x40021000

080047b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d102      	bne.n	80047c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	f000 fb50 	bl	8004e64 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2201      	movs	r2, #1
 80047ca:	4013      	ands	r3, r2
 80047cc:	d100      	bne.n	80047d0 <HAL_RCC_OscConfig+0x20>
 80047ce:	e07c      	b.n	80048ca <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047d0:	4bc3      	ldr	r3, [pc, #780]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	2238      	movs	r2, #56	; 0x38
 80047d6:	4013      	ands	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047da:	4bc1      	ldr	r3, [pc, #772]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2203      	movs	r2, #3
 80047e0:	4013      	ands	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b10      	cmp	r3, #16
 80047e8:	d102      	bne.n	80047f0 <HAL_RCC_OscConfig+0x40>
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d002      	beq.n	80047f6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d10b      	bne.n	800480e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f6:	4bba      	ldr	r3, [pc, #744]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	2380      	movs	r3, #128	; 0x80
 80047fc:	029b      	lsls	r3, r3, #10
 80047fe:	4013      	ands	r3, r2
 8004800:	d062      	beq.n	80048c8 <HAL_RCC_OscConfig+0x118>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d15e      	bne.n	80048c8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e32a      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	025b      	lsls	r3, r3, #9
 8004816:	429a      	cmp	r2, r3
 8004818:	d107      	bne.n	800482a <HAL_RCC_OscConfig+0x7a>
 800481a:	4bb1      	ldr	r3, [pc, #708]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4bb0      	ldr	r3, [pc, #704]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004820:	2180      	movs	r1, #128	; 0x80
 8004822:	0249      	lsls	r1, r1, #9
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e020      	b.n	800486c <HAL_RCC_OscConfig+0xbc>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	23a0      	movs	r3, #160	; 0xa0
 8004830:	02db      	lsls	r3, r3, #11
 8004832:	429a      	cmp	r2, r3
 8004834:	d10e      	bne.n	8004854 <HAL_RCC_OscConfig+0xa4>
 8004836:	4baa      	ldr	r3, [pc, #680]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4ba9      	ldr	r3, [pc, #676]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 800483c:	2180      	movs	r1, #128	; 0x80
 800483e:	02c9      	lsls	r1, r1, #11
 8004840:	430a      	orrs	r2, r1
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	4ba6      	ldr	r3, [pc, #664]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4ba5      	ldr	r3, [pc, #660]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 800484a:	2180      	movs	r1, #128	; 0x80
 800484c:	0249      	lsls	r1, r1, #9
 800484e:	430a      	orrs	r2, r1
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e00b      	b.n	800486c <HAL_RCC_OscConfig+0xbc>
 8004854:	4ba2      	ldr	r3, [pc, #648]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4ba1      	ldr	r3, [pc, #644]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 800485a:	49a2      	ldr	r1, [pc, #648]	; (8004ae4 <HAL_RCC_OscConfig+0x334>)
 800485c:	400a      	ands	r2, r1
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	4b9f      	ldr	r3, [pc, #636]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4b9e      	ldr	r3, [pc, #632]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004866:	49a0      	ldr	r1, [pc, #640]	; (8004ae8 <HAL_RCC_OscConfig+0x338>)
 8004868:	400a      	ands	r2, r1
 800486a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d014      	beq.n	800489e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7ff faea 	bl	8003e4c <HAL_GetTick>
 8004878:	0003      	movs	r3, r0
 800487a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800487e:	f7ff fae5 	bl	8003e4c <HAL_GetTick>
 8004882:	0002      	movs	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b64      	cmp	r3, #100	; 0x64
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e2e9      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004890:	4b93      	ldr	r3, [pc, #588]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	2380      	movs	r3, #128	; 0x80
 8004896:	029b      	lsls	r3, r3, #10
 8004898:	4013      	ands	r3, r2
 800489a:	d0f0      	beq.n	800487e <HAL_RCC_OscConfig+0xce>
 800489c:	e015      	b.n	80048ca <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489e:	f7ff fad5 	bl	8003e4c <HAL_GetTick>
 80048a2:	0003      	movs	r3, r0
 80048a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a8:	f7ff fad0 	bl	8003e4c <HAL_GetTick>
 80048ac:	0002      	movs	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b64      	cmp	r3, #100	; 0x64
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e2d4      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ba:	4b89      	ldr	r3, [pc, #548]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	029b      	lsls	r3, r3, #10
 80048c2:	4013      	ands	r3, r2
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0xf8>
 80048c6:	e000      	b.n	80048ca <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2202      	movs	r2, #2
 80048d0:	4013      	ands	r3, r2
 80048d2:	d100      	bne.n	80048d6 <HAL_RCC_OscConfig+0x126>
 80048d4:	e099      	b.n	8004a0a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d6:	4b82      	ldr	r3, [pc, #520]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2238      	movs	r2, #56	; 0x38
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048e0:	4b7f      	ldr	r3, [pc, #508]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2203      	movs	r2, #3
 80048e6:	4013      	ands	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d102      	bne.n	80048f6 <HAL_RCC_OscConfig+0x146>
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d002      	beq.n	80048fc <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d135      	bne.n	8004968 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048fc:	4b78      	ldr	r3, [pc, #480]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	4013      	ands	r3, r2
 8004906:	d005      	beq.n	8004914 <HAL_RCC_OscConfig+0x164>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e2a7      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004914:	4b72      	ldr	r3, [pc, #456]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	4a74      	ldr	r2, [pc, #464]	; (8004aec <HAL_RCC_OscConfig+0x33c>)
 800491a:	4013      	ands	r3, r2
 800491c:	0019      	movs	r1, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	021a      	lsls	r2, r3, #8
 8004924:	4b6e      	ldr	r3, [pc, #440]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d112      	bne.n	8004956 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004930:	4b6b      	ldr	r3, [pc, #428]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a6e      	ldr	r2, [pc, #440]	; (8004af0 <HAL_RCC_OscConfig+0x340>)
 8004936:	4013      	ands	r3, r2
 8004938:	0019      	movs	r1, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	4b68      	ldr	r3, [pc, #416]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004940:	430a      	orrs	r2, r1
 8004942:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004944:	4b66      	ldr	r3, [pc, #408]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	0adb      	lsrs	r3, r3, #11
 800494a:	2207      	movs	r2, #7
 800494c:	4013      	ands	r3, r2
 800494e:	4a69      	ldr	r2, [pc, #420]	; (8004af4 <HAL_RCC_OscConfig+0x344>)
 8004950:	40da      	lsrs	r2, r3
 8004952:	4b69      	ldr	r3, [pc, #420]	; (8004af8 <HAL_RCC_OscConfig+0x348>)
 8004954:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004956:	4b69      	ldr	r3, [pc, #420]	; (8004afc <HAL_RCC_OscConfig+0x34c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	0018      	movs	r0, r3
 800495c:	f7ff fa1a 	bl	8003d94 <HAL_InitTick>
 8004960:	1e03      	subs	r3, r0, #0
 8004962:	d051      	beq.n	8004a08 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e27d      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d030      	beq.n	80049d2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004970:	4b5b      	ldr	r3, [pc, #364]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a5e      	ldr	r2, [pc, #376]	; (8004af0 <HAL_RCC_OscConfig+0x340>)
 8004976:	4013      	ands	r3, r2
 8004978:	0019      	movs	r1, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691a      	ldr	r2, [r3, #16]
 800497e:	4b58      	ldr	r3, [pc, #352]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004980:	430a      	orrs	r2, r1
 8004982:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004984:	4b56      	ldr	r3, [pc, #344]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	4b55      	ldr	r3, [pc, #340]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 800498a:	2180      	movs	r1, #128	; 0x80
 800498c:	0049      	lsls	r1, r1, #1
 800498e:	430a      	orrs	r2, r1
 8004990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7ff fa5b 	bl	8003e4c <HAL_GetTick>
 8004996:	0003      	movs	r3, r0
 8004998:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800499c:	f7ff fa56 	bl	8003e4c <HAL_GetTick>
 80049a0:	0002      	movs	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e25a      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049ae:	4b4c      	ldr	r3, [pc, #304]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	2380      	movs	r3, #128	; 0x80
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4013      	ands	r3, r2
 80049b8:	d0f0      	beq.n	800499c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ba:	4b49      	ldr	r3, [pc, #292]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	4a4b      	ldr	r2, [pc, #300]	; (8004aec <HAL_RCC_OscConfig+0x33c>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	0019      	movs	r1, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	021a      	lsls	r2, r3, #8
 80049ca:	4b45      	ldr	r3, [pc, #276]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 80049cc:	430a      	orrs	r2, r1
 80049ce:	605a      	str	r2, [r3, #4]
 80049d0:	e01b      	b.n	8004a0a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80049d2:	4b43      	ldr	r3, [pc, #268]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4b42      	ldr	r3, [pc, #264]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 80049d8:	4949      	ldr	r1, [pc, #292]	; (8004b00 <HAL_RCC_OscConfig+0x350>)
 80049da:	400a      	ands	r2, r1
 80049dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049de:	f7ff fa35 	bl	8003e4c <HAL_GetTick>
 80049e2:	0003      	movs	r3, r0
 80049e4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e8:	f7ff fa30 	bl	8003e4c <HAL_GetTick>
 80049ec:	0002      	movs	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e234      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049fa:	4b39      	ldr	r3, [pc, #228]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	2380      	movs	r3, #128	; 0x80
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	4013      	ands	r3, r2
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x238>
 8004a06:	e000      	b.n	8004a0a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a08:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2208      	movs	r2, #8
 8004a10:	4013      	ands	r3, r2
 8004a12:	d047      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004a14:	4b32      	ldr	r3, [pc, #200]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2238      	movs	r2, #56	; 0x38
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b18      	cmp	r3, #24
 8004a1e:	d10a      	bne.n	8004a36 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004a20:	4b2f      	ldr	r3, [pc, #188]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a24:	2202      	movs	r2, #2
 8004a26:	4013      	ands	r3, r2
 8004a28:	d03c      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x2f4>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d138      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e216      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d019      	beq.n	8004a72 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004a3e:	4b28      	ldr	r3, [pc, #160]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004a40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a42:	4b27      	ldr	r3, [pc, #156]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004a44:	2101      	movs	r1, #1
 8004a46:	430a      	orrs	r2, r1
 8004a48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4a:	f7ff f9ff 	bl	8003e4c <HAL_GetTick>
 8004a4e:	0003      	movs	r3, r0
 8004a50:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a54:	f7ff f9fa 	bl	8003e4c <HAL_GetTick>
 8004a58:	0002      	movs	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e1fe      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a66:	4b1e      	ldr	r3, [pc, #120]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d0f1      	beq.n	8004a54 <HAL_RCC_OscConfig+0x2a4>
 8004a70:	e018      	b.n	8004aa4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004a72:	4b1b      	ldr	r3, [pc, #108]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004a74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a76:	4b1a      	ldr	r3, [pc, #104]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004a78:	2101      	movs	r1, #1
 8004a7a:	438a      	bics	r2, r1
 8004a7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7e:	f7ff f9e5 	bl	8003e4c <HAL_GetTick>
 8004a82:	0003      	movs	r3, r0
 8004a84:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a88:	f7ff f9e0 	bl	8003e4c <HAL_GetTick>
 8004a8c:	0002      	movs	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e1e4      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a9a:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	d1f1      	bne.n	8004a88 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d100      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x300>
 8004aae:	e0c7      	b.n	8004c40 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ab0:	231f      	movs	r3, #31
 8004ab2:	18fb      	adds	r3, r7, r3
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004ab8:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2238      	movs	r2, #56	; 0x38
 8004abe:	4013      	ands	r3, r2
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	d11f      	bne.n	8004b04 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004ac4:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <HAL_RCC_OscConfig+0x330>)
 8004ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac8:	2202      	movs	r2, #2
 8004aca:	4013      	ands	r3, r2
 8004acc:	d100      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x320>
 8004ace:	e0b7      	b.n	8004c40 <HAL_RCC_OscConfig+0x490>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d000      	beq.n	8004ada <HAL_RCC_OscConfig+0x32a>
 8004ad8:	e0b2      	b.n	8004c40 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e1c2      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	fffeffff 	.word	0xfffeffff
 8004ae8:	fffbffff 	.word	0xfffbffff
 8004aec:	ffff80ff 	.word	0xffff80ff
 8004af0:	ffffc7ff 	.word	0xffffc7ff
 8004af4:	00f42400 	.word	0x00f42400
 8004af8:	2000000c 	.word	0x2000000c
 8004afc:	20000010 	.word	0x20000010
 8004b00:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b04:	4bb5      	ldr	r3, [pc, #724]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	055b      	lsls	r3, r3, #21
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d101      	bne.n	8004b14 <HAL_RCC_OscConfig+0x364>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <HAL_RCC_OscConfig+0x366>
 8004b14:	2300      	movs	r3, #0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d011      	beq.n	8004b3e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004b1a:	4bb0      	ldr	r3, [pc, #704]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b1e:	4baf      	ldr	r3, [pc, #700]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004b20:	2180      	movs	r1, #128	; 0x80
 8004b22:	0549      	lsls	r1, r1, #21
 8004b24:	430a      	orrs	r2, r1
 8004b26:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b28:	4bac      	ldr	r3, [pc, #688]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b2c:	2380      	movs	r3, #128	; 0x80
 8004b2e:	055b      	lsls	r3, r3, #21
 8004b30:	4013      	ands	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004b36:	231f      	movs	r3, #31
 8004b38:	18fb      	adds	r3, r7, r3
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b3e:	4ba8      	ldr	r3, [pc, #672]	; (8004de0 <HAL_RCC_OscConfig+0x630>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	2380      	movs	r3, #128	; 0x80
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	4013      	ands	r3, r2
 8004b48:	d11a      	bne.n	8004b80 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b4a:	4ba5      	ldr	r3, [pc, #660]	; (8004de0 <HAL_RCC_OscConfig+0x630>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4ba4      	ldr	r3, [pc, #656]	; (8004de0 <HAL_RCC_OscConfig+0x630>)
 8004b50:	2180      	movs	r1, #128	; 0x80
 8004b52:	0049      	lsls	r1, r1, #1
 8004b54:	430a      	orrs	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004b58:	f7ff f978 	bl	8003e4c <HAL_GetTick>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b62:	f7ff f973 	bl	8003e4c <HAL_GetTick>
 8004b66:	0002      	movs	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e177      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b74:	4b9a      	ldr	r3, [pc, #616]	; (8004de0 <HAL_RCC_OscConfig+0x630>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	2380      	movs	r3, #128	; 0x80
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d0f0      	beq.n	8004b62 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d106      	bne.n	8004b96 <HAL_RCC_OscConfig+0x3e6>
 8004b88:	4b94      	ldr	r3, [pc, #592]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004b8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b8c:	4b93      	ldr	r3, [pc, #588]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004b8e:	2101      	movs	r1, #1
 8004b90:	430a      	orrs	r2, r1
 8004b92:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b94:	e01c      	b.n	8004bd0 <HAL_RCC_OscConfig+0x420>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2b05      	cmp	r3, #5
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x408>
 8004b9e:	4b8f      	ldr	r3, [pc, #572]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004ba0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ba2:	4b8e      	ldr	r3, [pc, #568]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004ba4:	2104      	movs	r1, #4
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004baa:	4b8c      	ldr	r3, [pc, #560]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004bac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bae:	4b8b      	ldr	r3, [pc, #556]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8004bb6:	e00b      	b.n	8004bd0 <HAL_RCC_OscConfig+0x420>
 8004bb8:	4b88      	ldr	r3, [pc, #544]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004bba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bbc:	4b87      	ldr	r3, [pc, #540]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	438a      	bics	r2, r1
 8004bc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004bc4:	4b85      	ldr	r3, [pc, #532]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004bc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bc8:	4b84      	ldr	r3, [pc, #528]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004bca:	2104      	movs	r1, #4
 8004bcc:	438a      	bics	r2, r1
 8004bce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d014      	beq.n	8004c02 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7ff f938 	bl	8003e4c <HAL_GetTick>
 8004bdc:	0003      	movs	r3, r0
 8004bde:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be0:	e009      	b.n	8004bf6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be2:	f7ff f933 	bl	8003e4c <HAL_GetTick>
 8004be6:	0002      	movs	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	4a7d      	ldr	r2, [pc, #500]	; (8004de4 <HAL_RCC_OscConfig+0x634>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e136      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf6:	4b79      	ldr	r3, [pc, #484]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d0f0      	beq.n	8004be2 <HAL_RCC_OscConfig+0x432>
 8004c00:	e013      	b.n	8004c2a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c02:	f7ff f923 	bl	8003e4c <HAL_GetTick>
 8004c06:	0003      	movs	r3, r0
 8004c08:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c0a:	e009      	b.n	8004c20 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0c:	f7ff f91e 	bl	8003e4c <HAL_GetTick>
 8004c10:	0002      	movs	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	4a73      	ldr	r2, [pc, #460]	; (8004de4 <HAL_RCC_OscConfig+0x634>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e121      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c20:	4b6e      	ldr	r3, [pc, #440]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c24:	2202      	movs	r2, #2
 8004c26:	4013      	ands	r3, r2
 8004c28:	d1f0      	bne.n	8004c0c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004c2a:	231f      	movs	r3, #31
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d105      	bne.n	8004c40 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004c34:	4b69      	ldr	r3, [pc, #420]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c38:	4b68      	ldr	r3, [pc, #416]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004c3a:	496b      	ldr	r1, [pc, #428]	; (8004de8 <HAL_RCC_OscConfig+0x638>)
 8004c3c:	400a      	ands	r2, r1
 8004c3e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2220      	movs	r2, #32
 8004c46:	4013      	ands	r3, r2
 8004c48:	d039      	beq.n	8004cbe <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d01b      	beq.n	8004c8a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c52:	4b62      	ldr	r3, [pc, #392]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	4b61      	ldr	r3, [pc, #388]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004c58:	2180      	movs	r1, #128	; 0x80
 8004c5a:	03c9      	lsls	r1, r1, #15
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c60:	f7ff f8f4 	bl	8003e4c <HAL_GetTick>
 8004c64:	0003      	movs	r3, r0
 8004c66:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c6a:	f7ff f8ef 	bl	8003e4c <HAL_GetTick>
 8004c6e:	0002      	movs	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e0f3      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004c7c:	4b57      	ldr	r3, [pc, #348]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	2380      	movs	r3, #128	; 0x80
 8004c82:	041b      	lsls	r3, r3, #16
 8004c84:	4013      	ands	r3, r2
 8004c86:	d0f0      	beq.n	8004c6a <HAL_RCC_OscConfig+0x4ba>
 8004c88:	e019      	b.n	8004cbe <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c8a:	4b54      	ldr	r3, [pc, #336]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4b53      	ldr	r3, [pc, #332]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004c90:	4956      	ldr	r1, [pc, #344]	; (8004dec <HAL_RCC_OscConfig+0x63c>)
 8004c92:	400a      	ands	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c96:	f7ff f8d9 	bl	8003e4c <HAL_GetTick>
 8004c9a:	0003      	movs	r3, r0
 8004c9c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ca0:	f7ff f8d4 	bl	8003e4c <HAL_GetTick>
 8004ca4:	0002      	movs	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e0d8      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004cb2:	4b4a      	ldr	r3, [pc, #296]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	2380      	movs	r3, #128	; 0x80
 8004cb8:	041b      	lsls	r3, r3, #16
 8004cba:	4013      	ands	r3, r2
 8004cbc:	d1f0      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d100      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x518>
 8004cc6:	e0cc      	b.n	8004e62 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cc8:	4b44      	ldr	r3, [pc, #272]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2238      	movs	r2, #56	; 0x38
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b10      	cmp	r3, #16
 8004cd2:	d100      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x526>
 8004cd4:	e07b      	b.n	8004dce <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d156      	bne.n	8004d8c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cde:	4b3f      	ldr	r3, [pc, #252]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b3e      	ldr	r3, [pc, #248]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004ce4:	4942      	ldr	r1, [pc, #264]	; (8004df0 <HAL_RCC_OscConfig+0x640>)
 8004ce6:	400a      	ands	r2, r1
 8004ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cea:	f7ff f8af 	bl	8003e4c <HAL_GetTick>
 8004cee:	0003      	movs	r3, r0
 8004cf0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf4:	f7ff f8aa 	bl	8003e4c <HAL_GetTick>
 8004cf8:	0002      	movs	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e0ae      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d06:	4b35      	ldr	r3, [pc, #212]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	2380      	movs	r3, #128	; 0x80
 8004d0c:	049b      	lsls	r3, r3, #18
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d12:	4b32      	ldr	r3, [pc, #200]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	4a37      	ldr	r2, [pc, #220]	; (8004df4 <HAL_RCC_OscConfig+0x644>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	0019      	movs	r1, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	4b26      	ldr	r3, [pc, #152]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004d42:	430a      	orrs	r2, r1
 8004d44:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d46:	4b25      	ldr	r3, [pc, #148]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b24      	ldr	r3, [pc, #144]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004d4c:	2180      	movs	r1, #128	; 0x80
 8004d4e:	0449      	lsls	r1, r1, #17
 8004d50:	430a      	orrs	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004d54:	4b21      	ldr	r3, [pc, #132]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004d5a:	2180      	movs	r1, #128	; 0x80
 8004d5c:	0549      	lsls	r1, r1, #21
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d62:	f7ff f873 	bl	8003e4c <HAL_GetTick>
 8004d66:	0003      	movs	r3, r0
 8004d68:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6c:	f7ff f86e 	bl	8003e4c <HAL_GetTick>
 8004d70:	0002      	movs	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e072      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d7e:	4b17      	ldr	r3, [pc, #92]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	2380      	movs	r3, #128	; 0x80
 8004d84:	049b      	lsls	r3, r3, #18
 8004d86:	4013      	ands	r3, r2
 8004d88:	d0f0      	beq.n	8004d6c <HAL_RCC_OscConfig+0x5bc>
 8004d8a:	e06a      	b.n	8004e62 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d8c:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004d92:	4917      	ldr	r1, [pc, #92]	; (8004df0 <HAL_RCC_OscConfig+0x640>)
 8004d94:	400a      	ands	r2, r1
 8004d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7ff f858 	bl	8003e4c <HAL_GetTick>
 8004d9c:	0003      	movs	r3, r0
 8004d9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da2:	f7ff f853 	bl	8003e4c <HAL_GetTick>
 8004da6:	0002      	movs	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e057      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004db4:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	2380      	movs	r3, #128	; 0x80
 8004dba:	049b      	lsls	r3, r3, #18
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	d1f0      	bne.n	8004da2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <HAL_RCC_OscConfig+0x62c>)
 8004dc6:	490c      	ldr	r1, [pc, #48]	; (8004df8 <HAL_RCC_OscConfig+0x648>)
 8004dc8:	400a      	ands	r2, r1
 8004dca:	60da      	str	r2, [r3, #12]
 8004dcc:	e049      	b.n	8004e62 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d112      	bne.n	8004dfc <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e044      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	40007000 	.word	0x40007000
 8004de4:	00001388 	.word	0x00001388
 8004de8:	efffffff 	.word	0xefffffff
 8004dec:	ffbfffff 	.word	0xffbfffff
 8004df0:	feffffff 	.word	0xfeffffff
 8004df4:	11c1808c 	.word	0x11c1808c
 8004df8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004dfc:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <HAL_RCC_OscConfig+0x6bc>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2203      	movs	r2, #3
 8004e06:	401a      	ands	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d126      	bne.n	8004e5e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2270      	movs	r2, #112	; 0x70
 8004e14:	401a      	ands	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d11f      	bne.n	8004e5e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	23fe      	movs	r3, #254	; 0xfe
 8004e22:	01db      	lsls	r3, r3, #7
 8004e24:	401a      	ands	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d116      	bne.n	8004e5e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	23f8      	movs	r3, #248	; 0xf8
 8004e34:	039b      	lsls	r3, r3, #14
 8004e36:	401a      	ands	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d10e      	bne.n	8004e5e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	23e0      	movs	r3, #224	; 0xe0
 8004e44:	051b      	lsls	r3, r3, #20
 8004e46:	401a      	ands	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d106      	bne.n	8004e5e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	0f5b      	lsrs	r3, r3, #29
 8004e54:	075a      	lsls	r2, r3, #29
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d001      	beq.n	8004e62 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	0018      	movs	r0, r3
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b008      	add	sp, #32
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40021000 	.word	0x40021000

08004e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e0e9      	b.n	8005058 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e84:	4b76      	ldr	r3, [pc, #472]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2207      	movs	r2, #7
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d91e      	bls.n	8004ed0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e92:	4b73      	ldr	r3, [pc, #460]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2207      	movs	r2, #7
 8004e98:	4393      	bics	r3, r2
 8004e9a:	0019      	movs	r1, r3
 8004e9c:	4b70      	ldr	r3, [pc, #448]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ea4:	f7fe ffd2 	bl	8003e4c <HAL_GetTick>
 8004ea8:	0003      	movs	r3, r0
 8004eaa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004eac:	e009      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eae:	f7fe ffcd 	bl	8003e4c <HAL_GetTick>
 8004eb2:	0002      	movs	r2, r0
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	4a6a      	ldr	r2, [pc, #424]	; (8005064 <HAL_RCC_ClockConfig+0x1f4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e0ca      	b.n	8005058 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ec2:	4b67      	ldr	r3, [pc, #412]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2207      	movs	r2, #7
 8004ec8:	4013      	ands	r3, r2
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d1ee      	bne.n	8004eae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	d015      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2204      	movs	r2, #4
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d006      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004ee4:	4b60      	ldr	r3, [pc, #384]	; (8005068 <HAL_RCC_ClockConfig+0x1f8>)
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	4b5f      	ldr	r3, [pc, #380]	; (8005068 <HAL_RCC_ClockConfig+0x1f8>)
 8004eea:	21e0      	movs	r1, #224	; 0xe0
 8004eec:	01c9      	lsls	r1, r1, #7
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef2:	4b5d      	ldr	r3, [pc, #372]	; (8005068 <HAL_RCC_ClockConfig+0x1f8>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	4a5d      	ldr	r2, [pc, #372]	; (800506c <HAL_RCC_ClockConfig+0x1fc>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	0019      	movs	r1, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	4b59      	ldr	r3, [pc, #356]	; (8005068 <HAL_RCC_ClockConfig+0x1f8>)
 8004f02:	430a      	orrs	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	d057      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d107      	bne.n	8004f28 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f18:	4b53      	ldr	r3, [pc, #332]	; (8005068 <HAL_RCC_ClockConfig+0x1f8>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	2380      	movs	r3, #128	; 0x80
 8004f1e:	029b      	lsls	r3, r3, #10
 8004f20:	4013      	ands	r3, r2
 8004f22:	d12b      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e097      	b.n	8005058 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d107      	bne.n	8004f40 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f30:	4b4d      	ldr	r3, [pc, #308]	; (8005068 <HAL_RCC_ClockConfig+0x1f8>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	2380      	movs	r3, #128	; 0x80
 8004f36:	049b      	lsls	r3, r3, #18
 8004f38:	4013      	ands	r3, r2
 8004f3a:	d11f      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e08b      	b.n	8005058 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d107      	bne.n	8004f58 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f48:	4b47      	ldr	r3, [pc, #284]	; (8005068 <HAL_RCC_ClockConfig+0x1f8>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	2380      	movs	r3, #128	; 0x80
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4013      	ands	r3, r2
 8004f52:	d113      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e07f      	b.n	8005058 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d106      	bne.n	8004f6e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f60:	4b41      	ldr	r3, [pc, #260]	; (8005068 <HAL_RCC_ClockConfig+0x1f8>)
 8004f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f64:	2202      	movs	r2, #2
 8004f66:	4013      	ands	r3, r2
 8004f68:	d108      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e074      	b.n	8005058 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f6e:	4b3e      	ldr	r3, [pc, #248]	; (8005068 <HAL_RCC_ClockConfig+0x1f8>)
 8004f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f72:	2202      	movs	r2, #2
 8004f74:	4013      	ands	r3, r2
 8004f76:	d101      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e06d      	b.n	8005058 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f7c:	4b3a      	ldr	r3, [pc, #232]	; (8005068 <HAL_RCC_ClockConfig+0x1f8>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2207      	movs	r2, #7
 8004f82:	4393      	bics	r3, r2
 8004f84:	0019      	movs	r1, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	4b37      	ldr	r3, [pc, #220]	; (8005068 <HAL_RCC_ClockConfig+0x1f8>)
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f90:	f7fe ff5c 	bl	8003e4c <HAL_GetTick>
 8004f94:	0003      	movs	r3, r0
 8004f96:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f98:	e009      	b.n	8004fae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9a:	f7fe ff57 	bl	8003e4c <HAL_GetTick>
 8004f9e:	0002      	movs	r2, r0
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	4a2f      	ldr	r2, [pc, #188]	; (8005064 <HAL_RCC_ClockConfig+0x1f4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e054      	b.n	8005058 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fae:	4b2e      	ldr	r3, [pc, #184]	; (8005068 <HAL_RCC_ClockConfig+0x1f8>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2238      	movs	r2, #56	; 0x38
 8004fb4:	401a      	ands	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d1ec      	bne.n	8004f9a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc0:	4b27      	ldr	r3, [pc, #156]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2207      	movs	r2, #7
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d21e      	bcs.n	800500c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	4b24      	ldr	r3, [pc, #144]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2207      	movs	r2, #7
 8004fd4:	4393      	bics	r3, r2
 8004fd6:	0019      	movs	r1, r3
 8004fd8:	4b21      	ldr	r3, [pc, #132]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fe0:	f7fe ff34 	bl	8003e4c <HAL_GetTick>
 8004fe4:	0003      	movs	r3, r0
 8004fe6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fe8:	e009      	b.n	8004ffe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fea:	f7fe ff2f 	bl	8003e4c <HAL_GetTick>
 8004fee:	0002      	movs	r2, r0
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	4a1b      	ldr	r2, [pc, #108]	; (8005064 <HAL_RCC_ClockConfig+0x1f4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e02c      	b.n	8005058 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ffe:	4b18      	ldr	r3, [pc, #96]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2207      	movs	r2, #7
 8005004:	4013      	ands	r3, r2
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d1ee      	bne.n	8004fea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2204      	movs	r2, #4
 8005012:	4013      	ands	r3, r2
 8005014:	d009      	beq.n	800502a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005016:	4b14      	ldr	r3, [pc, #80]	; (8005068 <HAL_RCC_ClockConfig+0x1f8>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	4a15      	ldr	r2, [pc, #84]	; (8005070 <HAL_RCC_ClockConfig+0x200>)
 800501c:	4013      	ands	r3, r2
 800501e:	0019      	movs	r1, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	4b10      	ldr	r3, [pc, #64]	; (8005068 <HAL_RCC_ClockConfig+0x1f8>)
 8005026:	430a      	orrs	r2, r1
 8005028:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800502a:	f000 f829 	bl	8005080 <HAL_RCC_GetSysClockFreq>
 800502e:	0001      	movs	r1, r0
 8005030:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <HAL_RCC_ClockConfig+0x1f8>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	0a1b      	lsrs	r3, r3, #8
 8005036:	220f      	movs	r2, #15
 8005038:	401a      	ands	r2, r3
 800503a:	4b0e      	ldr	r3, [pc, #56]	; (8005074 <HAL_RCC_ClockConfig+0x204>)
 800503c:	0092      	lsls	r2, r2, #2
 800503e:	58d3      	ldr	r3, [r2, r3]
 8005040:	221f      	movs	r2, #31
 8005042:	4013      	ands	r3, r2
 8005044:	000a      	movs	r2, r1
 8005046:	40da      	lsrs	r2, r3
 8005048:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <HAL_RCC_ClockConfig+0x208>)
 800504a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800504c:	4b0b      	ldr	r3, [pc, #44]	; (800507c <HAL_RCC_ClockConfig+0x20c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	0018      	movs	r0, r3
 8005052:	f7fe fe9f 	bl	8003d94 <HAL_InitTick>
 8005056:	0003      	movs	r3, r0
}
 8005058:	0018      	movs	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	b004      	add	sp, #16
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40022000 	.word	0x40022000
 8005064:	00001388 	.word	0x00001388
 8005068:	40021000 	.word	0x40021000
 800506c:	fffff0ff 	.word	0xfffff0ff
 8005070:	ffff8fff 	.word	0xffff8fff
 8005074:	080143f4 	.word	0x080143f4
 8005078:	2000000c 	.word	0x2000000c
 800507c:	20000010 	.word	0x20000010

08005080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005086:	4b3c      	ldr	r3, [pc, #240]	; (8005178 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2238      	movs	r2, #56	; 0x38
 800508c:	4013      	ands	r3, r2
 800508e:	d10f      	bne.n	80050b0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005090:	4b39      	ldr	r3, [pc, #228]	; (8005178 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	0adb      	lsrs	r3, r3, #11
 8005096:	2207      	movs	r2, #7
 8005098:	4013      	ands	r3, r2
 800509a:	2201      	movs	r2, #1
 800509c:	409a      	lsls	r2, r3
 800509e:	0013      	movs	r3, r2
 80050a0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80050a2:	6839      	ldr	r1, [r7, #0]
 80050a4:	4835      	ldr	r0, [pc, #212]	; (800517c <HAL_RCC_GetSysClockFreq+0xfc>)
 80050a6:	f7fb f849 	bl	800013c <__udivsi3>
 80050aa:	0003      	movs	r3, r0
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	e05d      	b.n	800516c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050b0:	4b31      	ldr	r3, [pc, #196]	; (8005178 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	2238      	movs	r2, #56	; 0x38
 80050b6:	4013      	ands	r3, r2
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d102      	bne.n	80050c2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050bc:	4b30      	ldr	r3, [pc, #192]	; (8005180 <HAL_RCC_GetSysClockFreq+0x100>)
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	e054      	b.n	800516c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050c2:	4b2d      	ldr	r3, [pc, #180]	; (8005178 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2238      	movs	r2, #56	; 0x38
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b10      	cmp	r3, #16
 80050cc:	d138      	bne.n	8005140 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80050ce:	4b2a      	ldr	r3, [pc, #168]	; (8005178 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	2203      	movs	r2, #3
 80050d4:	4013      	ands	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050d8:	4b27      	ldr	r3, [pc, #156]	; (8005178 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	091b      	lsrs	r3, r3, #4
 80050de:	2207      	movs	r2, #7
 80050e0:	4013      	ands	r3, r2
 80050e2:	3301      	adds	r3, #1
 80050e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d10d      	bne.n	8005108 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	4824      	ldr	r0, [pc, #144]	; (8005180 <HAL_RCC_GetSysClockFreq+0x100>)
 80050f0:	f7fb f824 	bl	800013c <__udivsi3>
 80050f4:	0003      	movs	r3, r0
 80050f6:	0019      	movs	r1, r3
 80050f8:	4b1f      	ldr	r3, [pc, #124]	; (8005178 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	0a1b      	lsrs	r3, r3, #8
 80050fe:	227f      	movs	r2, #127	; 0x7f
 8005100:	4013      	ands	r3, r2
 8005102:	434b      	muls	r3, r1
 8005104:	617b      	str	r3, [r7, #20]
        break;
 8005106:	e00d      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005108:	68b9      	ldr	r1, [r7, #8]
 800510a:	481c      	ldr	r0, [pc, #112]	; (800517c <HAL_RCC_GetSysClockFreq+0xfc>)
 800510c:	f7fb f816 	bl	800013c <__udivsi3>
 8005110:	0003      	movs	r3, r0
 8005112:	0019      	movs	r1, r3
 8005114:	4b18      	ldr	r3, [pc, #96]	; (8005178 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	0a1b      	lsrs	r3, r3, #8
 800511a:	227f      	movs	r2, #127	; 0x7f
 800511c:	4013      	ands	r3, r2
 800511e:	434b      	muls	r3, r1
 8005120:	617b      	str	r3, [r7, #20]
        break;
 8005122:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005124:	4b14      	ldr	r3, [pc, #80]	; (8005178 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	0f5b      	lsrs	r3, r3, #29
 800512a:	2207      	movs	r2, #7
 800512c:	4013      	ands	r3, r2
 800512e:	3301      	adds	r3, #1
 8005130:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	6978      	ldr	r0, [r7, #20]
 8005136:	f7fb f801 	bl	800013c <__udivsi3>
 800513a:	0003      	movs	r3, r0
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	e015      	b.n	800516c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005140:	4b0d      	ldr	r3, [pc, #52]	; (8005178 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2238      	movs	r2, #56	; 0x38
 8005146:	4013      	ands	r3, r2
 8005148:	2b20      	cmp	r3, #32
 800514a:	d103      	bne.n	8005154 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800514c:	2380      	movs	r3, #128	; 0x80
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	e00b      	b.n	800516c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005154:	4b08      	ldr	r3, [pc, #32]	; (8005178 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2238      	movs	r2, #56	; 0x38
 800515a:	4013      	ands	r3, r2
 800515c:	2b18      	cmp	r3, #24
 800515e:	d103      	bne.n	8005168 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005160:	23fa      	movs	r3, #250	; 0xfa
 8005162:	01db      	lsls	r3, r3, #7
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	e001      	b.n	800516c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800516c:	693b      	ldr	r3, [r7, #16]
}
 800516e:	0018      	movs	r0, r3
 8005170:	46bd      	mov	sp, r7
 8005172:	b006      	add	sp, #24
 8005174:	bd80      	pop	{r7, pc}
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	40021000 	.word	0x40021000
 800517c:	00f42400 	.word	0x00f42400
 8005180:	007a1200 	.word	0x007a1200

08005184 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005188:	4b02      	ldr	r3, [pc, #8]	; (8005194 <HAL_RCC_GetHCLKFreq+0x10>)
 800518a:	681b      	ldr	r3, [r3, #0]
}
 800518c:	0018      	movs	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	2000000c 	.word	0x2000000c

08005198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005198:	b5b0      	push	{r4, r5, r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800519c:	f7ff fff2 	bl	8005184 <HAL_RCC_GetHCLKFreq>
 80051a0:	0004      	movs	r4, r0
 80051a2:	f7ff faf9 	bl	8004798 <LL_RCC_GetAPB1Prescaler>
 80051a6:	0003      	movs	r3, r0
 80051a8:	0b1a      	lsrs	r2, r3, #12
 80051aa:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051ac:	0092      	lsls	r2, r2, #2
 80051ae:	58d3      	ldr	r3, [r2, r3]
 80051b0:	221f      	movs	r2, #31
 80051b2:	4013      	ands	r3, r2
 80051b4:	40dc      	lsrs	r4, r3
 80051b6:	0023      	movs	r3, r4
}
 80051b8:	0018      	movs	r0, r3
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bdb0      	pop	{r4, r5, r7, pc}
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	08014434 	.word	0x08014434

080051c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80051cc:	2313      	movs	r3, #19
 80051ce:	18fb      	adds	r3, r7, r3
 80051d0:	2200      	movs	r2, #0
 80051d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051d4:	2312      	movs	r3, #18
 80051d6:	18fb      	adds	r3, r7, r3
 80051d8:	2200      	movs	r2, #0
 80051da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	2380      	movs	r3, #128	; 0x80
 80051e2:	029b      	lsls	r3, r3, #10
 80051e4:	4013      	ands	r3, r2
 80051e6:	d100      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x26>
 80051e8:	e0ad      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ea:	2011      	movs	r0, #17
 80051ec:	183b      	adds	r3, r7, r0
 80051ee:	2200      	movs	r2, #0
 80051f0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f2:	4b47      	ldr	r3, [pc, #284]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051f6:	2380      	movs	r3, #128	; 0x80
 80051f8:	055b      	lsls	r3, r3, #21
 80051fa:	4013      	ands	r3, r2
 80051fc:	d110      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fe:	4b44      	ldr	r3, [pc, #272]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005202:	4b43      	ldr	r3, [pc, #268]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005204:	2180      	movs	r1, #128	; 0x80
 8005206:	0549      	lsls	r1, r1, #21
 8005208:	430a      	orrs	r2, r1
 800520a:	63da      	str	r2, [r3, #60]	; 0x3c
 800520c:	4b40      	ldr	r3, [pc, #256]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800520e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005210:	2380      	movs	r3, #128	; 0x80
 8005212:	055b      	lsls	r3, r3, #21
 8005214:	4013      	ands	r3, r2
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800521a:	183b      	adds	r3, r7, r0
 800521c:	2201      	movs	r2, #1
 800521e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005220:	4b3c      	ldr	r3, [pc, #240]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b3b      	ldr	r3, [pc, #236]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005226:	2180      	movs	r1, #128	; 0x80
 8005228:	0049      	lsls	r1, r1, #1
 800522a:	430a      	orrs	r2, r1
 800522c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800522e:	f7fe fe0d 	bl	8003e4c <HAL_GetTick>
 8005232:	0003      	movs	r3, r0
 8005234:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005236:	e00b      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005238:	f7fe fe08 	bl	8003e4c <HAL_GetTick>
 800523c:	0002      	movs	r2, r0
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d904      	bls.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005246:	2313      	movs	r3, #19
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	2203      	movs	r2, #3
 800524c:	701a      	strb	r2, [r3, #0]
        break;
 800524e:	e005      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005250:	4b30      	ldr	r3, [pc, #192]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	2380      	movs	r3, #128	; 0x80
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	4013      	ands	r3, r2
 800525a:	d0ed      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800525c:	2313      	movs	r3, #19
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d15e      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005266:	4b2a      	ldr	r3, [pc, #168]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005268:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800526a:	23c0      	movs	r3, #192	; 0xc0
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4013      	ands	r3, r2
 8005270:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d019      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	429a      	cmp	r2, r3
 8005280:	d014      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005282:	4b23      	ldr	r3, [pc, #140]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005286:	4a24      	ldr	r2, [pc, #144]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005288:	4013      	ands	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800528c:	4b20      	ldr	r3, [pc, #128]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800528e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005290:	4b1f      	ldr	r3, [pc, #124]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005292:	2180      	movs	r1, #128	; 0x80
 8005294:	0249      	lsls	r1, r1, #9
 8005296:	430a      	orrs	r2, r1
 8005298:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800529a:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800529c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800529e:	4b1c      	ldr	r3, [pc, #112]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80052a0:	491e      	ldr	r1, [pc, #120]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80052a2:	400a      	ands	r2, r1
 80052a4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052a6:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2201      	movs	r2, #1
 80052b0:	4013      	ands	r3, r2
 80052b2:	d016      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b4:	f7fe fdca 	bl	8003e4c <HAL_GetTick>
 80052b8:	0003      	movs	r3, r0
 80052ba:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052bc:	e00c      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052be:	f7fe fdc5 	bl	8003e4c <HAL_GetTick>
 80052c2:	0002      	movs	r2, r0
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	4a15      	ldr	r2, [pc, #84]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d904      	bls.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80052ce:	2313      	movs	r3, #19
 80052d0:	18fb      	adds	r3, r7, r3
 80052d2:	2203      	movs	r2, #3
 80052d4:	701a      	strb	r2, [r3, #0]
            break;
 80052d6:	e004      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052d8:	4b0d      	ldr	r3, [pc, #52]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80052da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052dc:	2202      	movs	r2, #2
 80052de:	4013      	ands	r3, r2
 80052e0:	d0ed      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80052e2:	2313      	movs	r3, #19
 80052e4:	18fb      	adds	r3, r7, r3
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10a      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052ec:	4b08      	ldr	r3, [pc, #32]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80052ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f0:	4a09      	ldr	r2, [pc, #36]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	0019      	movs	r1, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052fa:	4b05      	ldr	r3, [pc, #20]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80052fc:	430a      	orrs	r2, r1
 80052fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8005300:	e016      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005302:	2312      	movs	r3, #18
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	2213      	movs	r2, #19
 8005308:	18ba      	adds	r2, r7, r2
 800530a:	7812      	ldrb	r2, [r2, #0]
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	e00f      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005310:	40021000 	.word	0x40021000
 8005314:	40007000 	.word	0x40007000
 8005318:	fffffcff 	.word	0xfffffcff
 800531c:	fffeffff 	.word	0xfffeffff
 8005320:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005324:	2312      	movs	r3, #18
 8005326:	18fb      	adds	r3, r7, r3
 8005328:	2213      	movs	r2, #19
 800532a:	18ba      	adds	r2, r7, r2
 800532c:	7812      	ldrb	r2, [r2, #0]
 800532e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005330:	2311      	movs	r3, #17
 8005332:	18fb      	adds	r3, r7, r3
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d105      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800533a:	4bb6      	ldr	r3, [pc, #728]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800533c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800533e:	4bb5      	ldr	r3, [pc, #724]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005340:	49b5      	ldr	r1, [pc, #724]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8005342:	400a      	ands	r2, r1
 8005344:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2201      	movs	r2, #1
 800534c:	4013      	ands	r3, r2
 800534e:	d009      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005350:	4bb0      	ldr	r3, [pc, #704]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005354:	2203      	movs	r2, #3
 8005356:	4393      	bics	r3, r2
 8005358:	0019      	movs	r1, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	4bad      	ldr	r3, [pc, #692]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005360:	430a      	orrs	r2, r1
 8005362:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2202      	movs	r2, #2
 800536a:	4013      	ands	r3, r2
 800536c:	d009      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800536e:	4ba9      	ldr	r3, [pc, #676]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	220c      	movs	r2, #12
 8005374:	4393      	bics	r3, r2
 8005376:	0019      	movs	r1, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	4ba5      	ldr	r3, [pc, #660]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800537e:	430a      	orrs	r2, r1
 8005380:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2204      	movs	r2, #4
 8005388:	4013      	ands	r3, r2
 800538a:	d009      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800538c:	4ba1      	ldr	r3, [pc, #644]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800538e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005390:	2230      	movs	r2, #48	; 0x30
 8005392:	4393      	bics	r3, r2
 8005394:	0019      	movs	r1, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	4b9e      	ldr	r3, [pc, #632]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800539c:	430a      	orrs	r2, r1
 800539e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2210      	movs	r2, #16
 80053a6:	4013      	ands	r3, r2
 80053a8:	d009      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053aa:	4b9a      	ldr	r3, [pc, #616]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ae:	4a9b      	ldr	r2, [pc, #620]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	0019      	movs	r1, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	4b96      	ldr	r3, [pc, #600]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053ba:	430a      	orrs	r2, r1
 80053bc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	2380      	movs	r3, #128	; 0x80
 80053c4:	015b      	lsls	r3, r3, #5
 80053c6:	4013      	ands	r3, r2
 80053c8:	d009      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80053ca:	4b92      	ldr	r3, [pc, #584]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ce:	4a94      	ldr	r2, [pc, #592]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	0019      	movs	r1, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	695a      	ldr	r2, [r3, #20]
 80053d8:	4b8e      	ldr	r3, [pc, #568]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053da:	430a      	orrs	r2, r1
 80053dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	2380      	movs	r3, #128	; 0x80
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4013      	ands	r3, r2
 80053e8:	d009      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ea:	4b8a      	ldr	r3, [pc, #552]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ee:	4a8d      	ldr	r2, [pc, #564]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	0019      	movs	r1, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053f8:	4b86      	ldr	r3, [pc, #536]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053fa:	430a      	orrs	r2, r1
 80053fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4013      	ands	r3, r2
 8005408:	d009      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800540a:	4b82      	ldr	r3, [pc, #520]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540e:	4a86      	ldr	r2, [pc, #536]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005410:	4013      	ands	r3, r2
 8005412:	0019      	movs	r1, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005418:	4b7e      	ldr	r3, [pc, #504]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800541a:	430a      	orrs	r2, r1
 800541c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2220      	movs	r2, #32
 8005424:	4013      	ands	r3, r2
 8005426:	d009      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005428:	4b7a      	ldr	r3, [pc, #488]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800542a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542c:	4a7f      	ldr	r2, [pc, #508]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800542e:	4013      	ands	r3, r2
 8005430:	0019      	movs	r1, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699a      	ldr	r2, [r3, #24]
 8005436:	4b77      	ldr	r3, [pc, #476]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005438:	430a      	orrs	r2, r1
 800543a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2240      	movs	r2, #64	; 0x40
 8005442:	4013      	ands	r3, r2
 8005444:	d009      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005446:	4b73      	ldr	r3, [pc, #460]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544a:	4a79      	ldr	r2, [pc, #484]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800544c:	4013      	ands	r3, r2
 800544e:	0019      	movs	r1, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	4b6f      	ldr	r3, [pc, #444]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005456:	430a      	orrs	r2, r1
 8005458:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	2380      	movs	r3, #128	; 0x80
 8005460:	01db      	lsls	r3, r3, #7
 8005462:	4013      	ands	r3, r2
 8005464:	d015      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005466:	4b6b      	ldr	r3, [pc, #428]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	0899      	lsrs	r1, r3, #2
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005472:	4b68      	ldr	r3, [pc, #416]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005474:	430a      	orrs	r2, r1
 8005476:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800547c:	2380      	movs	r3, #128	; 0x80
 800547e:	05db      	lsls	r3, r3, #23
 8005480:	429a      	cmp	r2, r3
 8005482:	d106      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005484:	4b63      	ldr	r3, [pc, #396]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	4b62      	ldr	r3, [pc, #392]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800548a:	2180      	movs	r1, #128	; 0x80
 800548c:	0249      	lsls	r1, r1, #9
 800548e:	430a      	orrs	r2, r1
 8005490:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	2380      	movs	r3, #128	; 0x80
 8005498:	031b      	lsls	r3, r3, #12
 800549a:	4013      	ands	r3, r2
 800549c:	d009      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800549e:	4b5d      	ldr	r3, [pc, #372]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a2:	2240      	movs	r2, #64	; 0x40
 80054a4:	4393      	bics	r3, r2
 80054a6:	0019      	movs	r1, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ac:	4b59      	ldr	r3, [pc, #356]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054ae:	430a      	orrs	r2, r1
 80054b0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	2380      	movs	r3, #128	; 0x80
 80054b8:	039b      	lsls	r3, r3, #14
 80054ba:	4013      	ands	r3, r2
 80054bc:	d016      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80054be:	4b55      	ldr	r3, [pc, #340]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c2:	4a5c      	ldr	r2, [pc, #368]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	0019      	movs	r1, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054cc:	4b51      	ldr	r3, [pc, #324]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054ce:	430a      	orrs	r2, r1
 80054d0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054d6:	2380      	movs	r3, #128	; 0x80
 80054d8:	03db      	lsls	r3, r3, #15
 80054da:	429a      	cmp	r2, r3
 80054dc:	d106      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80054de:	4b4d      	ldr	r3, [pc, #308]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	4b4c      	ldr	r3, [pc, #304]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054e4:	2180      	movs	r1, #128	; 0x80
 80054e6:	0449      	lsls	r1, r1, #17
 80054e8:	430a      	orrs	r2, r1
 80054ea:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	2380      	movs	r3, #128	; 0x80
 80054f2:	03db      	lsls	r3, r3, #15
 80054f4:	4013      	ands	r3, r2
 80054f6:	d016      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80054f8:	4b46      	ldr	r3, [pc, #280]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fc:	4a4e      	ldr	r2, [pc, #312]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80054fe:	4013      	ands	r3, r2
 8005500:	0019      	movs	r1, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005506:	4b43      	ldr	r3, [pc, #268]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005508:	430a      	orrs	r2, r1
 800550a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005510:	2380      	movs	r3, #128	; 0x80
 8005512:	045b      	lsls	r3, r3, #17
 8005514:	429a      	cmp	r2, r3
 8005516:	d106      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005518:	4b3e      	ldr	r3, [pc, #248]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	4b3d      	ldr	r3, [pc, #244]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800551e:	2180      	movs	r1, #128	; 0x80
 8005520:	0449      	lsls	r1, r1, #17
 8005522:	430a      	orrs	r2, r1
 8005524:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	2380      	movs	r3, #128	; 0x80
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	4013      	ands	r3, r2
 8005530:	d014      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005532:	4b38      	ldr	r3, [pc, #224]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	2203      	movs	r2, #3
 8005538:	4393      	bics	r3, r2
 800553a:	0019      	movs	r1, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1a      	ldr	r2, [r3, #32]
 8005540:	4b34      	ldr	r3, [pc, #208]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005542:	430a      	orrs	r2, r1
 8005544:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d106      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800554e:	4b31      	ldr	r3, [pc, #196]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	4b30      	ldr	r3, [pc, #192]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005554:	2180      	movs	r1, #128	; 0x80
 8005556:	0249      	lsls	r1, r1, #9
 8005558:	430a      	orrs	r2, r1
 800555a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	2380      	movs	r3, #128	; 0x80
 8005562:	019b      	lsls	r3, r3, #6
 8005564:	4013      	ands	r3, r2
 8005566:	d014      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005568:	4b2a      	ldr	r3, [pc, #168]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800556a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556c:	220c      	movs	r2, #12
 800556e:	4393      	bics	r3, r2
 8005570:	0019      	movs	r1, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005576:	4b27      	ldr	r3, [pc, #156]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005578:	430a      	orrs	r2, r1
 800557a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	2b04      	cmp	r3, #4
 8005582:	d106      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005584:	4b23      	ldr	r3, [pc, #140]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	4b22      	ldr	r3, [pc, #136]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800558a:	2180      	movs	r1, #128	; 0x80
 800558c:	0249      	lsls	r1, r1, #9
 800558e:	430a      	orrs	r2, r1
 8005590:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	2380      	movs	r3, #128	; 0x80
 8005598:	045b      	lsls	r3, r3, #17
 800559a:	4013      	ands	r3, r2
 800559c:	d016      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800559e:	4b1d      	ldr	r3, [pc, #116]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a2:	4a22      	ldr	r2, [pc, #136]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80055a4:	4013      	ands	r3, r2
 80055a6:	0019      	movs	r1, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ac:	4b19      	ldr	r3, [pc, #100]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055ae:	430a      	orrs	r2, r1
 80055b0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055b6:	2380      	movs	r3, #128	; 0x80
 80055b8:	019b      	lsls	r3, r3, #6
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d106      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80055be:	4b15      	ldr	r3, [pc, #84]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	4b14      	ldr	r3, [pc, #80]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055c4:	2180      	movs	r1, #128	; 0x80
 80055c6:	0449      	lsls	r1, r1, #17
 80055c8:	430a      	orrs	r2, r1
 80055ca:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	2380      	movs	r3, #128	; 0x80
 80055d2:	049b      	lsls	r3, r3, #18
 80055d4:	4013      	ands	r3, r2
 80055d6:	d016      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055d8:	4b0e      	ldr	r3, [pc, #56]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055dc:	4a10      	ldr	r2, [pc, #64]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80055de:	4013      	ands	r3, r2
 80055e0:	0019      	movs	r1, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055e6:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055e8:	430a      	orrs	r2, r1
 80055ea:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055f0:	2380      	movs	r3, #128	; 0x80
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d106      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80055f8:	4b06      	ldr	r3, [pc, #24]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	4b05      	ldr	r3, [pc, #20]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055fe:	2180      	movs	r1, #128	; 0x80
 8005600:	0449      	lsls	r1, r1, #17
 8005602:	430a      	orrs	r2, r1
 8005604:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005606:	2312      	movs	r3, #18
 8005608:	18fb      	adds	r3, r7, r3
 800560a:	781b      	ldrb	r3, [r3, #0]
}
 800560c:	0018      	movs	r0, r3
 800560e:	46bd      	mov	sp, r7
 8005610:	b006      	add	sp, #24
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40021000 	.word	0x40021000
 8005618:	efffffff 	.word	0xefffffff
 800561c:	fffff3ff 	.word	0xfffff3ff
 8005620:	fffffcff 	.word	0xfffffcff
 8005624:	fff3ffff 	.word	0xfff3ffff
 8005628:	ffcfffff 	.word	0xffcfffff
 800562c:	ffffcfff 	.word	0xffffcfff
 8005630:	ffff3fff 	.word	0xffff3fff
 8005634:	ffbfffff 	.word	0xffbfffff
 8005638:	feffffff 	.word	0xfeffffff

0800563c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800563c:	b5b0      	push	{r4, r5, r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005644:	230f      	movs	r3, #15
 8005646:	18fb      	adds	r3, r7, r3
 8005648:	2201      	movs	r2, #1
 800564a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d100      	bne.n	8005654 <HAL_RTC_Init+0x18>
 8005652:	e08c      	b.n	800576e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2229      	movs	r2, #41	; 0x29
 8005658:	5c9b      	ldrb	r3, [r3, r2]
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10b      	bne.n	8005678 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2228      	movs	r2, #40	; 0x28
 8005664:	2100      	movs	r1, #0
 8005666:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2288      	movs	r2, #136	; 0x88
 800566c:	0212      	lsls	r2, r2, #8
 800566e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	0018      	movs	r0, r3
 8005674:	f7fe f800 	bl	8003678 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2229      	movs	r2, #41	; 0x29
 800567c:	2102      	movs	r1, #2
 800567e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	2210      	movs	r2, #16
 8005688:	4013      	ands	r3, r2
 800568a:	2b10      	cmp	r3, #16
 800568c:	d062      	beq.n	8005754 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	22ca      	movs	r2, #202	; 0xca
 8005694:	625a      	str	r2, [r3, #36]	; 0x24
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2253      	movs	r2, #83	; 0x53
 800569c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800569e:	250f      	movs	r5, #15
 80056a0:	197c      	adds	r4, r7, r5
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	0018      	movs	r0, r3
 80056a6:	f000 fbf3 	bl	8005e90 <RTC_EnterInitMode>
 80056aa:	0003      	movs	r3, r0
 80056ac:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80056ae:	0028      	movs	r0, r5
 80056b0:	183b      	adds	r3, r7, r0
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d12c      	bne.n	8005712 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	492e      	ldr	r1, [pc, #184]	; (800577c <HAL_RTC_Init+0x140>)
 80056c4:	400a      	ands	r2, r1
 80056c6:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6999      	ldr	r1, [r3, #24]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6912      	ldr	r2, [r2, #16]
 80056ee:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6919      	ldr	r1, [r3, #16]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	041a      	lsls	r2, r3, #16
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005704:	183c      	adds	r4, r7, r0
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	0018      	movs	r0, r3
 800570a:	f000 fc03 	bl	8005f14 <RTC_ExitInitMode>
 800570e:	0003      	movs	r3, r0
 8005710:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005712:	230f      	movs	r3, #15
 8005714:	18fb      	adds	r3, r7, r3
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d116      	bne.n	800574a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	00d2      	lsls	r2, r2, #3
 8005728:	08d2      	lsrs	r2, r2, #3
 800572a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6999      	ldr	r1, [r3, #24]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	22ff      	movs	r2, #255	; 0xff
 8005750:	625a      	str	r2, [r3, #36]	; 0x24
 8005752:	e003      	b.n	800575c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005754:	230f      	movs	r3, #15
 8005756:	18fb      	adds	r3, r7, r3
 8005758:	2200      	movs	r2, #0
 800575a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800575c:	230f      	movs	r3, #15
 800575e:	18fb      	adds	r3, r7, r3
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d103      	bne.n	800576e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2229      	movs	r2, #41	; 0x29
 800576a:	2101      	movs	r1, #1
 800576c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800576e:	230f      	movs	r3, #15
 8005770:	18fb      	adds	r3, r7, r3
 8005772:	781b      	ldrb	r3, [r3, #0]
}
 8005774:	0018      	movs	r0, r3
 8005776:	46bd      	mov	sp, r7
 8005778:	b004      	add	sp, #16
 800577a:	bdb0      	pop	{r4, r5, r7, pc}
 800577c:	fb8fffbf 	.word	0xfb8fffbf

08005780 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005780:	b5b0      	push	{r4, r5, r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2228      	movs	r2, #40	; 0x28
 8005790:	5c9b      	ldrb	r3, [r3, r2]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_RTC_SetTime+0x1a>
 8005796:	2302      	movs	r3, #2
 8005798:	e092      	b.n	80058c0 <HAL_RTC_SetTime+0x140>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2228      	movs	r2, #40	; 0x28
 800579e:	2101      	movs	r1, #1
 80057a0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2229      	movs	r2, #41	; 0x29
 80057a6:	2102      	movs	r1, #2
 80057a8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	22ca      	movs	r2, #202	; 0xca
 80057b0:	625a      	str	r2, [r3, #36]	; 0x24
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2253      	movs	r2, #83	; 0x53
 80057b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057ba:	2513      	movs	r5, #19
 80057bc:	197c      	adds	r4, r7, r5
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	0018      	movs	r0, r3
 80057c2:	f000 fb65 	bl	8005e90 <RTC_EnterInitMode>
 80057c6:	0003      	movs	r3, r0
 80057c8:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80057ca:	197b      	adds	r3, r7, r5
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d162      	bne.n	8005898 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d125      	bne.n	8005824 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	2240      	movs	r2, #64	; 0x40
 80057e0:	4013      	ands	r3, r2
 80057e2:	d102      	bne.n	80057ea <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2200      	movs	r2, #0
 80057e8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	0018      	movs	r0, r3
 80057f0:	f000 fbd4 	bl	8005f9c <RTC_ByteToBcd2>
 80057f4:	0003      	movs	r3, r0
 80057f6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	785b      	ldrb	r3, [r3, #1]
 80057fc:	0018      	movs	r0, r3
 80057fe:	f000 fbcd 	bl	8005f9c <RTC_ByteToBcd2>
 8005802:	0003      	movs	r3, r0
 8005804:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005806:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	789b      	ldrb	r3, [r3, #2]
 800580c:	0018      	movs	r0, r3
 800580e:	f000 fbc5 	bl	8005f9c <RTC_ByteToBcd2>
 8005812:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005814:	0022      	movs	r2, r4
 8005816:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	78db      	ldrb	r3, [r3, #3]
 800581c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800581e:	4313      	orrs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	e017      	b.n	8005854 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2240      	movs	r2, #64	; 0x40
 800582c:	4013      	ands	r3, r2
 800582e:	d102      	bne.n	8005836 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2200      	movs	r2, #0
 8005834:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	785b      	ldrb	r3, [r3, #1]
 8005840:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005842:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005848:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	78db      	ldrb	r3, [r3, #3]
 800584e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	491b      	ldr	r1, [pc, #108]	; (80058c8 <HAL_RTC_SetTime+0x148>)
 800585c:	400a      	ands	r2, r1
 800585e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699a      	ldr	r2, [r3, #24]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4918      	ldr	r1, [pc, #96]	; (80058cc <HAL_RTC_SetTime+0x14c>)
 800586c:	400a      	ands	r2, r1
 800586e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6999      	ldr	r1, [r3, #24]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	431a      	orrs	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005888:	2313      	movs	r3, #19
 800588a:	18fc      	adds	r4, r7, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	0018      	movs	r0, r3
 8005890:	f000 fb40 	bl	8005f14 <RTC_ExitInitMode>
 8005894:	0003      	movs	r3, r0
 8005896:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	22ff      	movs	r2, #255	; 0xff
 800589e:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80058a0:	2313      	movs	r3, #19
 80058a2:	18fb      	adds	r3, r7, r3
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d103      	bne.n	80058b2 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2229      	movs	r2, #41	; 0x29
 80058ae:	2101      	movs	r1, #1
 80058b0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2228      	movs	r2, #40	; 0x28
 80058b6:	2100      	movs	r1, #0
 80058b8:	5499      	strb	r1, [r3, r2]

  return status;
 80058ba:	2313      	movs	r3, #19
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	781b      	ldrb	r3, [r3, #0]
}
 80058c0:	0018      	movs	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b006      	add	sp, #24
 80058c6:	bdb0      	pop	{r4, r5, r7, pc}
 80058c8:	007f7f7f 	.word	0x007f7f7f
 80058cc:	fffbffff 	.word	0xfffbffff

080058d0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	045b      	lsls	r3, r3, #17
 80058ee:	0c5a      	lsrs	r2, r3, #17
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a22      	ldr	r2, [pc, #136]	; (8005984 <HAL_RTC_GetTime+0xb4>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	0c1b      	lsrs	r3, r3, #16
 8005904:	b2db      	uxtb	r3, r3
 8005906:	223f      	movs	r2, #63	; 0x3f
 8005908:	4013      	ands	r3, r2
 800590a:	b2da      	uxtb	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	0a1b      	lsrs	r3, r3, #8
 8005914:	b2db      	uxtb	r3, r3
 8005916:	227f      	movs	r2, #127	; 0x7f
 8005918:	4013      	ands	r3, r2
 800591a:	b2da      	uxtb	r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	227f      	movs	r2, #127	; 0x7f
 8005926:	4013      	ands	r3, r2
 8005928:	b2da      	uxtb	r2, r3
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	0d9b      	lsrs	r3, r3, #22
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2201      	movs	r2, #1
 8005936:	4013      	ands	r3, r2
 8005938:	b2da      	uxtb	r2, r3
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d11a      	bne.n	800597a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	0018      	movs	r0, r3
 800594a:	f000 fb4f 	bl	8005fec <RTC_Bcd2ToByte>
 800594e:	0003      	movs	r3, r0
 8005950:	001a      	movs	r2, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	0018      	movs	r0, r3
 800595c:	f000 fb46 	bl	8005fec <RTC_Bcd2ToByte>
 8005960:	0003      	movs	r3, r0
 8005962:	001a      	movs	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	789b      	ldrb	r3, [r3, #2]
 800596c:	0018      	movs	r0, r3
 800596e:	f000 fb3d 	bl	8005fec <RTC_Bcd2ToByte>
 8005972:	0003      	movs	r3, r0
 8005974:	001a      	movs	r2, r3
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	0018      	movs	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	b006      	add	sp, #24
 8005982:	bd80      	pop	{r7, pc}
 8005984:	007f7f7f 	.word	0x007f7f7f

08005988 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005988:	b5b0      	push	{r4, r5, r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2228      	movs	r2, #40	; 0x28
 8005998:	5c9b      	ldrb	r3, [r3, r2]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_RTC_SetDate+0x1a>
 800599e:	2302      	movs	r3, #2
 80059a0:	e07e      	b.n	8005aa0 <HAL_RTC_SetDate+0x118>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2228      	movs	r2, #40	; 0x28
 80059a6:	2101      	movs	r1, #1
 80059a8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2229      	movs	r2, #41	; 0x29
 80059ae:	2102      	movs	r1, #2
 80059b0:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10e      	bne.n	80059d6 <HAL_RTC_SetDate+0x4e>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	001a      	movs	r2, r3
 80059be:	2310      	movs	r3, #16
 80059c0:	4013      	ands	r3, r2
 80059c2:	d008      	beq.n	80059d6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	2210      	movs	r2, #16
 80059ca:	4393      	bics	r3, r2
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	330a      	adds	r3, #10
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d11c      	bne.n	8005a16 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	78db      	ldrb	r3, [r3, #3]
 80059e0:	0018      	movs	r0, r3
 80059e2:	f000 fadb 	bl	8005f9c <RTC_ByteToBcd2>
 80059e6:	0003      	movs	r3, r0
 80059e8:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	785b      	ldrb	r3, [r3, #1]
 80059ee:	0018      	movs	r0, r3
 80059f0:	f000 fad4 	bl	8005f9c <RTC_ByteToBcd2>
 80059f4:	0003      	movs	r3, r0
 80059f6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80059f8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	789b      	ldrb	r3, [r3, #2]
 80059fe:	0018      	movs	r0, r3
 8005a00:	f000 facc 	bl	8005f9c <RTC_ByteToBcd2>
 8005a04:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a06:	0022      	movs	r2, r4
 8005a08:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	e00e      	b.n	8005a34 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	78db      	ldrb	r3, [r3, #3]
 8005a1a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	785b      	ldrb	r3, [r3, #1]
 8005a20:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a22:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a28:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	22ca      	movs	r2, #202	; 0xca
 8005a3a:	625a      	str	r2, [r3, #36]	; 0x24
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2253      	movs	r2, #83	; 0x53
 8005a42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a44:	2513      	movs	r5, #19
 8005a46:	197c      	adds	r4, r7, r5
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	f000 fa20 	bl	8005e90 <RTC_EnterInitMode>
 8005a50:	0003      	movs	r3, r0
 8005a52:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005a54:	0028      	movs	r0, r5
 8005a56:	183b      	adds	r3, r7, r0
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10c      	bne.n	8005a78 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4910      	ldr	r1, [pc, #64]	; (8005aa8 <HAL_RTC_SetDate+0x120>)
 8005a66:	400a      	ands	r2, r1
 8005a68:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a6a:	183c      	adds	r4, r7, r0
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	0018      	movs	r0, r3
 8005a70:	f000 fa50 	bl	8005f14 <RTC_ExitInitMode>
 8005a74:	0003      	movs	r3, r0
 8005a76:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	22ff      	movs	r2, #255	; 0xff
 8005a7e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005a80:	2313      	movs	r3, #19
 8005a82:	18fb      	adds	r3, r7, r3
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d103      	bne.n	8005a92 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2229      	movs	r2, #41	; 0x29
 8005a8e:	2101      	movs	r1, #1
 8005a90:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2228      	movs	r2, #40	; 0x28
 8005a96:	2100      	movs	r1, #0
 8005a98:	5499      	strb	r1, [r3, r2]

  return status;
 8005a9a:	2313      	movs	r3, #19
 8005a9c:	18fb      	adds	r3, r7, r3
 8005a9e:	781b      	ldrb	r3, [r3, #0]
}
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	b006      	add	sp, #24
 8005aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8005aa8:	00ffff3f 	.word	0x00ffff3f

08005aac <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	4a21      	ldr	r2, [pc, #132]	; (8005b44 <HAL_RTC_GetDate+0x98>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	0c1b      	lsrs	r3, r3, #16
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	0a1b      	lsrs	r3, r3, #8
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	221f      	movs	r2, #31
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	223f      	movs	r2, #63	; 0x3f
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	0b5b      	lsrs	r3, r3, #13
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2207      	movs	r2, #7
 8005af4:	4013      	ands	r3, r2
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d11a      	bne.n	8005b38 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	78db      	ldrb	r3, [r3, #3]
 8005b06:	0018      	movs	r0, r3
 8005b08:	f000 fa70 	bl	8005fec <RTC_Bcd2ToByte>
 8005b0c:	0003      	movs	r3, r0
 8005b0e:	001a      	movs	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	785b      	ldrb	r3, [r3, #1]
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f000 fa67 	bl	8005fec <RTC_Bcd2ToByte>
 8005b1e:	0003      	movs	r3, r0
 8005b20:	001a      	movs	r2, r3
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	789b      	ldrb	r3, [r3, #2]
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f000 fa5e 	bl	8005fec <RTC_Bcd2ToByte>
 8005b30:	0003      	movs	r3, r0
 8005b32:	001a      	movs	r2, r3
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	b006      	add	sp, #24
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	46c0      	nop			; (mov r8, r8)
 8005b44:	00ffff3f 	.word	0x00ffff3f

08005b48 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005b48:	b590      	push	{r4, r7, lr}
 8005b4a:	b089      	sub	sp, #36	; 0x24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2228      	movs	r2, #40	; 0x28
 8005b58:	5c9b      	ldrb	r3, [r3, r2]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <HAL_RTC_SetAlarm_IT+0x1a>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e127      	b.n	8005db2 <HAL_RTC_SetAlarm_IT+0x26a>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2228      	movs	r2, #40	; 0x28
 8005b66:	2101      	movs	r1, #1
 8005b68:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2229      	movs	r2, #41	; 0x29
 8005b6e:	2102      	movs	r1, #2
 8005b70:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d136      	bne.n	8005be6 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	2240      	movs	r2, #64	; 0x40
 8005b80:	4013      	ands	r3, r2
 8005b82:	d102      	bne.n	8005b8a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2200      	movs	r2, #0
 8005b88:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f000 fa04 	bl	8005f9c <RTC_ByteToBcd2>
 8005b94:	0003      	movs	r3, r0
 8005b96:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	785b      	ldrb	r3, [r3, #1]
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	f000 f9fd 	bl	8005f9c <RTC_ByteToBcd2>
 8005ba2:	0003      	movs	r3, r0
 8005ba4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005ba6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	789b      	ldrb	r3, [r3, #2]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f000 f9f5 	bl	8005f9c <RTC_ByteToBcd2>
 8005bb2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005bb4:	0022      	movs	r2, r4
 8005bb6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	78db      	ldrb	r3, [r3, #3]
 8005bbc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	5c9b      	ldrb	r3, [r3, r2]
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f000 f9e7 	bl	8005f9c <RTC_ByteToBcd2>
 8005bce:	0003      	movs	r3, r0
 8005bd0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005bd2:	0022      	movs	r2, r4
 8005bd4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005bda:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005be0:	4313      	orrs	r3, r2
 8005be2:	61fb      	str	r3, [r7, #28]
 8005be4:	e022      	b.n	8005c2c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	2240      	movs	r2, #64	; 0x40
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d102      	bne.n	8005bf8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c04:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005c0a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	78db      	ldrb	r3, [r3, #3]
 8005c10:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005c12:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2120      	movs	r1, #32
 8005c18:	5c5b      	ldrb	r3, [r3, r1]
 8005c1a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005c1c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005c22:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	22ca      	movs	r2, #202	; 0xca
 8005c3e:	625a      	str	r2, [r3, #36]	; 0x24
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2253      	movs	r2, #83	; 0x53
 8005c46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c4c:	2380      	movs	r3, #128	; 0x80
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d14c      	bne.n	8005cee <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4957      	ldr	r1, [pc, #348]	; (8005dbc <HAL_RTC_SetAlarm_IT+0x274>)
 8005c60:	400a      	ands	r2, r1
 8005c62:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2101      	movs	r1, #1
 8005c70:	430a      	orrs	r2, r1
 8005c72:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005c74:	f7fe f8ea 	bl	8003e4c <HAL_GetTick>
 8005c78:	0003      	movs	r3, r0
 8005c7a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005c7c:	e016      	b.n	8005cac <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c7e:	f7fe f8e5 	bl	8003e4c <HAL_GetTick>
 8005c82:	0002      	movs	r2, r0
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	1ad2      	subs	r2, r2, r3
 8005c88:	23fa      	movs	r3, #250	; 0xfa
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d90d      	bls.n	8005cac <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	22ff      	movs	r2, #255	; 0xff
 8005c96:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2229      	movs	r2, #41	; 0x29
 8005c9c:	2103      	movs	r1, #3
 8005c9e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2228      	movs	r2, #40	; 0x28
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e082      	b.n	8005db2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	d0e2      	beq.n	8005c7e <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2180      	movs	r1, #128	; 0x80
 8005cd4:	0049      	lsls	r1, r1, #1
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	699a      	ldr	r2, [r3, #24]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2180      	movs	r1, #128	; 0x80
 8005ce6:	0149      	lsls	r1, r1, #5
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	619a      	str	r2, [r3, #24]
 8005cec:	e04b      	b.n	8005d86 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	699a      	ldr	r2, [r3, #24]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4931      	ldr	r1, [pc, #196]	; (8005dc0 <HAL_RTC_SetAlarm_IT+0x278>)
 8005cfa:	400a      	ands	r2, r1
 8005cfc:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2102      	movs	r1, #2
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005d0e:	f7fe f89d 	bl	8003e4c <HAL_GetTick>
 8005d12:	0003      	movs	r3, r0
 8005d14:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005d16:	e016      	b.n	8005d46 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d18:	f7fe f898 	bl	8003e4c <HAL_GetTick>
 8005d1c:	0002      	movs	r2, r0
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	1ad2      	subs	r2, r2, r3
 8005d22:	23fa      	movs	r3, #250	; 0xfa
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d90d      	bls.n	8005d46 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	22ff      	movs	r2, #255	; 0xff
 8005d30:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2229      	movs	r2, #41	; 0x29
 8005d36:	2103      	movs	r1, #3
 8005d38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2228      	movs	r2, #40	; 0x28
 8005d3e:	2100      	movs	r1, #0
 8005d40:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e035      	b.n	8005db2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	4013      	ands	r3, r2
 8005d50:	d0e2      	beq.n	8005d18 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699a      	ldr	r2, [r3, #24]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2180      	movs	r1, #128	; 0x80
 8005d6e:	0089      	lsls	r1, r1, #2
 8005d70:	430a      	orrs	r2, r1
 8005d72:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699a      	ldr	r2, [r3, #24]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2180      	movs	r1, #128	; 0x80
 8005d80:	0189      	lsls	r1, r1, #6
 8005d82:	430a      	orrs	r2, r1
 8005d84:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005d86:	4a0f      	ldr	r2, [pc, #60]	; (8005dc4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005d88:	2380      	movs	r3, #128	; 0x80
 8005d8a:	58d3      	ldr	r3, [r2, r3]
 8005d8c:	490d      	ldr	r1, [pc, #52]	; (8005dc4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005d8e:	2280      	movs	r2, #128	; 0x80
 8005d90:	0312      	lsls	r2, r2, #12
 8005d92:	4313      	orrs	r3, r2
 8005d94:	2280      	movs	r2, #128	; 0x80
 8005d96:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	22ff      	movs	r2, #255	; 0xff
 8005d9e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2229      	movs	r2, #41	; 0x29
 8005da4:	2101      	movs	r1, #1
 8005da6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2228      	movs	r2, #40	; 0x28
 8005dac:	2100      	movs	r1, #0
 8005dae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	0018      	movs	r0, r3
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b009      	add	sp, #36	; 0x24
 8005db8:	bd90      	pop	{r4, r7, pc}
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	fffffeff 	.word	0xfffffeff
 8005dc0:	fffffdff 	.word	0xfffffdff
 8005dc4:	40021800 	.word	0x40021800

08005dc8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	2380      	movs	r3, #128	; 0x80
 8005dd8:	015b      	lsls	r3, r3, #5
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d011      	beq.n	8005e02 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de4:	2201      	movs	r2, #1
 8005de6:	4013      	ands	r3, r2
 8005de8:	d00b      	beq.n	8005e02 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2101      	movs	r1, #1
 8005df6:	430a      	orrs	r2, r1
 8005df8:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f7fd fbf5 	bl	80035ec <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	699a      	ldr	r2, [r3, #24]
 8005e08:	2380      	movs	r3, #128	; 0x80
 8005e0a:	019b      	lsls	r3, r3, #6
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	d011      	beq.n	8005e34 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e16:	2202      	movs	r2, #2
 8005e18:	4013      	ands	r3, r2
 8005e1a:	d00b      	beq.n	8005e34 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2102      	movs	r1, #2
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f000 f961 	bl	80060f6 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2229      	movs	r2, #41	; 0x29
 8005e38:	2101      	movs	r1, #1
 8005e3a:	5499      	strb	r1, [r3, r2]
}
 8005e3c:	46c0      	nop			; (mov r8, r8)
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b002      	add	sp, #8
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a0e      	ldr	r2, [pc, #56]	; (8005e8c <HAL_RTC_WaitForSynchro+0x48>)
 8005e52:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005e54:	f7fd fffa 	bl	8003e4c <HAL_GetTick>
 8005e58:	0003      	movs	r3, r0
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005e5c:	e00a      	b.n	8005e74 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e5e:	f7fd fff5 	bl	8003e4c <HAL_GetTick>
 8005e62:	0002      	movs	r2, r0
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	1ad2      	subs	r2, r2, r3
 8005e68:	23fa      	movs	r3, #250	; 0xfa
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d901      	bls.n	8005e74 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e006      	b.n	8005e82 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	d0ee      	beq.n	8005e5e <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	0018      	movs	r0, r3
 8005e84:	46bd      	mov	sp, r7
 8005e86:	b004      	add	sp, #16
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	46c0      	nop			; (mov r8, r8)
 8005e8c:	0001005f 	.word	0x0001005f

08005e90 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005e98:	230f      	movs	r3, #15
 8005e9a:	18fb      	adds	r3, r7, r3
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	2240      	movs	r2, #64	; 0x40
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	d12c      	bne.n	8005f06 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2180      	movs	r1, #128	; 0x80
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005ebc:	f7fd ffc6 	bl	8003e4c <HAL_GetTick>
 8005ec0:	0003      	movs	r3, r0
 8005ec2:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005ec4:	e014      	b.n	8005ef0 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005ec6:	f7fd ffc1 	bl	8003e4c <HAL_GetTick>
 8005eca:	0002      	movs	r2, r0
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	1ad2      	subs	r2, r2, r3
 8005ed0:	200f      	movs	r0, #15
 8005ed2:	183b      	adds	r3, r7, r0
 8005ed4:	1839      	adds	r1, r7, r0
 8005ed6:	7809      	ldrb	r1, [r1, #0]
 8005ed8:	7019      	strb	r1, [r3, #0]
 8005eda:	23fa      	movs	r3, #250	; 0xfa
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d906      	bls.n	8005ef0 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005ee2:	183b      	adds	r3, r7, r0
 8005ee4:	2203      	movs	r2, #3
 8005ee6:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2229      	movs	r2, #41	; 0x29
 8005eec:	2103      	movs	r1, #3
 8005eee:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	2240      	movs	r2, #64	; 0x40
 8005ef8:	4013      	ands	r3, r2
 8005efa:	d104      	bne.n	8005f06 <RTC_EnterInitMode+0x76>
 8005efc:	230f      	movs	r3, #15
 8005efe:	18fb      	adds	r3, r7, r3
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d1df      	bne.n	8005ec6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005f06:	230f      	movs	r3, #15
 8005f08:	18fb      	adds	r3, r7, r3
 8005f0a:	781b      	ldrb	r3, [r3, #0]
}
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	b004      	add	sp, #16
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f14:	b590      	push	{r4, r7, lr}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f1c:	240f      	movs	r4, #15
 8005f1e:	193b      	adds	r3, r7, r4
 8005f20:	2200      	movs	r2, #0
 8005f22:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005f24:	4b1c      	ldr	r3, [pc, #112]	; (8005f98 <RTC_ExitInitMode+0x84>)
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	4b1b      	ldr	r3, [pc, #108]	; (8005f98 <RTC_ExitInitMode+0x84>)
 8005f2a:	2180      	movs	r1, #128	; 0x80
 8005f2c:	438a      	bics	r2, r1
 8005f2e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005f30:	4b19      	ldr	r3, [pc, #100]	; (8005f98 <RTC_ExitInitMode+0x84>)
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	2220      	movs	r2, #32
 8005f36:	4013      	ands	r3, r2
 8005f38:	d10d      	bne.n	8005f56 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	f7ff ff81 	bl	8005e44 <HAL_RTC_WaitForSynchro>
 8005f42:	1e03      	subs	r3, r0, #0
 8005f44:	d021      	beq.n	8005f8a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2229      	movs	r2, #41	; 0x29
 8005f4a:	2103      	movs	r1, #3
 8005f4c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005f4e:	193b      	adds	r3, r7, r4
 8005f50:	2203      	movs	r2, #3
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	e019      	b.n	8005f8a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f56:	4b10      	ldr	r3, [pc, #64]	; (8005f98 <RTC_ExitInitMode+0x84>)
 8005f58:	699a      	ldr	r2, [r3, #24]
 8005f5a:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <RTC_ExitInitMode+0x84>)
 8005f5c:	2120      	movs	r1, #32
 8005f5e:	438a      	bics	r2, r1
 8005f60:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	0018      	movs	r0, r3
 8005f66:	f7ff ff6d 	bl	8005e44 <HAL_RTC_WaitForSynchro>
 8005f6a:	1e03      	subs	r3, r0, #0
 8005f6c:	d007      	beq.n	8005f7e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2229      	movs	r2, #41	; 0x29
 8005f72:	2103      	movs	r1, #3
 8005f74:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005f76:	230f      	movs	r3, #15
 8005f78:	18fb      	adds	r3, r7, r3
 8005f7a:	2203      	movs	r2, #3
 8005f7c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f7e:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <RTC_ExitInitMode+0x84>)
 8005f80:	699a      	ldr	r2, [r3, #24]
 8005f82:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <RTC_ExitInitMode+0x84>)
 8005f84:	2120      	movs	r1, #32
 8005f86:	430a      	orrs	r2, r1
 8005f88:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005f8a:	230f      	movs	r3, #15
 8005f8c:	18fb      	adds	r3, r7, r3
 8005f8e:	781b      	ldrb	r3, [r3, #0]
}
 8005f90:	0018      	movs	r0, r3
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b005      	add	sp, #20
 8005f96:	bd90      	pop	{r4, r7, pc}
 8005f98:	40002800 	.word	0x40002800

08005f9c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	0002      	movs	r2, r0
 8005fa4:	1dfb      	adds	r3, r7, #7
 8005fa6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005fac:	230b      	movs	r3, #11
 8005fae:	18fb      	adds	r3, r7, r3
 8005fb0:	1dfa      	adds	r2, r7, #7
 8005fb2:	7812      	ldrb	r2, [r2, #0]
 8005fb4:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005fb6:	e008      	b.n	8005fca <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005fbe:	220b      	movs	r2, #11
 8005fc0:	18bb      	adds	r3, r7, r2
 8005fc2:	18ba      	adds	r2, r7, r2
 8005fc4:	7812      	ldrb	r2, [r2, #0]
 8005fc6:	3a0a      	subs	r2, #10
 8005fc8:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005fca:	210b      	movs	r1, #11
 8005fcc:	187b      	adds	r3, r7, r1
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b09      	cmp	r3, #9
 8005fd2:	d8f1      	bhi.n	8005fb8 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	187b      	adds	r3, r7, r1
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	b2db      	uxtb	r3, r3
}
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	b004      	add	sp, #16
 8005fea:	bd80      	pop	{r7, pc}

08005fec <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	0002      	movs	r2, r0
 8005ff4:	1dfb      	adds	r3, r7, #7
 8005ff6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005ff8:	1dfb      	adds	r3, r7, #7
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	091b      	lsrs	r3, r3, #4
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	001a      	movs	r2, r3
 8006002:	0013      	movs	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	189b      	adds	r3, r3, r2
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	b2da      	uxtb	r2, r3
 8006010:	1dfb      	adds	r3, r7, #7
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	210f      	movs	r1, #15
 8006016:	400b      	ands	r3, r1
 8006018:	b2db      	uxtb	r3, r3
 800601a:	18d3      	adds	r3, r2, r3
 800601c:	b2db      	uxtb	r3, r3
}
 800601e:	0018      	movs	r0, r3
 8006020:	46bd      	mov	sp, r7
 8006022:	b004      	add	sp, #16
 8006024:	bd80      	pop	{r7, pc}

08006026 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2228      	movs	r2, #40	; 0x28
 8006032:	5c9b      	ldrb	r3, [r3, r2]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_RTCEx_EnableBypassShadow+0x16>
 8006038:	2302      	movs	r3, #2
 800603a:	e024      	b.n	8006086 <HAL_RTCEx_EnableBypassShadow+0x60>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2228      	movs	r2, #40	; 0x28
 8006040:	2101      	movs	r1, #1
 8006042:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2229      	movs	r2, #41	; 0x29
 8006048:	2102      	movs	r1, #2
 800604a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	22ca      	movs	r2, #202	; 0xca
 8006052:	625a      	str	r2, [r3, #36]	; 0x24
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2253      	movs	r2, #83	; 0x53
 800605a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2120      	movs	r1, #32
 8006068:	430a      	orrs	r2, r1
 800606a:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	22ff      	movs	r2, #255	; 0xff
 8006072:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2229      	movs	r2, #41	; 0x29
 8006078:	2101      	movs	r1, #1
 800607a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2228      	movs	r2, #40	; 0x28
 8006080:	2100      	movs	r1, #0
 8006082:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	0018      	movs	r0, r3
 8006088:	46bd      	mov	sp, r7
 800608a:	b002      	add	sp, #8
 800608c:	bd80      	pop	{r7, pc}

0800608e <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b082      	sub	sp, #8
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2228      	movs	r2, #40	; 0x28
 800609a:	5c9b      	ldrb	r3, [r3, r2]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_RTCEx_DisableBypassShadow+0x16>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e024      	b.n	80060ee <HAL_RTCEx_DisableBypassShadow+0x60>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2228      	movs	r2, #40	; 0x28
 80060a8:	2101      	movs	r1, #1
 80060aa:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2229      	movs	r2, #41	; 0x29
 80060b0:	2102      	movs	r1, #2
 80060b2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	22ca      	movs	r2, #202	; 0xca
 80060ba:	625a      	str	r2, [r3, #36]	; 0x24
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2253      	movs	r2, #83	; 0x53
 80060c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	21df      	movs	r1, #223	; 0xdf
 80060d0:	400a      	ands	r2, r1
 80060d2:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	22ff      	movs	r2, #255	; 0xff
 80060da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2229      	movs	r2, #41	; 0x29
 80060e0:	2101      	movs	r1, #1
 80060e2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2228      	movs	r2, #40	; 0x28
 80060e8:	2100      	movs	r1, #0
 80060ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	0018      	movs	r0, r3
 80060f0:	46bd      	mov	sp, r7
 80060f2:	b002      	add	sp, #8
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b082      	sub	sp, #8
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80060fe:	46c0      	nop			; (mov r8, r8)
 8006100:	46bd      	mov	sp, r7
 8006102:	b002      	add	sp, #8
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e0a8      	b.n	800626c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	2b00      	cmp	r3, #0
 8006120:	d109      	bne.n	8006136 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	2382      	movs	r3, #130	; 0x82
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	429a      	cmp	r2, r3
 800612c:	d009      	beq.n	8006142 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	61da      	str	r2, [r3, #28]
 8006134:	e005      	b.n	8006142 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	225d      	movs	r2, #93	; 0x5d
 800614c:	5c9b      	ldrb	r3, [r3, r2]
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d107      	bne.n	8006164 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	225c      	movs	r2, #92	; 0x5c
 8006158:	2100      	movs	r1, #0
 800615a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	0018      	movs	r0, r3
 8006160:	f7fd fad0 	bl	8003704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	225d      	movs	r2, #93	; 0x5d
 8006168:	2102      	movs	r1, #2
 800616a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2140      	movs	r1, #64	; 0x40
 8006178:	438a      	bics	r2, r1
 800617a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	23e0      	movs	r3, #224	; 0xe0
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	429a      	cmp	r2, r3
 8006186:	d902      	bls.n	800618e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	e002      	b.n	8006194 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800618e:	2380      	movs	r3, #128	; 0x80
 8006190:	015b      	lsls	r3, r3, #5
 8006192:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	23f0      	movs	r3, #240	; 0xf0
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	429a      	cmp	r2, r3
 800619e:	d008      	beq.n	80061b2 <HAL_SPI_Init+0xaa>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	23e0      	movs	r3, #224	; 0xe0
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d002      	beq.n	80061b2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	2382      	movs	r3, #130	; 0x82
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	401a      	ands	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6899      	ldr	r1, [r3, #8]
 80061c0:	2384      	movs	r3, #132	; 0x84
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	400b      	ands	r3, r1
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2102      	movs	r1, #2
 80061ce:	400b      	ands	r3, r1
 80061d0:	431a      	orrs	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	2101      	movs	r1, #1
 80061d8:	400b      	ands	r3, r1
 80061da:	431a      	orrs	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6999      	ldr	r1, [r3, #24]
 80061e0:	2380      	movs	r3, #128	; 0x80
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	400b      	ands	r3, r1
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	2138      	movs	r1, #56	; 0x38
 80061ee:	400b      	ands	r3, r1
 80061f0:	431a      	orrs	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	2180      	movs	r1, #128	; 0x80
 80061f8:	400b      	ands	r3, r1
 80061fa:	431a      	orrs	r2, r3
 80061fc:	0011      	movs	r1, r2
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006202:	2380      	movs	r3, #128	; 0x80
 8006204:	019b      	lsls	r3, r3, #6
 8006206:	401a      	ands	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	0c1b      	lsrs	r3, r3, #16
 8006216:	2204      	movs	r2, #4
 8006218:	401a      	ands	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	2110      	movs	r1, #16
 8006220:	400b      	ands	r3, r1
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006228:	2108      	movs	r1, #8
 800622a:	400b      	ands	r3, r1
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68d9      	ldr	r1, [r3, #12]
 8006232:	23f0      	movs	r3, #240	; 0xf0
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	400b      	ands	r3, r1
 8006238:	431a      	orrs	r2, r3
 800623a:	0011      	movs	r1, r2
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	2380      	movs	r3, #128	; 0x80
 8006240:	015b      	lsls	r3, r3, #5
 8006242:	401a      	ands	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69da      	ldr	r2, [r3, #28]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4907      	ldr	r1, [pc, #28]	; (8006274 <HAL_SPI_Init+0x16c>)
 8006258:	400a      	ands	r2, r1
 800625a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	225d      	movs	r2, #93	; 0x5d
 8006266:	2101      	movs	r1, #1
 8006268:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	0018      	movs	r0, r3
 800626e:	46bd      	mov	sp, r7
 8006270:	b004      	add	sp, #16
 8006272:	bd80      	pop	{r7, pc}
 8006274:	fffff7ff 	.word	0xfffff7ff

08006278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e04a      	b.n	8006320 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	223d      	movs	r2, #61	; 0x3d
 800628e:	5c9b      	ldrb	r3, [r3, r2]
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d107      	bne.n	80062a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	223c      	movs	r2, #60	; 0x3c
 800629a:	2100      	movs	r1, #0
 800629c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	0018      	movs	r0, r3
 80062a2:	f7fd fa79 	bl	8003798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	223d      	movs	r2, #61	; 0x3d
 80062aa:	2102      	movs	r1, #2
 80062ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	3304      	adds	r3, #4
 80062b6:	0019      	movs	r1, r3
 80062b8:	0010      	movs	r0, r2
 80062ba:	f000 f9ed 	bl	8006698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2248      	movs	r2, #72	; 0x48
 80062c2:	2101      	movs	r1, #1
 80062c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	223e      	movs	r2, #62	; 0x3e
 80062ca:	2101      	movs	r1, #1
 80062cc:	5499      	strb	r1, [r3, r2]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	223f      	movs	r2, #63	; 0x3f
 80062d2:	2101      	movs	r1, #1
 80062d4:	5499      	strb	r1, [r3, r2]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2240      	movs	r2, #64	; 0x40
 80062da:	2101      	movs	r1, #1
 80062dc:	5499      	strb	r1, [r3, r2]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2241      	movs	r2, #65	; 0x41
 80062e2:	2101      	movs	r1, #1
 80062e4:	5499      	strb	r1, [r3, r2]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2242      	movs	r2, #66	; 0x42
 80062ea:	2101      	movs	r1, #1
 80062ec:	5499      	strb	r1, [r3, r2]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2243      	movs	r2, #67	; 0x43
 80062f2:	2101      	movs	r1, #1
 80062f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2244      	movs	r2, #68	; 0x44
 80062fa:	2101      	movs	r1, #1
 80062fc:	5499      	strb	r1, [r3, r2]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2245      	movs	r2, #69	; 0x45
 8006302:	2101      	movs	r1, #1
 8006304:	5499      	strb	r1, [r3, r2]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2246      	movs	r2, #70	; 0x46
 800630a:	2101      	movs	r1, #1
 800630c:	5499      	strb	r1, [r3, r2]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2247      	movs	r2, #71	; 0x47
 8006312:	2101      	movs	r1, #1
 8006314:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	223d      	movs	r2, #61	; 0x3d
 800631a:	2101      	movs	r1, #1
 800631c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	0018      	movs	r0, r3
 8006322:	46bd      	mov	sp, r7
 8006324:	b002      	add	sp, #8
 8006326:	bd80      	pop	{r7, pc}

08006328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	223d      	movs	r2, #61	; 0x3d
 8006334:	5c9b      	ldrb	r3, [r3, r2]
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b01      	cmp	r3, #1
 800633a:	d001      	beq.n	8006340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e047      	b.n	80063d0 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	223d      	movs	r2, #61	; 0x3d
 8006344:	2102      	movs	r1, #2
 8006346:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2101      	movs	r1, #1
 8006354:	430a      	orrs	r2, r1
 8006356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1e      	ldr	r2, [pc, #120]	; (80063d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d014      	beq.n	800638c <HAL_TIM_Base_Start_IT+0x64>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	2380      	movs	r3, #128	; 0x80
 8006368:	05db      	lsls	r3, r3, #23
 800636a:	429a      	cmp	r2, r3
 800636c:	d00e      	beq.n	800638c <HAL_TIM_Base_Start_IT+0x64>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a1a      	ldr	r2, [pc, #104]	; (80063dc <HAL_TIM_Base_Start_IT+0xb4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d009      	beq.n	800638c <HAL_TIM_Base_Start_IT+0x64>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a18      	ldr	r2, [pc, #96]	; (80063e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d004      	beq.n	800638c <HAL_TIM_Base_Start_IT+0x64>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a17      	ldr	r2, [pc, #92]	; (80063e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d116      	bne.n	80063ba <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	4a15      	ldr	r2, [pc, #84]	; (80063e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006394:	4013      	ands	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b06      	cmp	r3, #6
 800639c:	d016      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0xa4>
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	2380      	movs	r3, #128	; 0x80
 80063a2:	025b      	lsls	r3, r3, #9
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d011      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2101      	movs	r1, #1
 80063b4:	430a      	orrs	r2, r1
 80063b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b8:	e008      	b.n	80063cc <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2101      	movs	r1, #1
 80063c6:	430a      	orrs	r2, r1
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	e000      	b.n	80063ce <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063cc:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	0018      	movs	r0, r3
 80063d2:	46bd      	mov	sp, r7
 80063d4:	b004      	add	sp, #16
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40012c00 	.word	0x40012c00
 80063dc:	40000400 	.word	0x40000400
 80063e0:	40000800 	.word	0x40000800
 80063e4:	40014000 	.word	0x40014000
 80063e8:	00010007 	.word	0x00010007

080063ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2101      	movs	r1, #1
 8006400:	438a      	bics	r2, r1
 8006402:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	4a0d      	ldr	r2, [pc, #52]	; (8006440 <HAL_TIM_Base_Stop_IT+0x54>)
 800640c:	4013      	ands	r3, r2
 800640e:	d10d      	bne.n	800642c <HAL_TIM_Base_Stop_IT+0x40>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	4a0b      	ldr	r2, [pc, #44]	; (8006444 <HAL_TIM_Base_Stop_IT+0x58>)
 8006418:	4013      	ands	r3, r2
 800641a:	d107      	bne.n	800642c <HAL_TIM_Base_Stop_IT+0x40>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2101      	movs	r1, #1
 8006428:	438a      	bics	r2, r1
 800642a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	223d      	movs	r2, #61	; 0x3d
 8006430:	2101      	movs	r1, #1
 8006432:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	0018      	movs	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	b002      	add	sp, #8
 800643c:	bd80      	pop	{r7, pc}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	00001111 	.word	0x00001111
 8006444:	00000444 	.word	0x00000444

08006448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2202      	movs	r2, #2
 8006464:	4013      	ands	r3, r2
 8006466:	d021      	beq.n	80064ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2202      	movs	r2, #2
 800646c:	4013      	ands	r3, r2
 800646e:	d01d      	beq.n	80064ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2203      	movs	r2, #3
 8006476:	4252      	negs	r2, r2
 8006478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	2203      	movs	r2, #3
 8006488:	4013      	ands	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	0018      	movs	r0, r3
 8006490:	f000 f8ea 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 8006494:	e007      	b.n	80064a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	0018      	movs	r0, r3
 800649a:	f000 f8dd 	bl	8006658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	0018      	movs	r0, r3
 80064a2:	f000 f8e9 	bl	8006678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2204      	movs	r2, #4
 80064b0:	4013      	ands	r3, r2
 80064b2:	d022      	beq.n	80064fa <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2204      	movs	r2, #4
 80064b8:	4013      	ands	r3, r2
 80064ba:	d01e      	beq.n	80064fa <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2205      	movs	r2, #5
 80064c2:	4252      	negs	r2, r2
 80064c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2202      	movs	r2, #2
 80064ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	23c0      	movs	r3, #192	; 0xc0
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4013      	ands	r3, r2
 80064d8:	d004      	beq.n	80064e4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	0018      	movs	r0, r3
 80064de:	f000 f8c3 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 80064e2:	e007      	b.n	80064f4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	0018      	movs	r0, r3
 80064e8:	f000 f8b6 	bl	8006658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	0018      	movs	r0, r3
 80064f0:	f000 f8c2 	bl	8006678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2208      	movs	r2, #8
 80064fe:	4013      	ands	r3, r2
 8006500:	d021      	beq.n	8006546 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2208      	movs	r2, #8
 8006506:	4013      	ands	r3, r2
 8006508:	d01d      	beq.n	8006546 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2209      	movs	r2, #9
 8006510:	4252      	negs	r2, r2
 8006512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2204      	movs	r2, #4
 8006518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	2203      	movs	r2, #3
 8006522:	4013      	ands	r3, r2
 8006524:	d004      	beq.n	8006530 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	0018      	movs	r0, r3
 800652a:	f000 f89d 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 800652e:	e007      	b.n	8006540 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	0018      	movs	r0, r3
 8006534:	f000 f890 	bl	8006658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	0018      	movs	r0, r3
 800653c:	f000 f89c 	bl	8006678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2210      	movs	r2, #16
 800654a:	4013      	ands	r3, r2
 800654c:	d022      	beq.n	8006594 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2210      	movs	r2, #16
 8006552:	4013      	ands	r3, r2
 8006554:	d01e      	beq.n	8006594 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2211      	movs	r2, #17
 800655c:	4252      	negs	r2, r2
 800655e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2208      	movs	r2, #8
 8006564:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	23c0      	movs	r3, #192	; 0xc0
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4013      	ands	r3, r2
 8006572:	d004      	beq.n	800657e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	0018      	movs	r0, r3
 8006578:	f000 f876 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 800657c:	e007      	b.n	800658e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	0018      	movs	r0, r3
 8006582:	f000 f869 	bl	8006658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	0018      	movs	r0, r3
 800658a:	f000 f875 	bl	8006678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2201      	movs	r2, #1
 8006598:	4013      	ands	r3, r2
 800659a:	d00c      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2201      	movs	r2, #1
 80065a0:	4013      	ands	r3, r2
 80065a2:	d008      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2202      	movs	r2, #2
 80065aa:	4252      	negs	r2, r2
 80065ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	0018      	movs	r0, r3
 80065b2:	f7fc ffe1 	bl	8003578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2280      	movs	r2, #128	; 0x80
 80065ba:	4013      	ands	r3, r2
 80065bc:	d104      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	2380      	movs	r3, #128	; 0x80
 80065c2:	019b      	lsls	r3, r3, #6
 80065c4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065c6:	d00b      	beq.n	80065e0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2280      	movs	r2, #128	; 0x80
 80065cc:	4013      	ands	r3, r2
 80065ce:	d007      	beq.n	80065e0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1e      	ldr	r2, [pc, #120]	; (8006650 <HAL_TIM_IRQHandler+0x208>)
 80065d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	0018      	movs	r0, r3
 80065dc:	f000 f972 	bl	80068c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	2380      	movs	r3, #128	; 0x80
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	4013      	ands	r3, r2
 80065e8:	d00b      	beq.n	8006602 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2280      	movs	r2, #128	; 0x80
 80065ee:	4013      	ands	r3, r2
 80065f0:	d007      	beq.n	8006602 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a17      	ldr	r2, [pc, #92]	; (8006654 <HAL_TIM_IRQHandler+0x20c>)
 80065f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	0018      	movs	r0, r3
 80065fe:	f000 f969 	bl	80068d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2240      	movs	r2, #64	; 0x40
 8006606:	4013      	ands	r3, r2
 8006608:	d00c      	beq.n	8006624 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2240      	movs	r2, #64	; 0x40
 800660e:	4013      	ands	r3, r2
 8006610:	d008      	beq.n	8006624 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2241      	movs	r2, #65	; 0x41
 8006618:	4252      	negs	r2, r2
 800661a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	0018      	movs	r0, r3
 8006620:	f000 f832 	bl	8006688 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2220      	movs	r2, #32
 8006628:	4013      	ands	r3, r2
 800662a:	d00c      	beq.n	8006646 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2220      	movs	r2, #32
 8006630:	4013      	ands	r3, r2
 8006632:	d008      	beq.n	8006646 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2221      	movs	r2, #33	; 0x21
 800663a:	4252      	negs	r2, r2
 800663c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	0018      	movs	r0, r3
 8006642:	f000 f937 	bl	80068b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006646:	46c0      	nop			; (mov r8, r8)
 8006648:	46bd      	mov	sp, r7
 800664a:	b004      	add	sp, #16
 800664c:	bd80      	pop	{r7, pc}
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	ffffdf7f 	.word	0xffffdf7f
 8006654:	fffffeff 	.word	0xfffffeff

08006658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006660:	46c0      	nop			; (mov r8, r8)
 8006662:	46bd      	mov	sp, r7
 8006664:	b002      	add	sp, #8
 8006666:	bd80      	pop	{r7, pc}

08006668 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006670:	46c0      	nop			; (mov r8, r8)
 8006672:	46bd      	mov	sp, r7
 8006674:	b002      	add	sp, #8
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006680:	46c0      	nop			; (mov r8, r8)
 8006682:	46bd      	mov	sp, r7
 8006684:	b002      	add	sp, #8
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006690:	46c0      	nop			; (mov r8, r8)
 8006692:	46bd      	mov	sp, r7
 8006694:	b002      	add	sp, #8
 8006696:	bd80      	pop	{r7, pc}

08006698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a3f      	ldr	r2, [pc, #252]	; (80067a8 <TIM_Base_SetConfig+0x110>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00c      	beq.n	80066ca <TIM_Base_SetConfig+0x32>
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	2380      	movs	r3, #128	; 0x80
 80066b4:	05db      	lsls	r3, r3, #23
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d007      	beq.n	80066ca <TIM_Base_SetConfig+0x32>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a3b      	ldr	r2, [pc, #236]	; (80067ac <TIM_Base_SetConfig+0x114>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d003      	beq.n	80066ca <TIM_Base_SetConfig+0x32>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a3a      	ldr	r2, [pc, #232]	; (80067b0 <TIM_Base_SetConfig+0x118>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d108      	bne.n	80066dc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2270      	movs	r2, #112	; 0x70
 80066ce:	4393      	bics	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	4313      	orrs	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a32      	ldr	r2, [pc, #200]	; (80067a8 <TIM_Base_SetConfig+0x110>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d01c      	beq.n	800671e <TIM_Base_SetConfig+0x86>
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	2380      	movs	r3, #128	; 0x80
 80066e8:	05db      	lsls	r3, r3, #23
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d017      	beq.n	800671e <TIM_Base_SetConfig+0x86>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a2e      	ldr	r2, [pc, #184]	; (80067ac <TIM_Base_SetConfig+0x114>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d013      	beq.n	800671e <TIM_Base_SetConfig+0x86>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a2d      	ldr	r2, [pc, #180]	; (80067b0 <TIM_Base_SetConfig+0x118>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d00f      	beq.n	800671e <TIM_Base_SetConfig+0x86>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a2c      	ldr	r2, [pc, #176]	; (80067b4 <TIM_Base_SetConfig+0x11c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00b      	beq.n	800671e <TIM_Base_SetConfig+0x86>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a2b      	ldr	r2, [pc, #172]	; (80067b8 <TIM_Base_SetConfig+0x120>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d007      	beq.n	800671e <TIM_Base_SetConfig+0x86>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a2a      	ldr	r2, [pc, #168]	; (80067bc <TIM_Base_SetConfig+0x124>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d003      	beq.n	800671e <TIM_Base_SetConfig+0x86>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a29      	ldr	r2, [pc, #164]	; (80067c0 <TIM_Base_SetConfig+0x128>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d108      	bne.n	8006730 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4a28      	ldr	r2, [pc, #160]	; (80067c4 <TIM_Base_SetConfig+0x12c>)
 8006722:	4013      	ands	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2280      	movs	r2, #128	; 0x80
 8006734:	4393      	bics	r3, r2
 8006736:	001a      	movs	r2, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	689a      	ldr	r2, [r3, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a13      	ldr	r2, [pc, #76]	; (80067a8 <TIM_Base_SetConfig+0x110>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00b      	beq.n	8006776 <TIM_Base_SetConfig+0xde>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a15      	ldr	r2, [pc, #84]	; (80067b8 <TIM_Base_SetConfig+0x120>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d007      	beq.n	8006776 <TIM_Base_SetConfig+0xde>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a14      	ldr	r2, [pc, #80]	; (80067bc <TIM_Base_SetConfig+0x124>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d003      	beq.n	8006776 <TIM_Base_SetConfig+0xde>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a13      	ldr	r2, [pc, #76]	; (80067c0 <TIM_Base_SetConfig+0x128>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d103      	bne.n	800677e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	691a      	ldr	r2, [r3, #16]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	2201      	movs	r2, #1
 800678a:	4013      	ands	r3, r2
 800678c:	2b01      	cmp	r3, #1
 800678e:	d106      	bne.n	800679e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	2201      	movs	r2, #1
 8006796:	4393      	bics	r3, r2
 8006798:	001a      	movs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	611a      	str	r2, [r3, #16]
  }
}
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	46bd      	mov	sp, r7
 80067a2:	b004      	add	sp, #16
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	46c0      	nop			; (mov r8, r8)
 80067a8:	40012c00 	.word	0x40012c00
 80067ac:	40000400 	.word	0x40000400
 80067b0:	40000800 	.word	0x40000800
 80067b4:	40002000 	.word	0x40002000
 80067b8:	40014000 	.word	0x40014000
 80067bc:	40014400 	.word	0x40014400
 80067c0:	40014800 	.word	0x40014800
 80067c4:	fffffcff 	.word	0xfffffcff

080067c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	223c      	movs	r2, #60	; 0x3c
 80067d6:	5c9b      	ldrb	r3, [r3, r2]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d101      	bne.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067dc:	2302      	movs	r3, #2
 80067de:	e05a      	b.n	8006896 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	223c      	movs	r2, #60	; 0x3c
 80067e4:	2101      	movs	r1, #1
 80067e6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	223d      	movs	r2, #61	; 0x3d
 80067ec:	2102      	movs	r1, #2
 80067ee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a26      	ldr	r2, [pc, #152]	; (80068a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d108      	bne.n	800681c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4a25      	ldr	r2, [pc, #148]	; (80068a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800680e:	4013      	ands	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2270      	movs	r2, #112	; 0x70
 8006820:	4393      	bics	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	4313      	orrs	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a19      	ldr	r2, [pc, #100]	; (80068a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d014      	beq.n	800686a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	2380      	movs	r3, #128	; 0x80
 8006846:	05db      	lsls	r3, r3, #23
 8006848:	429a      	cmp	r2, r3
 800684a:	d00e      	beq.n	800686a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a15      	ldr	r2, [pc, #84]	; (80068a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d009      	beq.n	800686a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a14      	ldr	r2, [pc, #80]	; (80068ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d004      	beq.n	800686a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a12      	ldr	r2, [pc, #72]	; (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d10c      	bne.n	8006884 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2280      	movs	r2, #128	; 0x80
 800686e:	4393      	bics	r3, r2
 8006870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	4313      	orrs	r3, r2
 800687a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	223d      	movs	r2, #61	; 0x3d
 8006888:	2101      	movs	r1, #1
 800688a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	223c      	movs	r2, #60	; 0x3c
 8006890:	2100      	movs	r1, #0
 8006892:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	0018      	movs	r0, r3
 8006898:	46bd      	mov	sp, r7
 800689a:	b004      	add	sp, #16
 800689c:	bd80      	pop	{r7, pc}
 800689e:	46c0      	nop			; (mov r8, r8)
 80068a0:	40012c00 	.word	0x40012c00
 80068a4:	ff0fffff 	.word	0xff0fffff
 80068a8:	40000400 	.word	0x40000400
 80068ac:	40000800 	.word	0x40000800
 80068b0:	40014000 	.word	0x40014000

080068b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068bc:	46c0      	nop			; (mov r8, r8)
 80068be:	46bd      	mov	sp, r7
 80068c0:	b002      	add	sp, #8
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068cc:	46c0      	nop			; (mov r8, r8)
 80068ce:	46bd      	mov	sp, r7
 80068d0:	b002      	add	sp, #8
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068dc:	46c0      	nop			; (mov r8, r8)
 80068de:	46bd      	mov	sp, r7
 80068e0:	b002      	add	sp, #8
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e046      	b.n	8006984 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2288      	movs	r2, #136	; 0x88
 80068fa:	589b      	ldr	r3, [r3, r2]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d107      	bne.n	8006910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2284      	movs	r2, #132	; 0x84
 8006904:	2100      	movs	r1, #0
 8006906:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	0018      	movs	r0, r3
 800690c:	f7fc ff6a 	bl	80037e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2288      	movs	r2, #136	; 0x88
 8006914:	2124      	movs	r1, #36	; 0x24
 8006916:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2101      	movs	r1, #1
 8006924:	438a      	bics	r2, r1
 8006926:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	0018      	movs	r0, r3
 8006934:	f000 fd4c 	bl	80073d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	0018      	movs	r0, r3
 800693c:	f000 f9f2 	bl	8006d24 <UART_SetConfig>
 8006940:	0003      	movs	r3, r0
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e01c      	b.n	8006984 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	490d      	ldr	r1, [pc, #52]	; (800698c <HAL_UART_Init+0xa8>)
 8006956:	400a      	ands	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	212a      	movs	r1, #42	; 0x2a
 8006966:	438a      	bics	r2, r1
 8006968:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2101      	movs	r1, #1
 8006976:	430a      	orrs	r2, r1
 8006978:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	0018      	movs	r0, r3
 800697e:	f000 fddb 	bl	8007538 <UART_CheckIdleState>
 8006982:	0003      	movs	r3, r0
}
 8006984:	0018      	movs	r0, r3
 8006986:	46bd      	mov	sp, r7
 8006988:	b002      	add	sp, #8
 800698a:	bd80      	pop	{r7, pc}
 800698c:	ffffb7ff 	.word	0xffffb7ff

08006990 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e032      	b.n	8006a08 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2288      	movs	r2, #136	; 0x88
 80069a6:	2124      	movs	r1, #36	; 0x24
 80069a8:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2101      	movs	r1, #1
 80069b6:	438a      	bics	r2, r1
 80069b8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2200      	movs	r2, #0
 80069c8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2200      	movs	r2, #0
 80069d0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	0018      	movs	r0, r3
 80069d6:	f7fd f831 	bl	8003a3c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2290      	movs	r2, #144	; 0x90
 80069de:	2100      	movs	r1, #0
 80069e0:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2288      	movs	r2, #136	; 0x88
 80069e6:	2100      	movs	r1, #0
 80069e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	228c      	movs	r2, #140	; 0x8c
 80069ee:	2100      	movs	r1, #0
 80069f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2284      	movs	r2, #132	; 0x84
 8006a02:	2100      	movs	r1, #0
 8006a04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	0018      	movs	r0, r3
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	b002      	add	sp, #8
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08a      	sub	sp, #40	; 0x28
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	603b      	str	r3, [r7, #0]
 8006a1c:	1dbb      	adds	r3, r7, #6
 8006a1e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2288      	movs	r2, #136	; 0x88
 8006a24:	589b      	ldr	r3, [r3, r2]
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d000      	beq.n	8006a2c <HAL_UART_Transmit+0x1c>
 8006a2a:	e090      	b.n	8006b4e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_UART_Transmit+0x2a>
 8006a32:	1dbb      	adds	r3, r7, #6
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e088      	b.n	8006b50 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	689a      	ldr	r2, [r3, #8]
 8006a42:	2380      	movs	r3, #128	; 0x80
 8006a44:	015b      	lsls	r3, r3, #5
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d109      	bne.n	8006a5e <HAL_UART_Transmit+0x4e>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d105      	bne.n	8006a5e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2201      	movs	r2, #1
 8006a56:	4013      	ands	r3, r2
 8006a58:	d001      	beq.n	8006a5e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e078      	b.n	8006b50 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2290      	movs	r2, #144	; 0x90
 8006a62:	2100      	movs	r1, #0
 8006a64:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2288      	movs	r2, #136	; 0x88
 8006a6a:	2121      	movs	r1, #33	; 0x21
 8006a6c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a6e:	f7fd f9ed 	bl	8003e4c <HAL_GetTick>
 8006a72:	0003      	movs	r3, r0
 8006a74:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	1dba      	adds	r2, r7, #6
 8006a7a:	2154      	movs	r1, #84	; 0x54
 8006a7c:	8812      	ldrh	r2, [r2, #0]
 8006a7e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	1dba      	adds	r2, r7, #6
 8006a84:	2156      	movs	r1, #86	; 0x56
 8006a86:	8812      	ldrh	r2, [r2, #0]
 8006a88:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	2380      	movs	r3, #128	; 0x80
 8006a90:	015b      	lsls	r3, r3, #5
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d108      	bne.n	8006aa8 <HAL_UART_Transmit+0x98>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d104      	bne.n	8006aa8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	61bb      	str	r3, [r7, #24]
 8006aa6:	e003      	b.n	8006ab0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006aac:	2300      	movs	r3, #0
 8006aae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ab0:	e030      	b.n	8006b14 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	0013      	movs	r3, r2
 8006abc:	2200      	movs	r2, #0
 8006abe:	2180      	movs	r1, #128	; 0x80
 8006ac0:	f000 fde4 	bl	800768c <UART_WaitOnFlagUntilTimeout>
 8006ac4:	1e03      	subs	r3, r0, #0
 8006ac6:	d005      	beq.n	8006ad4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2288      	movs	r2, #136	; 0x88
 8006acc:	2120      	movs	r1, #32
 8006ace:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e03d      	b.n	8006b50 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10b      	bne.n	8006af2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	001a      	movs	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	05d2      	lsls	r2, r2, #23
 8006ae6:	0dd2      	lsrs	r2, r2, #23
 8006ae8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	3302      	adds	r3, #2
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	e007      	b.n	8006b02 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	781a      	ldrb	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	3301      	adds	r3, #1
 8006b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2256      	movs	r2, #86	; 0x56
 8006b06:	5a9b      	ldrh	r3, [r3, r2]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b299      	uxth	r1, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2256      	movs	r2, #86	; 0x56
 8006b12:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2256      	movs	r2, #86	; 0x56
 8006b18:	5a9b      	ldrh	r3, [r3, r2]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1c8      	bne.n	8006ab2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	0013      	movs	r3, r2
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2140      	movs	r1, #64	; 0x40
 8006b2e:	f000 fdad 	bl	800768c <UART_WaitOnFlagUntilTimeout>
 8006b32:	1e03      	subs	r3, r0, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2288      	movs	r2, #136	; 0x88
 8006b3a:	2120      	movs	r1, #32
 8006b3c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e006      	b.n	8006b50 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2288      	movs	r2, #136	; 0x88
 8006b46:	2120      	movs	r1, #32
 8006b48:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	e000      	b.n	8006b50 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006b4e:	2302      	movs	r3, #2
  }
}
 8006b50:	0018      	movs	r0, r3
 8006b52:	46bd      	mov	sp, r7
 8006b54:	b008      	add	sp, #32
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08a      	sub	sp, #40	; 0x28
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	603b      	str	r3, [r7, #0]
 8006b64:	1dbb      	adds	r3, r7, #6
 8006b66:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	228c      	movs	r2, #140	; 0x8c
 8006b6c:	589b      	ldr	r3, [r3, r2]
 8006b6e:	2b20      	cmp	r3, #32
 8006b70:	d000      	beq.n	8006b74 <HAL_UART_Receive+0x1c>
 8006b72:	e0d0      	b.n	8006d16 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_UART_Receive+0x2a>
 8006b7a:	1dbb      	adds	r3, r7, #6
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e0c8      	b.n	8006d18 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	2380      	movs	r3, #128	; 0x80
 8006b8c:	015b      	lsls	r3, r3, #5
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d109      	bne.n	8006ba6 <HAL_UART_Receive+0x4e>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d105      	bne.n	8006ba6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	d001      	beq.n	8006ba6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e0b8      	b.n	8006d18 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2290      	movs	r2, #144	; 0x90
 8006baa:	2100      	movs	r1, #0
 8006bac:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	228c      	movs	r2, #140	; 0x8c
 8006bb2:	2122      	movs	r1, #34	; 0x22
 8006bb4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bbc:	f7fd f946 	bl	8003e4c <HAL_GetTick>
 8006bc0:	0003      	movs	r3, r0
 8006bc2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	1dba      	adds	r2, r7, #6
 8006bc8:	215c      	movs	r1, #92	; 0x5c
 8006bca:	8812      	ldrh	r2, [r2, #0]
 8006bcc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	1dba      	adds	r2, r7, #6
 8006bd2:	215e      	movs	r1, #94	; 0x5e
 8006bd4:	8812      	ldrh	r2, [r2, #0]
 8006bd6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	2380      	movs	r3, #128	; 0x80
 8006bde:	015b      	lsls	r3, r3, #5
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d10d      	bne.n	8006c00 <HAL_UART_Receive+0xa8>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d104      	bne.n	8006bf6 <HAL_UART_Receive+0x9e>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2260      	movs	r2, #96	; 0x60
 8006bf0:	494b      	ldr	r1, [pc, #300]	; (8006d20 <HAL_UART_Receive+0x1c8>)
 8006bf2:	5299      	strh	r1, [r3, r2]
 8006bf4:	e02e      	b.n	8006c54 <HAL_UART_Receive+0xfc>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2260      	movs	r2, #96	; 0x60
 8006bfa:	21ff      	movs	r1, #255	; 0xff
 8006bfc:	5299      	strh	r1, [r3, r2]
 8006bfe:	e029      	b.n	8006c54 <HAL_UART_Receive+0xfc>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10d      	bne.n	8006c24 <HAL_UART_Receive+0xcc>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <HAL_UART_Receive+0xc2>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2260      	movs	r2, #96	; 0x60
 8006c14:	21ff      	movs	r1, #255	; 0xff
 8006c16:	5299      	strh	r1, [r3, r2]
 8006c18:	e01c      	b.n	8006c54 <HAL_UART_Receive+0xfc>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2260      	movs	r2, #96	; 0x60
 8006c1e:	217f      	movs	r1, #127	; 0x7f
 8006c20:	5299      	strh	r1, [r3, r2]
 8006c22:	e017      	b.n	8006c54 <HAL_UART_Receive+0xfc>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	2380      	movs	r3, #128	; 0x80
 8006c2a:	055b      	lsls	r3, r3, #21
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d10d      	bne.n	8006c4c <HAL_UART_Receive+0xf4>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d104      	bne.n	8006c42 <HAL_UART_Receive+0xea>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2260      	movs	r2, #96	; 0x60
 8006c3c:	217f      	movs	r1, #127	; 0x7f
 8006c3e:	5299      	strh	r1, [r3, r2]
 8006c40:	e008      	b.n	8006c54 <HAL_UART_Receive+0xfc>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2260      	movs	r2, #96	; 0x60
 8006c46:	213f      	movs	r1, #63	; 0x3f
 8006c48:	5299      	strh	r1, [r3, r2]
 8006c4a:	e003      	b.n	8006c54 <HAL_UART_Receive+0xfc>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2260      	movs	r2, #96	; 0x60
 8006c50:	2100      	movs	r1, #0
 8006c52:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006c54:	2312      	movs	r3, #18
 8006c56:	18fb      	adds	r3, r7, r3
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	2160      	movs	r1, #96	; 0x60
 8006c5c:	5a52      	ldrh	r2, [r2, r1]
 8006c5e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	2380      	movs	r3, #128	; 0x80
 8006c66:	015b      	lsls	r3, r3, #5
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d108      	bne.n	8006c7e <HAL_UART_Receive+0x126>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d104      	bne.n	8006c7e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006c74:	2300      	movs	r3, #0
 8006c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	61bb      	str	r3, [r7, #24]
 8006c7c:	e003      	b.n	8006c86 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006c86:	e03a      	b.n	8006cfe <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	0013      	movs	r3, r2
 8006c92:	2200      	movs	r2, #0
 8006c94:	2120      	movs	r1, #32
 8006c96:	f000 fcf9 	bl	800768c <UART_WaitOnFlagUntilTimeout>
 8006c9a:	1e03      	subs	r3, r0, #0
 8006c9c:	d005      	beq.n	8006caa <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	228c      	movs	r2, #140	; 0x8c
 8006ca2:	2120      	movs	r1, #32
 8006ca4:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e036      	b.n	8006d18 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10e      	bne.n	8006cce <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	2212      	movs	r2, #18
 8006cba:	18ba      	adds	r2, r7, r2
 8006cbc:	8812      	ldrh	r2, [r2, #0]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	3302      	adds	r3, #2
 8006cca:	61bb      	str	r3, [r7, #24]
 8006ccc:	e00e      	b.n	8006cec <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2212      	movs	r2, #18
 8006cd8:	18ba      	adds	r2, r7, r2
 8006cda:	8812      	ldrh	r2, [r2, #0]
 8006cdc:	b2d2      	uxtb	r2, r2
 8006cde:	4013      	ands	r3, r2
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	225e      	movs	r2, #94	; 0x5e
 8006cf0:	5a9b      	ldrh	r3, [r3, r2]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b299      	uxth	r1, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	225e      	movs	r2, #94	; 0x5e
 8006cfc:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	225e      	movs	r2, #94	; 0x5e
 8006d02:	5a9b      	ldrh	r3, [r3, r2]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1be      	bne.n	8006c88 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	228c      	movs	r2, #140	; 0x8c
 8006d0e:	2120      	movs	r1, #32
 8006d10:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	e000      	b.n	8006d18 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8006d16:	2302      	movs	r3, #2
  }
}
 8006d18:	0018      	movs	r0, r3
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	b008      	add	sp, #32
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	000001ff 	.word	0x000001ff

08006d24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d24:	b5b0      	push	{r4, r5, r7, lr}
 8006d26:	b090      	sub	sp, #64	; 0x40
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d2c:	231a      	movs	r3, #26
 8006d2e:	2220      	movs	r2, #32
 8006d30:	189b      	adds	r3, r3, r2
 8006d32:	19db      	adds	r3, r3, r7
 8006d34:	2200      	movs	r2, #0
 8006d36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	431a      	orrs	r2, r3
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	431a      	orrs	r2, r3
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4ac1      	ldr	r2, [pc, #772]	; (800705c <UART_SetConfig+0x338>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	0019      	movs	r1, r3
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d62:	430b      	orrs	r3, r1
 8006d64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	4abc      	ldr	r2, [pc, #752]	; (8007060 <UART_SetConfig+0x33c>)
 8006d6e:	4013      	ands	r3, r2
 8006d70:	0018      	movs	r0, r3
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	68d9      	ldr	r1, [r3, #12]
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	0003      	movs	r3, r0
 8006d7c:	430b      	orrs	r3, r1
 8006d7e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4ab6      	ldr	r2, [pc, #728]	; (8007064 <UART_SetConfig+0x340>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d009      	beq.n	8006da4 <UART_SetConfig+0x80>
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4ab4      	ldr	r2, [pc, #720]	; (8007068 <UART_SetConfig+0x344>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d004      	beq.n	8006da4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006da0:	4313      	orrs	r3, r2
 8006da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	4ab0      	ldr	r2, [pc, #704]	; (800706c <UART_SetConfig+0x348>)
 8006dac:	4013      	ands	r3, r2
 8006dae:	0019      	movs	r1, r3
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db6:	430b      	orrs	r3, r1
 8006db8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	220f      	movs	r2, #15
 8006dc2:	4393      	bics	r3, r2
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	0003      	movs	r3, r0
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4aa5      	ldr	r2, [pc, #660]	; (8007070 <UART_SetConfig+0x34c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d131      	bne.n	8006e42 <UART_SetConfig+0x11e>
 8006dde:	4ba5      	ldr	r3, [pc, #660]	; (8007074 <UART_SetConfig+0x350>)
 8006de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de2:	2203      	movs	r2, #3
 8006de4:	4013      	ands	r3, r2
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d01d      	beq.n	8006e26 <UART_SetConfig+0x102>
 8006dea:	d823      	bhi.n	8006e34 <UART_SetConfig+0x110>
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d00c      	beq.n	8006e0a <UART_SetConfig+0xe6>
 8006df0:	d820      	bhi.n	8006e34 <UART_SetConfig+0x110>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <UART_SetConfig+0xd8>
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d00e      	beq.n	8006e18 <UART_SetConfig+0xf4>
 8006dfa:	e01b      	b.n	8006e34 <UART_SetConfig+0x110>
 8006dfc:	231b      	movs	r3, #27
 8006dfe:	2220      	movs	r2, #32
 8006e00:	189b      	adds	r3, r3, r2
 8006e02:	19db      	adds	r3, r3, r7
 8006e04:	2200      	movs	r2, #0
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	e154      	b.n	80070b4 <UART_SetConfig+0x390>
 8006e0a:	231b      	movs	r3, #27
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	189b      	adds	r3, r3, r2
 8006e10:	19db      	adds	r3, r3, r7
 8006e12:	2202      	movs	r2, #2
 8006e14:	701a      	strb	r2, [r3, #0]
 8006e16:	e14d      	b.n	80070b4 <UART_SetConfig+0x390>
 8006e18:	231b      	movs	r3, #27
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	189b      	adds	r3, r3, r2
 8006e1e:	19db      	adds	r3, r3, r7
 8006e20:	2204      	movs	r2, #4
 8006e22:	701a      	strb	r2, [r3, #0]
 8006e24:	e146      	b.n	80070b4 <UART_SetConfig+0x390>
 8006e26:	231b      	movs	r3, #27
 8006e28:	2220      	movs	r2, #32
 8006e2a:	189b      	adds	r3, r3, r2
 8006e2c:	19db      	adds	r3, r3, r7
 8006e2e:	2208      	movs	r2, #8
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	e13f      	b.n	80070b4 <UART_SetConfig+0x390>
 8006e34:	231b      	movs	r3, #27
 8006e36:	2220      	movs	r2, #32
 8006e38:	189b      	adds	r3, r3, r2
 8006e3a:	19db      	adds	r3, r3, r7
 8006e3c:	2210      	movs	r2, #16
 8006e3e:	701a      	strb	r2, [r3, #0]
 8006e40:	e138      	b.n	80070b4 <UART_SetConfig+0x390>
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a8c      	ldr	r2, [pc, #560]	; (8007078 <UART_SetConfig+0x354>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d131      	bne.n	8006eb0 <UART_SetConfig+0x18c>
 8006e4c:	4b89      	ldr	r3, [pc, #548]	; (8007074 <UART_SetConfig+0x350>)
 8006e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e50:	220c      	movs	r2, #12
 8006e52:	4013      	ands	r3, r2
 8006e54:	2b0c      	cmp	r3, #12
 8006e56:	d01d      	beq.n	8006e94 <UART_SetConfig+0x170>
 8006e58:	d823      	bhi.n	8006ea2 <UART_SetConfig+0x17e>
 8006e5a:	2b08      	cmp	r3, #8
 8006e5c:	d00c      	beq.n	8006e78 <UART_SetConfig+0x154>
 8006e5e:	d820      	bhi.n	8006ea2 <UART_SetConfig+0x17e>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <UART_SetConfig+0x146>
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d00e      	beq.n	8006e86 <UART_SetConfig+0x162>
 8006e68:	e01b      	b.n	8006ea2 <UART_SetConfig+0x17e>
 8006e6a:	231b      	movs	r3, #27
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	189b      	adds	r3, r3, r2
 8006e70:	19db      	adds	r3, r3, r7
 8006e72:	2200      	movs	r2, #0
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	e11d      	b.n	80070b4 <UART_SetConfig+0x390>
 8006e78:	231b      	movs	r3, #27
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	189b      	adds	r3, r3, r2
 8006e7e:	19db      	adds	r3, r3, r7
 8006e80:	2202      	movs	r2, #2
 8006e82:	701a      	strb	r2, [r3, #0]
 8006e84:	e116      	b.n	80070b4 <UART_SetConfig+0x390>
 8006e86:	231b      	movs	r3, #27
 8006e88:	2220      	movs	r2, #32
 8006e8a:	189b      	adds	r3, r3, r2
 8006e8c:	19db      	adds	r3, r3, r7
 8006e8e:	2204      	movs	r2, #4
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	e10f      	b.n	80070b4 <UART_SetConfig+0x390>
 8006e94:	231b      	movs	r3, #27
 8006e96:	2220      	movs	r2, #32
 8006e98:	189b      	adds	r3, r3, r2
 8006e9a:	19db      	adds	r3, r3, r7
 8006e9c:	2208      	movs	r2, #8
 8006e9e:	701a      	strb	r2, [r3, #0]
 8006ea0:	e108      	b.n	80070b4 <UART_SetConfig+0x390>
 8006ea2:	231b      	movs	r3, #27
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	189b      	adds	r3, r3, r2
 8006ea8:	19db      	adds	r3, r3, r7
 8006eaa:	2210      	movs	r2, #16
 8006eac:	701a      	strb	r2, [r3, #0]
 8006eae:	e101      	b.n	80070b4 <UART_SetConfig+0x390>
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a71      	ldr	r2, [pc, #452]	; (800707c <UART_SetConfig+0x358>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d131      	bne.n	8006f1e <UART_SetConfig+0x1fa>
 8006eba:	4b6e      	ldr	r3, [pc, #440]	; (8007074 <UART_SetConfig+0x350>)
 8006ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ebe:	2230      	movs	r2, #48	; 0x30
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	2b30      	cmp	r3, #48	; 0x30
 8006ec4:	d01d      	beq.n	8006f02 <UART_SetConfig+0x1de>
 8006ec6:	d823      	bhi.n	8006f10 <UART_SetConfig+0x1ec>
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	d00c      	beq.n	8006ee6 <UART_SetConfig+0x1c2>
 8006ecc:	d820      	bhi.n	8006f10 <UART_SetConfig+0x1ec>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <UART_SetConfig+0x1b4>
 8006ed2:	2b10      	cmp	r3, #16
 8006ed4:	d00e      	beq.n	8006ef4 <UART_SetConfig+0x1d0>
 8006ed6:	e01b      	b.n	8006f10 <UART_SetConfig+0x1ec>
 8006ed8:	231b      	movs	r3, #27
 8006eda:	2220      	movs	r2, #32
 8006edc:	189b      	adds	r3, r3, r2
 8006ede:	19db      	adds	r3, r3, r7
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	701a      	strb	r2, [r3, #0]
 8006ee4:	e0e6      	b.n	80070b4 <UART_SetConfig+0x390>
 8006ee6:	231b      	movs	r3, #27
 8006ee8:	2220      	movs	r2, #32
 8006eea:	189b      	adds	r3, r3, r2
 8006eec:	19db      	adds	r3, r3, r7
 8006eee:	2202      	movs	r2, #2
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	e0df      	b.n	80070b4 <UART_SetConfig+0x390>
 8006ef4:	231b      	movs	r3, #27
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	189b      	adds	r3, r3, r2
 8006efa:	19db      	adds	r3, r3, r7
 8006efc:	2204      	movs	r2, #4
 8006efe:	701a      	strb	r2, [r3, #0]
 8006f00:	e0d8      	b.n	80070b4 <UART_SetConfig+0x390>
 8006f02:	231b      	movs	r3, #27
 8006f04:	2220      	movs	r2, #32
 8006f06:	189b      	adds	r3, r3, r2
 8006f08:	19db      	adds	r3, r3, r7
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	e0d1      	b.n	80070b4 <UART_SetConfig+0x390>
 8006f10:	231b      	movs	r3, #27
 8006f12:	2220      	movs	r2, #32
 8006f14:	189b      	adds	r3, r3, r2
 8006f16:	19db      	adds	r3, r3, r7
 8006f18:	2210      	movs	r2, #16
 8006f1a:	701a      	strb	r2, [r3, #0]
 8006f1c:	e0ca      	b.n	80070b4 <UART_SetConfig+0x390>
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a57      	ldr	r2, [pc, #348]	; (8007080 <UART_SetConfig+0x35c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d106      	bne.n	8006f36 <UART_SetConfig+0x212>
 8006f28:	231b      	movs	r3, #27
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	189b      	adds	r3, r3, r2
 8006f2e:	19db      	adds	r3, r3, r7
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
 8006f34:	e0be      	b.n	80070b4 <UART_SetConfig+0x390>
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a52      	ldr	r2, [pc, #328]	; (8007084 <UART_SetConfig+0x360>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d106      	bne.n	8006f4e <UART_SetConfig+0x22a>
 8006f40:	231b      	movs	r3, #27
 8006f42:	2220      	movs	r2, #32
 8006f44:	189b      	adds	r3, r3, r2
 8006f46:	19db      	adds	r3, r3, r7
 8006f48:	2200      	movs	r2, #0
 8006f4a:	701a      	strb	r2, [r3, #0]
 8006f4c:	e0b2      	b.n	80070b4 <UART_SetConfig+0x390>
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a4d      	ldr	r2, [pc, #308]	; (8007088 <UART_SetConfig+0x364>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d106      	bne.n	8006f66 <UART_SetConfig+0x242>
 8006f58:	231b      	movs	r3, #27
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	189b      	adds	r3, r3, r2
 8006f5e:	19db      	adds	r3, r3, r7
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]
 8006f64:	e0a6      	b.n	80070b4 <UART_SetConfig+0x390>
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a3e      	ldr	r2, [pc, #248]	; (8007064 <UART_SetConfig+0x340>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d13e      	bne.n	8006fee <UART_SetConfig+0x2ca>
 8006f70:	4b40      	ldr	r3, [pc, #256]	; (8007074 <UART_SetConfig+0x350>)
 8006f72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f74:	23c0      	movs	r3, #192	; 0xc0
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	4013      	ands	r3, r2
 8006f7a:	22c0      	movs	r2, #192	; 0xc0
 8006f7c:	0112      	lsls	r2, r2, #4
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d027      	beq.n	8006fd2 <UART_SetConfig+0x2ae>
 8006f82:	22c0      	movs	r2, #192	; 0xc0
 8006f84:	0112      	lsls	r2, r2, #4
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d82a      	bhi.n	8006fe0 <UART_SetConfig+0x2bc>
 8006f8a:	2280      	movs	r2, #128	; 0x80
 8006f8c:	0112      	lsls	r2, r2, #4
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d011      	beq.n	8006fb6 <UART_SetConfig+0x292>
 8006f92:	2280      	movs	r2, #128	; 0x80
 8006f94:	0112      	lsls	r2, r2, #4
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d822      	bhi.n	8006fe0 <UART_SetConfig+0x2bc>
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d004      	beq.n	8006fa8 <UART_SetConfig+0x284>
 8006f9e:	2280      	movs	r2, #128	; 0x80
 8006fa0:	00d2      	lsls	r2, r2, #3
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d00e      	beq.n	8006fc4 <UART_SetConfig+0x2a0>
 8006fa6:	e01b      	b.n	8006fe0 <UART_SetConfig+0x2bc>
 8006fa8:	231b      	movs	r3, #27
 8006faa:	2220      	movs	r2, #32
 8006fac:	189b      	adds	r3, r3, r2
 8006fae:	19db      	adds	r3, r3, r7
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	701a      	strb	r2, [r3, #0]
 8006fb4:	e07e      	b.n	80070b4 <UART_SetConfig+0x390>
 8006fb6:	231b      	movs	r3, #27
 8006fb8:	2220      	movs	r2, #32
 8006fba:	189b      	adds	r3, r3, r2
 8006fbc:	19db      	adds	r3, r3, r7
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	e077      	b.n	80070b4 <UART_SetConfig+0x390>
 8006fc4:	231b      	movs	r3, #27
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	189b      	adds	r3, r3, r2
 8006fca:	19db      	adds	r3, r3, r7
 8006fcc:	2204      	movs	r2, #4
 8006fce:	701a      	strb	r2, [r3, #0]
 8006fd0:	e070      	b.n	80070b4 <UART_SetConfig+0x390>
 8006fd2:	231b      	movs	r3, #27
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	189b      	adds	r3, r3, r2
 8006fd8:	19db      	adds	r3, r3, r7
 8006fda:	2208      	movs	r2, #8
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	e069      	b.n	80070b4 <UART_SetConfig+0x390>
 8006fe0:	231b      	movs	r3, #27
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	189b      	adds	r3, r3, r2
 8006fe6:	19db      	adds	r3, r3, r7
 8006fe8:	2210      	movs	r2, #16
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	e062      	b.n	80070b4 <UART_SetConfig+0x390>
 8006fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a1d      	ldr	r2, [pc, #116]	; (8007068 <UART_SetConfig+0x344>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d157      	bne.n	80070a8 <UART_SetConfig+0x384>
 8006ff8:	4b1e      	ldr	r3, [pc, #120]	; (8007074 <UART_SetConfig+0x350>)
 8006ffa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ffc:	23c0      	movs	r3, #192	; 0xc0
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4013      	ands	r3, r2
 8007002:	22c0      	movs	r2, #192	; 0xc0
 8007004:	0092      	lsls	r2, r2, #2
 8007006:	4293      	cmp	r3, r2
 8007008:	d040      	beq.n	800708c <UART_SetConfig+0x368>
 800700a:	22c0      	movs	r2, #192	; 0xc0
 800700c:	0092      	lsls	r2, r2, #2
 800700e:	4293      	cmp	r3, r2
 8007010:	d843      	bhi.n	800709a <UART_SetConfig+0x376>
 8007012:	2280      	movs	r2, #128	; 0x80
 8007014:	0092      	lsls	r2, r2, #2
 8007016:	4293      	cmp	r3, r2
 8007018:	d011      	beq.n	800703e <UART_SetConfig+0x31a>
 800701a:	2280      	movs	r2, #128	; 0x80
 800701c:	0092      	lsls	r2, r2, #2
 800701e:	4293      	cmp	r3, r2
 8007020:	d83b      	bhi.n	800709a <UART_SetConfig+0x376>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <UART_SetConfig+0x30c>
 8007026:	2280      	movs	r2, #128	; 0x80
 8007028:	0052      	lsls	r2, r2, #1
 800702a:	4293      	cmp	r3, r2
 800702c:	d00e      	beq.n	800704c <UART_SetConfig+0x328>
 800702e:	e034      	b.n	800709a <UART_SetConfig+0x376>
 8007030:	231b      	movs	r3, #27
 8007032:	2220      	movs	r2, #32
 8007034:	189b      	adds	r3, r3, r2
 8007036:	19db      	adds	r3, r3, r7
 8007038:	2200      	movs	r2, #0
 800703a:	701a      	strb	r2, [r3, #0]
 800703c:	e03a      	b.n	80070b4 <UART_SetConfig+0x390>
 800703e:	231b      	movs	r3, #27
 8007040:	2220      	movs	r2, #32
 8007042:	189b      	adds	r3, r3, r2
 8007044:	19db      	adds	r3, r3, r7
 8007046:	2202      	movs	r2, #2
 8007048:	701a      	strb	r2, [r3, #0]
 800704a:	e033      	b.n	80070b4 <UART_SetConfig+0x390>
 800704c:	231b      	movs	r3, #27
 800704e:	2220      	movs	r2, #32
 8007050:	189b      	adds	r3, r3, r2
 8007052:	19db      	adds	r3, r3, r7
 8007054:	2204      	movs	r2, #4
 8007056:	701a      	strb	r2, [r3, #0]
 8007058:	e02c      	b.n	80070b4 <UART_SetConfig+0x390>
 800705a:	46c0      	nop			; (mov r8, r8)
 800705c:	cfff69f3 	.word	0xcfff69f3
 8007060:	ffffcfff 	.word	0xffffcfff
 8007064:	40008000 	.word	0x40008000
 8007068:	40008400 	.word	0x40008400
 800706c:	11fff4ff 	.word	0x11fff4ff
 8007070:	40013800 	.word	0x40013800
 8007074:	40021000 	.word	0x40021000
 8007078:	40004400 	.word	0x40004400
 800707c:	40004800 	.word	0x40004800
 8007080:	40004c00 	.word	0x40004c00
 8007084:	40005000 	.word	0x40005000
 8007088:	40013c00 	.word	0x40013c00
 800708c:	231b      	movs	r3, #27
 800708e:	2220      	movs	r2, #32
 8007090:	189b      	adds	r3, r3, r2
 8007092:	19db      	adds	r3, r3, r7
 8007094:	2208      	movs	r2, #8
 8007096:	701a      	strb	r2, [r3, #0]
 8007098:	e00c      	b.n	80070b4 <UART_SetConfig+0x390>
 800709a:	231b      	movs	r3, #27
 800709c:	2220      	movs	r2, #32
 800709e:	189b      	adds	r3, r3, r2
 80070a0:	19db      	adds	r3, r3, r7
 80070a2:	2210      	movs	r2, #16
 80070a4:	701a      	strb	r2, [r3, #0]
 80070a6:	e005      	b.n	80070b4 <UART_SetConfig+0x390>
 80070a8:	231b      	movs	r3, #27
 80070aa:	2220      	movs	r2, #32
 80070ac:	189b      	adds	r3, r3, r2
 80070ae:	19db      	adds	r3, r3, r7
 80070b0:	2210      	movs	r2, #16
 80070b2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4ac1      	ldr	r2, [pc, #772]	; (80073c0 <UART_SetConfig+0x69c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d005      	beq.n	80070ca <UART_SetConfig+0x3a6>
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4ac0      	ldr	r2, [pc, #768]	; (80073c4 <UART_SetConfig+0x6a0>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d000      	beq.n	80070ca <UART_SetConfig+0x3a6>
 80070c8:	e093      	b.n	80071f2 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070ca:	231b      	movs	r3, #27
 80070cc:	2220      	movs	r2, #32
 80070ce:	189b      	adds	r3, r3, r2
 80070d0:	19db      	adds	r3, r3, r7
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d015      	beq.n	8007104 <UART_SetConfig+0x3e0>
 80070d8:	dc18      	bgt.n	800710c <UART_SetConfig+0x3e8>
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d00d      	beq.n	80070fa <UART_SetConfig+0x3d6>
 80070de:	dc15      	bgt.n	800710c <UART_SetConfig+0x3e8>
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <UART_SetConfig+0x3c6>
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d005      	beq.n	80070f4 <UART_SetConfig+0x3d0>
 80070e8:	e010      	b.n	800710c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070ea:	f7fe f855 	bl	8005198 <HAL_RCC_GetPCLK1Freq>
 80070ee:	0003      	movs	r3, r0
 80070f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070f2:	e014      	b.n	800711e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070f4:	4bb4      	ldr	r3, [pc, #720]	; (80073c8 <UART_SetConfig+0x6a4>)
 80070f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070f8:	e011      	b.n	800711e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070fa:	f7fd ffc1 	bl	8005080 <HAL_RCC_GetSysClockFreq>
 80070fe:	0003      	movs	r3, r0
 8007100:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007102:	e00c      	b.n	800711e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007104:	2380      	movs	r3, #128	; 0x80
 8007106:	021b      	lsls	r3, r3, #8
 8007108:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800710a:	e008      	b.n	800711e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007110:	231a      	movs	r3, #26
 8007112:	2220      	movs	r2, #32
 8007114:	189b      	adds	r3, r3, r2
 8007116:	19db      	adds	r3, r3, r7
 8007118:	2201      	movs	r2, #1
 800711a:	701a      	strb	r2, [r3, #0]
        break;
 800711c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800711e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007120:	2b00      	cmp	r3, #0
 8007122:	d100      	bne.n	8007126 <UART_SetConfig+0x402>
 8007124:	e135      	b.n	8007392 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800712a:	4ba8      	ldr	r3, [pc, #672]	; (80073cc <UART_SetConfig+0x6a8>)
 800712c:	0052      	lsls	r2, r2, #1
 800712e:	5ad3      	ldrh	r3, [r2, r3]
 8007130:	0019      	movs	r1, r3
 8007132:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007134:	f7f9 f802 	bl	800013c <__udivsi3>
 8007138:	0003      	movs	r3, r0
 800713a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	0013      	movs	r3, r2
 8007142:	005b      	lsls	r3, r3, #1
 8007144:	189b      	adds	r3, r3, r2
 8007146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007148:	429a      	cmp	r2, r3
 800714a:	d305      	bcc.n	8007158 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007154:	429a      	cmp	r2, r3
 8007156:	d906      	bls.n	8007166 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8007158:	231a      	movs	r3, #26
 800715a:	2220      	movs	r2, #32
 800715c:	189b      	adds	r3, r3, r2
 800715e:	19db      	adds	r3, r3, r7
 8007160:	2201      	movs	r2, #1
 8007162:	701a      	strb	r2, [r3, #0]
 8007164:	e044      	b.n	80071f0 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007168:	61bb      	str	r3, [r7, #24]
 800716a:	2300      	movs	r3, #0
 800716c:	61fb      	str	r3, [r7, #28]
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007172:	4b96      	ldr	r3, [pc, #600]	; (80073cc <UART_SetConfig+0x6a8>)
 8007174:	0052      	lsls	r2, r2, #1
 8007176:	5ad3      	ldrh	r3, [r2, r3]
 8007178:	613b      	str	r3, [r7, #16]
 800717a:	2300      	movs	r3, #0
 800717c:	617b      	str	r3, [r7, #20]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	69b8      	ldr	r0, [r7, #24]
 8007184:	69f9      	ldr	r1, [r7, #28]
 8007186:	f7f9 f98d 	bl	80004a4 <__aeabi_uldivmod>
 800718a:	0002      	movs	r2, r0
 800718c:	000b      	movs	r3, r1
 800718e:	0e11      	lsrs	r1, r2, #24
 8007190:	021d      	lsls	r5, r3, #8
 8007192:	430d      	orrs	r5, r1
 8007194:	0214      	lsls	r4, r2, #8
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	085b      	lsrs	r3, r3, #1
 800719c:	60bb      	str	r3, [r7, #8]
 800719e:	2300      	movs	r3, #0
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	68b8      	ldr	r0, [r7, #8]
 80071a4:	68f9      	ldr	r1, [r7, #12]
 80071a6:	1900      	adds	r0, r0, r4
 80071a8:	4169      	adcs	r1, r5
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	603b      	str	r3, [r7, #0]
 80071b0:	2300      	movs	r3, #0
 80071b2:	607b      	str	r3, [r7, #4]
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f7f9 f974 	bl	80004a4 <__aeabi_uldivmod>
 80071bc:	0002      	movs	r2, r0
 80071be:	000b      	movs	r3, r1
 80071c0:	0013      	movs	r3, r2
 80071c2:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071c6:	23c0      	movs	r3, #192	; 0xc0
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d309      	bcc.n	80071e2 <UART_SetConfig+0x4be>
 80071ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d0:	2380      	movs	r3, #128	; 0x80
 80071d2:	035b      	lsls	r3, r3, #13
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d204      	bcs.n	80071e2 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071de:	60da      	str	r2, [r3, #12]
 80071e0:	e006      	b.n	80071f0 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80071e2:	231a      	movs	r3, #26
 80071e4:	2220      	movs	r2, #32
 80071e6:	189b      	adds	r3, r3, r2
 80071e8:	19db      	adds	r3, r3, r7
 80071ea:	2201      	movs	r2, #1
 80071ec:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80071ee:	e0d0      	b.n	8007392 <UART_SetConfig+0x66e>
 80071f0:	e0cf      	b.n	8007392 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	69da      	ldr	r2, [r3, #28]
 80071f6:	2380      	movs	r3, #128	; 0x80
 80071f8:	021b      	lsls	r3, r3, #8
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d000      	beq.n	8007200 <UART_SetConfig+0x4dc>
 80071fe:	e070      	b.n	80072e2 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8007200:	231b      	movs	r3, #27
 8007202:	2220      	movs	r2, #32
 8007204:	189b      	adds	r3, r3, r2
 8007206:	19db      	adds	r3, r3, r7
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	2b08      	cmp	r3, #8
 800720c:	d015      	beq.n	800723a <UART_SetConfig+0x516>
 800720e:	dc18      	bgt.n	8007242 <UART_SetConfig+0x51e>
 8007210:	2b04      	cmp	r3, #4
 8007212:	d00d      	beq.n	8007230 <UART_SetConfig+0x50c>
 8007214:	dc15      	bgt.n	8007242 <UART_SetConfig+0x51e>
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <UART_SetConfig+0x4fc>
 800721a:	2b02      	cmp	r3, #2
 800721c:	d005      	beq.n	800722a <UART_SetConfig+0x506>
 800721e:	e010      	b.n	8007242 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007220:	f7fd ffba 	bl	8005198 <HAL_RCC_GetPCLK1Freq>
 8007224:	0003      	movs	r3, r0
 8007226:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007228:	e014      	b.n	8007254 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800722a:	4b67      	ldr	r3, [pc, #412]	; (80073c8 <UART_SetConfig+0x6a4>)
 800722c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800722e:	e011      	b.n	8007254 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007230:	f7fd ff26 	bl	8005080 <HAL_RCC_GetSysClockFreq>
 8007234:	0003      	movs	r3, r0
 8007236:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007238:	e00c      	b.n	8007254 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800723a:	2380      	movs	r3, #128	; 0x80
 800723c:	021b      	lsls	r3, r3, #8
 800723e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007240:	e008      	b.n	8007254 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007246:	231a      	movs	r3, #26
 8007248:	2220      	movs	r2, #32
 800724a:	189b      	adds	r3, r3, r2
 800724c:	19db      	adds	r3, r3, r7
 800724e:	2201      	movs	r2, #1
 8007250:	701a      	strb	r2, [r3, #0]
        break;
 8007252:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007256:	2b00      	cmp	r3, #0
 8007258:	d100      	bne.n	800725c <UART_SetConfig+0x538>
 800725a:	e09a      	b.n	8007392 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007260:	4b5a      	ldr	r3, [pc, #360]	; (80073cc <UART_SetConfig+0x6a8>)
 8007262:	0052      	lsls	r2, r2, #1
 8007264:	5ad3      	ldrh	r3, [r2, r3]
 8007266:	0019      	movs	r1, r3
 8007268:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800726a:	f7f8 ff67 	bl	800013c <__udivsi3>
 800726e:	0003      	movs	r3, r0
 8007270:	005a      	lsls	r2, r3, #1
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	085b      	lsrs	r3, r3, #1
 8007278:	18d2      	adds	r2, r2, r3
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	0019      	movs	r1, r3
 8007280:	0010      	movs	r0, r2
 8007282:	f7f8 ff5b 	bl	800013c <__udivsi3>
 8007286:	0003      	movs	r3, r0
 8007288:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728c:	2b0f      	cmp	r3, #15
 800728e:	d921      	bls.n	80072d4 <UART_SetConfig+0x5b0>
 8007290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007292:	2380      	movs	r3, #128	; 0x80
 8007294:	025b      	lsls	r3, r3, #9
 8007296:	429a      	cmp	r2, r3
 8007298:	d21c      	bcs.n	80072d4 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	b29a      	uxth	r2, r3
 800729e:	200e      	movs	r0, #14
 80072a0:	2420      	movs	r4, #32
 80072a2:	1903      	adds	r3, r0, r4
 80072a4:	19db      	adds	r3, r3, r7
 80072a6:	210f      	movs	r1, #15
 80072a8:	438a      	bics	r2, r1
 80072aa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	085b      	lsrs	r3, r3, #1
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	2207      	movs	r2, #7
 80072b4:	4013      	ands	r3, r2
 80072b6:	b299      	uxth	r1, r3
 80072b8:	1903      	adds	r3, r0, r4
 80072ba:	19db      	adds	r3, r3, r7
 80072bc:	1902      	adds	r2, r0, r4
 80072be:	19d2      	adds	r2, r2, r7
 80072c0:	8812      	ldrh	r2, [r2, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80072c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	1902      	adds	r2, r0, r4
 80072cc:	19d2      	adds	r2, r2, r7
 80072ce:	8812      	ldrh	r2, [r2, #0]
 80072d0:	60da      	str	r2, [r3, #12]
 80072d2:	e05e      	b.n	8007392 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80072d4:	231a      	movs	r3, #26
 80072d6:	2220      	movs	r2, #32
 80072d8:	189b      	adds	r3, r3, r2
 80072da:	19db      	adds	r3, r3, r7
 80072dc:	2201      	movs	r2, #1
 80072de:	701a      	strb	r2, [r3, #0]
 80072e0:	e057      	b.n	8007392 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072e2:	231b      	movs	r3, #27
 80072e4:	2220      	movs	r2, #32
 80072e6:	189b      	adds	r3, r3, r2
 80072e8:	19db      	adds	r3, r3, r7
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	2b08      	cmp	r3, #8
 80072ee:	d015      	beq.n	800731c <UART_SetConfig+0x5f8>
 80072f0:	dc18      	bgt.n	8007324 <UART_SetConfig+0x600>
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d00d      	beq.n	8007312 <UART_SetConfig+0x5ee>
 80072f6:	dc15      	bgt.n	8007324 <UART_SetConfig+0x600>
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <UART_SetConfig+0x5de>
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d005      	beq.n	800730c <UART_SetConfig+0x5e8>
 8007300:	e010      	b.n	8007324 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007302:	f7fd ff49 	bl	8005198 <HAL_RCC_GetPCLK1Freq>
 8007306:	0003      	movs	r3, r0
 8007308:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800730a:	e014      	b.n	8007336 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800730c:	4b2e      	ldr	r3, [pc, #184]	; (80073c8 <UART_SetConfig+0x6a4>)
 800730e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007310:	e011      	b.n	8007336 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007312:	f7fd feb5 	bl	8005080 <HAL_RCC_GetSysClockFreq>
 8007316:	0003      	movs	r3, r0
 8007318:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800731a:	e00c      	b.n	8007336 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800731c:	2380      	movs	r3, #128	; 0x80
 800731e:	021b      	lsls	r3, r3, #8
 8007320:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007322:	e008      	b.n	8007336 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007328:	231a      	movs	r3, #26
 800732a:	2220      	movs	r2, #32
 800732c:	189b      	adds	r3, r3, r2
 800732e:	19db      	adds	r3, r3, r7
 8007330:	2201      	movs	r2, #1
 8007332:	701a      	strb	r2, [r3, #0]
        break;
 8007334:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007338:	2b00      	cmp	r3, #0
 800733a:	d02a      	beq.n	8007392 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007340:	4b22      	ldr	r3, [pc, #136]	; (80073cc <UART_SetConfig+0x6a8>)
 8007342:	0052      	lsls	r2, r2, #1
 8007344:	5ad3      	ldrh	r3, [r2, r3]
 8007346:	0019      	movs	r1, r3
 8007348:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800734a:	f7f8 fef7 	bl	800013c <__udivsi3>
 800734e:	0003      	movs	r3, r0
 8007350:	001a      	movs	r2, r3
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	085b      	lsrs	r3, r3, #1
 8007358:	18d2      	adds	r2, r2, r3
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	0019      	movs	r1, r3
 8007360:	0010      	movs	r0, r2
 8007362:	f7f8 feeb 	bl	800013c <__udivsi3>
 8007366:	0003      	movs	r3, r0
 8007368:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	2b0f      	cmp	r3, #15
 800736e:	d90a      	bls.n	8007386 <UART_SetConfig+0x662>
 8007370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007372:	2380      	movs	r3, #128	; 0x80
 8007374:	025b      	lsls	r3, r3, #9
 8007376:	429a      	cmp	r2, r3
 8007378:	d205      	bcs.n	8007386 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	b29a      	uxth	r2, r3
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	60da      	str	r2, [r3, #12]
 8007384:	e005      	b.n	8007392 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007386:	231a      	movs	r3, #26
 8007388:	2220      	movs	r2, #32
 800738a:	189b      	adds	r3, r3, r2
 800738c:	19db      	adds	r3, r3, r7
 800738e:	2201      	movs	r2, #1
 8007390:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	226a      	movs	r2, #106	; 0x6a
 8007396:	2101      	movs	r1, #1
 8007398:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	2268      	movs	r2, #104	; 0x68
 800739e:	2101      	movs	r1, #1
 80073a0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	2200      	movs	r2, #0
 80073a6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	2200      	movs	r2, #0
 80073ac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80073ae:	231a      	movs	r3, #26
 80073b0:	2220      	movs	r2, #32
 80073b2:	189b      	adds	r3, r3, r2
 80073b4:	19db      	adds	r3, r3, r7
 80073b6:	781b      	ldrb	r3, [r3, #0]
}
 80073b8:	0018      	movs	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b010      	add	sp, #64	; 0x40
 80073be:	bdb0      	pop	{r4, r5, r7, pc}
 80073c0:	40008000 	.word	0x40008000
 80073c4:	40008400 	.word	0x40008400
 80073c8:	00f42400 	.word	0x00f42400
 80073cc:	08014454 	.word	0x08014454

080073d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073dc:	2208      	movs	r2, #8
 80073de:	4013      	ands	r3, r2
 80073e0:	d00b      	beq.n	80073fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	4a4a      	ldr	r2, [pc, #296]	; (8007514 <UART_AdvFeatureConfig+0x144>)
 80073ea:	4013      	ands	r3, r2
 80073ec:	0019      	movs	r1, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fe:	2201      	movs	r2, #1
 8007400:	4013      	ands	r3, r2
 8007402:	d00b      	beq.n	800741c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	4a43      	ldr	r2, [pc, #268]	; (8007518 <UART_AdvFeatureConfig+0x148>)
 800740c:	4013      	ands	r3, r2
 800740e:	0019      	movs	r1, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007420:	2202      	movs	r2, #2
 8007422:	4013      	ands	r3, r2
 8007424:	d00b      	beq.n	800743e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	4a3b      	ldr	r2, [pc, #236]	; (800751c <UART_AdvFeatureConfig+0x14c>)
 800742e:	4013      	ands	r3, r2
 8007430:	0019      	movs	r1, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007442:	2204      	movs	r2, #4
 8007444:	4013      	ands	r3, r2
 8007446:	d00b      	beq.n	8007460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	4a34      	ldr	r2, [pc, #208]	; (8007520 <UART_AdvFeatureConfig+0x150>)
 8007450:	4013      	ands	r3, r2
 8007452:	0019      	movs	r1, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007464:	2210      	movs	r2, #16
 8007466:	4013      	ands	r3, r2
 8007468:	d00b      	beq.n	8007482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	4a2c      	ldr	r2, [pc, #176]	; (8007524 <UART_AdvFeatureConfig+0x154>)
 8007472:	4013      	ands	r3, r2
 8007474:	0019      	movs	r1, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007486:	2220      	movs	r2, #32
 8007488:	4013      	ands	r3, r2
 800748a:	d00b      	beq.n	80074a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	4a25      	ldr	r2, [pc, #148]	; (8007528 <UART_AdvFeatureConfig+0x158>)
 8007494:	4013      	ands	r3, r2
 8007496:	0019      	movs	r1, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a8:	2240      	movs	r2, #64	; 0x40
 80074aa:	4013      	ands	r3, r2
 80074ac:	d01d      	beq.n	80074ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	4a1d      	ldr	r2, [pc, #116]	; (800752c <UART_AdvFeatureConfig+0x15c>)
 80074b6:	4013      	ands	r3, r2
 80074b8:	0019      	movs	r1, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074ca:	2380      	movs	r3, #128	; 0x80
 80074cc:	035b      	lsls	r3, r3, #13
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d10b      	bne.n	80074ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	4a15      	ldr	r2, [pc, #84]	; (8007530 <UART_AdvFeatureConfig+0x160>)
 80074da:	4013      	ands	r3, r2
 80074dc:	0019      	movs	r1, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ee:	2280      	movs	r2, #128	; 0x80
 80074f0:	4013      	ands	r3, r2
 80074f2:	d00b      	beq.n	800750c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	4a0e      	ldr	r2, [pc, #56]	; (8007534 <UART_AdvFeatureConfig+0x164>)
 80074fc:	4013      	ands	r3, r2
 80074fe:	0019      	movs	r1, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	430a      	orrs	r2, r1
 800750a:	605a      	str	r2, [r3, #4]
  }
}
 800750c:	46c0      	nop			; (mov r8, r8)
 800750e:	46bd      	mov	sp, r7
 8007510:	b002      	add	sp, #8
 8007512:	bd80      	pop	{r7, pc}
 8007514:	ffff7fff 	.word	0xffff7fff
 8007518:	fffdffff 	.word	0xfffdffff
 800751c:	fffeffff 	.word	0xfffeffff
 8007520:	fffbffff 	.word	0xfffbffff
 8007524:	ffffefff 	.word	0xffffefff
 8007528:	ffffdfff 	.word	0xffffdfff
 800752c:	ffefffff 	.word	0xffefffff
 8007530:	ff9fffff 	.word	0xff9fffff
 8007534:	fff7ffff 	.word	0xfff7ffff

08007538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b092      	sub	sp, #72	; 0x48
 800753c:	af02      	add	r7, sp, #8
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2290      	movs	r2, #144	; 0x90
 8007544:	2100      	movs	r1, #0
 8007546:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007548:	f7fc fc80 	bl	8003e4c <HAL_GetTick>
 800754c:	0003      	movs	r3, r0
 800754e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2208      	movs	r2, #8
 8007558:	4013      	ands	r3, r2
 800755a:	2b08      	cmp	r3, #8
 800755c:	d12d      	bne.n	80075ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800755e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007560:	2280      	movs	r2, #128	; 0x80
 8007562:	0391      	lsls	r1, r2, #14
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	4a47      	ldr	r2, [pc, #284]	; (8007684 <UART_CheckIdleState+0x14c>)
 8007568:	9200      	str	r2, [sp, #0]
 800756a:	2200      	movs	r2, #0
 800756c:	f000 f88e 	bl	800768c <UART_WaitOnFlagUntilTimeout>
 8007570:	1e03      	subs	r3, r0, #0
 8007572:	d022      	beq.n	80075ba <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007574:	f3ef 8310 	mrs	r3, PRIMASK
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800757c:	63bb      	str	r3, [r7, #56]	; 0x38
 800757e:	2301      	movs	r3, #1
 8007580:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	f383 8810 	msr	PRIMASK, r3
}
 8007588:	46c0      	nop			; (mov r8, r8)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2180      	movs	r1, #128	; 0x80
 8007596:	438a      	bics	r2, r1
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800759e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a0:	f383 8810 	msr	PRIMASK, r3
}
 80075a4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2288      	movs	r2, #136	; 0x88
 80075aa:	2120      	movs	r1, #32
 80075ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2284      	movs	r2, #132	; 0x84
 80075b2:	2100      	movs	r1, #0
 80075b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e060      	b.n	800767c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2204      	movs	r2, #4
 80075c2:	4013      	ands	r3, r2
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	d146      	bne.n	8007656 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ca:	2280      	movs	r2, #128	; 0x80
 80075cc:	03d1      	lsls	r1, r2, #15
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	4a2c      	ldr	r2, [pc, #176]	; (8007684 <UART_CheckIdleState+0x14c>)
 80075d2:	9200      	str	r2, [sp, #0]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f000 f859 	bl	800768c <UART_WaitOnFlagUntilTimeout>
 80075da:	1e03      	subs	r3, r0, #0
 80075dc:	d03b      	beq.n	8007656 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075de:	f3ef 8310 	mrs	r3, PRIMASK
 80075e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80075e4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075e6:	637b      	str	r3, [r7, #52]	; 0x34
 80075e8:	2301      	movs	r3, #1
 80075ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f383 8810 	msr	PRIMASK, r3
}
 80075f2:	46c0      	nop			; (mov r8, r8)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4922      	ldr	r1, [pc, #136]	; (8007688 <UART_CheckIdleState+0x150>)
 8007600:	400a      	ands	r2, r1
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007606:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f383 8810 	msr	PRIMASK, r3
}
 800760e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007610:	f3ef 8310 	mrs	r3, PRIMASK
 8007614:	61bb      	str	r3, [r7, #24]
  return(result);
 8007616:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007618:	633b      	str	r3, [r7, #48]	; 0x30
 800761a:	2301      	movs	r3, #1
 800761c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	f383 8810 	msr	PRIMASK, r3
}
 8007624:	46c0      	nop			; (mov r8, r8)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689a      	ldr	r2, [r3, #8]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2101      	movs	r1, #1
 8007632:	438a      	bics	r2, r1
 8007634:	609a      	str	r2, [r3, #8]
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	f383 8810 	msr	PRIMASK, r3
}
 8007640:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	228c      	movs	r2, #140	; 0x8c
 8007646:	2120      	movs	r1, #32
 8007648:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2284      	movs	r2, #132	; 0x84
 800764e:	2100      	movs	r1, #0
 8007650:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e012      	b.n	800767c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2288      	movs	r2, #136	; 0x88
 800765a:	2120      	movs	r1, #32
 800765c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	228c      	movs	r2, #140	; 0x8c
 8007662:	2120      	movs	r1, #32
 8007664:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2284      	movs	r2, #132	; 0x84
 8007676:	2100      	movs	r1, #0
 8007678:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	0018      	movs	r0, r3
 800767e:	46bd      	mov	sp, r7
 8007680:	b010      	add	sp, #64	; 0x40
 8007682:	bd80      	pop	{r7, pc}
 8007684:	01ffffff 	.word	0x01ffffff
 8007688:	fffffedf 	.word	0xfffffedf

0800768c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	603b      	str	r3, [r7, #0]
 8007698:	1dfb      	adds	r3, r7, #7
 800769a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800769c:	e051      	b.n	8007742 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	3301      	adds	r3, #1
 80076a2:	d04e      	beq.n	8007742 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076a4:	f7fc fbd2 	bl	8003e4c <HAL_GetTick>
 80076a8:	0002      	movs	r2, r0
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d302      	bcc.n	80076ba <UART_WaitOnFlagUntilTimeout+0x2e>
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e051      	b.n	8007762 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2204      	movs	r2, #4
 80076c6:	4013      	ands	r3, r2
 80076c8:	d03b      	beq.n	8007742 <UART_WaitOnFlagUntilTimeout+0xb6>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b80      	cmp	r3, #128	; 0x80
 80076ce:	d038      	beq.n	8007742 <UART_WaitOnFlagUntilTimeout+0xb6>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b40      	cmp	r3, #64	; 0x40
 80076d4:	d035      	beq.n	8007742 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	2208      	movs	r2, #8
 80076de:	4013      	ands	r3, r2
 80076e0:	2b08      	cmp	r3, #8
 80076e2:	d111      	bne.n	8007708 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2208      	movs	r2, #8
 80076ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	0018      	movs	r0, r3
 80076f0:	f000 f83c 	bl	800776c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2290      	movs	r2, #144	; 0x90
 80076f8:	2108      	movs	r1, #8
 80076fa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2284      	movs	r2, #132	; 0x84
 8007700:	2100      	movs	r1, #0
 8007702:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e02c      	b.n	8007762 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	69da      	ldr	r2, [r3, #28]
 800770e:	2380      	movs	r3, #128	; 0x80
 8007710:	011b      	lsls	r3, r3, #4
 8007712:	401a      	ands	r2, r3
 8007714:	2380      	movs	r3, #128	; 0x80
 8007716:	011b      	lsls	r3, r3, #4
 8007718:	429a      	cmp	r2, r3
 800771a:	d112      	bne.n	8007742 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2280      	movs	r2, #128	; 0x80
 8007722:	0112      	lsls	r2, r2, #4
 8007724:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	0018      	movs	r0, r3
 800772a:	f000 f81f 	bl	800776c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2290      	movs	r2, #144	; 0x90
 8007732:	2120      	movs	r1, #32
 8007734:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2284      	movs	r2, #132	; 0x84
 800773a:	2100      	movs	r1, #0
 800773c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e00f      	b.n	8007762 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	4013      	ands	r3, r2
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	425a      	negs	r2, r3
 8007752:	4153      	adcs	r3, r2
 8007754:	b2db      	uxtb	r3, r3
 8007756:	001a      	movs	r2, r3
 8007758:	1dfb      	adds	r3, r7, #7
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	429a      	cmp	r2, r3
 800775e:	d09e      	beq.n	800769e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	0018      	movs	r0, r3
 8007764:	46bd      	mov	sp, r7
 8007766:	b004      	add	sp, #16
 8007768:	bd80      	pop	{r7, pc}
	...

0800776c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08e      	sub	sp, #56	; 0x38
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007774:	f3ef 8310 	mrs	r3, PRIMASK
 8007778:	617b      	str	r3, [r7, #20]
  return(result);
 800777a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800777c:	637b      	str	r3, [r7, #52]	; 0x34
 800777e:	2301      	movs	r3, #1
 8007780:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	f383 8810 	msr	PRIMASK, r3
}
 8007788:	46c0      	nop			; (mov r8, r8)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4926      	ldr	r1, [pc, #152]	; (8007830 <UART_EndRxTransfer+0xc4>)
 8007796:	400a      	ands	r2, r1
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	f383 8810 	msr	PRIMASK, r3
}
 80077a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077a6:	f3ef 8310 	mrs	r3, PRIMASK
 80077aa:	623b      	str	r3, [r7, #32]
  return(result);
 80077ac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077ae:	633b      	str	r3, [r7, #48]	; 0x30
 80077b0:	2301      	movs	r3, #1
 80077b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	f383 8810 	msr	PRIMASK, r3
}
 80077ba:	46c0      	nop			; (mov r8, r8)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	491b      	ldr	r1, [pc, #108]	; (8007834 <UART_EndRxTransfer+0xc8>)
 80077c8:	400a      	ands	r2, r1
 80077ca:	609a      	str	r2, [r3, #8]
 80077cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d2:	f383 8810 	msr	PRIMASK, r3
}
 80077d6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d118      	bne.n	8007812 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077e0:	f3ef 8310 	mrs	r3, PRIMASK
 80077e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80077e6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077ea:	2301      	movs	r3, #1
 80077ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f383 8810 	msr	PRIMASK, r3
}
 80077f4:	46c0      	nop			; (mov r8, r8)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2110      	movs	r1, #16
 8007802:	438a      	bics	r2, r1
 8007804:	601a      	str	r2, [r3, #0]
 8007806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007808:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	f383 8810 	msr	PRIMASK, r3
}
 8007810:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	228c      	movs	r2, #140	; 0x8c
 8007816:	2120      	movs	r1, #32
 8007818:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007826:	46c0      	nop			; (mov r8, r8)
 8007828:	46bd      	mov	sp, r7
 800782a:	b00e      	add	sp, #56	; 0x38
 800782c:	bd80      	pop	{r7, pc}
 800782e:	46c0      	nop			; (mov r8, r8)
 8007830:	fffffedf 	.word	0xfffffedf
 8007834:	effffffe 	.word	0xeffffffe

08007838 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2284      	movs	r2, #132	; 0x84
 8007844:	5c9b      	ldrb	r3, [r3, r2]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <HAL_UARTEx_DisableFifoMode+0x16>
 800784a:	2302      	movs	r3, #2
 800784c:	e027      	b.n	800789e <HAL_UARTEx_DisableFifoMode+0x66>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2284      	movs	r2, #132	; 0x84
 8007852:	2101      	movs	r1, #1
 8007854:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2288      	movs	r2, #136	; 0x88
 800785a:	2124      	movs	r1, #36	; 0x24
 800785c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2101      	movs	r1, #1
 8007872:	438a      	bics	r2, r1
 8007874:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4a0b      	ldr	r2, [pc, #44]	; (80078a8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800787a:	4013      	ands	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2288      	movs	r2, #136	; 0x88
 8007890:	2120      	movs	r1, #32
 8007892:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2284      	movs	r2, #132	; 0x84
 8007898:	2100      	movs	r1, #0
 800789a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	0018      	movs	r0, r3
 80078a0:	46bd      	mov	sp, r7
 80078a2:	b004      	add	sp, #16
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	46c0      	nop			; (mov r8, r8)
 80078a8:	dfffffff 	.word	0xdfffffff

080078ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2284      	movs	r2, #132	; 0x84
 80078ba:	5c9b      	ldrb	r3, [r3, r2]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d101      	bne.n	80078c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078c0:	2302      	movs	r3, #2
 80078c2:	e02e      	b.n	8007922 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2284      	movs	r2, #132	; 0x84
 80078c8:	2101      	movs	r1, #1
 80078ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2288      	movs	r2, #136	; 0x88
 80078d0:	2124      	movs	r1, #36	; 0x24
 80078d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2101      	movs	r1, #1
 80078e8:	438a      	bics	r2, r1
 80078ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	00db      	lsls	r3, r3, #3
 80078f4:	08d9      	lsrs	r1, r3, #3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	0018      	movs	r0, r3
 8007904:	f000 f854 	bl	80079b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2288      	movs	r2, #136	; 0x88
 8007914:	2120      	movs	r1, #32
 8007916:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2284      	movs	r2, #132	; 0x84
 800791c:	2100      	movs	r1, #0
 800791e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	0018      	movs	r0, r3
 8007924:	46bd      	mov	sp, r7
 8007926:	b004      	add	sp, #16
 8007928:	bd80      	pop	{r7, pc}
	...

0800792c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2284      	movs	r2, #132	; 0x84
 800793a:	5c9b      	ldrb	r3, [r3, r2]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007940:	2302      	movs	r3, #2
 8007942:	e02f      	b.n	80079a4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2284      	movs	r2, #132	; 0x84
 8007948:	2101      	movs	r1, #1
 800794a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2288      	movs	r2, #136	; 0x88
 8007950:	2124      	movs	r1, #36	; 0x24
 8007952:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2101      	movs	r1, #1
 8007968:	438a      	bics	r2, r1
 800796a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	4a0e      	ldr	r2, [pc, #56]	; (80079ac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007974:	4013      	ands	r3, r2
 8007976:	0019      	movs	r1, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	0018      	movs	r0, r3
 8007986:	f000 f813 	bl	80079b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2288      	movs	r2, #136	; 0x88
 8007996:	2120      	movs	r1, #32
 8007998:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2284      	movs	r2, #132	; 0x84
 800799e:	2100      	movs	r1, #0
 80079a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	0018      	movs	r0, r3
 80079a6:	46bd      	mov	sp, r7
 80079a8:	b004      	add	sp, #16
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	f1ffffff 	.word	0xf1ffffff

080079b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d108      	bne.n	80079d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	226a      	movs	r2, #106	; 0x6a
 80079c4:	2101      	movs	r1, #1
 80079c6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2268      	movs	r2, #104	; 0x68
 80079cc:	2101      	movs	r1, #1
 80079ce:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079d0:	e043      	b.n	8007a5a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079d2:	260f      	movs	r6, #15
 80079d4:	19bb      	adds	r3, r7, r6
 80079d6:	2208      	movs	r2, #8
 80079d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079da:	200e      	movs	r0, #14
 80079dc:	183b      	adds	r3, r7, r0
 80079de:	2208      	movs	r2, #8
 80079e0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	0e5b      	lsrs	r3, r3, #25
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	240d      	movs	r4, #13
 80079ee:	193b      	adds	r3, r7, r4
 80079f0:	2107      	movs	r1, #7
 80079f2:	400a      	ands	r2, r1
 80079f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	0f5b      	lsrs	r3, r3, #29
 80079fe:	b2da      	uxtb	r2, r3
 8007a00:	250c      	movs	r5, #12
 8007a02:	197b      	adds	r3, r7, r5
 8007a04:	2107      	movs	r1, #7
 8007a06:	400a      	ands	r2, r1
 8007a08:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a0a:	183b      	adds	r3, r7, r0
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	197a      	adds	r2, r7, r5
 8007a10:	7812      	ldrb	r2, [r2, #0]
 8007a12:	4914      	ldr	r1, [pc, #80]	; (8007a64 <UARTEx_SetNbDataToProcess+0xb4>)
 8007a14:	5c8a      	ldrb	r2, [r1, r2]
 8007a16:	435a      	muls	r2, r3
 8007a18:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a1a:	197b      	adds	r3, r7, r5
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	4a12      	ldr	r2, [pc, #72]	; (8007a68 <UARTEx_SetNbDataToProcess+0xb8>)
 8007a20:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a22:	0019      	movs	r1, r3
 8007a24:	f7f8 fc14 	bl	8000250 <__divsi3>
 8007a28:	0003      	movs	r3, r0
 8007a2a:	b299      	uxth	r1, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	226a      	movs	r2, #106	; 0x6a
 8007a30:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a32:	19bb      	adds	r3, r7, r6
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	193a      	adds	r2, r7, r4
 8007a38:	7812      	ldrb	r2, [r2, #0]
 8007a3a:	490a      	ldr	r1, [pc, #40]	; (8007a64 <UARTEx_SetNbDataToProcess+0xb4>)
 8007a3c:	5c8a      	ldrb	r2, [r1, r2]
 8007a3e:	435a      	muls	r2, r3
 8007a40:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a42:	193b      	adds	r3, r7, r4
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	4a08      	ldr	r2, [pc, #32]	; (8007a68 <UARTEx_SetNbDataToProcess+0xb8>)
 8007a48:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a4a:	0019      	movs	r1, r3
 8007a4c:	f7f8 fc00 	bl	8000250 <__divsi3>
 8007a50:	0003      	movs	r3, r0
 8007a52:	b299      	uxth	r1, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2268      	movs	r2, #104	; 0x68
 8007a58:	5299      	strh	r1, [r3, r2]
}
 8007a5a:	46c0      	nop			; (mov r8, r8)
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	b005      	add	sp, #20
 8007a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a62:	46c0      	nop			; (mov r8, r8)
 8007a64:	0801446c 	.word	0x0801446c
 8007a68:	08014474 	.word	0x08014474

08007a6c <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007a6c:	b5b0      	push	{r4, r5, r7, lr}
 8007a6e:	b0e4      	sub	sp, #400	; 0x190
 8007a70:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007a72:	24c8      	movs	r4, #200	; 0xc8
 8007a74:	193b      	adds	r3, r7, r4
 8007a76:	0018      	movs	r0, r3
 8007a78:	23c6      	movs	r3, #198	; 0xc6
 8007a7a:	001a      	movs	r2, r3
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	f004 f9cd 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8007a82:	4b13      	ldr	r3, [pc, #76]	; (8007ad0 <astronode_send_cfg_sr+0x64>)
 8007a84:	25c8      	movs	r5, #200	; 0xc8
 8007a86:	006d      	lsls	r5, r5, #1
 8007a88:	195b      	adds	r3, r3, r5
 8007a8a:	19db      	adds	r3, r3, r7
 8007a8c:	0018      	movs	r0, r3
 8007a8e:	23c6      	movs	r3, #198	; 0xc6
 8007a90:	001a      	movs	r2, r3
 8007a92:	2100      	movs	r1, #0
 8007a94:	f004 f9c2 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8007a98:	193b      	adds	r3, r7, r4
 8007a9a:	2210      	movs	r2, #16
 8007a9c:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8007a9e:	003a      	movs	r2, r7
 8007aa0:	193b      	adds	r3, r7, r4
 8007aa2:	0011      	movs	r1, r2
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	f001 fa87 	bl	8008fb8 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8007aaa:	4b09      	ldr	r3, [pc, #36]	; (8007ad0 <astronode_send_cfg_sr+0x64>)
 8007aac:	195b      	adds	r3, r3, r5
 8007aae:	19db      	adds	r3, r3, r7
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2b90      	cmp	r3, #144	; 0x90
 8007ab4:	d104      	bne.n	8007ac0 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8007ab6:	4b07      	ldr	r3, [pc, #28]	; (8007ad4 <astronode_send_cfg_sr+0x68>)
 8007ab8:	0018      	movs	r0, r3
 8007aba:	f7fb fb2b 	bl	8003114 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007abe:	e003      	b.n	8007ac8 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007ac0:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <astronode_send_cfg_sr+0x6c>)
 8007ac2:	0018      	movs	r0, r3
 8007ac4:	f7fb fb26 	bl	8003114 <send_debug_logs>
}
 8007ac8:	46c0      	nop			; (mov r8, r8)
 8007aca:	46bd      	mov	sp, r7
 8007acc:	b064      	add	sp, #400	; 0x190
 8007ace:	bdb0      	pop	{r4, r5, r7, pc}
 8007ad0:	fffffe70 	.word	0xfffffe70
 8007ad4:	08012eb8 	.word	0x08012eb8
 8007ad8:	08012eec 	.word	0x08012eec

08007adc <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ade:	b0e7      	sub	sp, #412	; 0x19c
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	0005      	movs	r5, r0
 8007ae4:	000c      	movs	r4, r1
 8007ae6:	0010      	movs	r0, r2
 8007ae8:	0019      	movs	r1, r3
 8007aea:	4b4b      	ldr	r3, [pc, #300]	; (8007c18 <astronode_send_cfg_wr+0x13c>)
 8007aec:	26cc      	movs	r6, #204	; 0xcc
 8007aee:	0076      	lsls	r6, r6, #1
 8007af0:	199b      	adds	r3, r3, r6
 8007af2:	19db      	adds	r3, r3, r7
 8007af4:	1c2a      	adds	r2, r5, #0
 8007af6:	701a      	strb	r2, [r3, #0]
 8007af8:	4b48      	ldr	r3, [pc, #288]	; (8007c1c <astronode_send_cfg_wr+0x140>)
 8007afa:	0035      	movs	r5, r6
 8007afc:	195b      	adds	r3, r3, r5
 8007afe:	19db      	adds	r3, r3, r7
 8007b00:	1c22      	adds	r2, r4, #0
 8007b02:	701a      	strb	r2, [r3, #0]
 8007b04:	4b46      	ldr	r3, [pc, #280]	; (8007c20 <astronode_send_cfg_wr+0x144>)
 8007b06:	002c      	movs	r4, r5
 8007b08:	191b      	adds	r3, r3, r4
 8007b0a:	19db      	adds	r3, r3, r7
 8007b0c:	1c02      	adds	r2, r0, #0
 8007b0e:	701a      	strb	r2, [r3, #0]
 8007b10:	4b44      	ldr	r3, [pc, #272]	; (8007c24 <astronode_send_cfg_wr+0x148>)
 8007b12:	191b      	adds	r3, r3, r4
 8007b14:	19db      	adds	r3, r3, r7
 8007b16:	1c0a      	adds	r2, r1, #0
 8007b18:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007b1a:	25d0      	movs	r5, #208	; 0xd0
 8007b1c:	197b      	adds	r3, r7, r5
 8007b1e:	0018      	movs	r0, r3
 8007b20:	23c6      	movs	r3, #198	; 0xc6
 8007b22:	001a      	movs	r2, r3
 8007b24:	2100      	movs	r1, #0
 8007b26:	f004 f979 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8007b2a:	4b3f      	ldr	r3, [pc, #252]	; (8007c28 <astronode_send_cfg_wr+0x14c>)
 8007b2c:	191b      	adds	r3, r3, r4
 8007b2e:	19db      	adds	r3, r3, r7
 8007b30:	0018      	movs	r0, r3
 8007b32:	23c6      	movs	r3, #198	; 0xc6
 8007b34:	001a      	movs	r2, r3
 8007b36:	2100      	movs	r1, #0
 8007b38:	f004 f970 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007b3c:	0029      	movs	r1, r5
 8007b3e:	187b      	adds	r3, r7, r1
 8007b40:	2205      	movs	r2, #5
 8007b42:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007b44:	4b34      	ldr	r3, [pc, #208]	; (8007c18 <astronode_send_cfg_wr+0x13c>)
 8007b46:	191b      	adds	r3, r3, r4
 8007b48:	19db      	adds	r3, r3, r7
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	569a      	ldrsb	r2, [r3, r2]
 8007b4e:	4b33      	ldr	r3, [pc, #204]	; (8007c1c <astronode_send_cfg_wr+0x140>)
 8007b50:	191b      	adds	r3, r3, r4
 8007b52:	19db      	adds	r3, r3, r7
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	b25b      	sxtb	r3, r3
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007b5e:	4b30      	ldr	r3, [pc, #192]	; (8007c20 <astronode_send_cfg_wr+0x144>)
 8007b60:	191b      	adds	r3, r3, r4
 8007b62:	19db      	adds	r3, r3, r7
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	b25b      	sxtb	r3, r3
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007b6e:	4b2d      	ldr	r3, [pc, #180]	; (8007c24 <astronode_send_cfg_wr+0x148>)
 8007b70:	191b      	adds	r3, r3, r4
 8007b72:	19db      	adds	r3, r3, r7
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	00db      	lsls	r3, r3, #3
 8007b78:	b25b      	sxtb	r3, r3
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	b25b      	sxtb	r3, r3
 8007b7e:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007b80:	187b      	adds	r3, r7, r1
 8007b82:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007b84:	23d4      	movs	r3, #212	; 0xd4
 8007b86:	005b      	lsls	r3, r3, #1
 8007b88:	2508      	movs	r5, #8
 8007b8a:	195b      	adds	r3, r3, r5
 8007b8c:	19db      	adds	r3, r3, r7
 8007b8e:	2200      	movs	r2, #0
 8007b90:	569a      	ldrsb	r2, [r3, r2]
 8007b92:	23d6      	movs	r3, #214	; 0xd6
 8007b94:	005b      	lsls	r3, r3, #1
 8007b96:	195b      	adds	r3, r3, r5
 8007b98:	19db      	adds	r3, r3, r7
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	b25b      	sxtb	r3, r3
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8007ba4:	23d8      	movs	r3, #216	; 0xd8
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	195b      	adds	r3, r3, r5
 8007baa:	19db      	adds	r3, r3, r7
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	b25b      	sxtb	r3, r3
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8007bb6:	23da      	movs	r3, #218	; 0xda
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	195b      	adds	r3, r3, r5
 8007bbc:	19db      	adds	r3, r3, r7
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	00db      	lsls	r3, r3, #3
 8007bc2:	b25b      	sxtb	r3, r3
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	b25b      	sxtb	r3, r3
 8007bc8:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007bca:	187b      	adds	r3, r7, r1
 8007bcc:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007bce:	0008      	movs	r0, r1
 8007bd0:	187b      	adds	r3, r7, r1
 8007bd2:	22c4      	movs	r2, #196	; 0xc4
 8007bd4:	2103      	movs	r1, #3
 8007bd6:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007bd8:	002b      	movs	r3, r5
 8007bda:	18fa      	adds	r2, r7, r3
 8007bdc:	183b      	adds	r3, r7, r0
 8007bde:	0011      	movs	r1, r2
 8007be0:	0018      	movs	r0, r3
 8007be2:	f001 f9e9 	bl	8008fb8 <astronode_transport_send_receive>
 8007be6:	0003      	movs	r3, r0
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d10f      	bne.n	8007c0c <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007bec:	4b0e      	ldr	r3, [pc, #56]	; (8007c28 <astronode_send_cfg_wr+0x14c>)
 8007bee:	191b      	adds	r3, r3, r4
 8007bf0:	19db      	adds	r3, r3, r7
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b85      	cmp	r3, #133	; 0x85
 8007bf6:	d105      	bne.n	8007c04 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007bf8:	4b0c      	ldr	r3, [pc, #48]	; (8007c2c <astronode_send_cfg_wr+0x150>)
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	f7fb fa8a 	bl	8003114 <send_debug_logs>
            return true ;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e004      	b.n	8007c0e <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007c04:	4b0a      	ldr	r3, [pc, #40]	; (8007c30 <astronode_send_cfg_wr+0x154>)
 8007c06:	0018      	movs	r0, r3
 8007c08:	f7fb fa84 	bl	8003114 <send_debug_logs>
        }
    }
    return false ;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	0018      	movs	r0, r3
 8007c10:	46bd      	mov	sp, r7
 8007c12:	b067      	add	sp, #412	; 0x19c
 8007c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c16:	46c0      	nop			; (mov r8, r8)
 8007c18:	fffffe6f 	.word	0xfffffe6f
 8007c1c:	fffffe6e 	.word	0xfffffe6e
 8007c20:	fffffe6d 	.word	0xfffffe6d
 8007c24:	fffffe6c 	.word	0xfffffe6c
 8007c28:	fffffe70 	.word	0xfffffe70
 8007c2c:	08012f20 	.word	0x08012f20
 8007c30:	08012f4c 	.word	0x08012f4c

08007c34 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c36:	b0ed      	sub	sp, #436	; 0x1b4
 8007c38:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007c3a:	21c8      	movs	r1, #200	; 0xc8
 8007c3c:	2318      	movs	r3, #24
 8007c3e:	18cb      	adds	r3, r1, r3
 8007c40:	19db      	adds	r3, r3, r7
 8007c42:	0018      	movs	r0, r3
 8007c44:	23c6      	movs	r3, #198	; 0xc6
 8007c46:	001a      	movs	r2, r3
 8007c48:	2100      	movs	r1, #0
 8007c4a:	f004 f8e7 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8007c4e:	4b4a      	ldr	r3, [pc, #296]	; (8007d78 <astronode_send_mgi_rr+0x144>)
 8007c50:	26cc      	movs	r6, #204	; 0xcc
 8007c52:	0076      	lsls	r6, r6, #1
 8007c54:	199b      	adds	r3, r3, r6
 8007c56:	2218      	movs	r2, #24
 8007c58:	4694      	mov	ip, r2
 8007c5a:	44bc      	add	ip, r7
 8007c5c:	4463      	add	r3, ip
 8007c5e:	0018      	movs	r0, r3
 8007c60:	23c6      	movs	r3, #198	; 0xc6
 8007c62:	001a      	movs	r2, r3
 8007c64:	2100      	movs	r1, #0
 8007c66:	f004 f8d9 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8007c6a:	21c8      	movs	r1, #200	; 0xc8
 8007c6c:	2318      	movs	r3, #24
 8007c6e:	18cb      	adds	r3, r1, r3
 8007c70:	19db      	adds	r3, r3, r7
 8007c72:	2219      	movs	r2, #25
 8007c74:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007c76:	2318      	movs	r3, #24
 8007c78:	18fa      	adds	r2, r7, r3
 8007c7a:	2318      	movs	r3, #24
 8007c7c:	18cb      	adds	r3, r1, r3
 8007c7e:	19db      	adds	r3, r3, r7
 8007c80:	0011      	movs	r1, r2
 8007c82:	0018      	movs	r0, r3
 8007c84:	f001 f998 	bl	8008fb8 <astronode_transport_send_receive>
 8007c88:	0003      	movs	r3, r0
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d16f      	bne.n	8007d6e <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007c8e:	4b3a      	ldr	r3, [pc, #232]	; (8007d78 <astronode_send_mgi_rr+0x144>)
 8007c90:	0032      	movs	r2, r6
 8007c92:	189b      	adds	r3, r3, r2
 8007c94:	2118      	movs	r1, #24
 8007c96:	468c      	mov	ip, r1
 8007c98:	44bc      	add	ip, r7
 8007c9a:	4463      	add	r3, ip
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2b99      	cmp	r3, #153	; 0x99
 8007ca0:	d161      	bne.n	8007d66 <astronode_send_mgi_rr+0x132>
        {
 8007ca2:	466b      	mov	r3, sp
 8007ca4:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8007ca6:	4b34      	ldr	r3, [pc, #208]	; (8007d78 <astronode_send_mgi_rr+0x144>)
 8007ca8:	189b      	adds	r3, r3, r2
 8007caa:	2218      	movs	r2, #24
 8007cac:	4694      	mov	ip, r2
 8007cae:	44bc      	add	ip, r7
 8007cb0:	4463      	add	r3, ip
 8007cb2:	22c4      	movs	r2, #196	; 0xc4
 8007cb4:	5a9b      	ldrh	r3, [r3, r2]
 8007cb6:	001a      	movs	r2, r3
 8007cb8:	3a01      	subs	r2, #1
 8007cba:	21ca      	movs	r1, #202	; 0xca
 8007cbc:	0049      	lsls	r1, r1, #1
 8007cbe:	2018      	movs	r0, #24
 8007cc0:	1809      	adds	r1, r1, r0
 8007cc2:	19c9      	adds	r1, r1, r7
 8007cc4:	600a      	str	r2, [r1, #0]
 8007cc6:	001c      	movs	r4, r3
 8007cc8:	2200      	movs	r2, #0
 8007cca:	0015      	movs	r5, r2
 8007ccc:	0020      	movs	r0, r4
 8007cce:	0029      	movs	r1, r5
 8007cd0:	0004      	movs	r4, r0
 8007cd2:	0f62      	lsrs	r2, r4, #29
 8007cd4:	000c      	movs	r4, r1
 8007cd6:	00e4      	lsls	r4, r4, #3
 8007cd8:	617c      	str	r4, [r7, #20]
 8007cda:	697c      	ldr	r4, [r7, #20]
 8007cdc:	4314      	orrs	r4, r2
 8007cde:	617c      	str	r4, [r7, #20]
 8007ce0:	0001      	movs	r1, r0
 8007ce2:	00c9      	lsls	r1, r1, #3
 8007ce4:	6139      	str	r1, [r7, #16]
 8007ce6:	603b      	str	r3, [r7, #0]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	6838      	ldr	r0, [r7, #0]
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	0004      	movs	r4, r0
 8007cf2:	0f62      	lsrs	r2, r4, #29
 8007cf4:	000c      	movs	r4, r1
 8007cf6:	00e4      	lsls	r4, r4, #3
 8007cf8:	60fc      	str	r4, [r7, #12]
 8007cfa:	68fc      	ldr	r4, [r7, #12]
 8007cfc:	4314      	orrs	r4, r2
 8007cfe:	60fc      	str	r4, [r7, #12]
 8007d00:	0001      	movs	r1, r0
 8007d02:	00ca      	lsls	r2, r1, #3
 8007d04:	60ba      	str	r2, [r7, #8]
 8007d06:	3307      	adds	r3, #7
 8007d08:	08db      	lsrs	r3, r3, #3
 8007d0a:	00db      	lsls	r3, r3, #3
 8007d0c:	4669      	mov	r1, sp
 8007d0e:	1acb      	subs	r3, r1, r3
 8007d10:	469d      	mov	sp, r3
 8007d12:	466b      	mov	r3, sp
 8007d14:	3300      	adds	r3, #0
 8007d16:	24c8      	movs	r4, #200	; 0xc8
 8007d18:	0064      	lsls	r4, r4, #1
 8007d1a:	2218      	movs	r2, #24
 8007d1c:	18a2      	adds	r2, r4, r2
 8007d1e:	19d1      	adds	r1, r2, r7
 8007d20:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8007d22:	4b16      	ldr	r3, [pc, #88]	; (8007d7c <astronode_send_mgi_rr+0x148>)
 8007d24:	0018      	movs	r0, r3
 8007d26:	f7fb f9f5 	bl	8003114 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8007d2a:	4b13      	ldr	r3, [pc, #76]	; (8007d78 <astronode_send_mgi_rr+0x144>)
 8007d2c:	22cc      	movs	r2, #204	; 0xcc
 8007d2e:	0052      	lsls	r2, r2, #1
 8007d30:	189b      	adds	r3, r3, r2
 8007d32:	2218      	movs	r2, #24
 8007d34:	4694      	mov	ip, r2
 8007d36:	44bc      	add	ip, r7
 8007d38:	4463      	add	r3, ip
 8007d3a:	22c4      	movs	r2, #196	; 0xc4
 8007d3c:	5a9b      	ldrh	r3, [r3, r2]
 8007d3e:	0019      	movs	r1, r3
 8007d40:	2318      	movs	r3, #24
 8007d42:	18fb      	adds	r3, r7, r3
 8007d44:	3301      	adds	r3, #1
 8007d46:	4a0e      	ldr	r2, [pc, #56]	; (8007d80 <astronode_send_mgi_rr+0x14c>)
 8007d48:	2018      	movs	r0, #24
 8007d4a:	1820      	adds	r0, r4, r0
 8007d4c:	19c0      	adds	r0, r0, r7
 8007d4e:	6800      	ldr	r0, [r0, #0]
 8007d50:	f003 ff9a 	bl	800bc88 <snprintf>
            send_debug_logs(guid);
 8007d54:	2318      	movs	r3, #24
 8007d56:	18e3      	adds	r3, r4, r3
 8007d58:	19db      	adds	r3, r3, r7
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	0018      	movs	r0, r3
 8007d5e:	f7fb f9d9 	bl	8003114 <send_debug_logs>
 8007d62:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007d64:	e003      	b.n	8007d6e <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8007d66:	4b07      	ldr	r3, [pc, #28]	; (8007d84 <astronode_send_mgi_rr+0x150>)
 8007d68:	0018      	movs	r0, r3
 8007d6a:	f7fb f9d3 	bl	8003114 <send_debug_logs>
}
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	46bd      	mov	sp, r7
 8007d72:	b06d      	add	sp, #436	; 0x1b4
 8007d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	fffffe68 	.word	0xfffffe68
 8007d7c:	08012fd8 	.word	0x08012fd8
 8007d80:	08012fe8 	.word	0x08012fe8
 8007d84:	08012fec 	.word	0x08012fec

08007d88 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8007d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d8a:	b0ed      	sub	sp, #436	; 0x1b4
 8007d8c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007d8e:	21c8      	movs	r1, #200	; 0xc8
 8007d90:	2318      	movs	r3, #24
 8007d92:	18cb      	adds	r3, r1, r3
 8007d94:	19db      	adds	r3, r3, r7
 8007d96:	0018      	movs	r0, r3
 8007d98:	23c6      	movs	r3, #198	; 0xc6
 8007d9a:	001a      	movs	r2, r3
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	f004 f83d 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8007da2:	4b4a      	ldr	r3, [pc, #296]	; (8007ecc <astronode_send_msn_rr+0x144>)
 8007da4:	26cc      	movs	r6, #204	; 0xcc
 8007da6:	0076      	lsls	r6, r6, #1
 8007da8:	199b      	adds	r3, r3, r6
 8007daa:	2218      	movs	r2, #24
 8007dac:	4694      	mov	ip, r2
 8007dae:	44bc      	add	ip, r7
 8007db0:	4463      	add	r3, ip
 8007db2:	0018      	movs	r0, r3
 8007db4:	23c6      	movs	r3, #198	; 0xc6
 8007db6:	001a      	movs	r2, r3
 8007db8:	2100      	movs	r1, #0
 8007dba:	f004 f82f 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8007dbe:	21c8      	movs	r1, #200	; 0xc8
 8007dc0:	2318      	movs	r3, #24
 8007dc2:	18cb      	adds	r3, r1, r3
 8007dc4:	19db      	adds	r3, r3, r7
 8007dc6:	221a      	movs	r2, #26
 8007dc8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007dca:	2318      	movs	r3, #24
 8007dcc:	18fa      	adds	r2, r7, r3
 8007dce:	2318      	movs	r3, #24
 8007dd0:	18cb      	adds	r3, r1, r3
 8007dd2:	19db      	adds	r3, r3, r7
 8007dd4:	0011      	movs	r1, r2
 8007dd6:	0018      	movs	r0, r3
 8007dd8:	f001 f8ee 	bl	8008fb8 <astronode_transport_send_receive>
 8007ddc:	0003      	movs	r3, r0
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d16f      	bne.n	8007ec2 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8007de2:	4b3a      	ldr	r3, [pc, #232]	; (8007ecc <astronode_send_msn_rr+0x144>)
 8007de4:	0032      	movs	r2, r6
 8007de6:	189b      	adds	r3, r3, r2
 8007de8:	2118      	movs	r1, #24
 8007dea:	468c      	mov	ip, r1
 8007dec:	44bc      	add	ip, r7
 8007dee:	4463      	add	r3, ip
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	2b9a      	cmp	r3, #154	; 0x9a
 8007df4:	d161      	bne.n	8007eba <astronode_send_msn_rr+0x132>
        {
 8007df6:	466b      	mov	r3, sp
 8007df8:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8007dfa:	4b34      	ldr	r3, [pc, #208]	; (8007ecc <astronode_send_msn_rr+0x144>)
 8007dfc:	189b      	adds	r3, r3, r2
 8007dfe:	2218      	movs	r2, #24
 8007e00:	4694      	mov	ip, r2
 8007e02:	44bc      	add	ip, r7
 8007e04:	4463      	add	r3, ip
 8007e06:	22c4      	movs	r2, #196	; 0xc4
 8007e08:	5a9b      	ldrh	r3, [r3, r2]
 8007e0a:	001a      	movs	r2, r3
 8007e0c:	3a01      	subs	r2, #1
 8007e0e:	21ca      	movs	r1, #202	; 0xca
 8007e10:	0049      	lsls	r1, r1, #1
 8007e12:	2018      	movs	r0, #24
 8007e14:	1809      	adds	r1, r1, r0
 8007e16:	19c9      	adds	r1, r1, r7
 8007e18:	600a      	str	r2, [r1, #0]
 8007e1a:	001c      	movs	r4, r3
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	0015      	movs	r5, r2
 8007e20:	0020      	movs	r0, r4
 8007e22:	0029      	movs	r1, r5
 8007e24:	0004      	movs	r4, r0
 8007e26:	0f62      	lsrs	r2, r4, #29
 8007e28:	000c      	movs	r4, r1
 8007e2a:	00e4      	lsls	r4, r4, #3
 8007e2c:	617c      	str	r4, [r7, #20]
 8007e2e:	697c      	ldr	r4, [r7, #20]
 8007e30:	4314      	orrs	r4, r2
 8007e32:	617c      	str	r4, [r7, #20]
 8007e34:	0001      	movs	r1, r0
 8007e36:	00c9      	lsls	r1, r1, #3
 8007e38:	6139      	str	r1, [r7, #16]
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	6838      	ldr	r0, [r7, #0]
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	0004      	movs	r4, r0
 8007e46:	0f62      	lsrs	r2, r4, #29
 8007e48:	000c      	movs	r4, r1
 8007e4a:	00e4      	lsls	r4, r4, #3
 8007e4c:	60fc      	str	r4, [r7, #12]
 8007e4e:	68fc      	ldr	r4, [r7, #12]
 8007e50:	4314      	orrs	r4, r2
 8007e52:	60fc      	str	r4, [r7, #12]
 8007e54:	0001      	movs	r1, r0
 8007e56:	00ca      	lsls	r2, r1, #3
 8007e58:	60ba      	str	r2, [r7, #8]
 8007e5a:	3307      	adds	r3, #7
 8007e5c:	08db      	lsrs	r3, r3, #3
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	4669      	mov	r1, sp
 8007e62:	1acb      	subs	r3, r1, r3
 8007e64:	469d      	mov	sp, r3
 8007e66:	466b      	mov	r3, sp
 8007e68:	3300      	adds	r3, #0
 8007e6a:	24c8      	movs	r4, #200	; 0xc8
 8007e6c:	0064      	lsls	r4, r4, #1
 8007e6e:	2218      	movs	r2, #24
 8007e70:	18a2      	adds	r2, r4, r2
 8007e72:	19d1      	adds	r1, r2, r7
 8007e74:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8007e76:	4b16      	ldr	r3, [pc, #88]	; (8007ed0 <astronode_send_msn_rr+0x148>)
 8007e78:	0018      	movs	r0, r3
 8007e7a:	f7fb f94b 	bl	8003114 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8007e7e:	4b13      	ldr	r3, [pc, #76]	; (8007ecc <astronode_send_msn_rr+0x144>)
 8007e80:	22cc      	movs	r2, #204	; 0xcc
 8007e82:	0052      	lsls	r2, r2, #1
 8007e84:	189b      	adds	r3, r3, r2
 8007e86:	2218      	movs	r2, #24
 8007e88:	4694      	mov	ip, r2
 8007e8a:	44bc      	add	ip, r7
 8007e8c:	4463      	add	r3, ip
 8007e8e:	22c4      	movs	r2, #196	; 0xc4
 8007e90:	5a9b      	ldrh	r3, [r3, r2]
 8007e92:	0019      	movs	r1, r3
 8007e94:	2318      	movs	r3, #24
 8007e96:	18fb      	adds	r3, r7, r3
 8007e98:	3301      	adds	r3, #1
 8007e9a:	4a0e      	ldr	r2, [pc, #56]	; (8007ed4 <astronode_send_msn_rr+0x14c>)
 8007e9c:	2018      	movs	r0, #24
 8007e9e:	1820      	adds	r0, r4, r0
 8007ea0:	19c0      	adds	r0, r0, r7
 8007ea2:	6800      	ldr	r0, [r0, #0]
 8007ea4:	f003 fef0 	bl	800bc88 <snprintf>
            send_debug_logs(serial_number);
 8007ea8:	2318      	movs	r3, #24
 8007eaa:	18e3      	adds	r3, r4, r3
 8007eac:	19db      	adds	r3, r3, r7
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	0018      	movs	r0, r3
 8007eb2:	f7fb f92f 	bl	8003114 <send_debug_logs>
 8007eb6:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007eb8:	e003      	b.n	8007ec2 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007eba:	4b07      	ldr	r3, [pc, #28]	; (8007ed8 <astronode_send_msn_rr+0x150>)
 8007ebc:	0018      	movs	r0, r3
 8007ebe:	f7fb f929 	bl	8003114 <send_debug_logs>
}
 8007ec2:	46c0      	nop			; (mov r8, r8)
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	b06d      	add	sp, #436	; 0x1b4
 8007ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eca:	46c0      	nop			; (mov r8, r8)
 8007ecc:	fffffe68 	.word	0xfffffe68
 8007ed0:	08013008 	.word	0x08013008
 8007ed4:	08012fe8 	.word	0x08012fe8
 8007ed8:	08013024 	.word	0x08013024

08007edc <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 8007edc:	b5b0      	push	{r4, r5, r7, lr}
 8007ede:	b0e4      	sub	sp, #400	; 0x190
 8007ee0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007ee2:	24c8      	movs	r4, #200	; 0xc8
 8007ee4:	193b      	adds	r3, r7, r4
 8007ee6:	0018      	movs	r0, r3
 8007ee8:	23c6      	movs	r3, #198	; 0xc6
 8007eea:	001a      	movs	r2, r3
 8007eec:	2100      	movs	r1, #0
 8007eee:	f003 ff95 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8007ef2:	4b31      	ldr	r3, [pc, #196]	; (8007fb8 <astronode_send_evt_rr+0xdc>)
 8007ef4:	25c8      	movs	r5, #200	; 0xc8
 8007ef6:	006d      	lsls	r5, r5, #1
 8007ef8:	195b      	adds	r3, r3, r5
 8007efa:	19db      	adds	r3, r3, r7
 8007efc:	0018      	movs	r0, r3
 8007efe:	23c6      	movs	r3, #198	; 0xc6
 8007f00:	001a      	movs	r2, r3
 8007f02:	2100      	movs	r1, #0
 8007f04:	f003 ff8a 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8007f08:	193b      	adds	r3, r7, r4
 8007f0a:	2265      	movs	r2, #101	; 0x65
 8007f0c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007f0e:	003a      	movs	r2, r7
 8007f10:	193b      	adds	r3, r7, r4
 8007f12:	0011      	movs	r1, r2
 8007f14:	0018      	movs	r0, r3
 8007f16:	f001 f84f 	bl	8008fb8 <astronode_transport_send_receive>
 8007f1a:	0003      	movs	r3, r0
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d147      	bne.n	8007fb0 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8007f20:	4b25      	ldr	r3, [pc, #148]	; (8007fb8 <astronode_send_evt_rr+0xdc>)
 8007f22:	195b      	adds	r3, r3, r5
 8007f24:	19db      	adds	r3, r3, r7
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2be5      	cmp	r3, #229	; 0xe5
 8007f2a:	d141      	bne.n	8007fb0 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8007f2c:	4b22      	ldr	r3, [pc, #136]	; (8007fb8 <astronode_send_evt_rr+0xdc>)
 8007f2e:	195b      	adds	r3, r3, r5
 8007f30:	19db      	adds	r3, r3, r7
 8007f32:	785b      	ldrb	r3, [r3, #1]
 8007f34:	001a      	movs	r2, r3
 8007f36:	2301      	movs	r3, #1
 8007f38:	4013      	ands	r3, r2
 8007f3a:	d006      	beq.n	8007f4a <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8007f3c:	4b1f      	ldr	r3, [pc, #124]	; (8007fbc <astronode_send_evt_rr+0xe0>)
 8007f3e:	2201      	movs	r2, #1
 8007f40:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8007f42:	4b1f      	ldr	r3, [pc, #124]	; (8007fc0 <astronode_send_evt_rr+0xe4>)
 8007f44:	0018      	movs	r0, r3
 8007f46:	f7fb f8e5 	bl	8003114 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8007f4a:	4b1b      	ldr	r3, [pc, #108]	; (8007fb8 <astronode_send_evt_rr+0xdc>)
 8007f4c:	22c8      	movs	r2, #200	; 0xc8
 8007f4e:	0052      	lsls	r2, r2, #1
 8007f50:	189b      	adds	r3, r3, r2
 8007f52:	19db      	adds	r3, r3, r7
 8007f54:	785b      	ldrb	r3, [r3, #1]
 8007f56:	001a      	movs	r2, r3
 8007f58:	2302      	movs	r3, #2
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	d006      	beq.n	8007f6c <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8007f5e:	4b19      	ldr	r3, [pc, #100]	; (8007fc4 <astronode_send_evt_rr+0xe8>)
 8007f60:	2201      	movs	r2, #1
 8007f62:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8007f64:	4b18      	ldr	r3, [pc, #96]	; (8007fc8 <astronode_send_evt_rr+0xec>)
 8007f66:	0018      	movs	r0, r3
 8007f68:	f7fb f8d4 	bl	8003114 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8007f6c:	4b12      	ldr	r3, [pc, #72]	; (8007fb8 <astronode_send_evt_rr+0xdc>)
 8007f6e:	22c8      	movs	r2, #200	; 0xc8
 8007f70:	0052      	lsls	r2, r2, #1
 8007f72:	189b      	adds	r3, r3, r2
 8007f74:	19db      	adds	r3, r3, r7
 8007f76:	785b      	ldrb	r3, [r3, #1]
 8007f78:	001a      	movs	r2, r3
 8007f7a:	2304      	movs	r3, #4
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	d006      	beq.n	8007f8e <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8007f80:	4b12      	ldr	r3, [pc, #72]	; (8007fcc <astronode_send_evt_rr+0xf0>)
 8007f82:	2201      	movs	r2, #1
 8007f84:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8007f86:	4b12      	ldr	r3, [pc, #72]	; (8007fd0 <astronode_send_evt_rr+0xf4>)
 8007f88:	0018      	movs	r0, r3
 8007f8a:	f7fb f8c3 	bl	8003114 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8007f8e:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <astronode_send_evt_rr+0xdc>)
 8007f90:	22c8      	movs	r2, #200	; 0xc8
 8007f92:	0052      	lsls	r2, r2, #1
 8007f94:	189b      	adds	r3, r3, r2
 8007f96:	19db      	adds	r3, r3, r7
 8007f98:	785b      	ldrb	r3, [r3, #1]
 8007f9a:	001a      	movs	r2, r3
 8007f9c:	2308      	movs	r3, #8
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	d006      	beq.n	8007fb0 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8007fa2:	4b0c      	ldr	r3, [pc, #48]	; (8007fd4 <astronode_send_evt_rr+0xf8>)
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8007fa8:	4b0b      	ldr	r3, [pc, #44]	; (8007fd8 <astronode_send_evt_rr+0xfc>)
 8007faa:	0018      	movs	r0, r3
 8007fac:	f7fb f8b2 	bl	8003114 <send_debug_logs>
            }

        }
    }
}
 8007fb0:	46c0      	nop			; (mov r8, r8)
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	b064      	add	sp, #400	; 0x190
 8007fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8007fb8:	fffffe70 	.word	0xfffffe70
 8007fbc:	20000b0c 	.word	0x20000b0c
 8007fc0:	080130cc 	.word	0x080130cc
 8007fc4:	20000b0d 	.word	0x20000b0d
 8007fc8:	080130f0 	.word	0x080130f0
 8007fcc:	20000b0e 	.word	0x20000b0e
 8007fd0:	08013108 	.word	0x08013108
 8007fd4:	20000b0f 	.word	0x20000b0f
 8007fd8:	0801311c 	.word	0x0801311c

08007fdc <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8007fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fde:	b0e7      	sub	sp, #412	; 0x19c
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 8007fe6:	24d0      	movs	r4, #208	; 0xd0
 8007fe8:	193b      	adds	r3, r7, r4
 8007fea:	0018      	movs	r0, r3
 8007fec:	23c6      	movs	r3, #198	; 0xc6
 8007fee:	001a      	movs	r2, r3
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	f003 ff13 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8007ff6:	4b56      	ldr	r3, [pc, #344]	; (8008150 <astronode_send_geo_wr+0x174>)
 8007ff8:	26cc      	movs	r6, #204	; 0xcc
 8007ffa:	0076      	lsls	r6, r6, #1
 8007ffc:	199b      	adds	r3, r3, r6
 8007ffe:	19db      	adds	r3, r3, r7
 8008000:	0018      	movs	r0, r3
 8008002:	23c6      	movs	r3, #198	; 0xc6
 8008004:	001a      	movs	r2, r3
 8008006:	2100      	movs	r1, #0
 8008008:	f003 ff08 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 800800c:	193b      	adds	r3, r7, r4
 800800e:	2235      	movs	r2, #53	; 0x35
 8008010:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 8008012:	193b      	adds	r3, r7, r4
 8008014:	22c4      	movs	r2, #196	; 0xc4
 8008016:	5a9b      	ldrh	r3, [r3, r2]
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	b290      	uxth	r0, r2
 800801c:	193a      	adds	r2, r7, r4
 800801e:	21c4      	movs	r1, #196	; 0xc4
 8008020:	5250      	strh	r0, [r2, r1]
 8008022:	0019      	movs	r1, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	b2da      	uxtb	r2, r3
 8008028:	193b      	adds	r3, r7, r4
 800802a:	185b      	adds	r3, r3, r1
 800802c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	1218      	asrs	r0, r3, #8
 8008032:	0025      	movs	r5, r4
 8008034:	197b      	adds	r3, r7, r5
 8008036:	22c4      	movs	r2, #196	; 0xc4
 8008038:	5a9b      	ldrh	r3, [r3, r2]
 800803a:	1c5a      	adds	r2, r3, #1
 800803c:	b294      	uxth	r4, r2
 800803e:	197a      	adds	r2, r7, r5
 8008040:	21c4      	movs	r1, #196	; 0xc4
 8008042:	5254      	strh	r4, [r2, r1]
 8008044:	0019      	movs	r1, r3
 8008046:	b2c2      	uxtb	r2, r0
 8008048:	002c      	movs	r4, r5
 800804a:	193b      	adds	r3, r7, r4
 800804c:	185b      	adds	r3, r3, r1
 800804e:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	1418      	asrs	r0, r3, #16
 8008054:	0025      	movs	r5, r4
 8008056:	197b      	adds	r3, r7, r5
 8008058:	22c4      	movs	r2, #196	; 0xc4
 800805a:	5a9b      	ldrh	r3, [r3, r2]
 800805c:	1c5a      	adds	r2, r3, #1
 800805e:	b294      	uxth	r4, r2
 8008060:	197a      	adds	r2, r7, r5
 8008062:	21c4      	movs	r1, #196	; 0xc4
 8008064:	5254      	strh	r4, [r2, r1]
 8008066:	0019      	movs	r1, r3
 8008068:	b2c2      	uxtb	r2, r0
 800806a:	002c      	movs	r4, r5
 800806c:	193b      	adds	r3, r7, r4
 800806e:	185b      	adds	r3, r3, r1
 8008070:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	1618      	asrs	r0, r3, #24
 8008076:	0025      	movs	r5, r4
 8008078:	197b      	adds	r3, r7, r5
 800807a:	22c4      	movs	r2, #196	; 0xc4
 800807c:	5a9b      	ldrh	r3, [r3, r2]
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	b294      	uxth	r4, r2
 8008082:	197a      	adds	r2, r7, r5
 8008084:	21c4      	movs	r1, #196	; 0xc4
 8008086:	5254      	strh	r4, [r2, r1]
 8008088:	0019      	movs	r1, r3
 800808a:	b2c2      	uxtb	r2, r0
 800808c:	002c      	movs	r4, r5
 800808e:	193b      	adds	r3, r7, r4
 8008090:	185b      	adds	r3, r3, r1
 8008092:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8008094:	193b      	adds	r3, r7, r4
 8008096:	22c4      	movs	r2, #196	; 0xc4
 8008098:	5a9b      	ldrh	r3, [r3, r2]
 800809a:	1c5a      	adds	r2, r3, #1
 800809c:	b290      	uxth	r0, r2
 800809e:	193a      	adds	r2, r7, r4
 80080a0:	21c4      	movs	r1, #196	; 0xc4
 80080a2:	5250      	strh	r0, [r2, r1]
 80080a4:	0019      	movs	r1, r3
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	193b      	adds	r3, r7, r4
 80080ac:	185b      	adds	r3, r3, r1
 80080ae:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	1218      	asrs	r0, r3, #8
 80080b4:	0025      	movs	r5, r4
 80080b6:	197b      	adds	r3, r7, r5
 80080b8:	22c4      	movs	r2, #196	; 0xc4
 80080ba:	5a9b      	ldrh	r3, [r3, r2]
 80080bc:	1c5a      	adds	r2, r3, #1
 80080be:	b294      	uxth	r4, r2
 80080c0:	197a      	adds	r2, r7, r5
 80080c2:	21c4      	movs	r1, #196	; 0xc4
 80080c4:	5254      	strh	r4, [r2, r1]
 80080c6:	0019      	movs	r1, r3
 80080c8:	b2c2      	uxtb	r2, r0
 80080ca:	002c      	movs	r4, r5
 80080cc:	193b      	adds	r3, r7, r4
 80080ce:	185b      	adds	r3, r3, r1
 80080d0:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	1418      	asrs	r0, r3, #16
 80080d6:	0025      	movs	r5, r4
 80080d8:	197b      	adds	r3, r7, r5
 80080da:	22c4      	movs	r2, #196	; 0xc4
 80080dc:	5a9b      	ldrh	r3, [r3, r2]
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	b294      	uxth	r4, r2
 80080e2:	197a      	adds	r2, r7, r5
 80080e4:	21c4      	movs	r1, #196	; 0xc4
 80080e6:	5254      	strh	r4, [r2, r1]
 80080e8:	0019      	movs	r1, r3
 80080ea:	b2c2      	uxtb	r2, r0
 80080ec:	002c      	movs	r4, r5
 80080ee:	193b      	adds	r3, r7, r4
 80080f0:	185b      	adds	r3, r3, r1
 80080f2:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	1618      	asrs	r0, r3, #24
 80080f8:	0025      	movs	r5, r4
 80080fa:	197b      	adds	r3, r7, r5
 80080fc:	22c4      	movs	r2, #196	; 0xc4
 80080fe:	5a9b      	ldrh	r3, [r3, r2]
 8008100:	1c5a      	adds	r2, r3, #1
 8008102:	b294      	uxth	r4, r2
 8008104:	197a      	adds	r2, r7, r5
 8008106:	21c4      	movs	r1, #196	; 0xc4
 8008108:	5254      	strh	r4, [r2, r1]
 800810a:	0019      	movs	r1, r3
 800810c:	b2c2      	uxtb	r2, r0
 800810e:	0028      	movs	r0, r5
 8008110:	183b      	adds	r3, r7, r0
 8008112:	185b      	adds	r3, r3, r1
 8008114:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008116:	2308      	movs	r3, #8
 8008118:	18fa      	adds	r2, r7, r3
 800811a:	183b      	adds	r3, r7, r0
 800811c:	0011      	movs	r1, r2
 800811e:	0018      	movs	r0, r3
 8008120:	f000 ff4a 	bl	8008fb8 <astronode_transport_send_receive>
 8008124:	0003      	movs	r3, r0
 8008126:	2b01      	cmp	r3, #1
 8008128:	d10e      	bne.n	8008148 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 800812a:	4b09      	ldr	r3, [pc, #36]	; (8008150 <astronode_send_geo_wr+0x174>)
 800812c:	199b      	adds	r3, r3, r6
 800812e:	19db      	adds	r3, r3, r7
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	2bb5      	cmp	r3, #181	; 0xb5
 8008134:	d104      	bne.n	8008140 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 8008136:	4b07      	ldr	r3, [pc, #28]	; (8008154 <astronode_send_geo_wr+0x178>)
 8008138:	0018      	movs	r0, r3
 800813a:	f7fa ffeb 	bl	8003114 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 800813e:	e003      	b.n	8008148 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 8008140:	4b05      	ldr	r3, [pc, #20]	; (8008158 <astronode_send_geo_wr+0x17c>)
 8008142:	0018      	movs	r0, r3
 8008144:	f7fa ffe6 	bl	8003114 <send_debug_logs>
}
 8008148:	46c0      	nop			; (mov r8, r8)
 800814a:	46bd      	mov	sp, r7
 800814c:	b067      	add	sp, #412	; 0x19c
 800814e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008150:	fffffe70 	.word	0xfffffe70
 8008154:	08013130 	.word	0x08013130
 8008158:	0801315c 	.word	0x0801315c

0800815c <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 800815c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800815e:	b0fd      	sub	sp, #500	; 0x1f4
 8008160:	af02      	add	r7, sp, #8
 8008162:	6039      	str	r1, [r7, #0]
 8008164:	0011      	movs	r1, r2
 8008166:	4b4c      	ldr	r3, [pc, #304]	; (8008298 <astronode_send_pld_er+0x13c>)
 8008168:	26f4      	movs	r6, #244	; 0xf4
 800816a:	0076      	lsls	r6, r6, #1
 800816c:	199b      	adds	r3, r3, r6
 800816e:	19db      	adds	r3, r3, r7
 8008170:	1c02      	adds	r2, r0, #0
 8008172:	801a      	strh	r2, [r3, #0]
 8008174:	4b49      	ldr	r3, [pc, #292]	; (800829c <astronode_send_pld_er+0x140>)
 8008176:	199b      	adds	r3, r3, r6
 8008178:	19db      	adds	r3, r3, r7
 800817a:	1c0a      	adds	r2, r1, #0
 800817c:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 800817e:	2490      	movs	r4, #144	; 0x90
 8008180:	0064      	lsls	r4, r4, #1
 8008182:	193b      	adds	r3, r7, r4
 8008184:	0018      	movs	r0, r3
 8008186:	23c6      	movs	r3, #198	; 0xc6
 8008188:	001a      	movs	r2, r3
 800818a:	2100      	movs	r1, #0
 800818c:	f003 fe46 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8008190:	4b43      	ldr	r3, [pc, #268]	; (80082a0 <astronode_send_pld_er+0x144>)
 8008192:	199b      	adds	r3, r3, r6
 8008194:	19db      	adds	r3, r3, r7
 8008196:	0018      	movs	r0, r3
 8008198:	23c6      	movs	r3, #198	; 0xc6
 800819a:	001a      	movs	r2, r3
 800819c:	2100      	movs	r1, #0
 800819e:	f003 fe3d 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 80081a2:	193b      	adds	r3, r7, r4
 80081a4:	2225      	movs	r2, #37	; 0x25
 80081a6:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 80081a8:	193b      	adds	r3, r7, r4
 80081aa:	22c4      	movs	r2, #196	; 0xc4
 80081ac:	5a9b      	ldrh	r3, [r3, r2]
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	b290      	uxth	r0, r2
 80081b2:	193a      	adds	r2, r7, r4
 80081b4:	21c4      	movs	r1, #196	; 0xc4
 80081b6:	5250      	strh	r0, [r2, r1]
 80081b8:	0019      	movs	r1, r3
 80081ba:	4b37      	ldr	r3, [pc, #220]	; (8008298 <astronode_send_pld_er+0x13c>)
 80081bc:	199b      	adds	r3, r3, r6
 80081be:	19db      	adds	r3, r3, r7
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	193b      	adds	r3, r7, r4
 80081c6:	185b      	adds	r3, r3, r1
 80081c8:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 80081ca:	4b33      	ldr	r3, [pc, #204]	; (8008298 <astronode_send_pld_er+0x13c>)
 80081cc:	199b      	adds	r3, r3, r6
 80081ce:	19db      	adds	r3, r3, r7
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	0a1b      	lsrs	r3, r3, #8
 80081d4:	b298      	uxth	r0, r3
 80081d6:	0025      	movs	r5, r4
 80081d8:	197b      	adds	r3, r7, r5
 80081da:	22c4      	movs	r2, #196	; 0xc4
 80081dc:	5a9b      	ldrh	r3, [r3, r2]
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	b294      	uxth	r4, r2
 80081e2:	197a      	adds	r2, r7, r5
 80081e4:	21c4      	movs	r1, #196	; 0xc4
 80081e6:	5254      	strh	r4, [r2, r1]
 80081e8:	0019      	movs	r1, r3
 80081ea:	b2c2      	uxtb	r2, r0
 80081ec:	002c      	movs	r4, r5
 80081ee:	193b      	adds	r3, r7, r4
 80081f0:	185b      	adds	r3, r3, r1
 80081f2:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 80081f4:	193b      	adds	r3, r7, r4
 80081f6:	22c4      	movs	r2, #196	; 0xc4
 80081f8:	5a9b      	ldrh	r3, [r3, r2]
 80081fa:	001a      	movs	r2, r3
 80081fc:	193b      	adds	r3, r7, r4
 80081fe:	189b      	adds	r3, r3, r2
 8008200:	1c58      	adds	r0, r3, #1
 8008202:	4b26      	ldr	r3, [pc, #152]	; (800829c <astronode_send_pld_er+0x140>)
 8008204:	199b      	adds	r3, r3, r6
 8008206:	19db      	adds	r3, r3, r7
 8008208:	881a      	ldrh	r2, [r3, #0]
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	0019      	movs	r1, r3
 800820e:	f003 ff32 	bl	800c076 <memcpy>
    request.payload_len = 2 + payload_length;
 8008212:	4b22      	ldr	r3, [pc, #136]	; (800829c <astronode_send_pld_er+0x140>)
 8008214:	199b      	adds	r3, r3, r6
 8008216:	19db      	adds	r3, r3, r7
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	3302      	adds	r3, #2
 800821c:	b299      	uxth	r1, r3
 800821e:	193b      	adds	r3, r7, r4
 8008220:	22c4      	movs	r2, #196	; 0xc4
 8008222:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008224:	2358      	movs	r3, #88	; 0x58
 8008226:	18fa      	adds	r2, r7, r3
 8008228:	193b      	adds	r3, r7, r4
 800822a:	0011      	movs	r1, r2
 800822c:	0018      	movs	r0, r3
 800822e:	f000 fec3 	bl	8008fb8 <astronode_transport_send_receive>
 8008232:	0003      	movs	r3, r0
 8008234:	2b01      	cmp	r3, #1
 8008236:	d12a      	bne.n	800828e <astronode_send_pld_er+0x132>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8008238:	4b19      	ldr	r3, [pc, #100]	; (80082a0 <astronode_send_pld_er+0x144>)
 800823a:	199b      	adds	r3, r3, r6
 800823c:	19db      	adds	r3, r3, r7
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	2ba5      	cmp	r3, #165	; 0xa5
 8008242:	d114      	bne.n	800826e <astronode_send_pld_er+0x112>
        {
        	sprintf ( s , "%s,%d,payload_id:%d queued." , __FILE__ , __LINE__ , payload_id ) ;
 8008244:	4b14      	ldr	r3, [pc, #80]	; (8008298 <astronode_send_pld_er+0x13c>)
 8008246:	199b      	adds	r3, r3, r6
 8008248:	19db      	adds	r3, r3, r7
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	22ea      	movs	r2, #234	; 0xea
 800824e:	32ff      	adds	r2, #255	; 0xff
 8008250:	0014      	movs	r4, r2
 8008252:	4a14      	ldr	r2, [pc, #80]	; (80082a4 <astronode_send_pld_er+0x148>)
 8008254:	4914      	ldr	r1, [pc, #80]	; (80082a8 <astronode_send_pld_er+0x14c>)
 8008256:	2508      	movs	r5, #8
 8008258:	1978      	adds	r0, r7, r5
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	0023      	movs	r3, r4
 800825e:	f003 fd47 	bl	800bcf0 <sprintf>
            send_debug_logs ( s ) ;
 8008262:	197b      	adds	r3, r7, r5
 8008264:	0018      	movs	r0, r3
 8008266:	f7fa ff55 	bl	8003114 <send_debug_logs>
            return true ;
 800826a:	2301      	movs	r3, #1
 800826c:	e010      	b.n	8008290 <astronode_send_pld_er+0x134>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 800826e:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <astronode_send_pld_er+0x13c>)
 8008270:	22f4      	movs	r2, #244	; 0xf4
 8008272:	0052      	lsls	r2, r2, #1
 8008274:	189b      	adds	r3, r3, r2
 8008276:	19db      	adds	r3, r3, r7
 8008278:	881a      	ldrh	r2, [r3, #0]
 800827a:	490c      	ldr	r1, [pc, #48]	; (80082ac <astronode_send_pld_er+0x150>)
 800827c:	2408      	movs	r4, #8
 800827e:	193b      	adds	r3, r7, r4
 8008280:	0018      	movs	r0, r3
 8008282:	f003 fd35 	bl	800bcf0 <sprintf>
            send_debug_logs ( s ) ;
 8008286:	193b      	adds	r3, r7, r4
 8008288:	0018      	movs	r0, r3
 800828a:	f7fa ff43 	bl	8003114 <send_debug_logs>
        }
    }
    return false ;
 800828e:	2300      	movs	r3, #0
}
 8008290:	0018      	movs	r0, r3
 8008292:	46bd      	mov	sp, r7
 8008294:	b07b      	add	sp, #492	; 0x1ec
 8008296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008298:	fffffe1e 	.word	0xfffffe1e
 800829c:	fffffe1c 	.word	0xfffffe1c
 80082a0:	fffffe70 	.word	0xfffffe70
 80082a4:	080131d4 	.word	0x080131d4
 80082a8:	08013200 	.word	0x08013200
 80082ac:	0801321c 	.word	0x0801321c

080082b0 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 80082b0:	b5b0      	push	{r4, r5, r7, lr}
 80082b2:	b0e4      	sub	sp, #400	; 0x190
 80082b4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80082b6:	24c8      	movs	r4, #200	; 0xc8
 80082b8:	193b      	adds	r3, r7, r4
 80082ba:	0018      	movs	r0, r3
 80082bc:	23c6      	movs	r3, #198	; 0xc6
 80082be:	001a      	movs	r2, r3
 80082c0:	2100      	movs	r1, #0
 80082c2:	f003 fdab 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 80082c6:	4b15      	ldr	r3, [pc, #84]	; (800831c <astronode_send_pld_fr+0x6c>)
 80082c8:	25c8      	movs	r5, #200	; 0xc8
 80082ca:	006d      	lsls	r5, r5, #1
 80082cc:	195b      	adds	r3, r3, r5
 80082ce:	19db      	adds	r3, r3, r7
 80082d0:	0018      	movs	r0, r3
 80082d2:	23c6      	movs	r3, #198	; 0xc6
 80082d4:	001a      	movs	r2, r3
 80082d6:	2100      	movs	r1, #0
 80082d8:	f003 fda0 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 80082dc:	193b      	adds	r3, r7, r4
 80082de:	2227      	movs	r2, #39	; 0x27
 80082e0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80082e2:	003a      	movs	r2, r7
 80082e4:	193b      	adds	r3, r7, r4
 80082e6:	0011      	movs	r1, r2
 80082e8:	0018      	movs	r0, r3
 80082ea:	f000 fe65 	bl	8008fb8 <astronode_transport_send_receive>
 80082ee:	0003      	movs	r3, r0
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d10e      	bne.n	8008312 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 80082f4:	4b09      	ldr	r3, [pc, #36]	; (800831c <astronode_send_pld_fr+0x6c>)
 80082f6:	195b      	adds	r3, r3, r5
 80082f8:	19db      	adds	r3, r3, r7
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2ba7      	cmp	r3, #167	; 0xa7
 80082fe:	d104      	bne.n	800830a <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8008300:	4b07      	ldr	r3, [pc, #28]	; (8008320 <astronode_send_pld_fr+0x70>)
 8008302:	0018      	movs	r0, r3
 8008304:	f7fa ff06 	bl	8003114 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8008308:	e003      	b.n	8008312 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 800830a:	4b06      	ldr	r3, [pc, #24]	; (8008324 <astronode_send_pld_fr+0x74>)
 800830c:	0018      	movs	r0, r3
 800830e:	f7fa ff01 	bl	8003114 <send_debug_logs>
}
 8008312:	46c0      	nop			; (mov r8, r8)
 8008314:	46bd      	mov	sp, r7
 8008316:	b064      	add	sp, #400	; 0x190
 8008318:	bdb0      	pop	{r4, r5, r7, pc}
 800831a:	46c0      	nop			; (mov r8, r8)
 800831c:	fffffe70 	.word	0xfffffe70
 8008320:	0801324c 	.word	0x0801324c
 8008324:	08013284 	.word	0x08013284

08008328 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8008328:	b5b0      	push	{r4, r5, r7, lr}
 800832a:	b0e4      	sub	sp, #400	; 0x190
 800832c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800832e:	24c8      	movs	r4, #200	; 0xc8
 8008330:	193b      	adds	r3, r7, r4
 8008332:	0018      	movs	r0, r3
 8008334:	23c6      	movs	r3, #198	; 0xc6
 8008336:	001a      	movs	r2, r3
 8008338:	2100      	movs	r1, #0
 800833a:	f003 fd6f 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 800833e:	4b16      	ldr	r3, [pc, #88]	; (8008398 <astronode_send_res_cr+0x70>)
 8008340:	25c8      	movs	r5, #200	; 0xc8
 8008342:	006d      	lsls	r5, r5, #1
 8008344:	195b      	adds	r3, r3, r5
 8008346:	19db      	adds	r3, r3, r7
 8008348:	0018      	movs	r0, r3
 800834a:	23c6      	movs	r3, #198	; 0xc6
 800834c:	001a      	movs	r2, r3
 800834e:	2100      	movs	r1, #0
 8008350:	f003 fd64 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8008354:	193b      	adds	r3, r7, r4
 8008356:	2255      	movs	r2, #85	; 0x55
 8008358:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800835a:	003a      	movs	r2, r7
 800835c:	193b      	adds	r3, r7, r4
 800835e:	0011      	movs	r1, r2
 8008360:	0018      	movs	r0, r3
 8008362:	f000 fe29 	bl	8008fb8 <astronode_transport_send_receive>
 8008366:	0003      	movs	r3, r0
 8008368:	2b01      	cmp	r3, #1
 800836a:	d111      	bne.n	8008390 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 800836c:	4b0a      	ldr	r3, [pc, #40]	; (8008398 <astronode_send_res_cr+0x70>)
 800836e:	195b      	adds	r3, r3, r5
 8008370:	19db      	adds	r3, r3, r7
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	2bd5      	cmp	r3, #213	; 0xd5
 8008376:	d107      	bne.n	8008388 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8008378:	4b08      	ldr	r3, [pc, #32]	; (800839c <astronode_send_res_cr+0x74>)
 800837a:	2200      	movs	r2, #0
 800837c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 800837e:	4b08      	ldr	r3, [pc, #32]	; (80083a0 <astronode_send_res_cr+0x78>)
 8008380:	0018      	movs	r0, r3
 8008382:	f7fa fec7 	bl	8003114 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8008386:	e003      	b.n	8008390 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8008388:	4b06      	ldr	r3, [pc, #24]	; (80083a4 <astronode_send_res_cr+0x7c>)
 800838a:	0018      	movs	r0, r3
 800838c:	f7fa fec2 	bl	8003114 <send_debug_logs>
}
 8008390:	46c0      	nop			; (mov r8, r8)
 8008392:	46bd      	mov	sp, r7
 8008394:	b064      	add	sp, #400	; 0x190
 8008396:	bdb0      	pop	{r4, r5, r7, pc}
 8008398:	fffffe70 	.word	0xfffffe70
 800839c:	20000b0d 	.word	0x20000b0d
 80083a0:	080132c0 	.word	0x080132c0
 80083a4:	080132f4 	.word	0x080132f4

080083a8 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 80083a8:	b5b0      	push	{r4, r5, r7, lr}
 80083aa:	b0fa      	sub	sp, #488	; 0x1e8
 80083ac:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 80083ae:	258e      	movs	r5, #142	; 0x8e
 80083b0:	006d      	lsls	r5, r5, #1
 80083b2:	197b      	adds	r3, r7, r5
 80083b4:	0018      	movs	r0, r3
 80083b6:	23c6      	movs	r3, #198	; 0xc6
 80083b8:	001a      	movs	r2, r3
 80083ba:	2100      	movs	r1, #0
 80083bc:	f003 fd2e 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0} ;
 80083c0:	4b28      	ldr	r3, [pc, #160]	; (8008464 <astronode_send_rtc_rr+0xbc>)
 80083c2:	24f4      	movs	r4, #244	; 0xf4
 80083c4:	0064      	lsls	r4, r4, #1
 80083c6:	191b      	adds	r3, r3, r4
 80083c8:	19db      	adds	r3, r3, r7
 80083ca:	0018      	movs	r0, r3
 80083cc:	23c6      	movs	r3, #198	; 0xc6
 80083ce:	001a      	movs	r2, r3
 80083d0:	2100      	movs	r1, #0
 80083d2:	f003 fd23 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 80083d6:	197b      	adds	r3, r7, r5
 80083d8:	2217      	movs	r2, #23
 80083da:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80083dc:	2354      	movs	r3, #84	; 0x54
 80083de:	18fa      	adds	r2, r7, r3
 80083e0:	197b      	adds	r3, r7, r5
 80083e2:	0011      	movs	r1, r2
 80083e4:	0018      	movs	r0, r3
 80083e6:	f000 fde7 	bl	8008fb8 <astronode_transport_send_receive>
 80083ea:	0003      	movs	r3, r0
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d133      	bne.n	8008458 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 80083f0:	4b1c      	ldr	r3, [pc, #112]	; (8008464 <astronode_send_rtc_rr+0xbc>)
 80083f2:	0021      	movs	r1, r4
 80083f4:	185b      	adds	r3, r3, r1
 80083f6:	19db      	adds	r3, r3, r7
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	2b97      	cmp	r3, #151	; 0x97
 80083fc:	d128      	bne.n	8008450 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 80083fe:	4b19      	ldr	r3, [pc, #100]	; (8008464 <astronode_send_rtc_rr+0xbc>)
 8008400:	185b      	adds	r3, r3, r1
 8008402:	19db      	adds	r3, r3, r7
 8008404:	785b      	ldrb	r3, [r3, #1]
 8008406:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8008408:	4b16      	ldr	r3, [pc, #88]	; (8008464 <astronode_send_rtc_rr+0xbc>)
 800840a:	185b      	adds	r3, r3, r1
 800840c:	19db      	adds	r3, r3, r7
 800840e:	789b      	ldrb	r3, [r3, #2]
 8008410:	021b      	lsls	r3, r3, #8
 8008412:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8008414:	4b13      	ldr	r3, [pc, #76]	; (8008464 <astronode_send_rtc_rr+0xbc>)
 8008416:	185b      	adds	r3, r3, r1
 8008418:	19db      	adds	r3, r3, r7
 800841a:	78db      	ldrb	r3, [r3, #3]
 800841c:	041b      	lsls	r3, r3, #16
 800841e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8008420:	4b10      	ldr	r3, [pc, #64]	; (8008464 <astronode_send_rtc_rr+0xbc>)
 8008422:	185b      	adds	r3, r3, r1
 8008424:	19db      	adds	r3, r3, r7
 8008426:	791b      	ldrb	r3, [r3, #4]
 8008428:	061b      	lsls	r3, r3, #24
 800842a:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 800842c:	24f2      	movs	r4, #242	; 0xf2
 800842e:	0064      	lsls	r4, r4, #1
 8008430:	193a      	adds	r2, r7, r4
 8008432:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8008434:	193b      	adds	r3, r7, r4
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	490b      	ldr	r1, [pc, #44]	; (8008468 <astronode_send_rtc_rr+0xc0>)
 800843a:	1d3b      	adds	r3, r7, #4
 800843c:	0018      	movs	r0, r3
 800843e:	f003 fc57 	bl	800bcf0 <sprintf>
            send_debug_logs ( str ) ;
 8008442:	1d3b      	adds	r3, r7, #4
 8008444:	0018      	movs	r0, r3
 8008446:	f7fa fe65 	bl	8003114 <send_debug_logs>
            return rtc_time ;
 800844a:	193b      	adds	r3, r7, r4
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	e004      	b.n	800845a <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8008450:	4b06      	ldr	r3, [pc, #24]	; (800846c <astronode_send_rtc_rr+0xc4>)
 8008452:	0018      	movs	r0, r3
 8008454:	f7fa fe5e 	bl	8003114 <send_debug_logs>
        }
    }
    return 0 ;
 8008458:	2300      	movs	r3, #0
}
 800845a:	0018      	movs	r0, r3
 800845c:	46bd      	mov	sp, r7
 800845e:	b07a      	add	sp, #488	; 0x1e8
 8008460:	bdb0      	pop	{r4, r5, r7, pc}
 8008462:	46c0      	nop			; (mov r8, r8)
 8008464:	fffffe6c 	.word	0xfffffe6c
 8008468:	08013320 	.word	0x08013320
 800846c:	08013360 	.word	0x08013360

08008470 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8008470:	b5b0      	push	{r4, r5, r7, lr}
 8008472:	b0f8      	sub	sp, #480	; 0x1e0
 8008474:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008476:	258c      	movs	r5, #140	; 0x8c
 8008478:	006d      	lsls	r5, r5, #1
 800847a:	197b      	adds	r3, r7, r5
 800847c:	0018      	movs	r0, r3
 800847e:	23c6      	movs	r3, #198	; 0xc6
 8008480:	001a      	movs	r2, r3
 8008482:	2100      	movs	r1, #0
 8008484:	f003 fcca 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8008488:	4b21      	ldr	r3, [pc, #132]	; (8008510 <astronode_send_sak_rr+0xa0>)
 800848a:	24f0      	movs	r4, #240	; 0xf0
 800848c:	0064      	lsls	r4, r4, #1
 800848e:	191b      	adds	r3, r3, r4
 8008490:	19db      	adds	r3, r3, r7
 8008492:	0018      	movs	r0, r3
 8008494:	23c6      	movs	r3, #198	; 0xc6
 8008496:	001a      	movs	r2, r3
 8008498:	2100      	movs	r1, #0
 800849a:	f003 fcbf 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 800849e:	197b      	adds	r3, r7, r5
 80084a0:	2245      	movs	r2, #69	; 0x45
 80084a2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80084a4:	2350      	movs	r3, #80	; 0x50
 80084a6:	18fa      	adds	r2, r7, r3
 80084a8:	197b      	adds	r3, r7, r5
 80084aa:	0011      	movs	r1, r2
 80084ac:	0018      	movs	r0, r3
 80084ae:	f000 fd83 	bl	8008fb8 <astronode_transport_send_receive>
 80084b2:	0003      	movs	r3, r0
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d126      	bne.n	8008506 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80084b8:	4b15      	ldr	r3, [pc, #84]	; (8008510 <astronode_send_sak_rr+0xa0>)
 80084ba:	191b      	adds	r3, r3, r4
 80084bc:	19db      	adds	r3, r3, r7
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	2bc5      	cmp	r3, #197	; 0xc5
 80084c2:	d11c      	bne.n	80084fe <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 80084c4:	4b12      	ldr	r3, [pc, #72]	; (8008510 <astronode_send_sak_rr+0xa0>)
 80084c6:	191b      	adds	r3, r3, r4
 80084c8:	19db      	adds	r3, r3, r7
 80084ca:	785b      	ldrb	r3, [r3, #1]
 80084cc:	b299      	uxth	r1, r3
 80084ce:	4b10      	ldr	r3, [pc, #64]	; (8008510 <astronode_send_sak_rr+0xa0>)
 80084d0:	191b      	adds	r3, r3, r4
 80084d2:	19db      	adds	r3, r3, r7
 80084d4:	789b      	ldrb	r3, [r3, #2]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	021b      	lsls	r3, r3, #8
 80084da:	b29a      	uxth	r2, r3
 80084dc:	20ef      	movs	r0, #239	; 0xef
 80084de:	0040      	lsls	r0, r0, #1
 80084e0:	183b      	adds	r3, r7, r0
 80084e2:	188a      	adds	r2, r1, r2
 80084e4:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 80084e6:	183b      	adds	r3, r7, r0
 80084e8:	881a      	ldrh	r2, [r3, #0]
 80084ea:	490a      	ldr	r1, [pc, #40]	; (8008514 <astronode_send_sak_rr+0xa4>)
 80084ec:	003b      	movs	r3, r7
 80084ee:	0018      	movs	r0, r3
 80084f0:	f003 fbfe 	bl	800bcf0 <sprintf>
            send_debug_logs(str);
 80084f4:	003b      	movs	r3, r7
 80084f6:	0018      	movs	r0, r3
 80084f8:	f7fa fe0c 	bl	8003114 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 80084fc:	e003      	b.n	8008506 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 80084fe:	4b06      	ldr	r3, [pc, #24]	; (8008518 <astronode_send_sak_rr+0xa8>)
 8008500:	0018      	movs	r0, r3
 8008502:	f7fa fe07 	bl	8003114 <send_debug_logs>
}
 8008506:	46c0      	nop			; (mov r8, r8)
 8008508:	46bd      	mov	sp, r7
 800850a:	b078      	add	sp, #480	; 0x1e0
 800850c:	bdb0      	pop	{r4, r5, r7, pc}
 800850e:	46c0      	nop			; (mov r8, r8)
 8008510:	fffffe70 	.word	0xfffffe70
 8008514:	0801337c 	.word	0x0801337c
 8008518:	080133a8 	.word	0x080133a8

0800851c <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 800851c:	b5b0      	push	{r4, r5, r7, lr}
 800851e:	b0e4      	sub	sp, #400	; 0x190
 8008520:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008522:	24c8      	movs	r4, #200	; 0xc8
 8008524:	193b      	adds	r3, r7, r4
 8008526:	0018      	movs	r0, r3
 8008528:	23c6      	movs	r3, #198	; 0xc6
 800852a:	001a      	movs	r2, r3
 800852c:	2100      	movs	r1, #0
 800852e:	f003 fc75 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8008532:	4b16      	ldr	r3, [pc, #88]	; (800858c <astronode_send_sak_cr+0x70>)
 8008534:	25c8      	movs	r5, #200	; 0xc8
 8008536:	006d      	lsls	r5, r5, #1
 8008538:	195b      	adds	r3, r3, r5
 800853a:	19db      	adds	r3, r3, r7
 800853c:	0018      	movs	r0, r3
 800853e:	23c6      	movs	r3, #198	; 0xc6
 8008540:	001a      	movs	r2, r3
 8008542:	2100      	movs	r1, #0
 8008544:	f003 fc6a 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8008548:	193b      	adds	r3, r7, r4
 800854a:	2246      	movs	r2, #70	; 0x46
 800854c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800854e:	003a      	movs	r2, r7
 8008550:	193b      	adds	r3, r7, r4
 8008552:	0011      	movs	r1, r2
 8008554:	0018      	movs	r0, r3
 8008556:	f000 fd2f 	bl	8008fb8 <astronode_transport_send_receive>
 800855a:	0003      	movs	r3, r0
 800855c:	2b01      	cmp	r3, #1
 800855e:	d111      	bne.n	8008584 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8008560:	4b0a      	ldr	r3, [pc, #40]	; (800858c <astronode_send_sak_cr+0x70>)
 8008562:	195b      	adds	r3, r3, r5
 8008564:	19db      	adds	r3, r3, r7
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2bc6      	cmp	r3, #198	; 0xc6
 800856a:	d107      	bne.n	800857c <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 800856c:	4b08      	ldr	r3, [pc, #32]	; (8008590 <astronode_send_sak_cr+0x74>)
 800856e:	2200      	movs	r2, #0
 8008570:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8008572:	4b08      	ldr	r3, [pc, #32]	; (8008594 <astronode_send_sak_cr+0x78>)
 8008574:	0018      	movs	r0, r3
 8008576:	f7fa fdcd 	bl	8003114 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 800857a:	e003      	b.n	8008584 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 800857c:	4b06      	ldr	r3, [pc, #24]	; (8008598 <astronode_send_sak_cr+0x7c>)
 800857e:	0018      	movs	r0, r3
 8008580:	f7fa fdc8 	bl	8003114 <send_debug_logs>
}
 8008584:	46c0      	nop			; (mov r8, r8)
 8008586:	46bd      	mov	sp, r7
 8008588:	b064      	add	sp, #400	; 0x190
 800858a:	bdb0      	pop	{r4, r5, r7, pc}
 800858c:	fffffe70 	.word	0xfffffe70
 8008590:	20000b0c 	.word	0x20000b0c
 8008594:	080133dc 	.word	0x080133dc
 8008598:	08013404 	.word	0x08013404

0800859c <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 800859c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800859e:	b0ed      	sub	sp, #436	; 0x1b4
 80085a0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80085a2:	21c8      	movs	r1, #200	; 0xc8
 80085a4:	2318      	movs	r3, #24
 80085a6:	18cb      	adds	r3, r1, r3
 80085a8:	19db      	adds	r3, r3, r7
 80085aa:	0018      	movs	r0, r3
 80085ac:	23c6      	movs	r3, #198	; 0xc6
 80085ae:	001a      	movs	r2, r3
 80085b0:	2100      	movs	r1, #0
 80085b2:	f003 fc33 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 80085b6:	4b4a      	ldr	r3, [pc, #296]	; (80086e0 <astronode_send_mpn_rr+0x144>)
 80085b8:	26cc      	movs	r6, #204	; 0xcc
 80085ba:	0076      	lsls	r6, r6, #1
 80085bc:	199b      	adds	r3, r3, r6
 80085be:	2218      	movs	r2, #24
 80085c0:	4694      	mov	ip, r2
 80085c2:	44bc      	add	ip, r7
 80085c4:	4463      	add	r3, ip
 80085c6:	0018      	movs	r0, r3
 80085c8:	23c6      	movs	r3, #198	; 0xc6
 80085ca:	001a      	movs	r2, r3
 80085cc:	2100      	movs	r1, #0
 80085ce:	f003 fc25 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 80085d2:	21c8      	movs	r1, #200	; 0xc8
 80085d4:	2318      	movs	r3, #24
 80085d6:	18cb      	adds	r3, r1, r3
 80085d8:	19db      	adds	r3, r3, r7
 80085da:	221b      	movs	r2, #27
 80085dc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80085de:	2318      	movs	r3, #24
 80085e0:	18fa      	adds	r2, r7, r3
 80085e2:	2318      	movs	r3, #24
 80085e4:	18cb      	adds	r3, r1, r3
 80085e6:	19db      	adds	r3, r3, r7
 80085e8:	0011      	movs	r1, r2
 80085ea:	0018      	movs	r0, r3
 80085ec:	f000 fce4 	bl	8008fb8 <astronode_transport_send_receive>
 80085f0:	0003      	movs	r3, r0
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d16f      	bne.n	80086d6 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 80085f6:	4b3a      	ldr	r3, [pc, #232]	; (80086e0 <astronode_send_mpn_rr+0x144>)
 80085f8:	0032      	movs	r2, r6
 80085fa:	189b      	adds	r3, r3, r2
 80085fc:	2118      	movs	r1, #24
 80085fe:	468c      	mov	ip, r1
 8008600:	44bc      	add	ip, r7
 8008602:	4463      	add	r3, ip
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	2b9b      	cmp	r3, #155	; 0x9b
 8008608:	d161      	bne.n	80086ce <astronode_send_mpn_rr+0x132>
        {
 800860a:	466b      	mov	r3, sp
 800860c:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 800860e:	4b34      	ldr	r3, [pc, #208]	; (80086e0 <astronode_send_mpn_rr+0x144>)
 8008610:	189b      	adds	r3, r3, r2
 8008612:	2218      	movs	r2, #24
 8008614:	4694      	mov	ip, r2
 8008616:	44bc      	add	ip, r7
 8008618:	4463      	add	r3, ip
 800861a:	22c4      	movs	r2, #196	; 0xc4
 800861c:	5a9b      	ldrh	r3, [r3, r2]
 800861e:	001a      	movs	r2, r3
 8008620:	3a01      	subs	r2, #1
 8008622:	21ca      	movs	r1, #202	; 0xca
 8008624:	0049      	lsls	r1, r1, #1
 8008626:	2018      	movs	r0, #24
 8008628:	1809      	adds	r1, r1, r0
 800862a:	19c9      	adds	r1, r1, r7
 800862c:	600a      	str	r2, [r1, #0]
 800862e:	001c      	movs	r4, r3
 8008630:	2200      	movs	r2, #0
 8008632:	0015      	movs	r5, r2
 8008634:	0020      	movs	r0, r4
 8008636:	0029      	movs	r1, r5
 8008638:	0004      	movs	r4, r0
 800863a:	0f62      	lsrs	r2, r4, #29
 800863c:	000c      	movs	r4, r1
 800863e:	00e4      	lsls	r4, r4, #3
 8008640:	617c      	str	r4, [r7, #20]
 8008642:	697c      	ldr	r4, [r7, #20]
 8008644:	4314      	orrs	r4, r2
 8008646:	617c      	str	r4, [r7, #20]
 8008648:	0001      	movs	r1, r0
 800864a:	00c9      	lsls	r1, r1, #3
 800864c:	6139      	str	r1, [r7, #16]
 800864e:	603b      	str	r3, [r7, #0]
 8008650:	2200      	movs	r2, #0
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	6838      	ldr	r0, [r7, #0]
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	0004      	movs	r4, r0
 800865a:	0f62      	lsrs	r2, r4, #29
 800865c:	000c      	movs	r4, r1
 800865e:	00e4      	lsls	r4, r4, #3
 8008660:	60fc      	str	r4, [r7, #12]
 8008662:	68fc      	ldr	r4, [r7, #12]
 8008664:	4314      	orrs	r4, r2
 8008666:	60fc      	str	r4, [r7, #12]
 8008668:	0001      	movs	r1, r0
 800866a:	00ca      	lsls	r2, r1, #3
 800866c:	60ba      	str	r2, [r7, #8]
 800866e:	3307      	adds	r3, #7
 8008670:	08db      	lsrs	r3, r3, #3
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	4669      	mov	r1, sp
 8008676:	1acb      	subs	r3, r1, r3
 8008678:	469d      	mov	sp, r3
 800867a:	466b      	mov	r3, sp
 800867c:	3300      	adds	r3, #0
 800867e:	24c8      	movs	r4, #200	; 0xc8
 8008680:	0064      	lsls	r4, r4, #1
 8008682:	2218      	movs	r2, #24
 8008684:	18a2      	adds	r2, r4, r2
 8008686:	19d1      	adds	r1, r2, r7
 8008688:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 800868a:	4b16      	ldr	r3, [pc, #88]	; (80086e4 <astronode_send_mpn_rr+0x148>)
 800868c:	0018      	movs	r0, r3
 800868e:	f7fa fd41 	bl	8003114 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8008692:	4b13      	ldr	r3, [pc, #76]	; (80086e0 <astronode_send_mpn_rr+0x144>)
 8008694:	22cc      	movs	r2, #204	; 0xcc
 8008696:	0052      	lsls	r2, r2, #1
 8008698:	189b      	adds	r3, r3, r2
 800869a:	2218      	movs	r2, #24
 800869c:	4694      	mov	ip, r2
 800869e:	44bc      	add	ip, r7
 80086a0:	4463      	add	r3, ip
 80086a2:	22c4      	movs	r2, #196	; 0xc4
 80086a4:	5a9b      	ldrh	r3, [r3, r2]
 80086a6:	0019      	movs	r1, r3
 80086a8:	2318      	movs	r3, #24
 80086aa:	18fb      	adds	r3, r7, r3
 80086ac:	3301      	adds	r3, #1
 80086ae:	4a0e      	ldr	r2, [pc, #56]	; (80086e8 <astronode_send_mpn_rr+0x14c>)
 80086b0:	2018      	movs	r0, #24
 80086b2:	1820      	adds	r0, r4, r0
 80086b4:	19c0      	adds	r0, r0, r7
 80086b6:	6800      	ldr	r0, [r0, #0]
 80086b8:	f003 fae6 	bl	800bc88 <snprintf>
            send_debug_logs(product_number);
 80086bc:	2318      	movs	r3, #24
 80086be:	18e3      	adds	r3, r4, r3
 80086c0:	19db      	adds	r3, r3, r7
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	0018      	movs	r0, r3
 80086c6:	f7fa fd25 	bl	8003114 <send_debug_logs>
 80086ca:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80086cc:	e003      	b.n	80086d6 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80086ce:	4b07      	ldr	r3, [pc, #28]	; (80086ec <astronode_send_mpn_rr+0x150>)
 80086d0:	0018      	movs	r0, r3
 80086d2:	f7fa fd1f 	bl	8003114 <send_debug_logs>
}
 80086d6:	46c0      	nop			; (mov r8, r8)
 80086d8:	46bd      	mov	sp, r7
 80086da:	b06d      	add	sp, #436	; 0x1b4
 80086dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086de:	46c0      	nop			; (mov r8, r8)
 80086e0:	fffffe68 	.word	0xfffffe68
 80086e4:	080134cc 	.word	0x080134cc
 80086e8:	08012fe8 	.word	0x08012fe8
 80086ec:	08013024 	.word	0x08013024

080086f0 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 80086f0:	b5b0      	push	{r4, r5, r7, lr}
 80086f2:	b0e4      	sub	sp, #400	; 0x190
 80086f4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80086f6:	24c8      	movs	r4, #200	; 0xc8
 80086f8:	193b      	adds	r3, r7, r4
 80086fa:	0018      	movs	r0, r3
 80086fc:	23c6      	movs	r3, #198	; 0xc6
 80086fe:	001a      	movs	r2, r3
 8008700:	2100      	movs	r1, #0
 8008702:	f003 fb8b 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8008706:	4b16      	ldr	r3, [pc, #88]	; (8008760 <astronode_send_cmd_cr+0x70>)
 8008708:	25c8      	movs	r5, #200	; 0xc8
 800870a:	006d      	lsls	r5, r5, #1
 800870c:	195b      	adds	r3, r3, r5
 800870e:	19db      	adds	r3, r3, r7
 8008710:	0018      	movs	r0, r3
 8008712:	23c6      	movs	r3, #198	; 0xc6
 8008714:	001a      	movs	r2, r3
 8008716:	2100      	movs	r1, #0
 8008718:	f003 fb80 	bl	800be1c <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 800871c:	193b      	adds	r3, r7, r4
 800871e:	2248      	movs	r2, #72	; 0x48
 8008720:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008722:	003a      	movs	r2, r7
 8008724:	193b      	adds	r3, r7, r4
 8008726:	0011      	movs	r1, r2
 8008728:	0018      	movs	r0, r3
 800872a:	f000 fc45 	bl	8008fb8 <astronode_transport_send_receive>
 800872e:	0003      	movs	r3, r0
 8008730:	2b01      	cmp	r3, #1
 8008732:	d111      	bne.n	8008758 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8008734:	4b0a      	ldr	r3, [pc, #40]	; (8008760 <astronode_send_cmd_cr+0x70>)
 8008736:	195b      	adds	r3, r3, r5
 8008738:	19db      	adds	r3, r3, r7
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	2bc8      	cmp	r3, #200	; 0xc8
 800873e:	d107      	bne.n	8008750 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8008740:	4b08      	ldr	r3, [pc, #32]	; (8008764 <astronode_send_cmd_cr+0x74>)
 8008742:	2200      	movs	r2, #0
 8008744:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8008746:	4b08      	ldr	r3, [pc, #32]	; (8008768 <astronode_send_cmd_cr+0x78>)
 8008748:	0018      	movs	r0, r3
 800874a:	f7fa fce3 	bl	8003114 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 800874e:	e003      	b.n	8008758 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8008750:	4b06      	ldr	r3, [pc, #24]	; (800876c <astronode_send_cmd_cr+0x7c>)
 8008752:	0018      	movs	r0, r3
 8008754:	f7fa fcde 	bl	8003114 <send_debug_logs>
}
 8008758:	46c0      	nop			; (mov r8, r8)
 800875a:	46bd      	mov	sp, r7
 800875c:	b064      	add	sp, #400	; 0x190
 800875e:	bdb0      	pop	{r4, r5, r7, pc}
 8008760:	fffffe70 	.word	0xfffffe70
 8008764:	20000b0e 	.word	0x20000b0e
 8008768:	0801391c 	.word	0x0801391c
 800876c:	08013940 	.word	0x08013940

08008770 <astronode_send_cmd_rr>:

bool astronode_send_cmd_rr ( char* my_astro_rcv_cmd )
{
 8008770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008772:	4cc6      	ldr	r4, [pc, #792]	; (8008a8c <astronode_send_cmd_rr+0x31c>)
 8008774:	44a5      	add	sp, r4
 8008776:	af00      	add	r7, sp, #0
 8008778:	61f8      	str	r0, [r7, #28]
    astronode_app_msg_t request = {0};
 800877a:	2190      	movs	r1, #144	; 0x90
 800877c:	0049      	lsls	r1, r1, #1
 800877e:	2318      	movs	r3, #24
 8008780:	18cb      	adds	r3, r1, r3
 8008782:	19db      	adds	r3, r3, r7
 8008784:	0018      	movs	r0, r3
 8008786:	23c6      	movs	r3, #198	; 0xc6
 8008788:	001a      	movs	r2, r3
 800878a:	2100      	movs	r1, #0
 800878c:	f003 fb46 	bl	800be1c <memset>
    astronode_app_msg_t answer = {0};
 8008790:	4bbf      	ldr	r3, [pc, #764]	; (8008a90 <astronode_send_cmd_rr+0x320>)
 8008792:	26fc      	movs	r6, #252	; 0xfc
 8008794:	0076      	lsls	r6, r6, #1
 8008796:	199b      	adds	r3, r3, r6
 8008798:	2218      	movs	r2, #24
 800879a:	4694      	mov	ip, r2
 800879c:	44bc      	add	ip, r7
 800879e:	4463      	add	r3, ip
 80087a0:	0018      	movs	r0, r3
 80087a2:	23c6      	movs	r3, #198	; 0xc6
 80087a4:	001a      	movs	r2, r3
 80087a6:	2100      	movs	r1, #0
 80087a8:	f003 fb38 	bl	800be1c <memset>
    bool result = false ;
 80087ac:	23f8      	movs	r3, #248	; 0xf8
 80087ae:	33ff      	adds	r3, #255	; 0xff
 80087b0:	2218      	movs	r2, #24
 80087b2:	189b      	adds	r3, r3, r2
 80087b4:	19db      	adds	r3, r3, r7
 80087b6:	2200      	movs	r2, #0
 80087b8:	701a      	strb	r2, [r3, #0]

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 80087ba:	2190      	movs	r1, #144	; 0x90
 80087bc:	0049      	lsls	r1, r1, #1
 80087be:	2318      	movs	r3, #24
 80087c0:	18cb      	adds	r3, r1, r3
 80087c2:	19db      	adds	r3, r3, r7
 80087c4:	2247      	movs	r2, #71	; 0x47
 80087c6:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80087c8:	2258      	movs	r2, #88	; 0x58
 80087ca:	2318      	movs	r3, #24
 80087cc:	18d3      	adds	r3, r2, r3
 80087ce:	19da      	adds	r2, r3, r7
 80087d0:	2318      	movs	r3, #24
 80087d2:	18cb      	adds	r3, r1, r3
 80087d4:	19db      	adds	r3, r3, r7
 80087d6:	0011      	movs	r1, r2
 80087d8:	0018      	movs	r0, r3
 80087da:	f000 fbed 	bl	8008fb8 <astronode_transport_send_receive>
 80087de:	0003      	movs	r3, r0
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d000      	beq.n	80087e6 <astronode_send_cmd_rr+0x76>
 80087e4:	e146      	b.n	8008a74 <astronode_send_cmd_rr+0x304>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 80087e6:	4baa      	ldr	r3, [pc, #680]	; (8008a90 <astronode_send_cmd_rr+0x320>)
 80087e8:	199a      	adds	r2, r3, r6
 80087ea:	2318      	movs	r3, #24
 80087ec:	18fb      	adds	r3, r7, r3
 80087ee:	18d3      	adds	r3, r2, r3
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	2bc7      	cmp	r3, #199	; 0xc7
 80087f4:	d000      	beq.n	80087f8 <astronode_send_cmd_rr+0x88>
 80087f6:	e139      	b.n	8008a6c <astronode_send_cmd_rr+0x2fc>
        {
 80087f8:	466b      	mov	r3, sp
 80087fa:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 80087fc:	4ba5      	ldr	r3, [pc, #660]	; (8008a94 <astronode_send_cmd_rr+0x324>)
 80087fe:	0018      	movs	r0, r3
 8008800:	f7fa fc88 	bl	8003114 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8008804:	4ba2      	ldr	r3, [pc, #648]	; (8008a90 <astronode_send_cmd_rr+0x320>)
 8008806:	21fc      	movs	r1, #252	; 0xfc
 8008808:	0049      	lsls	r1, r1, #1
 800880a:	185a      	adds	r2, r3, r1
 800880c:	2318      	movs	r3, #24
 800880e:	18fb      	adds	r3, r7, r3
 8008810:	18d3      	adds	r3, r2, r3
 8008812:	785b      	ldrb	r3, [r3, #1]
 8008814:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8008816:	4b9e      	ldr	r3, [pc, #632]	; (8008a90 <astronode_send_cmd_rr+0x320>)
 8008818:	1858      	adds	r0, r3, r1
 800881a:	2318      	movs	r3, #24
 800881c:	18fb      	adds	r3, r7, r3
 800881e:	18c3      	adds	r3, r0, r3
 8008820:	789b      	ldrb	r3, [r3, #2]
 8008822:	021b      	lsls	r3, r3, #8
 8008824:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8008826:	4b9a      	ldr	r3, [pc, #616]	; (8008a90 <astronode_send_cmd_rr+0x320>)
 8008828:	1858      	adds	r0, r3, r1
 800882a:	2318      	movs	r3, #24
 800882c:	18fb      	adds	r3, r7, r3
 800882e:	18c3      	adds	r3, r0, r3
 8008830:	78db      	ldrb	r3, [r3, #3]
 8008832:	041b      	lsls	r3, r3, #16
 8008834:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8008836:	4b96      	ldr	r3, [pc, #600]	; (8008a90 <astronode_send_cmd_rr+0x320>)
 8008838:	1858      	adds	r0, r3, r1
 800883a:	2318      	movs	r3, #24
 800883c:	18fb      	adds	r3, r7, r3
 800883e:	18c3      	adds	r3, r0, r3
 8008840:	791b      	ldrb	r3, [r3, #4]
 8008842:	061b      	lsls	r3, r3, #24
 8008844:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008846:	22f8      	movs	r2, #248	; 0xf8
 8008848:	0052      	lsls	r2, r2, #1
 800884a:	2118      	movs	r1, #24
 800884c:	1851      	adds	r1, r2, r1
 800884e:	19c8      	adds	r0, r1, r7
 8008850:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8008852:	2318      	movs	r3, #24
 8008854:	18d3      	adds	r3, r2, r3
 8008856:	19da      	adds	r2, r3, r7
 8008858:	6812      	ldr	r2, [r2, #0]
 800885a:	498f      	ldr	r1, [pc, #572]	; (8008a98 <astronode_send_cmd_rr+0x328>)
 800885c:	2008      	movs	r0, #8
 800885e:	2318      	movs	r3, #24
 8008860:	18c3      	adds	r3, r0, r3
 8008862:	19db      	adds	r3, r3, r7
 8008864:	0018      	movs	r0, r3
 8008866:	f003 fa43 	bl	800bcf0 <sprintf>
            send_debug_logs(str);
 800886a:	2008      	movs	r0, #8
 800886c:	2318      	movs	r3, #24
 800886e:	18c3      	adds	r3, r0, r3
 8008870:	19db      	adds	r3, r3, r7
 8008872:	0018      	movs	r0, r3
 8008874:	f7fa fc4e 	bl	8003114 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8008878:	4b85      	ldr	r3, [pc, #532]	; (8008a90 <astronode_send_cmd_rr+0x320>)
 800887a:	21fc      	movs	r1, #252	; 0xfc
 800887c:	0049      	lsls	r1, r1, #1
 800887e:	185a      	adds	r2, r3, r1
 8008880:	2318      	movs	r3, #24
 8008882:	18fb      	adds	r3, r7, r3
 8008884:	18d3      	adds	r3, r2, r3
 8008886:	22c4      	movs	r2, #196	; 0xc4
 8008888:	5a9b      	ldrh	r3, [r3, r2]
 800888a:	2b2c      	cmp	r3, #44	; 0x2c
 800888c:	d013      	beq.n	80088b6 <astronode_send_cmd_rr+0x146>
 800888e:	4b80      	ldr	r3, [pc, #512]	; (8008a90 <astronode_send_cmd_rr+0x320>)
 8008890:	185a      	adds	r2, r3, r1
 8008892:	2318      	movs	r3, #24
 8008894:	18fb      	adds	r3, r7, r3
 8008896:	18d3      	adds	r3, r2, r3
 8008898:	22c4      	movs	r2, #196	; 0xc4
 800889a:	5a9b      	ldrh	r3, [r3, r2]
 800889c:	2b0c      	cmp	r3, #12
 800889e:	d00a      	beq.n	80088b6 <astronode_send_cmd_rr+0x146>
            {
                send_debug_logs("Command size error");
 80088a0:	4b7e      	ldr	r3, [pc, #504]	; (8008a9c <astronode_send_cmd_rr+0x32c>)
 80088a2:	0018      	movs	r0, r3
 80088a4:	f7fa fc36 	bl	8003114 <send_debug_logs>
                return result ;
 80088a8:	23f8      	movs	r3, #248	; 0xf8
 80088aa:	33ff      	adds	r3, #255	; 0xff
 80088ac:	2218      	movs	r2, #24
 80088ae:	189b      	adds	r3, r3, r2
 80088b0:	19db      	adds	r3, r3, r7
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	e0d8      	b.n	8008a68 <astronode_send_cmd_rr+0x2f8>
            }

            char command_content[answer.payload_len];
 80088b6:	4b76      	ldr	r3, [pc, #472]	; (8008a90 <astronode_send_cmd_rr+0x320>)
 80088b8:	22fc      	movs	r2, #252	; 0xfc
 80088ba:	0052      	lsls	r2, r2, #1
 80088bc:	189b      	adds	r3, r3, r2
 80088be:	2218      	movs	r2, #24
 80088c0:	4694      	mov	ip, r2
 80088c2:	44bc      	add	ip, r7
 80088c4:	4463      	add	r3, ip
 80088c6:	22c4      	movs	r2, #196	; 0xc4
 80088c8:	5a9b      	ldrh	r3, [r3, r2]
 80088ca:	001a      	movs	r2, r3
 80088cc:	3a01      	subs	r2, #1
 80088ce:	21f6      	movs	r1, #246	; 0xf6
 80088d0:	0049      	lsls	r1, r1, #1
 80088d2:	2018      	movs	r0, #24
 80088d4:	1809      	adds	r1, r1, r0
 80088d6:	19c9      	adds	r1, r1, r7
 80088d8:	600a      	str	r2, [r1, #0]
 80088da:	001c      	movs	r4, r3
 80088dc:	2200      	movs	r2, #0
 80088de:	0015      	movs	r5, r2
 80088e0:	0020      	movs	r0, r4
 80088e2:	0029      	movs	r1, r5
 80088e4:	0004      	movs	r4, r0
 80088e6:	0f62      	lsrs	r2, r4, #29
 80088e8:	000c      	movs	r4, r1
 80088ea:	00e4      	lsls	r4, r4, #3
 80088ec:	617c      	str	r4, [r7, #20]
 80088ee:	697c      	ldr	r4, [r7, #20]
 80088f0:	4314      	orrs	r4, r2
 80088f2:	617c      	str	r4, [r7, #20]
 80088f4:	0001      	movs	r1, r0
 80088f6:	00c9      	lsls	r1, r1, #3
 80088f8:	6139      	str	r1, [r7, #16]
 80088fa:	603b      	str	r3, [r7, #0]
 80088fc:	2200      	movs	r2, #0
 80088fe:	607a      	str	r2, [r7, #4]
 8008900:	6838      	ldr	r0, [r7, #0]
 8008902:	6879      	ldr	r1, [r7, #4]
 8008904:	0004      	movs	r4, r0
 8008906:	0f62      	lsrs	r2, r4, #29
 8008908:	000c      	movs	r4, r1
 800890a:	00e4      	lsls	r4, r4, #3
 800890c:	60fc      	str	r4, [r7, #12]
 800890e:	68fc      	ldr	r4, [r7, #12]
 8008910:	4314      	orrs	r4, r2
 8008912:	60fc      	str	r4, [r7, #12]
 8008914:	0001      	movs	r1, r0
 8008916:	00ca      	lsls	r2, r1, #3
 8008918:	60ba      	str	r2, [r7, #8]
 800891a:	3307      	adds	r3, #7
 800891c:	08db      	lsrs	r3, r3, #3
 800891e:	00db      	lsls	r3, r3, #3
 8008920:	4669      	mov	r1, sp
 8008922:	1acb      	subs	r3, r1, r3
 8008924:	469d      	mov	sp, r3
 8008926:	466b      	mov	r3, sp
 8008928:	3300      	adds	r3, #0
 800892a:	20f4      	movs	r0, #244	; 0xf4
 800892c:	0040      	lsls	r0, r0, #1
 800892e:	2218      	movs	r2, #24
 8008930:	1882      	adds	r2, r0, r2
 8008932:	19d1      	adds	r1, r2, r7
 8008934:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008936:	4b56      	ldr	r3, [pc, #344]	; (8008a90 <astronode_send_cmd_rr+0x320>)
 8008938:	22fc      	movs	r2, #252	; 0xfc
 800893a:	0052      	lsls	r2, r2, #1
 800893c:	189b      	adds	r3, r3, r2
 800893e:	2218      	movs	r2, #24
 8008940:	4694      	mov	ip, r2
 8008942:	44bc      	add	ip, r7
 8008944:	4463      	add	r3, ip
 8008946:	22c4      	movs	r2, #196	; 0xc4
 8008948:	5a9b      	ldrh	r3, [r3, r2]
 800894a:	3b03      	subs	r3, #3
 800894c:	0019      	movs	r1, r3
 800894e:	2358      	movs	r3, #88	; 0x58
 8008950:	2218      	movs	r2, #24
 8008952:	189b      	adds	r3, r3, r2
 8008954:	19db      	adds	r3, r3, r7
 8008956:	3305      	adds	r3, #5
 8008958:	4a51      	ldr	r2, [pc, #324]	; (8008aa0 <astronode_send_cmd_rr+0x330>)
 800895a:	2418      	movs	r4, #24
 800895c:	1900      	adds	r0, r0, r4
 800895e:	19c0      	adds	r0, r0, r7
 8008960:	6800      	ldr	r0, [r0, #0]
 8008962:	f003 f991 	bl	800bc88 <snprintf>
 8008966:	0002      	movs	r2, r0
 8008968:	23f3      	movs	r3, #243	; 0xf3
 800896a:	005b      	lsls	r3, r3, #1
 800896c:	2118      	movs	r1, #24
 800896e:	185b      	adds	r3, r3, r1
 8008970:	19db      	adds	r3, r3, r7
 8008972:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008974:	23fb      	movs	r3, #251	; 0xfb
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	2218      	movs	r2, #24
 800897a:	189b      	adds	r3, r3, r2
 800897c:	19db      	adds	r3, r3, r7
 800897e:	2200      	movs	r2, #0
 8008980:	701a      	strb	r2, [r3, #0]
 8008982:	e037      	b.n	80089f4 <astronode_send_cmd_rr+0x284>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8008984:	23fb      	movs	r3, #251	; 0xfb
 8008986:	005b      	lsls	r3, r3, #1
 8008988:	2218      	movs	r2, #24
 800898a:	189b      	adds	r3, r3, r2
 800898c:	19db      	adds	r3, r3, r7
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	22f4      	movs	r2, #244	; 0xf4
 8008992:	0052      	lsls	r2, r2, #1
 8008994:	2118      	movs	r1, #24
 8008996:	1852      	adds	r2, r2, r1
 8008998:	19d2      	adds	r2, r2, r7
 800899a:	6812      	ldr	r2, [r2, #0]
 800899c:	5cd3      	ldrb	r3, [r2, r3]
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	4b40      	ldr	r3, [pc, #256]	; (8008aa4 <astronode_send_cmd_rr+0x334>)
 80089a2:	18d3      	adds	r3, r2, r3
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	001a      	movs	r2, r3
 80089a8:	2397      	movs	r3, #151	; 0x97
 80089aa:	4013      	ands	r3, r2
 80089ac:	d105      	bne.n	80089ba <astronode_send_cmd_rr+0x24a>
                {
                    send_debug_logs("Command contains non printable characters");
 80089ae:	4b3e      	ldr	r3, [pc, #248]	; (8008aa8 <astronode_send_cmd_rr+0x338>)
 80089b0:	0018      	movs	r0, r3
 80089b2:	f7fa fbaf 	bl	8003114 <send_debug_logs>
                    return false;
 80089b6:	2300      	movs	r3, #0
 80089b8:	e056      	b.n	8008a68 <astronode_send_cmd_rr+0x2f8>
                }
            	my_astro_rcv_cmd[index] = command_content[index] ;
 80089ba:	20fb      	movs	r0, #251	; 0xfb
 80089bc:	0040      	lsls	r0, r0, #1
 80089be:	2318      	movs	r3, #24
 80089c0:	18c3      	adds	r3, r0, r3
 80089c2:	19db      	adds	r3, r3, r7
 80089c4:	781a      	ldrb	r2, [r3, #0]
 80089c6:	2318      	movs	r3, #24
 80089c8:	18c3      	adds	r3, r0, r3
 80089ca:	19db      	adds	r3, r3, r7
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	69f9      	ldr	r1, [r7, #28]
 80089d0:	18cb      	adds	r3, r1, r3
 80089d2:	21f4      	movs	r1, #244	; 0xf4
 80089d4:	0049      	lsls	r1, r1, #1
 80089d6:	2418      	movs	r4, #24
 80089d8:	1909      	adds	r1, r1, r4
 80089da:	19c9      	adds	r1, r1, r7
 80089dc:	6809      	ldr	r1, [r1, #0]
 80089de:	5c8a      	ldrb	r2, [r1, r2]
 80089e0:	701a      	strb	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 80089e2:	2318      	movs	r3, #24
 80089e4:	18c3      	adds	r3, r0, r3
 80089e6:	19db      	adds	r3, r3, r7
 80089e8:	781a      	ldrb	r2, [r3, #0]
 80089ea:	2318      	movs	r3, #24
 80089ec:	18c3      	adds	r3, r0, r3
 80089ee:	19db      	adds	r3, r3, r7
 80089f0:	3201      	adds	r2, #1
 80089f2:	701a      	strb	r2, [r3, #0]
 80089f4:	23fb      	movs	r3, #251	; 0xfb
 80089f6:	005b      	lsls	r3, r3, #1
 80089f8:	2218      	movs	r2, #24
 80089fa:	189b      	adds	r3, r3, r2
 80089fc:	19db      	adds	r3, r3, r7
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	21f3      	movs	r1, #243	; 0xf3
 8008a04:	0049      	lsls	r1, r1, #1
 8008a06:	2218      	movs	r2, #24
 8008a08:	188a      	adds	r2, r1, r2
 8008a0a:	19d2      	adds	r2, r2, r7
 8008a0c:	8812      	ldrh	r2, [r2, #0]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d8b8      	bhi.n	8008984 <astronode_send_cmd_rr+0x214>
            }
            result = true ;
 8008a12:	23f8      	movs	r3, #248	; 0xf8
 8008a14:	33ff      	adds	r3, #255	; 0xff
 8008a16:	2218      	movs	r2, #24
 8008a18:	189b      	adds	r3, r3, r2
 8008a1a:	19db      	adds	r3, r3, r7
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	701a      	strb	r2, [r3, #0]
            my_astro_rcv_cmd[command_content_size] = 0 ;
 8008a20:	2318      	movs	r3, #24
 8008a22:	18cb      	adds	r3, r1, r3
 8008a24:	19db      	adds	r3, r3, r7
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	69fa      	ldr	r2, [r7, #28]
 8008a2a:	18d3      	adds	r3, r2, r3
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	701a      	strb	r2, [r3, #0]
            send_debug_logs("Command content is: ");
 8008a30:	4b1e      	ldr	r3, [pc, #120]	; (8008aac <astronode_send_cmd_rr+0x33c>)
 8008a32:	0018      	movs	r0, r3
 8008a34:	f7fa fb6e 	bl	8003114 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8008a38:	2358      	movs	r3, #88	; 0x58
 8008a3a:	2218      	movs	r2, #24
 8008a3c:	189b      	adds	r3, r3, r2
 8008a3e:	19db      	adds	r3, r3, r7
 8008a40:	1d5a      	adds	r2, r3, #5
 8008a42:	491b      	ldr	r1, [pc, #108]	; (8008ab0 <astronode_send_cmd_rr+0x340>)
 8008a44:	24f4      	movs	r4, #244	; 0xf4
 8008a46:	0064      	lsls	r4, r4, #1
 8008a48:	2318      	movs	r3, #24
 8008a4a:	18e3      	adds	r3, r4, r3
 8008a4c:	19db      	adds	r3, r3, r7
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	0018      	movs	r0, r3
 8008a52:	f003 f94d 	bl	800bcf0 <sprintf>
            send_debug_logs(command_content);
 8008a56:	2318      	movs	r3, #24
 8008a58:	18e3      	adds	r3, r4, r3
 8008a5a:	19db      	adds	r3, r3, r7
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	0018      	movs	r0, r3
 8008a60:	f7fa fb58 	bl	8003114 <send_debug_logs>
 8008a64:	46b5      	mov	sp, r6
 8008a66:	e005      	b.n	8008a74 <astronode_send_cmd_rr+0x304>
                return result ;
 8008a68:	46b5      	mov	sp, r6
 8008a6a:	e009      	b.n	8008a80 <astronode_send_cmd_rr+0x310>
        }
        else
        {
            send_debug_logs("No command available.");
 8008a6c:	4b11      	ldr	r3, [pc, #68]	; (8008ab4 <astronode_send_cmd_rr+0x344>)
 8008a6e:	0018      	movs	r0, r3
 8008a70:	f7fa fb50 	bl	8003114 <send_debug_logs>
        }
    }
    return result ;
 8008a74:	23f8      	movs	r3, #248	; 0xf8
 8008a76:	33ff      	adds	r3, #255	; 0xff
 8008a78:	2218      	movs	r2, #24
 8008a7a:	189b      	adds	r3, r3, r2
 8008a7c:	19db      	adds	r3, r3, r7
 8008a7e:	781b      	ldrb	r3, [r3, #0]
}
 8008a80:	0018      	movs	r0, r3
 8008a82:	46bd      	mov	sp, r7
 8008a84:	2385      	movs	r3, #133	; 0x85
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	449d      	add	sp, r3
 8008a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a8c:	fffffdec 	.word	0xfffffdec
 8008a90:	fffffe60 	.word	0xfffffe60
 8008a94:	08013958 	.word	0x08013958
 8008a98:	08013974 	.word	0x08013974
 8008a9c:	080139c4 	.word	0x080139c4
 8008aa0:	08012fe8 	.word	0x08012fe8
 8008aa4:	08014508 	.word	0x08014508
 8008aa8:	080139d8 	.word	0x080139d8
 8008aac:	08013a04 	.word	0x08013a04
 8008ab0:	08013a1c 	.word	0x08013a1c
 8008ab4:	08013a20 	.word	0x08013a20

08008ab8 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008abc:	4b02      	ldr	r3, [pc, #8]	; (8008ac8 <is_sak_available+0x10>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
}
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	46c0      	nop			; (mov r8, r8)
 8008ac8:	20000b0c 	.word	0x20000b0c

08008acc <is_astronode_reset>:

bool is_astronode_reset()
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008ad0:	4b02      	ldr	r3, [pc, #8]	; (8008adc <is_astronode_reset+0x10>)
 8008ad2:	781b      	ldrb	r3, [r3, #0]
}
 8008ad4:	0018      	movs	r0, r3
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	46c0      	nop			; (mov r8, r8)
 8008adc:	20000b0d 	.word	0x20000b0d

08008ae0 <is_command_available>:

bool is_command_available()
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8008ae4:	4b02      	ldr	r3, [pc, #8]	; (8008af0 <is_command_available+0x10>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
}
 8008ae8:	0018      	movs	r0, r3
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	46c0      	nop			; (mov r8, r8)
 8008af0:	20000b0e 	.word	0x20000b0e

08008af4 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	0002      	movs	r2, r0
 8008afc:	6039      	str	r1, [r7, #0]
 8008afe:	1dfb      	adds	r3, r7, #7
 8008b00:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8008b02:	1dfb      	adds	r3, r7, #7
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	2b2f      	cmp	r3, #47	; 0x2f
 8008b08:	d90b      	bls.n	8008b22 <ascii_to_value+0x2e>
 8008b0a:	1dfb      	adds	r3, r7, #7
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	2b39      	cmp	r3, #57	; 0x39
 8008b10:	d807      	bhi.n	8008b22 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8008b12:	1dfb      	adds	r3, r7, #7
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	3b30      	subs	r3, #48	; 0x30
 8008b18:	b2da      	uxtb	r2, r3
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	701a      	strb	r2, [r3, #0]
        return true;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e010      	b.n	8008b44 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8008b22:	1dfb      	adds	r3, r7, #7
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	2b40      	cmp	r3, #64	; 0x40
 8008b28:	d90b      	bls.n	8008b42 <ascii_to_value+0x4e>
 8008b2a:	1dfb      	adds	r3, r7, #7
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	2b46      	cmp	r3, #70	; 0x46
 8008b30:	d807      	bhi.n	8008b42 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8008b32:	1dfb      	adds	r3, r7, #7
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	3b37      	subs	r3, #55	; 0x37
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	701a      	strb	r2, [r3, #0]
        return true;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e000      	b.n	8008b44 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8008b42:	2300      	movs	r3, #0
    }
}
 8008b44:	0018      	movs	r0, r3
 8008b46:	46bd      	mov	sp, r7
 8008b48:	b002      	add	sp, #8
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8008b56:	250e      	movs	r5, #14
 8008b58:	197b      	adds	r3, r7, r5
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8008b5e:	197b      	adds	r3, r7, r5
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	197a      	adds	r2, r7, r5
 8008b64:	1c59      	adds	r1, r3, #1
 8008b66:	8011      	strh	r1, [r2, #0]
 8008b68:	001a      	movs	r2, r3
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	189b      	adds	r3, r3, r2
 8008b6e:	2202      	movs	r2, #2
 8008b70:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	260a      	movs	r6, #10
 8008b76:	19bc      	adds	r4, r7, r6
 8008b78:	4a44      	ldr	r2, [pc, #272]	; (8008c8c <astronode_create_request_transport+0x140>)
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	0018      	movs	r0, r3
 8008b7e:	f000 fa7d 	bl	800907c <calculate_crc>
 8008b82:	0003      	movs	r3, r0
 8008b84:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	1c58      	adds	r0, r3, #1
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	22c4      	movs	r2, #196	; 0xc4
 8008b8e:	5a99      	ldrh	r1, [r3, r2]
 8008b90:	19bc      	adds	r4, r7, r6
 8008b92:	19bb      	adds	r3, r7, r6
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	001a      	movs	r2, r3
 8008b98:	f000 fa70 	bl	800907c <calculate_crc>
 8008b9c:	0003      	movs	r3, r0
 8008b9e:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008ba0:	19bb      	adds	r3, r7, r6
 8008ba2:	881b      	ldrh	r3, [r3, #0]
 8008ba4:	021b      	lsls	r3, r3, #8
 8008ba6:	b21a      	sxth	r2, r3
 8008ba8:	0031      	movs	r1, r6
 8008baa:	19bb      	adds	r3, r7, r6
 8008bac:	881b      	ldrh	r3, [r3, #0]
 8008bae:	0a1b      	lsrs	r3, r3, #8
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	b21b      	sxth	r3, r3
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	b21a      	sxth	r2, r3
 8008bb8:	187b      	adds	r3, r7, r1
 8008bba:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	7818      	ldrb	r0, [r3, #0]
 8008bc0:	197b      	adds	r3, r7, r5
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	18d3      	adds	r3, r2, r3
 8008bc8:	0019      	movs	r1, r3
 8008bca:	f000 fbeb 	bl	80093a4 <uint8_to_ascii_buffer>
    index += 2;
 8008bce:	197b      	adds	r3, r7, r5
 8008bd0:	197a      	adds	r2, r7, r5
 8008bd2:	8812      	ldrh	r2, [r2, #0]
 8008bd4:	3202      	adds	r2, #2
 8008bd6:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008bd8:	230c      	movs	r3, #12
 8008bda:	18fb      	adds	r3, r7, r3
 8008bdc:	2200      	movs	r2, #0
 8008bde:	801a      	strh	r2, [r3, #0]
 8008be0:	e017      	b.n	8008c12 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8008be2:	240c      	movs	r4, #12
 8008be4:	193b      	adds	r3, r7, r4
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	18d3      	adds	r3, r2, r3
 8008bec:	7858      	ldrb	r0, [r3, #1]
 8008bee:	250e      	movs	r5, #14
 8008bf0:	197b      	adds	r3, r7, r5
 8008bf2:	881b      	ldrh	r3, [r3, #0]
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	18d3      	adds	r3, r2, r3
 8008bf8:	0019      	movs	r1, r3
 8008bfa:	f000 fbd3 	bl	80093a4 <uint8_to_ascii_buffer>
        index += 2;
 8008bfe:	197b      	adds	r3, r7, r5
 8008c00:	197a      	adds	r2, r7, r5
 8008c02:	8812      	ldrh	r2, [r2, #0]
 8008c04:	3202      	adds	r2, #2
 8008c06:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008c08:	193b      	adds	r3, r7, r4
 8008c0a:	881a      	ldrh	r2, [r3, #0]
 8008c0c:	193b      	adds	r3, r7, r4
 8008c0e:	3201      	adds	r2, #1
 8008c10:	801a      	strh	r2, [r3, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	22c4      	movs	r2, #196	; 0xc4
 8008c16:	5a9b      	ldrh	r3, [r3, r2]
 8008c18:	220c      	movs	r2, #12
 8008c1a:	18ba      	adds	r2, r7, r2
 8008c1c:	8812      	ldrh	r2, [r2, #0]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d3df      	bcc.n	8008be2 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8008c22:	250a      	movs	r5, #10
 8008c24:	197b      	adds	r3, r7, r5
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	0a1b      	lsrs	r3, r3, #8
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	b2d8      	uxtb	r0, r3
 8008c2e:	240e      	movs	r4, #14
 8008c30:	193b      	adds	r3, r7, r4
 8008c32:	881b      	ldrh	r3, [r3, #0]
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	18d3      	adds	r3, r2, r3
 8008c38:	0019      	movs	r1, r3
 8008c3a:	f000 fbb3 	bl	80093a4 <uint8_to_ascii_buffer>
    index += 2;
 8008c3e:	0021      	movs	r1, r4
 8008c40:	187b      	adds	r3, r7, r1
 8008c42:	187a      	adds	r2, r7, r1
 8008c44:	8812      	ldrh	r2, [r2, #0]
 8008c46:	3202      	adds	r2, #2
 8008c48:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8008c4a:	197b      	adds	r3, r7, r5
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	b2d8      	uxtb	r0, r3
 8008c50:	000c      	movs	r4, r1
 8008c52:	187b      	adds	r3, r7, r1
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	18d3      	adds	r3, r2, r3
 8008c5a:	0019      	movs	r1, r3
 8008c5c:	f000 fba2 	bl	80093a4 <uint8_to_ascii_buffer>
    index += 2;
 8008c60:	0020      	movs	r0, r4
 8008c62:	183b      	adds	r3, r7, r0
 8008c64:	183a      	adds	r2, r7, r0
 8008c66:	8812      	ldrh	r2, [r2, #0]
 8008c68:	3202      	adds	r2, #2
 8008c6a:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008c6c:	183b      	adds	r3, r7, r0
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	183a      	adds	r2, r7, r0
 8008c72:	1c59      	adds	r1, r3, #1
 8008c74:	8011      	strh	r1, [r2, #0]
 8008c76:	001a      	movs	r2, r3
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	189b      	adds	r3, r3, r2
 8008c7c:	2203      	movs	r2, #3
 8008c7e:	701a      	strb	r2, [r3, #0]

    return index;
 8008c80:	183b      	adds	r3, r7, r0
 8008c82:	881b      	ldrh	r3, [r3, #0]
}
 8008c84:	0018      	movs	r0, r3
 8008c86:	46bd      	mov	sp, r7
 8008c88:	b005      	add	sp, #20
 8008c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c8c:	0000ffff 	.word	0x0000ffff

08008c90 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8008c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c92:	b089      	sub	sp, #36	; 0x24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	607a      	str	r2, [r7, #4]
 8008c9a:	230a      	movs	r3, #10
 8008c9c:	18fb      	adds	r3, r7, r3
 8008c9e:	1c0a      	adds	r2, r1, #0
 8008ca0:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d005      	beq.n	8008cb6 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8008caa:	4bbd      	ldr	r3, [pc, #756]	; (8008fa0 <astronode_decode_answer_transport+0x310>)
 8008cac:	0018      	movs	r0, r3
 8008cae:	f7fa fa31 	bl	8003114 <send_debug_logs>
        return RS_FAILURE;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	e170      	b.n	8008f98 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8008cb6:	210a      	movs	r1, #10
 8008cb8:	187b      	adds	r3, r7, r1
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d103      	bne.n	8008cce <astronode_decode_answer_transport+0x3e>
 8008cc6:	187b      	adds	r3, r7, r1
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	2b07      	cmp	r3, #7
 8008ccc:	d805      	bhi.n	8008cda <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8008cce:	4bb5      	ldr	r3, [pc, #724]	; (8008fa4 <astronode_decode_answer_transport+0x314>)
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	f7fa fa1f 	bl	8003114 <send_debug_logs>
        return RS_FAILURE;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	e15e      	b.n	8008f98 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8008cda:	230a      	movs	r3, #10
 8008cdc:	18fb      	adds	r3, r7, r3
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	3b08      	subs	r3, #8
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	da00      	bge.n	8008ce8 <astronode_decode_answer_transport+0x58>
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	105b      	asrs	r3, r3, #1
 8008cea:	b299      	uxth	r1, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	22c4      	movs	r2, #196	; 0xc4
 8008cf0:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8008cf2:	230a      	movs	r3, #10
 8008cf4:	18fb      	adds	r3, r7, r3
 8008cf6:	881b      	ldrh	r3, [r3, #0]
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	18d3      	adds	r3, r2, r3
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d005      	beq.n	8008d10 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8008d04:	4ba8      	ldr	r3, [pc, #672]	; (8008fa8 <astronode_decode_answer_transport+0x318>)
 8008d06:	0018      	movs	r0, r3
 8008d08:	f7fa fa04 	bl	8003114 <send_debug_logs>
        return RS_FAILURE;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	e143      	b.n	8008f98 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8008d10:	2117      	movs	r1, #23
 8008d12:	187b      	adds	r3, r7, r1
 8008d14:	2200      	movs	r2, #0
 8008d16:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8008d18:	2416      	movs	r4, #22
 8008d1a:	193b      	adds	r3, r7, r4
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	3301      	adds	r3, #1
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	187a      	adds	r2, r7, r1
 8008d28:	0011      	movs	r1, r2
 8008d2a:	0018      	movs	r0, r3
 8008d2c:	f7ff fee2 	bl	8008af4 <ascii_to_value>
 8008d30:	0003      	movs	r3, r0
 8008d32:	001a      	movs	r2, r3
 8008d34:	2301      	movs	r3, #1
 8008d36:	4053      	eors	r3, r2
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10e      	bne.n	8008d5c <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3302      	adds	r3, #2
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	193a      	adds	r2, r7, r4
 8008d46:	0011      	movs	r1, r2
 8008d48:	0018      	movs	r0, r3
 8008d4a:	f7ff fed3 	bl	8008af4 <ascii_to_value>
 8008d4e:	0003      	movs	r3, r0
 8008d50:	001a      	movs	r2, r3
 8008d52:	2301      	movs	r3, #1
 8008d54:	4053      	eors	r3, r2
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d005      	beq.n	8008d68 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008d5c:	4b93      	ldr	r3, [pc, #588]	; (8008fac <astronode_decode_answer_transport+0x31c>)
 8008d5e:	0018      	movs	r0, r3
 8008d60:	f7fa f9d8 	bl	8003114 <send_debug_logs>
        return RS_FAILURE;
 8008d64:	2300      	movs	r3, #0
 8008d66:	e117      	b.n	8008f98 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8008d68:	2317      	movs	r3, #23
 8008d6a:	18fb      	adds	r3, r7, r3
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	011b      	lsls	r3, r3, #4
 8008d70:	b2da      	uxtb	r2, r3
 8008d72:	2316      	movs	r3, #22
 8008d74:	18fb      	adds	r3, r7, r3
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	18d3      	adds	r3, r2, r3
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008d80:	231e      	movs	r3, #30
 8008d82:	18fb      	adds	r3, r7, r3
 8008d84:	2203      	movs	r2, #3
 8008d86:	801a      	strh	r2, [r3, #0]
 8008d88:	231c      	movs	r3, #28
 8008d8a:	18fb      	adds	r3, r7, r3
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	801a      	strh	r2, [r3, #0]
 8008d90:	e045      	b.n	8008e1e <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8008d92:	241e      	movs	r4, #30
 8008d94:	193b      	adds	r3, r7, r4
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	18d3      	adds	r3, r2, r3
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	2217      	movs	r2, #23
 8008da0:	18ba      	adds	r2, r7, r2
 8008da2:	0011      	movs	r1, r2
 8008da4:	0018      	movs	r0, r3
 8008da6:	f7ff fea5 	bl	8008af4 <ascii_to_value>
 8008daa:	0003      	movs	r3, r0
 8008dac:	001a      	movs	r2, r3
 8008dae:	2301      	movs	r3, #1
 8008db0:	4053      	eors	r3, r2
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d112      	bne.n	8008dde <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8008db8:	193b      	adds	r3, r7, r4
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	18d3      	adds	r3, r2, r3
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2216      	movs	r2, #22
 8008dc6:	18ba      	adds	r2, r7, r2
 8008dc8:	0011      	movs	r1, r2
 8008dca:	0018      	movs	r0, r3
 8008dcc:	f7ff fe92 	bl	8008af4 <ascii_to_value>
 8008dd0:	0003      	movs	r3, r0
 8008dd2:	001a      	movs	r2, r3
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	4053      	eors	r3, r2
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d005      	beq.n	8008dea <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008dde:	4b73      	ldr	r3, [pc, #460]	; (8008fac <astronode_decode_answer_transport+0x31c>)
 8008de0:	0018      	movs	r0, r3
 8008de2:	f7fa f997 	bl	8003114 <send_debug_logs>
            return RS_FAILURE;
 8008de6:	2300      	movs	r3, #0
 8008de8:	e0d6      	b.n	8008f98 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8008dea:	2317      	movs	r3, #23
 8008dec:	18fb      	adds	r3, r7, r3
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	011b      	lsls	r3, r3, #4
 8008df2:	b2d9      	uxtb	r1, r3
 8008df4:	2316      	movs	r3, #22
 8008df6:	18fb      	adds	r3, r7, r3
 8008df8:	781a      	ldrb	r2, [r3, #0]
 8008dfa:	201c      	movs	r0, #28
 8008dfc:	183b      	adds	r3, r7, r0
 8008dfe:	881b      	ldrh	r3, [r3, #0]
 8008e00:	1838      	adds	r0, r7, r0
 8008e02:	1c5c      	adds	r4, r3, #1
 8008e04:	8004      	strh	r4, [r0, #0]
 8008e06:	0018      	movs	r0, r3
 8008e08:	188b      	adds	r3, r1, r2
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	181b      	adds	r3, r3, r0
 8008e10:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008e12:	221e      	movs	r2, #30
 8008e14:	18bb      	adds	r3, r7, r2
 8008e16:	18ba      	adds	r2, r7, r2
 8008e18:	8812      	ldrh	r2, [r2, #0]
 8008e1a:	3202      	adds	r2, #2
 8008e1c:	801a      	strh	r2, [r3, #0]
 8008e1e:	231e      	movs	r3, #30
 8008e20:	18fb      	adds	r3, r7, r3
 8008e22:	881a      	ldrh	r2, [r3, #0]
 8008e24:	260a      	movs	r6, #10
 8008e26:	19bb      	adds	r3, r7, r6
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	3b05      	subs	r3, #5
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	dbb0      	blt.n	8008d92 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	251a      	movs	r5, #26
 8008e34:	197c      	adds	r4, r7, r5
 8008e36:	4a5e      	ldr	r2, [pc, #376]	; (8008fb0 <astronode_decode_answer_transport+0x320>)
 8008e38:	2101      	movs	r1, #1
 8008e3a:	0018      	movs	r0, r3
 8008e3c:	f000 f91e 	bl	800907c <calculate_crc>
 8008e40:	0003      	movs	r3, r0
 8008e42:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	1c58      	adds	r0, r3, #1
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	22c4      	movs	r2, #196	; 0xc4
 8008e4c:	5a99      	ldrh	r1, [r3, r2]
 8008e4e:	197c      	adds	r4, r7, r5
 8008e50:	197b      	adds	r3, r7, r5
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	001a      	movs	r2, r3
 8008e56:	f000 f911 	bl	800907c <calculate_crc>
 8008e5a:	0003      	movs	r3, r0
 8008e5c:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8008e5e:	197b      	adds	r3, r7, r5
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	021b      	lsls	r3, r3, #8
 8008e64:	b21a      	sxth	r2, r3
 8008e66:	0029      	movs	r1, r5
 8008e68:	197b      	adds	r3, r7, r5
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	0a1b      	lsrs	r3, r3, #8
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	b21b      	sxth	r3, r3
 8008e72:	4313      	orrs	r3, r2
 8008e74:	b21a      	sxth	r2, r3
 8008e76:	187b      	adds	r3, r7, r1
 8008e78:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8008e7a:	19bb      	adds	r3, r7, r6
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	3b05      	subs	r3, #5
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	18d3      	adds	r3, r2, r3
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	2217      	movs	r2, #23
 8008e88:	18ba      	adds	r2, r7, r2
 8008e8a:	0011      	movs	r1, r2
 8008e8c:	0018      	movs	r0, r3
 8008e8e:	f7ff fe31 	bl	8008af4 <ascii_to_value>
 8008e92:	0003      	movs	r3, r0
 8008e94:	001a      	movs	r2, r3
 8008e96:	2301      	movs	r3, #1
 8008e98:	4053      	eors	r3, r2
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d112      	bne.n	8008ec6 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8008ea0:	19bb      	adds	r3, r7, r6
 8008ea2:	881b      	ldrh	r3, [r3, #0]
 8008ea4:	3b04      	subs	r3, #4
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	18d3      	adds	r3, r2, r3
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2216      	movs	r2, #22
 8008eae:	18ba      	adds	r2, r7, r2
 8008eb0:	0011      	movs	r1, r2
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f7ff fe1e 	bl	8008af4 <ascii_to_value>
 8008eb8:	0003      	movs	r3, r0
 8008eba:	001a      	movs	r2, r3
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	4053      	eors	r3, r2
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d005      	beq.n	8008ed2 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008ec6:	4b39      	ldr	r3, [pc, #228]	; (8008fac <astronode_decode_answer_transport+0x31c>)
 8008ec8:	0018      	movs	r0, r3
 8008eca:	f7fa f923 	bl	8003114 <send_debug_logs>
        return RS_FAILURE;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e062      	b.n	8008f98 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8008ed2:	2017      	movs	r0, #23
 8008ed4:	183b      	adds	r3, r7, r0
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	031b      	lsls	r3, r3, #12
 8008edc:	b299      	uxth	r1, r3
 8008ede:	2416      	movs	r4, #22
 8008ee0:	193b      	adds	r3, r7, r4
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	021b      	lsls	r3, r3, #8
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	2318      	movs	r3, #24
 8008eec:	18fb      	adds	r3, r7, r3
 8008eee:	188a      	adds	r2, r1, r2
 8008ef0:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8008ef2:	250a      	movs	r5, #10
 8008ef4:	197b      	adds	r3, r7, r5
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	3b03      	subs	r3, #3
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	18d3      	adds	r3, r2, r3
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	183a      	adds	r2, r7, r0
 8008f02:	0011      	movs	r1, r2
 8008f04:	0018      	movs	r0, r3
 8008f06:	f7ff fdf5 	bl	8008af4 <ascii_to_value>
 8008f0a:	0003      	movs	r3, r0
 8008f0c:	001a      	movs	r2, r3
 8008f0e:	2301      	movs	r3, #1
 8008f10:	4053      	eors	r3, r2
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d111      	bne.n	8008f3c <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8008f18:	197b      	adds	r3, r7, r5
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	3b02      	subs	r3, #2
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	18d3      	adds	r3, r2, r3
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	193a      	adds	r2, r7, r4
 8008f26:	0011      	movs	r1, r2
 8008f28:	0018      	movs	r0, r3
 8008f2a:	f7ff fde3 	bl	8008af4 <ascii_to_value>
 8008f2e:	0003      	movs	r3, r0
 8008f30:	001a      	movs	r2, r3
 8008f32:	2301      	movs	r3, #1
 8008f34:	4053      	eors	r3, r2
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d005      	beq.n	8008f48 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008f3c:	4b1b      	ldr	r3, [pc, #108]	; (8008fac <astronode_decode_answer_transport+0x31c>)
 8008f3e:	0018      	movs	r0, r3
 8008f40:	f7fa f8e8 	bl	8003114 <send_debug_logs>
        return RS_FAILURE;
 8008f44:	2300      	movs	r3, #0
 8008f46:	e027      	b.n	8008f98 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8008f48:	2317      	movs	r3, #23
 8008f4a:	18fb      	adds	r3, r7, r3
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	011b      	lsls	r3, r3, #4
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	2316      	movs	r3, #22
 8008f56:	18fb      	adds	r3, r7, r3
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	18d3      	adds	r3, r2, r3
 8008f5e:	b299      	uxth	r1, r3
 8008f60:	2018      	movs	r0, #24
 8008f62:	183b      	adds	r3, r7, r0
 8008f64:	183a      	adds	r2, r7, r0
 8008f66:	8812      	ldrh	r2, [r2, #0]
 8008f68:	188a      	adds	r2, r1, r2
 8008f6a:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8008f6c:	183a      	adds	r2, r7, r0
 8008f6e:	231a      	movs	r3, #26
 8008f70:	18fb      	adds	r3, r7, r3
 8008f72:	8812      	ldrh	r2, [r2, #0]
 8008f74:	881b      	ldrh	r3, [r3, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d005      	beq.n	8008f86 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8008f7a:	4b0e      	ldr	r3, [pc, #56]	; (8008fb4 <astronode_decode_answer_transport+0x324>)
 8008f7c:	0018      	movs	r0, r3
 8008f7e:	f7fa f8c9 	bl	8003114 <send_debug_logs>
        return RS_FAILURE;
 8008f82:	2300      	movs	r3, #0
 8008f84:	e008      	b.n	8008f98 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2bff      	cmp	r3, #255	; 0xff
 8008f8c:	d103      	bne.n	8008f96 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	0018      	movs	r0, r3
 8008f92:	f000 f8c3 	bl	800911c <check_for_error>
    }

    return RS_SUCCESS;
 8008f96:	2301      	movs	r3, #1
}
 8008f98:	0018      	movs	r0, r3
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	b009      	add	sp, #36	; 0x24
 8008f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fa0:	08013ab0 	.word	0x08013ab0
 8008fa4:	08013b00 	.word	0x08013b00
 8008fa8:	08013b50 	.word	0x08013b50
 8008fac:	08013ba0 	.word	0x08013ba0
 8008fb0:	0000ffff 	.word	0x0000ffff
 8008fb4:	08013bec 	.word	0x08013bec

08008fb8 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8008fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fba:	4c2b      	ldr	r4, [pc, #172]	; (8009068 <astronode_transport_send_receive+0xb0>)
 8008fbc:	44a5      	add	sp, r4
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008fc4:	4b29      	ldr	r3, [pc, #164]	; (800906c <astronode_transport_send_receive+0xb4>)
 8008fc6:	25ca      	movs	r5, #202	; 0xca
 8008fc8:	00ad      	lsls	r5, r5, #2
 8008fca:	195b      	adds	r3, r3, r5
 8008fcc:	19db      	adds	r3, r3, r7
 8008fce:	2200      	movs	r2, #0
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	22c4      	movs	r2, #196	; 0xc4
 8008fd6:	0052      	lsls	r2, r2, #1
 8008fd8:	2100      	movs	r1, #0
 8008fda:	0018      	movs	r0, r3
 8008fdc:	f002 ff1e 	bl	800be1c <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008fe0:	4b23      	ldr	r3, [pc, #140]	; (8009070 <astronode_transport_send_receive+0xb8>)
 8008fe2:	195b      	adds	r3, r3, r5
 8008fe4:	19db      	adds	r3, r3, r7
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	601a      	str	r2, [r3, #0]
 8008fea:	3304      	adds	r3, #4
 8008fec:	22c4      	movs	r2, #196	; 0xc4
 8008fee:	0052      	lsls	r2, r2, #1
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	0018      	movs	r0, r3
 8008ff4:	f002 ff12 	bl	800be1c <memset>
    uint16_t answer_length =  0;
 8008ff8:	4b1e      	ldr	r3, [pc, #120]	; (8009074 <astronode_transport_send_receive+0xbc>)
 8008ffa:	195b      	adds	r3, r3, r5
 8008ffc:	19db      	adds	r3, r3, r7
 8008ffe:	2200      	movs	r2, #0
 8009000:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8009002:	4e1d      	ldr	r6, [pc, #116]	; (8009078 <astronode_transport_send_receive+0xc0>)
 8009004:	19bc      	adds	r4, r7, r6
 8009006:	23cc      	movs	r3, #204	; 0xcc
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	18fa      	adds	r2, r7, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	0011      	movs	r1, r2
 8009010:	0018      	movs	r0, r3
 8009012:	f7ff fd9b 	bl	8008b4c <astronode_create_request_transport>
 8009016:	0003      	movs	r3, r0
 8009018:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 800901a:	19bb      	adds	r3, r7, r6
 800901c:	881a      	ldrh	r2, [r3, #0]
 800901e:	23cc      	movs	r3, #204	; 0xcc
 8009020:	005b      	lsls	r3, r3, #1
 8009022:	18fb      	adds	r3, r7, r3
 8009024:	0011      	movs	r1, r2
 8009026:	0018      	movs	r0, r3
 8009028:	f7fa fa1c 	bl	8003464 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 800902c:	230a      	movs	r3, #10
 800902e:	18fa      	adds	r2, r7, r3
 8009030:	240c      	movs	r4, #12
 8009032:	193b      	adds	r3, r7, r4
 8009034:	0011      	movs	r1, r2
 8009036:	0018      	movs	r0, r3
 8009038:	f000 f92c 	bl	8009294 <receive_astronode_answer>
 800903c:	0003      	movs	r3, r0
 800903e:	2b01      	cmp	r3, #1
 8009040:	d10a      	bne.n	8009058 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8009042:	4b0c      	ldr	r3, [pc, #48]	; (8009074 <astronode_transport_send_receive+0xbc>)
 8009044:	195b      	adds	r3, r3, r5
 8009046:	19db      	adds	r3, r3, r7
 8009048:	8819      	ldrh	r1, [r3, #0]
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	193b      	adds	r3, r7, r4
 800904e:	0018      	movs	r0, r3
 8009050:	f7ff fe1e 	bl	8008c90 <astronode_decode_answer_transport>
 8009054:	0003      	movs	r3, r0
 8009056:	e000      	b.n	800905a <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8009058:	2300      	movs	r3, #0
    }
}
 800905a:	0018      	movs	r0, r3
 800905c:	46bd      	mov	sp, r7
 800905e:	23cb      	movs	r3, #203	; 0xcb
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	449d      	add	sp, r3
 8009064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009066:	46c0      	nop			; (mov r8, r8)
 8009068:	fffffcd4 	.word	0xfffffcd4
 800906c:	fffffe70 	.word	0xfffffe70
 8009070:	fffffce4 	.word	0xfffffce4
 8009074:	fffffce2 	.word	0xfffffce2
 8009078:	00000326 	.word	0x00000326

0800907c <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 800907c:	b590      	push	{r4, r7, lr}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	0008      	movs	r0, r1
 8009086:	0011      	movs	r1, r2
 8009088:	1cbb      	adds	r3, r7, #2
 800908a:	1c02      	adds	r2, r0, #0
 800908c:	801a      	strh	r2, [r3, #0]
 800908e:	003b      	movs	r3, r7
 8009090:	1c0a      	adds	r2, r1, #0
 8009092:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8009094:	230e      	movs	r3, #14
 8009096:	18fb      	adds	r3, r7, r3
 8009098:	003a      	movs	r2, r7
 800909a:	8812      	ldrh	r2, [r2, #0]
 800909c:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800909e:	e02e      	b.n	80090fe <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 80090a0:	240e      	movs	r4, #14
 80090a2:	193b      	adds	r3, r7, r4
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	0a1b      	lsrs	r3, r3, #8
 80090a8:	b299      	uxth	r1, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	1c5a      	adds	r2, r3, #1
 80090ae:	607a      	str	r2, [r7, #4]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	200c      	movs	r0, #12
 80090b6:	183b      	adds	r3, r7, r0
 80090b8:	404a      	eors	r2, r1
 80090ba:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 80090bc:	183b      	adds	r3, r7, r0
 80090be:	881b      	ldrh	r3, [r3, #0]
 80090c0:	091b      	lsrs	r3, r3, #4
 80090c2:	b299      	uxth	r1, r3
 80090c4:	183b      	adds	r3, r7, r0
 80090c6:	183a      	adds	r2, r7, r0
 80090c8:	8812      	ldrh	r2, [r2, #0]
 80090ca:	404a      	eors	r2, r1
 80090cc:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 80090ce:	0021      	movs	r1, r4
 80090d0:	187b      	adds	r3, r7, r1
 80090d2:	881b      	ldrh	r3, [r3, #0]
 80090d4:	021b      	lsls	r3, r3, #8
 80090d6:	b21a      	sxth	r2, r3
 80090d8:	183b      	adds	r3, r7, r0
 80090da:	881b      	ldrh	r3, [r3, #0]
 80090dc:	031b      	lsls	r3, r3, #12
 80090de:	b21b      	sxth	r3, r3
 80090e0:	4053      	eors	r3, r2
 80090e2:	b21a      	sxth	r2, r3
 80090e4:	183b      	adds	r3, r7, r0
 80090e6:	881b      	ldrh	r3, [r3, #0]
 80090e8:	015b      	lsls	r3, r3, #5
 80090ea:	b21b      	sxth	r3, r3
 80090ec:	4053      	eors	r3, r2
 80090ee:	b21a      	sxth	r2, r3
 80090f0:	183b      	adds	r3, r7, r0
 80090f2:	2000      	movs	r0, #0
 80090f4:	5e1b      	ldrsh	r3, [r3, r0]
 80090f6:	4053      	eors	r3, r2
 80090f8:	b21a      	sxth	r2, r3
 80090fa:	187b      	adds	r3, r7, r1
 80090fc:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 80090fe:	1cbb      	adds	r3, r7, #2
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	1cba      	adds	r2, r7, #2
 8009104:	1e59      	subs	r1, r3, #1
 8009106:	8011      	strh	r1, [r2, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1c9      	bne.n	80090a0 <calculate_crc+0x24>
    }
    return crc;
 800910c:	230e      	movs	r3, #14
 800910e:	18fb      	adds	r3, r7, r3
 8009110:	881b      	ldrh	r3, [r3, #0]
}
 8009112:	0018      	movs	r0, r3
 8009114:	46bd      	mov	sp, r7
 8009116:	b005      	add	sp, #20
 8009118:	bd90      	pop	{r4, r7, pc}
	...

0800911c <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	785b      	ldrb	r3, [r3, #1]
 8009128:	b299      	uxth	r1, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	789b      	ldrb	r3, [r3, #2]
 800912e:	b29b      	uxth	r3, r3
 8009130:	021b      	lsls	r3, r3, #8
 8009132:	b29a      	uxth	r2, r3
 8009134:	200e      	movs	r0, #14
 8009136:	183b      	adds	r3, r7, r0
 8009138:	188a      	adds	r2, r1, r2
 800913a:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 800913c:	183b      	adds	r3, r7, r0
 800913e:	881b      	ldrh	r3, [r3, #0]
 8009140:	4a40      	ldr	r2, [pc, #256]	; (8009244 <check_for_error+0x128>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d100      	bne.n	8009148 <check_for_error+0x2c>
 8009146:	e06f      	b.n	8009228 <check_for_error+0x10c>
 8009148:	4a3e      	ldr	r2, [pc, #248]	; (8009244 <check_for_error+0x128>)
 800914a:	4293      	cmp	r3, r2
 800914c:	dd00      	ble.n	8009150 <check_for_error+0x34>
 800914e:	e070      	b.n	8009232 <check_for_error+0x116>
 8009150:	4a3d      	ldr	r2, [pc, #244]	; (8009248 <check_for_error+0x12c>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d100      	bne.n	8009158 <check_for_error+0x3c>
 8009156:	e062      	b.n	800921e <check_for_error+0x102>
 8009158:	4a3b      	ldr	r2, [pc, #236]	; (8009248 <check_for_error+0x12c>)
 800915a:	4293      	cmp	r3, r2
 800915c:	dd00      	ble.n	8009160 <check_for_error+0x44>
 800915e:	e068      	b.n	8009232 <check_for_error+0x116>
 8009160:	4a3a      	ldr	r2, [pc, #232]	; (800924c <check_for_error+0x130>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d056      	beq.n	8009214 <check_for_error+0xf8>
 8009166:	4a39      	ldr	r2, [pc, #228]	; (800924c <check_for_error+0x130>)
 8009168:	4293      	cmp	r3, r2
 800916a:	dd00      	ble.n	800916e <check_for_error+0x52>
 800916c:	e061      	b.n	8009232 <check_for_error+0x116>
 800916e:	4a38      	ldr	r2, [pc, #224]	; (8009250 <check_for_error+0x134>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d04a      	beq.n	800920a <check_for_error+0xee>
 8009174:	4a36      	ldr	r2, [pc, #216]	; (8009250 <check_for_error+0x134>)
 8009176:	4293      	cmp	r3, r2
 8009178:	dc5b      	bgt.n	8009232 <check_for_error+0x116>
 800917a:	4a36      	ldr	r2, [pc, #216]	; (8009254 <check_for_error+0x138>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d03f      	beq.n	8009200 <check_for_error+0xe4>
 8009180:	4a34      	ldr	r2, [pc, #208]	; (8009254 <check_for_error+0x138>)
 8009182:	4293      	cmp	r3, r2
 8009184:	dc55      	bgt.n	8009232 <check_for_error+0x116>
 8009186:	4a34      	ldr	r2, [pc, #208]	; (8009258 <check_for_error+0x13c>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d034      	beq.n	80091f6 <check_for_error+0xda>
 800918c:	4a32      	ldr	r2, [pc, #200]	; (8009258 <check_for_error+0x13c>)
 800918e:	4293      	cmp	r3, r2
 8009190:	dc4f      	bgt.n	8009232 <check_for_error+0x116>
 8009192:	4a32      	ldr	r2, [pc, #200]	; (800925c <check_for_error+0x140>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d029      	beq.n	80091ec <check_for_error+0xd0>
 8009198:	4a30      	ldr	r2, [pc, #192]	; (800925c <check_for_error+0x140>)
 800919a:	4293      	cmp	r3, r2
 800919c:	dc49      	bgt.n	8009232 <check_for_error+0x116>
 800919e:	4a30      	ldr	r2, [pc, #192]	; (8009260 <check_for_error+0x144>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d01e      	beq.n	80091e2 <check_for_error+0xc6>
 80091a4:	4a2e      	ldr	r2, [pc, #184]	; (8009260 <check_for_error+0x144>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	dc43      	bgt.n	8009232 <check_for_error+0x116>
 80091aa:	2222      	movs	r2, #34	; 0x22
 80091ac:	32ff      	adds	r2, #255	; 0xff
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d012      	beq.n	80091d8 <check_for_error+0xbc>
 80091b2:	2291      	movs	r2, #145	; 0x91
 80091b4:	0052      	lsls	r2, r2, #1
 80091b6:	4293      	cmp	r3, r2
 80091b8:	da3b      	bge.n	8009232 <check_for_error+0x116>
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d002      	beq.n	80091c4 <check_for_error+0xa8>
 80091be:	2b11      	cmp	r3, #17
 80091c0:	d005      	beq.n	80091ce <check_for_error+0xb2>
 80091c2:	e036      	b.n	8009232 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 80091c4:	4b27      	ldr	r3, [pc, #156]	; (8009264 <check_for_error+0x148>)
 80091c6:	0018      	movs	r0, r3
 80091c8:	f7f9 ffa4 	bl	8003114 <send_debug_logs>
            break;
 80091cc:	e036      	b.n	800923c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 80091ce:	4b26      	ldr	r3, [pc, #152]	; (8009268 <check_for_error+0x14c>)
 80091d0:	0018      	movs	r0, r3
 80091d2:	f7f9 ff9f 	bl	8003114 <send_debug_logs>
            break;
 80091d6:	e031      	b.n	800923c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 80091d8:	4b24      	ldr	r3, [pc, #144]	; (800926c <check_for_error+0x150>)
 80091da:	0018      	movs	r0, r3
 80091dc:	f7f9 ff9a 	bl	8003114 <send_debug_logs>
            break;
 80091e0:	e02c      	b.n	800923c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 80091e2:	4b23      	ldr	r3, [pc, #140]	; (8009270 <check_for_error+0x154>)
 80091e4:	0018      	movs	r0, r3
 80091e6:	f7f9 ff95 	bl	8003114 <send_debug_logs>
            break;
 80091ea:	e027      	b.n	800923c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80091ec:	4b21      	ldr	r3, [pc, #132]	; (8009274 <check_for_error+0x158>)
 80091ee:	0018      	movs	r0, r3
 80091f0:	f7f9 ff90 	bl	8003114 <send_debug_logs>
            break;
 80091f4:	e022      	b.n	800923c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 80091f6:	4b20      	ldr	r3, [pc, #128]	; (8009278 <check_for_error+0x15c>)
 80091f8:	0018      	movs	r0, r3
 80091fa:	f7f9 ff8b 	bl	8003114 <send_debug_logs>
            break;
 80091fe:	e01d      	b.n	800923c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8009200:	4b1e      	ldr	r3, [pc, #120]	; (800927c <check_for_error+0x160>)
 8009202:	0018      	movs	r0, r3
 8009204:	f7f9 ff86 	bl	8003114 <send_debug_logs>
            break;
 8009208:	e018      	b.n	800923c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 800920a:	4b1d      	ldr	r3, [pc, #116]	; (8009280 <check_for_error+0x164>)
 800920c:	0018      	movs	r0, r3
 800920e:	f7f9 ff81 	bl	8003114 <send_debug_logs>
            break;
 8009212:	e013      	b.n	800923c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8009214:	4b1b      	ldr	r3, [pc, #108]	; (8009284 <check_for_error+0x168>)
 8009216:	0018      	movs	r0, r3
 8009218:	f7f9 ff7c 	bl	8003114 <send_debug_logs>
            break;
 800921c:	e00e      	b.n	800923c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 800921e:	4b1a      	ldr	r3, [pc, #104]	; (8009288 <check_for_error+0x16c>)
 8009220:	0018      	movs	r0, r3
 8009222:	f7f9 ff77 	bl	8003114 <send_debug_logs>
            break;
 8009226:	e009      	b.n	800923c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8009228:	4b18      	ldr	r3, [pc, #96]	; (800928c <check_for_error+0x170>)
 800922a:	0018      	movs	r0, r3
 800922c:	f7f9 ff72 	bl	8003114 <send_debug_logs>
            break;
 8009230:	e004      	b.n	800923c <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 8009232:	4b17      	ldr	r3, [pc, #92]	; (8009290 <check_for_error+0x174>)
 8009234:	0018      	movs	r0, r3
 8009236:	f7f9 ff6d 	bl	8003114 <send_debug_logs>
            break;
 800923a:	46c0      	nop			; (mov r8, r8)
    }
}
 800923c:	46c0      	nop			; (mov r8, r8)
 800923e:	46bd      	mov	sp, r7
 8009240:	b004      	add	sp, #16
 8009242:	bd80      	pop	{r7, pc}
 8009244:	00004601 	.word	0x00004601
 8009248:	00004501 	.word	0x00004501
 800924c:	00003501 	.word	0x00003501
 8009250:	00002601 	.word	0x00002601
 8009254:	00002511 	.word	0x00002511
 8009258:	00002501 	.word	0x00002501
 800925c:	00000611 	.word	0x00000611
 8009260:	00000601 	.word	0x00000601
 8009264:	08013c30 	.word	0x08013c30
 8009268:	08013c7c 	.word	0x08013c7c
 800926c:	08013ce0 	.word	0x08013ce0
 8009270:	08013d18 	.word	0x08013d18
 8009274:	08013dbc 	.word	0x08013dbc
 8009278:	08013e24 	.word	0x08013e24
 800927c:	08013e84 	.word	0x08013e84
 8009280:	08013f10 	.word	0x08013f10
 8009284:	08013f70 	.word	0x08013f70
 8009288:	0801401c 	.word	0x0801401c
 800928c:	08014068 	.word	0x08014068
 8009290:	080140b0 	.word	0x080140b0

08009294 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8009294:	b5b0      	push	{r4, r5, r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 800929e:	230f      	movs	r3, #15
 80092a0:	18fb      	adds	r3, r7, r3
 80092a2:	2200      	movs	r2, #0
 80092a4:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 80092a6:	2316      	movs	r3, #22
 80092a8:	18fb      	adds	r3, r7, r3
 80092aa:	2200      	movs	r2, #0
 80092ac:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 80092ae:	f7fa f8f7 	bl	80034a0 <get_systick>
 80092b2:	0003      	movs	r3, r0
 80092b4:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 80092b6:	2315      	movs	r3, #21
 80092b8:	18fb      	adds	r3, r7, r3
 80092ba:	2200      	movs	r2, #0
 80092bc:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 80092be:	e054      	b.n	800936a <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 80092c0:	4a34      	ldr	r2, [pc, #208]	; (8009394 <receive_astronode_answer+0x100>)
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	0011      	movs	r1, r2
 80092c6:	0018      	movs	r0, r3
 80092c8:	f7fa f8f2 	bl	80034b0 <is_systick_timeout_over>
 80092cc:	1e03      	subs	r3, r0, #0
 80092ce:	d005      	beq.n	80092dc <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 80092d0:	4b31      	ldr	r3, [pc, #196]	; (8009398 <receive_astronode_answer+0x104>)
 80092d2:	0018      	movs	r0, r3
 80092d4:	f7f9 ff1e 	bl	8003114 <send_debug_logs>
            return RS_FAILURE;
 80092d8:	2300      	movs	r3, #0
 80092da:	e057      	b.n	800938c <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 80092dc:	250f      	movs	r5, #15
 80092de:	197b      	adds	r3, r7, r5
 80092e0:	0018      	movs	r0, r3
 80092e2:	f7fa f8fb 	bl	80034dc <is_astronode_character_received>
 80092e6:	0003      	movs	r3, r0
 80092e8:	0019      	movs	r1, r3
 80092ea:	2016      	movs	r0, #22
 80092ec:	183b      	adds	r3, r7, r0
 80092ee:	183a      	adds	r2, r7, r0
 80092f0:	8812      	ldrh	r2, [r2, #0]
 80092f2:	801a      	strh	r2, [r3, #0]
 80092f4:	2415      	movs	r4, #21
 80092f6:	193b      	adds	r3, r7, r4
 80092f8:	193a      	adds	r2, r7, r4
 80092fa:	7812      	ldrb	r2, [r2, #0]
 80092fc:	701a      	strb	r2, [r3, #0]
 80092fe:	2900      	cmp	r1, #0
 8009300:	d033      	beq.n	800936a <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 8009302:	197b      	adds	r3, r7, r5
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	2b02      	cmp	r3, #2
 8009308:	d105      	bne.n	8009316 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 800930a:	193b      	adds	r3, r7, r4
 800930c:	2200      	movs	r2, #0
 800930e:	701a      	strb	r2, [r3, #0]
                length = 0;
 8009310:	183b      	adds	r3, r7, r0
 8009312:	2200      	movs	r2, #0
 8009314:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8009316:	2116      	movs	r1, #22
 8009318:	187b      	adds	r3, r7, r1
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	18d3      	adds	r3, r2, r3
 8009320:	220f      	movs	r2, #15
 8009322:	18ba      	adds	r2, r7, r2
 8009324:	7812      	ldrb	r2, [r2, #0]
 8009326:	701a      	strb	r2, [r3, #0]
            length++;
 8009328:	187b      	adds	r3, r7, r1
 800932a:	881a      	ldrh	r2, [r3, #0]
 800932c:	187b      	adds	r3, r7, r1
 800932e:	3201      	adds	r2, #1
 8009330:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 8009332:	187b      	adds	r3, r7, r1
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	2bb2      	cmp	r3, #178	; 0xb2
 8009338:	d905      	bls.n	8009346 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 800933a:	4b18      	ldr	r3, [pc, #96]	; (800939c <receive_astronode_answer+0x108>)
 800933c:	0018      	movs	r0, r3
 800933e:	f7f9 fee9 	bl	8003114 <send_debug_logs>
                return RS_FAILURE;
 8009342:	2300      	movs	r3, #0
 8009344:	e022      	b.n	800938c <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8009346:	230f      	movs	r3, #15
 8009348:	18fb      	adds	r3, r7, r3
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	2b03      	cmp	r3, #3
 800934e:	d10c      	bne.n	800936a <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8009350:	2216      	movs	r2, #22
 8009352:	18bb      	adds	r3, r7, r2
 8009354:	881b      	ldrh	r3, [r3, #0]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d907      	bls.n	800936a <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	18ba      	adds	r2, r7, r2
 800935e:	8812      	ldrh	r2, [r2, #0]
 8009360:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 8009362:	2315      	movs	r3, #21
 8009364:	18fb      	adds	r3, r7, r3
 8009366:	2201      	movs	r2, #1
 8009368:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 800936a:	2315      	movs	r3, #21
 800936c:	18fb      	adds	r3, r7, r3
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	2201      	movs	r2, #1
 8009372:	4053      	eors	r3, r2
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1a2      	bne.n	80092c0 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 800937a:	4b09      	ldr	r3, [pc, #36]	; (80093a0 <receive_astronode_answer+0x10c>)
 800937c:	0018      	movs	r0, r3
 800937e:	f7f9 fec9 	bl	8003114 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	0018      	movs	r0, r3
 8009386:	f7f9 fec5 	bl	8003114 <send_debug_logs>

    return RS_SUCCESS;
 800938a:	2301      	movs	r3, #1
}
 800938c:	0018      	movs	r0, r3
 800938e:	46bd      	mov	sp, r7
 8009390:	b006      	add	sp, #24
 8009392:	bdb0      	pop	{r4, r5, r7, pc}
 8009394:	000005dc 	.word	0x000005dc
 8009398:	080140d4 	.word	0x080140d4
 800939c:	080140f8 	.word	0x080140f8
 80093a0:	08014144 	.word	0x08014144

080093a4 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	0002      	movs	r2, r0
 80093ac:	6039      	str	r1, [r7, #0]
 80093ae:	1dfb      	adds	r3, r7, #7
 80093b0:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 80093b2:	1dfb      	adds	r3, r7, #7
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	091b      	lsrs	r3, r3, #4
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	001a      	movs	r2, r3
 80093bc:	4b08      	ldr	r3, [pc, #32]	; (80093e0 <uint8_to_ascii_buffer+0x3c>)
 80093be:	5c9a      	ldrb	r2, [r3, r2]
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 80093c4:	1dfb      	adds	r3, r7, #7
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	220f      	movs	r2, #15
 80093ca:	401a      	ands	r2, r3
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	3301      	adds	r3, #1
 80093d0:	4903      	ldr	r1, [pc, #12]	; (80093e0 <uint8_to_ascii_buffer+0x3c>)
 80093d2:	5c8a      	ldrb	r2, [r1, r2]
 80093d4:	701a      	strb	r2, [r3, #0]
}
 80093d6:	46c0      	nop			; (mov r8, r8)
 80093d8:	46bd      	mov	sp, r7
 80093da:	b002      	add	sp, #8
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	46c0      	nop			; (mov r8, r8)
 80093e0:	0801447c 	.word	0x0801447c

080093e4 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ()
{
 80093e4:	b590      	push	{r4, r7, lr}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 80093ea:	1dfb      	adds	r3, r7, #7
 80093ec:	2200      	movs	r2, #0
 80093ee:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 80093f0:	e012      	b.n	8009418 <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 80093f2:	f7fa f81d 	bl	8003430 <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 80093f6:	1dfc      	adds	r4, r7, #7
 80093f8:	2300      	movs	r3, #0
 80093fa:	9303      	str	r3, [sp, #12]
 80093fc:	2301      	movs	r3, #1
 80093fe:	9302      	str	r3, [sp, #8]
 8009400:	2301      	movs	r3, #1
 8009402:	9301      	str	r3, [sp, #4]
 8009404:	2301      	movs	r3, #1
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	2300      	movs	r3, #0
 800940a:	2201      	movs	r2, #1
 800940c:	2101      	movs	r1, #1
 800940e:	2001      	movs	r0, #1
 8009410:	f7fe fb64 	bl	8007adc <astronode_send_cfg_wr>
 8009414:	0003      	movs	r3, r0
 8009416:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 8009418:	1dfb      	adds	r3, r7, #7
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	2201      	movs	r2, #1
 800941e:	4053      	eors	r3, r2
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1e5      	bne.n	80093f2 <my_astro_init+0xe>
	}

	if ( cfg_wr )
 8009426:	1dfb      	adds	r3, r7, #7
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00d      	beq.n	800944a <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 800942e:	f7fe ffbb 	bl	80083a8 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 8009432:	f7fe fb1b 	bl	8007a6c <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 8009436:	f7ff f8b1 	bl	800859c <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 800943a:	f7fe fca5 	bl	8007d88 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 800943e:	f7fe fbf9 	bl	8007c34 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 8009442:	f7fe ff35 	bl	80082b0 <astronode_send_pld_fr>
		return true ;
 8009446:	2301      	movs	r3, #1
 8009448:	e000      	b.n	800944c <my_astro_init+0x68>
	}
	else
	{
		return false ;
 800944a:	2300      	movs	r3, #0
	}
}
 800944c:	0018      	movs	r0, r3
 800944e:	46bd      	mov	sp, r7
 8009450:	b003      	add	sp, #12
 8009452:	bd90      	pop	{r4, r7, pc}

08009454 <my_astro_add_payload_2_queue>:

bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	0002      	movs	r2, r0
 800945c:	6039      	str	r1, [r7, #0]
 800945e:	1dbb      	adds	r3, r7, #6
 8009460:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	0018      	movs	r0, r3
 8009466:	f7f6 fe4d 	bl	8000104 <strlen>
 800946a:	0003      	movs	r3, r0
 800946c:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2ba0      	cmp	r3, #160	; 0xa0
 8009472:	d80b      	bhi.n	800948c <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	b29a      	uxth	r2, r3
 8009478:	6839      	ldr	r1, [r7, #0]
 800947a:	1dbb      	adds	r3, r7, #6
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	0018      	movs	r0, r3
 8009480:	f7fe fe6c 	bl	800815c <astronode_send_pld_er>
 8009484:	1e03      	subs	r3, r0, #0
 8009486:	d005      	beq.n	8009494 <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 8009488:	2301      	movs	r3, #1
 800948a:	e004      	b.n	8009496 <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 800948c:	4b04      	ldr	r3, [pc, #16]	; (80094a0 <my_astro_add_payload_2_queue+0x4c>)
 800948e:	0018      	movs	r0, r3
 8009490:	f7f9 fe40 	bl	8003114 <send_debug_logs>
	}
	return false ;
 8009494:	2300      	movs	r3, #0
}
 8009496:	0018      	movs	r0, r3
 8009498:	46bd      	mov	sp, r7
 800949a:	b004      	add	sp, #16
 800949c:	bd80      	pop	{r7, pc}
 800949e:	46c0      	nop			; (mov r8, r8)
 80094a0:	08014170 	.word	0x08014170

080094a4 <my_astro_handle_evt>:
bool my_astro_handle_evt ( void )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 80094a8:	4b19      	ldr	r3, [pc, #100]	; (8009510 <my_astro_handle_evt+0x6c>)
 80094aa:	0018      	movs	r0, r3
 80094ac:	f7f9 fe32 	bl	8003114 <send_debug_logs>
	astronode_send_evt_rr () ;
 80094b0:	f7fe fd14 	bl	8007edc <astronode_send_evt_rr>
	if (is_sak_available () )
 80094b4:	f7ff fb00 	bl	8008ab8 <is_sak_available>
 80094b8:	1e03      	subs	r3, r0, #0
 80094ba:	d007      	beq.n	80094cc <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 80094bc:	f7fe ffd8 	bl	8008470 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 80094c0:	f7ff f82c 	bl	800851c <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 80094c4:	4b13      	ldr	r3, [pc, #76]	; (8009514 <my_astro_handle_evt+0x70>)
 80094c6:	0018      	movs	r0, r3
 80094c8:	f7f9 fe24 	bl	8003114 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 80094cc:	f7ff fafe 	bl	8008acc <is_astronode_reset>
 80094d0:	1e03      	subs	r3, r0, #0
 80094d2:	d005      	beq.n	80094e0 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 80094d4:	4b10      	ldr	r3, [pc, #64]	; (8009518 <my_astro_handle_evt+0x74>)
 80094d6:	0018      	movs	r0, r3
 80094d8:	f7f9 fe1c 	bl	8003114 <send_debug_logs>
	  astronode_send_res_cr () ;
 80094dc:	f7fe ff24 	bl	8008328 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 80094e0:	f7ff fafe 	bl	8008ae0 <is_command_available>
 80094e4:	1e03      	subs	r3, r0, #0
 80094e6:	d00e      	beq.n	8009506 <my_astro_handle_evt+0x62>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 80094e8:	4b0c      	ldr	r3, [pc, #48]	; (800951c <my_astro_handle_evt+0x78>)
 80094ea:	0018      	movs	r0, r3
 80094ec:	f7f9 fe12 	bl	8003114 <send_debug_logs>
	  if ( astronode_send_cmd_rr ( my_astro_rcv_cmd ) )
 80094f0:	4b0b      	ldr	r3, [pc, #44]	; (8009520 <my_astro_handle_evt+0x7c>)
 80094f2:	0018      	movs	r0, r3
 80094f4:	f7ff f93c 	bl	8008770 <astronode_send_cmd_rr>
 80094f8:	1e03      	subs	r3, r0, #0
 80094fa:	d002      	beq.n	8009502 <my_astro_handle_evt+0x5e>
	  {
		  astro_rcv_cmd_flag = true ;
 80094fc:	4b09      	ldr	r3, [pc, #36]	; (8009524 <my_astro_handle_evt+0x80>)
 80094fe:	2201      	movs	r2, #1
 8009500:	701a      	strb	r2, [r3, #0]
	  }
	  astronode_send_cmd_cr () ;
 8009502:	f7ff f8f5 	bl	80086f0 <astronode_send_cmd_cr>
	}
	return true ;
 8009506:	2301      	movs	r3, #1
}
 8009508:	0018      	movs	r0, r3
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	46c0      	nop			; (mov r8, r8)
 8009510:	080141d8 	.word	0x080141d8
 8009514:	0801420c 	.word	0x0801420c
 8009518:	08014250 	.word	0x08014250
 800951c:	0801428c 	.word	0x0801428c
 8009520:	20000c0c 	.word	0x20000c0c
 8009524:	20000c0a 	.word	0x20000c0a

08009528 <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8009532:	683a      	ldr	r2, [r7, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	0011      	movs	r1, r2
 8009538:	0018      	movs	r0, r3
 800953a:	f7fe fd4f 	bl	8007fdc <astronode_send_geo_wr>
}
 800953e:	46c0      	nop			; (mov r8, r8)
 8009540:	46bd      	mov	sp, r7
 8009542:	b002      	add	sp, #8
 8009544:	bd80      	pop	{r7, pc}
	...

08009548 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 8009548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800954a:	4ca5      	ldr	r4, [pc, #660]	; (80097e0 <my_gnss_acq_coordinates+0x298>)
 800954c:	44a5      	add	sp, r4
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 8009552:	4ba4      	ldr	r3, [pc, #656]	; (80097e4 <my_gnss_acq_coordinates+0x29c>)
 8009554:	18fb      	adds	r3, r7, r3
 8009556:	2200      	movs	r2, #0
 8009558:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 800955a:	4ba3      	ldr	r3, [pc, #652]	; (80097e8 <my_gnss_acq_coordinates+0x2a0>)
 800955c:	18fb      	adds	r3, r7, r3
 800955e:	2200      	movs	r2, #0
 8009560:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 8009562:	4ba2      	ldr	r3, [pc, #648]	; (80097ec <my_gnss_acq_coordinates+0x2a4>)
 8009564:	18fb      	adds	r3, r7, r3
 8009566:	2200      	movs	r2, #0
 8009568:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 800956a:	4ba1      	ldr	r3, [pc, #644]	; (80097f0 <my_gnss_acq_coordinates+0x2a8>)
 800956c:	18fb      	adds	r3, r7, r3
 800956e:	2200      	movs	r2, #0
 8009570:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8009572:	4ba0      	ldr	r3, [pc, #640]	; (80097f4 <my_gnss_acq_coordinates+0x2ac>)
 8009574:	18fb      	adds	r3, r7, r3
 8009576:	2200      	movs	r2, #0
 8009578:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 800957a:	4b9f      	ldr	r3, [pc, #636]	; (80097f8 <my_gnss_acq_coordinates+0x2b0>)
 800957c:	2486      	movs	r4, #134	; 0x86
 800957e:	00a4      	lsls	r4, r4, #2
 8009580:	191b      	adds	r3, r3, r4
 8009582:	19db      	adds	r3, r3, r7
 8009584:	2200      	movs	r2, #0
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	3304      	adds	r3, #4
 800958a:	22f6      	movs	r2, #246	; 0xf6
 800958c:	2100      	movs	r1, #0
 800958e:	0018      	movs	r0, r3
 8009590:	f002 fc44 	bl	800be1c <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8009594:	4b99      	ldr	r3, [pc, #612]	; (80097fc <my_gnss_acq_coordinates+0x2b4>)
 8009596:	191b      	adds	r3, r3, r4
 8009598:	19db      	adds	r3, r3, r7
 800959a:	2200      	movs	r2, #0
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	3304      	adds	r3, #4
 80095a0:	22f6      	movs	r2, #246	; 0xf6
 80095a2:	2100      	movs	r1, #0
 80095a4:	0018      	movs	r0, r3
 80095a6:	f002 fc39 	bl	800be1c <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 80095aa:	4b95      	ldr	r3, [pc, #596]	; (8009800 <my_gnss_acq_coordinates+0x2b8>)
 80095ac:	2284      	movs	r2, #132	; 0x84
 80095ae:	0092      	lsls	r2, r2, #2
 80095b0:	18ba      	adds	r2, r7, r2
 80095b2:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 80095b4:	4b93      	ldr	r3, [pc, #588]	; (8009804 <my_gnss_acq_coordinates+0x2bc>)
 80095b6:	2283      	movs	r2, #131	; 0x83
 80095b8:	0092      	lsls	r2, r2, #2
 80095ba:	18ba      	adds	r2, r7, r2
 80095bc:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 80095be:	4b92      	ldr	r3, [pc, #584]	; (8009808 <my_gnss_acq_coordinates+0x2c0>)
 80095c0:	2282      	movs	r2, #130	; 0x82
 80095c2:	0092      	lsls	r2, r2, #2
 80095c4:	18ba      	adds	r2, r7, r2
 80095c6:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 80095c8:	4b90      	ldr	r3, [pc, #576]	; (800980c <my_gnss_acq_coordinates+0x2c4>)
 80095ca:	2281      	movs	r2, #129	; 0x81
 80095cc:	0092      	lsls	r2, r2, #2
 80095ce:	18ba      	adds	r2, r7, r2
 80095d0:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '0' ;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2230      	movs	r2, #48	; 0x30
 80095d6:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 1000 ;
 80095d8:	6879      	ldr	r1, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	4b8c      	ldr	r3, [pc, #560]	; (8009810 <my_gnss_acq_coordinates+0x2c8>)
 80095de:	608a      	str	r2, [r1, #8]
 80095e0:	60cb      	str	r3, [r1, #12]
	my_tim_start () ;
 80095e2:	f7f9 ffad 	bl	8003540 <my_tim_start>
	while ( tim_seconds < fix_acq_ths )
 80095e6:	e0c4      	b.n	8009772 <my_gnss_acq_coordinates+0x22a>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, true ) ;
 80095e8:	4c80      	ldr	r4, [pc, #512]	; (80097ec <my_gnss_acq_coordinates+0x2a4>)
 80095ea:	193b      	adds	r3, r7, r4
 80095ec:	2101      	movs	r1, #1
 80095ee:	0018      	movs	r0, r3
 80095f0:	f7f9 fefa 	bl	80033e8 <my_gnss_receive_byte>
		if ( rx_byte )
 80095f4:	0020      	movs	r0, r4
 80095f6:	183b      	adds	r3, r7, r0
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	4c7b      	ldr	r4, [pc, #492]	; (80097e8 <my_gnss_acq_coordinates+0x2a0>)
 80095fc:	193a      	adds	r2, r7, r4
 80095fe:	1939      	adds	r1, r7, r4
 8009600:	7809      	ldrb	r1, [r1, #0]
 8009602:	7011      	strb	r1, [r2, #0]
 8009604:	4d7b      	ldr	r5, [pc, #492]	; (80097f4 <my_gnss_acq_coordinates+0x2ac>)
 8009606:	197a      	adds	r2, r7, r5
 8009608:	1979      	adds	r1, r7, r5
 800960a:	7809      	ldrb	r1, [r1, #0]
 800960c:	7011      	strb	r1, [r2, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d100      	bne.n	8009614 <my_gnss_acq_coordinates+0xcc>
 8009612:	e0ae      	b.n	8009772 <my_gnss_acq_coordinates+0x22a>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 8009614:	4b76      	ldr	r3, [pc, #472]	; (80097f0 <my_gnss_acq_coordinates+0x2a8>)
 8009616:	18fa      	adds	r2, r7, r3
 8009618:	2684      	movs	r6, #132	; 0x84
 800961a:	0076      	lsls	r6, r6, #1
 800961c:	19b9      	adds	r1, r7, r6
 800961e:	183b      	adds	r3, r7, r0
 8009620:	0018      	movs	r0, r3
 8009622:	f000 fbf9 	bl	8009e18 <my_nmea_message>
 8009626:	0001      	movs	r1, r0
 8009628:	193b      	adds	r3, r7, r4
 800962a:	193a      	adds	r2, r7, r4
 800962c:	7812      	ldrb	r2, [r2, #0]
 800962e:	701a      	strb	r2, [r3, #0]
 8009630:	197b      	adds	r3, r7, r5
 8009632:	197a      	adds	r2, r7, r5
 8009634:	7812      	ldrb	r2, [r2, #0]
 8009636:	701a      	strb	r2, [r3, #0]
 8009638:	2902      	cmp	r1, #2
 800963a:	d000      	beq.n	800963e <my_gnss_acq_coordinates+0xf6>
 800963c:	e099      	b.n	8009772 <my_gnss_acq_coordinates+0x22a>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 800963e:	19bb      	adds	r3, r7, r6
 8009640:	0018      	movs	r0, r3
 8009642:	f000 fca9 	bl	8009f98 <is_my_nmea_checksum_ok>
 8009646:	0003      	movs	r3, r0
 8009648:	0019      	movs	r1, r3
 800964a:	193b      	adds	r3, r7, r4
 800964c:	193a      	adds	r2, r7, r4
 800964e:	7812      	ldrb	r2, [r2, #0]
 8009650:	701a      	strb	r2, [r3, #0]
 8009652:	197b      	adds	r3, r7, r5
 8009654:	197a      	adds	r2, r7, r5
 8009656:	7812      	ldrb	r2, [r2, #0]
 8009658:	701a      	strb	r2, [r3, #0]
 800965a:	2900      	cmp	r1, #0
 800965c:	d100      	bne.n	8009660 <my_gnss_acq_coordinates+0x118>
 800965e:	e088      	b.n	8009772 <my_gnss_acq_coordinates+0x22a>
				{
					if ( !is_utc_saved )
 8009660:	193b      	adds	r3, r7, r4
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	2201      	movs	r2, #1
 8009666:	4053      	eors	r3, r2
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b00      	cmp	r3, #0
 800966c:	d015      	beq.n	800969a <my_gnss_acq_coordinates+0x152>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	7c1b      	ldrb	r3, [r3, #16]
 8009672:	2b33      	cmp	r3, #51	; 0x33
 8009674:	d111      	bne.n	800969a <my_gnss_acq_coordinates+0x152>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 8009676:	2383      	movs	r3, #131	; 0x83
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	18fb      	adds	r3, r7, r3
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	19bb      	adds	r3, r7, r6
 8009680:	0011      	movs	r1, r2
 8009682:	0018      	movs	r0, r3
 8009684:	f002 fc3f 	bl	800bf06 <strstr>
 8009688:	1e03      	subs	r3, r0, #0
 800968a:	d006      	beq.n	800969a <my_gnss_acq_coordinates+0x152>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800968c:	19bb      	adds	r3, r7, r6
 800968e:	0018      	movs	r0, r3
 8009690:	f000 f9a6 	bl	80099e0 <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 8009694:	193b      	adds	r3, r7, r4
 8009696:	2201      	movs	r2, #1
 8009698:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS ) // Nie ma co tego później monitorować, bo jest cała kaskada wiadomości
 800969a:	2384      	movs	r3, #132	; 0x84
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	18fb      	adds	r3, r7, r3
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	2484      	movs	r4, #132	; 0x84
 80096a4:	0064      	lsls	r4, r4, #1
 80096a6:	193b      	adds	r3, r7, r4
 80096a8:	0011      	movs	r1, r2
 80096aa:	0018      	movs	r0, r3
 80096ac:	f002 fc2b 	bl	800bf06 <strstr>
 80096b0:	1e03      	subs	r3, r0, #0
 80096b2:	d012      	beq.n	80096da <my_gnss_acq_coordinates+0x192>
 80096b4:	4d4f      	ldr	r5, [pc, #316]	; (80097f4 <my_gnss_acq_coordinates+0x2ac>)
 80096b6:	197b      	adds	r3, r7, r5
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d80d      	bhi.n	80096da <my_gnss_acq_coordinates+0x192>
					{
						if ( tim_seconds > min_tns_time_ths )
 80096be:	4b55      	ldr	r3, [pc, #340]	; (8009814 <my_gnss_acq_coordinates+0x2cc>)
 80096c0:	881a      	ldrh	r2, [r3, #0]
 80096c2:	4b55      	ldr	r3, [pc, #340]	; (8009818 <my_gnss_acq_coordinates+0x2d0>)
 80096c4:	881b      	ldrh	r3, [r3, #0]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d85b      	bhi.n	8009782 <my_gnss_acq_coordinates+0x23a>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 80096ca:	193b      	adds	r3, r7, r4
 80096cc:	0018      	movs	r0, r3
 80096ce:	f000 fe09 	bl	800a2e4 <my_nmea_get_gsv_tns>
 80096d2:	0003      	movs	r3, r0
 80096d4:	001a      	movs	r2, r3
 80096d6:	197b      	adds	r3, r7, r5
 80096d8:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) ) // Koniecznie monitorować cały czas
 80096da:	2382      	movs	r3, #130	; 0x82
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	18fb      	adds	r3, r7, r3
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	2484      	movs	r4, #132	; 0x84
 80096e4:	0064      	lsls	r4, r4, #1
 80096e6:	193b      	adds	r3, r7, r4
 80096e8:	0011      	movs	r1, r2
 80096ea:	0018      	movs	r0, r3
 80096ec:	f002 fc0b 	bl	800bf06 <strstr>
 80096f0:	1e03      	subs	r3, r0, #0
 80096f2:	d010      	beq.n	8009716 <my_gnss_acq_coordinates+0x1ce>
					{
						fix3d->fix_mode = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 80096f4:	193b      	adds	r3, r7, r4
 80096f6:	0018      	movs	r0, r3
 80096f8:	f000 fbfa 	bl	8009ef0 <get_my_nmea_gngsa_fixed_mode_s>
 80096fc:	0003      	movs	r3, r0
 80096fe:	001a      	movs	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	741a      	strb	r2, [r3, #16]
						fix3d->pdop = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 8009704:	193b      	adds	r3, r7, r4
 8009706:	0018      	movs	r0, r3
 8009708:	f000 fbfd 	bl	8009f06 <get_my_nmea_gngsa_pdop_d>
 800970c:	0002      	movs	r2, r0
 800970e:	000b      	movs	r3, r1
 8009710:	6879      	ldr	r1, [r7, #4]
 8009712:	608a      	str	r2, [r1, #8]
 8009714:	60cb      	str	r3, [r1, #12]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) && is_utc_saved )
 8009716:	2381      	movs	r3, #129	; 0x81
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	18fb      	adds	r3, r7, r3
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	2384      	movs	r3, #132	; 0x84
 8009720:	005b      	lsls	r3, r3, #1
 8009722:	18fb      	adds	r3, r7, r3
 8009724:	0011      	movs	r1, r2
 8009726:	0018      	movs	r0, r3
 8009728:	f002 fbed 	bl	800bf06 <strstr>
 800972c:	1e03      	subs	r3, r0, #0
 800972e:	d020      	beq.n	8009772 <my_gnss_acq_coordinates+0x22a>
 8009730:	4b2d      	ldr	r3, [pc, #180]	; (80097e8 <my_gnss_acq_coordinates+0x2a0>)
 8009732:	18fb      	adds	r3, r7, r3
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d01b      	beq.n	8009772 <my_gnss_acq_coordinates+0x22a>
					{
						if ( fix3d->fix_mode != NMEA_3D_FIX ) // Solution for Issue #3 Handle a lost of fix during acquisition.
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	7c1b      	ldrb	r3, [r3, #16]
 800973e:	2b33      	cmp	r3, #51	; 0x33
 8009740:	d121      	bne.n	8009786 <my_gnss_acq_coordinates+0x23e>
						{
							break ;
						}
						memcpy ( gngll_message , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 8009742:	4b2e      	ldr	r3, [pc, #184]	; (80097fc <my_gnss_acq_coordinates+0x2b4>)
 8009744:	2186      	movs	r1, #134	; 0x86
 8009746:	0089      	lsls	r1, r1, #2
 8009748:	185b      	adds	r3, r3, r1
 800974a:	19da      	adds	r2, r3, r7
 800974c:	4b2a      	ldr	r3, [pc, #168]	; (80097f8 <my_gnss_acq_coordinates+0x2b0>)
 800974e:	185b      	adds	r3, r3, r1
 8009750:	19db      	adds	r3, r3, r7
 8009752:	0010      	movs	r0, r2
 8009754:	0019      	movs	r1, r3
 8009756:	23fa      	movs	r3, #250	; 0xfa
 8009758:	001a      	movs	r2, r3
 800975a:	f002 fc8c 	bl	800c076 <memcpy>
						if ( fix3d->pdop <= pdop_ths )
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6898      	ldr	r0, [r3, #8]
 8009762:	68d9      	ldr	r1, [r3, #12]
 8009764:	4b2d      	ldr	r3, [pc, #180]	; (800981c <my_gnss_acq_coordinates+0x2d4>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	f7f6 fe7d 	bl	8000468 <__aeabi_dcmple>
 800976e:	1e03      	subs	r3, r0, #0
 8009770:	d10b      	bne.n	800978a <my_gnss_acq_coordinates+0x242>
	while ( tim_seconds < fix_acq_ths )
 8009772:	4b28      	ldr	r3, [pc, #160]	; (8009814 <my_gnss_acq_coordinates+0x2cc>)
 8009774:	881a      	ldrh	r2, [r3, #0]
 8009776:	4b2a      	ldr	r3, [pc, #168]	; (8009820 <my_gnss_acq_coordinates+0x2d8>)
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	429a      	cmp	r2, r3
 800977c:	d200      	bcs.n	8009780 <my_gnss_acq_coordinates+0x238>
 800977e:	e733      	b.n	80095e8 <my_gnss_acq_coordinates+0xa0>
 8009780:	e004      	b.n	800978c <my_gnss_acq_coordinates+0x244>
							break ;
 8009782:	46c0      	nop			; (mov r8, r8)
 8009784:	e002      	b.n	800978c <my_gnss_acq_coordinates+0x244>
							break ;
 8009786:	46c0      	nop			; (mov r8, r8)
 8009788:	e000      	b.n	800978c <my_gnss_acq_coordinates+0x244>
						{
							break ;
 800978a:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 800978c:	f7f9 fee8 	bl	8003560 <my_tim_stop>
	// WYŁĄCZYĆ I ZASAVEOWAĆ BRAK GLONASS BO OSTATNIO NIE ZROBIŁEM SAVE TO NVRAM

	if ( gngll_message[0] )
 8009790:	4b1a      	ldr	r3, [pc, #104]	; (80097fc <my_gnss_acq_coordinates+0x2b4>)
 8009792:	2286      	movs	r2, #134	; 0x86
 8009794:	0092      	lsls	r2, r2, #2
 8009796:	189b      	adds	r3, r3, r2
 8009798:	19db      	adds	r3, r3, r7
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00a      	beq.n	80097b6 <my_gnss_acq_coordinates+0x26e>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	230c      	movs	r3, #12
 80097a4:	18fb      	adds	r3, r7, r3
 80097a6:	0011      	movs	r1, r2
 80097a8:	0018      	movs	r0, r3
 80097aa:	f000 fcb1 	bl	800a110 <my_nmea_get_gngll_coordinates>
		r = true ;
 80097ae:	4b0d      	ldr	r3, [pc, #52]	; (80097e4 <my_gnss_acq_coordinates+0x29c>)
 80097b0:	18fb      	adds	r3, r7, r3
 80097b2:	2201      	movs	r2, #1
 80097b4:	701a      	strb	r2, [r3, #0]
	}
	fix3d->acq_time = tim_seconds ;
 80097b6:	4b17      	ldr	r3, [pc, #92]	; (8009814 <my_gnss_acq_coordinates+0x2cc>)
 80097b8:	881a      	ldrh	r2, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	825a      	strh	r2, [r3, #18]
	fix3d->acq_total_time += tim_seconds ; // UWAGA: Tutaj nie mogę zaokrąglać, bo będę tracił za każdym razem resztę co się uzbiera w duży błąd
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	4a14      	ldr	r2, [pc, #80]	; (8009814 <my_gnss_acq_coordinates+0x2cc>)
 80097c4:	8812      	ldrh	r2, [r2, #0]
 80097c6:	189a      	adds	r2, r3, r2
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	615a      	str	r2, [r3, #20]
	return r ;
 80097cc:	4b05      	ldr	r3, [pc, #20]	; (80097e4 <my_gnss_acq_coordinates+0x29c>)
 80097ce:	18fb      	adds	r3, r7, r3
 80097d0:	781b      	ldrb	r3, [r3, #0]
}
 80097d2:	0018      	movs	r0, r3
 80097d4:	46bd      	mov	sp, r7
 80097d6:	2387      	movs	r3, #135	; 0x87
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	449d      	add	sp, r3
 80097dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097de:	46c0      	nop			; (mov r8, r8)
 80097e0:	fffffde4 	.word	0xfffffde4
 80097e4:	00000217 	.word	0x00000217
 80097e8:	00000216 	.word	0x00000216
 80097ec:	00000203 	.word	0x00000203
 80097f0:	00000202 	.word	0x00000202
 80097f4:	00000215 	.word	0x00000215
 80097f8:	fffffef0 	.word	0xfffffef0
 80097fc:	fffffdf4 	.word	0xfffffdf4
 8009800:	080142cc 	.word	0x080142cc
 8009804:	080142d4 	.word	0x080142d4
 8009808:	080142dc 	.word	0x080142dc
 800980c:	080142e4 	.word	0x080142e4
 8009810:	408f4000 	.word	0x408f4000
 8009814:	20000c34 	.word	0x20000c34
 8009818:	20000018 	.word	0x20000018
 800981c:	20000020 	.word	0x20000020
 8009820:	20000016 	.word	0x20000016

08009824 <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 800982e:	6879      	ldr	r1, [r7, #4]
 8009830:	4b07      	ldr	r3, [pc, #28]	; (8009850 <my_rtc_get_dt+0x2c>)
 8009832:	2200      	movs	r2, #0
 8009834:	0018      	movs	r0, r3
 8009836:	f7fc f939 	bl	8005aac <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	4b04      	ldr	r3, [pc, #16]	; (8009850 <my_rtc_get_dt+0x2c>)
 800983e:	2200      	movs	r2, #0
 8009840:	0018      	movs	r0, r3
 8009842:	f7fc f845 	bl	80058d0 <HAL_RTC_GetTime>
}
 8009846:	46c0      	nop			; (mov r8, r8)
 8009848:	46bd      	mov	sp, r7
 800984a:	b002      	add	sp, #8
 800984c:	bd80      	pop	{r7, pc}
 800984e:	46c0      	nop			; (mov r8, r8)
 8009850:	200006f4 	.word	0x200006f4

08009854 <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 8009854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009856:	b08d      	sub	sp, #52	; 0x34
 8009858:	af04      	add	r7, sp, #16
 800985a:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 800985c:	2508      	movs	r5, #8
 800985e:	1979      	adds	r1, r7, r5
 8009860:	4b1b      	ldr	r3, [pc, #108]	; (80098d0 <my_rtc_get_dt_s+0x7c>)
 8009862:	2200      	movs	r2, #0
 8009864:	0018      	movs	r0, r3
 8009866:	f7fc f833 	bl	80058d0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 800986a:	241c      	movs	r4, #28
 800986c:	1939      	adds	r1, r7, r4
 800986e:	4b18      	ldr	r3, [pc, #96]	; (80098d0 <my_rtc_get_dt_s+0x7c>)
 8009870:	2200      	movs	r2, #0
 8009872:	0018      	movs	r0, r3
 8009874:	f7fc f91a 	bl	8005aac <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 8009878:	0021      	movs	r1, r4
 800987a:	187b      	adds	r3, r7, r1
 800987c:	78db      	ldrb	r3, [r3, #3]
 800987e:	22fa      	movs	r2, #250	; 0xfa
 8009880:	00d2      	lsls	r2, r2, #3
 8009882:	189a      	adds	r2, r3, r2
 8009884:	187b      	adds	r3, r7, r1
 8009886:	785b      	ldrb	r3, [r3, #1]
 8009888:	469c      	mov	ip, r3
 800988a:	187b      	adds	r3, r7, r1
 800988c:	789b      	ldrb	r3, [r3, #2]
 800988e:	001c      	movs	r4, r3
 8009890:	0028      	movs	r0, r5
 8009892:	183b      	adds	r3, r7, r0
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	001d      	movs	r5, r3
 8009898:	183b      	adds	r3, r7, r0
 800989a:	785b      	ldrb	r3, [r3, #1]
 800989c:	001e      	movs	r6, r3
 800989e:	183b      	adds	r3, r7, r0
 80098a0:	789b      	ldrb	r3, [r3, #2]
 80098a2:	490c      	ldr	r1, [pc, #48]	; (80098d4 <my_rtc_get_dt_s+0x80>)
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	9303      	str	r3, [sp, #12]
 80098a8:	9602      	str	r6, [sp, #8]
 80098aa:	9501      	str	r5, [sp, #4]
 80098ac:	9400      	str	r4, [sp, #0]
 80098ae:	4663      	mov	r3, ip
 80098b0:	f002 fa1e 	bl	800bcf0 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 80098b4:	211c      	movs	r1, #28
 80098b6:	187b      	adds	r3, r7, r1
 80098b8:	78db      	ldrb	r3, [r3, #3]
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	22fa      	movs	r2, #250	; 0xfa
 80098be:	00d2      	lsls	r2, r2, #3
 80098c0:	4694      	mov	ip, r2
 80098c2:	4463      	add	r3, ip
 80098c4:	b29b      	uxth	r3, r3
}
 80098c6:	0018      	movs	r0, r3
 80098c8:	46bd      	mov	sp, r7
 80098ca:	b009      	add	sp, #36	; 0x24
 80098cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ce:	46c0      	nop			; (mov r8, r8)
 80098d0:	200006f4 	.word	0x200006f4
 80098d4:	08014334 	.word	0x08014334

080098d8 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 80098d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098da:	b0a9      	sub	sp, #164	; 0xa4
 80098dc:	af02      	add	r7, sp, #8
 80098de:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 80098e0:	2434      	movs	r4, #52	; 0x34
 80098e2:	193a      	adds	r2, r7, r4
 80098e4:	2548      	movs	r5, #72	; 0x48
 80098e6:	197b      	adds	r3, r7, r5
 80098e8:	0011      	movs	r1, r2
 80098ea:	0018      	movs	r0, r3
 80098ec:	f7ff ff9a 	bl	8009824 <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 80098f0:	2680      	movs	r6, #128	; 0x80
 80098f2:	19bb      	adds	r3, r7, r6
 80098f4:	0018      	movs	r0, r3
 80098f6:	f7ff ffad 	bl	8009854 <my_rtc_get_dt_s>
	sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80098fa:	4a36      	ldr	r2, [pc, #216]	; (80099d4 <my_rtc_set_alarm+0xfc>)
 80098fc:	4936      	ldr	r1, [pc, #216]	; (80099d8 <my_rtc_set_alarm+0x100>)
 80098fe:	234c      	movs	r3, #76	; 0x4c
 8009900:	18f8      	adds	r0, r7, r3
 8009902:	19bb      	adds	r3, r7, r6
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	232d      	movs	r3, #45	; 0x2d
 8009908:	f002 f9f2 	bl	800bcf0 <sprintf>
	send_debug_logs ( m ) ;
 800990c:	234c      	movs	r3, #76	; 0x4c
 800990e:	18fb      	adds	r3, r7, r3
 8009910:	0018      	movs	r0, r3
 8009912:	f7f9 fbff 	bl	8003114 <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 8009916:	193a      	adds	r2, r7, r4
 8009918:	197b      	adds	r3, r7, r5
 800991a:	0011      	movs	r1, r2
 800991c:	0018      	movs	r0, r3
 800991e:	f000 f90d 	bl	8009b3c <my_conv_rtc2timestamp>
 8009922:	0002      	movs	r2, r0
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	189b      	adds	r3, r3, r2
 8009928:	2094      	movs	r0, #148	; 0x94
 800992a:	183a      	adds	r2, r7, r0
 800992c:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 800992e:	193a      	adds	r2, r7, r4
 8009930:	1979      	adds	r1, r7, r5
 8009932:	1838      	adds	r0, r7, r0
 8009934:	6803      	ldr	r3, [r0, #0]
 8009936:	0018      	movs	r0, r3
 8009938:	f000 f974 	bl	8009c24 <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 800993c:	193b      	adds	r3, r7, r4
 800993e:	781a      	ldrb	r2, [r3, #0]
 8009940:	210c      	movs	r1, #12
 8009942:	187b      	adds	r3, r7, r1
 8009944:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 8009946:	193b      	adds	r3, r7, r4
 8009948:	785a      	ldrb	r2, [r3, #1]
 800994a:	187b      	adds	r3, r7, r1
 800994c:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 800994e:	193b      	adds	r3, r7, r4
 8009950:	789a      	ldrb	r2, [r3, #2]
 8009952:	187b      	adds	r3, r7, r1
 8009954:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 8009956:	0008      	movs	r0, r1
 8009958:	183b      	adds	r3, r7, r0
 800995a:	2200      	movs	r2, #0
 800995c:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800995e:	183b      	adds	r3, r7, r0
 8009960:	2200      	movs	r2, #0
 8009962:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 8009964:	183b      	adds	r3, r7, r0
 8009966:	2200      	movs	r2, #0
 8009968:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 800996a:	183b      	adds	r3, r7, r0
 800996c:	2200      	movs	r2, #0
 800996e:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 8009970:	183b      	adds	r3, r7, r0
 8009972:	2200      	movs	r2, #0
 8009974:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 8009976:	183b      	adds	r3, r7, r0
 8009978:	2200      	movs	r2, #0
 800997a:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 800997c:	197b      	adds	r3, r7, r5
 800997e:	7899      	ldrb	r1, [r3, #2]
 8009980:	183b      	adds	r3, r7, r0
 8009982:	2220      	movs	r2, #32
 8009984:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 8009986:	183b      	adds	r3, r7, r0
 8009988:	2280      	movs	r2, #128	; 0x80
 800998a:	0052      	lsls	r2, r2, #1
 800998c:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 800998e:	1839      	adds	r1, r7, r0
 8009990:	4b12      	ldr	r3, [pc, #72]	; (80099dc <my_rtc_set_alarm+0x104>)
 8009992:	2200      	movs	r2, #0
 8009994:	0018      	movs	r0, r3
 8009996:	f7fc f8d7 	bl	8005b48 <HAL_RTC_SetAlarm_IT>
 800999a:	1e03      	subs	r3, r0, #0
 800999c:	d114      	bne.n	80099c8 <my_rtc_set_alarm+0xf0>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 800999e:	19ba      	adds	r2, r7, r6
 80099a0:	1939      	adds	r1, r7, r4
 80099a2:	197b      	adds	r3, r7, r5
 80099a4:	0018      	movs	r0, r3
 80099a6:	f000 f9ff 	bl	8009da8 <my_conv_dt_2_dts>
		sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80099aa:	4a0a      	ldr	r2, [pc, #40]	; (80099d4 <my_rtc_set_alarm+0xfc>)
 80099ac:	490a      	ldr	r1, [pc, #40]	; (80099d8 <my_rtc_set_alarm+0x100>)
 80099ae:	244c      	movs	r4, #76	; 0x4c
 80099b0:	1938      	adds	r0, r7, r4
 80099b2:	19bb      	adds	r3, r7, r6
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	2341      	movs	r3, #65	; 0x41
 80099b8:	f002 f99a 	bl	800bcf0 <sprintf>
		send_debug_logs ( m ) ;
 80099bc:	193b      	adds	r3, r7, r4
 80099be:	0018      	movs	r0, r3
 80099c0:	f7f9 fba8 	bl	8003114 <send_debug_logs>
		return true ;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e000      	b.n	80099ca <my_rtc_set_alarm+0xf2>
	}
	return false ;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	0018      	movs	r0, r3
 80099cc:	46bd      	mov	sp, r7
 80099ce:	b027      	add	sp, #156	; 0x9c
 80099d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d2:	46c0      	nop			; (mov r8, r8)
 80099d4:	08014354 	.word	0x08014354
 80099d8:	08014370 	.word	0x08014370
 80099dc:	200006f4 	.word	0x200006f4

080099e0 <my_rtc_set_dt_from_nmea_rmc>:

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 80099e0:	b5b0      	push	{r4, r5, r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 80099e8:	2508      	movs	r5, #8
 80099ea:	197b      	adds	r3, r7, r5
 80099ec:	1cda      	adds	r2, r3, #3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	0011      	movs	r1, r2
 80099f2:	0018      	movs	r0, r3
 80099f4:	f000 fcae 	bl	800a354 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 80099f8:	197b      	adds	r3, r7, r5
 80099fa:	1c5a      	adds	r2, r3, #1
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	0011      	movs	r1, r2
 8009a00:	0018      	movs	r0, r3
 8009a02:	f000 fce1 	bl	800a3c8 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 8009a06:	197b      	adds	r3, r7, r5
 8009a08:	1c9a      	adds	r2, r3, #2
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	0011      	movs	r1, r2
 8009a0e:	0018      	movs	r0, r3
 8009a10:	f000 fd14 	bl	800a43c <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 8009a14:	240c      	movs	r4, #12
 8009a16:	193a      	adds	r2, r7, r4
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	0011      	movs	r1, r2
 8009a1c:	0018      	movs	r0, r3
 8009a1e:	f000 fd47 	bl	800a4b0 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8009a22:	193b      	adds	r3, r7, r4
 8009a24:	1c5a      	adds	r2, r3, #1
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	0011      	movs	r1, r2
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	f000 fd7a 	bl	800a524 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8009a30:	193b      	adds	r3, r7, r4
 8009a32:	1c9a      	adds	r2, r3, #2
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	0011      	movs	r1, r2
 8009a38:	0018      	movs	r0, r3
 8009a3a:	f000 fdad 	bl	800a598 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 8009a3e:	193b      	adds	r3, r7, r4
 8009a40:	1d1a      	adds	r2, r3, #4
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	0011      	movs	r1, r2
 8009a46:	0018      	movs	r0, r3
 8009a48:	f000 fde0 	bl	800a60c <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009a4c:	193b      	adds	r3, r7, r4
 8009a4e:	2200      	movs	r2, #0
 8009a50:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009a52:	193b      	adds	r3, r7, r4
 8009a54:	2200      	movs	r2, #0
 8009a56:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8009a58:	4b0b      	ldr	r3, [pc, #44]	; (8009a88 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009a5a:	0018      	movs	r0, r3
 8009a5c:	f7fc fae3 	bl	8006026 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8009a60:	1939      	adds	r1, r7, r4
 8009a62:	4b09      	ldr	r3, [pc, #36]	; (8009a88 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	0018      	movs	r0, r3
 8009a68:	f7fb fe8a 	bl	8005780 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8009a6c:	1979      	adds	r1, r7, r5
 8009a6e:	4b06      	ldr	r3, [pc, #24]	; (8009a88 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	0018      	movs	r0, r3
 8009a74:	f7fb ff88 	bl	8005988 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8009a78:	4b03      	ldr	r3, [pc, #12]	; (8009a88 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009a7a:	0018      	movs	r0, r3
 8009a7c:	f7fc fb07 	bl	800608e <HAL_RTCEx_DisableBypassShadow>
}
 8009a80:	46c0      	nop			; (mov r8, r8)
 8009a82:	46bd      	mov	sp, r7
 8009a84:	b008      	add	sp, #32
 8009a86:	bdb0      	pop	{r4, r5, r7, pc}
 8009a88:	200006f4 	.word	0x200006f4

08009a8c <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2100      	movs	r1, #0
 8009a98:	0018      	movs	r0, r3
 8009a9a:	f001 fefb 	bl	800b894 <strtod>
 8009a9e:	0002      	movs	r2, r0
 8009aa0:	000b      	movs	r3, r1
 8009aa2:	60ba      	str	r2, [r7, #8]
 8009aa4:	60fb      	str	r3, [r7, #12]
    return d ;
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
}
 8009aaa:	0010      	movs	r0, r2
 8009aac:	0019      	movs	r1, r3
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	b004      	add	sp, #16
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	0008      	movs	r0, r1
 8009abe:	0011      	movs	r1, r2
 8009ac0:	1cfb      	adds	r3, r7, #3
 8009ac2:	1c02      	adds	r2, r0, #0
 8009ac4:	701a      	strb	r2, [r3, #0]
 8009ac6:	1cbb      	adds	r3, r7, #2
 8009ac8:	1c0a      	adds	r2, r1, #0
 8009aca:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8009acc:	230f      	movs	r3, #15
 8009ace:	18fb      	adds	r3, r7, r3
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8009ad4:	230e      	movs	r3, #14
 8009ad6:	18fb      	adds	r3, r7, r3
 8009ad8:	2200      	movs	r2, #0
 8009ada:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8009adc:	e01c      	b.n	8009b18 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8009ade:	230f      	movs	r3, #15
 8009ae0:	18fb      	adds	r3, r7, r3
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	18d3      	adds	r3, r2, r3
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	1cfa      	adds	r2, r7, #3
 8009aec:	7812      	ldrb	r2, [r2, #0]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d105      	bne.n	8009afe <my_find_char_position+0x4a>
			p++ ;
 8009af2:	210e      	movs	r1, #14
 8009af4:	187b      	adds	r3, r7, r1
 8009af6:	781a      	ldrb	r2, [r3, #0]
 8009af8:	187b      	adds	r3, r7, r1
 8009afa:	3201      	adds	r2, #1
 8009afc:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8009afe:	230e      	movs	r3, #14
 8009b00:	18fa      	adds	r2, r7, r3
 8009b02:	1cbb      	adds	r3, r7, #2
 8009b04:	7812      	ldrb	r2, [r2, #0]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d00e      	beq.n	8009b2a <my_find_char_position+0x76>
			break ;
		i++ ;
 8009b0c:	210f      	movs	r1, #15
 8009b0e:	187b      	adds	r3, r7, r1
 8009b10:	781a      	ldrb	r2, [r3, #0]
 8009b12:	187b      	adds	r3, r7, r1
 8009b14:	3201      	adds	r2, #1
 8009b16:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8009b18:	230f      	movs	r3, #15
 8009b1a:	18fb      	adds	r3, r7, r3
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	18d3      	adds	r3, r2, r3
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1da      	bne.n	8009ade <my_find_char_position+0x2a>
 8009b28:	e000      	b.n	8009b2c <my_find_char_position+0x78>
			break ;
 8009b2a:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8009b2c:	230f      	movs	r3, #15
 8009b2e:	18fb      	adds	r3, r7, r3
 8009b30:	781b      	ldrb	r3, [r3, #0]
}
 8009b32:	0018      	movs	r0, r3
 8009b34:	46bd      	mov	sp, r7
 8009b36:	b004      	add	sp, #16
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	78db      	ldrb	r3, [r3, #3]
 8009b4a:	22fa      	movs	r2, #250	; 0xfa
 8009b4c:	00d2      	lsls	r2, r2, #3
 8009b4e:	4694      	mov	ip, r2
 8009b50:	4463      	add	r3, ip
 8009b52:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	0013      	movs	r3, r2
 8009b58:	00db      	lsls	r3, r3, #3
 8009b5a:	189b      	adds	r3, r3, r2
 8009b5c:	00db      	lsls	r3, r3, #3
 8009b5e:	189b      	adds	r3, r3, r2
 8009b60:	009a      	lsls	r2, r3, #2
 8009b62:	189a      	adds	r2, r3, r2
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	492c      	ldr	r1, [pc, #176]	; (8009c18 <my_conv_rtc2timestamp+0xdc>)
 8009b68:	468c      	mov	ip, r1
 8009b6a:	4463      	add	r3, ip
 8009b6c:	089b      	lsrs	r3, r3, #2
 8009b6e:	18d3      	adds	r3, r2, r3
 8009b70:	4a2a      	ldr	r2, [pc, #168]	; (8009c1c <my_conv_rtc2timestamp+0xe0>)
 8009b72:	4694      	mov	ip, r2
 8009b74:	4463      	add	r3, ip
 8009b76:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8009b78:	2300      	movs	r3, #0
 8009b7a:	613b      	str	r3, [r7, #16]
 8009b7c:	e00a      	b.n	8009b94 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 8009b7e:	4a28      	ldr	r2, [pc, #160]	; (8009c20 <my_conv_rtc2timestamp+0xe4>)
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	18d3      	adds	r3, r2, r3
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	001a      	movs	r2, r3
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	189b      	adds	r3, r3, r2
 8009b8c:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	3301      	adds	r3, #1
 8009b92:	613b      	str	r3, [r7, #16]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	785b      	ldrb	r3, [r3, #1]
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	dbee      	blt.n	8009b7e <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	785b      	ldrb	r3, [r3, #1]
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d908      	bls.n	8009bba <my_conv_rtc2timestamp+0x7e>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	0018      	movs	r0, r3
 8009bac:	f000 f8de 	bl	8009d6c <my_conv_is_leap_year>
 8009bb0:	1e03      	subs	r3, r0, #0
 8009bb2:	d002      	beq.n	8009bba <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	789b      	ldrb	r3, [r3, #2]
 8009bbe:	001a      	movs	r2, r3
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	18d3      	adds	r3, r2, r3
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 8009bc8:	697a      	ldr	r2, [r7, #20]
 8009bca:	0013      	movs	r3, r2
 8009bcc:	005b      	lsls	r3, r3, #1
 8009bce:	189b      	adds	r3, r3, r2
 8009bd0:	011a      	lsls	r2, r3, #4
 8009bd2:	1ad2      	subs	r2, r2, r3
 8009bd4:	0113      	lsls	r3, r2, #4
 8009bd6:	1a9b      	subs	r3, r3, r2
 8009bd8:	01db      	lsls	r3, r3, #7
 8009bda:	0019      	movs	r1, r3
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	001a      	movs	r2, r3
 8009be2:	0013      	movs	r3, r2
 8009be4:	011b      	lsls	r3, r3, #4
 8009be6:	1a9b      	subs	r3, r3, r2
 8009be8:	011a      	lsls	r2, r3, #4
 8009bea:	1ad2      	subs	r2, r2, r3
 8009bec:	0113      	lsls	r3, r2, #4
 8009bee:	001a      	movs	r2, r3
 8009bf0:	0013      	movs	r3, r2
 8009bf2:	18ca      	adds	r2, r1, r3
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	785b      	ldrb	r3, [r3, #1]
 8009bf8:	0019      	movs	r1, r3
 8009bfa:	000b      	movs	r3, r1
 8009bfc:	011b      	lsls	r3, r3, #4
 8009bfe:	1a5b      	subs	r3, r3, r1
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	18d3      	adds	r3, r2, r3
 8009c04:	683a      	ldr	r2, [r7, #0]
 8009c06:	7892      	ldrb	r2, [r2, #2]
 8009c08:	189b      	adds	r3, r3, r2
 8009c0a:	60bb      	str	r3, [r7, #8]

    return ts ;
 8009c0c:	68bb      	ldr	r3, [r7, #8]
}
 8009c0e:	0018      	movs	r0, r3
 8009c10:	46bd      	mov	sp, r7
 8009c12:	b006      	add	sp, #24
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	46c0      	nop			; (mov r8, r8)
 8009c18:	fffff84f 	.word	0xfffff84f
 8009c1c:	fff50736 	.word	0xfff50736
 8009c20:	0801448c 	.word	0x0801448c

08009c24 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009c24:	b590      	push	{r4, r7, lr}
 8009c26:	b08b      	sub	sp, #44	; 0x2c
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	213c      	movs	r1, #60	; 0x3c
 8009c34:	0018      	movs	r0, r3
 8009c36:	f7f6 fb07 	bl	8000248 <__aeabi_uidivmod>
 8009c3a:	000b      	movs	r3, r1
 8009c3c:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	213c      	movs	r1, #60	; 0x3c
 8009c42:	0018      	movs	r0, r3
 8009c44:	f7f6 fa7a 	bl	800013c <__udivsi3>
 8009c48:	0003      	movs	r3, r0
 8009c4a:	213c      	movs	r1, #60	; 0x3c
 8009c4c:	0018      	movs	r0, r3
 8009c4e:	f7f6 fafb 	bl	8000248 <__aeabi_uidivmod>
 8009c52:	000b      	movs	r3, r1
 8009c54:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	22e1      	movs	r2, #225	; 0xe1
 8009c5a:	0111      	lsls	r1, r2, #4
 8009c5c:	0018      	movs	r0, r3
 8009c5e:	f7f6 fa6d 	bl	800013c <__udivsi3>
 8009c62:	0003      	movs	r3, r0
 8009c64:	2118      	movs	r1, #24
 8009c66:	0018      	movs	r0, r3
 8009c68:	f7f6 faee 	bl	8000248 <__aeabi_uidivmod>
 8009c6c:	000b      	movs	r3, r1
 8009c6e:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	493b      	ldr	r1, [pc, #236]	; (8009d60 <my_conv_timestamp2rtc+0x13c>)
 8009c74:	0018      	movs	r0, r3
 8009c76:	f7f6 fa61 	bl	800013c <__udivsi3>
 8009c7a:	0003      	movs	r3, r0
 8009c7c:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 8009c7e:	4b39      	ldr	r3, [pc, #228]	; (8009d64 <my_conv_timestamp2rtc+0x140>)
 8009c80:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8009c82:	e00d      	b.n	8009ca0 <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 8009c84:	6a3b      	ldr	r3, [r7, #32]
 8009c86:	0018      	movs	r0, r3
 8009c88:	f000 f870 	bl	8009d6c <my_conv_is_leap_year>
 8009c8c:	0003      	movs	r3, r0
 8009c8e:	336e      	adds	r3, #110	; 0x6e
 8009c90:	33ff      	adds	r3, #255	; 0xff
 8009c92:	001a      	movs	r2, r3
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	1a9b      	subs	r3, r3, r2
 8009c98:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 8009c9a:	6a3b      	ldr	r3, [r7, #32]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8009ca0:	6a3b      	ldr	r3, [r7, #32]
 8009ca2:	0018      	movs	r0, r3
 8009ca4:	f000 f862 	bl	8009d6c <my_conv_is_leap_year>
 8009ca8:	0003      	movs	r3, r0
 8009caa:	336e      	adds	r3, #110	; 0x6e
 8009cac:	33ff      	adds	r3, #255	; 0xff
 8009cae:	001a      	movs	r2, r3
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d2e6      	bcs.n	8009c84 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8009cba:	e018      	b.n	8009cee <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 8009cbc:	4b2a      	ldr	r3, [pc, #168]	; (8009d68 <my_conv_timestamp2rtc+0x144>)
 8009cbe:	69fa      	ldr	r2, [r7, #28]
 8009cc0:	0052      	lsls	r2, r2, #1
 8009cc2:	5ad3      	ldrh	r3, [r2, r3]
 8009cc4:	001c      	movs	r4, r3
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d107      	bne.n	8009cdc <my_conv_timestamp2rtc+0xb8>
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	0018      	movs	r0, r3
 8009cd0:	f000 f84c 	bl	8009d6c <my_conv_is_leap_year>
 8009cd4:	1e03      	subs	r3, r0, #0
 8009cd6:	d001      	beq.n	8009cdc <my_conv_timestamp2rtc+0xb8>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e000      	b.n	8009cde <my_conv_timestamp2rtc+0xba>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	191b      	adds	r3, r3, r4
 8009ce0:	001a      	movs	r2, r3
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce4:	1a9b      	subs	r3, r3, r2
 8009ce6:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	3301      	adds	r3, #1
 8009cec:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8009cee:	4b1e      	ldr	r3, [pc, #120]	; (8009d68 <my_conv_timestamp2rtc+0x144>)
 8009cf0:	69fa      	ldr	r2, [r7, #28]
 8009cf2:	0052      	lsls	r2, r2, #1
 8009cf4:	5ad3      	ldrh	r3, [r2, r3]
 8009cf6:	001c      	movs	r4, r3
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d107      	bne.n	8009d0e <my_conv_timestamp2rtc+0xea>
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	0018      	movs	r0, r3
 8009d02:	f000 f833 	bl	8009d6c <my_conv_is_leap_year>
 8009d06:	1e03      	subs	r3, r0, #0
 8009d08:	d001      	beq.n	8009d0e <my_conv_timestamp2rtc+0xea>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e000      	b.n	8009d10 <my_conv_timestamp2rtc+0xec>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	191b      	adds	r3, r3, r4
 8009d12:	001a      	movs	r2, r3
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d2d0      	bcs.n	8009cbc <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 8009d1a:	6a3b      	ldr	r3, [r7, #32]
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	3330      	adds	r3, #48	; 0x30
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 8009d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	3301      	adds	r3, #1
 8009d38:	b2da      	uxtb	r2, r3
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	709a      	strb	r2, [r3, #2]
}
 8009d56:	46c0      	nop			; (mov r8, r8)
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	b00b      	add	sp, #44	; 0x2c
 8009d5c:	bd90      	pop	{r4, r7, pc}
 8009d5e:	46c0      	nop			; (mov r8, r8)
 8009d60:	00015180 	.word	0x00015180
 8009d64:	000007b2 	.word	0x000007b2
 8009d68:	08014498 	.word	0x08014498

08009d6c <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2203      	movs	r2, #3
 8009d78:	4013      	ands	r3, r2
 8009d7a:	d106      	bne.n	8009d8a <my_conv_is_leap_year+0x1e>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2164      	movs	r1, #100	; 0x64
 8009d80:	0018      	movs	r0, r3
 8009d82:	f7f6 fb4b 	bl	800041c <__aeabi_idivmod>
 8009d86:	1e0b      	subs	r3, r1, #0
 8009d88:	d107      	bne.n	8009d9a <my_conv_is_leap_year+0x2e>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	22c8      	movs	r2, #200	; 0xc8
 8009d8e:	0051      	lsls	r1, r2, #1
 8009d90:	0018      	movs	r0, r3
 8009d92:	f7f6 fb43 	bl	800041c <__aeabi_idivmod>
 8009d96:	1e0b      	subs	r3, r1, #0
 8009d98:	d101      	bne.n	8009d9e <my_conv_is_leap_year+0x32>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e000      	b.n	8009da0 <my_conv_is_leap_year+0x34>
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	0018      	movs	r0, r3
 8009da2:	46bd      	mov	sp, r7
 8009da4:	b002      	add	sp, #8
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 8009da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009daa:	b089      	sub	sp, #36	; 0x24
 8009dac:	af04      	add	r7, sp, #16
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	78db      	ldrb	r3, [r3, #3]
 8009db8:	22fa      	movs	r2, #250	; 0xfa
 8009dba:	00d2      	lsls	r2, r2, #3
 8009dbc:	189a      	adds	r2, r3, r2
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	785b      	ldrb	r3, [r3, #1]
 8009dc2:	469c      	mov	ip, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	789b      	ldrb	r3, [r3, #2]
 8009dc8:	001c      	movs	r4, r3
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	001d      	movs	r5, r3
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	785b      	ldrb	r3, [r3, #1]
 8009dd4:	001e      	movs	r6, r3
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	789b      	ldrb	r3, [r3, #2]
 8009dda:	4906      	ldr	r1, [pc, #24]	; (8009df4 <my_conv_dt_2_dts+0x4c>)
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	9303      	str	r3, [sp, #12]
 8009de0:	9602      	str	r6, [sp, #8]
 8009de2:	9501      	str	r5, [sp, #4]
 8009de4:	9400      	str	r4, [sp, #0]
 8009de6:	4663      	mov	r3, ip
 8009de8:	f001 ff82 	bl	800bcf0 <sprintf>
}
 8009dec:	46c0      	nop			; (mov r8, r8)
 8009dee:	46bd      	mov	sp, r7
 8009df0:	b005      	add	sp, #20
 8009df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009df4:	0801437c 	.word	0x0801437c

08009df8 <my_conv_string_2_uint32_t>:

uint32_t my_conv_string_2_uint32_t ( const char* c )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
	char* end_p ;
	return (uint32_t) strtoul ( c , &end_p , 10 ) ;
 8009e00:	230c      	movs	r3, #12
 8009e02:	18f9      	adds	r1, r7, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	220a      	movs	r2, #10
 8009e08:	0018      	movs	r0, r3
 8009e0a:	f001 fe6d 	bl	800bae8 <strtoul>
 8009e0e:	0003      	movs	r3, r0
}
 8009e10:	0018      	movs	r0, r3
 8009e12:	46bd      	mov	sp, r7
 8009e14:	b004      	add	sp, #16
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	2b24      	cmp	r3, #36	; 0x24
 8009e2a:	d117      	bne.n	8009e5c <my_nmea_message+0x44>
    {
        *i = 0 ;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	b2d1      	uxtb	r1, r2
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	7011      	strb	r1, [r2, #0]
 8009e3e:	001a      	movs	r2, r3
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	189b      	adds	r3, r3, r2
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	7812      	ldrb	r2, [r2, #0]
 8009e48:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	001a      	movs	r2, r3
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	189b      	adds	r3, r3, r2
 8009e54:	2200      	movs	r2, #0
 8009e56:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	e045      	b.n	8009ee8 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	2b1f      	cmp	r3, #31
 8009e62:	d907      	bls.n	8009e74 <my_nmea_message+0x5c>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	2b7e      	cmp	r3, #126	; 0x7e
 8009e6a:	d803      	bhi.n	8009e74 <my_nmea_message+0x5c>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d103      	bne.n	8009e7c <my_nmea_message+0x64>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	2b0d      	cmp	r3, #13
 8009e7a:	d114      	bne.n	8009ea6 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	1c5a      	adds	r2, r3, #1
 8009e82:	b2d1      	uxtb	r1, r2
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	7011      	strb	r1, [r2, #0]
 8009e88:	001a      	movs	r2, r3
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	189b      	adds	r3, r3, r2
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	7812      	ldrb	r2, [r2, #0]
 8009e92:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	001a      	movs	r2, r3
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	189b      	adds	r3, r3, r2
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e020      	b.n	8009ee8 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	2b0a      	cmp	r3, #10
 8009eac:	d11a      	bne.n	8009ee4 <my_nmea_message+0xcc>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d916      	bls.n	8009ee4 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	701a      	strb	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	001a      	movs	r2, r3
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	189b      	adds	r3, r3, r2
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	2b0d      	cmp	r3, #13
 8009ed0:	d108      	bne.n	8009ee4 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	001a      	movs	r2, r3
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	189b      	adds	r3, r3, r2
 8009edc:	2200      	movs	r2, #0
 8009ede:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	e001      	b.n	8009ee8 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	425b      	negs	r3, r3
}
 8009ee8:	0018      	movs	r0, r3
 8009eea:	46bd      	mov	sp, r7
 8009eec:	b004      	add	sp, #16
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
	return m[9] ;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	3309      	adds	r3, #9
 8009efc:	781b      	ldrb	r3, [r3, #0]
}
 8009efe:	0018      	movs	r0, r3
 8009f00:	46bd      	mov	sp, r7
 8009f02:	b002      	add	sp, #8
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8009f06:	b5b0      	push	{r4, r5, r7, lr}
 8009f08:	b086      	sub	sp, #24
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	220f      	movs	r2, #15
 8009f12:	212c      	movs	r1, #44	; 0x2c
 8009f14:	0018      	movs	r0, r3
 8009f16:	f7ff fdcd 	bl	8009ab4 <my_find_char_position>
 8009f1a:	0003      	movs	r3, r0
 8009f1c:	001a      	movs	r2, r3
 8009f1e:	2517      	movs	r5, #23
 8009f20:	197b      	adds	r3, r7, r5
 8009f22:	3201      	adds	r2, #1
 8009f24:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2210      	movs	r2, #16
 8009f2a:	212c      	movs	r1, #44	; 0x2c
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f7ff fdc1 	bl	8009ab4 <my_find_char_position>
 8009f32:	0003      	movs	r3, r0
 8009f34:	0019      	movs	r1, r3
 8009f36:	2416      	movs	r4, #22
 8009f38:	193b      	adds	r3, r7, r4
 8009f3a:	197a      	adds	r2, r7, r5
 8009f3c:	7812      	ldrb	r2, [r2, #0]
 8009f3e:	1a8a      	subs	r2, r1, r2
 8009f40:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 8009f42:	193b      	adds	r3, r7, r4
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	3301      	adds	r3, #1
 8009f48:	0018      	movs	r0, r3
 8009f4a:	f000 fc41 	bl	800a7d0 <malloc>
 8009f4e:	0003      	movs	r3, r0
 8009f50:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 8009f52:	197b      	adds	r3, r7, r5
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	18d1      	adds	r1, r2, r3
 8009f5a:	193b      	adds	r3, r7, r4
 8009f5c:	781a      	ldrb	r2, [r3, #0]
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	0018      	movs	r0, r3
 8009f62:	f001 ff82 	bl	800be6a <strncpy>
	pdop_s[pdop_length] = '\0';
 8009f66:	193b      	adds	r3, r7, r4
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	18d3      	adds	r3, r2, r3
 8009f6e:	2200      	movs	r2, #0
 8009f70:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	0018      	movs	r0, r3
 8009f76:	f7ff fd89 	bl	8009a8c <my_string2double_conv>
 8009f7a:	0002      	movs	r2, r0
 8009f7c:	000b      	movs	r3, r1
 8009f7e:	60ba      	str	r2, [r7, #8]
 8009f80:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	0018      	movs	r0, r3
 8009f86:	f000 fc2d 	bl	800a7e4 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
}
 8009f8e:	0010      	movs	r0, r2
 8009f90:	0019      	movs	r1, r3
 8009f92:	46bd      	mov	sp, r7
 8009f94:	b006      	add	sp, #24
 8009f96:	bdb0      	pop	{r4, r5, r7, pc}

08009f98 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 8009f98:	b590      	push	{r4, r7, lr}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8009fa0:	230f      	movs	r3, #15
 8009fa2:	18fb      	adds	r3, r7, r3
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 8009fa8:	230e      	movs	r3, #14
 8009faa:	18fb      	adds	r3, r7, r3
 8009fac:	2201      	movs	r2, #1
 8009fae:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009fb0:	e00f      	b.n	8009fd2 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8009fb2:	220e      	movs	r2, #14
 8009fb4:	18bb      	adds	r3, r7, r2
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	18ba      	adds	r2, r7, r2
 8009fba:	1c59      	adds	r1, r3, #1
 8009fbc:	7011      	strb	r1, [r2, #0]
 8009fbe:	001a      	movs	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	189b      	adds	r3, r3, r2
 8009fc4:	7819      	ldrb	r1, [r3, #0]
 8009fc6:	220f      	movs	r2, #15
 8009fc8:	18bb      	adds	r3, r7, r2
 8009fca:	18ba      	adds	r2, r7, r2
 8009fcc:	7812      	ldrb	r2, [r2, #0]
 8009fce:	404a      	eors	r2, r1
 8009fd0:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009fd2:	210e      	movs	r1, #14
 8009fd4:	187b      	adds	r3, r7, r1
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	18d3      	adds	r3, r2, r3
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	2b2a      	cmp	r3, #42	; 0x2a
 8009fe0:	d00a      	beq.n	8009ff8 <is_my_nmea_checksum_ok+0x60>
 8009fe2:	187b      	adds	r3, r7, r1
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	18d3      	adds	r3, r2, r3
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d003      	beq.n	8009ff8 <is_my_nmea_checksum_ok+0x60>
 8009ff0:	187b      	adds	r3, r7, r1
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1dc      	bne.n	8009fb2 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 8009ff8:	230f      	movs	r3, #15
 8009ffa:	18fb      	adds	r3, r7, r3
 8009ffc:	781c      	ldrb	r4, [r3, #0]
 8009ffe:	210e      	movs	r1, #14
 800a000:	187b      	adds	r3, r7, r1
 800a002:	187a      	adds	r2, r7, r1
 800a004:	7812      	ldrb	r2, [r2, #0]
 800a006:	3201      	adds	r2, #1
 800a008:	701a      	strb	r2, [r3, #0]
 800a00a:	187b      	adds	r3, r7, r1
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	18d3      	adds	r3, r2, r3
 800a012:	2210      	movs	r2, #16
 800a014:	2100      	movs	r1, #0
 800a016:	0018      	movs	r0, r3
 800a018:	f001 fcd4 	bl	800b9c4 <strtol>
 800a01c:	0003      	movs	r3, r0
 800a01e:	1ae3      	subs	r3, r4, r3
 800a020:	425a      	negs	r2, r3
 800a022:	4153      	adcs	r3, r2
 800a024:	b2db      	uxtb	r3, r3
}
 800a026:	0018      	movs	r0, r3
 800a028:	46bd      	mov	sp, r7
 800a02a:	b005      	add	sp, #20
 800a02c:	bd90      	pop	{r4, r7, pc}
	...

0800a030 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800a030:	b5b0      	push	{r4, r5, r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	000a      	movs	r2, r1
 800a03a:	1cfb      	adds	r3, r7, #3
 800a03c:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800a03e:	2308      	movs	r3, #8
 800a040:	18fa      	adds	r2, r7, r3
 800a042:	492f      	ldr	r1, [pc, #188]	; (800a100 <nmea2decimal+0xd0>)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	0018      	movs	r0, r3
 800a048:	f001 fe72 	bl	800bd30 <sscanf>
    min = deg / 100 ;
 800a04c:	68b8      	ldr	r0, [r7, #8]
 800a04e:	68f9      	ldr	r1, [r7, #12]
 800a050:	2200      	movs	r2, #0
 800a052:	4b2c      	ldr	r3, [pc, #176]	; (800a104 <nmea2decimal+0xd4>)
 800a054:	f7f6 ff10 	bl	8000e78 <__aeabi_ddiv>
 800a058:	0002      	movs	r2, r0
 800a05a:	000b      	movs	r3, r1
 800a05c:	613a      	str	r2, [r7, #16]
 800a05e:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800a060:	6938      	ldr	r0, [r7, #16]
 800a062:	6979      	ldr	r1, [r7, #20]
 800a064:	f7f8 f964 	bl	8002330 <__aeabi_d2iz>
 800a068:	0003      	movs	r3, r0
 800a06a:	0018      	movs	r0, r3
 800a06c:	f7f8 f996 	bl	800239c <__aeabi_i2d>
 800a070:	0002      	movs	r2, r0
 800a072:	000b      	movs	r3, r1
 800a074:	60ba      	str	r2, [r7, #8]
 800a076:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6938      	ldr	r0, [r7, #16]
 800a07e:	6979      	ldr	r1, [r7, #20]
 800a080:	f7f7 fdb6 	bl	8001bf0 <__aeabi_dsub>
 800a084:	0002      	movs	r2, r0
 800a086:	000b      	movs	r3, r1
 800a088:	0010      	movs	r0, r2
 800a08a:	0019      	movs	r1, r3
 800a08c:	2200      	movs	r2, #0
 800a08e:	4b1e      	ldr	r3, [pc, #120]	; (800a108 <nmea2decimal+0xd8>)
 800a090:	f7f7 faec 	bl	800166c <__aeabi_dmul>
 800a094:	0002      	movs	r2, r0
 800a096:	000b      	movs	r3, r1
 800a098:	613a      	str	r2, [r7, #16]
 800a09a:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800a09c:	2200      	movs	r2, #0
 800a09e:	4b1b      	ldr	r3, [pc, #108]	; (800a10c <nmea2decimal+0xdc>)
 800a0a0:	6938      	ldr	r0, [r7, #16]
 800a0a2:	6979      	ldr	r1, [r7, #20]
 800a0a4:	f7f6 fee8 	bl	8000e78 <__aeabi_ddiv>
 800a0a8:	0002      	movs	r2, r0
 800a0aa:	000b      	movs	r3, r1
 800a0ac:	613a      	str	r2, [r7, #16]
 800a0ae:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800a0b0:	1cfb      	adds	r3, r7, #3
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	2b53      	cmp	r3, #83	; 0x53
 800a0b6:	d003      	beq.n	800a0c0 <nmea2decimal+0x90>
 800a0b8:	1cfb      	adds	r3, r7, #3
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	2b57      	cmp	r3, #87	; 0x57
 800a0be:	d10e      	bne.n	800a0de <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800a0c0:	68b8      	ldr	r0, [r7, #8]
 800a0c2:	68f9      	ldr	r1, [r7, #12]
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f7f6 fb76 	bl	80007b8 <__aeabi_dadd>
 800a0cc:	0002      	movs	r2, r0
 800a0ce:	000b      	movs	r3, r1
 800a0d0:	0011      	movs	r1, r2
 800a0d2:	000c      	movs	r4, r1
 800a0d4:	2180      	movs	r1, #128	; 0x80
 800a0d6:	0609      	lsls	r1, r1, #24
 800a0d8:	4059      	eors	r1, r3
 800a0da:	000d      	movs	r5, r1
 800a0dc:	e009      	b.n	800a0f2 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800a0de:	68b8      	ldr	r0, [r7, #8]
 800a0e0:	68f9      	ldr	r1, [r7, #12]
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	f7f6 fb67 	bl	80007b8 <__aeabi_dadd>
 800a0ea:	0002      	movs	r2, r0
 800a0ec:	000b      	movs	r3, r1
 800a0ee:	0014      	movs	r4, r2
 800a0f0:	001d      	movs	r5, r3
}
 800a0f2:	0022      	movs	r2, r4
 800a0f4:	002b      	movs	r3, r5
 800a0f6:	0010      	movs	r0, r2
 800a0f8:	0019      	movs	r1, r3
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	b006      	add	sp, #24
 800a0fe:	bdb0      	pop	{r4, r5, r7, pc}
 800a100:	0801439c 	.word	0x0801439c
 800a104:	40590000 	.word	0x40590000
 800a108:	40240000 	.word	0x40240000
 800a10c:	40180000 	.word	0x40180000

0800a110 <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 800a110:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a112:	b08d      	sub	sp, #52	; 0x34
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2201      	movs	r2, #1
 800a11e:	212c      	movs	r1, #44	; 0x2c
 800a120:	0018      	movs	r0, r3
 800a122:	f7ff fcc7 	bl	8009ab4 <my_find_char_position>
 800a126:	0003      	movs	r3, r0
 800a128:	001a      	movs	r2, r3
 800a12a:	252f      	movs	r5, #47	; 0x2f
 800a12c:	197b      	adds	r3, r7, r5
 800a12e:	3201      	adds	r2, #1
 800a130:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2202      	movs	r2, #2
 800a136:	212c      	movs	r1, #44	; 0x2c
 800a138:	0018      	movs	r0, r3
 800a13a:	f7ff fcbb 	bl	8009ab4 <my_find_char_position>
 800a13e:	0003      	movs	r3, r0
 800a140:	0019      	movs	r1, r3
 800a142:	242e      	movs	r4, #46	; 0x2e
 800a144:	193b      	adds	r3, r7, r4
 800a146:	197a      	adds	r2, r7, r5
 800a148:	7812      	ldrb	r2, [r2, #0]
 800a14a:	1a8a      	subs	r2, r1, r2
 800a14c:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a14e:	193b      	adds	r3, r7, r4
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	3301      	adds	r3, #1
 800a154:	0018      	movs	r0, r3
 800a156:	f000 fb3b 	bl	800a7d0 <malloc>
 800a15a:	0003      	movs	r3, r0
 800a15c:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a15e:	197b      	adds	r3, r7, r5
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	18d1      	adds	r1, r2, r3
 800a166:	193b      	adds	r3, r7, r4
 800a168:	781a      	ldrb	r2, [r3, #0]
 800a16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16c:	0018      	movs	r0, r3
 800a16e:	f001 fe7c 	bl	800be6a <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800a172:	193b      	adds	r3, r7, r4
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a178:	18d3      	adds	r3, r2, r3
 800a17a:	2200      	movs	r2, #0
 800a17c:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a17e:	197b      	adds	r3, r7, r5
 800a180:	781a      	ldrb	r2, [r3, #0]
 800a182:	193b      	adds	r3, r7, r4
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	18d3      	adds	r3, r2, r3
 800a188:	3301      	adds	r3, #1
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	18d2      	adds	r2, r2, r3
 800a18e:	2627      	movs	r6, #39	; 0x27
 800a190:	19bb      	adds	r3, r7, r6
 800a192:	7812      	ldrb	r2, [r2, #0]
 800a194:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800a196:	19bb      	adds	r3, r7, r6
 800a198:	781a      	ldrb	r2, [r3, #0]
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	0011      	movs	r1, r2
 800a19e:	0018      	movs	r0, r3
 800a1a0:	f7ff ff46 	bl	800a030 <nmea2decimal>
 800a1a4:	0002      	movs	r2, r0
 800a1a6:	000b      	movs	r3, r1
 800a1a8:	61ba      	str	r2, [r7, #24]
 800a1aa:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 800a1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	f000 fb18 	bl	800a7e4 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	4b49      	ldr	r3, [pc, #292]	; (800a2dc <my_nmea_get_gngll_coordinates+0x1cc>)
 800a1b8:	69b8      	ldr	r0, [r7, #24]
 800a1ba:	69f9      	ldr	r1, [r7, #28]
 800a1bc:	f7f7 fa56 	bl	800166c <__aeabi_dmul>
 800a1c0:	0002      	movs	r2, r0
 800a1c2:	000b      	movs	r3, r1
 800a1c4:	0010      	movs	r0, r2
 800a1c6:	0019      	movs	r1, r3
 800a1c8:	f008 fb20 	bl	801280c <round>
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	4b43      	ldr	r3, [pc, #268]	; (800a2dc <my_nmea_get_gngll_coordinates+0x1cc>)
 800a1d0:	f7f6 fe52 	bl	8000e78 <__aeabi_ddiv>
 800a1d4:	0002      	movs	r2, r0
 800a1d6:	000b      	movs	r3, r1
 800a1d8:	61ba      	str	r2, [r7, #24]
 800a1da:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800a1dc:	2200      	movs	r2, #0
 800a1de:	4b40      	ldr	r3, [pc, #256]	; (800a2e0 <my_nmea_get_gngll_coordinates+0x1d0>)
 800a1e0:	69b8      	ldr	r0, [r7, #24]
 800a1e2:	69f9      	ldr	r1, [r7, #28]
 800a1e4:	f7f7 fa42 	bl	800166c <__aeabi_dmul>
 800a1e8:	0002      	movs	r2, r0
 800a1ea:	000b      	movs	r3, r1
 800a1ec:	0010      	movs	r0, r2
 800a1ee:	0019      	movs	r1, r3
 800a1f0:	f7f8 f89e 	bl	8002330 <__aeabi_d2iz>
 800a1f4:	0002      	movs	r2, r0
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2203      	movs	r2, #3
 800a1fe:	212c      	movs	r1, #44	; 0x2c
 800a200:	0018      	movs	r0, r3
 800a202:	f7ff fc57 	bl	8009ab4 <my_find_char_position>
 800a206:	0003      	movs	r3, r0
 800a208:	001a      	movs	r2, r3
 800a20a:	197b      	adds	r3, r7, r5
 800a20c:	3201      	adds	r2, #1
 800a20e:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2204      	movs	r2, #4
 800a214:	212c      	movs	r1, #44	; 0x2c
 800a216:	0018      	movs	r0, r3
 800a218:	f7ff fc4c 	bl	8009ab4 <my_find_char_position>
 800a21c:	0003      	movs	r3, r0
 800a21e:	0019      	movs	r1, r3
 800a220:	193b      	adds	r3, r7, r4
 800a222:	197a      	adds	r2, r7, r5
 800a224:	7812      	ldrb	r2, [r2, #0]
 800a226:	1a8a      	subs	r2, r1, r2
 800a228:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a22a:	193b      	adds	r3, r7, r4
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	3301      	adds	r3, #1
 800a230:	0018      	movs	r0, r3
 800a232:	f000 facd 	bl	800a7d0 <malloc>
 800a236:	0003      	movs	r3, r0
 800a238:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a23a:	197b      	adds	r3, r7, r5
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	18d1      	adds	r1, r2, r3
 800a242:	193b      	adds	r3, r7, r4
 800a244:	781a      	ldrb	r2, [r3, #0]
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	0018      	movs	r0, r3
 800a24a:	f001 fe0e 	bl	800be6a <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800a24e:	193b      	adds	r3, r7, r4
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	18d3      	adds	r3, r2, r3
 800a256:	2200      	movs	r2, #0
 800a258:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a25a:	197b      	adds	r3, r7, r5
 800a25c:	781a      	ldrb	r2, [r3, #0]
 800a25e:	193b      	adds	r3, r7, r4
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	18d3      	adds	r3, r2, r3
 800a264:	3301      	adds	r3, #1
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	18d2      	adds	r2, r2, r3
 800a26a:	19bb      	adds	r3, r7, r6
 800a26c:	7812      	ldrb	r2, [r2, #0]
 800a26e:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800a270:	19bb      	adds	r3, r7, r6
 800a272:	781a      	ldrb	r2, [r3, #0]
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	0011      	movs	r1, r2
 800a278:	0018      	movs	r0, r3
 800a27a:	f7ff fed9 	bl	800a030 <nmea2decimal>
 800a27e:	0002      	movs	r2, r0
 800a280:	000b      	movs	r3, r1
 800a282:	60ba      	str	r2, [r7, #8]
 800a284:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	0018      	movs	r0, r3
 800a28a:	f000 faab 	bl	800a7e4 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800a28e:	2200      	movs	r2, #0
 800a290:	4b12      	ldr	r3, [pc, #72]	; (800a2dc <my_nmea_get_gngll_coordinates+0x1cc>)
 800a292:	68b8      	ldr	r0, [r7, #8]
 800a294:	68f9      	ldr	r1, [r7, #12]
 800a296:	f7f7 f9e9 	bl	800166c <__aeabi_dmul>
 800a29a:	0002      	movs	r2, r0
 800a29c:	000b      	movs	r3, r1
 800a29e:	0010      	movs	r0, r2
 800a2a0:	0019      	movs	r1, r3
 800a2a2:	f008 fab3 	bl	801280c <round>
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	4b0c      	ldr	r3, [pc, #48]	; (800a2dc <my_nmea_get_gngll_coordinates+0x1cc>)
 800a2aa:	f7f6 fde5 	bl	8000e78 <__aeabi_ddiv>
 800a2ae:	0002      	movs	r2, r0
 800a2b0:	000b      	movs	r3, r1
 800a2b2:	60ba      	str	r2, [r7, #8]
 800a2b4:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	4b09      	ldr	r3, [pc, #36]	; (800a2e0 <my_nmea_get_gngll_coordinates+0x1d0>)
 800a2ba:	68b8      	ldr	r0, [r7, #8]
 800a2bc:	68f9      	ldr	r1, [r7, #12]
 800a2be:	f7f7 f9d5 	bl	800166c <__aeabi_dmul>
 800a2c2:	0002      	movs	r2, r0
 800a2c4:	000b      	movs	r3, r1
 800a2c6:	0010      	movs	r0, r2
 800a2c8:	0019      	movs	r1, r3
 800a2ca:	f7f8 f831 	bl	8002330 <__aeabi_d2iz>
 800a2ce:	0002      	movs	r2, r0
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	605a      	str	r2, [r3, #4]
}
 800a2d4:	46c0      	nop			; (mov r8, r8)
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	b00d      	add	sp, #52	; 0x34
 800a2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2dc:	412e8480 	.word	0x412e8480
 800a2e0:	416312d0 	.word	0x416312d0

0800a2e4 <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800a2e4:	b5b0      	push	{r4, r5, r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800a2ec:	240e      	movs	r4, #14
 800a2ee:	193b      	adds	r3, r7, r4
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2203      	movs	r2, #3
 800a2f8:	212c      	movs	r1, #44	; 0x2c
 800a2fa:	0018      	movs	r0, r3
 800a2fc:	f7ff fbda 	bl	8009ab4 <my_find_char_position>
 800a300:	0003      	movs	r3, r0
 800a302:	001a      	movs	r2, r3
 800a304:	2517      	movs	r5, #23
 800a306:	197b      	adds	r3, r7, r5
 800a308:	3201      	adds	r2, #1
 800a30a:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a30c:	2003      	movs	r0, #3
 800a30e:	f000 fa5f 	bl	800a7d0 <malloc>
 800a312:	0003      	movs	r3, r0
 800a314:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a316:	197b      	adds	r3, r7, r5
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	18d1      	adds	r1, r2, r3
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	2202      	movs	r2, #2
 800a322:	0018      	movs	r0, r3
 800a324:	f001 fda1 	bl	800be6a <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	3302      	adds	r3, #2
 800a32c:	2200      	movs	r2, #0
 800a32e:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800a330:	193a      	adds	r2, r7, r4
 800a332:	4907      	ldr	r1, [pc, #28]	; (800a350 <my_nmea_get_gsv_tns+0x6c>)
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	0018      	movs	r0, r3
 800a338:	f001 fcfa 	bl	800bd30 <sscanf>
	free ( s ) ;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	0018      	movs	r0, r3
 800a340:	f000 fa50 	bl	800a7e4 <free>
	return tns ;
 800a344:	193b      	adds	r3, r7, r4
 800a346:	881b      	ldrh	r3, [r3, #0]
}
 800a348:	0018      	movs	r0, r3
 800a34a:	46bd      	mov	sp, r7
 800a34c:	b006      	add	sp, #24
 800a34e:	bdb0      	pop	{r4, r5, r7, pc}
 800a350:	080143a8 	.word	0x080143a8

0800a354 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800a354:	b590      	push	{r4, r7, lr}
 800a356:	b087      	sub	sp, #28
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2209      	movs	r2, #9
 800a362:	212c      	movs	r1, #44	; 0x2c
 800a364:	0018      	movs	r0, r3
 800a366:	f7ff fba5 	bl	8009ab4 <my_find_char_position>
 800a36a:	0003      	movs	r3, r0
 800a36c:	001a      	movs	r2, r3
 800a36e:	2417      	movs	r4, #23
 800a370:	193b      	adds	r3, r7, r4
 800a372:	3205      	adds	r2, #5
 800a374:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a376:	2003      	movs	r0, #3
 800a378:	f000 fa2a 	bl	800a7d0 <malloc>
 800a37c:	0003      	movs	r3, r0
 800a37e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a380:	193b      	adds	r3, r7, r4
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	18d1      	adds	r1, r2, r3
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	2202      	movs	r2, #2
 800a38c:	0018      	movs	r0, r3
 800a38e:	f001 fd6c 	bl	800be6a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	3302      	adds	r3, #2
 800a396:	2200      	movs	r2, #0
 800a398:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a39a:	240e      	movs	r4, #14
 800a39c:	193a      	adds	r2, r7, r4
 800a39e:	4909      	ldr	r1, [pc, #36]	; (800a3c4 <my_nmea_get_rmc_date_yy+0x70>)
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	0018      	movs	r0, r3
 800a3a4:	f001 fcc4 	bl	800bd30 <sscanf>
	free ( s ) ;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	0018      	movs	r0, r3
 800a3ac:	f000 fa1a 	bl	800a7e4 <free>
	*yy = (uint8_t) temp ;
 800a3b0:	193b      	adds	r3, r7, r4
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	b2da      	uxtb	r2, r3
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	701a      	strb	r2, [r3, #0]

}
 800a3ba:	46c0      	nop			; (mov r8, r8)
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	b007      	add	sp, #28
 800a3c0:	bd90      	pop	{r4, r7, pc}
 800a3c2:	46c0      	nop			; (mov r8, r8)
 800a3c4:	080143a8 	.word	0x080143a8

0800a3c8 <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800a3c8:	b590      	push	{r4, r7, lr}
 800a3ca:	b087      	sub	sp, #28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2209      	movs	r2, #9
 800a3d6:	212c      	movs	r1, #44	; 0x2c
 800a3d8:	0018      	movs	r0, r3
 800a3da:	f7ff fb6b 	bl	8009ab4 <my_find_char_position>
 800a3de:	0003      	movs	r3, r0
 800a3e0:	001a      	movs	r2, r3
 800a3e2:	2417      	movs	r4, #23
 800a3e4:	193b      	adds	r3, r7, r4
 800a3e6:	3203      	adds	r2, #3
 800a3e8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a3ea:	2003      	movs	r0, #3
 800a3ec:	f000 f9f0 	bl	800a7d0 <malloc>
 800a3f0:	0003      	movs	r3, r0
 800a3f2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a3f4:	193b      	adds	r3, r7, r4
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	18d1      	adds	r1, r2, r3
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	2202      	movs	r2, #2
 800a400:	0018      	movs	r0, r3
 800a402:	f001 fd32 	bl	800be6a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	3302      	adds	r3, #2
 800a40a:	2200      	movs	r2, #0
 800a40c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a40e:	240e      	movs	r4, #14
 800a410:	193a      	adds	r2, r7, r4
 800a412:	4909      	ldr	r1, [pc, #36]	; (800a438 <my_nmea_get_rmc_date_mm+0x70>)
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	0018      	movs	r0, r3
 800a418:	f001 fc8a 	bl	800bd30 <sscanf>
	free ( s ) ;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	0018      	movs	r0, r3
 800a420:	f000 f9e0 	bl	800a7e4 <free>
	*mm = (uint8_t) temp ;
 800a424:	193b      	adds	r3, r7, r4
 800a426:	881b      	ldrh	r3, [r3, #0]
 800a428:	b2da      	uxtb	r2, r3
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	701a      	strb	r2, [r3, #0]

}
 800a42e:	46c0      	nop			; (mov r8, r8)
 800a430:	46bd      	mov	sp, r7
 800a432:	b007      	add	sp, #28
 800a434:	bd90      	pop	{r4, r7, pc}
 800a436:	46c0      	nop			; (mov r8, r8)
 800a438:	080143a8 	.word	0x080143a8

0800a43c <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800a43c:	b590      	push	{r4, r7, lr}
 800a43e:	b087      	sub	sp, #28
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2209      	movs	r2, #9
 800a44a:	212c      	movs	r1, #44	; 0x2c
 800a44c:	0018      	movs	r0, r3
 800a44e:	f7ff fb31 	bl	8009ab4 <my_find_char_position>
 800a452:	0003      	movs	r3, r0
 800a454:	001a      	movs	r2, r3
 800a456:	2417      	movs	r4, #23
 800a458:	193b      	adds	r3, r7, r4
 800a45a:	3201      	adds	r2, #1
 800a45c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a45e:	2003      	movs	r0, #3
 800a460:	f000 f9b6 	bl	800a7d0 <malloc>
 800a464:	0003      	movs	r3, r0
 800a466:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a468:	193b      	adds	r3, r7, r4
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	18d1      	adds	r1, r2, r3
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	2202      	movs	r2, #2
 800a474:	0018      	movs	r0, r3
 800a476:	f001 fcf8 	bl	800be6a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	3302      	adds	r3, #2
 800a47e:	2200      	movs	r2, #0
 800a480:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a482:	240e      	movs	r4, #14
 800a484:	193a      	adds	r2, r7, r4
 800a486:	4909      	ldr	r1, [pc, #36]	; (800a4ac <my_nmea_get_rmc_date_dd+0x70>)
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	0018      	movs	r0, r3
 800a48c:	f001 fc50 	bl	800bd30 <sscanf>
	free ( s ) ;
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	0018      	movs	r0, r3
 800a494:	f000 f9a6 	bl	800a7e4 <free>
	*dd = (uint8_t) temp ;
 800a498:	193b      	adds	r3, r7, r4
 800a49a:	881b      	ldrh	r3, [r3, #0]
 800a49c:	b2da      	uxtb	r2, r3
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	701a      	strb	r2, [r3, #0]

}
 800a4a2:	46c0      	nop			; (mov r8, r8)
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	b007      	add	sp, #28
 800a4a8:	bd90      	pop	{r4, r7, pc}
 800a4aa:	46c0      	nop			; (mov r8, r8)
 800a4ac:	080143a8 	.word	0x080143a8

0800a4b0 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800a4b0:	b590      	push	{r4, r7, lr}
 800a4b2:	b087      	sub	sp, #28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	212c      	movs	r1, #44	; 0x2c
 800a4c0:	0018      	movs	r0, r3
 800a4c2:	f7ff faf7 	bl	8009ab4 <my_find_char_position>
 800a4c6:	0003      	movs	r3, r0
 800a4c8:	001a      	movs	r2, r3
 800a4ca:	2417      	movs	r4, #23
 800a4cc:	193b      	adds	r3, r7, r4
 800a4ce:	3201      	adds	r2, #1
 800a4d0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a4d2:	2003      	movs	r0, #3
 800a4d4:	f000 f97c 	bl	800a7d0 <malloc>
 800a4d8:	0003      	movs	r3, r0
 800a4da:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a4dc:	193b      	adds	r3, r7, r4
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	18d1      	adds	r1, r2, r3
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	2202      	movs	r2, #2
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	f001 fcbe 	bl	800be6a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	3302      	adds	r3, #2
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a4f6:	240e      	movs	r4, #14
 800a4f8:	193a      	adds	r2, r7, r4
 800a4fa:	4909      	ldr	r1, [pc, #36]	; (800a520 <my_nmea_get_rmc_utc_hh+0x70>)
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	0018      	movs	r0, r3
 800a500:	f001 fc16 	bl	800bd30 <sscanf>
	free ( s ) ;
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	0018      	movs	r0, r3
 800a508:	f000 f96c 	bl	800a7e4 <free>
	*hh = (uint8_t) temp ;
 800a50c:	193b      	adds	r3, r7, r4
 800a50e:	881b      	ldrh	r3, [r3, #0]
 800a510:	b2da      	uxtb	r2, r3
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	701a      	strb	r2, [r3, #0]

}
 800a516:	46c0      	nop			; (mov r8, r8)
 800a518:	46bd      	mov	sp, r7
 800a51a:	b007      	add	sp, #28
 800a51c:	bd90      	pop	{r4, r7, pc}
 800a51e:	46c0      	nop			; (mov r8, r8)
 800a520:	080143a8 	.word	0x080143a8

0800a524 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800a524:	b590      	push	{r4, r7, lr}
 800a526:	b087      	sub	sp, #28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	212c      	movs	r1, #44	; 0x2c
 800a534:	0018      	movs	r0, r3
 800a536:	f7ff fabd 	bl	8009ab4 <my_find_char_position>
 800a53a:	0003      	movs	r3, r0
 800a53c:	001a      	movs	r2, r3
 800a53e:	2417      	movs	r4, #23
 800a540:	193b      	adds	r3, r7, r4
 800a542:	3203      	adds	r2, #3
 800a544:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a546:	2003      	movs	r0, #3
 800a548:	f000 f942 	bl	800a7d0 <malloc>
 800a54c:	0003      	movs	r3, r0
 800a54e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a550:	193b      	adds	r3, r7, r4
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	18d1      	adds	r1, r2, r3
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	2202      	movs	r2, #2
 800a55c:	0018      	movs	r0, r3
 800a55e:	f001 fc84 	bl	800be6a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	3302      	adds	r3, #2
 800a566:	2200      	movs	r2, #0
 800a568:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a56a:	240e      	movs	r4, #14
 800a56c:	193a      	adds	r2, r7, r4
 800a56e:	4909      	ldr	r1, [pc, #36]	; (800a594 <my_nmea_get_rmc_utc_mm+0x70>)
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	0018      	movs	r0, r3
 800a574:	f001 fbdc 	bl	800bd30 <sscanf>
	free ( s ) ;
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	0018      	movs	r0, r3
 800a57c:	f000 f932 	bl	800a7e4 <free>
	*mm = (uint8_t) temp ;
 800a580:	193b      	adds	r3, r7, r4
 800a582:	881b      	ldrh	r3, [r3, #0]
 800a584:	b2da      	uxtb	r2, r3
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	701a      	strb	r2, [r3, #0]

}
 800a58a:	46c0      	nop			; (mov r8, r8)
 800a58c:	46bd      	mov	sp, r7
 800a58e:	b007      	add	sp, #28
 800a590:	bd90      	pop	{r4, r7, pc}
 800a592:	46c0      	nop			; (mov r8, r8)
 800a594:	080143a8 	.word	0x080143a8

0800a598 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800a598:	b590      	push	{r4, r7, lr}
 800a59a:	b087      	sub	sp, #28
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	212c      	movs	r1, #44	; 0x2c
 800a5a8:	0018      	movs	r0, r3
 800a5aa:	f7ff fa83 	bl	8009ab4 <my_find_char_position>
 800a5ae:	0003      	movs	r3, r0
 800a5b0:	001a      	movs	r2, r3
 800a5b2:	2417      	movs	r4, #23
 800a5b4:	193b      	adds	r3, r7, r4
 800a5b6:	3205      	adds	r2, #5
 800a5b8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a5ba:	2003      	movs	r0, #3
 800a5bc:	f000 f908 	bl	800a7d0 <malloc>
 800a5c0:	0003      	movs	r3, r0
 800a5c2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a5c4:	193b      	adds	r3, r7, r4
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	18d1      	adds	r1, r2, r3
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	0018      	movs	r0, r3
 800a5d2:	f001 fc4a 	bl	800be6a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	3302      	adds	r3, #2
 800a5da:	2200      	movs	r2, #0
 800a5dc:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a5de:	240e      	movs	r4, #14
 800a5e0:	193a      	adds	r2, r7, r4
 800a5e2:	4909      	ldr	r1, [pc, #36]	; (800a608 <my_nmea_get_rmc_utc_ss+0x70>)
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	0018      	movs	r0, r3
 800a5e8:	f001 fba2 	bl	800bd30 <sscanf>
	free ( s ) ;
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	0018      	movs	r0, r3
 800a5f0:	f000 f8f8 	bl	800a7e4 <free>
	*ss = (uint8_t) temp ;
 800a5f4:	193b      	adds	r3, r7, r4
 800a5f6:	881b      	ldrh	r3, [r3, #0]
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	701a      	strb	r2, [r3, #0]

}
 800a5fe:	46c0      	nop			; (mov r8, r8)
 800a600:	46bd      	mov	sp, r7
 800a602:	b007      	add	sp, #28
 800a604:	bd90      	pop	{r4, r7, pc}
 800a606:	46c0      	nop			; (mov r8, r8)
 800a608:	080143a8 	.word	0x080143a8

0800a60c <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800a60c:	b590      	push	{r4, r7, lr}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2201      	movs	r2, #1
 800a61a:	212c      	movs	r1, #44	; 0x2c
 800a61c:	0018      	movs	r0, r3
 800a61e:	f7ff fa49 	bl	8009ab4 <my_find_char_position>
 800a622:	0003      	movs	r3, r0
 800a624:	001a      	movs	r2, r3
 800a626:	240f      	movs	r4, #15
 800a628:	193b      	adds	r3, r7, r4
 800a62a:	3208      	adds	r2, #8
 800a62c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a62e:	2004      	movs	r0, #4
 800a630:	f000 f8ce 	bl	800a7d0 <malloc>
 800a634:	0003      	movs	r3, r0
 800a636:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a638:	193b      	adds	r3, r7, r4
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	18d1      	adds	r1, r2, r3
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	2203      	movs	r2, #3
 800a644:	0018      	movs	r0, r3
 800a646:	f001 fc10 	bl	800be6a <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	3303      	adds	r3, #3
 800a64e:	2200      	movs	r2, #0
 800a650:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	4906      	ldr	r1, [pc, #24]	; (800a670 <my_nmea_get_rmc_utc_sss+0x64>)
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	0018      	movs	r0, r3
 800a65a:	f001 fb69 	bl	800bd30 <sscanf>
	free ( s ) ;
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	0018      	movs	r0, r3
 800a662:	f000 f8bf 	bl	800a7e4 <free>
}
 800a666:	46c0      	nop			; (mov r8, r8)
 800a668:	46bd      	mov	sp, r7
 800a66a:	b005      	add	sp, #20
 800a66c:	bd90      	pop	{r4, r7, pc}
 800a66e:	46c0      	nop			; (mov r8, r8)
 800a670:	080143ac 	.word	0x080143ac

0800a674 <my_tracker_api_is_cmd>:
 */

#include <my_tracker_api.h>

bool my_tracker_api_is_cmd ( const char* c )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
	size_t l = strlen ( c ) ;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	0018      	movs	r0, r3
 800a680:	f7f5 fd40 	bl	8000104 <strlen>
 800a684:	0003      	movs	r3, r0
 800a686:	613b      	str	r3, [r7, #16]
	uint8_t i = 0 ; // Znaków nie może być więcej niż max. cmd payload czyli 80
 800a688:	2317      	movs	r3, #23
 800a68a:	18fb      	adds	r3, r7, r3
 800a68c:	2200      	movs	r2, #0
 800a68e:	701a      	strb	r2, [r3, #0]
	uint8_t liczba_przecinkow = 0 ;
 800a690:	2316      	movs	r3, #22
 800a692:	18fb      	adds	r3, r7, r3
 800a694:	2200      	movs	r2, #0
 800a696:	701a      	strb	r2, [r3, #0]

	if ( l < 3 || l > 8 )
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d902      	bls.n	800a6a4 <my_tracker_api_is_cmd+0x30>
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	2b08      	cmp	r3, #8
 800a6a2:	d901      	bls.n	800a6a8 <my_tracker_api_is_cmd+0x34>
		return false ;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	e04b      	b.n	800a740 <my_tracker_api_is_cmd+0xcc>

	for ( i = 0 ; i < l ; i++ )
 800a6a8:	2317      	movs	r3, #23
 800a6aa:	18fb      	adds	r3, r7, r3
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	701a      	strb	r2, [r3, #0]
 800a6b0:	e025      	b.n	800a6fe <my_tracker_api_is_cmd+0x8a>
	{
		if ( c[i] == ',' )
 800a6b2:	2317      	movs	r3, #23
 800a6b4:	18fb      	adds	r3, r7, r3
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	18d3      	adds	r3, r2, r3
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	2b2c      	cmp	r3, #44	; 0x2c
 800a6c0:	d106      	bne.n	800a6d0 <my_tracker_api_is_cmd+0x5c>
			liczba_przecinkow++ ;
 800a6c2:	2116      	movs	r1, #22
 800a6c4:	187b      	adds	r3, r7, r1
 800a6c6:	781a      	ldrb	r2, [r3, #0]
 800a6c8:	187b      	adds	r3, r7, r1
 800a6ca:	3201      	adds	r2, #1
 800a6cc:	701a      	strb	r2, [r3, #0]
 800a6ce:	e010      	b.n	800a6f2 <my_tracker_api_is_cmd+0x7e>
		else if ( c[i] < '0' || c[i] > '9' )
 800a6d0:	2117      	movs	r1, #23
 800a6d2:	187b      	adds	r3, r7, r1
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	18d3      	adds	r3, r2, r3
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	2b2f      	cmp	r3, #47	; 0x2f
 800a6de:	d906      	bls.n	800a6ee <my_tracker_api_is_cmd+0x7a>
 800a6e0:	187b      	adds	r3, r7, r1
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	18d3      	adds	r3, r2, r3
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	2b39      	cmp	r3, #57	; 0x39
 800a6ec:	d901      	bls.n	800a6f2 <my_tracker_api_is_cmd+0x7e>
			return false;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	e026      	b.n	800a740 <my_tracker_api_is_cmd+0xcc>
	for ( i = 0 ; i < l ; i++ )
 800a6f2:	2117      	movs	r1, #23
 800a6f4:	187b      	adds	r3, r7, r1
 800a6f6:	781a      	ldrb	r2, [r3, #0]
 800a6f8:	187b      	adds	r3, r7, r1
 800a6fa:	3201      	adds	r2, #1
 800a6fc:	701a      	strb	r2, [r3, #0]
 800a6fe:	2317      	movs	r3, #23
 800a700:	18fb      	adds	r3, r7, r3
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	693a      	ldr	r2, [r7, #16]
 800a706:	429a      	cmp	r2, r3
 800a708:	d8d3      	bhi.n	800a6b2 <my_tracker_api_is_cmd+0x3e>
	}

	if ( /*c[0] == ',' || c[l-1] == ',' ||*/ liczba_przecinkow > 1 )
 800a70a:	2316      	movs	r3, #22
 800a70c:	18fb      	adds	r3, r7, r3
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	2b01      	cmp	r3, #1
 800a712:	d901      	bls.n	800a718 <my_tracker_api_is_cmd+0xa4>
		return false ;
 800a714:	2300      	movs	r3, #0
 800a716:	e013      	b.n	800a740 <my_tracker_api_is_cmd+0xcc>

	const char* comma_p = strchr ( c , ',' ) ;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	212c      	movs	r1, #44	; 0x2c
 800a71c:	0018      	movs	r0, r3
 800a71e:	f001 fb85 	bl	800be2c <strchr>
 800a722:	0003      	movs	r3, r0
 800a724:	60fb      	str	r3, [r7, #12]
	size_t cmd_code_length = comma_p - c ;
 800a726:	68fa      	ldr	r2, [r7, #12]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	1ad3      	subs	r3, r2, r3
 800a72c:	60bb      	str	r3, [r7, #8]
	if ( cmd_code_length > 2 || cmd_code_length < 1 )
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	2b02      	cmp	r3, #2
 800a732:	d802      	bhi.n	800a73a <my_tracker_api_is_cmd+0xc6>
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <my_tracker_api_is_cmd+0xca>
		return false ;
 800a73a:	2300      	movs	r3, #0
 800a73c:	e000      	b.n	800a740 <my_tracker_api_is_cmd+0xcc>

	return true ;
 800a73e:	2301      	movs	r3, #1
}
 800a740:	0018      	movs	r0, r3
 800a742:	46bd      	mov	sp, r7
 800a744:	b006      	add	sp, #24
 800a746:	bd80      	pop	{r7, pc}

0800a748 <my_tracker_api_parse_cmd>:

	return cmd_value ;
}

bool my_tracker_api_parse_cmd ( cmd_astro* cmd , char* s )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
	cmd->code = 0 ;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	701a      	strb	r2, [r3, #0]
	cmd->value = 0 ;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	605a      	str	r2, [r3, #4]

	char* tok = strtok ( s , "," ) ;
 800a75e:	4a1b      	ldr	r2, [pc, #108]	; (800a7cc <my_tracker_api_parse_cmd+0x84>)
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	0011      	movs	r1, r2
 800a764:	0018      	movs	r0, r3
 800a766:	f001 fb95 	bl	800be94 <strtok>
 800a76a:	0003      	movs	r3, r0
 800a76c:	60fb      	str	r3, [r7, #12]
	cmd->code = (uint8_t) my_conv_string_2_uint32_t ( tok ) ;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	0018      	movs	r0, r3
 800a772:	f7ff fb41 	bl	8009df8 <my_conv_string_2_uint32_t>
 800a776:	0003      	movs	r3, r0
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	701a      	strb	r2, [r3, #0]
	tok = strtok ( NULL , "," ) ;
 800a77e:	4b13      	ldr	r3, [pc, #76]	; (800a7cc <my_tracker_api_parse_cmd+0x84>)
 800a780:	0019      	movs	r1, r3
 800a782:	2000      	movs	r0, #0
 800a784:	f001 fb86 	bl	800be94 <strtok>
 800a788:	0003      	movs	r3, r0
 800a78a:	60fb      	str	r3, [r7, #12]
	cmd->value = my_conv_string_2_uint32_t ( tok ) ;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	0018      	movs	r0, r3
 800a790:	f7ff fb32 	bl	8009df8 <my_conv_string_2_uint32_t>
 800a794:	0002      	movs	r2, r0
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	605a      	str	r2, [r3, #4]
	tok = strtok ( NULL , "," ) ;
 800a79a:	4b0c      	ldr	r3, [pc, #48]	; (800a7cc <my_tracker_api_parse_cmd+0x84>)
 800a79c:	0019      	movs	r1, r3
 800a79e:	2000      	movs	r0, #0
 800a7a0:	f001 fb78 	bl	800be94 <strtok>
 800a7a4:	0003      	movs	r3, r0
 800a7a6:	60fb      	str	r3, [r7, #12]
	/*while ( tok != NULL )
	{
		tok = strtok ( NULL , "," ) ;
	}*/

	if ( cmd->code == 0 || cmd->value == 0 || tok != NULL )
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d006      	beq.n	800a7be <my_tracker_api_parse_cmd+0x76>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d002      	beq.n	800a7be <my_tracker_api_parse_cmd+0x76>
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <my_tracker_api_parse_cmd+0x7a>
		return false ;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	e000      	b.n	800a7c4 <my_tracker_api_parse_cmd+0x7c>
	else
		return true ;
 800a7c2:	2301      	movs	r3, #1
}
 800a7c4:	0018      	movs	r0, r3
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	b004      	add	sp, #16
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	080143b0 	.word	0x080143b0

0800a7d0 <malloc>:
 800a7d0:	b510      	push	{r4, lr}
 800a7d2:	4b03      	ldr	r3, [pc, #12]	; (800a7e0 <malloc+0x10>)
 800a7d4:	0001      	movs	r1, r0
 800a7d6:	6818      	ldr	r0, [r3, #0]
 800a7d8:	f000 f80e 	bl	800a7f8 <_malloc_r>
 800a7dc:	bd10      	pop	{r4, pc}
 800a7de:	46c0      	nop			; (mov r8, r8)
 800a7e0:	200006d0 	.word	0x200006d0

0800a7e4 <free>:
 800a7e4:	b510      	push	{r4, lr}
 800a7e6:	4b03      	ldr	r3, [pc, #12]	; (800a7f4 <free+0x10>)
 800a7e8:	0001      	movs	r1, r0
 800a7ea:	6818      	ldr	r0, [r3, #0]
 800a7ec:	f001 fcbe 	bl	800c16c <_free_r>
 800a7f0:	bd10      	pop	{r4, pc}
 800a7f2:	46c0      	nop			; (mov r8, r8)
 800a7f4:	200006d0 	.word	0x200006d0

0800a7f8 <_malloc_r>:
 800a7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7fa:	000d      	movs	r5, r1
 800a7fc:	b087      	sub	sp, #28
 800a7fe:	350b      	adds	r5, #11
 800a800:	9001      	str	r0, [sp, #4]
 800a802:	2d16      	cmp	r5, #22
 800a804:	d908      	bls.n	800a818 <_malloc_r+0x20>
 800a806:	2207      	movs	r2, #7
 800a808:	4395      	bics	r5, r2
 800a80a:	d506      	bpl.n	800a81a <_malloc_r+0x22>
 800a80c:	230c      	movs	r3, #12
 800a80e:	9a01      	ldr	r2, [sp, #4]
 800a810:	6013      	str	r3, [r2, #0]
 800a812:	2000      	movs	r0, #0
 800a814:	b007      	add	sp, #28
 800a816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a818:	2510      	movs	r5, #16
 800a81a:	42a9      	cmp	r1, r5
 800a81c:	d8f6      	bhi.n	800a80c <_malloc_r+0x14>
 800a81e:	9801      	ldr	r0, [sp, #4]
 800a820:	f000 f9fe 	bl	800ac20 <__malloc_lock>
 800a824:	23fc      	movs	r3, #252	; 0xfc
 800a826:	4ebe      	ldr	r6, [pc, #760]	; (800ab20 <_malloc_r+0x328>)
 800a828:	005b      	lsls	r3, r3, #1
 800a82a:	429d      	cmp	r5, r3
 800a82c:	d219      	bcs.n	800a862 <_malloc_r+0x6a>
 800a82e:	002a      	movs	r2, r5
 800a830:	3208      	adds	r2, #8
 800a832:	18b2      	adds	r2, r6, r2
 800a834:	0011      	movs	r1, r2
 800a836:	6854      	ldr	r4, [r2, #4]
 800a838:	3908      	subs	r1, #8
 800a83a:	08eb      	lsrs	r3, r5, #3
 800a83c:	428c      	cmp	r4, r1
 800a83e:	d103      	bne.n	800a848 <_malloc_r+0x50>
 800a840:	68d4      	ldr	r4, [r2, #12]
 800a842:	3302      	adds	r3, #2
 800a844:	42a2      	cmp	r2, r4
 800a846:	d022      	beq.n	800a88e <_malloc_r+0x96>
 800a848:	2203      	movs	r2, #3
 800a84a:	6863      	ldr	r3, [r4, #4]
 800a84c:	68a1      	ldr	r1, [r4, #8]
 800a84e:	4393      	bics	r3, r2
 800a850:	68e2      	ldr	r2, [r4, #12]
 800a852:	18e3      	adds	r3, r4, r3
 800a854:	60ca      	str	r2, [r1, #12]
 800a856:	6091      	str	r1, [r2, #8]
 800a858:	2201      	movs	r2, #1
 800a85a:	6859      	ldr	r1, [r3, #4]
 800a85c:	430a      	orrs	r2, r1
 800a85e:	605a      	str	r2, [r3, #4]
 800a860:	e02a      	b.n	800a8b8 <_malloc_r+0xc0>
 800a862:	233f      	movs	r3, #63	; 0x3f
 800a864:	0a6a      	lsrs	r2, r5, #9
 800a866:	d003      	beq.n	800a870 <_malloc_r+0x78>
 800a868:	2a04      	cmp	r2, #4
 800a86a:	d82b      	bhi.n	800a8c4 <_malloc_r+0xcc>
 800a86c:	09ab      	lsrs	r3, r5, #6
 800a86e:	3338      	adds	r3, #56	; 0x38
 800a870:	2203      	movs	r2, #3
 800a872:	4694      	mov	ip, r2
 800a874:	00d9      	lsls	r1, r3, #3
 800a876:	1989      	adds	r1, r1, r6
 800a878:	68cc      	ldr	r4, [r1, #12]
 800a87a:	428c      	cmp	r4, r1
 800a87c:	d006      	beq.n	800a88c <_malloc_r+0x94>
 800a87e:	4660      	mov	r0, ip
 800a880:	6862      	ldr	r2, [r4, #4]
 800a882:	4382      	bics	r2, r0
 800a884:	1b57      	subs	r7, r2, r5
 800a886:	2f0f      	cmp	r7, #15
 800a888:	dd34      	ble.n	800a8f4 <_malloc_r+0xfc>
 800a88a:	3b01      	subs	r3, #1
 800a88c:	3301      	adds	r3, #1
 800a88e:	6934      	ldr	r4, [r6, #16]
 800a890:	49a4      	ldr	r1, [pc, #656]	; (800ab24 <_malloc_r+0x32c>)
 800a892:	428c      	cmp	r4, r1
 800a894:	d055      	beq.n	800a942 <_malloc_r+0x14a>
 800a896:	2003      	movs	r0, #3
 800a898:	6862      	ldr	r2, [r4, #4]
 800a89a:	4382      	bics	r2, r0
 800a89c:	1b50      	subs	r0, r2, r5
 800a89e:	280f      	cmp	r0, #15
 800a8a0:	dd36      	ble.n	800a910 <_malloc_r+0x118>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	1967      	adds	r7, r4, r5
 800a8a6:	431d      	orrs	r5, r3
 800a8a8:	4303      	orrs	r3, r0
 800a8aa:	6065      	str	r5, [r4, #4]
 800a8ac:	6177      	str	r7, [r6, #20]
 800a8ae:	6137      	str	r7, [r6, #16]
 800a8b0:	60f9      	str	r1, [r7, #12]
 800a8b2:	60b9      	str	r1, [r7, #8]
 800a8b4:	607b      	str	r3, [r7, #4]
 800a8b6:	50a0      	str	r0, [r4, r2]
 800a8b8:	9801      	ldr	r0, [sp, #4]
 800a8ba:	f000 f9b9 	bl	800ac30 <__malloc_unlock>
 800a8be:	0020      	movs	r0, r4
 800a8c0:	3008      	adds	r0, #8
 800a8c2:	e7a7      	b.n	800a814 <_malloc_r+0x1c>
 800a8c4:	2a14      	cmp	r2, #20
 800a8c6:	d802      	bhi.n	800a8ce <_malloc_r+0xd6>
 800a8c8:	0013      	movs	r3, r2
 800a8ca:	335b      	adds	r3, #91	; 0x5b
 800a8cc:	e7d0      	b.n	800a870 <_malloc_r+0x78>
 800a8ce:	2a54      	cmp	r2, #84	; 0x54
 800a8d0:	d802      	bhi.n	800a8d8 <_malloc_r+0xe0>
 800a8d2:	0b2b      	lsrs	r3, r5, #12
 800a8d4:	336e      	adds	r3, #110	; 0x6e
 800a8d6:	e7cb      	b.n	800a870 <_malloc_r+0x78>
 800a8d8:	23aa      	movs	r3, #170	; 0xaa
 800a8da:	005b      	lsls	r3, r3, #1
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d802      	bhi.n	800a8e6 <_malloc_r+0xee>
 800a8e0:	0beb      	lsrs	r3, r5, #15
 800a8e2:	3377      	adds	r3, #119	; 0x77
 800a8e4:	e7c4      	b.n	800a870 <_malloc_r+0x78>
 800a8e6:	4990      	ldr	r1, [pc, #576]	; (800ab28 <_malloc_r+0x330>)
 800a8e8:	237e      	movs	r3, #126	; 0x7e
 800a8ea:	428a      	cmp	r2, r1
 800a8ec:	d8c0      	bhi.n	800a870 <_malloc_r+0x78>
 800a8ee:	0cab      	lsrs	r3, r5, #18
 800a8f0:	337c      	adds	r3, #124	; 0x7c
 800a8f2:	e7bd      	b.n	800a870 <_malloc_r+0x78>
 800a8f4:	68e0      	ldr	r0, [r4, #12]
 800a8f6:	2f00      	cmp	r7, #0
 800a8f8:	db08      	blt.n	800a90c <_malloc_r+0x114>
 800a8fa:	68a3      	ldr	r3, [r4, #8]
 800a8fc:	60d8      	str	r0, [r3, #12]
 800a8fe:	6083      	str	r3, [r0, #8]
 800a900:	2301      	movs	r3, #1
 800a902:	18a2      	adds	r2, r4, r2
 800a904:	6851      	ldr	r1, [r2, #4]
 800a906:	430b      	orrs	r3, r1
 800a908:	6053      	str	r3, [r2, #4]
 800a90a:	e7d5      	b.n	800a8b8 <_malloc_r+0xc0>
 800a90c:	0004      	movs	r4, r0
 800a90e:	e7b4      	b.n	800a87a <_malloc_r+0x82>
 800a910:	6171      	str	r1, [r6, #20]
 800a912:	6131      	str	r1, [r6, #16]
 800a914:	2800      	cmp	r0, #0
 800a916:	daf3      	bge.n	800a900 <_malloc_r+0x108>
 800a918:	6871      	ldr	r1, [r6, #4]
 800a91a:	468c      	mov	ip, r1
 800a91c:	2180      	movs	r1, #128	; 0x80
 800a91e:	0089      	lsls	r1, r1, #2
 800a920:	428a      	cmp	r2, r1
 800a922:	d300      	bcc.n	800a926 <_malloc_r+0x12e>
 800a924:	e08c      	b.n	800aa40 <_malloc_r+0x248>
 800a926:	08d1      	lsrs	r1, r2, #3
 800a928:	0950      	lsrs	r0, r2, #5
 800a92a:	2201      	movs	r2, #1
 800a92c:	4082      	lsls	r2, r0
 800a92e:	4660      	mov	r0, ip
 800a930:	4302      	orrs	r2, r0
 800a932:	6072      	str	r2, [r6, #4]
 800a934:	00ca      	lsls	r2, r1, #3
 800a936:	1992      	adds	r2, r2, r6
 800a938:	6891      	ldr	r1, [r2, #8]
 800a93a:	60e2      	str	r2, [r4, #12]
 800a93c:	60a1      	str	r1, [r4, #8]
 800a93e:	6094      	str	r4, [r2, #8]
 800a940:	60cc      	str	r4, [r1, #12]
 800a942:	2201      	movs	r2, #1
 800a944:	4876      	ldr	r0, [pc, #472]	; (800ab20 <_malloc_r+0x328>)
 800a946:	1099      	asrs	r1, r3, #2
 800a948:	408a      	lsls	r2, r1
 800a94a:	6841      	ldr	r1, [r0, #4]
 800a94c:	4291      	cmp	r1, r2
 800a94e:	d328      	bcc.n	800a9a2 <_malloc_r+0x1aa>
 800a950:	420a      	tst	r2, r1
 800a952:	d105      	bne.n	800a960 <_malloc_r+0x168>
 800a954:	2403      	movs	r4, #3
 800a956:	43a3      	bics	r3, r4
 800a958:	0052      	lsls	r2, r2, #1
 800a95a:	3304      	adds	r3, #4
 800a95c:	420a      	tst	r2, r1
 800a95e:	d0fb      	beq.n	800a958 <_malloc_r+0x160>
 800a960:	496f      	ldr	r1, [pc, #444]	; (800ab20 <_malloc_r+0x328>)
 800a962:	9104      	str	r1, [sp, #16]
 800a964:	00d9      	lsls	r1, r3, #3
 800a966:	1841      	adds	r1, r0, r1
 800a968:	468c      	mov	ip, r1
 800a96a:	000f      	movs	r7, r1
 800a96c:	9302      	str	r3, [sp, #8]
 800a96e:	68fc      	ldr	r4, [r7, #12]
 800a970:	42bc      	cmp	r4, r7
 800a972:	d000      	beq.n	800a976 <_malloc_r+0x17e>
 800a974:	e09b      	b.n	800aaae <_malloc_r+0x2b6>
 800a976:	2403      	movs	r4, #3
 800a978:	9902      	ldr	r1, [sp, #8]
 800a97a:	3708      	adds	r7, #8
 800a97c:	3101      	adds	r1, #1
 800a97e:	9102      	str	r1, [sp, #8]
 800a980:	4221      	tst	r1, r4
 800a982:	d1f4      	bne.n	800a96e <_malloc_r+0x176>
 800a984:	2103      	movs	r1, #3
 800a986:	420b      	tst	r3, r1
 800a988:	d000      	beq.n	800a98c <_malloc_r+0x194>
 800a98a:	e0b7      	b.n	800aafc <_malloc_r+0x304>
 800a98c:	6843      	ldr	r3, [r0, #4]
 800a98e:	4393      	bics	r3, r2
 800a990:	6043      	str	r3, [r0, #4]
 800a992:	9b04      	ldr	r3, [sp, #16]
 800a994:	0052      	lsls	r2, r2, #1
 800a996:	6859      	ldr	r1, [r3, #4]
 800a998:	4291      	cmp	r1, r2
 800a99a:	d302      	bcc.n	800a9a2 <_malloc_r+0x1aa>
 800a99c:	2a00      	cmp	r2, #0
 800a99e:	d000      	beq.n	800a9a2 <_malloc_r+0x1aa>
 800a9a0:	e0bb      	b.n	800ab1a <_malloc_r+0x322>
 800a9a2:	2203      	movs	r2, #3
 800a9a4:	6883      	ldr	r3, [r0, #8]
 800a9a6:	9302      	str	r3, [sp, #8]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	4393      	bics	r3, r2
 800a9ac:	9303      	str	r3, [sp, #12]
 800a9ae:	42ab      	cmp	r3, r5
 800a9b0:	d303      	bcc.n	800a9ba <_malloc_r+0x1c2>
 800a9b2:	1b59      	subs	r1, r3, r5
 800a9b4:	290f      	cmp	r1, #15
 800a9b6:	dd00      	ble.n	800a9ba <_malloc_r+0x1c2>
 800a9b8:	e123      	b.n	800ac02 <_malloc_r+0x40a>
 800a9ba:	9b02      	ldr	r3, [sp, #8]
 800a9bc:	9a03      	ldr	r2, [sp, #12]
 800a9be:	2008      	movs	r0, #8
 800a9c0:	189e      	adds	r6, r3, r2
 800a9c2:	4b5a      	ldr	r3, [pc, #360]	; (800ab2c <_malloc_r+0x334>)
 800a9c4:	681f      	ldr	r7, [r3, #0]
 800a9c6:	f001 fb4b 	bl	800c060 <sysconf>
 800a9ca:	4b59      	ldr	r3, [pc, #356]	; (800ab30 <_malloc_r+0x338>)
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	197f      	adds	r7, r7, r5
 800a9d2:	9004      	str	r0, [sp, #16]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	d003      	beq.n	800a9e0 <_malloc_r+0x1e8>
 800a9d8:	1e7b      	subs	r3, r7, #1
 800a9da:	181b      	adds	r3, r3, r0
 800a9dc:	4247      	negs	r7, r0
 800a9de:	401f      	ands	r7, r3
 800a9e0:	0039      	movs	r1, r7
 800a9e2:	9801      	ldr	r0, [sp, #4]
 800a9e4:	f001 fae8 	bl	800bfb8 <_sbrk_r>
 800a9e8:	0004      	movs	r4, r0
 800a9ea:	1c43      	adds	r3, r0, #1
 800a9ec:	d100      	bne.n	800a9f0 <_malloc_r+0x1f8>
 800a9ee:	e0de      	b.n	800abae <_malloc_r+0x3b6>
 800a9f0:	4286      	cmp	r6, r0
 800a9f2:	d904      	bls.n	800a9fe <_malloc_r+0x206>
 800a9f4:	4b4a      	ldr	r3, [pc, #296]	; (800ab20 <_malloc_r+0x328>)
 800a9f6:	9a02      	ldr	r2, [sp, #8]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d000      	beq.n	800a9fe <_malloc_r+0x206>
 800a9fc:	e0d7      	b.n	800abae <_malloc_r+0x3b6>
 800a9fe:	4a4d      	ldr	r2, [pc, #308]	; (800ab34 <_malloc_r+0x33c>)
 800aa00:	6813      	ldr	r3, [r2, #0]
 800aa02:	18fb      	adds	r3, r7, r3
 800aa04:	6013      	str	r3, [r2, #0]
 800aa06:	9a04      	ldr	r2, [sp, #16]
 800aa08:	3a01      	subs	r2, #1
 800aa0a:	42a6      	cmp	r6, r4
 800aa0c:	d000      	beq.n	800aa10 <_malloc_r+0x218>
 800aa0e:	e097      	b.n	800ab40 <_malloc_r+0x348>
 800aa10:	4216      	tst	r6, r2
 800aa12:	d000      	beq.n	800aa16 <_malloc_r+0x21e>
 800aa14:	e094      	b.n	800ab40 <_malloc_r+0x348>
 800aa16:	4b42      	ldr	r3, [pc, #264]	; (800ab20 <_malloc_r+0x328>)
 800aa18:	689a      	ldr	r2, [r3, #8]
 800aa1a:	9b03      	ldr	r3, [sp, #12]
 800aa1c:	19df      	adds	r7, r3, r7
 800aa1e:	2301      	movs	r3, #1
 800aa20:	433b      	orrs	r3, r7
 800aa22:	6053      	str	r3, [r2, #4]
 800aa24:	4b43      	ldr	r3, [pc, #268]	; (800ab34 <_malloc_r+0x33c>)
 800aa26:	4a44      	ldr	r2, [pc, #272]	; (800ab38 <_malloc_r+0x340>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	6811      	ldr	r1, [r2, #0]
 800aa2c:	428b      	cmp	r3, r1
 800aa2e:	d900      	bls.n	800aa32 <_malloc_r+0x23a>
 800aa30:	6013      	str	r3, [r2, #0]
 800aa32:	4a42      	ldr	r2, [pc, #264]	; (800ab3c <_malloc_r+0x344>)
 800aa34:	6811      	ldr	r1, [r2, #0]
 800aa36:	428b      	cmp	r3, r1
 800aa38:	d800      	bhi.n	800aa3c <_malloc_r+0x244>
 800aa3a:	e0b8      	b.n	800abae <_malloc_r+0x3b6>
 800aa3c:	6013      	str	r3, [r2, #0]
 800aa3e:	e0b6      	b.n	800abae <_malloc_r+0x3b6>
 800aa40:	0a50      	lsrs	r0, r2, #9
 800aa42:	2804      	cmp	r0, #4
 800aa44:	d811      	bhi.n	800aa6a <_malloc_r+0x272>
 800aa46:	0991      	lsrs	r1, r2, #6
 800aa48:	3138      	adds	r1, #56	; 0x38
 800aa4a:	00cf      	lsls	r7, r1, #3
 800aa4c:	19bf      	adds	r7, r7, r6
 800aa4e:	68b8      	ldr	r0, [r7, #8]
 800aa50:	4287      	cmp	r7, r0
 800aa52:	d125      	bne.n	800aaa0 <_malloc_r+0x2a8>
 800aa54:	2201      	movs	r2, #1
 800aa56:	1089      	asrs	r1, r1, #2
 800aa58:	408a      	lsls	r2, r1
 800aa5a:	4661      	mov	r1, ip
 800aa5c:	430a      	orrs	r2, r1
 800aa5e:	6072      	str	r2, [r6, #4]
 800aa60:	60e7      	str	r7, [r4, #12]
 800aa62:	60a0      	str	r0, [r4, #8]
 800aa64:	60bc      	str	r4, [r7, #8]
 800aa66:	60c4      	str	r4, [r0, #12]
 800aa68:	e76b      	b.n	800a942 <_malloc_r+0x14a>
 800aa6a:	2814      	cmp	r0, #20
 800aa6c:	d802      	bhi.n	800aa74 <_malloc_r+0x27c>
 800aa6e:	0001      	movs	r1, r0
 800aa70:	315b      	adds	r1, #91	; 0x5b
 800aa72:	e7ea      	b.n	800aa4a <_malloc_r+0x252>
 800aa74:	2854      	cmp	r0, #84	; 0x54
 800aa76:	d802      	bhi.n	800aa7e <_malloc_r+0x286>
 800aa78:	0b11      	lsrs	r1, r2, #12
 800aa7a:	316e      	adds	r1, #110	; 0x6e
 800aa7c:	e7e5      	b.n	800aa4a <_malloc_r+0x252>
 800aa7e:	21aa      	movs	r1, #170	; 0xaa
 800aa80:	0049      	lsls	r1, r1, #1
 800aa82:	4288      	cmp	r0, r1
 800aa84:	d802      	bhi.n	800aa8c <_malloc_r+0x294>
 800aa86:	0bd1      	lsrs	r1, r2, #15
 800aa88:	3177      	adds	r1, #119	; 0x77
 800aa8a:	e7de      	b.n	800aa4a <_malloc_r+0x252>
 800aa8c:	4f26      	ldr	r7, [pc, #152]	; (800ab28 <_malloc_r+0x330>)
 800aa8e:	217e      	movs	r1, #126	; 0x7e
 800aa90:	42b8      	cmp	r0, r7
 800aa92:	d8da      	bhi.n	800aa4a <_malloc_r+0x252>
 800aa94:	0c91      	lsrs	r1, r2, #18
 800aa96:	317c      	adds	r1, #124	; 0x7c
 800aa98:	e7d7      	b.n	800aa4a <_malloc_r+0x252>
 800aa9a:	6880      	ldr	r0, [r0, #8]
 800aa9c:	4287      	cmp	r7, r0
 800aa9e:	d004      	beq.n	800aaaa <_malloc_r+0x2b2>
 800aaa0:	2603      	movs	r6, #3
 800aaa2:	6841      	ldr	r1, [r0, #4]
 800aaa4:	43b1      	bics	r1, r6
 800aaa6:	4291      	cmp	r1, r2
 800aaa8:	d8f7      	bhi.n	800aa9a <_malloc_r+0x2a2>
 800aaaa:	68c7      	ldr	r7, [r0, #12]
 800aaac:	e7d8      	b.n	800aa60 <_malloc_r+0x268>
 800aaae:	2603      	movs	r6, #3
 800aab0:	6861      	ldr	r1, [r4, #4]
 800aab2:	43b1      	bics	r1, r6
 800aab4:	9103      	str	r1, [sp, #12]
 800aab6:	68e6      	ldr	r6, [r4, #12]
 800aab8:	1b49      	subs	r1, r1, r5
 800aaba:	290f      	cmp	r1, #15
 800aabc:	dd10      	ble.n	800aae0 <_malloc_r+0x2e8>
 800aabe:	2201      	movs	r2, #1
 800aac0:	1963      	adds	r3, r4, r5
 800aac2:	4315      	orrs	r5, r2
 800aac4:	6065      	str	r5, [r4, #4]
 800aac6:	68a5      	ldr	r5, [r4, #8]
 800aac8:	430a      	orrs	r2, r1
 800aaca:	60ee      	str	r6, [r5, #12]
 800aacc:	60b5      	str	r5, [r6, #8]
 800aace:	6143      	str	r3, [r0, #20]
 800aad0:	6103      	str	r3, [r0, #16]
 800aad2:	4814      	ldr	r0, [pc, #80]	; (800ab24 <_malloc_r+0x32c>)
 800aad4:	605a      	str	r2, [r3, #4]
 800aad6:	60d8      	str	r0, [r3, #12]
 800aad8:	6098      	str	r0, [r3, #8]
 800aada:	9b03      	ldr	r3, [sp, #12]
 800aadc:	50e1      	str	r1, [r4, r3]
 800aade:	e6eb      	b.n	800a8b8 <_malloc_r+0xc0>
 800aae0:	2900      	cmp	r1, #0
 800aae2:	db09      	blt.n	800aaf8 <_malloc_r+0x300>
 800aae4:	9b03      	ldr	r3, [sp, #12]
 800aae6:	18e1      	adds	r1, r4, r3
 800aae8:	2301      	movs	r3, #1
 800aaea:	684a      	ldr	r2, [r1, #4]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	604b      	str	r3, [r1, #4]
 800aaf0:	68a3      	ldr	r3, [r4, #8]
 800aaf2:	60de      	str	r6, [r3, #12]
 800aaf4:	60b3      	str	r3, [r6, #8]
 800aaf6:	e6df      	b.n	800a8b8 <_malloc_r+0xc0>
 800aaf8:	0034      	movs	r4, r6
 800aafa:	e739      	b.n	800a970 <_malloc_r+0x178>
 800aafc:	2108      	movs	r1, #8
 800aafe:	4249      	negs	r1, r1
 800ab00:	448c      	add	ip, r1
 800ab02:	4661      	mov	r1, ip
 800ab04:	6889      	ldr	r1, [r1, #8]
 800ab06:	3b01      	subs	r3, #1
 800ab08:	4561      	cmp	r1, ip
 800ab0a:	d100      	bne.n	800ab0e <_malloc_r+0x316>
 800ab0c:	e73a      	b.n	800a984 <_malloc_r+0x18c>
 800ab0e:	e740      	b.n	800a992 <_malloc_r+0x19a>
 800ab10:	3304      	adds	r3, #4
 800ab12:	0052      	lsls	r2, r2, #1
 800ab14:	420a      	tst	r2, r1
 800ab16:	d0fb      	beq.n	800ab10 <_malloc_r+0x318>
 800ab18:	e724      	b.n	800a964 <_malloc_r+0x16c>
 800ab1a:	9b02      	ldr	r3, [sp, #8]
 800ab1c:	e7fa      	b.n	800ab14 <_malloc_r+0x31c>
 800ab1e:	46c0      	nop			; (mov r8, r8)
 800ab20:	20000028 	.word	0x20000028
 800ab24:	20000030 	.word	0x20000030
 800ab28:	00000554 	.word	0x00000554
 800ab2c:	20000c68 	.word	0x20000c68
 800ab30:	20000430 	.word	0x20000430
 800ab34:	20000c38 	.word	0x20000c38
 800ab38:	20000c60 	.word	0x20000c60
 800ab3c:	20000c64 	.word	0x20000c64
 800ab40:	4934      	ldr	r1, [pc, #208]	; (800ac14 <_malloc_r+0x41c>)
 800ab42:	6808      	ldr	r0, [r1, #0]
 800ab44:	3001      	adds	r0, #1
 800ab46:	d140      	bne.n	800abca <_malloc_r+0x3d2>
 800ab48:	600c      	str	r4, [r1, #0]
 800ab4a:	2107      	movs	r1, #7
 800ab4c:	0026      	movs	r6, r4
 800ab4e:	2300      	movs	r3, #0
 800ab50:	400e      	ands	r6, r1
 800ab52:	420c      	tst	r4, r1
 800ab54:	d002      	beq.n	800ab5c <_malloc_r+0x364>
 800ab56:	3308      	adds	r3, #8
 800ab58:	1b9b      	subs	r3, r3, r6
 800ab5a:	18e4      	adds	r4, r4, r3
 800ab5c:	19e1      	adds	r1, r4, r7
 800ab5e:	9105      	str	r1, [sp, #20]
 800ab60:	9f05      	ldr	r7, [sp, #20]
 800ab62:	9904      	ldr	r1, [sp, #16]
 800ab64:	4017      	ands	r7, r2
 800ab66:	18cb      	adds	r3, r1, r3
 800ab68:	1bdf      	subs	r7, r3, r7
 800ab6a:	4017      	ands	r7, r2
 800ab6c:	0039      	movs	r1, r7
 800ab6e:	9801      	ldr	r0, [sp, #4]
 800ab70:	f001 fa22 	bl	800bfb8 <_sbrk_r>
 800ab74:	1c43      	adds	r3, r0, #1
 800ab76:	d107      	bne.n	800ab88 <_malloc_r+0x390>
 800ab78:	1e37      	subs	r7, r6, #0
 800ab7a:	9805      	ldr	r0, [sp, #20]
 800ab7c:	d004      	beq.n	800ab88 <_malloc_r+0x390>
 800ab7e:	0030      	movs	r0, r6
 800ab80:	2700      	movs	r7, #0
 800ab82:	9b05      	ldr	r3, [sp, #20]
 800ab84:	3808      	subs	r0, #8
 800ab86:	1818      	adds	r0, r3, r0
 800ab88:	4a23      	ldr	r2, [pc, #140]	; (800ac18 <_malloc_r+0x420>)
 800ab8a:	1b00      	subs	r0, r0, r4
 800ab8c:	6813      	ldr	r3, [r2, #0]
 800ab8e:	19c0      	adds	r0, r0, r7
 800ab90:	19db      	adds	r3, r3, r7
 800ab92:	6013      	str	r3, [r2, #0]
 800ab94:	2201      	movs	r2, #1
 800ab96:	4b21      	ldr	r3, [pc, #132]	; (800ac1c <_malloc_r+0x424>)
 800ab98:	9902      	ldr	r1, [sp, #8]
 800ab9a:	4310      	orrs	r0, r2
 800ab9c:	609c      	str	r4, [r3, #8]
 800ab9e:	6060      	str	r0, [r4, #4]
 800aba0:	4299      	cmp	r1, r3
 800aba2:	d100      	bne.n	800aba6 <_malloc_r+0x3ae>
 800aba4:	e73e      	b.n	800aa24 <_malloc_r+0x22c>
 800aba6:	9b03      	ldr	r3, [sp, #12]
 800aba8:	2b0f      	cmp	r3, #15
 800abaa:	d813      	bhi.n	800abd4 <_malloc_r+0x3dc>
 800abac:	6062      	str	r2, [r4, #4]
 800abae:	2203      	movs	r2, #3
 800abb0:	4b1a      	ldr	r3, [pc, #104]	; (800ac1c <_malloc_r+0x424>)
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	4393      	bics	r3, r2
 800abb8:	1b59      	subs	r1, r3, r5
 800abba:	42ab      	cmp	r3, r5
 800abbc:	d301      	bcc.n	800abc2 <_malloc_r+0x3ca>
 800abbe:	290f      	cmp	r1, #15
 800abc0:	dc1f      	bgt.n	800ac02 <_malloc_r+0x40a>
 800abc2:	9801      	ldr	r0, [sp, #4]
 800abc4:	f000 f834 	bl	800ac30 <__malloc_unlock>
 800abc8:	e623      	b.n	800a812 <_malloc_r+0x1a>
 800abca:	4913      	ldr	r1, [pc, #76]	; (800ac18 <_malloc_r+0x420>)
 800abcc:	1ba6      	subs	r6, r4, r6
 800abce:	18f6      	adds	r6, r6, r3
 800abd0:	600e      	str	r6, [r1, #0]
 800abd2:	e7ba      	b.n	800ab4a <_malloc_r+0x352>
 800abd4:	2107      	movs	r1, #7
 800abd6:	9b03      	ldr	r3, [sp, #12]
 800abd8:	3b0c      	subs	r3, #12
 800abda:	438b      	bics	r3, r1
 800abdc:	9902      	ldr	r1, [sp, #8]
 800abde:	6849      	ldr	r1, [r1, #4]
 800abe0:	400a      	ands	r2, r1
 800abe2:	9902      	ldr	r1, [sp, #8]
 800abe4:	431a      	orrs	r2, r3
 800abe6:	604a      	str	r2, [r1, #4]
 800abe8:	18ca      	adds	r2, r1, r3
 800abea:	2105      	movs	r1, #5
 800abec:	6051      	str	r1, [r2, #4]
 800abee:	6091      	str	r1, [r2, #8]
 800abf0:	2b0f      	cmp	r3, #15
 800abf2:	d800      	bhi.n	800abf6 <_malloc_r+0x3fe>
 800abf4:	e716      	b.n	800aa24 <_malloc_r+0x22c>
 800abf6:	9902      	ldr	r1, [sp, #8]
 800abf8:	9801      	ldr	r0, [sp, #4]
 800abfa:	3108      	adds	r1, #8
 800abfc:	f001 fab6 	bl	800c16c <_free_r>
 800ac00:	e710      	b.n	800aa24 <_malloc_r+0x22c>
 800ac02:	2201      	movs	r2, #1
 800ac04:	0013      	movs	r3, r2
 800ac06:	4805      	ldr	r0, [pc, #20]	; (800ac1c <_malloc_r+0x424>)
 800ac08:	432b      	orrs	r3, r5
 800ac0a:	6884      	ldr	r4, [r0, #8]
 800ac0c:	6063      	str	r3, [r4, #4]
 800ac0e:	1963      	adds	r3, r4, r5
 800ac10:	6083      	str	r3, [r0, #8]
 800ac12:	e623      	b.n	800a85c <_malloc_r+0x64>
 800ac14:	20000430 	.word	0x20000430
 800ac18:	20000c38 	.word	0x20000c38
 800ac1c:	20000028 	.word	0x20000028

0800ac20 <__malloc_lock>:
 800ac20:	b510      	push	{r4, lr}
 800ac22:	4802      	ldr	r0, [pc, #8]	; (800ac2c <__malloc_lock+0xc>)
 800ac24:	f001 fa1a 	bl	800c05c <__retarget_lock_acquire_recursive>
 800ac28:	bd10      	pop	{r4, pc}
 800ac2a:	46c0      	nop			; (mov r8, r8)
 800ac2c:	20000dad 	.word	0x20000dad

0800ac30 <__malloc_unlock>:
 800ac30:	b510      	push	{r4, lr}
 800ac32:	4802      	ldr	r0, [pc, #8]	; (800ac3c <__malloc_unlock+0xc>)
 800ac34:	f001 fa13 	bl	800c05e <__retarget_lock_release_recursive>
 800ac38:	bd10      	pop	{r4, pc}
 800ac3a:	46c0      	nop			; (mov r8, r8)
 800ac3c:	20000dad 	.word	0x20000dad

0800ac40 <sulp>:
 800ac40:	b570      	push	{r4, r5, r6, lr}
 800ac42:	0016      	movs	r6, r2
 800ac44:	000d      	movs	r5, r1
 800ac46:	f002 f9e7 	bl	800d018 <__ulp>
 800ac4a:	2e00      	cmp	r6, #0
 800ac4c:	d00d      	beq.n	800ac6a <sulp+0x2a>
 800ac4e:	236b      	movs	r3, #107	; 0x6b
 800ac50:	006a      	lsls	r2, r5, #1
 800ac52:	0d52      	lsrs	r2, r2, #21
 800ac54:	1a9b      	subs	r3, r3, r2
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	dd07      	ble.n	800ac6a <sulp+0x2a>
 800ac5a:	2400      	movs	r4, #0
 800ac5c:	4a03      	ldr	r2, [pc, #12]	; (800ac6c <sulp+0x2c>)
 800ac5e:	051b      	lsls	r3, r3, #20
 800ac60:	189d      	adds	r5, r3, r2
 800ac62:	002b      	movs	r3, r5
 800ac64:	0022      	movs	r2, r4
 800ac66:	f7f6 fd01 	bl	800166c <__aeabi_dmul>
 800ac6a:	bd70      	pop	{r4, r5, r6, pc}
 800ac6c:	3ff00000 	.word	0x3ff00000

0800ac70 <_strtod_l>:
 800ac70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac72:	b0a1      	sub	sp, #132	; 0x84
 800ac74:	9219      	str	r2, [sp, #100]	; 0x64
 800ac76:	2200      	movs	r2, #0
 800ac78:	2600      	movs	r6, #0
 800ac7a:	2700      	movs	r7, #0
 800ac7c:	9004      	str	r0, [sp, #16]
 800ac7e:	9107      	str	r1, [sp, #28]
 800ac80:	921c      	str	r2, [sp, #112]	; 0x70
 800ac82:	911b      	str	r1, [sp, #108]	; 0x6c
 800ac84:	780a      	ldrb	r2, [r1, #0]
 800ac86:	2a2b      	cmp	r2, #43	; 0x2b
 800ac88:	d055      	beq.n	800ad36 <_strtod_l+0xc6>
 800ac8a:	d841      	bhi.n	800ad10 <_strtod_l+0xa0>
 800ac8c:	2a0d      	cmp	r2, #13
 800ac8e:	d83b      	bhi.n	800ad08 <_strtod_l+0x98>
 800ac90:	2a08      	cmp	r2, #8
 800ac92:	d83b      	bhi.n	800ad0c <_strtod_l+0x9c>
 800ac94:	2a00      	cmp	r2, #0
 800ac96:	d044      	beq.n	800ad22 <_strtod_l+0xb2>
 800ac98:	2200      	movs	r2, #0
 800ac9a:	920f      	str	r2, [sp, #60]	; 0x3c
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800aca0:	9109      	str	r1, [sp, #36]	; 0x24
 800aca2:	782a      	ldrb	r2, [r5, #0]
 800aca4:	2a30      	cmp	r2, #48	; 0x30
 800aca6:	d000      	beq.n	800acaa <_strtod_l+0x3a>
 800aca8:	e085      	b.n	800adb6 <_strtod_l+0x146>
 800acaa:	786a      	ldrb	r2, [r5, #1]
 800acac:	3120      	adds	r1, #32
 800acae:	438a      	bics	r2, r1
 800acb0:	2a58      	cmp	r2, #88	; 0x58
 800acb2:	d000      	beq.n	800acb6 <_strtod_l+0x46>
 800acb4:	e075      	b.n	800ada2 <_strtod_l+0x132>
 800acb6:	9302      	str	r3, [sp, #8]
 800acb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acba:	4a97      	ldr	r2, [pc, #604]	; (800af18 <_strtod_l+0x2a8>)
 800acbc:	9301      	str	r3, [sp, #4]
 800acbe:	ab1c      	add	r3, sp, #112	; 0x70
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	9804      	ldr	r0, [sp, #16]
 800acc4:	ab1d      	add	r3, sp, #116	; 0x74
 800acc6:	a91b      	add	r1, sp, #108	; 0x6c
 800acc8:	f001 fb6c 	bl	800c3a4 <__gethex>
 800accc:	230f      	movs	r3, #15
 800acce:	0002      	movs	r2, r0
 800acd0:	401a      	ands	r2, r3
 800acd2:	0004      	movs	r4, r0
 800acd4:	9205      	str	r2, [sp, #20]
 800acd6:	4218      	tst	r0, r3
 800acd8:	d005      	beq.n	800ace6 <_strtod_l+0x76>
 800acda:	2a06      	cmp	r2, #6
 800acdc:	d12d      	bne.n	800ad3a <_strtod_l+0xca>
 800acde:	1c6b      	adds	r3, r5, #1
 800ace0:	931b      	str	r3, [sp, #108]	; 0x6c
 800ace2:	2300      	movs	r3, #0
 800ace4:	930f      	str	r3, [sp, #60]	; 0x3c
 800ace6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d002      	beq.n	800acf2 <_strtod_l+0x82>
 800acec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800acf0:	6013      	str	r3, [r2, #0]
 800acf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d01b      	beq.n	800ad30 <_strtod_l+0xc0>
 800acf8:	2380      	movs	r3, #128	; 0x80
 800acfa:	0032      	movs	r2, r6
 800acfc:	061b      	lsls	r3, r3, #24
 800acfe:	18fb      	adds	r3, r7, r3
 800ad00:	0010      	movs	r0, r2
 800ad02:	0019      	movs	r1, r3
 800ad04:	b021      	add	sp, #132	; 0x84
 800ad06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad08:	2a20      	cmp	r2, #32
 800ad0a:	d1c5      	bne.n	800ac98 <_strtod_l+0x28>
 800ad0c:	3101      	adds	r1, #1
 800ad0e:	e7b8      	b.n	800ac82 <_strtod_l+0x12>
 800ad10:	2a2d      	cmp	r2, #45	; 0x2d
 800ad12:	d1c1      	bne.n	800ac98 <_strtod_l+0x28>
 800ad14:	3a2c      	subs	r2, #44	; 0x2c
 800ad16:	920f      	str	r2, [sp, #60]	; 0x3c
 800ad18:	1c4a      	adds	r2, r1, #1
 800ad1a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ad1c:	784a      	ldrb	r2, [r1, #1]
 800ad1e:	2a00      	cmp	r2, #0
 800ad20:	d1bc      	bne.n	800ac9c <_strtod_l+0x2c>
 800ad22:	9b07      	ldr	r3, [sp, #28]
 800ad24:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad26:	2300      	movs	r3, #0
 800ad28:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1dd      	bne.n	800acec <_strtod_l+0x7c>
 800ad30:	0032      	movs	r2, r6
 800ad32:	003b      	movs	r3, r7
 800ad34:	e7e4      	b.n	800ad00 <_strtod_l+0x90>
 800ad36:	2200      	movs	r2, #0
 800ad38:	e7ed      	b.n	800ad16 <_strtod_l+0xa6>
 800ad3a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ad3c:	2a00      	cmp	r2, #0
 800ad3e:	d007      	beq.n	800ad50 <_strtod_l+0xe0>
 800ad40:	2135      	movs	r1, #53	; 0x35
 800ad42:	a81e      	add	r0, sp, #120	; 0x78
 800ad44:	f002 fa59 	bl	800d1fa <__copybits>
 800ad48:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad4a:	9804      	ldr	r0, [sp, #16]
 800ad4c:	f001 fe56 	bl	800c9fc <_Bfree>
 800ad50:	9805      	ldr	r0, [sp, #20]
 800ad52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad54:	3801      	subs	r0, #1
 800ad56:	2804      	cmp	r0, #4
 800ad58:	d806      	bhi.n	800ad68 <_strtod_l+0xf8>
 800ad5a:	f7f5 f9db 	bl	8000114 <__gnu_thumb1_case_uqi>
 800ad5e:	0312      	.short	0x0312
 800ad60:	1e1c      	.short	0x1e1c
 800ad62:	12          	.byte	0x12
 800ad63:	00          	.byte	0x00
 800ad64:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ad66:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800ad68:	05e4      	lsls	r4, r4, #23
 800ad6a:	d502      	bpl.n	800ad72 <_strtod_l+0x102>
 800ad6c:	2380      	movs	r3, #128	; 0x80
 800ad6e:	061b      	lsls	r3, r3, #24
 800ad70:	431f      	orrs	r7, r3
 800ad72:	4b6a      	ldr	r3, [pc, #424]	; (800af1c <_strtod_l+0x2ac>)
 800ad74:	423b      	tst	r3, r7
 800ad76:	d1b6      	bne.n	800ace6 <_strtod_l+0x76>
 800ad78:	f001 f944 	bl	800c004 <__errno>
 800ad7c:	2322      	movs	r3, #34	; 0x22
 800ad7e:	6003      	str	r3, [r0, #0]
 800ad80:	e7b1      	b.n	800ace6 <_strtod_l+0x76>
 800ad82:	4967      	ldr	r1, [pc, #412]	; (800af20 <_strtod_l+0x2b0>)
 800ad84:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ad86:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ad88:	400a      	ands	r2, r1
 800ad8a:	4966      	ldr	r1, [pc, #408]	; (800af24 <_strtod_l+0x2b4>)
 800ad8c:	185b      	adds	r3, r3, r1
 800ad8e:	051b      	lsls	r3, r3, #20
 800ad90:	431a      	orrs	r2, r3
 800ad92:	0017      	movs	r7, r2
 800ad94:	e7e8      	b.n	800ad68 <_strtod_l+0xf8>
 800ad96:	4f61      	ldr	r7, [pc, #388]	; (800af1c <_strtod_l+0x2ac>)
 800ad98:	e7e6      	b.n	800ad68 <_strtod_l+0xf8>
 800ad9a:	2601      	movs	r6, #1
 800ad9c:	4f62      	ldr	r7, [pc, #392]	; (800af28 <_strtod_l+0x2b8>)
 800ad9e:	4276      	negs	r6, r6
 800ada0:	e7e2      	b.n	800ad68 <_strtod_l+0xf8>
 800ada2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ada4:	1c5a      	adds	r2, r3, #1
 800ada6:	921b      	str	r2, [sp, #108]	; 0x6c
 800ada8:	785b      	ldrb	r3, [r3, #1]
 800adaa:	2b30      	cmp	r3, #48	; 0x30
 800adac:	d0f9      	beq.n	800ada2 <_strtod_l+0x132>
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d099      	beq.n	800ace6 <_strtod_l+0x76>
 800adb2:	2301      	movs	r3, #1
 800adb4:	9309      	str	r3, [sp, #36]	; 0x24
 800adb6:	2500      	movs	r5, #0
 800adb8:	220a      	movs	r2, #10
 800adba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800adbc:	950d      	str	r5, [sp, #52]	; 0x34
 800adbe:	9310      	str	r3, [sp, #64]	; 0x40
 800adc0:	9508      	str	r5, [sp, #32]
 800adc2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800adc4:	7804      	ldrb	r4, [r0, #0]
 800adc6:	0023      	movs	r3, r4
 800adc8:	3b30      	subs	r3, #48	; 0x30
 800adca:	b2d9      	uxtb	r1, r3
 800adcc:	2909      	cmp	r1, #9
 800adce:	d927      	bls.n	800ae20 <_strtod_l+0x1b0>
 800add0:	2201      	movs	r2, #1
 800add2:	4956      	ldr	r1, [pc, #344]	; (800af2c <_strtod_l+0x2bc>)
 800add4:	f001 f838 	bl	800be48 <strncmp>
 800add8:	2800      	cmp	r0, #0
 800adda:	d031      	beq.n	800ae40 <_strtod_l+0x1d0>
 800addc:	2000      	movs	r0, #0
 800adde:	0023      	movs	r3, r4
 800ade0:	4684      	mov	ip, r0
 800ade2:	9a08      	ldr	r2, [sp, #32]
 800ade4:	900c      	str	r0, [sp, #48]	; 0x30
 800ade6:	9205      	str	r2, [sp, #20]
 800ade8:	2220      	movs	r2, #32
 800adea:	0019      	movs	r1, r3
 800adec:	4391      	bics	r1, r2
 800adee:	000a      	movs	r2, r1
 800adf0:	2100      	movs	r1, #0
 800adf2:	9106      	str	r1, [sp, #24]
 800adf4:	2a45      	cmp	r2, #69	; 0x45
 800adf6:	d000      	beq.n	800adfa <_strtod_l+0x18a>
 800adf8:	e0c2      	b.n	800af80 <_strtod_l+0x310>
 800adfa:	9b05      	ldr	r3, [sp, #20]
 800adfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adfe:	4303      	orrs	r3, r0
 800ae00:	4313      	orrs	r3, r2
 800ae02:	428b      	cmp	r3, r1
 800ae04:	d08d      	beq.n	800ad22 <_strtod_l+0xb2>
 800ae06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae08:	9307      	str	r3, [sp, #28]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae0e:	9b07      	ldr	r3, [sp, #28]
 800ae10:	785b      	ldrb	r3, [r3, #1]
 800ae12:	2b2b      	cmp	r3, #43	; 0x2b
 800ae14:	d071      	beq.n	800aefa <_strtod_l+0x28a>
 800ae16:	000c      	movs	r4, r1
 800ae18:	2b2d      	cmp	r3, #45	; 0x2d
 800ae1a:	d174      	bne.n	800af06 <_strtod_l+0x296>
 800ae1c:	2401      	movs	r4, #1
 800ae1e:	e06d      	b.n	800aefc <_strtod_l+0x28c>
 800ae20:	9908      	ldr	r1, [sp, #32]
 800ae22:	2908      	cmp	r1, #8
 800ae24:	dc09      	bgt.n	800ae3a <_strtod_l+0x1ca>
 800ae26:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ae28:	4351      	muls	r1, r2
 800ae2a:	185b      	adds	r3, r3, r1
 800ae2c:	930d      	str	r3, [sp, #52]	; 0x34
 800ae2e:	9b08      	ldr	r3, [sp, #32]
 800ae30:	3001      	adds	r0, #1
 800ae32:	3301      	adds	r3, #1
 800ae34:	9308      	str	r3, [sp, #32]
 800ae36:	901b      	str	r0, [sp, #108]	; 0x6c
 800ae38:	e7c3      	b.n	800adc2 <_strtod_l+0x152>
 800ae3a:	4355      	muls	r5, r2
 800ae3c:	195d      	adds	r5, r3, r5
 800ae3e:	e7f6      	b.n	800ae2e <_strtod_l+0x1be>
 800ae40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae42:	1c5a      	adds	r2, r3, #1
 800ae44:	921b      	str	r2, [sp, #108]	; 0x6c
 800ae46:	9a08      	ldr	r2, [sp, #32]
 800ae48:	785b      	ldrb	r3, [r3, #1]
 800ae4a:	2a00      	cmp	r2, #0
 800ae4c:	d03a      	beq.n	800aec4 <_strtod_l+0x254>
 800ae4e:	900c      	str	r0, [sp, #48]	; 0x30
 800ae50:	9205      	str	r2, [sp, #20]
 800ae52:	001a      	movs	r2, r3
 800ae54:	3a30      	subs	r2, #48	; 0x30
 800ae56:	2a09      	cmp	r2, #9
 800ae58:	d912      	bls.n	800ae80 <_strtod_l+0x210>
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	4694      	mov	ip, r2
 800ae5e:	e7c3      	b.n	800ade8 <_strtod_l+0x178>
 800ae60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae62:	3001      	adds	r0, #1
 800ae64:	1c5a      	adds	r2, r3, #1
 800ae66:	921b      	str	r2, [sp, #108]	; 0x6c
 800ae68:	785b      	ldrb	r3, [r3, #1]
 800ae6a:	2b30      	cmp	r3, #48	; 0x30
 800ae6c:	d0f8      	beq.n	800ae60 <_strtod_l+0x1f0>
 800ae6e:	001a      	movs	r2, r3
 800ae70:	3a31      	subs	r2, #49	; 0x31
 800ae72:	2a08      	cmp	r2, #8
 800ae74:	d83c      	bhi.n	800aef0 <_strtod_l+0x280>
 800ae76:	900c      	str	r0, [sp, #48]	; 0x30
 800ae78:	2000      	movs	r0, #0
 800ae7a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ae7c:	9005      	str	r0, [sp, #20]
 800ae7e:	9210      	str	r2, [sp, #64]	; 0x40
 800ae80:	001a      	movs	r2, r3
 800ae82:	1c41      	adds	r1, r0, #1
 800ae84:	3a30      	subs	r2, #48	; 0x30
 800ae86:	2b30      	cmp	r3, #48	; 0x30
 800ae88:	d016      	beq.n	800aeb8 <_strtod_l+0x248>
 800ae8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae8c:	185b      	adds	r3, r3, r1
 800ae8e:	930c      	str	r3, [sp, #48]	; 0x30
 800ae90:	9b05      	ldr	r3, [sp, #20]
 800ae92:	210a      	movs	r1, #10
 800ae94:	469c      	mov	ip, r3
 800ae96:	4484      	add	ip, r0
 800ae98:	4563      	cmp	r3, ip
 800ae9a:	d115      	bne.n	800aec8 <_strtod_l+0x258>
 800ae9c:	9905      	ldr	r1, [sp, #20]
 800ae9e:	9b05      	ldr	r3, [sp, #20]
 800aea0:	3101      	adds	r1, #1
 800aea2:	1809      	adds	r1, r1, r0
 800aea4:	181b      	adds	r3, r3, r0
 800aea6:	9105      	str	r1, [sp, #20]
 800aea8:	2b08      	cmp	r3, #8
 800aeaa:	dc19      	bgt.n	800aee0 <_strtod_l+0x270>
 800aeac:	230a      	movs	r3, #10
 800aeae:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aeb0:	434b      	muls	r3, r1
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	18d3      	adds	r3, r2, r3
 800aeb6:	930d      	str	r3, [sp, #52]	; 0x34
 800aeb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aeba:	0008      	movs	r0, r1
 800aebc:	1c5a      	adds	r2, r3, #1
 800aebe:	921b      	str	r2, [sp, #108]	; 0x6c
 800aec0:	785b      	ldrb	r3, [r3, #1]
 800aec2:	e7c6      	b.n	800ae52 <_strtod_l+0x1e2>
 800aec4:	9808      	ldr	r0, [sp, #32]
 800aec6:	e7d0      	b.n	800ae6a <_strtod_l+0x1fa>
 800aec8:	1c5c      	adds	r4, r3, #1
 800aeca:	2b08      	cmp	r3, #8
 800aecc:	dc04      	bgt.n	800aed8 <_strtod_l+0x268>
 800aece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aed0:	434b      	muls	r3, r1
 800aed2:	930d      	str	r3, [sp, #52]	; 0x34
 800aed4:	0023      	movs	r3, r4
 800aed6:	e7df      	b.n	800ae98 <_strtod_l+0x228>
 800aed8:	2c10      	cmp	r4, #16
 800aeda:	dcfb      	bgt.n	800aed4 <_strtod_l+0x264>
 800aedc:	434d      	muls	r5, r1
 800aede:	e7f9      	b.n	800aed4 <_strtod_l+0x264>
 800aee0:	9b05      	ldr	r3, [sp, #20]
 800aee2:	2100      	movs	r1, #0
 800aee4:	2b10      	cmp	r3, #16
 800aee6:	dce7      	bgt.n	800aeb8 <_strtod_l+0x248>
 800aee8:	230a      	movs	r3, #10
 800aeea:	435d      	muls	r5, r3
 800aeec:	1955      	adds	r5, r2, r5
 800aeee:	e7e3      	b.n	800aeb8 <_strtod_l+0x248>
 800aef0:	2200      	movs	r2, #0
 800aef2:	920c      	str	r2, [sp, #48]	; 0x30
 800aef4:	9205      	str	r2, [sp, #20]
 800aef6:	3201      	adds	r2, #1
 800aef8:	e7b0      	b.n	800ae5c <_strtod_l+0x1ec>
 800aefa:	2400      	movs	r4, #0
 800aefc:	9b07      	ldr	r3, [sp, #28]
 800aefe:	3302      	adds	r3, #2
 800af00:	931b      	str	r3, [sp, #108]	; 0x6c
 800af02:	9b07      	ldr	r3, [sp, #28]
 800af04:	789b      	ldrb	r3, [r3, #2]
 800af06:	001a      	movs	r2, r3
 800af08:	3a30      	subs	r2, #48	; 0x30
 800af0a:	2a09      	cmp	r2, #9
 800af0c:	d914      	bls.n	800af38 <_strtod_l+0x2c8>
 800af0e:	9a07      	ldr	r2, [sp, #28]
 800af10:	921b      	str	r2, [sp, #108]	; 0x6c
 800af12:	2200      	movs	r2, #0
 800af14:	e033      	b.n	800af7e <_strtod_l+0x30e>
 800af16:	46c0      	nop			; (mov r8, r8)
 800af18:	080144b4 	.word	0x080144b4
 800af1c:	7ff00000 	.word	0x7ff00000
 800af20:	ffefffff 	.word	0xffefffff
 800af24:	00000433 	.word	0x00000433
 800af28:	7fffffff 	.word	0x7fffffff
 800af2c:	080144b0 	.word	0x080144b0
 800af30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af32:	1c5a      	adds	r2, r3, #1
 800af34:	921b      	str	r2, [sp, #108]	; 0x6c
 800af36:	785b      	ldrb	r3, [r3, #1]
 800af38:	2b30      	cmp	r3, #48	; 0x30
 800af3a:	d0f9      	beq.n	800af30 <_strtod_l+0x2c0>
 800af3c:	2200      	movs	r2, #0
 800af3e:	9206      	str	r2, [sp, #24]
 800af40:	001a      	movs	r2, r3
 800af42:	3a31      	subs	r2, #49	; 0x31
 800af44:	2a08      	cmp	r2, #8
 800af46:	d81b      	bhi.n	800af80 <_strtod_l+0x310>
 800af48:	3b30      	subs	r3, #48	; 0x30
 800af4a:	930e      	str	r3, [sp, #56]	; 0x38
 800af4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af4e:	9306      	str	r3, [sp, #24]
 800af50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af52:	1c59      	adds	r1, r3, #1
 800af54:	911b      	str	r1, [sp, #108]	; 0x6c
 800af56:	785b      	ldrb	r3, [r3, #1]
 800af58:	001a      	movs	r2, r3
 800af5a:	3a30      	subs	r2, #48	; 0x30
 800af5c:	2a09      	cmp	r2, #9
 800af5e:	d93a      	bls.n	800afd6 <_strtod_l+0x366>
 800af60:	9a06      	ldr	r2, [sp, #24]
 800af62:	1a8a      	subs	r2, r1, r2
 800af64:	49b2      	ldr	r1, [pc, #712]	; (800b230 <_strtod_l+0x5c0>)
 800af66:	9106      	str	r1, [sp, #24]
 800af68:	2a08      	cmp	r2, #8
 800af6a:	dc04      	bgt.n	800af76 <_strtod_l+0x306>
 800af6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af6e:	9206      	str	r2, [sp, #24]
 800af70:	428a      	cmp	r2, r1
 800af72:	dd00      	ble.n	800af76 <_strtod_l+0x306>
 800af74:	9106      	str	r1, [sp, #24]
 800af76:	2c00      	cmp	r4, #0
 800af78:	d002      	beq.n	800af80 <_strtod_l+0x310>
 800af7a:	9a06      	ldr	r2, [sp, #24]
 800af7c:	4252      	negs	r2, r2
 800af7e:	9206      	str	r2, [sp, #24]
 800af80:	9a05      	ldr	r2, [sp, #20]
 800af82:	2a00      	cmp	r2, #0
 800af84:	d14d      	bne.n	800b022 <_strtod_l+0x3b2>
 800af86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af88:	4310      	orrs	r0, r2
 800af8a:	d000      	beq.n	800af8e <_strtod_l+0x31e>
 800af8c:	e6ab      	b.n	800ace6 <_strtod_l+0x76>
 800af8e:	4662      	mov	r2, ip
 800af90:	2a00      	cmp	r2, #0
 800af92:	d000      	beq.n	800af96 <_strtod_l+0x326>
 800af94:	e6c5      	b.n	800ad22 <_strtod_l+0xb2>
 800af96:	2b69      	cmp	r3, #105	; 0x69
 800af98:	d027      	beq.n	800afea <_strtod_l+0x37a>
 800af9a:	dc23      	bgt.n	800afe4 <_strtod_l+0x374>
 800af9c:	2b49      	cmp	r3, #73	; 0x49
 800af9e:	d024      	beq.n	800afea <_strtod_l+0x37a>
 800afa0:	2b4e      	cmp	r3, #78	; 0x4e
 800afa2:	d000      	beq.n	800afa6 <_strtod_l+0x336>
 800afa4:	e6bd      	b.n	800ad22 <_strtod_l+0xb2>
 800afa6:	49a3      	ldr	r1, [pc, #652]	; (800b234 <_strtod_l+0x5c4>)
 800afa8:	a81b      	add	r0, sp, #108	; 0x6c
 800afaa:	f001 fc31 	bl	800c810 <__match>
 800afae:	2800      	cmp	r0, #0
 800afb0:	d100      	bne.n	800afb4 <_strtod_l+0x344>
 800afb2:	e6b6      	b.n	800ad22 <_strtod_l+0xb2>
 800afb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	2b28      	cmp	r3, #40	; 0x28
 800afba:	d12c      	bne.n	800b016 <_strtod_l+0x3a6>
 800afbc:	499e      	ldr	r1, [pc, #632]	; (800b238 <_strtod_l+0x5c8>)
 800afbe:	aa1e      	add	r2, sp, #120	; 0x78
 800afc0:	a81b      	add	r0, sp, #108	; 0x6c
 800afc2:	f001 fc39 	bl	800c838 <__hexnan>
 800afc6:	2805      	cmp	r0, #5
 800afc8:	d125      	bne.n	800b016 <_strtod_l+0x3a6>
 800afca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800afcc:	4a9b      	ldr	r2, [pc, #620]	; (800b23c <_strtod_l+0x5cc>)
 800afce:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800afd0:	431a      	orrs	r2, r3
 800afd2:	0017      	movs	r7, r2
 800afd4:	e687      	b.n	800ace6 <_strtod_l+0x76>
 800afd6:	220a      	movs	r2, #10
 800afd8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800afda:	434a      	muls	r2, r1
 800afdc:	18d2      	adds	r2, r2, r3
 800afde:	3a30      	subs	r2, #48	; 0x30
 800afe0:	920e      	str	r2, [sp, #56]	; 0x38
 800afe2:	e7b5      	b.n	800af50 <_strtod_l+0x2e0>
 800afe4:	2b6e      	cmp	r3, #110	; 0x6e
 800afe6:	d0de      	beq.n	800afa6 <_strtod_l+0x336>
 800afe8:	e69b      	b.n	800ad22 <_strtod_l+0xb2>
 800afea:	4995      	ldr	r1, [pc, #596]	; (800b240 <_strtod_l+0x5d0>)
 800afec:	a81b      	add	r0, sp, #108	; 0x6c
 800afee:	f001 fc0f 	bl	800c810 <__match>
 800aff2:	2800      	cmp	r0, #0
 800aff4:	d100      	bne.n	800aff8 <_strtod_l+0x388>
 800aff6:	e694      	b.n	800ad22 <_strtod_l+0xb2>
 800aff8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800affa:	4992      	ldr	r1, [pc, #584]	; (800b244 <_strtod_l+0x5d4>)
 800affc:	3b01      	subs	r3, #1
 800affe:	a81b      	add	r0, sp, #108	; 0x6c
 800b000:	931b      	str	r3, [sp, #108]	; 0x6c
 800b002:	f001 fc05 	bl	800c810 <__match>
 800b006:	2800      	cmp	r0, #0
 800b008:	d102      	bne.n	800b010 <_strtod_l+0x3a0>
 800b00a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b00c:	3301      	adds	r3, #1
 800b00e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b010:	2600      	movs	r6, #0
 800b012:	4f8a      	ldr	r7, [pc, #552]	; (800b23c <_strtod_l+0x5cc>)
 800b014:	e667      	b.n	800ace6 <_strtod_l+0x76>
 800b016:	488c      	ldr	r0, [pc, #560]	; (800b248 <_strtod_l+0x5d8>)
 800b018:	f001 f836 	bl	800c088 <nan>
 800b01c:	0006      	movs	r6, r0
 800b01e:	000f      	movs	r7, r1
 800b020:	e661      	b.n	800ace6 <_strtod_l+0x76>
 800b022:	9b06      	ldr	r3, [sp, #24]
 800b024:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b026:	1a9b      	subs	r3, r3, r2
 800b028:	9309      	str	r3, [sp, #36]	; 0x24
 800b02a:	9b08      	ldr	r3, [sp, #32]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d101      	bne.n	800b034 <_strtod_l+0x3c4>
 800b030:	9b05      	ldr	r3, [sp, #20]
 800b032:	9308      	str	r3, [sp, #32]
 800b034:	9c05      	ldr	r4, [sp, #20]
 800b036:	2c10      	cmp	r4, #16
 800b038:	dd00      	ble.n	800b03c <_strtod_l+0x3cc>
 800b03a:	2410      	movs	r4, #16
 800b03c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b03e:	f7f7 f9dd 	bl	80023fc <__aeabi_ui2d>
 800b042:	9b05      	ldr	r3, [sp, #20]
 800b044:	0006      	movs	r6, r0
 800b046:	000f      	movs	r7, r1
 800b048:	2b09      	cmp	r3, #9
 800b04a:	dd15      	ble.n	800b078 <_strtod_l+0x408>
 800b04c:	0022      	movs	r2, r4
 800b04e:	4b7f      	ldr	r3, [pc, #508]	; (800b24c <_strtod_l+0x5dc>)
 800b050:	3a09      	subs	r2, #9
 800b052:	00d2      	lsls	r2, r2, #3
 800b054:	189b      	adds	r3, r3, r2
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	f7f6 fb07 	bl	800166c <__aeabi_dmul>
 800b05e:	0006      	movs	r6, r0
 800b060:	0028      	movs	r0, r5
 800b062:	000f      	movs	r7, r1
 800b064:	f7f7 f9ca 	bl	80023fc <__aeabi_ui2d>
 800b068:	0002      	movs	r2, r0
 800b06a:	000b      	movs	r3, r1
 800b06c:	0030      	movs	r0, r6
 800b06e:	0039      	movs	r1, r7
 800b070:	f7f5 fba2 	bl	80007b8 <__aeabi_dadd>
 800b074:	0006      	movs	r6, r0
 800b076:	000f      	movs	r7, r1
 800b078:	9b05      	ldr	r3, [sp, #20]
 800b07a:	2b0f      	cmp	r3, #15
 800b07c:	dc39      	bgt.n	800b0f2 <_strtod_l+0x482>
 800b07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b080:	2b00      	cmp	r3, #0
 800b082:	d100      	bne.n	800b086 <_strtod_l+0x416>
 800b084:	e62f      	b.n	800ace6 <_strtod_l+0x76>
 800b086:	dd24      	ble.n	800b0d2 <_strtod_l+0x462>
 800b088:	2b16      	cmp	r3, #22
 800b08a:	dc09      	bgt.n	800b0a0 <_strtod_l+0x430>
 800b08c:	496f      	ldr	r1, [pc, #444]	; (800b24c <_strtod_l+0x5dc>)
 800b08e:	00db      	lsls	r3, r3, #3
 800b090:	18c9      	adds	r1, r1, r3
 800b092:	0032      	movs	r2, r6
 800b094:	6808      	ldr	r0, [r1, #0]
 800b096:	6849      	ldr	r1, [r1, #4]
 800b098:	003b      	movs	r3, r7
 800b09a:	f7f6 fae7 	bl	800166c <__aeabi_dmul>
 800b09e:	e7bd      	b.n	800b01c <_strtod_l+0x3ac>
 800b0a0:	2325      	movs	r3, #37	; 0x25
 800b0a2:	9a05      	ldr	r2, [sp, #20]
 800b0a4:	1a9b      	subs	r3, r3, r2
 800b0a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	db22      	blt.n	800b0f2 <_strtod_l+0x482>
 800b0ac:	240f      	movs	r4, #15
 800b0ae:	9b05      	ldr	r3, [sp, #20]
 800b0b0:	4d66      	ldr	r5, [pc, #408]	; (800b24c <_strtod_l+0x5dc>)
 800b0b2:	1ae4      	subs	r4, r4, r3
 800b0b4:	00e1      	lsls	r1, r4, #3
 800b0b6:	1869      	adds	r1, r5, r1
 800b0b8:	0032      	movs	r2, r6
 800b0ba:	6808      	ldr	r0, [r1, #0]
 800b0bc:	6849      	ldr	r1, [r1, #4]
 800b0be:	003b      	movs	r3, r7
 800b0c0:	f7f6 fad4 	bl	800166c <__aeabi_dmul>
 800b0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0c6:	1b1c      	subs	r4, r3, r4
 800b0c8:	00e4      	lsls	r4, r4, #3
 800b0ca:	192d      	adds	r5, r5, r4
 800b0cc:	682a      	ldr	r2, [r5, #0]
 800b0ce:	686b      	ldr	r3, [r5, #4]
 800b0d0:	e7e3      	b.n	800b09a <_strtod_l+0x42a>
 800b0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0d4:	3316      	adds	r3, #22
 800b0d6:	db0c      	blt.n	800b0f2 <_strtod_l+0x482>
 800b0d8:	9906      	ldr	r1, [sp, #24]
 800b0da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0dc:	4b5b      	ldr	r3, [pc, #364]	; (800b24c <_strtod_l+0x5dc>)
 800b0de:	1a52      	subs	r2, r2, r1
 800b0e0:	00d2      	lsls	r2, r2, #3
 800b0e2:	189b      	adds	r3, r3, r2
 800b0e4:	0030      	movs	r0, r6
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	0039      	movs	r1, r7
 800b0ec:	f7f5 fec4 	bl	8000e78 <__aeabi_ddiv>
 800b0f0:	e794      	b.n	800b01c <_strtod_l+0x3ac>
 800b0f2:	9b05      	ldr	r3, [sp, #20]
 800b0f4:	1b1c      	subs	r4, r3, r4
 800b0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f8:	18e4      	adds	r4, r4, r3
 800b0fa:	2c00      	cmp	r4, #0
 800b0fc:	dd72      	ble.n	800b1e4 <_strtod_l+0x574>
 800b0fe:	220f      	movs	r2, #15
 800b100:	0023      	movs	r3, r4
 800b102:	4013      	ands	r3, r2
 800b104:	4214      	tst	r4, r2
 800b106:	d00a      	beq.n	800b11e <_strtod_l+0x4ae>
 800b108:	4950      	ldr	r1, [pc, #320]	; (800b24c <_strtod_l+0x5dc>)
 800b10a:	00db      	lsls	r3, r3, #3
 800b10c:	18c9      	adds	r1, r1, r3
 800b10e:	0032      	movs	r2, r6
 800b110:	6808      	ldr	r0, [r1, #0]
 800b112:	6849      	ldr	r1, [r1, #4]
 800b114:	003b      	movs	r3, r7
 800b116:	f7f6 faa9 	bl	800166c <__aeabi_dmul>
 800b11a:	0006      	movs	r6, r0
 800b11c:	000f      	movs	r7, r1
 800b11e:	230f      	movs	r3, #15
 800b120:	439c      	bics	r4, r3
 800b122:	d04a      	beq.n	800b1ba <_strtod_l+0x54a>
 800b124:	3326      	adds	r3, #38	; 0x26
 800b126:	33ff      	adds	r3, #255	; 0xff
 800b128:	429c      	cmp	r4, r3
 800b12a:	dd22      	ble.n	800b172 <_strtod_l+0x502>
 800b12c:	2300      	movs	r3, #0
 800b12e:	9305      	str	r3, [sp, #20]
 800b130:	9306      	str	r3, [sp, #24]
 800b132:	930d      	str	r3, [sp, #52]	; 0x34
 800b134:	9308      	str	r3, [sp, #32]
 800b136:	2322      	movs	r3, #34	; 0x22
 800b138:	2600      	movs	r6, #0
 800b13a:	9a04      	ldr	r2, [sp, #16]
 800b13c:	4f3f      	ldr	r7, [pc, #252]	; (800b23c <_strtod_l+0x5cc>)
 800b13e:	6013      	str	r3, [r2, #0]
 800b140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b142:	42b3      	cmp	r3, r6
 800b144:	d100      	bne.n	800b148 <_strtod_l+0x4d8>
 800b146:	e5ce      	b.n	800ace6 <_strtod_l+0x76>
 800b148:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b14a:	9804      	ldr	r0, [sp, #16]
 800b14c:	f001 fc56 	bl	800c9fc <_Bfree>
 800b150:	9908      	ldr	r1, [sp, #32]
 800b152:	9804      	ldr	r0, [sp, #16]
 800b154:	f001 fc52 	bl	800c9fc <_Bfree>
 800b158:	9906      	ldr	r1, [sp, #24]
 800b15a:	9804      	ldr	r0, [sp, #16]
 800b15c:	f001 fc4e 	bl	800c9fc <_Bfree>
 800b160:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b162:	9804      	ldr	r0, [sp, #16]
 800b164:	f001 fc4a 	bl	800c9fc <_Bfree>
 800b168:	9905      	ldr	r1, [sp, #20]
 800b16a:	9804      	ldr	r0, [sp, #16]
 800b16c:	f001 fc46 	bl	800c9fc <_Bfree>
 800b170:	e5b9      	b.n	800ace6 <_strtod_l+0x76>
 800b172:	2300      	movs	r3, #0
 800b174:	0030      	movs	r0, r6
 800b176:	0039      	movs	r1, r7
 800b178:	4d35      	ldr	r5, [pc, #212]	; (800b250 <_strtod_l+0x5e0>)
 800b17a:	1124      	asrs	r4, r4, #4
 800b17c:	9307      	str	r3, [sp, #28]
 800b17e:	2c01      	cmp	r4, #1
 800b180:	dc1e      	bgt.n	800b1c0 <_strtod_l+0x550>
 800b182:	2b00      	cmp	r3, #0
 800b184:	d001      	beq.n	800b18a <_strtod_l+0x51a>
 800b186:	0006      	movs	r6, r0
 800b188:	000f      	movs	r7, r1
 800b18a:	4b32      	ldr	r3, [pc, #200]	; (800b254 <_strtod_l+0x5e4>)
 800b18c:	9a07      	ldr	r2, [sp, #28]
 800b18e:	18ff      	adds	r7, r7, r3
 800b190:	4b2f      	ldr	r3, [pc, #188]	; (800b250 <_strtod_l+0x5e0>)
 800b192:	00d2      	lsls	r2, r2, #3
 800b194:	189d      	adds	r5, r3, r2
 800b196:	6828      	ldr	r0, [r5, #0]
 800b198:	6869      	ldr	r1, [r5, #4]
 800b19a:	0032      	movs	r2, r6
 800b19c:	003b      	movs	r3, r7
 800b19e:	f7f6 fa65 	bl	800166c <__aeabi_dmul>
 800b1a2:	4b26      	ldr	r3, [pc, #152]	; (800b23c <_strtod_l+0x5cc>)
 800b1a4:	4a2c      	ldr	r2, [pc, #176]	; (800b258 <_strtod_l+0x5e8>)
 800b1a6:	0006      	movs	r6, r0
 800b1a8:	400b      	ands	r3, r1
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d8be      	bhi.n	800b12c <_strtod_l+0x4bc>
 800b1ae:	4a2b      	ldr	r2, [pc, #172]	; (800b25c <_strtod_l+0x5ec>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d913      	bls.n	800b1dc <_strtod_l+0x56c>
 800b1b4:	2601      	movs	r6, #1
 800b1b6:	4f2a      	ldr	r7, [pc, #168]	; (800b260 <_strtod_l+0x5f0>)
 800b1b8:	4276      	negs	r6, r6
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	9307      	str	r3, [sp, #28]
 800b1be:	e088      	b.n	800b2d2 <_strtod_l+0x662>
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	4214      	tst	r4, r2
 800b1c4:	d004      	beq.n	800b1d0 <_strtod_l+0x560>
 800b1c6:	682a      	ldr	r2, [r5, #0]
 800b1c8:	686b      	ldr	r3, [r5, #4]
 800b1ca:	f7f6 fa4f 	bl	800166c <__aeabi_dmul>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	9a07      	ldr	r2, [sp, #28]
 800b1d2:	1064      	asrs	r4, r4, #1
 800b1d4:	3201      	adds	r2, #1
 800b1d6:	9207      	str	r2, [sp, #28]
 800b1d8:	3508      	adds	r5, #8
 800b1da:	e7d0      	b.n	800b17e <_strtod_l+0x50e>
 800b1dc:	23d4      	movs	r3, #212	; 0xd4
 800b1de:	049b      	lsls	r3, r3, #18
 800b1e0:	18cf      	adds	r7, r1, r3
 800b1e2:	e7ea      	b.n	800b1ba <_strtod_l+0x54a>
 800b1e4:	2c00      	cmp	r4, #0
 800b1e6:	d0e8      	beq.n	800b1ba <_strtod_l+0x54a>
 800b1e8:	4264      	negs	r4, r4
 800b1ea:	230f      	movs	r3, #15
 800b1ec:	0022      	movs	r2, r4
 800b1ee:	401a      	ands	r2, r3
 800b1f0:	421c      	tst	r4, r3
 800b1f2:	d00a      	beq.n	800b20a <_strtod_l+0x59a>
 800b1f4:	4b15      	ldr	r3, [pc, #84]	; (800b24c <_strtod_l+0x5dc>)
 800b1f6:	00d2      	lsls	r2, r2, #3
 800b1f8:	189b      	adds	r3, r3, r2
 800b1fa:	0030      	movs	r0, r6
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	0039      	movs	r1, r7
 800b202:	f7f5 fe39 	bl	8000e78 <__aeabi_ddiv>
 800b206:	0006      	movs	r6, r0
 800b208:	000f      	movs	r7, r1
 800b20a:	1124      	asrs	r4, r4, #4
 800b20c:	d0d5      	beq.n	800b1ba <_strtod_l+0x54a>
 800b20e:	2c1f      	cmp	r4, #31
 800b210:	dd28      	ble.n	800b264 <_strtod_l+0x5f4>
 800b212:	2300      	movs	r3, #0
 800b214:	9305      	str	r3, [sp, #20]
 800b216:	9306      	str	r3, [sp, #24]
 800b218:	930d      	str	r3, [sp, #52]	; 0x34
 800b21a:	9308      	str	r3, [sp, #32]
 800b21c:	2322      	movs	r3, #34	; 0x22
 800b21e:	9a04      	ldr	r2, [sp, #16]
 800b220:	2600      	movs	r6, #0
 800b222:	6013      	str	r3, [r2, #0]
 800b224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b226:	2700      	movs	r7, #0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d18d      	bne.n	800b148 <_strtod_l+0x4d8>
 800b22c:	e55b      	b.n	800ace6 <_strtod_l+0x76>
 800b22e:	46c0      	nop			; (mov r8, r8)
 800b230:	00004e1f 	.word	0x00004e1f
 800b234:	080147e9 	.word	0x080147e9
 800b238:	080144c8 	.word	0x080144c8
 800b23c:	7ff00000 	.word	0x7ff00000
 800b240:	080147e1 	.word	0x080147e1
 800b244:	08014897 	.word	0x08014897
 800b248:	08014893 	.word	0x08014893
 800b24c:	08014708 	.word	0x08014708
 800b250:	080146e0 	.word	0x080146e0
 800b254:	fcb00000 	.word	0xfcb00000
 800b258:	7ca00000 	.word	0x7ca00000
 800b25c:	7c900000 	.word	0x7c900000
 800b260:	7fefffff 	.word	0x7fefffff
 800b264:	2310      	movs	r3, #16
 800b266:	0022      	movs	r2, r4
 800b268:	401a      	ands	r2, r3
 800b26a:	9207      	str	r2, [sp, #28]
 800b26c:	421c      	tst	r4, r3
 800b26e:	d001      	beq.n	800b274 <_strtod_l+0x604>
 800b270:	335a      	adds	r3, #90	; 0x5a
 800b272:	9307      	str	r3, [sp, #28]
 800b274:	0030      	movs	r0, r6
 800b276:	0039      	movs	r1, r7
 800b278:	2300      	movs	r3, #0
 800b27a:	4dc4      	ldr	r5, [pc, #784]	; (800b58c <_strtod_l+0x91c>)
 800b27c:	2201      	movs	r2, #1
 800b27e:	4214      	tst	r4, r2
 800b280:	d004      	beq.n	800b28c <_strtod_l+0x61c>
 800b282:	682a      	ldr	r2, [r5, #0]
 800b284:	686b      	ldr	r3, [r5, #4]
 800b286:	f7f6 f9f1 	bl	800166c <__aeabi_dmul>
 800b28a:	2301      	movs	r3, #1
 800b28c:	1064      	asrs	r4, r4, #1
 800b28e:	3508      	adds	r5, #8
 800b290:	2c00      	cmp	r4, #0
 800b292:	d1f3      	bne.n	800b27c <_strtod_l+0x60c>
 800b294:	2b00      	cmp	r3, #0
 800b296:	d001      	beq.n	800b29c <_strtod_l+0x62c>
 800b298:	0006      	movs	r6, r0
 800b29a:	000f      	movs	r7, r1
 800b29c:	9b07      	ldr	r3, [sp, #28]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00f      	beq.n	800b2c2 <_strtod_l+0x652>
 800b2a2:	236b      	movs	r3, #107	; 0x6b
 800b2a4:	007a      	lsls	r2, r7, #1
 800b2a6:	0d52      	lsrs	r2, r2, #21
 800b2a8:	0039      	movs	r1, r7
 800b2aa:	1a9b      	subs	r3, r3, r2
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	dd08      	ble.n	800b2c2 <_strtod_l+0x652>
 800b2b0:	2b1f      	cmp	r3, #31
 800b2b2:	dc00      	bgt.n	800b2b6 <_strtod_l+0x646>
 800b2b4:	e121      	b.n	800b4fa <_strtod_l+0x88a>
 800b2b6:	2600      	movs	r6, #0
 800b2b8:	2b34      	cmp	r3, #52	; 0x34
 800b2ba:	dc00      	bgt.n	800b2be <_strtod_l+0x64e>
 800b2bc:	e116      	b.n	800b4ec <_strtod_l+0x87c>
 800b2be:	27dc      	movs	r7, #220	; 0xdc
 800b2c0:	04bf      	lsls	r7, r7, #18
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	0030      	movs	r0, r6
 800b2c8:	0039      	movs	r1, r7
 800b2ca:	f7f5 f8bd 	bl	8000448 <__aeabi_dcmpeq>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d19f      	bne.n	800b212 <_strtod_l+0x5a2>
 800b2d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2d4:	9a08      	ldr	r2, [sp, #32]
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b2da:	9b05      	ldr	r3, [sp, #20]
 800b2dc:	9804      	ldr	r0, [sp, #16]
 800b2de:	f001 fbdb 	bl	800ca98 <__s2b>
 800b2e2:	900d      	str	r0, [sp, #52]	; 0x34
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	d100      	bne.n	800b2ea <_strtod_l+0x67a>
 800b2e8:	e720      	b.n	800b12c <_strtod_l+0x4bc>
 800b2ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ec:	9906      	ldr	r1, [sp, #24]
 800b2ee:	17da      	asrs	r2, r3, #31
 800b2f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2f2:	1a5b      	subs	r3, r3, r1
 800b2f4:	401a      	ands	r2, r3
 800b2f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f8:	9215      	str	r2, [sp, #84]	; 0x54
 800b2fa:	43db      	mvns	r3, r3
 800b2fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2fe:	17db      	asrs	r3, r3, #31
 800b300:	401a      	ands	r2, r3
 800b302:	2300      	movs	r3, #0
 800b304:	9218      	str	r2, [sp, #96]	; 0x60
 800b306:	9305      	str	r3, [sp, #20]
 800b308:	9306      	str	r3, [sp, #24]
 800b30a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b30c:	9804      	ldr	r0, [sp, #16]
 800b30e:	6859      	ldr	r1, [r3, #4]
 800b310:	f001 fb4c 	bl	800c9ac <_Balloc>
 800b314:	9008      	str	r0, [sp, #32]
 800b316:	2800      	cmp	r0, #0
 800b318:	d100      	bne.n	800b31c <_strtod_l+0x6ac>
 800b31a:	e70c      	b.n	800b136 <_strtod_l+0x4c6>
 800b31c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b31e:	300c      	adds	r0, #12
 800b320:	0019      	movs	r1, r3
 800b322:	691a      	ldr	r2, [r3, #16]
 800b324:	310c      	adds	r1, #12
 800b326:	3202      	adds	r2, #2
 800b328:	0092      	lsls	r2, r2, #2
 800b32a:	f000 fea4 	bl	800c076 <memcpy>
 800b32e:	ab1e      	add	r3, sp, #120	; 0x78
 800b330:	9301      	str	r3, [sp, #4]
 800b332:	ab1d      	add	r3, sp, #116	; 0x74
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	0032      	movs	r2, r6
 800b338:	003b      	movs	r3, r7
 800b33a:	9804      	ldr	r0, [sp, #16]
 800b33c:	9610      	str	r6, [sp, #64]	; 0x40
 800b33e:	9711      	str	r7, [sp, #68]	; 0x44
 800b340:	f001 fed2 	bl	800d0e8 <__d2b>
 800b344:	901c      	str	r0, [sp, #112]	; 0x70
 800b346:	2800      	cmp	r0, #0
 800b348:	d100      	bne.n	800b34c <_strtod_l+0x6dc>
 800b34a:	e6f4      	b.n	800b136 <_strtod_l+0x4c6>
 800b34c:	2101      	movs	r1, #1
 800b34e:	9804      	ldr	r0, [sp, #16]
 800b350:	f001 fc36 	bl	800cbc0 <__i2b>
 800b354:	9006      	str	r0, [sp, #24]
 800b356:	2800      	cmp	r0, #0
 800b358:	d100      	bne.n	800b35c <_strtod_l+0x6ec>
 800b35a:	e6ec      	b.n	800b136 <_strtod_l+0x4c6>
 800b35c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b35e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b360:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b362:	1ad4      	subs	r4, r2, r3
 800b364:	2b00      	cmp	r3, #0
 800b366:	db01      	blt.n	800b36c <_strtod_l+0x6fc>
 800b368:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b36a:	195d      	adds	r5, r3, r5
 800b36c:	9907      	ldr	r1, [sp, #28]
 800b36e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b370:	1a5b      	subs	r3, r3, r1
 800b372:	2136      	movs	r1, #54	; 0x36
 800b374:	189b      	adds	r3, r3, r2
 800b376:	1a8a      	subs	r2, r1, r2
 800b378:	4985      	ldr	r1, [pc, #532]	; (800b590 <_strtod_l+0x920>)
 800b37a:	2001      	movs	r0, #1
 800b37c:	468c      	mov	ip, r1
 800b37e:	2100      	movs	r1, #0
 800b380:	3b01      	subs	r3, #1
 800b382:	9114      	str	r1, [sp, #80]	; 0x50
 800b384:	9012      	str	r0, [sp, #72]	; 0x48
 800b386:	4563      	cmp	r3, ip
 800b388:	da07      	bge.n	800b39a <_strtod_l+0x72a>
 800b38a:	4661      	mov	r1, ip
 800b38c:	1ac9      	subs	r1, r1, r3
 800b38e:	1a52      	subs	r2, r2, r1
 800b390:	291f      	cmp	r1, #31
 800b392:	dd00      	ble.n	800b396 <_strtod_l+0x726>
 800b394:	e0b6      	b.n	800b504 <_strtod_l+0x894>
 800b396:	4088      	lsls	r0, r1
 800b398:	9012      	str	r0, [sp, #72]	; 0x48
 800b39a:	18ab      	adds	r3, r5, r2
 800b39c:	930c      	str	r3, [sp, #48]	; 0x30
 800b39e:	18a4      	adds	r4, r4, r2
 800b3a0:	9b07      	ldr	r3, [sp, #28]
 800b3a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3a4:	191c      	adds	r4, r3, r4
 800b3a6:	002b      	movs	r3, r5
 800b3a8:	4295      	cmp	r5, r2
 800b3aa:	dd00      	ble.n	800b3ae <_strtod_l+0x73e>
 800b3ac:	0013      	movs	r3, r2
 800b3ae:	42a3      	cmp	r3, r4
 800b3b0:	dd00      	ble.n	800b3b4 <_strtod_l+0x744>
 800b3b2:	0023      	movs	r3, r4
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	dd04      	ble.n	800b3c2 <_strtod_l+0x752>
 800b3b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3ba:	1ae4      	subs	r4, r4, r3
 800b3bc:	1ad2      	subs	r2, r2, r3
 800b3be:	920c      	str	r2, [sp, #48]	; 0x30
 800b3c0:	1aed      	subs	r5, r5, r3
 800b3c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	dd17      	ble.n	800b3f8 <_strtod_l+0x788>
 800b3c8:	001a      	movs	r2, r3
 800b3ca:	9906      	ldr	r1, [sp, #24]
 800b3cc:	9804      	ldr	r0, [sp, #16]
 800b3ce:	f001 fcbf 	bl	800cd50 <__pow5mult>
 800b3d2:	9006      	str	r0, [sp, #24]
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d100      	bne.n	800b3da <_strtod_l+0x76a>
 800b3d8:	e6ad      	b.n	800b136 <_strtod_l+0x4c6>
 800b3da:	0001      	movs	r1, r0
 800b3dc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b3de:	9804      	ldr	r0, [sp, #16]
 800b3e0:	f001 fc06 	bl	800cbf0 <__multiply>
 800b3e4:	900e      	str	r0, [sp, #56]	; 0x38
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	d100      	bne.n	800b3ec <_strtod_l+0x77c>
 800b3ea:	e6a4      	b.n	800b136 <_strtod_l+0x4c6>
 800b3ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b3ee:	9804      	ldr	r0, [sp, #16]
 800b3f0:	f001 fb04 	bl	800c9fc <_Bfree>
 800b3f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3f6:	931c      	str	r3, [sp, #112]	; 0x70
 800b3f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	dd00      	ble.n	800b400 <_strtod_l+0x790>
 800b3fe:	e087      	b.n	800b510 <_strtod_l+0x8a0>
 800b400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b402:	2b00      	cmp	r3, #0
 800b404:	dd08      	ble.n	800b418 <_strtod_l+0x7a8>
 800b406:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b408:	9908      	ldr	r1, [sp, #32]
 800b40a:	9804      	ldr	r0, [sp, #16]
 800b40c:	f001 fca0 	bl	800cd50 <__pow5mult>
 800b410:	9008      	str	r0, [sp, #32]
 800b412:	2800      	cmp	r0, #0
 800b414:	d100      	bne.n	800b418 <_strtod_l+0x7a8>
 800b416:	e68e      	b.n	800b136 <_strtod_l+0x4c6>
 800b418:	2c00      	cmp	r4, #0
 800b41a:	dd08      	ble.n	800b42e <_strtod_l+0x7be>
 800b41c:	0022      	movs	r2, r4
 800b41e:	9908      	ldr	r1, [sp, #32]
 800b420:	9804      	ldr	r0, [sp, #16]
 800b422:	f001 fcd7 	bl	800cdd4 <__lshift>
 800b426:	9008      	str	r0, [sp, #32]
 800b428:	2800      	cmp	r0, #0
 800b42a:	d100      	bne.n	800b42e <_strtod_l+0x7be>
 800b42c:	e683      	b.n	800b136 <_strtod_l+0x4c6>
 800b42e:	2d00      	cmp	r5, #0
 800b430:	dd08      	ble.n	800b444 <_strtod_l+0x7d4>
 800b432:	002a      	movs	r2, r5
 800b434:	9906      	ldr	r1, [sp, #24]
 800b436:	9804      	ldr	r0, [sp, #16]
 800b438:	f001 fccc 	bl	800cdd4 <__lshift>
 800b43c:	9006      	str	r0, [sp, #24]
 800b43e:	2800      	cmp	r0, #0
 800b440:	d100      	bne.n	800b444 <_strtod_l+0x7d4>
 800b442:	e678      	b.n	800b136 <_strtod_l+0x4c6>
 800b444:	9a08      	ldr	r2, [sp, #32]
 800b446:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b448:	9804      	ldr	r0, [sp, #16]
 800b44a:	f001 fd4d 	bl	800cee8 <__mdiff>
 800b44e:	9005      	str	r0, [sp, #20]
 800b450:	2800      	cmp	r0, #0
 800b452:	d100      	bne.n	800b456 <_strtod_l+0x7e6>
 800b454:	e66f      	b.n	800b136 <_strtod_l+0x4c6>
 800b456:	2200      	movs	r2, #0
 800b458:	68c3      	ldr	r3, [r0, #12]
 800b45a:	9906      	ldr	r1, [sp, #24]
 800b45c:	60c2      	str	r2, [r0, #12]
 800b45e:	930c      	str	r3, [sp, #48]	; 0x30
 800b460:	f001 fd26 	bl	800ceb0 <__mcmp>
 800b464:	2800      	cmp	r0, #0
 800b466:	da5d      	bge.n	800b524 <_strtod_l+0x8b4>
 800b468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b46a:	4333      	orrs	r3, r6
 800b46c:	d000      	beq.n	800b470 <_strtod_l+0x800>
 800b46e:	e088      	b.n	800b582 <_strtod_l+0x912>
 800b470:	033b      	lsls	r3, r7, #12
 800b472:	d000      	beq.n	800b476 <_strtod_l+0x806>
 800b474:	e085      	b.n	800b582 <_strtod_l+0x912>
 800b476:	22d6      	movs	r2, #214	; 0xd6
 800b478:	4b46      	ldr	r3, [pc, #280]	; (800b594 <_strtod_l+0x924>)
 800b47a:	04d2      	lsls	r2, r2, #19
 800b47c:	403b      	ands	r3, r7
 800b47e:	4293      	cmp	r3, r2
 800b480:	d97f      	bls.n	800b582 <_strtod_l+0x912>
 800b482:	9b05      	ldr	r3, [sp, #20]
 800b484:	695b      	ldr	r3, [r3, #20]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d103      	bne.n	800b492 <_strtod_l+0x822>
 800b48a:	9b05      	ldr	r3, [sp, #20]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	dd77      	ble.n	800b582 <_strtod_l+0x912>
 800b492:	9905      	ldr	r1, [sp, #20]
 800b494:	2201      	movs	r2, #1
 800b496:	9804      	ldr	r0, [sp, #16]
 800b498:	f001 fc9c 	bl	800cdd4 <__lshift>
 800b49c:	9906      	ldr	r1, [sp, #24]
 800b49e:	9005      	str	r0, [sp, #20]
 800b4a0:	f001 fd06 	bl	800ceb0 <__mcmp>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	dd6c      	ble.n	800b582 <_strtod_l+0x912>
 800b4a8:	9907      	ldr	r1, [sp, #28]
 800b4aa:	003b      	movs	r3, r7
 800b4ac:	4a39      	ldr	r2, [pc, #228]	; (800b594 <_strtod_l+0x924>)
 800b4ae:	2900      	cmp	r1, #0
 800b4b0:	d100      	bne.n	800b4b4 <_strtod_l+0x844>
 800b4b2:	e094      	b.n	800b5de <_strtod_l+0x96e>
 800b4b4:	0011      	movs	r1, r2
 800b4b6:	20d6      	movs	r0, #214	; 0xd6
 800b4b8:	4039      	ands	r1, r7
 800b4ba:	04c0      	lsls	r0, r0, #19
 800b4bc:	4281      	cmp	r1, r0
 800b4be:	dd00      	ble.n	800b4c2 <_strtod_l+0x852>
 800b4c0:	e08d      	b.n	800b5de <_strtod_l+0x96e>
 800b4c2:	23dc      	movs	r3, #220	; 0xdc
 800b4c4:	049b      	lsls	r3, r3, #18
 800b4c6:	4299      	cmp	r1, r3
 800b4c8:	dc00      	bgt.n	800b4cc <_strtod_l+0x85c>
 800b4ca:	e6a7      	b.n	800b21c <_strtod_l+0x5ac>
 800b4cc:	0030      	movs	r0, r6
 800b4ce:	0039      	movs	r1, r7
 800b4d0:	4b31      	ldr	r3, [pc, #196]	; (800b598 <_strtod_l+0x928>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f7f6 f8ca 	bl	800166c <__aeabi_dmul>
 800b4d8:	4b2e      	ldr	r3, [pc, #184]	; (800b594 <_strtod_l+0x924>)
 800b4da:	0006      	movs	r6, r0
 800b4dc:	000f      	movs	r7, r1
 800b4de:	420b      	tst	r3, r1
 800b4e0:	d000      	beq.n	800b4e4 <_strtod_l+0x874>
 800b4e2:	e631      	b.n	800b148 <_strtod_l+0x4d8>
 800b4e4:	2322      	movs	r3, #34	; 0x22
 800b4e6:	9a04      	ldr	r2, [sp, #16]
 800b4e8:	6013      	str	r3, [r2, #0]
 800b4ea:	e62d      	b.n	800b148 <_strtod_l+0x4d8>
 800b4ec:	234b      	movs	r3, #75	; 0x4b
 800b4ee:	1a9a      	subs	r2, r3, r2
 800b4f0:	3b4c      	subs	r3, #76	; 0x4c
 800b4f2:	4093      	lsls	r3, r2
 800b4f4:	4019      	ands	r1, r3
 800b4f6:	000f      	movs	r7, r1
 800b4f8:	e6e3      	b.n	800b2c2 <_strtod_l+0x652>
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	4252      	negs	r2, r2
 800b4fe:	409a      	lsls	r2, r3
 800b500:	4016      	ands	r6, r2
 800b502:	e6de      	b.n	800b2c2 <_strtod_l+0x652>
 800b504:	4925      	ldr	r1, [pc, #148]	; (800b59c <_strtod_l+0x92c>)
 800b506:	1acb      	subs	r3, r1, r3
 800b508:	0001      	movs	r1, r0
 800b50a:	4099      	lsls	r1, r3
 800b50c:	9114      	str	r1, [sp, #80]	; 0x50
 800b50e:	e743      	b.n	800b398 <_strtod_l+0x728>
 800b510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b512:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b514:	9804      	ldr	r0, [sp, #16]
 800b516:	f001 fc5d 	bl	800cdd4 <__lshift>
 800b51a:	901c      	str	r0, [sp, #112]	; 0x70
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d000      	beq.n	800b522 <_strtod_l+0x8b2>
 800b520:	e76e      	b.n	800b400 <_strtod_l+0x790>
 800b522:	e608      	b.n	800b136 <_strtod_l+0x4c6>
 800b524:	970e      	str	r7, [sp, #56]	; 0x38
 800b526:	2800      	cmp	r0, #0
 800b528:	d177      	bne.n	800b61a <_strtod_l+0x9aa>
 800b52a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b52c:	033b      	lsls	r3, r7, #12
 800b52e:	0b1b      	lsrs	r3, r3, #12
 800b530:	2a00      	cmp	r2, #0
 800b532:	d039      	beq.n	800b5a8 <_strtod_l+0x938>
 800b534:	4a1a      	ldr	r2, [pc, #104]	; (800b5a0 <_strtod_l+0x930>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d139      	bne.n	800b5ae <_strtod_l+0x93e>
 800b53a:	2101      	movs	r1, #1
 800b53c:	9b07      	ldr	r3, [sp, #28]
 800b53e:	4249      	negs	r1, r1
 800b540:	0032      	movs	r2, r6
 800b542:	0008      	movs	r0, r1
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00b      	beq.n	800b560 <_strtod_l+0x8f0>
 800b548:	24d4      	movs	r4, #212	; 0xd4
 800b54a:	4b12      	ldr	r3, [pc, #72]	; (800b594 <_strtod_l+0x924>)
 800b54c:	0008      	movs	r0, r1
 800b54e:	403b      	ands	r3, r7
 800b550:	04e4      	lsls	r4, r4, #19
 800b552:	42a3      	cmp	r3, r4
 800b554:	d804      	bhi.n	800b560 <_strtod_l+0x8f0>
 800b556:	306c      	adds	r0, #108	; 0x6c
 800b558:	0d1b      	lsrs	r3, r3, #20
 800b55a:	1ac3      	subs	r3, r0, r3
 800b55c:	4099      	lsls	r1, r3
 800b55e:	0008      	movs	r0, r1
 800b560:	4282      	cmp	r2, r0
 800b562:	d124      	bne.n	800b5ae <_strtod_l+0x93e>
 800b564:	4b0f      	ldr	r3, [pc, #60]	; (800b5a4 <_strtod_l+0x934>)
 800b566:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b568:	4299      	cmp	r1, r3
 800b56a:	d102      	bne.n	800b572 <_strtod_l+0x902>
 800b56c:	3201      	adds	r2, #1
 800b56e:	d100      	bne.n	800b572 <_strtod_l+0x902>
 800b570:	e5e1      	b.n	800b136 <_strtod_l+0x4c6>
 800b572:	4b08      	ldr	r3, [pc, #32]	; (800b594 <_strtod_l+0x924>)
 800b574:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b576:	2600      	movs	r6, #0
 800b578:	401a      	ands	r2, r3
 800b57a:	0013      	movs	r3, r2
 800b57c:	2280      	movs	r2, #128	; 0x80
 800b57e:	0352      	lsls	r2, r2, #13
 800b580:	189f      	adds	r7, r3, r2
 800b582:	9b07      	ldr	r3, [sp, #28]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1a1      	bne.n	800b4cc <_strtod_l+0x85c>
 800b588:	e5de      	b.n	800b148 <_strtod_l+0x4d8>
 800b58a:	46c0      	nop			; (mov r8, r8)
 800b58c:	080144e0 	.word	0x080144e0
 800b590:	fffffc02 	.word	0xfffffc02
 800b594:	7ff00000 	.word	0x7ff00000
 800b598:	39500000 	.word	0x39500000
 800b59c:	fffffbe2 	.word	0xfffffbe2
 800b5a0:	000fffff 	.word	0x000fffff
 800b5a4:	7fefffff 	.word	0x7fefffff
 800b5a8:	4333      	orrs	r3, r6
 800b5aa:	d100      	bne.n	800b5ae <_strtod_l+0x93e>
 800b5ac:	e77c      	b.n	800b4a8 <_strtod_l+0x838>
 800b5ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d01d      	beq.n	800b5f0 <_strtod_l+0x980>
 800b5b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5b8:	4213      	tst	r3, r2
 800b5ba:	d0e2      	beq.n	800b582 <_strtod_l+0x912>
 800b5bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5be:	0030      	movs	r0, r6
 800b5c0:	0039      	movs	r1, r7
 800b5c2:	9a07      	ldr	r2, [sp, #28]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d017      	beq.n	800b5f8 <_strtod_l+0x988>
 800b5c8:	f7ff fb3a 	bl	800ac40 <sulp>
 800b5cc:	0002      	movs	r2, r0
 800b5ce:	000b      	movs	r3, r1
 800b5d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b5d2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b5d4:	f7f5 f8f0 	bl	80007b8 <__aeabi_dadd>
 800b5d8:	0006      	movs	r6, r0
 800b5da:	000f      	movs	r7, r1
 800b5dc:	e7d1      	b.n	800b582 <_strtod_l+0x912>
 800b5de:	2601      	movs	r6, #1
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	4a98      	ldr	r2, [pc, #608]	; (800b844 <_strtod_l+0xbd4>)
 800b5e4:	4276      	negs	r6, r6
 800b5e6:	189b      	adds	r3, r3, r2
 800b5e8:	4a97      	ldr	r2, [pc, #604]	; (800b848 <_strtod_l+0xbd8>)
 800b5ea:	431a      	orrs	r2, r3
 800b5ec:	0017      	movs	r7, r2
 800b5ee:	e7c8      	b.n	800b582 <_strtod_l+0x912>
 800b5f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b5f2:	4233      	tst	r3, r6
 800b5f4:	d0c5      	beq.n	800b582 <_strtod_l+0x912>
 800b5f6:	e7e1      	b.n	800b5bc <_strtod_l+0x94c>
 800b5f8:	f7ff fb22 	bl	800ac40 <sulp>
 800b5fc:	0002      	movs	r2, r0
 800b5fe:	000b      	movs	r3, r1
 800b600:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b602:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b604:	f7f6 faf4 	bl	8001bf0 <__aeabi_dsub>
 800b608:	2200      	movs	r2, #0
 800b60a:	2300      	movs	r3, #0
 800b60c:	0006      	movs	r6, r0
 800b60e:	000f      	movs	r7, r1
 800b610:	f7f4 ff1a 	bl	8000448 <__aeabi_dcmpeq>
 800b614:	2800      	cmp	r0, #0
 800b616:	d0b4      	beq.n	800b582 <_strtod_l+0x912>
 800b618:	e600      	b.n	800b21c <_strtod_l+0x5ac>
 800b61a:	9906      	ldr	r1, [sp, #24]
 800b61c:	9805      	ldr	r0, [sp, #20]
 800b61e:	f001 fdc3 	bl	800d1a8 <__ratio>
 800b622:	2380      	movs	r3, #128	; 0x80
 800b624:	2200      	movs	r2, #0
 800b626:	05db      	lsls	r3, r3, #23
 800b628:	0004      	movs	r4, r0
 800b62a:	000d      	movs	r5, r1
 800b62c:	f7f4 ff1c 	bl	8000468 <__aeabi_dcmple>
 800b630:	2800      	cmp	r0, #0
 800b632:	d06d      	beq.n	800b710 <_strtod_l+0xaa0>
 800b634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b636:	2b00      	cmp	r3, #0
 800b638:	d000      	beq.n	800b63c <_strtod_l+0x9cc>
 800b63a:	e07e      	b.n	800b73a <_strtod_l+0xaca>
 800b63c:	2e00      	cmp	r6, #0
 800b63e:	d158      	bne.n	800b6f2 <_strtod_l+0xa82>
 800b640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b642:	031b      	lsls	r3, r3, #12
 800b644:	d000      	beq.n	800b648 <_strtod_l+0x9d8>
 800b646:	e07f      	b.n	800b748 <_strtod_l+0xad8>
 800b648:	2200      	movs	r2, #0
 800b64a:	0020      	movs	r0, r4
 800b64c:	0029      	movs	r1, r5
 800b64e:	4b7f      	ldr	r3, [pc, #508]	; (800b84c <_strtod_l+0xbdc>)
 800b650:	f7f4 ff00 	bl	8000454 <__aeabi_dcmplt>
 800b654:	2800      	cmp	r0, #0
 800b656:	d158      	bne.n	800b70a <_strtod_l+0xa9a>
 800b658:	0020      	movs	r0, r4
 800b65a:	0029      	movs	r1, r5
 800b65c:	2200      	movs	r2, #0
 800b65e:	4b7c      	ldr	r3, [pc, #496]	; (800b850 <_strtod_l+0xbe0>)
 800b660:	f7f6 f804 	bl	800166c <__aeabi_dmul>
 800b664:	0004      	movs	r4, r0
 800b666:	000d      	movs	r5, r1
 800b668:	2380      	movs	r3, #128	; 0x80
 800b66a:	061b      	lsls	r3, r3, #24
 800b66c:	940a      	str	r4, [sp, #40]	; 0x28
 800b66e:	18eb      	adds	r3, r5, r3
 800b670:	930b      	str	r3, [sp, #44]	; 0x2c
 800b672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b676:	9212      	str	r2, [sp, #72]	; 0x48
 800b678:	9313      	str	r3, [sp, #76]	; 0x4c
 800b67a:	4a76      	ldr	r2, [pc, #472]	; (800b854 <_strtod_l+0xbe4>)
 800b67c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b67e:	4013      	ands	r3, r2
 800b680:	9314      	str	r3, [sp, #80]	; 0x50
 800b682:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b684:	4b74      	ldr	r3, [pc, #464]	; (800b858 <_strtod_l+0xbe8>)
 800b686:	429a      	cmp	r2, r3
 800b688:	d000      	beq.n	800b68c <_strtod_l+0xa1c>
 800b68a:	e091      	b.n	800b7b0 <_strtod_l+0xb40>
 800b68c:	4a73      	ldr	r2, [pc, #460]	; (800b85c <_strtod_l+0xbec>)
 800b68e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b690:	4694      	mov	ip, r2
 800b692:	4463      	add	r3, ip
 800b694:	001f      	movs	r7, r3
 800b696:	0030      	movs	r0, r6
 800b698:	0019      	movs	r1, r3
 800b69a:	f001 fcbd 	bl	800d018 <__ulp>
 800b69e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6a2:	f7f5 ffe3 	bl	800166c <__aeabi_dmul>
 800b6a6:	0032      	movs	r2, r6
 800b6a8:	003b      	movs	r3, r7
 800b6aa:	f7f5 f885 	bl	80007b8 <__aeabi_dadd>
 800b6ae:	4a69      	ldr	r2, [pc, #420]	; (800b854 <_strtod_l+0xbe4>)
 800b6b0:	4b6b      	ldr	r3, [pc, #428]	; (800b860 <_strtod_l+0xbf0>)
 800b6b2:	0006      	movs	r6, r0
 800b6b4:	400a      	ands	r2, r1
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d949      	bls.n	800b74e <_strtod_l+0xade>
 800b6ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b6bc:	4b69      	ldr	r3, [pc, #420]	; (800b864 <_strtod_l+0xbf4>)
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d103      	bne.n	800b6ca <_strtod_l+0xa5a>
 800b6c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	d100      	bne.n	800b6ca <_strtod_l+0xa5a>
 800b6c8:	e535      	b.n	800b136 <_strtod_l+0x4c6>
 800b6ca:	2601      	movs	r6, #1
 800b6cc:	4f65      	ldr	r7, [pc, #404]	; (800b864 <_strtod_l+0xbf4>)
 800b6ce:	4276      	negs	r6, r6
 800b6d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b6d2:	9804      	ldr	r0, [sp, #16]
 800b6d4:	f001 f992 	bl	800c9fc <_Bfree>
 800b6d8:	9908      	ldr	r1, [sp, #32]
 800b6da:	9804      	ldr	r0, [sp, #16]
 800b6dc:	f001 f98e 	bl	800c9fc <_Bfree>
 800b6e0:	9906      	ldr	r1, [sp, #24]
 800b6e2:	9804      	ldr	r0, [sp, #16]
 800b6e4:	f001 f98a 	bl	800c9fc <_Bfree>
 800b6e8:	9905      	ldr	r1, [sp, #20]
 800b6ea:	9804      	ldr	r0, [sp, #16]
 800b6ec:	f001 f986 	bl	800c9fc <_Bfree>
 800b6f0:	e60b      	b.n	800b30a <_strtod_l+0x69a>
 800b6f2:	2e01      	cmp	r6, #1
 800b6f4:	d103      	bne.n	800b6fe <_strtod_l+0xa8e>
 800b6f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d100      	bne.n	800b6fe <_strtod_l+0xa8e>
 800b6fc:	e58e      	b.n	800b21c <_strtod_l+0x5ac>
 800b6fe:	2300      	movs	r3, #0
 800b700:	4c59      	ldr	r4, [pc, #356]	; (800b868 <_strtod_l+0xbf8>)
 800b702:	930a      	str	r3, [sp, #40]	; 0x28
 800b704:	940b      	str	r4, [sp, #44]	; 0x2c
 800b706:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b708:	e01c      	b.n	800b744 <_strtod_l+0xad4>
 800b70a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b70c:	4d50      	ldr	r5, [pc, #320]	; (800b850 <_strtod_l+0xbe0>)
 800b70e:	e7ab      	b.n	800b668 <_strtod_l+0x9f8>
 800b710:	2200      	movs	r2, #0
 800b712:	0020      	movs	r0, r4
 800b714:	0029      	movs	r1, r5
 800b716:	4b4e      	ldr	r3, [pc, #312]	; (800b850 <_strtod_l+0xbe0>)
 800b718:	f7f5 ffa8 	bl	800166c <__aeabi_dmul>
 800b71c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b71e:	0004      	movs	r4, r0
 800b720:	000b      	movs	r3, r1
 800b722:	000d      	movs	r5, r1
 800b724:	2a00      	cmp	r2, #0
 800b726:	d104      	bne.n	800b732 <_strtod_l+0xac2>
 800b728:	2280      	movs	r2, #128	; 0x80
 800b72a:	0612      	lsls	r2, r2, #24
 800b72c:	900a      	str	r0, [sp, #40]	; 0x28
 800b72e:	188b      	adds	r3, r1, r2
 800b730:	e79e      	b.n	800b670 <_strtod_l+0xa00>
 800b732:	0002      	movs	r2, r0
 800b734:	920a      	str	r2, [sp, #40]	; 0x28
 800b736:	930b      	str	r3, [sp, #44]	; 0x2c
 800b738:	e79b      	b.n	800b672 <_strtod_l+0xa02>
 800b73a:	2300      	movs	r3, #0
 800b73c:	4c43      	ldr	r4, [pc, #268]	; (800b84c <_strtod_l+0xbdc>)
 800b73e:	930a      	str	r3, [sp, #40]	; 0x28
 800b740:	940b      	str	r4, [sp, #44]	; 0x2c
 800b742:	2400      	movs	r4, #0
 800b744:	4d41      	ldr	r5, [pc, #260]	; (800b84c <_strtod_l+0xbdc>)
 800b746:	e794      	b.n	800b672 <_strtod_l+0xa02>
 800b748:	2300      	movs	r3, #0
 800b74a:	4c47      	ldr	r4, [pc, #284]	; (800b868 <_strtod_l+0xbf8>)
 800b74c:	e7f7      	b.n	800b73e <_strtod_l+0xace>
 800b74e:	23d4      	movs	r3, #212	; 0xd4
 800b750:	049b      	lsls	r3, r3, #18
 800b752:	18cf      	adds	r7, r1, r3
 800b754:	9b07      	ldr	r3, [sp, #28]
 800b756:	970e      	str	r7, [sp, #56]	; 0x38
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1b9      	bne.n	800b6d0 <_strtod_l+0xa60>
 800b75c:	4b3d      	ldr	r3, [pc, #244]	; (800b854 <_strtod_l+0xbe4>)
 800b75e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b760:	403b      	ands	r3, r7
 800b762:	429a      	cmp	r2, r3
 800b764:	d1b4      	bne.n	800b6d0 <_strtod_l+0xa60>
 800b766:	0020      	movs	r0, r4
 800b768:	0029      	movs	r1, r5
 800b76a:	f7f4 ff07 	bl	800057c <__aeabi_d2lz>
 800b76e:	f7f4 ff41 	bl	80005f4 <__aeabi_l2d>
 800b772:	0002      	movs	r2, r0
 800b774:	000b      	movs	r3, r1
 800b776:	0020      	movs	r0, r4
 800b778:	0029      	movs	r1, r5
 800b77a:	f7f6 fa39 	bl	8001bf0 <__aeabi_dsub>
 800b77e:	033b      	lsls	r3, r7, #12
 800b780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b782:	0b1b      	lsrs	r3, r3, #12
 800b784:	4333      	orrs	r3, r6
 800b786:	4313      	orrs	r3, r2
 800b788:	0004      	movs	r4, r0
 800b78a:	000d      	movs	r5, r1
 800b78c:	4a37      	ldr	r2, [pc, #220]	; (800b86c <_strtod_l+0xbfc>)
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d054      	beq.n	800b83c <_strtod_l+0xbcc>
 800b792:	4b37      	ldr	r3, [pc, #220]	; (800b870 <_strtod_l+0xc00>)
 800b794:	f7f4 fe5e 	bl	8000454 <__aeabi_dcmplt>
 800b798:	2800      	cmp	r0, #0
 800b79a:	d000      	beq.n	800b79e <_strtod_l+0xb2e>
 800b79c:	e4d4      	b.n	800b148 <_strtod_l+0x4d8>
 800b79e:	0020      	movs	r0, r4
 800b7a0:	0029      	movs	r1, r5
 800b7a2:	4a34      	ldr	r2, [pc, #208]	; (800b874 <_strtod_l+0xc04>)
 800b7a4:	4b2a      	ldr	r3, [pc, #168]	; (800b850 <_strtod_l+0xbe0>)
 800b7a6:	f7f4 fe69 	bl	800047c <__aeabi_dcmpgt>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d090      	beq.n	800b6d0 <_strtod_l+0xa60>
 800b7ae:	e4cb      	b.n	800b148 <_strtod_l+0x4d8>
 800b7b0:	9b07      	ldr	r3, [sp, #28]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d02b      	beq.n	800b80e <_strtod_l+0xb9e>
 800b7b6:	23d4      	movs	r3, #212	; 0xd4
 800b7b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b7ba:	04db      	lsls	r3, r3, #19
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d826      	bhi.n	800b80e <_strtod_l+0xb9e>
 800b7c0:	0020      	movs	r0, r4
 800b7c2:	0029      	movs	r1, r5
 800b7c4:	4a2c      	ldr	r2, [pc, #176]	; (800b878 <_strtod_l+0xc08>)
 800b7c6:	4b2d      	ldr	r3, [pc, #180]	; (800b87c <_strtod_l+0xc0c>)
 800b7c8:	f7f4 fe4e 	bl	8000468 <__aeabi_dcmple>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d017      	beq.n	800b800 <_strtod_l+0xb90>
 800b7d0:	0020      	movs	r0, r4
 800b7d2:	0029      	movs	r1, r5
 800b7d4:	f7f4 feb4 	bl	8000540 <__aeabi_d2uiz>
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	d100      	bne.n	800b7de <_strtod_l+0xb6e>
 800b7dc:	3001      	adds	r0, #1
 800b7de:	f7f6 fe0d 	bl	80023fc <__aeabi_ui2d>
 800b7e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7e4:	0004      	movs	r4, r0
 800b7e6:	000b      	movs	r3, r1
 800b7e8:	000d      	movs	r5, r1
 800b7ea:	2a00      	cmp	r2, #0
 800b7ec:	d122      	bne.n	800b834 <_strtod_l+0xbc4>
 800b7ee:	2280      	movs	r2, #128	; 0x80
 800b7f0:	0612      	lsls	r2, r2, #24
 800b7f2:	188b      	adds	r3, r1, r2
 800b7f4:	9016      	str	r0, [sp, #88]	; 0x58
 800b7f6:	9317      	str	r3, [sp, #92]	; 0x5c
 800b7f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b7fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7fc:	9212      	str	r2, [sp, #72]	; 0x48
 800b7fe:	9313      	str	r3, [sp, #76]	; 0x4c
 800b800:	22d6      	movs	r2, #214	; 0xd6
 800b802:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b804:	04d2      	lsls	r2, r2, #19
 800b806:	189b      	adds	r3, r3, r2
 800b808:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b80a:	1a9b      	subs	r3, r3, r2
 800b80c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b80e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b810:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b812:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b814:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b816:	f001 fbff 	bl	800d018 <__ulp>
 800b81a:	0002      	movs	r2, r0
 800b81c:	000b      	movs	r3, r1
 800b81e:	0030      	movs	r0, r6
 800b820:	0039      	movs	r1, r7
 800b822:	f7f5 ff23 	bl	800166c <__aeabi_dmul>
 800b826:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b828:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b82a:	f7f4 ffc5 	bl	80007b8 <__aeabi_dadd>
 800b82e:	0006      	movs	r6, r0
 800b830:	000f      	movs	r7, r1
 800b832:	e78f      	b.n	800b754 <_strtod_l+0xae4>
 800b834:	0002      	movs	r2, r0
 800b836:	9216      	str	r2, [sp, #88]	; 0x58
 800b838:	9317      	str	r3, [sp, #92]	; 0x5c
 800b83a:	e7dd      	b.n	800b7f8 <_strtod_l+0xb88>
 800b83c:	4b10      	ldr	r3, [pc, #64]	; (800b880 <_strtod_l+0xc10>)
 800b83e:	f7f4 fe09 	bl	8000454 <__aeabi_dcmplt>
 800b842:	e7b2      	b.n	800b7aa <_strtod_l+0xb3a>
 800b844:	fff00000 	.word	0xfff00000
 800b848:	000fffff 	.word	0x000fffff
 800b84c:	3ff00000 	.word	0x3ff00000
 800b850:	3fe00000 	.word	0x3fe00000
 800b854:	7ff00000 	.word	0x7ff00000
 800b858:	7fe00000 	.word	0x7fe00000
 800b85c:	fcb00000 	.word	0xfcb00000
 800b860:	7c9fffff 	.word	0x7c9fffff
 800b864:	7fefffff 	.word	0x7fefffff
 800b868:	bff00000 	.word	0xbff00000
 800b86c:	94a03595 	.word	0x94a03595
 800b870:	3fdfffff 	.word	0x3fdfffff
 800b874:	35afe535 	.word	0x35afe535
 800b878:	ffc00000 	.word	0xffc00000
 800b87c:	41dfffff 	.word	0x41dfffff
 800b880:	3fcfffff 	.word	0x3fcfffff

0800b884 <_strtod_r>:
 800b884:	b510      	push	{r4, lr}
 800b886:	4b02      	ldr	r3, [pc, #8]	; (800b890 <_strtod_r+0xc>)
 800b888:	f7ff f9f2 	bl	800ac70 <_strtod_l>
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	46c0      	nop			; (mov r8, r8)
 800b890:	20000444 	.word	0x20000444

0800b894 <strtod>:
 800b894:	b510      	push	{r4, lr}
 800b896:	4c04      	ldr	r4, [pc, #16]	; (800b8a8 <strtod+0x14>)
 800b898:	000a      	movs	r2, r1
 800b89a:	0001      	movs	r1, r0
 800b89c:	4b03      	ldr	r3, [pc, #12]	; (800b8ac <strtod+0x18>)
 800b89e:	6820      	ldr	r0, [r4, #0]
 800b8a0:	f7ff f9e6 	bl	800ac70 <_strtod_l>
 800b8a4:	bd10      	pop	{r4, pc}
 800b8a6:	46c0      	nop			; (mov r8, r8)
 800b8a8:	200006d0 	.word	0x200006d0
 800b8ac:	20000444 	.word	0x20000444

0800b8b0 <_strtol_l.constprop.0>:
 800b8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8b2:	b087      	sub	sp, #28
 800b8b4:	001e      	movs	r6, r3
 800b8b6:	9005      	str	r0, [sp, #20]
 800b8b8:	9101      	str	r1, [sp, #4]
 800b8ba:	9202      	str	r2, [sp, #8]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d048      	beq.n	800b952 <_strtol_l.constprop.0+0xa2>
 800b8c0:	000b      	movs	r3, r1
 800b8c2:	2e24      	cmp	r6, #36	; 0x24
 800b8c4:	d845      	bhi.n	800b952 <_strtol_l.constprop.0+0xa2>
 800b8c6:	4a3b      	ldr	r2, [pc, #236]	; (800b9b4 <_strtol_l.constprop.0+0x104>)
 800b8c8:	2108      	movs	r1, #8
 800b8ca:	4694      	mov	ip, r2
 800b8cc:	001a      	movs	r2, r3
 800b8ce:	4660      	mov	r0, ip
 800b8d0:	7814      	ldrb	r4, [r2, #0]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	5d00      	ldrb	r0, [r0, r4]
 800b8d6:	001d      	movs	r5, r3
 800b8d8:	0007      	movs	r7, r0
 800b8da:	400f      	ands	r7, r1
 800b8dc:	4208      	tst	r0, r1
 800b8de:	d1f5      	bne.n	800b8cc <_strtol_l.constprop.0+0x1c>
 800b8e0:	2c2d      	cmp	r4, #45	; 0x2d
 800b8e2:	d13d      	bne.n	800b960 <_strtol_l.constprop.0+0xb0>
 800b8e4:	2701      	movs	r7, #1
 800b8e6:	781c      	ldrb	r4, [r3, #0]
 800b8e8:	1c95      	adds	r5, r2, #2
 800b8ea:	2e00      	cmp	r6, #0
 800b8ec:	d05e      	beq.n	800b9ac <_strtol_l.constprop.0+0xfc>
 800b8ee:	2e10      	cmp	r6, #16
 800b8f0:	d109      	bne.n	800b906 <_strtol_l.constprop.0+0x56>
 800b8f2:	2c30      	cmp	r4, #48	; 0x30
 800b8f4:	d107      	bne.n	800b906 <_strtol_l.constprop.0+0x56>
 800b8f6:	2220      	movs	r2, #32
 800b8f8:	782b      	ldrb	r3, [r5, #0]
 800b8fa:	4393      	bics	r3, r2
 800b8fc:	2b58      	cmp	r3, #88	; 0x58
 800b8fe:	d150      	bne.n	800b9a2 <_strtol_l.constprop.0+0xf2>
 800b900:	2610      	movs	r6, #16
 800b902:	786c      	ldrb	r4, [r5, #1]
 800b904:	3502      	adds	r5, #2
 800b906:	4b2c      	ldr	r3, [pc, #176]	; (800b9b8 <_strtol_l.constprop.0+0x108>)
 800b908:	0031      	movs	r1, r6
 800b90a:	18fb      	adds	r3, r7, r3
 800b90c:	0018      	movs	r0, r3
 800b90e:	9303      	str	r3, [sp, #12]
 800b910:	f7f4 fc9a 	bl	8000248 <__aeabi_uidivmod>
 800b914:	2200      	movs	r2, #0
 800b916:	9104      	str	r1, [sp, #16]
 800b918:	2101      	movs	r1, #1
 800b91a:	4684      	mov	ip, r0
 800b91c:	0010      	movs	r0, r2
 800b91e:	4249      	negs	r1, r1
 800b920:	0023      	movs	r3, r4
 800b922:	3b30      	subs	r3, #48	; 0x30
 800b924:	2b09      	cmp	r3, #9
 800b926:	d903      	bls.n	800b930 <_strtol_l.constprop.0+0x80>
 800b928:	3b11      	subs	r3, #17
 800b92a:	2b19      	cmp	r3, #25
 800b92c:	d81d      	bhi.n	800b96a <_strtol_l.constprop.0+0xba>
 800b92e:	330a      	adds	r3, #10
 800b930:	429e      	cmp	r6, r3
 800b932:	dd1e      	ble.n	800b972 <_strtol_l.constprop.0+0xc2>
 800b934:	1c54      	adds	r4, r2, #1
 800b936:	d009      	beq.n	800b94c <_strtol_l.constprop.0+0x9c>
 800b938:	000a      	movs	r2, r1
 800b93a:	4584      	cmp	ip, r0
 800b93c:	d306      	bcc.n	800b94c <_strtol_l.constprop.0+0x9c>
 800b93e:	d102      	bne.n	800b946 <_strtol_l.constprop.0+0x96>
 800b940:	9c04      	ldr	r4, [sp, #16]
 800b942:	429c      	cmp	r4, r3
 800b944:	db02      	blt.n	800b94c <_strtol_l.constprop.0+0x9c>
 800b946:	2201      	movs	r2, #1
 800b948:	4370      	muls	r0, r6
 800b94a:	1818      	adds	r0, r3, r0
 800b94c:	782c      	ldrb	r4, [r5, #0]
 800b94e:	3501      	adds	r5, #1
 800b950:	e7e6      	b.n	800b920 <_strtol_l.constprop.0+0x70>
 800b952:	f000 fb57 	bl	800c004 <__errno>
 800b956:	2316      	movs	r3, #22
 800b958:	6003      	str	r3, [r0, #0]
 800b95a:	2000      	movs	r0, #0
 800b95c:	b007      	add	sp, #28
 800b95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b960:	2c2b      	cmp	r4, #43	; 0x2b
 800b962:	d1c2      	bne.n	800b8ea <_strtol_l.constprop.0+0x3a>
 800b964:	781c      	ldrb	r4, [r3, #0]
 800b966:	1c95      	adds	r5, r2, #2
 800b968:	e7bf      	b.n	800b8ea <_strtol_l.constprop.0+0x3a>
 800b96a:	0023      	movs	r3, r4
 800b96c:	3b61      	subs	r3, #97	; 0x61
 800b96e:	2b19      	cmp	r3, #25
 800b970:	d9dd      	bls.n	800b92e <_strtol_l.constprop.0+0x7e>
 800b972:	1c53      	adds	r3, r2, #1
 800b974:	d109      	bne.n	800b98a <_strtol_l.constprop.0+0xda>
 800b976:	2322      	movs	r3, #34	; 0x22
 800b978:	9a05      	ldr	r2, [sp, #20]
 800b97a:	9803      	ldr	r0, [sp, #12]
 800b97c:	6013      	str	r3, [r2, #0]
 800b97e:	9b02      	ldr	r3, [sp, #8]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d0eb      	beq.n	800b95c <_strtol_l.constprop.0+0xac>
 800b984:	1e6b      	subs	r3, r5, #1
 800b986:	9301      	str	r3, [sp, #4]
 800b988:	e007      	b.n	800b99a <_strtol_l.constprop.0+0xea>
 800b98a:	2f00      	cmp	r7, #0
 800b98c:	d000      	beq.n	800b990 <_strtol_l.constprop.0+0xe0>
 800b98e:	4240      	negs	r0, r0
 800b990:	9b02      	ldr	r3, [sp, #8]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d0e2      	beq.n	800b95c <_strtol_l.constprop.0+0xac>
 800b996:	2a00      	cmp	r2, #0
 800b998:	d1f4      	bne.n	800b984 <_strtol_l.constprop.0+0xd4>
 800b99a:	9b02      	ldr	r3, [sp, #8]
 800b99c:	9a01      	ldr	r2, [sp, #4]
 800b99e:	601a      	str	r2, [r3, #0]
 800b9a0:	e7dc      	b.n	800b95c <_strtol_l.constprop.0+0xac>
 800b9a2:	2430      	movs	r4, #48	; 0x30
 800b9a4:	2e00      	cmp	r6, #0
 800b9a6:	d1ae      	bne.n	800b906 <_strtol_l.constprop.0+0x56>
 800b9a8:	3608      	adds	r6, #8
 800b9aa:	e7ac      	b.n	800b906 <_strtol_l.constprop.0+0x56>
 800b9ac:	2c30      	cmp	r4, #48	; 0x30
 800b9ae:	d0a2      	beq.n	800b8f6 <_strtol_l.constprop.0+0x46>
 800b9b0:	260a      	movs	r6, #10
 800b9b2:	e7a8      	b.n	800b906 <_strtol_l.constprop.0+0x56>
 800b9b4:	08014509 	.word	0x08014509
 800b9b8:	7fffffff 	.word	0x7fffffff

0800b9bc <_strtol_r>:
 800b9bc:	b510      	push	{r4, lr}
 800b9be:	f7ff ff77 	bl	800b8b0 <_strtol_l.constprop.0>
 800b9c2:	bd10      	pop	{r4, pc}

0800b9c4 <strtol>:
 800b9c4:	b510      	push	{r4, lr}
 800b9c6:	4c04      	ldr	r4, [pc, #16]	; (800b9d8 <strtol+0x14>)
 800b9c8:	0013      	movs	r3, r2
 800b9ca:	000a      	movs	r2, r1
 800b9cc:	0001      	movs	r1, r0
 800b9ce:	6820      	ldr	r0, [r4, #0]
 800b9d0:	f7ff ff6e 	bl	800b8b0 <_strtol_l.constprop.0>
 800b9d4:	bd10      	pop	{r4, pc}
 800b9d6:	46c0      	nop			; (mov r8, r8)
 800b9d8:	200006d0 	.word	0x200006d0

0800b9dc <_strtoul_l.constprop.0>:
 800b9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9de:	b087      	sub	sp, #28
 800b9e0:	9202      	str	r2, [sp, #8]
 800b9e2:	4a3e      	ldr	r2, [pc, #248]	; (800badc <_strtoul_l.constprop.0+0x100>)
 800b9e4:	001e      	movs	r6, r3
 800b9e6:	9101      	str	r1, [sp, #4]
 800b9e8:	000b      	movs	r3, r1
 800b9ea:	4694      	mov	ip, r2
 800b9ec:	2108      	movs	r1, #8
 800b9ee:	9005      	str	r0, [sp, #20]
 800b9f0:	001a      	movs	r2, r3
 800b9f2:	4660      	mov	r0, ip
 800b9f4:	7814      	ldrb	r4, [r2, #0]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	5d00      	ldrb	r0, [r0, r4]
 800b9fa:	001d      	movs	r5, r3
 800b9fc:	0007      	movs	r7, r0
 800b9fe:	400f      	ands	r7, r1
 800ba00:	4208      	tst	r0, r1
 800ba02:	d1f5      	bne.n	800b9f0 <_strtoul_l.constprop.0+0x14>
 800ba04:	2c2d      	cmp	r4, #45	; 0x2d
 800ba06:	d13d      	bne.n	800ba84 <_strtoul_l.constprop.0+0xa8>
 800ba08:	2701      	movs	r7, #1
 800ba0a:	781c      	ldrb	r4, [r3, #0]
 800ba0c:	1c95      	adds	r5, r2, #2
 800ba0e:	2e00      	cmp	r6, #0
 800ba10:	d05f      	beq.n	800bad2 <_strtoul_l.constprop.0+0xf6>
 800ba12:	2e10      	cmp	r6, #16
 800ba14:	d109      	bne.n	800ba2a <_strtoul_l.constprop.0+0x4e>
 800ba16:	2c30      	cmp	r4, #48	; 0x30
 800ba18:	d107      	bne.n	800ba2a <_strtoul_l.constprop.0+0x4e>
 800ba1a:	2220      	movs	r2, #32
 800ba1c:	782b      	ldrb	r3, [r5, #0]
 800ba1e:	4393      	bics	r3, r2
 800ba20:	2b58      	cmp	r3, #88	; 0x58
 800ba22:	d151      	bne.n	800bac8 <_strtoul_l.constprop.0+0xec>
 800ba24:	2610      	movs	r6, #16
 800ba26:	786c      	ldrb	r4, [r5, #1]
 800ba28:	3502      	adds	r5, #2
 800ba2a:	2001      	movs	r0, #1
 800ba2c:	0031      	movs	r1, r6
 800ba2e:	4240      	negs	r0, r0
 800ba30:	f7f4 fb84 	bl	800013c <__udivsi3>
 800ba34:	9003      	str	r0, [sp, #12]
 800ba36:	2001      	movs	r0, #1
 800ba38:	0031      	movs	r1, r6
 800ba3a:	4240      	negs	r0, r0
 800ba3c:	f7f4 fc04 	bl	8000248 <__aeabi_uidivmod>
 800ba40:	2300      	movs	r3, #0
 800ba42:	2201      	movs	r2, #1
 800ba44:	9104      	str	r1, [sp, #16]
 800ba46:	2101      	movs	r1, #1
 800ba48:	0018      	movs	r0, r3
 800ba4a:	4694      	mov	ip, r2
 800ba4c:	4249      	negs	r1, r1
 800ba4e:	0022      	movs	r2, r4
 800ba50:	3a30      	subs	r2, #48	; 0x30
 800ba52:	2a09      	cmp	r2, #9
 800ba54:	d903      	bls.n	800ba5e <_strtoul_l.constprop.0+0x82>
 800ba56:	3a11      	subs	r2, #17
 800ba58:	2a19      	cmp	r2, #25
 800ba5a:	d818      	bhi.n	800ba8e <_strtoul_l.constprop.0+0xb2>
 800ba5c:	320a      	adds	r2, #10
 800ba5e:	4296      	cmp	r6, r2
 800ba60:	dd19      	ble.n	800ba96 <_strtoul_l.constprop.0+0xba>
 800ba62:	1c5c      	adds	r4, r3, #1
 800ba64:	d00b      	beq.n	800ba7e <_strtoul_l.constprop.0+0xa2>
 800ba66:	9c03      	ldr	r4, [sp, #12]
 800ba68:	000b      	movs	r3, r1
 800ba6a:	4284      	cmp	r4, r0
 800ba6c:	d307      	bcc.n	800ba7e <_strtoul_l.constprop.0+0xa2>
 800ba6e:	d103      	bne.n	800ba78 <_strtoul_l.constprop.0+0x9c>
 800ba70:	9c04      	ldr	r4, [sp, #16]
 800ba72:	000b      	movs	r3, r1
 800ba74:	4294      	cmp	r4, r2
 800ba76:	db02      	blt.n	800ba7e <_strtoul_l.constprop.0+0xa2>
 800ba78:	4663      	mov	r3, ip
 800ba7a:	4370      	muls	r0, r6
 800ba7c:	1810      	adds	r0, r2, r0
 800ba7e:	782c      	ldrb	r4, [r5, #0]
 800ba80:	3501      	adds	r5, #1
 800ba82:	e7e4      	b.n	800ba4e <_strtoul_l.constprop.0+0x72>
 800ba84:	2c2b      	cmp	r4, #43	; 0x2b
 800ba86:	d1c2      	bne.n	800ba0e <_strtoul_l.constprop.0+0x32>
 800ba88:	781c      	ldrb	r4, [r3, #0]
 800ba8a:	1c95      	adds	r5, r2, #2
 800ba8c:	e7bf      	b.n	800ba0e <_strtoul_l.constprop.0+0x32>
 800ba8e:	0022      	movs	r2, r4
 800ba90:	3a61      	subs	r2, #97	; 0x61
 800ba92:	2a19      	cmp	r2, #25
 800ba94:	d9e2      	bls.n	800ba5c <_strtoul_l.constprop.0+0x80>
 800ba96:	1c5a      	adds	r2, r3, #1
 800ba98:	d108      	bne.n	800baac <_strtoul_l.constprop.0+0xd0>
 800ba9a:	2222      	movs	r2, #34	; 0x22
 800ba9c:	9905      	ldr	r1, [sp, #20]
 800ba9e:	0018      	movs	r0, r3
 800baa0:	600a      	str	r2, [r1, #0]
 800baa2:	9a02      	ldr	r2, [sp, #8]
 800baa4:	2a00      	cmp	r2, #0
 800baa6:	d109      	bne.n	800babc <_strtoul_l.constprop.0+0xe0>
 800baa8:	b007      	add	sp, #28
 800baaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baac:	2f00      	cmp	r7, #0
 800baae:	d000      	beq.n	800bab2 <_strtoul_l.constprop.0+0xd6>
 800bab0:	4240      	negs	r0, r0
 800bab2:	9a02      	ldr	r2, [sp, #8]
 800bab4:	2a00      	cmp	r2, #0
 800bab6:	d0f7      	beq.n	800baa8 <_strtoul_l.constprop.0+0xcc>
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <_strtoul_l.constprop.0+0xe4>
 800babc:	1e6b      	subs	r3, r5, #1
 800babe:	9301      	str	r3, [sp, #4]
 800bac0:	9b02      	ldr	r3, [sp, #8]
 800bac2:	9a01      	ldr	r2, [sp, #4]
 800bac4:	601a      	str	r2, [r3, #0]
 800bac6:	e7ef      	b.n	800baa8 <_strtoul_l.constprop.0+0xcc>
 800bac8:	2430      	movs	r4, #48	; 0x30
 800baca:	2e00      	cmp	r6, #0
 800bacc:	d1ad      	bne.n	800ba2a <_strtoul_l.constprop.0+0x4e>
 800bace:	3608      	adds	r6, #8
 800bad0:	e7ab      	b.n	800ba2a <_strtoul_l.constprop.0+0x4e>
 800bad2:	2c30      	cmp	r4, #48	; 0x30
 800bad4:	d0a1      	beq.n	800ba1a <_strtoul_l.constprop.0+0x3e>
 800bad6:	260a      	movs	r6, #10
 800bad8:	e7a7      	b.n	800ba2a <_strtoul_l.constprop.0+0x4e>
 800bada:	46c0      	nop			; (mov r8, r8)
 800badc:	08014509 	.word	0x08014509

0800bae0 <_strtoul_r>:
 800bae0:	b510      	push	{r4, lr}
 800bae2:	f7ff ff7b 	bl	800b9dc <_strtoul_l.constprop.0>
 800bae6:	bd10      	pop	{r4, pc}

0800bae8 <strtoul>:
 800bae8:	b510      	push	{r4, lr}
 800baea:	4c04      	ldr	r4, [pc, #16]	; (800bafc <strtoul+0x14>)
 800baec:	0013      	movs	r3, r2
 800baee:	000a      	movs	r2, r1
 800baf0:	0001      	movs	r1, r0
 800baf2:	6820      	ldr	r0, [r4, #0]
 800baf4:	f7ff ff72 	bl	800b9dc <_strtoul_l.constprop.0>
 800baf8:	bd10      	pop	{r4, pc}
 800bafa:	46c0      	nop			; (mov r8, r8)
 800bafc:	200006d0 	.word	0x200006d0

0800bb00 <std>:
 800bb00:	2300      	movs	r3, #0
 800bb02:	b510      	push	{r4, lr}
 800bb04:	0004      	movs	r4, r0
 800bb06:	6003      	str	r3, [r0, #0]
 800bb08:	6043      	str	r3, [r0, #4]
 800bb0a:	6083      	str	r3, [r0, #8]
 800bb0c:	8181      	strh	r1, [r0, #12]
 800bb0e:	6643      	str	r3, [r0, #100]	; 0x64
 800bb10:	81c2      	strh	r2, [r0, #14]
 800bb12:	6103      	str	r3, [r0, #16]
 800bb14:	6143      	str	r3, [r0, #20]
 800bb16:	6183      	str	r3, [r0, #24]
 800bb18:	0019      	movs	r1, r3
 800bb1a:	2208      	movs	r2, #8
 800bb1c:	305c      	adds	r0, #92	; 0x5c
 800bb1e:	f000 f97d 	bl	800be1c <memset>
 800bb22:	4b0b      	ldr	r3, [pc, #44]	; (800bb50 <std+0x50>)
 800bb24:	61e4      	str	r4, [r4, #28]
 800bb26:	6223      	str	r3, [r4, #32]
 800bb28:	4b0a      	ldr	r3, [pc, #40]	; (800bb54 <std+0x54>)
 800bb2a:	6263      	str	r3, [r4, #36]	; 0x24
 800bb2c:	4b0a      	ldr	r3, [pc, #40]	; (800bb58 <std+0x58>)
 800bb2e:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb30:	4b0a      	ldr	r3, [pc, #40]	; (800bb5c <std+0x5c>)
 800bb32:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb34:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <std+0x60>)
 800bb36:	429c      	cmp	r4, r3
 800bb38:	d005      	beq.n	800bb46 <std+0x46>
 800bb3a:	4b0a      	ldr	r3, [pc, #40]	; (800bb64 <std+0x64>)
 800bb3c:	429c      	cmp	r4, r3
 800bb3e:	d002      	beq.n	800bb46 <std+0x46>
 800bb40:	4b09      	ldr	r3, [pc, #36]	; (800bb68 <std+0x68>)
 800bb42:	429c      	cmp	r4, r3
 800bb44:	d103      	bne.n	800bb4e <std+0x4e>
 800bb46:	0020      	movs	r0, r4
 800bb48:	3058      	adds	r0, #88	; 0x58
 800bb4a:	f000 fa85 	bl	800c058 <__retarget_lock_init_recursive>
 800bb4e:	bd10      	pop	{r4, pc}
 800bb50:	0800bd81 	.word	0x0800bd81
 800bb54:	0800bdad 	.word	0x0800bdad
 800bb58:	0800bde5 	.word	0x0800bde5
 800bb5c:	0800be11 	.word	0x0800be11
 800bb60:	20000c6c 	.word	0x20000c6c
 800bb64:	20000cd4 	.word	0x20000cd4
 800bb68:	20000d3c 	.word	0x20000d3c

0800bb6c <stdio_exit_handler>:
 800bb6c:	b510      	push	{r4, lr}
 800bb6e:	4a03      	ldr	r2, [pc, #12]	; (800bb7c <stdio_exit_handler+0x10>)
 800bb70:	4903      	ldr	r1, [pc, #12]	; (800bb80 <stdio_exit_handler+0x14>)
 800bb72:	4804      	ldr	r0, [pc, #16]	; (800bb84 <stdio_exit_handler+0x18>)
 800bb74:	f000 f86c 	bl	800bc50 <_fwalk_sglue>
 800bb78:	bd10      	pop	{r4, pc}
 800bb7a:	46c0      	nop			; (mov r8, r8)
 800bb7c:	20000438 	.word	0x20000438
 800bb80:	0800fb59 	.word	0x0800fb59
 800bb84:	200005b0 	.word	0x200005b0

0800bb88 <cleanup_stdio>:
 800bb88:	6841      	ldr	r1, [r0, #4]
 800bb8a:	4b0b      	ldr	r3, [pc, #44]	; (800bbb8 <cleanup_stdio+0x30>)
 800bb8c:	b510      	push	{r4, lr}
 800bb8e:	0004      	movs	r4, r0
 800bb90:	4299      	cmp	r1, r3
 800bb92:	d001      	beq.n	800bb98 <cleanup_stdio+0x10>
 800bb94:	f003 ffe0 	bl	800fb58 <_fclose_r>
 800bb98:	68a1      	ldr	r1, [r4, #8]
 800bb9a:	4b08      	ldr	r3, [pc, #32]	; (800bbbc <cleanup_stdio+0x34>)
 800bb9c:	4299      	cmp	r1, r3
 800bb9e:	d002      	beq.n	800bba6 <cleanup_stdio+0x1e>
 800bba0:	0020      	movs	r0, r4
 800bba2:	f003 ffd9 	bl	800fb58 <_fclose_r>
 800bba6:	68e1      	ldr	r1, [r4, #12]
 800bba8:	4b05      	ldr	r3, [pc, #20]	; (800bbc0 <cleanup_stdio+0x38>)
 800bbaa:	4299      	cmp	r1, r3
 800bbac:	d002      	beq.n	800bbb4 <cleanup_stdio+0x2c>
 800bbae:	0020      	movs	r0, r4
 800bbb0:	f003 ffd2 	bl	800fb58 <_fclose_r>
 800bbb4:	bd10      	pop	{r4, pc}
 800bbb6:	46c0      	nop			; (mov r8, r8)
 800bbb8:	20000c6c 	.word	0x20000c6c
 800bbbc:	20000cd4 	.word	0x20000cd4
 800bbc0:	20000d3c 	.word	0x20000d3c

0800bbc4 <global_stdio_init.part.0>:
 800bbc4:	b510      	push	{r4, lr}
 800bbc6:	4b09      	ldr	r3, [pc, #36]	; (800bbec <global_stdio_init.part.0+0x28>)
 800bbc8:	4a09      	ldr	r2, [pc, #36]	; (800bbf0 <global_stdio_init.part.0+0x2c>)
 800bbca:	2104      	movs	r1, #4
 800bbcc:	601a      	str	r2, [r3, #0]
 800bbce:	4809      	ldr	r0, [pc, #36]	; (800bbf4 <global_stdio_init.part.0+0x30>)
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f7ff ff95 	bl	800bb00 <std>
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	2109      	movs	r1, #9
 800bbda:	4807      	ldr	r0, [pc, #28]	; (800bbf8 <global_stdio_init.part.0+0x34>)
 800bbdc:	f7ff ff90 	bl	800bb00 <std>
 800bbe0:	2202      	movs	r2, #2
 800bbe2:	2112      	movs	r1, #18
 800bbe4:	4805      	ldr	r0, [pc, #20]	; (800bbfc <global_stdio_init.part.0+0x38>)
 800bbe6:	f7ff ff8b 	bl	800bb00 <std>
 800bbea:	bd10      	pop	{r4, pc}
 800bbec:	20000da4 	.word	0x20000da4
 800bbf0:	0800bb6d 	.word	0x0800bb6d
 800bbf4:	20000c6c 	.word	0x20000c6c
 800bbf8:	20000cd4 	.word	0x20000cd4
 800bbfc:	20000d3c 	.word	0x20000d3c

0800bc00 <__sfp_lock_acquire>:
 800bc00:	b510      	push	{r4, lr}
 800bc02:	4802      	ldr	r0, [pc, #8]	; (800bc0c <__sfp_lock_acquire+0xc>)
 800bc04:	f000 fa2a 	bl	800c05c <__retarget_lock_acquire_recursive>
 800bc08:	bd10      	pop	{r4, pc}
 800bc0a:	46c0      	nop			; (mov r8, r8)
 800bc0c:	20000dae 	.word	0x20000dae

0800bc10 <__sfp_lock_release>:
 800bc10:	b510      	push	{r4, lr}
 800bc12:	4802      	ldr	r0, [pc, #8]	; (800bc1c <__sfp_lock_release+0xc>)
 800bc14:	f000 fa23 	bl	800c05e <__retarget_lock_release_recursive>
 800bc18:	bd10      	pop	{r4, pc}
 800bc1a:	46c0      	nop			; (mov r8, r8)
 800bc1c:	20000dae 	.word	0x20000dae

0800bc20 <__sinit>:
 800bc20:	b510      	push	{r4, lr}
 800bc22:	0004      	movs	r4, r0
 800bc24:	f7ff ffec 	bl	800bc00 <__sfp_lock_acquire>
 800bc28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d002      	beq.n	800bc34 <__sinit+0x14>
 800bc2e:	f7ff ffef 	bl	800bc10 <__sfp_lock_release>
 800bc32:	bd10      	pop	{r4, pc}
 800bc34:	4b04      	ldr	r3, [pc, #16]	; (800bc48 <__sinit+0x28>)
 800bc36:	6363      	str	r3, [r4, #52]	; 0x34
 800bc38:	4b04      	ldr	r3, [pc, #16]	; (800bc4c <__sinit+0x2c>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d1f6      	bne.n	800bc2e <__sinit+0xe>
 800bc40:	f7ff ffc0 	bl	800bbc4 <global_stdio_init.part.0>
 800bc44:	e7f3      	b.n	800bc2e <__sinit+0xe>
 800bc46:	46c0      	nop			; (mov r8, r8)
 800bc48:	0800bb89 	.word	0x0800bb89
 800bc4c:	20000da4 	.word	0x20000da4

0800bc50 <_fwalk_sglue>:
 800bc50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc52:	0014      	movs	r4, r2
 800bc54:	2600      	movs	r6, #0
 800bc56:	9000      	str	r0, [sp, #0]
 800bc58:	9101      	str	r1, [sp, #4]
 800bc5a:	68a5      	ldr	r5, [r4, #8]
 800bc5c:	6867      	ldr	r7, [r4, #4]
 800bc5e:	3f01      	subs	r7, #1
 800bc60:	d504      	bpl.n	800bc6c <_fwalk_sglue+0x1c>
 800bc62:	6824      	ldr	r4, [r4, #0]
 800bc64:	2c00      	cmp	r4, #0
 800bc66:	d1f8      	bne.n	800bc5a <_fwalk_sglue+0xa>
 800bc68:	0030      	movs	r0, r6
 800bc6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc6c:	89ab      	ldrh	r3, [r5, #12]
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d908      	bls.n	800bc84 <_fwalk_sglue+0x34>
 800bc72:	220e      	movs	r2, #14
 800bc74:	5eab      	ldrsh	r3, [r5, r2]
 800bc76:	3301      	adds	r3, #1
 800bc78:	d004      	beq.n	800bc84 <_fwalk_sglue+0x34>
 800bc7a:	0029      	movs	r1, r5
 800bc7c:	9800      	ldr	r0, [sp, #0]
 800bc7e:	9b01      	ldr	r3, [sp, #4]
 800bc80:	4798      	blx	r3
 800bc82:	4306      	orrs	r6, r0
 800bc84:	3568      	adds	r5, #104	; 0x68
 800bc86:	e7ea      	b.n	800bc5e <_fwalk_sglue+0xe>

0800bc88 <snprintf>:
 800bc88:	b40c      	push	{r2, r3}
 800bc8a:	b530      	push	{r4, r5, lr}
 800bc8c:	4b17      	ldr	r3, [pc, #92]	; (800bcec <snprintf+0x64>)
 800bc8e:	000c      	movs	r4, r1
 800bc90:	681d      	ldr	r5, [r3, #0]
 800bc92:	b09d      	sub	sp, #116	; 0x74
 800bc94:	2900      	cmp	r1, #0
 800bc96:	da08      	bge.n	800bcaa <snprintf+0x22>
 800bc98:	238b      	movs	r3, #139	; 0x8b
 800bc9a:	2001      	movs	r0, #1
 800bc9c:	602b      	str	r3, [r5, #0]
 800bc9e:	4240      	negs	r0, r0
 800bca0:	b01d      	add	sp, #116	; 0x74
 800bca2:	bc30      	pop	{r4, r5}
 800bca4:	bc08      	pop	{r3}
 800bca6:	b002      	add	sp, #8
 800bca8:	4718      	bx	r3
 800bcaa:	2382      	movs	r3, #130	; 0x82
 800bcac:	466a      	mov	r2, sp
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	8293      	strh	r3, [r2, #20]
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	9002      	str	r0, [sp, #8]
 800bcb6:	9006      	str	r0, [sp, #24]
 800bcb8:	4299      	cmp	r1, r3
 800bcba:	d000      	beq.n	800bcbe <snprintf+0x36>
 800bcbc:	1e4b      	subs	r3, r1, #1
 800bcbe:	9304      	str	r3, [sp, #16]
 800bcc0:	9307      	str	r3, [sp, #28]
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	466a      	mov	r2, sp
 800bcc6:	425b      	negs	r3, r3
 800bcc8:	82d3      	strh	r3, [r2, #22]
 800bcca:	0028      	movs	r0, r5
 800bccc:	ab21      	add	r3, sp, #132	; 0x84
 800bcce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bcd0:	a902      	add	r1, sp, #8
 800bcd2:	9301      	str	r3, [sp, #4]
 800bcd4:	f001 fae2 	bl	800d29c <_svfprintf_r>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	da01      	bge.n	800bce0 <snprintf+0x58>
 800bcdc:	238b      	movs	r3, #139	; 0x8b
 800bcde:	602b      	str	r3, [r5, #0]
 800bce0:	2c00      	cmp	r4, #0
 800bce2:	d0dd      	beq.n	800bca0 <snprintf+0x18>
 800bce4:	2200      	movs	r2, #0
 800bce6:	9b02      	ldr	r3, [sp, #8]
 800bce8:	701a      	strb	r2, [r3, #0]
 800bcea:	e7d9      	b.n	800bca0 <snprintf+0x18>
 800bcec:	200006d0 	.word	0x200006d0

0800bcf0 <sprintf>:
 800bcf0:	b40e      	push	{r1, r2, r3}
 800bcf2:	b500      	push	{lr}
 800bcf4:	490b      	ldr	r1, [pc, #44]	; (800bd24 <sprintf+0x34>)
 800bcf6:	b09c      	sub	sp, #112	; 0x70
 800bcf8:	ab1d      	add	r3, sp, #116	; 0x74
 800bcfa:	9002      	str	r0, [sp, #8]
 800bcfc:	9006      	str	r0, [sp, #24]
 800bcfe:	9107      	str	r1, [sp, #28]
 800bd00:	9104      	str	r1, [sp, #16]
 800bd02:	4809      	ldr	r0, [pc, #36]	; (800bd28 <sprintf+0x38>)
 800bd04:	4909      	ldr	r1, [pc, #36]	; (800bd2c <sprintf+0x3c>)
 800bd06:	cb04      	ldmia	r3!, {r2}
 800bd08:	9105      	str	r1, [sp, #20]
 800bd0a:	6800      	ldr	r0, [r0, #0]
 800bd0c:	a902      	add	r1, sp, #8
 800bd0e:	9301      	str	r3, [sp, #4]
 800bd10:	f001 fac4 	bl	800d29c <_svfprintf_r>
 800bd14:	2200      	movs	r2, #0
 800bd16:	9b02      	ldr	r3, [sp, #8]
 800bd18:	701a      	strb	r2, [r3, #0]
 800bd1a:	b01c      	add	sp, #112	; 0x70
 800bd1c:	bc08      	pop	{r3}
 800bd1e:	b003      	add	sp, #12
 800bd20:	4718      	bx	r3
 800bd22:	46c0      	nop			; (mov r8, r8)
 800bd24:	7fffffff 	.word	0x7fffffff
 800bd28:	200006d0 	.word	0x200006d0
 800bd2c:	ffff0208 	.word	0xffff0208

0800bd30 <sscanf>:
 800bd30:	b40e      	push	{r1, r2, r3}
 800bd32:	b530      	push	{r4, r5, lr}
 800bd34:	2381      	movs	r3, #129	; 0x81
 800bd36:	b09c      	sub	sp, #112	; 0x70
 800bd38:	466a      	mov	r2, sp
 800bd3a:	ac1f      	add	r4, sp, #124	; 0x7c
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	cc20      	ldmia	r4!, {r5}
 800bd40:	8293      	strh	r3, [r2, #20]
 800bd42:	9002      	str	r0, [sp, #8]
 800bd44:	9006      	str	r0, [sp, #24]
 800bd46:	f7f4 f9dd 	bl	8000104 <strlen>
 800bd4a:	4b0b      	ldr	r3, [pc, #44]	; (800bd78 <sscanf+0x48>)
 800bd4c:	466a      	mov	r2, sp
 800bd4e:	930a      	str	r3, [sp, #40]	; 0x28
 800bd50:	2300      	movs	r3, #0
 800bd52:	9003      	str	r0, [sp, #12]
 800bd54:	9007      	str	r0, [sp, #28]
 800bd56:	4809      	ldr	r0, [pc, #36]	; (800bd7c <sscanf+0x4c>)
 800bd58:	930e      	str	r3, [sp, #56]	; 0x38
 800bd5a:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	82d3      	strh	r3, [r2, #22]
 800bd60:	a902      	add	r1, sp, #8
 800bd62:	0023      	movs	r3, r4
 800bd64:	002a      	movs	r2, r5
 800bd66:	6800      	ldr	r0, [r0, #0]
 800bd68:	9401      	str	r4, [sp, #4]
 800bd6a:	f002 fcd9 	bl	800e720 <__ssvfscanf_r>
 800bd6e:	b01c      	add	sp, #112	; 0x70
 800bd70:	bc30      	pop	{r4, r5}
 800bd72:	bc08      	pop	{r3}
 800bd74:	b003      	add	sp, #12
 800bd76:	4718      	bx	r3
 800bd78:	0800bda9 	.word	0x0800bda9
 800bd7c:	200006d0 	.word	0x200006d0

0800bd80 <__sread>:
 800bd80:	b570      	push	{r4, r5, r6, lr}
 800bd82:	000c      	movs	r4, r1
 800bd84:	250e      	movs	r5, #14
 800bd86:	5f49      	ldrsh	r1, [r1, r5]
 800bd88:	f000 f902 	bl	800bf90 <_read_r>
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	db03      	blt.n	800bd98 <__sread+0x18>
 800bd90:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bd92:	181b      	adds	r3, r3, r0
 800bd94:	6523      	str	r3, [r4, #80]	; 0x50
 800bd96:	bd70      	pop	{r4, r5, r6, pc}
 800bd98:	89a3      	ldrh	r3, [r4, #12]
 800bd9a:	4a02      	ldr	r2, [pc, #8]	; (800bda4 <__sread+0x24>)
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	81a3      	strh	r3, [r4, #12]
 800bda0:	e7f9      	b.n	800bd96 <__sread+0x16>
 800bda2:	46c0      	nop			; (mov r8, r8)
 800bda4:	ffffefff 	.word	0xffffefff

0800bda8 <__seofread>:
 800bda8:	2000      	movs	r0, #0
 800bdaa:	4770      	bx	lr

0800bdac <__swrite>:
 800bdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdae:	001f      	movs	r7, r3
 800bdb0:	898b      	ldrh	r3, [r1, #12]
 800bdb2:	0005      	movs	r5, r0
 800bdb4:	000c      	movs	r4, r1
 800bdb6:	0016      	movs	r6, r2
 800bdb8:	05db      	lsls	r3, r3, #23
 800bdba:	d505      	bpl.n	800bdc8 <__swrite+0x1c>
 800bdbc:	230e      	movs	r3, #14
 800bdbe:	5ec9      	ldrsh	r1, [r1, r3]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	2302      	movs	r3, #2
 800bdc4:	f000 f8d0 	bl	800bf68 <_lseek_r>
 800bdc8:	89a3      	ldrh	r3, [r4, #12]
 800bdca:	4a05      	ldr	r2, [pc, #20]	; (800bde0 <__swrite+0x34>)
 800bdcc:	0028      	movs	r0, r5
 800bdce:	4013      	ands	r3, r2
 800bdd0:	81a3      	strh	r3, [r4, #12]
 800bdd2:	0032      	movs	r2, r6
 800bdd4:	230e      	movs	r3, #14
 800bdd6:	5ee1      	ldrsh	r1, [r4, r3]
 800bdd8:	003b      	movs	r3, r7
 800bdda:	f000 f8ff 	bl	800bfdc <_write_r>
 800bdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bde0:	ffffefff 	.word	0xffffefff

0800bde4 <__sseek>:
 800bde4:	b570      	push	{r4, r5, r6, lr}
 800bde6:	000c      	movs	r4, r1
 800bde8:	250e      	movs	r5, #14
 800bdea:	5f49      	ldrsh	r1, [r1, r5]
 800bdec:	f000 f8bc 	bl	800bf68 <_lseek_r>
 800bdf0:	89a3      	ldrh	r3, [r4, #12]
 800bdf2:	1c42      	adds	r2, r0, #1
 800bdf4:	d103      	bne.n	800bdfe <__sseek+0x1a>
 800bdf6:	4a05      	ldr	r2, [pc, #20]	; (800be0c <__sseek+0x28>)
 800bdf8:	4013      	ands	r3, r2
 800bdfa:	81a3      	strh	r3, [r4, #12]
 800bdfc:	bd70      	pop	{r4, r5, r6, pc}
 800bdfe:	2280      	movs	r2, #128	; 0x80
 800be00:	0152      	lsls	r2, r2, #5
 800be02:	4313      	orrs	r3, r2
 800be04:	81a3      	strh	r3, [r4, #12]
 800be06:	6520      	str	r0, [r4, #80]	; 0x50
 800be08:	e7f8      	b.n	800bdfc <__sseek+0x18>
 800be0a:	46c0      	nop			; (mov r8, r8)
 800be0c:	ffffefff 	.word	0xffffefff

0800be10 <__sclose>:
 800be10:	b510      	push	{r4, lr}
 800be12:	230e      	movs	r3, #14
 800be14:	5ec9      	ldrsh	r1, [r1, r3]
 800be16:	f000 f895 	bl	800bf44 <_close_r>
 800be1a:	bd10      	pop	{r4, pc}

0800be1c <memset>:
 800be1c:	0003      	movs	r3, r0
 800be1e:	1882      	adds	r2, r0, r2
 800be20:	4293      	cmp	r3, r2
 800be22:	d100      	bne.n	800be26 <memset+0xa>
 800be24:	4770      	bx	lr
 800be26:	7019      	strb	r1, [r3, #0]
 800be28:	3301      	adds	r3, #1
 800be2a:	e7f9      	b.n	800be20 <memset+0x4>

0800be2c <strchr>:
 800be2c:	b2c9      	uxtb	r1, r1
 800be2e:	7803      	ldrb	r3, [r0, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d004      	beq.n	800be3e <strchr+0x12>
 800be34:	428b      	cmp	r3, r1
 800be36:	d100      	bne.n	800be3a <strchr+0xe>
 800be38:	4770      	bx	lr
 800be3a:	3001      	adds	r0, #1
 800be3c:	e7f7      	b.n	800be2e <strchr+0x2>
 800be3e:	424b      	negs	r3, r1
 800be40:	4159      	adcs	r1, r3
 800be42:	4249      	negs	r1, r1
 800be44:	4008      	ands	r0, r1
 800be46:	e7f7      	b.n	800be38 <strchr+0xc>

0800be48 <strncmp>:
 800be48:	b530      	push	{r4, r5, lr}
 800be4a:	0005      	movs	r5, r0
 800be4c:	1e10      	subs	r0, r2, #0
 800be4e:	d00b      	beq.n	800be68 <strncmp+0x20>
 800be50:	2400      	movs	r4, #0
 800be52:	3a01      	subs	r2, #1
 800be54:	5d2b      	ldrb	r3, [r5, r4]
 800be56:	5d08      	ldrb	r0, [r1, r4]
 800be58:	4283      	cmp	r3, r0
 800be5a:	d104      	bne.n	800be66 <strncmp+0x1e>
 800be5c:	42a2      	cmp	r2, r4
 800be5e:	d002      	beq.n	800be66 <strncmp+0x1e>
 800be60:	3401      	adds	r4, #1
 800be62:	2b00      	cmp	r3, #0
 800be64:	d1f6      	bne.n	800be54 <strncmp+0xc>
 800be66:	1a18      	subs	r0, r3, r0
 800be68:	bd30      	pop	{r4, r5, pc}

0800be6a <strncpy>:
 800be6a:	0003      	movs	r3, r0
 800be6c:	b530      	push	{r4, r5, lr}
 800be6e:	001d      	movs	r5, r3
 800be70:	2a00      	cmp	r2, #0
 800be72:	d006      	beq.n	800be82 <strncpy+0x18>
 800be74:	780c      	ldrb	r4, [r1, #0]
 800be76:	3a01      	subs	r2, #1
 800be78:	3301      	adds	r3, #1
 800be7a:	702c      	strb	r4, [r5, #0]
 800be7c:	3101      	adds	r1, #1
 800be7e:	2c00      	cmp	r4, #0
 800be80:	d1f5      	bne.n	800be6e <strncpy+0x4>
 800be82:	2100      	movs	r1, #0
 800be84:	189a      	adds	r2, r3, r2
 800be86:	4293      	cmp	r3, r2
 800be88:	d100      	bne.n	800be8c <strncpy+0x22>
 800be8a:	bd30      	pop	{r4, r5, pc}
 800be8c:	7019      	strb	r1, [r3, #0]
 800be8e:	3301      	adds	r3, #1
 800be90:	e7f9      	b.n	800be86 <strncpy+0x1c>
	...

0800be94 <strtok>:
 800be94:	4b03      	ldr	r3, [pc, #12]	; (800bea4 <strtok+0x10>)
 800be96:	b510      	push	{r4, lr}
 800be98:	681a      	ldr	r2, [r3, #0]
 800be9a:	2301      	movs	r3, #1
 800be9c:	3250      	adds	r2, #80	; 0x50
 800be9e:	f000 f803 	bl	800bea8 <__strtok_r>
 800bea2:	bd10      	pop	{r4, pc}
 800bea4:	200006d0 	.word	0x200006d0

0800bea8 <__strtok_r>:
 800bea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beaa:	2800      	cmp	r0, #0
 800beac:	d102      	bne.n	800beb4 <__strtok_r+0xc>
 800beae:	6810      	ldr	r0, [r2, #0]
 800beb0:	2800      	cmp	r0, #0
 800beb2:	d013      	beq.n	800bedc <__strtok_r+0x34>
 800beb4:	0004      	movs	r4, r0
 800beb6:	0020      	movs	r0, r4
 800beb8:	000e      	movs	r6, r1
 800beba:	7805      	ldrb	r5, [r0, #0]
 800bebc:	3401      	adds	r4, #1
 800bebe:	7837      	ldrb	r7, [r6, #0]
 800bec0:	2f00      	cmp	r7, #0
 800bec2:	d104      	bne.n	800bece <__strtok_r+0x26>
 800bec4:	2d00      	cmp	r5, #0
 800bec6:	d10f      	bne.n	800bee8 <__strtok_r+0x40>
 800bec8:	0028      	movs	r0, r5
 800beca:	6015      	str	r5, [r2, #0]
 800becc:	e006      	b.n	800bedc <__strtok_r+0x34>
 800bece:	3601      	adds	r6, #1
 800bed0:	42bd      	cmp	r5, r7
 800bed2:	d1f4      	bne.n	800bebe <__strtok_r+0x16>
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d1ee      	bne.n	800beb6 <__strtok_r+0xe>
 800bed8:	6014      	str	r4, [r2, #0]
 800beda:	7003      	strb	r3, [r0, #0]
 800bedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bede:	002f      	movs	r7, r5
 800bee0:	e00f      	b.n	800bf02 <__strtok_r+0x5a>
 800bee2:	3301      	adds	r3, #1
 800bee4:	2e00      	cmp	r6, #0
 800bee6:	d104      	bne.n	800bef2 <__strtok_r+0x4a>
 800bee8:	0023      	movs	r3, r4
 800beea:	3401      	adds	r4, #1
 800beec:	781d      	ldrb	r5, [r3, #0]
 800beee:	0027      	movs	r7, r4
 800bef0:	000b      	movs	r3, r1
 800bef2:	781e      	ldrb	r6, [r3, #0]
 800bef4:	42b5      	cmp	r5, r6
 800bef6:	d1f4      	bne.n	800bee2 <__strtok_r+0x3a>
 800bef8:	2d00      	cmp	r5, #0
 800befa:	d0f0      	beq.n	800bede <__strtok_r+0x36>
 800befc:	2300      	movs	r3, #0
 800befe:	3c01      	subs	r4, #1
 800bf00:	7023      	strb	r3, [r4, #0]
 800bf02:	6017      	str	r7, [r2, #0]
 800bf04:	e7ea      	b.n	800bedc <__strtok_r+0x34>

0800bf06 <strstr>:
 800bf06:	780a      	ldrb	r2, [r1, #0]
 800bf08:	b530      	push	{r4, r5, lr}
 800bf0a:	2a00      	cmp	r2, #0
 800bf0c:	d10c      	bne.n	800bf28 <strstr+0x22>
 800bf0e:	bd30      	pop	{r4, r5, pc}
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d108      	bne.n	800bf26 <strstr+0x20>
 800bf14:	2301      	movs	r3, #1
 800bf16:	5ccc      	ldrb	r4, [r1, r3]
 800bf18:	2c00      	cmp	r4, #0
 800bf1a:	d0f8      	beq.n	800bf0e <strstr+0x8>
 800bf1c:	5cc5      	ldrb	r5, [r0, r3]
 800bf1e:	42a5      	cmp	r5, r4
 800bf20:	d101      	bne.n	800bf26 <strstr+0x20>
 800bf22:	3301      	adds	r3, #1
 800bf24:	e7f7      	b.n	800bf16 <strstr+0x10>
 800bf26:	3001      	adds	r0, #1
 800bf28:	7803      	ldrb	r3, [r0, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d1f0      	bne.n	800bf10 <strstr+0xa>
 800bf2e:	0018      	movs	r0, r3
 800bf30:	e7ed      	b.n	800bf0e <strstr+0x8>
	...

0800bf34 <__locale_mb_cur_max>:
 800bf34:	2294      	movs	r2, #148	; 0x94
 800bf36:	4b02      	ldr	r3, [pc, #8]	; (800bf40 <__locale_mb_cur_max+0xc>)
 800bf38:	0052      	lsls	r2, r2, #1
 800bf3a:	5c98      	ldrb	r0, [r3, r2]
 800bf3c:	4770      	bx	lr
 800bf3e:	46c0      	nop			; (mov r8, r8)
 800bf40:	20000444 	.word	0x20000444

0800bf44 <_close_r>:
 800bf44:	2300      	movs	r3, #0
 800bf46:	b570      	push	{r4, r5, r6, lr}
 800bf48:	4d06      	ldr	r5, [pc, #24]	; (800bf64 <_close_r+0x20>)
 800bf4a:	0004      	movs	r4, r0
 800bf4c:	0008      	movs	r0, r1
 800bf4e:	602b      	str	r3, [r5, #0]
 800bf50:	f7f7 fe6d 	bl	8003c2e <_close>
 800bf54:	1c43      	adds	r3, r0, #1
 800bf56:	d103      	bne.n	800bf60 <_close_r+0x1c>
 800bf58:	682b      	ldr	r3, [r5, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d000      	beq.n	800bf60 <_close_r+0x1c>
 800bf5e:	6023      	str	r3, [r4, #0]
 800bf60:	bd70      	pop	{r4, r5, r6, pc}
 800bf62:	46c0      	nop			; (mov r8, r8)
 800bf64:	20000da8 	.word	0x20000da8

0800bf68 <_lseek_r>:
 800bf68:	b570      	push	{r4, r5, r6, lr}
 800bf6a:	0004      	movs	r4, r0
 800bf6c:	0008      	movs	r0, r1
 800bf6e:	0011      	movs	r1, r2
 800bf70:	001a      	movs	r2, r3
 800bf72:	2300      	movs	r3, #0
 800bf74:	4d05      	ldr	r5, [pc, #20]	; (800bf8c <_lseek_r+0x24>)
 800bf76:	602b      	str	r3, [r5, #0]
 800bf78:	f7f7 fe7a 	bl	8003c70 <_lseek>
 800bf7c:	1c43      	adds	r3, r0, #1
 800bf7e:	d103      	bne.n	800bf88 <_lseek_r+0x20>
 800bf80:	682b      	ldr	r3, [r5, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d000      	beq.n	800bf88 <_lseek_r+0x20>
 800bf86:	6023      	str	r3, [r4, #0]
 800bf88:	bd70      	pop	{r4, r5, r6, pc}
 800bf8a:	46c0      	nop			; (mov r8, r8)
 800bf8c:	20000da8 	.word	0x20000da8

0800bf90 <_read_r>:
 800bf90:	b570      	push	{r4, r5, r6, lr}
 800bf92:	0004      	movs	r4, r0
 800bf94:	0008      	movs	r0, r1
 800bf96:	0011      	movs	r1, r2
 800bf98:	001a      	movs	r2, r3
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	4d05      	ldr	r5, [pc, #20]	; (800bfb4 <_read_r+0x24>)
 800bf9e:	602b      	str	r3, [r5, #0]
 800bfa0:	f7f7 fe0c 	bl	8003bbc <_read>
 800bfa4:	1c43      	adds	r3, r0, #1
 800bfa6:	d103      	bne.n	800bfb0 <_read_r+0x20>
 800bfa8:	682b      	ldr	r3, [r5, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d000      	beq.n	800bfb0 <_read_r+0x20>
 800bfae:	6023      	str	r3, [r4, #0]
 800bfb0:	bd70      	pop	{r4, r5, r6, pc}
 800bfb2:	46c0      	nop			; (mov r8, r8)
 800bfb4:	20000da8 	.word	0x20000da8

0800bfb8 <_sbrk_r>:
 800bfb8:	2300      	movs	r3, #0
 800bfba:	b570      	push	{r4, r5, r6, lr}
 800bfbc:	4d06      	ldr	r5, [pc, #24]	; (800bfd8 <_sbrk_r+0x20>)
 800bfbe:	0004      	movs	r4, r0
 800bfc0:	0008      	movs	r0, r1
 800bfc2:	602b      	str	r3, [r5, #0]
 800bfc4:	f7f7 fe60 	bl	8003c88 <_sbrk>
 800bfc8:	1c43      	adds	r3, r0, #1
 800bfca:	d103      	bne.n	800bfd4 <_sbrk_r+0x1c>
 800bfcc:	682b      	ldr	r3, [r5, #0]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d000      	beq.n	800bfd4 <_sbrk_r+0x1c>
 800bfd2:	6023      	str	r3, [r4, #0]
 800bfd4:	bd70      	pop	{r4, r5, r6, pc}
 800bfd6:	46c0      	nop			; (mov r8, r8)
 800bfd8:	20000da8 	.word	0x20000da8

0800bfdc <_write_r>:
 800bfdc:	b570      	push	{r4, r5, r6, lr}
 800bfde:	0004      	movs	r4, r0
 800bfe0:	0008      	movs	r0, r1
 800bfe2:	0011      	movs	r1, r2
 800bfe4:	001a      	movs	r2, r3
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	4d05      	ldr	r5, [pc, #20]	; (800c000 <_write_r+0x24>)
 800bfea:	602b      	str	r3, [r5, #0]
 800bfec:	f7f7 fe03 	bl	8003bf6 <_write>
 800bff0:	1c43      	adds	r3, r0, #1
 800bff2:	d103      	bne.n	800bffc <_write_r+0x20>
 800bff4:	682b      	ldr	r3, [r5, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d000      	beq.n	800bffc <_write_r+0x20>
 800bffa:	6023      	str	r3, [r4, #0]
 800bffc:	bd70      	pop	{r4, r5, r6, pc}
 800bffe:	46c0      	nop			; (mov r8, r8)
 800c000:	20000da8 	.word	0x20000da8

0800c004 <__errno>:
 800c004:	4b01      	ldr	r3, [pc, #4]	; (800c00c <__errno+0x8>)
 800c006:	6818      	ldr	r0, [r3, #0]
 800c008:	4770      	bx	lr
 800c00a:	46c0      	nop			; (mov r8, r8)
 800c00c:	200006d0 	.word	0x200006d0

0800c010 <__libc_init_array>:
 800c010:	b570      	push	{r4, r5, r6, lr}
 800c012:	2600      	movs	r6, #0
 800c014:	4c0c      	ldr	r4, [pc, #48]	; (800c048 <__libc_init_array+0x38>)
 800c016:	4d0d      	ldr	r5, [pc, #52]	; (800c04c <__libc_init_array+0x3c>)
 800c018:	1b64      	subs	r4, r4, r5
 800c01a:	10a4      	asrs	r4, r4, #2
 800c01c:	42a6      	cmp	r6, r4
 800c01e:	d109      	bne.n	800c034 <__libc_init_array+0x24>
 800c020:	2600      	movs	r6, #0
 800c022:	f006 fc3f 	bl	80128a4 <_init>
 800c026:	4c0a      	ldr	r4, [pc, #40]	; (800c050 <__libc_init_array+0x40>)
 800c028:	4d0a      	ldr	r5, [pc, #40]	; (800c054 <__libc_init_array+0x44>)
 800c02a:	1b64      	subs	r4, r4, r5
 800c02c:	10a4      	asrs	r4, r4, #2
 800c02e:	42a6      	cmp	r6, r4
 800c030:	d105      	bne.n	800c03e <__libc_init_array+0x2e>
 800c032:	bd70      	pop	{r4, r5, r6, pc}
 800c034:	00b3      	lsls	r3, r6, #2
 800c036:	58eb      	ldr	r3, [r5, r3]
 800c038:	4798      	blx	r3
 800c03a:	3601      	adds	r6, #1
 800c03c:	e7ee      	b.n	800c01c <__libc_init_array+0xc>
 800c03e:	00b3      	lsls	r3, r6, #2
 800c040:	58eb      	ldr	r3, [r5, r3]
 800c042:	4798      	blx	r3
 800c044:	3601      	adds	r6, #1
 800c046:	e7f2      	b.n	800c02e <__libc_init_array+0x1e>
 800c048:	08014924 	.word	0x08014924
 800c04c:	08014924 	.word	0x08014924
 800c050:	0801492c 	.word	0x0801492c
 800c054:	08014924 	.word	0x08014924

0800c058 <__retarget_lock_init_recursive>:
 800c058:	4770      	bx	lr

0800c05a <__retarget_lock_close_recursive>:
 800c05a:	4770      	bx	lr

0800c05c <__retarget_lock_acquire_recursive>:
 800c05c:	4770      	bx	lr

0800c05e <__retarget_lock_release_recursive>:
 800c05e:	4770      	bx	lr

0800c060 <sysconf>:
 800c060:	2380      	movs	r3, #128	; 0x80
 800c062:	b510      	push	{r4, lr}
 800c064:	2808      	cmp	r0, #8
 800c066:	d004      	beq.n	800c072 <sysconf+0x12>
 800c068:	f7ff ffcc 	bl	800c004 <__errno>
 800c06c:	2316      	movs	r3, #22
 800c06e:	6003      	str	r3, [r0, #0]
 800c070:	3b17      	subs	r3, #23
 800c072:	0018      	movs	r0, r3
 800c074:	bd10      	pop	{r4, pc}

0800c076 <memcpy>:
 800c076:	2300      	movs	r3, #0
 800c078:	b510      	push	{r4, lr}
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d100      	bne.n	800c080 <memcpy+0xa>
 800c07e:	bd10      	pop	{r4, pc}
 800c080:	5ccc      	ldrb	r4, [r1, r3]
 800c082:	54c4      	strb	r4, [r0, r3]
 800c084:	3301      	adds	r3, #1
 800c086:	e7f8      	b.n	800c07a <memcpy+0x4>

0800c088 <nan>:
 800c088:	2000      	movs	r0, #0
 800c08a:	4901      	ldr	r1, [pc, #4]	; (800c090 <nan+0x8>)
 800c08c:	4770      	bx	lr
 800c08e:	46c0      	nop			; (mov r8, r8)
 800c090:	7ff80000 	.word	0x7ff80000

0800c094 <nanf>:
 800c094:	4800      	ldr	r0, [pc, #0]	; (800c098 <nanf+0x4>)
 800c096:	4770      	bx	lr
 800c098:	7fc00000 	.word	0x7fc00000

0800c09c <register_fini>:
 800c09c:	4b03      	ldr	r3, [pc, #12]	; (800c0ac <register_fini+0x10>)
 800c09e:	b510      	push	{r4, lr}
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d002      	beq.n	800c0aa <register_fini+0xe>
 800c0a4:	4802      	ldr	r0, [pc, #8]	; (800c0b0 <register_fini+0x14>)
 800c0a6:	f000 f805 	bl	800c0b4 <atexit>
 800c0aa:	bd10      	pop	{r4, pc}
 800c0ac:	00000000 	.word	0x00000000
 800c0b0:	0800fe11 	.word	0x0800fe11

0800c0b4 <atexit>:
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	b510      	push	{r4, lr}
 800c0b8:	0001      	movs	r1, r0
 800c0ba:	001a      	movs	r2, r3
 800c0bc:	0018      	movs	r0, r3
 800c0be:	f003 fef9 	bl	800feb4 <__register_exitproc>
 800c0c2:	bd10      	pop	{r4, pc}

0800c0c4 <_malloc_trim_r>:
 800c0c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0c6:	0004      	movs	r4, r0
 800c0c8:	2008      	movs	r0, #8
 800c0ca:	000d      	movs	r5, r1
 800c0cc:	f7ff ffc8 	bl	800c060 <sysconf>
 800c0d0:	0006      	movs	r6, r0
 800c0d2:	0020      	movs	r0, r4
 800c0d4:	f7fe fda4 	bl	800ac20 <__malloc_lock>
 800c0d8:	2203      	movs	r2, #3
 800c0da:	4f21      	ldr	r7, [pc, #132]	; (800c160 <_malloc_trim_r+0x9c>)
 800c0dc:	0031      	movs	r1, r6
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	4393      	bics	r3, r2
 800c0e4:	1b58      	subs	r0, r3, r5
 800c0e6:	3811      	subs	r0, #17
 800c0e8:	1980      	adds	r0, r0, r6
 800c0ea:	9301      	str	r3, [sp, #4]
 800c0ec:	f7f4 f826 	bl	800013c <__udivsi3>
 800c0f0:	1e45      	subs	r5, r0, #1
 800c0f2:	4375      	muls	r5, r6
 800c0f4:	42ae      	cmp	r6, r5
 800c0f6:	dd04      	ble.n	800c102 <_malloc_trim_r+0x3e>
 800c0f8:	0020      	movs	r0, r4
 800c0fa:	f7fe fd99 	bl	800ac30 <__malloc_unlock>
 800c0fe:	2000      	movs	r0, #0
 800c100:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c102:	2100      	movs	r1, #0
 800c104:	0020      	movs	r0, r4
 800c106:	f7ff ff57 	bl	800bfb8 <_sbrk_r>
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	9a01      	ldr	r2, [sp, #4]
 800c10e:	189b      	adds	r3, r3, r2
 800c110:	4298      	cmp	r0, r3
 800c112:	d1f1      	bne.n	800c0f8 <_malloc_trim_r+0x34>
 800c114:	0020      	movs	r0, r4
 800c116:	4269      	negs	r1, r5
 800c118:	f7ff ff4e 	bl	800bfb8 <_sbrk_r>
 800c11c:	3001      	adds	r0, #1
 800c11e:	d110      	bne.n	800c142 <_malloc_trim_r+0x7e>
 800c120:	2100      	movs	r1, #0
 800c122:	0020      	movs	r0, r4
 800c124:	f7ff ff48 	bl	800bfb8 <_sbrk_r>
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	1a81      	subs	r1, r0, r2
 800c12c:	290f      	cmp	r1, #15
 800c12e:	dde3      	ble.n	800c0f8 <_malloc_trim_r+0x34>
 800c130:	4d0c      	ldr	r5, [pc, #48]	; (800c164 <_malloc_trim_r+0xa0>)
 800c132:	4b0d      	ldr	r3, [pc, #52]	; (800c168 <_malloc_trim_r+0xa4>)
 800c134:	682d      	ldr	r5, [r5, #0]
 800c136:	1b40      	subs	r0, r0, r5
 800c138:	6018      	str	r0, [r3, #0]
 800c13a:	2301      	movs	r3, #1
 800c13c:	430b      	orrs	r3, r1
 800c13e:	6053      	str	r3, [r2, #4]
 800c140:	e7da      	b.n	800c0f8 <_malloc_trim_r+0x34>
 800c142:	2601      	movs	r6, #1
 800c144:	9b01      	ldr	r3, [sp, #4]
 800c146:	68ba      	ldr	r2, [r7, #8]
 800c148:	1b5b      	subs	r3, r3, r5
 800c14a:	4333      	orrs	r3, r6
 800c14c:	6053      	str	r3, [r2, #4]
 800c14e:	4a06      	ldr	r2, [pc, #24]	; (800c168 <_malloc_trim_r+0xa4>)
 800c150:	0020      	movs	r0, r4
 800c152:	6813      	ldr	r3, [r2, #0]
 800c154:	1b5b      	subs	r3, r3, r5
 800c156:	6013      	str	r3, [r2, #0]
 800c158:	f7fe fd6a 	bl	800ac30 <__malloc_unlock>
 800c15c:	0030      	movs	r0, r6
 800c15e:	e7cf      	b.n	800c100 <_malloc_trim_r+0x3c>
 800c160:	20000028 	.word	0x20000028
 800c164:	20000430 	.word	0x20000430
 800c168:	20000c38 	.word	0x20000c38

0800c16c <_free_r>:
 800c16c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c16e:	1e0d      	subs	r5, r1, #0
 800c170:	9001      	str	r0, [sp, #4]
 800c172:	d02d      	beq.n	800c1d0 <_free_r+0x64>
 800c174:	f7fe fd54 	bl	800ac20 <__malloc_lock>
 800c178:	2301      	movs	r3, #1
 800c17a:	0029      	movs	r1, r5
 800c17c:	469c      	mov	ip, r3
 800c17e:	3908      	subs	r1, #8
 800c180:	684f      	ldr	r7, [r1, #4]
 800c182:	4662      	mov	r2, ip
 800c184:	003b      	movs	r3, r7
 800c186:	4664      	mov	r4, ip
 800c188:	4393      	bics	r3, r2
 800c18a:	18c8      	adds	r0, r1, r3
 800c18c:	6845      	ldr	r5, [r0, #4]
 800c18e:	3202      	adds	r2, #2
 800c190:	4395      	bics	r5, r2
 800c192:	4a4a      	ldr	r2, [pc, #296]	; (800c2bc <_free_r+0x150>)
 800c194:	4027      	ands	r7, r4
 800c196:	6896      	ldr	r6, [r2, #8]
 800c198:	4286      	cmp	r6, r0
 800c19a:	d11a      	bne.n	800c1d2 <_free_r+0x66>
 800c19c:	195b      	adds	r3, r3, r5
 800c19e:	2f00      	cmp	r7, #0
 800c1a0:	d106      	bne.n	800c1b0 <_free_r+0x44>
 800c1a2:	6808      	ldr	r0, [r1, #0]
 800c1a4:	1a09      	subs	r1, r1, r0
 800c1a6:	688d      	ldr	r5, [r1, #8]
 800c1a8:	181b      	adds	r3, r3, r0
 800c1aa:	68c8      	ldr	r0, [r1, #12]
 800c1ac:	60e8      	str	r0, [r5, #12]
 800c1ae:	6085      	str	r5, [r0, #8]
 800c1b0:	2001      	movs	r0, #1
 800c1b2:	4318      	orrs	r0, r3
 800c1b4:	6048      	str	r0, [r1, #4]
 800c1b6:	6091      	str	r1, [r2, #8]
 800c1b8:	4a41      	ldr	r2, [pc, #260]	; (800c2c0 <_free_r+0x154>)
 800c1ba:	6812      	ldr	r2, [r2, #0]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d804      	bhi.n	800c1ca <_free_r+0x5e>
 800c1c0:	4b40      	ldr	r3, [pc, #256]	; (800c2c4 <_free_r+0x158>)
 800c1c2:	9801      	ldr	r0, [sp, #4]
 800c1c4:	6819      	ldr	r1, [r3, #0]
 800c1c6:	f7ff ff7d 	bl	800c0c4 <_malloc_trim_r>
 800c1ca:	9801      	ldr	r0, [sp, #4]
 800c1cc:	f7fe fd30 	bl	800ac30 <__malloc_unlock>
 800c1d0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c1d2:	2600      	movs	r6, #0
 800c1d4:	6045      	str	r5, [r0, #4]
 800c1d6:	42b7      	cmp	r7, r6
 800c1d8:	d109      	bne.n	800c1ee <_free_r+0x82>
 800c1da:	680f      	ldr	r7, [r1, #0]
 800c1dc:	4c3a      	ldr	r4, [pc, #232]	; (800c2c8 <_free_r+0x15c>)
 800c1de:	1bc9      	subs	r1, r1, r7
 800c1e0:	19db      	adds	r3, r3, r7
 800c1e2:	688f      	ldr	r7, [r1, #8]
 800c1e4:	42a7      	cmp	r7, r4
 800c1e6:	d02c      	beq.n	800c242 <_free_r+0xd6>
 800c1e8:	68cc      	ldr	r4, [r1, #12]
 800c1ea:	60fc      	str	r4, [r7, #12]
 800c1ec:	60a7      	str	r7, [r4, #8]
 800c1ee:	1947      	adds	r7, r0, r5
 800c1f0:	687c      	ldr	r4, [r7, #4]
 800c1f2:	2701      	movs	r7, #1
 800c1f4:	423c      	tst	r4, r7
 800c1f6:	d10b      	bne.n	800c210 <_free_r+0xa4>
 800c1f8:	195b      	adds	r3, r3, r5
 800c1fa:	6885      	ldr	r5, [r0, #8]
 800c1fc:	2e00      	cmp	r6, #0
 800c1fe:	d122      	bne.n	800c246 <_free_r+0xda>
 800c200:	4c31      	ldr	r4, [pc, #196]	; (800c2c8 <_free_r+0x15c>)
 800c202:	42a5      	cmp	r5, r4
 800c204:	d11f      	bne.n	800c246 <_free_r+0xda>
 800c206:	003e      	movs	r6, r7
 800c208:	6151      	str	r1, [r2, #20]
 800c20a:	6111      	str	r1, [r2, #16]
 800c20c:	60cd      	str	r5, [r1, #12]
 800c20e:	608d      	str	r5, [r1, #8]
 800c210:	2501      	movs	r5, #1
 800c212:	0028      	movs	r0, r5
 800c214:	4318      	orrs	r0, r3
 800c216:	6048      	str	r0, [r1, #4]
 800c218:	50cb      	str	r3, [r1, r3]
 800c21a:	2e00      	cmp	r6, #0
 800c21c:	d1d5      	bne.n	800c1ca <_free_r+0x5e>
 800c21e:	2080      	movs	r0, #128	; 0x80
 800c220:	0080      	lsls	r0, r0, #2
 800c222:	4283      	cmp	r3, r0
 800c224:	d213      	bcs.n	800c24e <_free_r+0xe2>
 800c226:	08d8      	lsrs	r0, r3, #3
 800c228:	095b      	lsrs	r3, r3, #5
 800c22a:	409d      	lsls	r5, r3
 800c22c:	6853      	ldr	r3, [r2, #4]
 800c22e:	431d      	orrs	r5, r3
 800c230:	00c3      	lsls	r3, r0, #3
 800c232:	189b      	adds	r3, r3, r2
 800c234:	6055      	str	r5, [r2, #4]
 800c236:	689a      	ldr	r2, [r3, #8]
 800c238:	60cb      	str	r3, [r1, #12]
 800c23a:	608a      	str	r2, [r1, #8]
 800c23c:	6099      	str	r1, [r3, #8]
 800c23e:	60d1      	str	r1, [r2, #12]
 800c240:	e7c3      	b.n	800c1ca <_free_r+0x5e>
 800c242:	4666      	mov	r6, ip
 800c244:	e7d3      	b.n	800c1ee <_free_r+0x82>
 800c246:	68c0      	ldr	r0, [r0, #12]
 800c248:	60e8      	str	r0, [r5, #12]
 800c24a:	6085      	str	r5, [r0, #8]
 800c24c:	e7e0      	b.n	800c210 <_free_r+0xa4>
 800c24e:	0a5d      	lsrs	r5, r3, #9
 800c250:	2d04      	cmp	r5, #4
 800c252:	d812      	bhi.n	800c27a <_free_r+0x10e>
 800c254:	0998      	lsrs	r0, r3, #6
 800c256:	3038      	adds	r0, #56	; 0x38
 800c258:	00c6      	lsls	r6, r0, #3
 800c25a:	18b6      	adds	r6, r6, r2
 800c25c:	68b5      	ldr	r5, [r6, #8]
 800c25e:	2703      	movs	r7, #3
 800c260:	42ae      	cmp	r6, r5
 800c262:	d125      	bne.n	800c2b0 <_free_r+0x144>
 800c264:	2301      	movs	r3, #1
 800c266:	1080      	asrs	r0, r0, #2
 800c268:	4083      	lsls	r3, r0
 800c26a:	6850      	ldr	r0, [r2, #4]
 800c26c:	4303      	orrs	r3, r0
 800c26e:	6053      	str	r3, [r2, #4]
 800c270:	60ce      	str	r6, [r1, #12]
 800c272:	608d      	str	r5, [r1, #8]
 800c274:	60b1      	str	r1, [r6, #8]
 800c276:	60e9      	str	r1, [r5, #12]
 800c278:	e7a7      	b.n	800c1ca <_free_r+0x5e>
 800c27a:	2d14      	cmp	r5, #20
 800c27c:	d802      	bhi.n	800c284 <_free_r+0x118>
 800c27e:	0028      	movs	r0, r5
 800c280:	305b      	adds	r0, #91	; 0x5b
 800c282:	e7e9      	b.n	800c258 <_free_r+0xec>
 800c284:	2d54      	cmp	r5, #84	; 0x54
 800c286:	d802      	bhi.n	800c28e <_free_r+0x122>
 800c288:	0b18      	lsrs	r0, r3, #12
 800c28a:	306e      	adds	r0, #110	; 0x6e
 800c28c:	e7e4      	b.n	800c258 <_free_r+0xec>
 800c28e:	20aa      	movs	r0, #170	; 0xaa
 800c290:	0040      	lsls	r0, r0, #1
 800c292:	4285      	cmp	r5, r0
 800c294:	d802      	bhi.n	800c29c <_free_r+0x130>
 800c296:	0bd8      	lsrs	r0, r3, #15
 800c298:	3077      	adds	r0, #119	; 0x77
 800c29a:	e7dd      	b.n	800c258 <_free_r+0xec>
 800c29c:	4e0b      	ldr	r6, [pc, #44]	; (800c2cc <_free_r+0x160>)
 800c29e:	207e      	movs	r0, #126	; 0x7e
 800c2a0:	42b5      	cmp	r5, r6
 800c2a2:	d8d9      	bhi.n	800c258 <_free_r+0xec>
 800c2a4:	0c98      	lsrs	r0, r3, #18
 800c2a6:	307c      	adds	r0, #124	; 0x7c
 800c2a8:	e7d6      	b.n	800c258 <_free_r+0xec>
 800c2aa:	68ad      	ldr	r5, [r5, #8]
 800c2ac:	42ae      	cmp	r6, r5
 800c2ae:	d003      	beq.n	800c2b8 <_free_r+0x14c>
 800c2b0:	686a      	ldr	r2, [r5, #4]
 800c2b2:	43ba      	bics	r2, r7
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d8f8      	bhi.n	800c2aa <_free_r+0x13e>
 800c2b8:	68ee      	ldr	r6, [r5, #12]
 800c2ba:	e7d9      	b.n	800c270 <_free_r+0x104>
 800c2bc:	20000028 	.word	0x20000028
 800c2c0:	20000434 	.word	0x20000434
 800c2c4:	20000c68 	.word	0x20000c68
 800c2c8:	20000030 	.word	0x20000030
 800c2cc:	00000554 	.word	0x00000554

0800c2d0 <rshift>:
 800c2d0:	0002      	movs	r2, r0
 800c2d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2d4:	6904      	ldr	r4, [r0, #16]
 800c2d6:	114b      	asrs	r3, r1, #5
 800c2d8:	b085      	sub	sp, #20
 800c2da:	3214      	adds	r2, #20
 800c2dc:	9302      	str	r3, [sp, #8]
 800c2de:	114d      	asrs	r5, r1, #5
 800c2e0:	0013      	movs	r3, r2
 800c2e2:	42ac      	cmp	r4, r5
 800c2e4:	dd32      	ble.n	800c34c <rshift+0x7c>
 800c2e6:	261f      	movs	r6, #31
 800c2e8:	000f      	movs	r7, r1
 800c2ea:	114b      	asrs	r3, r1, #5
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	00a5      	lsls	r5, r4, #2
 800c2f0:	18d3      	adds	r3, r2, r3
 800c2f2:	4037      	ands	r7, r6
 800c2f4:	1955      	adds	r5, r2, r5
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	9701      	str	r7, [sp, #4]
 800c2fa:	4231      	tst	r1, r6
 800c2fc:	d10d      	bne.n	800c31a <rshift+0x4a>
 800c2fe:	0016      	movs	r6, r2
 800c300:	0019      	movs	r1, r3
 800c302:	428d      	cmp	r5, r1
 800c304:	d836      	bhi.n	800c374 <rshift+0xa4>
 800c306:	9900      	ldr	r1, [sp, #0]
 800c308:	2300      	movs	r3, #0
 800c30a:	3903      	subs	r1, #3
 800c30c:	428d      	cmp	r5, r1
 800c30e:	d302      	bcc.n	800c316 <rshift+0x46>
 800c310:	9b02      	ldr	r3, [sp, #8]
 800c312:	1ae4      	subs	r4, r4, r3
 800c314:	00a3      	lsls	r3, r4, #2
 800c316:	18d3      	adds	r3, r2, r3
 800c318:	e018      	b.n	800c34c <rshift+0x7c>
 800c31a:	2120      	movs	r1, #32
 800c31c:	9e01      	ldr	r6, [sp, #4]
 800c31e:	9f01      	ldr	r7, [sp, #4]
 800c320:	1b89      	subs	r1, r1, r6
 800c322:	9e00      	ldr	r6, [sp, #0]
 800c324:	9103      	str	r1, [sp, #12]
 800c326:	ce02      	ldmia	r6!, {r1}
 800c328:	4694      	mov	ip, r2
 800c32a:	40f9      	lsrs	r1, r7
 800c32c:	42b5      	cmp	r5, r6
 800c32e:	d816      	bhi.n	800c35e <rshift+0x8e>
 800c330:	9e00      	ldr	r6, [sp, #0]
 800c332:	2300      	movs	r3, #0
 800c334:	3601      	adds	r6, #1
 800c336:	42b5      	cmp	r5, r6
 800c338:	d303      	bcc.n	800c342 <rshift+0x72>
 800c33a:	9b02      	ldr	r3, [sp, #8]
 800c33c:	1ae3      	subs	r3, r4, r3
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	3b04      	subs	r3, #4
 800c342:	18d3      	adds	r3, r2, r3
 800c344:	6019      	str	r1, [r3, #0]
 800c346:	2900      	cmp	r1, #0
 800c348:	d000      	beq.n	800c34c <rshift+0x7c>
 800c34a:	3304      	adds	r3, #4
 800c34c:	1a99      	subs	r1, r3, r2
 800c34e:	1089      	asrs	r1, r1, #2
 800c350:	6101      	str	r1, [r0, #16]
 800c352:	4293      	cmp	r3, r2
 800c354:	d101      	bne.n	800c35a <rshift+0x8a>
 800c356:	2300      	movs	r3, #0
 800c358:	6143      	str	r3, [r0, #20]
 800c35a:	b005      	add	sp, #20
 800c35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c35e:	6837      	ldr	r7, [r6, #0]
 800c360:	9b03      	ldr	r3, [sp, #12]
 800c362:	409f      	lsls	r7, r3
 800c364:	430f      	orrs	r7, r1
 800c366:	4661      	mov	r1, ip
 800c368:	c180      	stmia	r1!, {r7}
 800c36a:	468c      	mov	ip, r1
 800c36c:	9b01      	ldr	r3, [sp, #4]
 800c36e:	ce02      	ldmia	r6!, {r1}
 800c370:	40d9      	lsrs	r1, r3
 800c372:	e7db      	b.n	800c32c <rshift+0x5c>
 800c374:	c980      	ldmia	r1!, {r7}
 800c376:	c680      	stmia	r6!, {r7}
 800c378:	e7c3      	b.n	800c302 <rshift+0x32>

0800c37a <__hexdig_fun>:
 800c37a:	0002      	movs	r2, r0
 800c37c:	3a30      	subs	r2, #48	; 0x30
 800c37e:	0003      	movs	r3, r0
 800c380:	2a09      	cmp	r2, #9
 800c382:	d802      	bhi.n	800c38a <__hexdig_fun+0x10>
 800c384:	3b20      	subs	r3, #32
 800c386:	b2d8      	uxtb	r0, r3
 800c388:	4770      	bx	lr
 800c38a:	0002      	movs	r2, r0
 800c38c:	3a61      	subs	r2, #97	; 0x61
 800c38e:	2a05      	cmp	r2, #5
 800c390:	d801      	bhi.n	800c396 <__hexdig_fun+0x1c>
 800c392:	3b47      	subs	r3, #71	; 0x47
 800c394:	e7f7      	b.n	800c386 <__hexdig_fun+0xc>
 800c396:	001a      	movs	r2, r3
 800c398:	3a41      	subs	r2, #65	; 0x41
 800c39a:	2000      	movs	r0, #0
 800c39c:	2a05      	cmp	r2, #5
 800c39e:	d8f3      	bhi.n	800c388 <__hexdig_fun+0xe>
 800c3a0:	3b27      	subs	r3, #39	; 0x27
 800c3a2:	e7f0      	b.n	800c386 <__hexdig_fun+0xc>

0800c3a4 <__gethex>:
 800c3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3a6:	b089      	sub	sp, #36	; 0x24
 800c3a8:	9307      	str	r3, [sp, #28]
 800c3aa:	2302      	movs	r3, #2
 800c3ac:	9201      	str	r2, [sp, #4]
 800c3ae:	680a      	ldr	r2, [r1, #0]
 800c3b0:	425b      	negs	r3, r3
 800c3b2:	9003      	str	r0, [sp, #12]
 800c3b4:	9106      	str	r1, [sp, #24]
 800c3b6:	1c96      	adds	r6, r2, #2
 800c3b8:	1a9b      	subs	r3, r3, r2
 800c3ba:	199a      	adds	r2, r3, r6
 800c3bc:	9600      	str	r6, [sp, #0]
 800c3be:	9205      	str	r2, [sp, #20]
 800c3c0:	9a00      	ldr	r2, [sp, #0]
 800c3c2:	3601      	adds	r6, #1
 800c3c4:	7810      	ldrb	r0, [r2, #0]
 800c3c6:	2830      	cmp	r0, #48	; 0x30
 800c3c8:	d0f7      	beq.n	800c3ba <__gethex+0x16>
 800c3ca:	f7ff ffd6 	bl	800c37a <__hexdig_fun>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	001d      	movs	r5, r3
 800c3d2:	9302      	str	r3, [sp, #8]
 800c3d4:	4298      	cmp	r0, r3
 800c3d6:	d11d      	bne.n	800c414 <__gethex+0x70>
 800c3d8:	2201      	movs	r2, #1
 800c3da:	49a6      	ldr	r1, [pc, #664]	; (800c674 <__gethex+0x2d0>)
 800c3dc:	9800      	ldr	r0, [sp, #0]
 800c3de:	f7ff fd33 	bl	800be48 <strncmp>
 800c3e2:	0007      	movs	r7, r0
 800c3e4:	42a8      	cmp	r0, r5
 800c3e6:	d169      	bne.n	800c4bc <__gethex+0x118>
 800c3e8:	9b00      	ldr	r3, [sp, #0]
 800c3ea:	0034      	movs	r4, r6
 800c3ec:	7858      	ldrb	r0, [r3, #1]
 800c3ee:	f7ff ffc4 	bl	800c37a <__hexdig_fun>
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	9302      	str	r3, [sp, #8]
 800c3f6:	42a8      	cmp	r0, r5
 800c3f8:	d02f      	beq.n	800c45a <__gethex+0xb6>
 800c3fa:	9600      	str	r6, [sp, #0]
 800c3fc:	9b00      	ldr	r3, [sp, #0]
 800c3fe:	7818      	ldrb	r0, [r3, #0]
 800c400:	2830      	cmp	r0, #48	; 0x30
 800c402:	d009      	beq.n	800c418 <__gethex+0x74>
 800c404:	f7ff ffb9 	bl	800c37a <__hexdig_fun>
 800c408:	4242      	negs	r2, r0
 800c40a:	4142      	adcs	r2, r0
 800c40c:	2301      	movs	r3, #1
 800c40e:	0035      	movs	r5, r6
 800c410:	9202      	str	r2, [sp, #8]
 800c412:	9305      	str	r3, [sp, #20]
 800c414:	9c00      	ldr	r4, [sp, #0]
 800c416:	e004      	b.n	800c422 <__gethex+0x7e>
 800c418:	9b00      	ldr	r3, [sp, #0]
 800c41a:	3301      	adds	r3, #1
 800c41c:	9300      	str	r3, [sp, #0]
 800c41e:	e7ed      	b.n	800c3fc <__gethex+0x58>
 800c420:	3401      	adds	r4, #1
 800c422:	7820      	ldrb	r0, [r4, #0]
 800c424:	f7ff ffa9 	bl	800c37a <__hexdig_fun>
 800c428:	1e07      	subs	r7, r0, #0
 800c42a:	d1f9      	bne.n	800c420 <__gethex+0x7c>
 800c42c:	2201      	movs	r2, #1
 800c42e:	0020      	movs	r0, r4
 800c430:	4990      	ldr	r1, [pc, #576]	; (800c674 <__gethex+0x2d0>)
 800c432:	f7ff fd09 	bl	800be48 <strncmp>
 800c436:	2800      	cmp	r0, #0
 800c438:	d10d      	bne.n	800c456 <__gethex+0xb2>
 800c43a:	2d00      	cmp	r5, #0
 800c43c:	d106      	bne.n	800c44c <__gethex+0xa8>
 800c43e:	3401      	adds	r4, #1
 800c440:	0025      	movs	r5, r4
 800c442:	7820      	ldrb	r0, [r4, #0]
 800c444:	f7ff ff99 	bl	800c37a <__hexdig_fun>
 800c448:	2800      	cmp	r0, #0
 800c44a:	d102      	bne.n	800c452 <__gethex+0xae>
 800c44c:	1b2d      	subs	r5, r5, r4
 800c44e:	00af      	lsls	r7, r5, #2
 800c450:	e003      	b.n	800c45a <__gethex+0xb6>
 800c452:	3401      	adds	r4, #1
 800c454:	e7f5      	b.n	800c442 <__gethex+0x9e>
 800c456:	2d00      	cmp	r5, #0
 800c458:	d1f8      	bne.n	800c44c <__gethex+0xa8>
 800c45a:	2220      	movs	r2, #32
 800c45c:	7823      	ldrb	r3, [r4, #0]
 800c45e:	0026      	movs	r6, r4
 800c460:	4393      	bics	r3, r2
 800c462:	2b50      	cmp	r3, #80	; 0x50
 800c464:	d11d      	bne.n	800c4a2 <__gethex+0xfe>
 800c466:	7863      	ldrb	r3, [r4, #1]
 800c468:	2b2b      	cmp	r3, #43	; 0x2b
 800c46a:	d02c      	beq.n	800c4c6 <__gethex+0x122>
 800c46c:	2b2d      	cmp	r3, #45	; 0x2d
 800c46e:	d02e      	beq.n	800c4ce <__gethex+0x12a>
 800c470:	2300      	movs	r3, #0
 800c472:	1c66      	adds	r6, r4, #1
 800c474:	9304      	str	r3, [sp, #16]
 800c476:	7830      	ldrb	r0, [r6, #0]
 800c478:	f7ff ff7f 	bl	800c37a <__hexdig_fun>
 800c47c:	1e43      	subs	r3, r0, #1
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	2b18      	cmp	r3, #24
 800c482:	d82b      	bhi.n	800c4dc <__gethex+0x138>
 800c484:	3810      	subs	r0, #16
 800c486:	0005      	movs	r5, r0
 800c488:	7870      	ldrb	r0, [r6, #1]
 800c48a:	f7ff ff76 	bl	800c37a <__hexdig_fun>
 800c48e:	1e43      	subs	r3, r0, #1
 800c490:	b2db      	uxtb	r3, r3
 800c492:	3601      	adds	r6, #1
 800c494:	2b18      	cmp	r3, #24
 800c496:	d91c      	bls.n	800c4d2 <__gethex+0x12e>
 800c498:	9b04      	ldr	r3, [sp, #16]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d000      	beq.n	800c4a0 <__gethex+0xfc>
 800c49e:	426d      	negs	r5, r5
 800c4a0:	197f      	adds	r7, r7, r5
 800c4a2:	9b06      	ldr	r3, [sp, #24]
 800c4a4:	601e      	str	r6, [r3, #0]
 800c4a6:	9b02      	ldr	r3, [sp, #8]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d019      	beq.n	800c4e0 <__gethex+0x13c>
 800c4ac:	2600      	movs	r6, #0
 800c4ae:	9b05      	ldr	r3, [sp, #20]
 800c4b0:	42b3      	cmp	r3, r6
 800c4b2:	d100      	bne.n	800c4b6 <__gethex+0x112>
 800c4b4:	3606      	adds	r6, #6
 800c4b6:	0030      	movs	r0, r6
 800c4b8:	b009      	add	sp, #36	; 0x24
 800c4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4bc:	2301      	movs	r3, #1
 800c4be:	2700      	movs	r7, #0
 800c4c0:	9c00      	ldr	r4, [sp, #0]
 800c4c2:	9302      	str	r3, [sp, #8]
 800c4c4:	e7c9      	b.n	800c45a <__gethex+0xb6>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	9304      	str	r3, [sp, #16]
 800c4ca:	1ca6      	adds	r6, r4, #2
 800c4cc:	e7d3      	b.n	800c476 <__gethex+0xd2>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e7fa      	b.n	800c4c8 <__gethex+0x124>
 800c4d2:	230a      	movs	r3, #10
 800c4d4:	435d      	muls	r5, r3
 800c4d6:	182d      	adds	r5, r5, r0
 800c4d8:	3d10      	subs	r5, #16
 800c4da:	e7d5      	b.n	800c488 <__gethex+0xe4>
 800c4dc:	0026      	movs	r6, r4
 800c4de:	e7e0      	b.n	800c4a2 <__gethex+0xfe>
 800c4e0:	9b00      	ldr	r3, [sp, #0]
 800c4e2:	9902      	ldr	r1, [sp, #8]
 800c4e4:	1ae3      	subs	r3, r4, r3
 800c4e6:	3b01      	subs	r3, #1
 800c4e8:	2b07      	cmp	r3, #7
 800c4ea:	dc0a      	bgt.n	800c502 <__gethex+0x15e>
 800c4ec:	9803      	ldr	r0, [sp, #12]
 800c4ee:	f000 fa5d 	bl	800c9ac <_Balloc>
 800c4f2:	1e05      	subs	r5, r0, #0
 800c4f4:	d108      	bne.n	800c508 <__gethex+0x164>
 800c4f6:	002a      	movs	r2, r5
 800c4f8:	21e4      	movs	r1, #228	; 0xe4
 800c4fa:	4b5f      	ldr	r3, [pc, #380]	; (800c678 <__gethex+0x2d4>)
 800c4fc:	485f      	ldr	r0, [pc, #380]	; (800c67c <__gethex+0x2d8>)
 800c4fe:	f003 fd19 	bl	800ff34 <__assert_func>
 800c502:	3101      	adds	r1, #1
 800c504:	105b      	asrs	r3, r3, #1
 800c506:	e7ef      	b.n	800c4e8 <__gethex+0x144>
 800c508:	0003      	movs	r3, r0
 800c50a:	3314      	adds	r3, #20
 800c50c:	9302      	str	r3, [sp, #8]
 800c50e:	9305      	str	r3, [sp, #20]
 800c510:	2300      	movs	r3, #0
 800c512:	001e      	movs	r6, r3
 800c514:	9304      	str	r3, [sp, #16]
 800c516:	9b00      	ldr	r3, [sp, #0]
 800c518:	42a3      	cmp	r3, r4
 800c51a:	d33f      	bcc.n	800c59c <__gethex+0x1f8>
 800c51c:	9c05      	ldr	r4, [sp, #20]
 800c51e:	9b02      	ldr	r3, [sp, #8]
 800c520:	c440      	stmia	r4!, {r6}
 800c522:	1ae4      	subs	r4, r4, r3
 800c524:	10a4      	asrs	r4, r4, #2
 800c526:	0030      	movs	r0, r6
 800c528:	612c      	str	r4, [r5, #16]
 800c52a:	f000 fb01 	bl	800cb30 <__hi0bits>
 800c52e:	9b01      	ldr	r3, [sp, #4]
 800c530:	0164      	lsls	r4, r4, #5
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	1a26      	subs	r6, r4, r0
 800c536:	9300      	str	r3, [sp, #0]
 800c538:	429e      	cmp	r6, r3
 800c53a:	dd51      	ble.n	800c5e0 <__gethex+0x23c>
 800c53c:	1af6      	subs	r6, r6, r3
 800c53e:	0031      	movs	r1, r6
 800c540:	0028      	movs	r0, r5
 800c542:	f000 fe7b 	bl	800d23c <__any_on>
 800c546:	1e04      	subs	r4, r0, #0
 800c548:	d016      	beq.n	800c578 <__gethex+0x1d4>
 800c54a:	2401      	movs	r4, #1
 800c54c:	231f      	movs	r3, #31
 800c54e:	0020      	movs	r0, r4
 800c550:	1e72      	subs	r2, r6, #1
 800c552:	4013      	ands	r3, r2
 800c554:	4098      	lsls	r0, r3
 800c556:	0003      	movs	r3, r0
 800c558:	1151      	asrs	r1, r2, #5
 800c55a:	9802      	ldr	r0, [sp, #8]
 800c55c:	0089      	lsls	r1, r1, #2
 800c55e:	5809      	ldr	r1, [r1, r0]
 800c560:	4219      	tst	r1, r3
 800c562:	d009      	beq.n	800c578 <__gethex+0x1d4>
 800c564:	42a2      	cmp	r2, r4
 800c566:	dd06      	ble.n	800c576 <__gethex+0x1d2>
 800c568:	0028      	movs	r0, r5
 800c56a:	1eb1      	subs	r1, r6, #2
 800c56c:	f000 fe66 	bl	800d23c <__any_on>
 800c570:	3402      	adds	r4, #2
 800c572:	2800      	cmp	r0, #0
 800c574:	d100      	bne.n	800c578 <__gethex+0x1d4>
 800c576:	2402      	movs	r4, #2
 800c578:	0031      	movs	r1, r6
 800c57a:	0028      	movs	r0, r5
 800c57c:	f7ff fea8 	bl	800c2d0 <rshift>
 800c580:	19bf      	adds	r7, r7, r6
 800c582:	9b01      	ldr	r3, [sp, #4]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	42bb      	cmp	r3, r7
 800c588:	da3a      	bge.n	800c600 <__gethex+0x25c>
 800c58a:	0029      	movs	r1, r5
 800c58c:	9803      	ldr	r0, [sp, #12]
 800c58e:	f000 fa35 	bl	800c9fc <_Bfree>
 800c592:	2300      	movs	r3, #0
 800c594:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c596:	26a3      	movs	r6, #163	; 0xa3
 800c598:	6013      	str	r3, [r2, #0]
 800c59a:	e78c      	b.n	800c4b6 <__gethex+0x112>
 800c59c:	3c01      	subs	r4, #1
 800c59e:	7823      	ldrb	r3, [r4, #0]
 800c5a0:	2b2e      	cmp	r3, #46	; 0x2e
 800c5a2:	d012      	beq.n	800c5ca <__gethex+0x226>
 800c5a4:	9b04      	ldr	r3, [sp, #16]
 800c5a6:	2b20      	cmp	r3, #32
 800c5a8:	d104      	bne.n	800c5b4 <__gethex+0x210>
 800c5aa:	9b05      	ldr	r3, [sp, #20]
 800c5ac:	c340      	stmia	r3!, {r6}
 800c5ae:	2600      	movs	r6, #0
 800c5b0:	9305      	str	r3, [sp, #20]
 800c5b2:	9604      	str	r6, [sp, #16]
 800c5b4:	7820      	ldrb	r0, [r4, #0]
 800c5b6:	f7ff fee0 	bl	800c37a <__hexdig_fun>
 800c5ba:	230f      	movs	r3, #15
 800c5bc:	4018      	ands	r0, r3
 800c5be:	9b04      	ldr	r3, [sp, #16]
 800c5c0:	4098      	lsls	r0, r3
 800c5c2:	3304      	adds	r3, #4
 800c5c4:	4306      	orrs	r6, r0
 800c5c6:	9304      	str	r3, [sp, #16]
 800c5c8:	e7a5      	b.n	800c516 <__gethex+0x172>
 800c5ca:	9b00      	ldr	r3, [sp, #0]
 800c5cc:	42a3      	cmp	r3, r4
 800c5ce:	d8e9      	bhi.n	800c5a4 <__gethex+0x200>
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	0020      	movs	r0, r4
 800c5d4:	4927      	ldr	r1, [pc, #156]	; (800c674 <__gethex+0x2d0>)
 800c5d6:	f7ff fc37 	bl	800be48 <strncmp>
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	d1e2      	bne.n	800c5a4 <__gethex+0x200>
 800c5de:	e79a      	b.n	800c516 <__gethex+0x172>
 800c5e0:	9b00      	ldr	r3, [sp, #0]
 800c5e2:	2400      	movs	r4, #0
 800c5e4:	429e      	cmp	r6, r3
 800c5e6:	dacc      	bge.n	800c582 <__gethex+0x1de>
 800c5e8:	1b9e      	subs	r6, r3, r6
 800c5ea:	0029      	movs	r1, r5
 800c5ec:	0032      	movs	r2, r6
 800c5ee:	9803      	ldr	r0, [sp, #12]
 800c5f0:	f000 fbf0 	bl	800cdd4 <__lshift>
 800c5f4:	0003      	movs	r3, r0
 800c5f6:	3314      	adds	r3, #20
 800c5f8:	0005      	movs	r5, r0
 800c5fa:	1bbf      	subs	r7, r7, r6
 800c5fc:	9302      	str	r3, [sp, #8]
 800c5fe:	e7c0      	b.n	800c582 <__gethex+0x1de>
 800c600:	9b01      	ldr	r3, [sp, #4]
 800c602:	685e      	ldr	r6, [r3, #4]
 800c604:	42be      	cmp	r6, r7
 800c606:	dd70      	ble.n	800c6ea <__gethex+0x346>
 800c608:	9b00      	ldr	r3, [sp, #0]
 800c60a:	1bf6      	subs	r6, r6, r7
 800c60c:	42b3      	cmp	r3, r6
 800c60e:	dc37      	bgt.n	800c680 <__gethex+0x2dc>
 800c610:	9b01      	ldr	r3, [sp, #4]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	2b02      	cmp	r3, #2
 800c616:	d024      	beq.n	800c662 <__gethex+0x2be>
 800c618:	2b03      	cmp	r3, #3
 800c61a:	d026      	beq.n	800c66a <__gethex+0x2c6>
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d117      	bne.n	800c650 <__gethex+0x2ac>
 800c620:	9b00      	ldr	r3, [sp, #0]
 800c622:	42b3      	cmp	r3, r6
 800c624:	d114      	bne.n	800c650 <__gethex+0x2ac>
 800c626:	2b01      	cmp	r3, #1
 800c628:	d10b      	bne.n	800c642 <__gethex+0x29e>
 800c62a:	9b01      	ldr	r3, [sp, #4]
 800c62c:	9a07      	ldr	r2, [sp, #28]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	2662      	movs	r6, #98	; 0x62
 800c632:	6013      	str	r3, [r2, #0]
 800c634:	2301      	movs	r3, #1
 800c636:	9a02      	ldr	r2, [sp, #8]
 800c638:	612b      	str	r3, [r5, #16]
 800c63a:	6013      	str	r3, [r2, #0]
 800c63c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c63e:	601d      	str	r5, [r3, #0]
 800c640:	e739      	b.n	800c4b6 <__gethex+0x112>
 800c642:	9900      	ldr	r1, [sp, #0]
 800c644:	0028      	movs	r0, r5
 800c646:	3901      	subs	r1, #1
 800c648:	f000 fdf8 	bl	800d23c <__any_on>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	d1ec      	bne.n	800c62a <__gethex+0x286>
 800c650:	0029      	movs	r1, r5
 800c652:	9803      	ldr	r0, [sp, #12]
 800c654:	f000 f9d2 	bl	800c9fc <_Bfree>
 800c658:	2300      	movs	r3, #0
 800c65a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c65c:	2650      	movs	r6, #80	; 0x50
 800c65e:	6013      	str	r3, [r2, #0]
 800c660:	e729      	b.n	800c4b6 <__gethex+0x112>
 800c662:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1f3      	bne.n	800c650 <__gethex+0x2ac>
 800c668:	e7df      	b.n	800c62a <__gethex+0x286>
 800c66a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1dc      	bne.n	800c62a <__gethex+0x286>
 800c670:	e7ee      	b.n	800c650 <__gethex+0x2ac>
 800c672:	46c0      	nop			; (mov r8, r8)
 800c674:	080144b0 	.word	0x080144b0
 800c678:	08014611 	.word	0x08014611
 800c67c:	08014622 	.word	0x08014622
 800c680:	1e77      	subs	r7, r6, #1
 800c682:	2c00      	cmp	r4, #0
 800c684:	d12f      	bne.n	800c6e6 <__gethex+0x342>
 800c686:	2f00      	cmp	r7, #0
 800c688:	d004      	beq.n	800c694 <__gethex+0x2f0>
 800c68a:	0039      	movs	r1, r7
 800c68c:	0028      	movs	r0, r5
 800c68e:	f000 fdd5 	bl	800d23c <__any_on>
 800c692:	0004      	movs	r4, r0
 800c694:	231f      	movs	r3, #31
 800c696:	117a      	asrs	r2, r7, #5
 800c698:	401f      	ands	r7, r3
 800c69a:	3b1e      	subs	r3, #30
 800c69c:	40bb      	lsls	r3, r7
 800c69e:	9902      	ldr	r1, [sp, #8]
 800c6a0:	0092      	lsls	r2, r2, #2
 800c6a2:	5852      	ldr	r2, [r2, r1]
 800c6a4:	421a      	tst	r2, r3
 800c6a6:	d001      	beq.n	800c6ac <__gethex+0x308>
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	431c      	orrs	r4, r3
 800c6ac:	9b00      	ldr	r3, [sp, #0]
 800c6ae:	0031      	movs	r1, r6
 800c6b0:	1b9b      	subs	r3, r3, r6
 800c6b2:	2602      	movs	r6, #2
 800c6b4:	0028      	movs	r0, r5
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	f7ff fe0a 	bl	800c2d0 <rshift>
 800c6bc:	9b01      	ldr	r3, [sp, #4]
 800c6be:	685f      	ldr	r7, [r3, #4]
 800c6c0:	2c00      	cmp	r4, #0
 800c6c2:	d041      	beq.n	800c748 <__gethex+0x3a4>
 800c6c4:	9b01      	ldr	r3, [sp, #4]
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	2b02      	cmp	r3, #2
 800c6ca:	d010      	beq.n	800c6ee <__gethex+0x34a>
 800c6cc:	2b03      	cmp	r3, #3
 800c6ce:	d012      	beq.n	800c6f6 <__gethex+0x352>
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d106      	bne.n	800c6e2 <__gethex+0x33e>
 800c6d4:	07a2      	lsls	r2, r4, #30
 800c6d6:	d504      	bpl.n	800c6e2 <__gethex+0x33e>
 800c6d8:	9a02      	ldr	r2, [sp, #8]
 800c6da:	6812      	ldr	r2, [r2, #0]
 800c6dc:	4314      	orrs	r4, r2
 800c6de:	421c      	tst	r4, r3
 800c6e0:	d10c      	bne.n	800c6fc <__gethex+0x358>
 800c6e2:	2310      	movs	r3, #16
 800c6e4:	e02f      	b.n	800c746 <__gethex+0x3a2>
 800c6e6:	2401      	movs	r4, #1
 800c6e8:	e7d4      	b.n	800c694 <__gethex+0x2f0>
 800c6ea:	2601      	movs	r6, #1
 800c6ec:	e7e8      	b.n	800c6c0 <__gethex+0x31c>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c6f2:	1a9b      	subs	r3, r3, r2
 800c6f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d0f2      	beq.n	800c6e2 <__gethex+0x33e>
 800c6fc:	692b      	ldr	r3, [r5, #16]
 800c6fe:	2000      	movs	r0, #0
 800c700:	9302      	str	r3, [sp, #8]
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	9304      	str	r3, [sp, #16]
 800c706:	002b      	movs	r3, r5
 800c708:	9a04      	ldr	r2, [sp, #16]
 800c70a:	3314      	adds	r3, #20
 800c70c:	1899      	adds	r1, r3, r2
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	1c54      	adds	r4, r2, #1
 800c712:	d01e      	beq.n	800c752 <__gethex+0x3ae>
 800c714:	3201      	adds	r2, #1
 800c716:	601a      	str	r2, [r3, #0]
 800c718:	002b      	movs	r3, r5
 800c71a:	3314      	adds	r3, #20
 800c71c:	2e02      	cmp	r6, #2
 800c71e:	d141      	bne.n	800c7a4 <__gethex+0x400>
 800c720:	9a01      	ldr	r2, [sp, #4]
 800c722:	9900      	ldr	r1, [sp, #0]
 800c724:	6812      	ldr	r2, [r2, #0]
 800c726:	3a01      	subs	r2, #1
 800c728:	428a      	cmp	r2, r1
 800c72a:	d10b      	bne.n	800c744 <__gethex+0x3a0>
 800c72c:	221f      	movs	r2, #31
 800c72e:	9800      	ldr	r0, [sp, #0]
 800c730:	1149      	asrs	r1, r1, #5
 800c732:	4002      	ands	r2, r0
 800c734:	2001      	movs	r0, #1
 800c736:	0004      	movs	r4, r0
 800c738:	4094      	lsls	r4, r2
 800c73a:	0089      	lsls	r1, r1, #2
 800c73c:	58cb      	ldr	r3, [r1, r3]
 800c73e:	4223      	tst	r3, r4
 800c740:	d000      	beq.n	800c744 <__gethex+0x3a0>
 800c742:	2601      	movs	r6, #1
 800c744:	2320      	movs	r3, #32
 800c746:	431e      	orrs	r6, r3
 800c748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c74a:	601d      	str	r5, [r3, #0]
 800c74c:	9b07      	ldr	r3, [sp, #28]
 800c74e:	601f      	str	r7, [r3, #0]
 800c750:	e6b1      	b.n	800c4b6 <__gethex+0x112>
 800c752:	c301      	stmia	r3!, {r0}
 800c754:	4299      	cmp	r1, r3
 800c756:	d8da      	bhi.n	800c70e <__gethex+0x36a>
 800c758:	68ab      	ldr	r3, [r5, #8]
 800c75a:	9a02      	ldr	r2, [sp, #8]
 800c75c:	429a      	cmp	r2, r3
 800c75e:	db18      	blt.n	800c792 <__gethex+0x3ee>
 800c760:	6869      	ldr	r1, [r5, #4]
 800c762:	9803      	ldr	r0, [sp, #12]
 800c764:	3101      	adds	r1, #1
 800c766:	f000 f921 	bl	800c9ac <_Balloc>
 800c76a:	1e04      	subs	r4, r0, #0
 800c76c:	d104      	bne.n	800c778 <__gethex+0x3d4>
 800c76e:	0022      	movs	r2, r4
 800c770:	2184      	movs	r1, #132	; 0x84
 800c772:	4b1c      	ldr	r3, [pc, #112]	; (800c7e4 <__gethex+0x440>)
 800c774:	481c      	ldr	r0, [pc, #112]	; (800c7e8 <__gethex+0x444>)
 800c776:	e6c2      	b.n	800c4fe <__gethex+0x15a>
 800c778:	0029      	movs	r1, r5
 800c77a:	692a      	ldr	r2, [r5, #16]
 800c77c:	310c      	adds	r1, #12
 800c77e:	3202      	adds	r2, #2
 800c780:	0092      	lsls	r2, r2, #2
 800c782:	300c      	adds	r0, #12
 800c784:	f7ff fc77 	bl	800c076 <memcpy>
 800c788:	0029      	movs	r1, r5
 800c78a:	9803      	ldr	r0, [sp, #12]
 800c78c:	f000 f936 	bl	800c9fc <_Bfree>
 800c790:	0025      	movs	r5, r4
 800c792:	692b      	ldr	r3, [r5, #16]
 800c794:	1c5a      	adds	r2, r3, #1
 800c796:	612a      	str	r2, [r5, #16]
 800c798:	2201      	movs	r2, #1
 800c79a:	3304      	adds	r3, #4
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	18eb      	adds	r3, r5, r3
 800c7a0:	605a      	str	r2, [r3, #4]
 800c7a2:	e7b9      	b.n	800c718 <__gethex+0x374>
 800c7a4:	692a      	ldr	r2, [r5, #16]
 800c7a6:	9902      	ldr	r1, [sp, #8]
 800c7a8:	428a      	cmp	r2, r1
 800c7aa:	dd09      	ble.n	800c7c0 <__gethex+0x41c>
 800c7ac:	2101      	movs	r1, #1
 800c7ae:	0028      	movs	r0, r5
 800c7b0:	f7ff fd8e 	bl	800c2d0 <rshift>
 800c7b4:	9b01      	ldr	r3, [sp, #4]
 800c7b6:	3701      	adds	r7, #1
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	42bb      	cmp	r3, r7
 800c7bc:	dac1      	bge.n	800c742 <__gethex+0x39e>
 800c7be:	e6e4      	b.n	800c58a <__gethex+0x1e6>
 800c7c0:	221f      	movs	r2, #31
 800c7c2:	9c00      	ldr	r4, [sp, #0]
 800c7c4:	9900      	ldr	r1, [sp, #0]
 800c7c6:	2601      	movs	r6, #1
 800c7c8:	4014      	ands	r4, r2
 800c7ca:	4211      	tst	r1, r2
 800c7cc:	d0ba      	beq.n	800c744 <__gethex+0x3a0>
 800c7ce:	9a04      	ldr	r2, [sp, #16]
 800c7d0:	189b      	adds	r3, r3, r2
 800c7d2:	3b04      	subs	r3, #4
 800c7d4:	6818      	ldr	r0, [r3, #0]
 800c7d6:	f000 f9ab 	bl	800cb30 <__hi0bits>
 800c7da:	2320      	movs	r3, #32
 800c7dc:	1b1b      	subs	r3, r3, r4
 800c7de:	4298      	cmp	r0, r3
 800c7e0:	dbe4      	blt.n	800c7ac <__gethex+0x408>
 800c7e2:	e7af      	b.n	800c744 <__gethex+0x3a0>
 800c7e4:	08014611 	.word	0x08014611
 800c7e8:	08014622 	.word	0x08014622

0800c7ec <L_shift>:
 800c7ec:	2308      	movs	r3, #8
 800c7ee:	b570      	push	{r4, r5, r6, lr}
 800c7f0:	2520      	movs	r5, #32
 800c7f2:	1a9a      	subs	r2, r3, r2
 800c7f4:	0092      	lsls	r2, r2, #2
 800c7f6:	1aad      	subs	r5, r5, r2
 800c7f8:	6843      	ldr	r3, [r0, #4]
 800c7fa:	6804      	ldr	r4, [r0, #0]
 800c7fc:	001e      	movs	r6, r3
 800c7fe:	40ae      	lsls	r6, r5
 800c800:	40d3      	lsrs	r3, r2
 800c802:	4334      	orrs	r4, r6
 800c804:	6004      	str	r4, [r0, #0]
 800c806:	6043      	str	r3, [r0, #4]
 800c808:	3004      	adds	r0, #4
 800c80a:	4288      	cmp	r0, r1
 800c80c:	d3f4      	bcc.n	800c7f8 <L_shift+0xc>
 800c80e:	bd70      	pop	{r4, r5, r6, pc}

0800c810 <__match>:
 800c810:	b530      	push	{r4, r5, lr}
 800c812:	6803      	ldr	r3, [r0, #0]
 800c814:	780c      	ldrb	r4, [r1, #0]
 800c816:	3301      	adds	r3, #1
 800c818:	2c00      	cmp	r4, #0
 800c81a:	d102      	bne.n	800c822 <__match+0x12>
 800c81c:	6003      	str	r3, [r0, #0]
 800c81e:	2001      	movs	r0, #1
 800c820:	bd30      	pop	{r4, r5, pc}
 800c822:	781a      	ldrb	r2, [r3, #0]
 800c824:	0015      	movs	r5, r2
 800c826:	3d41      	subs	r5, #65	; 0x41
 800c828:	2d19      	cmp	r5, #25
 800c82a:	d800      	bhi.n	800c82e <__match+0x1e>
 800c82c:	3220      	adds	r2, #32
 800c82e:	3101      	adds	r1, #1
 800c830:	42a2      	cmp	r2, r4
 800c832:	d0ef      	beq.n	800c814 <__match+0x4>
 800c834:	2000      	movs	r0, #0
 800c836:	e7f3      	b.n	800c820 <__match+0x10>

0800c838 <__hexnan>:
 800c838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c83a:	680b      	ldr	r3, [r1, #0]
 800c83c:	b08b      	sub	sp, #44	; 0x2c
 800c83e:	9201      	str	r2, [sp, #4]
 800c840:	9901      	ldr	r1, [sp, #4]
 800c842:	115a      	asrs	r2, r3, #5
 800c844:	0092      	lsls	r2, r2, #2
 800c846:	188a      	adds	r2, r1, r2
 800c848:	9202      	str	r2, [sp, #8]
 800c84a:	0019      	movs	r1, r3
 800c84c:	221f      	movs	r2, #31
 800c84e:	4011      	ands	r1, r2
 800c850:	9008      	str	r0, [sp, #32]
 800c852:	9106      	str	r1, [sp, #24]
 800c854:	4213      	tst	r3, r2
 800c856:	d002      	beq.n	800c85e <__hexnan+0x26>
 800c858:	9b02      	ldr	r3, [sp, #8]
 800c85a:	3304      	adds	r3, #4
 800c85c:	9302      	str	r3, [sp, #8]
 800c85e:	9b02      	ldr	r3, [sp, #8]
 800c860:	2500      	movs	r5, #0
 800c862:	1f1f      	subs	r7, r3, #4
 800c864:	003e      	movs	r6, r7
 800c866:	003c      	movs	r4, r7
 800c868:	9b08      	ldr	r3, [sp, #32]
 800c86a:	603d      	str	r5, [r7, #0]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	9507      	str	r5, [sp, #28]
 800c870:	9305      	str	r3, [sp, #20]
 800c872:	9503      	str	r5, [sp, #12]
 800c874:	9b05      	ldr	r3, [sp, #20]
 800c876:	3301      	adds	r3, #1
 800c878:	9309      	str	r3, [sp, #36]	; 0x24
 800c87a:	9b05      	ldr	r3, [sp, #20]
 800c87c:	785b      	ldrb	r3, [r3, #1]
 800c87e:	9304      	str	r3, [sp, #16]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d028      	beq.n	800c8d6 <__hexnan+0x9e>
 800c884:	9804      	ldr	r0, [sp, #16]
 800c886:	f7ff fd78 	bl	800c37a <__hexdig_fun>
 800c88a:	2800      	cmp	r0, #0
 800c88c:	d154      	bne.n	800c938 <__hexnan+0x100>
 800c88e:	9b04      	ldr	r3, [sp, #16]
 800c890:	2b20      	cmp	r3, #32
 800c892:	d819      	bhi.n	800c8c8 <__hexnan+0x90>
 800c894:	9b03      	ldr	r3, [sp, #12]
 800c896:	9a07      	ldr	r2, [sp, #28]
 800c898:	4293      	cmp	r3, r2
 800c89a:	dd12      	ble.n	800c8c2 <__hexnan+0x8a>
 800c89c:	42b4      	cmp	r4, r6
 800c89e:	d206      	bcs.n	800c8ae <__hexnan+0x76>
 800c8a0:	2d07      	cmp	r5, #7
 800c8a2:	dc04      	bgt.n	800c8ae <__hexnan+0x76>
 800c8a4:	002a      	movs	r2, r5
 800c8a6:	0031      	movs	r1, r6
 800c8a8:	0020      	movs	r0, r4
 800c8aa:	f7ff ff9f 	bl	800c7ec <L_shift>
 800c8ae:	9b01      	ldr	r3, [sp, #4]
 800c8b0:	2508      	movs	r5, #8
 800c8b2:	429c      	cmp	r4, r3
 800c8b4:	d905      	bls.n	800c8c2 <__hexnan+0x8a>
 800c8b6:	1f26      	subs	r6, r4, #4
 800c8b8:	2500      	movs	r5, #0
 800c8ba:	0034      	movs	r4, r6
 800c8bc:	9b03      	ldr	r3, [sp, #12]
 800c8be:	6035      	str	r5, [r6, #0]
 800c8c0:	9307      	str	r3, [sp, #28]
 800c8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8c4:	9305      	str	r3, [sp, #20]
 800c8c6:	e7d5      	b.n	800c874 <__hexnan+0x3c>
 800c8c8:	9b04      	ldr	r3, [sp, #16]
 800c8ca:	2b29      	cmp	r3, #41	; 0x29
 800c8cc:	d159      	bne.n	800c982 <__hexnan+0x14a>
 800c8ce:	9b05      	ldr	r3, [sp, #20]
 800c8d0:	9a08      	ldr	r2, [sp, #32]
 800c8d2:	3302      	adds	r3, #2
 800c8d4:	6013      	str	r3, [r2, #0]
 800c8d6:	9b03      	ldr	r3, [sp, #12]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d052      	beq.n	800c982 <__hexnan+0x14a>
 800c8dc:	42b4      	cmp	r4, r6
 800c8de:	d206      	bcs.n	800c8ee <__hexnan+0xb6>
 800c8e0:	2d07      	cmp	r5, #7
 800c8e2:	dc04      	bgt.n	800c8ee <__hexnan+0xb6>
 800c8e4:	002a      	movs	r2, r5
 800c8e6:	0031      	movs	r1, r6
 800c8e8:	0020      	movs	r0, r4
 800c8ea:	f7ff ff7f 	bl	800c7ec <L_shift>
 800c8ee:	9b01      	ldr	r3, [sp, #4]
 800c8f0:	429c      	cmp	r4, r3
 800c8f2:	d935      	bls.n	800c960 <__hexnan+0x128>
 800c8f4:	001a      	movs	r2, r3
 800c8f6:	0023      	movs	r3, r4
 800c8f8:	cb02      	ldmia	r3!, {r1}
 800c8fa:	c202      	stmia	r2!, {r1}
 800c8fc:	429f      	cmp	r7, r3
 800c8fe:	d2fb      	bcs.n	800c8f8 <__hexnan+0xc0>
 800c900:	9b02      	ldr	r3, [sp, #8]
 800c902:	1c62      	adds	r2, r4, #1
 800c904:	1ed9      	subs	r1, r3, #3
 800c906:	2304      	movs	r3, #4
 800c908:	4291      	cmp	r1, r2
 800c90a:	d305      	bcc.n	800c918 <__hexnan+0xe0>
 800c90c:	9b02      	ldr	r3, [sp, #8]
 800c90e:	3b04      	subs	r3, #4
 800c910:	1b1b      	subs	r3, r3, r4
 800c912:	089b      	lsrs	r3, r3, #2
 800c914:	3301      	adds	r3, #1
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	9a01      	ldr	r2, [sp, #4]
 800c91a:	18d3      	adds	r3, r2, r3
 800c91c:	2200      	movs	r2, #0
 800c91e:	c304      	stmia	r3!, {r2}
 800c920:	429f      	cmp	r7, r3
 800c922:	d2fc      	bcs.n	800c91e <__hexnan+0xe6>
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d104      	bne.n	800c934 <__hexnan+0xfc>
 800c92a:	9b01      	ldr	r3, [sp, #4]
 800c92c:	429f      	cmp	r7, r3
 800c92e:	d126      	bne.n	800c97e <__hexnan+0x146>
 800c930:	2301      	movs	r3, #1
 800c932:	603b      	str	r3, [r7, #0]
 800c934:	2005      	movs	r0, #5
 800c936:	e025      	b.n	800c984 <__hexnan+0x14c>
 800c938:	9b03      	ldr	r3, [sp, #12]
 800c93a:	3501      	adds	r5, #1
 800c93c:	3301      	adds	r3, #1
 800c93e:	9303      	str	r3, [sp, #12]
 800c940:	2d08      	cmp	r5, #8
 800c942:	dd06      	ble.n	800c952 <__hexnan+0x11a>
 800c944:	9b01      	ldr	r3, [sp, #4]
 800c946:	429c      	cmp	r4, r3
 800c948:	d9bb      	bls.n	800c8c2 <__hexnan+0x8a>
 800c94a:	2300      	movs	r3, #0
 800c94c:	2501      	movs	r5, #1
 800c94e:	3c04      	subs	r4, #4
 800c950:	6023      	str	r3, [r4, #0]
 800c952:	220f      	movs	r2, #15
 800c954:	6823      	ldr	r3, [r4, #0]
 800c956:	4010      	ands	r0, r2
 800c958:	011b      	lsls	r3, r3, #4
 800c95a:	4303      	orrs	r3, r0
 800c95c:	6023      	str	r3, [r4, #0]
 800c95e:	e7b0      	b.n	800c8c2 <__hexnan+0x8a>
 800c960:	9b06      	ldr	r3, [sp, #24]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d0de      	beq.n	800c924 <__hexnan+0xec>
 800c966:	2320      	movs	r3, #32
 800c968:	9a06      	ldr	r2, [sp, #24]
 800c96a:	9902      	ldr	r1, [sp, #8]
 800c96c:	1a9b      	subs	r3, r3, r2
 800c96e:	2201      	movs	r2, #1
 800c970:	4252      	negs	r2, r2
 800c972:	40da      	lsrs	r2, r3
 800c974:	3904      	subs	r1, #4
 800c976:	680b      	ldr	r3, [r1, #0]
 800c978:	4013      	ands	r3, r2
 800c97a:	600b      	str	r3, [r1, #0]
 800c97c:	e7d2      	b.n	800c924 <__hexnan+0xec>
 800c97e:	3f04      	subs	r7, #4
 800c980:	e7d0      	b.n	800c924 <__hexnan+0xec>
 800c982:	2004      	movs	r0, #4
 800c984:	b00b      	add	sp, #44	; 0x2c
 800c986:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c988 <__ascii_mbtowc>:
 800c988:	b082      	sub	sp, #8
 800c98a:	2900      	cmp	r1, #0
 800c98c:	d100      	bne.n	800c990 <__ascii_mbtowc+0x8>
 800c98e:	a901      	add	r1, sp, #4
 800c990:	1e10      	subs	r0, r2, #0
 800c992:	d006      	beq.n	800c9a2 <__ascii_mbtowc+0x1a>
 800c994:	2b00      	cmp	r3, #0
 800c996:	d006      	beq.n	800c9a6 <__ascii_mbtowc+0x1e>
 800c998:	7813      	ldrb	r3, [r2, #0]
 800c99a:	600b      	str	r3, [r1, #0]
 800c99c:	7810      	ldrb	r0, [r2, #0]
 800c99e:	1e43      	subs	r3, r0, #1
 800c9a0:	4198      	sbcs	r0, r3
 800c9a2:	b002      	add	sp, #8
 800c9a4:	4770      	bx	lr
 800c9a6:	2002      	movs	r0, #2
 800c9a8:	4240      	negs	r0, r0
 800c9aa:	e7fa      	b.n	800c9a2 <__ascii_mbtowc+0x1a>

0800c9ac <_Balloc>:
 800c9ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c9ae:	b570      	push	{r4, r5, r6, lr}
 800c9b0:	0006      	movs	r6, r0
 800c9b2:	000c      	movs	r4, r1
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d012      	beq.n	800c9de <_Balloc+0x32>
 800c9b8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800c9ba:	00a2      	lsls	r2, r4, #2
 800c9bc:	189b      	adds	r3, r3, r2
 800c9be:	6818      	ldr	r0, [r3, #0]
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	d115      	bne.n	800c9f0 <_Balloc+0x44>
 800c9c4:	2101      	movs	r1, #1
 800c9c6:	000d      	movs	r5, r1
 800c9c8:	40a5      	lsls	r5, r4
 800c9ca:	1d6a      	adds	r2, r5, #5
 800c9cc:	0030      	movs	r0, r6
 800c9ce:	0092      	lsls	r2, r2, #2
 800c9d0:	f003 face 	bl	800ff70 <_calloc_r>
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	d009      	beq.n	800c9ec <_Balloc+0x40>
 800c9d8:	6044      	str	r4, [r0, #4]
 800c9da:	6085      	str	r5, [r0, #8]
 800c9dc:	e00a      	b.n	800c9f4 <_Balloc+0x48>
 800c9de:	2221      	movs	r2, #33	; 0x21
 800c9e0:	2104      	movs	r1, #4
 800c9e2:	f003 fac5 	bl	800ff70 <_calloc_r>
 800c9e6:	6470      	str	r0, [r6, #68]	; 0x44
 800c9e8:	2800      	cmp	r0, #0
 800c9ea:	d1e5      	bne.n	800c9b8 <_Balloc+0xc>
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	bd70      	pop	{r4, r5, r6, pc}
 800c9f0:	6802      	ldr	r2, [r0, #0]
 800c9f2:	601a      	str	r2, [r3, #0]
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	6103      	str	r3, [r0, #16]
 800c9f8:	60c3      	str	r3, [r0, #12]
 800c9fa:	e7f8      	b.n	800c9ee <_Balloc+0x42>

0800c9fc <_Bfree>:
 800c9fc:	2900      	cmp	r1, #0
 800c9fe:	d006      	beq.n	800ca0e <_Bfree+0x12>
 800ca00:	684a      	ldr	r2, [r1, #4]
 800ca02:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ca04:	0092      	lsls	r2, r2, #2
 800ca06:	189b      	adds	r3, r3, r2
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	600a      	str	r2, [r1, #0]
 800ca0c:	6019      	str	r1, [r3, #0]
 800ca0e:	4770      	bx	lr

0800ca10 <__multadd>:
 800ca10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca12:	000e      	movs	r6, r1
 800ca14:	9001      	str	r0, [sp, #4]
 800ca16:	000c      	movs	r4, r1
 800ca18:	001d      	movs	r5, r3
 800ca1a:	2000      	movs	r0, #0
 800ca1c:	690f      	ldr	r7, [r1, #16]
 800ca1e:	3614      	adds	r6, #20
 800ca20:	6833      	ldr	r3, [r6, #0]
 800ca22:	3001      	adds	r0, #1
 800ca24:	b299      	uxth	r1, r3
 800ca26:	4351      	muls	r1, r2
 800ca28:	0c1b      	lsrs	r3, r3, #16
 800ca2a:	4353      	muls	r3, r2
 800ca2c:	1949      	adds	r1, r1, r5
 800ca2e:	0c0d      	lsrs	r5, r1, #16
 800ca30:	195b      	adds	r3, r3, r5
 800ca32:	0c1d      	lsrs	r5, r3, #16
 800ca34:	b289      	uxth	r1, r1
 800ca36:	041b      	lsls	r3, r3, #16
 800ca38:	185b      	adds	r3, r3, r1
 800ca3a:	c608      	stmia	r6!, {r3}
 800ca3c:	4287      	cmp	r7, r0
 800ca3e:	dcef      	bgt.n	800ca20 <__multadd+0x10>
 800ca40:	2d00      	cmp	r5, #0
 800ca42:	d022      	beq.n	800ca8a <__multadd+0x7a>
 800ca44:	68a3      	ldr	r3, [r4, #8]
 800ca46:	42bb      	cmp	r3, r7
 800ca48:	dc19      	bgt.n	800ca7e <__multadd+0x6e>
 800ca4a:	6861      	ldr	r1, [r4, #4]
 800ca4c:	9801      	ldr	r0, [sp, #4]
 800ca4e:	3101      	adds	r1, #1
 800ca50:	f7ff ffac 	bl	800c9ac <_Balloc>
 800ca54:	1e06      	subs	r6, r0, #0
 800ca56:	d105      	bne.n	800ca64 <__multadd+0x54>
 800ca58:	0032      	movs	r2, r6
 800ca5a:	21ba      	movs	r1, #186	; 0xba
 800ca5c:	4b0c      	ldr	r3, [pc, #48]	; (800ca90 <__multadd+0x80>)
 800ca5e:	480d      	ldr	r0, [pc, #52]	; (800ca94 <__multadd+0x84>)
 800ca60:	f003 fa68 	bl	800ff34 <__assert_func>
 800ca64:	0021      	movs	r1, r4
 800ca66:	6922      	ldr	r2, [r4, #16]
 800ca68:	310c      	adds	r1, #12
 800ca6a:	3202      	adds	r2, #2
 800ca6c:	0092      	lsls	r2, r2, #2
 800ca6e:	300c      	adds	r0, #12
 800ca70:	f7ff fb01 	bl	800c076 <memcpy>
 800ca74:	0021      	movs	r1, r4
 800ca76:	9801      	ldr	r0, [sp, #4]
 800ca78:	f7ff ffc0 	bl	800c9fc <_Bfree>
 800ca7c:	0034      	movs	r4, r6
 800ca7e:	1d3b      	adds	r3, r7, #4
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	18e3      	adds	r3, r4, r3
 800ca84:	605d      	str	r5, [r3, #4]
 800ca86:	1c7b      	adds	r3, r7, #1
 800ca88:	6123      	str	r3, [r4, #16]
 800ca8a:	0020      	movs	r0, r4
 800ca8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ca8e:	46c0      	nop			; (mov r8, r8)
 800ca90:	08014611 	.word	0x08014611
 800ca94:	08014682 	.word	0x08014682

0800ca98 <__s2b>:
 800ca98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca9a:	0006      	movs	r6, r0
 800ca9c:	0018      	movs	r0, r3
 800ca9e:	000c      	movs	r4, r1
 800caa0:	3008      	adds	r0, #8
 800caa2:	2109      	movs	r1, #9
 800caa4:	9301      	str	r3, [sp, #4]
 800caa6:	0015      	movs	r5, r2
 800caa8:	f7f3 fbd2 	bl	8000250 <__divsi3>
 800caac:	2301      	movs	r3, #1
 800caae:	2100      	movs	r1, #0
 800cab0:	4283      	cmp	r3, r0
 800cab2:	db0a      	blt.n	800caca <__s2b+0x32>
 800cab4:	0030      	movs	r0, r6
 800cab6:	f7ff ff79 	bl	800c9ac <_Balloc>
 800caba:	1e01      	subs	r1, r0, #0
 800cabc:	d108      	bne.n	800cad0 <__s2b+0x38>
 800cabe:	000a      	movs	r2, r1
 800cac0:	4b19      	ldr	r3, [pc, #100]	; (800cb28 <__s2b+0x90>)
 800cac2:	481a      	ldr	r0, [pc, #104]	; (800cb2c <__s2b+0x94>)
 800cac4:	31d3      	adds	r1, #211	; 0xd3
 800cac6:	f003 fa35 	bl	800ff34 <__assert_func>
 800caca:	005b      	lsls	r3, r3, #1
 800cacc:	3101      	adds	r1, #1
 800cace:	e7ef      	b.n	800cab0 <__s2b+0x18>
 800cad0:	9b08      	ldr	r3, [sp, #32]
 800cad2:	6143      	str	r3, [r0, #20]
 800cad4:	2301      	movs	r3, #1
 800cad6:	6103      	str	r3, [r0, #16]
 800cad8:	2d09      	cmp	r5, #9
 800cada:	dd18      	ble.n	800cb0e <__s2b+0x76>
 800cadc:	0023      	movs	r3, r4
 800cade:	3309      	adds	r3, #9
 800cae0:	001f      	movs	r7, r3
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	1964      	adds	r4, r4, r5
 800cae6:	783b      	ldrb	r3, [r7, #0]
 800cae8:	220a      	movs	r2, #10
 800caea:	0030      	movs	r0, r6
 800caec:	3b30      	subs	r3, #48	; 0x30
 800caee:	f7ff ff8f 	bl	800ca10 <__multadd>
 800caf2:	3701      	adds	r7, #1
 800caf4:	0001      	movs	r1, r0
 800caf6:	42a7      	cmp	r7, r4
 800caf8:	d1f5      	bne.n	800cae6 <__s2b+0x4e>
 800cafa:	002c      	movs	r4, r5
 800cafc:	9b00      	ldr	r3, [sp, #0]
 800cafe:	3c08      	subs	r4, #8
 800cb00:	191c      	adds	r4, r3, r4
 800cb02:	002f      	movs	r7, r5
 800cb04:	9b01      	ldr	r3, [sp, #4]
 800cb06:	429f      	cmp	r7, r3
 800cb08:	db04      	blt.n	800cb14 <__s2b+0x7c>
 800cb0a:	0008      	movs	r0, r1
 800cb0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb0e:	2509      	movs	r5, #9
 800cb10:	340a      	adds	r4, #10
 800cb12:	e7f6      	b.n	800cb02 <__s2b+0x6a>
 800cb14:	1b63      	subs	r3, r4, r5
 800cb16:	5ddb      	ldrb	r3, [r3, r7]
 800cb18:	220a      	movs	r2, #10
 800cb1a:	0030      	movs	r0, r6
 800cb1c:	3b30      	subs	r3, #48	; 0x30
 800cb1e:	f7ff ff77 	bl	800ca10 <__multadd>
 800cb22:	3701      	adds	r7, #1
 800cb24:	0001      	movs	r1, r0
 800cb26:	e7ed      	b.n	800cb04 <__s2b+0x6c>
 800cb28:	08014611 	.word	0x08014611
 800cb2c:	08014682 	.word	0x08014682

0800cb30 <__hi0bits>:
 800cb30:	0003      	movs	r3, r0
 800cb32:	0c02      	lsrs	r2, r0, #16
 800cb34:	2000      	movs	r0, #0
 800cb36:	4282      	cmp	r2, r0
 800cb38:	d101      	bne.n	800cb3e <__hi0bits+0xe>
 800cb3a:	041b      	lsls	r3, r3, #16
 800cb3c:	3010      	adds	r0, #16
 800cb3e:	0e1a      	lsrs	r2, r3, #24
 800cb40:	d101      	bne.n	800cb46 <__hi0bits+0x16>
 800cb42:	3008      	adds	r0, #8
 800cb44:	021b      	lsls	r3, r3, #8
 800cb46:	0f1a      	lsrs	r2, r3, #28
 800cb48:	d101      	bne.n	800cb4e <__hi0bits+0x1e>
 800cb4a:	3004      	adds	r0, #4
 800cb4c:	011b      	lsls	r3, r3, #4
 800cb4e:	0f9a      	lsrs	r2, r3, #30
 800cb50:	d101      	bne.n	800cb56 <__hi0bits+0x26>
 800cb52:	3002      	adds	r0, #2
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	db03      	blt.n	800cb62 <__hi0bits+0x32>
 800cb5a:	3001      	adds	r0, #1
 800cb5c:	005b      	lsls	r3, r3, #1
 800cb5e:	d400      	bmi.n	800cb62 <__hi0bits+0x32>
 800cb60:	2020      	movs	r0, #32
 800cb62:	4770      	bx	lr

0800cb64 <__lo0bits>:
 800cb64:	6803      	ldr	r3, [r0, #0]
 800cb66:	0001      	movs	r1, r0
 800cb68:	2207      	movs	r2, #7
 800cb6a:	0018      	movs	r0, r3
 800cb6c:	4010      	ands	r0, r2
 800cb6e:	4213      	tst	r3, r2
 800cb70:	d00d      	beq.n	800cb8e <__lo0bits+0x2a>
 800cb72:	3a06      	subs	r2, #6
 800cb74:	2000      	movs	r0, #0
 800cb76:	4213      	tst	r3, r2
 800cb78:	d105      	bne.n	800cb86 <__lo0bits+0x22>
 800cb7a:	3002      	adds	r0, #2
 800cb7c:	4203      	tst	r3, r0
 800cb7e:	d003      	beq.n	800cb88 <__lo0bits+0x24>
 800cb80:	40d3      	lsrs	r3, r2
 800cb82:	0010      	movs	r0, r2
 800cb84:	600b      	str	r3, [r1, #0]
 800cb86:	4770      	bx	lr
 800cb88:	089b      	lsrs	r3, r3, #2
 800cb8a:	600b      	str	r3, [r1, #0]
 800cb8c:	e7fb      	b.n	800cb86 <__lo0bits+0x22>
 800cb8e:	b29a      	uxth	r2, r3
 800cb90:	2a00      	cmp	r2, #0
 800cb92:	d101      	bne.n	800cb98 <__lo0bits+0x34>
 800cb94:	2010      	movs	r0, #16
 800cb96:	0c1b      	lsrs	r3, r3, #16
 800cb98:	b2da      	uxtb	r2, r3
 800cb9a:	2a00      	cmp	r2, #0
 800cb9c:	d101      	bne.n	800cba2 <__lo0bits+0x3e>
 800cb9e:	3008      	adds	r0, #8
 800cba0:	0a1b      	lsrs	r3, r3, #8
 800cba2:	071a      	lsls	r2, r3, #28
 800cba4:	d101      	bne.n	800cbaa <__lo0bits+0x46>
 800cba6:	3004      	adds	r0, #4
 800cba8:	091b      	lsrs	r3, r3, #4
 800cbaa:	079a      	lsls	r2, r3, #30
 800cbac:	d101      	bne.n	800cbb2 <__lo0bits+0x4e>
 800cbae:	3002      	adds	r0, #2
 800cbb0:	089b      	lsrs	r3, r3, #2
 800cbb2:	07da      	lsls	r2, r3, #31
 800cbb4:	d4e9      	bmi.n	800cb8a <__lo0bits+0x26>
 800cbb6:	3001      	adds	r0, #1
 800cbb8:	085b      	lsrs	r3, r3, #1
 800cbba:	d1e6      	bne.n	800cb8a <__lo0bits+0x26>
 800cbbc:	2020      	movs	r0, #32
 800cbbe:	e7e2      	b.n	800cb86 <__lo0bits+0x22>

0800cbc0 <__i2b>:
 800cbc0:	b510      	push	{r4, lr}
 800cbc2:	000c      	movs	r4, r1
 800cbc4:	2101      	movs	r1, #1
 800cbc6:	f7ff fef1 	bl	800c9ac <_Balloc>
 800cbca:	2800      	cmp	r0, #0
 800cbcc:	d107      	bne.n	800cbde <__i2b+0x1e>
 800cbce:	2146      	movs	r1, #70	; 0x46
 800cbd0:	4c05      	ldr	r4, [pc, #20]	; (800cbe8 <__i2b+0x28>)
 800cbd2:	0002      	movs	r2, r0
 800cbd4:	4b05      	ldr	r3, [pc, #20]	; (800cbec <__i2b+0x2c>)
 800cbd6:	0020      	movs	r0, r4
 800cbd8:	31ff      	adds	r1, #255	; 0xff
 800cbda:	f003 f9ab 	bl	800ff34 <__assert_func>
 800cbde:	2301      	movs	r3, #1
 800cbe0:	6144      	str	r4, [r0, #20]
 800cbe2:	6103      	str	r3, [r0, #16]
 800cbe4:	bd10      	pop	{r4, pc}
 800cbe6:	46c0      	nop			; (mov r8, r8)
 800cbe8:	08014682 	.word	0x08014682
 800cbec:	08014611 	.word	0x08014611

0800cbf0 <__multiply>:
 800cbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbf2:	0015      	movs	r5, r2
 800cbf4:	690a      	ldr	r2, [r1, #16]
 800cbf6:	692b      	ldr	r3, [r5, #16]
 800cbf8:	000c      	movs	r4, r1
 800cbfa:	b08b      	sub	sp, #44	; 0x2c
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	da01      	bge.n	800cc04 <__multiply+0x14>
 800cc00:	002c      	movs	r4, r5
 800cc02:	000d      	movs	r5, r1
 800cc04:	6927      	ldr	r7, [r4, #16]
 800cc06:	692e      	ldr	r6, [r5, #16]
 800cc08:	6861      	ldr	r1, [r4, #4]
 800cc0a:	19bb      	adds	r3, r7, r6
 800cc0c:	9303      	str	r3, [sp, #12]
 800cc0e:	68a3      	ldr	r3, [r4, #8]
 800cc10:	19ba      	adds	r2, r7, r6
 800cc12:	4293      	cmp	r3, r2
 800cc14:	da00      	bge.n	800cc18 <__multiply+0x28>
 800cc16:	3101      	adds	r1, #1
 800cc18:	f7ff fec8 	bl	800c9ac <_Balloc>
 800cc1c:	9002      	str	r0, [sp, #8]
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	d106      	bne.n	800cc30 <__multiply+0x40>
 800cc22:	21b1      	movs	r1, #177	; 0xb1
 800cc24:	4b48      	ldr	r3, [pc, #288]	; (800cd48 <__multiply+0x158>)
 800cc26:	4849      	ldr	r0, [pc, #292]	; (800cd4c <__multiply+0x15c>)
 800cc28:	9a02      	ldr	r2, [sp, #8]
 800cc2a:	0049      	lsls	r1, r1, #1
 800cc2c:	f003 f982 	bl	800ff34 <__assert_func>
 800cc30:	9b02      	ldr	r3, [sp, #8]
 800cc32:	2200      	movs	r2, #0
 800cc34:	3314      	adds	r3, #20
 800cc36:	469c      	mov	ip, r3
 800cc38:	19bb      	adds	r3, r7, r6
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	4463      	add	r3, ip
 800cc3e:	9304      	str	r3, [sp, #16]
 800cc40:	4663      	mov	r3, ip
 800cc42:	9904      	ldr	r1, [sp, #16]
 800cc44:	428b      	cmp	r3, r1
 800cc46:	d32a      	bcc.n	800cc9e <__multiply+0xae>
 800cc48:	0023      	movs	r3, r4
 800cc4a:	00bf      	lsls	r7, r7, #2
 800cc4c:	3314      	adds	r3, #20
 800cc4e:	3514      	adds	r5, #20
 800cc50:	9308      	str	r3, [sp, #32]
 800cc52:	00b6      	lsls	r6, r6, #2
 800cc54:	19db      	adds	r3, r3, r7
 800cc56:	9305      	str	r3, [sp, #20]
 800cc58:	19ab      	adds	r3, r5, r6
 800cc5a:	9309      	str	r3, [sp, #36]	; 0x24
 800cc5c:	2304      	movs	r3, #4
 800cc5e:	9306      	str	r3, [sp, #24]
 800cc60:	0023      	movs	r3, r4
 800cc62:	9a05      	ldr	r2, [sp, #20]
 800cc64:	3315      	adds	r3, #21
 800cc66:	9501      	str	r5, [sp, #4]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d305      	bcc.n	800cc78 <__multiply+0x88>
 800cc6c:	1b13      	subs	r3, r2, r4
 800cc6e:	3b15      	subs	r3, #21
 800cc70:	089b      	lsrs	r3, r3, #2
 800cc72:	3301      	adds	r3, #1
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	9306      	str	r3, [sp, #24]
 800cc78:	9b01      	ldr	r3, [sp, #4]
 800cc7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d310      	bcc.n	800cca2 <__multiply+0xb2>
 800cc80:	9b03      	ldr	r3, [sp, #12]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	dd05      	ble.n	800cc92 <__multiply+0xa2>
 800cc86:	9b04      	ldr	r3, [sp, #16]
 800cc88:	3b04      	subs	r3, #4
 800cc8a:	9304      	str	r3, [sp, #16]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d056      	beq.n	800cd40 <__multiply+0x150>
 800cc92:	9b02      	ldr	r3, [sp, #8]
 800cc94:	9a03      	ldr	r2, [sp, #12]
 800cc96:	0018      	movs	r0, r3
 800cc98:	611a      	str	r2, [r3, #16]
 800cc9a:	b00b      	add	sp, #44	; 0x2c
 800cc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc9e:	c304      	stmia	r3!, {r2}
 800cca0:	e7cf      	b.n	800cc42 <__multiply+0x52>
 800cca2:	9b01      	ldr	r3, [sp, #4]
 800cca4:	6818      	ldr	r0, [r3, #0]
 800cca6:	b280      	uxth	r0, r0
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	d01e      	beq.n	800ccea <__multiply+0xfa>
 800ccac:	4667      	mov	r7, ip
 800ccae:	2500      	movs	r5, #0
 800ccb0:	9e08      	ldr	r6, [sp, #32]
 800ccb2:	ce02      	ldmia	r6!, {r1}
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	9307      	str	r3, [sp, #28]
 800ccb8:	b28b      	uxth	r3, r1
 800ccba:	4343      	muls	r3, r0
 800ccbc:	001a      	movs	r2, r3
 800ccbe:	466b      	mov	r3, sp
 800ccc0:	8b9b      	ldrh	r3, [r3, #28]
 800ccc2:	18d3      	adds	r3, r2, r3
 800ccc4:	195b      	adds	r3, r3, r5
 800ccc6:	0c0d      	lsrs	r5, r1, #16
 800ccc8:	4345      	muls	r5, r0
 800ccca:	9a07      	ldr	r2, [sp, #28]
 800cccc:	0c11      	lsrs	r1, r2, #16
 800ccce:	1869      	adds	r1, r5, r1
 800ccd0:	0c1a      	lsrs	r2, r3, #16
 800ccd2:	188a      	adds	r2, r1, r2
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	0c15      	lsrs	r5, r2, #16
 800ccd8:	0412      	lsls	r2, r2, #16
 800ccda:	431a      	orrs	r2, r3
 800ccdc:	9b05      	ldr	r3, [sp, #20]
 800ccde:	c704      	stmia	r7!, {r2}
 800cce0:	42b3      	cmp	r3, r6
 800cce2:	d8e6      	bhi.n	800ccb2 <__multiply+0xc2>
 800cce4:	4663      	mov	r3, ip
 800cce6:	9a06      	ldr	r2, [sp, #24]
 800cce8:	509d      	str	r5, [r3, r2]
 800ccea:	9b01      	ldr	r3, [sp, #4]
 800ccec:	6818      	ldr	r0, [r3, #0]
 800ccee:	0c00      	lsrs	r0, r0, #16
 800ccf0:	d020      	beq.n	800cd34 <__multiply+0x144>
 800ccf2:	4663      	mov	r3, ip
 800ccf4:	0025      	movs	r5, r4
 800ccf6:	4661      	mov	r1, ip
 800ccf8:	2700      	movs	r7, #0
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	3514      	adds	r5, #20
 800ccfe:	682a      	ldr	r2, [r5, #0]
 800cd00:	680e      	ldr	r6, [r1, #0]
 800cd02:	b292      	uxth	r2, r2
 800cd04:	4342      	muls	r2, r0
 800cd06:	0c36      	lsrs	r6, r6, #16
 800cd08:	1992      	adds	r2, r2, r6
 800cd0a:	19d2      	adds	r2, r2, r7
 800cd0c:	0416      	lsls	r6, r2, #16
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	431e      	orrs	r6, r3
 800cd12:	600e      	str	r6, [r1, #0]
 800cd14:	cd40      	ldmia	r5!, {r6}
 800cd16:	684b      	ldr	r3, [r1, #4]
 800cd18:	0c36      	lsrs	r6, r6, #16
 800cd1a:	4346      	muls	r6, r0
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	0c12      	lsrs	r2, r2, #16
 800cd20:	18f3      	adds	r3, r6, r3
 800cd22:	189b      	adds	r3, r3, r2
 800cd24:	9a05      	ldr	r2, [sp, #20]
 800cd26:	0c1f      	lsrs	r7, r3, #16
 800cd28:	3104      	adds	r1, #4
 800cd2a:	42aa      	cmp	r2, r5
 800cd2c:	d8e7      	bhi.n	800ccfe <__multiply+0x10e>
 800cd2e:	4662      	mov	r2, ip
 800cd30:	9906      	ldr	r1, [sp, #24]
 800cd32:	5053      	str	r3, [r2, r1]
 800cd34:	9b01      	ldr	r3, [sp, #4]
 800cd36:	3304      	adds	r3, #4
 800cd38:	9301      	str	r3, [sp, #4]
 800cd3a:	2304      	movs	r3, #4
 800cd3c:	449c      	add	ip, r3
 800cd3e:	e79b      	b.n	800cc78 <__multiply+0x88>
 800cd40:	9b03      	ldr	r3, [sp, #12]
 800cd42:	3b01      	subs	r3, #1
 800cd44:	9303      	str	r3, [sp, #12]
 800cd46:	e79b      	b.n	800cc80 <__multiply+0x90>
 800cd48:	08014611 	.word	0x08014611
 800cd4c:	08014682 	.word	0x08014682

0800cd50 <__pow5mult>:
 800cd50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd52:	2303      	movs	r3, #3
 800cd54:	0015      	movs	r5, r2
 800cd56:	0007      	movs	r7, r0
 800cd58:	000e      	movs	r6, r1
 800cd5a:	401a      	ands	r2, r3
 800cd5c:	421d      	tst	r5, r3
 800cd5e:	d008      	beq.n	800cd72 <__pow5mult+0x22>
 800cd60:	491a      	ldr	r1, [pc, #104]	; (800cdcc <__pow5mult+0x7c>)
 800cd62:	3a01      	subs	r2, #1
 800cd64:	0092      	lsls	r2, r2, #2
 800cd66:	5852      	ldr	r2, [r2, r1]
 800cd68:	2300      	movs	r3, #0
 800cd6a:	0031      	movs	r1, r6
 800cd6c:	f7ff fe50 	bl	800ca10 <__multadd>
 800cd70:	0006      	movs	r6, r0
 800cd72:	10ad      	asrs	r5, r5, #2
 800cd74:	d027      	beq.n	800cdc6 <__pow5mult+0x76>
 800cd76:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800cd78:	2c00      	cmp	r4, #0
 800cd7a:	d107      	bne.n	800cd8c <__pow5mult+0x3c>
 800cd7c:	0038      	movs	r0, r7
 800cd7e:	4914      	ldr	r1, [pc, #80]	; (800cdd0 <__pow5mult+0x80>)
 800cd80:	f7ff ff1e 	bl	800cbc0 <__i2b>
 800cd84:	2300      	movs	r3, #0
 800cd86:	0004      	movs	r4, r0
 800cd88:	6438      	str	r0, [r7, #64]	; 0x40
 800cd8a:	6003      	str	r3, [r0, #0]
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	421d      	tst	r5, r3
 800cd90:	d00a      	beq.n	800cda8 <__pow5mult+0x58>
 800cd92:	0031      	movs	r1, r6
 800cd94:	0022      	movs	r2, r4
 800cd96:	0038      	movs	r0, r7
 800cd98:	f7ff ff2a 	bl	800cbf0 <__multiply>
 800cd9c:	0031      	movs	r1, r6
 800cd9e:	9001      	str	r0, [sp, #4]
 800cda0:	0038      	movs	r0, r7
 800cda2:	f7ff fe2b 	bl	800c9fc <_Bfree>
 800cda6:	9e01      	ldr	r6, [sp, #4]
 800cda8:	106d      	asrs	r5, r5, #1
 800cdaa:	d00c      	beq.n	800cdc6 <__pow5mult+0x76>
 800cdac:	6820      	ldr	r0, [r4, #0]
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	d107      	bne.n	800cdc2 <__pow5mult+0x72>
 800cdb2:	0022      	movs	r2, r4
 800cdb4:	0021      	movs	r1, r4
 800cdb6:	0038      	movs	r0, r7
 800cdb8:	f7ff ff1a 	bl	800cbf0 <__multiply>
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	6020      	str	r0, [r4, #0]
 800cdc0:	6003      	str	r3, [r0, #0]
 800cdc2:	0004      	movs	r4, r0
 800cdc4:	e7e2      	b.n	800cd8c <__pow5mult+0x3c>
 800cdc6:	0030      	movs	r0, r6
 800cdc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cdca:	46c0      	nop			; (mov r8, r8)
 800cdcc:	080147d0 	.word	0x080147d0
 800cdd0:	00000271 	.word	0x00000271

0800cdd4 <__lshift>:
 800cdd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdd6:	000c      	movs	r4, r1
 800cdd8:	0017      	movs	r7, r2
 800cdda:	6923      	ldr	r3, [r4, #16]
 800cddc:	1155      	asrs	r5, r2, #5
 800cdde:	b087      	sub	sp, #28
 800cde0:	18eb      	adds	r3, r5, r3
 800cde2:	9302      	str	r3, [sp, #8]
 800cde4:	3301      	adds	r3, #1
 800cde6:	9301      	str	r3, [sp, #4]
 800cde8:	6849      	ldr	r1, [r1, #4]
 800cdea:	68a3      	ldr	r3, [r4, #8]
 800cdec:	9004      	str	r0, [sp, #16]
 800cdee:	9a01      	ldr	r2, [sp, #4]
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	db10      	blt.n	800ce16 <__lshift+0x42>
 800cdf4:	9804      	ldr	r0, [sp, #16]
 800cdf6:	f7ff fdd9 	bl	800c9ac <_Balloc>
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	0002      	movs	r2, r0
 800cdfe:	0006      	movs	r6, r0
 800ce00:	0019      	movs	r1, r3
 800ce02:	3214      	adds	r2, #20
 800ce04:	4298      	cmp	r0, r3
 800ce06:	d10c      	bne.n	800ce22 <__lshift+0x4e>
 800ce08:	31df      	adds	r1, #223	; 0xdf
 800ce0a:	0032      	movs	r2, r6
 800ce0c:	4b26      	ldr	r3, [pc, #152]	; (800cea8 <__lshift+0xd4>)
 800ce0e:	4827      	ldr	r0, [pc, #156]	; (800ceac <__lshift+0xd8>)
 800ce10:	31ff      	adds	r1, #255	; 0xff
 800ce12:	f003 f88f 	bl	800ff34 <__assert_func>
 800ce16:	3101      	adds	r1, #1
 800ce18:	005b      	lsls	r3, r3, #1
 800ce1a:	e7e8      	b.n	800cdee <__lshift+0x1a>
 800ce1c:	0098      	lsls	r0, r3, #2
 800ce1e:	5011      	str	r1, [r2, r0]
 800ce20:	3301      	adds	r3, #1
 800ce22:	42ab      	cmp	r3, r5
 800ce24:	dbfa      	blt.n	800ce1c <__lshift+0x48>
 800ce26:	43eb      	mvns	r3, r5
 800ce28:	17db      	asrs	r3, r3, #31
 800ce2a:	401d      	ands	r5, r3
 800ce2c:	211f      	movs	r1, #31
 800ce2e:	0023      	movs	r3, r4
 800ce30:	0038      	movs	r0, r7
 800ce32:	00ad      	lsls	r5, r5, #2
 800ce34:	1955      	adds	r5, r2, r5
 800ce36:	6922      	ldr	r2, [r4, #16]
 800ce38:	3314      	adds	r3, #20
 800ce3a:	0092      	lsls	r2, r2, #2
 800ce3c:	4008      	ands	r0, r1
 800ce3e:	4684      	mov	ip, r0
 800ce40:	189a      	adds	r2, r3, r2
 800ce42:	420f      	tst	r7, r1
 800ce44:	d02a      	beq.n	800ce9c <__lshift+0xc8>
 800ce46:	3101      	adds	r1, #1
 800ce48:	1a09      	subs	r1, r1, r0
 800ce4a:	9105      	str	r1, [sp, #20]
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	9503      	str	r5, [sp, #12]
 800ce50:	4667      	mov	r7, ip
 800ce52:	6818      	ldr	r0, [r3, #0]
 800ce54:	40b8      	lsls	r0, r7
 800ce56:	4308      	orrs	r0, r1
 800ce58:	9903      	ldr	r1, [sp, #12]
 800ce5a:	c101      	stmia	r1!, {r0}
 800ce5c:	9103      	str	r1, [sp, #12]
 800ce5e:	9805      	ldr	r0, [sp, #20]
 800ce60:	cb02      	ldmia	r3!, {r1}
 800ce62:	40c1      	lsrs	r1, r0
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d8f3      	bhi.n	800ce50 <__lshift+0x7c>
 800ce68:	0020      	movs	r0, r4
 800ce6a:	3015      	adds	r0, #21
 800ce6c:	2304      	movs	r3, #4
 800ce6e:	4282      	cmp	r2, r0
 800ce70:	d304      	bcc.n	800ce7c <__lshift+0xa8>
 800ce72:	1b13      	subs	r3, r2, r4
 800ce74:	3b15      	subs	r3, #21
 800ce76:	089b      	lsrs	r3, r3, #2
 800ce78:	3301      	adds	r3, #1
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	50e9      	str	r1, [r5, r3]
 800ce7e:	2900      	cmp	r1, #0
 800ce80:	d002      	beq.n	800ce88 <__lshift+0xb4>
 800ce82:	9b02      	ldr	r3, [sp, #8]
 800ce84:	3302      	adds	r3, #2
 800ce86:	9301      	str	r3, [sp, #4]
 800ce88:	9b01      	ldr	r3, [sp, #4]
 800ce8a:	9804      	ldr	r0, [sp, #16]
 800ce8c:	3b01      	subs	r3, #1
 800ce8e:	0021      	movs	r1, r4
 800ce90:	6133      	str	r3, [r6, #16]
 800ce92:	f7ff fdb3 	bl	800c9fc <_Bfree>
 800ce96:	0030      	movs	r0, r6
 800ce98:	b007      	add	sp, #28
 800ce9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce9c:	cb02      	ldmia	r3!, {r1}
 800ce9e:	c502      	stmia	r5!, {r1}
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d8fb      	bhi.n	800ce9c <__lshift+0xc8>
 800cea4:	e7f0      	b.n	800ce88 <__lshift+0xb4>
 800cea6:	46c0      	nop			; (mov r8, r8)
 800cea8:	08014611 	.word	0x08014611
 800ceac:	08014682 	.word	0x08014682

0800ceb0 <__mcmp>:
 800ceb0:	b530      	push	{r4, r5, lr}
 800ceb2:	690b      	ldr	r3, [r1, #16]
 800ceb4:	6904      	ldr	r4, [r0, #16]
 800ceb6:	0002      	movs	r2, r0
 800ceb8:	1ae0      	subs	r0, r4, r3
 800ceba:	429c      	cmp	r4, r3
 800cebc:	d10e      	bne.n	800cedc <__mcmp+0x2c>
 800cebe:	3214      	adds	r2, #20
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	3114      	adds	r1, #20
 800cec4:	0014      	movs	r4, r2
 800cec6:	18c9      	adds	r1, r1, r3
 800cec8:	18d2      	adds	r2, r2, r3
 800ceca:	3a04      	subs	r2, #4
 800cecc:	3904      	subs	r1, #4
 800cece:	6815      	ldr	r5, [r2, #0]
 800ced0:	680b      	ldr	r3, [r1, #0]
 800ced2:	429d      	cmp	r5, r3
 800ced4:	d003      	beq.n	800cede <__mcmp+0x2e>
 800ced6:	2001      	movs	r0, #1
 800ced8:	429d      	cmp	r5, r3
 800ceda:	d303      	bcc.n	800cee4 <__mcmp+0x34>
 800cedc:	bd30      	pop	{r4, r5, pc}
 800cede:	4294      	cmp	r4, r2
 800cee0:	d3f3      	bcc.n	800ceca <__mcmp+0x1a>
 800cee2:	e7fb      	b.n	800cedc <__mcmp+0x2c>
 800cee4:	4240      	negs	r0, r0
 800cee6:	e7f9      	b.n	800cedc <__mcmp+0x2c>

0800cee8 <__mdiff>:
 800cee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ceea:	000e      	movs	r6, r1
 800ceec:	0007      	movs	r7, r0
 800ceee:	0011      	movs	r1, r2
 800cef0:	0030      	movs	r0, r6
 800cef2:	b087      	sub	sp, #28
 800cef4:	0014      	movs	r4, r2
 800cef6:	f7ff ffdb 	bl	800ceb0 <__mcmp>
 800cefa:	1e05      	subs	r5, r0, #0
 800cefc:	d110      	bne.n	800cf20 <__mdiff+0x38>
 800cefe:	0001      	movs	r1, r0
 800cf00:	0038      	movs	r0, r7
 800cf02:	f7ff fd53 	bl	800c9ac <_Balloc>
 800cf06:	1e02      	subs	r2, r0, #0
 800cf08:	d104      	bne.n	800cf14 <__mdiff+0x2c>
 800cf0a:	4b3f      	ldr	r3, [pc, #252]	; (800d008 <__mdiff+0x120>)
 800cf0c:	483f      	ldr	r0, [pc, #252]	; (800d00c <__mdiff+0x124>)
 800cf0e:	4940      	ldr	r1, [pc, #256]	; (800d010 <__mdiff+0x128>)
 800cf10:	f003 f810 	bl	800ff34 <__assert_func>
 800cf14:	2301      	movs	r3, #1
 800cf16:	6145      	str	r5, [r0, #20]
 800cf18:	6103      	str	r3, [r0, #16]
 800cf1a:	0010      	movs	r0, r2
 800cf1c:	b007      	add	sp, #28
 800cf1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf20:	2301      	movs	r3, #1
 800cf22:	9301      	str	r3, [sp, #4]
 800cf24:	2800      	cmp	r0, #0
 800cf26:	db04      	blt.n	800cf32 <__mdiff+0x4a>
 800cf28:	0023      	movs	r3, r4
 800cf2a:	0034      	movs	r4, r6
 800cf2c:	001e      	movs	r6, r3
 800cf2e:	2300      	movs	r3, #0
 800cf30:	9301      	str	r3, [sp, #4]
 800cf32:	0038      	movs	r0, r7
 800cf34:	6861      	ldr	r1, [r4, #4]
 800cf36:	f7ff fd39 	bl	800c9ac <_Balloc>
 800cf3a:	1e02      	subs	r2, r0, #0
 800cf3c:	d103      	bne.n	800cf46 <__mdiff+0x5e>
 800cf3e:	4b32      	ldr	r3, [pc, #200]	; (800d008 <__mdiff+0x120>)
 800cf40:	4832      	ldr	r0, [pc, #200]	; (800d00c <__mdiff+0x124>)
 800cf42:	4934      	ldr	r1, [pc, #208]	; (800d014 <__mdiff+0x12c>)
 800cf44:	e7e4      	b.n	800cf10 <__mdiff+0x28>
 800cf46:	9b01      	ldr	r3, [sp, #4]
 800cf48:	2700      	movs	r7, #0
 800cf4a:	60c3      	str	r3, [r0, #12]
 800cf4c:	6920      	ldr	r0, [r4, #16]
 800cf4e:	3414      	adds	r4, #20
 800cf50:	0083      	lsls	r3, r0, #2
 800cf52:	18e3      	adds	r3, r4, r3
 800cf54:	0021      	movs	r1, r4
 800cf56:	9401      	str	r4, [sp, #4]
 800cf58:	0034      	movs	r4, r6
 800cf5a:	9302      	str	r3, [sp, #8]
 800cf5c:	6933      	ldr	r3, [r6, #16]
 800cf5e:	3414      	adds	r4, #20
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	18e3      	adds	r3, r4, r3
 800cf64:	9303      	str	r3, [sp, #12]
 800cf66:	0013      	movs	r3, r2
 800cf68:	3314      	adds	r3, #20
 800cf6a:	469c      	mov	ip, r3
 800cf6c:	9305      	str	r3, [sp, #20]
 800cf6e:	9104      	str	r1, [sp, #16]
 800cf70:	9b04      	ldr	r3, [sp, #16]
 800cf72:	cc02      	ldmia	r4!, {r1}
 800cf74:	cb20      	ldmia	r3!, {r5}
 800cf76:	9304      	str	r3, [sp, #16]
 800cf78:	b2ab      	uxth	r3, r5
 800cf7a:	19df      	adds	r7, r3, r7
 800cf7c:	b28b      	uxth	r3, r1
 800cf7e:	1afb      	subs	r3, r7, r3
 800cf80:	0c09      	lsrs	r1, r1, #16
 800cf82:	0c2d      	lsrs	r5, r5, #16
 800cf84:	1a6d      	subs	r5, r5, r1
 800cf86:	1419      	asrs	r1, r3, #16
 800cf88:	1869      	adds	r1, r5, r1
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	140f      	asrs	r7, r1, #16
 800cf8e:	0409      	lsls	r1, r1, #16
 800cf90:	4319      	orrs	r1, r3
 800cf92:	4663      	mov	r3, ip
 800cf94:	c302      	stmia	r3!, {r1}
 800cf96:	469c      	mov	ip, r3
 800cf98:	9b03      	ldr	r3, [sp, #12]
 800cf9a:	42a3      	cmp	r3, r4
 800cf9c:	d8e8      	bhi.n	800cf70 <__mdiff+0x88>
 800cf9e:	0031      	movs	r1, r6
 800cfa0:	9c03      	ldr	r4, [sp, #12]
 800cfa2:	3115      	adds	r1, #21
 800cfa4:	2304      	movs	r3, #4
 800cfa6:	428c      	cmp	r4, r1
 800cfa8:	d304      	bcc.n	800cfb4 <__mdiff+0xcc>
 800cfaa:	1ba3      	subs	r3, r4, r6
 800cfac:	3b15      	subs	r3, #21
 800cfae:	089b      	lsrs	r3, r3, #2
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	9901      	ldr	r1, [sp, #4]
 800cfb6:	18cd      	adds	r5, r1, r3
 800cfb8:	9905      	ldr	r1, [sp, #20]
 800cfba:	002e      	movs	r6, r5
 800cfbc:	18cb      	adds	r3, r1, r3
 800cfbe:	469c      	mov	ip, r3
 800cfc0:	9902      	ldr	r1, [sp, #8]
 800cfc2:	428e      	cmp	r6, r1
 800cfc4:	d310      	bcc.n	800cfe8 <__mdiff+0x100>
 800cfc6:	9e02      	ldr	r6, [sp, #8]
 800cfc8:	1ee9      	subs	r1, r5, #3
 800cfca:	2400      	movs	r4, #0
 800cfcc:	428e      	cmp	r6, r1
 800cfce:	d304      	bcc.n	800cfda <__mdiff+0xf2>
 800cfd0:	0031      	movs	r1, r6
 800cfd2:	3103      	adds	r1, #3
 800cfd4:	1b49      	subs	r1, r1, r5
 800cfd6:	0889      	lsrs	r1, r1, #2
 800cfd8:	008c      	lsls	r4, r1, #2
 800cfda:	191b      	adds	r3, r3, r4
 800cfdc:	3b04      	subs	r3, #4
 800cfde:	6819      	ldr	r1, [r3, #0]
 800cfe0:	2900      	cmp	r1, #0
 800cfe2:	d00f      	beq.n	800d004 <__mdiff+0x11c>
 800cfe4:	6110      	str	r0, [r2, #16]
 800cfe6:	e798      	b.n	800cf1a <__mdiff+0x32>
 800cfe8:	ce02      	ldmia	r6!, {r1}
 800cfea:	b28c      	uxth	r4, r1
 800cfec:	19e4      	adds	r4, r4, r7
 800cfee:	0c0f      	lsrs	r7, r1, #16
 800cff0:	1421      	asrs	r1, r4, #16
 800cff2:	1879      	adds	r1, r7, r1
 800cff4:	b2a4      	uxth	r4, r4
 800cff6:	140f      	asrs	r7, r1, #16
 800cff8:	0409      	lsls	r1, r1, #16
 800cffa:	4321      	orrs	r1, r4
 800cffc:	4664      	mov	r4, ip
 800cffe:	c402      	stmia	r4!, {r1}
 800d000:	46a4      	mov	ip, r4
 800d002:	e7dd      	b.n	800cfc0 <__mdiff+0xd8>
 800d004:	3801      	subs	r0, #1
 800d006:	e7e9      	b.n	800cfdc <__mdiff+0xf4>
 800d008:	08014611 	.word	0x08014611
 800d00c:	08014682 	.word	0x08014682
 800d010:	00000237 	.word	0x00000237
 800d014:	00000245 	.word	0x00000245

0800d018 <__ulp>:
 800d018:	2000      	movs	r0, #0
 800d01a:	4b0b      	ldr	r3, [pc, #44]	; (800d048 <__ulp+0x30>)
 800d01c:	4019      	ands	r1, r3
 800d01e:	4b0b      	ldr	r3, [pc, #44]	; (800d04c <__ulp+0x34>)
 800d020:	18c9      	adds	r1, r1, r3
 800d022:	4281      	cmp	r1, r0
 800d024:	dc06      	bgt.n	800d034 <__ulp+0x1c>
 800d026:	4249      	negs	r1, r1
 800d028:	150b      	asrs	r3, r1, #20
 800d02a:	2b13      	cmp	r3, #19
 800d02c:	dc03      	bgt.n	800d036 <__ulp+0x1e>
 800d02e:	2180      	movs	r1, #128	; 0x80
 800d030:	0309      	lsls	r1, r1, #12
 800d032:	4119      	asrs	r1, r3
 800d034:	4770      	bx	lr
 800d036:	3b14      	subs	r3, #20
 800d038:	2001      	movs	r0, #1
 800d03a:	2b1e      	cmp	r3, #30
 800d03c:	dc02      	bgt.n	800d044 <__ulp+0x2c>
 800d03e:	2080      	movs	r0, #128	; 0x80
 800d040:	0600      	lsls	r0, r0, #24
 800d042:	40d8      	lsrs	r0, r3
 800d044:	2100      	movs	r1, #0
 800d046:	e7f5      	b.n	800d034 <__ulp+0x1c>
 800d048:	7ff00000 	.word	0x7ff00000
 800d04c:	fcc00000 	.word	0xfcc00000

0800d050 <__b2d>:
 800d050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d052:	0006      	movs	r6, r0
 800d054:	6903      	ldr	r3, [r0, #16]
 800d056:	3614      	adds	r6, #20
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	18f3      	adds	r3, r6, r3
 800d05c:	1f1d      	subs	r5, r3, #4
 800d05e:	682c      	ldr	r4, [r5, #0]
 800d060:	000f      	movs	r7, r1
 800d062:	0020      	movs	r0, r4
 800d064:	9301      	str	r3, [sp, #4]
 800d066:	f7ff fd63 	bl	800cb30 <__hi0bits>
 800d06a:	2220      	movs	r2, #32
 800d06c:	1a12      	subs	r2, r2, r0
 800d06e:	603a      	str	r2, [r7, #0]
 800d070:	0003      	movs	r3, r0
 800d072:	4a1c      	ldr	r2, [pc, #112]	; (800d0e4 <__b2d+0x94>)
 800d074:	280a      	cmp	r0, #10
 800d076:	dc15      	bgt.n	800d0a4 <__b2d+0x54>
 800d078:	210b      	movs	r1, #11
 800d07a:	0027      	movs	r7, r4
 800d07c:	1a09      	subs	r1, r1, r0
 800d07e:	40cf      	lsrs	r7, r1
 800d080:	433a      	orrs	r2, r7
 800d082:	468c      	mov	ip, r1
 800d084:	0011      	movs	r1, r2
 800d086:	2200      	movs	r2, #0
 800d088:	42ae      	cmp	r6, r5
 800d08a:	d202      	bcs.n	800d092 <__b2d+0x42>
 800d08c:	9a01      	ldr	r2, [sp, #4]
 800d08e:	3a08      	subs	r2, #8
 800d090:	6812      	ldr	r2, [r2, #0]
 800d092:	3315      	adds	r3, #21
 800d094:	409c      	lsls	r4, r3
 800d096:	4663      	mov	r3, ip
 800d098:	0027      	movs	r7, r4
 800d09a:	40da      	lsrs	r2, r3
 800d09c:	4317      	orrs	r7, r2
 800d09e:	0038      	movs	r0, r7
 800d0a0:	b003      	add	sp, #12
 800d0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0a4:	2700      	movs	r7, #0
 800d0a6:	42ae      	cmp	r6, r5
 800d0a8:	d202      	bcs.n	800d0b0 <__b2d+0x60>
 800d0aa:	9d01      	ldr	r5, [sp, #4]
 800d0ac:	3d08      	subs	r5, #8
 800d0ae:	682f      	ldr	r7, [r5, #0]
 800d0b0:	210b      	movs	r1, #11
 800d0b2:	4249      	negs	r1, r1
 800d0b4:	468c      	mov	ip, r1
 800d0b6:	449c      	add	ip, r3
 800d0b8:	2b0b      	cmp	r3, #11
 800d0ba:	d010      	beq.n	800d0de <__b2d+0x8e>
 800d0bc:	4661      	mov	r1, ip
 800d0be:	2320      	movs	r3, #32
 800d0c0:	408c      	lsls	r4, r1
 800d0c2:	1a5b      	subs	r3, r3, r1
 800d0c4:	0039      	movs	r1, r7
 800d0c6:	40d9      	lsrs	r1, r3
 800d0c8:	430c      	orrs	r4, r1
 800d0ca:	4322      	orrs	r2, r4
 800d0cc:	0011      	movs	r1, r2
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	42b5      	cmp	r5, r6
 800d0d2:	d901      	bls.n	800d0d8 <__b2d+0x88>
 800d0d4:	3d04      	subs	r5, #4
 800d0d6:	682a      	ldr	r2, [r5, #0]
 800d0d8:	4664      	mov	r4, ip
 800d0da:	40a7      	lsls	r7, r4
 800d0dc:	e7dd      	b.n	800d09a <__b2d+0x4a>
 800d0de:	4322      	orrs	r2, r4
 800d0e0:	0011      	movs	r1, r2
 800d0e2:	e7dc      	b.n	800d09e <__b2d+0x4e>
 800d0e4:	3ff00000 	.word	0x3ff00000

0800d0e8 <__d2b>:
 800d0e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0ea:	2101      	movs	r1, #1
 800d0ec:	0014      	movs	r4, r2
 800d0ee:	001d      	movs	r5, r3
 800d0f0:	9f08      	ldr	r7, [sp, #32]
 800d0f2:	f7ff fc5b 	bl	800c9ac <_Balloc>
 800d0f6:	1e06      	subs	r6, r0, #0
 800d0f8:	d105      	bne.n	800d106 <__d2b+0x1e>
 800d0fa:	0032      	movs	r2, r6
 800d0fc:	4b24      	ldr	r3, [pc, #144]	; (800d190 <__d2b+0xa8>)
 800d0fe:	4825      	ldr	r0, [pc, #148]	; (800d194 <__d2b+0xac>)
 800d100:	4925      	ldr	r1, [pc, #148]	; (800d198 <__d2b+0xb0>)
 800d102:	f002 ff17 	bl	800ff34 <__assert_func>
 800d106:	032b      	lsls	r3, r5, #12
 800d108:	006d      	lsls	r5, r5, #1
 800d10a:	0b1b      	lsrs	r3, r3, #12
 800d10c:	0d6d      	lsrs	r5, r5, #21
 800d10e:	d125      	bne.n	800d15c <__d2b+0x74>
 800d110:	9301      	str	r3, [sp, #4]
 800d112:	2c00      	cmp	r4, #0
 800d114:	d028      	beq.n	800d168 <__d2b+0x80>
 800d116:	4668      	mov	r0, sp
 800d118:	9400      	str	r4, [sp, #0]
 800d11a:	f7ff fd23 	bl	800cb64 <__lo0bits>
 800d11e:	9b01      	ldr	r3, [sp, #4]
 800d120:	9900      	ldr	r1, [sp, #0]
 800d122:	2800      	cmp	r0, #0
 800d124:	d01e      	beq.n	800d164 <__d2b+0x7c>
 800d126:	2220      	movs	r2, #32
 800d128:	001c      	movs	r4, r3
 800d12a:	1a12      	subs	r2, r2, r0
 800d12c:	4094      	lsls	r4, r2
 800d12e:	0022      	movs	r2, r4
 800d130:	40c3      	lsrs	r3, r0
 800d132:	430a      	orrs	r2, r1
 800d134:	6172      	str	r2, [r6, #20]
 800d136:	9301      	str	r3, [sp, #4]
 800d138:	9c01      	ldr	r4, [sp, #4]
 800d13a:	61b4      	str	r4, [r6, #24]
 800d13c:	1e63      	subs	r3, r4, #1
 800d13e:	419c      	sbcs	r4, r3
 800d140:	3401      	adds	r4, #1
 800d142:	6134      	str	r4, [r6, #16]
 800d144:	2d00      	cmp	r5, #0
 800d146:	d017      	beq.n	800d178 <__d2b+0x90>
 800d148:	2435      	movs	r4, #53	; 0x35
 800d14a:	4b14      	ldr	r3, [pc, #80]	; (800d19c <__d2b+0xb4>)
 800d14c:	18ed      	adds	r5, r5, r3
 800d14e:	182d      	adds	r5, r5, r0
 800d150:	603d      	str	r5, [r7, #0]
 800d152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d154:	1a24      	subs	r4, r4, r0
 800d156:	601c      	str	r4, [r3, #0]
 800d158:	0030      	movs	r0, r6
 800d15a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d15c:	2280      	movs	r2, #128	; 0x80
 800d15e:	0352      	lsls	r2, r2, #13
 800d160:	4313      	orrs	r3, r2
 800d162:	e7d5      	b.n	800d110 <__d2b+0x28>
 800d164:	6171      	str	r1, [r6, #20]
 800d166:	e7e7      	b.n	800d138 <__d2b+0x50>
 800d168:	a801      	add	r0, sp, #4
 800d16a:	f7ff fcfb 	bl	800cb64 <__lo0bits>
 800d16e:	9b01      	ldr	r3, [sp, #4]
 800d170:	2401      	movs	r4, #1
 800d172:	6173      	str	r3, [r6, #20]
 800d174:	3020      	adds	r0, #32
 800d176:	e7e4      	b.n	800d142 <__d2b+0x5a>
 800d178:	4b09      	ldr	r3, [pc, #36]	; (800d1a0 <__d2b+0xb8>)
 800d17a:	18c0      	adds	r0, r0, r3
 800d17c:	4b09      	ldr	r3, [pc, #36]	; (800d1a4 <__d2b+0xbc>)
 800d17e:	6038      	str	r0, [r7, #0]
 800d180:	18e3      	adds	r3, r4, r3
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	18f3      	adds	r3, r6, r3
 800d186:	6958      	ldr	r0, [r3, #20]
 800d188:	f7ff fcd2 	bl	800cb30 <__hi0bits>
 800d18c:	0164      	lsls	r4, r4, #5
 800d18e:	e7e0      	b.n	800d152 <__d2b+0x6a>
 800d190:	08014611 	.word	0x08014611
 800d194:	08014682 	.word	0x08014682
 800d198:	0000030f 	.word	0x0000030f
 800d19c:	fffffbcd 	.word	0xfffffbcd
 800d1a0:	fffffbce 	.word	0xfffffbce
 800d1a4:	3fffffff 	.word	0x3fffffff

0800d1a8 <__ratio>:
 800d1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1aa:	b087      	sub	sp, #28
 800d1ac:	000f      	movs	r7, r1
 800d1ae:	a904      	add	r1, sp, #16
 800d1b0:	0006      	movs	r6, r0
 800d1b2:	f7ff ff4d 	bl	800d050 <__b2d>
 800d1b6:	9000      	str	r0, [sp, #0]
 800d1b8:	9101      	str	r1, [sp, #4]
 800d1ba:	9c00      	ldr	r4, [sp, #0]
 800d1bc:	9d01      	ldr	r5, [sp, #4]
 800d1be:	0038      	movs	r0, r7
 800d1c0:	a905      	add	r1, sp, #20
 800d1c2:	f7ff ff45 	bl	800d050 <__b2d>
 800d1c6:	9002      	str	r0, [sp, #8]
 800d1c8:	9103      	str	r1, [sp, #12]
 800d1ca:	9a02      	ldr	r2, [sp, #8]
 800d1cc:	9b03      	ldr	r3, [sp, #12]
 800d1ce:	6930      	ldr	r0, [r6, #16]
 800d1d0:	6939      	ldr	r1, [r7, #16]
 800d1d2:	9e04      	ldr	r6, [sp, #16]
 800d1d4:	1a40      	subs	r0, r0, r1
 800d1d6:	9905      	ldr	r1, [sp, #20]
 800d1d8:	0140      	lsls	r0, r0, #5
 800d1da:	1a71      	subs	r1, r6, r1
 800d1dc:	1841      	adds	r1, r0, r1
 800d1de:	0508      	lsls	r0, r1, #20
 800d1e0:	2900      	cmp	r1, #0
 800d1e2:	dd07      	ble.n	800d1f4 <__ratio+0x4c>
 800d1e4:	9901      	ldr	r1, [sp, #4]
 800d1e6:	1845      	adds	r5, r0, r1
 800d1e8:	0020      	movs	r0, r4
 800d1ea:	0029      	movs	r1, r5
 800d1ec:	f7f3 fe44 	bl	8000e78 <__aeabi_ddiv>
 800d1f0:	b007      	add	sp, #28
 800d1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1f4:	9903      	ldr	r1, [sp, #12]
 800d1f6:	1a0b      	subs	r3, r1, r0
 800d1f8:	e7f6      	b.n	800d1e8 <__ratio+0x40>

0800d1fa <__copybits>:
 800d1fa:	b570      	push	{r4, r5, r6, lr}
 800d1fc:	0014      	movs	r4, r2
 800d1fe:	0005      	movs	r5, r0
 800d200:	3901      	subs	r1, #1
 800d202:	6913      	ldr	r3, [r2, #16]
 800d204:	1149      	asrs	r1, r1, #5
 800d206:	3101      	adds	r1, #1
 800d208:	0089      	lsls	r1, r1, #2
 800d20a:	3414      	adds	r4, #20
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	1841      	adds	r1, r0, r1
 800d210:	18e3      	adds	r3, r4, r3
 800d212:	42a3      	cmp	r3, r4
 800d214:	d80d      	bhi.n	800d232 <__copybits+0x38>
 800d216:	0014      	movs	r4, r2
 800d218:	3411      	adds	r4, #17
 800d21a:	2500      	movs	r5, #0
 800d21c:	429c      	cmp	r4, r3
 800d21e:	d803      	bhi.n	800d228 <__copybits+0x2e>
 800d220:	1a9b      	subs	r3, r3, r2
 800d222:	3b11      	subs	r3, #17
 800d224:	089b      	lsrs	r3, r3, #2
 800d226:	009d      	lsls	r5, r3, #2
 800d228:	2300      	movs	r3, #0
 800d22a:	1940      	adds	r0, r0, r5
 800d22c:	4281      	cmp	r1, r0
 800d22e:	d803      	bhi.n	800d238 <__copybits+0x3e>
 800d230:	bd70      	pop	{r4, r5, r6, pc}
 800d232:	cc40      	ldmia	r4!, {r6}
 800d234:	c540      	stmia	r5!, {r6}
 800d236:	e7ec      	b.n	800d212 <__copybits+0x18>
 800d238:	c008      	stmia	r0!, {r3}
 800d23a:	e7f7      	b.n	800d22c <__copybits+0x32>

0800d23c <__any_on>:
 800d23c:	0002      	movs	r2, r0
 800d23e:	6900      	ldr	r0, [r0, #16]
 800d240:	b510      	push	{r4, lr}
 800d242:	3214      	adds	r2, #20
 800d244:	114b      	asrs	r3, r1, #5
 800d246:	4298      	cmp	r0, r3
 800d248:	db13      	blt.n	800d272 <__any_on+0x36>
 800d24a:	dd0c      	ble.n	800d266 <__any_on+0x2a>
 800d24c:	241f      	movs	r4, #31
 800d24e:	0008      	movs	r0, r1
 800d250:	4020      	ands	r0, r4
 800d252:	4221      	tst	r1, r4
 800d254:	d007      	beq.n	800d266 <__any_on+0x2a>
 800d256:	0099      	lsls	r1, r3, #2
 800d258:	588c      	ldr	r4, [r1, r2]
 800d25a:	0021      	movs	r1, r4
 800d25c:	40c1      	lsrs	r1, r0
 800d25e:	4081      	lsls	r1, r0
 800d260:	2001      	movs	r0, #1
 800d262:	428c      	cmp	r4, r1
 800d264:	d104      	bne.n	800d270 <__any_on+0x34>
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	18d3      	adds	r3, r2, r3
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d803      	bhi.n	800d276 <__any_on+0x3a>
 800d26e:	2000      	movs	r0, #0
 800d270:	bd10      	pop	{r4, pc}
 800d272:	0003      	movs	r3, r0
 800d274:	e7f7      	b.n	800d266 <__any_on+0x2a>
 800d276:	3b04      	subs	r3, #4
 800d278:	6819      	ldr	r1, [r3, #0]
 800d27a:	2900      	cmp	r1, #0
 800d27c:	d0f5      	beq.n	800d26a <__any_on+0x2e>
 800d27e:	2001      	movs	r0, #1
 800d280:	e7f6      	b.n	800d270 <__any_on+0x34>

0800d282 <__ascii_wctomb>:
 800d282:	0003      	movs	r3, r0
 800d284:	1e08      	subs	r0, r1, #0
 800d286:	d005      	beq.n	800d294 <__ascii_wctomb+0x12>
 800d288:	2aff      	cmp	r2, #255	; 0xff
 800d28a:	d904      	bls.n	800d296 <__ascii_wctomb+0x14>
 800d28c:	228a      	movs	r2, #138	; 0x8a
 800d28e:	2001      	movs	r0, #1
 800d290:	601a      	str	r2, [r3, #0]
 800d292:	4240      	negs	r0, r0
 800d294:	4770      	bx	lr
 800d296:	2001      	movs	r0, #1
 800d298:	700a      	strb	r2, [r1, #0]
 800d29a:	e7fb      	b.n	800d294 <__ascii_wctomb+0x12>

0800d29c <_svfprintf_r>:
 800d29c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d29e:	b0d9      	sub	sp, #356	; 0x164
 800d2a0:	001c      	movs	r4, r3
 800d2a2:	910b      	str	r1, [sp, #44]	; 0x2c
 800d2a4:	9208      	str	r2, [sp, #32]
 800d2a6:	900a      	str	r0, [sp, #40]	; 0x28
 800d2a8:	f002 fdae 	bl	800fe08 <_localeconv_r>
 800d2ac:	6803      	ldr	r3, [r0, #0]
 800d2ae:	0018      	movs	r0, r3
 800d2b0:	931c      	str	r3, [sp, #112]	; 0x70
 800d2b2:	f7f2 ff27 	bl	8000104 <strlen>
 800d2b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2b8:	9016      	str	r0, [sp, #88]	; 0x58
 800d2ba:	899b      	ldrh	r3, [r3, #12]
 800d2bc:	061b      	lsls	r3, r3, #24
 800d2be:	d517      	bpl.n	800d2f0 <_svfprintf_r+0x54>
 800d2c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d113      	bne.n	800d2f0 <_svfprintf_r+0x54>
 800d2c8:	2140      	movs	r1, #64	; 0x40
 800d2ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d2cc:	f7fd fa94 	bl	800a7f8 <_malloc_r>
 800d2d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2d2:	6018      	str	r0, [r3, #0]
 800d2d4:	6118      	str	r0, [r3, #16]
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	d107      	bne.n	800d2ea <_svfprintf_r+0x4e>
 800d2da:	230c      	movs	r3, #12
 800d2dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2de:	6013      	str	r3, [r2, #0]
 800d2e0:	3b0d      	subs	r3, #13
 800d2e2:	9317      	str	r3, [sp, #92]	; 0x5c
 800d2e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d2e6:	b059      	add	sp, #356	; 0x164
 800d2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ea:	2340      	movs	r3, #64	; 0x40
 800d2ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d2ee:	6153      	str	r3, [r2, #20]
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	932e      	str	r3, [sp, #184]	; 0xb8
 800d2f6:	932d      	str	r3, [sp, #180]	; 0xb4
 800d2f8:	930e      	str	r3, [sp, #56]	; 0x38
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	9214      	str	r2, [sp, #80]	; 0x50
 800d2fe:	9315      	str	r3, [sp, #84]	; 0x54
 800d300:	2300      	movs	r3, #0
 800d302:	af2f      	add	r7, sp, #188	; 0xbc
 800d304:	972c      	str	r7, [sp, #176]	; 0xb0
 800d306:	931f      	str	r3, [sp, #124]	; 0x7c
 800d308:	931e      	str	r3, [sp, #120]	; 0x78
 800d30a:	9312      	str	r3, [sp, #72]	; 0x48
 800d30c:	931b      	str	r3, [sp, #108]	; 0x6c
 800d30e:	931d      	str	r3, [sp, #116]	; 0x74
 800d310:	9317      	str	r3, [sp, #92]	; 0x5c
 800d312:	9d08      	ldr	r5, [sp, #32]
 800d314:	782b      	ldrb	r3, [r5, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d002      	beq.n	800d320 <_svfprintf_r+0x84>
 800d31a:	2b25      	cmp	r3, #37	; 0x25
 800d31c:	d000      	beq.n	800d320 <_svfprintf_r+0x84>
 800d31e:	e091      	b.n	800d444 <_svfprintf_r+0x1a8>
 800d320:	9b08      	ldr	r3, [sp, #32]
 800d322:	1aee      	subs	r6, r5, r3
 800d324:	429d      	cmp	r5, r3
 800d326:	d016      	beq.n	800d356 <_svfprintf_r+0xba>
 800d328:	603b      	str	r3, [r7, #0]
 800d32a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d32c:	607e      	str	r6, [r7, #4]
 800d32e:	199b      	adds	r3, r3, r6
 800d330:	932e      	str	r3, [sp, #184]	; 0xb8
 800d332:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d334:	3708      	adds	r7, #8
 800d336:	3301      	adds	r3, #1
 800d338:	932d      	str	r3, [sp, #180]	; 0xb4
 800d33a:	2b07      	cmp	r3, #7
 800d33c:	dd08      	ble.n	800d350 <_svfprintf_r+0xb4>
 800d33e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d340:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d342:	aa2c      	add	r2, sp, #176	; 0xb0
 800d344:	f004 f83a 	bl	80113bc <__ssprint_r>
 800d348:	2800      	cmp	r0, #0
 800d34a:	d000      	beq.n	800d34e <_svfprintf_r+0xb2>
 800d34c:	e1cf      	b.n	800d6ee <_svfprintf_r+0x452>
 800d34e:	af2f      	add	r7, sp, #188	; 0xbc
 800d350:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d352:	199b      	adds	r3, r3, r6
 800d354:	9317      	str	r3, [sp, #92]	; 0x5c
 800d356:	782b      	ldrb	r3, [r5, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d101      	bne.n	800d360 <_svfprintf_r+0xc4>
 800d35c:	f001 f99e 	bl	800e69c <_svfprintf_r+0x1400>
 800d360:	221b      	movs	r2, #27
 800d362:	2300      	movs	r3, #0
 800d364:	a91e      	add	r1, sp, #120	; 0x78
 800d366:	1852      	adds	r2, r2, r1
 800d368:	7013      	strb	r3, [r2, #0]
 800d36a:	2201      	movs	r2, #1
 800d36c:	001e      	movs	r6, r3
 800d36e:	4252      	negs	r2, r2
 800d370:	3501      	adds	r5, #1
 800d372:	9209      	str	r2, [sp, #36]	; 0x24
 800d374:	9318      	str	r3, [sp, #96]	; 0x60
 800d376:	1c6b      	adds	r3, r5, #1
 800d378:	9313      	str	r3, [sp, #76]	; 0x4c
 800d37a:	782b      	ldrb	r3, [r5, #0]
 800d37c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d37e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d380:	3820      	subs	r0, #32
 800d382:	285a      	cmp	r0, #90	; 0x5a
 800d384:	d901      	bls.n	800d38a <_svfprintf_r+0xee>
 800d386:	f000 fe20 	bl	800dfca <_svfprintf_r+0xd2e>
 800d38a:	f7f2 fecd 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d38e:	0078      	.short	0x0078
 800d390:	061e061e 	.word	0x061e061e
 800d394:	061e0082 	.word	0x061e0082
 800d398:	061e061e 	.word	0x061e061e
 800d39c:	061e005d 	.word	0x061e005d
 800d3a0:	0084061e 	.word	0x0084061e
 800d3a4:	061e008c 	.word	0x061e008c
 800d3a8:	0091008a 	.word	0x0091008a
 800d3ac:	00b2061e 	.word	0x00b2061e
 800d3b0:	00b400b4 	.word	0x00b400b4
 800d3b4:	00b400b4 	.word	0x00b400b4
 800d3b8:	00b400b4 	.word	0x00b400b4
 800d3bc:	00b400b4 	.word	0x00b400b4
 800d3c0:	061e00b4 	.word	0x061e00b4
 800d3c4:	061e061e 	.word	0x061e061e
 800d3c8:	061e061e 	.word	0x061e061e
 800d3cc:	061e061e 	.word	0x061e061e
 800d3d0:	061e013b 	.word	0x061e013b
 800d3d4:	00f400e0 	.word	0x00f400e0
 800d3d8:	013b013b 	.word	0x013b013b
 800d3dc:	061e013b 	.word	0x061e013b
 800d3e0:	061e061e 	.word	0x061e061e
 800d3e4:	00c7061e 	.word	0x00c7061e
 800d3e8:	061e061e 	.word	0x061e061e
 800d3ec:	061e04c7 	.word	0x061e04c7
 800d3f0:	061e061e 	.word	0x061e061e
 800d3f4:	061e050a 	.word	0x061e050a
 800d3f8:	061e052a 	.word	0x061e052a
 800d3fc:	055c061e 	.word	0x055c061e
 800d400:	061e061e 	.word	0x061e061e
 800d404:	061e061e 	.word	0x061e061e
 800d408:	061e061e 	.word	0x061e061e
 800d40c:	061e061e 	.word	0x061e061e
 800d410:	061e013b 	.word	0x061e013b
 800d414:	00f600e0 	.word	0x00f600e0
 800d418:	013b013b 	.word	0x013b013b
 800d41c:	00c9013b 	.word	0x00c9013b
 800d420:	00dc00f6 	.word	0x00dc00f6
 800d424:	00d5061e 	.word	0x00d5061e
 800d428:	04a7061e 	.word	0x04a7061e
 800d42c:	04fa04c9 	.word	0x04fa04c9
 800d430:	061e00dc 	.word	0x061e00dc
 800d434:	0080050a 	.word	0x0080050a
 800d438:	061e052c 	.word	0x061e052c
 800d43c:	057c061e 	.word	0x057c061e
 800d440:	0080061e 	.word	0x0080061e
 800d444:	3501      	adds	r5, #1
 800d446:	e765      	b.n	800d314 <_svfprintf_r+0x78>
 800d448:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d44a:	f002 fcdd 	bl	800fe08 <_localeconv_r>
 800d44e:	6843      	ldr	r3, [r0, #4]
 800d450:	0018      	movs	r0, r3
 800d452:	931d      	str	r3, [sp, #116]	; 0x74
 800d454:	f7f2 fe56 	bl	8000104 <strlen>
 800d458:	901b      	str	r0, [sp, #108]	; 0x6c
 800d45a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d45c:	f002 fcd4 	bl	800fe08 <_localeconv_r>
 800d460:	6883      	ldr	r3, [r0, #8]
 800d462:	9312      	str	r3, [sp, #72]	; 0x48
 800d464:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d466:	2b00      	cmp	r3, #0
 800d468:	d011      	beq.n	800d48e <_svfprintf_r+0x1f2>
 800d46a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d00e      	beq.n	800d48e <_svfprintf_r+0x1f2>
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d00b      	beq.n	800d48e <_svfprintf_r+0x1f2>
 800d476:	2380      	movs	r3, #128	; 0x80
 800d478:	00db      	lsls	r3, r3, #3
 800d47a:	431e      	orrs	r6, r3
 800d47c:	e007      	b.n	800d48e <_svfprintf_r+0x1f2>
 800d47e:	231b      	movs	r3, #27
 800d480:	aa1e      	add	r2, sp, #120	; 0x78
 800d482:	189b      	adds	r3, r3, r2
 800d484:	781a      	ldrb	r2, [r3, #0]
 800d486:	2a00      	cmp	r2, #0
 800d488:	d101      	bne.n	800d48e <_svfprintf_r+0x1f2>
 800d48a:	3220      	adds	r2, #32
 800d48c:	701a      	strb	r2, [r3, #0]
 800d48e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d490:	e771      	b.n	800d376 <_svfprintf_r+0xda>
 800d492:	2301      	movs	r3, #1
 800d494:	e7f1      	b.n	800d47a <_svfprintf_r+0x1de>
 800d496:	cc08      	ldmia	r4!, {r3}
 800d498:	9318      	str	r3, [sp, #96]	; 0x60
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	daf7      	bge.n	800d48e <_svfprintf_r+0x1f2>
 800d49e:	425b      	negs	r3, r3
 800d4a0:	9318      	str	r3, [sp, #96]	; 0x60
 800d4a2:	2304      	movs	r3, #4
 800d4a4:	e7e9      	b.n	800d47a <_svfprintf_r+0x1de>
 800d4a6:	231b      	movs	r3, #27
 800d4a8:	aa1e      	add	r2, sp, #120	; 0x78
 800d4aa:	189b      	adds	r3, r3, r2
 800d4ac:	222b      	movs	r2, #43	; 0x2b
 800d4ae:	e7ed      	b.n	800d48c <_svfprintf_r+0x1f0>
 800d4b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d4b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d4b4:	7812      	ldrb	r2, [r2, #0]
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	920f      	str	r2, [sp, #60]	; 0x3c
 800d4ba:	2a2a      	cmp	r2, #42	; 0x2a
 800d4bc:	d010      	beq.n	800d4e0 <_svfprintf_r+0x244>
 800d4be:	2200      	movs	r2, #0
 800d4c0:	9209      	str	r2, [sp, #36]	; 0x24
 800d4c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d4c4:	9313      	str	r3, [sp, #76]	; 0x4c
 800d4c6:	3a30      	subs	r2, #48	; 0x30
 800d4c8:	2a09      	cmp	r2, #9
 800d4ca:	d900      	bls.n	800d4ce <_svfprintf_r+0x232>
 800d4cc:	e757      	b.n	800d37e <_svfprintf_r+0xe2>
 800d4ce:	200a      	movs	r0, #10
 800d4d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4d2:	4341      	muls	r1, r0
 800d4d4:	188a      	adds	r2, r1, r2
 800d4d6:	9209      	str	r2, [sp, #36]	; 0x24
 800d4d8:	781a      	ldrb	r2, [r3, #0]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	920f      	str	r2, [sp, #60]	; 0x3c
 800d4de:	e7f0      	b.n	800d4c2 <_svfprintf_r+0x226>
 800d4e0:	cc04      	ldmia	r4!, {r2}
 800d4e2:	9209      	str	r2, [sp, #36]	; 0x24
 800d4e4:	2a00      	cmp	r2, #0
 800d4e6:	da02      	bge.n	800d4ee <_svfprintf_r+0x252>
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	4252      	negs	r2, r2
 800d4ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d4ee:	9313      	str	r3, [sp, #76]	; 0x4c
 800d4f0:	e7cd      	b.n	800d48e <_svfprintf_r+0x1f2>
 800d4f2:	2380      	movs	r3, #128	; 0x80
 800d4f4:	e7c1      	b.n	800d47a <_svfprintf_r+0x1de>
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d4fa:	9218      	str	r2, [sp, #96]	; 0x60
 800d4fc:	210a      	movs	r1, #10
 800d4fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d500:	434a      	muls	r2, r1
 800d502:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d504:	3930      	subs	r1, #48	; 0x30
 800d506:	188a      	adds	r2, r1, r2
 800d508:	9218      	str	r2, [sp, #96]	; 0x60
 800d50a:	001a      	movs	r2, r3
 800d50c:	7812      	ldrb	r2, [r2, #0]
 800d50e:	3301      	adds	r3, #1
 800d510:	920f      	str	r2, [sp, #60]	; 0x3c
 800d512:	3a30      	subs	r2, #48	; 0x30
 800d514:	9313      	str	r3, [sp, #76]	; 0x4c
 800d516:	2a09      	cmp	r2, #9
 800d518:	d9f0      	bls.n	800d4fc <_svfprintf_r+0x260>
 800d51a:	e730      	b.n	800d37e <_svfprintf_r+0xe2>
 800d51c:	2308      	movs	r3, #8
 800d51e:	e7ac      	b.n	800d47a <_svfprintf_r+0x1de>
 800d520:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	2b68      	cmp	r3, #104	; 0x68
 800d526:	d105      	bne.n	800d534 <_svfprintf_r+0x298>
 800d528:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d52a:	3301      	adds	r3, #1
 800d52c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d52e:	2380      	movs	r3, #128	; 0x80
 800d530:	009b      	lsls	r3, r3, #2
 800d532:	e7a2      	b.n	800d47a <_svfprintf_r+0x1de>
 800d534:	2340      	movs	r3, #64	; 0x40
 800d536:	e7a0      	b.n	800d47a <_svfprintf_r+0x1de>
 800d538:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	2b6c      	cmp	r3, #108	; 0x6c
 800d53e:	d104      	bne.n	800d54a <_svfprintf_r+0x2ae>
 800d540:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d542:	3301      	adds	r3, #1
 800d544:	9313      	str	r3, [sp, #76]	; 0x4c
 800d546:	2320      	movs	r3, #32
 800d548:	e797      	b.n	800d47a <_svfprintf_r+0x1de>
 800d54a:	2310      	movs	r3, #16
 800d54c:	e795      	b.n	800d47a <_svfprintf_r+0x1de>
 800d54e:	0021      	movs	r1, r4
 800d550:	c904      	ldmia	r1!, {r2}
 800d552:	ab3f      	add	r3, sp, #252	; 0xfc
 800d554:	910d      	str	r1, [sp, #52]	; 0x34
 800d556:	211b      	movs	r1, #27
 800d558:	701a      	strb	r2, [r3, #0]
 800d55a:	2200      	movs	r2, #0
 800d55c:	a81e      	add	r0, sp, #120	; 0x78
 800d55e:	1809      	adds	r1, r1, r0
 800d560:	700a      	strb	r2, [r1, #0]
 800d562:	920c      	str	r2, [sp, #48]	; 0x30
 800d564:	3201      	adds	r2, #1
 800d566:	9209      	str	r2, [sp, #36]	; 0x24
 800d568:	2200      	movs	r2, #0
 800d56a:	9308      	str	r3, [sp, #32]
 800d56c:	0015      	movs	r5, r2
 800d56e:	9219      	str	r2, [sp, #100]	; 0x64
 800d570:	9210      	str	r2, [sp, #64]	; 0x40
 800d572:	9211      	str	r2, [sp, #68]	; 0x44
 800d574:	e1f1      	b.n	800d95a <_svfprintf_r+0x6be>
 800d576:	2310      	movs	r3, #16
 800d578:	431e      	orrs	r6, r3
 800d57a:	06b3      	lsls	r3, r6, #26
 800d57c:	d531      	bpl.n	800d5e2 <_svfprintf_r+0x346>
 800d57e:	2307      	movs	r3, #7
 800d580:	3407      	adds	r4, #7
 800d582:	439c      	bics	r4, r3
 800d584:	0022      	movs	r2, r4
 800d586:	ca18      	ldmia	r2!, {r3, r4}
 800d588:	9306      	str	r3, [sp, #24]
 800d58a:	9407      	str	r4, [sp, #28]
 800d58c:	920d      	str	r2, [sp, #52]	; 0x34
 800d58e:	9a07      	ldr	r2, [sp, #28]
 800d590:	2301      	movs	r3, #1
 800d592:	2a00      	cmp	r2, #0
 800d594:	da0b      	bge.n	800d5ae <_svfprintf_r+0x312>
 800d596:	9c06      	ldr	r4, [sp, #24]
 800d598:	9d07      	ldr	r5, [sp, #28]
 800d59a:	2200      	movs	r2, #0
 800d59c:	4261      	negs	r1, r4
 800d59e:	41aa      	sbcs	r2, r5
 800d5a0:	9106      	str	r1, [sp, #24]
 800d5a2:	9207      	str	r2, [sp, #28]
 800d5a4:	221b      	movs	r2, #27
 800d5a6:	a91e      	add	r1, sp, #120	; 0x78
 800d5a8:	1852      	adds	r2, r2, r1
 800d5aa:	212d      	movs	r1, #45	; 0x2d
 800d5ac:	7011      	strb	r1, [r2, #0]
 800d5ae:	9907      	ldr	r1, [sp, #28]
 800d5b0:	9a06      	ldr	r2, [sp, #24]
 800d5b2:	430a      	orrs	r2, r1
 800d5b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5b6:	3101      	adds	r1, #1
 800d5b8:	d101      	bne.n	800d5be <_svfprintf_r+0x322>
 800d5ba:	f001 f87b 	bl	800e6b4 <_svfprintf_r+0x1418>
 800d5be:	2180      	movs	r1, #128	; 0x80
 800d5c0:	0034      	movs	r4, r6
 800d5c2:	438c      	bics	r4, r1
 800d5c4:	2a00      	cmp	r2, #0
 800d5c6:	d001      	beq.n	800d5cc <_svfprintf_r+0x330>
 800d5c8:	f001 f879 	bl	800e6be <_svfprintf_r+0x1422>
 800d5cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5ce:	2a00      	cmp	r2, #0
 800d5d0:	d101      	bne.n	800d5d6 <_svfprintf_r+0x33a>
 800d5d2:	f000 fcef 	bl	800dfb4 <_svfprintf_r+0xd18>
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d001      	beq.n	800d5de <_svfprintf_r+0x342>
 800d5da:	f001 f874 	bl	800e6c6 <_svfprintf_r+0x142a>
 800d5de:	f000 fc79 	bl	800ded4 <_svfprintf_r+0xc38>
 800d5e2:	0022      	movs	r2, r4
 800d5e4:	ca08      	ldmia	r2!, {r3}
 800d5e6:	920d      	str	r2, [sp, #52]	; 0x34
 800d5e8:	06f2      	lsls	r2, r6, #27
 800d5ea:	d503      	bpl.n	800d5f4 <_svfprintf_r+0x358>
 800d5ec:	9306      	str	r3, [sp, #24]
 800d5ee:	17db      	asrs	r3, r3, #31
 800d5f0:	9307      	str	r3, [sp, #28]
 800d5f2:	e7cc      	b.n	800d58e <_svfprintf_r+0x2f2>
 800d5f4:	0672      	lsls	r2, r6, #25
 800d5f6:	d501      	bpl.n	800d5fc <_svfprintf_r+0x360>
 800d5f8:	b21b      	sxth	r3, r3
 800d5fa:	e7f7      	b.n	800d5ec <_svfprintf_r+0x350>
 800d5fc:	05b2      	lsls	r2, r6, #22
 800d5fe:	d5f5      	bpl.n	800d5ec <_svfprintf_r+0x350>
 800d600:	b25b      	sxtb	r3, r3
 800d602:	e7f3      	b.n	800d5ec <_svfprintf_r+0x350>
 800d604:	2307      	movs	r3, #7
 800d606:	3407      	adds	r4, #7
 800d608:	439c      	bics	r4, r3
 800d60a:	0022      	movs	r2, r4
 800d60c:	ca18      	ldmia	r2!, {r3, r4}
 800d60e:	920d      	str	r2, [sp, #52]	; 0x34
 800d610:	2201      	movs	r2, #1
 800d612:	9314      	str	r3, [sp, #80]	; 0x50
 800d614:	9415      	str	r4, [sp, #84]	; 0x54
 800d616:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d618:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d61a:	005c      	lsls	r4, r3, #1
 800d61c:	0864      	lsrs	r4, r4, #1
 800d61e:	0028      	movs	r0, r5
 800d620:	0021      	movs	r1, r4
 800d622:	4b3e      	ldr	r3, [pc, #248]	; (800d71c <_svfprintf_r+0x480>)
 800d624:	4252      	negs	r2, r2
 800d626:	f7f4 fe65 	bl	80022f4 <__aeabi_dcmpun>
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d126      	bne.n	800d67c <_svfprintf_r+0x3e0>
 800d62e:	2201      	movs	r2, #1
 800d630:	0028      	movs	r0, r5
 800d632:	0021      	movs	r1, r4
 800d634:	4b39      	ldr	r3, [pc, #228]	; (800d71c <_svfprintf_r+0x480>)
 800d636:	4252      	negs	r2, r2
 800d638:	f7f2 ff16 	bl	8000468 <__aeabi_dcmple>
 800d63c:	2800      	cmp	r0, #0
 800d63e:	d11d      	bne.n	800d67c <_svfprintf_r+0x3e0>
 800d640:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d642:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d644:	2200      	movs	r2, #0
 800d646:	2300      	movs	r3, #0
 800d648:	f7f2 ff04 	bl	8000454 <__aeabi_dcmplt>
 800d64c:	2800      	cmp	r0, #0
 800d64e:	d004      	beq.n	800d65a <_svfprintf_r+0x3be>
 800d650:	231b      	movs	r3, #27
 800d652:	aa1e      	add	r2, sp, #120	; 0x78
 800d654:	189b      	adds	r3, r3, r2
 800d656:	222d      	movs	r2, #45	; 0x2d
 800d658:	701a      	strb	r2, [r3, #0]
 800d65a:	4b31      	ldr	r3, [pc, #196]	; (800d720 <_svfprintf_r+0x484>)
 800d65c:	9308      	str	r3, [sp, #32]
 800d65e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d660:	2b47      	cmp	r3, #71	; 0x47
 800d662:	dd01      	ble.n	800d668 <_svfprintf_r+0x3cc>
 800d664:	4b2f      	ldr	r3, [pc, #188]	; (800d724 <_svfprintf_r+0x488>)
 800d666:	9308      	str	r3, [sp, #32]
 800d668:	2380      	movs	r3, #128	; 0x80
 800d66a:	439e      	bics	r6, r3
 800d66c:	2300      	movs	r3, #0
 800d66e:	930c      	str	r3, [sp, #48]	; 0x30
 800d670:	3303      	adds	r3, #3
 800d672:	9309      	str	r3, [sp, #36]	; 0x24
 800d674:	2300      	movs	r3, #0
 800d676:	9319      	str	r3, [sp, #100]	; 0x64
 800d678:	f000 fc78 	bl	800df6c <_svfprintf_r+0xcd0>
 800d67c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d67e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d680:	0010      	movs	r0, r2
 800d682:	0019      	movs	r1, r3
 800d684:	f7f4 fe36 	bl	80022f4 <__aeabi_dcmpun>
 800d688:	2800      	cmp	r0, #0
 800d68a:	d00e      	beq.n	800d6aa <_svfprintf_r+0x40e>
 800d68c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d68e:	2b00      	cmp	r3, #0
 800d690:	da04      	bge.n	800d69c <_svfprintf_r+0x400>
 800d692:	231b      	movs	r3, #27
 800d694:	aa1e      	add	r2, sp, #120	; 0x78
 800d696:	189b      	adds	r3, r3, r2
 800d698:	222d      	movs	r2, #45	; 0x2d
 800d69a:	701a      	strb	r2, [r3, #0]
 800d69c:	4b22      	ldr	r3, [pc, #136]	; (800d728 <_svfprintf_r+0x48c>)
 800d69e:	9308      	str	r3, [sp, #32]
 800d6a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6a2:	2b47      	cmp	r3, #71	; 0x47
 800d6a4:	dde0      	ble.n	800d668 <_svfprintf_r+0x3cc>
 800d6a6:	4b21      	ldr	r3, [pc, #132]	; (800d72c <_svfprintf_r+0x490>)
 800d6a8:	e7dd      	b.n	800d666 <_svfprintf_r+0x3ca>
 800d6aa:	2320      	movs	r3, #32
 800d6ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d6ae:	439a      	bics	r2, r3
 800d6b0:	9210      	str	r2, [sp, #64]	; 0x40
 800d6b2:	2a41      	cmp	r2, #65	; 0x41
 800d6b4:	d123      	bne.n	800d6fe <_svfprintf_r+0x462>
 800d6b6:	2230      	movs	r2, #48	; 0x30
 800d6b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d6ba:	ab25      	add	r3, sp, #148	; 0x94
 800d6bc:	701a      	strb	r2, [r3, #0]
 800d6be:	3248      	adds	r2, #72	; 0x48
 800d6c0:	2961      	cmp	r1, #97	; 0x61
 800d6c2:	d000      	beq.n	800d6c6 <_svfprintf_r+0x42a>
 800d6c4:	3a20      	subs	r2, #32
 800d6c6:	705a      	strb	r2, [r3, #1]
 800d6c8:	2302      	movs	r3, #2
 800d6ca:	431e      	orrs	r6, r3
 800d6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6ce:	2b63      	cmp	r3, #99	; 0x63
 800d6d0:	dd2e      	ble.n	800d730 <_svfprintf_r+0x494>
 800d6d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d6d4:	1c59      	adds	r1, r3, #1
 800d6d6:	f7fd f88f 	bl	800a7f8 <_malloc_r>
 800d6da:	9008      	str	r0, [sp, #32]
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d000      	beq.n	800d6e2 <_svfprintf_r+0x446>
 800d6e0:	e216      	b.n	800db10 <_svfprintf_r+0x874>
 800d6e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6e4:	899a      	ldrh	r2, [r3, #12]
 800d6e6:	2340      	movs	r3, #64	; 0x40
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d6ec:	8193      	strh	r3, [r2, #12]
 800d6ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6f0:	899b      	ldrh	r3, [r3, #12]
 800d6f2:	065b      	lsls	r3, r3, #25
 800d6f4:	d400      	bmi.n	800d6f8 <_svfprintf_r+0x45c>
 800d6f6:	e5f5      	b.n	800d2e4 <_svfprintf_r+0x48>
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	425b      	negs	r3, r3
 800d6fc:	e5f1      	b.n	800d2e2 <_svfprintf_r+0x46>
 800d6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d700:	900c      	str	r0, [sp, #48]	; 0x30
 800d702:	3301      	adds	r3, #1
 800d704:	d100      	bne.n	800d708 <_svfprintf_r+0x46c>
 800d706:	e206      	b.n	800db16 <_svfprintf_r+0x87a>
 800d708:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d70a:	2b47      	cmp	r3, #71	; 0x47
 800d70c:	d114      	bne.n	800d738 <_svfprintf_r+0x49c>
 800d70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d710:	2b00      	cmp	r3, #0
 800d712:	d111      	bne.n	800d738 <_svfprintf_r+0x49c>
 800d714:	3301      	adds	r3, #1
 800d716:	9309      	str	r3, [sp, #36]	; 0x24
 800d718:	e00e      	b.n	800d738 <_svfprintf_r+0x49c>
 800d71a:	46c0      	nop			; (mov r8, r8)
 800d71c:	7fefffff 	.word	0x7fefffff
 800d720:	080147dc 	.word	0x080147dc
 800d724:	080147e0 	.word	0x080147e0
 800d728:	080147e4 	.word	0x080147e4
 800d72c:	080147e8 	.word	0x080147e8
 800d730:	2300      	movs	r3, #0
 800d732:	930c      	str	r3, [sp, #48]	; 0x30
 800d734:	ab3f      	add	r3, sp, #252	; 0xfc
 800d736:	9308      	str	r3, [sp, #32]
 800d738:	2380      	movs	r3, #128	; 0x80
 800d73a:	005b      	lsls	r3, r3, #1
 800d73c:	4333      	orrs	r3, r6
 800d73e:	931a      	str	r3, [sp, #104]	; 0x68
 800d740:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d742:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d744:	2b00      	cmp	r3, #0
 800d746:	db00      	blt.n	800d74a <_svfprintf_r+0x4ae>
 800d748:	e1e7      	b.n	800db1a <_svfprintf_r+0x87e>
 800d74a:	2280      	movs	r2, #128	; 0x80
 800d74c:	0612      	lsls	r2, r2, #24
 800d74e:	4694      	mov	ip, r2
 800d750:	4463      	add	r3, ip
 800d752:	930e      	str	r3, [sp, #56]	; 0x38
 800d754:	232d      	movs	r3, #45	; 0x2d
 800d756:	9322      	str	r3, [sp, #136]	; 0x88
 800d758:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d75a:	2b41      	cmp	r3, #65	; 0x41
 800d75c:	d000      	beq.n	800d760 <_svfprintf_r+0x4c4>
 800d75e:	e1f5      	b.n	800db4c <_svfprintf_r+0x8b0>
 800d760:	0028      	movs	r0, r5
 800d762:	aa26      	add	r2, sp, #152	; 0x98
 800d764:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d766:	f002 fb73 	bl	800fe50 <frexp>
 800d76a:	23ff      	movs	r3, #255	; 0xff
 800d76c:	2200      	movs	r2, #0
 800d76e:	059b      	lsls	r3, r3, #22
 800d770:	f7f3 ff7c 	bl	800166c <__aeabi_dmul>
 800d774:	2200      	movs	r2, #0
 800d776:	2300      	movs	r3, #0
 800d778:	0004      	movs	r4, r0
 800d77a:	000d      	movs	r5, r1
 800d77c:	f7f2 fe64 	bl	8000448 <__aeabi_dcmpeq>
 800d780:	2800      	cmp	r0, #0
 800d782:	d001      	beq.n	800d788 <_svfprintf_r+0x4ec>
 800d784:	2301      	movs	r3, #1
 800d786:	9326      	str	r3, [sp, #152]	; 0x98
 800d788:	4bda      	ldr	r3, [pc, #872]	; (800daf4 <_svfprintf_r+0x858>)
 800d78a:	9319      	str	r3, [sp, #100]	; 0x64
 800d78c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d78e:	2b61      	cmp	r3, #97	; 0x61
 800d790:	d001      	beq.n	800d796 <_svfprintf_r+0x4fa>
 800d792:	4bd9      	ldr	r3, [pc, #868]	; (800daf8 <_svfprintf_r+0x85c>)
 800d794:	9319      	str	r3, [sp, #100]	; 0x64
 800d796:	9b08      	ldr	r3, [sp, #32]
 800d798:	930e      	str	r3, [sp, #56]	; 0x38
 800d79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d79c:	3b01      	subs	r3, #1
 800d79e:	9311      	str	r3, [sp, #68]	; 0x44
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	4bd6      	ldr	r3, [pc, #856]	; (800dafc <_svfprintf_r+0x860>)
 800d7a4:	0020      	movs	r0, r4
 800d7a6:	0029      	movs	r1, r5
 800d7a8:	f7f3 ff60 	bl	800166c <__aeabi_dmul>
 800d7ac:	000d      	movs	r5, r1
 800d7ae:	0004      	movs	r4, r0
 800d7b0:	f7f4 fdbe 	bl	8002330 <__aeabi_d2iz>
 800d7b4:	9021      	str	r0, [sp, #132]	; 0x84
 800d7b6:	f7f4 fdf1 	bl	800239c <__aeabi_i2d>
 800d7ba:	0002      	movs	r2, r0
 800d7bc:	000b      	movs	r3, r1
 800d7be:	0020      	movs	r0, r4
 800d7c0:	0029      	movs	r1, r5
 800d7c2:	f7f4 fa15 	bl	8001bf0 <__aeabi_dsub>
 800d7c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7c8:	000d      	movs	r5, r1
 800d7ca:	001a      	movs	r2, r3
 800d7cc:	3201      	adds	r2, #1
 800d7ce:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d7d0:	920e      	str	r2, [sp, #56]	; 0x38
 800d7d2:	9223      	str	r2, [sp, #140]	; 0x8c
 800d7d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d7d6:	0004      	movs	r4, r0
 800d7d8:	5c52      	ldrb	r2, [r2, r1]
 800d7da:	701a      	strb	r2, [r3, #0]
 800d7dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d7de:	9320      	str	r3, [sp, #128]	; 0x80
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	d00a      	beq.n	800d7fa <_svfprintf_r+0x55e>
 800d7e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	3b01      	subs	r3, #1
 800d7ea:	9311      	str	r3, [sp, #68]	; 0x44
 800d7ec:	0020      	movs	r0, r4
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	0029      	movs	r1, r5
 800d7f2:	f7f2 fe29 	bl	8000448 <__aeabi_dcmpeq>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	d0d2      	beq.n	800d7a0 <_svfprintf_r+0x504>
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	0020      	movs	r0, r4
 800d7fe:	0029      	movs	r1, r5
 800d800:	4bbf      	ldr	r3, [pc, #764]	; (800db00 <_svfprintf_r+0x864>)
 800d802:	f7f2 fe3b 	bl	800047c <__aeabi_dcmpgt>
 800d806:	2800      	cmp	r0, #0
 800d808:	d10c      	bne.n	800d824 <_svfprintf_r+0x588>
 800d80a:	2200      	movs	r2, #0
 800d80c:	0020      	movs	r0, r4
 800d80e:	0029      	movs	r1, r5
 800d810:	4bbb      	ldr	r3, [pc, #748]	; (800db00 <_svfprintf_r+0x864>)
 800d812:	f7f2 fe19 	bl	8000448 <__aeabi_dcmpeq>
 800d816:	2800      	cmp	r0, #0
 800d818:	d100      	bne.n	800d81c <_svfprintf_r+0x580>
 800d81a:	e191      	b.n	800db40 <_svfprintf_r+0x8a4>
 800d81c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d81e:	07db      	lsls	r3, r3, #31
 800d820:	d400      	bmi.n	800d824 <_svfprintf_r+0x588>
 800d822:	e18d      	b.n	800db40 <_svfprintf_r+0x8a4>
 800d824:	2030      	movs	r0, #48	; 0x30
 800d826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d828:	932a      	str	r3, [sp, #168]	; 0xa8
 800d82a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d82c:	7bdb      	ldrb	r3, [r3, #15]
 800d82e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d830:	3a01      	subs	r2, #1
 800d832:	922a      	str	r2, [sp, #168]	; 0xa8
 800d834:	7811      	ldrb	r1, [r2, #0]
 800d836:	4299      	cmp	r1, r3
 800d838:	d100      	bne.n	800d83c <_svfprintf_r+0x5a0>
 800d83a:	e171      	b.n	800db20 <_svfprintf_r+0x884>
 800d83c:	1c4b      	adds	r3, r1, #1
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	2939      	cmp	r1, #57	; 0x39
 800d842:	d101      	bne.n	800d848 <_svfprintf_r+0x5ac>
 800d844:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d846:	7a9b      	ldrb	r3, [r3, #10]
 800d848:	7013      	strb	r3, [r2, #0]
 800d84a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d84c:	9a08      	ldr	r2, [sp, #32]
 800d84e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800d850:	1a9b      	subs	r3, r3, r2
 800d852:	930e      	str	r3, [sp, #56]	; 0x38
 800d854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d856:	2b47      	cmp	r3, #71	; 0x47
 800d858:	d000      	beq.n	800d85c <_svfprintf_r+0x5c0>
 800d85a:	e1c4      	b.n	800dbe6 <_svfprintf_r+0x94a>
 800d85c:	1ceb      	adds	r3, r5, #3
 800d85e:	db03      	blt.n	800d868 <_svfprintf_r+0x5cc>
 800d860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d862:	42ab      	cmp	r3, r5
 800d864:	db00      	blt.n	800d868 <_svfprintf_r+0x5cc>
 800d866:	e1e6      	b.n	800dc36 <_svfprintf_r+0x99a>
 800d868:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d86a:	3b02      	subs	r3, #2
 800d86c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d86e:	223c      	movs	r2, #60	; 0x3c
 800d870:	466b      	mov	r3, sp
 800d872:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d874:	189b      	adds	r3, r3, r2
 800d876:	1e6c      	subs	r4, r5, #1
 800d878:	3a1c      	subs	r2, #28
 800d87a:	2000      	movs	r0, #0
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	9426      	str	r4, [sp, #152]	; 0x98
 800d880:	4391      	bics	r1, r2
 800d882:	2941      	cmp	r1, #65	; 0x41
 800d884:	d102      	bne.n	800d88c <_svfprintf_r+0x5f0>
 800d886:	330f      	adds	r3, #15
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	3001      	adds	r0, #1
 800d88c:	a928      	add	r1, sp, #160	; 0xa0
 800d88e:	700b      	strb	r3, [r1, #0]
 800d890:	232b      	movs	r3, #43	; 0x2b
 800d892:	2c00      	cmp	r4, #0
 800d894:	da02      	bge.n	800d89c <_svfprintf_r+0x600>
 800d896:	2401      	movs	r4, #1
 800d898:	3302      	adds	r3, #2
 800d89a:	1b64      	subs	r4, r4, r5
 800d89c:	704b      	strb	r3, [r1, #1]
 800d89e:	2c09      	cmp	r4, #9
 800d8a0:	dc00      	bgt.n	800d8a4 <_svfprintf_r+0x608>
 800d8a2:	e1ba      	b.n	800dc1a <_svfprintf_r+0x97e>
 800d8a4:	2337      	movs	r3, #55	; 0x37
 800d8a6:	250a      	movs	r5, #10
 800d8a8:	aa1e      	add	r2, sp, #120	; 0x78
 800d8aa:	189b      	adds	r3, r3, r2
 800d8ac:	9310      	str	r3, [sp, #64]	; 0x40
 800d8ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8b0:	0020      	movs	r0, r4
 800d8b2:	9309      	str	r3, [sp, #36]	; 0x24
 800d8b4:	0029      	movs	r1, r5
 800d8b6:	3b01      	subs	r3, #1
 800d8b8:	9310      	str	r3, [sp, #64]	; 0x40
 800d8ba:	f7f2 fdaf 	bl	800041c <__aeabi_idivmod>
 800d8be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8c0:	3130      	adds	r1, #48	; 0x30
 800d8c2:	7019      	strb	r1, [r3, #0]
 800d8c4:	0020      	movs	r0, r4
 800d8c6:	0029      	movs	r1, r5
 800d8c8:	9411      	str	r4, [sp, #68]	; 0x44
 800d8ca:	f7f2 fcc1 	bl	8000250 <__divsi3>
 800d8ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d8d0:	0004      	movs	r4, r0
 800d8d2:	2b63      	cmp	r3, #99	; 0x63
 800d8d4:	dceb      	bgt.n	800d8ae <_svfprintf_r+0x612>
 800d8d6:	222a      	movs	r2, #42	; 0x2a
 800d8d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8da:	a81e      	add	r0, sp, #120	; 0x78
 800d8dc:	1e99      	subs	r1, r3, #2
 800d8de:	1812      	adds	r2, r2, r0
 800d8e0:	2037      	movs	r0, #55	; 0x37
 800d8e2:	000b      	movs	r3, r1
 800d8e4:	3430      	adds	r4, #48	; 0x30
 800d8e6:	700c      	strb	r4, [r1, #0]
 800d8e8:	ac1e      	add	r4, sp, #120	; 0x78
 800d8ea:	1900      	adds	r0, r0, r4
 800d8ec:	4283      	cmp	r3, r0
 800d8ee:	d200      	bcs.n	800d8f2 <_svfprintf_r+0x656>
 800d8f0:	e18e      	b.n	800dc10 <_svfprintf_r+0x974>
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	4281      	cmp	r1, r0
 800d8f6:	d804      	bhi.n	800d902 <_svfprintf_r+0x666>
 800d8f8:	aa1e      	add	r2, sp, #120	; 0x78
 800d8fa:	3339      	adds	r3, #57	; 0x39
 800d8fc:	189b      	adds	r3, r3, r2
 800d8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d900:	1a9b      	subs	r3, r3, r2
 800d902:	222a      	movs	r2, #42	; 0x2a
 800d904:	a91e      	add	r1, sp, #120	; 0x78
 800d906:	1852      	adds	r2, r2, r1
 800d908:	18d3      	adds	r3, r2, r3
 800d90a:	aa28      	add	r2, sp, #160	; 0xa0
 800d90c:	1a9b      	subs	r3, r3, r2
 800d90e:	931e      	str	r3, [sp, #120]	; 0x78
 800d910:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d914:	4694      	mov	ip, r2
 800d916:	4463      	add	r3, ip
 800d918:	9309      	str	r3, [sp, #36]	; 0x24
 800d91a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	dc01      	bgt.n	800d924 <_svfprintf_r+0x688>
 800d920:	07f3      	lsls	r3, r6, #31
 800d922:	d504      	bpl.n	800d92e <_svfprintf_r+0x692>
 800d924:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d928:	4694      	mov	ip, r2
 800d92a:	4463      	add	r3, ip
 800d92c:	9309      	str	r3, [sp, #36]	; 0x24
 800d92e:	2280      	movs	r2, #128	; 0x80
 800d930:	4b74      	ldr	r3, [pc, #464]	; (800db04 <_svfprintf_r+0x868>)
 800d932:	0052      	lsls	r2, r2, #1
 800d934:	4033      	ands	r3, r6
 800d936:	431a      	orrs	r2, r3
 800d938:	2300      	movs	r3, #0
 800d93a:	001d      	movs	r5, r3
 800d93c:	921a      	str	r2, [sp, #104]	; 0x68
 800d93e:	9310      	str	r3, [sp, #64]	; 0x40
 800d940:	9311      	str	r3, [sp, #68]	; 0x44
 800d942:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d944:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d946:	9319      	str	r3, [sp, #100]	; 0x64
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d006      	beq.n	800d95a <_svfprintf_r+0x6be>
 800d94c:	231b      	movs	r3, #27
 800d94e:	aa1e      	add	r2, sp, #120	; 0x78
 800d950:	189b      	adds	r3, r3, r2
 800d952:	222d      	movs	r2, #45	; 0x2d
 800d954:	701a      	strb	r2, [r3, #0]
 800d956:	2300      	movs	r3, #0
 800d958:	9319      	str	r3, [sp, #100]	; 0x64
 800d95a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d95c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d95e:	931a      	str	r3, [sp, #104]	; 0x68
 800d960:	4293      	cmp	r3, r2
 800d962:	da00      	bge.n	800d966 <_svfprintf_r+0x6ca>
 800d964:	921a      	str	r2, [sp, #104]	; 0x68
 800d966:	231b      	movs	r3, #27
 800d968:	aa1e      	add	r2, sp, #120	; 0x78
 800d96a:	189b      	adds	r3, r3, r2
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	1e5a      	subs	r2, r3, #1
 800d970:	4193      	sbcs	r3, r2
 800d972:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d974:	18d3      	adds	r3, r2, r3
 800d976:	931a      	str	r3, [sp, #104]	; 0x68
 800d978:	0032      	movs	r2, r6
 800d97a:	2302      	movs	r3, #2
 800d97c:	401a      	ands	r2, r3
 800d97e:	9220      	str	r2, [sp, #128]	; 0x80
 800d980:	421e      	tst	r6, r3
 800d982:	d002      	beq.n	800d98a <_svfprintf_r+0x6ee>
 800d984:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d986:	3302      	adds	r3, #2
 800d988:	931a      	str	r3, [sp, #104]	; 0x68
 800d98a:	2384      	movs	r3, #132	; 0x84
 800d98c:	0032      	movs	r2, r6
 800d98e:	401a      	ands	r2, r3
 800d990:	9221      	str	r2, [sp, #132]	; 0x84
 800d992:	421e      	tst	r6, r3
 800d994:	d11f      	bne.n	800d9d6 <_svfprintf_r+0x73a>
 800d996:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d998:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d99a:	1a9c      	subs	r4, r3, r2
 800d99c:	2c00      	cmp	r4, #0
 800d99e:	dd1a      	ble.n	800d9d6 <_svfprintf_r+0x73a>
 800d9a0:	0039      	movs	r1, r7
 800d9a2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d9a4:	4858      	ldr	r0, [pc, #352]	; (800db08 <_svfprintf_r+0x86c>)
 800d9a6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	3108      	adds	r1, #8
 800d9ac:	6038      	str	r0, [r7, #0]
 800d9ae:	2c10      	cmp	r4, #16
 800d9b0:	dd00      	ble.n	800d9b4 <_svfprintf_r+0x718>
 800d9b2:	e31c      	b.n	800dfee <_svfprintf_r+0xd52>
 800d9b4:	607c      	str	r4, [r7, #4]
 800d9b6:	18a4      	adds	r4, r4, r2
 800d9b8:	000f      	movs	r7, r1
 800d9ba:	942e      	str	r4, [sp, #184]	; 0xb8
 800d9bc:	932d      	str	r3, [sp, #180]	; 0xb4
 800d9be:	2b07      	cmp	r3, #7
 800d9c0:	dd09      	ble.n	800d9d6 <_svfprintf_r+0x73a>
 800d9c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d9c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d9c6:	aa2c      	add	r2, sp, #176	; 0xb0
 800d9c8:	f003 fcf8 	bl	80113bc <__ssprint_r>
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	d001      	beq.n	800d9d4 <_svfprintf_r+0x738>
 800d9d0:	f000 fe43 	bl	800e65a <_svfprintf_r+0x13be>
 800d9d4:	af2f      	add	r7, sp, #188	; 0xbc
 800d9d6:	221b      	movs	r2, #27
 800d9d8:	a91e      	add	r1, sp, #120	; 0x78
 800d9da:	1852      	adds	r2, r2, r1
 800d9dc:	7811      	ldrb	r1, [r2, #0]
 800d9de:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d9e0:	2900      	cmp	r1, #0
 800d9e2:	d014      	beq.n	800da0e <_svfprintf_r+0x772>
 800d9e4:	603a      	str	r2, [r7, #0]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	189b      	adds	r3, r3, r2
 800d9ea:	932e      	str	r3, [sp, #184]	; 0xb8
 800d9ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d9ee:	607a      	str	r2, [r7, #4]
 800d9f0:	189b      	adds	r3, r3, r2
 800d9f2:	932d      	str	r3, [sp, #180]	; 0xb4
 800d9f4:	3708      	adds	r7, #8
 800d9f6:	2b07      	cmp	r3, #7
 800d9f8:	dd09      	ble.n	800da0e <_svfprintf_r+0x772>
 800d9fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d9fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d9fe:	aa2c      	add	r2, sp, #176	; 0xb0
 800da00:	f003 fcdc 	bl	80113bc <__ssprint_r>
 800da04:	2800      	cmp	r0, #0
 800da06:	d001      	beq.n	800da0c <_svfprintf_r+0x770>
 800da08:	f000 fe27 	bl	800e65a <_svfprintf_r+0x13be>
 800da0c:	af2f      	add	r7, sp, #188	; 0xbc
 800da0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800da10:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800da12:	2a00      	cmp	r2, #0
 800da14:	d015      	beq.n	800da42 <_svfprintf_r+0x7a6>
 800da16:	aa25      	add	r2, sp, #148	; 0x94
 800da18:	603a      	str	r2, [r7, #0]
 800da1a:	2202      	movs	r2, #2
 800da1c:	189b      	adds	r3, r3, r2
 800da1e:	932e      	str	r3, [sp, #184]	; 0xb8
 800da20:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800da22:	607a      	str	r2, [r7, #4]
 800da24:	3301      	adds	r3, #1
 800da26:	932d      	str	r3, [sp, #180]	; 0xb4
 800da28:	3708      	adds	r7, #8
 800da2a:	2b07      	cmp	r3, #7
 800da2c:	dd09      	ble.n	800da42 <_svfprintf_r+0x7a6>
 800da2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da30:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da32:	aa2c      	add	r2, sp, #176	; 0xb0
 800da34:	f003 fcc2 	bl	80113bc <__ssprint_r>
 800da38:	2800      	cmp	r0, #0
 800da3a:	d001      	beq.n	800da40 <_svfprintf_r+0x7a4>
 800da3c:	f000 fe0d 	bl	800e65a <_svfprintf_r+0x13be>
 800da40:	af2f      	add	r7, sp, #188	; 0xbc
 800da42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da44:	2b80      	cmp	r3, #128	; 0x80
 800da46:	d11f      	bne.n	800da88 <_svfprintf_r+0x7ec>
 800da48:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800da4a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800da4c:	1a9c      	subs	r4, r3, r2
 800da4e:	2c00      	cmp	r4, #0
 800da50:	dd1a      	ble.n	800da88 <_svfprintf_r+0x7ec>
 800da52:	0039      	movs	r1, r7
 800da54:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800da56:	482d      	ldr	r0, [pc, #180]	; (800db0c <_svfprintf_r+0x870>)
 800da58:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800da5a:	3301      	adds	r3, #1
 800da5c:	3108      	adds	r1, #8
 800da5e:	6038      	str	r0, [r7, #0]
 800da60:	2c10      	cmp	r4, #16
 800da62:	dd00      	ble.n	800da66 <_svfprintf_r+0x7ca>
 800da64:	e2d6      	b.n	800e014 <_svfprintf_r+0xd78>
 800da66:	607c      	str	r4, [r7, #4]
 800da68:	18a4      	adds	r4, r4, r2
 800da6a:	000f      	movs	r7, r1
 800da6c:	942e      	str	r4, [sp, #184]	; 0xb8
 800da6e:	932d      	str	r3, [sp, #180]	; 0xb4
 800da70:	2b07      	cmp	r3, #7
 800da72:	dd09      	ble.n	800da88 <_svfprintf_r+0x7ec>
 800da74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da76:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da78:	aa2c      	add	r2, sp, #176	; 0xb0
 800da7a:	f003 fc9f 	bl	80113bc <__ssprint_r>
 800da7e:	2800      	cmp	r0, #0
 800da80:	d001      	beq.n	800da86 <_svfprintf_r+0x7ea>
 800da82:	f000 fdea 	bl	800e65a <_svfprintf_r+0x13be>
 800da86:	af2f      	add	r7, sp, #188	; 0xbc
 800da88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800da8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da8c:	1a9c      	subs	r4, r3, r2
 800da8e:	2c00      	cmp	r4, #0
 800da90:	dd1a      	ble.n	800dac8 <_svfprintf_r+0x82c>
 800da92:	0039      	movs	r1, r7
 800da94:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800da96:	481d      	ldr	r0, [pc, #116]	; (800db0c <_svfprintf_r+0x870>)
 800da98:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800da9a:	3301      	adds	r3, #1
 800da9c:	3108      	adds	r1, #8
 800da9e:	6038      	str	r0, [r7, #0]
 800daa0:	2c10      	cmp	r4, #16
 800daa2:	dd00      	ble.n	800daa6 <_svfprintf_r+0x80a>
 800daa4:	e2c9      	b.n	800e03a <_svfprintf_r+0xd9e>
 800daa6:	18a2      	adds	r2, r4, r2
 800daa8:	607c      	str	r4, [r7, #4]
 800daaa:	922e      	str	r2, [sp, #184]	; 0xb8
 800daac:	000f      	movs	r7, r1
 800daae:	932d      	str	r3, [sp, #180]	; 0xb4
 800dab0:	2b07      	cmp	r3, #7
 800dab2:	dd09      	ble.n	800dac8 <_svfprintf_r+0x82c>
 800dab4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dab6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dab8:	aa2c      	add	r2, sp, #176	; 0xb0
 800daba:	f003 fc7f 	bl	80113bc <__ssprint_r>
 800dabe:	2800      	cmp	r0, #0
 800dac0:	d001      	beq.n	800dac6 <_svfprintf_r+0x82a>
 800dac2:	f000 fdca 	bl	800e65a <_svfprintf_r+0x13be>
 800dac6:	af2f      	add	r7, sp, #188	; 0xbc
 800dac8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800daca:	9319      	str	r3, [sp, #100]	; 0x64
 800dacc:	05f3      	lsls	r3, r6, #23
 800dace:	d500      	bpl.n	800dad2 <_svfprintf_r+0x836>
 800dad0:	e2ce      	b.n	800e070 <_svfprintf_r+0xdd4>
 800dad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dad4:	9b08      	ldr	r3, [sp, #32]
 800dad6:	4694      	mov	ip, r2
 800dad8:	603b      	str	r3, [r7, #0]
 800dada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dadc:	607b      	str	r3, [r7, #4]
 800dade:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dae0:	4463      	add	r3, ip
 800dae2:	932e      	str	r3, [sp, #184]	; 0xb8
 800dae4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dae6:	3301      	adds	r3, #1
 800dae8:	932d      	str	r3, [sp, #180]	; 0xb4
 800daea:	2b07      	cmp	r3, #7
 800daec:	dd00      	ble.n	800daf0 <_svfprintf_r+0x854>
 800daee:	e3a3      	b.n	800e238 <_svfprintf_r+0xf9c>
 800daf0:	3708      	adds	r7, #8
 800daf2:	e301      	b.n	800e0f8 <_svfprintf_r+0xe5c>
 800daf4:	080147ec 	.word	0x080147ec
 800daf8:	080147fd 	.word	0x080147fd
 800dafc:	40300000 	.word	0x40300000
 800db00:	3fe00000 	.word	0x3fe00000
 800db04:	fffffbff 	.word	0xfffffbff
 800db08:	08014810 	.word	0x08014810
 800db0c:	08014820 	.word	0x08014820
 800db10:	9b08      	ldr	r3, [sp, #32]
 800db12:	930c      	str	r3, [sp, #48]	; 0x30
 800db14:	e610      	b.n	800d738 <_svfprintf_r+0x49c>
 800db16:	2306      	movs	r3, #6
 800db18:	e5fd      	b.n	800d716 <_svfprintf_r+0x47a>
 800db1a:	930e      	str	r3, [sp, #56]	; 0x38
 800db1c:	2300      	movs	r3, #0
 800db1e:	e61a      	b.n	800d756 <_svfprintf_r+0x4ba>
 800db20:	7010      	strb	r0, [r2, #0]
 800db22:	e684      	b.n	800d82e <_svfprintf_r+0x592>
 800db24:	7018      	strb	r0, [r3, #0]
 800db26:	3301      	adds	r3, #1
 800db28:	1aca      	subs	r2, r1, r3
 800db2a:	d5fb      	bpl.n	800db24 <_svfprintf_r+0x888>
 800db2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800db2e:	2300      	movs	r3, #0
 800db30:	3201      	adds	r2, #1
 800db32:	db01      	blt.n	800db38 <_svfprintf_r+0x89c>
 800db34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800db36:	3301      	adds	r3, #1
 800db38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db3a:	18d3      	adds	r3, r2, r3
 800db3c:	9323      	str	r3, [sp, #140]	; 0x8c
 800db3e:	e684      	b.n	800d84a <_svfprintf_r+0x5ae>
 800db40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db42:	9920      	ldr	r1, [sp, #128]	; 0x80
 800db44:	2030      	movs	r0, #48	; 0x30
 800db46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db48:	1851      	adds	r1, r2, r1
 800db4a:	e7ed      	b.n	800db28 <_svfprintf_r+0x88c>
 800db4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800db4e:	2303      	movs	r3, #3
 800db50:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800db52:	2a46      	cmp	r2, #70	; 0x46
 800db54:	d006      	beq.n	800db64 <_svfprintf_r+0x8c8>
 800db56:	0014      	movs	r4, r2
 800db58:	3c45      	subs	r4, #69	; 0x45
 800db5a:	4262      	negs	r2, r4
 800db5c:	4154      	adcs	r4, r2
 800db5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db60:	3b01      	subs	r3, #1
 800db62:	1914      	adds	r4, r2, r4
 800db64:	aa2a      	add	r2, sp, #168	; 0xa8
 800db66:	9204      	str	r2, [sp, #16]
 800db68:	aa27      	add	r2, sp, #156	; 0x9c
 800db6a:	9203      	str	r2, [sp, #12]
 800db6c:	aa26      	add	r2, sp, #152	; 0x98
 800db6e:	9202      	str	r2, [sp, #8]
 800db70:	9300      	str	r3, [sp, #0]
 800db72:	002a      	movs	r2, r5
 800db74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db76:	980a      	ldr	r0, [sp, #40]	; 0x28
 800db78:	9401      	str	r4, [sp, #4]
 800db7a:	f002 fad7 	bl	801012c <_dtoa_r>
 800db7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db80:	9008      	str	r0, [sp, #32]
 800db82:	2b47      	cmp	r3, #71	; 0x47
 800db84:	d103      	bne.n	800db8e <_svfprintf_r+0x8f2>
 800db86:	07f3      	lsls	r3, r6, #31
 800db88:	d401      	bmi.n	800db8e <_svfprintf_r+0x8f2>
 800db8a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800db8c:	e65e      	b.n	800d84c <_svfprintf_r+0x5b0>
 800db8e:	9b08      	ldr	r3, [sp, #32]
 800db90:	191b      	adds	r3, r3, r4
 800db92:	9311      	str	r3, [sp, #68]	; 0x44
 800db94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db96:	2b46      	cmp	r3, #70	; 0x46
 800db98:	d112      	bne.n	800dbc0 <_svfprintf_r+0x924>
 800db9a:	9b08      	ldr	r3, [sp, #32]
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	2b30      	cmp	r3, #48	; 0x30
 800dba0:	d10a      	bne.n	800dbb8 <_svfprintf_r+0x91c>
 800dba2:	2200      	movs	r2, #0
 800dba4:	2300      	movs	r3, #0
 800dba6:	0028      	movs	r0, r5
 800dba8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dbaa:	f7f2 fc4d 	bl	8000448 <__aeabi_dcmpeq>
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	d102      	bne.n	800dbb8 <_svfprintf_r+0x91c>
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	1b1b      	subs	r3, r3, r4
 800dbb6:	9326      	str	r3, [sp, #152]	; 0x98
 800dbb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dbba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dbbc:	18d3      	adds	r3, r2, r3
 800dbbe:	9311      	str	r3, [sp, #68]	; 0x44
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	0028      	movs	r0, r5
 800dbc6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dbc8:	f7f2 fc3e 	bl	8000448 <__aeabi_dcmpeq>
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	d001      	beq.n	800dbd4 <_svfprintf_r+0x938>
 800dbd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dbd2:	932a      	str	r3, [sp, #168]	; 0xa8
 800dbd4:	2230      	movs	r2, #48	; 0x30
 800dbd6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800dbd8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dbda:	4299      	cmp	r1, r3
 800dbdc:	d9d5      	bls.n	800db8a <_svfprintf_r+0x8ee>
 800dbde:	1c59      	adds	r1, r3, #1
 800dbe0:	912a      	str	r1, [sp, #168]	; 0xa8
 800dbe2:	701a      	strb	r2, [r3, #0]
 800dbe4:	e7f7      	b.n	800dbd6 <_svfprintf_r+0x93a>
 800dbe6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dbe8:	2b46      	cmp	r3, #70	; 0x46
 800dbea:	d000      	beq.n	800dbee <_svfprintf_r+0x952>
 800dbec:	e63f      	b.n	800d86e <_svfprintf_r+0x5d2>
 800dbee:	2201      	movs	r2, #1
 800dbf0:	0033      	movs	r3, r6
 800dbf2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dbf4:	4013      	ands	r3, r2
 800dbf6:	430b      	orrs	r3, r1
 800dbf8:	2d00      	cmp	r5, #0
 800dbfa:	dd2c      	ble.n	800dc56 <_svfprintf_r+0x9ba>
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d046      	beq.n	800dc8e <_svfprintf_r+0x9f2>
 800dc00:	000a      	movs	r2, r1
 800dc02:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dc04:	18eb      	adds	r3, r5, r3
 800dc06:	18d3      	adds	r3, r2, r3
 800dc08:	9309      	str	r3, [sp, #36]	; 0x24
 800dc0a:	2366      	movs	r3, #102	; 0x66
 800dc0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc0e:	e030      	b.n	800dc72 <_svfprintf_r+0x9d6>
 800dc10:	781c      	ldrb	r4, [r3, #0]
 800dc12:	3301      	adds	r3, #1
 800dc14:	7014      	strb	r4, [r2, #0]
 800dc16:	3201      	adds	r2, #1
 800dc18:	e668      	b.n	800d8ec <_svfprintf_r+0x650>
 800dc1a:	222a      	movs	r2, #42	; 0x2a
 800dc1c:	ab1e      	add	r3, sp, #120	; 0x78
 800dc1e:	18d2      	adds	r2, r2, r3
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d104      	bne.n	800dc2e <_svfprintf_r+0x992>
 800dc24:	2330      	movs	r3, #48	; 0x30
 800dc26:	222b      	movs	r2, #43	; 0x2b
 800dc28:	708b      	strb	r3, [r1, #2]
 800dc2a:	ab1e      	add	r3, sp, #120	; 0x78
 800dc2c:	18d2      	adds	r2, r2, r3
 800dc2e:	3430      	adds	r4, #48	; 0x30
 800dc30:	1c53      	adds	r3, r2, #1
 800dc32:	7014      	strb	r4, [r2, #0]
 800dc34:	e669      	b.n	800d90a <_svfprintf_r+0x66e>
 800dc36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc38:	42ab      	cmp	r3, r5
 800dc3a:	dd12      	ble.n	800dc62 <_svfprintf_r+0x9c6>
 800dc3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dc3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc40:	4694      	mov	ip, r2
 800dc42:	4463      	add	r3, ip
 800dc44:	9309      	str	r3, [sp, #36]	; 0x24
 800dc46:	2367      	movs	r3, #103	; 0x67
 800dc48:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc4a:	2d00      	cmp	r5, #0
 800dc4c:	dc11      	bgt.n	800dc72 <_svfprintf_r+0x9d6>
 800dc4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc50:	1b5b      	subs	r3, r3, r5
 800dc52:	3301      	adds	r3, #1
 800dc54:	e00c      	b.n	800dc70 <_svfprintf_r+0x9d4>
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d01b      	beq.n	800dc92 <_svfprintf_r+0x9f6>
 800dc5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dc5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc5e:	3301      	adds	r3, #1
 800dc60:	e7d1      	b.n	800dc06 <_svfprintf_r+0x96a>
 800dc62:	2367      	movs	r3, #103	; 0x67
 800dc64:	9509      	str	r5, [sp, #36]	; 0x24
 800dc66:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc68:	07f3      	lsls	r3, r6, #31
 800dc6a:	d502      	bpl.n	800dc72 <_svfprintf_r+0x9d6>
 800dc6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dc6e:	18eb      	adds	r3, r5, r3
 800dc70:	9309      	str	r3, [sp, #36]	; 0x24
 800dc72:	2380      	movs	r3, #128	; 0x80
 800dc74:	0032      	movs	r2, r6
 800dc76:	00db      	lsls	r3, r3, #3
 800dc78:	401a      	ands	r2, r3
 800dc7a:	9211      	str	r2, [sp, #68]	; 0x44
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	9210      	str	r2, [sp, #64]	; 0x40
 800dc80:	421e      	tst	r6, r3
 800dc82:	d100      	bne.n	800dc86 <_svfprintf_r+0x9ea>
 800dc84:	e65d      	b.n	800d942 <_svfprintf_r+0x6a6>
 800dc86:	4295      	cmp	r5, r2
 800dc88:	dc25      	bgt.n	800dcd6 <_svfprintf_r+0xa3a>
 800dc8a:	9211      	str	r2, [sp, #68]	; 0x44
 800dc8c:	e659      	b.n	800d942 <_svfprintf_r+0x6a6>
 800dc8e:	9509      	str	r5, [sp, #36]	; 0x24
 800dc90:	e7bb      	b.n	800dc0a <_svfprintf_r+0x96e>
 800dc92:	2366      	movs	r3, #102	; 0x66
 800dc94:	9209      	str	r2, [sp, #36]	; 0x24
 800dc96:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc98:	e7eb      	b.n	800dc72 <_svfprintf_r+0x9d6>
 800dc9a:	42ab      	cmp	r3, r5
 800dc9c:	da0e      	bge.n	800dcbc <_svfprintf_r+0xa20>
 800dc9e:	1aed      	subs	r5, r5, r3
 800dca0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dca2:	785b      	ldrb	r3, [r3, #1]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d012      	beq.n	800dcce <_svfprintf_r+0xa32>
 800dca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dcaa:	3301      	adds	r3, #1
 800dcac:	9311      	str	r3, [sp, #68]	; 0x44
 800dcae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	9312      	str	r3, [sp, #72]	; 0x48
 800dcb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	2bff      	cmp	r3, #255	; 0xff
 800dcba:	d1ee      	bne.n	800dc9a <_svfprintf_r+0x9fe>
 800dcbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dcbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dcc0:	189b      	adds	r3, r3, r2
 800dcc2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dcc4:	4353      	muls	r3, r2
 800dcc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcc8:	189b      	adds	r3, r3, r2
 800dcca:	9309      	str	r3, [sp, #36]	; 0x24
 800dccc:	e639      	b.n	800d942 <_svfprintf_r+0x6a6>
 800dcce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	9310      	str	r3, [sp, #64]	; 0x40
 800dcd4:	e7ee      	b.n	800dcb4 <_svfprintf_r+0xa18>
 800dcd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dcd8:	9311      	str	r3, [sp, #68]	; 0x44
 800dcda:	e7eb      	b.n	800dcb4 <_svfprintf_r+0xa18>
 800dcdc:	1d23      	adds	r3, r4, #4
 800dcde:	930d      	str	r3, [sp, #52]	; 0x34
 800dce0:	06b3      	lsls	r3, r6, #26
 800dce2:	d509      	bpl.n	800dcf8 <_svfprintf_r+0xa5c>
 800dce4:	6823      	ldr	r3, [r4, #0]
 800dce6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dce8:	601a      	str	r2, [r3, #0]
 800dcea:	17d2      	asrs	r2, r2, #31
 800dcec:	605a      	str	r2, [r3, #4]
 800dcee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dcf0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800dcf2:	9308      	str	r3, [sp, #32]
 800dcf4:	f7ff fb0d 	bl	800d312 <_svfprintf_r+0x76>
 800dcf8:	06f3      	lsls	r3, r6, #27
 800dcfa:	d503      	bpl.n	800dd04 <_svfprintf_r+0xa68>
 800dcfc:	6823      	ldr	r3, [r4, #0]
 800dcfe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dd00:	601a      	str	r2, [r3, #0]
 800dd02:	e7f4      	b.n	800dcee <_svfprintf_r+0xa52>
 800dd04:	0673      	lsls	r3, r6, #25
 800dd06:	d503      	bpl.n	800dd10 <_svfprintf_r+0xa74>
 800dd08:	6823      	ldr	r3, [r4, #0]
 800dd0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dd0c:	801a      	strh	r2, [r3, #0]
 800dd0e:	e7ee      	b.n	800dcee <_svfprintf_r+0xa52>
 800dd10:	05b6      	lsls	r6, r6, #22
 800dd12:	d5f3      	bpl.n	800dcfc <_svfprintf_r+0xa60>
 800dd14:	6823      	ldr	r3, [r4, #0]
 800dd16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dd18:	701a      	strb	r2, [r3, #0]
 800dd1a:	e7e8      	b.n	800dcee <_svfprintf_r+0xa52>
 800dd1c:	2310      	movs	r3, #16
 800dd1e:	431e      	orrs	r6, r3
 800dd20:	2320      	movs	r3, #32
 800dd22:	0030      	movs	r0, r6
 800dd24:	4018      	ands	r0, r3
 800dd26:	421e      	tst	r6, r3
 800dd28:	d00f      	beq.n	800dd4a <_svfprintf_r+0xaae>
 800dd2a:	3b19      	subs	r3, #25
 800dd2c:	3407      	adds	r4, #7
 800dd2e:	439c      	bics	r4, r3
 800dd30:	0022      	movs	r2, r4
 800dd32:	ca18      	ldmia	r2!, {r3, r4}
 800dd34:	9306      	str	r3, [sp, #24]
 800dd36:	9407      	str	r4, [sp, #28]
 800dd38:	920d      	str	r2, [sp, #52]	; 0x34
 800dd3a:	4bc9      	ldr	r3, [pc, #804]	; (800e060 <_svfprintf_r+0xdc4>)
 800dd3c:	401e      	ands	r6, r3
 800dd3e:	2300      	movs	r3, #0
 800dd40:	221b      	movs	r2, #27
 800dd42:	a91e      	add	r1, sp, #120	; 0x78
 800dd44:	1852      	adds	r2, r2, r1
 800dd46:	2100      	movs	r1, #0
 800dd48:	e430      	b.n	800d5ac <_svfprintf_r+0x310>
 800dd4a:	0022      	movs	r2, r4
 800dd4c:	ca08      	ldmia	r2!, {r3}
 800dd4e:	0031      	movs	r1, r6
 800dd50:	920d      	str	r2, [sp, #52]	; 0x34
 800dd52:	2210      	movs	r2, #16
 800dd54:	4011      	ands	r1, r2
 800dd56:	4216      	tst	r6, r2
 800dd58:	d002      	beq.n	800dd60 <_svfprintf_r+0xac4>
 800dd5a:	9306      	str	r3, [sp, #24]
 800dd5c:	9007      	str	r0, [sp, #28]
 800dd5e:	e7ec      	b.n	800dd3a <_svfprintf_r+0xa9e>
 800dd60:	2240      	movs	r2, #64	; 0x40
 800dd62:	0030      	movs	r0, r6
 800dd64:	4010      	ands	r0, r2
 800dd66:	4216      	tst	r6, r2
 800dd68:	d003      	beq.n	800dd72 <_svfprintf_r+0xad6>
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	9306      	str	r3, [sp, #24]
 800dd6e:	9107      	str	r1, [sp, #28]
 800dd70:	e7e3      	b.n	800dd3a <_svfprintf_r+0xa9e>
 800dd72:	2280      	movs	r2, #128	; 0x80
 800dd74:	0031      	movs	r1, r6
 800dd76:	0092      	lsls	r2, r2, #2
 800dd78:	4011      	ands	r1, r2
 800dd7a:	4216      	tst	r6, r2
 800dd7c:	d0f6      	beq.n	800dd6c <_svfprintf_r+0xad0>
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	e7eb      	b.n	800dd5a <_svfprintf_r+0xabe>
 800dd82:	0023      	movs	r3, r4
 800dd84:	cb04      	ldmia	r3!, {r2}
 800dd86:	49b7      	ldr	r1, [pc, #732]	; (800e064 <_svfprintf_r+0xdc8>)
 800dd88:	9206      	str	r2, [sp, #24]
 800dd8a:	aa25      	add	r2, sp, #148	; 0x94
 800dd8c:	8011      	strh	r1, [r2, #0]
 800dd8e:	4ab6      	ldr	r2, [pc, #728]	; (800e068 <_svfprintf_r+0xdcc>)
 800dd90:	930d      	str	r3, [sp, #52]	; 0x34
 800dd92:	2300      	movs	r3, #0
 800dd94:	921f      	str	r2, [sp, #124]	; 0x7c
 800dd96:	2278      	movs	r2, #120	; 0x78
 800dd98:	9307      	str	r3, [sp, #28]
 800dd9a:	3302      	adds	r3, #2
 800dd9c:	431e      	orrs	r6, r3
 800dd9e:	920f      	str	r2, [sp, #60]	; 0x3c
 800dda0:	e7ce      	b.n	800dd40 <_svfprintf_r+0xaa4>
 800dda2:	0023      	movs	r3, r4
 800dda4:	cb04      	ldmia	r3!, {r2}
 800dda6:	2400      	movs	r4, #0
 800dda8:	930d      	str	r3, [sp, #52]	; 0x34
 800ddaa:	231b      	movs	r3, #27
 800ddac:	9208      	str	r2, [sp, #32]
 800ddae:	aa1e      	add	r2, sp, #120	; 0x78
 800ddb0:	189b      	adds	r3, r3, r2
 800ddb2:	701c      	strb	r4, [r3, #0]
 800ddb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	d00e      	beq.n	800ddd8 <_svfprintf_r+0xb3c>
 800ddba:	0021      	movs	r1, r4
 800ddbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddbe:	9808      	ldr	r0, [sp, #32]
 800ddc0:	f002 f83a 	bl	800fe38 <memchr>
 800ddc4:	900c      	str	r0, [sp, #48]	; 0x30
 800ddc6:	42a0      	cmp	r0, r4
 800ddc8:	d100      	bne.n	800ddcc <_svfprintf_r+0xb30>
 800ddca:	e10d      	b.n	800dfe8 <_svfprintf_r+0xd4c>
 800ddcc:	9a08      	ldr	r2, [sp, #32]
 800ddce:	1a83      	subs	r3, r0, r2
 800ddd0:	9309      	str	r3, [sp, #36]	; 0x24
 800ddd2:	0023      	movs	r3, r4
 800ddd4:	940c      	str	r4, [sp, #48]	; 0x30
 800ddd6:	e44e      	b.n	800d676 <_svfprintf_r+0x3da>
 800ddd8:	9808      	ldr	r0, [sp, #32]
 800ddda:	f7f2 f993 	bl	8000104 <strlen>
 800ddde:	9009      	str	r0, [sp, #36]	; 0x24
 800dde0:	e7f7      	b.n	800ddd2 <_svfprintf_r+0xb36>
 800dde2:	2310      	movs	r3, #16
 800dde4:	431e      	orrs	r6, r3
 800dde6:	2320      	movs	r3, #32
 800dde8:	0030      	movs	r0, r6
 800ddea:	4018      	ands	r0, r3
 800ddec:	421e      	tst	r6, r3
 800ddee:	d009      	beq.n	800de04 <_svfprintf_r+0xb68>
 800ddf0:	3b19      	subs	r3, #25
 800ddf2:	3407      	adds	r4, #7
 800ddf4:	439c      	bics	r4, r3
 800ddf6:	0022      	movs	r2, r4
 800ddf8:	ca18      	ldmia	r2!, {r3, r4}
 800ddfa:	9306      	str	r3, [sp, #24]
 800ddfc:	9407      	str	r4, [sp, #28]
 800ddfe:	920d      	str	r2, [sp, #52]	; 0x34
 800de00:	2301      	movs	r3, #1
 800de02:	e79d      	b.n	800dd40 <_svfprintf_r+0xaa4>
 800de04:	0023      	movs	r3, r4
 800de06:	cb04      	ldmia	r3!, {r2}
 800de08:	0031      	movs	r1, r6
 800de0a:	930d      	str	r3, [sp, #52]	; 0x34
 800de0c:	2310      	movs	r3, #16
 800de0e:	4019      	ands	r1, r3
 800de10:	421e      	tst	r6, r3
 800de12:	d003      	beq.n	800de1c <_svfprintf_r+0xb80>
 800de14:	9206      	str	r2, [sp, #24]
 800de16:	9007      	str	r0, [sp, #28]
 800de18:	3b0f      	subs	r3, #15
 800de1a:	e791      	b.n	800dd40 <_svfprintf_r+0xaa4>
 800de1c:	2340      	movs	r3, #64	; 0x40
 800de1e:	0030      	movs	r0, r6
 800de20:	4018      	ands	r0, r3
 800de22:	421e      	tst	r6, r3
 800de24:	d003      	beq.n	800de2e <_svfprintf_r+0xb92>
 800de26:	b293      	uxth	r3, r2
 800de28:	9306      	str	r3, [sp, #24]
 800de2a:	9107      	str	r1, [sp, #28]
 800de2c:	e7e8      	b.n	800de00 <_svfprintf_r+0xb64>
 800de2e:	2380      	movs	r3, #128	; 0x80
 800de30:	0031      	movs	r1, r6
 800de32:	009b      	lsls	r3, r3, #2
 800de34:	4019      	ands	r1, r3
 800de36:	421e      	tst	r6, r3
 800de38:	d003      	beq.n	800de42 <_svfprintf_r+0xba6>
 800de3a:	b2d3      	uxtb	r3, r2
 800de3c:	9306      	str	r3, [sp, #24]
 800de3e:	9007      	str	r0, [sp, #28]
 800de40:	e7de      	b.n	800de00 <_svfprintf_r+0xb64>
 800de42:	9206      	str	r2, [sp, #24]
 800de44:	e7f1      	b.n	800de2a <_svfprintf_r+0xb8e>
 800de46:	4b89      	ldr	r3, [pc, #548]	; (800e06c <_svfprintf_r+0xdd0>)
 800de48:	0030      	movs	r0, r6
 800de4a:	931f      	str	r3, [sp, #124]	; 0x7c
 800de4c:	2320      	movs	r3, #32
 800de4e:	4018      	ands	r0, r3
 800de50:	421e      	tst	r6, r3
 800de52:	d01a      	beq.n	800de8a <_svfprintf_r+0xbee>
 800de54:	3b19      	subs	r3, #25
 800de56:	3407      	adds	r4, #7
 800de58:	439c      	bics	r4, r3
 800de5a:	0022      	movs	r2, r4
 800de5c:	ca18      	ldmia	r2!, {r3, r4}
 800de5e:	9306      	str	r3, [sp, #24]
 800de60:	9407      	str	r4, [sp, #28]
 800de62:	920d      	str	r2, [sp, #52]	; 0x34
 800de64:	07f3      	lsls	r3, r6, #31
 800de66:	d50a      	bpl.n	800de7e <_svfprintf_r+0xbe2>
 800de68:	9b06      	ldr	r3, [sp, #24]
 800de6a:	9a07      	ldr	r2, [sp, #28]
 800de6c:	4313      	orrs	r3, r2
 800de6e:	d006      	beq.n	800de7e <_svfprintf_r+0xbe2>
 800de70:	2230      	movs	r2, #48	; 0x30
 800de72:	ab25      	add	r3, sp, #148	; 0x94
 800de74:	701a      	strb	r2, [r3, #0]
 800de76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800de78:	705a      	strb	r2, [r3, #1]
 800de7a:	2302      	movs	r3, #2
 800de7c:	431e      	orrs	r6, r3
 800de7e:	4b78      	ldr	r3, [pc, #480]	; (800e060 <_svfprintf_r+0xdc4>)
 800de80:	401e      	ands	r6, r3
 800de82:	2302      	movs	r3, #2
 800de84:	e75c      	b.n	800dd40 <_svfprintf_r+0xaa4>
 800de86:	4b78      	ldr	r3, [pc, #480]	; (800e068 <_svfprintf_r+0xdcc>)
 800de88:	e7de      	b.n	800de48 <_svfprintf_r+0xbac>
 800de8a:	0023      	movs	r3, r4
 800de8c:	cb04      	ldmia	r3!, {r2}
 800de8e:	0031      	movs	r1, r6
 800de90:	930d      	str	r3, [sp, #52]	; 0x34
 800de92:	2310      	movs	r3, #16
 800de94:	4019      	ands	r1, r3
 800de96:	421e      	tst	r6, r3
 800de98:	d002      	beq.n	800dea0 <_svfprintf_r+0xc04>
 800de9a:	9206      	str	r2, [sp, #24]
 800de9c:	9007      	str	r0, [sp, #28]
 800de9e:	e7e1      	b.n	800de64 <_svfprintf_r+0xbc8>
 800dea0:	2340      	movs	r3, #64	; 0x40
 800dea2:	0030      	movs	r0, r6
 800dea4:	4018      	ands	r0, r3
 800dea6:	421e      	tst	r6, r3
 800dea8:	d003      	beq.n	800deb2 <_svfprintf_r+0xc16>
 800deaa:	b293      	uxth	r3, r2
 800deac:	9306      	str	r3, [sp, #24]
 800deae:	9107      	str	r1, [sp, #28]
 800deb0:	e7d8      	b.n	800de64 <_svfprintf_r+0xbc8>
 800deb2:	2380      	movs	r3, #128	; 0x80
 800deb4:	0031      	movs	r1, r6
 800deb6:	009b      	lsls	r3, r3, #2
 800deb8:	4019      	ands	r1, r3
 800deba:	421e      	tst	r6, r3
 800debc:	d002      	beq.n	800dec4 <_svfprintf_r+0xc28>
 800debe:	b2d3      	uxtb	r3, r2
 800dec0:	9306      	str	r3, [sp, #24]
 800dec2:	e7eb      	b.n	800de9c <_svfprintf_r+0xc00>
 800dec4:	9206      	str	r2, [sp, #24]
 800dec6:	e7f2      	b.n	800deae <_svfprintf_r+0xc12>
 800dec8:	9b07      	ldr	r3, [sp, #28]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d10a      	bne.n	800dee4 <_svfprintf_r+0xc48>
 800dece:	9b06      	ldr	r3, [sp, #24]
 800ded0:	2b09      	cmp	r3, #9
 800ded2:	d807      	bhi.n	800dee4 <_svfprintf_r+0xc48>
 800ded4:	23e7      	movs	r3, #231	; 0xe7
 800ded6:	aa1e      	add	r2, sp, #120	; 0x78
 800ded8:	189b      	adds	r3, r3, r2
 800deda:	9a06      	ldr	r2, [sp, #24]
 800dedc:	3230      	adds	r2, #48	; 0x30
 800dede:	701a      	strb	r2, [r3, #0]
 800dee0:	f000 fc18 	bl	800e714 <_svfprintf_r+0x1478>
 800dee4:	2680      	movs	r6, #128	; 0x80
 800dee6:	2300      	movs	r3, #0
 800dee8:	00f6      	lsls	r6, r6, #3
 800deea:	930e      	str	r3, [sp, #56]	; 0x38
 800deec:	ad58      	add	r5, sp, #352	; 0x160
 800deee:	4026      	ands	r6, r4
 800def0:	220a      	movs	r2, #10
 800def2:	9806      	ldr	r0, [sp, #24]
 800def4:	9907      	ldr	r1, [sp, #28]
 800def6:	2300      	movs	r3, #0
 800def8:	f7f2 fad4 	bl	80004a4 <__aeabi_uldivmod>
 800defc:	1e6b      	subs	r3, r5, #1
 800defe:	3230      	adds	r2, #48	; 0x30
 800df00:	9308      	str	r3, [sp, #32]
 800df02:	701a      	strb	r2, [r3, #0]
 800df04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df06:	900c      	str	r0, [sp, #48]	; 0x30
 800df08:	3301      	adds	r3, #1
 800df0a:	9110      	str	r1, [sp, #64]	; 0x40
 800df0c:	930e      	str	r3, [sp, #56]	; 0x38
 800df0e:	2e00      	cmp	r6, #0
 800df10:	d01d      	beq.n	800df4e <_svfprintf_r+0xcb2>
 800df12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800df14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	429a      	cmp	r2, r3
 800df1a:	d118      	bne.n	800df4e <_svfprintf_r+0xcb2>
 800df1c:	2aff      	cmp	r2, #255	; 0xff
 800df1e:	d016      	beq.n	800df4e <_svfprintf_r+0xcb2>
 800df20:	9b07      	ldr	r3, [sp, #28]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d102      	bne.n	800df2c <_svfprintf_r+0xc90>
 800df26:	9b06      	ldr	r3, [sp, #24]
 800df28:	2b09      	cmp	r3, #9
 800df2a:	d910      	bls.n	800df4e <_svfprintf_r+0xcb2>
 800df2c:	9b08      	ldr	r3, [sp, #32]
 800df2e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800df30:	991d      	ldr	r1, [sp, #116]	; 0x74
 800df32:	1a9b      	subs	r3, r3, r2
 800df34:	0018      	movs	r0, r3
 800df36:	9308      	str	r3, [sp, #32]
 800df38:	f7fd ff97 	bl	800be6a <strncpy>
 800df3c:	2200      	movs	r2, #0
 800df3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800df40:	920e      	str	r2, [sp, #56]	; 0x38
 800df42:	785b      	ldrb	r3, [r3, #1]
 800df44:	1e5a      	subs	r2, r3, #1
 800df46:	4193      	sbcs	r3, r2
 800df48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800df4a:	18d3      	adds	r3, r2, r3
 800df4c:	9312      	str	r3, [sp, #72]	; 0x48
 800df4e:	9b07      	ldr	r3, [sp, #28]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d10f      	bne.n	800df74 <_svfprintf_r+0xcd8>
 800df54:	9b06      	ldr	r3, [sp, #24]
 800df56:	2b09      	cmp	r3, #9
 800df58:	d80c      	bhi.n	800df74 <_svfprintf_r+0xcd8>
 800df5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df5c:	9a08      	ldr	r2, [sp, #32]
 800df5e:	9319      	str	r3, [sp, #100]	; 0x64
 800df60:	ab58      	add	r3, sp, #352	; 0x160
 800df62:	1a9b      	subs	r3, r3, r2
 800df64:	9309      	str	r3, [sp, #36]	; 0x24
 800df66:	2300      	movs	r3, #0
 800df68:	0026      	movs	r6, r4
 800df6a:	930c      	str	r3, [sp, #48]	; 0x30
 800df6c:	001d      	movs	r5, r3
 800df6e:	9310      	str	r3, [sp, #64]	; 0x40
 800df70:	9311      	str	r3, [sp, #68]	; 0x44
 800df72:	e4f2      	b.n	800d95a <_svfprintf_r+0x6be>
 800df74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df76:	9d08      	ldr	r5, [sp, #32]
 800df78:	9306      	str	r3, [sp, #24]
 800df7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df7c:	9307      	str	r3, [sp, #28]
 800df7e:	e7b7      	b.n	800def0 <_svfprintf_r+0xc54>
 800df80:	200f      	movs	r0, #15
 800df82:	ab58      	add	r3, sp, #352	; 0x160
 800df84:	9308      	str	r3, [sp, #32]
 800df86:	9b08      	ldr	r3, [sp, #32]
 800df88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800df8a:	3b01      	subs	r3, #1
 800df8c:	9308      	str	r3, [sp, #32]
 800df8e:	9b06      	ldr	r3, [sp, #24]
 800df90:	4003      	ands	r3, r0
 800df92:	5cd3      	ldrb	r3, [r2, r3]
 800df94:	9a08      	ldr	r2, [sp, #32]
 800df96:	7013      	strb	r3, [r2, #0]
 800df98:	9b07      	ldr	r3, [sp, #28]
 800df9a:	0719      	lsls	r1, r3, #28
 800df9c:	9b06      	ldr	r3, [sp, #24]
 800df9e:	091a      	lsrs	r2, r3, #4
 800dfa0:	9b07      	ldr	r3, [sp, #28]
 800dfa2:	4311      	orrs	r1, r2
 800dfa4:	091b      	lsrs	r3, r3, #4
 800dfa6:	9307      	str	r3, [sp, #28]
 800dfa8:	000b      	movs	r3, r1
 800dfaa:	9a07      	ldr	r2, [sp, #28]
 800dfac:	9106      	str	r1, [sp, #24]
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	d1e9      	bne.n	800df86 <_svfprintf_r+0xcea>
 800dfb2:	e7d2      	b.n	800df5a <_svfprintf_r+0xcbe>
 800dfb4:	aa58      	add	r2, sp, #352	; 0x160
 800dfb6:	9208      	str	r2, [sp, #32]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d1ce      	bne.n	800df5a <_svfprintf_r+0xcbe>
 800dfbc:	07f6      	lsls	r6, r6, #31
 800dfbe:	d5cc      	bpl.n	800df5a <_svfprintf_r+0xcbe>
 800dfc0:	aa1e      	add	r2, sp, #120	; 0x78
 800dfc2:	33e7      	adds	r3, #231	; 0xe7
 800dfc4:	189b      	adds	r3, r3, r2
 800dfc6:	2230      	movs	r2, #48	; 0x30
 800dfc8:	e789      	b.n	800dede <_svfprintf_r+0xc42>
 800dfca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d100      	bne.n	800dfd2 <_svfprintf_r+0xd36>
 800dfd0:	e364      	b.n	800e69c <_svfprintf_r+0x1400>
 800dfd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dfd4:	211b      	movs	r1, #27
 800dfd6:	ab3f      	add	r3, sp, #252	; 0xfc
 800dfd8:	701a      	strb	r2, [r3, #0]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	a81e      	add	r0, sp, #120	; 0x78
 800dfde:	1809      	adds	r1, r1, r0
 800dfe0:	700a      	strb	r2, [r1, #0]
 800dfe2:	940d      	str	r4, [sp, #52]	; 0x34
 800dfe4:	f7ff fabd 	bl	800d562 <_svfprintf_r+0x2c6>
 800dfe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfea:	f7ff fb44 	bl	800d676 <_svfprintf_r+0x3da>
 800dfee:	2010      	movs	r0, #16
 800dff0:	1812      	adds	r2, r2, r0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	922e      	str	r2, [sp, #184]	; 0xb8
 800dff6:	932d      	str	r3, [sp, #180]	; 0xb4
 800dff8:	2b07      	cmp	r3, #7
 800dffa:	dd08      	ble.n	800e00e <_svfprintf_r+0xd72>
 800dffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dffe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e000:	aa2c      	add	r2, sp, #176	; 0xb0
 800e002:	f003 f9db 	bl	80113bc <__ssprint_r>
 800e006:	2800      	cmp	r0, #0
 800e008:	d000      	beq.n	800e00c <_svfprintf_r+0xd70>
 800e00a:	e326      	b.n	800e65a <_svfprintf_r+0x13be>
 800e00c:	a92f      	add	r1, sp, #188	; 0xbc
 800e00e:	000f      	movs	r7, r1
 800e010:	3c10      	subs	r4, #16
 800e012:	e4c5      	b.n	800d9a0 <_svfprintf_r+0x704>
 800e014:	2010      	movs	r0, #16
 800e016:	1812      	adds	r2, r2, r0
 800e018:	6078      	str	r0, [r7, #4]
 800e01a:	922e      	str	r2, [sp, #184]	; 0xb8
 800e01c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e01e:	2b07      	cmp	r3, #7
 800e020:	dd08      	ble.n	800e034 <_svfprintf_r+0xd98>
 800e022:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e024:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e026:	aa2c      	add	r2, sp, #176	; 0xb0
 800e028:	f003 f9c8 	bl	80113bc <__ssprint_r>
 800e02c:	2800      	cmp	r0, #0
 800e02e:	d000      	beq.n	800e032 <_svfprintf_r+0xd96>
 800e030:	e313      	b.n	800e65a <_svfprintf_r+0x13be>
 800e032:	a92f      	add	r1, sp, #188	; 0xbc
 800e034:	000f      	movs	r7, r1
 800e036:	3c10      	subs	r4, #16
 800e038:	e50b      	b.n	800da52 <_svfprintf_r+0x7b6>
 800e03a:	2010      	movs	r0, #16
 800e03c:	1812      	adds	r2, r2, r0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	922e      	str	r2, [sp, #184]	; 0xb8
 800e042:	932d      	str	r3, [sp, #180]	; 0xb4
 800e044:	2b07      	cmp	r3, #7
 800e046:	dd08      	ble.n	800e05a <_svfprintf_r+0xdbe>
 800e048:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e04a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e04c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e04e:	f003 f9b5 	bl	80113bc <__ssprint_r>
 800e052:	2800      	cmp	r0, #0
 800e054:	d000      	beq.n	800e058 <_svfprintf_r+0xdbc>
 800e056:	e300      	b.n	800e65a <_svfprintf_r+0x13be>
 800e058:	a92f      	add	r1, sp, #188	; 0xbc
 800e05a:	000f      	movs	r7, r1
 800e05c:	3c10      	subs	r4, #16
 800e05e:	e518      	b.n	800da92 <_svfprintf_r+0x7f6>
 800e060:	fffffbff 	.word	0xfffffbff
 800e064:	00007830 	.word	0x00007830
 800e068:	080147ec 	.word	0x080147ec
 800e06c:	080147fd 	.word	0x080147fd
 800e070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e072:	2b65      	cmp	r3, #101	; 0x65
 800e074:	dc00      	bgt.n	800e078 <_svfprintf_r+0xddc>
 800e076:	e241      	b.n	800e4fc <_svfprintf_r+0x1260>
 800e078:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e07a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e07c:	2200      	movs	r2, #0
 800e07e:	2300      	movs	r3, #0
 800e080:	f7f2 f9e2 	bl	8000448 <__aeabi_dcmpeq>
 800e084:	2800      	cmp	r0, #0
 800e086:	d077      	beq.n	800e178 <_svfprintf_r+0xedc>
 800e088:	4bca      	ldr	r3, [pc, #808]	; (800e3b4 <_svfprintf_r+0x1118>)
 800e08a:	603b      	str	r3, [r7, #0]
 800e08c:	2301      	movs	r3, #1
 800e08e:	607b      	str	r3, [r7, #4]
 800e090:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e092:	3708      	adds	r7, #8
 800e094:	3301      	adds	r3, #1
 800e096:	932e      	str	r3, [sp, #184]	; 0xb8
 800e098:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e09a:	3301      	adds	r3, #1
 800e09c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e09e:	2b07      	cmp	r3, #7
 800e0a0:	dd08      	ble.n	800e0b4 <_svfprintf_r+0xe18>
 800e0a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e0a6:	aa2c      	add	r2, sp, #176	; 0xb0
 800e0a8:	f003 f988 	bl	80113bc <__ssprint_r>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d000      	beq.n	800e0b2 <_svfprintf_r+0xe16>
 800e0b0:	e2d3      	b.n	800e65a <_svfprintf_r+0x13be>
 800e0b2:	af2f      	add	r7, sp, #188	; 0xbc
 800e0b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e0b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	db01      	blt.n	800e0c0 <_svfprintf_r+0xe24>
 800e0bc:	07f3      	lsls	r3, r6, #31
 800e0be:	d51b      	bpl.n	800e0f8 <_svfprintf_r+0xe5c>
 800e0c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e0c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e0c4:	603b      	str	r3, [r7, #0]
 800e0c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e0c8:	607b      	str	r3, [r7, #4]
 800e0ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e0cc:	3708      	adds	r7, #8
 800e0ce:	189b      	adds	r3, r3, r2
 800e0d0:	932e      	str	r3, [sp, #184]	; 0xb8
 800e0d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e0d8:	2b07      	cmp	r3, #7
 800e0da:	dd08      	ble.n	800e0ee <_svfprintf_r+0xe52>
 800e0dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0de:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e0e0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e0e2:	f003 f96b 	bl	80113bc <__ssprint_r>
 800e0e6:	2800      	cmp	r0, #0
 800e0e8:	d000      	beq.n	800e0ec <_svfprintf_r+0xe50>
 800e0ea:	e2b6      	b.n	800e65a <_svfprintf_r+0x13be>
 800e0ec:	af2f      	add	r7, sp, #188	; 0xbc
 800e0ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0f0:	2510      	movs	r5, #16
 800e0f2:	1e5c      	subs	r4, r3, #1
 800e0f4:	2c00      	cmp	r4, #0
 800e0f6:	dc2e      	bgt.n	800e156 <_svfprintf_r+0xeba>
 800e0f8:	0776      	lsls	r6, r6, #29
 800e0fa:	d500      	bpl.n	800e0fe <_svfprintf_r+0xe62>
 800e0fc:	e290      	b.n	800e620 <_svfprintf_r+0x1384>
 800e0fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e100:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e102:	4293      	cmp	r3, r2
 800e104:	da00      	bge.n	800e108 <_svfprintf_r+0xe6c>
 800e106:	0013      	movs	r3, r2
 800e108:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e10a:	18d3      	adds	r3, r2, r3
 800e10c:	9317      	str	r3, [sp, #92]	; 0x5c
 800e10e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e110:	2b00      	cmp	r3, #0
 800e112:	d007      	beq.n	800e124 <_svfprintf_r+0xe88>
 800e114:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e116:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e118:	aa2c      	add	r2, sp, #176	; 0xb0
 800e11a:	f003 f94f 	bl	80113bc <__ssprint_r>
 800e11e:	2800      	cmp	r0, #0
 800e120:	d000      	beq.n	800e124 <_svfprintf_r+0xe88>
 800e122:	e29a      	b.n	800e65a <_svfprintf_r+0x13be>
 800e124:	2300      	movs	r3, #0
 800e126:	932d      	str	r3, [sp, #180]	; 0xb4
 800e128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d000      	beq.n	800e130 <_svfprintf_r+0xe94>
 800e12e:	e2b0      	b.n	800e692 <_svfprintf_r+0x13f6>
 800e130:	af2f      	add	r7, sp, #188	; 0xbc
 800e132:	e5dc      	b.n	800dcee <_svfprintf_r+0xa52>
 800e134:	3210      	adds	r2, #16
 800e136:	607d      	str	r5, [r7, #4]
 800e138:	922e      	str	r2, [sp, #184]	; 0xb8
 800e13a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e13c:	2b07      	cmp	r3, #7
 800e13e:	dd08      	ble.n	800e152 <_svfprintf_r+0xeb6>
 800e140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e142:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e144:	aa2c      	add	r2, sp, #176	; 0xb0
 800e146:	f003 f939 	bl	80113bc <__ssprint_r>
 800e14a:	2800      	cmp	r0, #0
 800e14c:	d000      	beq.n	800e150 <_svfprintf_r+0xeb4>
 800e14e:	e284      	b.n	800e65a <_svfprintf_r+0x13be>
 800e150:	a92f      	add	r1, sp, #188	; 0xbc
 800e152:	000f      	movs	r7, r1
 800e154:	3c10      	subs	r4, #16
 800e156:	0039      	movs	r1, r7
 800e158:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e15a:	4897      	ldr	r0, [pc, #604]	; (800e3b8 <_svfprintf_r+0x111c>)
 800e15c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e15e:	3301      	adds	r3, #1
 800e160:	3108      	adds	r1, #8
 800e162:	6038      	str	r0, [r7, #0]
 800e164:	2c10      	cmp	r4, #16
 800e166:	dce5      	bgt.n	800e134 <_svfprintf_r+0xe98>
 800e168:	607c      	str	r4, [r7, #4]
 800e16a:	18a4      	adds	r4, r4, r2
 800e16c:	942e      	str	r4, [sp, #184]	; 0xb8
 800e16e:	000f      	movs	r7, r1
 800e170:	932d      	str	r3, [sp, #180]	; 0xb4
 800e172:	2b07      	cmp	r3, #7
 800e174:	ddc0      	ble.n	800e0f8 <_svfprintf_r+0xe5c>
 800e176:	e05f      	b.n	800e238 <_svfprintf_r+0xf9c>
 800e178:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	dc78      	bgt.n	800e270 <_svfprintf_r+0xfd4>
 800e17e:	4b8d      	ldr	r3, [pc, #564]	; (800e3b4 <_svfprintf_r+0x1118>)
 800e180:	603b      	str	r3, [r7, #0]
 800e182:	2301      	movs	r3, #1
 800e184:	607b      	str	r3, [r7, #4]
 800e186:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e188:	3708      	adds	r7, #8
 800e18a:	3301      	adds	r3, #1
 800e18c:	932e      	str	r3, [sp, #184]	; 0xb8
 800e18e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e190:	3301      	adds	r3, #1
 800e192:	932d      	str	r3, [sp, #180]	; 0xb4
 800e194:	2b07      	cmp	r3, #7
 800e196:	dd08      	ble.n	800e1aa <_svfprintf_r+0xf0e>
 800e198:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e19a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e19c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e19e:	f003 f90d 	bl	80113bc <__ssprint_r>
 800e1a2:	2800      	cmp	r0, #0
 800e1a4:	d000      	beq.n	800e1a8 <_svfprintf_r+0xf0c>
 800e1a6:	e258      	b.n	800e65a <_svfprintf_r+0x13be>
 800e1a8:	af2f      	add	r7, sp, #188	; 0xbc
 800e1aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e1ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e1ae:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e1b0:	430b      	orrs	r3, r1
 800e1b2:	2101      	movs	r1, #1
 800e1b4:	4031      	ands	r1, r6
 800e1b6:	430b      	orrs	r3, r1
 800e1b8:	d09e      	beq.n	800e0f8 <_svfprintf_r+0xe5c>
 800e1ba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e1bc:	603b      	str	r3, [r7, #0]
 800e1be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e1c0:	607b      	str	r3, [r7, #4]
 800e1c2:	189a      	adds	r2, r3, r2
 800e1c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e1c6:	922e      	str	r2, [sp, #184]	; 0xb8
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	932d      	str	r3, [sp, #180]	; 0xb4
 800e1cc:	3708      	adds	r7, #8
 800e1ce:	2b07      	cmp	r3, #7
 800e1d0:	dd08      	ble.n	800e1e4 <_svfprintf_r+0xf48>
 800e1d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e1d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e1d6:	aa2c      	add	r2, sp, #176	; 0xb0
 800e1d8:	f003 f8f0 	bl	80113bc <__ssprint_r>
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	d000      	beq.n	800e1e2 <_svfprintf_r+0xf46>
 800e1e0:	e23b      	b.n	800e65a <_svfprintf_r+0x13be>
 800e1e2:	af2f      	add	r7, sp, #188	; 0xbc
 800e1e4:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e1e6:	2c00      	cmp	r4, #0
 800e1e8:	da19      	bge.n	800e21e <_svfprintf_r+0xf82>
 800e1ea:	0038      	movs	r0, r7
 800e1ec:	2510      	movs	r5, #16
 800e1ee:	4264      	negs	r4, r4
 800e1f0:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e1f2:	4a71      	ldr	r2, [pc, #452]	; (800e3b8 <_svfprintf_r+0x111c>)
 800e1f4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e1f6:	3101      	adds	r1, #1
 800e1f8:	3708      	adds	r7, #8
 800e1fa:	6002      	str	r2, [r0, #0]
 800e1fc:	2c10      	cmp	r4, #16
 800e1fe:	dc25      	bgt.n	800e24c <_svfprintf_r+0xfb0>
 800e200:	6044      	str	r4, [r0, #4]
 800e202:	18e4      	adds	r4, r4, r3
 800e204:	942e      	str	r4, [sp, #184]	; 0xb8
 800e206:	912d      	str	r1, [sp, #180]	; 0xb4
 800e208:	2907      	cmp	r1, #7
 800e20a:	dd08      	ble.n	800e21e <_svfprintf_r+0xf82>
 800e20c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e20e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e210:	aa2c      	add	r2, sp, #176	; 0xb0
 800e212:	f003 f8d3 	bl	80113bc <__ssprint_r>
 800e216:	2800      	cmp	r0, #0
 800e218:	d000      	beq.n	800e21c <_svfprintf_r+0xf80>
 800e21a:	e21e      	b.n	800e65a <_svfprintf_r+0x13be>
 800e21c:	af2f      	add	r7, sp, #188	; 0xbc
 800e21e:	9b08      	ldr	r3, [sp, #32]
 800e220:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e222:	603b      	str	r3, [r7, #0]
 800e224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e226:	18d2      	adds	r2, r2, r3
 800e228:	922e      	str	r2, [sp, #184]	; 0xb8
 800e22a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e22c:	607b      	str	r3, [r7, #4]
 800e22e:	3201      	adds	r2, #1
 800e230:	922d      	str	r2, [sp, #180]	; 0xb4
 800e232:	2a07      	cmp	r2, #7
 800e234:	dc00      	bgt.n	800e238 <_svfprintf_r+0xf9c>
 800e236:	e45b      	b.n	800daf0 <_svfprintf_r+0x854>
 800e238:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e23a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e23c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e23e:	f003 f8bd 	bl	80113bc <__ssprint_r>
 800e242:	2800      	cmp	r0, #0
 800e244:	d000      	beq.n	800e248 <_svfprintf_r+0xfac>
 800e246:	e208      	b.n	800e65a <_svfprintf_r+0x13be>
 800e248:	af2f      	add	r7, sp, #188	; 0xbc
 800e24a:	e755      	b.n	800e0f8 <_svfprintf_r+0xe5c>
 800e24c:	3310      	adds	r3, #16
 800e24e:	6045      	str	r5, [r0, #4]
 800e250:	932e      	str	r3, [sp, #184]	; 0xb8
 800e252:	912d      	str	r1, [sp, #180]	; 0xb4
 800e254:	2907      	cmp	r1, #7
 800e256:	dd08      	ble.n	800e26a <_svfprintf_r+0xfce>
 800e258:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e25a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e25c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e25e:	f003 f8ad 	bl	80113bc <__ssprint_r>
 800e262:	2800      	cmp	r0, #0
 800e264:	d000      	beq.n	800e268 <_svfprintf_r+0xfcc>
 800e266:	e1f8      	b.n	800e65a <_svfprintf_r+0x13be>
 800e268:	af2f      	add	r7, sp, #188	; 0xbc
 800e26a:	0038      	movs	r0, r7
 800e26c:	3c10      	subs	r4, #16
 800e26e:	e7bf      	b.n	800e1f0 <_svfprintf_r+0xf54>
 800e270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e272:	002c      	movs	r4, r5
 800e274:	429d      	cmp	r5, r3
 800e276:	dd00      	ble.n	800e27a <_svfprintf_r+0xfde>
 800e278:	001c      	movs	r4, r3
 800e27a:	2c00      	cmp	r4, #0
 800e27c:	dd14      	ble.n	800e2a8 <_svfprintf_r+0x100c>
 800e27e:	9b08      	ldr	r3, [sp, #32]
 800e280:	607c      	str	r4, [r7, #4]
 800e282:	603b      	str	r3, [r7, #0]
 800e284:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e286:	3708      	adds	r7, #8
 800e288:	18e3      	adds	r3, r4, r3
 800e28a:	932e      	str	r3, [sp, #184]	; 0xb8
 800e28c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e28e:	3301      	adds	r3, #1
 800e290:	932d      	str	r3, [sp, #180]	; 0xb4
 800e292:	2b07      	cmp	r3, #7
 800e294:	dd08      	ble.n	800e2a8 <_svfprintf_r+0x100c>
 800e296:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e298:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e29a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e29c:	f003 f88e 	bl	80113bc <__ssprint_r>
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	d000      	beq.n	800e2a6 <_svfprintf_r+0x100a>
 800e2a4:	e1d9      	b.n	800e65a <_svfprintf_r+0x13be>
 800e2a6:	af2f      	add	r7, sp, #188	; 0xbc
 800e2a8:	43e3      	mvns	r3, r4
 800e2aa:	17db      	asrs	r3, r3, #31
 800e2ac:	401c      	ands	r4, r3
 800e2ae:	1b2c      	subs	r4, r5, r4
 800e2b0:	2c00      	cmp	r4, #0
 800e2b2:	dd18      	ble.n	800e2e6 <_svfprintf_r+0x104a>
 800e2b4:	0039      	movs	r1, r7
 800e2b6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e2b8:	483f      	ldr	r0, [pc, #252]	; (800e3b8 <_svfprintf_r+0x111c>)
 800e2ba:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e2bc:	3301      	adds	r3, #1
 800e2be:	3108      	adds	r1, #8
 800e2c0:	6038      	str	r0, [r7, #0]
 800e2c2:	2c10      	cmp	r4, #16
 800e2c4:	dc7a      	bgt.n	800e3bc <_svfprintf_r+0x1120>
 800e2c6:	607c      	str	r4, [r7, #4]
 800e2c8:	18a4      	adds	r4, r4, r2
 800e2ca:	000f      	movs	r7, r1
 800e2cc:	942e      	str	r4, [sp, #184]	; 0xb8
 800e2ce:	932d      	str	r3, [sp, #180]	; 0xb4
 800e2d0:	2b07      	cmp	r3, #7
 800e2d2:	dd08      	ble.n	800e2e6 <_svfprintf_r+0x104a>
 800e2d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e2d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e2d8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e2da:	f003 f86f 	bl	80113bc <__ssprint_r>
 800e2de:	2800      	cmp	r0, #0
 800e2e0:	d000      	beq.n	800e2e4 <_svfprintf_r+0x1048>
 800e2e2:	e1ba      	b.n	800e65a <_svfprintf_r+0x13be>
 800e2e4:	af2f      	add	r7, sp, #188	; 0xbc
 800e2e6:	9b08      	ldr	r3, [sp, #32]
 800e2e8:	195d      	adds	r5, r3, r5
 800e2ea:	0573      	lsls	r3, r6, #21
 800e2ec:	d50b      	bpl.n	800e306 <_svfprintf_r+0x106a>
 800e2ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d176      	bne.n	800e3e2 <_svfprintf_r+0x1146>
 800e2f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d176      	bne.n	800e3e8 <_svfprintf_r+0x114c>
 800e2fa:	9b08      	ldr	r3, [sp, #32]
 800e2fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2fe:	189b      	adds	r3, r3, r2
 800e300:	429d      	cmp	r5, r3
 800e302:	d900      	bls.n	800e306 <_svfprintf_r+0x106a>
 800e304:	001d      	movs	r5, r3
 800e306:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e308:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e30a:	4293      	cmp	r3, r2
 800e30c:	db01      	blt.n	800e312 <_svfprintf_r+0x1076>
 800e30e:	07f3      	lsls	r3, r6, #31
 800e310:	d516      	bpl.n	800e340 <_svfprintf_r+0x10a4>
 800e312:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e314:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e316:	603b      	str	r3, [r7, #0]
 800e318:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e31a:	607b      	str	r3, [r7, #4]
 800e31c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e31e:	3708      	adds	r7, #8
 800e320:	189b      	adds	r3, r3, r2
 800e322:	932e      	str	r3, [sp, #184]	; 0xb8
 800e324:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e326:	3301      	adds	r3, #1
 800e328:	932d      	str	r3, [sp, #180]	; 0xb4
 800e32a:	2b07      	cmp	r3, #7
 800e32c:	dd08      	ble.n	800e340 <_svfprintf_r+0x10a4>
 800e32e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e330:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e332:	aa2c      	add	r2, sp, #176	; 0xb0
 800e334:	f003 f842 	bl	80113bc <__ssprint_r>
 800e338:	2800      	cmp	r0, #0
 800e33a:	d000      	beq.n	800e33e <_svfprintf_r+0x10a2>
 800e33c:	e18d      	b.n	800e65a <_svfprintf_r+0x13be>
 800e33e:	af2f      	add	r7, sp, #188	; 0xbc
 800e340:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e342:	9b08      	ldr	r3, [sp, #32]
 800e344:	4694      	mov	ip, r2
 800e346:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e348:	4463      	add	r3, ip
 800e34a:	1b5b      	subs	r3, r3, r5
 800e34c:	1b14      	subs	r4, r2, r4
 800e34e:	429c      	cmp	r4, r3
 800e350:	dd00      	ble.n	800e354 <_svfprintf_r+0x10b8>
 800e352:	001c      	movs	r4, r3
 800e354:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e356:	2c00      	cmp	r4, #0
 800e358:	dd12      	ble.n	800e380 <_svfprintf_r+0x10e4>
 800e35a:	18e3      	adds	r3, r4, r3
 800e35c:	932e      	str	r3, [sp, #184]	; 0xb8
 800e35e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e360:	603d      	str	r5, [r7, #0]
 800e362:	3301      	adds	r3, #1
 800e364:	607c      	str	r4, [r7, #4]
 800e366:	932d      	str	r3, [sp, #180]	; 0xb4
 800e368:	3708      	adds	r7, #8
 800e36a:	2b07      	cmp	r3, #7
 800e36c:	dd08      	ble.n	800e380 <_svfprintf_r+0x10e4>
 800e36e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e370:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e372:	aa2c      	add	r2, sp, #176	; 0xb0
 800e374:	f003 f822 	bl	80113bc <__ssprint_r>
 800e378:	2800      	cmp	r0, #0
 800e37a:	d000      	beq.n	800e37e <_svfprintf_r+0x10e2>
 800e37c:	e16d      	b.n	800e65a <_svfprintf_r+0x13be>
 800e37e:	af2f      	add	r7, sp, #188	; 0xbc
 800e380:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e382:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e384:	2510      	movs	r5, #16
 800e386:	1ad3      	subs	r3, r2, r3
 800e388:	43e2      	mvns	r2, r4
 800e38a:	17d2      	asrs	r2, r2, #31
 800e38c:	4014      	ands	r4, r2
 800e38e:	1b1c      	subs	r4, r3, r4
 800e390:	2c00      	cmp	r4, #0
 800e392:	dc00      	bgt.n	800e396 <_svfprintf_r+0x10fa>
 800e394:	e6b0      	b.n	800e0f8 <_svfprintf_r+0xe5c>
 800e396:	0039      	movs	r1, r7
 800e398:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e39a:	4807      	ldr	r0, [pc, #28]	; (800e3b8 <_svfprintf_r+0x111c>)
 800e39c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e39e:	3301      	adds	r3, #1
 800e3a0:	3108      	adds	r1, #8
 800e3a2:	6038      	str	r0, [r7, #0]
 800e3a4:	2c10      	cmp	r4, #16
 800e3a6:	dd00      	ble.n	800e3aa <_svfprintf_r+0x110e>
 800e3a8:	e096      	b.n	800e4d8 <_svfprintf_r+0x123c>
 800e3aa:	1912      	adds	r2, r2, r4
 800e3ac:	607c      	str	r4, [r7, #4]
 800e3ae:	922e      	str	r2, [sp, #184]	; 0xb8
 800e3b0:	e6dd      	b.n	800e16e <_svfprintf_r+0xed2>
 800e3b2:	46c0      	nop			; (mov r8, r8)
 800e3b4:	0801480e 	.word	0x0801480e
 800e3b8:	08014820 	.word	0x08014820
 800e3bc:	2010      	movs	r0, #16
 800e3be:	1812      	adds	r2, r2, r0
 800e3c0:	6078      	str	r0, [r7, #4]
 800e3c2:	922e      	str	r2, [sp, #184]	; 0xb8
 800e3c4:	932d      	str	r3, [sp, #180]	; 0xb4
 800e3c6:	2b07      	cmp	r3, #7
 800e3c8:	dd08      	ble.n	800e3dc <_svfprintf_r+0x1140>
 800e3ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e3ce:	aa2c      	add	r2, sp, #176	; 0xb0
 800e3d0:	f002 fff4 	bl	80113bc <__ssprint_r>
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	d000      	beq.n	800e3da <_svfprintf_r+0x113e>
 800e3d8:	e13f      	b.n	800e65a <_svfprintf_r+0x13be>
 800e3da:	a92f      	add	r1, sp, #188	; 0xbc
 800e3dc:	000f      	movs	r7, r1
 800e3de:	3c10      	subs	r4, #16
 800e3e0:	e768      	b.n	800e2b4 <_svfprintf_r+0x1018>
 800e3e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d05d      	beq.n	800e4a4 <_svfprintf_r+0x1208>
 800e3e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e3ea:	3b01      	subs	r3, #1
 800e3ec:	9310      	str	r3, [sp, #64]	; 0x40
 800e3ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e3f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e3f2:	603b      	str	r3, [r7, #0]
 800e3f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e3f6:	607b      	str	r3, [r7, #4]
 800e3f8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e3fa:	3708      	adds	r7, #8
 800e3fc:	189b      	adds	r3, r3, r2
 800e3fe:	932e      	str	r3, [sp, #184]	; 0xb8
 800e400:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e402:	3301      	adds	r3, #1
 800e404:	932d      	str	r3, [sp, #180]	; 0xb4
 800e406:	2b07      	cmp	r3, #7
 800e408:	dd08      	ble.n	800e41c <_svfprintf_r+0x1180>
 800e40a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e40c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e40e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e410:	f002 ffd4 	bl	80113bc <__ssprint_r>
 800e414:	2800      	cmp	r0, #0
 800e416:	d000      	beq.n	800e41a <_svfprintf_r+0x117e>
 800e418:	e11f      	b.n	800e65a <_svfprintf_r+0x13be>
 800e41a:	af2f      	add	r7, sp, #188	; 0xbc
 800e41c:	9b08      	ldr	r3, [sp, #32]
 800e41e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e420:	189c      	adds	r4, r3, r2
 800e422:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e424:	1b64      	subs	r4, r4, r5
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	429c      	cmp	r4, r3
 800e42a:	dd00      	ble.n	800e42e <_svfprintf_r+0x1192>
 800e42c:	001c      	movs	r4, r3
 800e42e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e430:	2c00      	cmp	r4, #0
 800e432:	dd12      	ble.n	800e45a <_svfprintf_r+0x11be>
 800e434:	18e3      	adds	r3, r4, r3
 800e436:	932e      	str	r3, [sp, #184]	; 0xb8
 800e438:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e43a:	603d      	str	r5, [r7, #0]
 800e43c:	3301      	adds	r3, #1
 800e43e:	607c      	str	r4, [r7, #4]
 800e440:	932d      	str	r3, [sp, #180]	; 0xb4
 800e442:	3708      	adds	r7, #8
 800e444:	2b07      	cmp	r3, #7
 800e446:	dd08      	ble.n	800e45a <_svfprintf_r+0x11be>
 800e448:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e44a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e44c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e44e:	f002 ffb5 	bl	80113bc <__ssprint_r>
 800e452:	2800      	cmp	r0, #0
 800e454:	d000      	beq.n	800e458 <_svfprintf_r+0x11bc>
 800e456:	e100      	b.n	800e65a <_svfprintf_r+0x13be>
 800e458:	af2f      	add	r7, sp, #188	; 0xbc
 800e45a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e45c:	781a      	ldrb	r2, [r3, #0]
 800e45e:	43e3      	mvns	r3, r4
 800e460:	17db      	asrs	r3, r3, #31
 800e462:	401c      	ands	r4, r3
 800e464:	1b14      	subs	r4, r2, r4
 800e466:	2c00      	cmp	r4, #0
 800e468:	dd18      	ble.n	800e49c <_svfprintf_r+0x1200>
 800e46a:	0039      	movs	r1, r7
 800e46c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e46e:	48aa      	ldr	r0, [pc, #680]	; (800e718 <_svfprintf_r+0x147c>)
 800e470:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e472:	3301      	adds	r3, #1
 800e474:	3108      	adds	r1, #8
 800e476:	6038      	str	r0, [r7, #0]
 800e478:	2c10      	cmp	r4, #16
 800e47a:	dc1a      	bgt.n	800e4b2 <_svfprintf_r+0x1216>
 800e47c:	1912      	adds	r2, r2, r4
 800e47e:	607c      	str	r4, [r7, #4]
 800e480:	922e      	str	r2, [sp, #184]	; 0xb8
 800e482:	000f      	movs	r7, r1
 800e484:	932d      	str	r3, [sp, #180]	; 0xb4
 800e486:	2b07      	cmp	r3, #7
 800e488:	dd08      	ble.n	800e49c <_svfprintf_r+0x1200>
 800e48a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e48c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e48e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e490:	f002 ff94 	bl	80113bc <__ssprint_r>
 800e494:	2800      	cmp	r0, #0
 800e496:	d000      	beq.n	800e49a <_svfprintf_r+0x11fe>
 800e498:	e0df      	b.n	800e65a <_svfprintf_r+0x13be>
 800e49a:	af2f      	add	r7, sp, #188	; 0xbc
 800e49c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	18ed      	adds	r5, r5, r3
 800e4a2:	e724      	b.n	800e2ee <_svfprintf_r+0x1052>
 800e4a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	9312      	str	r3, [sp, #72]	; 0x48
 800e4aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e4ac:	3b01      	subs	r3, #1
 800e4ae:	9311      	str	r3, [sp, #68]	; 0x44
 800e4b0:	e79d      	b.n	800e3ee <_svfprintf_r+0x1152>
 800e4b2:	2010      	movs	r0, #16
 800e4b4:	1812      	adds	r2, r2, r0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	922e      	str	r2, [sp, #184]	; 0xb8
 800e4ba:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4bc:	2b07      	cmp	r3, #7
 800e4be:	dd08      	ble.n	800e4d2 <_svfprintf_r+0x1236>
 800e4c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4c4:	aa2c      	add	r2, sp, #176	; 0xb0
 800e4c6:	f002 ff79 	bl	80113bc <__ssprint_r>
 800e4ca:	2800      	cmp	r0, #0
 800e4cc:	d000      	beq.n	800e4d0 <_svfprintf_r+0x1234>
 800e4ce:	e0c4      	b.n	800e65a <_svfprintf_r+0x13be>
 800e4d0:	a92f      	add	r1, sp, #188	; 0xbc
 800e4d2:	000f      	movs	r7, r1
 800e4d4:	3c10      	subs	r4, #16
 800e4d6:	e7c8      	b.n	800e46a <_svfprintf_r+0x11ce>
 800e4d8:	3210      	adds	r2, #16
 800e4da:	607d      	str	r5, [r7, #4]
 800e4dc:	922e      	str	r2, [sp, #184]	; 0xb8
 800e4de:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4e0:	2b07      	cmp	r3, #7
 800e4e2:	dd08      	ble.n	800e4f6 <_svfprintf_r+0x125a>
 800e4e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4e8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e4ea:	f002 ff67 	bl	80113bc <__ssprint_r>
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	d000      	beq.n	800e4f4 <_svfprintf_r+0x1258>
 800e4f2:	e0b2      	b.n	800e65a <_svfprintf_r+0x13be>
 800e4f4:	a92f      	add	r1, sp, #188	; 0xbc
 800e4f6:	000f      	movs	r7, r1
 800e4f8:	3c10      	subs	r4, #16
 800e4fa:	e74c      	b.n	800e396 <_svfprintf_r+0x10fa>
 800e4fc:	003c      	movs	r4, r7
 800e4fe:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e500:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e504:	3101      	adds	r1, #1
 800e506:	3301      	adds	r3, #1
 800e508:	3408      	adds	r4, #8
 800e50a:	2a01      	cmp	r2, #1
 800e50c:	dc03      	bgt.n	800e516 <_svfprintf_r+0x127a>
 800e50e:	2201      	movs	r2, #1
 800e510:	4216      	tst	r6, r2
 800e512:	d100      	bne.n	800e516 <_svfprintf_r+0x127a>
 800e514:	e07f      	b.n	800e616 <_svfprintf_r+0x137a>
 800e516:	9a08      	ldr	r2, [sp, #32]
 800e518:	912e      	str	r1, [sp, #184]	; 0xb8
 800e51a:	603a      	str	r2, [r7, #0]
 800e51c:	2201      	movs	r2, #1
 800e51e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e520:	607a      	str	r2, [r7, #4]
 800e522:	2b07      	cmp	r3, #7
 800e524:	dd08      	ble.n	800e538 <_svfprintf_r+0x129c>
 800e526:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e528:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e52a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e52c:	f002 ff46 	bl	80113bc <__ssprint_r>
 800e530:	2800      	cmp	r0, #0
 800e532:	d000      	beq.n	800e536 <_svfprintf_r+0x129a>
 800e534:	e091      	b.n	800e65a <_svfprintf_r+0x13be>
 800e536:	ac2f      	add	r4, sp, #188	; 0xbc
 800e538:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e53a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e53c:	6023      	str	r3, [r4, #0]
 800e53e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e540:	6063      	str	r3, [r4, #4]
 800e542:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e544:	3408      	adds	r4, #8
 800e546:	189b      	adds	r3, r3, r2
 800e548:	932e      	str	r3, [sp, #184]	; 0xb8
 800e54a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e54c:	3301      	adds	r3, #1
 800e54e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e550:	2b07      	cmp	r3, #7
 800e552:	dd07      	ble.n	800e564 <_svfprintf_r+0x12c8>
 800e554:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e556:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e558:	aa2c      	add	r2, sp, #176	; 0xb0
 800e55a:	f002 ff2f 	bl	80113bc <__ssprint_r>
 800e55e:	2800      	cmp	r0, #0
 800e560:	d17b      	bne.n	800e65a <_svfprintf_r+0x13be>
 800e562:	ac2f      	add	r4, sp, #188	; 0xbc
 800e564:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e566:	2200      	movs	r2, #0
 800e568:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e56a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e56c:	9309      	str	r3, [sp, #36]	; 0x24
 800e56e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e570:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800e572:	1e5d      	subs	r5, r3, #1
 800e574:	2300      	movs	r3, #0
 800e576:	f7f1 ff67 	bl	8000448 <__aeabi_dcmpeq>
 800e57a:	2800      	cmp	r0, #0
 800e57c:	d126      	bne.n	800e5cc <_svfprintf_r+0x1330>
 800e57e:	9b08      	ldr	r3, [sp, #32]
 800e580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e582:	3301      	adds	r3, #1
 800e584:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e586:	6023      	str	r3, [r4, #0]
 800e588:	1e7b      	subs	r3, r7, #1
 800e58a:	3201      	adds	r2, #1
 800e58c:	185b      	adds	r3, r3, r1
 800e58e:	6065      	str	r5, [r4, #4]
 800e590:	932e      	str	r3, [sp, #184]	; 0xb8
 800e592:	922d      	str	r2, [sp, #180]	; 0xb4
 800e594:	3408      	adds	r4, #8
 800e596:	2a07      	cmp	r2, #7
 800e598:	dd07      	ble.n	800e5aa <_svfprintf_r+0x130e>
 800e59a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e59c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e59e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5a0:	f002 ff0c 	bl	80113bc <__ssprint_r>
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	d158      	bne.n	800e65a <_svfprintf_r+0x13be>
 800e5a8:	ac2f      	add	r4, sp, #188	; 0xbc
 800e5aa:	ab28      	add	r3, sp, #160	; 0xa0
 800e5ac:	6023      	str	r3, [r4, #0]
 800e5ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e5b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e5b2:	6063      	str	r3, [r4, #4]
 800e5b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e5b6:	189b      	adds	r3, r3, r2
 800e5b8:	932e      	str	r3, [sp, #184]	; 0xb8
 800e5ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e5bc:	3301      	adds	r3, #1
 800e5be:	932d      	str	r3, [sp, #180]	; 0xb4
 800e5c0:	2b07      	cmp	r3, #7
 800e5c2:	dd00      	ble.n	800e5c6 <_svfprintf_r+0x132a>
 800e5c4:	e638      	b.n	800e238 <_svfprintf_r+0xf9c>
 800e5c6:	3408      	adds	r4, #8
 800e5c8:	0027      	movs	r7, r4
 800e5ca:	e595      	b.n	800e0f8 <_svfprintf_r+0xe5c>
 800e5cc:	2710      	movs	r7, #16
 800e5ce:	2d00      	cmp	r5, #0
 800e5d0:	ddeb      	ble.n	800e5aa <_svfprintf_r+0x130e>
 800e5d2:	0021      	movs	r1, r4
 800e5d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e5d6:	4850      	ldr	r0, [pc, #320]	; (800e718 <_svfprintf_r+0x147c>)
 800e5d8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e5da:	3301      	adds	r3, #1
 800e5dc:	3108      	adds	r1, #8
 800e5de:	6020      	str	r0, [r4, #0]
 800e5e0:	2d10      	cmp	r5, #16
 800e5e2:	dc07      	bgt.n	800e5f4 <_svfprintf_r+0x1358>
 800e5e4:	6065      	str	r5, [r4, #4]
 800e5e6:	000c      	movs	r4, r1
 800e5e8:	18ad      	adds	r5, r5, r2
 800e5ea:	952e      	str	r5, [sp, #184]	; 0xb8
 800e5ec:	932d      	str	r3, [sp, #180]	; 0xb4
 800e5ee:	2b07      	cmp	r3, #7
 800e5f0:	dddb      	ble.n	800e5aa <_svfprintf_r+0x130e>
 800e5f2:	e7d2      	b.n	800e59a <_svfprintf_r+0x12fe>
 800e5f4:	3210      	adds	r2, #16
 800e5f6:	6067      	str	r7, [r4, #4]
 800e5f8:	922e      	str	r2, [sp, #184]	; 0xb8
 800e5fa:	932d      	str	r3, [sp, #180]	; 0xb4
 800e5fc:	2b07      	cmp	r3, #7
 800e5fe:	dd07      	ble.n	800e610 <_svfprintf_r+0x1374>
 800e600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e602:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e604:	aa2c      	add	r2, sp, #176	; 0xb0
 800e606:	f002 fed9 	bl	80113bc <__ssprint_r>
 800e60a:	2800      	cmp	r0, #0
 800e60c:	d125      	bne.n	800e65a <_svfprintf_r+0x13be>
 800e60e:	a92f      	add	r1, sp, #188	; 0xbc
 800e610:	000c      	movs	r4, r1
 800e612:	3d10      	subs	r5, #16
 800e614:	e7dd      	b.n	800e5d2 <_svfprintf_r+0x1336>
 800e616:	9808      	ldr	r0, [sp, #32]
 800e618:	912e      	str	r1, [sp, #184]	; 0xb8
 800e61a:	c705      	stmia	r7!, {r0, r2}
 800e61c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e61e:	e7e6      	b.n	800e5ee <_svfprintf_r+0x1352>
 800e620:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e622:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e624:	2510      	movs	r5, #16
 800e626:	1a9c      	subs	r4, r3, r2
 800e628:	2c00      	cmp	r4, #0
 800e62a:	dc00      	bgt.n	800e62e <_svfprintf_r+0x1392>
 800e62c:	e567      	b.n	800e0fe <_svfprintf_r+0xe62>
 800e62e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e630:	493a      	ldr	r1, [pc, #232]	; (800e71c <_svfprintf_r+0x1480>)
 800e632:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e634:	3301      	adds	r3, #1
 800e636:	6039      	str	r1, [r7, #0]
 800e638:	2c10      	cmp	r4, #16
 800e63a:	dc19      	bgt.n	800e670 <_svfprintf_r+0x13d4>
 800e63c:	607c      	str	r4, [r7, #4]
 800e63e:	18a4      	adds	r4, r4, r2
 800e640:	942e      	str	r4, [sp, #184]	; 0xb8
 800e642:	932d      	str	r3, [sp, #180]	; 0xb4
 800e644:	2b07      	cmp	r3, #7
 800e646:	dc00      	bgt.n	800e64a <_svfprintf_r+0x13ae>
 800e648:	e559      	b.n	800e0fe <_svfprintf_r+0xe62>
 800e64a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e64c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e64e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e650:	f002 feb4 	bl	80113bc <__ssprint_r>
 800e654:	2800      	cmp	r0, #0
 800e656:	d100      	bne.n	800e65a <_svfprintf_r+0x13be>
 800e658:	e551      	b.n	800e0fe <_svfprintf_r+0xe62>
 800e65a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d101      	bne.n	800e664 <_svfprintf_r+0x13c8>
 800e660:	f7ff f845 	bl	800d6ee <_svfprintf_r+0x452>
 800e664:	0019      	movs	r1, r3
 800e666:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e668:	f7fd fd80 	bl	800c16c <_free_r>
 800e66c:	f7ff f83f 	bl	800d6ee <_svfprintf_r+0x452>
 800e670:	3210      	adds	r2, #16
 800e672:	607d      	str	r5, [r7, #4]
 800e674:	922e      	str	r2, [sp, #184]	; 0xb8
 800e676:	932d      	str	r3, [sp, #180]	; 0xb4
 800e678:	3708      	adds	r7, #8
 800e67a:	2b07      	cmp	r3, #7
 800e67c:	dd07      	ble.n	800e68e <_svfprintf_r+0x13f2>
 800e67e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e680:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e682:	aa2c      	add	r2, sp, #176	; 0xb0
 800e684:	f002 fe9a 	bl	80113bc <__ssprint_r>
 800e688:	2800      	cmp	r0, #0
 800e68a:	d1e6      	bne.n	800e65a <_svfprintf_r+0x13be>
 800e68c:	af2f      	add	r7, sp, #188	; 0xbc
 800e68e:	3c10      	subs	r4, #16
 800e690:	e7cd      	b.n	800e62e <_svfprintf_r+0x1392>
 800e692:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e694:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e696:	f7fd fd69 	bl	800c16c <_free_r>
 800e69a:	e549      	b.n	800e130 <_svfprintf_r+0xe94>
 800e69c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d101      	bne.n	800e6a6 <_svfprintf_r+0x140a>
 800e6a2:	f7ff f824 	bl	800d6ee <_svfprintf_r+0x452>
 800e6a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6aa:	aa2c      	add	r2, sp, #176	; 0xb0
 800e6ac:	f002 fe86 	bl	80113bc <__ssprint_r>
 800e6b0:	f7ff f81d 	bl	800d6ee <_svfprintf_r+0x452>
 800e6b4:	0034      	movs	r4, r6
 800e6b6:	2a00      	cmp	r2, #0
 800e6b8:	d101      	bne.n	800e6be <_svfprintf_r+0x1422>
 800e6ba:	f7fe ff8c 	bl	800d5d6 <_svfprintf_r+0x33a>
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d101      	bne.n	800e6c6 <_svfprintf_r+0x142a>
 800e6c2:	f7ff fc01 	bl	800dec8 <_svfprintf_r+0xc2c>
 800e6c6:	2b02      	cmp	r3, #2
 800e6c8:	d100      	bne.n	800e6cc <_svfprintf_r+0x1430>
 800e6ca:	e459      	b.n	800df80 <_svfprintf_r+0xce4>
 800e6cc:	2507      	movs	r5, #7
 800e6ce:	ab58      	add	r3, sp, #352	; 0x160
 800e6d0:	9308      	str	r3, [sp, #32]
 800e6d2:	9a08      	ldr	r2, [sp, #32]
 800e6d4:	0013      	movs	r3, r2
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	9308      	str	r3, [sp, #32]
 800e6da:	9b06      	ldr	r3, [sp, #24]
 800e6dc:	9908      	ldr	r1, [sp, #32]
 800e6de:	402b      	ands	r3, r5
 800e6e0:	3330      	adds	r3, #48	; 0x30
 800e6e2:	700b      	strb	r3, [r1, #0]
 800e6e4:	9907      	ldr	r1, [sp, #28]
 800e6e6:	074e      	lsls	r6, r1, #29
 800e6e8:	9906      	ldr	r1, [sp, #24]
 800e6ea:	08c8      	lsrs	r0, r1, #3
 800e6ec:	9907      	ldr	r1, [sp, #28]
 800e6ee:	4306      	orrs	r6, r0
 800e6f0:	08c9      	lsrs	r1, r1, #3
 800e6f2:	9107      	str	r1, [sp, #28]
 800e6f4:	0031      	movs	r1, r6
 800e6f6:	9807      	ldr	r0, [sp, #28]
 800e6f8:	9606      	str	r6, [sp, #24]
 800e6fa:	4301      	orrs	r1, r0
 800e6fc:	d1e9      	bne.n	800e6d2 <_svfprintf_r+0x1436>
 800e6fe:	07e1      	lsls	r1, r4, #31
 800e700:	d400      	bmi.n	800e704 <_svfprintf_r+0x1468>
 800e702:	e42a      	b.n	800df5a <_svfprintf_r+0xcbe>
 800e704:	2b30      	cmp	r3, #48	; 0x30
 800e706:	d100      	bne.n	800e70a <_svfprintf_r+0x146e>
 800e708:	e427      	b.n	800df5a <_svfprintf_r+0xcbe>
 800e70a:	2130      	movs	r1, #48	; 0x30
 800e70c:	9b08      	ldr	r3, [sp, #32]
 800e70e:	3b01      	subs	r3, #1
 800e710:	7019      	strb	r1, [r3, #0]
 800e712:	1e93      	subs	r3, r2, #2
 800e714:	9308      	str	r3, [sp, #32]
 800e716:	e420      	b.n	800df5a <_svfprintf_r+0xcbe>
 800e718:	08014820 	.word	0x08014820
 800e71c:	08014810 	.word	0x08014810

0800e720 <__ssvfscanf_r>:
 800e720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e722:	4ca7      	ldr	r4, [pc, #668]	; (800e9c0 <__ssvfscanf_r+0x2a0>)
 800e724:	44a5      	add	sp, r4
 800e726:	af02      	add	r7, sp, #8
 800e728:	633b      	str	r3, [r7, #48]	; 0x30
 800e72a:	000b      	movs	r3, r1
 800e72c:	6378      	str	r0, [r7, #52]	; 0x34
 800e72e:	6479      	str	r1, [r7, #68]	; 0x44
 800e730:	61ba      	str	r2, [r7, #24]
 800e732:	220c      	movs	r2, #12
 800e734:	5e9a      	ldrsh	r2, [r3, r2]
 800e736:	2380      	movs	r3, #128	; 0x80
 800e738:	019b      	lsls	r3, r3, #6
 800e73a:	421a      	tst	r2, r3
 800e73c:	d105      	bne.n	800e74a <__ssvfscanf_r+0x2a>
 800e73e:	4313      	orrs	r3, r2
 800e740:	818b      	strh	r3, [r1, #12]
 800e742:	4aa0      	ldr	r2, [pc, #640]	; (800e9c4 <__ssvfscanf_r+0x2a4>)
 800e744:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e746:	4013      	ands	r3, r2
 800e748:	664b      	str	r3, [r1, #100]	; 0x64
 800e74a:	2300      	movs	r3, #0
 800e74c:	617b      	str	r3, [r7, #20]
 800e74e:	643b      	str	r3, [r7, #64]	; 0x40
 800e750:	62bb      	str	r3, [r7, #40]	; 0x28
 800e752:	627b      	str	r3, [r7, #36]	; 0x24
 800e754:	63bb      	str	r3, [r7, #56]	; 0x38
 800e756:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	69ba      	ldr	r2, [r7, #24]
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	3201      	adds	r2, #1
 800e760:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e762:	61ba      	str	r2, [r7, #24]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d100      	bne.n	800e76a <__ssvfscanf_r+0x4a>
 800e768:	e0d7      	b.n	800e91a <__ssvfscanf_r+0x1fa>
 800e76a:	2608      	movs	r6, #8
 800e76c:	2108      	movs	r1, #8
 800e76e:	4a96      	ldr	r2, [pc, #600]	; (800e9c8 <__ssvfscanf_r+0x2a8>)
 800e770:	5cd2      	ldrb	r2, [r2, r3]
 800e772:	4016      	ands	r6, r2
 800e774:	420a      	tst	r2, r1
 800e776:	d01d      	beq.n	800e7b4 <__ssvfscanf_r+0x94>
 800e778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	dd12      	ble.n	800e7a6 <__ssvfscanf_r+0x86>
 800e780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e782:	4991      	ldr	r1, [pc, #580]	; (800e9c8 <__ssvfscanf_r+0x2a8>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	781a      	ldrb	r2, [r3, #0]
 800e788:	5c8a      	ldrb	r2, [r1, r2]
 800e78a:	2108      	movs	r1, #8
 800e78c:	420a      	tst	r2, r1
 800e78e:	d0e3      	beq.n	800e758 <__ssvfscanf_r+0x38>
 800e790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e792:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e794:	3201      	adds	r2, #1
 800e796:	63ba      	str	r2, [r7, #56]	; 0x38
 800e798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e79a:	3301      	adds	r3, #1
 800e79c:	6852      	ldr	r2, [r2, #4]
 800e79e:	600b      	str	r3, [r1, #0]
 800e7a0:	3a01      	subs	r2, #1
 800e7a2:	604a      	str	r2, [r1, #4]
 800e7a4:	e7e8      	b.n	800e778 <__ssvfscanf_r+0x58>
 800e7a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e7a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e7aa:	f002 fec7 	bl	801153c <__ssrefill_r>
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	d0e6      	beq.n	800e780 <__ssvfscanf_r+0x60>
 800e7b2:	e7d1      	b.n	800e758 <__ssvfscanf_r+0x38>
 800e7b4:	2b25      	cmp	r3, #37	; 0x25
 800e7b6:	d165      	bne.n	800e884 <__ssvfscanf_r+0x164>
 800e7b8:	250a      	movs	r5, #10
 800e7ba:	2480      	movs	r4, #128	; 0x80
 800e7bc:	69ba      	ldr	r2, [r7, #24]
 800e7be:	63fe      	str	r6, [r7, #60]	; 0x3c
 800e7c0:	3b16      	subs	r3, #22
 800e7c2:	69b9      	ldr	r1, [r7, #24]
 800e7c4:	3101      	adds	r1, #1
 800e7c6:	61b9      	str	r1, [r7, #24]
 800e7c8:	7811      	ldrb	r1, [r2, #0]
 800e7ca:	0008      	movs	r0, r1
 800e7cc:	3825      	subs	r0, #37	; 0x25
 800e7ce:	2855      	cmp	r0, #85	; 0x55
 800e7d0:	d900      	bls.n	800e7d4 <__ssvfscanf_r+0xb4>
 800e7d2:	e170      	b.n	800eab6 <__ssvfscanf_r+0x396>
 800e7d4:	f7f1 fca8 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e7d8:	016f0056 	.word	0x016f0056
 800e7dc:	016f016f 	.word	0x016f016f
 800e7e0:	0081016f 	.word	0x0081016f
 800e7e4:	016f016f 	.word	0x016f016f
 800e7e8:	016f016f 	.word	0x016f016f
 800e7ec:	00b8016f 	.word	0x00b8016f
 800e7f0:	00b800b8 	.word	0x00b800b8
 800e7f4:	00b800b8 	.word	0x00b800b8
 800e7f8:	00b800b8 	.word	0x00b800b8
 800e7fc:	00b800b8 	.word	0x00b800b8
 800e800:	016f00b8 	.word	0x016f00b8
 800e804:	016f016f 	.word	0x016f016f
 800e808:	016f016f 	.word	0x016f016f
 800e80c:	016f016f 	.word	0x016f016f
 800e810:	016f00d8 	.word	0x016f00d8
 800e814:	00c1010a 	.word	0x00c1010a
 800e818:	00d800d8 	.word	0x00d800d8
 800e81c:	016f00d8 	.word	0x016f00d8
 800e820:	016f016f 	.word	0x016f016f
 800e824:	009f016f 	.word	0x009f016f
 800e828:	016f016f 	.word	0x016f016f
 800e82c:	016f00c9 	.word	0x016f00c9
 800e830:	016f016f 	.word	0x016f016f
 800e834:	016f00f0 	.word	0x016f00f0
 800e838:	016f016f 	.word	0x016f016f
 800e83c:	00d1016f 	.word	0x00d1016f
 800e840:	016f016f 	.word	0x016f016f
 800e844:	016f00fe 	.word	0x016f00fe
 800e848:	016f016f 	.word	0x016f016f
 800e84c:	016f016f 	.word	0x016f016f
 800e850:	016f00d8 	.word	0x016f00d8
 800e854:	00c3010c 	.word	0x00c3010c
 800e858:	00d800d8 	.word	0x00d800d8
 800e85c:	009400d8 	.word	0x009400d8
 800e860:	009f012f 	.word	0x009f012f
 800e864:	0088016f 	.word	0x0088016f
 800e868:	011200a9 	.word	0x011200a9
 800e86c:	011000cb 	.word	0x011000cb
 800e870:	016f016f 	.word	0x016f016f
 800e874:	00a600f2 	.word	0x00a600f2
 800e878:	016f00cf 	.word	0x016f00cf
 800e87c:	00d1016f 	.word	0x00d1016f
 800e880:	00a6016f 	.word	0x00a6016f
 800e884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	dd12      	ble.n	800e8b2 <__ssvfscanf_r+0x192>
 800e88c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e88e:	69ba      	ldr	r2, [r7, #24]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	3a01      	subs	r2, #1
 800e894:	7819      	ldrb	r1, [r3, #0]
 800e896:	7812      	ldrb	r2, [r2, #0]
 800e898:	4291      	cmp	r1, r2
 800e89a:	d13e      	bne.n	800e91a <__ssvfscanf_r+0x1fa>
 800e89c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e89e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e8a0:	6852      	ldr	r2, [r2, #4]
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	600b      	str	r3, [r1, #0]
 800e8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a8:	3a01      	subs	r2, #1
 800e8aa:	604a      	str	r2, [r1, #4]
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8b0:	e752      	b.n	800e758 <__ssvfscanf_r+0x38>
 800e8b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e8b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e8b6:	f002 fe41 	bl	801153c <__ssrefill_r>
 800e8ba:	2800      	cmp	r0, #0
 800e8bc:	d0e6      	beq.n	800e88c <__ssvfscanf_r+0x16c>
 800e8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d003      	beq.n	800e8cc <__ssvfscanf_r+0x1ac>
 800e8c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8c6:	899b      	ldrh	r3, [r3, #12]
 800e8c8:	065b      	lsls	r3, r3, #25
 800e8ca:	d526      	bpl.n	800e91a <__ssvfscanf_r+0x1fa>
 800e8cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d000      	beq.n	800e8d4 <__ssvfscanf_r+0x1b4>
 800e8d2:	e0f6      	b.n	800eac2 <__ssvfscanf_r+0x3a2>
 800e8d4:	3b01      	subs	r3, #1
 800e8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8d8:	e104      	b.n	800eae4 <__ssvfscanf_r+0x3c4>
 800e8da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8dc:	4332      	orrs	r2, r6
 800e8de:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e8e0:	d11b      	bne.n	800e91a <__ssvfscanf_r+0x1fa>
 800e8e2:	2610      	movs	r6, #16
 800e8e4:	69ba      	ldr	r2, [r7, #24]
 800e8e6:	e76c      	b.n	800e7c2 <__ssvfscanf_r+0xa2>
 800e8e8:	421e      	tst	r6, r3
 800e8ea:	d116      	bne.n	800e91a <__ssvfscanf_r+0x1fa>
 800e8ec:	7851      	ldrb	r1, [r2, #1]
 800e8ee:	296c      	cmp	r1, #108	; 0x6c
 800e8f0:	d103      	bne.n	800e8fa <__ssvfscanf_r+0x1da>
 800e8f2:	3202      	adds	r2, #2
 800e8f4:	61ba      	str	r2, [r7, #24]
 800e8f6:	2202      	movs	r2, #2
 800e8f8:	e000      	b.n	800e8fc <__ssvfscanf_r+0x1dc>
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	4316      	orrs	r6, r2
 800e8fe:	e7f1      	b.n	800e8e4 <__ssvfscanf_r+0x1c4>
 800e900:	421e      	tst	r6, r3
 800e902:	d10a      	bne.n	800e91a <__ssvfscanf_r+0x1fa>
 800e904:	7851      	ldrb	r1, [r2, #1]
 800e906:	2968      	cmp	r1, #104	; 0x68
 800e908:	d103      	bne.n	800e912 <__ssvfscanf_r+0x1f2>
 800e90a:	3202      	adds	r2, #2
 800e90c:	61ba      	str	r2, [r7, #24]
 800e90e:	2208      	movs	r2, #8
 800e910:	e7f4      	b.n	800e8fc <__ssvfscanf_r+0x1dc>
 800e912:	2204      	movs	r2, #4
 800e914:	e7f2      	b.n	800e8fc <__ssvfscanf_r+0x1dc>
 800e916:	421e      	tst	r6, r3
 800e918:	d0ed      	beq.n	800e8f6 <__ssvfscanf_r+0x1d6>
 800e91a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d000      	beq.n	800e922 <__ssvfscanf_r+0x202>
 800e920:	e0da      	b.n	800ead8 <__ssvfscanf_r+0x3b8>
 800e922:	e0df      	b.n	800eae4 <__ssvfscanf_r+0x3c4>
 800e924:	421e      	tst	r6, r3
 800e926:	d0dd      	beq.n	800e8e4 <__ssvfscanf_r+0x1c4>
 800e928:	e7f7      	b.n	800e91a <__ssvfscanf_r+0x1fa>
 800e92a:	228f      	movs	r2, #143	; 0x8f
 800e92c:	218f      	movs	r1, #143	; 0x8f
 800e92e:	4032      	ands	r2, r6
 800e930:	420e      	tst	r6, r1
 800e932:	d1f2      	bne.n	800e91a <__ssvfscanf_r+0x1fa>
 800e934:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e936:	2900      	cmp	r1, #0
 800e938:	d104      	bne.n	800e944 <__ssvfscanf_r+0x224>
 800e93a:	b082      	sub	sp, #8
 800e93c:	a902      	add	r1, sp, #8
 800e93e:	6439      	str	r1, [r7, #64]	; 0x40
 800e940:	600a      	str	r2, [r1, #0]
 800e942:	604a      	str	r2, [r1, #4]
 800e944:	4326      	orrs	r6, r4
 800e946:	e7cd      	b.n	800e8e4 <__ssvfscanf_r+0x1c4>
 800e948:	228f      	movs	r2, #143	; 0x8f
 800e94a:	4216      	tst	r6, r2
 800e94c:	d1e5      	bne.n	800e91a <__ssvfscanf_r+0x1fa>
 800e94e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e950:	436a      	muls	r2, r5
 800e952:	3a30      	subs	r2, #48	; 0x30
 800e954:	188a      	adds	r2, r1, r2
 800e956:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e958:	e7c4      	b.n	800e8e4 <__ssvfscanf_r+0x1c4>
 800e95a:	2301      	movs	r3, #1
 800e95c:	431e      	orrs	r6, r3
 800e95e:	4b1b      	ldr	r3, [pc, #108]	; (800e9cc <__ssvfscanf_r+0x2ac>)
 800e960:	617b      	str	r3, [r7, #20]
 800e962:	230a      	movs	r3, #10
 800e964:	2403      	movs	r4, #3
 800e966:	627b      	str	r3, [r7, #36]	; 0x24
 800e968:	e00f      	b.n	800e98a <__ssvfscanf_r+0x26a>
 800e96a:	2301      	movs	r3, #1
 800e96c:	431e      	orrs	r6, r3
 800e96e:	4b18      	ldr	r3, [pc, #96]	; (800e9d0 <__ssvfscanf_r+0x2b0>)
 800e970:	617b      	str	r3, [r7, #20]
 800e972:	2308      	movs	r3, #8
 800e974:	e7f6      	b.n	800e964 <__ssvfscanf_r+0x244>
 800e976:	4b16      	ldr	r3, [pc, #88]	; (800e9d0 <__ssvfscanf_r+0x2b0>)
 800e978:	e7f2      	b.n	800e960 <__ssvfscanf_r+0x240>
 800e97a:	2380      	movs	r3, #128	; 0x80
 800e97c:	009b      	lsls	r3, r3, #2
 800e97e:	431e      	orrs	r6, r3
 800e980:	4b13      	ldr	r3, [pc, #76]	; (800e9d0 <__ssvfscanf_r+0x2b0>)
 800e982:	617b      	str	r3, [r7, #20]
 800e984:	2310      	movs	r3, #16
 800e986:	e7ed      	b.n	800e964 <__ssvfscanf_r+0x244>
 800e988:	2404      	movs	r4, #4
 800e98a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	dd55      	ble.n	800ea3e <__ssvfscanf_r+0x31e>
 800e992:	0673      	lsls	r3, r6, #25
 800e994:	d407      	bmi.n	800e9a6 <__ssvfscanf_r+0x286>
 800e996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e998:	490b      	ldr	r1, [pc, #44]	; (800e9c8 <__ssvfscanf_r+0x2a8>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	781a      	ldrb	r2, [r3, #0]
 800e99e:	5c8a      	ldrb	r2, [r1, r2]
 800e9a0:	2108      	movs	r1, #8
 800e9a2:	420a      	tst	r2, r1
 800e9a4:	d152      	bne.n	800ea4c <__ssvfscanf_r+0x32c>
 800e9a6:	1e60      	subs	r0, r4, #1
 800e9a8:	2803      	cmp	r0, #3
 800e9aa:	d863      	bhi.n	800ea74 <__ssvfscanf_r+0x354>
 800e9ac:	f7f1 fbbc 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e9b0:	03bd01da 	.word	0x03bd01da
 800e9b4:	068a0579 	.word	0x068a0579
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	431e      	orrs	r6, r3
 800e9bc:	2402      	movs	r4, #2
 800e9be:	e7e4      	b.n	800e98a <__ssvfscanf_r+0x26a>
 800e9c0:	fffffd34 	.word	0xfffffd34
 800e9c4:	ffffdfff 	.word	0xffffdfff
 800e9c8:	08014509 	.word	0x08014509
 800e9cc:	0800b9bd 	.word	0x0800b9bd
 800e9d0:	0800bae1 	.word	0x0800bae1
 800e9d4:	2248      	movs	r2, #72	; 0x48
 800e9d6:	2318      	movs	r3, #24
 800e9d8:	189b      	adds	r3, r3, r2
 800e9da:	19d8      	adds	r0, r3, r7
 800e9dc:	69b9      	ldr	r1, [r7, #24]
 800e9de:	f001 f9d7 	bl	800fd90 <__sccl>
 800e9e2:	2340      	movs	r3, #64	; 0x40
 800e9e4:	2401      	movs	r4, #1
 800e9e6:	61b8      	str	r0, [r7, #24]
 800e9e8:	431e      	orrs	r6, r3
 800e9ea:	e7ce      	b.n	800e98a <__ssvfscanf_r+0x26a>
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	431e      	orrs	r6, r3
 800e9f0:	2340      	movs	r3, #64	; 0x40
 800e9f2:	2400      	movs	r4, #0
 800e9f4:	431e      	orrs	r6, r3
 800e9f6:	e7c8      	b.n	800e98a <__ssvfscanf_r+0x26a>
 800e9f8:	2388      	movs	r3, #136	; 0x88
 800e9fa:	e7bf      	b.n	800e97c <__ssvfscanf_r+0x25c>
 800e9fc:	06f3      	lsls	r3, r6, #27
 800e9fe:	d500      	bpl.n	800ea02 <__ssvfscanf_r+0x2e2>
 800ea00:	e6aa      	b.n	800e758 <__ssvfscanf_r+0x38>
 800ea02:	2108      	movs	r1, #8
 800ea04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea06:	cb04      	ldmia	r3!, {r2}
 800ea08:	420e      	tst	r6, r1
 800ea0a:	d003      	beq.n	800ea14 <__ssvfscanf_r+0x2f4>
 800ea0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea0e:	7011      	strb	r1, [r2, #0]
 800ea10:	633b      	str	r3, [r7, #48]	; 0x30
 800ea12:	e6a1      	b.n	800e758 <__ssvfscanf_r+0x38>
 800ea14:	0771      	lsls	r1, r6, #29
 800ea16:	d502      	bpl.n	800ea1e <__ssvfscanf_r+0x2fe>
 800ea18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea1a:	8011      	strh	r1, [r2, #0]
 800ea1c:	e7f8      	b.n	800ea10 <__ssvfscanf_r+0x2f0>
 800ea1e:	07f1      	lsls	r1, r6, #31
 800ea20:	d502      	bpl.n	800ea28 <__ssvfscanf_r+0x308>
 800ea22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea24:	6011      	str	r1, [r2, #0]
 800ea26:	e7f3      	b.n	800ea10 <__ssvfscanf_r+0x2f0>
 800ea28:	07b6      	lsls	r6, r6, #30
 800ea2a:	d5fa      	bpl.n	800ea22 <__ssvfscanf_r+0x302>
 800ea2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea2e:	6011      	str	r1, [r2, #0]
 800ea30:	17c9      	asrs	r1, r1, #31
 800ea32:	6051      	str	r1, [r2, #4]
 800ea34:	e7ec      	b.n	800ea10 <__ssvfscanf_r+0x2f0>
 800ea36:	4ba2      	ldr	r3, [pc, #648]	; (800ecc0 <__ssvfscanf_r+0x5a0>)
 800ea38:	617b      	str	r3, [r7, #20]
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	e792      	b.n	800e964 <__ssvfscanf_r+0x244>
 800ea3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ea42:	f002 fd7b 	bl	801153c <__ssrefill_r>
 800ea46:	2800      	cmp	r0, #0
 800ea48:	d0a3      	beq.n	800e992 <__ssvfscanf_r+0x272>
 800ea4a:	e738      	b.n	800e8be <__ssvfscanf_r+0x19e>
 800ea4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea50:	3201      	adds	r2, #1
 800ea52:	63ba      	str	r2, [r7, #56]	; 0x38
 800ea54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea56:	6852      	ldr	r2, [r2, #4]
 800ea58:	3a01      	subs	r2, #1
 800ea5a:	604a      	str	r2, [r1, #4]
 800ea5c:	2a00      	cmp	r2, #0
 800ea5e:	dd02      	ble.n	800ea66 <__ssvfscanf_r+0x346>
 800ea60:	3301      	adds	r3, #1
 800ea62:	600b      	str	r3, [r1, #0]
 800ea64:	e797      	b.n	800e996 <__ssvfscanf_r+0x276>
 800ea66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ea6a:	f002 fd67 	bl	801153c <__ssrefill_r>
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	d091      	beq.n	800e996 <__ssvfscanf_r+0x276>
 800ea72:	e724      	b.n	800e8be <__ssvfscanf_r+0x19e>
 800ea74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea76:	2301      	movs	r3, #1
 800ea78:	2a00      	cmp	r2, #0
 800ea7a:	d100      	bne.n	800ea7e <__ssvfscanf_r+0x35e>
 800ea7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea7e:	2210      	movs	r2, #16
 800ea80:	0034      	movs	r4, r6
 800ea82:	4032      	ands	r2, r6
 800ea84:	623a      	str	r2, [r7, #32]
 800ea86:	401c      	ands	r4, r3
 800ea88:	421e      	tst	r6, r3
 800ea8a:	d100      	bne.n	800ea8e <__ssvfscanf_r+0x36e>
 800ea8c:	e0f3      	b.n	800ec76 <__ssvfscanf_r+0x556>
 800ea8e:	2a00      	cmp	r2, #0
 800ea90:	d000      	beq.n	800ea94 <__ssvfscanf_r+0x374>
 800ea92:	e0b6      	b.n	800ec02 <__ssvfscanf_r+0x4e2>
 800ea94:	2080      	movs	r0, #128	; 0x80
 800ea96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea98:	cb10      	ldmia	r3!, {r4}
 800ea9a:	613b      	str	r3, [r7, #16]
 800ea9c:	4206      	tst	r6, r0
 800ea9e:	d100      	bne.n	800eaa2 <__ssvfscanf_r+0x382>
 800eaa0:	e0b7      	b.n	800ec12 <__ssvfscanf_r+0x4f2>
 800eaa2:	2c00      	cmp	r4, #0
 800eaa4:	d007      	beq.n	800eab6 <__ssvfscanf_r+0x396>
 800eaa6:	f7fb fe93 	bl	800a7d0 <malloc>
 800eaaa:	6338      	str	r0, [r7, #48]	; 0x30
 800eaac:	2800      	cmp	r0, #0
 800eaae:	d11f      	bne.n	800eaf0 <__ssvfscanf_r+0x3d0>
 800eab0:	2301      	movs	r3, #1
 800eab2:	425b      	negs	r3, r3
 800eab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d013      	beq.n	800eae4 <__ssvfscanf_r+0x3c4>
 800eabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eabe:	3301      	adds	r3, #1
 800eac0:	d10a      	bne.n	800ead8 <__ssvfscanf_r+0x3b8>
 800eac2:	2400      	movs	r4, #0
 800eac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eac6:	681d      	ldr	r5, [r3, #0]
 800eac8:	88db      	ldrh	r3, [r3, #6]
 800eaca:	42a3      	cmp	r3, r4
 800eacc:	dd01      	ble.n	800ead2 <__ssvfscanf_r+0x3b2>
 800eace:	f001 f82a 	bl	800fb26 <__ssvfscanf_r+0x1406>
 800ead2:	2301      	movs	r3, #1
 800ead4:	425b      	negs	r3, r3
 800ead6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ead8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eada:	6818      	ldr	r0, [r3, #0]
 800eadc:	2800      	cmp	r0, #0
 800eade:	d001      	beq.n	800eae4 <__ssvfscanf_r+0x3c4>
 800eae0:	f7fb fe80 	bl	800a7e4 <free>
 800eae4:	46bd      	mov	sp, r7
 800eae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eae8:	23b1      	movs	r3, #177	; 0xb1
 800eaea:	009b      	lsls	r3, r3, #2
 800eaec:	449d      	add	sp, r3
 800eaee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf2:	6023      	str	r3, [r4, #0]
 800eaf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaf6:	88de      	ldrh	r6, [r3, #6]
 800eaf8:	889d      	ldrh	r5, [r3, #4]
 800eafa:	42ae      	cmp	r6, r5
 800eafc:	d30e      	bcc.n	800eb1c <__ssvfscanf_r+0x3fc>
 800eafe:	4b71      	ldr	r3, [pc, #452]	; (800ecc4 <__ssvfscanf_r+0x5a4>)
 800eb00:	429d      	cmp	r5, r3
 800eb02:	d8d5      	bhi.n	800eab0 <__ssvfscanf_r+0x390>
 800eb04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb06:	3508      	adds	r5, #8
 800eb08:	b2ad      	uxth	r5, r5
 800eb0a:	6818      	ldr	r0, [r3, #0]
 800eb0c:	00a9      	lsls	r1, r5, #2
 800eb0e:	f002 f901 	bl	8010d14 <realloc>
 800eb12:	2800      	cmp	r0, #0
 800eb14:	d0cc      	beq.n	800eab0 <__ssvfscanf_r+0x390>
 800eb16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb18:	6018      	str	r0, [r3, #0]
 800eb1a:	809d      	strh	r5, [r3, #4]
 800eb1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb1e:	1c72      	adds	r2, r6, #1
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	00b6      	lsls	r6, r6, #2
 800eb24:	50f4      	str	r4, [r6, r3]
 800eb26:	2320      	movs	r3, #32
 800eb28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb2a:	0026      	movs	r6, r4
 800eb2c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800eb2e:	80ca      	strh	r2, [r1, #6]
 800eb30:	61fb      	str	r3, [r7, #28]
 800eb32:	2500      	movs	r5, #0
 800eb34:	f7fd f9fe 	bl	800bf34 <__locale_mb_cur_max>
 800eb38:	42a8      	cmp	r0, r5
 800eb3a:	d100      	bne.n	800eb3e <__ssvfscanf_r+0x41e>
 800eb3c:	e6bf      	b.n	800e8be <__ssvfscanf_r+0x19e>
 800eb3e:	1c6a      	adds	r2, r5, #1
 800eb40:	60fa      	str	r2, [r7, #12]
 800eb42:	228c      	movs	r2, #140	; 0x8c
 800eb44:	2048      	movs	r0, #72	; 0x48
 800eb46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb48:	0052      	lsls	r2, r2, #1
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	1812      	adds	r2, r2, r0
 800eb4e:	7819      	ldrb	r1, [r3, #0]
 800eb50:	19d2      	adds	r2, r2, r7
 800eb52:	5551      	strb	r1, [r2, r5]
 800eb54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb58:	6852      	ldr	r2, [r2, #4]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	600b      	str	r3, [r1, #0]
 800eb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb60:	3a01      	subs	r2, #1
 800eb62:	604a      	str	r2, [r1, #4]
 800eb64:	2b03      	cmp	r3, #3
 800eb66:	d102      	bne.n	800eb6e <__ssvfscanf_r+0x44e>
 800eb68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb6a:	2b04      	cmp	r3, #4
 800eb6c:	d007      	beq.n	800eb7e <__ssvfscanf_r+0x45e>
 800eb6e:	2048      	movs	r0, #72	; 0x48
 800eb70:	2310      	movs	r3, #16
 800eb72:	181b      	adds	r3, r3, r0
 800eb74:	2208      	movs	r2, #8
 800eb76:	2100      	movs	r1, #0
 800eb78:	19d8      	adds	r0, r3, r7
 800eb7a:	f7fd f94f 	bl	800be1c <memset>
 800eb7e:	2148      	movs	r1, #72	; 0x48
 800eb80:	2310      	movs	r3, #16
 800eb82:	228c      	movs	r2, #140	; 0x8c
 800eb84:	185b      	adds	r3, r3, r1
 800eb86:	0052      	lsls	r2, r2, #1
 800eb88:	19db      	adds	r3, r3, r7
 800eb8a:	1852      	adds	r2, r2, r1
 800eb8c:	9300      	str	r3, [sp, #0]
 800eb8e:	0021      	movs	r1, r4
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb94:	19d2      	adds	r2, r2, r7
 800eb96:	f002 fbd1 	bl	801133c <_mbrtowc_r>
 800eb9a:	0003      	movs	r3, r0
 800eb9c:	62b8      	str	r0, [r7, #40]	; 0x28
 800eb9e:	3301      	adds	r3, #1
 800eba0:	d100      	bne.n	800eba4 <__ssvfscanf_r+0x484>
 800eba2:	e68c      	b.n	800e8be <__ssvfscanf_r+0x19e>
 800eba4:	2800      	cmp	r0, #0
 800eba6:	d139      	bne.n	800ec1c <__ssvfscanf_r+0x4fc>
 800eba8:	6a3b      	ldr	r3, [r7, #32]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d100      	bne.n	800ebb0 <__ssvfscanf_r+0x490>
 800ebae:	6023      	str	r3, [r4, #0]
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb4:	4694      	mov	ip, r2
 800ebb6:	4463      	add	r3, ip
 800ebb8:	63bb      	str	r3, [r7, #56]	; 0x38
 800ebba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebbc:	2b03      	cmp	r3, #3
 800ebbe:	d102      	bne.n	800ebc6 <__ssvfscanf_r+0x4a6>
 800ebc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebc2:	2b04      	cmp	r3, #4
 800ebc4:	d002      	beq.n	800ebcc <__ssvfscanf_r+0x4ac>
 800ebc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebc8:	3b01      	subs	r3, #1
 800ebca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebcc:	6a3b      	ldr	r3, [r7, #32]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d115      	bne.n	800ebfe <__ssvfscanf_r+0x4de>
 800ebd2:	2e00      	cmp	r6, #0
 800ebd4:	d012      	beq.n	800ebfc <__ssvfscanf_r+0x4dc>
 800ebd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd8:	69fa      	ldr	r2, [r7, #28]
 800ebda:	1ae5      	subs	r5, r4, r3
 800ebdc:	10ab      	asrs	r3, r5, #2
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d30c      	bcc.n	800ebfc <__ssvfscanf_r+0x4dc>
 800ebe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebe4:	00d1      	lsls	r1, r2, #3
 800ebe6:	f002 f895 	bl	8010d14 <realloc>
 800ebea:	6338      	str	r0, [r7, #48]	; 0x30
 800ebec:	2800      	cmp	r0, #0
 800ebee:	d100      	bne.n	800ebf2 <__ssvfscanf_r+0x4d2>
 800ebf0:	e75e      	b.n	800eab0 <__ssvfscanf_r+0x390>
 800ebf2:	69fb      	ldr	r3, [r7, #28]
 800ebf4:	1944      	adds	r4, r0, r5
 800ebf6:	005b      	lsls	r3, r3, #1
 800ebf8:	6030      	str	r0, [r6, #0]
 800ebfa:	61fb      	str	r3, [r7, #28]
 800ebfc:	3404      	adds	r4, #4
 800ebfe:	2500      	movs	r5, #0
 800ec00:	e010      	b.n	800ec24 <__ssvfscanf_r+0x504>
 800ec02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec04:	613b      	str	r3, [r7, #16]
 800ec06:	2300      	movs	r3, #0
 800ec08:	001e      	movs	r6, r3
 800ec0a:	001c      	movs	r4, r3
 800ec0c:	61fb      	str	r3, [r7, #28]
 800ec0e:	633b      	str	r3, [r7, #48]	; 0x30
 800ec10:	e78f      	b.n	800eb32 <__ssvfscanf_r+0x412>
 800ec12:	6a3b      	ldr	r3, [r7, #32]
 800ec14:	001e      	movs	r6, r3
 800ec16:	61fb      	str	r3, [r7, #28]
 800ec18:	633b      	str	r3, [r7, #48]	; 0x30
 800ec1a:	e78a      	b.n	800eb32 <__ssvfscanf_r+0x412>
 800ec1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1e:	68fd      	ldr	r5, [r7, #12]
 800ec20:	3302      	adds	r3, #2
 800ec22:	d1c5      	bne.n	800ebb0 <__ssvfscanf_r+0x490>
 800ec24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	dc12      	bgt.n	800ec52 <__ssvfscanf_r+0x532>
 800ec2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec30:	f002 fc84 	bl	801153c <__ssrefill_r>
 800ec34:	2800      	cmp	r0, #0
 800ec36:	d00c      	beq.n	800ec52 <__ssvfscanf_r+0x532>
 800ec38:	2d00      	cmp	r5, #0
 800ec3a:	d000      	beq.n	800ec3e <__ssvfscanf_r+0x51e>
 800ec3c:	e63f      	b.n	800e8be <__ssvfscanf_r+0x19e>
 800ec3e:	2e00      	cmp	r6, #0
 800ec40:	d10c      	bne.n	800ec5c <__ssvfscanf_r+0x53c>
 800ec42:	6a3b      	ldr	r3, [r7, #32]
 800ec44:	425a      	negs	r2, r3
 800ec46:	4153      	adcs	r3, r2
 800ec48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec4a:	18d3      	adds	r3, r2, r3
 800ec4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	e6de      	b.n	800ea10 <__ssvfscanf_r+0x2f0>
 800ec52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d000      	beq.n	800ec5a <__ssvfscanf_r+0x53a>
 800ec58:	e76c      	b.n	800eb34 <__ssvfscanf_r+0x414>
 800ec5a:	e7f0      	b.n	800ec3e <__ssvfscanf_r+0x51e>
 800ec5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5e:	69fa      	ldr	r2, [r7, #28]
 800ec60:	1ae1      	subs	r1, r4, r3
 800ec62:	108b      	asrs	r3, r1, #2
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d9ec      	bls.n	800ec42 <__ssvfscanf_r+0x522>
 800ec68:	6830      	ldr	r0, [r6, #0]
 800ec6a:	f002 f853 	bl	8010d14 <realloc>
 800ec6e:	2800      	cmp	r0, #0
 800ec70:	d0e7      	beq.n	800ec42 <__ssvfscanf_r+0x522>
 800ec72:	6030      	str	r0, [r6, #0]
 800ec74:	e7e5      	b.n	800ec42 <__ssvfscanf_r+0x522>
 800ec76:	6a3b      	ldr	r3, [r7, #32]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d025      	beq.n	800ecc8 <__ssvfscanf_r+0x5a8>
 800ec7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec84:	6812      	ldr	r2, [r2, #0]
 800ec86:	4299      	cmp	r1, r3
 800ec88:	dd11      	ble.n	800ecae <__ssvfscanf_r+0x58e>
 800ec8a:	1ac9      	subs	r1, r1, r3
 800ec8c:	18d2      	adds	r2, r2, r3
 800ec8e:	18e4      	adds	r4, r4, r3
 800ec90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec92:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ec94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec96:	0019      	movs	r1, r3
 800ec98:	601a      	str	r2, [r3, #0]
 800ec9a:	f002 fc4f 	bl	801153c <__ssrefill_r>
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	d0ec      	beq.n	800ec7c <__ssvfscanf_r+0x55c>
 800eca2:	2c00      	cmp	r4, #0
 800eca4:	d100      	bne.n	800eca8 <__ssvfscanf_r+0x588>
 800eca6:	e60a      	b.n	800e8be <__ssvfscanf_r+0x19e>
 800eca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecaa:	191b      	adds	r3, r3, r4
 800ecac:	e5ff      	b.n	800e8ae <__ssvfscanf_r+0x18e>
 800ecae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ecb0:	1a5b      	subs	r3, r3, r1
 800ecb2:	1864      	adds	r4, r4, r1
 800ecb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ecb6:	604b      	str	r3, [r1, #4]
 800ecb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecba:	18d2      	adds	r2, r2, r3
 800ecbc:	600a      	str	r2, [r1, #0]
 800ecbe:	e7f3      	b.n	800eca8 <__ssvfscanf_r+0x588>
 800ecc0:	0800b9bd 	.word	0x0800b9bd
 800ecc4:	0000fff6 	.word	0x0000fff6
 800ecc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecca:	0034      	movs	r4, r6
 800eccc:	cb20      	ldmia	r3!, {r5}
 800ecce:	633b      	str	r3, [r7, #48]	; 0x30
 800ecd0:	2380      	movs	r3, #128	; 0x80
 800ecd2:	401c      	ands	r4, r3
 800ecd4:	421e      	tst	r6, r3
 800ecd6:	d028      	beq.n	800ed2a <__ssvfscanf_r+0x60a>
 800ecd8:	2d00      	cmp	r5, #0
 800ecda:	d100      	bne.n	800ecde <__ssvfscanf_r+0x5be>
 800ecdc:	e61d      	b.n	800e91a <__ssvfscanf_r+0x1fa>
 800ecde:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ece0:	f7fb fd76 	bl	800a7d0 <malloc>
 800ece4:	6238      	str	r0, [r7, #32]
 800ece6:	2800      	cmp	r0, #0
 800ece8:	d100      	bne.n	800ecec <__ssvfscanf_r+0x5cc>
 800ecea:	e5ef      	b.n	800e8cc <__ssvfscanf_r+0x1ac>
 800ecec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecee:	6028      	str	r0, [r5, #0]
 800ecf0:	88de      	ldrh	r6, [r3, #6]
 800ecf2:	889c      	ldrh	r4, [r3, #4]
 800ecf4:	6818      	ldr	r0, [r3, #0]
 800ecf6:	42a6      	cmp	r6, r4
 800ecf8:	d30e      	bcc.n	800ed18 <__ssvfscanf_r+0x5f8>
 800ecfa:	4bbf      	ldr	r3, [pc, #764]	; (800eff8 <__ssvfscanf_r+0x8d8>)
 800ecfc:	429c      	cmp	r4, r3
 800ecfe:	d900      	bls.n	800ed02 <__ssvfscanf_r+0x5e2>
 800ed00:	e6df      	b.n	800eac2 <__ssvfscanf_r+0x3a2>
 800ed02:	3408      	adds	r4, #8
 800ed04:	b2a4      	uxth	r4, r4
 800ed06:	00a1      	lsls	r1, r4, #2
 800ed08:	f002 f804 	bl	8010d14 <realloc>
 800ed0c:	2800      	cmp	r0, #0
 800ed0e:	d100      	bne.n	800ed12 <__ssvfscanf_r+0x5f2>
 800ed10:	e6d7      	b.n	800eac2 <__ssvfscanf_r+0x3a2>
 800ed12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed14:	6018      	str	r0, [r3, #0]
 800ed16:	809c      	strh	r4, [r3, #4]
 800ed18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed1a:	1c72      	adds	r2, r6, #1
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed20:	00b6      	lsls	r6, r6, #2
 800ed22:	002c      	movs	r4, r5
 800ed24:	50f5      	str	r5, [r6, r3]
 800ed26:	6a3d      	ldr	r5, [r7, #32]
 800ed28:	80ca      	strh	r2, [r1, #6]
 800ed2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed2c:	0029      	movs	r1, r5
 800ed2e:	9300      	str	r3, [sp, #0]
 800ed30:	2201      	movs	r2, #1
 800ed32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed36:	f002 fc20 	bl	801157a <_sfread_r>
 800ed3a:	1e05      	subs	r5, r0, #0
 800ed3c:	d100      	bne.n	800ed40 <__ssvfscanf_r+0x620>
 800ed3e:	e5be      	b.n	800e8be <__ssvfscanf_r+0x19e>
 800ed40:	2c00      	cmp	r4, #0
 800ed42:	d009      	beq.n	800ed58 <__ssvfscanf_r+0x638>
 800ed44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed46:	4283      	cmp	r3, r0
 800ed48:	d906      	bls.n	800ed58 <__ssvfscanf_r+0x638>
 800ed4a:	0001      	movs	r1, r0
 800ed4c:	6820      	ldr	r0, [r4, #0]
 800ed4e:	f001 ffe1 	bl	8010d14 <realloc>
 800ed52:	2800      	cmp	r0, #0
 800ed54:	d000      	beq.n	800ed58 <__ssvfscanf_r+0x638>
 800ed56:	6020      	str	r0, [r4, #0]
 800ed58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed5a:	195b      	adds	r3, r3, r5
 800ed5c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed60:	3301      	adds	r3, #1
 800ed62:	e4f8      	b.n	800e756 <__ssvfscanf_r+0x36>
 800ed64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d101      	bne.n	800ed6e <__ssvfscanf_r+0x64e>
 800ed6a:	3b01      	subs	r3, #1
 800ed6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed6e:	2210      	movs	r2, #16
 800ed70:	2301      	movs	r3, #1
 800ed72:	0034      	movs	r4, r6
 800ed74:	4032      	ands	r2, r6
 800ed76:	401c      	ands	r4, r3
 800ed78:	623a      	str	r2, [r7, #32]
 800ed7a:	421e      	tst	r6, r3
 800ed7c:	d100      	bne.n	800ed80 <__ssvfscanf_r+0x660>
 800ed7e:	e116      	b.n	800efae <__ssvfscanf_r+0x88e>
 800ed80:	2a00      	cmp	r2, #0
 800ed82:	d000      	beq.n	800ed86 <__ssvfscanf_r+0x666>
 800ed84:	e0b0      	b.n	800eee8 <__ssvfscanf_r+0x7c8>
 800ed86:	2080      	movs	r0, #128	; 0x80
 800ed88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8a:	cb10      	ldmia	r3!, {r4}
 800ed8c:	60fb      	str	r3, [r7, #12]
 800ed8e:	4206      	tst	r6, r0
 800ed90:	d100      	bne.n	800ed94 <__ssvfscanf_r+0x674>
 800ed92:	e0b2      	b.n	800eefa <__ssvfscanf_r+0x7da>
 800ed94:	2c00      	cmp	r4, #0
 800ed96:	d100      	bne.n	800ed9a <__ssvfscanf_r+0x67a>
 800ed98:	e68d      	b.n	800eab6 <__ssvfscanf_r+0x396>
 800ed9a:	f7fb fd19 	bl	800a7d0 <malloc>
 800ed9e:	6338      	str	r0, [r7, #48]	; 0x30
 800eda0:	2800      	cmp	r0, #0
 800eda2:	d100      	bne.n	800eda6 <__ssvfscanf_r+0x686>
 800eda4:	e684      	b.n	800eab0 <__ssvfscanf_r+0x390>
 800eda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda8:	6023      	str	r3, [r4, #0]
 800edaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edac:	88de      	ldrh	r6, [r3, #6]
 800edae:	889d      	ldrh	r5, [r3, #4]
 800edb0:	42ae      	cmp	r6, r5
 800edb2:	d310      	bcc.n	800edd6 <__ssvfscanf_r+0x6b6>
 800edb4:	4b90      	ldr	r3, [pc, #576]	; (800eff8 <__ssvfscanf_r+0x8d8>)
 800edb6:	429d      	cmp	r5, r3
 800edb8:	d900      	bls.n	800edbc <__ssvfscanf_r+0x69c>
 800edba:	e679      	b.n	800eab0 <__ssvfscanf_r+0x390>
 800edbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edbe:	3508      	adds	r5, #8
 800edc0:	b2ad      	uxth	r5, r5
 800edc2:	6818      	ldr	r0, [r3, #0]
 800edc4:	00a9      	lsls	r1, r5, #2
 800edc6:	f001 ffa5 	bl	8010d14 <realloc>
 800edca:	2800      	cmp	r0, #0
 800edcc:	d100      	bne.n	800edd0 <__ssvfscanf_r+0x6b0>
 800edce:	e66f      	b.n	800eab0 <__ssvfscanf_r+0x390>
 800edd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edd2:	6018      	str	r0, [r3, #0]
 800edd4:	809d      	strh	r5, [r3, #4]
 800edd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edd8:	1c72      	adds	r2, r6, #1
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	00b6      	lsls	r6, r6, #2
 800edde:	50f4      	str	r4, [r6, r3]
 800ede0:	2320      	movs	r3, #32
 800ede2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ede4:	0026      	movs	r6, r4
 800ede6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800ede8:	80ca      	strh	r2, [r1, #6]
 800edea:	613b      	str	r3, [r7, #16]
 800edec:	2500      	movs	r5, #0
 800edee:	f7fd f8a1 	bl	800bf34 <__locale_mb_cur_max>
 800edf2:	42a8      	cmp	r0, r5
 800edf4:	d100      	bne.n	800edf8 <__ssvfscanf_r+0x6d8>
 800edf6:	e562      	b.n	800e8be <__ssvfscanf_r+0x19e>
 800edf8:	1c6a      	adds	r2, r5, #1
 800edfa:	61fa      	str	r2, [r7, #28]
 800edfc:	228c      	movs	r2, #140	; 0x8c
 800edfe:	2048      	movs	r0, #72	; 0x48
 800ee00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee02:	0052      	lsls	r2, r2, #1
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	1812      	adds	r2, r2, r0
 800ee08:	7819      	ldrb	r1, [r3, #0]
 800ee0a:	19d2      	adds	r2, r2, r7
 800ee0c:	5551      	strb	r1, [r2, r5]
 800ee0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee10:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee12:	6852      	ldr	r2, [r2, #4]
 800ee14:	3301      	adds	r3, #1
 800ee16:	600b      	str	r3, [r1, #0]
 800ee18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1a:	3a01      	subs	r2, #1
 800ee1c:	604a      	str	r2, [r1, #4]
 800ee1e:	2b03      	cmp	r3, #3
 800ee20:	d102      	bne.n	800ee28 <__ssvfscanf_r+0x708>
 800ee22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee24:	2b04      	cmp	r3, #4
 800ee26:	d006      	beq.n	800ee36 <__ssvfscanf_r+0x716>
 800ee28:	2048      	movs	r0, #72	; 0x48
 800ee2a:	2208      	movs	r2, #8
 800ee2c:	1813      	adds	r3, r2, r0
 800ee2e:	2100      	movs	r1, #0
 800ee30:	19d8      	adds	r0, r3, r7
 800ee32:	f7fc fff3 	bl	800be1c <memset>
 800ee36:	2148      	movs	r1, #72	; 0x48
 800ee38:	2308      	movs	r3, #8
 800ee3a:	228c      	movs	r2, #140	; 0x8c
 800ee3c:	185b      	adds	r3, r3, r1
 800ee3e:	0052      	lsls	r2, r2, #1
 800ee40:	19db      	adds	r3, r3, r7
 800ee42:	1852      	adds	r2, r2, r1
 800ee44:	9300      	str	r3, [sp, #0]
 800ee46:	0021      	movs	r1, r4
 800ee48:	69fb      	ldr	r3, [r7, #28]
 800ee4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee4c:	19d2      	adds	r2, r2, r7
 800ee4e:	f002 fa75 	bl	801133c <_mbrtowc_r>
 800ee52:	0003      	movs	r3, r0
 800ee54:	62b8      	str	r0, [r7, #40]	; 0x28
 800ee56:	3301      	adds	r3, #1
 800ee58:	d100      	bne.n	800ee5c <__ssvfscanf_r+0x73c>
 800ee5a:	e530      	b.n	800e8be <__ssvfscanf_r+0x19e>
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	d151      	bne.n	800ef04 <__ssvfscanf_r+0x7e4>
 800ee60:	6020      	str	r0, [r4, #0]
 800ee62:	2301      	movs	r3, #1
 800ee64:	6825      	ldr	r5, [r4, #0]
 800ee66:	425b      	negs	r3, r3
 800ee68:	1c6a      	adds	r2, r5, #1
 800ee6a:	d01a      	beq.n	800eea2 <__ssvfscanf_r+0x782>
 800ee6c:	2048      	movs	r0, #72	; 0x48
 800ee6e:	3311      	adds	r3, #17
 800ee70:	181b      	adds	r3, r3, r0
 800ee72:	2208      	movs	r2, #8
 800ee74:	2100      	movs	r1, #0
 800ee76:	19d8      	adds	r0, r3, r7
 800ee78:	f7fc ffd0 	bl	800be1c <memset>
 800ee7c:	4b5f      	ldr	r3, [pc, #380]	; (800effc <__ssvfscanf_r+0x8dc>)
 800ee7e:	2148      	movs	r1, #72	; 0x48
 800ee80:	33e0      	adds	r3, #224	; 0xe0
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	2310      	movs	r3, #16
 800ee86:	4694      	mov	ip, r2
 800ee88:	185b      	adds	r3, r3, r1
 800ee8a:	002a      	movs	r2, r5
 800ee8c:	19db      	adds	r3, r3, r7
 800ee8e:	4665      	mov	r5, ip
 800ee90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee92:	1879      	adds	r1, r7, r1
 800ee94:	47a8      	blx	r5
 800ee96:	2300      	movs	r3, #0
 800ee98:	2801      	cmp	r0, #1
 800ee9a:	d102      	bne.n	800eea2 <__ssvfscanf_r+0x782>
 800ee9c:	3348      	adds	r3, #72	; 0x48
 800ee9e:	18fb      	adds	r3, r7, r3
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	2218      	movs	r2, #24
 800eea4:	2148      	movs	r1, #72	; 0x48
 800eea6:	1852      	adds	r2, r2, r1
 800eea8:	19d2      	adds	r2, r2, r7
 800eeaa:	5cd3      	ldrb	r3, [r2, r3]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d149      	bne.n	800ef44 <__ssvfscanf_r+0x824>
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d137      	bne.n	800ef26 <__ssvfscanf_r+0x806>
 800eeb6:	6a3b      	ldr	r3, [r7, #32]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d113      	bne.n	800eee4 <__ssvfscanf_r+0x7c4>
 800eebc:	6023      	str	r3, [r4, #0]
 800eebe:	2e00      	cmp	r6, #0
 800eec0:	d00d      	beq.n	800eede <__ssvfscanf_r+0x7be>
 800eec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec4:	693a      	ldr	r2, [r7, #16]
 800eec6:	1ae4      	subs	r4, r4, r3
 800eec8:	10a3      	asrs	r3, r4, #2
 800eeca:	3301      	adds	r3, #1
 800eecc:	429a      	cmp	r2, r3
 800eece:	d906      	bls.n	800eede <__ssvfscanf_r+0x7be>
 800eed0:	6830      	ldr	r0, [r6, #0]
 800eed2:	1d21      	adds	r1, r4, #4
 800eed4:	f001 ff1e 	bl	8010d14 <realloc>
 800eed8:	2800      	cmp	r0, #0
 800eeda:	d000      	beq.n	800eede <__ssvfscanf_r+0x7be>
 800eedc:	6030      	str	r0, [r6, #0]
 800eede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee0:	3301      	adds	r3, #1
 800eee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	e593      	b.n	800ea10 <__ssvfscanf_r+0x2f0>
 800eee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeea:	60fb      	str	r3, [r7, #12]
 800eeec:	2300      	movs	r3, #0
 800eeee:	001e      	movs	r6, r3
 800eef0:	613b      	str	r3, [r7, #16]
 800eef2:	633b      	str	r3, [r7, #48]	; 0x30
 800eef4:	334c      	adds	r3, #76	; 0x4c
 800eef6:	18fc      	adds	r4, r7, r3
 800eef8:	e778      	b.n	800edec <__ssvfscanf_r+0x6cc>
 800eefa:	6a3b      	ldr	r3, [r7, #32]
 800eefc:	001e      	movs	r6, r3
 800eefe:	613b      	str	r3, [r7, #16]
 800ef00:	633b      	str	r3, [r7, #48]	; 0x30
 800ef02:	e773      	b.n	800edec <__ssvfscanf_r+0x6cc>
 800ef04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef06:	69fd      	ldr	r5, [r7, #28]
 800ef08:	3302      	adds	r3, #2
 800ef0a:	d1aa      	bne.n	800ee62 <__ssvfscanf_r+0x742>
 800ef0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef0e:	685b      	ldr	r3, [r3, #4]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	dc47      	bgt.n	800efa4 <__ssvfscanf_r+0x884>
 800ef14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef18:	f002 fb10 	bl	801153c <__ssrefill_r>
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	d041      	beq.n	800efa4 <__ssvfscanf_r+0x884>
 800ef20:	2d00      	cmp	r5, #0
 800ef22:	d0c8      	beq.n	800eeb6 <__ssvfscanf_r+0x796>
 800ef24:	e4cb      	b.n	800e8be <__ssvfscanf_r+0x19e>
 800ef26:	69fb      	ldr	r3, [r7, #28]
 800ef28:	2248      	movs	r2, #72	; 0x48
 800ef2a:	3b01      	subs	r3, #1
 800ef2c:	61fb      	str	r3, [r7, #28]
 800ef2e:	238c      	movs	r3, #140	; 0x8c
 800ef30:	005b      	lsls	r3, r3, #1
 800ef32:	189b      	adds	r3, r3, r2
 800ef34:	69fa      	ldr	r2, [r7, #28]
 800ef36:	19db      	adds	r3, r3, r7
 800ef38:	5cd1      	ldrb	r1, [r2, r3]
 800ef3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef3e:	f002 fac1 	bl	80114c4 <_sungetc_r>
 800ef42:	e7b5      	b.n	800eeb0 <__ssvfscanf_r+0x790>
 800ef44:	69fa      	ldr	r2, [r7, #28]
 800ef46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef48:	4694      	mov	ip, r2
 800ef4a:	4463      	add	r3, ip
 800ef4c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef50:	2b03      	cmp	r3, #3
 800ef52:	d102      	bne.n	800ef5a <__ssvfscanf_r+0x83a>
 800ef54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef56:	2b04      	cmp	r3, #4
 800ef58:	d002      	beq.n	800ef60 <__ssvfscanf_r+0x840>
 800ef5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef5c:	3b01      	subs	r3, #1
 800ef5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef60:	6a3b      	ldr	r3, [r7, #32]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d11a      	bne.n	800ef9c <__ssvfscanf_r+0x87c>
 800ef66:	3404      	adds	r4, #4
 800ef68:	2e00      	cmp	r6, #0
 800ef6a:	d019      	beq.n	800efa0 <__ssvfscanf_r+0x880>
 800ef6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6e:	693a      	ldr	r2, [r7, #16]
 800ef70:	1ae3      	subs	r3, r4, r3
 800ef72:	61fb      	str	r3, [r7, #28]
 800ef74:	6a3d      	ldr	r5, [r7, #32]
 800ef76:	109b      	asrs	r3, r3, #2
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d3c7      	bcc.n	800ef0c <__ssvfscanf_r+0x7ec>
 800ef7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef7e:	00d1      	lsls	r1, r2, #3
 800ef80:	f001 fec8 	bl	8010d14 <realloc>
 800ef84:	6338      	str	r0, [r7, #48]	; 0x30
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d100      	bne.n	800ef8c <__ssvfscanf_r+0x86c>
 800ef8a:	e591      	b.n	800eab0 <__ssvfscanf_r+0x390>
 800ef8c:	4684      	mov	ip, r0
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	69fc      	ldr	r4, [r7, #28]
 800ef92:	005b      	lsls	r3, r3, #1
 800ef94:	4464      	add	r4, ip
 800ef96:	6030      	str	r0, [r6, #0]
 800ef98:	613b      	str	r3, [r7, #16]
 800ef9a:	e7b7      	b.n	800ef0c <__ssvfscanf_r+0x7ec>
 800ef9c:	2500      	movs	r5, #0
 800ef9e:	e7b5      	b.n	800ef0c <__ssvfscanf_r+0x7ec>
 800efa0:	0035      	movs	r5, r6
 800efa2:	e7b3      	b.n	800ef0c <__ssvfscanf_r+0x7ec>
 800efa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d000      	beq.n	800efac <__ssvfscanf_r+0x88c>
 800efaa:	e720      	b.n	800edee <__ssvfscanf_r+0x6ce>
 800efac:	e783      	b.n	800eeb6 <__ssvfscanf_r+0x796>
 800efae:	6a3b      	ldr	r3, [r7, #32]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d025      	beq.n	800f000 <__ssvfscanf_r+0x8e0>
 800efb4:	2118      	movs	r1, #24
 800efb6:	2048      	movs	r0, #72	; 0x48
 800efb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efba:	1809      	adds	r1, r1, r0
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	19c9      	adds	r1, r1, r7
 800efc0:	781a      	ldrb	r2, [r3, #0]
 800efc2:	5c8a      	ldrb	r2, [r1, r2]
 800efc4:	2a00      	cmp	r2, #0
 800efc6:	d103      	bne.n	800efd0 <__ssvfscanf_r+0x8b0>
 800efc8:	2c00      	cmp	r4, #0
 800efca:	d000      	beq.n	800efce <__ssvfscanf_r+0x8ae>
 800efcc:	e66c      	b.n	800eca8 <__ssvfscanf_r+0x588>
 800efce:	e4a4      	b.n	800e91a <__ssvfscanf_r+0x1fa>
 800efd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800efd4:	6852      	ldr	r2, [r2, #4]
 800efd6:	3301      	adds	r3, #1
 800efd8:	600b      	str	r3, [r1, #0]
 800efda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efdc:	3a01      	subs	r2, #1
 800efde:	3401      	adds	r4, #1
 800efe0:	604a      	str	r2, [r1, #4]
 800efe2:	429c      	cmp	r4, r3
 800efe4:	d100      	bne.n	800efe8 <__ssvfscanf_r+0x8c8>
 800efe6:	e65f      	b.n	800eca8 <__ssvfscanf_r+0x588>
 800efe8:	2a00      	cmp	r2, #0
 800efea:	dce3      	bgt.n	800efb4 <__ssvfscanf_r+0x894>
 800efec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800efee:	f002 faa5 	bl	801153c <__ssrefill_r>
 800eff2:	2800      	cmp	r0, #0
 800eff4:	d0de      	beq.n	800efb4 <__ssvfscanf_r+0x894>
 800eff6:	e657      	b.n	800eca8 <__ssvfscanf_r+0x588>
 800eff8:	0000fff6 	.word	0x0000fff6
 800effc:	20000444 	.word	0x20000444
 800f000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f002:	0032      	movs	r2, r6
 800f004:	cb20      	ldmia	r3!, {r5}
 800f006:	61fb      	str	r3, [r7, #28]
 800f008:	2380      	movs	r3, #128	; 0x80
 800f00a:	401a      	ands	r2, r3
 800f00c:	421e      	tst	r6, r3
 800f00e:	d100      	bne.n	800f012 <__ssvfscanf_r+0x8f2>
 800f010:	e086      	b.n	800f120 <__ssvfscanf_r+0xa00>
 800f012:	2d00      	cmp	r5, #0
 800f014:	d100      	bne.n	800f018 <__ssvfscanf_r+0x8f8>
 800f016:	e480      	b.n	800e91a <__ssvfscanf_r+0x1fa>
 800f018:	2020      	movs	r0, #32
 800f01a:	f7fb fbd9 	bl	800a7d0 <malloc>
 800f01e:	6338      	str	r0, [r7, #48]	; 0x30
 800f020:	2800      	cmp	r0, #0
 800f022:	d100      	bne.n	800f026 <__ssvfscanf_r+0x906>
 800f024:	e452      	b.n	800e8cc <__ssvfscanf_r+0x1ac>
 800f026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f028:	6028      	str	r0, [r5, #0]
 800f02a:	88de      	ldrh	r6, [r3, #6]
 800f02c:	889c      	ldrh	r4, [r3, #4]
 800f02e:	6818      	ldr	r0, [r3, #0]
 800f030:	42a6      	cmp	r6, r4
 800f032:	d30e      	bcc.n	800f052 <__ssvfscanf_r+0x932>
 800f034:	4bc3      	ldr	r3, [pc, #780]	; (800f344 <__ssvfscanf_r+0xc24>)
 800f036:	429c      	cmp	r4, r3
 800f038:	d900      	bls.n	800f03c <__ssvfscanf_r+0x91c>
 800f03a:	e542      	b.n	800eac2 <__ssvfscanf_r+0x3a2>
 800f03c:	3408      	adds	r4, #8
 800f03e:	b2a4      	uxth	r4, r4
 800f040:	00a1      	lsls	r1, r4, #2
 800f042:	f001 fe67 	bl	8010d14 <realloc>
 800f046:	2800      	cmp	r0, #0
 800f048:	d100      	bne.n	800f04c <__ssvfscanf_r+0x92c>
 800f04a:	e53a      	b.n	800eac2 <__ssvfscanf_r+0x3a2>
 800f04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f04e:	6018      	str	r0, [r3, #0]
 800f050:	809c      	strh	r4, [r3, #4]
 800f052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f054:	1c72      	adds	r2, r6, #1
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	00b6      	lsls	r6, r6, #2
 800f05a:	50f5      	str	r5, [r6, r3]
 800f05c:	2320      	movs	r3, #32
 800f05e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f060:	002e      	movs	r6, r5
 800f062:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f064:	80ca      	strh	r2, [r1, #6]
 800f066:	623b      	str	r3, [r7, #32]
 800f068:	002c      	movs	r4, r5
 800f06a:	2118      	movs	r1, #24
 800f06c:	2048      	movs	r0, #72	; 0x48
 800f06e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f070:	1809      	adds	r1, r1, r0
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	19c9      	adds	r1, r1, r7
 800f076:	781a      	ldrb	r2, [r3, #0]
 800f078:	5c8a      	ldrb	r2, [r1, r2]
 800f07a:	2a00      	cmp	r2, #0
 800f07c:	d101      	bne.n	800f082 <__ssvfscanf_r+0x962>
 800f07e:	633d      	str	r5, [r7, #48]	; 0x30
 800f080:	e031      	b.n	800f0e6 <__ssvfscanf_r+0x9c6>
 800f082:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f084:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f086:	6852      	ldr	r2, [r2, #4]
 800f088:	3a01      	subs	r2, #1
 800f08a:	604a      	str	r2, [r1, #4]
 800f08c:	1c5a      	adds	r2, r3, #1
 800f08e:	600a      	str	r2, [r1, #0]
 800f090:	781b      	ldrb	r3, [r3, #0]
 800f092:	1c6a      	adds	r2, r5, #1
 800f094:	633a      	str	r2, [r7, #48]	; 0x30
 800f096:	702b      	strb	r3, [r5, #0]
 800f098:	2e00      	cmp	r6, #0
 800f09a:	d010      	beq.n	800f0be <__ssvfscanf_r+0x99e>
 800f09c:	6a3b      	ldr	r3, [r7, #32]
 800f09e:	1b15      	subs	r5, r2, r4
 800f0a0:	429d      	cmp	r5, r3
 800f0a2:	d30c      	bcc.n	800f0be <__ssvfscanf_r+0x99e>
 800f0a4:	005b      	lsls	r3, r3, #1
 800f0a6:	0020      	movs	r0, r4
 800f0a8:	0019      	movs	r1, r3
 800f0aa:	623b      	str	r3, [r7, #32]
 800f0ac:	f001 fe32 	bl	8010d14 <realloc>
 800f0b0:	1e04      	subs	r4, r0, #0
 800f0b2:	d101      	bne.n	800f0b8 <__ssvfscanf_r+0x998>
 800f0b4:	f7ff fc0a 	bl	800e8cc <__ssvfscanf_r+0x1ac>
 800f0b8:	1943      	adds	r3, r0, r5
 800f0ba:	633b      	str	r3, [r7, #48]	; 0x30
 800f0bc:	6030      	str	r0, [r6, #0]
 800f0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0c0:	3b01      	subs	r3, #1
 800f0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d00e      	beq.n	800f0e6 <__ssvfscanf_r+0x9c6>
 800f0c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0ca:	685b      	ldr	r3, [r3, #4]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	dc2a      	bgt.n	800f126 <__ssvfscanf_r+0xa06>
 800f0d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f0d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f0d4:	f002 fa32 	bl	801153c <__ssrefill_r>
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	d024      	beq.n	800f126 <__ssvfscanf_r+0xa06>
 800f0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0de:	42a3      	cmp	r3, r4
 800f0e0:	d101      	bne.n	800f0e6 <__ssvfscanf_r+0x9c6>
 800f0e2:	f7ff fbec 	bl	800e8be <__ssvfscanf_r+0x19e>
 800f0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e8:	1b1d      	subs	r5, r3, r4
 800f0ea:	42a3      	cmp	r3, r4
 800f0ec:	d101      	bne.n	800f0f2 <__ssvfscanf_r+0x9d2>
 800f0ee:	f7ff fc14 	bl	800e91a <__ssvfscanf_r+0x1fa>
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0f6:	7013      	strb	r3, [r2, #0]
 800f0f8:	429e      	cmp	r6, r3
 800f0fa:	d009      	beq.n	800f110 <__ssvfscanf_r+0x9f0>
 800f0fc:	6a3b      	ldr	r3, [r7, #32]
 800f0fe:	1c69      	adds	r1, r5, #1
 800f100:	428b      	cmp	r3, r1
 800f102:	d905      	bls.n	800f110 <__ssvfscanf_r+0x9f0>
 800f104:	6830      	ldr	r0, [r6, #0]
 800f106:	f001 fe05 	bl	8010d14 <realloc>
 800f10a:	2800      	cmp	r0, #0
 800f10c:	d000      	beq.n	800f110 <__ssvfscanf_r+0x9f0>
 800f10e:	6030      	str	r0, [r6, #0]
 800f110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f112:	3301      	adds	r3, #1
 800f114:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f118:	195b      	adds	r3, r3, r5
 800f11a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f11c:	69fb      	ldr	r3, [r7, #28]
 800f11e:	e477      	b.n	800ea10 <__ssvfscanf_r+0x2f0>
 800f120:	0016      	movs	r6, r2
 800f122:	623a      	str	r2, [r7, #32]
 800f124:	e7a0      	b.n	800f068 <__ssvfscanf_r+0x948>
 800f126:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f128:	e79f      	b.n	800f06a <__ssvfscanf_r+0x94a>
 800f12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d101      	bne.n	800f134 <__ssvfscanf_r+0xa14>
 800f130:	3b01      	subs	r3, #1
 800f132:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f134:	2210      	movs	r2, #16
 800f136:	2301      	movs	r3, #1
 800f138:	0034      	movs	r4, r6
 800f13a:	4032      	ands	r2, r6
 800f13c:	401c      	ands	r4, r3
 800f13e:	61fa      	str	r2, [r7, #28]
 800f140:	421e      	tst	r6, r3
 800f142:	d100      	bne.n	800f146 <__ssvfscanf_r+0xa26>
 800f144:	e102      	b.n	800f34c <__ssvfscanf_r+0xc2c>
 800f146:	2a00      	cmp	r2, #0
 800f148:	d000      	beq.n	800f14c <__ssvfscanf_r+0xa2c>
 800f14a:	e09f      	b.n	800f28c <__ssvfscanf_r+0xb6c>
 800f14c:	2080      	movs	r0, #128	; 0x80
 800f14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f150:	cb10      	ldmia	r3!, {r4}
 800f152:	60fb      	str	r3, [r7, #12]
 800f154:	4206      	tst	r6, r0
 800f156:	d100      	bne.n	800f15a <__ssvfscanf_r+0xa3a>
 800f158:	e0a1      	b.n	800f29e <__ssvfscanf_r+0xb7e>
 800f15a:	2c00      	cmp	r4, #0
 800f15c:	d100      	bne.n	800f160 <__ssvfscanf_r+0xa40>
 800f15e:	e4aa      	b.n	800eab6 <__ssvfscanf_r+0x396>
 800f160:	f7fb fb36 	bl	800a7d0 <malloc>
 800f164:	6338      	str	r0, [r7, #48]	; 0x30
 800f166:	2800      	cmp	r0, #0
 800f168:	d100      	bne.n	800f16c <__ssvfscanf_r+0xa4c>
 800f16a:	e4a1      	b.n	800eab0 <__ssvfscanf_r+0x390>
 800f16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f16e:	6023      	str	r3, [r4, #0]
 800f170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f172:	88de      	ldrh	r6, [r3, #6]
 800f174:	889d      	ldrh	r5, [r3, #4]
 800f176:	42ae      	cmp	r6, r5
 800f178:	d310      	bcc.n	800f19c <__ssvfscanf_r+0xa7c>
 800f17a:	4b72      	ldr	r3, [pc, #456]	; (800f344 <__ssvfscanf_r+0xc24>)
 800f17c:	429d      	cmp	r5, r3
 800f17e:	d900      	bls.n	800f182 <__ssvfscanf_r+0xa62>
 800f180:	e496      	b.n	800eab0 <__ssvfscanf_r+0x390>
 800f182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f184:	3508      	adds	r5, #8
 800f186:	b2ad      	uxth	r5, r5
 800f188:	6818      	ldr	r0, [r3, #0]
 800f18a:	00a9      	lsls	r1, r5, #2
 800f18c:	f001 fdc2 	bl	8010d14 <realloc>
 800f190:	2800      	cmp	r0, #0
 800f192:	d100      	bne.n	800f196 <__ssvfscanf_r+0xa76>
 800f194:	e48c      	b.n	800eab0 <__ssvfscanf_r+0x390>
 800f196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f198:	6018      	str	r0, [r3, #0]
 800f19a:	809d      	strh	r5, [r3, #4]
 800f19c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f19e:	1c72      	adds	r2, r6, #1
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	00b6      	lsls	r6, r6, #2
 800f1a4:	50f4      	str	r4, [r6, r3]
 800f1a6:	2320      	movs	r3, #32
 800f1a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f1aa:	0025      	movs	r5, r4
 800f1ac:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f1ae:	80ca      	strh	r2, [r1, #6]
 800f1b0:	613b      	str	r3, [r7, #16]
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	623b      	str	r3, [r7, #32]
 800f1b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1b8:	4a63      	ldr	r2, [pc, #396]	; (800f348 <__ssvfscanf_r+0xc28>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	5cd3      	ldrb	r3, [r2, r3]
 800f1c0:	2208      	movs	r2, #8
 800f1c2:	4213      	tst	r3, r2
 800f1c4:	d149      	bne.n	800f25a <__ssvfscanf_r+0xb3a>
 800f1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d046      	beq.n	800f25a <__ssvfscanf_r+0xb3a>
 800f1cc:	f7fc feb2 	bl	800bf34 <__locale_mb_cur_max>
 800f1d0:	6a3b      	ldr	r3, [r7, #32]
 800f1d2:	4298      	cmp	r0, r3
 800f1d4:	d101      	bne.n	800f1da <__ssvfscanf_r+0xaba>
 800f1d6:	f7ff fb72 	bl	800e8be <__ssvfscanf_r+0x19e>
 800f1da:	6a3a      	ldr	r2, [r7, #32]
 800f1dc:	2048      	movs	r0, #72	; 0x48
 800f1de:	1c56      	adds	r6, r2, #1
 800f1e0:	228c      	movs	r2, #140	; 0x8c
 800f1e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1e4:	0052      	lsls	r2, r2, #1
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	1812      	adds	r2, r2, r0
 800f1ea:	7819      	ldrb	r1, [r3, #0]
 800f1ec:	6a38      	ldr	r0, [r7, #32]
 800f1ee:	19d2      	adds	r2, r2, r7
 800f1f0:	5411      	strb	r1, [r2, r0]
 800f1f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f1f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f1f6:	6852      	ldr	r2, [r2, #4]
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	600b      	str	r3, [r1, #0]
 800f1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1fe:	3a01      	subs	r2, #1
 800f200:	604a      	str	r2, [r1, #4]
 800f202:	2b03      	cmp	r3, #3
 800f204:	d102      	bne.n	800f20c <__ssvfscanf_r+0xaec>
 800f206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f208:	2b04      	cmp	r3, #4
 800f20a:	d007      	beq.n	800f21c <__ssvfscanf_r+0xafc>
 800f20c:	2048      	movs	r0, #72	; 0x48
 800f20e:	2310      	movs	r3, #16
 800f210:	181b      	adds	r3, r3, r0
 800f212:	2208      	movs	r2, #8
 800f214:	2100      	movs	r1, #0
 800f216:	19d8      	adds	r0, r3, r7
 800f218:	f7fc fe00 	bl	800be1c <memset>
 800f21c:	2148      	movs	r1, #72	; 0x48
 800f21e:	2310      	movs	r3, #16
 800f220:	228c      	movs	r2, #140	; 0x8c
 800f222:	185b      	adds	r3, r3, r1
 800f224:	0052      	lsls	r2, r2, #1
 800f226:	19db      	adds	r3, r3, r7
 800f228:	1852      	adds	r2, r2, r1
 800f22a:	9300      	str	r3, [sp, #0]
 800f22c:	0021      	movs	r1, r4
 800f22e:	0033      	movs	r3, r6
 800f230:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f232:	19d2      	adds	r2, r2, r7
 800f234:	f002 f882 	bl	801133c <_mbrtowc_r>
 800f238:	0003      	movs	r3, r0
 800f23a:	62b8      	str	r0, [r7, #40]	; 0x28
 800f23c:	3301      	adds	r3, #1
 800f23e:	d101      	bne.n	800f244 <__ssvfscanf_r+0xb24>
 800f240:	f7ff fb3d 	bl	800e8be <__ssvfscanf_r+0x19e>
 800f244:	2800      	cmp	r0, #0
 800f246:	d12f      	bne.n	800f2a8 <__ssvfscanf_r+0xb88>
 800f248:	6020      	str	r0, [r4, #0]
 800f24a:	6820      	ldr	r0, [r4, #0]
 800f24c:	f002 f894 	bl	8011378 <iswspace>
 800f250:	6238      	str	r0, [r7, #32]
 800f252:	2800      	cmp	r0, #0
 800f254:	d04a      	beq.n	800f2ec <__ssvfscanf_r+0xbcc>
 800f256:	2e00      	cmp	r6, #0
 800f258:	d13c      	bne.n	800f2d4 <__ssvfscanf_r+0xbb4>
 800f25a:	69fb      	ldr	r3, [r7, #28]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d000      	beq.n	800f262 <__ssvfscanf_r+0xb42>
 800f260:	e640      	b.n	800eee4 <__ssvfscanf_r+0x7c4>
 800f262:	6023      	str	r3, [r4, #0]
 800f264:	2d00      	cmp	r5, #0
 800f266:	d100      	bne.n	800f26a <__ssvfscanf_r+0xb4a>
 800f268:	e639      	b.n	800eede <__ssvfscanf_r+0x7be>
 800f26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f26c:	693a      	ldr	r2, [r7, #16]
 800f26e:	1ae4      	subs	r4, r4, r3
 800f270:	10a3      	asrs	r3, r4, #2
 800f272:	3301      	adds	r3, #1
 800f274:	429a      	cmp	r2, r3
 800f276:	d800      	bhi.n	800f27a <__ssvfscanf_r+0xb5a>
 800f278:	e631      	b.n	800eede <__ssvfscanf_r+0x7be>
 800f27a:	6828      	ldr	r0, [r5, #0]
 800f27c:	1d21      	adds	r1, r4, #4
 800f27e:	f001 fd49 	bl	8010d14 <realloc>
 800f282:	2800      	cmp	r0, #0
 800f284:	d100      	bne.n	800f288 <__ssvfscanf_r+0xb68>
 800f286:	e62a      	b.n	800eede <__ssvfscanf_r+0x7be>
 800f288:	6028      	str	r0, [r5, #0]
 800f28a:	e628      	b.n	800eede <__ssvfscanf_r+0x7be>
 800f28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28e:	60fb      	str	r3, [r7, #12]
 800f290:	2300      	movs	r3, #0
 800f292:	001d      	movs	r5, r3
 800f294:	613b      	str	r3, [r7, #16]
 800f296:	633b      	str	r3, [r7, #48]	; 0x30
 800f298:	334c      	adds	r3, #76	; 0x4c
 800f29a:	18fc      	adds	r4, r7, r3
 800f29c:	e789      	b.n	800f1b2 <__ssvfscanf_r+0xa92>
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	001d      	movs	r5, r3
 800f2a2:	613b      	str	r3, [r7, #16]
 800f2a4:	633b      	str	r3, [r7, #48]	; 0x30
 800f2a6:	e784      	b.n	800f1b2 <__ssvfscanf_r+0xa92>
 800f2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2aa:	623e      	str	r6, [r7, #32]
 800f2ac:	3302      	adds	r3, #2
 800f2ae:	d1cc      	bne.n	800f24a <__ssvfscanf_r+0xb2a>
 800f2b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	dd00      	ble.n	800f2ba <__ssvfscanf_r+0xb9a>
 800f2b8:	e77d      	b.n	800f1b6 <__ssvfscanf_r+0xa96>
 800f2ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f2bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f2be:	f002 f93d 	bl	801153c <__ssrefill_r>
 800f2c2:	2800      	cmp	r0, #0
 800f2c4:	d100      	bne.n	800f2c8 <__ssvfscanf_r+0xba8>
 800f2c6:	e776      	b.n	800f1b6 <__ssvfscanf_r+0xa96>
 800f2c8:	6a3b      	ldr	r3, [r7, #32]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d001      	beq.n	800f2d2 <__ssvfscanf_r+0xbb2>
 800f2ce:	f7ff faf6 	bl	800e8be <__ssvfscanf_r+0x19e>
 800f2d2:	e7c2      	b.n	800f25a <__ssvfscanf_r+0xb3a>
 800f2d4:	238c      	movs	r3, #140	; 0x8c
 800f2d6:	2248      	movs	r2, #72	; 0x48
 800f2d8:	005b      	lsls	r3, r3, #1
 800f2da:	189b      	adds	r3, r3, r2
 800f2dc:	3e01      	subs	r6, #1
 800f2de:	19db      	adds	r3, r3, r7
 800f2e0:	5cf1      	ldrb	r1, [r6, r3]
 800f2e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f2e6:	f002 f8ed 	bl	80114c4 <_sungetc_r>
 800f2ea:	e7b4      	b.n	800f256 <__ssvfscanf_r+0xb36>
 800f2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ee:	199b      	adds	r3, r3, r6
 800f2f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f4:	2b03      	cmp	r3, #3
 800f2f6:	d102      	bne.n	800f2fe <__ssvfscanf_r+0xbde>
 800f2f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f2fa:	2b04      	cmp	r3, #4
 800f2fc:	d002      	beq.n	800f304 <__ssvfscanf_r+0xbe4>
 800f2fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f300:	3b01      	subs	r3, #1
 800f302:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d1d2      	bne.n	800f2b0 <__ssvfscanf_r+0xb90>
 800f30a:	3404      	adds	r4, #4
 800f30c:	2d00      	cmp	r5, #0
 800f30e:	d016      	beq.n	800f33e <__ssvfscanf_r+0xc1e>
 800f310:	69fa      	ldr	r2, [r7, #28]
 800f312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f314:	623a      	str	r2, [r7, #32]
 800f316:	693a      	ldr	r2, [r7, #16]
 800f318:	1ae6      	subs	r6, r4, r3
 800f31a:	10b3      	asrs	r3, r6, #2
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d3c7      	bcc.n	800f2b0 <__ssvfscanf_r+0xb90>
 800f320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f322:	00d1      	lsls	r1, r2, #3
 800f324:	f001 fcf6 	bl	8010d14 <realloc>
 800f328:	6338      	str	r0, [r7, #48]	; 0x30
 800f32a:	2800      	cmp	r0, #0
 800f32c:	d101      	bne.n	800f332 <__ssvfscanf_r+0xc12>
 800f32e:	f7ff fbbf 	bl	800eab0 <__ssvfscanf_r+0x390>
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	1984      	adds	r4, r0, r6
 800f336:	005b      	lsls	r3, r3, #1
 800f338:	6028      	str	r0, [r5, #0]
 800f33a:	613b      	str	r3, [r7, #16]
 800f33c:	e7b8      	b.n	800f2b0 <__ssvfscanf_r+0xb90>
 800f33e:	623d      	str	r5, [r7, #32]
 800f340:	e7b6      	b.n	800f2b0 <__ssvfscanf_r+0xb90>
 800f342:	46c0      	nop			; (mov r8, r8)
 800f344:	0000fff6 	.word	0x0000fff6
 800f348:	08014509 	.word	0x08014509
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d01c      	beq.n	800f38c <__ssvfscanf_r+0xc6c>
 800f352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f354:	49bf      	ldr	r1, [pc, #764]	; (800f654 <__ssvfscanf_r+0xf34>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	781a      	ldrb	r2, [r3, #0]
 800f35a:	5c8a      	ldrb	r2, [r1, r2]
 800f35c:	2108      	movs	r1, #8
 800f35e:	420a      	tst	r2, r1
 800f360:	d000      	beq.n	800f364 <__ssvfscanf_r+0xc44>
 800f362:	e4a1      	b.n	800eca8 <__ssvfscanf_r+0x588>
 800f364:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f366:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f368:	6852      	ldr	r2, [r2, #4]
 800f36a:	3301      	adds	r3, #1
 800f36c:	600b      	str	r3, [r1, #0]
 800f36e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f370:	3a01      	subs	r2, #1
 800f372:	3401      	adds	r4, #1
 800f374:	604a      	str	r2, [r1, #4]
 800f376:	429c      	cmp	r4, r3
 800f378:	d100      	bne.n	800f37c <__ssvfscanf_r+0xc5c>
 800f37a:	e495      	b.n	800eca8 <__ssvfscanf_r+0x588>
 800f37c:	2a00      	cmp	r2, #0
 800f37e:	dce8      	bgt.n	800f352 <__ssvfscanf_r+0xc32>
 800f380:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f382:	f002 f8db 	bl	801153c <__ssrefill_r>
 800f386:	2800      	cmp	r0, #0
 800f388:	d0e3      	beq.n	800f352 <__ssvfscanf_r+0xc32>
 800f38a:	e48d      	b.n	800eca8 <__ssvfscanf_r+0x588>
 800f38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38e:	0032      	movs	r2, r6
 800f390:	cb10      	ldmia	r3!, {r4}
 800f392:	61fb      	str	r3, [r7, #28]
 800f394:	2380      	movs	r3, #128	; 0x80
 800f396:	401a      	ands	r2, r3
 800f398:	421e      	tst	r6, r3
 800f39a:	d039      	beq.n	800f410 <__ssvfscanf_r+0xcf0>
 800f39c:	2c00      	cmp	r4, #0
 800f39e:	d101      	bne.n	800f3a4 <__ssvfscanf_r+0xc84>
 800f3a0:	f7ff fabb 	bl	800e91a <__ssvfscanf_r+0x1fa>
 800f3a4:	2020      	movs	r0, #32
 800f3a6:	f7fb fa13 	bl	800a7d0 <malloc>
 800f3aa:	6338      	str	r0, [r7, #48]	; 0x30
 800f3ac:	2800      	cmp	r0, #0
 800f3ae:	d101      	bne.n	800f3b4 <__ssvfscanf_r+0xc94>
 800f3b0:	f7ff fa8c 	bl	800e8cc <__ssvfscanf_r+0x1ac>
 800f3b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3b6:	6020      	str	r0, [r4, #0]
 800f3b8:	88de      	ldrh	r6, [r3, #6]
 800f3ba:	889d      	ldrh	r5, [r3, #4]
 800f3bc:	6818      	ldr	r0, [r3, #0]
 800f3be:	42ae      	cmp	r6, r5
 800f3c0:	d310      	bcc.n	800f3e4 <__ssvfscanf_r+0xcc4>
 800f3c2:	4ba5      	ldr	r3, [pc, #660]	; (800f658 <__ssvfscanf_r+0xf38>)
 800f3c4:	429d      	cmp	r5, r3
 800f3c6:	d901      	bls.n	800f3cc <__ssvfscanf_r+0xcac>
 800f3c8:	f7ff fb7b 	bl	800eac2 <__ssvfscanf_r+0x3a2>
 800f3cc:	3508      	adds	r5, #8
 800f3ce:	b2ad      	uxth	r5, r5
 800f3d0:	00a9      	lsls	r1, r5, #2
 800f3d2:	f001 fc9f 	bl	8010d14 <realloc>
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	d101      	bne.n	800f3de <__ssvfscanf_r+0xcbe>
 800f3da:	f7ff fb72 	bl	800eac2 <__ssvfscanf_r+0x3a2>
 800f3de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3e0:	6018      	str	r0, [r3, #0]
 800f3e2:	809d      	strh	r5, [r3, #4]
 800f3e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3e6:	1c72      	adds	r2, r6, #1
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	00b6      	lsls	r6, r6, #2
 800f3ec:	50f4      	str	r4, [r6, r3]
 800f3ee:	2320      	movs	r3, #32
 800f3f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f3f2:	0026      	movs	r6, r4
 800f3f4:	80ca      	strh	r2, [r1, #6]
 800f3f6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f3f8:	633b      	str	r3, [r7, #48]	; 0x30
 800f3fa:	0025      	movs	r5, r4
 800f3fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3fe:	4995      	ldr	r1, [pc, #596]	; (800f654 <__ssvfscanf_r+0xf34>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	781a      	ldrb	r2, [r3, #0]
 800f404:	5c8a      	ldrb	r2, [r1, r2]
 800f406:	2108      	movs	r1, #8
 800f408:	420a      	tst	r2, r1
 800f40a:	d004      	beq.n	800f416 <__ssvfscanf_r+0xcf6>
 800f40c:	623c      	str	r4, [r7, #32]
 800f40e:	e031      	b.n	800f474 <__ssvfscanf_r+0xd54>
 800f410:	0016      	movs	r6, r2
 800f412:	633a      	str	r2, [r7, #48]	; 0x30
 800f414:	e7f1      	b.n	800f3fa <__ssvfscanf_r+0xcda>
 800f416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f418:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f41a:	6852      	ldr	r2, [r2, #4]
 800f41c:	3a01      	subs	r2, #1
 800f41e:	604a      	str	r2, [r1, #4]
 800f420:	1c5a      	adds	r2, r3, #1
 800f422:	600a      	str	r2, [r1, #0]
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	1c62      	adds	r2, r4, #1
 800f428:	623a      	str	r2, [r7, #32]
 800f42a:	7023      	strb	r3, [r4, #0]
 800f42c:	2e00      	cmp	r6, #0
 800f42e:	d010      	beq.n	800f452 <__ssvfscanf_r+0xd32>
 800f430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f432:	1b54      	subs	r4, r2, r5
 800f434:	429c      	cmp	r4, r3
 800f436:	d30c      	bcc.n	800f452 <__ssvfscanf_r+0xd32>
 800f438:	005b      	lsls	r3, r3, #1
 800f43a:	0028      	movs	r0, r5
 800f43c:	0019      	movs	r1, r3
 800f43e:	633b      	str	r3, [r7, #48]	; 0x30
 800f440:	f001 fc68 	bl	8010d14 <realloc>
 800f444:	1e05      	subs	r5, r0, #0
 800f446:	d101      	bne.n	800f44c <__ssvfscanf_r+0xd2c>
 800f448:	f7ff fa40 	bl	800e8cc <__ssvfscanf_r+0x1ac>
 800f44c:	1903      	adds	r3, r0, r4
 800f44e:	623b      	str	r3, [r7, #32]
 800f450:	6030      	str	r0, [r6, #0]
 800f452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f454:	3b01      	subs	r3, #1
 800f456:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d00b      	beq.n	800f474 <__ssvfscanf_r+0xd54>
 800f45c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f45e:	685b      	ldr	r3, [r3, #4]
 800f460:	2b00      	cmp	r3, #0
 800f462:	dd01      	ble.n	800f468 <__ssvfscanf_r+0xd48>
 800f464:	6a3c      	ldr	r4, [r7, #32]
 800f466:	e7c9      	b.n	800f3fc <__ssvfscanf_r+0xcdc>
 800f468:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f46a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f46c:	f002 f866 	bl	801153c <__ssrefill_r>
 800f470:	2800      	cmp	r0, #0
 800f472:	d0f7      	beq.n	800f464 <__ssvfscanf_r+0xd44>
 800f474:	2300      	movs	r3, #0
 800f476:	6a3a      	ldr	r2, [r7, #32]
 800f478:	7013      	strb	r3, [r2, #0]
 800f47a:	1b55      	subs	r5, r2, r5
 800f47c:	2e00      	cmp	r6, #0
 800f47e:	d009      	beq.n	800f494 <__ssvfscanf_r+0xd74>
 800f480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f482:	1c69      	adds	r1, r5, #1
 800f484:	428b      	cmp	r3, r1
 800f486:	d905      	bls.n	800f494 <__ssvfscanf_r+0xd74>
 800f488:	6830      	ldr	r0, [r6, #0]
 800f48a:	f001 fc43 	bl	8010d14 <realloc>
 800f48e:	2800      	cmp	r0, #0
 800f490:	d000      	beq.n	800f494 <__ssvfscanf_r+0xd74>
 800f492:	6030      	str	r0, [r6, #0]
 800f494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f496:	195b      	adds	r3, r3, r5
 800f498:	63bb      	str	r3, [r7, #56]	; 0x38
 800f49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49c:	3301      	adds	r3, #1
 800f49e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f4a0:	e63c      	b.n	800f11c <__ssvfscanf_r+0x9fc>
 800f4a2:	22ae      	movs	r2, #174	; 0xae
 800f4a4:	2100      	movs	r1, #0
 800f4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4a8:	0052      	lsls	r2, r2, #1
 800f4aa:	3b01      	subs	r3, #1
 800f4ac:	6239      	str	r1, [r7, #32]
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d906      	bls.n	800f4c0 <__ssvfscanf_r+0xda0>
 800f4b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4b4:	3b5e      	subs	r3, #94	; 0x5e
 800f4b6:	3bff      	subs	r3, #255	; 0xff
 800f4b8:	623b      	str	r3, [r7, #32]
 800f4ba:	235e      	movs	r3, #94	; 0x5e
 800f4bc:	33ff      	adds	r3, #255	; 0xff
 800f4be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4c0:	24d8      	movs	r4, #216	; 0xd8
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	2248      	movs	r2, #72	; 0x48
 800f4c6:	0124      	lsls	r4, r4, #4
 800f4c8:	4334      	orrs	r4, r6
 800f4ca:	2680      	movs	r6, #128	; 0x80
 800f4cc:	61fb      	str	r3, [r7, #28]
 800f4ce:	3319      	adds	r3, #25
 800f4d0:	33ff      	adds	r3, #255	; 0xff
 800f4d2:	189b      	adds	r3, r3, r2
 800f4d4:	19dd      	adds	r5, r3, r7
 800f4d6:	00b6      	lsls	r6, r6, #2
 800f4d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4da:	681a      	ldr	r2, [r3, #0]
 800f4dc:	7813      	ldrb	r3, [r2, #0]
 800f4de:	2b39      	cmp	r3, #57	; 0x39
 800f4e0:	d80f      	bhi.n	800f502 <__ssvfscanf_r+0xde2>
 800f4e2:	2b2a      	cmp	r3, #42	; 0x2a
 800f4e4:	d91b      	bls.n	800f51e <__ssvfscanf_r+0xdfe>
 800f4e6:	0018      	movs	r0, r3
 800f4e8:	382b      	subs	r0, #43	; 0x2b
 800f4ea:	280e      	cmp	r0, #14
 800f4ec:	d817      	bhi.n	800f51e <__ssvfscanf_r+0xdfe>
 800f4ee:	f7f0 fe11 	bl	8000114 <__gnu_thumb1_case_uqi>
 800f4f2:	168f      	.short	0x168f
 800f4f4:	5416168f 	.word	0x5416168f
 800f4f8:	80808080 	.word	0x80808080
 800f4fc:	87808080 	.word	0x87808080
 800f500:	87          	.byte	0x87
 800f501:	00          	.byte	0x00
 800f502:	2b66      	cmp	r3, #102	; 0x66
 800f504:	d83a      	bhi.n	800f57c <__ssvfscanf_r+0xe5c>
 800f506:	2b60      	cmp	r3, #96	; 0x60
 800f508:	d803      	bhi.n	800f512 <__ssvfscanf_r+0xdf2>
 800f50a:	2b46      	cmp	r3, #70	; 0x46
 800f50c:	d805      	bhi.n	800f51a <__ssvfscanf_r+0xdfa>
 800f50e:	2b40      	cmp	r3, #64	; 0x40
 800f510:	d905      	bls.n	800f51e <__ssvfscanf_r+0xdfe>
 800f512:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f514:	290a      	cmp	r1, #10
 800f516:	dc71      	bgt.n	800f5fc <__ssvfscanf_r+0xedc>
 800f518:	e001      	b.n	800f51e <__ssvfscanf_r+0xdfe>
 800f51a:	2b58      	cmp	r3, #88	; 0x58
 800f51c:	d030      	beq.n	800f580 <__ssvfscanf_r+0xe60>
 800f51e:	05e3      	lsls	r3, r4, #23
 800f520:	d515      	bpl.n	800f54e <__ssvfscanf_r+0xe2e>
 800f522:	238c      	movs	r3, #140	; 0x8c
 800f524:	2248      	movs	r2, #72	; 0x48
 800f526:	005b      	lsls	r3, r3, #1
 800f528:	189b      	adds	r3, r3, r2
 800f52a:	19db      	adds	r3, r3, r7
 800f52c:	429d      	cmp	r5, r3
 800f52e:	d905      	bls.n	800f53c <__ssvfscanf_r+0xe1c>
 800f530:	3d01      	subs	r5, #1
 800f532:	7829      	ldrb	r1, [r5, #0]
 800f534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f536:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f538:	f001 ffc4 	bl	80114c4 <_sungetc_r>
 800f53c:	238c      	movs	r3, #140	; 0x8c
 800f53e:	2248      	movs	r2, #72	; 0x48
 800f540:	005b      	lsls	r3, r3, #1
 800f542:	189b      	adds	r3, r3, r2
 800f544:	19db      	adds	r3, r3, r7
 800f546:	429d      	cmp	r5, r3
 800f548:	d101      	bne.n	800f54e <__ssvfscanf_r+0xe2e>
 800f54a:	f7ff f9e6 	bl	800e91a <__ssvfscanf_r+0x1fa>
 800f54e:	2310      	movs	r3, #16
 800f550:	0022      	movs	r2, r4
 800f552:	401a      	ands	r2, r3
 800f554:	421c      	tst	r4, r3
 800f556:	d171      	bne.n	800f63c <__ssvfscanf_r+0xf1c>
 800f558:	218c      	movs	r1, #140	; 0x8c
 800f55a:	2048      	movs	r0, #72	; 0x48
 800f55c:	0049      	lsls	r1, r1, #1
 800f55e:	1809      	adds	r1, r1, r0
 800f560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f562:	697e      	ldr	r6, [r7, #20]
 800f564:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f566:	19c9      	adds	r1, r1, r7
 800f568:	702a      	strb	r2, [r5, #0]
 800f56a:	47b0      	blx	r6
 800f56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f56e:	1d1e      	adds	r6, r3, #4
 800f570:	06a3      	lsls	r3, r4, #26
 800f572:	d559      	bpl.n	800f628 <__ssvfscanf_r+0xf08>
 800f574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	6018      	str	r0, [r3, #0]
 800f57a:	e05b      	b.n	800f634 <__ssvfscanf_r+0xf14>
 800f57c:	2b78      	cmp	r3, #120	; 0x78
 800f57e:	d1ce      	bne.n	800f51e <__ssvfscanf_r+0xdfe>
 800f580:	21c0      	movs	r1, #192	; 0xc0
 800f582:	00c9      	lsls	r1, r1, #3
 800f584:	4021      	ands	r1, r4
 800f586:	42b1      	cmp	r1, r6
 800f588:	d1c9      	bne.n	800f51e <__ssvfscanf_r+0xdfe>
 800f58a:	4934      	ldr	r1, [pc, #208]	; (800f65c <__ssvfscanf_r+0xf3c>)
 800f58c:	4021      	ands	r1, r4
 800f58e:	24a0      	movs	r4, #160	; 0xa0
 800f590:	00e4      	lsls	r4, r4, #3
 800f592:	430c      	orrs	r4, r1
 800f594:	2110      	movs	r1, #16
 800f596:	6279      	str	r1, [r7, #36]	; 0x24
 800f598:	e00b      	b.n	800f5b2 <__ssvfscanf_r+0xe92>
 800f59a:	0521      	lsls	r1, r4, #20
 800f59c:	d509      	bpl.n	800f5b2 <__ssvfscanf_r+0xe92>
 800f59e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f5a0:	2900      	cmp	r1, #0
 800f5a2:	d102      	bne.n	800f5aa <__ssvfscanf_r+0xe8a>
 800f5a4:	3108      	adds	r1, #8
 800f5a6:	4334      	orrs	r4, r6
 800f5a8:	6279      	str	r1, [r7, #36]	; 0x24
 800f5aa:	0561      	lsls	r1, r4, #21
 800f5ac:	d504      	bpl.n	800f5b8 <__ssvfscanf_r+0xe98>
 800f5ae:	492c      	ldr	r1, [pc, #176]	; (800f660 <__ssvfscanf_r+0xf40>)
 800f5b0:	400c      	ands	r4, r1
 800f5b2:	702b      	strb	r3, [r5, #0]
 800f5b4:	3501      	adds	r5, #1
 800f5b6:	e00c      	b.n	800f5d2 <__ssvfscanf_r+0xeb2>
 800f5b8:	4b2a      	ldr	r3, [pc, #168]	; (800f664 <__ssvfscanf_r+0xf44>)
 800f5ba:	401c      	ands	r4, r3
 800f5bc:	6a3b      	ldr	r3, [r7, #32]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d004      	beq.n	800f5cc <__ssvfscanf_r+0xeac>
 800f5c2:	3b01      	subs	r3, #1
 800f5c4:	623b      	str	r3, [r7, #32]
 800f5c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	61fb      	str	r3, [r7, #28]
 800f5d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	3b01      	subs	r3, #1
 800f5da:	604b      	str	r3, [r1, #4]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	dd1c      	ble.n	800f61a <__ssvfscanf_r+0xefa>
 800f5e0:	3201      	adds	r2, #1
 800f5e2:	600a      	str	r2, [r1, #0]
 800f5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5e6:	3b01      	subs	r3, #1
 800f5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d000      	beq.n	800f5f0 <__ssvfscanf_r+0xed0>
 800f5ee:	e773      	b.n	800f4d8 <__ssvfscanf_r+0xdb8>
 800f5f0:	e795      	b.n	800f51e <__ssvfscanf_r+0xdfe>
 800f5f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5f4:	491c      	ldr	r1, [pc, #112]	; (800f668 <__ssvfscanf_r+0xf48>)
 800f5f6:	0040      	lsls	r0, r0, #1
 800f5f8:	5e41      	ldrsh	r1, [r0, r1]
 800f5fa:	6279      	str	r1, [r7, #36]	; 0x24
 800f5fc:	491b      	ldr	r1, [pc, #108]	; (800f66c <__ssvfscanf_r+0xf4c>)
 800f5fe:	e7d7      	b.n	800f5b0 <__ssvfscanf_r+0xe90>
 800f600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f602:	4919      	ldr	r1, [pc, #100]	; (800f668 <__ssvfscanf_r+0xf48>)
 800f604:	0040      	lsls	r0, r0, #1
 800f606:	5e41      	ldrsh	r1, [r0, r1]
 800f608:	6279      	str	r1, [r7, #36]	; 0x24
 800f60a:	2908      	cmp	r1, #8
 800f60c:	dcf6      	bgt.n	800f5fc <__ssvfscanf_r+0xedc>
 800f60e:	e786      	b.n	800f51e <__ssvfscanf_r+0xdfe>
 800f610:	2180      	movs	r1, #128	; 0x80
 800f612:	420c      	tst	r4, r1
 800f614:	d083      	beq.n	800f51e <__ssvfscanf_r+0xdfe>
 800f616:	438c      	bics	r4, r1
 800f618:	e7cb      	b.n	800f5b2 <__ssvfscanf_r+0xe92>
 800f61a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f61c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f61e:	f001 ff8d 	bl	801153c <__ssrefill_r>
 800f622:	2800      	cmp	r0, #0
 800f624:	d0de      	beq.n	800f5e4 <__ssvfscanf_r+0xec4>
 800f626:	e77a      	b.n	800f51e <__ssvfscanf_r+0xdfe>
 800f628:	2308      	movs	r3, #8
 800f62a:	421c      	tst	r4, r3
 800f62c:	d020      	beq.n	800f670 <__ssvfscanf_r+0xf50>
 800f62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	7018      	strb	r0, [r3, #0]
 800f634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f636:	633e      	str	r6, [r7, #48]	; 0x30
 800f638:	3301      	adds	r3, #1
 800f63a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f63c:	238c      	movs	r3, #140	; 0x8c
 800f63e:	2248      	movs	r2, #72	; 0x48
 800f640:	005b      	lsls	r3, r3, #1
 800f642:	189b      	adds	r3, r3, r2
 800f644:	19db      	adds	r3, r3, r7
 800f646:	1aed      	subs	r5, r5, r3
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	18ed      	adds	r5, r5, r3
 800f64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f64e:	195b      	adds	r3, r3, r5
 800f650:	f7ff f92d 	bl	800e8ae <__ssvfscanf_r+0x18e>
 800f654:	08014509 	.word	0x08014509
 800f658:	0000fff6 	.word	0x0000fff6
 800f65c:	fffffdff 	.word	0xfffffdff
 800f660:	fffffa7f 	.word	0xfffffa7f
 800f664:	fffffc7f 	.word	0xfffffc7f
 800f668:	08014836 	.word	0x08014836
 800f66c:	fffff47f 	.word	0xfffff47f
 800f670:	0763      	lsls	r3, r4, #29
 800f672:	d503      	bpl.n	800f67c <__ssvfscanf_r+0xf5c>
 800f674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	8018      	strh	r0, [r3, #0]
 800f67a:	e7db      	b.n	800f634 <__ssvfscanf_r+0xf14>
 800f67c:	2301      	movs	r3, #1
 800f67e:	0022      	movs	r2, r4
 800f680:	401a      	ands	r2, r3
 800f682:	421c      	tst	r4, r3
 800f684:	d000      	beq.n	800f688 <__ssvfscanf_r+0xf68>
 800f686:	e775      	b.n	800f574 <__ssvfscanf_r+0xe54>
 800f688:	07a4      	lsls	r4, r4, #30
 800f68a:	d400      	bmi.n	800f68e <__ssvfscanf_r+0xf6e>
 800f68c:	e772      	b.n	800f574 <__ssvfscanf_r+0xe54>
 800f68e:	4ba8      	ldr	r3, [pc, #672]	; (800f930 <__ssvfscanf_r+0x1210>)
 800f690:	6979      	ldr	r1, [r7, #20]
 800f692:	4299      	cmp	r1, r3
 800f694:	d10c      	bne.n	800f6b0 <__ssvfscanf_r+0xf90>
 800f696:	218c      	movs	r1, #140	; 0x8c
 800f698:	2048      	movs	r0, #72	; 0x48
 800f69a:	0049      	lsls	r1, r1, #1
 800f69c:	1809      	adds	r1, r1, r0
 800f69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f6a2:	19c9      	adds	r1, r1, r7
 800f6a4:	f001 fe46 	bl	8011334 <_strtoull_r>
 800f6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	c303      	stmia	r3!, {r0, r1}
 800f6ae:	e7c1      	b.n	800f634 <__ssvfscanf_r+0xf14>
 800f6b0:	218c      	movs	r1, #140	; 0x8c
 800f6b2:	2048      	movs	r0, #72	; 0x48
 800f6b4:	0049      	lsls	r1, r1, #1
 800f6b6:	1809      	adds	r1, r1, r0
 800f6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f6bc:	19c9      	adds	r1, r1, r7
 800f6be:	f001 fd87 	bl	80111d0 <_strtoll_r>
 800f6c2:	e7f1      	b.n	800f6a8 <__ssvfscanf_r+0xf88>
 800f6c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f6c6:	f000 fb9f 	bl	800fe08 <_localeconv_r>
 800f6ca:	22ae      	movs	r2, #174	; 0xae
 800f6cc:	2100      	movs	r1, #0
 800f6ce:	6803      	ldr	r3, [r0, #0]
 800f6d0:	0052      	lsls	r2, r2, #1
 800f6d2:	603b      	str	r3, [r7, #0]
 800f6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6d6:	60f9      	str	r1, [r7, #12]
 800f6d8:	3b01      	subs	r3, #1
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d906      	bls.n	800f6ec <__ssvfscanf_r+0xfcc>
 800f6de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6e0:	3b5e      	subs	r3, #94	; 0x5e
 800f6e2:	3bff      	subs	r3, #255	; 0xff
 800f6e4:	60fb      	str	r3, [r7, #12]
 800f6e6:	235e      	movs	r3, #94	; 0x5e
 800f6e8:	33ff      	adds	r3, #255	; 0xff
 800f6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6ec:	23f0      	movs	r3, #240	; 0xf0
 800f6ee:	00db      	lsls	r3, r3, #3
 800f6f0:	431e      	orrs	r6, r3
 800f6f2:	238c      	movs	r3, #140	; 0x8c
 800f6f4:	2248      	movs	r2, #72	; 0x48
 800f6f6:	2400      	movs	r4, #0
 800f6f8:	005b      	lsls	r3, r3, #1
 800f6fa:	189b      	adds	r3, r3, r2
 800f6fc:	623c      	str	r4, [r7, #32]
 800f6fe:	607c      	str	r4, [r7, #4]
 800f700:	60bc      	str	r4, [r7, #8]
 800f702:	61fc      	str	r4, [r7, #28]
 800f704:	613c      	str	r4, [r7, #16]
 800f706:	19dd      	adds	r5, r3, r7
 800f708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	781a      	ldrb	r2, [r3, #0]
 800f70e:	0010      	movs	r0, r2
 800f710:	382b      	subs	r0, #43	; 0x2b
 800f712:	284e      	cmp	r0, #78	; 0x4e
 800f714:	d900      	bls.n	800f718 <__ssvfscanf_r+0xff8>
 800f716:	e133      	b.n	800f980 <__ssvfscanf_r+0x1260>
 800f718:	f7f0 fd06 	bl	8000128 <__gnu_thumb1_case_uhi>
 800f71c:	0132009b 	.word	0x0132009b
 800f720:	0132009b 	.word	0x0132009b
 800f724:	004f0132 	.word	0x004f0132
 800f728:	00720072 	.word	0x00720072
 800f72c:	00720072 	.word	0x00720072
 800f730:	00720072 	.word	0x00720072
 800f734:	00720072 	.word	0x00720072
 800f738:	01320072 	.word	0x01320072
 800f73c:	01320132 	.word	0x01320132
 800f740:	01320132 	.word	0x01320132
 800f744:	01320132 	.word	0x01320132
 800f748:	007b00bc 	.word	0x007b00bc
 800f74c:	007b007b 	.word	0x007b007b
 800f750:	00f7012f 	.word	0x00f7012f
 800f754:	01320132 	.word	0x01320132
 800f758:	013200e3 	.word	0x013200e3
 800f75c:	01320132 	.word	0x01320132
 800f760:	00a00132 	.word	0x00a00132
 800f764:	01120132 	.word	0x01120132
 800f768:	01320132 	.word	0x01320132
 800f76c:	01010132 	.word	0x01010132
 800f770:	01320132 	.word	0x01320132
 800f774:	00820132 	.word	0x00820132
 800f778:	01320105 	.word	0x01320105
 800f77c:	01320132 	.word	0x01320132
 800f780:	01320132 	.word	0x01320132
 800f784:	01320132 	.word	0x01320132
 800f788:	007b00bc 	.word	0x007b00bc
 800f78c:	007b007b 	.word	0x007b007b
 800f790:	00f7012f 	.word	0x00f7012f
 800f794:	01320132 	.word	0x01320132
 800f798:	013200e3 	.word	0x013200e3
 800f79c:	01320132 	.word	0x01320132
 800f7a0:	00a00132 	.word	0x00a00132
 800f7a4:	01120132 	.word	0x01120132
 800f7a8:	01320132 	.word	0x01320132
 800f7ac:	01010132 	.word	0x01010132
 800f7b0:	01320132 	.word	0x01320132
 800f7b4:	00820132 	.word	0x00820132
 800f7b8:	0105      	.short	0x0105
 800f7ba:	05f1      	lsls	r1, r6, #23
 800f7bc:	d520      	bpl.n	800f800 <__ssvfscanf_r+0x10e0>
 800f7be:	2280      	movs	r2, #128	; 0x80
 800f7c0:	4396      	bics	r6, r2
 800f7c2:	69fa      	ldr	r2, [r7, #28]
 800f7c4:	3201      	adds	r2, #1
 800f7c6:	61fa      	str	r2, [r7, #28]
 800f7c8:	68fa      	ldr	r2, [r7, #12]
 800f7ca:	2a00      	cmp	r2, #0
 800f7cc:	d004      	beq.n	800f7d8 <__ssvfscanf_r+0x10b8>
 800f7ce:	3a01      	subs	r2, #1
 800f7d0:	60fa      	str	r2, [r7, #12]
 800f7d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f7d4:	3201      	adds	r2, #1
 800f7d6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f7d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f7da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7dc:	3a01      	subs	r2, #1
 800f7de:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f7e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7e2:	3201      	adds	r2, #1
 800f7e4:	63ba      	str	r2, [r7, #56]	; 0x38
 800f7e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7e8:	6852      	ldr	r2, [r2, #4]
 800f7ea:	3a01      	subs	r2, #1
 800f7ec:	604a      	str	r2, [r1, #4]
 800f7ee:	2a00      	cmp	r2, #0
 800f7f0:	dc00      	bgt.n	800f7f4 <__ssvfscanf_r+0x10d4>
 800f7f2:	e0d6      	b.n	800f9a2 <__ssvfscanf_r+0x1282>
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	600b      	str	r3, [r1, #0]
 800f7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d184      	bne.n	800f708 <__ssvfscanf_r+0xfe8>
 800f7fe:	e057      	b.n	800f8b0 <__ssvfscanf_r+0x1190>
 800f800:	6a39      	ldr	r1, [r7, #32]
 800f802:	1909      	adds	r1, r1, r4
 800f804:	2900      	cmp	r1, #0
 800f806:	d153      	bne.n	800f8b0 <__ssvfscanf_r+0x1190>
 800f808:	494a      	ldr	r1, [pc, #296]	; (800f934 <__ssvfscanf_r+0x1214>)
 800f80a:	400e      	ands	r6, r1
 800f80c:	702a      	strb	r2, [r5, #0]
 800f80e:	3501      	adds	r5, #1
 800f810:	e7e2      	b.n	800f7d8 <__ssvfscanf_r+0x10b8>
 800f812:	0531      	lsls	r1, r6, #20
 800f814:	d54c      	bpl.n	800f8b0 <__ssvfscanf_r+0x1190>
 800f816:	6a39      	ldr	r1, [r7, #32]
 800f818:	1909      	adds	r1, r1, r4
 800f81a:	2900      	cmp	r1, #0
 800f81c:	d040      	beq.n	800f8a0 <__ssvfscanf_r+0x1180>
 800f81e:	e047      	b.n	800f8b0 <__ssvfscanf_r+0x1190>
 800f820:	2198      	movs	r1, #152	; 0x98
 800f822:	2080      	movs	r0, #128	; 0x80
 800f824:	0109      	lsls	r1, r1, #4
 800f826:	4031      	ands	r1, r6
 800f828:	0040      	lsls	r0, r0, #1
 800f82a:	4281      	cmp	r1, r0
 800f82c:	d140      	bne.n	800f8b0 <__ssvfscanf_r+0x1190>
 800f82e:	69f9      	ldr	r1, [r7, #28]
 800f830:	2901      	cmp	r1, #1
 800f832:	d13d      	bne.n	800f8b0 <__ssvfscanf_r+0x1190>
 800f834:	2080      	movs	r0, #128	; 0x80
 800f836:	4940      	ldr	r1, [pc, #256]	; (800f938 <__ssvfscanf_r+0x1218>)
 800f838:	0100      	lsls	r0, r0, #4
 800f83a:	400e      	ands	r6, r1
 800f83c:	3132      	adds	r1, #50	; 0x32
 800f83e:	31ff      	adds	r1, #255	; 0xff
 800f840:	7029      	strb	r1, [r5, #0]
 800f842:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f844:	4306      	orrs	r6, r0
 800f846:	3901      	subs	r1, #1
 800f848:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f84a:	3501      	adds	r5, #1
 800f84c:	2100      	movs	r1, #0
 800f84e:	61f9      	str	r1, [r7, #28]
 800f850:	e7dc      	b.n	800f80c <__ssvfscanf_r+0x10ec>
 800f852:	2180      	movs	r1, #128	; 0x80
 800f854:	420e      	tst	r6, r1
 800f856:	d02b      	beq.n	800f8b0 <__ssvfscanf_r+0x1190>
 800f858:	438e      	bics	r6, r1
 800f85a:	e7d7      	b.n	800f80c <__ssvfscanf_r+0x10ec>
 800f85c:	6a39      	ldr	r1, [r7, #32]
 800f85e:	2900      	cmp	r1, #0
 800f860:	d10d      	bne.n	800f87e <__ssvfscanf_r+0x115e>
 800f862:	69f9      	ldr	r1, [r7, #28]
 800f864:	2900      	cmp	r1, #0
 800f866:	d10e      	bne.n	800f886 <__ssvfscanf_r+0x1166>
 800f868:	21e0      	movs	r1, #224	; 0xe0
 800f86a:	0030      	movs	r0, r6
 800f86c:	00c9      	lsls	r1, r1, #3
 800f86e:	4008      	ands	r0, r1
 800f870:	4288      	cmp	r0, r1
 800f872:	d108      	bne.n	800f886 <__ssvfscanf_r+0x1166>
 800f874:	4931      	ldr	r1, [pc, #196]	; (800f93c <__ssvfscanf_r+0x121c>)
 800f876:	400e      	ands	r6, r1
 800f878:	2101      	movs	r1, #1
 800f87a:	6239      	str	r1, [r7, #32]
 800f87c:	e7c6      	b.n	800f80c <__ssvfscanf_r+0x10ec>
 800f87e:	6a39      	ldr	r1, [r7, #32]
 800f880:	2902      	cmp	r1, #2
 800f882:	d100      	bne.n	800f886 <__ssvfscanf_r+0x1166>
 800f884:	e089      	b.n	800f99a <__ssvfscanf_r+0x127a>
 800f886:	2c01      	cmp	r4, #1
 800f888:	d001      	beq.n	800f88e <__ssvfscanf_r+0x116e>
 800f88a:	2c04      	cmp	r4, #4
 800f88c:	d110      	bne.n	800f8b0 <__ssvfscanf_r+0x1190>
 800f88e:	3401      	adds	r4, #1
 800f890:	b2e4      	uxtb	r4, r4
 800f892:	e7bb      	b.n	800f80c <__ssvfscanf_r+0x10ec>
 800f894:	0531      	lsls	r1, r6, #20
 800f896:	d508      	bpl.n	800f8aa <__ssvfscanf_r+0x118a>
 800f898:	6a39      	ldr	r1, [r7, #32]
 800f89a:	1909      	adds	r1, r1, r4
 800f89c:	2900      	cmp	r1, #0
 800f89e:	d104      	bne.n	800f8aa <__ssvfscanf_r+0x118a>
 800f8a0:	4824      	ldr	r0, [pc, #144]	; (800f934 <__ssvfscanf_r+0x1214>)
 800f8a2:	000c      	movs	r4, r1
 800f8a4:	4006      	ands	r6, r0
 800f8a6:	6239      	str	r1, [r7, #32]
 800f8a8:	e7b0      	b.n	800f80c <__ssvfscanf_r+0x10ec>
 800f8aa:	6a39      	ldr	r1, [r7, #32]
 800f8ac:	2901      	cmp	r1, #1
 800f8ae:	d076      	beq.n	800f99e <__ssvfscanf_r+0x127e>
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d001      	beq.n	800f8ba <__ssvfscanf_r+0x119a>
 800f8b6:	4b20      	ldr	r3, [pc, #128]	; (800f938 <__ssvfscanf_r+0x1218>)
 800f8b8:	401e      	ands	r6, r3
 800f8ba:	6a3b      	ldr	r3, [r7, #32]
 800f8bc:	3b01      	subs	r3, #1
 800f8be:	2b01      	cmp	r3, #1
 800f8c0:	d877      	bhi.n	800f9b2 <__ssvfscanf_r+0x1292>
 800f8c2:	238c      	movs	r3, #140	; 0x8c
 800f8c4:	2248      	movs	r2, #72	; 0x48
 800f8c6:	005b      	lsls	r3, r3, #1
 800f8c8:	189b      	adds	r3, r3, r2
 800f8ca:	19db      	adds	r3, r3, r7
 800f8cc:	429d      	cmp	r5, r3
 800f8ce:	d801      	bhi.n	800f8d4 <__ssvfscanf_r+0x11b4>
 800f8d0:	f7ff f823 	bl	800e91a <__ssvfscanf_r+0x1fa>
 800f8d4:	3d01      	subs	r5, #1
 800f8d6:	7829      	ldrb	r1, [r5, #0]
 800f8d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f8dc:	f001 fdf2 	bl	80114c4 <_sungetc_r>
 800f8e0:	e7ef      	b.n	800f8c2 <__ssvfscanf_r+0x11a2>
 800f8e2:	2c00      	cmp	r4, #0
 800f8e4:	d10c      	bne.n	800f900 <__ssvfscanf_r+0x11e0>
 800f8e6:	69f9      	ldr	r1, [r7, #28]
 800f8e8:	2900      	cmp	r1, #0
 800f8ea:	d1e4      	bne.n	800f8b6 <__ssvfscanf_r+0x1196>
 800f8ec:	21e0      	movs	r1, #224	; 0xe0
 800f8ee:	0030      	movs	r0, r6
 800f8f0:	00c9      	lsls	r1, r1, #3
 800f8f2:	4008      	ands	r0, r1
 800f8f4:	4288      	cmp	r0, r1
 800f8f6:	d1e0      	bne.n	800f8ba <__ssvfscanf_r+0x119a>
 800f8f8:	4910      	ldr	r1, [pc, #64]	; (800f93c <__ssvfscanf_r+0x121c>)
 800f8fa:	3401      	adds	r4, #1
 800f8fc:	400e      	ands	r6, r1
 800f8fe:	e785      	b.n	800f80c <__ssvfscanf_r+0x10ec>
 800f900:	20fd      	movs	r0, #253	; 0xfd
 800f902:	1ee1      	subs	r1, r4, #3
 800f904:	4201      	tst	r1, r0
 800f906:	d1d3      	bne.n	800f8b0 <__ssvfscanf_r+0x1190>
 800f908:	e7c1      	b.n	800f88e <__ssvfscanf_r+0x116e>
 800f90a:	0531      	lsls	r1, r6, #20
 800f90c:	d503      	bpl.n	800f916 <__ssvfscanf_r+0x11f6>
 800f90e:	6a39      	ldr	r1, [r7, #32]
 800f910:	1909      	adds	r1, r1, r4
 800f912:	2900      	cmp	r1, #0
 800f914:	d0c4      	beq.n	800f8a0 <__ssvfscanf_r+0x1180>
 800f916:	2c02      	cmp	r4, #2
 800f918:	d1ca      	bne.n	800f8b0 <__ssvfscanf_r+0x1190>
 800f91a:	2403      	movs	r4, #3
 800f91c:	e776      	b.n	800f80c <__ssvfscanf_r+0x10ec>
 800f91e:	2c06      	cmp	r4, #6
 800f920:	d1c6      	bne.n	800f8b0 <__ssvfscanf_r+0x1190>
 800f922:	2407      	movs	r4, #7
 800f924:	e772      	b.n	800f80c <__ssvfscanf_r+0x10ec>
 800f926:	2c07      	cmp	r4, #7
 800f928:	d1c2      	bne.n	800f8b0 <__ssvfscanf_r+0x1190>
 800f92a:	2408      	movs	r4, #8
 800f92c:	e76e      	b.n	800f80c <__ssvfscanf_r+0x10ec>
 800f92e:	46c0      	nop			; (mov r8, r8)
 800f930:	0800bae1 	.word	0x0800bae1
 800f934:	fffffe7f 	.word	0xfffffe7f
 800f938:	fffffeff 	.word	0xfffffeff
 800f93c:	fffff87f 	.word	0xfffff87f
 800f940:	0531      	lsls	r1, r6, #20
 800f942:	d5b5      	bpl.n	800f8b0 <__ssvfscanf_r+0x1190>
 800f944:	21a0      	movs	r1, #160	; 0xa0
 800f946:	2080      	movs	r0, #128	; 0x80
 800f948:	00c9      	lsls	r1, r1, #3
 800f94a:	00c0      	lsls	r0, r0, #3
 800f94c:	4031      	ands	r1, r6
 800f94e:	4281      	cmp	r1, r0
 800f950:	d004      	beq.n	800f95c <__ssvfscanf_r+0x123c>
 800f952:	4206      	tst	r6, r0
 800f954:	d0ac      	beq.n	800f8b0 <__ssvfscanf_r+0x1190>
 800f956:	69f9      	ldr	r1, [r7, #28]
 800f958:	2900      	cmp	r1, #0
 800f95a:	d0ae      	beq.n	800f8ba <__ssvfscanf_r+0x119a>
 800f95c:	2180      	movs	r1, #128	; 0x80
 800f95e:	0089      	lsls	r1, r1, #2
 800f960:	420e      	tst	r6, r1
 800f962:	d104      	bne.n	800f96e <__ssvfscanf_r+0x124e>
 800f964:	69f9      	ldr	r1, [r7, #28]
 800f966:	6938      	ldr	r0, [r7, #16]
 800f968:	607d      	str	r5, [r7, #4]
 800f96a:	1a09      	subs	r1, r1, r0
 800f96c:	60b9      	str	r1, [r7, #8]
 800f96e:	20c0      	movs	r0, #192	; 0xc0
 800f970:	4973      	ldr	r1, [pc, #460]	; (800fb40 <__ssvfscanf_r+0x1420>)
 800f972:	0040      	lsls	r0, r0, #1
 800f974:	400e      	ands	r6, r1
 800f976:	4306      	orrs	r6, r0
 800f978:	e768      	b.n	800f84c <__ssvfscanf_r+0x112c>
 800f97a:	0531      	lsls	r1, r6, #20
 800f97c:	d5e2      	bpl.n	800f944 <__ssvfscanf_r+0x1224>
 800f97e:	e74a      	b.n	800f816 <__ssvfscanf_r+0x10f6>
 800f980:	6839      	ldr	r1, [r7, #0]
 800f982:	7809      	ldrb	r1, [r1, #0]
 800f984:	4291      	cmp	r1, r2
 800f986:	d193      	bne.n	800f8b0 <__ssvfscanf_r+0x1190>
 800f988:	2180      	movs	r1, #128	; 0x80
 800f98a:	0089      	lsls	r1, r1, #2
 800f98c:	420e      	tst	r6, r1
 800f98e:	d08f      	beq.n	800f8b0 <__ssvfscanf_r+0x1190>
 800f990:	496c      	ldr	r1, [pc, #432]	; (800fb44 <__ssvfscanf_r+0x1424>)
 800f992:	400e      	ands	r6, r1
 800f994:	69f9      	ldr	r1, [r7, #28]
 800f996:	6139      	str	r1, [r7, #16]
 800f998:	e738      	b.n	800f80c <__ssvfscanf_r+0x10ec>
 800f99a:	2103      	movs	r1, #3
 800f99c:	e76d      	b.n	800f87a <__ssvfscanf_r+0x115a>
 800f99e:	2102      	movs	r1, #2
 800f9a0:	e76b      	b.n	800f87a <__ssvfscanf_r+0x115a>
 800f9a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f9a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f9a6:	f001 fdc9 	bl	801153c <__ssrefill_r>
 800f9aa:	2800      	cmp	r0, #0
 800f9ac:	d100      	bne.n	800f9b0 <__ssvfscanf_r+0x1290>
 800f9ae:	e723      	b.n	800f7f8 <__ssvfscanf_r+0x10d8>
 800f9b0:	e77e      	b.n	800f8b0 <__ssvfscanf_r+0x1190>
 800f9b2:	1e63      	subs	r3, r4, #1
 800f9b4:	2b06      	cmp	r3, #6
 800f9b6:	d825      	bhi.n	800fa04 <__ssvfscanf_r+0x12e4>
 800f9b8:	2c02      	cmp	r4, #2
 800f9ba:	d837      	bhi.n	800fa2c <__ssvfscanf_r+0x130c>
 800f9bc:	238c      	movs	r3, #140	; 0x8c
 800f9be:	2248      	movs	r2, #72	; 0x48
 800f9c0:	005b      	lsls	r3, r3, #1
 800f9c2:	189b      	adds	r3, r3, r2
 800f9c4:	19db      	adds	r3, r3, r7
 800f9c6:	429d      	cmp	r5, r3
 800f9c8:	d801      	bhi.n	800f9ce <__ssvfscanf_r+0x12ae>
 800f9ca:	f7fe ffa6 	bl	800e91a <__ssvfscanf_r+0x1fa>
 800f9ce:	3d01      	subs	r5, #1
 800f9d0:	7829      	ldrb	r1, [r5, #0]
 800f9d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f9d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f9d6:	f001 fd75 	bl	80114c4 <_sungetc_r>
 800f9da:	e7ef      	b.n	800f9bc <__ssvfscanf_r+0x129c>
 800f9dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f9e0:	3b01      	subs	r3, #1
 800f9e2:	7819      	ldrb	r1, [r3, #0]
 800f9e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9e8:	f001 fd6c 	bl	80114c4 <_sungetc_r>
 800f9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9ee:	6a3a      	ldr	r2, [r7, #32]
 800f9f0:	189b      	adds	r3, r3, r2
 800f9f2:	b2db      	uxtb	r3, r3
 800f9f4:	2b03      	cmp	r3, #3
 800f9f6:	d8f1      	bhi.n	800f9dc <__ssvfscanf_r+0x12bc>
 800f9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9fa:	3c03      	subs	r4, #3
 800f9fc:	b2e4      	uxtb	r4, r4
 800f9fe:	1b1b      	subs	r3, r3, r4
 800fa00:	1b2d      	subs	r5, r5, r4
 800fa02:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa04:	05f3      	lsls	r3, r6, #23
 800fa06:	d52f      	bpl.n	800fa68 <__ssvfscanf_r+0x1348>
 800fa08:	0573      	lsls	r3, r6, #21
 800fa0a:	d514      	bpl.n	800fa36 <__ssvfscanf_r+0x1316>
 800fa0c:	238c      	movs	r3, #140	; 0x8c
 800fa0e:	2248      	movs	r2, #72	; 0x48
 800fa10:	005b      	lsls	r3, r3, #1
 800fa12:	189b      	adds	r3, r3, r2
 800fa14:	19db      	adds	r3, r3, r7
 800fa16:	429d      	cmp	r5, r3
 800fa18:	d801      	bhi.n	800fa1e <__ssvfscanf_r+0x12fe>
 800fa1a:	f7fe ff7e 	bl	800e91a <__ssvfscanf_r+0x1fa>
 800fa1e:	3d01      	subs	r5, #1
 800fa20:	7829      	ldrb	r1, [r5, #0]
 800fa22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa26:	f001 fd4d 	bl	80114c4 <_sungetc_r>
 800fa2a:	e7ef      	b.n	800fa0c <__ssvfscanf_r+0x12ec>
 800fa2c:	1b63      	subs	r3, r4, r5
 800fa2e:	b2db      	uxtb	r3, r3
 800fa30:	63fd      	str	r5, [r7, #60]	; 0x3c
 800fa32:	623b      	str	r3, [r7, #32]
 800fa34:	e7da      	b.n	800f9ec <__ssvfscanf_r+0x12cc>
 800fa36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa38:	1e6c      	subs	r4, r5, #1
 800fa3a:	7821      	ldrb	r1, [r4, #0]
 800fa3c:	3b01      	subs	r3, #1
 800fa3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa40:	2965      	cmp	r1, #101	; 0x65
 800fa42:	d00a      	beq.n	800fa5a <__ssvfscanf_r+0x133a>
 800fa44:	2945      	cmp	r1, #69	; 0x45
 800fa46:	d008      	beq.n	800fa5a <__ssvfscanf_r+0x133a>
 800fa48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa4c:	f001 fd3a 	bl	80114c4 <_sungetc_r>
 800fa50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa52:	1eac      	subs	r4, r5, #2
 800fa54:	3b02      	subs	r3, #2
 800fa56:	7821      	ldrb	r1, [r4, #0]
 800fa58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa5a:	0025      	movs	r5, r4
 800fa5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa60:	f001 fd30 	bl	80114c4 <_sungetc_r>
 800fa64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa66:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa68:	2310      	movs	r3, #16
 800fa6a:	0032      	movs	r2, r6
 800fa6c:	401a      	ands	r2, r3
 800fa6e:	421e      	tst	r6, r3
 800fa70:	d001      	beq.n	800fa76 <__ssvfscanf_r+0x1356>
 800fa72:	f7fe fe71 	bl	800e758 <__ssvfscanf_r+0x38>
 800fa76:	23c0      	movs	r3, #192	; 0xc0
 800fa78:	2180      	movs	r1, #128	; 0x80
 800fa7a:	00db      	lsls	r3, r3, #3
 800fa7c:	702a      	strb	r2, [r5, #0]
 800fa7e:	4033      	ands	r3, r6
 800fa80:	00c9      	lsls	r1, r1, #3
 800fa82:	428b      	cmp	r3, r1
 800fa84:	d11f      	bne.n	800fac6 <__ssvfscanf_r+0x13a6>
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	69fa      	ldr	r2, [r7, #28]
 800fa8a:	69f9      	ldr	r1, [r7, #28]
 800fa8c:	1a9a      	subs	r2, r3, r2
 800fa8e:	428b      	cmp	r3, r1
 800fa90:	d125      	bne.n	800fade <__ssvfscanf_r+0x13be>
 800fa92:	238c      	movs	r3, #140	; 0x8c
 800fa94:	2148      	movs	r1, #72	; 0x48
 800fa96:	005b      	lsls	r3, r3, #1
 800fa98:	185b      	adds	r3, r3, r1
 800fa9a:	19d9      	adds	r1, r3, r7
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800faa0:	f7fb fef0 	bl	800b884 <_strtod_r>
 800faa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa6:	0004      	movs	r4, r0
 800faa8:	3304      	adds	r3, #4
 800faaa:	000d      	movs	r5, r1
 800faac:	623b      	str	r3, [r7, #32]
 800faae:	07f3      	lsls	r3, r6, #31
 800fab0:	d523      	bpl.n	800fafa <__ssvfscanf_r+0x13da>
 800fab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	601c      	str	r4, [r3, #0]
 800fab8:	605d      	str	r5, [r3, #4]
 800faba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fabc:	3301      	adds	r3, #1
 800fabe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fac0:	6a3b      	ldr	r3, [r7, #32]
 800fac2:	f7fe ffa5 	bl	800ea10 <__ssvfscanf_r+0x2f0>
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d0e2      	beq.n	800fa92 <__ssvfscanf_r+0x1372>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fad0:	1c59      	adds	r1, r3, #1
 800fad2:	230a      	movs	r3, #10
 800fad4:	f7fb ff72 	bl	800b9bc <_strtol_r>
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	687d      	ldr	r5, [r7, #4]
 800fadc:	1ac2      	subs	r2, r0, r3
 800fade:	2148      	movs	r1, #72	; 0x48
 800fae0:	4b19      	ldr	r3, [pc, #100]	; (800fb48 <__ssvfscanf_r+0x1428>)
 800fae2:	185b      	adds	r3, r3, r1
 800fae4:	19db      	adds	r3, r3, r7
 800fae6:	429d      	cmp	r5, r3
 800fae8:	d302      	bcc.n	800faf0 <__ssvfscanf_r+0x13d0>
 800faea:	4b18      	ldr	r3, [pc, #96]	; (800fb4c <__ssvfscanf_r+0x142c>)
 800faec:	185b      	adds	r3, r3, r1
 800faee:	19dd      	adds	r5, r3, r7
 800faf0:	0028      	movs	r0, r5
 800faf2:	4917      	ldr	r1, [pc, #92]	; (800fb50 <__ssvfscanf_r+0x1430>)
 800faf4:	f7fc f8fc 	bl	800bcf0 <sprintf>
 800faf8:	e7cb      	b.n	800fa92 <__ssvfscanf_r+0x1372>
 800fafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb00:	07b6      	lsls	r6, r6, #30
 800fb02:	d4d8      	bmi.n	800fab6 <__ssvfscanf_r+0x1396>
 800fb04:	0002      	movs	r2, r0
 800fb06:	000b      	movs	r3, r1
 800fb08:	f7f2 fbf4 	bl	80022f4 <__aeabi_dcmpun>
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	d005      	beq.n	800fb1c <__ssvfscanf_r+0x13fc>
 800fb10:	4810      	ldr	r0, [pc, #64]	; (800fb54 <__ssvfscanf_r+0x1434>)
 800fb12:	f7fc fabf 	bl	800c094 <nanf>
 800fb16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb18:	6018      	str	r0, [r3, #0]
 800fb1a:	e7ce      	b.n	800faba <__ssvfscanf_r+0x139a>
 800fb1c:	0020      	movs	r0, r4
 800fb1e:	0029      	movs	r1, r5
 800fb20:	f7f2 fc92 	bl	8002448 <__aeabi_d2f>
 800fb24:	e7f7      	b.n	800fb16 <__ssvfscanf_r+0x13f6>
 800fb26:	00a3      	lsls	r3, r4, #2
 800fb28:	18ed      	adds	r5, r5, r3
 800fb2a:	682b      	ldr	r3, [r5, #0]
 800fb2c:	3401      	adds	r4, #1
 800fb2e:	6818      	ldr	r0, [r3, #0]
 800fb30:	f7fa fe58 	bl	800a7e4 <free>
 800fb34:	2200      	movs	r2, #0
 800fb36:	682b      	ldr	r3, [r5, #0]
 800fb38:	601a      	str	r2, [r3, #0]
 800fb3a:	f7fe ffc3 	bl	800eac4 <__ssvfscanf_r+0x3a4>
 800fb3e:	46c0      	nop			; (mov r8, r8)
 800fb40:	fffff07f 	.word	0xfffff07f
 800fb44:	fffffd7f 	.word	0xfffffd7f
 800fb48:	0000026b 	.word	0x0000026b
 800fb4c:	0000026a 	.word	0x0000026a
 800fb50:	08014830 	.word	0x08014830
 800fb54:	08014893 	.word	0x08014893

0800fb58 <_fclose_r>:
 800fb58:	b570      	push	{r4, r5, r6, lr}
 800fb5a:	0005      	movs	r5, r0
 800fb5c:	1e0c      	subs	r4, r1, #0
 800fb5e:	d102      	bne.n	800fb66 <_fclose_r+0xe>
 800fb60:	2600      	movs	r6, #0
 800fb62:	0030      	movs	r0, r6
 800fb64:	bd70      	pop	{r4, r5, r6, pc}
 800fb66:	2800      	cmp	r0, #0
 800fb68:	d004      	beq.n	800fb74 <_fclose_r+0x1c>
 800fb6a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d101      	bne.n	800fb74 <_fclose_r+0x1c>
 800fb70:	f7fc f856 	bl	800bc20 <__sinit>
 800fb74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb76:	07db      	lsls	r3, r3, #31
 800fb78:	d405      	bmi.n	800fb86 <_fclose_r+0x2e>
 800fb7a:	89a3      	ldrh	r3, [r4, #12]
 800fb7c:	059b      	lsls	r3, r3, #22
 800fb7e:	d402      	bmi.n	800fb86 <_fclose_r+0x2e>
 800fb80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb82:	f7fc fa6b 	bl	800c05c <__retarget_lock_acquire_recursive>
 800fb86:	220c      	movs	r2, #12
 800fb88:	5ea3      	ldrsh	r3, [r4, r2]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d109      	bne.n	800fba2 <_fclose_r+0x4a>
 800fb8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fb90:	3301      	adds	r3, #1
 800fb92:	0016      	movs	r6, r2
 800fb94:	401e      	ands	r6, r3
 800fb96:	421a      	tst	r2, r3
 800fb98:	d1e2      	bne.n	800fb60 <_fclose_r+0x8>
 800fb9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb9c:	f7fc fa5f 	bl	800c05e <__retarget_lock_release_recursive>
 800fba0:	e7df      	b.n	800fb62 <_fclose_r+0xa>
 800fba2:	0021      	movs	r1, r4
 800fba4:	0028      	movs	r0, r5
 800fba6:	f000 f837 	bl	800fc18 <__sflush_r>
 800fbaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fbac:	0006      	movs	r6, r0
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d006      	beq.n	800fbc0 <_fclose_r+0x68>
 800fbb2:	0028      	movs	r0, r5
 800fbb4:	69e1      	ldr	r1, [r4, #28]
 800fbb6:	4798      	blx	r3
 800fbb8:	2800      	cmp	r0, #0
 800fbba:	da01      	bge.n	800fbc0 <_fclose_r+0x68>
 800fbbc:	2601      	movs	r6, #1
 800fbbe:	4276      	negs	r6, r6
 800fbc0:	89a3      	ldrh	r3, [r4, #12]
 800fbc2:	061b      	lsls	r3, r3, #24
 800fbc4:	d503      	bpl.n	800fbce <_fclose_r+0x76>
 800fbc6:	0028      	movs	r0, r5
 800fbc8:	6921      	ldr	r1, [r4, #16]
 800fbca:	f7fc facf 	bl	800c16c <_free_r>
 800fbce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fbd0:	2900      	cmp	r1, #0
 800fbd2:	d008      	beq.n	800fbe6 <_fclose_r+0x8e>
 800fbd4:	0023      	movs	r3, r4
 800fbd6:	3340      	adds	r3, #64	; 0x40
 800fbd8:	4299      	cmp	r1, r3
 800fbda:	d002      	beq.n	800fbe2 <_fclose_r+0x8a>
 800fbdc:	0028      	movs	r0, r5
 800fbde:	f7fc fac5 	bl	800c16c <_free_r>
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	6323      	str	r3, [r4, #48]	; 0x30
 800fbe6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800fbe8:	2900      	cmp	r1, #0
 800fbea:	d004      	beq.n	800fbf6 <_fclose_r+0x9e>
 800fbec:	0028      	movs	r0, r5
 800fbee:	f7fc fabd 	bl	800c16c <_free_r>
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	6463      	str	r3, [r4, #68]	; 0x44
 800fbf6:	f7fc f803 	bl	800bc00 <__sfp_lock_acquire>
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	81a3      	strh	r3, [r4, #12]
 800fbfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc00:	07db      	lsls	r3, r3, #31
 800fc02:	d402      	bmi.n	800fc0a <_fclose_r+0xb2>
 800fc04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc06:	f7fc fa2a 	bl	800c05e <__retarget_lock_release_recursive>
 800fc0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc0c:	f7fc fa25 	bl	800c05a <__retarget_lock_close_recursive>
 800fc10:	f7fb fffe 	bl	800bc10 <__sfp_lock_release>
 800fc14:	e7a5      	b.n	800fb62 <_fclose_r+0xa>
	...

0800fc18 <__sflush_r>:
 800fc18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc1a:	230c      	movs	r3, #12
 800fc1c:	5eca      	ldrsh	r2, [r1, r3]
 800fc1e:	000c      	movs	r4, r1
 800fc20:	0005      	movs	r5, r0
 800fc22:	b291      	uxth	r1, r2
 800fc24:	0713      	lsls	r3, r2, #28
 800fc26:	d464      	bmi.n	800fcf2 <__sflush_r+0xda>
 800fc28:	2380      	movs	r3, #128	; 0x80
 800fc2a:	011b      	lsls	r3, r3, #4
 800fc2c:	4313      	orrs	r3, r2
 800fc2e:	6862      	ldr	r2, [r4, #4]
 800fc30:	81a3      	strh	r3, [r4, #12]
 800fc32:	2a00      	cmp	r2, #0
 800fc34:	dc04      	bgt.n	800fc40 <__sflush_r+0x28>
 800fc36:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800fc38:	2a00      	cmp	r2, #0
 800fc3a:	dc01      	bgt.n	800fc40 <__sflush_r+0x28>
 800fc3c:	2000      	movs	r0, #0
 800fc3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fc40:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800fc42:	2f00      	cmp	r7, #0
 800fc44:	d0fa      	beq.n	800fc3c <__sflush_r+0x24>
 800fc46:	2200      	movs	r2, #0
 800fc48:	2080      	movs	r0, #128	; 0x80
 800fc4a:	682e      	ldr	r6, [r5, #0]
 800fc4c:	602a      	str	r2, [r5, #0]
 800fc4e:	001a      	movs	r2, r3
 800fc50:	0140      	lsls	r0, r0, #5
 800fc52:	69e1      	ldr	r1, [r4, #28]
 800fc54:	4002      	ands	r2, r0
 800fc56:	4203      	tst	r3, r0
 800fc58:	d038      	beq.n	800fccc <__sflush_r+0xb4>
 800fc5a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800fc5c:	89a3      	ldrh	r3, [r4, #12]
 800fc5e:	075b      	lsls	r3, r3, #29
 800fc60:	d506      	bpl.n	800fc70 <__sflush_r+0x58>
 800fc62:	6863      	ldr	r3, [r4, #4]
 800fc64:	1ac0      	subs	r0, r0, r3
 800fc66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d001      	beq.n	800fc70 <__sflush_r+0x58>
 800fc6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fc6e:	1ac0      	subs	r0, r0, r3
 800fc70:	0002      	movs	r2, r0
 800fc72:	2300      	movs	r3, #0
 800fc74:	0028      	movs	r0, r5
 800fc76:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800fc78:	69e1      	ldr	r1, [r4, #28]
 800fc7a:	47b8      	blx	r7
 800fc7c:	89a2      	ldrh	r2, [r4, #12]
 800fc7e:	1c43      	adds	r3, r0, #1
 800fc80:	d106      	bne.n	800fc90 <__sflush_r+0x78>
 800fc82:	6829      	ldr	r1, [r5, #0]
 800fc84:	291d      	cmp	r1, #29
 800fc86:	d830      	bhi.n	800fcea <__sflush_r+0xd2>
 800fc88:	4b2c      	ldr	r3, [pc, #176]	; (800fd3c <__sflush_r+0x124>)
 800fc8a:	410b      	asrs	r3, r1
 800fc8c:	07db      	lsls	r3, r3, #31
 800fc8e:	d42c      	bmi.n	800fcea <__sflush_r+0xd2>
 800fc90:	4b2b      	ldr	r3, [pc, #172]	; (800fd40 <__sflush_r+0x128>)
 800fc92:	4013      	ands	r3, r2
 800fc94:	2200      	movs	r2, #0
 800fc96:	6062      	str	r2, [r4, #4]
 800fc98:	6922      	ldr	r2, [r4, #16]
 800fc9a:	b21b      	sxth	r3, r3
 800fc9c:	81a3      	strh	r3, [r4, #12]
 800fc9e:	6022      	str	r2, [r4, #0]
 800fca0:	04db      	lsls	r3, r3, #19
 800fca2:	d505      	bpl.n	800fcb0 <__sflush_r+0x98>
 800fca4:	1c43      	adds	r3, r0, #1
 800fca6:	d102      	bne.n	800fcae <__sflush_r+0x96>
 800fca8:	682b      	ldr	r3, [r5, #0]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d100      	bne.n	800fcb0 <__sflush_r+0x98>
 800fcae:	6520      	str	r0, [r4, #80]	; 0x50
 800fcb0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fcb2:	602e      	str	r6, [r5, #0]
 800fcb4:	2900      	cmp	r1, #0
 800fcb6:	d0c1      	beq.n	800fc3c <__sflush_r+0x24>
 800fcb8:	0023      	movs	r3, r4
 800fcba:	3340      	adds	r3, #64	; 0x40
 800fcbc:	4299      	cmp	r1, r3
 800fcbe:	d002      	beq.n	800fcc6 <__sflush_r+0xae>
 800fcc0:	0028      	movs	r0, r5
 800fcc2:	f7fc fa53 	bl	800c16c <_free_r>
 800fcc6:	2000      	movs	r0, #0
 800fcc8:	6320      	str	r0, [r4, #48]	; 0x30
 800fcca:	e7b8      	b.n	800fc3e <__sflush_r+0x26>
 800fccc:	2301      	movs	r3, #1
 800fcce:	0028      	movs	r0, r5
 800fcd0:	47b8      	blx	r7
 800fcd2:	1c43      	adds	r3, r0, #1
 800fcd4:	d1c2      	bne.n	800fc5c <__sflush_r+0x44>
 800fcd6:	682b      	ldr	r3, [r5, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d0bf      	beq.n	800fc5c <__sflush_r+0x44>
 800fcdc:	2b1d      	cmp	r3, #29
 800fcde:	d001      	beq.n	800fce4 <__sflush_r+0xcc>
 800fce0:	2b16      	cmp	r3, #22
 800fce2:	d101      	bne.n	800fce8 <__sflush_r+0xd0>
 800fce4:	602e      	str	r6, [r5, #0]
 800fce6:	e7a9      	b.n	800fc3c <__sflush_r+0x24>
 800fce8:	89a2      	ldrh	r2, [r4, #12]
 800fcea:	2340      	movs	r3, #64	; 0x40
 800fcec:	4313      	orrs	r3, r2
 800fcee:	81a3      	strh	r3, [r4, #12]
 800fcf0:	e7a5      	b.n	800fc3e <__sflush_r+0x26>
 800fcf2:	6926      	ldr	r6, [r4, #16]
 800fcf4:	2e00      	cmp	r6, #0
 800fcf6:	d0a1      	beq.n	800fc3c <__sflush_r+0x24>
 800fcf8:	6827      	ldr	r7, [r4, #0]
 800fcfa:	6026      	str	r6, [r4, #0]
 800fcfc:	1bbb      	subs	r3, r7, r6
 800fcfe:	9301      	str	r3, [sp, #4]
 800fd00:	2300      	movs	r3, #0
 800fd02:	0789      	lsls	r1, r1, #30
 800fd04:	d100      	bne.n	800fd08 <__sflush_r+0xf0>
 800fd06:	6963      	ldr	r3, [r4, #20]
 800fd08:	60a3      	str	r3, [r4, #8]
 800fd0a:	9b01      	ldr	r3, [sp, #4]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	dc00      	bgt.n	800fd12 <__sflush_r+0xfa>
 800fd10:	e794      	b.n	800fc3c <__sflush_r+0x24>
 800fd12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd14:	0032      	movs	r2, r6
 800fd16:	001f      	movs	r7, r3
 800fd18:	0028      	movs	r0, r5
 800fd1a:	9b01      	ldr	r3, [sp, #4]
 800fd1c:	69e1      	ldr	r1, [r4, #28]
 800fd1e:	47b8      	blx	r7
 800fd20:	2800      	cmp	r0, #0
 800fd22:	dc06      	bgt.n	800fd32 <__sflush_r+0x11a>
 800fd24:	2340      	movs	r3, #64	; 0x40
 800fd26:	2001      	movs	r0, #1
 800fd28:	89a2      	ldrh	r2, [r4, #12]
 800fd2a:	4240      	negs	r0, r0
 800fd2c:	4313      	orrs	r3, r2
 800fd2e:	81a3      	strh	r3, [r4, #12]
 800fd30:	e785      	b.n	800fc3e <__sflush_r+0x26>
 800fd32:	9b01      	ldr	r3, [sp, #4]
 800fd34:	1836      	adds	r6, r6, r0
 800fd36:	1a1b      	subs	r3, r3, r0
 800fd38:	9301      	str	r3, [sp, #4]
 800fd3a:	e7e6      	b.n	800fd0a <__sflush_r+0xf2>
 800fd3c:	dfbffffe 	.word	0xdfbffffe
 800fd40:	fffff7ff 	.word	0xfffff7ff

0800fd44 <_fflush_r>:
 800fd44:	b570      	push	{r4, r5, r6, lr}
 800fd46:	0005      	movs	r5, r0
 800fd48:	000c      	movs	r4, r1
 800fd4a:	2800      	cmp	r0, #0
 800fd4c:	d004      	beq.n	800fd58 <_fflush_r+0x14>
 800fd4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d101      	bne.n	800fd58 <_fflush_r+0x14>
 800fd54:	f7fb ff64 	bl	800bc20 <__sinit>
 800fd58:	220c      	movs	r2, #12
 800fd5a:	5ea3      	ldrsh	r3, [r4, r2]
 800fd5c:	1e1e      	subs	r6, r3, #0
 800fd5e:	d015      	beq.n	800fd8c <_fflush_r+0x48>
 800fd60:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fd62:	07d2      	lsls	r2, r2, #31
 800fd64:	d404      	bmi.n	800fd70 <_fflush_r+0x2c>
 800fd66:	059b      	lsls	r3, r3, #22
 800fd68:	d402      	bmi.n	800fd70 <_fflush_r+0x2c>
 800fd6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd6c:	f7fc f976 	bl	800c05c <__retarget_lock_acquire_recursive>
 800fd70:	0021      	movs	r1, r4
 800fd72:	0028      	movs	r0, r5
 800fd74:	f7ff ff50 	bl	800fc18 <__sflush_r>
 800fd78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd7a:	0006      	movs	r6, r0
 800fd7c:	07db      	lsls	r3, r3, #31
 800fd7e:	d405      	bmi.n	800fd8c <_fflush_r+0x48>
 800fd80:	89a3      	ldrh	r3, [r4, #12]
 800fd82:	059b      	lsls	r3, r3, #22
 800fd84:	d402      	bmi.n	800fd8c <_fflush_r+0x48>
 800fd86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd88:	f7fc f969 	bl	800c05e <__retarget_lock_release_recursive>
 800fd8c:	0030      	movs	r0, r6
 800fd8e:	bd70      	pop	{r4, r5, r6, pc}

0800fd90 <__sccl>:
 800fd90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd92:	780b      	ldrb	r3, [r1, #0]
 800fd94:	0004      	movs	r4, r0
 800fd96:	2b5e      	cmp	r3, #94	; 0x5e
 800fd98:	d019      	beq.n	800fdce <__sccl+0x3e>
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	1c4d      	adds	r5, r1, #1
 800fd9e:	0021      	movs	r1, r4
 800fda0:	1c60      	adds	r0, r4, #1
 800fda2:	30ff      	adds	r0, #255	; 0xff
 800fda4:	700a      	strb	r2, [r1, #0]
 800fda6:	3101      	adds	r1, #1
 800fda8:	4281      	cmp	r1, r0
 800fdaa:	d1fb      	bne.n	800fda4 <__sccl+0x14>
 800fdac:	1e68      	subs	r0, r5, #1
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d00c      	beq.n	800fdcc <__sccl+0x3c>
 800fdb2:	2101      	movs	r1, #1
 800fdb4:	262d      	movs	r6, #45	; 0x2d
 800fdb6:	404a      	eors	r2, r1
 800fdb8:	0028      	movs	r0, r5
 800fdba:	54e2      	strb	r2, [r4, r3]
 800fdbc:	7801      	ldrb	r1, [r0, #0]
 800fdbe:	1c45      	adds	r5, r0, #1
 800fdc0:	292d      	cmp	r1, #45	; 0x2d
 800fdc2:	d00c      	beq.n	800fdde <__sccl+0x4e>
 800fdc4:	295d      	cmp	r1, #93	; 0x5d
 800fdc6:	d01d      	beq.n	800fe04 <__sccl+0x74>
 800fdc8:	2900      	cmp	r1, #0
 800fdca:	d104      	bne.n	800fdd6 <__sccl+0x46>
 800fdcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdce:	2201      	movs	r2, #1
 800fdd0:	784b      	ldrb	r3, [r1, #1]
 800fdd2:	1c8d      	adds	r5, r1, #2
 800fdd4:	e7e3      	b.n	800fd9e <__sccl+0xe>
 800fdd6:	000b      	movs	r3, r1
 800fdd8:	e7ee      	b.n	800fdb8 <__sccl+0x28>
 800fdda:	0033      	movs	r3, r6
 800fddc:	e7ec      	b.n	800fdb8 <__sccl+0x28>
 800fdde:	7841      	ldrb	r1, [r0, #1]
 800fde0:	295d      	cmp	r1, #93	; 0x5d
 800fde2:	d0fa      	beq.n	800fdda <__sccl+0x4a>
 800fde4:	428b      	cmp	r3, r1
 800fde6:	dcf8      	bgt.n	800fdda <__sccl+0x4a>
 800fde8:	001d      	movs	r5, r3
 800fdea:	3002      	adds	r0, #2
 800fdec:	3501      	adds	r5, #1
 800fdee:	5562      	strb	r2, [r4, r5]
 800fdf0:	42a9      	cmp	r1, r5
 800fdf2:	dcfb      	bgt.n	800fdec <__sccl+0x5c>
 800fdf4:	2500      	movs	r5, #0
 800fdf6:	1c5f      	adds	r7, r3, #1
 800fdf8:	428b      	cmp	r3, r1
 800fdfa:	da01      	bge.n	800fe00 <__sccl+0x70>
 800fdfc:	1acd      	subs	r5, r1, r3
 800fdfe:	3d01      	subs	r5, #1
 800fe00:	197b      	adds	r3, r7, r5
 800fe02:	e7db      	b.n	800fdbc <__sccl+0x2c>
 800fe04:	0028      	movs	r0, r5
 800fe06:	e7e1      	b.n	800fdcc <__sccl+0x3c>

0800fe08 <_localeconv_r>:
 800fe08:	4800      	ldr	r0, [pc, #0]	; (800fe0c <_localeconv_r+0x4>)
 800fe0a:	4770      	bx	lr
 800fe0c:	20000534 	.word	0x20000534

0800fe10 <__libc_fini_array>:
 800fe10:	b570      	push	{r4, r5, r6, lr}
 800fe12:	4c07      	ldr	r4, [pc, #28]	; (800fe30 <__libc_fini_array+0x20>)
 800fe14:	4d07      	ldr	r5, [pc, #28]	; (800fe34 <__libc_fini_array+0x24>)
 800fe16:	1b64      	subs	r4, r4, r5
 800fe18:	10a4      	asrs	r4, r4, #2
 800fe1a:	2c00      	cmp	r4, #0
 800fe1c:	d102      	bne.n	800fe24 <__libc_fini_array+0x14>
 800fe1e:	f002 fd47 	bl	80128b0 <_fini>
 800fe22:	bd70      	pop	{r4, r5, r6, pc}
 800fe24:	3c01      	subs	r4, #1
 800fe26:	00a3      	lsls	r3, r4, #2
 800fe28:	58eb      	ldr	r3, [r5, r3]
 800fe2a:	4798      	blx	r3
 800fe2c:	e7f5      	b.n	800fe1a <__libc_fini_array+0xa>
 800fe2e:	46c0      	nop			; (mov r8, r8)
 800fe30:	08014930 	.word	0x08014930
 800fe34:	0801492c 	.word	0x0801492c

0800fe38 <memchr>:
 800fe38:	b2c9      	uxtb	r1, r1
 800fe3a:	1882      	adds	r2, r0, r2
 800fe3c:	4290      	cmp	r0, r2
 800fe3e:	d101      	bne.n	800fe44 <memchr+0xc>
 800fe40:	2000      	movs	r0, #0
 800fe42:	4770      	bx	lr
 800fe44:	7803      	ldrb	r3, [r0, #0]
 800fe46:	428b      	cmp	r3, r1
 800fe48:	d0fb      	beq.n	800fe42 <memchr+0xa>
 800fe4a:	3001      	adds	r0, #1
 800fe4c:	e7f6      	b.n	800fe3c <memchr+0x4>
	...

0800fe50 <frexp>:
 800fe50:	b570      	push	{r4, r5, r6, lr}
 800fe52:	0014      	movs	r4, r2
 800fe54:	2500      	movs	r5, #0
 800fe56:	6025      	str	r5, [r4, #0]
 800fe58:	4d10      	ldr	r5, [pc, #64]	; (800fe9c <frexp+0x4c>)
 800fe5a:	004b      	lsls	r3, r1, #1
 800fe5c:	000a      	movs	r2, r1
 800fe5e:	085b      	lsrs	r3, r3, #1
 800fe60:	42ab      	cmp	r3, r5
 800fe62:	dc1a      	bgt.n	800fe9a <frexp+0x4a>
 800fe64:	001d      	movs	r5, r3
 800fe66:	4305      	orrs	r5, r0
 800fe68:	d017      	beq.n	800fe9a <frexp+0x4a>
 800fe6a:	4d0d      	ldr	r5, [pc, #52]	; (800fea0 <frexp+0x50>)
 800fe6c:	4229      	tst	r1, r5
 800fe6e:	d109      	bne.n	800fe84 <frexp+0x34>
 800fe70:	2200      	movs	r2, #0
 800fe72:	4b0c      	ldr	r3, [pc, #48]	; (800fea4 <frexp+0x54>)
 800fe74:	f7f1 fbfa 	bl	800166c <__aeabi_dmul>
 800fe78:	2536      	movs	r5, #54	; 0x36
 800fe7a:	000a      	movs	r2, r1
 800fe7c:	004b      	lsls	r3, r1, #1
 800fe7e:	426d      	negs	r5, r5
 800fe80:	085b      	lsrs	r3, r3, #1
 800fe82:	6025      	str	r5, [r4, #0]
 800fe84:	4d08      	ldr	r5, [pc, #32]	; (800fea8 <frexp+0x58>)
 800fe86:	151b      	asrs	r3, r3, #20
 800fe88:	195b      	adds	r3, r3, r5
 800fe8a:	6825      	ldr	r5, [r4, #0]
 800fe8c:	18eb      	adds	r3, r5, r3
 800fe8e:	6023      	str	r3, [r4, #0]
 800fe90:	4b06      	ldr	r3, [pc, #24]	; (800feac <frexp+0x5c>)
 800fe92:	401a      	ands	r2, r3
 800fe94:	4b06      	ldr	r3, [pc, #24]	; (800feb0 <frexp+0x60>)
 800fe96:	4313      	orrs	r3, r2
 800fe98:	0019      	movs	r1, r3
 800fe9a:	bd70      	pop	{r4, r5, r6, pc}
 800fe9c:	7fefffff 	.word	0x7fefffff
 800fea0:	7ff00000 	.word	0x7ff00000
 800fea4:	43500000 	.word	0x43500000
 800fea8:	fffffc02 	.word	0xfffffc02
 800feac:	800fffff 	.word	0x800fffff
 800feb0:	3fe00000 	.word	0x3fe00000

0800feb4 <__register_exitproc>:
 800feb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800feb6:	4f1c      	ldr	r7, [pc, #112]	; (800ff28 <__register_exitproc+0x74>)
 800feb8:	0004      	movs	r4, r0
 800feba:	6838      	ldr	r0, [r7, #0]
 800febc:	0016      	movs	r6, r2
 800febe:	9301      	str	r3, [sp, #4]
 800fec0:	9100      	str	r1, [sp, #0]
 800fec2:	f7fc f8cb 	bl	800c05c <__retarget_lock_acquire_recursive>
 800fec6:	4a19      	ldr	r2, [pc, #100]	; (800ff2c <__register_exitproc+0x78>)
 800fec8:	6813      	ldr	r3, [r2, #0]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d101      	bne.n	800fed2 <__register_exitproc+0x1e>
 800fece:	4b18      	ldr	r3, [pc, #96]	; (800ff30 <__register_exitproc+0x7c>)
 800fed0:	6013      	str	r3, [r2, #0]
 800fed2:	685a      	ldr	r2, [r3, #4]
 800fed4:	6838      	ldr	r0, [r7, #0]
 800fed6:	2a1f      	cmp	r2, #31
 800fed8:	dd04      	ble.n	800fee4 <__register_exitproc+0x30>
 800feda:	f7fc f8c0 	bl	800c05e <__retarget_lock_release_recursive>
 800fede:	2001      	movs	r0, #1
 800fee0:	4240      	negs	r0, r0
 800fee2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fee4:	2c00      	cmp	r4, #0
 800fee6:	d014      	beq.n	800ff12 <__register_exitproc+0x5e>
 800fee8:	0091      	lsls	r1, r2, #2
 800feea:	1859      	adds	r1, r3, r1
 800feec:	000f      	movs	r7, r1
 800feee:	3788      	adds	r7, #136	; 0x88
 800fef0:	603e      	str	r6, [r7, #0]
 800fef2:	2701      	movs	r7, #1
 800fef4:	001e      	movs	r6, r3
 800fef6:	4097      	lsls	r7, r2
 800fef8:	3685      	adds	r6, #133	; 0x85
 800fefa:	36ff      	adds	r6, #255	; 0xff
 800fefc:	6875      	ldr	r5, [r6, #4]
 800fefe:	31fc      	adds	r1, #252	; 0xfc
 800ff00:	433d      	orrs	r5, r7
 800ff02:	6075      	str	r5, [r6, #4]
 800ff04:	9d01      	ldr	r5, [sp, #4]
 800ff06:	60cd      	str	r5, [r1, #12]
 800ff08:	2c02      	cmp	r4, #2
 800ff0a:	d102      	bne.n	800ff12 <__register_exitproc+0x5e>
 800ff0c:	68b1      	ldr	r1, [r6, #8]
 800ff0e:	4339      	orrs	r1, r7
 800ff10:	60b1      	str	r1, [r6, #8]
 800ff12:	1c51      	adds	r1, r2, #1
 800ff14:	6059      	str	r1, [r3, #4]
 800ff16:	3202      	adds	r2, #2
 800ff18:	9900      	ldr	r1, [sp, #0]
 800ff1a:	0092      	lsls	r2, r2, #2
 800ff1c:	50d1      	str	r1, [r2, r3]
 800ff1e:	f7fc f89e 	bl	800c05e <__retarget_lock_release_recursive>
 800ff22:	2000      	movs	r0, #0
 800ff24:	e7dd      	b.n	800fee2 <__register_exitproc+0x2e>
 800ff26:	46c0      	nop			; (mov r8, r8)
 800ff28:	200006d4 	.word	0x200006d4
 800ff2c:	20000db0 	.word	0x20000db0
 800ff30:	20000db4 	.word	0x20000db4

0800ff34 <__assert_func>:
 800ff34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ff36:	0014      	movs	r4, r2
 800ff38:	001a      	movs	r2, r3
 800ff3a:	4b09      	ldr	r3, [pc, #36]	; (800ff60 <__assert_func+0x2c>)
 800ff3c:	0005      	movs	r5, r0
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	000e      	movs	r6, r1
 800ff42:	68d8      	ldr	r0, [r3, #12]
 800ff44:	4b07      	ldr	r3, [pc, #28]	; (800ff64 <__assert_func+0x30>)
 800ff46:	2c00      	cmp	r4, #0
 800ff48:	d101      	bne.n	800ff4e <__assert_func+0x1a>
 800ff4a:	4b07      	ldr	r3, [pc, #28]	; (800ff68 <__assert_func+0x34>)
 800ff4c:	001c      	movs	r4, r3
 800ff4e:	4907      	ldr	r1, [pc, #28]	; (800ff6c <__assert_func+0x38>)
 800ff50:	9301      	str	r3, [sp, #4]
 800ff52:	9402      	str	r4, [sp, #8]
 800ff54:	002b      	movs	r3, r5
 800ff56:	9600      	str	r6, [sp, #0]
 800ff58:	f001 fa20 	bl	801139c <fiprintf>
 800ff5c:	f002 fb08 	bl	8012570 <abort>
 800ff60:	200006d0 	.word	0x200006d0
 800ff64:	08014858 	.word	0x08014858
 800ff68:	08014893 	.word	0x08014893
 800ff6c:	08014865 	.word	0x08014865

0800ff70 <_calloc_r>:
 800ff70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff72:	2400      	movs	r4, #0
 800ff74:	0c0b      	lsrs	r3, r1, #16
 800ff76:	0c16      	lsrs	r6, r2, #16
 800ff78:	42a3      	cmp	r3, r4
 800ff7a:	d133      	bne.n	800ffe4 <_calloc_r+0x74>
 800ff7c:	42a6      	cmp	r6, r4
 800ff7e:	d121      	bne.n	800ffc4 <_calloc_r+0x54>
 800ff80:	b28b      	uxth	r3, r1
 800ff82:	b291      	uxth	r1, r2
 800ff84:	4359      	muls	r1, r3
 800ff86:	f7fa fc37 	bl	800a7f8 <_malloc_r>
 800ff8a:	1e05      	subs	r5, r0, #0
 800ff8c:	d033      	beq.n	800fff6 <_calloc_r+0x86>
 800ff8e:	0003      	movs	r3, r0
 800ff90:	3b08      	subs	r3, #8
 800ff92:	685a      	ldr	r2, [r3, #4]
 800ff94:	2303      	movs	r3, #3
 800ff96:	439a      	bics	r2, r3
 800ff98:	3a04      	subs	r2, #4
 800ff9a:	2a24      	cmp	r2, #36	; 0x24
 800ff9c:	d832      	bhi.n	8010004 <_calloc_r+0x94>
 800ff9e:	0003      	movs	r3, r0
 800ffa0:	2a13      	cmp	r2, #19
 800ffa2:	d90a      	bls.n	800ffba <_calloc_r+0x4a>
 800ffa4:	6004      	str	r4, [r0, #0]
 800ffa6:	6044      	str	r4, [r0, #4]
 800ffa8:	3308      	adds	r3, #8
 800ffaa:	2a1b      	cmp	r2, #27
 800ffac:	d905      	bls.n	800ffba <_calloc_r+0x4a>
 800ffae:	6084      	str	r4, [r0, #8]
 800ffb0:	60c4      	str	r4, [r0, #12]
 800ffb2:	2a24      	cmp	r2, #36	; 0x24
 800ffb4:	d021      	beq.n	800fffa <_calloc_r+0x8a>
 800ffb6:	0003      	movs	r3, r0
 800ffb8:	3310      	adds	r3, #16
 800ffba:	2200      	movs	r2, #0
 800ffbc:	601a      	str	r2, [r3, #0]
 800ffbe:	605a      	str	r2, [r3, #4]
 800ffc0:	609a      	str	r2, [r3, #8]
 800ffc2:	e018      	b.n	800fff6 <_calloc_r+0x86>
 800ffc4:	1c33      	adds	r3, r6, #0
 800ffc6:	1c0d      	adds	r5, r1, #0
 800ffc8:	b289      	uxth	r1, r1
 800ffca:	b292      	uxth	r2, r2
 800ffcc:	434a      	muls	r2, r1
 800ffce:	b2ad      	uxth	r5, r5
 800ffd0:	b299      	uxth	r1, r3
 800ffd2:	4369      	muls	r1, r5
 800ffd4:	0c13      	lsrs	r3, r2, #16
 800ffd6:	18c9      	adds	r1, r1, r3
 800ffd8:	0c0b      	lsrs	r3, r1, #16
 800ffda:	d107      	bne.n	800ffec <_calloc_r+0x7c>
 800ffdc:	0409      	lsls	r1, r1, #16
 800ffde:	b292      	uxth	r2, r2
 800ffe0:	4311      	orrs	r1, r2
 800ffe2:	e7d0      	b.n	800ff86 <_calloc_r+0x16>
 800ffe4:	2e00      	cmp	r6, #0
 800ffe6:	d101      	bne.n	800ffec <_calloc_r+0x7c>
 800ffe8:	1c15      	adds	r5, r2, #0
 800ffea:	e7ed      	b.n	800ffc8 <_calloc_r+0x58>
 800ffec:	f7fc f80a 	bl	800c004 <__errno>
 800fff0:	230c      	movs	r3, #12
 800fff2:	2500      	movs	r5, #0
 800fff4:	6003      	str	r3, [r0, #0]
 800fff6:	0028      	movs	r0, r5
 800fff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fffa:	0003      	movs	r3, r0
 800fffc:	6104      	str	r4, [r0, #16]
 800fffe:	3318      	adds	r3, #24
 8010000:	6144      	str	r4, [r0, #20]
 8010002:	e7da      	b.n	800ffba <_calloc_r+0x4a>
 8010004:	2100      	movs	r1, #0
 8010006:	f7fb ff09 	bl	800be1c <memset>
 801000a:	e7f4      	b.n	800fff6 <_calloc_r+0x86>

0801000c <quorem>:
 801000c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801000e:	6902      	ldr	r2, [r0, #16]
 8010010:	690b      	ldr	r3, [r1, #16]
 8010012:	b089      	sub	sp, #36	; 0x24
 8010014:	0007      	movs	r7, r0
 8010016:	9104      	str	r1, [sp, #16]
 8010018:	2000      	movs	r0, #0
 801001a:	429a      	cmp	r2, r3
 801001c:	db69      	blt.n	80100f2 <quorem+0xe6>
 801001e:	3b01      	subs	r3, #1
 8010020:	009c      	lsls	r4, r3, #2
 8010022:	9301      	str	r3, [sp, #4]
 8010024:	000b      	movs	r3, r1
 8010026:	3314      	adds	r3, #20
 8010028:	9306      	str	r3, [sp, #24]
 801002a:	191b      	adds	r3, r3, r4
 801002c:	9305      	str	r3, [sp, #20]
 801002e:	003b      	movs	r3, r7
 8010030:	3314      	adds	r3, #20
 8010032:	9303      	str	r3, [sp, #12]
 8010034:	191c      	adds	r4, r3, r4
 8010036:	9b05      	ldr	r3, [sp, #20]
 8010038:	6826      	ldr	r6, [r4, #0]
 801003a:	681d      	ldr	r5, [r3, #0]
 801003c:	0030      	movs	r0, r6
 801003e:	3501      	adds	r5, #1
 8010040:	0029      	movs	r1, r5
 8010042:	f7f0 f87b 	bl	800013c <__udivsi3>
 8010046:	9002      	str	r0, [sp, #8]
 8010048:	42ae      	cmp	r6, r5
 801004a:	d329      	bcc.n	80100a0 <quorem+0x94>
 801004c:	9b06      	ldr	r3, [sp, #24]
 801004e:	2600      	movs	r6, #0
 8010050:	469c      	mov	ip, r3
 8010052:	9d03      	ldr	r5, [sp, #12]
 8010054:	9606      	str	r6, [sp, #24]
 8010056:	4662      	mov	r2, ip
 8010058:	ca08      	ldmia	r2!, {r3}
 801005a:	6828      	ldr	r0, [r5, #0]
 801005c:	4694      	mov	ip, r2
 801005e:	9a02      	ldr	r2, [sp, #8]
 8010060:	b299      	uxth	r1, r3
 8010062:	4351      	muls	r1, r2
 8010064:	0c1b      	lsrs	r3, r3, #16
 8010066:	4353      	muls	r3, r2
 8010068:	1989      	adds	r1, r1, r6
 801006a:	0c0a      	lsrs	r2, r1, #16
 801006c:	189b      	adds	r3, r3, r2
 801006e:	9307      	str	r3, [sp, #28]
 8010070:	0c1e      	lsrs	r6, r3, #16
 8010072:	9b06      	ldr	r3, [sp, #24]
 8010074:	b282      	uxth	r2, r0
 8010076:	18d2      	adds	r2, r2, r3
 8010078:	466b      	mov	r3, sp
 801007a:	b289      	uxth	r1, r1
 801007c:	8b9b      	ldrh	r3, [r3, #28]
 801007e:	1a52      	subs	r2, r2, r1
 8010080:	0c01      	lsrs	r1, r0, #16
 8010082:	1ac9      	subs	r1, r1, r3
 8010084:	1413      	asrs	r3, r2, #16
 8010086:	18cb      	adds	r3, r1, r3
 8010088:	1419      	asrs	r1, r3, #16
 801008a:	b292      	uxth	r2, r2
 801008c:	041b      	lsls	r3, r3, #16
 801008e:	4313      	orrs	r3, r2
 8010090:	c508      	stmia	r5!, {r3}
 8010092:	9b05      	ldr	r3, [sp, #20]
 8010094:	9106      	str	r1, [sp, #24]
 8010096:	4563      	cmp	r3, ip
 8010098:	d2dd      	bcs.n	8010056 <quorem+0x4a>
 801009a:	6823      	ldr	r3, [r4, #0]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d030      	beq.n	8010102 <quorem+0xf6>
 80100a0:	0038      	movs	r0, r7
 80100a2:	9904      	ldr	r1, [sp, #16]
 80100a4:	f7fc ff04 	bl	800ceb0 <__mcmp>
 80100a8:	2800      	cmp	r0, #0
 80100aa:	db21      	blt.n	80100f0 <quorem+0xe4>
 80100ac:	0038      	movs	r0, r7
 80100ae:	2600      	movs	r6, #0
 80100b0:	9b02      	ldr	r3, [sp, #8]
 80100b2:	9c04      	ldr	r4, [sp, #16]
 80100b4:	3301      	adds	r3, #1
 80100b6:	9302      	str	r3, [sp, #8]
 80100b8:	3014      	adds	r0, #20
 80100ba:	3414      	adds	r4, #20
 80100bc:	6803      	ldr	r3, [r0, #0]
 80100be:	cc02      	ldmia	r4!, {r1}
 80100c0:	b29d      	uxth	r5, r3
 80100c2:	19ad      	adds	r5, r5, r6
 80100c4:	b28a      	uxth	r2, r1
 80100c6:	1aaa      	subs	r2, r5, r2
 80100c8:	0c09      	lsrs	r1, r1, #16
 80100ca:	0c1b      	lsrs	r3, r3, #16
 80100cc:	1a5b      	subs	r3, r3, r1
 80100ce:	1411      	asrs	r1, r2, #16
 80100d0:	185b      	adds	r3, r3, r1
 80100d2:	141e      	asrs	r6, r3, #16
 80100d4:	b292      	uxth	r2, r2
 80100d6:	041b      	lsls	r3, r3, #16
 80100d8:	4313      	orrs	r3, r2
 80100da:	c008      	stmia	r0!, {r3}
 80100dc:	9b05      	ldr	r3, [sp, #20]
 80100de:	42a3      	cmp	r3, r4
 80100e0:	d2ec      	bcs.n	80100bc <quorem+0xb0>
 80100e2:	9b01      	ldr	r3, [sp, #4]
 80100e4:	9a03      	ldr	r2, [sp, #12]
 80100e6:	009b      	lsls	r3, r3, #2
 80100e8:	18d3      	adds	r3, r2, r3
 80100ea:	681a      	ldr	r2, [r3, #0]
 80100ec:	2a00      	cmp	r2, #0
 80100ee:	d015      	beq.n	801011c <quorem+0x110>
 80100f0:	9802      	ldr	r0, [sp, #8]
 80100f2:	b009      	add	sp, #36	; 0x24
 80100f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100f6:	6823      	ldr	r3, [r4, #0]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d106      	bne.n	801010a <quorem+0xfe>
 80100fc:	9b01      	ldr	r3, [sp, #4]
 80100fe:	3b01      	subs	r3, #1
 8010100:	9301      	str	r3, [sp, #4]
 8010102:	9b03      	ldr	r3, [sp, #12]
 8010104:	3c04      	subs	r4, #4
 8010106:	42a3      	cmp	r3, r4
 8010108:	d3f5      	bcc.n	80100f6 <quorem+0xea>
 801010a:	9b01      	ldr	r3, [sp, #4]
 801010c:	613b      	str	r3, [r7, #16]
 801010e:	e7c7      	b.n	80100a0 <quorem+0x94>
 8010110:	681a      	ldr	r2, [r3, #0]
 8010112:	2a00      	cmp	r2, #0
 8010114:	d106      	bne.n	8010124 <quorem+0x118>
 8010116:	9a01      	ldr	r2, [sp, #4]
 8010118:	3a01      	subs	r2, #1
 801011a:	9201      	str	r2, [sp, #4]
 801011c:	9a03      	ldr	r2, [sp, #12]
 801011e:	3b04      	subs	r3, #4
 8010120:	429a      	cmp	r2, r3
 8010122:	d3f5      	bcc.n	8010110 <quorem+0x104>
 8010124:	9b01      	ldr	r3, [sp, #4]
 8010126:	613b      	str	r3, [r7, #16]
 8010128:	e7e2      	b.n	80100f0 <quorem+0xe4>
	...

0801012c <_dtoa_r>:
 801012c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801012e:	0014      	movs	r4, r2
 8010130:	001d      	movs	r5, r3
 8010132:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8010134:	b09d      	sub	sp, #116	; 0x74
 8010136:	9408      	str	r4, [sp, #32]
 8010138:	9509      	str	r5, [sp, #36]	; 0x24
 801013a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801013c:	9004      	str	r0, [sp, #16]
 801013e:	2900      	cmp	r1, #0
 8010140:	d009      	beq.n	8010156 <_dtoa_r+0x2a>
 8010142:	2301      	movs	r3, #1
 8010144:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010146:	4093      	lsls	r3, r2
 8010148:	604a      	str	r2, [r1, #4]
 801014a:	608b      	str	r3, [r1, #8]
 801014c:	f7fc fc56 	bl	800c9fc <_Bfree>
 8010150:	2300      	movs	r3, #0
 8010152:	9a04      	ldr	r2, [sp, #16]
 8010154:	6393      	str	r3, [r2, #56]	; 0x38
 8010156:	2d00      	cmp	r5, #0
 8010158:	da1e      	bge.n	8010198 <_dtoa_r+0x6c>
 801015a:	2301      	movs	r3, #1
 801015c:	6033      	str	r3, [r6, #0]
 801015e:	006b      	lsls	r3, r5, #1
 8010160:	085b      	lsrs	r3, r3, #1
 8010162:	9309      	str	r3, [sp, #36]	; 0x24
 8010164:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010166:	4bb5      	ldr	r3, [pc, #724]	; (801043c <_dtoa_r+0x310>)
 8010168:	4ab4      	ldr	r2, [pc, #720]	; (801043c <_dtoa_r+0x310>)
 801016a:	403b      	ands	r3, r7
 801016c:	4293      	cmp	r3, r2
 801016e:	d116      	bne.n	801019e <_dtoa_r+0x72>
 8010170:	4bb3      	ldr	r3, [pc, #716]	; (8010440 <_dtoa_r+0x314>)
 8010172:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010174:	6013      	str	r3, [r2, #0]
 8010176:	033b      	lsls	r3, r7, #12
 8010178:	0b1b      	lsrs	r3, r3, #12
 801017a:	4323      	orrs	r3, r4
 801017c:	d101      	bne.n	8010182 <_dtoa_r+0x56>
 801017e:	f000 fdb2 	bl	8010ce6 <_dtoa_r+0xbba>
 8010182:	4bb0      	ldr	r3, [pc, #704]	; (8010444 <_dtoa_r+0x318>)
 8010184:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010186:	9306      	str	r3, [sp, #24]
 8010188:	2a00      	cmp	r2, #0
 801018a:	d002      	beq.n	8010192 <_dtoa_r+0x66>
 801018c:	4bae      	ldr	r3, [pc, #696]	; (8010448 <_dtoa_r+0x31c>)
 801018e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010190:	6013      	str	r3, [r2, #0]
 8010192:	9806      	ldr	r0, [sp, #24]
 8010194:	b01d      	add	sp, #116	; 0x74
 8010196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010198:	2300      	movs	r3, #0
 801019a:	6033      	str	r3, [r6, #0]
 801019c:	e7e2      	b.n	8010164 <_dtoa_r+0x38>
 801019e:	9a08      	ldr	r2, [sp, #32]
 80101a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101a2:	9210      	str	r2, [sp, #64]	; 0x40
 80101a4:	9311      	str	r3, [sp, #68]	; 0x44
 80101a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80101a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80101aa:	2200      	movs	r2, #0
 80101ac:	2300      	movs	r3, #0
 80101ae:	f7f0 f94b 	bl	8000448 <__aeabi_dcmpeq>
 80101b2:	1e06      	subs	r6, r0, #0
 80101b4:	d009      	beq.n	80101ca <_dtoa_r+0x9e>
 80101b6:	2301      	movs	r3, #1
 80101b8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80101ba:	6013      	str	r3, [r2, #0]
 80101bc:	4ba3      	ldr	r3, [pc, #652]	; (801044c <_dtoa_r+0x320>)
 80101be:	9306      	str	r3, [sp, #24]
 80101c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d0e5      	beq.n	8010192 <_dtoa_r+0x66>
 80101c6:	4ba2      	ldr	r3, [pc, #648]	; (8010450 <_dtoa_r+0x324>)
 80101c8:	e7e1      	b.n	801018e <_dtoa_r+0x62>
 80101ca:	ab1a      	add	r3, sp, #104	; 0x68
 80101cc:	9301      	str	r3, [sp, #4]
 80101ce:	ab1b      	add	r3, sp, #108	; 0x6c
 80101d0:	9300      	str	r3, [sp, #0]
 80101d2:	9804      	ldr	r0, [sp, #16]
 80101d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80101d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80101d8:	f7fc ff86 	bl	800d0e8 <__d2b>
 80101dc:	007a      	lsls	r2, r7, #1
 80101de:	9005      	str	r0, [sp, #20]
 80101e0:	0d52      	lsrs	r2, r2, #21
 80101e2:	d100      	bne.n	80101e6 <_dtoa_r+0xba>
 80101e4:	e07b      	b.n	80102de <_dtoa_r+0x1b2>
 80101e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80101e8:	9617      	str	r6, [sp, #92]	; 0x5c
 80101ea:	0319      	lsls	r1, r3, #12
 80101ec:	4b99      	ldr	r3, [pc, #612]	; (8010454 <_dtoa_r+0x328>)
 80101ee:	0b09      	lsrs	r1, r1, #12
 80101f0:	430b      	orrs	r3, r1
 80101f2:	4999      	ldr	r1, [pc, #612]	; (8010458 <_dtoa_r+0x32c>)
 80101f4:	1857      	adds	r7, r2, r1
 80101f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80101f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80101fa:	0019      	movs	r1, r3
 80101fc:	2200      	movs	r2, #0
 80101fe:	4b97      	ldr	r3, [pc, #604]	; (801045c <_dtoa_r+0x330>)
 8010200:	f7f1 fcf6 	bl	8001bf0 <__aeabi_dsub>
 8010204:	4a96      	ldr	r2, [pc, #600]	; (8010460 <_dtoa_r+0x334>)
 8010206:	4b97      	ldr	r3, [pc, #604]	; (8010464 <_dtoa_r+0x338>)
 8010208:	f7f1 fa30 	bl	800166c <__aeabi_dmul>
 801020c:	4a96      	ldr	r2, [pc, #600]	; (8010468 <_dtoa_r+0x33c>)
 801020e:	4b97      	ldr	r3, [pc, #604]	; (801046c <_dtoa_r+0x340>)
 8010210:	f7f0 fad2 	bl	80007b8 <__aeabi_dadd>
 8010214:	0004      	movs	r4, r0
 8010216:	0038      	movs	r0, r7
 8010218:	000d      	movs	r5, r1
 801021a:	f7f2 f8bf 	bl	800239c <__aeabi_i2d>
 801021e:	4a94      	ldr	r2, [pc, #592]	; (8010470 <_dtoa_r+0x344>)
 8010220:	4b94      	ldr	r3, [pc, #592]	; (8010474 <_dtoa_r+0x348>)
 8010222:	f7f1 fa23 	bl	800166c <__aeabi_dmul>
 8010226:	0002      	movs	r2, r0
 8010228:	000b      	movs	r3, r1
 801022a:	0020      	movs	r0, r4
 801022c:	0029      	movs	r1, r5
 801022e:	f7f0 fac3 	bl	80007b8 <__aeabi_dadd>
 8010232:	0004      	movs	r4, r0
 8010234:	000d      	movs	r5, r1
 8010236:	f7f2 f87b 	bl	8002330 <__aeabi_d2iz>
 801023a:	2200      	movs	r2, #0
 801023c:	9003      	str	r0, [sp, #12]
 801023e:	2300      	movs	r3, #0
 8010240:	0020      	movs	r0, r4
 8010242:	0029      	movs	r1, r5
 8010244:	f7f0 f906 	bl	8000454 <__aeabi_dcmplt>
 8010248:	2800      	cmp	r0, #0
 801024a:	d00b      	beq.n	8010264 <_dtoa_r+0x138>
 801024c:	9803      	ldr	r0, [sp, #12]
 801024e:	f7f2 f8a5 	bl	800239c <__aeabi_i2d>
 8010252:	002b      	movs	r3, r5
 8010254:	0022      	movs	r2, r4
 8010256:	f7f0 f8f7 	bl	8000448 <__aeabi_dcmpeq>
 801025a:	4243      	negs	r3, r0
 801025c:	4158      	adcs	r0, r3
 801025e:	9b03      	ldr	r3, [sp, #12]
 8010260:	1a1b      	subs	r3, r3, r0
 8010262:	9303      	str	r3, [sp, #12]
 8010264:	2301      	movs	r3, #1
 8010266:	9316      	str	r3, [sp, #88]	; 0x58
 8010268:	9b03      	ldr	r3, [sp, #12]
 801026a:	2b16      	cmp	r3, #22
 801026c:	d810      	bhi.n	8010290 <_dtoa_r+0x164>
 801026e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010270:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010272:	9a03      	ldr	r2, [sp, #12]
 8010274:	4b80      	ldr	r3, [pc, #512]	; (8010478 <_dtoa_r+0x34c>)
 8010276:	00d2      	lsls	r2, r2, #3
 8010278:	189b      	adds	r3, r3, r2
 801027a:	681a      	ldr	r2, [r3, #0]
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	f7f0 f8e9 	bl	8000454 <__aeabi_dcmplt>
 8010282:	2800      	cmp	r0, #0
 8010284:	d047      	beq.n	8010316 <_dtoa_r+0x1ea>
 8010286:	9b03      	ldr	r3, [sp, #12]
 8010288:	3b01      	subs	r3, #1
 801028a:	9303      	str	r3, [sp, #12]
 801028c:	2300      	movs	r3, #0
 801028e:	9316      	str	r3, [sp, #88]	; 0x58
 8010290:	2200      	movs	r2, #0
 8010292:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010294:	920a      	str	r2, [sp, #40]	; 0x28
 8010296:	1bdb      	subs	r3, r3, r7
 8010298:	1e5a      	subs	r2, r3, #1
 801029a:	d53e      	bpl.n	801031a <_dtoa_r+0x1ee>
 801029c:	2201      	movs	r2, #1
 801029e:	1ad3      	subs	r3, r2, r3
 80102a0:	930a      	str	r3, [sp, #40]	; 0x28
 80102a2:	2300      	movs	r3, #0
 80102a4:	930c      	str	r3, [sp, #48]	; 0x30
 80102a6:	9b03      	ldr	r3, [sp, #12]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	db38      	blt.n	801031e <_dtoa_r+0x1f2>
 80102ac:	9a03      	ldr	r2, [sp, #12]
 80102ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102b0:	4694      	mov	ip, r2
 80102b2:	4463      	add	r3, ip
 80102b4:	930c      	str	r3, [sp, #48]	; 0x30
 80102b6:	2300      	movs	r3, #0
 80102b8:	9213      	str	r2, [sp, #76]	; 0x4c
 80102ba:	930d      	str	r3, [sp, #52]	; 0x34
 80102bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80102be:	2401      	movs	r4, #1
 80102c0:	2b09      	cmp	r3, #9
 80102c2:	d867      	bhi.n	8010394 <_dtoa_r+0x268>
 80102c4:	2b05      	cmp	r3, #5
 80102c6:	dd02      	ble.n	80102ce <_dtoa_r+0x1a2>
 80102c8:	2400      	movs	r4, #0
 80102ca:	3b04      	subs	r3, #4
 80102cc:	9322      	str	r3, [sp, #136]	; 0x88
 80102ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80102d0:	1e98      	subs	r0, r3, #2
 80102d2:	2803      	cmp	r0, #3
 80102d4:	d867      	bhi.n	80103a6 <_dtoa_r+0x27a>
 80102d6:	f7ef ff1d 	bl	8000114 <__gnu_thumb1_case_uqi>
 80102da:	3a2b      	.short	0x3a2b
 80102dc:	5b38      	.short	0x5b38
 80102de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80102e0:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80102e2:	18f6      	adds	r6, r6, r3
 80102e4:	4b65      	ldr	r3, [pc, #404]	; (801047c <_dtoa_r+0x350>)
 80102e6:	18f2      	adds	r2, r6, r3
 80102e8:	2a20      	cmp	r2, #32
 80102ea:	dd0f      	ble.n	801030c <_dtoa_r+0x1e0>
 80102ec:	2340      	movs	r3, #64	; 0x40
 80102ee:	1a9b      	subs	r3, r3, r2
 80102f0:	409f      	lsls	r7, r3
 80102f2:	4b63      	ldr	r3, [pc, #396]	; (8010480 <_dtoa_r+0x354>)
 80102f4:	0038      	movs	r0, r7
 80102f6:	18f3      	adds	r3, r6, r3
 80102f8:	40dc      	lsrs	r4, r3
 80102fa:	4320      	orrs	r0, r4
 80102fc:	f7f2 f87e 	bl	80023fc <__aeabi_ui2d>
 8010300:	2201      	movs	r2, #1
 8010302:	4b60      	ldr	r3, [pc, #384]	; (8010484 <_dtoa_r+0x358>)
 8010304:	1e77      	subs	r7, r6, #1
 8010306:	18cb      	adds	r3, r1, r3
 8010308:	9217      	str	r2, [sp, #92]	; 0x5c
 801030a:	e776      	b.n	80101fa <_dtoa_r+0xce>
 801030c:	2320      	movs	r3, #32
 801030e:	0020      	movs	r0, r4
 8010310:	1a9b      	subs	r3, r3, r2
 8010312:	4098      	lsls	r0, r3
 8010314:	e7f2      	b.n	80102fc <_dtoa_r+0x1d0>
 8010316:	9016      	str	r0, [sp, #88]	; 0x58
 8010318:	e7ba      	b.n	8010290 <_dtoa_r+0x164>
 801031a:	920c      	str	r2, [sp, #48]	; 0x30
 801031c:	e7c3      	b.n	80102a6 <_dtoa_r+0x17a>
 801031e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010320:	9a03      	ldr	r2, [sp, #12]
 8010322:	1a9b      	subs	r3, r3, r2
 8010324:	930a      	str	r3, [sp, #40]	; 0x28
 8010326:	4253      	negs	r3, r2
 8010328:	930d      	str	r3, [sp, #52]	; 0x34
 801032a:	2300      	movs	r3, #0
 801032c:	9313      	str	r3, [sp, #76]	; 0x4c
 801032e:	e7c5      	b.n	80102bc <_dtoa_r+0x190>
 8010330:	2300      	movs	r3, #0
 8010332:	930f      	str	r3, [sp, #60]	; 0x3c
 8010334:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010336:	930b      	str	r3, [sp, #44]	; 0x2c
 8010338:	9307      	str	r3, [sp, #28]
 801033a:	2b00      	cmp	r3, #0
 801033c:	dc13      	bgt.n	8010366 <_dtoa_r+0x23a>
 801033e:	2301      	movs	r3, #1
 8010340:	001a      	movs	r2, r3
 8010342:	930b      	str	r3, [sp, #44]	; 0x2c
 8010344:	9307      	str	r3, [sp, #28]
 8010346:	9223      	str	r2, [sp, #140]	; 0x8c
 8010348:	e00d      	b.n	8010366 <_dtoa_r+0x23a>
 801034a:	2301      	movs	r3, #1
 801034c:	e7f1      	b.n	8010332 <_dtoa_r+0x206>
 801034e:	2300      	movs	r3, #0
 8010350:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010352:	930f      	str	r3, [sp, #60]	; 0x3c
 8010354:	4694      	mov	ip, r2
 8010356:	9b03      	ldr	r3, [sp, #12]
 8010358:	4463      	add	r3, ip
 801035a:	930b      	str	r3, [sp, #44]	; 0x2c
 801035c:	3301      	adds	r3, #1
 801035e:	9307      	str	r3, [sp, #28]
 8010360:	2b00      	cmp	r3, #0
 8010362:	dc00      	bgt.n	8010366 <_dtoa_r+0x23a>
 8010364:	2301      	movs	r3, #1
 8010366:	2100      	movs	r1, #0
 8010368:	2204      	movs	r2, #4
 801036a:	0010      	movs	r0, r2
 801036c:	3014      	adds	r0, #20
 801036e:	4298      	cmp	r0, r3
 8010370:	d91d      	bls.n	80103ae <_dtoa_r+0x282>
 8010372:	9b04      	ldr	r3, [sp, #16]
 8010374:	0018      	movs	r0, r3
 8010376:	63d9      	str	r1, [r3, #60]	; 0x3c
 8010378:	f7fc fb18 	bl	800c9ac <_Balloc>
 801037c:	9006      	str	r0, [sp, #24]
 801037e:	2800      	cmp	r0, #0
 8010380:	d118      	bne.n	80103b4 <_dtoa_r+0x288>
 8010382:	21b0      	movs	r1, #176	; 0xb0
 8010384:	4b40      	ldr	r3, [pc, #256]	; (8010488 <_dtoa_r+0x35c>)
 8010386:	4841      	ldr	r0, [pc, #260]	; (801048c <_dtoa_r+0x360>)
 8010388:	9a06      	ldr	r2, [sp, #24]
 801038a:	31ff      	adds	r1, #255	; 0xff
 801038c:	f7ff fdd2 	bl	800ff34 <__assert_func>
 8010390:	2301      	movs	r3, #1
 8010392:	e7dd      	b.n	8010350 <_dtoa_r+0x224>
 8010394:	2300      	movs	r3, #0
 8010396:	940f      	str	r4, [sp, #60]	; 0x3c
 8010398:	9322      	str	r3, [sp, #136]	; 0x88
 801039a:	3b01      	subs	r3, #1
 801039c:	930b      	str	r3, [sp, #44]	; 0x2c
 801039e:	9307      	str	r3, [sp, #28]
 80103a0:	2200      	movs	r2, #0
 80103a2:	3313      	adds	r3, #19
 80103a4:	e7cf      	b.n	8010346 <_dtoa_r+0x21a>
 80103a6:	2301      	movs	r3, #1
 80103a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80103aa:	3b02      	subs	r3, #2
 80103ac:	e7f6      	b.n	801039c <_dtoa_r+0x270>
 80103ae:	3101      	adds	r1, #1
 80103b0:	0052      	lsls	r2, r2, #1
 80103b2:	e7da      	b.n	801036a <_dtoa_r+0x23e>
 80103b4:	9b04      	ldr	r3, [sp, #16]
 80103b6:	9a06      	ldr	r2, [sp, #24]
 80103b8:	639a      	str	r2, [r3, #56]	; 0x38
 80103ba:	9b07      	ldr	r3, [sp, #28]
 80103bc:	2b0e      	cmp	r3, #14
 80103be:	d900      	bls.n	80103c2 <_dtoa_r+0x296>
 80103c0:	e0e3      	b.n	801058a <_dtoa_r+0x45e>
 80103c2:	2c00      	cmp	r4, #0
 80103c4:	d100      	bne.n	80103c8 <_dtoa_r+0x29c>
 80103c6:	e0e0      	b.n	801058a <_dtoa_r+0x45e>
 80103c8:	9b03      	ldr	r3, [sp, #12]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	dd62      	ble.n	8010494 <_dtoa_r+0x368>
 80103ce:	210f      	movs	r1, #15
 80103d0:	9a03      	ldr	r2, [sp, #12]
 80103d2:	4b29      	ldr	r3, [pc, #164]	; (8010478 <_dtoa_r+0x34c>)
 80103d4:	400a      	ands	r2, r1
 80103d6:	00d2      	lsls	r2, r2, #3
 80103d8:	189b      	adds	r3, r3, r2
 80103da:	681e      	ldr	r6, [r3, #0]
 80103dc:	685f      	ldr	r7, [r3, #4]
 80103de:	9b03      	ldr	r3, [sp, #12]
 80103e0:	2402      	movs	r4, #2
 80103e2:	111d      	asrs	r5, r3, #4
 80103e4:	05db      	lsls	r3, r3, #23
 80103e6:	d50a      	bpl.n	80103fe <_dtoa_r+0x2d2>
 80103e8:	4b29      	ldr	r3, [pc, #164]	; (8010490 <_dtoa_r+0x364>)
 80103ea:	400d      	ands	r5, r1
 80103ec:	6a1a      	ldr	r2, [r3, #32]
 80103ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80103f2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80103f4:	f7f0 fd40 	bl	8000e78 <__aeabi_ddiv>
 80103f8:	9008      	str	r0, [sp, #32]
 80103fa:	9109      	str	r1, [sp, #36]	; 0x24
 80103fc:	3401      	adds	r4, #1
 80103fe:	4b24      	ldr	r3, [pc, #144]	; (8010490 <_dtoa_r+0x364>)
 8010400:	930e      	str	r3, [sp, #56]	; 0x38
 8010402:	2d00      	cmp	r5, #0
 8010404:	d108      	bne.n	8010418 <_dtoa_r+0x2ec>
 8010406:	9808      	ldr	r0, [sp, #32]
 8010408:	9909      	ldr	r1, [sp, #36]	; 0x24
 801040a:	0032      	movs	r2, r6
 801040c:	003b      	movs	r3, r7
 801040e:	f7f0 fd33 	bl	8000e78 <__aeabi_ddiv>
 8010412:	9008      	str	r0, [sp, #32]
 8010414:	9109      	str	r1, [sp, #36]	; 0x24
 8010416:	e058      	b.n	80104ca <_dtoa_r+0x39e>
 8010418:	2301      	movs	r3, #1
 801041a:	421d      	tst	r5, r3
 801041c:	d009      	beq.n	8010432 <_dtoa_r+0x306>
 801041e:	18e4      	adds	r4, r4, r3
 8010420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010422:	0030      	movs	r0, r6
 8010424:	681a      	ldr	r2, [r3, #0]
 8010426:	685b      	ldr	r3, [r3, #4]
 8010428:	0039      	movs	r1, r7
 801042a:	f7f1 f91f 	bl	800166c <__aeabi_dmul>
 801042e:	0006      	movs	r6, r0
 8010430:	000f      	movs	r7, r1
 8010432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010434:	106d      	asrs	r5, r5, #1
 8010436:	3308      	adds	r3, #8
 8010438:	e7e2      	b.n	8010400 <_dtoa_r+0x2d4>
 801043a:	46c0      	nop			; (mov r8, r8)
 801043c:	7ff00000 	.word	0x7ff00000
 8010440:	0000270f 	.word	0x0000270f
 8010444:	0801489d 	.word	0x0801489d
 8010448:	080148a0 	.word	0x080148a0
 801044c:	0801480e 	.word	0x0801480e
 8010450:	0801480f 	.word	0x0801480f
 8010454:	3ff00000 	.word	0x3ff00000
 8010458:	fffffc01 	.word	0xfffffc01
 801045c:	3ff80000 	.word	0x3ff80000
 8010460:	636f4361 	.word	0x636f4361
 8010464:	3fd287a7 	.word	0x3fd287a7
 8010468:	8b60c8b3 	.word	0x8b60c8b3
 801046c:	3fc68a28 	.word	0x3fc68a28
 8010470:	509f79fb 	.word	0x509f79fb
 8010474:	3fd34413 	.word	0x3fd34413
 8010478:	08014708 	.word	0x08014708
 801047c:	00000432 	.word	0x00000432
 8010480:	00000412 	.word	0x00000412
 8010484:	fe100000 	.word	0xfe100000
 8010488:	08014611 	.word	0x08014611
 801048c:	080148a1 	.word	0x080148a1
 8010490:	080146e0 	.word	0x080146e0
 8010494:	9b03      	ldr	r3, [sp, #12]
 8010496:	2402      	movs	r4, #2
 8010498:	2b00      	cmp	r3, #0
 801049a:	d016      	beq.n	80104ca <_dtoa_r+0x39e>
 801049c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801049e:	9911      	ldr	r1, [sp, #68]	; 0x44
 80104a0:	220f      	movs	r2, #15
 80104a2:	425d      	negs	r5, r3
 80104a4:	402a      	ands	r2, r5
 80104a6:	4bdd      	ldr	r3, [pc, #884]	; (801081c <_dtoa_r+0x6f0>)
 80104a8:	00d2      	lsls	r2, r2, #3
 80104aa:	189b      	adds	r3, r3, r2
 80104ac:	681a      	ldr	r2, [r3, #0]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	f7f1 f8dc 	bl	800166c <__aeabi_dmul>
 80104b4:	2701      	movs	r7, #1
 80104b6:	2300      	movs	r3, #0
 80104b8:	9008      	str	r0, [sp, #32]
 80104ba:	9109      	str	r1, [sp, #36]	; 0x24
 80104bc:	4ed8      	ldr	r6, [pc, #864]	; (8010820 <_dtoa_r+0x6f4>)
 80104be:	112d      	asrs	r5, r5, #4
 80104c0:	2d00      	cmp	r5, #0
 80104c2:	d000      	beq.n	80104c6 <_dtoa_r+0x39a>
 80104c4:	e091      	b.n	80105ea <_dtoa_r+0x4be>
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d1a3      	bne.n	8010412 <_dtoa_r+0x2e6>
 80104ca:	9e08      	ldr	r6, [sp, #32]
 80104cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80104ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d100      	bne.n	80104d6 <_dtoa_r+0x3aa>
 80104d4:	e094      	b.n	8010600 <_dtoa_r+0x4d4>
 80104d6:	2200      	movs	r2, #0
 80104d8:	0030      	movs	r0, r6
 80104da:	0039      	movs	r1, r7
 80104dc:	4bd1      	ldr	r3, [pc, #836]	; (8010824 <_dtoa_r+0x6f8>)
 80104de:	f7ef ffb9 	bl	8000454 <__aeabi_dcmplt>
 80104e2:	2800      	cmp	r0, #0
 80104e4:	d100      	bne.n	80104e8 <_dtoa_r+0x3bc>
 80104e6:	e08b      	b.n	8010600 <_dtoa_r+0x4d4>
 80104e8:	9b07      	ldr	r3, [sp, #28]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d100      	bne.n	80104f0 <_dtoa_r+0x3c4>
 80104ee:	e087      	b.n	8010600 <_dtoa_r+0x4d4>
 80104f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	dd45      	ble.n	8010582 <_dtoa_r+0x456>
 80104f6:	9b03      	ldr	r3, [sp, #12]
 80104f8:	2200      	movs	r2, #0
 80104fa:	3b01      	subs	r3, #1
 80104fc:	930e      	str	r3, [sp, #56]	; 0x38
 80104fe:	0030      	movs	r0, r6
 8010500:	4bc9      	ldr	r3, [pc, #804]	; (8010828 <_dtoa_r+0x6fc>)
 8010502:	0039      	movs	r1, r7
 8010504:	f7f1 f8b2 	bl	800166c <__aeabi_dmul>
 8010508:	9008      	str	r0, [sp, #32]
 801050a:	9109      	str	r1, [sp, #36]	; 0x24
 801050c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801050e:	3401      	adds	r4, #1
 8010510:	0020      	movs	r0, r4
 8010512:	9e08      	ldr	r6, [sp, #32]
 8010514:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010516:	9312      	str	r3, [sp, #72]	; 0x48
 8010518:	f7f1 ff40 	bl	800239c <__aeabi_i2d>
 801051c:	0032      	movs	r2, r6
 801051e:	003b      	movs	r3, r7
 8010520:	f7f1 f8a4 	bl	800166c <__aeabi_dmul>
 8010524:	2200      	movs	r2, #0
 8010526:	4bc1      	ldr	r3, [pc, #772]	; (801082c <_dtoa_r+0x700>)
 8010528:	f7f0 f946 	bl	80007b8 <__aeabi_dadd>
 801052c:	4ac0      	ldr	r2, [pc, #768]	; (8010830 <_dtoa_r+0x704>)
 801052e:	9014      	str	r0, [sp, #80]	; 0x50
 8010530:	9115      	str	r1, [sp, #84]	; 0x54
 8010532:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010534:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8010536:	4694      	mov	ip, r2
 8010538:	9308      	str	r3, [sp, #32]
 801053a:	9409      	str	r4, [sp, #36]	; 0x24
 801053c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801053e:	4463      	add	r3, ip
 8010540:	9318      	str	r3, [sp, #96]	; 0x60
 8010542:	9309      	str	r3, [sp, #36]	; 0x24
 8010544:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010546:	2b00      	cmp	r3, #0
 8010548:	d15e      	bne.n	8010608 <_dtoa_r+0x4dc>
 801054a:	2200      	movs	r2, #0
 801054c:	4bb9      	ldr	r3, [pc, #740]	; (8010834 <_dtoa_r+0x708>)
 801054e:	0030      	movs	r0, r6
 8010550:	0039      	movs	r1, r7
 8010552:	f7f1 fb4d 	bl	8001bf0 <__aeabi_dsub>
 8010556:	9a08      	ldr	r2, [sp, #32]
 8010558:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801055a:	0004      	movs	r4, r0
 801055c:	000d      	movs	r5, r1
 801055e:	f7ef ff8d 	bl	800047c <__aeabi_dcmpgt>
 8010562:	2800      	cmp	r0, #0
 8010564:	d000      	beq.n	8010568 <_dtoa_r+0x43c>
 8010566:	e2b3      	b.n	8010ad0 <_dtoa_r+0x9a4>
 8010568:	48b3      	ldr	r0, [pc, #716]	; (8010838 <_dtoa_r+0x70c>)
 801056a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801056c:	4684      	mov	ip, r0
 801056e:	4461      	add	r1, ip
 8010570:	000b      	movs	r3, r1
 8010572:	0020      	movs	r0, r4
 8010574:	0029      	movs	r1, r5
 8010576:	9a08      	ldr	r2, [sp, #32]
 8010578:	f7ef ff6c 	bl	8000454 <__aeabi_dcmplt>
 801057c:	2800      	cmp	r0, #0
 801057e:	d000      	beq.n	8010582 <_dtoa_r+0x456>
 8010580:	e2a3      	b.n	8010aca <_dtoa_r+0x99e>
 8010582:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010584:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010586:	9308      	str	r3, [sp, #32]
 8010588:	9409      	str	r4, [sp, #36]	; 0x24
 801058a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801058c:	2b00      	cmp	r3, #0
 801058e:	da00      	bge.n	8010592 <_dtoa_r+0x466>
 8010590:	e179      	b.n	8010886 <_dtoa_r+0x75a>
 8010592:	9a03      	ldr	r2, [sp, #12]
 8010594:	2a0e      	cmp	r2, #14
 8010596:	dd00      	ble.n	801059a <_dtoa_r+0x46e>
 8010598:	e175      	b.n	8010886 <_dtoa_r+0x75a>
 801059a:	4ba0      	ldr	r3, [pc, #640]	; (801081c <_dtoa_r+0x6f0>)
 801059c:	00d2      	lsls	r2, r2, #3
 801059e:	189b      	adds	r3, r3, r2
 80105a0:	681e      	ldr	r6, [r3, #0]
 80105a2:	685f      	ldr	r7, [r3, #4]
 80105a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	db00      	blt.n	80105ac <_dtoa_r+0x480>
 80105aa:	e0e5      	b.n	8010778 <_dtoa_r+0x64c>
 80105ac:	9b07      	ldr	r3, [sp, #28]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	dd00      	ble.n	80105b4 <_dtoa_r+0x488>
 80105b2:	e0e1      	b.n	8010778 <_dtoa_r+0x64c>
 80105b4:	d000      	beq.n	80105b8 <_dtoa_r+0x48c>
 80105b6:	e288      	b.n	8010aca <_dtoa_r+0x99e>
 80105b8:	2200      	movs	r2, #0
 80105ba:	0030      	movs	r0, r6
 80105bc:	0039      	movs	r1, r7
 80105be:	4b9d      	ldr	r3, [pc, #628]	; (8010834 <_dtoa_r+0x708>)
 80105c0:	f7f1 f854 	bl	800166c <__aeabi_dmul>
 80105c4:	9a08      	ldr	r2, [sp, #32]
 80105c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105c8:	f7ef ff62 	bl	8000490 <__aeabi_dcmpge>
 80105cc:	9e07      	ldr	r6, [sp, #28]
 80105ce:	0037      	movs	r7, r6
 80105d0:	2800      	cmp	r0, #0
 80105d2:	d000      	beq.n	80105d6 <_dtoa_r+0x4aa>
 80105d4:	e25f      	b.n	8010a96 <_dtoa_r+0x96a>
 80105d6:	9b06      	ldr	r3, [sp, #24]
 80105d8:	9a06      	ldr	r2, [sp, #24]
 80105da:	3301      	adds	r3, #1
 80105dc:	9308      	str	r3, [sp, #32]
 80105de:	2331      	movs	r3, #49	; 0x31
 80105e0:	7013      	strb	r3, [r2, #0]
 80105e2:	9b03      	ldr	r3, [sp, #12]
 80105e4:	3301      	adds	r3, #1
 80105e6:	9303      	str	r3, [sp, #12]
 80105e8:	e25a      	b.n	8010aa0 <_dtoa_r+0x974>
 80105ea:	423d      	tst	r5, r7
 80105ec:	d005      	beq.n	80105fa <_dtoa_r+0x4ce>
 80105ee:	6832      	ldr	r2, [r6, #0]
 80105f0:	6873      	ldr	r3, [r6, #4]
 80105f2:	f7f1 f83b 	bl	800166c <__aeabi_dmul>
 80105f6:	003b      	movs	r3, r7
 80105f8:	3401      	adds	r4, #1
 80105fa:	106d      	asrs	r5, r5, #1
 80105fc:	3608      	adds	r6, #8
 80105fe:	e75f      	b.n	80104c0 <_dtoa_r+0x394>
 8010600:	9b03      	ldr	r3, [sp, #12]
 8010602:	930e      	str	r3, [sp, #56]	; 0x38
 8010604:	9b07      	ldr	r3, [sp, #28]
 8010606:	e783      	b.n	8010510 <_dtoa_r+0x3e4>
 8010608:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801060a:	4b84      	ldr	r3, [pc, #528]	; (801081c <_dtoa_r+0x6f0>)
 801060c:	3a01      	subs	r2, #1
 801060e:	00d2      	lsls	r2, r2, #3
 8010610:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010612:	189b      	adds	r3, r3, r2
 8010614:	9c08      	ldr	r4, [sp, #32]
 8010616:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010618:	681a      	ldr	r2, [r3, #0]
 801061a:	685b      	ldr	r3, [r3, #4]
 801061c:	2900      	cmp	r1, #0
 801061e:	d051      	beq.n	80106c4 <_dtoa_r+0x598>
 8010620:	2000      	movs	r0, #0
 8010622:	4986      	ldr	r1, [pc, #536]	; (801083c <_dtoa_r+0x710>)
 8010624:	f7f0 fc28 	bl	8000e78 <__aeabi_ddiv>
 8010628:	0022      	movs	r2, r4
 801062a:	002b      	movs	r3, r5
 801062c:	f7f1 fae0 	bl	8001bf0 <__aeabi_dsub>
 8010630:	9a06      	ldr	r2, [sp, #24]
 8010632:	0004      	movs	r4, r0
 8010634:	4694      	mov	ip, r2
 8010636:	000d      	movs	r5, r1
 8010638:	9b06      	ldr	r3, [sp, #24]
 801063a:	9314      	str	r3, [sp, #80]	; 0x50
 801063c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801063e:	4463      	add	r3, ip
 8010640:	9318      	str	r3, [sp, #96]	; 0x60
 8010642:	0039      	movs	r1, r7
 8010644:	0030      	movs	r0, r6
 8010646:	f7f1 fe73 	bl	8002330 <__aeabi_d2iz>
 801064a:	9012      	str	r0, [sp, #72]	; 0x48
 801064c:	f7f1 fea6 	bl	800239c <__aeabi_i2d>
 8010650:	0002      	movs	r2, r0
 8010652:	000b      	movs	r3, r1
 8010654:	0030      	movs	r0, r6
 8010656:	0039      	movs	r1, r7
 8010658:	f7f1 faca 	bl	8001bf0 <__aeabi_dsub>
 801065c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801065e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010660:	3301      	adds	r3, #1
 8010662:	9308      	str	r3, [sp, #32]
 8010664:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010666:	0006      	movs	r6, r0
 8010668:	3330      	adds	r3, #48	; 0x30
 801066a:	7013      	strb	r3, [r2, #0]
 801066c:	0022      	movs	r2, r4
 801066e:	002b      	movs	r3, r5
 8010670:	000f      	movs	r7, r1
 8010672:	f7ef feef 	bl	8000454 <__aeabi_dcmplt>
 8010676:	2800      	cmp	r0, #0
 8010678:	d174      	bne.n	8010764 <_dtoa_r+0x638>
 801067a:	0032      	movs	r2, r6
 801067c:	003b      	movs	r3, r7
 801067e:	2000      	movs	r0, #0
 8010680:	4968      	ldr	r1, [pc, #416]	; (8010824 <_dtoa_r+0x6f8>)
 8010682:	f7f1 fab5 	bl	8001bf0 <__aeabi_dsub>
 8010686:	0022      	movs	r2, r4
 8010688:	002b      	movs	r3, r5
 801068a:	f7ef fee3 	bl	8000454 <__aeabi_dcmplt>
 801068e:	2800      	cmp	r0, #0
 8010690:	d000      	beq.n	8010694 <_dtoa_r+0x568>
 8010692:	e0d7      	b.n	8010844 <_dtoa_r+0x718>
 8010694:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010696:	9a08      	ldr	r2, [sp, #32]
 8010698:	4293      	cmp	r3, r2
 801069a:	d100      	bne.n	801069e <_dtoa_r+0x572>
 801069c:	e771      	b.n	8010582 <_dtoa_r+0x456>
 801069e:	2200      	movs	r2, #0
 80106a0:	0020      	movs	r0, r4
 80106a2:	0029      	movs	r1, r5
 80106a4:	4b60      	ldr	r3, [pc, #384]	; (8010828 <_dtoa_r+0x6fc>)
 80106a6:	f7f0 ffe1 	bl	800166c <__aeabi_dmul>
 80106aa:	4b5f      	ldr	r3, [pc, #380]	; (8010828 <_dtoa_r+0x6fc>)
 80106ac:	0004      	movs	r4, r0
 80106ae:	000d      	movs	r5, r1
 80106b0:	0030      	movs	r0, r6
 80106b2:	0039      	movs	r1, r7
 80106b4:	2200      	movs	r2, #0
 80106b6:	f7f0 ffd9 	bl	800166c <__aeabi_dmul>
 80106ba:	9b08      	ldr	r3, [sp, #32]
 80106bc:	0006      	movs	r6, r0
 80106be:	000f      	movs	r7, r1
 80106c0:	9314      	str	r3, [sp, #80]	; 0x50
 80106c2:	e7be      	b.n	8010642 <_dtoa_r+0x516>
 80106c4:	0020      	movs	r0, r4
 80106c6:	0029      	movs	r1, r5
 80106c8:	f7f0 ffd0 	bl	800166c <__aeabi_dmul>
 80106cc:	9a06      	ldr	r2, [sp, #24]
 80106ce:	9b06      	ldr	r3, [sp, #24]
 80106d0:	4694      	mov	ip, r2
 80106d2:	9308      	str	r3, [sp, #32]
 80106d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80106d6:	9014      	str	r0, [sp, #80]	; 0x50
 80106d8:	9115      	str	r1, [sp, #84]	; 0x54
 80106da:	4463      	add	r3, ip
 80106dc:	9319      	str	r3, [sp, #100]	; 0x64
 80106de:	0030      	movs	r0, r6
 80106e0:	0039      	movs	r1, r7
 80106e2:	f7f1 fe25 	bl	8002330 <__aeabi_d2iz>
 80106e6:	9018      	str	r0, [sp, #96]	; 0x60
 80106e8:	f7f1 fe58 	bl	800239c <__aeabi_i2d>
 80106ec:	0002      	movs	r2, r0
 80106ee:	000b      	movs	r3, r1
 80106f0:	0030      	movs	r0, r6
 80106f2:	0039      	movs	r1, r7
 80106f4:	f7f1 fa7c 	bl	8001bf0 <__aeabi_dsub>
 80106f8:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80106fa:	9b08      	ldr	r3, [sp, #32]
 80106fc:	3630      	adds	r6, #48	; 0x30
 80106fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010700:	701e      	strb	r6, [r3, #0]
 8010702:	3301      	adds	r3, #1
 8010704:	0004      	movs	r4, r0
 8010706:	000d      	movs	r5, r1
 8010708:	9308      	str	r3, [sp, #32]
 801070a:	4293      	cmp	r3, r2
 801070c:	d12d      	bne.n	801076a <_dtoa_r+0x63e>
 801070e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010710:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010712:	9a06      	ldr	r2, [sp, #24]
 8010714:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010716:	4694      	mov	ip, r2
 8010718:	4463      	add	r3, ip
 801071a:	2200      	movs	r2, #0
 801071c:	9308      	str	r3, [sp, #32]
 801071e:	4b47      	ldr	r3, [pc, #284]	; (801083c <_dtoa_r+0x710>)
 8010720:	f7f0 f84a 	bl	80007b8 <__aeabi_dadd>
 8010724:	0002      	movs	r2, r0
 8010726:	000b      	movs	r3, r1
 8010728:	0020      	movs	r0, r4
 801072a:	0029      	movs	r1, r5
 801072c:	f7ef fea6 	bl	800047c <__aeabi_dcmpgt>
 8010730:	2800      	cmp	r0, #0
 8010732:	d000      	beq.n	8010736 <_dtoa_r+0x60a>
 8010734:	e086      	b.n	8010844 <_dtoa_r+0x718>
 8010736:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010738:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801073a:	2000      	movs	r0, #0
 801073c:	493f      	ldr	r1, [pc, #252]	; (801083c <_dtoa_r+0x710>)
 801073e:	f7f1 fa57 	bl	8001bf0 <__aeabi_dsub>
 8010742:	0002      	movs	r2, r0
 8010744:	000b      	movs	r3, r1
 8010746:	0020      	movs	r0, r4
 8010748:	0029      	movs	r1, r5
 801074a:	f7ef fe83 	bl	8000454 <__aeabi_dcmplt>
 801074e:	2800      	cmp	r0, #0
 8010750:	d100      	bne.n	8010754 <_dtoa_r+0x628>
 8010752:	e716      	b.n	8010582 <_dtoa_r+0x456>
 8010754:	9b08      	ldr	r3, [sp, #32]
 8010756:	001a      	movs	r2, r3
 8010758:	3a01      	subs	r2, #1
 801075a:	9208      	str	r2, [sp, #32]
 801075c:	7812      	ldrb	r2, [r2, #0]
 801075e:	2a30      	cmp	r2, #48	; 0x30
 8010760:	d0f8      	beq.n	8010754 <_dtoa_r+0x628>
 8010762:	9308      	str	r3, [sp, #32]
 8010764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010766:	9303      	str	r3, [sp, #12]
 8010768:	e046      	b.n	80107f8 <_dtoa_r+0x6cc>
 801076a:	2200      	movs	r2, #0
 801076c:	4b2e      	ldr	r3, [pc, #184]	; (8010828 <_dtoa_r+0x6fc>)
 801076e:	f7f0 ff7d 	bl	800166c <__aeabi_dmul>
 8010772:	0006      	movs	r6, r0
 8010774:	000f      	movs	r7, r1
 8010776:	e7b2      	b.n	80106de <_dtoa_r+0x5b2>
 8010778:	9b06      	ldr	r3, [sp, #24]
 801077a:	9a06      	ldr	r2, [sp, #24]
 801077c:	930a      	str	r3, [sp, #40]	; 0x28
 801077e:	9b07      	ldr	r3, [sp, #28]
 8010780:	9c08      	ldr	r4, [sp, #32]
 8010782:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010784:	3b01      	subs	r3, #1
 8010786:	189b      	adds	r3, r3, r2
 8010788:	930b      	str	r3, [sp, #44]	; 0x2c
 801078a:	0032      	movs	r2, r6
 801078c:	003b      	movs	r3, r7
 801078e:	0020      	movs	r0, r4
 8010790:	0029      	movs	r1, r5
 8010792:	f7f0 fb71 	bl	8000e78 <__aeabi_ddiv>
 8010796:	f7f1 fdcb 	bl	8002330 <__aeabi_d2iz>
 801079a:	9007      	str	r0, [sp, #28]
 801079c:	f7f1 fdfe 	bl	800239c <__aeabi_i2d>
 80107a0:	0032      	movs	r2, r6
 80107a2:	003b      	movs	r3, r7
 80107a4:	f7f0 ff62 	bl	800166c <__aeabi_dmul>
 80107a8:	0002      	movs	r2, r0
 80107aa:	000b      	movs	r3, r1
 80107ac:	0020      	movs	r0, r4
 80107ae:	0029      	movs	r1, r5
 80107b0:	f7f1 fa1e 	bl	8001bf0 <__aeabi_dsub>
 80107b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107b6:	001a      	movs	r2, r3
 80107b8:	3201      	adds	r2, #1
 80107ba:	920a      	str	r2, [sp, #40]	; 0x28
 80107bc:	9208      	str	r2, [sp, #32]
 80107be:	9a07      	ldr	r2, [sp, #28]
 80107c0:	3230      	adds	r2, #48	; 0x30
 80107c2:	701a      	strb	r2, [r3, #0]
 80107c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d14f      	bne.n	801086a <_dtoa_r+0x73e>
 80107ca:	0002      	movs	r2, r0
 80107cc:	000b      	movs	r3, r1
 80107ce:	f7ef fff3 	bl	80007b8 <__aeabi_dadd>
 80107d2:	0032      	movs	r2, r6
 80107d4:	003b      	movs	r3, r7
 80107d6:	0004      	movs	r4, r0
 80107d8:	000d      	movs	r5, r1
 80107da:	f7ef fe4f 	bl	800047c <__aeabi_dcmpgt>
 80107de:	2800      	cmp	r0, #0
 80107e0:	d12e      	bne.n	8010840 <_dtoa_r+0x714>
 80107e2:	0032      	movs	r2, r6
 80107e4:	003b      	movs	r3, r7
 80107e6:	0020      	movs	r0, r4
 80107e8:	0029      	movs	r1, r5
 80107ea:	f7ef fe2d 	bl	8000448 <__aeabi_dcmpeq>
 80107ee:	2800      	cmp	r0, #0
 80107f0:	d002      	beq.n	80107f8 <_dtoa_r+0x6cc>
 80107f2:	9b07      	ldr	r3, [sp, #28]
 80107f4:	07de      	lsls	r6, r3, #31
 80107f6:	d423      	bmi.n	8010840 <_dtoa_r+0x714>
 80107f8:	9905      	ldr	r1, [sp, #20]
 80107fa:	9804      	ldr	r0, [sp, #16]
 80107fc:	f7fc f8fe 	bl	800c9fc <_Bfree>
 8010800:	2300      	movs	r3, #0
 8010802:	9a08      	ldr	r2, [sp, #32]
 8010804:	7013      	strb	r3, [r2, #0]
 8010806:	9b03      	ldr	r3, [sp, #12]
 8010808:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801080a:	3301      	adds	r3, #1
 801080c:	6013      	str	r3, [r2, #0]
 801080e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010810:	2b00      	cmp	r3, #0
 8010812:	d100      	bne.n	8010816 <_dtoa_r+0x6ea>
 8010814:	e4bd      	b.n	8010192 <_dtoa_r+0x66>
 8010816:	9a08      	ldr	r2, [sp, #32]
 8010818:	601a      	str	r2, [r3, #0]
 801081a:	e4ba      	b.n	8010192 <_dtoa_r+0x66>
 801081c:	08014708 	.word	0x08014708
 8010820:	080146e0 	.word	0x080146e0
 8010824:	3ff00000 	.word	0x3ff00000
 8010828:	40240000 	.word	0x40240000
 801082c:	401c0000 	.word	0x401c0000
 8010830:	fcc00000 	.word	0xfcc00000
 8010834:	40140000 	.word	0x40140000
 8010838:	7cc00000 	.word	0x7cc00000
 801083c:	3fe00000 	.word	0x3fe00000
 8010840:	9b03      	ldr	r3, [sp, #12]
 8010842:	930e      	str	r3, [sp, #56]	; 0x38
 8010844:	9b08      	ldr	r3, [sp, #32]
 8010846:	9308      	str	r3, [sp, #32]
 8010848:	3b01      	subs	r3, #1
 801084a:	781a      	ldrb	r2, [r3, #0]
 801084c:	2a39      	cmp	r2, #57	; 0x39
 801084e:	d108      	bne.n	8010862 <_dtoa_r+0x736>
 8010850:	9a06      	ldr	r2, [sp, #24]
 8010852:	429a      	cmp	r2, r3
 8010854:	d1f7      	bne.n	8010846 <_dtoa_r+0x71a>
 8010856:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010858:	9906      	ldr	r1, [sp, #24]
 801085a:	3201      	adds	r2, #1
 801085c:	920e      	str	r2, [sp, #56]	; 0x38
 801085e:	2230      	movs	r2, #48	; 0x30
 8010860:	700a      	strb	r2, [r1, #0]
 8010862:	781a      	ldrb	r2, [r3, #0]
 8010864:	3201      	adds	r2, #1
 8010866:	701a      	strb	r2, [r3, #0]
 8010868:	e77c      	b.n	8010764 <_dtoa_r+0x638>
 801086a:	2200      	movs	r2, #0
 801086c:	4ba9      	ldr	r3, [pc, #676]	; (8010b14 <_dtoa_r+0x9e8>)
 801086e:	f7f0 fefd 	bl	800166c <__aeabi_dmul>
 8010872:	2200      	movs	r2, #0
 8010874:	2300      	movs	r3, #0
 8010876:	0004      	movs	r4, r0
 8010878:	000d      	movs	r5, r1
 801087a:	f7ef fde5 	bl	8000448 <__aeabi_dcmpeq>
 801087e:	2800      	cmp	r0, #0
 8010880:	d100      	bne.n	8010884 <_dtoa_r+0x758>
 8010882:	e782      	b.n	801078a <_dtoa_r+0x65e>
 8010884:	e7b8      	b.n	80107f8 <_dtoa_r+0x6cc>
 8010886:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010888:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801088a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801088c:	2f00      	cmp	r7, #0
 801088e:	d012      	beq.n	80108b6 <_dtoa_r+0x78a>
 8010890:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010892:	2a01      	cmp	r2, #1
 8010894:	dc6e      	bgt.n	8010974 <_dtoa_r+0x848>
 8010896:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010898:	2a00      	cmp	r2, #0
 801089a:	d065      	beq.n	8010968 <_dtoa_r+0x83c>
 801089c:	4a9e      	ldr	r2, [pc, #632]	; (8010b18 <_dtoa_r+0x9ec>)
 801089e:	189b      	adds	r3, r3, r2
 80108a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108a2:	2101      	movs	r1, #1
 80108a4:	18d2      	adds	r2, r2, r3
 80108a6:	920a      	str	r2, [sp, #40]	; 0x28
 80108a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80108aa:	9804      	ldr	r0, [sp, #16]
 80108ac:	18d3      	adds	r3, r2, r3
 80108ae:	930c      	str	r3, [sp, #48]	; 0x30
 80108b0:	f7fc f986 	bl	800cbc0 <__i2b>
 80108b4:	0007      	movs	r7, r0
 80108b6:	2c00      	cmp	r4, #0
 80108b8:	d00e      	beq.n	80108d8 <_dtoa_r+0x7ac>
 80108ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108bc:	2b00      	cmp	r3, #0
 80108be:	dd0b      	ble.n	80108d8 <_dtoa_r+0x7ac>
 80108c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80108c2:	0023      	movs	r3, r4
 80108c4:	4294      	cmp	r4, r2
 80108c6:	dd00      	ble.n	80108ca <_dtoa_r+0x79e>
 80108c8:	0013      	movs	r3, r2
 80108ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108cc:	1ae4      	subs	r4, r4, r3
 80108ce:	1ad2      	subs	r2, r2, r3
 80108d0:	920a      	str	r2, [sp, #40]	; 0x28
 80108d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80108d4:	1ad3      	subs	r3, r2, r3
 80108d6:	930c      	str	r3, [sp, #48]	; 0x30
 80108d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d01e      	beq.n	801091c <_dtoa_r+0x7f0>
 80108de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d05c      	beq.n	801099e <_dtoa_r+0x872>
 80108e4:	2d00      	cmp	r5, #0
 80108e6:	dd10      	ble.n	801090a <_dtoa_r+0x7de>
 80108e8:	0039      	movs	r1, r7
 80108ea:	002a      	movs	r2, r5
 80108ec:	9804      	ldr	r0, [sp, #16]
 80108ee:	f7fc fa2f 	bl	800cd50 <__pow5mult>
 80108f2:	9a05      	ldr	r2, [sp, #20]
 80108f4:	0001      	movs	r1, r0
 80108f6:	0007      	movs	r7, r0
 80108f8:	9804      	ldr	r0, [sp, #16]
 80108fa:	f7fc f979 	bl	800cbf0 <__multiply>
 80108fe:	0006      	movs	r6, r0
 8010900:	9905      	ldr	r1, [sp, #20]
 8010902:	9804      	ldr	r0, [sp, #16]
 8010904:	f7fc f87a 	bl	800c9fc <_Bfree>
 8010908:	9605      	str	r6, [sp, #20]
 801090a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801090c:	1b5a      	subs	r2, r3, r5
 801090e:	42ab      	cmp	r3, r5
 8010910:	d004      	beq.n	801091c <_dtoa_r+0x7f0>
 8010912:	9905      	ldr	r1, [sp, #20]
 8010914:	9804      	ldr	r0, [sp, #16]
 8010916:	f7fc fa1b 	bl	800cd50 <__pow5mult>
 801091a:	9005      	str	r0, [sp, #20]
 801091c:	2101      	movs	r1, #1
 801091e:	9804      	ldr	r0, [sp, #16]
 8010920:	f7fc f94e 	bl	800cbc0 <__i2b>
 8010924:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010926:	0006      	movs	r6, r0
 8010928:	2b00      	cmp	r3, #0
 801092a:	dd3a      	ble.n	80109a2 <_dtoa_r+0x876>
 801092c:	001a      	movs	r2, r3
 801092e:	0001      	movs	r1, r0
 8010930:	9804      	ldr	r0, [sp, #16]
 8010932:	f7fc fa0d 	bl	800cd50 <__pow5mult>
 8010936:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010938:	0006      	movs	r6, r0
 801093a:	2500      	movs	r5, #0
 801093c:	2b01      	cmp	r3, #1
 801093e:	dc38      	bgt.n	80109b2 <_dtoa_r+0x886>
 8010940:	2500      	movs	r5, #0
 8010942:	9b08      	ldr	r3, [sp, #32]
 8010944:	42ab      	cmp	r3, r5
 8010946:	d130      	bne.n	80109aa <_dtoa_r+0x87e>
 8010948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801094a:	031b      	lsls	r3, r3, #12
 801094c:	42ab      	cmp	r3, r5
 801094e:	d12c      	bne.n	80109aa <_dtoa_r+0x87e>
 8010950:	4b72      	ldr	r3, [pc, #456]	; (8010b1c <_dtoa_r+0x9f0>)
 8010952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010954:	4213      	tst	r3, r2
 8010956:	d028      	beq.n	80109aa <_dtoa_r+0x87e>
 8010958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801095a:	3501      	adds	r5, #1
 801095c:	3301      	adds	r3, #1
 801095e:	930a      	str	r3, [sp, #40]	; 0x28
 8010960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010962:	3301      	adds	r3, #1
 8010964:	930c      	str	r3, [sp, #48]	; 0x30
 8010966:	e020      	b.n	80109aa <_dtoa_r+0x87e>
 8010968:	2336      	movs	r3, #54	; 0x36
 801096a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801096c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801096e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010970:	1a9b      	subs	r3, r3, r2
 8010972:	e795      	b.n	80108a0 <_dtoa_r+0x774>
 8010974:	9b07      	ldr	r3, [sp, #28]
 8010976:	1e5d      	subs	r5, r3, #1
 8010978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801097a:	42ab      	cmp	r3, r5
 801097c:	db07      	blt.n	801098e <_dtoa_r+0x862>
 801097e:	1b5d      	subs	r5, r3, r5
 8010980:	9b07      	ldr	r3, [sp, #28]
 8010982:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010984:	2b00      	cmp	r3, #0
 8010986:	da8b      	bge.n	80108a0 <_dtoa_r+0x774>
 8010988:	1ae4      	subs	r4, r4, r3
 801098a:	2300      	movs	r3, #0
 801098c:	e788      	b.n	80108a0 <_dtoa_r+0x774>
 801098e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010990:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010992:	1aeb      	subs	r3, r5, r3
 8010994:	18d3      	adds	r3, r2, r3
 8010996:	950d      	str	r5, [sp, #52]	; 0x34
 8010998:	9313      	str	r3, [sp, #76]	; 0x4c
 801099a:	2500      	movs	r5, #0
 801099c:	e7f0      	b.n	8010980 <_dtoa_r+0x854>
 801099e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80109a0:	e7b7      	b.n	8010912 <_dtoa_r+0x7e6>
 80109a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80109a4:	2500      	movs	r5, #0
 80109a6:	2b01      	cmp	r3, #1
 80109a8:	ddca      	ble.n	8010940 <_dtoa_r+0x814>
 80109aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80109ac:	2001      	movs	r0, #1
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d008      	beq.n	80109c4 <_dtoa_r+0x898>
 80109b2:	6933      	ldr	r3, [r6, #16]
 80109b4:	3303      	adds	r3, #3
 80109b6:	009b      	lsls	r3, r3, #2
 80109b8:	18f3      	adds	r3, r6, r3
 80109ba:	6858      	ldr	r0, [r3, #4]
 80109bc:	f7fc f8b8 	bl	800cb30 <__hi0bits>
 80109c0:	2320      	movs	r3, #32
 80109c2:	1a18      	subs	r0, r3, r0
 80109c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109c6:	1818      	adds	r0, r3, r0
 80109c8:	0002      	movs	r2, r0
 80109ca:	231f      	movs	r3, #31
 80109cc:	401a      	ands	r2, r3
 80109ce:	4218      	tst	r0, r3
 80109d0:	d047      	beq.n	8010a62 <_dtoa_r+0x936>
 80109d2:	3301      	adds	r3, #1
 80109d4:	1a9b      	subs	r3, r3, r2
 80109d6:	2b04      	cmp	r3, #4
 80109d8:	dd3f      	ble.n	8010a5a <_dtoa_r+0x92e>
 80109da:	231c      	movs	r3, #28
 80109dc:	1a9b      	subs	r3, r3, r2
 80109de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109e0:	18e4      	adds	r4, r4, r3
 80109e2:	18d2      	adds	r2, r2, r3
 80109e4:	920a      	str	r2, [sp, #40]	; 0x28
 80109e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109e8:	18d3      	adds	r3, r2, r3
 80109ea:	930c      	str	r3, [sp, #48]	; 0x30
 80109ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	dd05      	ble.n	80109fe <_dtoa_r+0x8d2>
 80109f2:	001a      	movs	r2, r3
 80109f4:	9905      	ldr	r1, [sp, #20]
 80109f6:	9804      	ldr	r0, [sp, #16]
 80109f8:	f7fc f9ec 	bl	800cdd4 <__lshift>
 80109fc:	9005      	str	r0, [sp, #20]
 80109fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	dd05      	ble.n	8010a10 <_dtoa_r+0x8e4>
 8010a04:	0031      	movs	r1, r6
 8010a06:	001a      	movs	r2, r3
 8010a08:	9804      	ldr	r0, [sp, #16]
 8010a0a:	f7fc f9e3 	bl	800cdd4 <__lshift>
 8010a0e:	0006      	movs	r6, r0
 8010a10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d027      	beq.n	8010a66 <_dtoa_r+0x93a>
 8010a16:	0031      	movs	r1, r6
 8010a18:	9805      	ldr	r0, [sp, #20]
 8010a1a:	f7fc fa49 	bl	800ceb0 <__mcmp>
 8010a1e:	2800      	cmp	r0, #0
 8010a20:	da21      	bge.n	8010a66 <_dtoa_r+0x93a>
 8010a22:	9b03      	ldr	r3, [sp, #12]
 8010a24:	220a      	movs	r2, #10
 8010a26:	3b01      	subs	r3, #1
 8010a28:	9303      	str	r3, [sp, #12]
 8010a2a:	9905      	ldr	r1, [sp, #20]
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	9804      	ldr	r0, [sp, #16]
 8010a30:	f7fb ffee 	bl	800ca10 <__multadd>
 8010a34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a36:	9005      	str	r0, [sp, #20]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d100      	bne.n	8010a3e <_dtoa_r+0x912>
 8010a3c:	e15d      	b.n	8010cfa <_dtoa_r+0xbce>
 8010a3e:	2300      	movs	r3, #0
 8010a40:	0039      	movs	r1, r7
 8010a42:	220a      	movs	r2, #10
 8010a44:	9804      	ldr	r0, [sp, #16]
 8010a46:	f7fb ffe3 	bl	800ca10 <__multadd>
 8010a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a4c:	0007      	movs	r7, r0
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	dc49      	bgt.n	8010ae6 <_dtoa_r+0x9ba>
 8010a52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010a54:	2b02      	cmp	r3, #2
 8010a56:	dc0e      	bgt.n	8010a76 <_dtoa_r+0x94a>
 8010a58:	e045      	b.n	8010ae6 <_dtoa_r+0x9ba>
 8010a5a:	2b04      	cmp	r3, #4
 8010a5c:	d0c6      	beq.n	80109ec <_dtoa_r+0x8c0>
 8010a5e:	331c      	adds	r3, #28
 8010a60:	e7bd      	b.n	80109de <_dtoa_r+0x8b2>
 8010a62:	0013      	movs	r3, r2
 8010a64:	e7fb      	b.n	8010a5e <_dtoa_r+0x932>
 8010a66:	9b07      	ldr	r3, [sp, #28]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	dc36      	bgt.n	8010ada <_dtoa_r+0x9ae>
 8010a6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010a6e:	2b02      	cmp	r3, #2
 8010a70:	dd33      	ble.n	8010ada <_dtoa_r+0x9ae>
 8010a72:	9b07      	ldr	r3, [sp, #28]
 8010a74:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d10c      	bne.n	8010a96 <_dtoa_r+0x96a>
 8010a7c:	0031      	movs	r1, r6
 8010a7e:	2205      	movs	r2, #5
 8010a80:	9804      	ldr	r0, [sp, #16]
 8010a82:	f7fb ffc5 	bl	800ca10 <__multadd>
 8010a86:	0006      	movs	r6, r0
 8010a88:	0001      	movs	r1, r0
 8010a8a:	9805      	ldr	r0, [sp, #20]
 8010a8c:	f7fc fa10 	bl	800ceb0 <__mcmp>
 8010a90:	2800      	cmp	r0, #0
 8010a92:	dd00      	ble.n	8010a96 <_dtoa_r+0x96a>
 8010a94:	e59f      	b.n	80105d6 <_dtoa_r+0x4aa>
 8010a96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010a98:	43db      	mvns	r3, r3
 8010a9a:	9303      	str	r3, [sp, #12]
 8010a9c:	9b06      	ldr	r3, [sp, #24]
 8010a9e:	9308      	str	r3, [sp, #32]
 8010aa0:	2500      	movs	r5, #0
 8010aa2:	0031      	movs	r1, r6
 8010aa4:	9804      	ldr	r0, [sp, #16]
 8010aa6:	f7fb ffa9 	bl	800c9fc <_Bfree>
 8010aaa:	2f00      	cmp	r7, #0
 8010aac:	d100      	bne.n	8010ab0 <_dtoa_r+0x984>
 8010aae:	e6a3      	b.n	80107f8 <_dtoa_r+0x6cc>
 8010ab0:	2d00      	cmp	r5, #0
 8010ab2:	d005      	beq.n	8010ac0 <_dtoa_r+0x994>
 8010ab4:	42bd      	cmp	r5, r7
 8010ab6:	d003      	beq.n	8010ac0 <_dtoa_r+0x994>
 8010ab8:	0029      	movs	r1, r5
 8010aba:	9804      	ldr	r0, [sp, #16]
 8010abc:	f7fb ff9e 	bl	800c9fc <_Bfree>
 8010ac0:	0039      	movs	r1, r7
 8010ac2:	9804      	ldr	r0, [sp, #16]
 8010ac4:	f7fb ff9a 	bl	800c9fc <_Bfree>
 8010ac8:	e696      	b.n	80107f8 <_dtoa_r+0x6cc>
 8010aca:	2600      	movs	r6, #0
 8010acc:	0037      	movs	r7, r6
 8010ace:	e7e2      	b.n	8010a96 <_dtoa_r+0x96a>
 8010ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ad2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010ad4:	9303      	str	r3, [sp, #12]
 8010ad6:	0037      	movs	r7, r6
 8010ad8:	e57d      	b.n	80105d6 <_dtoa_r+0x4aa>
 8010ada:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d100      	bne.n	8010ae2 <_dtoa_r+0x9b6>
 8010ae0:	e0c3      	b.n	8010c6a <_dtoa_r+0xb3e>
 8010ae2:	9b07      	ldr	r3, [sp, #28]
 8010ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ae6:	2c00      	cmp	r4, #0
 8010ae8:	dd05      	ble.n	8010af6 <_dtoa_r+0x9ca>
 8010aea:	0039      	movs	r1, r7
 8010aec:	0022      	movs	r2, r4
 8010aee:	9804      	ldr	r0, [sp, #16]
 8010af0:	f7fc f970 	bl	800cdd4 <__lshift>
 8010af4:	0007      	movs	r7, r0
 8010af6:	0038      	movs	r0, r7
 8010af8:	2d00      	cmp	r5, #0
 8010afa:	d024      	beq.n	8010b46 <_dtoa_r+0xa1a>
 8010afc:	6879      	ldr	r1, [r7, #4]
 8010afe:	9804      	ldr	r0, [sp, #16]
 8010b00:	f7fb ff54 	bl	800c9ac <_Balloc>
 8010b04:	1e04      	subs	r4, r0, #0
 8010b06:	d111      	bne.n	8010b2c <_dtoa_r+0xa00>
 8010b08:	0022      	movs	r2, r4
 8010b0a:	4b05      	ldr	r3, [pc, #20]	; (8010b20 <_dtoa_r+0x9f4>)
 8010b0c:	4805      	ldr	r0, [pc, #20]	; (8010b24 <_dtoa_r+0x9f8>)
 8010b0e:	4906      	ldr	r1, [pc, #24]	; (8010b28 <_dtoa_r+0x9fc>)
 8010b10:	e43c      	b.n	801038c <_dtoa_r+0x260>
 8010b12:	46c0      	nop			; (mov r8, r8)
 8010b14:	40240000 	.word	0x40240000
 8010b18:	00000433 	.word	0x00000433
 8010b1c:	7ff00000 	.word	0x7ff00000
 8010b20:	08014611 	.word	0x08014611
 8010b24:	080148a1 	.word	0x080148a1
 8010b28:	000002ef 	.word	0x000002ef
 8010b2c:	0039      	movs	r1, r7
 8010b2e:	693a      	ldr	r2, [r7, #16]
 8010b30:	310c      	adds	r1, #12
 8010b32:	3202      	adds	r2, #2
 8010b34:	0092      	lsls	r2, r2, #2
 8010b36:	300c      	adds	r0, #12
 8010b38:	f7fb fa9d 	bl	800c076 <memcpy>
 8010b3c:	2201      	movs	r2, #1
 8010b3e:	0021      	movs	r1, r4
 8010b40:	9804      	ldr	r0, [sp, #16]
 8010b42:	f7fc f947 	bl	800cdd4 <__lshift>
 8010b46:	9b06      	ldr	r3, [sp, #24]
 8010b48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010b4a:	9307      	str	r3, [sp, #28]
 8010b4c:	3b01      	subs	r3, #1
 8010b4e:	189b      	adds	r3, r3, r2
 8010b50:	2201      	movs	r2, #1
 8010b52:	003d      	movs	r5, r7
 8010b54:	0007      	movs	r7, r0
 8010b56:	930e      	str	r3, [sp, #56]	; 0x38
 8010b58:	9b08      	ldr	r3, [sp, #32]
 8010b5a:	4013      	ands	r3, r2
 8010b5c:	930d      	str	r3, [sp, #52]	; 0x34
 8010b5e:	0031      	movs	r1, r6
 8010b60:	9805      	ldr	r0, [sp, #20]
 8010b62:	f7ff fa53 	bl	801000c <quorem>
 8010b66:	0029      	movs	r1, r5
 8010b68:	0004      	movs	r4, r0
 8010b6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8010b6c:	9805      	ldr	r0, [sp, #20]
 8010b6e:	f7fc f99f 	bl	800ceb0 <__mcmp>
 8010b72:	003a      	movs	r2, r7
 8010b74:	900c      	str	r0, [sp, #48]	; 0x30
 8010b76:	0031      	movs	r1, r6
 8010b78:	9804      	ldr	r0, [sp, #16]
 8010b7a:	f7fc f9b5 	bl	800cee8 <__mdiff>
 8010b7e:	2201      	movs	r2, #1
 8010b80:	68c3      	ldr	r3, [r0, #12]
 8010b82:	3430      	adds	r4, #48	; 0x30
 8010b84:	9008      	str	r0, [sp, #32]
 8010b86:	920a      	str	r2, [sp, #40]	; 0x28
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d104      	bne.n	8010b96 <_dtoa_r+0xa6a>
 8010b8c:	0001      	movs	r1, r0
 8010b8e:	9805      	ldr	r0, [sp, #20]
 8010b90:	f7fc f98e 	bl	800ceb0 <__mcmp>
 8010b94:	900a      	str	r0, [sp, #40]	; 0x28
 8010b96:	9908      	ldr	r1, [sp, #32]
 8010b98:	9804      	ldr	r0, [sp, #16]
 8010b9a:	f7fb ff2f 	bl	800c9fc <_Bfree>
 8010b9e:	9b07      	ldr	r3, [sp, #28]
 8010ba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	9308      	str	r3, [sp, #32]
 8010ba6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010ba8:	4313      	orrs	r3, r2
 8010baa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010bac:	4313      	orrs	r3, r2
 8010bae:	d109      	bne.n	8010bc4 <_dtoa_r+0xa98>
 8010bb0:	2c39      	cmp	r4, #57	; 0x39
 8010bb2:	d022      	beq.n	8010bfa <_dtoa_r+0xace>
 8010bb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	dd01      	ble.n	8010bbe <_dtoa_r+0xa92>
 8010bba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010bbc:	3431      	adds	r4, #49	; 0x31
 8010bbe:	9b07      	ldr	r3, [sp, #28]
 8010bc0:	701c      	strb	r4, [r3, #0]
 8010bc2:	e76e      	b.n	8010aa2 <_dtoa_r+0x976>
 8010bc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	db04      	blt.n	8010bd4 <_dtoa_r+0xaa8>
 8010bca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010bcc:	4313      	orrs	r3, r2
 8010bce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010bd0:	4313      	orrs	r3, r2
 8010bd2:	d11e      	bne.n	8010c12 <_dtoa_r+0xae6>
 8010bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	ddf1      	ble.n	8010bbe <_dtoa_r+0xa92>
 8010bda:	9905      	ldr	r1, [sp, #20]
 8010bdc:	2201      	movs	r2, #1
 8010bde:	9804      	ldr	r0, [sp, #16]
 8010be0:	f7fc f8f8 	bl	800cdd4 <__lshift>
 8010be4:	0031      	movs	r1, r6
 8010be6:	9005      	str	r0, [sp, #20]
 8010be8:	f7fc f962 	bl	800ceb0 <__mcmp>
 8010bec:	2800      	cmp	r0, #0
 8010bee:	dc02      	bgt.n	8010bf6 <_dtoa_r+0xaca>
 8010bf0:	d1e5      	bne.n	8010bbe <_dtoa_r+0xa92>
 8010bf2:	07e3      	lsls	r3, r4, #31
 8010bf4:	d5e3      	bpl.n	8010bbe <_dtoa_r+0xa92>
 8010bf6:	2c39      	cmp	r4, #57	; 0x39
 8010bf8:	d1df      	bne.n	8010bba <_dtoa_r+0xa8e>
 8010bfa:	2339      	movs	r3, #57	; 0x39
 8010bfc:	9a07      	ldr	r2, [sp, #28]
 8010bfe:	7013      	strb	r3, [r2, #0]
 8010c00:	9b08      	ldr	r3, [sp, #32]
 8010c02:	9308      	str	r3, [sp, #32]
 8010c04:	3b01      	subs	r3, #1
 8010c06:	781a      	ldrb	r2, [r3, #0]
 8010c08:	2a39      	cmp	r2, #57	; 0x39
 8010c0a:	d063      	beq.n	8010cd4 <_dtoa_r+0xba8>
 8010c0c:	3201      	adds	r2, #1
 8010c0e:	701a      	strb	r2, [r3, #0]
 8010c10:	e747      	b.n	8010aa2 <_dtoa_r+0x976>
 8010c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	dd03      	ble.n	8010c20 <_dtoa_r+0xaf4>
 8010c18:	2c39      	cmp	r4, #57	; 0x39
 8010c1a:	d0ee      	beq.n	8010bfa <_dtoa_r+0xace>
 8010c1c:	3401      	adds	r4, #1
 8010c1e:	e7ce      	b.n	8010bbe <_dtoa_r+0xa92>
 8010c20:	9b07      	ldr	r3, [sp, #28]
 8010c22:	9a07      	ldr	r2, [sp, #28]
 8010c24:	701c      	strb	r4, [r3, #0]
 8010c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c28:	4293      	cmp	r3, r2
 8010c2a:	d03e      	beq.n	8010caa <_dtoa_r+0xb7e>
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	220a      	movs	r2, #10
 8010c30:	9905      	ldr	r1, [sp, #20]
 8010c32:	9804      	ldr	r0, [sp, #16]
 8010c34:	f7fb feec 	bl	800ca10 <__multadd>
 8010c38:	2300      	movs	r3, #0
 8010c3a:	9005      	str	r0, [sp, #20]
 8010c3c:	220a      	movs	r2, #10
 8010c3e:	0029      	movs	r1, r5
 8010c40:	9804      	ldr	r0, [sp, #16]
 8010c42:	42bd      	cmp	r5, r7
 8010c44:	d106      	bne.n	8010c54 <_dtoa_r+0xb28>
 8010c46:	f7fb fee3 	bl	800ca10 <__multadd>
 8010c4a:	0005      	movs	r5, r0
 8010c4c:	0007      	movs	r7, r0
 8010c4e:	9b08      	ldr	r3, [sp, #32]
 8010c50:	9307      	str	r3, [sp, #28]
 8010c52:	e784      	b.n	8010b5e <_dtoa_r+0xa32>
 8010c54:	f7fb fedc 	bl	800ca10 <__multadd>
 8010c58:	0039      	movs	r1, r7
 8010c5a:	0005      	movs	r5, r0
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	220a      	movs	r2, #10
 8010c60:	9804      	ldr	r0, [sp, #16]
 8010c62:	f7fb fed5 	bl	800ca10 <__multadd>
 8010c66:	0007      	movs	r7, r0
 8010c68:	e7f1      	b.n	8010c4e <_dtoa_r+0xb22>
 8010c6a:	9b07      	ldr	r3, [sp, #28]
 8010c6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c6e:	2500      	movs	r5, #0
 8010c70:	0031      	movs	r1, r6
 8010c72:	9805      	ldr	r0, [sp, #20]
 8010c74:	f7ff f9ca 	bl	801000c <quorem>
 8010c78:	9b06      	ldr	r3, [sp, #24]
 8010c7a:	3030      	adds	r0, #48	; 0x30
 8010c7c:	5558      	strb	r0, [r3, r5]
 8010c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c80:	3501      	adds	r5, #1
 8010c82:	0004      	movs	r4, r0
 8010c84:	42ab      	cmp	r3, r5
 8010c86:	dd07      	ble.n	8010c98 <_dtoa_r+0xb6c>
 8010c88:	2300      	movs	r3, #0
 8010c8a:	220a      	movs	r2, #10
 8010c8c:	9905      	ldr	r1, [sp, #20]
 8010c8e:	9804      	ldr	r0, [sp, #16]
 8010c90:	f7fb febe 	bl	800ca10 <__multadd>
 8010c94:	9005      	str	r0, [sp, #20]
 8010c96:	e7eb      	b.n	8010c70 <_dtoa_r+0xb44>
 8010c98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	2a00      	cmp	r2, #0
 8010c9e:	dd00      	ble.n	8010ca2 <_dtoa_r+0xb76>
 8010ca0:	0013      	movs	r3, r2
 8010ca2:	2500      	movs	r5, #0
 8010ca4:	9a06      	ldr	r2, [sp, #24]
 8010ca6:	18d3      	adds	r3, r2, r3
 8010ca8:	9308      	str	r3, [sp, #32]
 8010caa:	9905      	ldr	r1, [sp, #20]
 8010cac:	2201      	movs	r2, #1
 8010cae:	9804      	ldr	r0, [sp, #16]
 8010cb0:	f7fc f890 	bl	800cdd4 <__lshift>
 8010cb4:	0031      	movs	r1, r6
 8010cb6:	9005      	str	r0, [sp, #20]
 8010cb8:	f7fc f8fa 	bl	800ceb0 <__mcmp>
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	dc9f      	bgt.n	8010c00 <_dtoa_r+0xad4>
 8010cc0:	d101      	bne.n	8010cc6 <_dtoa_r+0xb9a>
 8010cc2:	07e4      	lsls	r4, r4, #31
 8010cc4:	d49c      	bmi.n	8010c00 <_dtoa_r+0xad4>
 8010cc6:	9b08      	ldr	r3, [sp, #32]
 8010cc8:	9308      	str	r3, [sp, #32]
 8010cca:	3b01      	subs	r3, #1
 8010ccc:	781a      	ldrb	r2, [r3, #0]
 8010cce:	2a30      	cmp	r2, #48	; 0x30
 8010cd0:	d0fa      	beq.n	8010cc8 <_dtoa_r+0xb9c>
 8010cd2:	e6e6      	b.n	8010aa2 <_dtoa_r+0x976>
 8010cd4:	9a06      	ldr	r2, [sp, #24]
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	d193      	bne.n	8010c02 <_dtoa_r+0xad6>
 8010cda:	9b03      	ldr	r3, [sp, #12]
 8010cdc:	3301      	adds	r3, #1
 8010cde:	9303      	str	r3, [sp, #12]
 8010ce0:	2331      	movs	r3, #49	; 0x31
 8010ce2:	7013      	strb	r3, [r2, #0]
 8010ce4:	e6dd      	b.n	8010aa2 <_dtoa_r+0x976>
 8010ce6:	4b09      	ldr	r3, [pc, #36]	; (8010d0c <_dtoa_r+0xbe0>)
 8010ce8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010cea:	9306      	str	r3, [sp, #24]
 8010cec:	4b08      	ldr	r3, [pc, #32]	; (8010d10 <_dtoa_r+0xbe4>)
 8010cee:	2a00      	cmp	r2, #0
 8010cf0:	d001      	beq.n	8010cf6 <_dtoa_r+0xbca>
 8010cf2:	f7ff fa4c 	bl	801018e <_dtoa_r+0x62>
 8010cf6:	f7ff fa4c 	bl	8010192 <_dtoa_r+0x66>
 8010cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	dcb6      	bgt.n	8010c6e <_dtoa_r+0xb42>
 8010d00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010d02:	2b02      	cmp	r3, #2
 8010d04:	dd00      	ble.n	8010d08 <_dtoa_r+0xbdc>
 8010d06:	e6b6      	b.n	8010a76 <_dtoa_r+0x94a>
 8010d08:	e7b1      	b.n	8010c6e <_dtoa_r+0xb42>
 8010d0a:	46c0      	nop			; (mov r8, r8)
 8010d0c:	08014894 	.word	0x08014894
 8010d10:	0801489c 	.word	0x0801489c

08010d14 <realloc>:
 8010d14:	b510      	push	{r4, lr}
 8010d16:	4b03      	ldr	r3, [pc, #12]	; (8010d24 <realloc+0x10>)
 8010d18:	000a      	movs	r2, r1
 8010d1a:	0001      	movs	r1, r0
 8010d1c:	6818      	ldr	r0, [r3, #0]
 8010d1e:	f000 f803 	bl	8010d28 <_realloc_r>
 8010d22:	bd10      	pop	{r4, pc}
 8010d24:	200006d0 	.word	0x200006d0

08010d28 <_realloc_r>:
 8010d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d2a:	b087      	sub	sp, #28
 8010d2c:	1e0c      	subs	r4, r1, #0
 8010d2e:	9001      	str	r0, [sp, #4]
 8010d30:	9205      	str	r2, [sp, #20]
 8010d32:	d106      	bne.n	8010d42 <_realloc_r+0x1a>
 8010d34:	0011      	movs	r1, r2
 8010d36:	f7f9 fd5f 	bl	800a7f8 <_malloc_r>
 8010d3a:	0007      	movs	r7, r0
 8010d3c:	0038      	movs	r0, r7
 8010d3e:	b007      	add	sp, #28
 8010d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d42:	9801      	ldr	r0, [sp, #4]
 8010d44:	f7f9 ff6c 	bl	800ac20 <__malloc_lock>
 8010d48:	0023      	movs	r3, r4
 8010d4a:	3b08      	subs	r3, #8
 8010d4c:	685f      	ldr	r7, [r3, #4]
 8010d4e:	9304      	str	r3, [sp, #16]
 8010d50:	9b05      	ldr	r3, [sp, #20]
 8010d52:	330b      	adds	r3, #11
 8010d54:	2b16      	cmp	r3, #22
 8010d56:	d908      	bls.n	8010d6a <_realloc_r+0x42>
 8010d58:	2207      	movs	r2, #7
 8010d5a:	4393      	bics	r3, r2
 8010d5c:	9300      	str	r3, [sp, #0]
 8010d5e:	d506      	bpl.n	8010d6e <_realloc_r+0x46>
 8010d60:	230c      	movs	r3, #12
 8010d62:	9a01      	ldr	r2, [sp, #4]
 8010d64:	2700      	movs	r7, #0
 8010d66:	6013      	str	r3, [r2, #0]
 8010d68:	e7e8      	b.n	8010d3c <_realloc_r+0x14>
 8010d6a:	2310      	movs	r3, #16
 8010d6c:	9300      	str	r3, [sp, #0]
 8010d6e:	9b00      	ldr	r3, [sp, #0]
 8010d70:	9a05      	ldr	r2, [sp, #20]
 8010d72:	4293      	cmp	r3, r2
 8010d74:	d3f4      	bcc.n	8010d60 <_realloc_r+0x38>
 8010d76:	9b04      	ldr	r3, [sp, #16]
 8010d78:	003a      	movs	r2, r7
 8010d7a:	9302      	str	r3, [sp, #8]
 8010d7c:	2303      	movs	r3, #3
 8010d7e:	439a      	bics	r2, r3
 8010d80:	9b00      	ldr	r3, [sp, #0]
 8010d82:	9203      	str	r2, [sp, #12]
 8010d84:	4293      	cmp	r3, r2
 8010d86:	dc00      	bgt.n	8010d8a <_realloc_r+0x62>
 8010d88:	e169      	b.n	801105e <_realloc_r+0x336>
 8010d8a:	9b04      	ldr	r3, [sp, #16]
 8010d8c:	48b8      	ldr	r0, [pc, #736]	; (8011070 <_realloc_r+0x348>)
 8010d8e:	189b      	adds	r3, r3, r2
 8010d90:	6882      	ldr	r2, [r0, #8]
 8010d92:	4694      	mov	ip, r2
 8010d94:	685a      	ldr	r2, [r3, #4]
 8010d96:	459c      	cmp	ip, r3
 8010d98:	d006      	beq.n	8010da8 <_realloc_r+0x80>
 8010d9a:	2501      	movs	r5, #1
 8010d9c:	0011      	movs	r1, r2
 8010d9e:	43a9      	bics	r1, r5
 8010da0:	1859      	adds	r1, r3, r1
 8010da2:	6849      	ldr	r1, [r1, #4]
 8010da4:	4229      	tst	r1, r5
 8010da6:	d144      	bne.n	8010e32 <_realloc_r+0x10a>
 8010da8:	2103      	movs	r1, #3
 8010daa:	438a      	bics	r2, r1
 8010dac:	9903      	ldr	r1, [sp, #12]
 8010dae:	188e      	adds	r6, r1, r2
 8010db0:	9900      	ldr	r1, [sp, #0]
 8010db2:	459c      	cmp	ip, r3
 8010db4:	d117      	bne.n	8010de6 <_realloc_r+0xbe>
 8010db6:	3110      	adds	r1, #16
 8010db8:	42b1      	cmp	r1, r6
 8010dba:	dc3c      	bgt.n	8010e36 <_realloc_r+0x10e>
 8010dbc:	9a00      	ldr	r2, [sp, #0]
 8010dbe:	2101      	movs	r1, #1
 8010dc0:	4694      	mov	ip, r2
 8010dc2:	1ab6      	subs	r6, r6, r2
 8010dc4:	0022      	movs	r2, r4
 8010dc6:	9b04      	ldr	r3, [sp, #16]
 8010dc8:	430e      	orrs	r6, r1
 8010dca:	4463      	add	r3, ip
 8010dcc:	6083      	str	r3, [r0, #8]
 8010dce:	3a08      	subs	r2, #8
 8010dd0:	605e      	str	r6, [r3, #4]
 8010dd2:	6853      	ldr	r3, [r2, #4]
 8010dd4:	9801      	ldr	r0, [sp, #4]
 8010dd6:	400b      	ands	r3, r1
 8010dd8:	4661      	mov	r1, ip
 8010dda:	430b      	orrs	r3, r1
 8010ddc:	6053      	str	r3, [r2, #4]
 8010dde:	f7f9 ff27 	bl	800ac30 <__malloc_unlock>
 8010de2:	0027      	movs	r7, r4
 8010de4:	e7aa      	b.n	8010d3c <_realloc_r+0x14>
 8010de6:	42b1      	cmp	r1, r6
 8010de8:	dc25      	bgt.n	8010e36 <_realloc_r+0x10e>
 8010dea:	68da      	ldr	r2, [r3, #12]
 8010dec:	689b      	ldr	r3, [r3, #8]
 8010dee:	60da      	str	r2, [r3, #12]
 8010df0:	6093      	str	r3, [r2, #8]
 8010df2:	9b00      	ldr	r3, [sp, #0]
 8010df4:	9a02      	ldr	r2, [sp, #8]
 8010df6:	1af4      	subs	r4, r6, r3
 8010df8:	9b02      	ldr	r3, [sp, #8]
 8010dfa:	1992      	adds	r2, r2, r6
 8010dfc:	6858      	ldr	r0, [r3, #4]
 8010dfe:	2301      	movs	r3, #1
 8010e00:	4018      	ands	r0, r3
 8010e02:	2c0f      	cmp	r4, #15
 8010e04:	d800      	bhi.n	8010e08 <_realloc_r+0xe0>
 8010e06:	e12c      	b.n	8011062 <_realloc_r+0x33a>
 8010e08:	9d00      	ldr	r5, [sp, #0]
 8010e0a:	9902      	ldr	r1, [sp, #8]
 8010e0c:	4328      	orrs	r0, r5
 8010e0e:	1949      	adds	r1, r1, r5
 8010e10:	9d02      	ldr	r5, [sp, #8]
 8010e12:	431c      	orrs	r4, r3
 8010e14:	6068      	str	r0, [r5, #4]
 8010e16:	604c      	str	r4, [r1, #4]
 8010e18:	6850      	ldr	r0, [r2, #4]
 8010e1a:	3108      	adds	r1, #8
 8010e1c:	4303      	orrs	r3, r0
 8010e1e:	6053      	str	r3, [r2, #4]
 8010e20:	9801      	ldr	r0, [sp, #4]
 8010e22:	f7fb f9a3 	bl	800c16c <_free_r>
 8010e26:	9801      	ldr	r0, [sp, #4]
 8010e28:	f7f9 ff02 	bl	800ac30 <__malloc_unlock>
 8010e2c:	9f02      	ldr	r7, [sp, #8]
 8010e2e:	3708      	adds	r7, #8
 8010e30:	e784      	b.n	8010d3c <_realloc_r+0x14>
 8010e32:	2200      	movs	r2, #0
 8010e34:	0013      	movs	r3, r2
 8010e36:	07ff      	lsls	r7, r7, #31
 8010e38:	d500      	bpl.n	8010e3c <_realloc_r+0x114>
 8010e3a:	e0c6      	b.n	8010fca <_realloc_r+0x2a2>
 8010e3c:	0021      	movs	r1, r4
 8010e3e:	2003      	movs	r0, #3
 8010e40:	3908      	subs	r1, #8
 8010e42:	680d      	ldr	r5, [r1, #0]
 8010e44:	9904      	ldr	r1, [sp, #16]
 8010e46:	1b4d      	subs	r5, r1, r5
 8010e48:	6869      	ldr	r1, [r5, #4]
 8010e4a:	4381      	bics	r1, r0
 8010e4c:	9803      	ldr	r0, [sp, #12]
 8010e4e:	180f      	adds	r7, r1, r0
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d100      	bne.n	8010e56 <_realloc_r+0x12e>
 8010e54:	e084      	b.n	8010f60 <_realloc_r+0x238>
 8010e56:	19d6      	adds	r6, r2, r7
 8010e58:	459c      	cmp	ip, r3
 8010e5a:	d148      	bne.n	8010eee <_realloc_r+0x1c6>
 8010e5c:	9b00      	ldr	r3, [sp, #0]
 8010e5e:	3310      	adds	r3, #16
 8010e60:	42b3      	cmp	r3, r6
 8010e62:	dc7d      	bgt.n	8010f60 <_realloc_r+0x238>
 8010e64:	68aa      	ldr	r2, [r5, #8]
 8010e66:	68eb      	ldr	r3, [r5, #12]
 8010e68:	002f      	movs	r7, r5
 8010e6a:	60d3      	str	r3, [r2, #12]
 8010e6c:	609a      	str	r2, [r3, #8]
 8010e6e:	0002      	movs	r2, r0
 8010e70:	3a04      	subs	r2, #4
 8010e72:	3708      	adds	r7, #8
 8010e74:	2a24      	cmp	r2, #36	; 0x24
 8010e76:	d835      	bhi.n	8010ee4 <_realloc_r+0x1bc>
 8010e78:	003b      	movs	r3, r7
 8010e7a:	2a13      	cmp	r2, #19
 8010e7c:	d908      	bls.n	8010e90 <_realloc_r+0x168>
 8010e7e:	6823      	ldr	r3, [r4, #0]
 8010e80:	60ab      	str	r3, [r5, #8]
 8010e82:	6863      	ldr	r3, [r4, #4]
 8010e84:	60eb      	str	r3, [r5, #12]
 8010e86:	2a1b      	cmp	r2, #27
 8010e88:	d81a      	bhi.n	8010ec0 <_realloc_r+0x198>
 8010e8a:	002b      	movs	r3, r5
 8010e8c:	3408      	adds	r4, #8
 8010e8e:	3310      	adds	r3, #16
 8010e90:	6822      	ldr	r2, [r4, #0]
 8010e92:	601a      	str	r2, [r3, #0]
 8010e94:	6862      	ldr	r2, [r4, #4]
 8010e96:	605a      	str	r2, [r3, #4]
 8010e98:	68a2      	ldr	r2, [r4, #8]
 8010e9a:	609a      	str	r2, [r3, #8]
 8010e9c:	9b00      	ldr	r3, [sp, #0]
 8010e9e:	4a74      	ldr	r2, [pc, #464]	; (8011070 <_realloc_r+0x348>)
 8010ea0:	18eb      	adds	r3, r5, r3
 8010ea2:	6093      	str	r3, [r2, #8]
 8010ea4:	9a00      	ldr	r2, [sp, #0]
 8010ea6:	1ab6      	subs	r6, r6, r2
 8010ea8:	2201      	movs	r2, #1
 8010eaa:	4316      	orrs	r6, r2
 8010eac:	605e      	str	r6, [r3, #4]
 8010eae:	686b      	ldr	r3, [r5, #4]
 8010eb0:	4013      	ands	r3, r2
 8010eb2:	9a00      	ldr	r2, [sp, #0]
 8010eb4:	4313      	orrs	r3, r2
 8010eb6:	606b      	str	r3, [r5, #4]
 8010eb8:	9801      	ldr	r0, [sp, #4]
 8010eba:	f7f9 feb9 	bl	800ac30 <__malloc_unlock>
 8010ebe:	e73d      	b.n	8010d3c <_realloc_r+0x14>
 8010ec0:	68a3      	ldr	r3, [r4, #8]
 8010ec2:	612b      	str	r3, [r5, #16]
 8010ec4:	68e3      	ldr	r3, [r4, #12]
 8010ec6:	616b      	str	r3, [r5, #20]
 8010ec8:	2a24      	cmp	r2, #36	; 0x24
 8010eca:	d003      	beq.n	8010ed4 <_realloc_r+0x1ac>
 8010ecc:	002b      	movs	r3, r5
 8010ece:	3410      	adds	r4, #16
 8010ed0:	3318      	adds	r3, #24
 8010ed2:	e7dd      	b.n	8010e90 <_realloc_r+0x168>
 8010ed4:	6923      	ldr	r3, [r4, #16]
 8010ed6:	61ab      	str	r3, [r5, #24]
 8010ed8:	002b      	movs	r3, r5
 8010eda:	6962      	ldr	r2, [r4, #20]
 8010edc:	3320      	adds	r3, #32
 8010ede:	61ea      	str	r2, [r5, #28]
 8010ee0:	3418      	adds	r4, #24
 8010ee2:	e7d5      	b.n	8010e90 <_realloc_r+0x168>
 8010ee4:	0021      	movs	r1, r4
 8010ee6:	0038      	movs	r0, r7
 8010ee8:	f001 fb2f 	bl	801254a <memmove>
 8010eec:	e7d6      	b.n	8010e9c <_realloc_r+0x174>
 8010eee:	9a00      	ldr	r2, [sp, #0]
 8010ef0:	42b2      	cmp	r2, r6
 8010ef2:	dc35      	bgt.n	8010f60 <_realloc_r+0x238>
 8010ef4:	0028      	movs	r0, r5
 8010ef6:	68da      	ldr	r2, [r3, #12]
 8010ef8:	689b      	ldr	r3, [r3, #8]
 8010efa:	3008      	adds	r0, #8
 8010efc:	60da      	str	r2, [r3, #12]
 8010efe:	6093      	str	r3, [r2, #8]
 8010f00:	68aa      	ldr	r2, [r5, #8]
 8010f02:	68eb      	ldr	r3, [r5, #12]
 8010f04:	60d3      	str	r3, [r2, #12]
 8010f06:	609a      	str	r2, [r3, #8]
 8010f08:	9a03      	ldr	r2, [sp, #12]
 8010f0a:	3a04      	subs	r2, #4
 8010f0c:	2a24      	cmp	r2, #36	; 0x24
 8010f0e:	d823      	bhi.n	8010f58 <_realloc_r+0x230>
 8010f10:	2a13      	cmp	r2, #19
 8010f12:	d907      	bls.n	8010f24 <_realloc_r+0x1fc>
 8010f14:	6823      	ldr	r3, [r4, #0]
 8010f16:	60ab      	str	r3, [r5, #8]
 8010f18:	6863      	ldr	r3, [r4, #4]
 8010f1a:	60eb      	str	r3, [r5, #12]
 8010f1c:	2a1b      	cmp	r2, #27
 8010f1e:	d809      	bhi.n	8010f34 <_realloc_r+0x20c>
 8010f20:	3408      	adds	r4, #8
 8010f22:	3008      	adds	r0, #8
 8010f24:	6823      	ldr	r3, [r4, #0]
 8010f26:	6003      	str	r3, [r0, #0]
 8010f28:	6863      	ldr	r3, [r4, #4]
 8010f2a:	6043      	str	r3, [r0, #4]
 8010f2c:	68a3      	ldr	r3, [r4, #8]
 8010f2e:	6083      	str	r3, [r0, #8]
 8010f30:	9502      	str	r5, [sp, #8]
 8010f32:	e75e      	b.n	8010df2 <_realloc_r+0xca>
 8010f34:	68a3      	ldr	r3, [r4, #8]
 8010f36:	612b      	str	r3, [r5, #16]
 8010f38:	68e3      	ldr	r3, [r4, #12]
 8010f3a:	616b      	str	r3, [r5, #20]
 8010f3c:	2a24      	cmp	r2, #36	; 0x24
 8010f3e:	d003      	beq.n	8010f48 <_realloc_r+0x220>
 8010f40:	0028      	movs	r0, r5
 8010f42:	3410      	adds	r4, #16
 8010f44:	3018      	adds	r0, #24
 8010f46:	e7ed      	b.n	8010f24 <_realloc_r+0x1fc>
 8010f48:	0028      	movs	r0, r5
 8010f4a:	6923      	ldr	r3, [r4, #16]
 8010f4c:	3020      	adds	r0, #32
 8010f4e:	61ab      	str	r3, [r5, #24]
 8010f50:	6963      	ldr	r3, [r4, #20]
 8010f52:	3418      	adds	r4, #24
 8010f54:	61eb      	str	r3, [r5, #28]
 8010f56:	e7e5      	b.n	8010f24 <_realloc_r+0x1fc>
 8010f58:	0021      	movs	r1, r4
 8010f5a:	f001 faf6 	bl	801254a <memmove>
 8010f5e:	e7e7      	b.n	8010f30 <_realloc_r+0x208>
 8010f60:	9b00      	ldr	r3, [sp, #0]
 8010f62:	42bb      	cmp	r3, r7
 8010f64:	dc31      	bgt.n	8010fca <_realloc_r+0x2a2>
 8010f66:	0028      	movs	r0, r5
 8010f68:	68aa      	ldr	r2, [r5, #8]
 8010f6a:	68eb      	ldr	r3, [r5, #12]
 8010f6c:	3008      	adds	r0, #8
 8010f6e:	60d3      	str	r3, [r2, #12]
 8010f70:	609a      	str	r2, [r3, #8]
 8010f72:	9a03      	ldr	r2, [sp, #12]
 8010f74:	3a04      	subs	r2, #4
 8010f76:	2a24      	cmp	r2, #36	; 0x24
 8010f78:	d823      	bhi.n	8010fc2 <_realloc_r+0x29a>
 8010f7a:	2a13      	cmp	r2, #19
 8010f7c:	d907      	bls.n	8010f8e <_realloc_r+0x266>
 8010f7e:	6823      	ldr	r3, [r4, #0]
 8010f80:	60ab      	str	r3, [r5, #8]
 8010f82:	6863      	ldr	r3, [r4, #4]
 8010f84:	60eb      	str	r3, [r5, #12]
 8010f86:	2a1b      	cmp	r2, #27
 8010f88:	d809      	bhi.n	8010f9e <_realloc_r+0x276>
 8010f8a:	3408      	adds	r4, #8
 8010f8c:	3008      	adds	r0, #8
 8010f8e:	6823      	ldr	r3, [r4, #0]
 8010f90:	6003      	str	r3, [r0, #0]
 8010f92:	6863      	ldr	r3, [r4, #4]
 8010f94:	6043      	str	r3, [r0, #4]
 8010f96:	68a3      	ldr	r3, [r4, #8]
 8010f98:	6083      	str	r3, [r0, #8]
 8010f9a:	003e      	movs	r6, r7
 8010f9c:	e7c8      	b.n	8010f30 <_realloc_r+0x208>
 8010f9e:	68a3      	ldr	r3, [r4, #8]
 8010fa0:	612b      	str	r3, [r5, #16]
 8010fa2:	68e3      	ldr	r3, [r4, #12]
 8010fa4:	616b      	str	r3, [r5, #20]
 8010fa6:	2a24      	cmp	r2, #36	; 0x24
 8010fa8:	d003      	beq.n	8010fb2 <_realloc_r+0x28a>
 8010faa:	0028      	movs	r0, r5
 8010fac:	3410      	adds	r4, #16
 8010fae:	3018      	adds	r0, #24
 8010fb0:	e7ed      	b.n	8010f8e <_realloc_r+0x266>
 8010fb2:	0028      	movs	r0, r5
 8010fb4:	6923      	ldr	r3, [r4, #16]
 8010fb6:	3020      	adds	r0, #32
 8010fb8:	61ab      	str	r3, [r5, #24]
 8010fba:	6963      	ldr	r3, [r4, #20]
 8010fbc:	3418      	adds	r4, #24
 8010fbe:	61eb      	str	r3, [r5, #28]
 8010fc0:	e7e5      	b.n	8010f8e <_realloc_r+0x266>
 8010fc2:	0021      	movs	r1, r4
 8010fc4:	f001 fac1 	bl	801254a <memmove>
 8010fc8:	e7e7      	b.n	8010f9a <_realloc_r+0x272>
 8010fca:	9905      	ldr	r1, [sp, #20]
 8010fcc:	9801      	ldr	r0, [sp, #4]
 8010fce:	f7f9 fc13 	bl	800a7f8 <_malloc_r>
 8010fd2:	1e07      	subs	r7, r0, #0
 8010fd4:	d100      	bne.n	8010fd8 <_realloc_r+0x2b0>
 8010fd6:	e76f      	b.n	8010eb8 <_realloc_r+0x190>
 8010fd8:	0023      	movs	r3, r4
 8010fda:	2201      	movs	r2, #1
 8010fdc:	3b08      	subs	r3, #8
 8010fde:	685b      	ldr	r3, [r3, #4]
 8010fe0:	4393      	bics	r3, r2
 8010fe2:	9a04      	ldr	r2, [sp, #16]
 8010fe4:	18d3      	adds	r3, r2, r3
 8010fe6:	0002      	movs	r2, r0
 8010fe8:	3a08      	subs	r2, #8
 8010fea:	4293      	cmp	r3, r2
 8010fec:	d105      	bne.n	8010ffa <_realloc_r+0x2d2>
 8010fee:	685e      	ldr	r6, [r3, #4]
 8010ff0:	2303      	movs	r3, #3
 8010ff2:	439e      	bics	r6, r3
 8010ff4:	9b03      	ldr	r3, [sp, #12]
 8010ff6:	18f6      	adds	r6, r6, r3
 8010ff8:	e6fb      	b.n	8010df2 <_realloc_r+0xca>
 8010ffa:	9a03      	ldr	r2, [sp, #12]
 8010ffc:	3a04      	subs	r2, #4
 8010ffe:	2a24      	cmp	r2, #36	; 0x24
 8011000:	d829      	bhi.n	8011056 <_realloc_r+0x32e>
 8011002:	0003      	movs	r3, r0
 8011004:	0021      	movs	r1, r4
 8011006:	2a13      	cmp	r2, #19
 8011008:	d908      	bls.n	801101c <_realloc_r+0x2f4>
 801100a:	6823      	ldr	r3, [r4, #0]
 801100c:	6003      	str	r3, [r0, #0]
 801100e:	6863      	ldr	r3, [r4, #4]
 8011010:	6043      	str	r3, [r0, #4]
 8011012:	2a1b      	cmp	r2, #27
 8011014:	d80d      	bhi.n	8011032 <_realloc_r+0x30a>
 8011016:	0003      	movs	r3, r0
 8011018:	3108      	adds	r1, #8
 801101a:	3308      	adds	r3, #8
 801101c:	680a      	ldr	r2, [r1, #0]
 801101e:	601a      	str	r2, [r3, #0]
 8011020:	684a      	ldr	r2, [r1, #4]
 8011022:	605a      	str	r2, [r3, #4]
 8011024:	688a      	ldr	r2, [r1, #8]
 8011026:	609a      	str	r2, [r3, #8]
 8011028:	0021      	movs	r1, r4
 801102a:	9801      	ldr	r0, [sp, #4]
 801102c:	f7fb f89e 	bl	800c16c <_free_r>
 8011030:	e742      	b.n	8010eb8 <_realloc_r+0x190>
 8011032:	68a3      	ldr	r3, [r4, #8]
 8011034:	6083      	str	r3, [r0, #8]
 8011036:	68e3      	ldr	r3, [r4, #12]
 8011038:	60c3      	str	r3, [r0, #12]
 801103a:	2a24      	cmp	r2, #36	; 0x24
 801103c:	d003      	beq.n	8011046 <_realloc_r+0x31e>
 801103e:	0003      	movs	r3, r0
 8011040:	3110      	adds	r1, #16
 8011042:	3310      	adds	r3, #16
 8011044:	e7ea      	b.n	801101c <_realloc_r+0x2f4>
 8011046:	6923      	ldr	r3, [r4, #16]
 8011048:	3118      	adds	r1, #24
 801104a:	6103      	str	r3, [r0, #16]
 801104c:	0003      	movs	r3, r0
 801104e:	6962      	ldr	r2, [r4, #20]
 8011050:	3318      	adds	r3, #24
 8011052:	6142      	str	r2, [r0, #20]
 8011054:	e7e2      	b.n	801101c <_realloc_r+0x2f4>
 8011056:	0021      	movs	r1, r4
 8011058:	f001 fa77 	bl	801254a <memmove>
 801105c:	e7e4      	b.n	8011028 <_realloc_r+0x300>
 801105e:	9e03      	ldr	r6, [sp, #12]
 8011060:	e6c7      	b.n	8010df2 <_realloc_r+0xca>
 8011062:	9902      	ldr	r1, [sp, #8]
 8011064:	4306      	orrs	r6, r0
 8011066:	604e      	str	r6, [r1, #4]
 8011068:	6851      	ldr	r1, [r2, #4]
 801106a:	430b      	orrs	r3, r1
 801106c:	6053      	str	r3, [r2, #4]
 801106e:	e6da      	b.n	8010e26 <_realloc_r+0xfe>
 8011070:	20000028 	.word	0x20000028

08011074 <_strtoll_l.constprop.0>:
 8011074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011076:	b08d      	sub	sp, #52	; 0x34
 8011078:	9203      	str	r2, [sp, #12]
 801107a:	4a53      	ldr	r2, [pc, #332]	; (80111c8 <_strtoll_l.constprop.0+0x154>)
 801107c:	001e      	movs	r6, r3
 801107e:	9102      	str	r1, [sp, #8]
 8011080:	000b      	movs	r3, r1
 8011082:	4694      	mov	ip, r2
 8011084:	2108      	movs	r1, #8
 8011086:	900a      	str	r0, [sp, #40]	; 0x28
 8011088:	001a      	movs	r2, r3
 801108a:	4660      	mov	r0, ip
 801108c:	7814      	ldrb	r4, [r2, #0]
 801108e:	3301      	adds	r3, #1
 8011090:	5d00      	ldrb	r0, [r0, r4]
 8011092:	001d      	movs	r5, r3
 8011094:	0007      	movs	r7, r0
 8011096:	400f      	ands	r7, r1
 8011098:	4208      	tst	r0, r1
 801109a:	d1f5      	bne.n	8011088 <_strtoll_l.constprop.0+0x14>
 801109c:	2c2d      	cmp	r4, #45	; 0x2d
 801109e:	d153      	bne.n	8011148 <_strtoll_l.constprop.0+0xd4>
 80110a0:	781c      	ldrb	r4, [r3, #0]
 80110a2:	2301      	movs	r3, #1
 80110a4:	1c95      	adds	r5, r2, #2
 80110a6:	9301      	str	r3, [sp, #4]
 80110a8:	2e00      	cmp	r6, #0
 80110aa:	d100      	bne.n	80110ae <_strtoll_l.constprop.0+0x3a>
 80110ac:	e086      	b.n	80111bc <_strtoll_l.constprop.0+0x148>
 80110ae:	2e10      	cmp	r6, #16
 80110b0:	d10a      	bne.n	80110c8 <_strtoll_l.constprop.0+0x54>
 80110b2:	2c30      	cmp	r4, #48	; 0x30
 80110b4:	d108      	bne.n	80110c8 <_strtoll_l.constprop.0+0x54>
 80110b6:	2220      	movs	r2, #32
 80110b8:	782b      	ldrb	r3, [r5, #0]
 80110ba:	4393      	bics	r3, r2
 80110bc:	2b58      	cmp	r3, #88	; 0x58
 80110be:	d000      	beq.n	80110c2 <_strtoll_l.constprop.0+0x4e>
 80110c0:	e076      	b.n	80111b0 <_strtoll_l.constprop.0+0x13c>
 80110c2:	2610      	movs	r6, #16
 80110c4:	786c      	ldrb	r4, [r5, #1]
 80110c6:	3502      	adds	r5, #2
 80110c8:	2001      	movs	r0, #1
 80110ca:	2300      	movs	r3, #0
 80110cc:	493f      	ldr	r1, [pc, #252]	; (80111cc <_strtoll_l.constprop.0+0x158>)
 80110ce:	9a01      	ldr	r2, [sp, #4]
 80110d0:	4240      	negs	r0, r0
 80110d2:	1812      	adds	r2, r2, r0
 80110d4:	414b      	adcs	r3, r1
 80110d6:	9204      	str	r2, [sp, #16]
 80110d8:	9305      	str	r3, [sp, #20]
 80110da:	9804      	ldr	r0, [sp, #16]
 80110dc:	9905      	ldr	r1, [sp, #20]
 80110de:	17f3      	asrs	r3, r6, #31
 80110e0:	0032      	movs	r2, r6
 80110e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80110e4:	f7ef f9de 	bl	80004a4 <__aeabi_uldivmod>
 80110e8:	2300      	movs	r3, #0
 80110ea:	000f      	movs	r7, r1
 80110ec:	9008      	str	r0, [sp, #32]
 80110ee:	2100      	movs	r1, #0
 80110f0:	2000      	movs	r0, #0
 80110f2:	9209      	str	r2, [sp, #36]	; 0x24
 80110f4:	0022      	movs	r2, r4
 80110f6:	3a30      	subs	r2, #48	; 0x30
 80110f8:	2a09      	cmp	r2, #9
 80110fa:	d82b      	bhi.n	8011154 <_strtoll_l.constprop.0+0xe0>
 80110fc:	0014      	movs	r4, r2
 80110fe:	42a6      	cmp	r6, r4
 8011100:	dd37      	ble.n	8011172 <_strtoll_l.constprop.0+0xfe>
 8011102:	1c5a      	adds	r2, r3, #1
 8011104:	d01d      	beq.n	8011142 <_strtoll_l.constprop.0+0xce>
 8011106:	42b9      	cmp	r1, r7
 8011108:	d830      	bhi.n	801116c <_strtoll_l.constprop.0+0xf8>
 801110a:	d102      	bne.n	8011112 <_strtoll_l.constprop.0+0x9e>
 801110c:	9b08      	ldr	r3, [sp, #32]
 801110e:	4298      	cmp	r0, r3
 8011110:	d82c      	bhi.n	801116c <_strtoll_l.constprop.0+0xf8>
 8011112:	9b08      	ldr	r3, [sp, #32]
 8011114:	4283      	cmp	r3, r0
 8011116:	d106      	bne.n	8011126 <_strtoll_l.constprop.0+0xb2>
 8011118:	428f      	cmp	r7, r1
 801111a:	d104      	bne.n	8011126 <_strtoll_l.constprop.0+0xb2>
 801111c:	2301      	movs	r3, #1
 801111e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011120:	425b      	negs	r3, r3
 8011122:	42a2      	cmp	r2, r4
 8011124:	db0d      	blt.n	8011142 <_strtoll_l.constprop.0+0xce>
 8011126:	000b      	movs	r3, r1
 8011128:	0002      	movs	r2, r0
 801112a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801112c:	0030      	movs	r0, r6
 801112e:	f7ef f9d9 	bl	80004e4 <__aeabi_lmul>
 8011132:	17e3      	asrs	r3, r4, #31
 8011134:	9406      	str	r4, [sp, #24]
 8011136:	9307      	str	r3, [sp, #28]
 8011138:	9b06      	ldr	r3, [sp, #24]
 801113a:	9c07      	ldr	r4, [sp, #28]
 801113c:	18c0      	adds	r0, r0, r3
 801113e:	4161      	adcs	r1, r4
 8011140:	2301      	movs	r3, #1
 8011142:	782c      	ldrb	r4, [r5, #0]
 8011144:	3501      	adds	r5, #1
 8011146:	e7d5      	b.n	80110f4 <_strtoll_l.constprop.0+0x80>
 8011148:	9701      	str	r7, [sp, #4]
 801114a:	2c2b      	cmp	r4, #43	; 0x2b
 801114c:	d1ac      	bne.n	80110a8 <_strtoll_l.constprop.0+0x34>
 801114e:	781c      	ldrb	r4, [r3, #0]
 8011150:	1c95      	adds	r5, r2, #2
 8011152:	e7a9      	b.n	80110a8 <_strtoll_l.constprop.0+0x34>
 8011154:	0022      	movs	r2, r4
 8011156:	3a41      	subs	r2, #65	; 0x41
 8011158:	2a19      	cmp	r2, #25
 801115a:	d801      	bhi.n	8011160 <_strtoll_l.constprop.0+0xec>
 801115c:	3c37      	subs	r4, #55	; 0x37
 801115e:	e7ce      	b.n	80110fe <_strtoll_l.constprop.0+0x8a>
 8011160:	0022      	movs	r2, r4
 8011162:	3a61      	subs	r2, #97	; 0x61
 8011164:	2a19      	cmp	r2, #25
 8011166:	d804      	bhi.n	8011172 <_strtoll_l.constprop.0+0xfe>
 8011168:	3c57      	subs	r4, #87	; 0x57
 801116a:	e7c8      	b.n	80110fe <_strtoll_l.constprop.0+0x8a>
 801116c:	2301      	movs	r3, #1
 801116e:	425b      	negs	r3, r3
 8011170:	e7e7      	b.n	8011142 <_strtoll_l.constprop.0+0xce>
 8011172:	1c5a      	adds	r2, r3, #1
 8011174:	d109      	bne.n	801118a <_strtoll_l.constprop.0+0x116>
 8011176:	9804      	ldr	r0, [sp, #16]
 8011178:	9905      	ldr	r1, [sp, #20]
 801117a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801117c:	3323      	adds	r3, #35	; 0x23
 801117e:	6013      	str	r3, [r2, #0]
 8011180:	9b03      	ldr	r3, [sp, #12]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d10e      	bne.n	80111a4 <_strtoll_l.constprop.0+0x130>
 8011186:	b00d      	add	sp, #52	; 0x34
 8011188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801118a:	9a01      	ldr	r2, [sp, #4]
 801118c:	2a00      	cmp	r2, #0
 801118e:	d004      	beq.n	801119a <_strtoll_l.constprop.0+0x126>
 8011190:	0006      	movs	r6, r0
 8011192:	000f      	movs	r7, r1
 8011194:	2100      	movs	r1, #0
 8011196:	4270      	negs	r0, r6
 8011198:	41b9      	sbcs	r1, r7
 801119a:	9a03      	ldr	r2, [sp, #12]
 801119c:	2a00      	cmp	r2, #0
 801119e:	d0f2      	beq.n	8011186 <_strtoll_l.constprop.0+0x112>
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d001      	beq.n	80111a8 <_strtoll_l.constprop.0+0x134>
 80111a4:	1e6b      	subs	r3, r5, #1
 80111a6:	9302      	str	r3, [sp, #8]
 80111a8:	9b03      	ldr	r3, [sp, #12]
 80111aa:	9a02      	ldr	r2, [sp, #8]
 80111ac:	601a      	str	r2, [r3, #0]
 80111ae:	e7ea      	b.n	8011186 <_strtoll_l.constprop.0+0x112>
 80111b0:	2430      	movs	r4, #48	; 0x30
 80111b2:	2e00      	cmp	r6, #0
 80111b4:	d000      	beq.n	80111b8 <_strtoll_l.constprop.0+0x144>
 80111b6:	e787      	b.n	80110c8 <_strtoll_l.constprop.0+0x54>
 80111b8:	3608      	adds	r6, #8
 80111ba:	e785      	b.n	80110c8 <_strtoll_l.constprop.0+0x54>
 80111bc:	2c30      	cmp	r4, #48	; 0x30
 80111be:	d100      	bne.n	80111c2 <_strtoll_l.constprop.0+0x14e>
 80111c0:	e779      	b.n	80110b6 <_strtoll_l.constprop.0+0x42>
 80111c2:	260a      	movs	r6, #10
 80111c4:	e780      	b.n	80110c8 <_strtoll_l.constprop.0+0x54>
 80111c6:	46c0      	nop			; (mov r8, r8)
 80111c8:	08014509 	.word	0x08014509
 80111cc:	7fffffff 	.word	0x7fffffff

080111d0 <_strtoll_r>:
 80111d0:	b510      	push	{r4, lr}
 80111d2:	f7ff ff4f 	bl	8011074 <_strtoll_l.constprop.0>
 80111d6:	bd10      	pop	{r4, pc}

080111d8 <_strtoull_l.constprop.0>:
 80111d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111da:	b08b      	sub	sp, #44	; 0x2c
 80111dc:	9202      	str	r2, [sp, #8]
 80111de:	4a54      	ldr	r2, [pc, #336]	; (8011330 <_strtoull_l.constprop.0+0x158>)
 80111e0:	001e      	movs	r6, r3
 80111e2:	9101      	str	r1, [sp, #4]
 80111e4:	000b      	movs	r3, r1
 80111e6:	4694      	mov	ip, r2
 80111e8:	2108      	movs	r1, #8
 80111ea:	9009      	str	r0, [sp, #36]	; 0x24
 80111ec:	001a      	movs	r2, r3
 80111ee:	4660      	mov	r0, ip
 80111f0:	7814      	ldrb	r4, [r2, #0]
 80111f2:	3301      	adds	r3, #1
 80111f4:	5d00      	ldrb	r0, [r0, r4]
 80111f6:	001d      	movs	r5, r3
 80111f8:	0007      	movs	r7, r0
 80111fa:	400f      	ands	r7, r1
 80111fc:	4208      	tst	r0, r1
 80111fe:	d1f5      	bne.n	80111ec <_strtoull_l.constprop.0+0x14>
 8011200:	2c2d      	cmp	r4, #45	; 0x2d
 8011202:	d154      	bne.n	80112ae <_strtoull_l.constprop.0+0xd6>
 8011204:	781c      	ldrb	r4, [r3, #0]
 8011206:	2301      	movs	r3, #1
 8011208:	1c95      	adds	r5, r2, #2
 801120a:	9306      	str	r3, [sp, #24]
 801120c:	2e00      	cmp	r6, #0
 801120e:	d100      	bne.n	8011212 <_strtoull_l.constprop.0+0x3a>
 8011210:	e088      	b.n	8011324 <_strtoull_l.constprop.0+0x14c>
 8011212:	2e10      	cmp	r6, #16
 8011214:	d10a      	bne.n	801122c <_strtoull_l.constprop.0+0x54>
 8011216:	2c30      	cmp	r4, #48	; 0x30
 8011218:	d108      	bne.n	801122c <_strtoull_l.constprop.0+0x54>
 801121a:	2220      	movs	r2, #32
 801121c:	782b      	ldrb	r3, [r5, #0]
 801121e:	4393      	bics	r3, r2
 8011220:	2b58      	cmp	r3, #88	; 0x58
 8011222:	d000      	beq.n	8011226 <_strtoull_l.constprop.0+0x4e>
 8011224:	e078      	b.n	8011318 <_strtoull_l.constprop.0+0x140>
 8011226:	2610      	movs	r6, #16
 8011228:	786c      	ldrb	r4, [r5, #1]
 801122a:	3502      	adds	r5, #2
 801122c:	17f7      	asrs	r7, r6, #31
 801122e:	0032      	movs	r2, r6
 8011230:	003b      	movs	r3, r7
 8011232:	2001      	movs	r0, #1
 8011234:	4240      	negs	r0, r0
 8011236:	17c1      	asrs	r1, r0, #31
 8011238:	f7ef f934 	bl	80004a4 <__aeabi_uldivmod>
 801123c:	0032      	movs	r2, r6
 801123e:	9007      	str	r0, [sp, #28]
 8011240:	9103      	str	r1, [sp, #12]
 8011242:	003b      	movs	r3, r7
 8011244:	2001      	movs	r0, #1
 8011246:	4240      	negs	r0, r0
 8011248:	17c1      	asrs	r1, r0, #31
 801124a:	f7ef f92b 	bl	80004a4 <__aeabi_uldivmod>
 801124e:	2300      	movs	r3, #0
 8011250:	2000      	movs	r0, #0
 8011252:	2100      	movs	r1, #0
 8011254:	9208      	str	r2, [sp, #32]
 8011256:	0022      	movs	r2, r4
 8011258:	3a30      	subs	r2, #48	; 0x30
 801125a:	2a09      	cmp	r2, #9
 801125c:	d82d      	bhi.n	80112ba <_strtoull_l.constprop.0+0xe2>
 801125e:	0014      	movs	r4, r2
 8011260:	42a6      	cmp	r6, r4
 8011262:	dd39      	ble.n	80112d8 <_strtoull_l.constprop.0+0x100>
 8011264:	1c5a      	adds	r2, r3, #1
 8011266:	d01f      	beq.n	80112a8 <_strtoull_l.constprop.0+0xd0>
 8011268:	9b03      	ldr	r3, [sp, #12]
 801126a:	4299      	cmp	r1, r3
 801126c:	d831      	bhi.n	80112d2 <_strtoull_l.constprop.0+0xfa>
 801126e:	d102      	bne.n	8011276 <_strtoull_l.constprop.0+0x9e>
 8011270:	9b07      	ldr	r3, [sp, #28]
 8011272:	4298      	cmp	r0, r3
 8011274:	d82d      	bhi.n	80112d2 <_strtoull_l.constprop.0+0xfa>
 8011276:	9b07      	ldr	r3, [sp, #28]
 8011278:	4283      	cmp	r3, r0
 801127a:	d107      	bne.n	801128c <_strtoull_l.constprop.0+0xb4>
 801127c:	9b03      	ldr	r3, [sp, #12]
 801127e:	428b      	cmp	r3, r1
 8011280:	d104      	bne.n	801128c <_strtoull_l.constprop.0+0xb4>
 8011282:	2301      	movs	r3, #1
 8011284:	9a08      	ldr	r2, [sp, #32]
 8011286:	425b      	negs	r3, r3
 8011288:	42a2      	cmp	r2, r4
 801128a:	db0d      	blt.n	80112a8 <_strtoull_l.constprop.0+0xd0>
 801128c:	000b      	movs	r3, r1
 801128e:	0002      	movs	r2, r0
 8011290:	0039      	movs	r1, r7
 8011292:	0030      	movs	r0, r6
 8011294:	f7ef f926 	bl	80004e4 <__aeabi_lmul>
 8011298:	17e3      	asrs	r3, r4, #31
 801129a:	9404      	str	r4, [sp, #16]
 801129c:	9305      	str	r3, [sp, #20]
 801129e:	9b04      	ldr	r3, [sp, #16]
 80112a0:	9c05      	ldr	r4, [sp, #20]
 80112a2:	18c0      	adds	r0, r0, r3
 80112a4:	4161      	adcs	r1, r4
 80112a6:	2301      	movs	r3, #1
 80112a8:	782c      	ldrb	r4, [r5, #0]
 80112aa:	3501      	adds	r5, #1
 80112ac:	e7d3      	b.n	8011256 <_strtoull_l.constprop.0+0x7e>
 80112ae:	9706      	str	r7, [sp, #24]
 80112b0:	2c2b      	cmp	r4, #43	; 0x2b
 80112b2:	d1ab      	bne.n	801120c <_strtoull_l.constprop.0+0x34>
 80112b4:	781c      	ldrb	r4, [r3, #0]
 80112b6:	1c95      	adds	r5, r2, #2
 80112b8:	e7a8      	b.n	801120c <_strtoull_l.constprop.0+0x34>
 80112ba:	0022      	movs	r2, r4
 80112bc:	3a41      	subs	r2, #65	; 0x41
 80112be:	2a19      	cmp	r2, #25
 80112c0:	d801      	bhi.n	80112c6 <_strtoull_l.constprop.0+0xee>
 80112c2:	3c37      	subs	r4, #55	; 0x37
 80112c4:	e7cc      	b.n	8011260 <_strtoull_l.constprop.0+0x88>
 80112c6:	0022      	movs	r2, r4
 80112c8:	3a61      	subs	r2, #97	; 0x61
 80112ca:	2a19      	cmp	r2, #25
 80112cc:	d804      	bhi.n	80112d8 <_strtoull_l.constprop.0+0x100>
 80112ce:	3c57      	subs	r4, #87	; 0x57
 80112d0:	e7c6      	b.n	8011260 <_strtoull_l.constprop.0+0x88>
 80112d2:	2301      	movs	r3, #1
 80112d4:	425b      	negs	r3, r3
 80112d6:	e7e7      	b.n	80112a8 <_strtoull_l.constprop.0+0xd0>
 80112d8:	1c5a      	adds	r2, r3, #1
 80112da:	d10a      	bne.n	80112f2 <_strtoull_l.constprop.0+0x11a>
 80112dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112de:	3323      	adds	r3, #35	; 0x23
 80112e0:	6013      	str	r3, [r2, #0]
 80112e2:	9b02      	ldr	r3, [sp, #8]
 80112e4:	2001      	movs	r0, #1
 80112e6:	4240      	negs	r0, r0
 80112e8:	17c1      	asrs	r1, r0, #31
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d10e      	bne.n	801130c <_strtoull_l.constprop.0+0x134>
 80112ee:	b00b      	add	sp, #44	; 0x2c
 80112f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112f2:	9a06      	ldr	r2, [sp, #24]
 80112f4:	2a00      	cmp	r2, #0
 80112f6:	d004      	beq.n	8011302 <_strtoull_l.constprop.0+0x12a>
 80112f8:	0006      	movs	r6, r0
 80112fa:	000f      	movs	r7, r1
 80112fc:	2100      	movs	r1, #0
 80112fe:	4270      	negs	r0, r6
 8011300:	41b9      	sbcs	r1, r7
 8011302:	9a02      	ldr	r2, [sp, #8]
 8011304:	2a00      	cmp	r2, #0
 8011306:	d0f2      	beq.n	80112ee <_strtoull_l.constprop.0+0x116>
 8011308:	2b00      	cmp	r3, #0
 801130a:	d001      	beq.n	8011310 <_strtoull_l.constprop.0+0x138>
 801130c:	1e6b      	subs	r3, r5, #1
 801130e:	9301      	str	r3, [sp, #4]
 8011310:	9b02      	ldr	r3, [sp, #8]
 8011312:	9a01      	ldr	r2, [sp, #4]
 8011314:	601a      	str	r2, [r3, #0]
 8011316:	e7ea      	b.n	80112ee <_strtoull_l.constprop.0+0x116>
 8011318:	2430      	movs	r4, #48	; 0x30
 801131a:	2e00      	cmp	r6, #0
 801131c:	d000      	beq.n	8011320 <_strtoull_l.constprop.0+0x148>
 801131e:	e785      	b.n	801122c <_strtoull_l.constprop.0+0x54>
 8011320:	3608      	adds	r6, #8
 8011322:	e783      	b.n	801122c <_strtoull_l.constprop.0+0x54>
 8011324:	2c30      	cmp	r4, #48	; 0x30
 8011326:	d100      	bne.n	801132a <_strtoull_l.constprop.0+0x152>
 8011328:	e777      	b.n	801121a <_strtoull_l.constprop.0+0x42>
 801132a:	260a      	movs	r6, #10
 801132c:	e77e      	b.n	801122c <_strtoull_l.constprop.0+0x54>
 801132e:	46c0      	nop			; (mov r8, r8)
 8011330:	08014509 	.word	0x08014509

08011334 <_strtoull_r>:
 8011334:	b510      	push	{r4, lr}
 8011336:	f7ff ff4f 	bl	80111d8 <_strtoull_l.constprop.0>
 801133a:	bd10      	pop	{r4, pc}

0801133c <_mbrtowc_r>:
 801133c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801133e:	0004      	movs	r4, r0
 8011340:	0010      	movs	r0, r2
 8011342:	4a0b      	ldr	r2, [pc, #44]	; (8011370 <_mbrtowc_r+0x34>)
 8011344:	9d06      	ldr	r5, [sp, #24]
 8011346:	32e4      	adds	r2, #228	; 0xe4
 8011348:	6816      	ldr	r6, [r2, #0]
 801134a:	2800      	cmp	r0, #0
 801134c:	d10c      	bne.n	8011368 <_mbrtowc_r+0x2c>
 801134e:	2301      	movs	r3, #1
 8011350:	0001      	movs	r1, r0
 8011352:	4a08      	ldr	r2, [pc, #32]	; (8011374 <_mbrtowc_r+0x38>)
 8011354:	9500      	str	r5, [sp, #0]
 8011356:	0020      	movs	r0, r4
 8011358:	47b0      	blx	r6
 801135a:	1c43      	adds	r3, r0, #1
 801135c:	d103      	bne.n	8011366 <_mbrtowc_r+0x2a>
 801135e:	2300      	movs	r3, #0
 8011360:	602b      	str	r3, [r5, #0]
 8011362:	338a      	adds	r3, #138	; 0x8a
 8011364:	6023      	str	r3, [r4, #0]
 8011366:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8011368:	0002      	movs	r2, r0
 801136a:	9500      	str	r5, [sp, #0]
 801136c:	e7f3      	b.n	8011356 <_mbrtowc_r+0x1a>
 801136e:	46c0      	nop			; (mov r8, r8)
 8011370:	20000444 	.word	0x20000444
 8011374:	08014893 	.word	0x08014893

08011378 <iswspace>:
 8011378:	b510      	push	{r4, lr}
 801137a:	2100      	movs	r1, #0
 801137c:	f000 f802 	bl	8011384 <iswspace_l>
 8011380:	bd10      	pop	{r4, pc}
	...

08011384 <iswspace_l>:
 8011384:	0003      	movs	r3, r0
 8011386:	2000      	movs	r0, #0
 8011388:	2bff      	cmp	r3, #255	; 0xff
 801138a:	d803      	bhi.n	8011394 <iswspace_l+0x10>
 801138c:	4a02      	ldr	r2, [pc, #8]	; (8011398 <iswspace_l+0x14>)
 801138e:	5cd0      	ldrb	r0, [r2, r3]
 8011390:	2308      	movs	r3, #8
 8011392:	4018      	ands	r0, r3
 8011394:	4770      	bx	lr
 8011396:	46c0      	nop			; (mov r8, r8)
 8011398:	08014509 	.word	0x08014509

0801139c <fiprintf>:
 801139c:	b40e      	push	{r1, r2, r3}
 801139e:	b517      	push	{r0, r1, r2, r4, lr}
 80113a0:	4c05      	ldr	r4, [pc, #20]	; (80113b8 <fiprintf+0x1c>)
 80113a2:	ab05      	add	r3, sp, #20
 80113a4:	cb04      	ldmia	r3!, {r2}
 80113a6:	0001      	movs	r1, r0
 80113a8:	6820      	ldr	r0, [r4, #0]
 80113aa:	9301      	str	r3, [sp, #4]
 80113ac:	f000 f954 	bl	8011658 <_vfiprintf_r>
 80113b0:	bc1e      	pop	{r1, r2, r3, r4}
 80113b2:	bc08      	pop	{r3}
 80113b4:	b003      	add	sp, #12
 80113b6:	4718      	bx	r3
 80113b8:	200006d0 	.word	0x200006d0

080113bc <__ssprint_r>:
 80113bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113be:	6813      	ldr	r3, [r2, #0]
 80113c0:	b087      	sub	sp, #28
 80113c2:	0017      	movs	r7, r2
 80113c4:	9303      	str	r3, [sp, #12]
 80113c6:	6893      	ldr	r3, [r2, #8]
 80113c8:	2200      	movs	r2, #0
 80113ca:	000c      	movs	r4, r1
 80113cc:	9005      	str	r0, [sp, #20]
 80113ce:	9202      	str	r2, [sp, #8]
 80113d0:	9201      	str	r2, [sp, #4]
 80113d2:	4293      	cmp	r3, r2
 80113d4:	d10d      	bne.n	80113f2 <__ssprint_r+0x36>
 80113d6:	2000      	movs	r0, #0
 80113d8:	2300      	movs	r3, #0
 80113da:	607b      	str	r3, [r7, #4]
 80113dc:	b007      	add	sp, #28
 80113de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113e0:	9b03      	ldr	r3, [sp, #12]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	9302      	str	r3, [sp, #8]
 80113e6:	9b03      	ldr	r3, [sp, #12]
 80113e8:	685b      	ldr	r3, [r3, #4]
 80113ea:	9301      	str	r3, [sp, #4]
 80113ec:	9b03      	ldr	r3, [sp, #12]
 80113ee:	3308      	adds	r3, #8
 80113f0:	9303      	str	r3, [sp, #12]
 80113f2:	9a01      	ldr	r2, [sp, #4]
 80113f4:	68a6      	ldr	r6, [r4, #8]
 80113f6:	6823      	ldr	r3, [r4, #0]
 80113f8:	2a00      	cmp	r2, #0
 80113fa:	d0f1      	beq.n	80113e0 <__ssprint_r+0x24>
 80113fc:	42b2      	cmp	r2, r6
 80113fe:	d32e      	bcc.n	801145e <__ssprint_r+0xa2>
 8011400:	2190      	movs	r1, #144	; 0x90
 8011402:	89a2      	ldrh	r2, [r4, #12]
 8011404:	00c9      	lsls	r1, r1, #3
 8011406:	420a      	tst	r2, r1
 8011408:	d029      	beq.n	801145e <__ssprint_r+0xa2>
 801140a:	2003      	movs	r0, #3
 801140c:	6921      	ldr	r1, [r4, #16]
 801140e:	1a5b      	subs	r3, r3, r1
 8011410:	9304      	str	r3, [sp, #16]
 8011412:	6963      	ldr	r3, [r4, #20]
 8011414:	4343      	muls	r3, r0
 8011416:	0fdd      	lsrs	r5, r3, #31
 8011418:	18ed      	adds	r5, r5, r3
 801141a:	9b04      	ldr	r3, [sp, #16]
 801141c:	9801      	ldr	r0, [sp, #4]
 801141e:	3301      	adds	r3, #1
 8011420:	181b      	adds	r3, r3, r0
 8011422:	106d      	asrs	r5, r5, #1
 8011424:	42ab      	cmp	r3, r5
 8011426:	d900      	bls.n	801142a <__ssprint_r+0x6e>
 8011428:	001d      	movs	r5, r3
 801142a:	0552      	lsls	r2, r2, #21
 801142c:	d532      	bpl.n	8011494 <__ssprint_r+0xd8>
 801142e:	0029      	movs	r1, r5
 8011430:	9805      	ldr	r0, [sp, #20]
 8011432:	f7f9 f9e1 	bl	800a7f8 <_malloc_r>
 8011436:	1e06      	subs	r6, r0, #0
 8011438:	d036      	beq.n	80114a8 <__ssprint_r+0xec>
 801143a:	9a04      	ldr	r2, [sp, #16]
 801143c:	6921      	ldr	r1, [r4, #16]
 801143e:	f7fa fe1a 	bl	800c076 <memcpy>
 8011442:	89a2      	ldrh	r2, [r4, #12]
 8011444:	4b1e      	ldr	r3, [pc, #120]	; (80114c0 <__ssprint_r+0x104>)
 8011446:	401a      	ands	r2, r3
 8011448:	2380      	movs	r3, #128	; 0x80
 801144a:	4313      	orrs	r3, r2
 801144c:	81a3      	strh	r3, [r4, #12]
 801144e:	9b04      	ldr	r3, [sp, #16]
 8011450:	6126      	str	r6, [r4, #16]
 8011452:	18f6      	adds	r6, r6, r3
 8011454:	6026      	str	r6, [r4, #0]
 8011456:	6165      	str	r5, [r4, #20]
 8011458:	9e01      	ldr	r6, [sp, #4]
 801145a:	1aed      	subs	r5, r5, r3
 801145c:	60a5      	str	r5, [r4, #8]
 801145e:	9b01      	ldr	r3, [sp, #4]
 8011460:	429e      	cmp	r6, r3
 8011462:	d900      	bls.n	8011466 <__ssprint_r+0xaa>
 8011464:	001e      	movs	r6, r3
 8011466:	0032      	movs	r2, r6
 8011468:	9902      	ldr	r1, [sp, #8]
 801146a:	6820      	ldr	r0, [r4, #0]
 801146c:	f001 f86d 	bl	801254a <memmove>
 8011470:	9a01      	ldr	r2, [sp, #4]
 8011472:	68a3      	ldr	r3, [r4, #8]
 8011474:	4694      	mov	ip, r2
 8011476:	1b9b      	subs	r3, r3, r6
 8011478:	60a3      	str	r3, [r4, #8]
 801147a:	6823      	ldr	r3, [r4, #0]
 801147c:	199b      	adds	r3, r3, r6
 801147e:	6023      	str	r3, [r4, #0]
 8011480:	9b02      	ldr	r3, [sp, #8]
 8011482:	4463      	add	r3, ip
 8011484:	9302      	str	r3, [sp, #8]
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	1a9b      	subs	r3, r3, r2
 801148a:	60bb      	str	r3, [r7, #8]
 801148c:	d0a3      	beq.n	80113d6 <__ssprint_r+0x1a>
 801148e:	2300      	movs	r3, #0
 8011490:	9301      	str	r3, [sp, #4]
 8011492:	e7ae      	b.n	80113f2 <__ssprint_r+0x36>
 8011494:	002a      	movs	r2, r5
 8011496:	9805      	ldr	r0, [sp, #20]
 8011498:	f7ff fc46 	bl	8010d28 <_realloc_r>
 801149c:	1e06      	subs	r6, r0, #0
 801149e:	d1d6      	bne.n	801144e <__ssprint_r+0x92>
 80114a0:	6921      	ldr	r1, [r4, #16]
 80114a2:	9805      	ldr	r0, [sp, #20]
 80114a4:	f7fa fe62 	bl	800c16c <_free_r>
 80114a8:	230c      	movs	r3, #12
 80114aa:	9a05      	ldr	r2, [sp, #20]
 80114ac:	2001      	movs	r0, #1
 80114ae:	6013      	str	r3, [r2, #0]
 80114b0:	89a2      	ldrh	r2, [r4, #12]
 80114b2:	3334      	adds	r3, #52	; 0x34
 80114b4:	4313      	orrs	r3, r2
 80114b6:	81a3      	strh	r3, [r4, #12]
 80114b8:	2300      	movs	r3, #0
 80114ba:	4240      	negs	r0, r0
 80114bc:	60bb      	str	r3, [r7, #8]
 80114be:	e78b      	b.n	80113d8 <__ssprint_r+0x1c>
 80114c0:	fffffb7f 	.word	0xfffffb7f

080114c4 <_sungetc_r>:
 80114c4:	b570      	push	{r4, r5, r6, lr}
 80114c6:	0014      	movs	r4, r2
 80114c8:	1c4b      	adds	r3, r1, #1
 80114ca:	d103      	bne.n	80114d4 <_sungetc_r+0x10>
 80114cc:	2501      	movs	r5, #1
 80114ce:	426d      	negs	r5, r5
 80114d0:	0028      	movs	r0, r5
 80114d2:	bd70      	pop	{r4, r5, r6, pc}
 80114d4:	8993      	ldrh	r3, [r2, #12]
 80114d6:	2220      	movs	r2, #32
 80114d8:	4393      	bics	r3, r2
 80114da:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80114dc:	81a3      	strh	r3, [r4, #12]
 80114de:	b2ce      	uxtb	r6, r1
 80114e0:	6863      	ldr	r3, [r4, #4]
 80114e2:	b2cd      	uxtb	r5, r1
 80114e4:	2a00      	cmp	r2, #0
 80114e6:	d010      	beq.n	801150a <_sungetc_r+0x46>
 80114e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80114ea:	429a      	cmp	r2, r3
 80114ec:	dd07      	ble.n	80114fe <_sungetc_r+0x3a>
 80114ee:	6823      	ldr	r3, [r4, #0]
 80114f0:	3b01      	subs	r3, #1
 80114f2:	6023      	str	r3, [r4, #0]
 80114f4:	701e      	strb	r6, [r3, #0]
 80114f6:	6863      	ldr	r3, [r4, #4]
 80114f8:	3301      	adds	r3, #1
 80114fa:	6063      	str	r3, [r4, #4]
 80114fc:	e7e8      	b.n	80114d0 <_sungetc_r+0xc>
 80114fe:	0021      	movs	r1, r4
 8011500:	f000 ff1a 	bl	8012338 <__submore>
 8011504:	2800      	cmp	r0, #0
 8011506:	d0f2      	beq.n	80114ee <_sungetc_r+0x2a>
 8011508:	e7e0      	b.n	80114cc <_sungetc_r+0x8>
 801150a:	6921      	ldr	r1, [r4, #16]
 801150c:	6822      	ldr	r2, [r4, #0]
 801150e:	2900      	cmp	r1, #0
 8011510:	d007      	beq.n	8011522 <_sungetc_r+0x5e>
 8011512:	4291      	cmp	r1, r2
 8011514:	d205      	bcs.n	8011522 <_sungetc_r+0x5e>
 8011516:	1e51      	subs	r1, r2, #1
 8011518:	7808      	ldrb	r0, [r1, #0]
 801151a:	42a8      	cmp	r0, r5
 801151c:	d101      	bne.n	8011522 <_sungetc_r+0x5e>
 801151e:	6021      	str	r1, [r4, #0]
 8011520:	e7ea      	b.n	80114f8 <_sungetc_r+0x34>
 8011522:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011524:	0023      	movs	r3, r4
 8011526:	3340      	adds	r3, #64	; 0x40
 8011528:	6323      	str	r3, [r4, #48]	; 0x30
 801152a:	2303      	movs	r3, #3
 801152c:	6363      	str	r3, [r4, #52]	; 0x34
 801152e:	0023      	movs	r3, r4
 8011530:	3342      	adds	r3, #66	; 0x42
 8011532:	63a2      	str	r2, [r4, #56]	; 0x38
 8011534:	701e      	strb	r6, [r3, #0]
 8011536:	6023      	str	r3, [r4, #0]
 8011538:	2301      	movs	r3, #1
 801153a:	e7de      	b.n	80114fa <_sungetc_r+0x36>

0801153c <__ssrefill_r>:
 801153c:	b510      	push	{r4, lr}
 801153e:	000c      	movs	r4, r1
 8011540:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8011542:	2900      	cmp	r1, #0
 8011544:	d00e      	beq.n	8011564 <__ssrefill_r+0x28>
 8011546:	0023      	movs	r3, r4
 8011548:	3340      	adds	r3, #64	; 0x40
 801154a:	4299      	cmp	r1, r3
 801154c:	d001      	beq.n	8011552 <__ssrefill_r+0x16>
 801154e:	f7fa fe0d 	bl	800c16c <_free_r>
 8011552:	2000      	movs	r0, #0
 8011554:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011556:	6320      	str	r0, [r4, #48]	; 0x30
 8011558:	6063      	str	r3, [r4, #4]
 801155a:	4283      	cmp	r3, r0
 801155c:	d002      	beq.n	8011564 <__ssrefill_r+0x28>
 801155e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011560:	6023      	str	r3, [r4, #0]
 8011562:	bd10      	pop	{r4, pc}
 8011564:	6923      	ldr	r3, [r4, #16]
 8011566:	2001      	movs	r0, #1
 8011568:	6023      	str	r3, [r4, #0]
 801156a:	2300      	movs	r3, #0
 801156c:	89a2      	ldrh	r2, [r4, #12]
 801156e:	6063      	str	r3, [r4, #4]
 8011570:	3320      	adds	r3, #32
 8011572:	4313      	orrs	r3, r2
 8011574:	81a3      	strh	r3, [r4, #12]
 8011576:	4240      	negs	r0, r0
 8011578:	e7f3      	b.n	8011562 <__ssrefill_r+0x26>

0801157a <_sfread_r>:
 801157a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801157c:	0014      	movs	r4, r2
 801157e:	435c      	muls	r4, r3
 8011580:	b087      	sub	sp, #28
 8011582:	1e26      	subs	r6, r4, #0
 8011584:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011586:	9005      	str	r0, [sp, #20]
 8011588:	9101      	str	r1, [sp, #4]
 801158a:	9202      	str	r2, [sp, #8]
 801158c:	9303      	str	r3, [sp, #12]
 801158e:	d11e      	bne.n	80115ce <_sfread_r+0x54>
 8011590:	0020      	movs	r0, r4
 8011592:	b007      	add	sp, #28
 8011594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011596:	003a      	movs	r2, r7
 8011598:	9801      	ldr	r0, [sp, #4]
 801159a:	f7fa fd6c 	bl	800c076 <memcpy>
 801159e:	682b      	ldr	r3, [r5, #0]
 80115a0:	0029      	movs	r1, r5
 80115a2:	19db      	adds	r3, r3, r7
 80115a4:	602b      	str	r3, [r5, #0]
 80115a6:	2300      	movs	r3, #0
 80115a8:	606b      	str	r3, [r5, #4]
 80115aa:	9b01      	ldr	r3, [sp, #4]
 80115ac:	9805      	ldr	r0, [sp, #20]
 80115ae:	19db      	adds	r3, r3, r7
 80115b0:	9301      	str	r3, [sp, #4]
 80115b2:	1bf3      	subs	r3, r6, r7
 80115b4:	9304      	str	r3, [sp, #16]
 80115b6:	f7ff ffc1 	bl	801153c <__ssrefill_r>
 80115ba:	2800      	cmp	r0, #0
 80115bc:	d006      	beq.n	80115cc <_sfread_r+0x52>
 80115be:	193c      	adds	r4, r7, r4
 80115c0:	1ba0      	subs	r0, r4, r6
 80115c2:	9902      	ldr	r1, [sp, #8]
 80115c4:	f7ee fdba 	bl	800013c <__udivsi3>
 80115c8:	0004      	movs	r4, r0
 80115ca:	e7e1      	b.n	8011590 <_sfread_r+0x16>
 80115cc:	9e04      	ldr	r6, [sp, #16]
 80115ce:	686f      	ldr	r7, [r5, #4]
 80115d0:	6829      	ldr	r1, [r5, #0]
 80115d2:	42b7      	cmp	r7, r6
 80115d4:	d3df      	bcc.n	8011596 <_sfread_r+0x1c>
 80115d6:	0032      	movs	r2, r6
 80115d8:	9801      	ldr	r0, [sp, #4]
 80115da:	f7fa fd4c 	bl	800c076 <memcpy>
 80115de:	686b      	ldr	r3, [r5, #4]
 80115e0:	9c03      	ldr	r4, [sp, #12]
 80115e2:	1b9b      	subs	r3, r3, r6
 80115e4:	606b      	str	r3, [r5, #4]
 80115e6:	682b      	ldr	r3, [r5, #0]
 80115e8:	199b      	adds	r3, r3, r6
 80115ea:	602b      	str	r3, [r5, #0]
 80115ec:	e7d0      	b.n	8011590 <_sfread_r+0x16>

080115ee <__sprint_r>:
 80115ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115f0:	6893      	ldr	r3, [r2, #8]
 80115f2:	b085      	sub	sp, #20
 80115f4:	9001      	str	r0, [sp, #4]
 80115f6:	000d      	movs	r5, r1
 80115f8:	0014      	movs	r4, r2
 80115fa:	1e18      	subs	r0, r3, #0
 80115fc:	d018      	beq.n	8011630 <__sprint_r+0x42>
 80115fe:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011600:	049b      	lsls	r3, r3, #18
 8011602:	d524      	bpl.n	801164e <__sprint_r+0x60>
 8011604:	6817      	ldr	r7, [r2, #0]
 8011606:	2600      	movs	r6, #0
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	9302      	str	r3, [sp, #8]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	9300      	str	r3, [sp, #0]
 8011610:	089b      	lsrs	r3, r3, #2
 8011612:	9303      	str	r3, [sp, #12]
 8011614:	9b03      	ldr	r3, [sp, #12]
 8011616:	42b3      	cmp	r3, r6
 8011618:	dc0e      	bgt.n	8011638 <__sprint_r+0x4a>
 801161a:	2203      	movs	r2, #3
 801161c:	9b00      	ldr	r3, [sp, #0]
 801161e:	68a0      	ldr	r0, [r4, #8]
 8011620:	4393      	bics	r3, r2
 8011622:	1ac0      	subs	r0, r0, r3
 8011624:	60a0      	str	r0, [r4, #8]
 8011626:	3708      	adds	r7, #8
 8011628:	2800      	cmp	r0, #0
 801162a:	d1ec      	bne.n	8011606 <__sprint_r+0x18>
 801162c:	2300      	movs	r3, #0
 801162e:	60a3      	str	r3, [r4, #8]
 8011630:	2300      	movs	r3, #0
 8011632:	6063      	str	r3, [r4, #4]
 8011634:	b005      	add	sp, #20
 8011636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011638:	9902      	ldr	r1, [sp, #8]
 801163a:	00b3      	lsls	r3, r6, #2
 801163c:	58c9      	ldr	r1, [r1, r3]
 801163e:	002a      	movs	r2, r5
 8011640:	9801      	ldr	r0, [sp, #4]
 8011642:	f000 ff59 	bl	80124f8 <_fputwc_r>
 8011646:	1c43      	adds	r3, r0, #1
 8011648:	d0f0      	beq.n	801162c <__sprint_r+0x3e>
 801164a:	3601      	adds	r6, #1
 801164c:	e7e2      	b.n	8011614 <__sprint_r+0x26>
 801164e:	9801      	ldr	r0, [sp, #4]
 8011650:	f000 fd14 	bl	801207c <__sfvwrite_r>
 8011654:	e7ea      	b.n	801162c <__sprint_r+0x3e>
	...

08011658 <_vfiprintf_r>:
 8011658:	b5f0      	push	{r4, r5, r6, r7, lr}
 801165a:	b0c1      	sub	sp, #260	; 0x104
 801165c:	001c      	movs	r4, r3
 801165e:	001f      	movs	r7, r3
 8011660:	9006      	str	r0, [sp, #24]
 8011662:	9103      	str	r1, [sp, #12]
 8011664:	9207      	str	r2, [sp, #28]
 8011666:	2800      	cmp	r0, #0
 8011668:	d004      	beq.n	8011674 <_vfiprintf_r+0x1c>
 801166a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801166c:	2b00      	cmp	r3, #0
 801166e:	d101      	bne.n	8011674 <_vfiprintf_r+0x1c>
 8011670:	f7fa fad6 	bl	800bc20 <__sinit>
 8011674:	9b03      	ldr	r3, [sp, #12]
 8011676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011678:	07db      	lsls	r3, r3, #31
 801167a:	d407      	bmi.n	801168c <_vfiprintf_r+0x34>
 801167c:	9b03      	ldr	r3, [sp, #12]
 801167e:	899b      	ldrh	r3, [r3, #12]
 8011680:	059b      	lsls	r3, r3, #22
 8011682:	d403      	bmi.n	801168c <_vfiprintf_r+0x34>
 8011684:	9b03      	ldr	r3, [sp, #12]
 8011686:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011688:	f7fa fce8 	bl	800c05c <__retarget_lock_acquire_recursive>
 801168c:	9b03      	ldr	r3, [sp, #12]
 801168e:	220c      	movs	r2, #12
 8011690:	5e9a      	ldrsh	r2, [r3, r2]
 8011692:	2380      	movs	r3, #128	; 0x80
 8011694:	019b      	lsls	r3, r3, #6
 8011696:	421a      	tst	r2, r3
 8011698:	d107      	bne.n	80116aa <_vfiprintf_r+0x52>
 801169a:	4313      	orrs	r3, r2
 801169c:	9a03      	ldr	r2, [sp, #12]
 801169e:	8193      	strh	r3, [r2, #12]
 80116a0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80116a2:	4aa3      	ldr	r2, [pc, #652]	; (8011930 <_vfiprintf_r+0x2d8>)
 80116a4:	4013      	ands	r3, r2
 80116a6:	9a03      	ldr	r2, [sp, #12]
 80116a8:	6653      	str	r3, [r2, #100]	; 0x64
 80116aa:	9b03      	ldr	r3, [sp, #12]
 80116ac:	899b      	ldrh	r3, [r3, #12]
 80116ae:	071b      	lsls	r3, r3, #28
 80116b0:	d503      	bpl.n	80116ba <_vfiprintf_r+0x62>
 80116b2:	9b03      	ldr	r3, [sp, #12]
 80116b4:	691b      	ldr	r3, [r3, #16]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d118      	bne.n	80116ec <_vfiprintf_r+0x94>
 80116ba:	9903      	ldr	r1, [sp, #12]
 80116bc:	9806      	ldr	r0, [sp, #24]
 80116be:	f000 fe79 	bl	80123b4 <__swsetup_r>
 80116c2:	2800      	cmp	r0, #0
 80116c4:	d012      	beq.n	80116ec <_vfiprintf_r+0x94>
 80116c6:	9b03      	ldr	r3, [sp, #12]
 80116c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80116ca:	07db      	lsls	r3, r3, #31
 80116cc:	d505      	bpl.n	80116da <_vfiprintf_r+0x82>
 80116ce:	2301      	movs	r3, #1
 80116d0:	425b      	negs	r3, r3
 80116d2:	9308      	str	r3, [sp, #32]
 80116d4:	9808      	ldr	r0, [sp, #32]
 80116d6:	b041      	add	sp, #260	; 0x104
 80116d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116da:	9b03      	ldr	r3, [sp, #12]
 80116dc:	899b      	ldrh	r3, [r3, #12]
 80116de:	059b      	lsls	r3, r3, #22
 80116e0:	d4f5      	bmi.n	80116ce <_vfiprintf_r+0x76>
 80116e2:	9b03      	ldr	r3, [sp, #12]
 80116e4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80116e6:	f7fa fcba 	bl	800c05e <__retarget_lock_release_recursive>
 80116ea:	e7f0      	b.n	80116ce <_vfiprintf_r+0x76>
 80116ec:	221a      	movs	r2, #26
 80116ee:	9b03      	ldr	r3, [sp, #12]
 80116f0:	899b      	ldrh	r3, [r3, #12]
 80116f2:	401a      	ands	r2, r3
 80116f4:	2a0a      	cmp	r2, #10
 80116f6:	d116      	bne.n	8011726 <_vfiprintf_r+0xce>
 80116f8:	9a03      	ldr	r2, [sp, #12]
 80116fa:	210e      	movs	r1, #14
 80116fc:	5e52      	ldrsh	r2, [r2, r1]
 80116fe:	2a00      	cmp	r2, #0
 8011700:	db11      	blt.n	8011726 <_vfiprintf_r+0xce>
 8011702:	9a03      	ldr	r2, [sp, #12]
 8011704:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011706:	07d2      	lsls	r2, r2, #31
 8011708:	d405      	bmi.n	8011716 <_vfiprintf_r+0xbe>
 801170a:	059b      	lsls	r3, r3, #22
 801170c:	d403      	bmi.n	8011716 <_vfiprintf_r+0xbe>
 801170e:	9b03      	ldr	r3, [sp, #12]
 8011710:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011712:	f7fa fca4 	bl	800c05e <__retarget_lock_release_recursive>
 8011716:	0023      	movs	r3, r4
 8011718:	9a07      	ldr	r2, [sp, #28]
 801171a:	9903      	ldr	r1, [sp, #12]
 801171c:	9806      	ldr	r0, [sp, #24]
 801171e:	f000 fc69 	bl	8011ff4 <__sbprintf>
 8011722:	9008      	str	r0, [sp, #32]
 8011724:	e7d6      	b.n	80116d4 <_vfiprintf_r+0x7c>
 8011726:	2300      	movs	r3, #0
 8011728:	ad17      	add	r5, sp, #92	; 0x5c
 801172a:	9514      	str	r5, [sp, #80]	; 0x50
 801172c:	9316      	str	r3, [sp, #88]	; 0x58
 801172e:	9315      	str	r3, [sp, #84]	; 0x54
 8011730:	930c      	str	r3, [sp, #48]	; 0x30
 8011732:	930d      	str	r3, [sp, #52]	; 0x34
 8011734:	930e      	str	r3, [sp, #56]	; 0x38
 8011736:	930f      	str	r3, [sp, #60]	; 0x3c
 8011738:	9308      	str	r3, [sp, #32]
 801173a:	9c07      	ldr	r4, [sp, #28]
 801173c:	7823      	ldrb	r3, [r4, #0]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d002      	beq.n	8011748 <_vfiprintf_r+0xf0>
 8011742:	2b25      	cmp	r3, #37	; 0x25
 8011744:	d000      	beq.n	8011748 <_vfiprintf_r+0xf0>
 8011746:	e08d      	b.n	8011864 <_vfiprintf_r+0x20c>
 8011748:	9b07      	ldr	r3, [sp, #28]
 801174a:	1ae6      	subs	r6, r4, r3
 801174c:	429c      	cmp	r4, r3
 801174e:	d016      	beq.n	801177e <_vfiprintf_r+0x126>
 8011750:	602b      	str	r3, [r5, #0]
 8011752:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011754:	606e      	str	r6, [r5, #4]
 8011756:	199b      	adds	r3, r3, r6
 8011758:	9316      	str	r3, [sp, #88]	; 0x58
 801175a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801175c:	3508      	adds	r5, #8
 801175e:	3301      	adds	r3, #1
 8011760:	9315      	str	r3, [sp, #84]	; 0x54
 8011762:	2b07      	cmp	r3, #7
 8011764:	dd08      	ble.n	8011778 <_vfiprintf_r+0x120>
 8011766:	9903      	ldr	r1, [sp, #12]
 8011768:	9806      	ldr	r0, [sp, #24]
 801176a:	aa14      	add	r2, sp, #80	; 0x50
 801176c:	f7ff ff3f 	bl	80115ee <__sprint_r>
 8011770:	2800      	cmp	r0, #0
 8011772:	d000      	beq.n	8011776 <_vfiprintf_r+0x11e>
 8011774:	e3d9      	b.n	8011f2a <_vfiprintf_r+0x8d2>
 8011776:	ad17      	add	r5, sp, #92	; 0x5c
 8011778:	9b08      	ldr	r3, [sp, #32]
 801177a:	199b      	adds	r3, r3, r6
 801177c:	9308      	str	r3, [sp, #32]
 801177e:	7823      	ldrb	r3, [r4, #0]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d101      	bne.n	8011788 <_vfiprintf_r+0x130>
 8011784:	f000 fbf6 	bl	8011f74 <_vfiprintf_r+0x91c>
 8011788:	2200      	movs	r2, #0
 801178a:	a912      	add	r1, sp, #72	; 0x48
 801178c:	70ca      	strb	r2, [r1, #3]
 801178e:	2101      	movs	r1, #1
 8011790:	1c63      	adds	r3, r4, #1
 8011792:	0014      	movs	r4, r2
 8011794:	4249      	negs	r1, r1
 8011796:	9105      	str	r1, [sp, #20]
 8011798:	9209      	str	r2, [sp, #36]	; 0x24
 801179a:	1c5a      	adds	r2, r3, #1
 801179c:	781b      	ldrb	r3, [r3, #0]
 801179e:	9207      	str	r2, [sp, #28]
 80117a0:	0018      	movs	r0, r3
 80117a2:	3820      	subs	r0, #32
 80117a4:	285a      	cmp	r0, #90	; 0x5a
 80117a6:	d900      	bls.n	80117aa <_vfiprintf_r+0x152>
 80117a8:	e362      	b.n	8011e70 <_vfiprintf_r+0x818>
 80117aa:	f7ee fcbd 	bl	8000128 <__gnu_thumb1_case_uhi>
 80117ae:	0078      	.short	0x0078
 80117b0:	03610361 	.word	0x03610361
 80117b4:	03610081 	.word	0x03610081
 80117b8:	03610361 	.word	0x03610361
 80117bc:	0361005d 	.word	0x0361005d
 80117c0:	00830361 	.word	0x00830361
 80117c4:	0361008b 	.word	0x0361008b
 80117c8:	008f0089 	.word	0x008f0089
 80117cc:	00ad0361 	.word	0x00ad0361
 80117d0:	00af00af 	.word	0x00af00af
 80117d4:	00af00af 	.word	0x00af00af
 80117d8:	00af00af 	.word	0x00af00af
 80117dc:	00af00af 	.word	0x00af00af
 80117e0:	036100af 	.word	0x036100af
 80117e4:	03610361 	.word	0x03610361
 80117e8:	03610361 	.word	0x03610361
 80117ec:	03610361 	.word	0x03610361
 80117f0:	03610361 	.word	0x03610361
 80117f4:	00e600da 	.word	0x00e600da
 80117f8:	03610361 	.word	0x03610361
 80117fc:	03610361 	.word	0x03610361
 8011800:	03610361 	.word	0x03610361
 8011804:	03610361 	.word	0x03610361
 8011808:	03610361 	.word	0x03610361
 801180c:	03610143 	.word	0x03610143
 8011810:	03610361 	.word	0x03610361
 8011814:	03610182 	.word	0x03610182
 8011818:	0361027c 	.word	0x0361027c
 801181c:	02ae0361 	.word	0x02ae0361
 8011820:	03610361 	.word	0x03610361
 8011824:	03610361 	.word	0x03610361
 8011828:	03610361 	.word	0x03610361
 801182c:	03610361 	.word	0x03610361
 8011830:	03610361 	.word	0x03610361
 8011834:	00e800da 	.word	0x00e800da
 8011838:	03610361 	.word	0x03610361
 801183c:	00c30361 	.word	0x00c30361
 8011840:	00d600e8 	.word	0x00d600e8
 8011844:	00cf0361 	.word	0x00cf0361
 8011848:	01260361 	.word	0x01260361
 801184c:	01740145 	.word	0x01740145
 8011850:	036100d6 	.word	0x036100d6
 8011854:	007f0182 	.word	0x007f0182
 8011858:	0361027e 	.word	0x0361027e
 801185c:	02cd0361 	.word	0x02cd0361
 8011860:	007f0361 	.word	0x007f0361
 8011864:	3401      	adds	r4, #1
 8011866:	e769      	b.n	801173c <_vfiprintf_r+0xe4>
 8011868:	9806      	ldr	r0, [sp, #24]
 801186a:	f7fe facd 	bl	800fe08 <_localeconv_r>
 801186e:	6843      	ldr	r3, [r0, #4]
 8011870:	0018      	movs	r0, r3
 8011872:	930f      	str	r3, [sp, #60]	; 0x3c
 8011874:	f7ee fc46 	bl	8000104 <strlen>
 8011878:	900e      	str	r0, [sp, #56]	; 0x38
 801187a:	9806      	ldr	r0, [sp, #24]
 801187c:	f7fe fac4 	bl	800fe08 <_localeconv_r>
 8011880:	6883      	ldr	r3, [r0, #8]
 8011882:	930d      	str	r3, [sp, #52]	; 0x34
 8011884:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011886:	2b00      	cmp	r3, #0
 8011888:	d010      	beq.n	80118ac <_vfiprintf_r+0x254>
 801188a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801188c:	2b00      	cmp	r3, #0
 801188e:	d00d      	beq.n	80118ac <_vfiprintf_r+0x254>
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d00a      	beq.n	80118ac <_vfiprintf_r+0x254>
 8011896:	2380      	movs	r3, #128	; 0x80
 8011898:	00db      	lsls	r3, r3, #3
 801189a:	431c      	orrs	r4, r3
 801189c:	e006      	b.n	80118ac <_vfiprintf_r+0x254>
 801189e:	ab12      	add	r3, sp, #72	; 0x48
 80118a0:	78da      	ldrb	r2, [r3, #3]
 80118a2:	3303      	adds	r3, #3
 80118a4:	2a00      	cmp	r2, #0
 80118a6:	d101      	bne.n	80118ac <_vfiprintf_r+0x254>
 80118a8:	3220      	adds	r2, #32
 80118aa:	701a      	strb	r2, [r3, #0]
 80118ac:	9b07      	ldr	r3, [sp, #28]
 80118ae:	e774      	b.n	801179a <_vfiprintf_r+0x142>
 80118b0:	2301      	movs	r3, #1
 80118b2:	e7f2      	b.n	801189a <_vfiprintf_r+0x242>
 80118b4:	cf08      	ldmia	r7!, {r3}
 80118b6:	9309      	str	r3, [sp, #36]	; 0x24
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	daf7      	bge.n	80118ac <_vfiprintf_r+0x254>
 80118bc:	425b      	negs	r3, r3
 80118be:	9309      	str	r3, [sp, #36]	; 0x24
 80118c0:	2304      	movs	r3, #4
 80118c2:	e7ea      	b.n	801189a <_vfiprintf_r+0x242>
 80118c4:	222b      	movs	r2, #43	; 0x2b
 80118c6:	ab12      	add	r3, sp, #72	; 0x48
 80118c8:	70da      	strb	r2, [r3, #3]
 80118ca:	e7ef      	b.n	80118ac <_vfiprintf_r+0x254>
 80118cc:	9b07      	ldr	r3, [sp, #28]
 80118ce:	1c5a      	adds	r2, r3, #1
 80118d0:	781b      	ldrb	r3, [r3, #0]
 80118d2:	2b2a      	cmp	r3, #42	; 0x2a
 80118d4:	d00f      	beq.n	80118f6 <_vfiprintf_r+0x29e>
 80118d6:	2100      	movs	r1, #0
 80118d8:	9105      	str	r1, [sp, #20]
 80118da:	0019      	movs	r1, r3
 80118dc:	3930      	subs	r1, #48	; 0x30
 80118de:	9207      	str	r2, [sp, #28]
 80118e0:	2909      	cmp	r1, #9
 80118e2:	d900      	bls.n	80118e6 <_vfiprintf_r+0x28e>
 80118e4:	e75c      	b.n	80117a0 <_vfiprintf_r+0x148>
 80118e6:	200a      	movs	r0, #10
 80118e8:	9b05      	ldr	r3, [sp, #20]
 80118ea:	4343      	muls	r3, r0
 80118ec:	185b      	adds	r3, r3, r1
 80118ee:	9305      	str	r3, [sp, #20]
 80118f0:	7813      	ldrb	r3, [r2, #0]
 80118f2:	3201      	adds	r2, #1
 80118f4:	e7f1      	b.n	80118da <_vfiprintf_r+0x282>
 80118f6:	cf08      	ldmia	r7!, {r3}
 80118f8:	9305      	str	r3, [sp, #20]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	da02      	bge.n	8011904 <_vfiprintf_r+0x2ac>
 80118fe:	2301      	movs	r3, #1
 8011900:	425b      	negs	r3, r3
 8011902:	9305      	str	r3, [sp, #20]
 8011904:	9207      	str	r2, [sp, #28]
 8011906:	e7d1      	b.n	80118ac <_vfiprintf_r+0x254>
 8011908:	2380      	movs	r3, #128	; 0x80
 801190a:	e7c6      	b.n	801189a <_vfiprintf_r+0x242>
 801190c:	2100      	movs	r1, #0
 801190e:	9a07      	ldr	r2, [sp, #28]
 8011910:	9109      	str	r1, [sp, #36]	; 0x24
 8011912:	200a      	movs	r0, #10
 8011914:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011916:	3b30      	subs	r3, #48	; 0x30
 8011918:	4341      	muls	r1, r0
 801191a:	185b      	adds	r3, r3, r1
 801191c:	9309      	str	r3, [sp, #36]	; 0x24
 801191e:	0013      	movs	r3, r2
 8011920:	781b      	ldrb	r3, [r3, #0]
 8011922:	3201      	adds	r2, #1
 8011924:	0019      	movs	r1, r3
 8011926:	3930      	subs	r1, #48	; 0x30
 8011928:	9207      	str	r2, [sp, #28]
 801192a:	2909      	cmp	r1, #9
 801192c:	d9f1      	bls.n	8011912 <_vfiprintf_r+0x2ba>
 801192e:	e737      	b.n	80117a0 <_vfiprintf_r+0x148>
 8011930:	ffffdfff 	.word	0xffffdfff
 8011934:	9b07      	ldr	r3, [sp, #28]
 8011936:	781b      	ldrb	r3, [r3, #0]
 8011938:	2b68      	cmp	r3, #104	; 0x68
 801193a:	d105      	bne.n	8011948 <_vfiprintf_r+0x2f0>
 801193c:	9b07      	ldr	r3, [sp, #28]
 801193e:	3301      	adds	r3, #1
 8011940:	9307      	str	r3, [sp, #28]
 8011942:	2380      	movs	r3, #128	; 0x80
 8011944:	009b      	lsls	r3, r3, #2
 8011946:	e7a8      	b.n	801189a <_vfiprintf_r+0x242>
 8011948:	2340      	movs	r3, #64	; 0x40
 801194a:	e7a6      	b.n	801189a <_vfiprintf_r+0x242>
 801194c:	9b07      	ldr	r3, [sp, #28]
 801194e:	781b      	ldrb	r3, [r3, #0]
 8011950:	2b6c      	cmp	r3, #108	; 0x6c
 8011952:	d104      	bne.n	801195e <_vfiprintf_r+0x306>
 8011954:	9b07      	ldr	r3, [sp, #28]
 8011956:	3301      	adds	r3, #1
 8011958:	9307      	str	r3, [sp, #28]
 801195a:	2320      	movs	r3, #32
 801195c:	e79d      	b.n	801189a <_vfiprintf_r+0x242>
 801195e:	2310      	movs	r3, #16
 8011960:	e79b      	b.n	801189a <_vfiprintf_r+0x242>
 8011962:	003a      	movs	r2, r7
 8011964:	ca08      	ldmia	r2!, {r3}
 8011966:	ae27      	add	r6, sp, #156	; 0x9c
 8011968:	7033      	strb	r3, [r6, #0]
 801196a:	2300      	movs	r3, #0
 801196c:	9204      	str	r2, [sp, #16]
 801196e:	aa12      	add	r2, sp, #72	; 0x48
 8011970:	70d3      	strb	r3, [r2, #3]
 8011972:	2201      	movs	r2, #1
 8011974:	930b      	str	r3, [sp, #44]	; 0x2c
 8011976:	9205      	str	r2, [sp, #20]
 8011978:	e0b0      	b.n	8011adc <_vfiprintf_r+0x484>
 801197a:	2310      	movs	r3, #16
 801197c:	431c      	orrs	r4, r3
 801197e:	06a3      	lsls	r3, r4, #26
 8011980:	d52a      	bpl.n	80119d8 <_vfiprintf_r+0x380>
 8011982:	2307      	movs	r3, #7
 8011984:	3707      	adds	r7, #7
 8011986:	439f      	bics	r7, r3
 8011988:	0039      	movs	r1, r7
 801198a:	c90c      	ldmia	r1!, {r2, r3}
 801198c:	9200      	str	r2, [sp, #0]
 801198e:	9301      	str	r3, [sp, #4]
 8011990:	9104      	str	r1, [sp, #16]
 8011992:	9a01      	ldr	r2, [sp, #4]
 8011994:	2301      	movs	r3, #1
 8011996:	2a00      	cmp	r2, #0
 8011998:	da09      	bge.n	80119ae <_vfiprintf_r+0x356>
 801199a:	9e00      	ldr	r6, [sp, #0]
 801199c:	9f01      	ldr	r7, [sp, #4]
 801199e:	2200      	movs	r2, #0
 80119a0:	4271      	negs	r1, r6
 80119a2:	41ba      	sbcs	r2, r7
 80119a4:	9100      	str	r1, [sp, #0]
 80119a6:	9201      	str	r2, [sp, #4]
 80119a8:	212d      	movs	r1, #45	; 0x2d
 80119aa:	aa12      	add	r2, sp, #72	; 0x48
 80119ac:	70d1      	strb	r1, [r2, #3]
 80119ae:	9901      	ldr	r1, [sp, #4]
 80119b0:	9a00      	ldr	r2, [sp, #0]
 80119b2:	430a      	orrs	r2, r1
 80119b4:	9905      	ldr	r1, [sp, #20]
 80119b6:	3101      	adds	r1, #1
 80119b8:	d100      	bne.n	80119bc <_vfiprintf_r+0x364>
 80119ba:	e2e9      	b.n	8011f90 <_vfiprintf_r+0x938>
 80119bc:	2180      	movs	r1, #128	; 0x80
 80119be:	0027      	movs	r7, r4
 80119c0:	438f      	bics	r7, r1
 80119c2:	2a00      	cmp	r2, #0
 80119c4:	d000      	beq.n	80119c8 <_vfiprintf_r+0x370>
 80119c6:	e2e7      	b.n	8011f98 <_vfiprintf_r+0x940>
 80119c8:	9a05      	ldr	r2, [sp, #20]
 80119ca:	2a00      	cmp	r2, #0
 80119cc:	d100      	bne.n	80119d0 <_vfiprintf_r+0x378>
 80119ce:	e243      	b.n	8011e58 <_vfiprintf_r+0x800>
 80119d0:	2b01      	cmp	r3, #1
 80119d2:	d000      	beq.n	80119d6 <_vfiprintf_r+0x37e>
 80119d4:	e2e3      	b.n	8011f9e <_vfiprintf_r+0x946>
 80119d6:	e1e7      	b.n	8011da8 <_vfiprintf_r+0x750>
 80119d8:	003a      	movs	r2, r7
 80119da:	ca08      	ldmia	r2!, {r3}
 80119dc:	9204      	str	r2, [sp, #16]
 80119de:	06e2      	lsls	r2, r4, #27
 80119e0:	d503      	bpl.n	80119ea <_vfiprintf_r+0x392>
 80119e2:	9300      	str	r3, [sp, #0]
 80119e4:	17db      	asrs	r3, r3, #31
 80119e6:	9301      	str	r3, [sp, #4]
 80119e8:	e7d3      	b.n	8011992 <_vfiprintf_r+0x33a>
 80119ea:	0662      	lsls	r2, r4, #25
 80119ec:	d501      	bpl.n	80119f2 <_vfiprintf_r+0x39a>
 80119ee:	b21b      	sxth	r3, r3
 80119f0:	e7f7      	b.n	80119e2 <_vfiprintf_r+0x38a>
 80119f2:	05a2      	lsls	r2, r4, #22
 80119f4:	d5f5      	bpl.n	80119e2 <_vfiprintf_r+0x38a>
 80119f6:	b25b      	sxtb	r3, r3
 80119f8:	e7f3      	b.n	80119e2 <_vfiprintf_r+0x38a>
 80119fa:	1d3b      	adds	r3, r7, #4
 80119fc:	9304      	str	r3, [sp, #16]
 80119fe:	06a3      	lsls	r3, r4, #26
 8011a00:	d506      	bpl.n	8011a10 <_vfiprintf_r+0x3b8>
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	9a08      	ldr	r2, [sp, #32]
 8011a06:	601a      	str	r2, [r3, #0]
 8011a08:	17d2      	asrs	r2, r2, #31
 8011a0a:	605a      	str	r2, [r3, #4]
 8011a0c:	9f04      	ldr	r7, [sp, #16]
 8011a0e:	e694      	b.n	801173a <_vfiprintf_r+0xe2>
 8011a10:	06e3      	lsls	r3, r4, #27
 8011a12:	d503      	bpl.n	8011a1c <_vfiprintf_r+0x3c4>
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	9a08      	ldr	r2, [sp, #32]
 8011a18:	601a      	str	r2, [r3, #0]
 8011a1a:	e7f7      	b.n	8011a0c <_vfiprintf_r+0x3b4>
 8011a1c:	0663      	lsls	r3, r4, #25
 8011a1e:	d503      	bpl.n	8011a28 <_vfiprintf_r+0x3d0>
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	9a08      	ldr	r2, [sp, #32]
 8011a24:	801a      	strh	r2, [r3, #0]
 8011a26:	e7f1      	b.n	8011a0c <_vfiprintf_r+0x3b4>
 8011a28:	05a4      	lsls	r4, r4, #22
 8011a2a:	d5f3      	bpl.n	8011a14 <_vfiprintf_r+0x3bc>
 8011a2c:	683b      	ldr	r3, [r7, #0]
 8011a2e:	9a08      	ldr	r2, [sp, #32]
 8011a30:	701a      	strb	r2, [r3, #0]
 8011a32:	e7eb      	b.n	8011a0c <_vfiprintf_r+0x3b4>
 8011a34:	2310      	movs	r3, #16
 8011a36:	431c      	orrs	r4, r3
 8011a38:	2320      	movs	r3, #32
 8011a3a:	0020      	movs	r0, r4
 8011a3c:	4018      	ands	r0, r3
 8011a3e:	421c      	tst	r4, r3
 8011a40:	d00d      	beq.n	8011a5e <_vfiprintf_r+0x406>
 8011a42:	3b19      	subs	r3, #25
 8011a44:	3707      	adds	r7, #7
 8011a46:	439f      	bics	r7, r3
 8011a48:	0039      	movs	r1, r7
 8011a4a:	c90c      	ldmia	r1!, {r2, r3}
 8011a4c:	9200      	str	r2, [sp, #0]
 8011a4e:	9301      	str	r3, [sp, #4]
 8011a50:	9104      	str	r1, [sp, #16]
 8011a52:	4bcc      	ldr	r3, [pc, #816]	; (8011d84 <_vfiprintf_r+0x72c>)
 8011a54:	401c      	ands	r4, r3
 8011a56:	2300      	movs	r3, #0
 8011a58:	2100      	movs	r1, #0
 8011a5a:	aa12      	add	r2, sp, #72	; 0x48
 8011a5c:	e7a6      	b.n	80119ac <_vfiprintf_r+0x354>
 8011a5e:	003a      	movs	r2, r7
 8011a60:	ca08      	ldmia	r2!, {r3}
 8011a62:	0021      	movs	r1, r4
 8011a64:	9204      	str	r2, [sp, #16]
 8011a66:	2210      	movs	r2, #16
 8011a68:	4011      	ands	r1, r2
 8011a6a:	4214      	tst	r4, r2
 8011a6c:	d002      	beq.n	8011a74 <_vfiprintf_r+0x41c>
 8011a6e:	9300      	str	r3, [sp, #0]
 8011a70:	9001      	str	r0, [sp, #4]
 8011a72:	e7ee      	b.n	8011a52 <_vfiprintf_r+0x3fa>
 8011a74:	2240      	movs	r2, #64	; 0x40
 8011a76:	0020      	movs	r0, r4
 8011a78:	4010      	ands	r0, r2
 8011a7a:	4214      	tst	r4, r2
 8011a7c:	d003      	beq.n	8011a86 <_vfiprintf_r+0x42e>
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	9300      	str	r3, [sp, #0]
 8011a82:	9101      	str	r1, [sp, #4]
 8011a84:	e7e5      	b.n	8011a52 <_vfiprintf_r+0x3fa>
 8011a86:	2280      	movs	r2, #128	; 0x80
 8011a88:	0021      	movs	r1, r4
 8011a8a:	0092      	lsls	r2, r2, #2
 8011a8c:	4011      	ands	r1, r2
 8011a8e:	4214      	tst	r4, r2
 8011a90:	d0f6      	beq.n	8011a80 <_vfiprintf_r+0x428>
 8011a92:	b2db      	uxtb	r3, r3
 8011a94:	e7eb      	b.n	8011a6e <_vfiprintf_r+0x416>
 8011a96:	003b      	movs	r3, r7
 8011a98:	cb04      	ldmia	r3!, {r2}
 8011a9a:	49bb      	ldr	r1, [pc, #748]	; (8011d88 <_vfiprintf_r+0x730>)
 8011a9c:	9304      	str	r3, [sp, #16]
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	9200      	str	r2, [sp, #0]
 8011aa2:	aa13      	add	r2, sp, #76	; 0x4c
 8011aa4:	8011      	strh	r1, [r2, #0]
 8011aa6:	4ab9      	ldr	r2, [pc, #740]	; (8011d8c <_vfiprintf_r+0x734>)
 8011aa8:	9301      	str	r3, [sp, #4]
 8011aaa:	3302      	adds	r3, #2
 8011aac:	431c      	orrs	r4, r3
 8011aae:	920c      	str	r2, [sp, #48]	; 0x30
 8011ab0:	e7d2      	b.n	8011a58 <_vfiprintf_r+0x400>
 8011ab2:	003b      	movs	r3, r7
 8011ab4:	2700      	movs	r7, #0
 8011ab6:	cb40      	ldmia	r3!, {r6}
 8011ab8:	9304      	str	r3, [sp, #16]
 8011aba:	ab12      	add	r3, sp, #72	; 0x48
 8011abc:	70df      	strb	r7, [r3, #3]
 8011abe:	9b05      	ldr	r3, [sp, #20]
 8011ac0:	3301      	adds	r3, #1
 8011ac2:	d100      	bne.n	8011ac6 <_vfiprintf_r+0x46e>
 8011ac4:	e0ea      	b.n	8011c9c <_vfiprintf_r+0x644>
 8011ac6:	0039      	movs	r1, r7
 8011ac8:	0030      	movs	r0, r6
 8011aca:	9a05      	ldr	r2, [sp, #20]
 8011acc:	f7fe f9b4 	bl	800fe38 <memchr>
 8011ad0:	900b      	str	r0, [sp, #44]	; 0x2c
 8011ad2:	42b8      	cmp	r0, r7
 8011ad4:	d002      	beq.n	8011adc <_vfiprintf_r+0x484>
 8011ad6:	1b83      	subs	r3, r0, r6
 8011ad8:	9305      	str	r3, [sp, #20]
 8011ada:	970b      	str	r7, [sp, #44]	; 0x2c
 8011adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ade:	9a05      	ldr	r2, [sp, #20]
 8011ae0:	930a      	str	r3, [sp, #40]	; 0x28
 8011ae2:	4293      	cmp	r3, r2
 8011ae4:	da00      	bge.n	8011ae8 <_vfiprintf_r+0x490>
 8011ae6:	920a      	str	r2, [sp, #40]	; 0x28
 8011ae8:	ab12      	add	r3, sp, #72	; 0x48
 8011aea:	3303      	adds	r3, #3
 8011aec:	781b      	ldrb	r3, [r3, #0]
 8011aee:	1e5a      	subs	r2, r3, #1
 8011af0:	4193      	sbcs	r3, r2
 8011af2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011af4:	18d3      	adds	r3, r2, r3
 8011af6:	930a      	str	r3, [sp, #40]	; 0x28
 8011af8:	0022      	movs	r2, r4
 8011afa:	2302      	movs	r3, #2
 8011afc:	401a      	ands	r2, r3
 8011afe:	9210      	str	r2, [sp, #64]	; 0x40
 8011b00:	421c      	tst	r4, r3
 8011b02:	d002      	beq.n	8011b0a <_vfiprintf_r+0x4b2>
 8011b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b06:	3302      	adds	r3, #2
 8011b08:	930a      	str	r3, [sp, #40]	; 0x28
 8011b0a:	2384      	movs	r3, #132	; 0x84
 8011b0c:	0022      	movs	r2, r4
 8011b0e:	401a      	ands	r2, r3
 8011b10:	9211      	str	r2, [sp, #68]	; 0x44
 8011b12:	421c      	tst	r4, r3
 8011b14:	d11e      	bne.n	8011b54 <_vfiprintf_r+0x4fc>
 8011b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b1a:	1a9f      	subs	r7, r3, r2
 8011b1c:	2f00      	cmp	r7, #0
 8011b1e:	dd19      	ble.n	8011b54 <_vfiprintf_r+0x4fc>
 8011b20:	0029      	movs	r1, r5
 8011b22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b24:	489a      	ldr	r0, [pc, #616]	; (8011d90 <_vfiprintf_r+0x738>)
 8011b26:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011b28:	3301      	adds	r3, #1
 8011b2a:	3108      	adds	r1, #8
 8011b2c:	6028      	str	r0, [r5, #0]
 8011b2e:	2f10      	cmp	r7, #16
 8011b30:	dd00      	ble.n	8011b34 <_vfiprintf_r+0x4dc>
 8011b32:	e1a7      	b.n	8011e84 <_vfiprintf_r+0x82c>
 8011b34:	606f      	str	r7, [r5, #4]
 8011b36:	18bf      	adds	r7, r7, r2
 8011b38:	000d      	movs	r5, r1
 8011b3a:	9716      	str	r7, [sp, #88]	; 0x58
 8011b3c:	9315      	str	r3, [sp, #84]	; 0x54
 8011b3e:	2b07      	cmp	r3, #7
 8011b40:	dd08      	ble.n	8011b54 <_vfiprintf_r+0x4fc>
 8011b42:	9903      	ldr	r1, [sp, #12]
 8011b44:	9806      	ldr	r0, [sp, #24]
 8011b46:	aa14      	add	r2, sp, #80	; 0x50
 8011b48:	f7ff fd51 	bl	80115ee <__sprint_r>
 8011b4c:	2800      	cmp	r0, #0
 8011b4e:	d000      	beq.n	8011b52 <_vfiprintf_r+0x4fa>
 8011b50:	e1eb      	b.n	8011f2a <_vfiprintf_r+0x8d2>
 8011b52:	ad17      	add	r5, sp, #92	; 0x5c
 8011b54:	a912      	add	r1, sp, #72	; 0x48
 8011b56:	78c8      	ldrb	r0, [r1, #3]
 8011b58:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011b5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b5c:	3103      	adds	r1, #3
 8011b5e:	2800      	cmp	r0, #0
 8011b60:	d012      	beq.n	8011b88 <_vfiprintf_r+0x530>
 8011b62:	6029      	str	r1, [r5, #0]
 8011b64:	2101      	movs	r1, #1
 8011b66:	3301      	adds	r3, #1
 8011b68:	1852      	adds	r2, r2, r1
 8011b6a:	6069      	str	r1, [r5, #4]
 8011b6c:	9216      	str	r2, [sp, #88]	; 0x58
 8011b6e:	9315      	str	r3, [sp, #84]	; 0x54
 8011b70:	3508      	adds	r5, #8
 8011b72:	2b07      	cmp	r3, #7
 8011b74:	dd08      	ble.n	8011b88 <_vfiprintf_r+0x530>
 8011b76:	9903      	ldr	r1, [sp, #12]
 8011b78:	9806      	ldr	r0, [sp, #24]
 8011b7a:	aa14      	add	r2, sp, #80	; 0x50
 8011b7c:	f7ff fd37 	bl	80115ee <__sprint_r>
 8011b80:	2800      	cmp	r0, #0
 8011b82:	d000      	beq.n	8011b86 <_vfiprintf_r+0x52e>
 8011b84:	e1d1      	b.n	8011f2a <_vfiprintf_r+0x8d2>
 8011b86:	ad17      	add	r5, sp, #92	; 0x5c
 8011b88:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011b8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011b8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b8e:	2900      	cmp	r1, #0
 8011b90:	d013      	beq.n	8011bba <_vfiprintf_r+0x562>
 8011b92:	a913      	add	r1, sp, #76	; 0x4c
 8011b94:	6029      	str	r1, [r5, #0]
 8011b96:	2102      	movs	r1, #2
 8011b98:	3301      	adds	r3, #1
 8011b9a:	1852      	adds	r2, r2, r1
 8011b9c:	6069      	str	r1, [r5, #4]
 8011b9e:	9216      	str	r2, [sp, #88]	; 0x58
 8011ba0:	9315      	str	r3, [sp, #84]	; 0x54
 8011ba2:	3508      	adds	r5, #8
 8011ba4:	2b07      	cmp	r3, #7
 8011ba6:	dd08      	ble.n	8011bba <_vfiprintf_r+0x562>
 8011ba8:	9903      	ldr	r1, [sp, #12]
 8011baa:	9806      	ldr	r0, [sp, #24]
 8011bac:	aa14      	add	r2, sp, #80	; 0x50
 8011bae:	f7ff fd1e 	bl	80115ee <__sprint_r>
 8011bb2:	2800      	cmp	r0, #0
 8011bb4:	d000      	beq.n	8011bb8 <_vfiprintf_r+0x560>
 8011bb6:	e1b8      	b.n	8011f2a <_vfiprintf_r+0x8d2>
 8011bb8:	ad17      	add	r5, sp, #92	; 0x5c
 8011bba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011bbc:	2b80      	cmp	r3, #128	; 0x80
 8011bbe:	d11e      	bne.n	8011bfe <_vfiprintf_r+0x5a6>
 8011bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011bc4:	1a9f      	subs	r7, r3, r2
 8011bc6:	2f00      	cmp	r7, #0
 8011bc8:	dd19      	ble.n	8011bfe <_vfiprintf_r+0x5a6>
 8011bca:	0029      	movs	r1, r5
 8011bcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011bce:	4871      	ldr	r0, [pc, #452]	; (8011d94 <_vfiprintf_r+0x73c>)
 8011bd0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011bd2:	3301      	adds	r3, #1
 8011bd4:	3108      	adds	r1, #8
 8011bd6:	6028      	str	r0, [r5, #0]
 8011bd8:	2f10      	cmp	r7, #16
 8011bda:	dd00      	ble.n	8011bde <_vfiprintf_r+0x586>
 8011bdc:	e164      	b.n	8011ea8 <_vfiprintf_r+0x850>
 8011bde:	606f      	str	r7, [r5, #4]
 8011be0:	18bf      	adds	r7, r7, r2
 8011be2:	000d      	movs	r5, r1
 8011be4:	9716      	str	r7, [sp, #88]	; 0x58
 8011be6:	9315      	str	r3, [sp, #84]	; 0x54
 8011be8:	2b07      	cmp	r3, #7
 8011bea:	dd08      	ble.n	8011bfe <_vfiprintf_r+0x5a6>
 8011bec:	9903      	ldr	r1, [sp, #12]
 8011bee:	9806      	ldr	r0, [sp, #24]
 8011bf0:	aa14      	add	r2, sp, #80	; 0x50
 8011bf2:	f7ff fcfc 	bl	80115ee <__sprint_r>
 8011bf6:	2800      	cmp	r0, #0
 8011bf8:	d000      	beq.n	8011bfc <_vfiprintf_r+0x5a4>
 8011bfa:	e196      	b.n	8011f2a <_vfiprintf_r+0x8d2>
 8011bfc:	ad17      	add	r5, sp, #92	; 0x5c
 8011bfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c00:	9a05      	ldr	r2, [sp, #20]
 8011c02:	1a9f      	subs	r7, r3, r2
 8011c04:	2f00      	cmp	r7, #0
 8011c06:	dd19      	ble.n	8011c3c <_vfiprintf_r+0x5e4>
 8011c08:	0029      	movs	r1, r5
 8011c0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c0c:	4861      	ldr	r0, [pc, #388]	; (8011d94 <_vfiprintf_r+0x73c>)
 8011c0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011c10:	3301      	adds	r3, #1
 8011c12:	3108      	adds	r1, #8
 8011c14:	6028      	str	r0, [r5, #0]
 8011c16:	2f10      	cmp	r7, #16
 8011c18:	dd00      	ble.n	8011c1c <_vfiprintf_r+0x5c4>
 8011c1a:	e157      	b.n	8011ecc <_vfiprintf_r+0x874>
 8011c1c:	606f      	str	r7, [r5, #4]
 8011c1e:	18bf      	adds	r7, r7, r2
 8011c20:	000d      	movs	r5, r1
 8011c22:	9716      	str	r7, [sp, #88]	; 0x58
 8011c24:	9315      	str	r3, [sp, #84]	; 0x54
 8011c26:	2b07      	cmp	r3, #7
 8011c28:	dd08      	ble.n	8011c3c <_vfiprintf_r+0x5e4>
 8011c2a:	9903      	ldr	r1, [sp, #12]
 8011c2c:	9806      	ldr	r0, [sp, #24]
 8011c2e:	aa14      	add	r2, sp, #80	; 0x50
 8011c30:	f7ff fcdd 	bl	80115ee <__sprint_r>
 8011c34:	2800      	cmp	r0, #0
 8011c36:	d000      	beq.n	8011c3a <_vfiprintf_r+0x5e2>
 8011c38:	e177      	b.n	8011f2a <_vfiprintf_r+0x8d2>
 8011c3a:	ad17      	add	r5, sp, #92	; 0x5c
 8011c3c:	9b05      	ldr	r3, [sp, #20]
 8011c3e:	9a05      	ldr	r2, [sp, #20]
 8011c40:	606b      	str	r3, [r5, #4]
 8011c42:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011c44:	602e      	str	r6, [r5, #0]
 8011c46:	189b      	adds	r3, r3, r2
 8011c48:	9316      	str	r3, [sp, #88]	; 0x58
 8011c4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c4c:	3508      	adds	r5, #8
 8011c4e:	3301      	adds	r3, #1
 8011c50:	9315      	str	r3, [sp, #84]	; 0x54
 8011c52:	2b07      	cmp	r3, #7
 8011c54:	dd08      	ble.n	8011c68 <_vfiprintf_r+0x610>
 8011c56:	9903      	ldr	r1, [sp, #12]
 8011c58:	9806      	ldr	r0, [sp, #24]
 8011c5a:	aa14      	add	r2, sp, #80	; 0x50
 8011c5c:	f7ff fcc7 	bl	80115ee <__sprint_r>
 8011c60:	2800      	cmp	r0, #0
 8011c62:	d000      	beq.n	8011c66 <_vfiprintf_r+0x60e>
 8011c64:	e161      	b.n	8011f2a <_vfiprintf_r+0x8d2>
 8011c66:	ad17      	add	r5, sp, #92	; 0x5c
 8011c68:	0764      	lsls	r4, r4, #29
 8011c6a:	d500      	bpl.n	8011c6e <_vfiprintf_r+0x616>
 8011c6c:	e140      	b.n	8011ef0 <_vfiprintf_r+0x898>
 8011c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c72:	4293      	cmp	r3, r2
 8011c74:	da00      	bge.n	8011c78 <_vfiprintf_r+0x620>
 8011c76:	0013      	movs	r3, r2
 8011c78:	9a08      	ldr	r2, [sp, #32]
 8011c7a:	18d3      	adds	r3, r2, r3
 8011c7c:	9308      	str	r3, [sp, #32]
 8011c7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d007      	beq.n	8011c94 <_vfiprintf_r+0x63c>
 8011c84:	9903      	ldr	r1, [sp, #12]
 8011c86:	9806      	ldr	r0, [sp, #24]
 8011c88:	aa14      	add	r2, sp, #80	; 0x50
 8011c8a:	f7ff fcb0 	bl	80115ee <__sprint_r>
 8011c8e:	2800      	cmp	r0, #0
 8011c90:	d000      	beq.n	8011c94 <_vfiprintf_r+0x63c>
 8011c92:	e14a      	b.n	8011f2a <_vfiprintf_r+0x8d2>
 8011c94:	2300      	movs	r3, #0
 8011c96:	ad17      	add	r5, sp, #92	; 0x5c
 8011c98:	9315      	str	r3, [sp, #84]	; 0x54
 8011c9a:	e6b7      	b.n	8011a0c <_vfiprintf_r+0x3b4>
 8011c9c:	0030      	movs	r0, r6
 8011c9e:	f7ee fa31 	bl	8000104 <strlen>
 8011ca2:	9005      	str	r0, [sp, #20]
 8011ca4:	e719      	b.n	8011ada <_vfiprintf_r+0x482>
 8011ca6:	2310      	movs	r3, #16
 8011ca8:	431c      	orrs	r4, r3
 8011caa:	2320      	movs	r3, #32
 8011cac:	0020      	movs	r0, r4
 8011cae:	4018      	ands	r0, r3
 8011cb0:	421c      	tst	r4, r3
 8011cb2:	d009      	beq.n	8011cc8 <_vfiprintf_r+0x670>
 8011cb4:	3b19      	subs	r3, #25
 8011cb6:	3707      	adds	r7, #7
 8011cb8:	439f      	bics	r7, r3
 8011cba:	0039      	movs	r1, r7
 8011cbc:	c90c      	ldmia	r1!, {r2, r3}
 8011cbe:	9200      	str	r2, [sp, #0]
 8011cc0:	9301      	str	r3, [sp, #4]
 8011cc2:	9104      	str	r1, [sp, #16]
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	e6c7      	b.n	8011a58 <_vfiprintf_r+0x400>
 8011cc8:	003b      	movs	r3, r7
 8011cca:	cb04      	ldmia	r3!, {r2}
 8011ccc:	0021      	movs	r1, r4
 8011cce:	9304      	str	r3, [sp, #16]
 8011cd0:	2310      	movs	r3, #16
 8011cd2:	4019      	ands	r1, r3
 8011cd4:	421c      	tst	r4, r3
 8011cd6:	d003      	beq.n	8011ce0 <_vfiprintf_r+0x688>
 8011cd8:	9200      	str	r2, [sp, #0]
 8011cda:	9001      	str	r0, [sp, #4]
 8011cdc:	3b0f      	subs	r3, #15
 8011cde:	e6bb      	b.n	8011a58 <_vfiprintf_r+0x400>
 8011ce0:	2340      	movs	r3, #64	; 0x40
 8011ce2:	0020      	movs	r0, r4
 8011ce4:	4018      	ands	r0, r3
 8011ce6:	421c      	tst	r4, r3
 8011ce8:	d003      	beq.n	8011cf2 <_vfiprintf_r+0x69a>
 8011cea:	b293      	uxth	r3, r2
 8011cec:	9300      	str	r3, [sp, #0]
 8011cee:	9101      	str	r1, [sp, #4]
 8011cf0:	e7e8      	b.n	8011cc4 <_vfiprintf_r+0x66c>
 8011cf2:	2380      	movs	r3, #128	; 0x80
 8011cf4:	0021      	movs	r1, r4
 8011cf6:	009b      	lsls	r3, r3, #2
 8011cf8:	4019      	ands	r1, r3
 8011cfa:	421c      	tst	r4, r3
 8011cfc:	d003      	beq.n	8011d06 <_vfiprintf_r+0x6ae>
 8011cfe:	b2d3      	uxtb	r3, r2
 8011d00:	9300      	str	r3, [sp, #0]
 8011d02:	9001      	str	r0, [sp, #4]
 8011d04:	e7de      	b.n	8011cc4 <_vfiprintf_r+0x66c>
 8011d06:	9200      	str	r2, [sp, #0]
 8011d08:	e7f1      	b.n	8011cee <_vfiprintf_r+0x696>
 8011d0a:	4a23      	ldr	r2, [pc, #140]	; (8011d98 <_vfiprintf_r+0x740>)
 8011d0c:	0020      	movs	r0, r4
 8011d0e:	920c      	str	r2, [sp, #48]	; 0x30
 8011d10:	2220      	movs	r2, #32
 8011d12:	4010      	ands	r0, r2
 8011d14:	4214      	tst	r4, r2
 8011d16:	d019      	beq.n	8011d4c <_vfiprintf_r+0x6f4>
 8011d18:	3a19      	subs	r2, #25
 8011d1a:	3707      	adds	r7, #7
 8011d1c:	4397      	bics	r7, r2
 8011d1e:	0038      	movs	r0, r7
 8011d20:	c806      	ldmia	r0!, {r1, r2}
 8011d22:	9100      	str	r1, [sp, #0]
 8011d24:	9201      	str	r2, [sp, #4]
 8011d26:	9004      	str	r0, [sp, #16]
 8011d28:	07e2      	lsls	r2, r4, #31
 8011d2a:	d509      	bpl.n	8011d40 <_vfiprintf_r+0x6e8>
 8011d2c:	9a00      	ldr	r2, [sp, #0]
 8011d2e:	9901      	ldr	r1, [sp, #4]
 8011d30:	430a      	orrs	r2, r1
 8011d32:	d005      	beq.n	8011d40 <_vfiprintf_r+0x6e8>
 8011d34:	aa13      	add	r2, sp, #76	; 0x4c
 8011d36:	2130      	movs	r1, #48	; 0x30
 8011d38:	7053      	strb	r3, [r2, #1]
 8011d3a:	2302      	movs	r3, #2
 8011d3c:	7011      	strb	r1, [r2, #0]
 8011d3e:	431c      	orrs	r4, r3
 8011d40:	4b10      	ldr	r3, [pc, #64]	; (8011d84 <_vfiprintf_r+0x72c>)
 8011d42:	401c      	ands	r4, r3
 8011d44:	2302      	movs	r3, #2
 8011d46:	e687      	b.n	8011a58 <_vfiprintf_r+0x400>
 8011d48:	4a10      	ldr	r2, [pc, #64]	; (8011d8c <_vfiprintf_r+0x734>)
 8011d4a:	e7df      	b.n	8011d0c <_vfiprintf_r+0x6b4>
 8011d4c:	0039      	movs	r1, r7
 8011d4e:	c904      	ldmia	r1!, {r2}
 8011d50:	0026      	movs	r6, r4
 8011d52:	9104      	str	r1, [sp, #16]
 8011d54:	2110      	movs	r1, #16
 8011d56:	400e      	ands	r6, r1
 8011d58:	420c      	tst	r4, r1
 8011d5a:	d002      	beq.n	8011d62 <_vfiprintf_r+0x70a>
 8011d5c:	9200      	str	r2, [sp, #0]
 8011d5e:	9001      	str	r0, [sp, #4]
 8011d60:	e7e2      	b.n	8011d28 <_vfiprintf_r+0x6d0>
 8011d62:	2140      	movs	r1, #64	; 0x40
 8011d64:	0020      	movs	r0, r4
 8011d66:	4008      	ands	r0, r1
 8011d68:	420c      	tst	r4, r1
 8011d6a:	d003      	beq.n	8011d74 <_vfiprintf_r+0x71c>
 8011d6c:	b292      	uxth	r2, r2
 8011d6e:	9200      	str	r2, [sp, #0]
 8011d70:	9601      	str	r6, [sp, #4]
 8011d72:	e7d9      	b.n	8011d28 <_vfiprintf_r+0x6d0>
 8011d74:	2180      	movs	r1, #128	; 0x80
 8011d76:	0026      	movs	r6, r4
 8011d78:	0089      	lsls	r1, r1, #2
 8011d7a:	400e      	ands	r6, r1
 8011d7c:	420c      	tst	r4, r1
 8011d7e:	d0f6      	beq.n	8011d6e <_vfiprintf_r+0x716>
 8011d80:	b2d2      	uxtb	r2, r2
 8011d82:	e7eb      	b.n	8011d5c <_vfiprintf_r+0x704>
 8011d84:	fffffbff 	.word	0xfffffbff
 8011d88:	00007830 	.word	0x00007830
 8011d8c:	080147ec 	.word	0x080147ec
 8011d90:	080148f9 	.word	0x080148f9
 8011d94:	08014909 	.word	0x08014909
 8011d98:	080147fd 	.word	0x080147fd
 8011d9c:	9b01      	ldr	r3, [sp, #4]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d109      	bne.n	8011db6 <_vfiprintf_r+0x75e>
 8011da2:	9b00      	ldr	r3, [sp, #0]
 8011da4:	2b09      	cmp	r3, #9
 8011da6:	d806      	bhi.n	8011db6 <_vfiprintf_r+0x75e>
 8011da8:	26b7      	movs	r6, #183	; 0xb7
 8011daa:	ab12      	add	r3, sp, #72	; 0x48
 8011dac:	18f6      	adds	r6, r6, r3
 8011dae:	9b00      	ldr	r3, [sp, #0]
 8011db0:	3330      	adds	r3, #48	; 0x30
 8011db2:	7033      	strb	r3, [r6, #0]
 8011db4:	e115      	b.n	8011fe2 <_vfiprintf_r+0x98a>
 8011db6:	2380      	movs	r3, #128	; 0x80
 8011db8:	2400      	movs	r4, #0
 8011dba:	00db      	lsls	r3, r3, #3
 8011dbc:	403b      	ands	r3, r7
 8011dbe:	ae40      	add	r6, sp, #256	; 0x100
 8011dc0:	930a      	str	r3, [sp, #40]	; 0x28
 8011dc2:	220a      	movs	r2, #10
 8011dc4:	9800      	ldr	r0, [sp, #0]
 8011dc6:	9901      	ldr	r1, [sp, #4]
 8011dc8:	2300      	movs	r3, #0
 8011dca:	f7ee fb6b 	bl	80004a4 <__aeabi_uldivmod>
 8011dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dd0:	3e01      	subs	r6, #1
 8011dd2:	3230      	adds	r2, #48	; 0x30
 8011dd4:	900b      	str	r0, [sp, #44]	; 0x2c
 8011dd6:	9110      	str	r1, [sp, #64]	; 0x40
 8011dd8:	7032      	strb	r2, [r6, #0]
 8011dda:	3401      	adds	r4, #1
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d01a      	beq.n	8011e16 <_vfiprintf_r+0x7be>
 8011de0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011de2:	781b      	ldrb	r3, [r3, #0]
 8011de4:	42a3      	cmp	r3, r4
 8011de6:	d116      	bne.n	8011e16 <_vfiprintf_r+0x7be>
 8011de8:	2cff      	cmp	r4, #255	; 0xff
 8011dea:	d014      	beq.n	8011e16 <_vfiprintf_r+0x7be>
 8011dec:	9b01      	ldr	r3, [sp, #4]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d102      	bne.n	8011df8 <_vfiprintf_r+0x7a0>
 8011df2:	9b00      	ldr	r3, [sp, #0]
 8011df4:	2b09      	cmp	r3, #9
 8011df6:	d90e      	bls.n	8011e16 <_vfiprintf_r+0x7be>
 8011df8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011dfa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011dfc:	1af6      	subs	r6, r6, r3
 8011dfe:	001a      	movs	r2, r3
 8011e00:	0030      	movs	r0, r6
 8011e02:	f7fa f832 	bl	800be6a <strncpy>
 8011e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e08:	2400      	movs	r4, #0
 8011e0a:	785b      	ldrb	r3, [r3, #1]
 8011e0c:	1e5a      	subs	r2, r3, #1
 8011e0e:	4193      	sbcs	r3, r2
 8011e10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011e12:	18d3      	adds	r3, r2, r3
 8011e14:	930d      	str	r3, [sp, #52]	; 0x34
 8011e16:	9b01      	ldr	r3, [sp, #4]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d103      	bne.n	8011e24 <_vfiprintf_r+0x7cc>
 8011e1c:	9b00      	ldr	r3, [sp, #0]
 8011e1e:	2b09      	cmp	r3, #9
 8011e20:	d800      	bhi.n	8011e24 <_vfiprintf_r+0x7cc>
 8011e22:	e0de      	b.n	8011fe2 <_vfiprintf_r+0x98a>
 8011e24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e26:	9300      	str	r3, [sp, #0]
 8011e28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011e2a:	9301      	str	r3, [sp, #4]
 8011e2c:	e7c9      	b.n	8011dc2 <_vfiprintf_r+0x76a>
 8011e2e:	200f      	movs	r0, #15
 8011e30:	9b00      	ldr	r3, [sp, #0]
 8011e32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e34:	4003      	ands	r3, r0
 8011e36:	5cd3      	ldrb	r3, [r2, r3]
 8011e38:	3e01      	subs	r6, #1
 8011e3a:	7033      	strb	r3, [r6, #0]
 8011e3c:	9b01      	ldr	r3, [sp, #4]
 8011e3e:	0719      	lsls	r1, r3, #28
 8011e40:	9b00      	ldr	r3, [sp, #0]
 8011e42:	091a      	lsrs	r2, r3, #4
 8011e44:	9b01      	ldr	r3, [sp, #4]
 8011e46:	4311      	orrs	r1, r2
 8011e48:	091b      	lsrs	r3, r3, #4
 8011e4a:	9301      	str	r3, [sp, #4]
 8011e4c:	000b      	movs	r3, r1
 8011e4e:	9a01      	ldr	r2, [sp, #4]
 8011e50:	9100      	str	r1, [sp, #0]
 8011e52:	4313      	orrs	r3, r2
 8011e54:	d1ec      	bne.n	8011e30 <_vfiprintf_r+0x7d8>
 8011e56:	e0c4      	b.n	8011fe2 <_vfiprintf_r+0x98a>
 8011e58:	ae40      	add	r6, sp, #256	; 0x100
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d000      	beq.n	8011e60 <_vfiprintf_r+0x808>
 8011e5e:	e0c0      	b.n	8011fe2 <_vfiprintf_r+0x98a>
 8011e60:	07e4      	lsls	r4, r4, #31
 8011e62:	d400      	bmi.n	8011e66 <_vfiprintf_r+0x80e>
 8011e64:	e0bd      	b.n	8011fe2 <_vfiprintf_r+0x98a>
 8011e66:	26b7      	movs	r6, #183	; 0xb7
 8011e68:	ab12      	add	r3, sp, #72	; 0x48
 8011e6a:	18f6      	adds	r6, r6, r3
 8011e6c:	2330      	movs	r3, #48	; 0x30
 8011e6e:	e7a0      	b.n	8011db2 <_vfiprintf_r+0x75a>
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d100      	bne.n	8011e76 <_vfiprintf_r+0x81e>
 8011e74:	e07e      	b.n	8011f74 <_vfiprintf_r+0x91c>
 8011e76:	ae27      	add	r6, sp, #156	; 0x9c
 8011e78:	7033      	strb	r3, [r6, #0]
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	aa12      	add	r2, sp, #72	; 0x48
 8011e7e:	70d3      	strb	r3, [r2, #3]
 8011e80:	9704      	str	r7, [sp, #16]
 8011e82:	e576      	b.n	8011972 <_vfiprintf_r+0x31a>
 8011e84:	2010      	movs	r0, #16
 8011e86:	1812      	adds	r2, r2, r0
 8011e88:	6068      	str	r0, [r5, #4]
 8011e8a:	9216      	str	r2, [sp, #88]	; 0x58
 8011e8c:	9315      	str	r3, [sp, #84]	; 0x54
 8011e8e:	2b07      	cmp	r3, #7
 8011e90:	dd07      	ble.n	8011ea2 <_vfiprintf_r+0x84a>
 8011e92:	9903      	ldr	r1, [sp, #12]
 8011e94:	9806      	ldr	r0, [sp, #24]
 8011e96:	aa14      	add	r2, sp, #80	; 0x50
 8011e98:	f7ff fba9 	bl	80115ee <__sprint_r>
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	d144      	bne.n	8011f2a <_vfiprintf_r+0x8d2>
 8011ea0:	a917      	add	r1, sp, #92	; 0x5c
 8011ea2:	000d      	movs	r5, r1
 8011ea4:	3f10      	subs	r7, #16
 8011ea6:	e63b      	b.n	8011b20 <_vfiprintf_r+0x4c8>
 8011ea8:	2010      	movs	r0, #16
 8011eaa:	1812      	adds	r2, r2, r0
 8011eac:	6068      	str	r0, [r5, #4]
 8011eae:	9216      	str	r2, [sp, #88]	; 0x58
 8011eb0:	9315      	str	r3, [sp, #84]	; 0x54
 8011eb2:	2b07      	cmp	r3, #7
 8011eb4:	dd07      	ble.n	8011ec6 <_vfiprintf_r+0x86e>
 8011eb6:	9903      	ldr	r1, [sp, #12]
 8011eb8:	9806      	ldr	r0, [sp, #24]
 8011eba:	aa14      	add	r2, sp, #80	; 0x50
 8011ebc:	f7ff fb97 	bl	80115ee <__sprint_r>
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	d132      	bne.n	8011f2a <_vfiprintf_r+0x8d2>
 8011ec4:	a917      	add	r1, sp, #92	; 0x5c
 8011ec6:	000d      	movs	r5, r1
 8011ec8:	3f10      	subs	r7, #16
 8011eca:	e67e      	b.n	8011bca <_vfiprintf_r+0x572>
 8011ecc:	2010      	movs	r0, #16
 8011ece:	1812      	adds	r2, r2, r0
 8011ed0:	6068      	str	r0, [r5, #4]
 8011ed2:	9216      	str	r2, [sp, #88]	; 0x58
 8011ed4:	9315      	str	r3, [sp, #84]	; 0x54
 8011ed6:	2b07      	cmp	r3, #7
 8011ed8:	dd07      	ble.n	8011eea <_vfiprintf_r+0x892>
 8011eda:	9903      	ldr	r1, [sp, #12]
 8011edc:	9806      	ldr	r0, [sp, #24]
 8011ede:	aa14      	add	r2, sp, #80	; 0x50
 8011ee0:	f7ff fb85 	bl	80115ee <__sprint_r>
 8011ee4:	2800      	cmp	r0, #0
 8011ee6:	d120      	bne.n	8011f2a <_vfiprintf_r+0x8d2>
 8011ee8:	a917      	add	r1, sp, #92	; 0x5c
 8011eea:	000d      	movs	r5, r1
 8011eec:	3f10      	subs	r7, #16
 8011eee:	e68b      	b.n	8011c08 <_vfiprintf_r+0x5b0>
 8011ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ef4:	2610      	movs	r6, #16
 8011ef6:	1a9c      	subs	r4, r3, r2
 8011ef8:	2c00      	cmp	r4, #0
 8011efa:	dc00      	bgt.n	8011efe <_vfiprintf_r+0x8a6>
 8011efc:	e6b7      	b.n	8011c6e <_vfiprintf_r+0x616>
 8011efe:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011f00:	4a3b      	ldr	r2, [pc, #236]	; (8011ff0 <_vfiprintf_r+0x998>)
 8011f02:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011f04:	3101      	adds	r1, #1
 8011f06:	602a      	str	r2, [r5, #0]
 8011f08:	2c10      	cmp	r4, #16
 8011f0a:	dc22      	bgt.n	8011f52 <_vfiprintf_r+0x8fa>
 8011f0c:	606c      	str	r4, [r5, #4]
 8011f0e:	18e4      	adds	r4, r4, r3
 8011f10:	9416      	str	r4, [sp, #88]	; 0x58
 8011f12:	9115      	str	r1, [sp, #84]	; 0x54
 8011f14:	2907      	cmp	r1, #7
 8011f16:	dc00      	bgt.n	8011f1a <_vfiprintf_r+0x8c2>
 8011f18:	e6a9      	b.n	8011c6e <_vfiprintf_r+0x616>
 8011f1a:	9903      	ldr	r1, [sp, #12]
 8011f1c:	9806      	ldr	r0, [sp, #24]
 8011f1e:	aa14      	add	r2, sp, #80	; 0x50
 8011f20:	f7ff fb65 	bl	80115ee <__sprint_r>
 8011f24:	2800      	cmp	r0, #0
 8011f26:	d100      	bne.n	8011f2a <_vfiprintf_r+0x8d2>
 8011f28:	e6a1      	b.n	8011c6e <_vfiprintf_r+0x616>
 8011f2a:	9b03      	ldr	r3, [sp, #12]
 8011f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f2e:	07db      	lsls	r3, r3, #31
 8011f30:	d407      	bmi.n	8011f42 <_vfiprintf_r+0x8ea>
 8011f32:	9b03      	ldr	r3, [sp, #12]
 8011f34:	899b      	ldrh	r3, [r3, #12]
 8011f36:	059b      	lsls	r3, r3, #22
 8011f38:	d403      	bmi.n	8011f42 <_vfiprintf_r+0x8ea>
 8011f3a:	9b03      	ldr	r3, [sp, #12]
 8011f3c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011f3e:	f7fa f88e 	bl	800c05e <__retarget_lock_release_recursive>
 8011f42:	9b03      	ldr	r3, [sp, #12]
 8011f44:	899b      	ldrh	r3, [r3, #12]
 8011f46:	065b      	lsls	r3, r3, #25
 8011f48:	d401      	bmi.n	8011f4e <_vfiprintf_r+0x8f6>
 8011f4a:	f7ff fbc3 	bl	80116d4 <_vfiprintf_r+0x7c>
 8011f4e:	f7ff fbbe 	bl	80116ce <_vfiprintf_r+0x76>
 8011f52:	3310      	adds	r3, #16
 8011f54:	606e      	str	r6, [r5, #4]
 8011f56:	9316      	str	r3, [sp, #88]	; 0x58
 8011f58:	9115      	str	r1, [sp, #84]	; 0x54
 8011f5a:	3508      	adds	r5, #8
 8011f5c:	2907      	cmp	r1, #7
 8011f5e:	dd07      	ble.n	8011f70 <_vfiprintf_r+0x918>
 8011f60:	9903      	ldr	r1, [sp, #12]
 8011f62:	9806      	ldr	r0, [sp, #24]
 8011f64:	aa14      	add	r2, sp, #80	; 0x50
 8011f66:	f7ff fb42 	bl	80115ee <__sprint_r>
 8011f6a:	2800      	cmp	r0, #0
 8011f6c:	d1dd      	bne.n	8011f2a <_vfiprintf_r+0x8d2>
 8011f6e:	ad17      	add	r5, sp, #92	; 0x5c
 8011f70:	3c10      	subs	r4, #16
 8011f72:	e7c4      	b.n	8011efe <_vfiprintf_r+0x8a6>
 8011f74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d102      	bne.n	8011f80 <_vfiprintf_r+0x928>
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	9315      	str	r3, [sp, #84]	; 0x54
 8011f7e:	e7d4      	b.n	8011f2a <_vfiprintf_r+0x8d2>
 8011f80:	9903      	ldr	r1, [sp, #12]
 8011f82:	9806      	ldr	r0, [sp, #24]
 8011f84:	aa14      	add	r2, sp, #80	; 0x50
 8011f86:	f7ff fb32 	bl	80115ee <__sprint_r>
 8011f8a:	2800      	cmp	r0, #0
 8011f8c:	d0f5      	beq.n	8011f7a <_vfiprintf_r+0x922>
 8011f8e:	e7cc      	b.n	8011f2a <_vfiprintf_r+0x8d2>
 8011f90:	0027      	movs	r7, r4
 8011f92:	2a00      	cmp	r2, #0
 8011f94:	d100      	bne.n	8011f98 <_vfiprintf_r+0x940>
 8011f96:	e51b      	b.n	80119d0 <_vfiprintf_r+0x378>
 8011f98:	2b01      	cmp	r3, #1
 8011f9a:	d100      	bne.n	8011f9e <_vfiprintf_r+0x946>
 8011f9c:	e6fe      	b.n	8011d9c <_vfiprintf_r+0x744>
 8011f9e:	ae40      	add	r6, sp, #256	; 0x100
 8011fa0:	2b02      	cmp	r3, #2
 8011fa2:	d100      	bne.n	8011fa6 <_vfiprintf_r+0x94e>
 8011fa4:	e743      	b.n	8011e2e <_vfiprintf_r+0x7d6>
 8011fa6:	2307      	movs	r3, #7
 8011fa8:	469c      	mov	ip, r3
 8011faa:	4663      	mov	r3, ip
 8011fac:	9900      	ldr	r1, [sp, #0]
 8011fae:	0032      	movs	r2, r6
 8011fb0:	400b      	ands	r3, r1
 8011fb2:	9901      	ldr	r1, [sp, #4]
 8011fb4:	3e01      	subs	r6, #1
 8011fb6:	074c      	lsls	r4, r1, #29
 8011fb8:	9900      	ldr	r1, [sp, #0]
 8011fba:	3330      	adds	r3, #48	; 0x30
 8011fbc:	08c8      	lsrs	r0, r1, #3
 8011fbe:	9901      	ldr	r1, [sp, #4]
 8011fc0:	4304      	orrs	r4, r0
 8011fc2:	08c9      	lsrs	r1, r1, #3
 8011fc4:	9101      	str	r1, [sp, #4]
 8011fc6:	0021      	movs	r1, r4
 8011fc8:	9801      	ldr	r0, [sp, #4]
 8011fca:	7033      	strb	r3, [r6, #0]
 8011fcc:	9400      	str	r4, [sp, #0]
 8011fce:	4301      	orrs	r1, r0
 8011fd0:	d1eb      	bne.n	8011faa <_vfiprintf_r+0x952>
 8011fd2:	07f9      	lsls	r1, r7, #31
 8011fd4:	d505      	bpl.n	8011fe2 <_vfiprintf_r+0x98a>
 8011fd6:	2b30      	cmp	r3, #48	; 0x30
 8011fd8:	d003      	beq.n	8011fe2 <_vfiprintf_r+0x98a>
 8011fda:	2330      	movs	r3, #48	; 0x30
 8011fdc:	3e01      	subs	r6, #1
 8011fde:	7033      	strb	r3, [r6, #0]
 8011fe0:	1e96      	subs	r6, r2, #2
 8011fe2:	9b05      	ldr	r3, [sp, #20]
 8011fe4:	003c      	movs	r4, r7
 8011fe6:	930b      	str	r3, [sp, #44]	; 0x2c
 8011fe8:	ab40      	add	r3, sp, #256	; 0x100
 8011fea:	1b9b      	subs	r3, r3, r6
 8011fec:	9305      	str	r3, [sp, #20]
 8011fee:	e575      	b.n	8011adc <_vfiprintf_r+0x484>
 8011ff0:	080148f9 	.word	0x080148f9

08011ff4 <__sbprintf>:
 8011ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ff6:	0015      	movs	r5, r2
 8011ff8:	2202      	movs	r2, #2
 8011ffa:	4c1e      	ldr	r4, [pc, #120]	; (8012074 <__sbprintf+0x80>)
 8011ffc:	001f      	movs	r7, r3
 8011ffe:	898b      	ldrh	r3, [r1, #12]
 8012000:	44a5      	add	sp, r4
 8012002:	4393      	bics	r3, r2
 8012004:	466a      	mov	r2, sp
 8012006:	8193      	strh	r3, [r2, #12]
 8012008:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801200a:	0006      	movs	r6, r0
 801200c:	9319      	str	r3, [sp, #100]	; 0x64
 801200e:	89cb      	ldrh	r3, [r1, #14]
 8012010:	a816      	add	r0, sp, #88	; 0x58
 8012012:	81d3      	strh	r3, [r2, #14]
 8012014:	69cb      	ldr	r3, [r1, #28]
 8012016:	000c      	movs	r4, r1
 8012018:	9307      	str	r3, [sp, #28]
 801201a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801201c:	9309      	str	r3, [sp, #36]	; 0x24
 801201e:	ab1a      	add	r3, sp, #104	; 0x68
 8012020:	9300      	str	r3, [sp, #0]
 8012022:	9304      	str	r3, [sp, #16]
 8012024:	2380      	movs	r3, #128	; 0x80
 8012026:	00db      	lsls	r3, r3, #3
 8012028:	9302      	str	r3, [sp, #8]
 801202a:	9305      	str	r3, [sp, #20]
 801202c:	2300      	movs	r3, #0
 801202e:	9306      	str	r3, [sp, #24]
 8012030:	f7fa f812 	bl	800c058 <__retarget_lock_init_recursive>
 8012034:	002a      	movs	r2, r5
 8012036:	003b      	movs	r3, r7
 8012038:	4669      	mov	r1, sp
 801203a:	0030      	movs	r0, r6
 801203c:	f7ff fb0c 	bl	8011658 <_vfiprintf_r>
 8012040:	1e05      	subs	r5, r0, #0
 8012042:	db07      	blt.n	8012054 <__sbprintf+0x60>
 8012044:	4669      	mov	r1, sp
 8012046:	0030      	movs	r0, r6
 8012048:	f7fd fe7c 	bl	800fd44 <_fflush_r>
 801204c:	2800      	cmp	r0, #0
 801204e:	d001      	beq.n	8012054 <__sbprintf+0x60>
 8012050:	2501      	movs	r5, #1
 8012052:	426d      	negs	r5, r5
 8012054:	466b      	mov	r3, sp
 8012056:	899a      	ldrh	r2, [r3, #12]
 8012058:	2340      	movs	r3, #64	; 0x40
 801205a:	421a      	tst	r2, r3
 801205c:	d002      	beq.n	8012064 <__sbprintf+0x70>
 801205e:	89a2      	ldrh	r2, [r4, #12]
 8012060:	4313      	orrs	r3, r2
 8012062:	81a3      	strh	r3, [r4, #12]
 8012064:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012066:	f7f9 fff8 	bl	800c05a <__retarget_lock_close_recursive>
 801206a:	0028      	movs	r0, r5
 801206c:	4b02      	ldr	r3, [pc, #8]	; (8012078 <__sbprintf+0x84>)
 801206e:	449d      	add	sp, r3
 8012070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012072:	46c0      	nop			; (mov r8, r8)
 8012074:	fffffb94 	.word	0xfffffb94
 8012078:	0000046c 	.word	0x0000046c

0801207c <__sfvwrite_r>:
 801207c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801207e:	6893      	ldr	r3, [r2, #8]
 8012080:	b087      	sub	sp, #28
 8012082:	000c      	movs	r4, r1
 8012084:	9002      	str	r0, [sp, #8]
 8012086:	9204      	str	r2, [sp, #16]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d102      	bne.n	8012092 <__sfvwrite_r+0x16>
 801208c:	2000      	movs	r0, #0
 801208e:	b007      	add	sp, #28
 8012090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012092:	898b      	ldrh	r3, [r1, #12]
 8012094:	071b      	lsls	r3, r3, #28
 8012096:	d557      	bpl.n	8012148 <__sfvwrite_r+0xcc>
 8012098:	690b      	ldr	r3, [r1, #16]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d054      	beq.n	8012148 <__sfvwrite_r+0xcc>
 801209e:	9b04      	ldr	r3, [sp, #16]
 80120a0:	2202      	movs	r2, #2
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	9301      	str	r3, [sp, #4]
 80120a6:	89a3      	ldrh	r3, [r4, #12]
 80120a8:	001f      	movs	r7, r3
 80120aa:	4017      	ands	r7, r2
 80120ac:	4213      	tst	r3, r2
 80120ae:	d171      	bne.n	8012194 <__sfvwrite_r+0x118>
 80120b0:	2201      	movs	r2, #1
 80120b2:	2101      	movs	r1, #1
 80120b4:	401a      	ands	r2, r3
 80120b6:	420b      	tst	r3, r1
 80120b8:	d100      	bne.n	80120bc <__sfvwrite_r+0x40>
 80120ba:	e0a5      	b.n	8012208 <__sfvwrite_r+0x18c>
 80120bc:	0038      	movs	r0, r7
 80120be:	003e      	movs	r6, r7
 80120c0:	9703      	str	r7, [sp, #12]
 80120c2:	9b03      	ldr	r3, [sp, #12]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d100      	bne.n	80120ca <__sfvwrite_r+0x4e>
 80120c8:	e10b      	b.n	80122e2 <__sfvwrite_r+0x266>
 80120ca:	2800      	cmp	r0, #0
 80120cc:	d10a      	bne.n	80120e4 <__sfvwrite_r+0x68>
 80120ce:	001a      	movs	r2, r3
 80120d0:	210a      	movs	r1, #10
 80120d2:	0030      	movs	r0, r6
 80120d4:	f7fd feb0 	bl	800fe38 <memchr>
 80120d8:	9b03      	ldr	r3, [sp, #12]
 80120da:	1c5f      	adds	r7, r3, #1
 80120dc:	2800      	cmp	r0, #0
 80120de:	d001      	beq.n	80120e4 <__sfvwrite_r+0x68>
 80120e0:	3001      	adds	r0, #1
 80120e2:	1b87      	subs	r7, r0, r6
 80120e4:	9b03      	ldr	r3, [sp, #12]
 80120e6:	9705      	str	r7, [sp, #20]
 80120e8:	429f      	cmp	r7, r3
 80120ea:	d900      	bls.n	80120ee <__sfvwrite_r+0x72>
 80120ec:	9305      	str	r3, [sp, #20]
 80120ee:	6820      	ldr	r0, [r4, #0]
 80120f0:	6922      	ldr	r2, [r4, #16]
 80120f2:	68a5      	ldr	r5, [r4, #8]
 80120f4:	6963      	ldr	r3, [r4, #20]
 80120f6:	4290      	cmp	r0, r2
 80120f8:	d800      	bhi.n	80120fc <__sfvwrite_r+0x80>
 80120fa:	e0fb      	b.n	80122f4 <__sfvwrite_r+0x278>
 80120fc:	9a05      	ldr	r2, [sp, #20]
 80120fe:	18ed      	adds	r5, r5, r3
 8012100:	42aa      	cmp	r2, r5
 8012102:	dc00      	bgt.n	8012106 <__sfvwrite_r+0x8a>
 8012104:	e0f6      	b.n	80122f4 <__sfvwrite_r+0x278>
 8012106:	0031      	movs	r1, r6
 8012108:	002a      	movs	r2, r5
 801210a:	f000 fa1e 	bl	801254a <memmove>
 801210e:	6823      	ldr	r3, [r4, #0]
 8012110:	0021      	movs	r1, r4
 8012112:	195b      	adds	r3, r3, r5
 8012114:	9802      	ldr	r0, [sp, #8]
 8012116:	6023      	str	r3, [r4, #0]
 8012118:	f7fd fe14 	bl	800fd44 <_fflush_r>
 801211c:	2800      	cmp	r0, #0
 801211e:	d16e      	bne.n	80121fe <__sfvwrite_r+0x182>
 8012120:	2001      	movs	r0, #1
 8012122:	1b7f      	subs	r7, r7, r5
 8012124:	d105      	bne.n	8012132 <__sfvwrite_r+0xb6>
 8012126:	0021      	movs	r1, r4
 8012128:	9802      	ldr	r0, [sp, #8]
 801212a:	f7fd fe0b 	bl	800fd44 <_fflush_r>
 801212e:	2800      	cmp	r0, #0
 8012130:	d165      	bne.n	80121fe <__sfvwrite_r+0x182>
 8012132:	9b03      	ldr	r3, [sp, #12]
 8012134:	9a04      	ldr	r2, [sp, #16]
 8012136:	1b5b      	subs	r3, r3, r5
 8012138:	9303      	str	r3, [sp, #12]
 801213a:	9b04      	ldr	r3, [sp, #16]
 801213c:	1976      	adds	r6, r6, r5
 801213e:	689b      	ldr	r3, [r3, #8]
 8012140:	1b5b      	subs	r3, r3, r5
 8012142:	6093      	str	r3, [r2, #8]
 8012144:	d1bd      	bne.n	80120c2 <__sfvwrite_r+0x46>
 8012146:	e7a1      	b.n	801208c <__sfvwrite_r+0x10>
 8012148:	0021      	movs	r1, r4
 801214a:	9802      	ldr	r0, [sp, #8]
 801214c:	f000 f932 	bl	80123b4 <__swsetup_r>
 8012150:	2800      	cmp	r0, #0
 8012152:	d0a4      	beq.n	801209e <__sfvwrite_r+0x22>
 8012154:	2001      	movs	r0, #1
 8012156:	4240      	negs	r0, r0
 8012158:	e799      	b.n	801208e <__sfvwrite_r+0x12>
 801215a:	9b01      	ldr	r3, [sp, #4]
 801215c:	681e      	ldr	r6, [r3, #0]
 801215e:	685d      	ldr	r5, [r3, #4]
 8012160:	3308      	adds	r3, #8
 8012162:	9301      	str	r3, [sp, #4]
 8012164:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8012166:	69e1      	ldr	r1, [r4, #28]
 8012168:	2d00      	cmp	r5, #0
 801216a:	d0f6      	beq.n	801215a <__sfvwrite_r+0xde>
 801216c:	4a6e      	ldr	r2, [pc, #440]	; (8012328 <__sfvwrite_r+0x2ac>)
 801216e:	002b      	movs	r3, r5
 8012170:	4295      	cmp	r5, r2
 8012172:	d900      	bls.n	8012176 <__sfvwrite_r+0xfa>
 8012174:	0013      	movs	r3, r2
 8012176:	0032      	movs	r2, r6
 8012178:	9802      	ldr	r0, [sp, #8]
 801217a:	47b8      	blx	r7
 801217c:	2800      	cmp	r0, #0
 801217e:	dd3e      	ble.n	80121fe <__sfvwrite_r+0x182>
 8012180:	9b04      	ldr	r3, [sp, #16]
 8012182:	9a04      	ldr	r2, [sp, #16]
 8012184:	689b      	ldr	r3, [r3, #8]
 8012186:	1836      	adds	r6, r6, r0
 8012188:	1a1b      	subs	r3, r3, r0
 801218a:	1a2d      	subs	r5, r5, r0
 801218c:	6093      	str	r3, [r2, #8]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d1e8      	bne.n	8012164 <__sfvwrite_r+0xe8>
 8012192:	e77b      	b.n	801208c <__sfvwrite_r+0x10>
 8012194:	2600      	movs	r6, #0
 8012196:	0035      	movs	r5, r6
 8012198:	e7e4      	b.n	8012164 <__sfvwrite_r+0xe8>
 801219a:	9b01      	ldr	r3, [sp, #4]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	9303      	str	r3, [sp, #12]
 80121a0:	9b01      	ldr	r3, [sp, #4]
 80121a2:	685d      	ldr	r5, [r3, #4]
 80121a4:	3308      	adds	r3, #8
 80121a6:	9301      	str	r3, [sp, #4]
 80121a8:	220c      	movs	r2, #12
 80121aa:	5ea3      	ldrsh	r3, [r4, r2]
 80121ac:	6820      	ldr	r0, [r4, #0]
 80121ae:	68a6      	ldr	r6, [r4, #8]
 80121b0:	2d00      	cmp	r5, #0
 80121b2:	d0f2      	beq.n	801219a <__sfvwrite_r+0x11e>
 80121b4:	2180      	movs	r1, #128	; 0x80
 80121b6:	0089      	lsls	r1, r1, #2
 80121b8:	b29a      	uxth	r2, r3
 80121ba:	420b      	tst	r3, r1
 80121bc:	d062      	beq.n	8012284 <__sfvwrite_r+0x208>
 80121be:	42ae      	cmp	r6, r5
 80121c0:	d837      	bhi.n	8012232 <__sfvwrite_r+0x1b6>
 80121c2:	2390      	movs	r3, #144	; 0x90
 80121c4:	00db      	lsls	r3, r3, #3
 80121c6:	421a      	tst	r2, r3
 80121c8:	d033      	beq.n	8012232 <__sfvwrite_r+0x1b6>
 80121ca:	6921      	ldr	r1, [r4, #16]
 80121cc:	1a43      	subs	r3, r0, r1
 80121ce:	2003      	movs	r0, #3
 80121d0:	9305      	str	r3, [sp, #20]
 80121d2:	6963      	ldr	r3, [r4, #20]
 80121d4:	4343      	muls	r3, r0
 80121d6:	0fdf      	lsrs	r7, r3, #31
 80121d8:	18ff      	adds	r7, r7, r3
 80121da:	9b05      	ldr	r3, [sp, #20]
 80121dc:	107f      	asrs	r7, r7, #1
 80121de:	3301      	adds	r3, #1
 80121e0:	195b      	adds	r3, r3, r5
 80121e2:	42bb      	cmp	r3, r7
 80121e4:	d900      	bls.n	80121e8 <__sfvwrite_r+0x16c>
 80121e6:	001f      	movs	r7, r3
 80121e8:	0552      	lsls	r2, r2, #21
 80121ea:	d53c      	bpl.n	8012266 <__sfvwrite_r+0x1ea>
 80121ec:	0039      	movs	r1, r7
 80121ee:	9802      	ldr	r0, [sp, #8]
 80121f0:	f7f8 fb02 	bl	800a7f8 <_malloc_r>
 80121f4:	1e06      	subs	r6, r0, #0
 80121f6:	d10a      	bne.n	801220e <__sfvwrite_r+0x192>
 80121f8:	230c      	movs	r3, #12
 80121fa:	9a02      	ldr	r2, [sp, #8]
 80121fc:	6013      	str	r3, [r2, #0]
 80121fe:	2340      	movs	r3, #64	; 0x40
 8012200:	89a2      	ldrh	r2, [r4, #12]
 8012202:	4313      	orrs	r3, r2
 8012204:	81a3      	strh	r3, [r4, #12]
 8012206:	e7a5      	b.n	8012154 <__sfvwrite_r+0xd8>
 8012208:	0015      	movs	r5, r2
 801220a:	9203      	str	r2, [sp, #12]
 801220c:	e7cc      	b.n	80121a8 <__sfvwrite_r+0x12c>
 801220e:	9a05      	ldr	r2, [sp, #20]
 8012210:	6921      	ldr	r1, [r4, #16]
 8012212:	f7f9 ff30 	bl	800c076 <memcpy>
 8012216:	89a2      	ldrh	r2, [r4, #12]
 8012218:	4b44      	ldr	r3, [pc, #272]	; (801232c <__sfvwrite_r+0x2b0>)
 801221a:	401a      	ands	r2, r3
 801221c:	2380      	movs	r3, #128	; 0x80
 801221e:	4313      	orrs	r3, r2
 8012220:	81a3      	strh	r3, [r4, #12]
 8012222:	9b05      	ldr	r3, [sp, #20]
 8012224:	6126      	str	r6, [r4, #16]
 8012226:	18f6      	adds	r6, r6, r3
 8012228:	6026      	str	r6, [r4, #0]
 801222a:	002e      	movs	r6, r5
 801222c:	6167      	str	r7, [r4, #20]
 801222e:	1aff      	subs	r7, r7, r3
 8012230:	60a7      	str	r7, [r4, #8]
 8012232:	002f      	movs	r7, r5
 8012234:	42ae      	cmp	r6, r5
 8012236:	d900      	bls.n	801223a <__sfvwrite_r+0x1be>
 8012238:	002e      	movs	r6, r5
 801223a:	0032      	movs	r2, r6
 801223c:	9903      	ldr	r1, [sp, #12]
 801223e:	6820      	ldr	r0, [r4, #0]
 8012240:	f000 f983 	bl	801254a <memmove>
 8012244:	68a3      	ldr	r3, [r4, #8]
 8012246:	1b9b      	subs	r3, r3, r6
 8012248:	60a3      	str	r3, [r4, #8]
 801224a:	6823      	ldr	r3, [r4, #0]
 801224c:	199b      	adds	r3, r3, r6
 801224e:	6023      	str	r3, [r4, #0]
 8012250:	9b03      	ldr	r3, [sp, #12]
 8012252:	9a04      	ldr	r2, [sp, #16]
 8012254:	19db      	adds	r3, r3, r7
 8012256:	9303      	str	r3, [sp, #12]
 8012258:	9b04      	ldr	r3, [sp, #16]
 801225a:	1bed      	subs	r5, r5, r7
 801225c:	689b      	ldr	r3, [r3, #8]
 801225e:	1bdb      	subs	r3, r3, r7
 8012260:	6093      	str	r3, [r2, #8]
 8012262:	d1a1      	bne.n	80121a8 <__sfvwrite_r+0x12c>
 8012264:	e712      	b.n	801208c <__sfvwrite_r+0x10>
 8012266:	003a      	movs	r2, r7
 8012268:	9802      	ldr	r0, [sp, #8]
 801226a:	f7fe fd5d 	bl	8010d28 <_realloc_r>
 801226e:	1e06      	subs	r6, r0, #0
 8012270:	d1d7      	bne.n	8012222 <__sfvwrite_r+0x1a6>
 8012272:	6921      	ldr	r1, [r4, #16]
 8012274:	9802      	ldr	r0, [sp, #8]
 8012276:	f7f9 ff79 	bl	800c16c <_free_r>
 801227a:	2280      	movs	r2, #128	; 0x80
 801227c:	89a3      	ldrh	r3, [r4, #12]
 801227e:	4393      	bics	r3, r2
 8012280:	81a3      	strh	r3, [r4, #12]
 8012282:	e7b9      	b.n	80121f8 <__sfvwrite_r+0x17c>
 8012284:	6923      	ldr	r3, [r4, #16]
 8012286:	4283      	cmp	r3, r0
 8012288:	d302      	bcc.n	8012290 <__sfvwrite_r+0x214>
 801228a:	6967      	ldr	r7, [r4, #20]
 801228c:	42af      	cmp	r7, r5
 801228e:	d916      	bls.n	80122be <__sfvwrite_r+0x242>
 8012290:	42ae      	cmp	r6, r5
 8012292:	d900      	bls.n	8012296 <__sfvwrite_r+0x21a>
 8012294:	002e      	movs	r6, r5
 8012296:	0032      	movs	r2, r6
 8012298:	9903      	ldr	r1, [sp, #12]
 801229a:	f000 f956 	bl	801254a <memmove>
 801229e:	68a3      	ldr	r3, [r4, #8]
 80122a0:	6822      	ldr	r2, [r4, #0]
 80122a2:	1b9b      	subs	r3, r3, r6
 80122a4:	1992      	adds	r2, r2, r6
 80122a6:	0037      	movs	r7, r6
 80122a8:	60a3      	str	r3, [r4, #8]
 80122aa:	6022      	str	r2, [r4, #0]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d1cf      	bne.n	8012250 <__sfvwrite_r+0x1d4>
 80122b0:	0021      	movs	r1, r4
 80122b2:	9802      	ldr	r0, [sp, #8]
 80122b4:	f7fd fd46 	bl	800fd44 <_fflush_r>
 80122b8:	2800      	cmp	r0, #0
 80122ba:	d0c9      	beq.n	8012250 <__sfvwrite_r+0x1d4>
 80122bc:	e79f      	b.n	80121fe <__sfvwrite_r+0x182>
 80122be:	4b1c      	ldr	r3, [pc, #112]	; (8012330 <__sfvwrite_r+0x2b4>)
 80122c0:	0028      	movs	r0, r5
 80122c2:	429d      	cmp	r5, r3
 80122c4:	d900      	bls.n	80122c8 <__sfvwrite_r+0x24c>
 80122c6:	481b      	ldr	r0, [pc, #108]	; (8012334 <__sfvwrite_r+0x2b8>)
 80122c8:	0039      	movs	r1, r7
 80122ca:	f7ed ffc1 	bl	8000250 <__divsi3>
 80122ce:	003b      	movs	r3, r7
 80122d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80122d2:	4343      	muls	r3, r0
 80122d4:	9a03      	ldr	r2, [sp, #12]
 80122d6:	69e1      	ldr	r1, [r4, #28]
 80122d8:	9802      	ldr	r0, [sp, #8]
 80122da:	47b0      	blx	r6
 80122dc:	1e07      	subs	r7, r0, #0
 80122de:	dcb7      	bgt.n	8012250 <__sfvwrite_r+0x1d4>
 80122e0:	e78d      	b.n	80121fe <__sfvwrite_r+0x182>
 80122e2:	9b01      	ldr	r3, [sp, #4]
 80122e4:	2000      	movs	r0, #0
 80122e6:	681e      	ldr	r6, [r3, #0]
 80122e8:	685b      	ldr	r3, [r3, #4]
 80122ea:	9303      	str	r3, [sp, #12]
 80122ec:	9b01      	ldr	r3, [sp, #4]
 80122ee:	3308      	adds	r3, #8
 80122f0:	9301      	str	r3, [sp, #4]
 80122f2:	e6e6      	b.n	80120c2 <__sfvwrite_r+0x46>
 80122f4:	9a05      	ldr	r2, [sp, #20]
 80122f6:	4293      	cmp	r3, r2
 80122f8:	dc08      	bgt.n	801230c <__sfvwrite_r+0x290>
 80122fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80122fc:	0032      	movs	r2, r6
 80122fe:	69e1      	ldr	r1, [r4, #28]
 8012300:	9802      	ldr	r0, [sp, #8]
 8012302:	47a8      	blx	r5
 8012304:	1e05      	subs	r5, r0, #0
 8012306:	dd00      	ble.n	801230a <__sfvwrite_r+0x28e>
 8012308:	e70a      	b.n	8012120 <__sfvwrite_r+0xa4>
 801230a:	e778      	b.n	80121fe <__sfvwrite_r+0x182>
 801230c:	9a05      	ldr	r2, [sp, #20]
 801230e:	0031      	movs	r1, r6
 8012310:	f000 f91b 	bl	801254a <memmove>
 8012314:	9a05      	ldr	r2, [sp, #20]
 8012316:	68a3      	ldr	r3, [r4, #8]
 8012318:	0015      	movs	r5, r2
 801231a:	1a9b      	subs	r3, r3, r2
 801231c:	60a3      	str	r3, [r4, #8]
 801231e:	6823      	ldr	r3, [r4, #0]
 8012320:	189b      	adds	r3, r3, r2
 8012322:	6023      	str	r3, [r4, #0]
 8012324:	e6fc      	b.n	8012120 <__sfvwrite_r+0xa4>
 8012326:	46c0      	nop			; (mov r8, r8)
 8012328:	7ffffc00 	.word	0x7ffffc00
 801232c:	fffffb7f 	.word	0xfffffb7f
 8012330:	7ffffffe 	.word	0x7ffffffe
 8012334:	7fffffff 	.word	0x7fffffff

08012338 <__submore>:
 8012338:	000b      	movs	r3, r1
 801233a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801233c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 801233e:	3340      	adds	r3, #64	; 0x40
 8012340:	000c      	movs	r4, r1
 8012342:	429d      	cmp	r5, r3
 8012344:	d11c      	bne.n	8012380 <__submore+0x48>
 8012346:	2680      	movs	r6, #128	; 0x80
 8012348:	00f6      	lsls	r6, r6, #3
 801234a:	0031      	movs	r1, r6
 801234c:	f7f8 fa54 	bl	800a7f8 <_malloc_r>
 8012350:	2800      	cmp	r0, #0
 8012352:	d102      	bne.n	801235a <__submore+0x22>
 8012354:	2001      	movs	r0, #1
 8012356:	4240      	negs	r0, r0
 8012358:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801235a:	0023      	movs	r3, r4
 801235c:	6320      	str	r0, [r4, #48]	; 0x30
 801235e:	6366      	str	r6, [r4, #52]	; 0x34
 8012360:	3342      	adds	r3, #66	; 0x42
 8012362:	781a      	ldrb	r2, [r3, #0]
 8012364:	4b10      	ldr	r3, [pc, #64]	; (80123a8 <__submore+0x70>)
 8012366:	54c2      	strb	r2, [r0, r3]
 8012368:	0023      	movs	r3, r4
 801236a:	3341      	adds	r3, #65	; 0x41
 801236c:	781a      	ldrb	r2, [r3, #0]
 801236e:	4b0f      	ldr	r3, [pc, #60]	; (80123ac <__submore+0x74>)
 8012370:	54c2      	strb	r2, [r0, r3]
 8012372:	782a      	ldrb	r2, [r5, #0]
 8012374:	4b0e      	ldr	r3, [pc, #56]	; (80123b0 <__submore+0x78>)
 8012376:	54c2      	strb	r2, [r0, r3]
 8012378:	18c0      	adds	r0, r0, r3
 801237a:	6020      	str	r0, [r4, #0]
 801237c:	2000      	movs	r0, #0
 801237e:	e7eb      	b.n	8012358 <__submore+0x20>
 8012380:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8012382:	0029      	movs	r1, r5
 8012384:	0073      	lsls	r3, r6, #1
 8012386:	001a      	movs	r2, r3
 8012388:	9301      	str	r3, [sp, #4]
 801238a:	f7fe fccd 	bl	8010d28 <_realloc_r>
 801238e:	1e05      	subs	r5, r0, #0
 8012390:	d0e0      	beq.n	8012354 <__submore+0x1c>
 8012392:	1987      	adds	r7, r0, r6
 8012394:	0001      	movs	r1, r0
 8012396:	0032      	movs	r2, r6
 8012398:	0038      	movs	r0, r7
 801239a:	f7f9 fe6c 	bl	800c076 <memcpy>
 801239e:	9b01      	ldr	r3, [sp, #4]
 80123a0:	6027      	str	r7, [r4, #0]
 80123a2:	6325      	str	r5, [r4, #48]	; 0x30
 80123a4:	6363      	str	r3, [r4, #52]	; 0x34
 80123a6:	e7e9      	b.n	801237c <__submore+0x44>
 80123a8:	000003ff 	.word	0x000003ff
 80123ac:	000003fe 	.word	0x000003fe
 80123b0:	000003fd 	.word	0x000003fd

080123b4 <__swsetup_r>:
 80123b4:	4b30      	ldr	r3, [pc, #192]	; (8012478 <__swsetup_r+0xc4>)
 80123b6:	b570      	push	{r4, r5, r6, lr}
 80123b8:	0005      	movs	r5, r0
 80123ba:	6818      	ldr	r0, [r3, #0]
 80123bc:	000c      	movs	r4, r1
 80123be:	2800      	cmp	r0, #0
 80123c0:	d004      	beq.n	80123cc <__swsetup_r+0x18>
 80123c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d101      	bne.n	80123cc <__swsetup_r+0x18>
 80123c8:	f7f9 fc2a 	bl	800bc20 <__sinit>
 80123cc:	230c      	movs	r3, #12
 80123ce:	5ee2      	ldrsh	r2, [r4, r3]
 80123d0:	b293      	uxth	r3, r2
 80123d2:	0711      	lsls	r1, r2, #28
 80123d4:	d423      	bmi.n	801241e <__swsetup_r+0x6a>
 80123d6:	06d9      	lsls	r1, r3, #27
 80123d8:	d407      	bmi.n	80123ea <__swsetup_r+0x36>
 80123da:	2309      	movs	r3, #9
 80123dc:	2001      	movs	r0, #1
 80123de:	602b      	str	r3, [r5, #0]
 80123e0:	3337      	adds	r3, #55	; 0x37
 80123e2:	4313      	orrs	r3, r2
 80123e4:	81a3      	strh	r3, [r4, #12]
 80123e6:	4240      	negs	r0, r0
 80123e8:	bd70      	pop	{r4, r5, r6, pc}
 80123ea:	075b      	lsls	r3, r3, #29
 80123ec:	d513      	bpl.n	8012416 <__swsetup_r+0x62>
 80123ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80123f0:	2900      	cmp	r1, #0
 80123f2:	d008      	beq.n	8012406 <__swsetup_r+0x52>
 80123f4:	0023      	movs	r3, r4
 80123f6:	3340      	adds	r3, #64	; 0x40
 80123f8:	4299      	cmp	r1, r3
 80123fa:	d002      	beq.n	8012402 <__swsetup_r+0x4e>
 80123fc:	0028      	movs	r0, r5
 80123fe:	f7f9 feb5 	bl	800c16c <_free_r>
 8012402:	2300      	movs	r3, #0
 8012404:	6323      	str	r3, [r4, #48]	; 0x30
 8012406:	2224      	movs	r2, #36	; 0x24
 8012408:	89a3      	ldrh	r3, [r4, #12]
 801240a:	4393      	bics	r3, r2
 801240c:	81a3      	strh	r3, [r4, #12]
 801240e:	2300      	movs	r3, #0
 8012410:	6063      	str	r3, [r4, #4]
 8012412:	6923      	ldr	r3, [r4, #16]
 8012414:	6023      	str	r3, [r4, #0]
 8012416:	2308      	movs	r3, #8
 8012418:	89a2      	ldrh	r2, [r4, #12]
 801241a:	4313      	orrs	r3, r2
 801241c:	81a3      	strh	r3, [r4, #12]
 801241e:	6923      	ldr	r3, [r4, #16]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d10b      	bne.n	801243c <__swsetup_r+0x88>
 8012424:	21a0      	movs	r1, #160	; 0xa0
 8012426:	2280      	movs	r2, #128	; 0x80
 8012428:	89a3      	ldrh	r3, [r4, #12]
 801242a:	0089      	lsls	r1, r1, #2
 801242c:	0092      	lsls	r2, r2, #2
 801242e:	400b      	ands	r3, r1
 8012430:	4293      	cmp	r3, r2
 8012432:	d003      	beq.n	801243c <__swsetup_r+0x88>
 8012434:	0021      	movs	r1, r4
 8012436:	0028      	movs	r0, r5
 8012438:	f000 f8e8 	bl	801260c <__smakebuf_r>
 801243c:	220c      	movs	r2, #12
 801243e:	5ea3      	ldrsh	r3, [r4, r2]
 8012440:	2001      	movs	r0, #1
 8012442:	001a      	movs	r2, r3
 8012444:	b299      	uxth	r1, r3
 8012446:	4002      	ands	r2, r0
 8012448:	4203      	tst	r3, r0
 801244a:	d00f      	beq.n	801246c <__swsetup_r+0xb8>
 801244c:	2200      	movs	r2, #0
 801244e:	60a2      	str	r2, [r4, #8]
 8012450:	6962      	ldr	r2, [r4, #20]
 8012452:	4252      	negs	r2, r2
 8012454:	61a2      	str	r2, [r4, #24]
 8012456:	2000      	movs	r0, #0
 8012458:	6922      	ldr	r2, [r4, #16]
 801245a:	4282      	cmp	r2, r0
 801245c:	d1c4      	bne.n	80123e8 <__swsetup_r+0x34>
 801245e:	0609      	lsls	r1, r1, #24
 8012460:	d5c2      	bpl.n	80123e8 <__swsetup_r+0x34>
 8012462:	2240      	movs	r2, #64	; 0x40
 8012464:	4313      	orrs	r3, r2
 8012466:	81a3      	strh	r3, [r4, #12]
 8012468:	3801      	subs	r0, #1
 801246a:	e7bd      	b.n	80123e8 <__swsetup_r+0x34>
 801246c:	0788      	lsls	r0, r1, #30
 801246e:	d400      	bmi.n	8012472 <__swsetup_r+0xbe>
 8012470:	6962      	ldr	r2, [r4, #20]
 8012472:	60a2      	str	r2, [r4, #8]
 8012474:	e7ef      	b.n	8012456 <__swsetup_r+0xa2>
 8012476:	46c0      	nop			; (mov r8, r8)
 8012478:	200006d0 	.word	0x200006d0

0801247c <__fputwc>:
 801247c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801247e:	b085      	sub	sp, #20
 8012480:	000e      	movs	r6, r1
 8012482:	0015      	movs	r5, r2
 8012484:	9001      	str	r0, [sp, #4]
 8012486:	f7f9 fd55 	bl	800bf34 <__locale_mb_cur_max>
 801248a:	0004      	movs	r4, r0
 801248c:	2801      	cmp	r0, #1
 801248e:	d119      	bne.n	80124c4 <__fputwc+0x48>
 8012490:	1e73      	subs	r3, r6, #1
 8012492:	2bfe      	cmp	r3, #254	; 0xfe
 8012494:	d816      	bhi.n	80124c4 <__fputwc+0x48>
 8012496:	ab02      	add	r3, sp, #8
 8012498:	711e      	strb	r6, [r3, #4]
 801249a:	2700      	movs	r7, #0
 801249c:	42a7      	cmp	r7, r4
 801249e:	d020      	beq.n	80124e2 <__fputwc+0x66>
 80124a0:	ab03      	add	r3, sp, #12
 80124a2:	5dd9      	ldrb	r1, [r3, r7]
 80124a4:	68ab      	ldr	r3, [r5, #8]
 80124a6:	3b01      	subs	r3, #1
 80124a8:	60ab      	str	r3, [r5, #8]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	da04      	bge.n	80124b8 <__fputwc+0x3c>
 80124ae:	69aa      	ldr	r2, [r5, #24]
 80124b0:	4293      	cmp	r3, r2
 80124b2:	db19      	blt.n	80124e8 <__fputwc+0x6c>
 80124b4:	290a      	cmp	r1, #10
 80124b6:	d017      	beq.n	80124e8 <__fputwc+0x6c>
 80124b8:	682b      	ldr	r3, [r5, #0]
 80124ba:	1c5a      	adds	r2, r3, #1
 80124bc:	602a      	str	r2, [r5, #0]
 80124be:	7019      	strb	r1, [r3, #0]
 80124c0:	3701      	adds	r7, #1
 80124c2:	e7eb      	b.n	801249c <__fputwc+0x20>
 80124c4:	002b      	movs	r3, r5
 80124c6:	0032      	movs	r2, r6
 80124c8:	9801      	ldr	r0, [sp, #4]
 80124ca:	335c      	adds	r3, #92	; 0x5c
 80124cc:	a903      	add	r1, sp, #12
 80124ce:	f000 f857 	bl	8012580 <_wcrtomb_r>
 80124d2:	0004      	movs	r4, r0
 80124d4:	1c43      	adds	r3, r0, #1
 80124d6:	d1e0      	bne.n	801249a <__fputwc+0x1e>
 80124d8:	2340      	movs	r3, #64	; 0x40
 80124da:	0006      	movs	r6, r0
 80124dc:	89aa      	ldrh	r2, [r5, #12]
 80124de:	4313      	orrs	r3, r2
 80124e0:	81ab      	strh	r3, [r5, #12]
 80124e2:	0030      	movs	r0, r6
 80124e4:	b005      	add	sp, #20
 80124e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124e8:	002a      	movs	r2, r5
 80124ea:	9801      	ldr	r0, [sp, #4]
 80124ec:	f000 f8cc 	bl	8012688 <__swbuf_r>
 80124f0:	1c43      	adds	r3, r0, #1
 80124f2:	d1e5      	bne.n	80124c0 <__fputwc+0x44>
 80124f4:	0006      	movs	r6, r0
 80124f6:	e7f4      	b.n	80124e2 <__fputwc+0x66>

080124f8 <_fputwc_r>:
 80124f8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80124fa:	b570      	push	{r4, r5, r6, lr}
 80124fc:	0005      	movs	r5, r0
 80124fe:	000e      	movs	r6, r1
 8012500:	0014      	movs	r4, r2
 8012502:	07db      	lsls	r3, r3, #31
 8012504:	d405      	bmi.n	8012512 <_fputwc_r+0x1a>
 8012506:	8993      	ldrh	r3, [r2, #12]
 8012508:	059b      	lsls	r3, r3, #22
 801250a:	d402      	bmi.n	8012512 <_fputwc_r+0x1a>
 801250c:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801250e:	f7f9 fda5 	bl	800c05c <__retarget_lock_acquire_recursive>
 8012512:	230c      	movs	r3, #12
 8012514:	5ee2      	ldrsh	r2, [r4, r3]
 8012516:	2380      	movs	r3, #128	; 0x80
 8012518:	019b      	lsls	r3, r3, #6
 801251a:	421a      	tst	r2, r3
 801251c:	d104      	bne.n	8012528 <_fputwc_r+0x30>
 801251e:	431a      	orrs	r2, r3
 8012520:	81a2      	strh	r2, [r4, #12]
 8012522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012524:	4313      	orrs	r3, r2
 8012526:	6663      	str	r3, [r4, #100]	; 0x64
 8012528:	0028      	movs	r0, r5
 801252a:	0022      	movs	r2, r4
 801252c:	0031      	movs	r1, r6
 801252e:	f7ff ffa5 	bl	801247c <__fputwc>
 8012532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012534:	0005      	movs	r5, r0
 8012536:	07db      	lsls	r3, r3, #31
 8012538:	d405      	bmi.n	8012546 <_fputwc_r+0x4e>
 801253a:	89a3      	ldrh	r3, [r4, #12]
 801253c:	059b      	lsls	r3, r3, #22
 801253e:	d402      	bmi.n	8012546 <_fputwc_r+0x4e>
 8012540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012542:	f7f9 fd8c 	bl	800c05e <__retarget_lock_release_recursive>
 8012546:	0028      	movs	r0, r5
 8012548:	bd70      	pop	{r4, r5, r6, pc}

0801254a <memmove>:
 801254a:	b510      	push	{r4, lr}
 801254c:	4288      	cmp	r0, r1
 801254e:	d902      	bls.n	8012556 <memmove+0xc>
 8012550:	188b      	adds	r3, r1, r2
 8012552:	4298      	cmp	r0, r3
 8012554:	d303      	bcc.n	801255e <memmove+0x14>
 8012556:	2300      	movs	r3, #0
 8012558:	e007      	b.n	801256a <memmove+0x20>
 801255a:	5c8b      	ldrb	r3, [r1, r2]
 801255c:	5483      	strb	r3, [r0, r2]
 801255e:	3a01      	subs	r2, #1
 8012560:	d2fb      	bcs.n	801255a <memmove+0x10>
 8012562:	bd10      	pop	{r4, pc}
 8012564:	5ccc      	ldrb	r4, [r1, r3]
 8012566:	54c4      	strb	r4, [r0, r3]
 8012568:	3301      	adds	r3, #1
 801256a:	429a      	cmp	r2, r3
 801256c:	d1fa      	bne.n	8012564 <memmove+0x1a>
 801256e:	e7f8      	b.n	8012562 <memmove+0x18>

08012570 <abort>:
 8012570:	2006      	movs	r0, #6
 8012572:	b510      	push	{r4, lr}
 8012574:	f000 f906 	bl	8012784 <raise>
 8012578:	2001      	movs	r0, #1
 801257a:	f7f1 fb13 	bl	8003ba4 <_exit>
	...

08012580 <_wcrtomb_r>:
 8012580:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012582:	001d      	movs	r5, r3
 8012584:	4b09      	ldr	r3, [pc, #36]	; (80125ac <_wcrtomb_r+0x2c>)
 8012586:	0004      	movs	r4, r0
 8012588:	33e0      	adds	r3, #224	; 0xe0
 801258a:	681e      	ldr	r6, [r3, #0]
 801258c:	002b      	movs	r3, r5
 801258e:	2900      	cmp	r1, #0
 8012590:	d101      	bne.n	8012596 <_wcrtomb_r+0x16>
 8012592:	000a      	movs	r2, r1
 8012594:	a901      	add	r1, sp, #4
 8012596:	0020      	movs	r0, r4
 8012598:	47b0      	blx	r6
 801259a:	1c43      	adds	r3, r0, #1
 801259c:	d103      	bne.n	80125a6 <_wcrtomb_r+0x26>
 801259e:	2300      	movs	r3, #0
 80125a0:	602b      	str	r3, [r5, #0]
 80125a2:	338a      	adds	r3, #138	; 0x8a
 80125a4:	6023      	str	r3, [r4, #0]
 80125a6:	b004      	add	sp, #16
 80125a8:	bd70      	pop	{r4, r5, r6, pc}
 80125aa:	46c0      	nop			; (mov r8, r8)
 80125ac:	20000444 	.word	0x20000444

080125b0 <__swhatbuf_r>:
 80125b0:	b570      	push	{r4, r5, r6, lr}
 80125b2:	000e      	movs	r6, r1
 80125b4:	001d      	movs	r5, r3
 80125b6:	230e      	movs	r3, #14
 80125b8:	5ec9      	ldrsh	r1, [r1, r3]
 80125ba:	0014      	movs	r4, r2
 80125bc:	b096      	sub	sp, #88	; 0x58
 80125be:	2900      	cmp	r1, #0
 80125c0:	da09      	bge.n	80125d6 <__swhatbuf_r+0x26>
 80125c2:	89b2      	ldrh	r2, [r6, #12]
 80125c4:	2380      	movs	r3, #128	; 0x80
 80125c6:	0011      	movs	r1, r2
 80125c8:	4019      	ands	r1, r3
 80125ca:	421a      	tst	r2, r3
 80125cc:	d018      	beq.n	8012600 <__swhatbuf_r+0x50>
 80125ce:	2100      	movs	r1, #0
 80125d0:	3b40      	subs	r3, #64	; 0x40
 80125d2:	0008      	movs	r0, r1
 80125d4:	e010      	b.n	80125f8 <__swhatbuf_r+0x48>
 80125d6:	466a      	mov	r2, sp
 80125d8:	f000 f8de 	bl	8012798 <_fstat_r>
 80125dc:	2800      	cmp	r0, #0
 80125de:	dbf0      	blt.n	80125c2 <__swhatbuf_r+0x12>
 80125e0:	23f0      	movs	r3, #240	; 0xf0
 80125e2:	9901      	ldr	r1, [sp, #4]
 80125e4:	021b      	lsls	r3, r3, #8
 80125e6:	4019      	ands	r1, r3
 80125e8:	4b07      	ldr	r3, [pc, #28]	; (8012608 <__swhatbuf_r+0x58>)
 80125ea:	2080      	movs	r0, #128	; 0x80
 80125ec:	18c9      	adds	r1, r1, r3
 80125ee:	424b      	negs	r3, r1
 80125f0:	4159      	adcs	r1, r3
 80125f2:	2380      	movs	r3, #128	; 0x80
 80125f4:	0100      	lsls	r0, r0, #4
 80125f6:	00db      	lsls	r3, r3, #3
 80125f8:	6029      	str	r1, [r5, #0]
 80125fa:	6023      	str	r3, [r4, #0]
 80125fc:	b016      	add	sp, #88	; 0x58
 80125fe:	bd70      	pop	{r4, r5, r6, pc}
 8012600:	2380      	movs	r3, #128	; 0x80
 8012602:	00db      	lsls	r3, r3, #3
 8012604:	e7e5      	b.n	80125d2 <__swhatbuf_r+0x22>
 8012606:	46c0      	nop			; (mov r8, r8)
 8012608:	ffffe000 	.word	0xffffe000

0801260c <__smakebuf_r>:
 801260c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801260e:	2602      	movs	r6, #2
 8012610:	898b      	ldrh	r3, [r1, #12]
 8012612:	0005      	movs	r5, r0
 8012614:	000c      	movs	r4, r1
 8012616:	4233      	tst	r3, r6
 8012618:	d006      	beq.n	8012628 <__smakebuf_r+0x1c>
 801261a:	0023      	movs	r3, r4
 801261c:	3343      	adds	r3, #67	; 0x43
 801261e:	6023      	str	r3, [r4, #0]
 8012620:	6123      	str	r3, [r4, #16]
 8012622:	2301      	movs	r3, #1
 8012624:	6163      	str	r3, [r4, #20]
 8012626:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8012628:	466a      	mov	r2, sp
 801262a:	ab01      	add	r3, sp, #4
 801262c:	f7ff ffc0 	bl	80125b0 <__swhatbuf_r>
 8012630:	9900      	ldr	r1, [sp, #0]
 8012632:	0007      	movs	r7, r0
 8012634:	0028      	movs	r0, r5
 8012636:	f7f8 f8df 	bl	800a7f8 <_malloc_r>
 801263a:	2800      	cmp	r0, #0
 801263c:	d108      	bne.n	8012650 <__smakebuf_r+0x44>
 801263e:	220c      	movs	r2, #12
 8012640:	5ea3      	ldrsh	r3, [r4, r2]
 8012642:	059a      	lsls	r2, r3, #22
 8012644:	d4ef      	bmi.n	8012626 <__smakebuf_r+0x1a>
 8012646:	2203      	movs	r2, #3
 8012648:	4393      	bics	r3, r2
 801264a:	431e      	orrs	r6, r3
 801264c:	81a6      	strh	r6, [r4, #12]
 801264e:	e7e4      	b.n	801261a <__smakebuf_r+0xe>
 8012650:	2380      	movs	r3, #128	; 0x80
 8012652:	89a2      	ldrh	r2, [r4, #12]
 8012654:	6020      	str	r0, [r4, #0]
 8012656:	4313      	orrs	r3, r2
 8012658:	81a3      	strh	r3, [r4, #12]
 801265a:	9b00      	ldr	r3, [sp, #0]
 801265c:	6120      	str	r0, [r4, #16]
 801265e:	6163      	str	r3, [r4, #20]
 8012660:	9b01      	ldr	r3, [sp, #4]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d00c      	beq.n	8012680 <__smakebuf_r+0x74>
 8012666:	0028      	movs	r0, r5
 8012668:	230e      	movs	r3, #14
 801266a:	5ee1      	ldrsh	r1, [r4, r3]
 801266c:	f000 f8a6 	bl	80127bc <_isatty_r>
 8012670:	2800      	cmp	r0, #0
 8012672:	d005      	beq.n	8012680 <__smakebuf_r+0x74>
 8012674:	2303      	movs	r3, #3
 8012676:	89a2      	ldrh	r2, [r4, #12]
 8012678:	439a      	bics	r2, r3
 801267a:	3b02      	subs	r3, #2
 801267c:	4313      	orrs	r3, r2
 801267e:	81a3      	strh	r3, [r4, #12]
 8012680:	89a3      	ldrh	r3, [r4, #12]
 8012682:	433b      	orrs	r3, r7
 8012684:	81a3      	strh	r3, [r4, #12]
 8012686:	e7ce      	b.n	8012626 <__smakebuf_r+0x1a>

08012688 <__swbuf_r>:
 8012688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801268a:	0006      	movs	r6, r0
 801268c:	000d      	movs	r5, r1
 801268e:	0014      	movs	r4, r2
 8012690:	2800      	cmp	r0, #0
 8012692:	d004      	beq.n	801269e <__swbuf_r+0x16>
 8012694:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012696:	2b00      	cmp	r3, #0
 8012698:	d101      	bne.n	801269e <__swbuf_r+0x16>
 801269a:	f7f9 fac1 	bl	800bc20 <__sinit>
 801269e:	69a3      	ldr	r3, [r4, #24]
 80126a0:	60a3      	str	r3, [r4, #8]
 80126a2:	89a3      	ldrh	r3, [r4, #12]
 80126a4:	071b      	lsls	r3, r3, #28
 80126a6:	d52e      	bpl.n	8012706 <__swbuf_r+0x7e>
 80126a8:	6923      	ldr	r3, [r4, #16]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d02b      	beq.n	8012706 <__swbuf_r+0x7e>
 80126ae:	230c      	movs	r3, #12
 80126b0:	5ee2      	ldrsh	r2, [r4, r3]
 80126b2:	2380      	movs	r3, #128	; 0x80
 80126b4:	019b      	lsls	r3, r3, #6
 80126b6:	b2ef      	uxtb	r7, r5
 80126b8:	b2ed      	uxtb	r5, r5
 80126ba:	421a      	tst	r2, r3
 80126bc:	d02c      	beq.n	8012718 <__swbuf_r+0x90>
 80126be:	6923      	ldr	r3, [r4, #16]
 80126c0:	6820      	ldr	r0, [r4, #0]
 80126c2:	1ac0      	subs	r0, r0, r3
 80126c4:	6963      	ldr	r3, [r4, #20]
 80126c6:	4283      	cmp	r3, r0
 80126c8:	dc05      	bgt.n	80126d6 <__swbuf_r+0x4e>
 80126ca:	0021      	movs	r1, r4
 80126cc:	0030      	movs	r0, r6
 80126ce:	f7fd fb39 	bl	800fd44 <_fflush_r>
 80126d2:	2800      	cmp	r0, #0
 80126d4:	d11d      	bne.n	8012712 <__swbuf_r+0x8a>
 80126d6:	68a3      	ldr	r3, [r4, #8]
 80126d8:	3001      	adds	r0, #1
 80126da:	3b01      	subs	r3, #1
 80126dc:	60a3      	str	r3, [r4, #8]
 80126de:	6823      	ldr	r3, [r4, #0]
 80126e0:	1c5a      	adds	r2, r3, #1
 80126e2:	6022      	str	r2, [r4, #0]
 80126e4:	701f      	strb	r7, [r3, #0]
 80126e6:	6963      	ldr	r3, [r4, #20]
 80126e8:	4283      	cmp	r3, r0
 80126ea:	d004      	beq.n	80126f6 <__swbuf_r+0x6e>
 80126ec:	89a3      	ldrh	r3, [r4, #12]
 80126ee:	07db      	lsls	r3, r3, #31
 80126f0:	d507      	bpl.n	8012702 <__swbuf_r+0x7a>
 80126f2:	2d0a      	cmp	r5, #10
 80126f4:	d105      	bne.n	8012702 <__swbuf_r+0x7a>
 80126f6:	0021      	movs	r1, r4
 80126f8:	0030      	movs	r0, r6
 80126fa:	f7fd fb23 	bl	800fd44 <_fflush_r>
 80126fe:	2800      	cmp	r0, #0
 8012700:	d107      	bne.n	8012712 <__swbuf_r+0x8a>
 8012702:	0028      	movs	r0, r5
 8012704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012706:	0021      	movs	r1, r4
 8012708:	0030      	movs	r0, r6
 801270a:	f7ff fe53 	bl	80123b4 <__swsetup_r>
 801270e:	2800      	cmp	r0, #0
 8012710:	d0cd      	beq.n	80126ae <__swbuf_r+0x26>
 8012712:	2501      	movs	r5, #1
 8012714:	426d      	negs	r5, r5
 8012716:	e7f4      	b.n	8012702 <__swbuf_r+0x7a>
 8012718:	4313      	orrs	r3, r2
 801271a:	81a3      	strh	r3, [r4, #12]
 801271c:	4a02      	ldr	r2, [pc, #8]	; (8012728 <__swbuf_r+0xa0>)
 801271e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012720:	4013      	ands	r3, r2
 8012722:	6663      	str	r3, [r4, #100]	; 0x64
 8012724:	e7cb      	b.n	80126be <__swbuf_r+0x36>
 8012726:	46c0      	nop			; (mov r8, r8)
 8012728:	ffffdfff 	.word	0xffffdfff

0801272c <_raise_r>:
 801272c:	b570      	push	{r4, r5, r6, lr}
 801272e:	0004      	movs	r4, r0
 8012730:	000d      	movs	r5, r1
 8012732:	291f      	cmp	r1, #31
 8012734:	d904      	bls.n	8012740 <_raise_r+0x14>
 8012736:	2316      	movs	r3, #22
 8012738:	6003      	str	r3, [r0, #0]
 801273a:	2001      	movs	r0, #1
 801273c:	4240      	negs	r0, r0
 801273e:	bd70      	pop	{r4, r5, r6, pc}
 8012740:	0003      	movs	r3, r0
 8012742:	33fc      	adds	r3, #252	; 0xfc
 8012744:	69db      	ldr	r3, [r3, #28]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d004      	beq.n	8012754 <_raise_r+0x28>
 801274a:	008a      	lsls	r2, r1, #2
 801274c:	189b      	adds	r3, r3, r2
 801274e:	681a      	ldr	r2, [r3, #0]
 8012750:	2a00      	cmp	r2, #0
 8012752:	d108      	bne.n	8012766 <_raise_r+0x3a>
 8012754:	0020      	movs	r0, r4
 8012756:	f000 f855 	bl	8012804 <_getpid_r>
 801275a:	002a      	movs	r2, r5
 801275c:	0001      	movs	r1, r0
 801275e:	0020      	movs	r0, r4
 8012760:	f000 f83e 	bl	80127e0 <_kill_r>
 8012764:	e7eb      	b.n	801273e <_raise_r+0x12>
 8012766:	2000      	movs	r0, #0
 8012768:	2a01      	cmp	r2, #1
 801276a:	d0e8      	beq.n	801273e <_raise_r+0x12>
 801276c:	1c51      	adds	r1, r2, #1
 801276e:	d103      	bne.n	8012778 <_raise_r+0x4c>
 8012770:	2316      	movs	r3, #22
 8012772:	3001      	adds	r0, #1
 8012774:	6023      	str	r3, [r4, #0]
 8012776:	e7e2      	b.n	801273e <_raise_r+0x12>
 8012778:	2400      	movs	r4, #0
 801277a:	0028      	movs	r0, r5
 801277c:	601c      	str	r4, [r3, #0]
 801277e:	4790      	blx	r2
 8012780:	0020      	movs	r0, r4
 8012782:	e7dc      	b.n	801273e <_raise_r+0x12>

08012784 <raise>:
 8012784:	b510      	push	{r4, lr}
 8012786:	4b03      	ldr	r3, [pc, #12]	; (8012794 <raise+0x10>)
 8012788:	0001      	movs	r1, r0
 801278a:	6818      	ldr	r0, [r3, #0]
 801278c:	f7ff ffce 	bl	801272c <_raise_r>
 8012790:	bd10      	pop	{r4, pc}
 8012792:	46c0      	nop			; (mov r8, r8)
 8012794:	200006d0 	.word	0x200006d0

08012798 <_fstat_r>:
 8012798:	2300      	movs	r3, #0
 801279a:	b570      	push	{r4, r5, r6, lr}
 801279c:	4d06      	ldr	r5, [pc, #24]	; (80127b8 <_fstat_r+0x20>)
 801279e:	0004      	movs	r4, r0
 80127a0:	0008      	movs	r0, r1
 80127a2:	0011      	movs	r1, r2
 80127a4:	602b      	str	r3, [r5, #0]
 80127a6:	f7f1 fa4c 	bl	8003c42 <_fstat>
 80127aa:	1c43      	adds	r3, r0, #1
 80127ac:	d103      	bne.n	80127b6 <_fstat_r+0x1e>
 80127ae:	682b      	ldr	r3, [r5, #0]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d000      	beq.n	80127b6 <_fstat_r+0x1e>
 80127b4:	6023      	str	r3, [r4, #0]
 80127b6:	bd70      	pop	{r4, r5, r6, pc}
 80127b8:	20000da8 	.word	0x20000da8

080127bc <_isatty_r>:
 80127bc:	2300      	movs	r3, #0
 80127be:	b570      	push	{r4, r5, r6, lr}
 80127c0:	4d06      	ldr	r5, [pc, #24]	; (80127dc <_isatty_r+0x20>)
 80127c2:	0004      	movs	r4, r0
 80127c4:	0008      	movs	r0, r1
 80127c6:	602b      	str	r3, [r5, #0]
 80127c8:	f7f1 fa49 	bl	8003c5e <_isatty>
 80127cc:	1c43      	adds	r3, r0, #1
 80127ce:	d103      	bne.n	80127d8 <_isatty_r+0x1c>
 80127d0:	682b      	ldr	r3, [r5, #0]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d000      	beq.n	80127d8 <_isatty_r+0x1c>
 80127d6:	6023      	str	r3, [r4, #0]
 80127d8:	bd70      	pop	{r4, r5, r6, pc}
 80127da:	46c0      	nop			; (mov r8, r8)
 80127dc:	20000da8 	.word	0x20000da8

080127e0 <_kill_r>:
 80127e0:	2300      	movs	r3, #0
 80127e2:	b570      	push	{r4, r5, r6, lr}
 80127e4:	4d06      	ldr	r5, [pc, #24]	; (8012800 <_kill_r+0x20>)
 80127e6:	0004      	movs	r4, r0
 80127e8:	0008      	movs	r0, r1
 80127ea:	0011      	movs	r1, r2
 80127ec:	602b      	str	r3, [r5, #0]
 80127ee:	f7f1 f9c9 	bl	8003b84 <_kill>
 80127f2:	1c43      	adds	r3, r0, #1
 80127f4:	d103      	bne.n	80127fe <_kill_r+0x1e>
 80127f6:	682b      	ldr	r3, [r5, #0]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d000      	beq.n	80127fe <_kill_r+0x1e>
 80127fc:	6023      	str	r3, [r4, #0]
 80127fe:	bd70      	pop	{r4, r5, r6, pc}
 8012800:	20000da8 	.word	0x20000da8

08012804 <_getpid_r>:
 8012804:	b510      	push	{r4, lr}
 8012806:	f7f1 f9b7 	bl	8003b78 <_getpid>
 801280a:	bd10      	pop	{r4, pc}

0801280c <round>:
 801280c:	b570      	push	{r4, r5, r6, lr}
 801280e:	004a      	lsls	r2, r1, #1
 8012810:	000d      	movs	r5, r1
 8012812:	4920      	ldr	r1, [pc, #128]	; (8012894 <round+0x88>)
 8012814:	0d52      	lsrs	r2, r2, #21
 8012816:	1851      	adds	r1, r2, r1
 8012818:	0006      	movs	r6, r0
 801281a:	2913      	cmp	r1, #19
 801281c:	dc18      	bgt.n	8012850 <round+0x44>
 801281e:	2900      	cmp	r1, #0
 8012820:	da09      	bge.n	8012836 <round+0x2a>
 8012822:	0feb      	lsrs	r3, r5, #31
 8012824:	2200      	movs	r2, #0
 8012826:	07db      	lsls	r3, r3, #31
 8012828:	3101      	adds	r1, #1
 801282a:	d101      	bne.n	8012830 <round+0x24>
 801282c:	491a      	ldr	r1, [pc, #104]	; (8012898 <round+0x8c>)
 801282e:	430b      	orrs	r3, r1
 8012830:	0019      	movs	r1, r3
 8012832:	0010      	movs	r0, r2
 8012834:	e017      	b.n	8012866 <round+0x5a>
 8012836:	4c19      	ldr	r4, [pc, #100]	; (801289c <round+0x90>)
 8012838:	410c      	asrs	r4, r1
 801283a:	0022      	movs	r2, r4
 801283c:	402a      	ands	r2, r5
 801283e:	4302      	orrs	r2, r0
 8012840:	d013      	beq.n	801286a <round+0x5e>
 8012842:	2280      	movs	r2, #128	; 0x80
 8012844:	0312      	lsls	r2, r2, #12
 8012846:	410a      	asrs	r2, r1
 8012848:	1953      	adds	r3, r2, r5
 801284a:	43a3      	bics	r3, r4
 801284c:	2200      	movs	r2, #0
 801284e:	e7ef      	b.n	8012830 <round+0x24>
 8012850:	2933      	cmp	r1, #51	; 0x33
 8012852:	dd0d      	ble.n	8012870 <round+0x64>
 8012854:	2380      	movs	r3, #128	; 0x80
 8012856:	00db      	lsls	r3, r3, #3
 8012858:	4299      	cmp	r1, r3
 801285a:	d106      	bne.n	801286a <round+0x5e>
 801285c:	0002      	movs	r2, r0
 801285e:	002b      	movs	r3, r5
 8012860:	0029      	movs	r1, r5
 8012862:	f7ed ffa9 	bl	80007b8 <__aeabi_dadd>
 8012866:	0006      	movs	r6, r0
 8012868:	000d      	movs	r5, r1
 801286a:	0030      	movs	r0, r6
 801286c:	0029      	movs	r1, r5
 801286e:	bd70      	pop	{r4, r5, r6, pc}
 8012870:	4c0b      	ldr	r4, [pc, #44]	; (80128a0 <round+0x94>)
 8012872:	1912      	adds	r2, r2, r4
 8012874:	2401      	movs	r4, #1
 8012876:	4264      	negs	r4, r4
 8012878:	40d4      	lsrs	r4, r2
 801287a:	4220      	tst	r0, r4
 801287c:	d0f5      	beq.n	801286a <round+0x5e>
 801287e:	2233      	movs	r2, #51	; 0x33
 8012880:	1a51      	subs	r1, r2, r1
 8012882:	3a32      	subs	r2, #50	; 0x32
 8012884:	408a      	lsls	r2, r1
 8012886:	1812      	adds	r2, r2, r0
 8012888:	4282      	cmp	r2, r0
 801288a:	4180      	sbcs	r0, r0
 801288c:	4240      	negs	r0, r0
 801288e:	182b      	adds	r3, r5, r0
 8012890:	43a2      	bics	r2, r4
 8012892:	e7cd      	b.n	8012830 <round+0x24>
 8012894:	fffffc01 	.word	0xfffffc01
 8012898:	3ff00000 	.word	0x3ff00000
 801289c:	000fffff 	.word	0x000fffff
 80128a0:	fffffbed 	.word	0xfffffbed

080128a4 <_init>:
 80128a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128a6:	46c0      	nop			; (mov r8, r8)
 80128a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128aa:	bc08      	pop	{r3}
 80128ac:	469e      	mov	lr, r3
 80128ae:	4770      	bx	lr

080128b0 <_fini>:
 80128b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128b2:	46c0      	nop			; (mov r8, r8)
 80128b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128b6:	bc08      	pop	{r3}
 80128b8:	469e      	mov	lr, r3
 80128ba:	4770      	bx	lr
