
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000127b8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020c4  08012878  08012878  00022878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801493c  0801493c  000306d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801493c  0801493c  0002493c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014944  08014944  000306d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014944  08014944  00024944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801494c  0801494c  0002494c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d8  20000000  08014950  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  200006d8  08015028  000306d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f3c  08015028  00030f3c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019e21  00000000  00000000  00030743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a9e  00000000  00000000  0004a564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001850  00000000  00000000  0004e008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001303  00000000  00000000  0004f858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c80  00000000  00000000  00050b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f181  00000000  00000000  000727db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caee4  00000000  00000000  0009195c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000072d8  00000000  00000000  0015c840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00163b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d8 	.word	0x200006d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0801285c 	.word	0x0801285c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006dc 	.word	0x200006dc
 8000100:	0801285c 	.word	0x0801285c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	080143d4 	.word	0x080143d4
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	46ce      	mov	lr, r9
 80025ac:	4647      	mov	r7, r8
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b08b      	sub	sp, #44	; 0x2c
 80025b2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b4:	f001 fc0e 	bl	8003dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b8:	f000 fa8e 	bl	8002ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025bc:	f000 fd20 	bl	8003000 <MX_GPIO_Init>
  MX_RTC_Init();
 80025c0:	f000 fae0 	bl	8002b84 <MX_RTC_Init>
  MX_TIM6_Init();
 80025c4:	f000 fbc0 	bl	8002d48 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c8:	f000 fb80 	bl	8002ccc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025cc:	f000 fbfa 	bl	8002dc4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025d0:	f000 fc46 	bl	8002e60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025d4:	f000 fc92 	bl	8002efc <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d8:	f000 fcde 	bl	8002f98 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  // Kod testowy do usunięcia
  char test[] = "3,35678\0" ;
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	4a92      	ldr	r2, [pc, #584]	; (8002828 <main+0x280>)
 80025e0:	ca03      	ldmia	r2!, {r0, r1}
 80025e2:	c303      	stmia	r3!, {r0, r1}
 80025e4:	7812      	ldrb	r2, [r2, #0]
 80025e6:	701a      	strb	r2, [r3, #0]
  if ( my_tracker_api_is_cmd ( test ) )
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	0018      	movs	r0, r3
 80025ec:	f008 f872 	bl	800a6d4 <my_tracker_api_is_cmd>
 80025f0:	1e03      	subs	r3, r0, #0
 80025f2:	d007      	beq.n	8002604 <main+0x5c>
  {
	  sys_cmd_code = my_tracker_api_get_cmd_code ( test ) ;
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	0018      	movs	r0, r3
 80025f8:	f008 f8ce 	bl	800a798 <my_tracker_api_get_cmd_code>
 80025fc:	0003      	movs	r3, r0
 80025fe:	001a      	movs	r2, r3
 8002600:	4b8a      	ldr	r3, [pc, #552]	; (800282c <main+0x284>)
 8002602:	701a      	strb	r2, [r3, #0]
  }



  send_debug_logs ( hello ) ;
 8002604:	4b8a      	ldr	r3, [pc, #552]	; (8002830 <main+0x288>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	0018      	movs	r0, r3
 800260a:	f000 fe05 	bl	8003218 <send_debug_logs>

  my_sys_init () ;
 800260e:	f000 fe33 	bl	8003278 <my_sys_init>
  sprintf ( dbg_payload , "System mode: %u\0" , sys_mode ) ;
 8002612:	4b88      	ldr	r3, [pc, #544]	; (8002834 <main+0x28c>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	001a      	movs	r2, r3
 8002618:	4987      	ldr	r1, [pc, #540]	; (8002838 <main+0x290>)
 800261a:	4b88      	ldr	r3, [pc, #544]	; (800283c <main+0x294>)
 800261c:	0018      	movs	r0, r3
 800261e:	f009 fad1 	bl	800bbc4 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 8002622:	4b86      	ldr	r3, [pc, #536]	; (800283c <main+0x294>)
 8002624:	0018      	movs	r0, r3
 8002626:	f000 fdf7 	bl	8003218 <send_debug_logs>

  my_tim_init () ;
 800262a:	f000 ffbd 	bl	80035a8 <my_tim_init>
  my_ant_sw_pos ( 2 ) ;
 800262e:	2002      	movs	r0, #2
 8002630:	f000 feaa 	bl	8003388 <my_ant_sw_pos>

  // my_gnss_verbose ( 15 ) ;

  my_gnss_sw_on () ;
 8002634:	f000 feda 	bl	80033ec <my_gnss_sw_on>
  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002638:	4b81      	ldr	r3, [pc, #516]	; (8002840 <main+0x298>)
 800263a:	0018      	movs	r0, r3
 800263c:	f006 ffc4 	bl	80095c8 <my_gnss_acq_coordinates>
 8002640:	0003      	movs	r3, r0
 8002642:	001a      	movs	r2, r3
 8002644:	4b7f      	ldr	r3, [pc, #508]	; (8002844 <main+0x29c>)
 8002646:	701a      	strb	r2, [r3, #0]
  my_gnss_sw_off () ;
 8002648:	f000 feea 	bl	8003420 <my_gnss_sw_off>
  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800264c:	4b7e      	ldr	r3, [pc, #504]	; (8002848 <main+0x2a0>)
 800264e:	0018      	movs	r0, r3
 8002650:	f007 f940 	bl	80098d4 <my_rtc_get_dt_s>
  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu\0" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 8002654:	4b7a      	ldr	r3, [pc, #488]	; (8002840 <main+0x298>)
 8002656:	7c1b      	ldrb	r3, [r3, #16]
 8002658:	001e      	movs	r6, r3
 800265a:	4b79      	ldr	r3, [pc, #484]	; (8002840 <main+0x298>)
 800265c:	689c      	ldr	r4, [r3, #8]
 800265e:	68dd      	ldr	r5, [r3, #12]
 8002660:	4b77      	ldr	r3, [pc, #476]	; (8002840 <main+0x298>)
 8002662:	8a5b      	ldrh	r3, [r3, #18]
 8002664:	4698      	mov	r8, r3
 8002666:	4b76      	ldr	r3, [pc, #472]	; (8002840 <main+0x298>)
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	213c      	movs	r1, #60	; 0x3c
 800266c:	0018      	movs	r0, r3
 800266e:	f7fd fd65 	bl	800013c <__udivsi3>
 8002672:	0003      	movs	r3, r0
 8002674:	4a75      	ldr	r2, [pc, #468]	; (800284c <main+0x2a4>)
 8002676:	4976      	ldr	r1, [pc, #472]	; (8002850 <main+0x2a8>)
 8002678:	4870      	ldr	r0, [pc, #448]	; (800283c <main+0x294>)
 800267a:	9305      	str	r3, [sp, #20]
 800267c:	4643      	mov	r3, r8
 800267e:	9304      	str	r3, [sp, #16]
 8002680:	9402      	str	r4, [sp, #8]
 8002682:	9503      	str	r5, [sp, #12]
 8002684:	9601      	str	r6, [sp, #4]
 8002686:	4b70      	ldr	r3, [pc, #448]	; (8002848 <main+0x2a0>)
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	23bd      	movs	r3, #189	; 0xbd
 800268c:	f009 fa9a 	bl	800bbc4 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 8002690:	4b6a      	ldr	r3, [pc, #424]	; (800283c <main+0x294>)
 8002692:	0018      	movs	r0, r3
 8002694:	f000 fdc0 	bl	8003218 <send_debug_logs>
  if ( !my_gnss_3dfix_flag )
 8002698:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <main+0x29c>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2201      	movs	r2, #1
 800269e:	4053      	eors	r3, r2
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d027      	beq.n	80026f6 <main+0x14e>
  {
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 80026a6:	4b6b      	ldr	r3, [pc, #428]	; (8002854 <main+0x2ac>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	0018      	movs	r0, r3
 80026ac:	f007 f954 	bl	8009958 <my_rtc_set_alarm>
 80026b0:	1e03      	subs	r3, r0, #0
 80026b2:	d020      	beq.n	80026f6 <main+0x14e>
	  {
		  sprintf ( dbg_payload , "%s,%d,HAL_PWR_EnterSTANDBYMode\0" , __FILE__ , __LINE__ ) ;
 80026b4:	4a65      	ldr	r2, [pc, #404]	; (800284c <main+0x2a4>)
 80026b6:	4968      	ldr	r1, [pc, #416]	; (8002858 <main+0x2b0>)
 80026b8:	4860      	ldr	r0, [pc, #384]	; (800283c <main+0x294>)
 80026ba:	23c3      	movs	r3, #195	; 0xc3
 80026bc:	f009 fa82 	bl	800bbc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026c0:	4b5e      	ldr	r3, [pc, #376]	; (800283c <main+0x294>)
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 fda8 	bl	8003218 <send_debug_logs>
		  my_tim_stop () ;
 80026c8:	f000 ff8a 	bl	80035e0 <my_tim_stop>
		  my_rtc_alarm_flag = false ;
 80026cc:	4b63      	ldr	r3, [pc, #396]	; (800285c <main+0x2b4>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTANDBYMode () ;
 80026d2:	f002 f847 	bl	8004764 <HAL_PWR_EnterSTANDBYMode>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80026d6:	4b5c      	ldr	r3, [pc, #368]	; (8002848 <main+0x2a0>)
 80026d8:	0018      	movs	r0, r3
 80026da:	f007 f8fb 	bl	80098d4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80026de:	4a5b      	ldr	r2, [pc, #364]	; (800284c <main+0x2a4>)
 80026e0:	495f      	ldr	r1, [pc, #380]	; (8002860 <main+0x2b8>)
 80026e2:	4856      	ldr	r0, [pc, #344]	; (800283c <main+0x294>)
 80026e4:	4b58      	ldr	r3, [pc, #352]	; (8002848 <main+0x2a0>)
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	23c9      	movs	r3, #201	; 0xc9
 80026ea:	f009 fa6b 	bl	800bbc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026ee:	4b53      	ldr	r3, [pc, #332]	; (800283c <main+0x294>)
 80026f0:	0018      	movs	r0, r3
 80026f2:	f000 fd91 	bl	8003218 <send_debug_logs>
	  }
  }

  if ( !my_astro_init () )
 80026f6:	f006 feb5 	bl	8009464 <my_astro_init>
 80026fa:	0003      	movs	r3, r0
 80026fc:	001a      	movs	r2, r3
 80026fe:	2301      	movs	r3, #1
 8002700:	4053      	eors	r3, r2
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01e      	beq.n	8002746 <main+0x19e>
  {
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002708:	4b4f      	ldr	r3, [pc, #316]	; (8002848 <main+0x2a0>)
 800270a:	0018      	movs	r0, r3
 800270c:	f007 f8e2 	bl	80098d4 <my_rtc_get_dt_s>
	  sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset\0" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002710:	4a4e      	ldr	r2, [pc, #312]	; (800284c <main+0x2a4>)
 8002712:	4954      	ldr	r1, [pc, #336]	; (8002864 <main+0x2bc>)
 8002714:	4849      	ldr	r0, [pc, #292]	; (800283c <main+0x294>)
 8002716:	4b4c      	ldr	r3, [pc, #304]	; (8002848 <main+0x2a0>)
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	23d1      	movs	r3, #209	; 0xd1
 800271c:	f009 fa52 	bl	800bbc4 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 8002720:	4b46      	ldr	r3, [pc, #280]	; (800283c <main+0x294>)
 8002722:	0018      	movs	r0, r3
 8002724:	f000 fd78 	bl	8003218 <send_debug_logs>
	  HAL_NVIC_SystemReset () ;
 8002728:	f001 fd13 	bl	8004152 <HAL_NVIC_SystemReset>
 800272c:	e0b8      	b.n	80028a0 <main+0x2f8>
  }
  else
  {
	  while ( my_astro_evt_pin () )
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin\0" , __FILE__ , __LINE__ ) ;
 800272e:	4a47      	ldr	r2, [pc, #284]	; (800284c <main+0x2a4>)
 8002730:	494d      	ldr	r1, [pc, #308]	; (8002868 <main+0x2c0>)
 8002732:	4842      	ldr	r0, [pc, #264]	; (800283c <main+0x294>)
 8002734:	23d9      	movs	r3, #217	; 0xd9
 8002736:	f009 fa45 	bl	800bbc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 800273a:	4b40      	ldr	r3, [pc, #256]	; (800283c <main+0x294>)
 800273c:	0018      	movs	r0, r3
 800273e:	f000 fd6b 	bl	8003218 <send_debug_logs>
		  my_astro_handle_evt () ;
 8002742:	f006 feef 	bl	8009524 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 8002746:	f000 ff1d 	bl	8003584 <my_astro_evt_pin>
 800274a:	1e03      	subs	r3, r0, #0
 800274c:	d1ef      	bne.n	800272e <main+0x186>
	  }
	  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s\0" , my_astro_payload_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv ) ;
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <main+0x2c4>)
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	4698      	mov	r8, r3
 8002754:	4b3a      	ldr	r3, [pc, #232]	; (8002840 <main+0x298>)
 8002756:	689c      	ldr	r4, [r3, #8]
 8002758:	68dd      	ldr	r5, [r3, #12]
 800275a:	4b39      	ldr	r3, [pc, #228]	; (8002840 <main+0x298>)
 800275c:	8a5b      	ldrh	r3, [r3, #18]
 800275e:	001e      	movs	r6, r3
 8002760:	4b37      	ldr	r3, [pc, #220]	; (8002840 <main+0x298>)
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	213c      	movs	r1, #60	; 0x3c
 8002766:	0018      	movs	r0, r3
 8002768:	f7fd fce8 	bl	800013c <__udivsi3>
 800276c:	0003      	movs	r3, r0
 800276e:	001a      	movs	r2, r3
 8002770:	4b3f      	ldr	r3, [pc, #252]	; (8002870 <main+0x2c8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	493f      	ldr	r1, [pc, #252]	; (8002874 <main+0x2cc>)
 8002776:	4840      	ldr	r0, [pc, #256]	; (8002878 <main+0x2d0>)
 8002778:	9304      	str	r3, [sp, #16]
 800277a:	9203      	str	r2, [sp, #12]
 800277c:	9602      	str	r6, [sp, #8]
 800277e:	9400      	str	r4, [sp, #0]
 8002780:	9501      	str	r5, [sp, #4]
 8002782:	4642      	mov	r2, r8
 8002784:	f009 fa1e 	bl	800bbc4 <sprintf>
	  sprintf ( dbg_payload , "%s,%d,payload: %s\0" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8002788:	4a30      	ldr	r2, [pc, #192]	; (800284c <main+0x2a4>)
 800278a:	493c      	ldr	r1, [pc, #240]	; (800287c <main+0x2d4>)
 800278c:	482b      	ldr	r0, [pc, #172]	; (800283c <main+0x294>)
 800278e:	4b3a      	ldr	r3, [pc, #232]	; (8002878 <main+0x2d0>)
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	23de      	movs	r3, #222	; 0xde
 8002794:	f009 fa16 	bl	800bbc4 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 8002798:	4b28      	ldr	r3, [pc, #160]	; (800283c <main+0x294>)
 800279a:	0018      	movs	r0, r3
 800279c:	f000 fd3c 	bl	8003218 <send_debug_logs>
	  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80027a0:	4b27      	ldr	r3, [pc, #156]	; (8002840 <main+0x298>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b26      	ldr	r3, [pc, #152]	; (8002840 <main+0x298>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	0019      	movs	r1, r3
 80027aa:	0010      	movs	r0, r2
 80027ac:	f006 fefc 	bl	80095a8 <my_astro_write_coordinates>
	  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 80027b0:	4b2e      	ldr	r3, [pc, #184]	; (800286c <main+0x2c4>)
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	b291      	uxth	r1, r2
 80027b8:	4a2c      	ldr	r2, [pc, #176]	; (800286c <main+0x2c4>)
 80027ba:	8011      	strh	r1, [r2, #0]
 80027bc:	4a2e      	ldr	r2, [pc, #184]	; (8002878 <main+0x2d0>)
 80027be:	0011      	movs	r1, r2
 80027c0:	0018      	movs	r0, r3
 80027c2:	f006 fe87 	bl	80094d4 <my_astro_add_payload_2_queue>
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 80027c6:	4b23      	ldr	r3, [pc, #140]	; (8002854 <main+0x2ac>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	0018      	movs	r0, r3
 80027cc:	f007 f8c4 	bl	8009958 <my_rtc_set_alarm>
 80027d0:	1e03      	subs	r3, r0, #0
 80027d2:	d065      	beq.n	80028a0 <main+0x2f8>
	  {
		  sprintf ( dbg_payload , "%s,%d,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE\0" , __FILE__ , __LINE__ ) ;
 80027d4:	4a1d      	ldr	r2, [pc, #116]	; (800284c <main+0x2a4>)
 80027d6:	492a      	ldr	r1, [pc, #168]	; (8002880 <main+0x2d8>)
 80027d8:	4818      	ldr	r0, [pc, #96]	; (800283c <main+0x294>)
 80027da:	23e4      	movs	r3, #228	; 0xe4
 80027dc:	f009 f9f2 	bl	800bbc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80027e0:	4b16      	ldr	r3, [pc, #88]	; (800283c <main+0x294>)
 80027e2:	0018      	movs	r0, r3
 80027e4:	f000 fd18 	bl	8003218 <send_debug_logs>
		  my_tim_stop () ;
 80027e8:	f000 fefa 	bl	80035e0 <my_tim_stop>
		  HAL_SuspendTick () ;
 80027ec:	f001 fb9c 	bl	8003f28 <HAL_SuspendTick>
		  my_rtc_alarm_flag = false ;
 80027f0:	4b1a      	ldr	r3, [pc, #104]	; (800285c <main+0x2b4>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	01db      	lsls	r3, r3, #7
 80027fa:	2102      	movs	r1, #2
 80027fc:	0018      	movs	r0, r3
 80027fe:	f001 ff79 	bl	80046f4 <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 8002802:	f001 fb9f 	bl	8003f44 <HAL_ResumeTick>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <main+0x2a0>)
 8002808:	0018      	movs	r0, r3
 800280a:	f007 f863 	bl	80098d4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s, Wake-up\0" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800280e:	4a0f      	ldr	r2, [pc, #60]	; (800284c <main+0x2a4>)
 8002810:	491c      	ldr	r1, [pc, #112]	; (8002884 <main+0x2dc>)
 8002812:	480a      	ldr	r0, [pc, #40]	; (800283c <main+0x294>)
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <main+0x2a0>)
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	23ec      	movs	r3, #236	; 0xec
 800281a:	f009 f9d3 	bl	800bbc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <main+0x294>)
 8002820:	0018      	movs	r0, r3
 8002822:	f000 fcf9 	bl	8003218 <send_debug_logs>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( my_astro_evt_pin () )
 8002826:	e03b      	b.n	80028a0 <main+0x2f8>
 8002828:	08012a60 	.word	0x08012a60
 800282c:	20000a23 	.word	0x20000a23
 8002830:	20000000 	.word	0x20000000
 8002834:	20000a22 	.word	0x20000a22
 8002838:	080128a4 	.word	0x080128a4
 800283c:	20000b08 	.word	0x20000b08
 8002840:	20000ae0 	.word	0x20000ae0
 8002844:	20000af9 	.word	0x20000af9
 8002848:	20000a24 	.word	0x20000a24
 800284c:	080128b8 	.word	0x080128b8
 8002850:	080128cc 	.word	0x080128cc
 8002854:	20000008 	.word	0x20000008
 8002858:	0801290c 	.word	0x0801290c
 800285c:	20000af8 	.word	0x20000af8
 8002860:	0801292c 	.word	0x0801292c
 8002864:	08012938 	.word	0x08012938
 8002868:	08012958 	.word	0x08012958
 800286c:	20000a38 	.word	0x20000a38
 8002870:	20000004 	.word	0x20000004
 8002874:	08012970 	.word	0x08012970
 8002878:	20000a3c 	.word	0x20000a3c
 800287c:	08012984 	.word	0x08012984
 8002880:	08012998 	.word	0x08012998
 8002884:	080129cc 	.word	0x080129cc
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin\0" , __FILE__ , __LINE__ ) ;
 8002888:	4a80      	ldr	r2, [pc, #512]	; (8002a8c <main+0x4e4>)
 800288a:	4981      	ldr	r1, [pc, #516]	; (8002a90 <main+0x4e8>)
 800288c:	4881      	ldr	r0, [pc, #516]	; (8002a94 <main+0x4ec>)
 800288e:	23f9      	movs	r3, #249	; 0xf9
 8002890:	f009 f998 	bl	800bbc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002894:	4b7f      	ldr	r3, [pc, #508]	; (8002a94 <main+0x4ec>)
 8002896:	0018      	movs	r0, r3
 8002898:	f000 fcbe 	bl	8003218 <send_debug_logs>
		  my_astro_handle_evt () ;
 800289c:	f006 fe42 	bl	8009524 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 80028a0:	f000 fe70 	bl	8003584 <my_astro_evt_pin>
 80028a4:	1e03      	subs	r3, r0, #0
 80028a6:	d1ef      	bne.n	8002888 <main+0x2e0>
	  }
	  if ( astro_rcv_cmd_flag )
 80028a8:	4b7b      	ldr	r3, [pc, #492]	; (8002a98 <main+0x4f0>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d028      	beq.n	8002902 <main+0x35a>
	  {
		  astro_rcv_cmd_flag = false ;
 80028b0:	4b79      	ldr	r3, [pc, #484]	; (8002a98 <main+0x4f0>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
		  if ( my_tracker_api_is_cmd ( test ) )
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	0018      	movs	r0, r3
 80028ba:	f007 ff0b 	bl	800a6d4 <my_tracker_api_is_cmd>
 80028be:	1e03      	subs	r3, r0, #0
 80028c0:	d01c      	beq.n	80028fc <main+0x354>
		  {
			  if ( strstr ( my_astro_rcv_cmd , (char*) SYS_RESET_CMD ) )
 80028c2:	4a76      	ldr	r2, [pc, #472]	; (8002a9c <main+0x4f4>)
 80028c4:	4b76      	ldr	r3, [pc, #472]	; (8002aa0 <main+0x4f8>)
 80028c6:	0011      	movs	r1, r2
 80028c8:	0018      	movs	r0, r3
 80028ca:	f009 fa72 	bl	800bdb2 <strstr>
 80028ce:	1e03      	subs	r3, r0, #0
 80028d0:	d014      	beq.n	80028fc <main+0x354>
			  {
				  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80028d2:	4b74      	ldr	r3, [pc, #464]	; (8002aa4 <main+0x4fc>)
 80028d4:	0018      	movs	r0, r3
 80028d6:	f006 fffd 	bl	80098d4 <my_rtc_get_dt_s>
				  sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80028da:	2306      	movs	r3, #6
 80028dc:	33ff      	adds	r3, #255	; 0xff
 80028de:	001c      	movs	r4, r3
 80028e0:	4a6a      	ldr	r2, [pc, #424]	; (8002a8c <main+0x4e4>)
 80028e2:	4971      	ldr	r1, [pc, #452]	; (8002aa8 <main+0x500>)
 80028e4:	486b      	ldr	r0, [pc, #428]	; (8002a94 <main+0x4ec>)
 80028e6:	4b6f      	ldr	r3, [pc, #444]	; (8002aa4 <main+0x4fc>)
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	0023      	movs	r3, r4
 80028ec:	f009 f96a 	bl	800bbc4 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80028f0:	4b68      	ldr	r3, [pc, #416]	; (8002a94 <main+0x4ec>)
 80028f2:	0018      	movs	r0, r3
 80028f4:	f000 fc90 	bl	8003218 <send_debug_logs>
				  HAL_NVIC_SystemReset () ;
 80028f8:	f001 fc2b 	bl	8004152 <HAL_NVIC_SystemReset>
			  }
		  }
		  my_astro_rcv_cmd[0] = 0 ;
 80028fc:	4b68      	ldr	r3, [pc, #416]	; (8002aa0 <main+0x4f8>)
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
	  }
	  if ( my_rtc_alarm_flag )
 8002902:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <main+0x504>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d100      	bne.n	800290c <main+0x364>
 800290a:	e080      	b.n	8002a0e <main+0x466>
	  {
		  my_rtc_alarm_flag = false ;
 800290c:	4b67      	ldr	r3, [pc, #412]	; (8002aac <main+0x504>)
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_on () ;
 8002912:	f000 fd6b 	bl	80033ec <my_gnss_sw_on>
		  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002916:	4b66      	ldr	r3, [pc, #408]	; (8002ab0 <main+0x508>)
 8002918:	0018      	movs	r0, r3
 800291a:	f006 fe55 	bl	80095c8 <my_gnss_acq_coordinates>
 800291e:	0003      	movs	r3, r0
 8002920:	001a      	movs	r2, r3
 8002922:	4b64      	ldr	r3, [pc, #400]	; (8002ab4 <main+0x50c>)
 8002924:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_off () ;
 8002926:	f000 fd7b 	bl	8003420 <my_gnss_sw_off>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800292a:	4b5e      	ldr	r3, [pc, #376]	; (8002aa4 <main+0x4fc>)
 800292c:	0018      	movs	r0, r3
 800292e:	f006 ffd1 	bl	80098d4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu\0" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 8002932:	4b5f      	ldr	r3, [pc, #380]	; (8002ab0 <main+0x508>)
 8002934:	7c1b      	ldrb	r3, [r3, #16]
 8002936:	4698      	mov	r8, r3
 8002938:	4b5d      	ldr	r3, [pc, #372]	; (8002ab0 <main+0x508>)
 800293a:	689c      	ldr	r4, [r3, #8]
 800293c:	68dd      	ldr	r5, [r3, #12]
 800293e:	4b5c      	ldr	r3, [pc, #368]	; (8002ab0 <main+0x508>)
 8002940:	8a5b      	ldrh	r3, [r3, #18]
 8002942:	4699      	mov	r9, r3
 8002944:	4b5a      	ldr	r3, [pc, #360]	; (8002ab0 <main+0x508>)
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	213c      	movs	r1, #60	; 0x3c
 800294a:	0018      	movs	r0, r3
 800294c:	f7fd fbf6 	bl	800013c <__udivsi3>
 8002950:	0003      	movs	r3, r0
 8002952:	469c      	mov	ip, r3
 8002954:	2314      	movs	r3, #20
 8002956:	33ff      	adds	r3, #255	; 0xff
 8002958:	001e      	movs	r6, r3
 800295a:	4a4c      	ldr	r2, [pc, #304]	; (8002a8c <main+0x4e4>)
 800295c:	4956      	ldr	r1, [pc, #344]	; (8002ab8 <main+0x510>)
 800295e:	484d      	ldr	r0, [pc, #308]	; (8002a94 <main+0x4ec>)
 8002960:	4663      	mov	r3, ip
 8002962:	9305      	str	r3, [sp, #20]
 8002964:	464b      	mov	r3, r9
 8002966:	9304      	str	r3, [sp, #16]
 8002968:	9402      	str	r4, [sp, #8]
 800296a:	9503      	str	r5, [sp, #12]
 800296c:	4643      	mov	r3, r8
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	4b4c      	ldr	r3, [pc, #304]	; (8002aa4 <main+0x4fc>)
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	0033      	movs	r3, r6
 8002976:	f009 f925 	bl	800bbc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 800297a:	4b46      	ldr	r3, [pc, #280]	; (8002a94 <main+0x4ec>)
 800297c:	0018      	movs	r0, r3
 800297e:	f000 fc4b 	bl	8003218 <send_debug_logs>
		  if ( my_gnss_3dfix_flag )
 8002982:	4b4c      	ldr	r3, [pc, #304]	; (8002ab4 <main+0x50c>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d041      	beq.n	8002a0e <main+0x466>
		  {
			  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 800298a:	4b49      	ldr	r3, [pc, #292]	; (8002ab0 <main+0x508>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4b48      	ldr	r3, [pc, #288]	; (8002ab0 <main+0x508>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	0019      	movs	r1, r3
 8002994:	0010      	movs	r0, r2
 8002996:	f006 fe07 	bl	80095a8 <my_astro_write_coordinates>
			  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%ld,%ld\0" , my_astro_payload_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 800299a:	4b48      	ldr	r3, [pc, #288]	; (8002abc <main+0x514>)
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	4698      	mov	r8, r3
 80029a0:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <main+0x508>)
 80029a2:	689c      	ldr	r4, [r3, #8]
 80029a4:	68dd      	ldr	r5, [r3, #12]
 80029a6:	4b42      	ldr	r3, [pc, #264]	; (8002ab0 <main+0x508>)
 80029a8:	8a5b      	ldrh	r3, [r3, #18]
 80029aa:	001e      	movs	r6, r3
 80029ac:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <main+0x508>)
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	213c      	movs	r1, #60	; 0x3c
 80029b2:	0018      	movs	r0, r3
 80029b4:	f7fd fbc2 	bl	800013c <__udivsi3>
 80029b8:	0003      	movs	r3, r0
 80029ba:	469c      	mov	ip, r3
 80029bc:	4b3c      	ldr	r3, [pc, #240]	; (8002ab0 <main+0x508>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b3b      	ldr	r3, [pc, #236]	; (8002ab0 <main+0x508>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	493e      	ldr	r1, [pc, #248]	; (8002ac0 <main+0x518>)
 80029c6:	483f      	ldr	r0, [pc, #252]	; (8002ac4 <main+0x51c>)
 80029c8:	9305      	str	r3, [sp, #20]
 80029ca:	9204      	str	r2, [sp, #16]
 80029cc:	4663      	mov	r3, ip
 80029ce:	9303      	str	r3, [sp, #12]
 80029d0:	9602      	str	r6, [sp, #8]
 80029d2:	9400      	str	r4, [sp, #0]
 80029d4:	9501      	str	r5, [sp, #4]
 80029d6:	4642      	mov	r2, r8
 80029d8:	f009 f8f4 	bl	800bbc4 <sprintf>
			  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 80029dc:	4b37      	ldr	r3, [pc, #220]	; (8002abc <main+0x514>)
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	b291      	uxth	r1, r2
 80029e4:	4a35      	ldr	r2, [pc, #212]	; (8002abc <main+0x514>)
 80029e6:	8011      	strh	r1, [r2, #0]
 80029e8:	4a36      	ldr	r2, [pc, #216]	; (8002ac4 <main+0x51c>)
 80029ea:	0011      	movs	r1, r2
 80029ec:	0018      	movs	r0, r3
 80029ee:	f006 fd71 	bl	80094d4 <my_astro_add_payload_2_queue>
			  sprintf ( dbg_payload , "%s,%d,payload: %s\0" , __FILE__ , __LINE__ , my_astro_payload ) ;
 80029f2:	238d      	movs	r3, #141	; 0x8d
 80029f4:	005c      	lsls	r4, r3, #1
 80029f6:	4a25      	ldr	r2, [pc, #148]	; (8002a8c <main+0x4e4>)
 80029f8:	4933      	ldr	r1, [pc, #204]	; (8002ac8 <main+0x520>)
 80029fa:	4826      	ldr	r0, [pc, #152]	; (8002a94 <main+0x4ec>)
 80029fc:	4b31      	ldr	r3, [pc, #196]	; (8002ac4 <main+0x51c>)
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	0023      	movs	r3, r4
 8002a02:	f009 f8df 	bl	800bbc4 <sprintf>
			  send_debug_logs ( dbg_payload ) ;
 8002a06:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <main+0x4ec>)
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 fc05 	bl	8003218 <send_debug_logs>
		  }
	  }
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 8002a0e:	4b2f      	ldr	r3, [pc, #188]	; (8002acc <main+0x524>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f006 ffa0 	bl	8009958 <my_rtc_set_alarm>
 8002a18:	1e03      	subs	r3, r0, #0
 8002a1a:	d100      	bne.n	8002a1e <main+0x476>
 8002a1c:	e740      	b.n	80028a0 <main+0x2f8>
	  {
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <main+0x4fc>)
 8002a20:	0018      	movs	r0, r3
 8002a22:	f006 ff57 	bl	80098d4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE\0" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002a26:	2322      	movs	r3, #34	; 0x22
 8002a28:	33ff      	adds	r3, #255	; 0xff
 8002a2a:	001c      	movs	r4, r3
 8002a2c:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <main+0x4e4>)
 8002a2e:	4928      	ldr	r1, [pc, #160]	; (8002ad0 <main+0x528>)
 8002a30:	4818      	ldr	r0, [pc, #96]	; (8002a94 <main+0x4ec>)
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <main+0x4fc>)
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	0023      	movs	r3, r4
 8002a38:	f009 f8c4 	bl	800bbc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002a3c:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <main+0x4ec>)
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 fbea 	bl	8003218 <send_debug_logs>
		  my_tim_stop () ;
 8002a44:	f000 fdcc 	bl	80035e0 <my_tim_stop>
		  HAL_SuspendTick () ;
 8002a48:	f001 fa6e 	bl	8003f28 <HAL_SuspendTick>
		  my_rtc_alarm_flag = false ;
 8002a4c:	4b17      	ldr	r3, [pc, #92]	; (8002aac <main+0x504>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	01db      	lsls	r3, r3, #7
 8002a56:	2102      	movs	r1, #2
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f001 fe4b 	bl	80046f4 <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 8002a5e:	f001 fa71 	bl	8003f44 <HAL_ResumeTick>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <main+0x4fc>)
 8002a64:	0018      	movs	r0, r3
 8002a66:	f006 ff35 	bl	80098d4 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s\0" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002a6a:	232a      	movs	r3, #42	; 0x2a
 8002a6c:	33ff      	adds	r3, #255	; 0xff
 8002a6e:	001c      	movs	r4, r3
 8002a70:	4a06      	ldr	r2, [pc, #24]	; (8002a8c <main+0x4e4>)
 8002a72:	4918      	ldr	r1, [pc, #96]	; (8002ad4 <main+0x52c>)
 8002a74:	4807      	ldr	r0, [pc, #28]	; (8002a94 <main+0x4ec>)
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <main+0x4fc>)
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	0023      	movs	r3, r4
 8002a7c:	f009 f8a2 	bl	800bbc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <main+0x4ec>)
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 fbc8 	bl	8003218 <send_debug_logs>
	  while ( my_astro_evt_pin () )
 8002a88:	e70a      	b.n	80028a0 <main+0x2f8>
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	080128b8 	.word	0x080128b8
 8002a90:	08012958 	.word	0x08012958
 8002a94:	20000b08 	.word	0x20000b08
 8002a98:	20000c02 	.word	0x20000c02
 8002a9c:	080129e0 	.word	0x080129e0
 8002aa0:	20000c04 	.word	0x20000c04
 8002aa4:	20000a24 	.word	0x20000a24
 8002aa8:	080129e4 	.word	0x080129e4
 8002aac:	20000af8 	.word	0x20000af8
 8002ab0:	20000ae0 	.word	0x20000ae0
 8002ab4:	20000af9 	.word	0x20000af9
 8002ab8:	080128cc 	.word	0x080128cc
 8002abc:	20000a38 	.word	0x20000a38
 8002ac0:	08012a04 	.word	0x08012a04
 8002ac4:	20000a3c 	.word	0x20000a3c
 8002ac8:	08012984 	.word	0x08012984
 8002acc:	20000008 	.word	0x20000008
 8002ad0:	08012a1c 	.word	0x08012a1c
 8002ad4:	08012a54 	.word	0x08012a54

08002ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ad8:	b590      	push	{r4, r7, lr}
 8002ada:	b095      	sub	sp, #84	; 0x54
 8002adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ade:	2414      	movs	r4, #20
 8002ae0:	193b      	adds	r3, r7, r4
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	233c      	movs	r3, #60	; 0x3c
 8002ae6:	001a      	movs	r2, r3
 8002ae8:	2100      	movs	r1, #0
 8002aea:	f009 f901 	bl	800bcf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	0018      	movs	r0, r3
 8002af2:	2310      	movs	r3, #16
 8002af4:	001a      	movs	r2, r3
 8002af6:	2100      	movs	r1, #0
 8002af8:	f009 f8fa 	bl	800bcf0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	0018      	movs	r0, r3
 8002b02:	f001 fe49 	bl	8004798 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002b06:	f001 fde7 	bl	80046d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <SystemClock_Config+0xa8>)
 8002b0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b0e:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <SystemClock_Config+0xa8>)
 8002b10:	2118      	movs	r1, #24
 8002b12:	438a      	bics	r2, r1
 8002b14:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002b16:	193b      	adds	r3, r7, r4
 8002b18:	2206      	movs	r2, #6
 8002b1a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002b1c:	193b      	adds	r3, r7, r4
 8002b1e:	2201      	movs	r2, #1
 8002b20:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b22:	193b      	adds	r3, r7, r4
 8002b24:	2280      	movs	r2, #128	; 0x80
 8002b26:	0052      	lsls	r2, r2, #1
 8002b28:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002b2a:	193b      	adds	r3, r7, r4
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b30:	193b      	adds	r3, r7, r4
 8002b32:	2240      	movs	r2, #64	; 0x40
 8002b34:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b36:	193b      	adds	r3, r7, r4
 8002b38:	2200      	movs	r2, #0
 8002b3a:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b3c:	193b      	adds	r3, r7, r4
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f001 fe76 	bl	8004830 <HAL_RCC_OscConfig>
 8002b44:	1e03      	subs	r3, r0, #0
 8002b46:	d001      	beq.n	8002b4c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002b48:	f000 fda8 	bl	800369c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	2207      	movs	r2, #7
 8002b50:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	2200      	movs	r2, #0
 8002b56:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b58:	1d3b      	adds	r3, r7, #4
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	2200      	movs	r2, #0
 8002b62:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	2100      	movs	r1, #0
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f002 f9c1 	bl	8004ef0 <HAL_RCC_ClockConfig>
 8002b6e:	1e03      	subs	r3, r0, #0
 8002b70:	d001      	beq.n	8002b76 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002b72:	f000 fd93 	bl	800369c <Error_Handler>
  }
}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b015      	add	sp, #84	; 0x54
 8002b7c:	bd90      	pop	{r4, r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	40021000 	.word	0x40021000

08002b84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b090      	sub	sp, #64	; 0x40
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002b8a:	232c      	movs	r3, #44	; 0x2c
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	0018      	movs	r0, r3
 8002b90:	2314      	movs	r3, #20
 8002b92:	001a      	movs	r2, r3
 8002b94:	2100      	movs	r1, #0
 8002b96:	f009 f8ab 	bl	800bcf0 <memset>
  RTC_DateTypeDef sDate = {0};
 8002b9a:	2328      	movs	r3, #40	; 0x28
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002ba2:	003b      	movs	r3, r7
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	2328      	movs	r3, #40	; 0x28
 8002ba8:	001a      	movs	r2, r3
 8002baa:	2100      	movs	r1, #0
 8002bac:	f009 f8a0 	bl	800bcf0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002bb0:	4b44      	ldr	r3, [pc, #272]	; (8002cc4 <MX_RTC_Init+0x140>)
 8002bb2:	4a45      	ldr	r2, [pc, #276]	; (8002cc8 <MX_RTC_Init+0x144>)
 8002bb4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002bb6:	4b43      	ldr	r3, [pc, #268]	; (8002cc4 <MX_RTC_Init+0x140>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002bbc:	4b41      	ldr	r3, [pc, #260]	; (8002cc4 <MX_RTC_Init+0x140>)
 8002bbe:	227f      	movs	r2, #127	; 0x7f
 8002bc0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002bc2:	4b40      	ldr	r3, [pc, #256]	; (8002cc4 <MX_RTC_Init+0x140>)
 8002bc4:	22ff      	movs	r2, #255	; 0xff
 8002bc6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002bc8:	4b3e      	ldr	r3, [pc, #248]	; (8002cc4 <MX_RTC_Init+0x140>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002bce:	4b3d      	ldr	r3, [pc, #244]	; (8002cc4 <MX_RTC_Init+0x140>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002bd4:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <MX_RTC_Init+0x140>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002bda:	4b3a      	ldr	r3, [pc, #232]	; (8002cc4 <MX_RTC_Init+0x140>)
 8002bdc:	2280      	movs	r2, #128	; 0x80
 8002bde:	05d2      	lsls	r2, r2, #23
 8002be0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002be2:	4b38      	ldr	r3, [pc, #224]	; (8002cc4 <MX_RTC_Init+0x140>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002be8:	4b36      	ldr	r3, [pc, #216]	; (8002cc4 <MX_RTC_Init+0x140>)
 8002bea:	0018      	movs	r0, r3
 8002bec:	f002 fd66 	bl	80056bc <HAL_RTC_Init>
 8002bf0:	1e03      	subs	r3, r0, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002bf4:	f000 fd52 	bl	800369c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	187b      	adds	r3, r7, r1
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002c00:	187b      	adds	r3, r7, r1
 8002c02:	2200      	movs	r2, #0
 8002c04:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002c06:	187b      	adds	r3, r7, r1
 8002c08:	2200      	movs	r2, #0
 8002c0a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002c0c:	187b      	adds	r3, r7, r1
 8002c0e:	2200      	movs	r2, #0
 8002c10:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c12:	187b      	adds	r3, r7, r1
 8002c14:	2200      	movs	r2, #0
 8002c16:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c18:	187b      	adds	r3, r7, r1
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002c1e:	1879      	adds	r1, r7, r1
 8002c20:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <MX_RTC_Init+0x140>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	0018      	movs	r0, r3
 8002c26:	f002 fdeb 	bl	8005800 <HAL_RTC_SetTime>
 8002c2a:	1e03      	subs	r3, r0, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002c2e:	f000 fd35 	bl	800369c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002c32:	2128      	movs	r1, #40	; 0x28
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	2206      	movs	r2, #6
 8002c38:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002c3a:	187b      	adds	r3, r7, r1
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002c40:	187b      	adds	r3, r7, r1
 8002c42:	2201      	movs	r2, #1
 8002c44:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002c46:	187b      	adds	r3, r7, r1
 8002c48:	2200      	movs	r2, #0
 8002c4a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002c4c:	1879      	adds	r1, r7, r1
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <MX_RTC_Init+0x140>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	0018      	movs	r0, r3
 8002c54:	f002 fed8 	bl	8005a08 <HAL_RTC_SetDate>
 8002c58:	1e03      	subs	r3, r0, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002c5c:	f000 fd1e 	bl	800369c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002c60:	003b      	movs	r3, r7
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002c66:	003b      	movs	r3, r7
 8002c68:	2200      	movs	r2, #0
 8002c6a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002c6c:	003b      	movs	r3, r7
 8002c6e:	2200      	movs	r2, #0
 8002c70:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002c72:	003b      	movs	r3, r7
 8002c74:	2200      	movs	r2, #0
 8002c76:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c78:	003b      	movs	r3, r7
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c7e:	003b      	movs	r3, r7
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002c84:	003b      	movs	r3, r7
 8002c86:	2200      	movs	r2, #0
 8002c88:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002c8a:	003b      	movs	r3, r7
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002c90:	003b      	movs	r3, r7
 8002c92:	2200      	movs	r2, #0
 8002c94:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002c96:	003b      	movs	r3, r7
 8002c98:	2220      	movs	r2, #32
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002c9e:	003b      	movs	r3, r7
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	0052      	lsls	r2, r2, #1
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002ca6:	0039      	movs	r1, r7
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <MX_RTC_Init+0x140>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	0018      	movs	r0, r3
 8002cae:	f002 ff8b 	bl	8005bc8 <HAL_RTC_SetAlarm_IT>
 8002cb2:	1e03      	subs	r3, r0, #0
 8002cb4:	d001      	beq.n	8002cba <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002cb6:	f000 fcf1 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b010      	add	sp, #64	; 0x40
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	200006f4 	.word	0x200006f4
 8002cc8:	40002800 	.word	0x40002800

08002ccc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <MX_SPI1_Init+0x74>)
 8002cd2:	4a1c      	ldr	r2, [pc, #112]	; (8002d44 <MX_SPI1_Init+0x78>)
 8002cd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cd6:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <MX_SPI1_Init+0x74>)
 8002cd8:	2282      	movs	r2, #130	; 0x82
 8002cda:	0052      	lsls	r2, r2, #1
 8002cdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <MX_SPI1_Init+0x74>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <MX_SPI1_Init+0x74>)
 8002ce6:	22e0      	movs	r2, #224	; 0xe0
 8002ce8:	00d2      	lsls	r2, r2, #3
 8002cea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cec:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <MX_SPI1_Init+0x74>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cf2:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <MX_SPI1_Init+0x74>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <MX_SPI1_Init+0x74>)
 8002cfa:	2280      	movs	r2, #128	; 0x80
 8002cfc:	0092      	lsls	r2, r2, #2
 8002cfe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <MX_SPI1_Init+0x74>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d06:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <MX_SPI1_Init+0x74>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <MX_SPI1_Init+0x74>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d12:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <MX_SPI1_Init+0x74>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d18:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <MX_SPI1_Init+0x74>)
 8002d1a:	2207      	movs	r2, #7
 8002d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <MX_SPI1_Init+0x74>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <MX_SPI1_Init+0x74>)
 8002d26:	2208      	movs	r2, #8
 8002d28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <MX_SPI1_Init+0x74>)
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f003 fa2b 	bl	8006188 <HAL_SPI_Init>
 8002d32:	1e03      	subs	r3, r0, #0
 8002d34:	d001      	beq.n	8002d3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d36:	f000 fcb1 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000720 	.word	0x20000720
 8002d44:	40013000 	.word	0x40013000

08002d48 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d4e:	1d3b      	adds	r3, r7, #4
 8002d50:	0018      	movs	r0, r3
 8002d52:	230c      	movs	r3, #12
 8002d54:	001a      	movs	r2, r3
 8002d56:	2100      	movs	r1, #0
 8002d58:	f008 ffca 	bl	800bcf0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d5c:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <MX_TIM6_Init+0x6c>)
 8002d5e:	4a16      	ldr	r2, [pc, #88]	; (8002db8 <MX_TIM6_Init+0x70>)
 8002d60:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002d62:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <MX_TIM6_Init+0x6c>)
 8002d64:	4a15      	ldr	r2, [pc, #84]	; (8002dbc <MX_TIM6_Init+0x74>)
 8002d66:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d68:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <MX_TIM6_Init+0x6c>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <MX_TIM6_Init+0x6c>)
 8002d70:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <MX_TIM6_Init+0x78>)
 8002d72:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d74:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <MX_TIM6_Init+0x6c>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <MX_TIM6_Init+0x6c>)
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f003 fabb 	bl	80062f8 <HAL_TIM_Base_Init>
 8002d82:	1e03      	subs	r3, r0, #0
 8002d84:	d001      	beq.n	8002d8a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002d86:	f000 fc89 	bl	800369c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d8a:	1d3b      	adds	r3, r7, #4
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d96:	1d3a      	adds	r2, r7, #4
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <MX_TIM6_Init+0x6c>)
 8002d9a:	0011      	movs	r1, r2
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f003 fd53 	bl	8006848 <HAL_TIMEx_MasterConfigSynchronization>
 8002da2:	1e03      	subs	r3, r0, #0
 8002da4:	d001      	beq.n	8002daa <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002da6:	f000 fc79 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b004      	add	sp, #16
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	20000784 	.word	0x20000784
 8002db8:	40001000 	.word	0x40001000
 8002dbc:	00003e7f 	.word	0x00003e7f
 8002dc0:	000003e7 	.word	0x000003e7

08002dc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002dc8:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <MX_USART1_UART_Init+0x94>)
 8002dca:	4a24      	ldr	r2, [pc, #144]	; (8002e5c <MX_USART1_UART_Init+0x98>)
 8002dcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002dce:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <MX_USART1_UART_Init+0x94>)
 8002dd0:	22e1      	movs	r2, #225	; 0xe1
 8002dd2:	0252      	lsls	r2, r2, #9
 8002dd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dd6:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <MX_USART1_UART_Init+0x94>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ddc:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <MX_USART1_UART_Init+0x94>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002de2:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <MX_USART1_UART_Init+0x94>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002de8:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <MX_USART1_UART_Init+0x94>)
 8002dea:	220c      	movs	r2, #12
 8002dec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dee:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <MX_USART1_UART_Init+0x94>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002df4:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <MX_USART1_UART_Init+0x94>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dfa:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <MX_USART1_UART_Init+0x94>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e00:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <MX_USART1_UART_Init+0x94>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e06:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <MX_USART1_UART_Init+0x94>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e0c:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <MX_USART1_UART_Init+0x94>)
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f003 fda8 	bl	8006964 <HAL_UART_Init>
 8002e14:	1e03      	subs	r3, r0, #0
 8002e16:	d001      	beq.n	8002e1c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002e18:	f000 fc40 	bl	800369c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <MX_USART1_UART_Init+0x94>)
 8002e1e:	2100      	movs	r1, #0
 8002e20:	0018      	movs	r0, r3
 8002e22:	f004 fd83 	bl	800792c <HAL_UARTEx_SetTxFifoThreshold>
 8002e26:	1e03      	subs	r3, r0, #0
 8002e28:	d001      	beq.n	8002e2e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002e2a:	f000 fc37 	bl	800369c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <MX_USART1_UART_Init+0x94>)
 8002e30:	2100      	movs	r1, #0
 8002e32:	0018      	movs	r0, r3
 8002e34:	f004 fdba 	bl	80079ac <HAL_UARTEx_SetRxFifoThreshold>
 8002e38:	1e03      	subs	r3, r0, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002e3c:	f000 fc2e 	bl	800369c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <MX_USART1_UART_Init+0x94>)
 8002e42:	0018      	movs	r0, r3
 8002e44:	f004 fd38 	bl	80078b8 <HAL_UARTEx_DisableFifoMode>
 8002e48:	1e03      	subs	r3, r0, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002e4c:	f000 fc26 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	200007d0 	.word	0x200007d0
 8002e5c:	40013800 	.word	0x40013800

08002e60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e64:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e66:	4a24      	ldr	r2, [pc, #144]	; (8002ef8 <MX_USART2_UART_Init+0x98>)
 8002e68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e6a:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e6c:	22e1      	movs	r2, #225	; 0xe1
 8002e6e:	0252      	lsls	r2, r2, #9
 8002e70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e72:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e78:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e86:	220c      	movs	r2, #12
 8002e88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e96:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e9c:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ea2:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f003 fd5a 	bl	8006964 <HAL_UART_Init>
 8002eb0:	1e03      	subs	r3, r0, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002eb4:	f000 fbf2 	bl	800369c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002eba:	2100      	movs	r1, #0
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f004 fd35 	bl	800792c <HAL_UARTEx_SetTxFifoThreshold>
 8002ec2:	1e03      	subs	r3, r0, #0
 8002ec4:	d001      	beq.n	8002eca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002ec6:	f000 fbe9 	bl	800369c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002ecc:	2100      	movs	r1, #0
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f004 fd6c 	bl	80079ac <HAL_UARTEx_SetRxFifoThreshold>
 8002ed4:	1e03      	subs	r3, r0, #0
 8002ed6:	d001      	beq.n	8002edc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002ed8:	f000 fbe0 	bl	800369c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <MX_USART2_UART_Init+0x94>)
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f004 fcea 	bl	80078b8 <HAL_UARTEx_DisableFifoMode>
 8002ee4:	1e03      	subs	r3, r0, #0
 8002ee6:	d001      	beq.n	8002eec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002ee8:	f000 fbd8 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	20000864 	.word	0x20000864
 8002ef8:	40004400 	.word	0x40004400

08002efc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f00:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <MX_USART3_UART_Init+0x94>)
 8002f02:	4a24      	ldr	r2, [pc, #144]	; (8002f94 <MX_USART3_UART_Init+0x98>)
 8002f04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002f06:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <MX_USART3_UART_Init+0x94>)
 8002f08:	2296      	movs	r2, #150	; 0x96
 8002f0a:	0192      	lsls	r2, r2, #6
 8002f0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f0e:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <MX_USART3_UART_Init+0x94>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f14:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <MX_USART3_UART_Init+0x94>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f1a:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <MX_USART3_UART_Init+0x94>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f20:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <MX_USART3_UART_Init+0x94>)
 8002f22:	220c      	movs	r2, #12
 8002f24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f26:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <MX_USART3_UART_Init+0x94>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f2c:	4b18      	ldr	r3, [pc, #96]	; (8002f90 <MX_USART3_UART_Init+0x94>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f32:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <MX_USART3_UART_Init+0x94>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f38:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <MX_USART3_UART_Init+0x94>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f3e:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <MX_USART3_UART_Init+0x94>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <MX_USART3_UART_Init+0x94>)
 8002f46:	0018      	movs	r0, r3
 8002f48:	f003 fd0c 	bl	8006964 <HAL_UART_Init>
 8002f4c:	1e03      	subs	r3, r0, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002f50:	f000 fba4 	bl	800369c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f54:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <MX_USART3_UART_Init+0x94>)
 8002f56:	2100      	movs	r1, #0
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f004 fce7 	bl	800792c <HAL_UARTEx_SetTxFifoThreshold>
 8002f5e:	1e03      	subs	r3, r0, #0
 8002f60:	d001      	beq.n	8002f66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002f62:	f000 fb9b 	bl	800369c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <MX_USART3_UART_Init+0x94>)
 8002f68:	2100      	movs	r1, #0
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f004 fd1e 	bl	80079ac <HAL_UARTEx_SetRxFifoThreshold>
 8002f70:	1e03      	subs	r3, r0, #0
 8002f72:	d001      	beq.n	8002f78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002f74:	f000 fb92 	bl	800369c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <MX_USART3_UART_Init+0x94>)
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f004 fc9c 	bl	80078b8 <HAL_UARTEx_DisableFifoMode>
 8002f80:	1e03      	subs	r3, r0, #0
 8002f82:	d001      	beq.n	8002f88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002f84:	f000 fb8a 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f88:	46c0      	nop			; (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	200008f8 	.word	0x200008f8
 8002f94:	40004800 	.word	0x40004800

08002f98 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002f9c:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <MX_USART5_UART_Init+0x60>)
 8002f9e:	4a17      	ldr	r2, [pc, #92]	; (8002ffc <MX_USART5_UART_Init+0x64>)
 8002fa0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <MX_USART5_UART_Init+0x60>)
 8002fa4:	2296      	movs	r2, #150	; 0x96
 8002fa6:	0192      	lsls	r2, r2, #6
 8002fa8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002faa:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <MX_USART5_UART_Init+0x60>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002fb0:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <MX_USART5_UART_Init+0x60>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <MX_USART5_UART_Init+0x60>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002fbc:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <MX_USART5_UART_Init+0x60>)
 8002fbe:	220c      	movs	r2, #12
 8002fc0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <MX_USART5_UART_Init+0x60>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <MX_USART5_UART_Init+0x60>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <MX_USART5_UART_Init+0x60>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fd4:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <MX_USART5_UART_Init+0x60>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fda:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <MX_USART5_UART_Init+0x60>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <MX_USART5_UART_Init+0x60>)
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f003 fcbe 	bl	8006964 <HAL_UART_Init>
 8002fe8:	1e03      	subs	r3, r0, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002fec:	f000 fb56 	bl	800369c <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	2000098c 	.word	0x2000098c
 8002ffc:	40005000 	.word	0x40005000

08003000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b08b      	sub	sp, #44	; 0x2c
 8003004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003006:	2414      	movs	r4, #20
 8003008:	193b      	adds	r3, r7, r4
 800300a:	0018      	movs	r0, r3
 800300c:	2314      	movs	r3, #20
 800300e:	001a      	movs	r2, r3
 8003010:	2100      	movs	r1, #0
 8003012:	f008 fe6d 	bl	800bcf0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003016:	4b7a      	ldr	r3, [pc, #488]	; (8003200 <MX_GPIO_Init+0x200>)
 8003018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800301a:	4b79      	ldr	r3, [pc, #484]	; (8003200 <MX_GPIO_Init+0x200>)
 800301c:	2104      	movs	r1, #4
 800301e:	430a      	orrs	r2, r1
 8003020:	635a      	str	r2, [r3, #52]	; 0x34
 8003022:	4b77      	ldr	r3, [pc, #476]	; (8003200 <MX_GPIO_Init+0x200>)
 8003024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003026:	2204      	movs	r2, #4
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800302e:	4b74      	ldr	r3, [pc, #464]	; (8003200 <MX_GPIO_Init+0x200>)
 8003030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003032:	4b73      	ldr	r3, [pc, #460]	; (8003200 <MX_GPIO_Init+0x200>)
 8003034:	2101      	movs	r1, #1
 8003036:	430a      	orrs	r2, r1
 8003038:	635a      	str	r2, [r3, #52]	; 0x34
 800303a:	4b71      	ldr	r3, [pc, #452]	; (8003200 <MX_GPIO_Init+0x200>)
 800303c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303e:	2201      	movs	r2, #1
 8003040:	4013      	ands	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003046:	4b6e      	ldr	r3, [pc, #440]	; (8003200 <MX_GPIO_Init+0x200>)
 8003048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800304a:	4b6d      	ldr	r3, [pc, #436]	; (8003200 <MX_GPIO_Init+0x200>)
 800304c:	2102      	movs	r1, #2
 800304e:	430a      	orrs	r2, r1
 8003050:	635a      	str	r2, [r3, #52]	; 0x34
 8003052:	4b6b      	ldr	r3, [pc, #428]	; (8003200 <MX_GPIO_Init+0x200>)
 8003054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003056:	2202      	movs	r2, #2
 8003058:	4013      	ands	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800305e:	4b68      	ldr	r3, [pc, #416]	; (8003200 <MX_GPIO_Init+0x200>)
 8003060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003062:	4b67      	ldr	r3, [pc, #412]	; (8003200 <MX_GPIO_Init+0x200>)
 8003064:	2108      	movs	r1, #8
 8003066:	430a      	orrs	r2, r1
 8003068:	635a      	str	r2, [r3, #52]	; 0x34
 800306a:	4b65      	ldr	r3, [pc, #404]	; (8003200 <MX_GPIO_Init+0x200>)
 800306c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306e:	2208      	movs	r2, #8
 8003070:	4013      	ands	r3, r2
 8003072:	607b      	str	r3, [r7, #4]
 8003074:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8003076:	23a0      	movs	r3, #160	; 0xa0
 8003078:	05db      	lsls	r3, r3, #23
 800307a:	2200      	movs	r2, #0
 800307c:	2110      	movs	r1, #16
 800307e:	0018      	movs	r0, r3
 8003080:	f001 fad9 	bl	8004636 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8003084:	495f      	ldr	r1, [pc, #380]	; (8003204 <MX_GPIO_Init+0x204>)
 8003086:	4b60      	ldr	r3, [pc, #384]	; (8003208 <MX_GPIO_Init+0x208>)
 8003088:	2200      	movs	r2, #0
 800308a:	0018      	movs	r0, r3
 800308c:	f001 fad3 	bl	8004636 <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	485c      	ldr	r0, [pc, #368]	; (8003208 <MX_GPIO_Init+0x208>)
 8003096:	2201      	movs	r2, #1
 8003098:	0019      	movs	r1, r3
 800309a:	f001 facc 	bl	8004636 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 800309e:	4b5b      	ldr	r3, [pc, #364]	; (800320c <MX_GPIO_Init+0x20c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	2103      	movs	r1, #3
 80030a4:	0018      	movs	r0, r3
 80030a6:	f001 fac6 	bl	8004636 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 80030aa:	193b      	adds	r3, r7, r4
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030b0:	193b      	adds	r3, r7, r4
 80030b2:	2288      	movs	r2, #136	; 0x88
 80030b4:	0352      	lsls	r2, r2, #13
 80030b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	193b      	adds	r3, r7, r4
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 80030be:	193a      	adds	r2, r7, r4
 80030c0:	23a0      	movs	r3, #160	; 0xa0
 80030c2:	05db      	lsls	r3, r3, #23
 80030c4:	0011      	movs	r1, r2
 80030c6:	0018      	movs	r0, r3
 80030c8:	f001 f854 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 80030cc:	193b      	adds	r3, r7, r4
 80030ce:	2202      	movs	r2, #2
 80030d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030d2:	193b      	adds	r3, r7, r4
 80030d4:	2200      	movs	r2, #0
 80030d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	193b      	adds	r3, r7, r4
 80030da:	2200      	movs	r2, #0
 80030dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 80030de:	193a      	adds	r2, r7, r4
 80030e0:	23a0      	movs	r3, #160	; 0xa0
 80030e2:	05db      	lsls	r3, r3, #23
 80030e4:	0011      	movs	r1, r2
 80030e6:	0018      	movs	r0, r3
 80030e8:	f001 f844 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 80030ec:	193b      	adds	r3, r7, r4
 80030ee:	2210      	movs	r2, #16
 80030f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f2:	193b      	adds	r3, r7, r4
 80030f4:	2201      	movs	r2, #1
 80030f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f8:	193b      	adds	r3, r7, r4
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fe:	193b      	adds	r3, r7, r4
 8003100:	2200      	movs	r2, #0
 8003102:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003104:	193a      	adds	r2, r7, r4
 8003106:	23a0      	movs	r3, #160	; 0xa0
 8003108:	05db      	lsls	r3, r3, #23
 800310a:	0011      	movs	r1, r2
 800310c:	0018      	movs	r0, r3
 800310e:	f001 f831 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8003112:	193b      	adds	r3, r7, r4
 8003114:	4a3e      	ldr	r2, [pc, #248]	; (8003210 <MX_GPIO_Init+0x210>)
 8003116:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003118:	193b      	adds	r3, r7, r4
 800311a:	2201      	movs	r2, #1
 800311c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311e:	193b      	adds	r3, r7, r4
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003124:	193b      	adds	r3, r7, r4
 8003126:	2200      	movs	r2, #0
 8003128:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800312a:	193b      	adds	r3, r7, r4
 800312c:	4a36      	ldr	r2, [pc, #216]	; (8003208 <MX_GPIO_Init+0x208>)
 800312e:	0019      	movs	r1, r3
 8003130:	0010      	movs	r0, r2
 8003132:	f001 f81f 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8003136:	0021      	movs	r1, r4
 8003138:	187b      	adds	r3, r7, r1
 800313a:	2224      	movs	r2, #36	; 0x24
 800313c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800313e:	187b      	adds	r3, r7, r1
 8003140:	2288      	movs	r2, #136	; 0x88
 8003142:	0352      	lsls	r2, r2, #13
 8003144:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003146:	187b      	adds	r3, r7, r1
 8003148:	2200      	movs	r2, #0
 800314a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800314c:	000c      	movs	r4, r1
 800314e:	187b      	adds	r3, r7, r1
 8003150:	4a2d      	ldr	r2, [pc, #180]	; (8003208 <MX_GPIO_Init+0x208>)
 8003152:	0019      	movs	r1, r3
 8003154:	0010      	movs	r0, r2
 8003156:	f001 f80d 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 800315a:	0021      	movs	r1, r4
 800315c:	187b      	adds	r3, r7, r1
 800315e:	2280      	movs	r2, #128	; 0x80
 8003160:	0192      	lsls	r2, r2, #6
 8003162:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003164:	000c      	movs	r4, r1
 8003166:	193b      	adds	r3, r7, r4
 8003168:	2211      	movs	r2, #17
 800316a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	193b      	adds	r3, r7, r4
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003172:	193b      	adds	r3, r7, r4
 8003174:	2200      	movs	r2, #0
 8003176:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8003178:	193b      	adds	r3, r7, r4
 800317a:	4a23      	ldr	r2, [pc, #140]	; (8003208 <MX_GPIO_Init+0x208>)
 800317c:	0019      	movs	r1, r3
 800317e:	0010      	movs	r0, r2
 8003180:	f000 fff8 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8003184:	193b      	adds	r3, r7, r4
 8003186:	4a23      	ldr	r2, [pc, #140]	; (8003214 <MX_GPIO_Init+0x214>)
 8003188:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800318a:	193b      	adds	r3, r7, r4
 800318c:	2200      	movs	r2, #0
 800318e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	193b      	adds	r3, r7, r4
 8003192:	2200      	movs	r2, #0
 8003194:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003196:	193b      	adds	r3, r7, r4
 8003198:	4a1b      	ldr	r2, [pc, #108]	; (8003208 <MX_GPIO_Init+0x208>)
 800319a:	0019      	movs	r1, r3
 800319c:	0010      	movs	r0, r2
 800319e:	f000 ffe9 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 80031a2:	193b      	adds	r3, r7, r4
 80031a4:	2203      	movs	r2, #3
 80031a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a8:	193b      	adds	r3, r7, r4
 80031aa:	2201      	movs	r2, #1
 80031ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	193b      	adds	r3, r7, r4
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b4:	193b      	adds	r3, r7, r4
 80031b6:	2200      	movs	r2, #0
 80031b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ba:	193b      	adds	r3, r7, r4
 80031bc:	4a13      	ldr	r2, [pc, #76]	; (800320c <MX_GPIO_Init+0x20c>)
 80031be:	0019      	movs	r1, r3
 80031c0:	0010      	movs	r0, r2
 80031c2:	f000 ffd7 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80031c6:	0021      	movs	r1, r4
 80031c8:	187b      	adds	r3, r7, r1
 80031ca:	220c      	movs	r2, #12
 80031cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ce:	187b      	adds	r3, r7, r1
 80031d0:	2200      	movs	r2, #0
 80031d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031d4:	187b      	adds	r3, r7, r1
 80031d6:	2201      	movs	r2, #1
 80031d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031da:	187b      	adds	r3, r7, r1
 80031dc:	4a0b      	ldr	r2, [pc, #44]	; (800320c <MX_GPIO_Init+0x20c>)
 80031de:	0019      	movs	r1, r3
 80031e0:	0010      	movs	r0, r2
 80031e2:	f000 ffc7 	bl	8004174 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	2100      	movs	r1, #0
 80031ea:	2006      	movs	r0, #6
 80031ec:	f000 ff8c 	bl	8004108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80031f0:	2006      	movs	r0, #6
 80031f2:	f000 ff9e 	bl	8004132 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b00b      	add	sp, #44	; 0x2c
 80031fc:	bd90      	pop	{r4, r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	40021000 	.word	0x40021000
 8003204:	0000a403 	.word	0x0000a403
 8003208:	50000400 	.word	0x50000400
 800320c:	50000c00 	.word	0x50000c00
 8003210:	00008c03 	.word	0x00008c03
 8003214:	00004040 	.word	0x00004040

08003218 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	0018      	movs	r0, r3
 8003224:	f7fc ff6e 	bl	8000104 <strlen>
 8003228:	0003      	movs	r3, r0
 800322a:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2bfa      	cmp	r3, #250	; 0xfa
 8003230:	d908      	bls.n	8003244 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8003232:	23fa      	movs	r3, #250	; 0xfa
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	490d      	ldr	r1, [pc, #52]	; (800326c <send_debug_logs+0x54>)
 8003238:	480d      	ldr	r0, [pc, #52]	; (8003270 <send_debug_logs+0x58>)
 800323a:	222a      	movs	r2, #42	; 0x2a
 800323c:	f003 fc28 	bl	8006a90 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8003240:	23fa      	movs	r3, #250	; 0xfa
 8003242:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	b29a      	uxth	r2, r3
 8003248:	23fa      	movs	r3, #250	; 0xfa
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4808      	ldr	r0, [pc, #32]	; (8003270 <send_debug_logs+0x58>)
 8003250:	f003 fc1e 	bl	8006a90 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8003254:	23fa      	movs	r3, #250	; 0xfa
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4906      	ldr	r1, [pc, #24]	; (8003274 <send_debug_logs+0x5c>)
 800325a:	4805      	ldr	r0, [pc, #20]	; (8003270 <send_debug_logs+0x58>)
 800325c:	2201      	movs	r2, #1
 800325e:	f003 fc17 	bl	8006a90 <HAL_UART_Transmit>
}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	b004      	add	sp, #16
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	08012a6c 	.word	0x08012a6c
 8003270:	20000864 	.word	0x20000864
 8003274:	08012a98 	.word	0x08012a98

08003278 <my_sys_init>:
// System functions
void my_sys_init ( void )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
	fix3d.acq_time = 0 ;
 800327c:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <my_sys_init+0xf0>)
 800327e:	2200      	movs	r2, #0
 8003280:	825a      	strh	r2, [r3, #18]
	fix3d.acq_total_time = 0 ;
 8003282:	4b39      	ldr	r3, [pc, #228]	; (8003368 <my_sys_init+0xf0>)
 8003284:	2200      	movs	r2, #0
 8003286:	615a      	str	r2, [r3, #20]
	sw1 = HAL_GPIO_ReadPin ( SW1_GPIO_Port , SW1_Pin ) ;
 8003288:	4b38      	ldr	r3, [pc, #224]	; (800336c <my_sys_init+0xf4>)
 800328a:	2104      	movs	r1, #4
 800328c:	0018      	movs	r0, r3
 800328e:	f001 f9b5 	bl	80045fc <HAL_GPIO_ReadPin>
 8003292:	0003      	movs	r3, r0
 8003294:	1e5a      	subs	r2, r3, #1
 8003296:	4193      	sbcs	r3, r2
 8003298:	b2da      	uxtb	r2, r3
 800329a:	4b35      	ldr	r3, [pc, #212]	; (8003370 <my_sys_init+0xf8>)
 800329c:	701a      	strb	r2, [r3, #0]
	sw2 = HAL_GPIO_ReadPin ( SW2_GPIO_Port , SW2_Pin ) ;
 800329e:	4b33      	ldr	r3, [pc, #204]	; (800336c <my_sys_init+0xf4>)
 80032a0:	2108      	movs	r1, #8
 80032a2:	0018      	movs	r0, r3
 80032a4:	f001 f9aa 	bl	80045fc <HAL_GPIO_ReadPin>
 80032a8:	0003      	movs	r3, r0
 80032aa:	1e5a      	subs	r2, r3, #1
 80032ac:	4193      	sbcs	r3, r2
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	4b30      	ldr	r3, [pc, #192]	; (8003374 <my_sys_init+0xfc>)
 80032b2:	701a      	strb	r2, [r3, #0]
	if ( !sw1 && !sw2 )
 80032b4:	4b2e      	ldr	r3, [pc, #184]	; (8003370 <my_sys_init+0xf8>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2201      	movs	r2, #1
 80032ba:	4053      	eors	r3, r2
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d013      	beq.n	80032ea <my_sys_init+0x72>
 80032c2:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <my_sys_init+0xfc>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2201      	movs	r2, #1
 80032c8:	4053      	eors	r3, r2
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00c      	beq.n	80032ea <my_sys_init+0x72>
	{
		sys_mode = 0 ;
 80032d0:	4b29      	ldr	r3, [pc, #164]	; (8003378 <my_sys_init+0x100>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 80032d6:	4b29      	ldr	r3, [pc, #164]	; (800337c <my_sys_init+0x104>)
 80032d8:	22e1      	movs	r2, #225	; 0xe1
 80032da:	0112      	lsls	r2, r2, #4
 80032dc:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 80032de:	4b28      	ldr	r3, [pc, #160]	; (8003380 <my_sys_init+0x108>)
 80032e0:	2278      	movs	r2, #120	; 0x78
 80032e2:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <my_sys_init+0x10c>)
 80032e6:	221e      	movs	r2, #30
 80032e8:	801a      	strh	r2, [r3, #0]
	}
	if ( sw1 && !sw2 )
 80032ea:	4b21      	ldr	r3, [pc, #132]	; (8003370 <my_sys_init+0xf8>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d013      	beq.n	800331a <my_sys_init+0xa2>
 80032f2:	4b20      	ldr	r3, [pc, #128]	; (8003374 <my_sys_init+0xfc>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2201      	movs	r2, #1
 80032f8:	4053      	eors	r3, r2
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00c      	beq.n	800331a <my_sys_init+0xa2>
	{
		sys_mode = 1 ;
 8003300:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <my_sys_init+0x100>)
 8003302:	2201      	movs	r2, #1
 8003304:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 8003306:	4b1d      	ldr	r3, [pc, #116]	; (800337c <my_sys_init+0x104>)
 8003308:	22e1      	movs	r2, #225	; 0xe1
 800330a:	0112      	lsls	r2, r2, #4
 800330c:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 800330e:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <my_sys_init+0x108>)
 8003310:	2278      	movs	r2, #120	; 0x78
 8003312:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <my_sys_init+0x10c>)
 8003316:	221e      	movs	r2, #30
 8003318:	801a      	strh	r2, [r3, #0]
	}
	if ( !sw1 && sw2 )
 800331a:	4b15      	ldr	r3, [pc, #84]	; (8003370 <my_sys_init+0xf8>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2201      	movs	r2, #1
 8003320:	4053      	eors	r3, r2
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d011      	beq.n	800334c <my_sys_init+0xd4>
 8003328:	4b12      	ldr	r3, [pc, #72]	; (8003374 <my_sys_init+0xfc>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00d      	beq.n	800334c <my_sys_init+0xd4>
	{
		sys_mode = 2 ;
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <my_sys_init+0x100>)
 8003332:	2202      	movs	r2, #2
 8003334:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_5_MIN ;
 8003336:	4b11      	ldr	r3, [pc, #68]	; (800337c <my_sys_init+0x104>)
 8003338:	2296      	movs	r2, #150	; 0x96
 800333a:	0052      	lsls	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_10_MIN ;
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <my_sys_init+0x108>)
 8003340:	2296      	movs	r2, #150	; 0x96
 8003342:	0092      	lsls	r2, r2, #2
 8003344:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_1_MIN ;
 8003346:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <my_sys_init+0x10c>)
 8003348:	223c      	movs	r2, #60	; 0x3c
 800334a:	801a      	strh	r2, [r3, #0]
	}
	if ( sw1 && sw2 )
 800334c:	4b08      	ldr	r3, [pc, #32]	; (8003370 <my_sys_init+0xf8>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d006      	beq.n	8003362 <my_sys_init+0xea>
 8003354:	4b07      	ldr	r3, [pc, #28]	; (8003374 <my_sys_init+0xfc>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <my_sys_init+0xea>
	{
		sys_mode = 3 ;
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <my_sys_init+0x100>)
 800335e:	2203      	movs	r2, #3
 8003360:	701a      	strb	r2, [r3, #0]
	}
}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000ae0 	.word	0x20000ae0
 800336c:	50000c00 	.word	0x50000c00
 8003370:	20000a20 	.word	0x20000a20
 8003374:	20000a21 	.word	0x20000a21
 8003378:	20000a22 	.word	0x20000a22
 800337c:	20000008 	.word	0x20000008
 8003380:	20000016 	.word	0x20000016
 8003384:	20000018 	.word	0x20000018

08003388 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	0002      	movs	r2, r0
 8003390:	1dfb      	adds	r3, r7, #7
 8003392:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 8003394:	1dfb      	adds	r3, r7, #7
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d10e      	bne.n	80033ba <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	4811      	ldr	r0, [pc, #68]	; (80033e8 <my_ant_sw_pos+0x60>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	0019      	movs	r1, r3
 80033a6:	f001 f946 	bl	8004636 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	480e      	ldr	r0, [pc, #56]	; (80033e8 <my_ant_sw_pos+0x60>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	0019      	movs	r1, r3
 80033b4:	f001 f93f 	bl	8004636 <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 80033b8:	e011      	b.n	80033de <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 80033ba:	1dfb      	adds	r3, r7, #7
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d10d      	bne.n	80033de <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	4808      	ldr	r0, [pc, #32]	; (80033e8 <my_ant_sw_pos+0x60>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	0019      	movs	r1, r3
 80033cc:	f001 f933 	bl	8004636 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4804      	ldr	r0, [pc, #16]	; (80033e8 <my_ant_sw_pos+0x60>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	0019      	movs	r1, r3
 80033da:	f001 f92c 	bl	8004636 <HAL_GPIO_WritePin>
}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b002      	add	sp, #8
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	50000400 	.word	0x50000400

080033ec <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 80033f0:	2001      	movs	r0, #1
 80033f2:	f7ff ffc9 	bl	8003388 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	4808      	ldr	r0, [pc, #32]	; (800341c <my_gnss_sw_on+0x30>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	0019      	movs	r1, r3
 8003400:	f001 f919 	bl	8004636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	019b      	lsls	r3, r3, #6
 8003408:	4804      	ldr	r0, [pc, #16]	; (800341c <my_gnss_sw_on+0x30>)
 800340a:	2201      	movs	r2, #1
 800340c:	0019      	movs	r1, r3
 800340e:	f001 f912 	bl	8004636 <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 8003412:	f7ff fdc1 	bl	8002f98 <MX_USART5_UART_Init>
}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	50000400 	.word	0x50000400

08003420 <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 8003424:	2002      	movs	r0, #2
 8003426:	f7ff ffaf 	bl	8003388 <my_ant_sw_pos>
	if ( sys_mode < 2 )
 800342a:	4b0c      	ldr	r3, [pc, #48]	; (800345c <my_gnss_sw_off+0x3c>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d811      	bhi.n	8003456 <my_gnss_sw_off+0x36>
	{
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8003432:	2380      	movs	r3, #128	; 0x80
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	480a      	ldr	r0, [pc, #40]	; (8003460 <my_gnss_sw_off+0x40>)
 8003438:	2200      	movs	r2, #0
 800343a:	0019      	movs	r1, r3
 800343c:	f001 f8fb 	bl	8004636 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	019b      	lsls	r3, r3, #6
 8003444:	4806      	ldr	r0, [pc, #24]	; (8003460 <my_gnss_sw_off+0x40>)
 8003446:	2200      	movs	r2, #0
 8003448:	0019      	movs	r1, r3
 800344a:	f001 f8f4 	bl	8004636 <HAL_GPIO_WritePin>
		HAL_UART_DeInit ( &HUART_GNSS ) ;
 800344e:	4b05      	ldr	r3, [pc, #20]	; (8003464 <my_gnss_sw_off+0x44>)
 8003450:	0018      	movs	r0, r3
 8003452:	f003 fadd 	bl	8006a10 <HAL_UART_DeInit>
	}
}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20000a22 	.word	0x20000a22
 8003460:	50000400 	.word	0x50000400
 8003464:	2000098c 	.word	0x2000098c

08003468 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	000a      	movs	r2, r1
 8003472:	1cfb      	adds	r3, r7, #3
 8003474:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 8003476:	23fa      	movs	r3, #250	; 0xfa
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4809      	ldr	r0, [pc, #36]	; (80034a4 <my_gnss_receive_byte+0x3c>)
 800347e:	2201      	movs	r2, #1
 8003480:	f003 fbaa 	bl	8006bd8 <HAL_UART_Receive>
	if ( sys_mode > 0 )
 8003484:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <my_gnss_receive_byte+0x40>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d006      	beq.n	800349a <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 800348c:	23fa      	movs	r3, #250	; 0xfa
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4806      	ldr	r0, [pc, #24]	; (80034ac <my_gnss_receive_byte+0x44>)
 8003494:	2201      	movs	r2, #1
 8003496:	f003 fafb 	bl	8006a90 <HAL_UART_Transmit>
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b002      	add	sp, #8
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	2000098c 	.word	0x2000098c
 80034a8:	20000a22 	.word	0x20000a22
 80034ac:	20000864 	.word	0x20000864

080034b0 <my_astronode_reset>:
}


// ** ASTRO Operations
void my_astronode_reset ( void )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 80034b4:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <my_astronode_reset+0x30>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	2102      	movs	r1, #2
 80034ba:	0018      	movs	r0, r3
 80034bc:	f001 f8bb 	bl	8004636 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 80034c0:	2001      	movs	r0, #1
 80034c2:	f000 fd0d 	bl	8003ee0 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <my_astronode_reset+0x30>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	2102      	movs	r1, #2
 80034cc:	0018      	movs	r0, r3
 80034ce:	f001 f8b2 	bl	8004636 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 80034d2:	20fa      	movs	r0, #250	; 0xfa
 80034d4:	f000 fd04 	bl	8003ee0 <HAL_Delay>
}
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	50000400 	.word	0x50000400

080034e4 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <send_astronode_request+0x34>)
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7ff fe91 	bl	8003218 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f7ff fe8d 	bl	8003218 <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	b29a      	uxth	r2, r3
 8003502:	23fa      	movs	r3, #250	; 0xfa
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4804      	ldr	r0, [pc, #16]	; (800351c <send_astronode_request+0x38>)
 800350a:	f003 fac1 	bl	8006a90 <HAL_UART_Transmit>
}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	46bd      	mov	sp, r7
 8003512:	b002      	add	sp, #8
 8003514:	bd80      	pop	{r7, pc}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	08012aa4 	.word	0x08012aa4
 800351c:	200008f8 	.word	0x200008f8

08003520 <get_systick>:
uint32_t get_systick ( void )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8003524:	f000 fcd2 	bl	8003ecc <HAL_GetTick>
 8003528:	0003      	movs	r3, r0
}
 800352a:	0018      	movs	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	000a      	movs	r2, r1
 800353a:	1cbb      	adds	r3, r7, #2
 800353c:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 800353e:	f7ff ffef 	bl	8003520 <get_systick>
 8003542:	0002      	movs	r2, r0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	1cba      	adds	r2, r7, #2
 800354a:	8812      	ldrh	r2, [r2, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	419b      	sbcs	r3, r3
 8003550:	425b      	negs	r3, r3
 8003552:	b2db      	uxtb	r3, r3
}
 8003554:	0018      	movs	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	b002      	add	sp, #8
 800355a:	bd80      	pop	{r7, pc}

0800355c <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4806      	ldr	r0, [pc, #24]	; (8003580 <is_astronode_character_received+0x24>)
 8003568:	2364      	movs	r3, #100	; 0x64
 800356a:	2201      	movs	r2, #1
 800356c:	f003 fb34 	bl	8006bd8 <HAL_UART_Receive>
 8003570:	0003      	movs	r3, r0
 8003572:	425a      	negs	r2, r3
 8003574:	4153      	adcs	r3, r2
 8003576:	b2db      	uxtb	r3, r3
}
 8003578:	0018      	movs	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	b002      	add	sp, #8
 800357e:	bd80      	pop	{r7, pc}
 8003580:	200008f8 	.word	0x200008f8

08003584 <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <my_astro_evt_pin+0x20>)
 800358a:	2104      	movs	r1, #4
 800358c:	0018      	movs	r0, r3
 800358e:	f001 f835 	bl	80045fc <HAL_GPIO_ReadPin>
 8003592:	0003      	movs	r3, r0
 8003594:	3b01      	subs	r3, #1
 8003596:	425a      	negs	r2, r3
 8003598:	4153      	adcs	r3, r2
 800359a:	b2db      	uxtb	r3, r3
}
 800359c:	0018      	movs	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	50000400 	.word	0x50000400

080035a8 <my_tim_init>:

// TIM operations
void my_tim_init ()
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 80035ac:	4b03      	ldr	r3, [pc, #12]	; (80035bc <my_tim_init+0x14>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2202      	movs	r2, #2
 80035b2:	4252      	negs	r2, r2
 80035b4:	611a      	str	r2, [r3, #16]
}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000784 	.word	0x20000784

080035c0 <my_tim_start>:

void my_tim_start ()
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 80035c4:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <my_tim_start+0x18>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 80035ca:	4b04      	ldr	r3, [pc, #16]	; (80035dc <my_tim_start+0x1c>)
 80035cc:	0018      	movs	r0, r3
 80035ce:	f002 feeb 	bl	80063a8 <HAL_TIM_Base_Start_IT>
}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000c2c 	.word	0x20000c2c
 80035dc:	20000784 	.word	0x20000784

080035e0 <my_tim_stop>:

void my_tim_stop ()
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 80035e4:	4b03      	ldr	r3, [pc, #12]	; (80035f4 <my_tim_stop+0x14>)
 80035e6:	0018      	movs	r0, r3
 80035e8:	f002 ff40 	bl	800646c <HAL_TIM_Base_Stop_IT>
}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	20000784 	.word	0x20000784

080035f8 <HAL_TIM_PeriodElapsedCallback>:

// *** CALBACKS

// TIM Callback
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 80035f8:	b590      	push	{r4, r7, lr}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a12      	ldr	r2, [pc, #72]	; (8003650 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d11e      	bne.n	8003648 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		tim_seconds++ ;
 800360a:	4b12      	ldr	r3, [pc, #72]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	3301      	adds	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003614:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIME_THS_15_MIN )
 8003616:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003618:	881a      	ldrh	r2, [r3, #0]
 800361a:	23e1      	movs	r3, #225	; 0xe1
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	429a      	cmp	r2, r3
 8003620:	d912      	bls.n	8003648 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			my_rtc_get_dt_s ( rtc_dt_s ) ;
 8003622:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003624:	0018      	movs	r0, r3
 8003626:	f006 f955 	bl	80098d4 <my_rtc_get_dt_s>
			sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800362a:	4c0c      	ldr	r4, [pc, #48]	; (800365c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800362c:	4a0c      	ldr	r2, [pc, #48]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800362e:	490d      	ldr	r1, [pc, #52]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003630:	480d      	ldr	r0, [pc, #52]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	0023      	movs	r3, r4
 8003638:	f008 fac4 	bl	800bbc4 <sprintf>
			send_debug_logs ( dbg_payload ) ;
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800363e:	0018      	movs	r0, r3
 8003640:	f7ff fdea 	bl	8003218 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 8003644:	f000 fd85 	bl	8004152 <HAL_NVIC_SystemReset>
		}
	}
}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	b003      	add	sp, #12
 800364e:	bd90      	pop	{r4, r7, pc}
 8003650:	40001000 	.word	0x40001000
 8003654:	20000c2c 	.word	0x20000c2c
 8003658:	20000a24 	.word	0x20000a24
 800365c:	000003f6 	.word	0x000003f6
 8003660:	080128b8 	.word	0x080128b8
 8003664:	080129e4 	.word	0x080129e4
 8003668:	20000b08 	.word	0x20000b08

0800366c <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	my_rtc_alarm_flag = true ;
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <HAL_RTC_AlarmAEventCallback+0x18>)
 8003676:	2201      	movs	r2, #1
 8003678:	701a      	strb	r2, [r3, #0]
}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b002      	add	sp, #8
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	20000af8 	.word	0x20000af8

08003688 <HAL_GPIO_EXTI_Rising_Callback>:

// ASTRO EVT Callbacks
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	0002      	movs	r2, r0
 8003690:	1dbb      	adds	r3, r7, #6
 8003692:	801a      	strh	r2, [r3, #0]

}
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	46bd      	mov	sp, r7
 8003698:	b002      	add	sp, #8
 800369a:	bd80      	pop	{r7, pc}

0800369c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036a0:	b672      	cpsid	i
}
 80036a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036a4:	e7fe      	b.n	80036a4 <Error_Handler+0x8>
	...

080036a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ae:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <HAL_MspInit+0x4c>)
 80036b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b2:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <HAL_MspInit+0x4c>)
 80036b4:	2101      	movs	r1, #1
 80036b6:	430a      	orrs	r2, r1
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
 80036ba:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <HAL_MspInit+0x4c>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	2201      	movs	r2, #1
 80036c0:	4013      	ands	r3, r2
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_MspInit+0x4c>)
 80036c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <HAL_MspInit+0x4c>)
 80036cc:	2180      	movs	r1, #128	; 0x80
 80036ce:	0549      	lsls	r1, r1, #21
 80036d0:	430a      	orrs	r2, r1
 80036d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80036d4:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <HAL_MspInit+0x4c>)
 80036d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	055b      	lsls	r3, r3, #21
 80036dc:	4013      	ands	r3, r2
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80036e2:	23c0      	movs	r3, #192	; 0xc0
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 fc3a 	bl	8003f60 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40021000 	.word	0x40021000

080036f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b097      	sub	sp, #92	; 0x5c
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003700:	240c      	movs	r4, #12
 8003702:	193b      	adds	r3, r7, r4
 8003704:	0018      	movs	r0, r3
 8003706:	234c      	movs	r3, #76	; 0x4c
 8003708:	001a      	movs	r2, r3
 800370a:	2100      	movs	r1, #0
 800370c:	f008 faf0 	bl	800bcf0 <memset>
  if(hrtc->Instance==RTC)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a19      	ldr	r2, [pc, #100]	; (800377c <HAL_RTC_MspInit+0x84>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d12c      	bne.n	8003774 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800371a:	193b      	adds	r3, r7, r4
 800371c:	2280      	movs	r2, #128	; 0x80
 800371e:	0292      	lsls	r2, r2, #10
 8003720:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003722:	193b      	adds	r3, r7, r4
 8003724:	2280      	movs	r2, #128	; 0x80
 8003726:	0052      	lsls	r2, r2, #1
 8003728:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800372a:	193b      	adds	r3, r7, r4
 800372c:	0018      	movs	r0, r3
 800372e:	f001 fd89 	bl	8005244 <HAL_RCCEx_PeriphCLKConfig>
 8003732:	1e03      	subs	r3, r0, #0
 8003734:	d001      	beq.n	800373a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003736:	f7ff ffb1 	bl	800369c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800373a:	4b11      	ldr	r3, [pc, #68]	; (8003780 <HAL_RTC_MspInit+0x88>)
 800373c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <HAL_RTC_MspInit+0x88>)
 8003740:	2180      	movs	r1, #128	; 0x80
 8003742:	0209      	lsls	r1, r1, #8
 8003744:	430a      	orrs	r2, r1
 8003746:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003748:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <HAL_RTC_MspInit+0x88>)
 800374a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800374c:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <HAL_RTC_MspInit+0x88>)
 800374e:	2180      	movs	r1, #128	; 0x80
 8003750:	00c9      	lsls	r1, r1, #3
 8003752:	430a      	orrs	r2, r1
 8003754:	63da      	str	r2, [r3, #60]	; 0x3c
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <HAL_RTC_MspInit+0x88>)
 8003758:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	4013      	ands	r3, r2
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8003764:	2200      	movs	r2, #0
 8003766:	2103      	movs	r1, #3
 8003768:	2002      	movs	r0, #2
 800376a:	f000 fccd 	bl	8004108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800376e:	2002      	movs	r0, #2
 8003770:	f000 fcdf 	bl	8004132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003774:	46c0      	nop			; (mov r8, r8)
 8003776:	46bd      	mov	sp, r7
 8003778:	b017      	add	sp, #92	; 0x5c
 800377a:	bd90      	pop	{r4, r7, pc}
 800377c:	40002800 	.word	0x40002800
 8003780:	40021000 	.word	0x40021000

08003784 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003784:	b590      	push	{r4, r7, lr}
 8003786:	b08b      	sub	sp, #44	; 0x2c
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378c:	2414      	movs	r4, #20
 800378e:	193b      	adds	r3, r7, r4
 8003790:	0018      	movs	r0, r3
 8003792:	2314      	movs	r3, #20
 8003794:	001a      	movs	r2, r3
 8003796:	2100      	movs	r1, #0
 8003798:	f008 faaa 	bl	800bcf0 <memset>
  if(hspi->Instance==SPI1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <HAL_SPI_MspInit+0x8c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d130      	bne.n	8003808 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037a6:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <HAL_SPI_MspInit+0x90>)
 80037a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037aa:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <HAL_SPI_MspInit+0x90>)
 80037ac:	2180      	movs	r1, #128	; 0x80
 80037ae:	0149      	lsls	r1, r1, #5
 80037b0:	430a      	orrs	r2, r1
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
 80037b4:	4b17      	ldr	r3, [pc, #92]	; (8003814 <HAL_SPI_MspInit+0x90>)
 80037b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b8:	2380      	movs	r3, #128	; 0x80
 80037ba:	015b      	lsls	r3, r3, #5
 80037bc:	4013      	ands	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
 80037c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <HAL_SPI_MspInit+0x90>)
 80037c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c6:	4b13      	ldr	r3, [pc, #76]	; (8003814 <HAL_SPI_MspInit+0x90>)
 80037c8:	2101      	movs	r1, #1
 80037ca:	430a      	orrs	r2, r1
 80037cc:	635a      	str	r2, [r3, #52]	; 0x34
 80037ce:	4b11      	ldr	r3, [pc, #68]	; (8003814 <HAL_SPI_MspInit+0x90>)
 80037d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d2:	2201      	movs	r2, #1
 80037d4:	4013      	ands	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 80037da:	0021      	movs	r1, r4
 80037dc:	187b      	adds	r3, r7, r1
 80037de:	22e0      	movs	r2, #224	; 0xe0
 80037e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e2:	187b      	adds	r3, r7, r1
 80037e4:	2202      	movs	r2, #2
 80037e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	187b      	adds	r3, r7, r1
 80037ea:	2200      	movs	r2, #0
 80037ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ee:	187b      	adds	r3, r7, r1
 80037f0:	2200      	movs	r2, #0
 80037f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80037f4:	187b      	adds	r3, r7, r1
 80037f6:	2200      	movs	r2, #0
 80037f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037fa:	187a      	adds	r2, r7, r1
 80037fc:	23a0      	movs	r3, #160	; 0xa0
 80037fe:	05db      	lsls	r3, r3, #23
 8003800:	0011      	movs	r1, r2
 8003802:	0018      	movs	r0, r3
 8003804:	f000 fcb6 	bl	8004174 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003808:	46c0      	nop			; (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	b00b      	add	sp, #44	; 0x2c
 800380e:	bd90      	pop	{r4, r7, pc}
 8003810:	40013000 	.word	0x40013000
 8003814:	40021000 	.word	0x40021000

08003818 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a0d      	ldr	r2, [pc, #52]	; (800385c <HAL_TIM_Base_MspInit+0x44>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d113      	bne.n	8003852 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <HAL_TIM_Base_MspInit+0x48>)
 800382c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800382e:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <HAL_TIM_Base_MspInit+0x48>)
 8003830:	2110      	movs	r1, #16
 8003832:	430a      	orrs	r2, r1
 8003834:	63da      	str	r2, [r3, #60]	; 0x3c
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <HAL_TIM_Base_MspInit+0x48>)
 8003838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383a:	2210      	movs	r2, #16
 800383c:	4013      	ands	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8003842:	2200      	movs	r2, #0
 8003844:	2102      	movs	r1, #2
 8003846:	2011      	movs	r0, #17
 8003848:	f000 fc5e 	bl	8004108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800384c:	2011      	movs	r0, #17
 800384e:	f000 fc70 	bl	8004132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	46bd      	mov	sp, r7
 8003856:	b004      	add	sp, #16
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	40001000 	.word	0x40001000
 8003860:	40021000 	.word	0x40021000

08003864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	b0a3      	sub	sp, #140	; 0x8c
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386c:	2374      	movs	r3, #116	; 0x74
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	0018      	movs	r0, r3
 8003872:	2314      	movs	r3, #20
 8003874:	001a      	movs	r2, r3
 8003876:	2100      	movs	r1, #0
 8003878:	f008 fa3a 	bl	800bcf0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800387c:	2428      	movs	r4, #40	; 0x28
 800387e:	193b      	adds	r3, r7, r4
 8003880:	0018      	movs	r0, r3
 8003882:	234c      	movs	r3, #76	; 0x4c
 8003884:	001a      	movs	r2, r3
 8003886:	2100      	movs	r1, #0
 8003888:	f008 fa32 	bl	800bcf0 <memset>
  if(huart->Instance==USART1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a84      	ldr	r2, [pc, #528]	; (8003aa4 <HAL_UART_MspInit+0x240>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d140      	bne.n	8003918 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003896:	193b      	adds	r3, r7, r4
 8003898:	2201      	movs	r2, #1
 800389a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800389c:	193b      	adds	r3, r7, r4
 800389e:	2200      	movs	r2, #0
 80038a0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038a2:	193b      	adds	r3, r7, r4
 80038a4:	0018      	movs	r0, r3
 80038a6:	f001 fccd 	bl	8005244 <HAL_RCCEx_PeriphCLKConfig>
 80038aa:	1e03      	subs	r3, r0, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80038ae:	f7ff fef5 	bl	800369c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038b2:	4b7d      	ldr	r3, [pc, #500]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 80038b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b6:	4b7c      	ldr	r3, [pc, #496]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 80038b8:	2180      	movs	r1, #128	; 0x80
 80038ba:	01c9      	lsls	r1, r1, #7
 80038bc:	430a      	orrs	r2, r1
 80038be:	641a      	str	r2, [r3, #64]	; 0x40
 80038c0:	4b79      	ldr	r3, [pc, #484]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 80038c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	01db      	lsls	r3, r3, #7
 80038c8:	4013      	ands	r3, r2
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ce:	4b76      	ldr	r3, [pc, #472]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 80038d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d2:	4b75      	ldr	r3, [pc, #468]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 80038d4:	2101      	movs	r1, #1
 80038d6:	430a      	orrs	r2, r1
 80038d8:	635a      	str	r2, [r3, #52]	; 0x34
 80038da:	4b73      	ldr	r3, [pc, #460]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 80038dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038de:	2201      	movs	r2, #1
 80038e0:	4013      	ands	r3, r2
 80038e2:	623b      	str	r3, [r7, #32]
 80038e4:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 80038e6:	2174      	movs	r1, #116	; 0x74
 80038e8:	187b      	adds	r3, r7, r1
 80038ea:	22c0      	movs	r2, #192	; 0xc0
 80038ec:	00d2      	lsls	r2, r2, #3
 80038ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f0:	187b      	adds	r3, r7, r1
 80038f2:	2202      	movs	r2, #2
 80038f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f6:	187b      	adds	r3, r7, r1
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fc:	187b      	adds	r3, r7, r1
 80038fe:	2200      	movs	r2, #0
 8003900:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003902:	187b      	adds	r3, r7, r1
 8003904:	2201      	movs	r2, #1
 8003906:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003908:	187a      	adds	r2, r7, r1
 800390a:	23a0      	movs	r3, #160	; 0xa0
 800390c:	05db      	lsls	r3, r3, #23
 800390e:	0011      	movs	r1, r2
 8003910:	0018      	movs	r0, r3
 8003912:	f000 fc2f 	bl	8004174 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003916:	e0c0      	b.n	8003a9a <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a63      	ldr	r2, [pc, #396]	; (8003aac <HAL_UART_MspInit+0x248>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d140      	bne.n	80039a4 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003922:	2128      	movs	r1, #40	; 0x28
 8003924:	187b      	adds	r3, r7, r1
 8003926:	2202      	movs	r2, #2
 8003928:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800392a:	187b      	adds	r3, r7, r1
 800392c:	2200      	movs	r2, #0
 800392e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003930:	187b      	adds	r3, r7, r1
 8003932:	0018      	movs	r0, r3
 8003934:	f001 fc86 	bl	8005244 <HAL_RCCEx_PeriphCLKConfig>
 8003938:	1e03      	subs	r3, r0, #0
 800393a:	d001      	beq.n	8003940 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 800393c:	f7ff feae 	bl	800369c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003940:	4b59      	ldr	r3, [pc, #356]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 8003942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003944:	4b58      	ldr	r3, [pc, #352]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 8003946:	2180      	movs	r1, #128	; 0x80
 8003948:	0289      	lsls	r1, r1, #10
 800394a:	430a      	orrs	r2, r1
 800394c:	63da      	str	r2, [r3, #60]	; 0x3c
 800394e:	4b56      	ldr	r3, [pc, #344]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 8003950:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	029b      	lsls	r3, r3, #10
 8003956:	4013      	ands	r3, r2
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800395c:	4b52      	ldr	r3, [pc, #328]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 800395e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003960:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 8003962:	2101      	movs	r1, #1
 8003964:	430a      	orrs	r2, r1
 8003966:	635a      	str	r2, [r3, #52]	; 0x34
 8003968:	4b4f      	ldr	r3, [pc, #316]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 800396a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396c:	2201      	movs	r2, #1
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
 8003972:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8003974:	2174      	movs	r1, #116	; 0x74
 8003976:	187b      	adds	r3, r7, r1
 8003978:	220c      	movs	r2, #12
 800397a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397c:	187b      	adds	r3, r7, r1
 800397e:	2202      	movs	r2, #2
 8003980:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003982:	187b      	adds	r3, r7, r1
 8003984:	2200      	movs	r2, #0
 8003986:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003988:	187b      	adds	r3, r7, r1
 800398a:	2200      	movs	r2, #0
 800398c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800398e:	187b      	adds	r3, r7, r1
 8003990:	2201      	movs	r2, #1
 8003992:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003994:	187a      	adds	r2, r7, r1
 8003996:	23a0      	movs	r3, #160	; 0xa0
 8003998:	05db      	lsls	r3, r3, #23
 800399a:	0011      	movs	r1, r2
 800399c:	0018      	movs	r0, r3
 800399e:	f000 fbe9 	bl	8004174 <HAL_GPIO_Init>
}
 80039a2:	e07a      	b.n	8003a9a <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a41      	ldr	r2, [pc, #260]	; (8003ab0 <HAL_UART_MspInit+0x24c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d140      	bne.n	8003a30 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80039ae:	2128      	movs	r1, #40	; 0x28
 80039b0:	187b      	adds	r3, r7, r1
 80039b2:	2204      	movs	r2, #4
 80039b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80039b6:	187b      	adds	r3, r7, r1
 80039b8:	2200      	movs	r2, #0
 80039ba:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039bc:	187b      	adds	r3, r7, r1
 80039be:	0018      	movs	r0, r3
 80039c0:	f001 fc40 	bl	8005244 <HAL_RCCEx_PeriphCLKConfig>
 80039c4:	1e03      	subs	r3, r0, #0
 80039c6:	d001      	beq.n	80039cc <HAL_UART_MspInit+0x168>
      Error_Handler();
 80039c8:	f7ff fe68 	bl	800369c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80039cc:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 80039ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039d0:	4b35      	ldr	r3, [pc, #212]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	02c9      	lsls	r1, r1, #11
 80039d6:	430a      	orrs	r2, r1
 80039d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80039da:	4b33      	ldr	r3, [pc, #204]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 80039dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039de:	2380      	movs	r3, #128	; 0x80
 80039e0:	02db      	lsls	r3, r3, #11
 80039e2:	4013      	ands	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e8:	4b2f      	ldr	r3, [pc, #188]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 80039ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ec:	4b2e      	ldr	r3, [pc, #184]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 80039ee:	2102      	movs	r1, #2
 80039f0:	430a      	orrs	r2, r1
 80039f2:	635a      	str	r2, [r3, #52]	; 0x34
 80039f4:	4b2c      	ldr	r3, [pc, #176]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 80039f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f8:	2202      	movs	r2, #2
 80039fa:	4013      	ands	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8003a00:	2174      	movs	r1, #116	; 0x74
 8003a02:	187b      	adds	r3, r7, r1
 8003a04:	22c0      	movs	r2, #192	; 0xc0
 8003a06:	0092      	lsls	r2, r2, #2
 8003a08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	187b      	adds	r3, r7, r1
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	187b      	adds	r3, r7, r1
 8003a12:	2200      	movs	r2, #0
 8003a14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a16:	187b      	adds	r3, r7, r1
 8003a18:	2200      	movs	r2, #0
 8003a1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003a1c:	187b      	adds	r3, r7, r1
 8003a1e:	2204      	movs	r2, #4
 8003a20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a22:	187b      	adds	r3, r7, r1
 8003a24:	4a23      	ldr	r2, [pc, #140]	; (8003ab4 <HAL_UART_MspInit+0x250>)
 8003a26:	0019      	movs	r1, r3
 8003a28:	0010      	movs	r0, r2
 8003a2a:	f000 fba3 	bl	8004174 <HAL_GPIO_Init>
}
 8003a2e:	e034      	b.n	8003a9a <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a20      	ldr	r2, [pc, #128]	; (8003ab8 <HAL_UART_MspInit+0x254>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d12f      	bne.n	8003a9a <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 8003a3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a3e:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 8003a40:	2180      	movs	r1, #128	; 0x80
 8003a42:	0049      	lsls	r1, r1, #1
 8003a44:	430a      	orrs	r2, r1
 8003a46:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a48:	4b17      	ldr	r3, [pc, #92]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 8003a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	4013      	ands	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a56:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 8003a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a5a:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	635a      	str	r2, [r3, #52]	; 0x34
 8003a62:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <HAL_UART_MspInit+0x244>)
 8003a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a66:	2202      	movs	r2, #2
 8003a68:	4013      	ands	r3, r2
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8003a6e:	2174      	movs	r1, #116	; 0x74
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	2218      	movs	r2, #24
 8003a74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a76:	187b      	adds	r3, r7, r1
 8003a78:	2202      	movs	r2, #2
 8003a7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	187b      	adds	r3, r7, r1
 8003a7e:	2200      	movs	r2, #0
 8003a80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a82:	187b      	adds	r3, r7, r1
 8003a84:	2200      	movs	r2, #0
 8003a86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8003a88:	187b      	adds	r3, r7, r1
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a8e:	187b      	adds	r3, r7, r1
 8003a90:	4a08      	ldr	r2, [pc, #32]	; (8003ab4 <HAL_UART_MspInit+0x250>)
 8003a92:	0019      	movs	r1, r3
 8003a94:	0010      	movs	r0, r2
 8003a96:	f000 fb6d 	bl	8004174 <HAL_GPIO_Init>
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b023      	add	sp, #140	; 0x8c
 8003aa0:	bd90      	pop	{r4, r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	40013800 	.word	0x40013800
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	40004400 	.word	0x40004400
 8003ab0:	40004800 	.word	0x40004800
 8003ab4:	50000400 	.word	0x50000400
 8003ab8:	40005000 	.word	0x40005000

08003abc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a25      	ldr	r2, [pc, #148]	; (8003b60 <HAL_UART_MspDeInit+0xa4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d10e      	bne.n	8003aec <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003ace:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <HAL_UART_MspDeInit+0xa8>)
 8003ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad2:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <HAL_UART_MspDeInit+0xa8>)
 8003ad4:	4924      	ldr	r1, [pc, #144]	; (8003b68 <HAL_UART_MspDeInit+0xac>)
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 8003ada:	23c0      	movs	r3, #192	; 0xc0
 8003adc:	00da      	lsls	r2, r3, #3
 8003ade:	23a0      	movs	r3, #160	; 0xa0
 8003ae0:	05db      	lsls	r3, r3, #23
 8003ae2:	0011      	movs	r1, r2
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f000 fcb1 	bl	800444c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 8003aea:	e034      	b.n	8003b56 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1e      	ldr	r2, [pc, #120]	; (8003b6c <HAL_UART_MspDeInit+0xb0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d10c      	bne.n	8003b10 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003af6:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <HAL_UART_MspDeInit+0xa8>)
 8003af8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003afa:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <HAL_UART_MspDeInit+0xa8>)
 8003afc:	491c      	ldr	r1, [pc, #112]	; (8003b70 <HAL_UART_MspDeInit+0xb4>)
 8003afe:	400a      	ands	r2, r1
 8003b00:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 8003b02:	23a0      	movs	r3, #160	; 0xa0
 8003b04:	05db      	lsls	r3, r3, #23
 8003b06:	210c      	movs	r1, #12
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f000 fc9f 	bl	800444c <HAL_GPIO_DeInit>
}
 8003b0e:	e022      	b.n	8003b56 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a17      	ldr	r2, [pc, #92]	; (8003b74 <HAL_UART_MspDeInit+0xb8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d10d      	bne.n	8003b36 <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003b1a:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <HAL_UART_MspDeInit+0xa8>)
 8003b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b1e:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <HAL_UART_MspDeInit+0xa8>)
 8003b20:	4915      	ldr	r1, [pc, #84]	; (8003b78 <HAL_UART_MspDeInit+0xbc>)
 8003b22:	400a      	ands	r2, r1
 8003b24:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 8003b26:	23c0      	movs	r3, #192	; 0xc0
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4a14      	ldr	r2, [pc, #80]	; (8003b7c <HAL_UART_MspDeInit+0xc0>)
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	0010      	movs	r0, r2
 8003b30:	f000 fc8c 	bl	800444c <HAL_GPIO_DeInit>
}
 8003b34:	e00f      	b.n	8003b56 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a11      	ldr	r2, [pc, #68]	; (8003b80 <HAL_UART_MspDeInit+0xc4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d10a      	bne.n	8003b56 <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <HAL_UART_MspDeInit+0xa8>)
 8003b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b44:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <HAL_UART_MspDeInit+0xa8>)
 8003b46:	490f      	ldr	r1, [pc, #60]	; (8003b84 <HAL_UART_MspDeInit+0xc8>)
 8003b48:	400a      	ands	r2, r1
 8003b4a:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_UART_MspDeInit+0xc0>)
 8003b4e:	2118      	movs	r1, #24
 8003b50:	0018      	movs	r0, r3
 8003b52:	f000 fc7b 	bl	800444c <HAL_GPIO_DeInit>
}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b002      	add	sp, #8
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	40013800 	.word	0x40013800
 8003b64:	40021000 	.word	0x40021000
 8003b68:	ffffbfff 	.word	0xffffbfff
 8003b6c:	40004400 	.word	0x40004400
 8003b70:	fffdffff 	.word	0xfffdffff
 8003b74:	40004800 	.word	0x40004800
 8003b78:	fffbffff 	.word	0xfffbffff
 8003b7c:	50000400 	.word	0x50000400
 8003b80:	40005000 	.word	0x40005000
 8003b84:	fffffeff 	.word	0xfffffeff

08003b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b8c:	e7fe      	b.n	8003b8c <NMI_Handler+0x4>

08003b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b92:	e7fe      	b.n	8003b92 <HardFault_Handler+0x4>

08003b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b98:	46c0      	nop			; (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bac:	f000 f97c 	bl	8003ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bb0:	46c0      	nop			; (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <RTC_TAMP_IRQHandler+0x14>)
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f002 f942 	bl	8005e48 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	200006f4 	.word	0x200006f4

08003bd0 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_Pin);
 8003bd4:	2004      	movs	r0, #4
 8003bd6:	f000 fd4b 	bl	8004670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003be4:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8003be6:	0018      	movs	r0, r3
 8003be8:	f002 fc6e 	bl	80064c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003bec:	46c0      	nop			; (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	20000784 	.word	0x20000784

08003bf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  return 1;
 8003bfc:	2301      	movs	r3, #1
}
 8003bfe:	0018      	movs	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <_kill>:

int _kill(int pid, int sig)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c0e:	f008 f94f 	bl	800beb0 <__errno>
 8003c12:	0003      	movs	r3, r0
 8003c14:	2216      	movs	r2, #22
 8003c16:	601a      	str	r2, [r3, #0]
  return -1;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	425b      	negs	r3, r3
}
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b002      	add	sp, #8
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <_exit>:

void _exit (int status)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	425a      	negs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	0011      	movs	r1, r2
 8003c34:	0018      	movs	r0, r3
 8003c36:	f7ff ffe5 	bl	8003c04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c3a:	e7fe      	b.n	8003c3a <_exit+0x16>

08003c3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	e00a      	b.n	8003c64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c4e:	e000      	b.n	8003c52 <_read+0x16>
 8003c50:	bf00      	nop
 8003c52:	0001      	movs	r1, r0
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	60ba      	str	r2, [r7, #8]
 8003c5a:	b2ca      	uxtb	r2, r1
 8003c5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	3301      	adds	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	dbf0      	blt.n	8003c4e <_read+0x12>
  }

  return len;
 8003c6c:	687b      	ldr	r3, [r7, #4]
}
 8003c6e:	0018      	movs	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b006      	add	sp, #24
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	e009      	b.n	8003c9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	60ba      	str	r2, [r7, #8]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	0018      	movs	r0, r3
 8003c92:	e000      	b.n	8003c96 <_write+0x20>
 8003c94:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	dbf1      	blt.n	8003c88 <_write+0x12>
  }
  return len;
 8003ca4:	687b      	ldr	r3, [r7, #4]
}
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b006      	add	sp, #24
 8003cac:	bd80      	pop	{r7, pc}

08003cae <_close>:

int _close(int file)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	425b      	negs	r3, r3
}
 8003cba:	0018      	movs	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b002      	add	sp, #8
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2280      	movs	r2, #128	; 0x80
 8003cd0:	0192      	lsls	r2, r2, #6
 8003cd2:	605a      	str	r2, [r3, #4]
  return 0;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b002      	add	sp, #8
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <_isatty>:

int _isatty(int file)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ce6:	2301      	movs	r3, #1
}
 8003ce8:	0018      	movs	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b002      	add	sp, #8
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	0018      	movs	r0, r3
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b004      	add	sp, #16
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d10:	4a14      	ldr	r2, [pc, #80]	; (8003d64 <_sbrk+0x5c>)
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <_sbrk+0x60>)
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d1c:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <_sbrk+0x64>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d102      	bne.n	8003d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d24:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <_sbrk+0x64>)
 8003d26:	4a12      	ldr	r2, [pc, #72]	; (8003d70 <_sbrk+0x68>)
 8003d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <_sbrk+0x64>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	18d3      	adds	r3, r2, r3
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d207      	bcs.n	8003d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d38:	f008 f8ba 	bl	800beb0 <__errno>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	220c      	movs	r2, #12
 8003d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d42:	2301      	movs	r3, #1
 8003d44:	425b      	negs	r3, r3
 8003d46:	e009      	b.n	8003d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d48:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <_sbrk+0x64>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d4e:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <_sbrk+0x64>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	18d2      	adds	r2, r2, r3
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <_sbrk+0x64>)
 8003d58:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
}
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b006      	add	sp, #24
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20024000 	.word	0x20024000
 8003d68:	00000400 	.word	0x00000400
 8003d6c:	20000afc 	.word	0x20000afc
 8003d70:	20000f40 	.word	0x20000f40

08003d74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d78:	46c0      	nop			; (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d80:	480d      	ldr	r0, [pc, #52]	; (8003db8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d84:	f7ff fff6 	bl	8003d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d88:	480c      	ldr	r0, [pc, #48]	; (8003dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8003d8a:	490d      	ldr	r1, [pc, #52]	; (8003dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d8c:	4a0d      	ldr	r2, [pc, #52]	; (8003dc4 <LoopForever+0xe>)
  movs r3, #0
 8003d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d90:	e002      	b.n	8003d98 <LoopCopyDataInit>

08003d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d96:	3304      	adds	r3, #4

08003d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d9c:	d3f9      	bcc.n	8003d92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	; (8003dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003da0:	4c0a      	ldr	r4, [pc, #40]	; (8003dcc <LoopForever+0x16>)
  movs r3, #0
 8003da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003da4:	e001      	b.n	8003daa <LoopFillZerobss>

08003da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003da8:	3204      	adds	r2, #4

08003daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dac:	d3fb      	bcc.n	8003da6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003dae:	f008 f885 	bl	800bebc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003db2:	f7fe fbf9 	bl	80025a8 <main>

08003db6 <LoopForever>:

LoopForever:
  b LoopForever
 8003db6:	e7fe      	b.n	8003db6 <LoopForever>
  ldr   r0, =_estack
 8003db8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dc0:	200006d8 	.word	0x200006d8
  ldr r2, =_sidata
 8003dc4:	08014950 	.word	0x08014950
  ldr r2, =_sbss
 8003dc8:	200006d8 	.word	0x200006d8
  ldr r4, =_ebss
 8003dcc:	20000f3c 	.word	0x20000f3c

08003dd0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003dd0:	e7fe      	b.n	8003dd0 <ADC1_COMP_IRQHandler>
	...

08003dd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003dda:	1dfb      	adds	r3, r7, #7
 8003ddc:	2200      	movs	r2, #0
 8003dde:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003de0:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_Init+0x3c>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <HAL_Init+0x3c>)
 8003de6:	2180      	movs	r1, #128	; 0x80
 8003de8:	0049      	lsls	r1, r1, #1
 8003dea:	430a      	orrs	r2, r1
 8003dec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dee:	2003      	movs	r0, #3
 8003df0:	f000 f810 	bl	8003e14 <HAL_InitTick>
 8003df4:	1e03      	subs	r3, r0, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003df8:	1dfb      	adds	r3, r7, #7
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]
 8003dfe:	e001      	b.n	8003e04 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003e00:	f7ff fc52 	bl	80036a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e04:	1dfb      	adds	r3, r7, #7
 8003e06:	781b      	ldrb	r3, [r3, #0]
}
 8003e08:	0018      	movs	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b002      	add	sp, #8
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40022000 	.word	0x40022000

08003e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e14:	b590      	push	{r4, r7, lr}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e1c:	230f      	movs	r3, #15
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003e24:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <HAL_InitTick+0x88>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d02b      	beq.n	8003e84 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003e2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ea0 <HAL_InitTick+0x8c>)
 8003e2e:	681c      	ldr	r4, [r3, #0]
 8003e30:	4b1a      	ldr	r3, [pc, #104]	; (8003e9c <HAL_InitTick+0x88>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	0019      	movs	r1, r3
 8003e36:	23fa      	movs	r3, #250	; 0xfa
 8003e38:	0098      	lsls	r0, r3, #2
 8003e3a:	f7fc f97f 	bl	800013c <__udivsi3>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	0019      	movs	r1, r3
 8003e42:	0020      	movs	r0, r4
 8003e44:	f7fc f97a 	bl	800013c <__udivsi3>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f000 f985 	bl	800415a <HAL_SYSTICK_Config>
 8003e50:	1e03      	subs	r3, r0, #0
 8003e52:	d112      	bne.n	8003e7a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d80a      	bhi.n	8003e70 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	425b      	negs	r3, r3
 8003e60:	2200      	movs	r2, #0
 8003e62:	0018      	movs	r0, r3
 8003e64:	f000 f950 	bl	8004108 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e68:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <HAL_InitTick+0x90>)
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e00d      	b.n	8003e8c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003e70:	230f      	movs	r3, #15
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
 8003e78:	e008      	b.n	8003e8c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e7a:	230f      	movs	r3, #15
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	2201      	movs	r2, #1
 8003e80:	701a      	strb	r2, [r3, #0]
 8003e82:	e003      	b.n	8003e8c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e84:	230f      	movs	r3, #15
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	2201      	movs	r2, #1
 8003e8a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003e8c:	230f      	movs	r3, #15
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	781b      	ldrb	r3, [r3, #0]
}
 8003e92:	0018      	movs	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b005      	add	sp, #20
 8003e98:	bd90      	pop	{r4, r7, pc}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	20000014 	.word	0x20000014
 8003ea0:	2000000c 	.word	0x2000000c
 8003ea4:	20000010 	.word	0x20000010

08003ea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_IncTick+0x1c>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	001a      	movs	r2, r3
 8003eb2:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <HAL_IncTick+0x20>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	18d2      	adds	r2, r2, r3
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <HAL_IncTick+0x20>)
 8003eba:	601a      	str	r2, [r3, #0]
}
 8003ebc:	46c0      	nop			; (mov r8, r8)
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	20000014 	.word	0x20000014
 8003ec8:	20000b00 	.word	0x20000b00

08003ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  return uwTick;
 8003ed0:	4b02      	ldr	r3, [pc, #8]	; (8003edc <HAL_GetTick+0x10>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
}
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	20000b00 	.word	0x20000b00

08003ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ee8:	f7ff fff0 	bl	8003ecc <HAL_GetTick>
 8003eec:	0003      	movs	r3, r0
 8003eee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	d005      	beq.n	8003f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003efa:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <HAL_Delay+0x44>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	001a      	movs	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	189b      	adds	r3, r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	f7ff ffe0 	bl	8003ecc <HAL_GetTick>
 8003f0c:	0002      	movs	r2, r0
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d8f7      	bhi.n	8003f08 <HAL_Delay+0x28>
  {
  }
}
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b004      	add	sp, #16
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	20000014 	.word	0x20000014

08003f28 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003f2c:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <HAL_SuspendTick+0x18>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <HAL_SuspendTick+0x18>)
 8003f32:	2102      	movs	r1, #2
 8003f34:	438a      	bics	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]
}
 8003f38:	46c0      	nop			; (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	e000e010 	.word	0xe000e010

08003f44 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <HAL_ResumeTick+0x18>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <HAL_ResumeTick+0x18>)
 8003f4e:	2102      	movs	r1, #2
 8003f50:	430a      	orrs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]
}
 8003f54:	46c0      	nop			; (mov r8, r8)
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	e000e010 	.word	0xe000e010

08003f60 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003f68:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a06      	ldr	r2, [pc, #24]	; (8003f88 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	0019      	movs	r1, r3
 8003f72:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]
}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b002      	add	sp, #8
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	40010000 	.word	0x40010000
 8003f88:	fffff9ff 	.word	0xfffff9ff

08003f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	0002      	movs	r2, r0
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f98:	1dfb      	adds	r3, r7, #7
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f9e:	d809      	bhi.n	8003fb4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fa0:	1dfb      	adds	r3, r7, #7
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	001a      	movs	r2, r3
 8003fa6:	231f      	movs	r3, #31
 8003fa8:	401a      	ands	r2, r3
 8003faa:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <__NVIC_EnableIRQ+0x30>)
 8003fac:	2101      	movs	r1, #1
 8003fae:	4091      	lsls	r1, r2
 8003fb0:	000a      	movs	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003fb4:	46c0      	nop			; (mov r8, r8)
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b002      	add	sp, #8
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	e000e100 	.word	0xe000e100

08003fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fc0:	b590      	push	{r4, r7, lr}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	0002      	movs	r2, r0
 8003fc8:	6039      	str	r1, [r7, #0]
 8003fca:	1dfb      	adds	r3, r7, #7
 8003fcc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003fce:	1dfb      	adds	r3, r7, #7
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8003fd4:	d828      	bhi.n	8004028 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fd6:	4a2f      	ldr	r2, [pc, #188]	; (8004094 <__NVIC_SetPriority+0xd4>)
 8003fd8:	1dfb      	adds	r3, r7, #7
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	b25b      	sxtb	r3, r3
 8003fde:	089b      	lsrs	r3, r3, #2
 8003fe0:	33c0      	adds	r3, #192	; 0xc0
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	589b      	ldr	r3, [r3, r2]
 8003fe6:	1dfa      	adds	r2, r7, #7
 8003fe8:	7812      	ldrb	r2, [r2, #0]
 8003fea:	0011      	movs	r1, r2
 8003fec:	2203      	movs	r2, #3
 8003fee:	400a      	ands	r2, r1
 8003ff0:	00d2      	lsls	r2, r2, #3
 8003ff2:	21ff      	movs	r1, #255	; 0xff
 8003ff4:	4091      	lsls	r1, r2
 8003ff6:	000a      	movs	r2, r1
 8003ff8:	43d2      	mvns	r2, r2
 8003ffa:	401a      	ands	r2, r3
 8003ffc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	019b      	lsls	r3, r3, #6
 8004002:	22ff      	movs	r2, #255	; 0xff
 8004004:	401a      	ands	r2, r3
 8004006:	1dfb      	adds	r3, r7, #7
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	0018      	movs	r0, r3
 800400c:	2303      	movs	r3, #3
 800400e:	4003      	ands	r3, r0
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004014:	481f      	ldr	r0, [pc, #124]	; (8004094 <__NVIC_SetPriority+0xd4>)
 8004016:	1dfb      	adds	r3, r7, #7
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	b25b      	sxtb	r3, r3
 800401c:	089b      	lsrs	r3, r3, #2
 800401e:	430a      	orrs	r2, r1
 8004020:	33c0      	adds	r3, #192	; 0xc0
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004026:	e031      	b.n	800408c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004028:	4a1b      	ldr	r2, [pc, #108]	; (8004098 <__NVIC_SetPriority+0xd8>)
 800402a:	1dfb      	adds	r3, r7, #7
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	0019      	movs	r1, r3
 8004030:	230f      	movs	r3, #15
 8004032:	400b      	ands	r3, r1
 8004034:	3b08      	subs	r3, #8
 8004036:	089b      	lsrs	r3, r3, #2
 8004038:	3306      	adds	r3, #6
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	18d3      	adds	r3, r2, r3
 800403e:	3304      	adds	r3, #4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	1dfa      	adds	r2, r7, #7
 8004044:	7812      	ldrb	r2, [r2, #0]
 8004046:	0011      	movs	r1, r2
 8004048:	2203      	movs	r2, #3
 800404a:	400a      	ands	r2, r1
 800404c:	00d2      	lsls	r2, r2, #3
 800404e:	21ff      	movs	r1, #255	; 0xff
 8004050:	4091      	lsls	r1, r2
 8004052:	000a      	movs	r2, r1
 8004054:	43d2      	mvns	r2, r2
 8004056:	401a      	ands	r2, r3
 8004058:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	019b      	lsls	r3, r3, #6
 800405e:	22ff      	movs	r2, #255	; 0xff
 8004060:	401a      	ands	r2, r3
 8004062:	1dfb      	adds	r3, r7, #7
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	0018      	movs	r0, r3
 8004068:	2303      	movs	r3, #3
 800406a:	4003      	ands	r3, r0
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004070:	4809      	ldr	r0, [pc, #36]	; (8004098 <__NVIC_SetPriority+0xd8>)
 8004072:	1dfb      	adds	r3, r7, #7
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	001c      	movs	r4, r3
 8004078:	230f      	movs	r3, #15
 800407a:	4023      	ands	r3, r4
 800407c:	3b08      	subs	r3, #8
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	430a      	orrs	r2, r1
 8004082:	3306      	adds	r3, #6
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	18c3      	adds	r3, r0, r3
 8004088:	3304      	adds	r3, #4
 800408a:	601a      	str	r2, [r3, #0]
}
 800408c:	46c0      	nop			; (mov r8, r8)
 800408e:	46bd      	mov	sp, r7
 8004090:	b003      	add	sp, #12
 8004092:	bd90      	pop	{r4, r7, pc}
 8004094:	e000e100 	.word	0xe000e100
 8004098:	e000ed00 	.word	0xe000ed00

0800409c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80040a0:	f3bf 8f4f 	dsb	sy
}
 80040a4:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040a6:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <__NVIC_SystemReset+0x1c>)
 80040a8:	4a04      	ldr	r2, [pc, #16]	; (80040bc <__NVIC_SystemReset+0x20>)
 80040aa:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80040ac:	f3bf 8f4f 	dsb	sy
}
 80040b0:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	e7fd      	b.n	80040b2 <__NVIC_SystemReset+0x16>
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	e000ed00 	.word	0xe000ed00
 80040bc:	05fa0004 	.word	0x05fa0004

080040c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	1e5a      	subs	r2, r3, #1
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	045b      	lsls	r3, r3, #17
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d301      	bcc.n	80040d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040d4:	2301      	movs	r3, #1
 80040d6:	e010      	b.n	80040fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <SysTick_Config+0x44>)
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	3a01      	subs	r2, #1
 80040de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040e0:	2301      	movs	r3, #1
 80040e2:	425b      	negs	r3, r3
 80040e4:	2103      	movs	r1, #3
 80040e6:	0018      	movs	r0, r3
 80040e8:	f7ff ff6a 	bl	8003fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <SysTick_Config+0x44>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040f2:	4b04      	ldr	r3, [pc, #16]	; (8004104 <SysTick_Config+0x44>)
 80040f4:	2207      	movs	r2, #7
 80040f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	0018      	movs	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b002      	add	sp, #8
 8004100:	bd80      	pop	{r7, pc}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	e000e010 	.word	0xe000e010

08004108 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	210f      	movs	r1, #15
 8004114:	187b      	adds	r3, r7, r1
 8004116:	1c02      	adds	r2, r0, #0
 8004118:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	187b      	adds	r3, r7, r1
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	b25b      	sxtb	r3, r3
 8004122:	0011      	movs	r1, r2
 8004124:	0018      	movs	r0, r3
 8004126:	f7ff ff4b 	bl	8003fc0 <__NVIC_SetPriority>
}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	46bd      	mov	sp, r7
 800412e:	b004      	add	sp, #16
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	0002      	movs	r2, r0
 800413a:	1dfb      	adds	r3, r7, #7
 800413c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800413e:	1dfb      	adds	r3, r7, #7
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	b25b      	sxtb	r3, r3
 8004144:	0018      	movs	r0, r3
 8004146:	f7ff ff21 	bl	8003f8c <__NVIC_EnableIRQ>
}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	46bd      	mov	sp, r7
 800414e:	b002      	add	sp, #8
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004156:	f7ff ffa1 	bl	800409c <__NVIC_SystemReset>

0800415a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	0018      	movs	r0, r3
 8004166:	f7ff ffab 	bl	80040c0 <SysTick_Config>
 800416a:	0003      	movs	r3, r0
}
 800416c:	0018      	movs	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	b002      	add	sp, #8
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004182:	e14d      	b.n	8004420 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2101      	movs	r1, #1
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4091      	lsls	r1, r2
 800418e:	000a      	movs	r2, r1
 8004190:	4013      	ands	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d100      	bne.n	800419c <HAL_GPIO_Init+0x28>
 800419a:	e13e      	b.n	800441a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2203      	movs	r2, #3
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d005      	beq.n	80041b4 <HAL_GPIO_Init+0x40>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2203      	movs	r2, #3
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d130      	bne.n	8004216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	2203      	movs	r2, #3
 80041c0:	409a      	lsls	r2, r3
 80041c2:	0013      	movs	r3, r2
 80041c4:	43da      	mvns	r2, r3
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4013      	ands	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	409a      	lsls	r2, r3
 80041d6:	0013      	movs	r3, r2
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041ea:	2201      	movs	r2, #1
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	409a      	lsls	r2, r3
 80041f0:	0013      	movs	r3, r2
 80041f2:	43da      	mvns	r2, r3
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4013      	ands	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	091b      	lsrs	r3, r3, #4
 8004200:	2201      	movs	r2, #1
 8004202:	401a      	ands	r2, r3
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	409a      	lsls	r2, r3
 8004208:	0013      	movs	r3, r2
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2203      	movs	r2, #3
 800421c:	4013      	ands	r3, r2
 800421e:	2b03      	cmp	r3, #3
 8004220:	d017      	beq.n	8004252 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	2203      	movs	r2, #3
 800422e:	409a      	lsls	r2, r3
 8004230:	0013      	movs	r3, r2
 8004232:	43da      	mvns	r2, r3
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4013      	ands	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	689a      	ldr	r2, [r3, #8]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	409a      	lsls	r2, r3
 8004244:	0013      	movs	r3, r2
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2203      	movs	r2, #3
 8004258:	4013      	ands	r3, r2
 800425a:	2b02      	cmp	r3, #2
 800425c:	d123      	bne.n	80042a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	08da      	lsrs	r2, r3, #3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3208      	adds	r2, #8
 8004266:	0092      	lsls	r2, r2, #2
 8004268:	58d3      	ldr	r3, [r2, r3]
 800426a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	2207      	movs	r2, #7
 8004270:	4013      	ands	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	220f      	movs	r2, #15
 8004276:	409a      	lsls	r2, r3
 8004278:	0013      	movs	r3, r2
 800427a:	43da      	mvns	r2, r3
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	4013      	ands	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2107      	movs	r1, #7
 800428a:	400b      	ands	r3, r1
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	409a      	lsls	r2, r3
 8004290:	0013      	movs	r3, r2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	08da      	lsrs	r2, r3, #3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3208      	adds	r2, #8
 80042a0:	0092      	lsls	r2, r2, #2
 80042a2:	6939      	ldr	r1, [r7, #16]
 80042a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	2203      	movs	r2, #3
 80042b2:	409a      	lsls	r2, r3
 80042b4:	0013      	movs	r3, r2
 80042b6:	43da      	mvns	r2, r3
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	4013      	ands	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2203      	movs	r2, #3
 80042c4:	401a      	ands	r2, r3
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	409a      	lsls	r2, r3
 80042cc:	0013      	movs	r3, r2
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	23c0      	movs	r3, #192	; 0xc0
 80042e0:	029b      	lsls	r3, r3, #10
 80042e2:	4013      	ands	r3, r2
 80042e4:	d100      	bne.n	80042e8 <HAL_GPIO_Init+0x174>
 80042e6:	e098      	b.n	800441a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80042e8:	4a53      	ldr	r2, [pc, #332]	; (8004438 <HAL_GPIO_Init+0x2c4>)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	089b      	lsrs	r3, r3, #2
 80042ee:	3318      	adds	r3, #24
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	589b      	ldr	r3, [r3, r2]
 80042f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2203      	movs	r2, #3
 80042fa:	4013      	ands	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	220f      	movs	r2, #15
 8004300:	409a      	lsls	r2, r3
 8004302:	0013      	movs	r3, r2
 8004304:	43da      	mvns	r2, r3
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4013      	ands	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	23a0      	movs	r3, #160	; 0xa0
 8004310:	05db      	lsls	r3, r3, #23
 8004312:	429a      	cmp	r2, r3
 8004314:	d019      	beq.n	800434a <HAL_GPIO_Init+0x1d6>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a48      	ldr	r2, [pc, #288]	; (800443c <HAL_GPIO_Init+0x2c8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d013      	beq.n	8004346 <HAL_GPIO_Init+0x1d2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a47      	ldr	r2, [pc, #284]	; (8004440 <HAL_GPIO_Init+0x2cc>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00d      	beq.n	8004342 <HAL_GPIO_Init+0x1ce>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a46      	ldr	r2, [pc, #280]	; (8004444 <HAL_GPIO_Init+0x2d0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d007      	beq.n	800433e <HAL_GPIO_Init+0x1ca>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a45      	ldr	r2, [pc, #276]	; (8004448 <HAL_GPIO_Init+0x2d4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d101      	bne.n	800433a <HAL_GPIO_Init+0x1c6>
 8004336:	2304      	movs	r3, #4
 8004338:	e008      	b.n	800434c <HAL_GPIO_Init+0x1d8>
 800433a:	2305      	movs	r3, #5
 800433c:	e006      	b.n	800434c <HAL_GPIO_Init+0x1d8>
 800433e:	2303      	movs	r3, #3
 8004340:	e004      	b.n	800434c <HAL_GPIO_Init+0x1d8>
 8004342:	2302      	movs	r3, #2
 8004344:	e002      	b.n	800434c <HAL_GPIO_Init+0x1d8>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <HAL_GPIO_Init+0x1d8>
 800434a:	2300      	movs	r3, #0
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	2103      	movs	r1, #3
 8004350:	400a      	ands	r2, r1
 8004352:	00d2      	lsls	r2, r2, #3
 8004354:	4093      	lsls	r3, r2
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800435c:	4936      	ldr	r1, [pc, #216]	; (8004438 <HAL_GPIO_Init+0x2c4>)
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	089b      	lsrs	r3, r3, #2
 8004362:	3318      	adds	r3, #24
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800436a:	4b33      	ldr	r3, [pc, #204]	; (8004438 <HAL_GPIO_Init+0x2c4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	43da      	mvns	r2, r3
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4013      	ands	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	2380      	movs	r3, #128	; 0x80
 8004380:	035b      	lsls	r3, r3, #13
 8004382:	4013      	ands	r3, r2
 8004384:	d003      	beq.n	800438e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800438e:	4b2a      	ldr	r3, [pc, #168]	; (8004438 <HAL_GPIO_Init+0x2c4>)
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004394:	4b28      	ldr	r3, [pc, #160]	; (8004438 <HAL_GPIO_Init+0x2c4>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	43da      	mvns	r2, r3
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	4013      	ands	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	039b      	lsls	r3, r3, #14
 80043ac:	4013      	ands	r3, r2
 80043ae:	d003      	beq.n	80043b8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043b8:	4b1f      	ldr	r3, [pc, #124]	; (8004438 <HAL_GPIO_Init+0x2c4>)
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80043be:	4a1e      	ldr	r2, [pc, #120]	; (8004438 <HAL_GPIO_Init+0x2c4>)
 80043c0:	2384      	movs	r3, #132	; 0x84
 80043c2:	58d3      	ldr	r3, [r2, r3]
 80043c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	43da      	mvns	r2, r3
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	029b      	lsls	r3, r3, #10
 80043d8:	4013      	ands	r3, r2
 80043da:	d003      	beq.n	80043e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043e4:	4914      	ldr	r1, [pc, #80]	; (8004438 <HAL_GPIO_Init+0x2c4>)
 80043e6:	2284      	movs	r2, #132	; 0x84
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80043ec:	4a12      	ldr	r2, [pc, #72]	; (8004438 <HAL_GPIO_Init+0x2c4>)
 80043ee:	2380      	movs	r3, #128	; 0x80
 80043f0:	58d3      	ldr	r3, [r2, r3]
 80043f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	43da      	mvns	r2, r3
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4013      	ands	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	025b      	lsls	r3, r3, #9
 8004406:	4013      	ands	r3, r2
 8004408:	d003      	beq.n	8004412 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004412:	4909      	ldr	r1, [pc, #36]	; (8004438 <HAL_GPIO_Init+0x2c4>)
 8004414:	2280      	movs	r2, #128	; 0x80
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	3301      	adds	r3, #1
 800441e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	40da      	lsrs	r2, r3
 8004428:	1e13      	subs	r3, r2, #0
 800442a:	d000      	beq.n	800442e <HAL_GPIO_Init+0x2ba>
 800442c:	e6aa      	b.n	8004184 <HAL_GPIO_Init+0x10>
  }
}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	46c0      	nop			; (mov r8, r8)
 8004432:	46bd      	mov	sp, r7
 8004434:	b006      	add	sp, #24
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40021800 	.word	0x40021800
 800443c:	50000400 	.word	0x50000400
 8004440:	50000800 	.word	0x50000800
 8004444:	50000c00 	.word	0x50000c00
 8004448:	50001000 	.word	0x50001000

0800444c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800445a:	e0ba      	b.n	80045d2 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800445c:	2201      	movs	r2, #1
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	409a      	lsls	r2, r3
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	4013      	ands	r3, r2
 8004466:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d100      	bne.n	8004470 <HAL_GPIO_DeInit+0x24>
 800446e:	e0ad      	b.n	80045cc <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8004470:	4a5d      	ldr	r2, [pc, #372]	; (80045e8 <HAL_GPIO_DeInit+0x19c>)
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	089b      	lsrs	r3, r3, #2
 8004476:	3318      	adds	r3, #24
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	589b      	ldr	r3, [r3, r2]
 800447c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2203      	movs	r2, #3
 8004482:	4013      	ands	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	220f      	movs	r2, #15
 8004488:	409a      	lsls	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4013      	ands	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	23a0      	movs	r3, #160	; 0xa0
 8004494:	05db      	lsls	r3, r3, #23
 8004496:	429a      	cmp	r2, r3
 8004498:	d019      	beq.n	80044ce <HAL_GPIO_DeInit+0x82>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a53      	ldr	r2, [pc, #332]	; (80045ec <HAL_GPIO_DeInit+0x1a0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d013      	beq.n	80044ca <HAL_GPIO_DeInit+0x7e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a52      	ldr	r2, [pc, #328]	; (80045f0 <HAL_GPIO_DeInit+0x1a4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00d      	beq.n	80044c6 <HAL_GPIO_DeInit+0x7a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a51      	ldr	r2, [pc, #324]	; (80045f4 <HAL_GPIO_DeInit+0x1a8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d007      	beq.n	80044c2 <HAL_GPIO_DeInit+0x76>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a50      	ldr	r2, [pc, #320]	; (80045f8 <HAL_GPIO_DeInit+0x1ac>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d101      	bne.n	80044be <HAL_GPIO_DeInit+0x72>
 80044ba:	2304      	movs	r3, #4
 80044bc:	e008      	b.n	80044d0 <HAL_GPIO_DeInit+0x84>
 80044be:	2305      	movs	r3, #5
 80044c0:	e006      	b.n	80044d0 <HAL_GPIO_DeInit+0x84>
 80044c2:	2303      	movs	r3, #3
 80044c4:	e004      	b.n	80044d0 <HAL_GPIO_DeInit+0x84>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e002      	b.n	80044d0 <HAL_GPIO_DeInit+0x84>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <HAL_GPIO_DeInit+0x84>
 80044ce:	2300      	movs	r3, #0
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	2103      	movs	r1, #3
 80044d4:	400a      	ands	r2, r1
 80044d6:	00d2      	lsls	r2, r2, #3
 80044d8:	4093      	lsls	r3, r2
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d136      	bne.n	800454e <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80044e0:	4a41      	ldr	r2, [pc, #260]	; (80045e8 <HAL_GPIO_DeInit+0x19c>)
 80044e2:	2380      	movs	r3, #128	; 0x80
 80044e4:	58d3      	ldr	r3, [r2, r3]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	43d2      	mvns	r2, r2
 80044ea:	493f      	ldr	r1, [pc, #252]	; (80045e8 <HAL_GPIO_DeInit+0x19c>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	2280      	movs	r2, #128	; 0x80
 80044f0:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80044f2:	4a3d      	ldr	r2, [pc, #244]	; (80045e8 <HAL_GPIO_DeInit+0x19c>)
 80044f4:	2384      	movs	r3, #132	; 0x84
 80044f6:	58d3      	ldr	r3, [r2, r3]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	43d2      	mvns	r2, r2
 80044fc:	493a      	ldr	r1, [pc, #232]	; (80045e8 <HAL_GPIO_DeInit+0x19c>)
 80044fe:	4013      	ands	r3, r2
 8004500:	2284      	movs	r2, #132	; 0x84
 8004502:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004504:	4b38      	ldr	r3, [pc, #224]	; (80045e8 <HAL_GPIO_DeInit+0x19c>)
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	43d9      	mvns	r1, r3
 800450c:	4b36      	ldr	r3, [pc, #216]	; (80045e8 <HAL_GPIO_DeInit+0x19c>)
 800450e:	400a      	ands	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004512:	4b35      	ldr	r3, [pc, #212]	; (80045e8 <HAL_GPIO_DeInit+0x19c>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	43d9      	mvns	r1, r3
 800451a:	4b33      	ldr	r3, [pc, #204]	; (80045e8 <HAL_GPIO_DeInit+0x19c>)
 800451c:	400a      	ands	r2, r1
 800451e:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2203      	movs	r2, #3
 8004524:	4013      	ands	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	220f      	movs	r2, #15
 800452a:	409a      	lsls	r2, r3
 800452c:	0013      	movs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004530:	4a2d      	ldr	r2, [pc, #180]	; (80045e8 <HAL_GPIO_DeInit+0x19c>)
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	089b      	lsrs	r3, r3, #2
 8004536:	3318      	adds	r3, #24
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	589a      	ldr	r2, [r3, r2]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	43d9      	mvns	r1, r3
 8004540:	4829      	ldr	r0, [pc, #164]	; (80045e8 <HAL_GPIO_DeInit+0x19c>)
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	089b      	lsrs	r3, r3, #2
 8004546:	400a      	ands	r2, r1
 8004548:	3318      	adds	r3, #24
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	2103      	movs	r1, #3
 8004558:	4099      	lsls	r1, r3
 800455a:	000b      	movs	r3, r1
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	08da      	lsrs	r2, r3, #3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3208      	adds	r2, #8
 800456a:	0092      	lsls	r2, r2, #2
 800456c:	58d3      	ldr	r3, [r2, r3]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	2107      	movs	r1, #7
 8004572:	400a      	ands	r2, r1
 8004574:	0092      	lsls	r2, r2, #2
 8004576:	210f      	movs	r1, #15
 8004578:	4091      	lsls	r1, r2
 800457a:	000a      	movs	r2, r1
 800457c:	43d1      	mvns	r1, r2
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	08d2      	lsrs	r2, r2, #3
 8004582:	4019      	ands	r1, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3208      	adds	r2, #8
 8004588:	0092      	lsls	r2, r2, #2
 800458a:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	0052      	lsls	r2, r2, #1
 8004594:	2103      	movs	r1, #3
 8004596:	4091      	lsls	r1, r2
 8004598:	000a      	movs	r2, r1
 800459a:	43d2      	mvns	r2, r2
 800459c:	401a      	ands	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2101      	movs	r1, #1
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4091      	lsls	r1, r2
 80045ac:	000a      	movs	r2, r1
 80045ae:	43d2      	mvns	r2, r2
 80045b0:	401a      	ands	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	0052      	lsls	r2, r2, #1
 80045be:	2103      	movs	r1, #3
 80045c0:	4091      	lsls	r1, r2
 80045c2:	000a      	movs	r2, r1
 80045c4:	43d2      	mvns	r2, r2
 80045c6:	401a      	ands	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	60da      	str	r2, [r3, #12]
    }

    position++;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	3301      	adds	r3, #1
 80045d0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	40da      	lsrs	r2, r3
 80045d8:	1e13      	subs	r3, r2, #0
 80045da:	d000      	beq.n	80045de <HAL_GPIO_DeInit+0x192>
 80045dc:	e73e      	b.n	800445c <HAL_GPIO_DeInit+0x10>
  }
}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	46c0      	nop			; (mov r8, r8)
 80045e2:	46bd      	mov	sp, r7
 80045e4:	b006      	add	sp, #24
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40021800 	.word	0x40021800
 80045ec:	50000400 	.word	0x50000400
 80045f0:	50000800 	.word	0x50000800
 80045f4:	50000c00 	.word	0x50000c00
 80045f8:	50001000 	.word	0x50001000

080045fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	000a      	movs	r2, r1
 8004606:	1cbb      	adds	r3, r7, #2
 8004608:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	1cba      	adds	r2, r7, #2
 8004610:	8812      	ldrh	r2, [r2, #0]
 8004612:	4013      	ands	r3, r2
 8004614:	d004      	beq.n	8004620 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004616:	230f      	movs	r3, #15
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	2201      	movs	r2, #1
 800461c:	701a      	strb	r2, [r3, #0]
 800461e:	e003      	b.n	8004628 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004620:	230f      	movs	r3, #15
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004628:	230f      	movs	r3, #15
 800462a:	18fb      	adds	r3, r7, r3
 800462c:	781b      	ldrb	r3, [r3, #0]
}
 800462e:	0018      	movs	r0, r3
 8004630:	46bd      	mov	sp, r7
 8004632:	b004      	add	sp, #16
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	0008      	movs	r0, r1
 8004640:	0011      	movs	r1, r2
 8004642:	1cbb      	adds	r3, r7, #2
 8004644:	1c02      	adds	r2, r0, #0
 8004646:	801a      	strh	r2, [r3, #0]
 8004648:	1c7b      	adds	r3, r7, #1
 800464a:	1c0a      	adds	r2, r1, #0
 800464c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800464e:	1c7b      	adds	r3, r7, #1
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d004      	beq.n	8004660 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004656:	1cbb      	adds	r3, r7, #2
 8004658:	881a      	ldrh	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800465e:	e003      	b.n	8004668 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004660:	1cbb      	adds	r3, r7, #2
 8004662:	881a      	ldrh	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004668:	46c0      	nop			; (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b002      	add	sp, #8
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	0002      	movs	r2, r0
 8004678:	1dbb      	adds	r3, r7, #6
 800467a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800467c:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	1dba      	adds	r2, r7, #6
 8004682:	8812      	ldrh	r2, [r2, #0]
 8004684:	4013      	ands	r3, r2
 8004686:	d008      	beq.n	800469a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004688:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800468a:	1dba      	adds	r2, r7, #6
 800468c:	8812      	ldrh	r2, [r2, #0]
 800468e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004690:	1dbb      	adds	r3, r7, #6
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	0018      	movs	r0, r3
 8004696:	f7fe fff7 	bl	8003688 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800469a:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	1dba      	adds	r2, r7, #6
 80046a0:	8812      	ldrh	r2, [r2, #0]
 80046a2:	4013      	ands	r3, r2
 80046a4:	d008      	beq.n	80046b8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80046a8:	1dba      	adds	r2, r7, #6
 80046aa:	8812      	ldrh	r2, [r2, #0]
 80046ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80046ae:	1dbb      	adds	r3, r7, #6
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	0018      	movs	r0, r3
 80046b4:	f000 f806 	bl	80046c4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80046b8:	46c0      	nop			; (mov r8, r8)
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b002      	add	sp, #8
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40021800 	.word	0x40021800

080046c4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	0002      	movs	r2, r0
 80046cc:	1dbb      	adds	r3, r7, #6
 80046ce:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80046d0:	46c0      	nop			; (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b002      	add	sp, #8
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046dc:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	4b03      	ldr	r3, [pc, #12]	; (80046f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80046e2:	2180      	movs	r1, #128	; 0x80
 80046e4:	0049      	lsls	r1, r1, #1
 80046e6:	430a      	orrs	r2, r1
 80046e8:	601a      	str	r2, [r3, #0]
}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40007000 	.word	0x40007000

080046f4 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	000a      	movs	r2, r1
 80046fe:	1cfb      	adds	r3, r7, #3
 8004700:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d009      	beq.n	800471c <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004708:	4b14      	ldr	r3, [pc, #80]	; (800475c <HAL_PWR_EnterSTOPMode+0x68>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2207      	movs	r2, #7
 800470e:	4393      	bics	r3, r2
 8004710:	001a      	movs	r2, r3
 8004712:	4b12      	ldr	r3, [pc, #72]	; (800475c <HAL_PWR_EnterSTOPMode+0x68>)
 8004714:	2101      	movs	r1, #1
 8004716:	430a      	orrs	r2, r1
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	e005      	b.n	8004728 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 800471c:	4b0f      	ldr	r3, [pc, #60]	; (800475c <HAL_PWR_EnterSTOPMode+0x68>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	4b0e      	ldr	r3, [pc, #56]	; (800475c <HAL_PWR_EnterSTOPMode+0x68>)
 8004722:	2107      	movs	r1, #7
 8004724:	438a      	bics	r2, r1
 8004726:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004728:	4b0d      	ldr	r3, [pc, #52]	; (8004760 <HAL_PWR_EnterSTOPMode+0x6c>)
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <HAL_PWR_EnterSTOPMode+0x6c>)
 800472e:	2104      	movs	r1, #4
 8004730:	430a      	orrs	r2, r1
 8004732:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004734:	1cfb      	adds	r3, r7, #3
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800473c:	bf30      	wfi
 800473e:	e002      	b.n	8004746 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004740:	bf40      	sev
    __WFE();
 8004742:	bf20      	wfe
    __WFE();
 8004744:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004746:	4b06      	ldr	r3, [pc, #24]	; (8004760 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_PWR_EnterSTOPMode+0x6c>)
 800474c:	2104      	movs	r1, #4
 800474e:	438a      	bics	r2, r1
 8004750:	611a      	str	r2, [r3, #16]
}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	46bd      	mov	sp, r7
 8004756:	b002      	add	sp, #8
 8004758:	bd80      	pop	{r7, pc}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	40007000 	.word	0x40007000
 8004760:	e000ed00 	.word	0xe000ed00

08004764 <HAL_PWR_EnterSTANDBYMode>:
  *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @note   Sram content can be kept setting RRS through HAL_PWREx_EnableSRAMRetention()
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 8004768:	4b09      	ldr	r3, [pc, #36]	; (8004790 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2207      	movs	r2, #7
 800476e:	4393      	bics	r3, r2
 8004770:	001a      	movs	r2, r3
 8004772:	4b07      	ldr	r3, [pc, #28]	; (8004790 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004774:	2103      	movs	r1, #3
 8004776:	430a      	orrs	r2, r1
 8004778:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800477a:	4b06      	ldr	r3, [pc, #24]	; (8004794 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004780:	2104      	movs	r1, #4
 8004782:	430a      	orrs	r2, r1
 8004784:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8004786:	bf30      	wfi
}
 8004788:	46c0      	nop			; (mov r8, r8)
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	40007000 	.word	0x40007000
 8004794:	e000ed00 	.word	0xe000ed00

08004798 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80047a0:	4b19      	ldr	r3, [pc, #100]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a19      	ldr	r2, [pc, #100]	; (800480c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	0019      	movs	r1, r3
 80047aa:	4b17      	ldr	r3, [pc, #92]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	2380      	movs	r3, #128	; 0x80
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d11f      	bne.n	80047fc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80047bc:	4b14      	ldr	r3, [pc, #80]	; (8004810 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	0013      	movs	r3, r2
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	189b      	adds	r3, r3, r2
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	4912      	ldr	r1, [pc, #72]	; (8004814 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80047ca:	0018      	movs	r0, r3
 80047cc:	f7fb fcb6 	bl	800013c <__udivsi3>
 80047d0:	0003      	movs	r3, r0
 80047d2:	3301      	adds	r3, #1
 80047d4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047d6:	e008      	b.n	80047ea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e001      	b.n	80047ea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e009      	b.n	80047fe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047ea:	4b07      	ldr	r3, [pc, #28]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	401a      	ands	r2, r3
 80047f4:	2380      	movs	r3, #128	; 0x80
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d0ed      	beq.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	0018      	movs	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	b004      	add	sp, #16
 8004804:	bd80      	pop	{r7, pc}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	40007000 	.word	0x40007000
 800480c:	fffff9ff 	.word	0xfffff9ff
 8004810:	2000000c 	.word	0x2000000c
 8004814:	000f4240 	.word	0x000f4240

08004818 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <LL_RCC_GetAPB1Prescaler+0x14>)
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	23e0      	movs	r3, #224	; 0xe0
 8004822:	01db      	lsls	r3, r3, #7
 8004824:	4013      	ands	r3, r2
}
 8004826:	0018      	movs	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40021000 	.word	0x40021000

08004830 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d102      	bne.n	8004844 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	f000 fb50 	bl	8004ee4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2201      	movs	r2, #1
 800484a:	4013      	ands	r3, r2
 800484c:	d100      	bne.n	8004850 <HAL_RCC_OscConfig+0x20>
 800484e:	e07c      	b.n	800494a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004850:	4bc3      	ldr	r3, [pc, #780]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2238      	movs	r2, #56	; 0x38
 8004856:	4013      	ands	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800485a:	4bc1      	ldr	r3, [pc, #772]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	2203      	movs	r2, #3
 8004860:	4013      	ands	r3, r2
 8004862:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	2b10      	cmp	r3, #16
 8004868:	d102      	bne.n	8004870 <HAL_RCC_OscConfig+0x40>
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b03      	cmp	r3, #3
 800486e:	d002      	beq.n	8004876 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b08      	cmp	r3, #8
 8004874:	d10b      	bne.n	800488e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004876:	4bba      	ldr	r3, [pc, #744]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	2380      	movs	r3, #128	; 0x80
 800487c:	029b      	lsls	r3, r3, #10
 800487e:	4013      	ands	r3, r2
 8004880:	d062      	beq.n	8004948 <HAL_RCC_OscConfig+0x118>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d15e      	bne.n	8004948 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e32a      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	025b      	lsls	r3, r3, #9
 8004896:	429a      	cmp	r2, r3
 8004898:	d107      	bne.n	80048aa <HAL_RCC_OscConfig+0x7a>
 800489a:	4bb1      	ldr	r3, [pc, #708]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4bb0      	ldr	r3, [pc, #704]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 80048a0:	2180      	movs	r1, #128	; 0x80
 80048a2:	0249      	lsls	r1, r1, #9
 80048a4:	430a      	orrs	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	e020      	b.n	80048ec <HAL_RCC_OscConfig+0xbc>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	23a0      	movs	r3, #160	; 0xa0
 80048b0:	02db      	lsls	r3, r3, #11
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d10e      	bne.n	80048d4 <HAL_RCC_OscConfig+0xa4>
 80048b6:	4baa      	ldr	r3, [pc, #680]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4ba9      	ldr	r3, [pc, #676]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 80048bc:	2180      	movs	r1, #128	; 0x80
 80048be:	02c9      	lsls	r1, r1, #11
 80048c0:	430a      	orrs	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	4ba6      	ldr	r3, [pc, #664]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4ba5      	ldr	r3, [pc, #660]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 80048ca:	2180      	movs	r1, #128	; 0x80
 80048cc:	0249      	lsls	r1, r1, #9
 80048ce:	430a      	orrs	r2, r1
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	e00b      	b.n	80048ec <HAL_RCC_OscConfig+0xbc>
 80048d4:	4ba2      	ldr	r3, [pc, #648]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4ba1      	ldr	r3, [pc, #644]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 80048da:	49a2      	ldr	r1, [pc, #648]	; (8004b64 <HAL_RCC_OscConfig+0x334>)
 80048dc:	400a      	ands	r2, r1
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	4b9f      	ldr	r3, [pc, #636]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	4b9e      	ldr	r3, [pc, #632]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 80048e6:	49a0      	ldr	r1, [pc, #640]	; (8004b68 <HAL_RCC_OscConfig+0x338>)
 80048e8:	400a      	ands	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d014      	beq.n	800491e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f4:	f7ff faea 	bl	8003ecc <HAL_GetTick>
 80048f8:	0003      	movs	r3, r0
 80048fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048fe:	f7ff fae5 	bl	8003ecc <HAL_GetTick>
 8004902:	0002      	movs	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b64      	cmp	r3, #100	; 0x64
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e2e9      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004910:	4b93      	ldr	r3, [pc, #588]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	029b      	lsls	r3, r3, #10
 8004918:	4013      	ands	r3, r2
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0xce>
 800491c:	e015      	b.n	800494a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491e:	f7ff fad5 	bl	8003ecc <HAL_GetTick>
 8004922:	0003      	movs	r3, r0
 8004924:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004928:	f7ff fad0 	bl	8003ecc <HAL_GetTick>
 800492c:	0002      	movs	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b64      	cmp	r3, #100	; 0x64
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e2d4      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800493a:	4b89      	ldr	r3, [pc, #548]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	2380      	movs	r3, #128	; 0x80
 8004940:	029b      	lsls	r3, r3, #10
 8004942:	4013      	ands	r3, r2
 8004944:	d1f0      	bne.n	8004928 <HAL_RCC_OscConfig+0xf8>
 8004946:	e000      	b.n	800494a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004948:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2202      	movs	r2, #2
 8004950:	4013      	ands	r3, r2
 8004952:	d100      	bne.n	8004956 <HAL_RCC_OscConfig+0x126>
 8004954:	e099      	b.n	8004a8a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004956:	4b82      	ldr	r3, [pc, #520]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2238      	movs	r2, #56	; 0x38
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004960:	4b7f      	ldr	r3, [pc, #508]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	2203      	movs	r2, #3
 8004966:	4013      	ands	r3, r2
 8004968:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b10      	cmp	r3, #16
 800496e:	d102      	bne.n	8004976 <HAL_RCC_OscConfig+0x146>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d002      	beq.n	800497c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d135      	bne.n	80049e8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800497c:	4b78      	ldr	r3, [pc, #480]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	2380      	movs	r3, #128	; 0x80
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	4013      	ands	r3, r2
 8004986:	d005      	beq.n	8004994 <HAL_RCC_OscConfig+0x164>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e2a7      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004994:	4b72      	ldr	r3, [pc, #456]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	4a74      	ldr	r2, [pc, #464]	; (8004b6c <HAL_RCC_OscConfig+0x33c>)
 800499a:	4013      	ands	r3, r2
 800499c:	0019      	movs	r1, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	021a      	lsls	r2, r3, #8
 80049a4:	4b6e      	ldr	r3, [pc, #440]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d112      	bne.n	80049d6 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80049b0:	4b6b      	ldr	r3, [pc, #428]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a6e      	ldr	r2, [pc, #440]	; (8004b70 <HAL_RCC_OscConfig+0x340>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	0019      	movs	r1, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	4b68      	ldr	r3, [pc, #416]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 80049c0:	430a      	orrs	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80049c4:	4b66      	ldr	r3, [pc, #408]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	0adb      	lsrs	r3, r3, #11
 80049ca:	2207      	movs	r2, #7
 80049cc:	4013      	ands	r3, r2
 80049ce:	4a69      	ldr	r2, [pc, #420]	; (8004b74 <HAL_RCC_OscConfig+0x344>)
 80049d0:	40da      	lsrs	r2, r3
 80049d2:	4b69      	ldr	r3, [pc, #420]	; (8004b78 <HAL_RCC_OscConfig+0x348>)
 80049d4:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049d6:	4b69      	ldr	r3, [pc, #420]	; (8004b7c <HAL_RCC_OscConfig+0x34c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	0018      	movs	r0, r3
 80049dc:	f7ff fa1a 	bl	8003e14 <HAL_InitTick>
 80049e0:	1e03      	subs	r3, r0, #0
 80049e2:	d051      	beq.n	8004a88 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e27d      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d030      	beq.n	8004a52 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80049f0:	4b5b      	ldr	r3, [pc, #364]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a5e      	ldr	r2, [pc, #376]	; (8004b70 <HAL_RCC_OscConfig+0x340>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	0019      	movs	r1, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	4b58      	ldr	r3, [pc, #352]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004a04:	4b56      	ldr	r3, [pc, #344]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	4b55      	ldr	r3, [pc, #340]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004a0a:	2180      	movs	r1, #128	; 0x80
 8004a0c:	0049      	lsls	r1, r1, #1
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a12:	f7ff fa5b 	bl	8003ecc <HAL_GetTick>
 8004a16:	0003      	movs	r3, r0
 8004a18:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a1c:	f7ff fa56 	bl	8003ecc <HAL_GetTick>
 8004a20:	0002      	movs	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e25a      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a2e:	4b4c      	ldr	r3, [pc, #304]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	2380      	movs	r3, #128	; 0x80
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4013      	ands	r3, r2
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3a:	4b49      	ldr	r3, [pc, #292]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	4a4b      	ldr	r2, [pc, #300]	; (8004b6c <HAL_RCC_OscConfig+0x33c>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	0019      	movs	r1, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	021a      	lsls	r2, r3, #8
 8004a4a:	4b45      	ldr	r3, [pc, #276]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	605a      	str	r2, [r3, #4]
 8004a50:	e01b      	b.n	8004a8a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004a52:	4b43      	ldr	r3, [pc, #268]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4b42      	ldr	r3, [pc, #264]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004a58:	4949      	ldr	r1, [pc, #292]	; (8004b80 <HAL_RCC_OscConfig+0x350>)
 8004a5a:	400a      	ands	r2, r1
 8004a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5e:	f7ff fa35 	bl	8003ecc <HAL_GetTick>
 8004a62:	0003      	movs	r3, r0
 8004a64:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a68:	f7ff fa30 	bl	8003ecc <HAL_GetTick>
 8004a6c:	0002      	movs	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e234      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a7a:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	2380      	movs	r3, #128	; 0x80
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	4013      	ands	r3, r2
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x238>
 8004a86:	e000      	b.n	8004a8a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a88:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2208      	movs	r2, #8
 8004a90:	4013      	ands	r3, r2
 8004a92:	d047      	beq.n	8004b24 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004a94:	4b32      	ldr	r3, [pc, #200]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2238      	movs	r2, #56	; 0x38
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b18      	cmp	r3, #24
 8004a9e:	d10a      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004aa0:	4b2f      	ldr	r3, [pc, #188]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d03c      	beq.n	8004b24 <HAL_RCC_OscConfig+0x2f4>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d138      	bne.n	8004b24 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e216      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d019      	beq.n	8004af2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004abe:	4b28      	ldr	r3, [pc, #160]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004ac0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ac2:	4b27      	ldr	r3, [pc, #156]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aca:	f7ff f9ff 	bl	8003ecc <HAL_GetTick>
 8004ace:	0003      	movs	r3, r0
 8004ad0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad4:	f7ff f9fa 	bl	8003ecc <HAL_GetTick>
 8004ad8:	0002      	movs	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e1fe      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ae6:	4b1e      	ldr	r3, [pc, #120]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aea:	2202      	movs	r2, #2
 8004aec:	4013      	ands	r3, r2
 8004aee:	d0f1      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x2a4>
 8004af0:	e018      	b.n	8004b24 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004af2:	4b1b      	ldr	r3, [pc, #108]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004af4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004af6:	4b1a      	ldr	r3, [pc, #104]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004af8:	2101      	movs	r1, #1
 8004afa:	438a      	bics	r2, r1
 8004afc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afe:	f7ff f9e5 	bl	8003ecc <HAL_GetTick>
 8004b02:	0003      	movs	r3, r0
 8004b04:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b08:	f7ff f9e0 	bl	8003ecc <HAL_GetTick>
 8004b0c:	0002      	movs	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e1e4      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b1a:	4b11      	ldr	r3, [pc, #68]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1e:	2202      	movs	r2, #2
 8004b20:	4013      	ands	r3, r2
 8004b22:	d1f1      	bne.n	8004b08 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2204      	movs	r2, #4
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d100      	bne.n	8004b30 <HAL_RCC_OscConfig+0x300>
 8004b2e:	e0c7      	b.n	8004cc0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b30:	231f      	movs	r3, #31
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b38:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2238      	movs	r2, #56	; 0x38
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d11f      	bne.n	8004b84 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004b44:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <HAL_RCC_OscConfig+0x330>)
 8004b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b48:	2202      	movs	r2, #2
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d100      	bne.n	8004b50 <HAL_RCC_OscConfig+0x320>
 8004b4e:	e0b7      	b.n	8004cc0 <HAL_RCC_OscConfig+0x490>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d000      	beq.n	8004b5a <HAL_RCC_OscConfig+0x32a>
 8004b58:	e0b2      	b.n	8004cc0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e1c2      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	40021000 	.word	0x40021000
 8004b64:	fffeffff 	.word	0xfffeffff
 8004b68:	fffbffff 	.word	0xfffbffff
 8004b6c:	ffff80ff 	.word	0xffff80ff
 8004b70:	ffffc7ff 	.word	0xffffc7ff
 8004b74:	00f42400 	.word	0x00f42400
 8004b78:	2000000c 	.word	0x2000000c
 8004b7c:	20000010 	.word	0x20000010
 8004b80:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b84:	4bb5      	ldr	r3, [pc, #724]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	055b      	lsls	r3, r3, #21
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d101      	bne.n	8004b94 <HAL_RCC_OscConfig+0x364>
 8004b90:	2301      	movs	r3, #1
 8004b92:	e000      	b.n	8004b96 <HAL_RCC_OscConfig+0x366>
 8004b94:	2300      	movs	r3, #0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d011      	beq.n	8004bbe <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004b9a:	4bb0      	ldr	r3, [pc, #704]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004b9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b9e:	4baf      	ldr	r3, [pc, #700]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004ba0:	2180      	movs	r1, #128	; 0x80
 8004ba2:	0549      	lsls	r1, r1, #21
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ba8:	4bac      	ldr	r3, [pc, #688]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bac:	2380      	movs	r3, #128	; 0x80
 8004bae:	055b      	lsls	r3, r3, #21
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004bb6:	231f      	movs	r3, #31
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	2201      	movs	r2, #1
 8004bbc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bbe:	4ba8      	ldr	r3, [pc, #672]	; (8004e60 <HAL_RCC_OscConfig+0x630>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d11a      	bne.n	8004c00 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bca:	4ba5      	ldr	r3, [pc, #660]	; (8004e60 <HAL_RCC_OscConfig+0x630>)
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	4ba4      	ldr	r3, [pc, #656]	; (8004e60 <HAL_RCC_OscConfig+0x630>)
 8004bd0:	2180      	movs	r1, #128	; 0x80
 8004bd2:	0049      	lsls	r1, r1, #1
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004bd8:	f7ff f978 	bl	8003ecc <HAL_GetTick>
 8004bdc:	0003      	movs	r3, r0
 8004bde:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be2:	f7ff f973 	bl	8003ecc <HAL_GetTick>
 8004be6:	0002      	movs	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e177      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bf4:	4b9a      	ldr	r3, [pc, #616]	; (8004e60 <HAL_RCC_OscConfig+0x630>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	2380      	movs	r3, #128	; 0x80
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d0f0      	beq.n	8004be2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d106      	bne.n	8004c16 <HAL_RCC_OscConfig+0x3e6>
 8004c08:	4b94      	ldr	r3, [pc, #592]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004c0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c0c:	4b93      	ldr	r3, [pc, #588]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004c0e:	2101      	movs	r1, #1
 8004c10:	430a      	orrs	r2, r1
 8004c12:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c14:	e01c      	b.n	8004c50 <HAL_RCC_OscConfig+0x420>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2b05      	cmp	r3, #5
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x408>
 8004c1e:	4b8f      	ldr	r3, [pc, #572]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004c20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c22:	4b8e      	ldr	r3, [pc, #568]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004c24:	2104      	movs	r1, #4
 8004c26:	430a      	orrs	r2, r1
 8004c28:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c2a:	4b8c      	ldr	r3, [pc, #560]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004c2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c2e:	4b8b      	ldr	r3, [pc, #556]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004c30:	2101      	movs	r1, #1
 8004c32:	430a      	orrs	r2, r1
 8004c34:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c36:	e00b      	b.n	8004c50 <HAL_RCC_OscConfig+0x420>
 8004c38:	4b88      	ldr	r3, [pc, #544]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004c3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c3c:	4b87      	ldr	r3, [pc, #540]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004c3e:	2101      	movs	r1, #1
 8004c40:	438a      	bics	r2, r1
 8004c42:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c44:	4b85      	ldr	r3, [pc, #532]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004c46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c48:	4b84      	ldr	r3, [pc, #528]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004c4a:	2104      	movs	r1, #4
 8004c4c:	438a      	bics	r2, r1
 8004c4e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d014      	beq.n	8004c82 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7ff f938 	bl	8003ecc <HAL_GetTick>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c60:	e009      	b.n	8004c76 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c62:	f7ff f933 	bl	8003ecc <HAL_GetTick>
 8004c66:	0002      	movs	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	4a7d      	ldr	r2, [pc, #500]	; (8004e64 <HAL_RCC_OscConfig+0x634>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e136      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c76:	4b79      	ldr	r3, [pc, #484]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x432>
 8004c80:	e013      	b.n	8004caa <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7ff f923 	bl	8003ecc <HAL_GetTick>
 8004c86:	0003      	movs	r3, r0
 8004c88:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c8a:	e009      	b.n	8004ca0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8c:	f7ff f91e 	bl	8003ecc <HAL_GetTick>
 8004c90:	0002      	movs	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	4a73      	ldr	r2, [pc, #460]	; (8004e64 <HAL_RCC_OscConfig+0x634>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e121      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ca0:	4b6e      	ldr	r3, [pc, #440]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004caa:	231f      	movs	r3, #31
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d105      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004cb4:	4b69      	ldr	r3, [pc, #420]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cb8:	4b68      	ldr	r3, [pc, #416]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004cba:	496b      	ldr	r1, [pc, #428]	; (8004e68 <HAL_RCC_OscConfig+0x638>)
 8004cbc:	400a      	ands	r2, r1
 8004cbe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d039      	beq.n	8004d3e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d01b      	beq.n	8004d0a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cd2:	4b62      	ldr	r3, [pc, #392]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4b61      	ldr	r3, [pc, #388]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004cd8:	2180      	movs	r1, #128	; 0x80
 8004cda:	03c9      	lsls	r1, r1, #15
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce0:	f7ff f8f4 	bl	8003ecc <HAL_GetTick>
 8004ce4:	0003      	movs	r3, r0
 8004ce6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cea:	f7ff f8ef 	bl	8003ecc <HAL_GetTick>
 8004cee:	0002      	movs	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e0f3      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004cfc:	4b57      	ldr	r3, [pc, #348]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	041b      	lsls	r3, r3, #16
 8004d04:	4013      	ands	r3, r2
 8004d06:	d0f0      	beq.n	8004cea <HAL_RCC_OscConfig+0x4ba>
 8004d08:	e019      	b.n	8004d3e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d0a:	4b54      	ldr	r3, [pc, #336]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4b53      	ldr	r3, [pc, #332]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004d10:	4956      	ldr	r1, [pc, #344]	; (8004e6c <HAL_RCC_OscConfig+0x63c>)
 8004d12:	400a      	ands	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d16:	f7ff f8d9 	bl	8003ecc <HAL_GetTick>
 8004d1a:	0003      	movs	r3, r0
 8004d1c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d20:	f7ff f8d4 	bl	8003ecc <HAL_GetTick>
 8004d24:	0002      	movs	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e0d8      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004d32:	4b4a      	ldr	r3, [pc, #296]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	2380      	movs	r3, #128	; 0x80
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d100      	bne.n	8004d48 <HAL_RCC_OscConfig+0x518>
 8004d46:	e0cc      	b.n	8004ee2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d48:	4b44      	ldr	r3, [pc, #272]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2238      	movs	r2, #56	; 0x38
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	d100      	bne.n	8004d56 <HAL_RCC_OscConfig+0x526>
 8004d54:	e07b      	b.n	8004e4e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d156      	bne.n	8004e0c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5e:	4b3f      	ldr	r3, [pc, #252]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	4b3e      	ldr	r3, [pc, #248]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004d64:	4942      	ldr	r1, [pc, #264]	; (8004e70 <HAL_RCC_OscConfig+0x640>)
 8004d66:	400a      	ands	r2, r1
 8004d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6a:	f7ff f8af 	bl	8003ecc <HAL_GetTick>
 8004d6e:	0003      	movs	r3, r0
 8004d70:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d74:	f7ff f8aa 	bl	8003ecc <HAL_GetTick>
 8004d78:	0002      	movs	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e0ae      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d86:	4b35      	ldr	r3, [pc, #212]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	2380      	movs	r3, #128	; 0x80
 8004d8c:	049b      	lsls	r3, r3, #18
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d92:	4b32      	ldr	r3, [pc, #200]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	4a37      	ldr	r2, [pc, #220]	; (8004e74 <HAL_RCC_OscConfig+0x644>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc6:	4b25      	ldr	r3, [pc, #148]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	4b24      	ldr	r3, [pc, #144]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004dcc:	2180      	movs	r1, #128	; 0x80
 8004dce:	0449      	lsls	r1, r1, #17
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004dd4:	4b21      	ldr	r3, [pc, #132]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004dda:	2180      	movs	r1, #128	; 0x80
 8004ddc:	0549      	lsls	r1, r1, #21
 8004dde:	430a      	orrs	r2, r1
 8004de0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de2:	f7ff f873 	bl	8003ecc <HAL_GetTick>
 8004de6:	0003      	movs	r3, r0
 8004de8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dec:	f7ff f86e 	bl	8003ecc <HAL_GetTick>
 8004df0:	0002      	movs	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e072      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dfe:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	049b      	lsls	r3, r3, #18
 8004e06:	4013      	ands	r3, r2
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0x5bc>
 8004e0a:	e06a      	b.n	8004ee2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e0c:	4b13      	ldr	r3, [pc, #76]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004e12:	4917      	ldr	r1, [pc, #92]	; (8004e70 <HAL_RCC_OscConfig+0x640>)
 8004e14:	400a      	ands	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7ff f858 	bl	8003ecc <HAL_GetTick>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e22:	f7ff f853 	bl	8003ecc <HAL_GetTick>
 8004e26:	0002      	movs	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e057      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e34:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	2380      	movs	r3, #128	; 0x80
 8004e3a:	049b      	lsls	r3, r3, #18
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d1f0      	bne.n	8004e22 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004e40:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <HAL_RCC_OscConfig+0x62c>)
 8004e46:	490c      	ldr	r1, [pc, #48]	; (8004e78 <HAL_RCC_OscConfig+0x648>)
 8004e48:	400a      	ands	r2, r1
 8004e4a:	60da      	str	r2, [r3, #12]
 8004e4c:	e049      	b.n	8004ee2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d112      	bne.n	8004e7c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e044      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	40007000 	.word	0x40007000
 8004e64:	00001388 	.word	0x00001388
 8004e68:	efffffff 	.word	0xefffffff
 8004e6c:	ffbfffff 	.word	0xffbfffff
 8004e70:	feffffff 	.word	0xfeffffff
 8004e74:	11c1808c 	.word	0x11c1808c
 8004e78:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004e7c:	4b1b      	ldr	r3, [pc, #108]	; (8004eec <HAL_RCC_OscConfig+0x6bc>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2203      	movs	r2, #3
 8004e86:	401a      	ands	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d126      	bne.n	8004ede <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2270      	movs	r2, #112	; 0x70
 8004e94:	401a      	ands	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d11f      	bne.n	8004ede <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	23fe      	movs	r3, #254	; 0xfe
 8004ea2:	01db      	lsls	r3, r3, #7
 8004ea4:	401a      	ands	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d116      	bne.n	8004ede <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	23f8      	movs	r3, #248	; 0xf8
 8004eb4:	039b      	lsls	r3, r3, #14
 8004eb6:	401a      	ands	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d10e      	bne.n	8004ede <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	23e0      	movs	r3, #224	; 0xe0
 8004ec4:	051b      	lsls	r3, r3, #20
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d106      	bne.n	8004ede <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	0f5b      	lsrs	r3, r3, #29
 8004ed4:	075a      	lsls	r2, r3, #29
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d001      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	b008      	add	sp, #32
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40021000 	.word	0x40021000

08004ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0e9      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f04:	4b76      	ldr	r3, [pc, #472]	; (80050e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2207      	movs	r2, #7
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d91e      	bls.n	8004f50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f12:	4b73      	ldr	r3, [pc, #460]	; (80050e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2207      	movs	r2, #7
 8004f18:	4393      	bics	r3, r2
 8004f1a:	0019      	movs	r1, r3
 8004f1c:	4b70      	ldr	r3, [pc, #448]	; (80050e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f24:	f7fe ffd2 	bl	8003ecc <HAL_GetTick>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f2c:	e009      	b.n	8004f42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f2e:	f7fe ffcd 	bl	8003ecc <HAL_GetTick>
 8004f32:	0002      	movs	r2, r0
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	4a6a      	ldr	r2, [pc, #424]	; (80050e4 <HAL_RCC_ClockConfig+0x1f4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e0ca      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f42:	4b67      	ldr	r3, [pc, #412]	; (80050e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2207      	movs	r2, #7
 8004f48:	4013      	ands	r3, r2
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d1ee      	bne.n	8004f2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2202      	movs	r2, #2
 8004f56:	4013      	ands	r3, r2
 8004f58:	d015      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2204      	movs	r2, #4
 8004f60:	4013      	ands	r3, r2
 8004f62:	d006      	beq.n	8004f72 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004f64:	4b60      	ldr	r3, [pc, #384]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	4b5f      	ldr	r3, [pc, #380]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f6a:	21e0      	movs	r1, #224	; 0xe0
 8004f6c:	01c9      	lsls	r1, r1, #7
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f72:	4b5d      	ldr	r3, [pc, #372]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	4a5d      	ldr	r2, [pc, #372]	; (80050ec <HAL_RCC_ClockConfig+0x1fc>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	0019      	movs	r1, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	4b59      	ldr	r3, [pc, #356]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f82:	430a      	orrs	r2, r1
 8004f84:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	d057      	beq.n	8005040 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d107      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f98:	4b53      	ldr	r3, [pc, #332]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	029b      	lsls	r3, r3, #10
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d12b      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e097      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb0:	4b4d      	ldr	r3, [pc, #308]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	2380      	movs	r3, #128	; 0x80
 8004fb6:	049b      	lsls	r3, r3, #18
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d11f      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e08b      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d107      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fc8:	4b47      	ldr	r3, [pc, #284]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	2380      	movs	r3, #128	; 0x80
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d113      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e07f      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d106      	bne.n	8004fee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fe0:	4b41      	ldr	r3, [pc, #260]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d108      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e074      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fee:	4b3e      	ldr	r3, [pc, #248]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d101      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e06d      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ffc:	4b3a      	ldr	r3, [pc, #232]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2207      	movs	r2, #7
 8005002:	4393      	bics	r3, r2
 8005004:	0019      	movs	r1, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	4b37      	ldr	r3, [pc, #220]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 800500c:	430a      	orrs	r2, r1
 800500e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005010:	f7fe ff5c 	bl	8003ecc <HAL_GetTick>
 8005014:	0003      	movs	r3, r0
 8005016:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005018:	e009      	b.n	800502e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800501a:	f7fe ff57 	bl	8003ecc <HAL_GetTick>
 800501e:	0002      	movs	r2, r0
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	4a2f      	ldr	r2, [pc, #188]	; (80050e4 <HAL_RCC_ClockConfig+0x1f4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e054      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502e:	4b2e      	ldr	r3, [pc, #184]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2238      	movs	r2, #56	; 0x38
 8005034:	401a      	ands	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	429a      	cmp	r2, r3
 800503e:	d1ec      	bne.n	800501a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005040:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2207      	movs	r2, #7
 8005046:	4013      	ands	r3, r2
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d21e      	bcs.n	800508c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2207      	movs	r2, #7
 8005054:	4393      	bics	r3, r2
 8005056:	0019      	movs	r1, r3
 8005058:	4b21      	ldr	r3, [pc, #132]	; (80050e0 <HAL_RCC_ClockConfig+0x1f0>)
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005060:	f7fe ff34 	bl	8003ecc <HAL_GetTick>
 8005064:	0003      	movs	r3, r0
 8005066:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005068:	e009      	b.n	800507e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800506a:	f7fe ff2f 	bl	8003ecc <HAL_GetTick>
 800506e:	0002      	movs	r2, r0
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	4a1b      	ldr	r2, [pc, #108]	; (80050e4 <HAL_RCC_ClockConfig+0x1f4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e02c      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800507e:	4b18      	ldr	r3, [pc, #96]	; (80050e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2207      	movs	r2, #7
 8005084:	4013      	ands	r3, r2
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d1ee      	bne.n	800506a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2204      	movs	r2, #4
 8005092:	4013      	ands	r3, r2
 8005094:	d009      	beq.n	80050aa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005096:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	4a15      	ldr	r2, [pc, #84]	; (80050f0 <HAL_RCC_ClockConfig+0x200>)
 800509c:	4013      	ands	r3, r2
 800509e:	0019      	movs	r1, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 80050a6:	430a      	orrs	r2, r1
 80050a8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80050aa:	f000 f829 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 80050ae:	0001      	movs	r1, r0
 80050b0:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	220f      	movs	r2, #15
 80050b8:	401a      	ands	r2, r3
 80050ba:	4b0e      	ldr	r3, [pc, #56]	; (80050f4 <HAL_RCC_ClockConfig+0x204>)
 80050bc:	0092      	lsls	r2, r2, #2
 80050be:	58d3      	ldr	r3, [r2, r3]
 80050c0:	221f      	movs	r2, #31
 80050c2:	4013      	ands	r3, r2
 80050c4:	000a      	movs	r2, r1
 80050c6:	40da      	lsrs	r2, r3
 80050c8:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <HAL_RCC_ClockConfig+0x208>)
 80050ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <HAL_RCC_ClockConfig+0x20c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	0018      	movs	r0, r3
 80050d2:	f7fe fe9f 	bl	8003e14 <HAL_InitTick>
 80050d6:	0003      	movs	r3, r0
}
 80050d8:	0018      	movs	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	b004      	add	sp, #16
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40022000 	.word	0x40022000
 80050e4:	00001388 	.word	0x00001388
 80050e8:	40021000 	.word	0x40021000
 80050ec:	fffff0ff 	.word	0xfffff0ff
 80050f0:	ffff8fff 	.word	0xffff8fff
 80050f4:	08014414 	.word	0x08014414
 80050f8:	2000000c 	.word	0x2000000c
 80050fc:	20000010 	.word	0x20000010

08005100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005106:	4b3c      	ldr	r3, [pc, #240]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2238      	movs	r2, #56	; 0x38
 800510c:	4013      	ands	r3, r2
 800510e:	d10f      	bne.n	8005130 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005110:	4b39      	ldr	r3, [pc, #228]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	0adb      	lsrs	r3, r3, #11
 8005116:	2207      	movs	r2, #7
 8005118:	4013      	ands	r3, r2
 800511a:	2201      	movs	r2, #1
 800511c:	409a      	lsls	r2, r3
 800511e:	0013      	movs	r3, r2
 8005120:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005122:	6839      	ldr	r1, [r7, #0]
 8005124:	4835      	ldr	r0, [pc, #212]	; (80051fc <HAL_RCC_GetSysClockFreq+0xfc>)
 8005126:	f7fb f809 	bl	800013c <__udivsi3>
 800512a:	0003      	movs	r3, r0
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	e05d      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005130:	4b31      	ldr	r3, [pc, #196]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	2238      	movs	r2, #56	; 0x38
 8005136:	4013      	ands	r3, r2
 8005138:	2b08      	cmp	r3, #8
 800513a:	d102      	bne.n	8005142 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800513c:	4b30      	ldr	r3, [pc, #192]	; (8005200 <HAL_RCC_GetSysClockFreq+0x100>)
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	e054      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005142:	4b2d      	ldr	r3, [pc, #180]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2238      	movs	r2, #56	; 0x38
 8005148:	4013      	ands	r3, r2
 800514a:	2b10      	cmp	r3, #16
 800514c:	d138      	bne.n	80051c0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800514e:	4b2a      	ldr	r3, [pc, #168]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	2203      	movs	r2, #3
 8005154:	4013      	ands	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005158:	4b27      	ldr	r3, [pc, #156]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	2207      	movs	r2, #7
 8005160:	4013      	ands	r3, r2
 8005162:	3301      	adds	r3, #1
 8005164:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b03      	cmp	r3, #3
 800516a:	d10d      	bne.n	8005188 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	4824      	ldr	r0, [pc, #144]	; (8005200 <HAL_RCC_GetSysClockFreq+0x100>)
 8005170:	f7fa ffe4 	bl	800013c <__udivsi3>
 8005174:	0003      	movs	r3, r0
 8005176:	0019      	movs	r1, r3
 8005178:	4b1f      	ldr	r3, [pc, #124]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	0a1b      	lsrs	r3, r3, #8
 800517e:	227f      	movs	r2, #127	; 0x7f
 8005180:	4013      	ands	r3, r2
 8005182:	434b      	muls	r3, r1
 8005184:	617b      	str	r3, [r7, #20]
        break;
 8005186:	e00d      	b.n	80051a4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	481c      	ldr	r0, [pc, #112]	; (80051fc <HAL_RCC_GetSysClockFreq+0xfc>)
 800518c:	f7fa ffd6 	bl	800013c <__udivsi3>
 8005190:	0003      	movs	r3, r0
 8005192:	0019      	movs	r1, r3
 8005194:	4b18      	ldr	r3, [pc, #96]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	0a1b      	lsrs	r3, r3, #8
 800519a:	227f      	movs	r2, #127	; 0x7f
 800519c:	4013      	ands	r3, r2
 800519e:	434b      	muls	r3, r1
 80051a0:	617b      	str	r3, [r7, #20]
        break;
 80051a2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80051a4:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	0f5b      	lsrs	r3, r3, #29
 80051aa:	2207      	movs	r2, #7
 80051ac:	4013      	ands	r3, r2
 80051ae:	3301      	adds	r3, #1
 80051b0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	6978      	ldr	r0, [r7, #20]
 80051b6:	f7fa ffc1 	bl	800013c <__udivsi3>
 80051ba:	0003      	movs	r3, r0
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	e015      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80051c0:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	2238      	movs	r2, #56	; 0x38
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	d103      	bne.n	80051d4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	e00b      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80051d4:	4b08      	ldr	r3, [pc, #32]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2238      	movs	r2, #56	; 0x38
 80051da:	4013      	ands	r3, r2
 80051dc:	2b18      	cmp	r3, #24
 80051de:	d103      	bne.n	80051e8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80051e0:	23fa      	movs	r3, #250	; 0xfa
 80051e2:	01db      	lsls	r3, r3, #7
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	e001      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051ec:	693b      	ldr	r3, [r7, #16]
}
 80051ee:	0018      	movs	r0, r3
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b006      	add	sp, #24
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	40021000 	.word	0x40021000
 80051fc:	00f42400 	.word	0x00f42400
 8005200:	007a1200 	.word	0x007a1200

08005204 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005208:	4b02      	ldr	r3, [pc, #8]	; (8005214 <HAL_RCC_GetHCLKFreq+0x10>)
 800520a:	681b      	ldr	r3, [r3, #0]
}
 800520c:	0018      	movs	r0, r3
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	2000000c 	.word	0x2000000c

08005218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005218:	b5b0      	push	{r4, r5, r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800521c:	f7ff fff2 	bl	8005204 <HAL_RCC_GetHCLKFreq>
 8005220:	0004      	movs	r4, r0
 8005222:	f7ff faf9 	bl	8004818 <LL_RCC_GetAPB1Prescaler>
 8005226:	0003      	movs	r3, r0
 8005228:	0b1a      	lsrs	r2, r3, #12
 800522a:	4b05      	ldr	r3, [pc, #20]	; (8005240 <HAL_RCC_GetPCLK1Freq+0x28>)
 800522c:	0092      	lsls	r2, r2, #2
 800522e:	58d3      	ldr	r3, [r2, r3]
 8005230:	221f      	movs	r2, #31
 8005232:	4013      	ands	r3, r2
 8005234:	40dc      	lsrs	r4, r3
 8005236:	0023      	movs	r3, r4
}
 8005238:	0018      	movs	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	bdb0      	pop	{r4, r5, r7, pc}
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	08014454 	.word	0x08014454

08005244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800524c:	2313      	movs	r3, #19
 800524e:	18fb      	adds	r3, r7, r3
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005254:	2312      	movs	r3, #18
 8005256:	18fb      	adds	r3, r7, r3
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	029b      	lsls	r3, r3, #10
 8005264:	4013      	ands	r3, r2
 8005266:	d100      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005268:	e0ad      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800526a:	2011      	movs	r0, #17
 800526c:	183b      	adds	r3, r7, r0
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005272:	4b47      	ldr	r3, [pc, #284]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005276:	2380      	movs	r3, #128	; 0x80
 8005278:	055b      	lsls	r3, r3, #21
 800527a:	4013      	ands	r3, r2
 800527c:	d110      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800527e:	4b44      	ldr	r3, [pc, #272]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005282:	4b43      	ldr	r3, [pc, #268]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005284:	2180      	movs	r1, #128	; 0x80
 8005286:	0549      	lsls	r1, r1, #21
 8005288:	430a      	orrs	r2, r1
 800528a:	63da      	str	r2, [r3, #60]	; 0x3c
 800528c:	4b40      	ldr	r3, [pc, #256]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800528e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005290:	2380      	movs	r3, #128	; 0x80
 8005292:	055b      	lsls	r3, r3, #21
 8005294:	4013      	ands	r3, r2
 8005296:	60bb      	str	r3, [r7, #8]
 8005298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800529a:	183b      	adds	r3, r7, r0
 800529c:	2201      	movs	r2, #1
 800529e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052a0:	4b3c      	ldr	r3, [pc, #240]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	4b3b      	ldr	r3, [pc, #236]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80052a6:	2180      	movs	r1, #128	; 0x80
 80052a8:	0049      	lsls	r1, r1, #1
 80052aa:	430a      	orrs	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052ae:	f7fe fe0d 	bl	8003ecc <HAL_GetTick>
 80052b2:	0003      	movs	r3, r0
 80052b4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052b6:	e00b      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b8:	f7fe fe08 	bl	8003ecc <HAL_GetTick>
 80052bc:	0002      	movs	r2, r0
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d904      	bls.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80052c6:	2313      	movs	r3, #19
 80052c8:	18fb      	adds	r3, r7, r3
 80052ca:	2203      	movs	r2, #3
 80052cc:	701a      	strb	r2, [r3, #0]
        break;
 80052ce:	e005      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052d0:	4b30      	ldr	r3, [pc, #192]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	2380      	movs	r3, #128	; 0x80
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	4013      	ands	r3, r2
 80052da:	d0ed      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80052dc:	2313      	movs	r3, #19
 80052de:	18fb      	adds	r3, r7, r3
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d15e      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052e6:	4b2a      	ldr	r3, [pc, #168]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80052e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052ea:	23c0      	movs	r3, #192	; 0xc0
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4013      	ands	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d019      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d014      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005302:	4b23      	ldr	r3, [pc, #140]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005306:	4a24      	ldr	r2, [pc, #144]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005308:	4013      	ands	r3, r2
 800530a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800530c:	4b20      	ldr	r3, [pc, #128]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800530e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005310:	4b1f      	ldr	r3, [pc, #124]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005312:	2180      	movs	r1, #128	; 0x80
 8005314:	0249      	lsls	r1, r1, #9
 8005316:	430a      	orrs	r2, r1
 8005318:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800531a:	4b1d      	ldr	r3, [pc, #116]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800531c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800531e:	4b1c      	ldr	r3, [pc, #112]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005320:	491e      	ldr	r1, [pc, #120]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005322:	400a      	ands	r2, r1
 8005324:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005326:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2201      	movs	r2, #1
 8005330:	4013      	ands	r3, r2
 8005332:	d016      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005334:	f7fe fdca 	bl	8003ecc <HAL_GetTick>
 8005338:	0003      	movs	r3, r0
 800533a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800533c:	e00c      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533e:	f7fe fdc5 	bl	8003ecc <HAL_GetTick>
 8005342:	0002      	movs	r2, r0
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	4a15      	ldr	r2, [pc, #84]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d904      	bls.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800534e:	2313      	movs	r3, #19
 8005350:	18fb      	adds	r3, r7, r3
 8005352:	2203      	movs	r2, #3
 8005354:	701a      	strb	r2, [r3, #0]
            break;
 8005356:	e004      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005358:	4b0d      	ldr	r3, [pc, #52]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800535a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535c:	2202      	movs	r2, #2
 800535e:	4013      	ands	r3, r2
 8005360:	d0ed      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005362:	2313      	movs	r3, #19
 8005364:	18fb      	adds	r3, r7, r3
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10a      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800536c:	4b08      	ldr	r3, [pc, #32]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800536e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005370:	4a09      	ldr	r2, [pc, #36]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005372:	4013      	ands	r3, r2
 8005374:	0019      	movs	r1, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800537a:	4b05      	ldr	r3, [pc, #20]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800537c:	430a      	orrs	r2, r1
 800537e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005380:	e016      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005382:	2312      	movs	r3, #18
 8005384:	18fb      	adds	r3, r7, r3
 8005386:	2213      	movs	r2, #19
 8005388:	18ba      	adds	r2, r7, r2
 800538a:	7812      	ldrb	r2, [r2, #0]
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	e00f      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005390:	40021000 	.word	0x40021000
 8005394:	40007000 	.word	0x40007000
 8005398:	fffffcff 	.word	0xfffffcff
 800539c:	fffeffff 	.word	0xfffeffff
 80053a0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a4:	2312      	movs	r3, #18
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	2213      	movs	r2, #19
 80053aa:	18ba      	adds	r2, r7, r2
 80053ac:	7812      	ldrb	r2, [r2, #0]
 80053ae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053b0:	2311      	movs	r3, #17
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d105      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053ba:	4bb6      	ldr	r3, [pc, #728]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053be:	4bb5      	ldr	r3, [pc, #724]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053c0:	49b5      	ldr	r1, [pc, #724]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80053c2:	400a      	ands	r2, r1
 80053c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2201      	movs	r2, #1
 80053cc:	4013      	ands	r3, r2
 80053ce:	d009      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053d0:	4bb0      	ldr	r3, [pc, #704]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d4:	2203      	movs	r2, #3
 80053d6:	4393      	bics	r3, r2
 80053d8:	0019      	movs	r1, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	4bad      	ldr	r3, [pc, #692]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053e0:	430a      	orrs	r2, r1
 80053e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2202      	movs	r2, #2
 80053ea:	4013      	ands	r3, r2
 80053ec:	d009      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053ee:	4ba9      	ldr	r3, [pc, #676]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f2:	220c      	movs	r2, #12
 80053f4:	4393      	bics	r3, r2
 80053f6:	0019      	movs	r1, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	4ba5      	ldr	r3, [pc, #660]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053fe:	430a      	orrs	r2, r1
 8005400:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2204      	movs	r2, #4
 8005408:	4013      	ands	r3, r2
 800540a:	d009      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800540c:	4ba1      	ldr	r3, [pc, #644]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800540e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005410:	2230      	movs	r2, #48	; 0x30
 8005412:	4393      	bics	r3, r2
 8005414:	0019      	movs	r1, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	4b9e      	ldr	r3, [pc, #632]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800541c:	430a      	orrs	r2, r1
 800541e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2210      	movs	r2, #16
 8005426:	4013      	ands	r3, r2
 8005428:	d009      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800542a:	4b9a      	ldr	r3, [pc, #616]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800542c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542e:	4a9b      	ldr	r2, [pc, #620]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005430:	4013      	ands	r3, r2
 8005432:	0019      	movs	r1, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	4b96      	ldr	r3, [pc, #600]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800543a:	430a      	orrs	r2, r1
 800543c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	2380      	movs	r3, #128	; 0x80
 8005444:	015b      	lsls	r3, r3, #5
 8005446:	4013      	ands	r3, r2
 8005448:	d009      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800544a:	4b92      	ldr	r3, [pc, #584]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800544c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544e:	4a94      	ldr	r2, [pc, #592]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005450:	4013      	ands	r3, r2
 8005452:	0019      	movs	r1, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	695a      	ldr	r2, [r3, #20]
 8005458:	4b8e      	ldr	r3, [pc, #568]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800545a:	430a      	orrs	r2, r1
 800545c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	2380      	movs	r3, #128	; 0x80
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4013      	ands	r3, r2
 8005468:	d009      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800546a:	4b8a      	ldr	r3, [pc, #552]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800546c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546e:	4a8d      	ldr	r2, [pc, #564]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005470:	4013      	ands	r3, r2
 8005472:	0019      	movs	r1, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005478:	4b86      	ldr	r3, [pc, #536]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800547a:	430a      	orrs	r2, r1
 800547c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	2380      	movs	r3, #128	; 0x80
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	4013      	ands	r3, r2
 8005488:	d009      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800548a:	4b82      	ldr	r3, [pc, #520]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	4a86      	ldr	r2, [pc, #536]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005490:	4013      	ands	r3, r2
 8005492:	0019      	movs	r1, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005498:	4b7e      	ldr	r3, [pc, #504]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800549a:	430a      	orrs	r2, r1
 800549c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2220      	movs	r2, #32
 80054a4:	4013      	ands	r3, r2
 80054a6:	d009      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054a8:	4b7a      	ldr	r3, [pc, #488]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ac:	4a7f      	ldr	r2, [pc, #508]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	0019      	movs	r1, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	4b77      	ldr	r3, [pc, #476]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054b8:	430a      	orrs	r2, r1
 80054ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2240      	movs	r2, #64	; 0x40
 80054c2:	4013      	ands	r3, r2
 80054c4:	d009      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054c6:	4b73      	ldr	r3, [pc, #460]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ca:	4a79      	ldr	r2, [pc, #484]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	0019      	movs	r1, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	4b6f      	ldr	r3, [pc, #444]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054d6:	430a      	orrs	r2, r1
 80054d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	2380      	movs	r3, #128	; 0x80
 80054e0:	01db      	lsls	r3, r3, #7
 80054e2:	4013      	ands	r3, r2
 80054e4:	d015      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054e6:	4b6b      	ldr	r3, [pc, #428]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	0899      	lsrs	r1, r3, #2
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054f2:	4b68      	ldr	r3, [pc, #416]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054f4:	430a      	orrs	r2, r1
 80054f6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054fc:	2380      	movs	r3, #128	; 0x80
 80054fe:	05db      	lsls	r3, r3, #23
 8005500:	429a      	cmp	r2, r3
 8005502:	d106      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005504:	4b63      	ldr	r3, [pc, #396]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	4b62      	ldr	r3, [pc, #392]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800550a:	2180      	movs	r1, #128	; 0x80
 800550c:	0249      	lsls	r1, r1, #9
 800550e:	430a      	orrs	r2, r1
 8005510:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	031b      	lsls	r3, r3, #12
 800551a:	4013      	ands	r3, r2
 800551c:	d009      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800551e:	4b5d      	ldr	r3, [pc, #372]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005522:	2240      	movs	r2, #64	; 0x40
 8005524:	4393      	bics	r3, r2
 8005526:	0019      	movs	r1, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800552c:	4b59      	ldr	r3, [pc, #356]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800552e:	430a      	orrs	r2, r1
 8005530:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	2380      	movs	r3, #128	; 0x80
 8005538:	039b      	lsls	r3, r3, #14
 800553a:	4013      	ands	r3, r2
 800553c:	d016      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800553e:	4b55      	ldr	r3, [pc, #340]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005542:	4a5c      	ldr	r2, [pc, #368]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005544:	4013      	ands	r3, r2
 8005546:	0019      	movs	r1, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800554c:	4b51      	ldr	r3, [pc, #324]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800554e:	430a      	orrs	r2, r1
 8005550:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005556:	2380      	movs	r3, #128	; 0x80
 8005558:	03db      	lsls	r3, r3, #15
 800555a:	429a      	cmp	r2, r3
 800555c:	d106      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800555e:	4b4d      	ldr	r3, [pc, #308]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	4b4c      	ldr	r3, [pc, #304]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005564:	2180      	movs	r1, #128	; 0x80
 8005566:	0449      	lsls	r1, r1, #17
 8005568:	430a      	orrs	r2, r1
 800556a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	2380      	movs	r3, #128	; 0x80
 8005572:	03db      	lsls	r3, r3, #15
 8005574:	4013      	ands	r3, r2
 8005576:	d016      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005578:	4b46      	ldr	r3, [pc, #280]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800557a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557c:	4a4e      	ldr	r2, [pc, #312]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800557e:	4013      	ands	r3, r2
 8005580:	0019      	movs	r1, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005586:	4b43      	ldr	r3, [pc, #268]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005588:	430a      	orrs	r2, r1
 800558a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	045b      	lsls	r3, r3, #17
 8005594:	429a      	cmp	r2, r3
 8005596:	d106      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005598:	4b3e      	ldr	r3, [pc, #248]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	4b3d      	ldr	r3, [pc, #244]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800559e:	2180      	movs	r1, #128	; 0x80
 80055a0:	0449      	lsls	r1, r1, #17
 80055a2:	430a      	orrs	r2, r1
 80055a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	2380      	movs	r3, #128	; 0x80
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	4013      	ands	r3, r2
 80055b0:	d014      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80055b2:	4b38      	ldr	r3, [pc, #224]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b6:	2203      	movs	r2, #3
 80055b8:	4393      	bics	r3, r2
 80055ba:	0019      	movs	r1, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1a      	ldr	r2, [r3, #32]
 80055c0:	4b34      	ldr	r3, [pc, #208]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055c2:	430a      	orrs	r2, r1
 80055c4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d106      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80055ce:	4b31      	ldr	r3, [pc, #196]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	4b30      	ldr	r3, [pc, #192]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055d4:	2180      	movs	r1, #128	; 0x80
 80055d6:	0249      	lsls	r1, r1, #9
 80055d8:	430a      	orrs	r2, r1
 80055da:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	2380      	movs	r3, #128	; 0x80
 80055e2:	019b      	lsls	r3, r3, #6
 80055e4:	4013      	ands	r3, r2
 80055e6:	d014      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80055e8:	4b2a      	ldr	r3, [pc, #168]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ec:	220c      	movs	r2, #12
 80055ee:	4393      	bics	r3, r2
 80055f0:	0019      	movs	r1, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055f6:	4b27      	ldr	r3, [pc, #156]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055f8:	430a      	orrs	r2, r1
 80055fa:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	2b04      	cmp	r3, #4
 8005602:	d106      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005604:	4b23      	ldr	r3, [pc, #140]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	4b22      	ldr	r3, [pc, #136]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800560a:	2180      	movs	r1, #128	; 0x80
 800560c:	0249      	lsls	r1, r1, #9
 800560e:	430a      	orrs	r2, r1
 8005610:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	2380      	movs	r3, #128	; 0x80
 8005618:	045b      	lsls	r3, r3, #17
 800561a:	4013      	ands	r3, r2
 800561c:	d016      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800561e:	4b1d      	ldr	r3, [pc, #116]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005622:	4a22      	ldr	r2, [pc, #136]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005624:	4013      	ands	r3, r2
 8005626:	0019      	movs	r1, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800562c:	4b19      	ldr	r3, [pc, #100]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800562e:	430a      	orrs	r2, r1
 8005630:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005636:	2380      	movs	r3, #128	; 0x80
 8005638:	019b      	lsls	r3, r3, #6
 800563a:	429a      	cmp	r2, r3
 800563c:	d106      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800563e:	4b15      	ldr	r3, [pc, #84]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	4b14      	ldr	r3, [pc, #80]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005644:	2180      	movs	r1, #128	; 0x80
 8005646:	0449      	lsls	r1, r1, #17
 8005648:	430a      	orrs	r2, r1
 800564a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	2380      	movs	r3, #128	; 0x80
 8005652:	049b      	lsls	r3, r3, #18
 8005654:	4013      	ands	r3, r2
 8005656:	d016      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005658:	4b0e      	ldr	r3, [pc, #56]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800565a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565c:	4a10      	ldr	r2, [pc, #64]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800565e:	4013      	ands	r3, r2
 8005660:	0019      	movs	r1, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005666:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005668:	430a      	orrs	r2, r1
 800566a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005670:	2380      	movs	r3, #128	; 0x80
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	429a      	cmp	r2, r3
 8005676:	d106      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005678:	4b06      	ldr	r3, [pc, #24]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	4b05      	ldr	r3, [pc, #20]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800567e:	2180      	movs	r1, #128	; 0x80
 8005680:	0449      	lsls	r1, r1, #17
 8005682:	430a      	orrs	r2, r1
 8005684:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005686:	2312      	movs	r3, #18
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	781b      	ldrb	r3, [r3, #0]
}
 800568c:	0018      	movs	r0, r3
 800568e:	46bd      	mov	sp, r7
 8005690:	b006      	add	sp, #24
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40021000 	.word	0x40021000
 8005698:	efffffff 	.word	0xefffffff
 800569c:	fffff3ff 	.word	0xfffff3ff
 80056a0:	fffffcff 	.word	0xfffffcff
 80056a4:	fff3ffff 	.word	0xfff3ffff
 80056a8:	ffcfffff 	.word	0xffcfffff
 80056ac:	ffffcfff 	.word	0xffffcfff
 80056b0:	ffff3fff 	.word	0xffff3fff
 80056b4:	ffbfffff 	.word	0xffbfffff
 80056b8:	feffffff 	.word	0xfeffffff

080056bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056bc:	b5b0      	push	{r4, r5, r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80056c4:	230f      	movs	r3, #15
 80056c6:	18fb      	adds	r3, r7, r3
 80056c8:	2201      	movs	r2, #1
 80056ca:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d100      	bne.n	80056d4 <HAL_RTC_Init+0x18>
 80056d2:	e08c      	b.n	80057ee <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2229      	movs	r2, #41	; 0x29
 80056d8:	5c9b      	ldrb	r3, [r3, r2]
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10b      	bne.n	80056f8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2228      	movs	r2, #40	; 0x28
 80056e4:	2100      	movs	r1, #0
 80056e6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2288      	movs	r2, #136	; 0x88
 80056ec:	0212      	lsls	r2, r2, #8
 80056ee:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	0018      	movs	r0, r3
 80056f4:	f7fe f800 	bl	80036f8 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2229      	movs	r2, #41	; 0x29
 80056fc:	2102      	movs	r1, #2
 80056fe:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	2210      	movs	r2, #16
 8005708:	4013      	ands	r3, r2
 800570a:	2b10      	cmp	r3, #16
 800570c:	d062      	beq.n	80057d4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	22ca      	movs	r2, #202	; 0xca
 8005714:	625a      	str	r2, [r3, #36]	; 0x24
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2253      	movs	r2, #83	; 0x53
 800571c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800571e:	250f      	movs	r5, #15
 8005720:	197c      	adds	r4, r7, r5
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	0018      	movs	r0, r3
 8005726:	f000 fbf3 	bl	8005f10 <RTC_EnterInitMode>
 800572a:	0003      	movs	r3, r0
 800572c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800572e:	0028      	movs	r0, r5
 8005730:	183b      	adds	r3, r7, r0
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d12c      	bne.n	8005792 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	492e      	ldr	r1, [pc, #184]	; (80057fc <HAL_RTC_Init+0x140>)
 8005744:	400a      	ands	r2, r1
 8005746:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6999      	ldr	r1, [r3, #24]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6912      	ldr	r2, [r2, #16]
 800576e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6919      	ldr	r1, [r3, #16]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	041a      	lsls	r2, r3, #16
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005784:	183c      	adds	r4, r7, r0
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	0018      	movs	r0, r3
 800578a:	f000 fc03 	bl	8005f94 <RTC_ExitInitMode>
 800578e:	0003      	movs	r3, r0
 8005790:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005792:	230f      	movs	r3, #15
 8005794:	18fb      	adds	r3, r7, r3
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d116      	bne.n	80057ca <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	00d2      	lsls	r2, r2, #3
 80057a8:	08d2      	lsrs	r2, r2, #3
 80057aa:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6999      	ldr	r1, [r3, #24]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	431a      	orrs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	22ff      	movs	r2, #255	; 0xff
 80057d0:	625a      	str	r2, [r3, #36]	; 0x24
 80057d2:	e003      	b.n	80057dc <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80057d4:	230f      	movs	r3, #15
 80057d6:	18fb      	adds	r3, r7, r3
 80057d8:	2200      	movs	r2, #0
 80057da:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80057dc:	230f      	movs	r3, #15
 80057de:	18fb      	adds	r3, r7, r3
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d103      	bne.n	80057ee <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2229      	movs	r2, #41	; 0x29
 80057ea:	2101      	movs	r1, #1
 80057ec:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80057ee:	230f      	movs	r3, #15
 80057f0:	18fb      	adds	r3, r7, r3
 80057f2:	781b      	ldrb	r3, [r3, #0]
}
 80057f4:	0018      	movs	r0, r3
 80057f6:	46bd      	mov	sp, r7
 80057f8:	b004      	add	sp, #16
 80057fa:	bdb0      	pop	{r4, r5, r7, pc}
 80057fc:	fb8fffbf 	.word	0xfb8fffbf

08005800 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005800:	b5b0      	push	{r4, r5, r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2228      	movs	r2, #40	; 0x28
 8005810:	5c9b      	ldrb	r3, [r3, r2]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <HAL_RTC_SetTime+0x1a>
 8005816:	2302      	movs	r3, #2
 8005818:	e092      	b.n	8005940 <HAL_RTC_SetTime+0x140>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2228      	movs	r2, #40	; 0x28
 800581e:	2101      	movs	r1, #1
 8005820:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2229      	movs	r2, #41	; 0x29
 8005826:	2102      	movs	r1, #2
 8005828:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	22ca      	movs	r2, #202	; 0xca
 8005830:	625a      	str	r2, [r3, #36]	; 0x24
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2253      	movs	r2, #83	; 0x53
 8005838:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800583a:	2513      	movs	r5, #19
 800583c:	197c      	adds	r4, r7, r5
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	0018      	movs	r0, r3
 8005842:	f000 fb65 	bl	8005f10 <RTC_EnterInitMode>
 8005846:	0003      	movs	r3, r0
 8005848:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800584a:	197b      	adds	r3, r7, r5
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d162      	bne.n	8005918 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d125      	bne.n	80058a4 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	2240      	movs	r2, #64	; 0x40
 8005860:	4013      	ands	r3, r2
 8005862:	d102      	bne.n	800586a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2200      	movs	r2, #0
 8005868:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	0018      	movs	r0, r3
 8005870:	f000 fbd4 	bl	800601c <RTC_ByteToBcd2>
 8005874:	0003      	movs	r3, r0
 8005876:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	785b      	ldrb	r3, [r3, #1]
 800587c:	0018      	movs	r0, r3
 800587e:	f000 fbcd 	bl	800601c <RTC_ByteToBcd2>
 8005882:	0003      	movs	r3, r0
 8005884:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005886:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	789b      	ldrb	r3, [r3, #2]
 800588c:	0018      	movs	r0, r3
 800588e:	f000 fbc5 	bl	800601c <RTC_ByteToBcd2>
 8005892:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005894:	0022      	movs	r2, r4
 8005896:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	78db      	ldrb	r3, [r3, #3]
 800589c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800589e:	4313      	orrs	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]
 80058a2:	e017      	b.n	80058d4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	2240      	movs	r2, #64	; 0x40
 80058ac:	4013      	ands	r3, r2
 80058ae:	d102      	bne.n	80058b6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2200      	movs	r2, #0
 80058b4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058c2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058c8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	78db      	ldrb	r3, [r3, #3]
 80058ce:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058d0:	4313      	orrs	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	491b      	ldr	r1, [pc, #108]	; (8005948 <HAL_RTC_SetTime+0x148>)
 80058dc:	400a      	ands	r2, r1
 80058de:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4918      	ldr	r1, [pc, #96]	; (800594c <HAL_RTC_SetTime+0x14c>)
 80058ec:	400a      	ands	r2, r1
 80058ee:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6999      	ldr	r1, [r3, #24]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	431a      	orrs	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005908:	2313      	movs	r3, #19
 800590a:	18fc      	adds	r4, r7, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	0018      	movs	r0, r3
 8005910:	f000 fb40 	bl	8005f94 <RTC_ExitInitMode>
 8005914:	0003      	movs	r3, r0
 8005916:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	22ff      	movs	r2, #255	; 0xff
 800591e:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005920:	2313      	movs	r3, #19
 8005922:	18fb      	adds	r3, r7, r3
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d103      	bne.n	8005932 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2229      	movs	r2, #41	; 0x29
 800592e:	2101      	movs	r1, #1
 8005930:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2228      	movs	r2, #40	; 0x28
 8005936:	2100      	movs	r1, #0
 8005938:	5499      	strb	r1, [r3, r2]

  return status;
 800593a:	2313      	movs	r3, #19
 800593c:	18fb      	adds	r3, r7, r3
 800593e:	781b      	ldrb	r3, [r3, #0]
}
 8005940:	0018      	movs	r0, r3
 8005942:	46bd      	mov	sp, r7
 8005944:	b006      	add	sp, #24
 8005946:	bdb0      	pop	{r4, r5, r7, pc}
 8005948:	007f7f7f 	.word	0x007f7f7f
 800594c:	fffbffff 	.word	0xfffbffff

08005950 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	045b      	lsls	r3, r3, #17
 800596e:	0c5a      	lsrs	r2, r3, #17
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a22      	ldr	r2, [pc, #136]	; (8005a04 <HAL_RTC_GetTime+0xb4>)
 800597c:	4013      	ands	r3, r2
 800597e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	0c1b      	lsrs	r3, r3, #16
 8005984:	b2db      	uxtb	r3, r3
 8005986:	223f      	movs	r2, #63	; 0x3f
 8005988:	4013      	ands	r3, r2
 800598a:	b2da      	uxtb	r2, r3
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	0a1b      	lsrs	r3, r3, #8
 8005994:	b2db      	uxtb	r3, r3
 8005996:	227f      	movs	r2, #127	; 0x7f
 8005998:	4013      	ands	r3, r2
 800599a:	b2da      	uxtb	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	227f      	movs	r2, #127	; 0x7f
 80059a6:	4013      	ands	r3, r2
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	0d9b      	lsrs	r3, r3, #22
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2201      	movs	r2, #1
 80059b6:	4013      	ands	r3, r2
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d11a      	bne.n	80059fa <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	0018      	movs	r0, r3
 80059ca:	f000 fb4f 	bl	800606c <RTC_Bcd2ToByte>
 80059ce:	0003      	movs	r3, r0
 80059d0:	001a      	movs	r2, r3
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	0018      	movs	r0, r3
 80059dc:	f000 fb46 	bl	800606c <RTC_Bcd2ToByte>
 80059e0:	0003      	movs	r3, r0
 80059e2:	001a      	movs	r2, r3
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	789b      	ldrb	r3, [r3, #2]
 80059ec:	0018      	movs	r0, r3
 80059ee:	f000 fb3d 	bl	800606c <RTC_Bcd2ToByte>
 80059f2:	0003      	movs	r3, r0
 80059f4:	001a      	movs	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	0018      	movs	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	b006      	add	sp, #24
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	007f7f7f 	.word	0x007f7f7f

08005a08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a08:	b5b0      	push	{r4, r5, r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2228      	movs	r2, #40	; 0x28
 8005a18:	5c9b      	ldrb	r3, [r3, r2]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_RTC_SetDate+0x1a>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e07e      	b.n	8005b20 <HAL_RTC_SetDate+0x118>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2228      	movs	r2, #40	; 0x28
 8005a26:	2101      	movs	r1, #1
 8005a28:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2229      	movs	r2, #41	; 0x29
 8005a2e:	2102      	movs	r1, #2
 8005a30:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10e      	bne.n	8005a56 <HAL_RTC_SetDate+0x4e>
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	785b      	ldrb	r3, [r3, #1]
 8005a3c:	001a      	movs	r2, r3
 8005a3e:	2310      	movs	r3, #16
 8005a40:	4013      	ands	r3, r2
 8005a42:	d008      	beq.n	8005a56 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	785b      	ldrb	r3, [r3, #1]
 8005a48:	2210      	movs	r2, #16
 8005a4a:	4393      	bics	r3, r2
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	330a      	adds	r3, #10
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d11c      	bne.n	8005a96 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	78db      	ldrb	r3, [r3, #3]
 8005a60:	0018      	movs	r0, r3
 8005a62:	f000 fadb 	bl	800601c <RTC_ByteToBcd2>
 8005a66:	0003      	movs	r3, r0
 8005a68:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	785b      	ldrb	r3, [r3, #1]
 8005a6e:	0018      	movs	r0, r3
 8005a70:	f000 fad4 	bl	800601c <RTC_ByteToBcd2>
 8005a74:	0003      	movs	r3, r0
 8005a76:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a78:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	789b      	ldrb	r3, [r3, #2]
 8005a7e:	0018      	movs	r0, r3
 8005a80:	f000 facc 	bl	800601c <RTC_ByteToBcd2>
 8005a84:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a86:	0022      	movs	r2, r4
 8005a88:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	e00e      	b.n	8005ab4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	78db      	ldrb	r3, [r3, #3]
 8005a9a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	785b      	ldrb	r3, [r3, #1]
 8005aa0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005aa2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005aa8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	22ca      	movs	r2, #202	; 0xca
 8005aba:	625a      	str	r2, [r3, #36]	; 0x24
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2253      	movs	r2, #83	; 0x53
 8005ac2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ac4:	2513      	movs	r5, #19
 8005ac6:	197c      	adds	r4, r7, r5
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	0018      	movs	r0, r3
 8005acc:	f000 fa20 	bl	8005f10 <RTC_EnterInitMode>
 8005ad0:	0003      	movs	r3, r0
 8005ad2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005ad4:	0028      	movs	r0, r5
 8005ad6:	183b      	adds	r3, r7, r0
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10c      	bne.n	8005af8 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4910      	ldr	r1, [pc, #64]	; (8005b28 <HAL_RTC_SetDate+0x120>)
 8005ae6:	400a      	ands	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005aea:	183c      	adds	r4, r7, r0
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	0018      	movs	r0, r3
 8005af0:	f000 fa50 	bl	8005f94 <RTC_ExitInitMode>
 8005af4:	0003      	movs	r3, r0
 8005af6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	22ff      	movs	r2, #255	; 0xff
 8005afe:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005b00:	2313      	movs	r3, #19
 8005b02:	18fb      	adds	r3, r7, r3
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d103      	bne.n	8005b12 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2229      	movs	r2, #41	; 0x29
 8005b0e:	2101      	movs	r1, #1
 8005b10:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2228      	movs	r2, #40	; 0x28
 8005b16:	2100      	movs	r1, #0
 8005b18:	5499      	strb	r1, [r3, r2]

  return status;
 8005b1a:	2313      	movs	r3, #19
 8005b1c:	18fb      	adds	r3, r7, r3
 8005b1e:	781b      	ldrb	r3, [r3, #0]
}
 8005b20:	0018      	movs	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	b006      	add	sp, #24
 8005b26:	bdb0      	pop	{r4, r5, r7, pc}
 8005b28:	00ffff3f 	.word	0x00ffff3f

08005b2c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	4a21      	ldr	r2, [pc, #132]	; (8005bc4 <HAL_RTC_GetDate+0x98>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	0c1b      	lsrs	r3, r3, #16
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	0a1b      	lsrs	r3, r3, #8
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	221f      	movs	r2, #31
 8005b56:	4013      	ands	r3, r2
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	223f      	movs	r2, #63	; 0x3f
 8005b64:	4013      	ands	r3, r2
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	0b5b      	lsrs	r3, r3, #13
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2207      	movs	r2, #7
 8005b74:	4013      	ands	r3, r2
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d11a      	bne.n	8005bb8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	78db      	ldrb	r3, [r3, #3]
 8005b86:	0018      	movs	r0, r3
 8005b88:	f000 fa70 	bl	800606c <RTC_Bcd2ToByte>
 8005b8c:	0003      	movs	r3, r0
 8005b8e:	001a      	movs	r2, r3
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	785b      	ldrb	r3, [r3, #1]
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f000 fa67 	bl	800606c <RTC_Bcd2ToByte>
 8005b9e:	0003      	movs	r3, r0
 8005ba0:	001a      	movs	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	789b      	ldrb	r3, [r3, #2]
 8005baa:	0018      	movs	r0, r3
 8005bac:	f000 fa5e 	bl	800606c <RTC_Bcd2ToByte>
 8005bb0:	0003      	movs	r3, r0
 8005bb2:	001a      	movs	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	0018      	movs	r0, r3
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	b006      	add	sp, #24
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	00ffff3f 	.word	0x00ffff3f

08005bc8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005bc8:	b590      	push	{r4, r7, lr}
 8005bca:	b089      	sub	sp, #36	; 0x24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2228      	movs	r2, #40	; 0x28
 8005bd8:	5c9b      	ldrb	r3, [r3, r2]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_RTC_SetAlarm_IT+0x1a>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e127      	b.n	8005e32 <HAL_RTC_SetAlarm_IT+0x26a>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2228      	movs	r2, #40	; 0x28
 8005be6:	2101      	movs	r1, #1
 8005be8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2229      	movs	r2, #41	; 0x29
 8005bee:	2102      	movs	r1, #2
 8005bf0:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d136      	bne.n	8005c66 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	2240      	movs	r2, #64	; 0x40
 8005c00:	4013      	ands	r3, r2
 8005c02:	d102      	bne.n	8005c0a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2200      	movs	r2, #0
 8005c08:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f000 fa04 	bl	800601c <RTC_ByteToBcd2>
 8005c14:	0003      	movs	r3, r0
 8005c16:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f000 f9fd 	bl	800601c <RTC_ByteToBcd2>
 8005c22:	0003      	movs	r3, r0
 8005c24:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c26:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	789b      	ldrb	r3, [r3, #2]
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f000 f9f5 	bl	800601c <RTC_ByteToBcd2>
 8005c32:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005c34:	0022      	movs	r2, r4
 8005c36:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	78db      	ldrb	r3, [r3, #3]
 8005c3c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2220      	movs	r2, #32
 8005c46:	5c9b      	ldrb	r3, [r3, r2]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f000 f9e7 	bl	800601c <RTC_ByteToBcd2>
 8005c4e:	0003      	movs	r3, r0
 8005c50:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005c52:	0022      	movs	r2, r4
 8005c54:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005c5a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61fb      	str	r3, [r7, #28]
 8005c64:	e022      	b.n	8005cac <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	2240      	movs	r2, #64	; 0x40
 8005c6e:	4013      	ands	r3, r2
 8005c70:	d102      	bne.n	8005c78 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2200      	movs	r2, #0
 8005c76:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	785b      	ldrb	r3, [r3, #1]
 8005c82:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c84:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005c8a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	78db      	ldrb	r3, [r3, #3]
 8005c90:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005c92:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2120      	movs	r1, #32
 8005c98:	5c5b      	ldrb	r3, [r3, r1]
 8005c9a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005c9c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005ca2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	22ca      	movs	r2, #202	; 0xca
 8005cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2253      	movs	r2, #83	; 0x53
 8005cc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ccc:	2380      	movs	r3, #128	; 0x80
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d14c      	bne.n	8005d6e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699a      	ldr	r2, [r3, #24]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4957      	ldr	r1, [pc, #348]	; (8005e3c <HAL_RTC_SetAlarm_IT+0x274>)
 8005ce0:	400a      	ands	r2, r1
 8005ce2:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2101      	movs	r1, #1
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005cf4:	f7fe f8ea 	bl	8003ecc <HAL_GetTick>
 8005cf8:	0003      	movs	r3, r0
 8005cfa:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005cfc:	e016      	b.n	8005d2c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005cfe:	f7fe f8e5 	bl	8003ecc <HAL_GetTick>
 8005d02:	0002      	movs	r2, r0
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	1ad2      	subs	r2, r2, r3
 8005d08:	23fa      	movs	r3, #250	; 0xfa
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d90d      	bls.n	8005d2c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	22ff      	movs	r2, #255	; 0xff
 8005d16:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2229      	movs	r2, #41	; 0x29
 8005d1c:	2103      	movs	r1, #3
 8005d1e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2228      	movs	r2, #40	; 0x28
 8005d24:	2100      	movs	r1, #0
 8005d26:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e082      	b.n	8005e32 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	4013      	ands	r3, r2
 8005d36:	d0e2      	beq.n	8005cfe <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69fa      	ldr	r2, [r7, #28]
 8005d3e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2180      	movs	r1, #128	; 0x80
 8005d54:	0049      	lsls	r1, r1, #1
 8005d56:	430a      	orrs	r2, r1
 8005d58:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	699a      	ldr	r2, [r3, #24]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2180      	movs	r1, #128	; 0x80
 8005d66:	0149      	lsls	r1, r1, #5
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	619a      	str	r2, [r3, #24]
 8005d6c:	e04b      	b.n	8005e06 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	699a      	ldr	r2, [r3, #24]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4931      	ldr	r1, [pc, #196]	; (8005e40 <HAL_RTC_SetAlarm_IT+0x278>)
 8005d7a:	400a      	ands	r2, r1
 8005d7c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2102      	movs	r1, #2
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005d8e:	f7fe f89d 	bl	8003ecc <HAL_GetTick>
 8005d92:	0003      	movs	r3, r0
 8005d94:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005d96:	e016      	b.n	8005dc6 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d98:	f7fe f898 	bl	8003ecc <HAL_GetTick>
 8005d9c:	0002      	movs	r2, r0
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	1ad2      	subs	r2, r2, r3
 8005da2:	23fa      	movs	r3, #250	; 0xfa
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d90d      	bls.n	8005dc6 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	22ff      	movs	r2, #255	; 0xff
 8005db0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2229      	movs	r2, #41	; 0x29
 8005db6:	2103      	movs	r1, #3
 8005db8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2228      	movs	r2, #40	; 0x28
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e035      	b.n	8005e32 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d0e2      	beq.n	8005d98 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	699a      	ldr	r2, [r3, #24]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2180      	movs	r1, #128	; 0x80
 8005dee:	0089      	lsls	r1, r1, #2
 8005df0:	430a      	orrs	r2, r1
 8005df2:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2180      	movs	r1, #128	; 0x80
 8005e00:	0189      	lsls	r1, r1, #6
 8005e02:	430a      	orrs	r2, r1
 8005e04:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005e06:	4a0f      	ldr	r2, [pc, #60]	; (8005e44 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005e08:	2380      	movs	r3, #128	; 0x80
 8005e0a:	58d3      	ldr	r3, [r2, r3]
 8005e0c:	490d      	ldr	r1, [pc, #52]	; (8005e44 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005e0e:	2280      	movs	r2, #128	; 0x80
 8005e10:	0312      	lsls	r2, r2, #12
 8005e12:	4313      	orrs	r3, r2
 8005e14:	2280      	movs	r2, #128	; 0x80
 8005e16:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	22ff      	movs	r2, #255	; 0xff
 8005e1e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2229      	movs	r2, #41	; 0x29
 8005e24:	2101      	movs	r1, #1
 8005e26:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2228      	movs	r2, #40	; 0x28
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	0018      	movs	r0, r3
 8005e34:	46bd      	mov	sp, r7
 8005e36:	b009      	add	sp, #36	; 0x24
 8005e38:	bd90      	pop	{r4, r7, pc}
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	fffffeff 	.word	0xfffffeff
 8005e40:	fffffdff 	.word	0xfffffdff
 8005e44:	40021800 	.word	0x40021800

08005e48 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	2380      	movs	r3, #128	; 0x80
 8005e58:	015b      	lsls	r3, r3, #5
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	d011      	beq.n	8005e82 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e64:	2201      	movs	r2, #1
 8005e66:	4013      	ands	r3, r2
 8005e68:	d00b      	beq.n	8005e82 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2101      	movs	r1, #1
 8005e76:	430a      	orrs	r2, r1
 8005e78:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f7fd fbf5 	bl	800366c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699a      	ldr	r2, [r3, #24]
 8005e88:	2380      	movs	r3, #128	; 0x80
 8005e8a:	019b      	lsls	r3, r3, #6
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	d011      	beq.n	8005eb4 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e96:	2202      	movs	r2, #2
 8005e98:	4013      	ands	r3, r2
 8005e9a:	d00b      	beq.n	8005eb4 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2102      	movs	r1, #2
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f000 f961 	bl	8006176 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2229      	movs	r2, #41	; 0x29
 8005eb8:	2101      	movs	r1, #1
 8005eba:	5499      	strb	r1, [r3, r2]
}
 8005ebc:	46c0      	nop			; (mov r8, r8)
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	b002      	add	sp, #8
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a0e      	ldr	r2, [pc, #56]	; (8005f0c <HAL_RTC_WaitForSynchro+0x48>)
 8005ed2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005ed4:	f7fd fffa 	bl	8003ecc <HAL_GetTick>
 8005ed8:	0003      	movs	r3, r0
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005edc:	e00a      	b.n	8005ef4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005ede:	f7fd fff5 	bl	8003ecc <HAL_GetTick>
 8005ee2:	0002      	movs	r2, r0
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	1ad2      	subs	r2, r2, r3
 8005ee8:	23fa      	movs	r3, #250	; 0xfa
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d901      	bls.n	8005ef4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e006      	b.n	8005f02 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	2220      	movs	r2, #32
 8005efc:	4013      	ands	r3, r2
 8005efe:	d0ee      	beq.n	8005ede <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	0018      	movs	r0, r3
 8005f04:	46bd      	mov	sp, r7
 8005f06:	b004      	add	sp, #16
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	0001005f 	.word	0x0001005f

08005f10 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005f18:	230f      	movs	r3, #15
 8005f1a:	18fb      	adds	r3, r7, r3
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	2240      	movs	r2, #64	; 0x40
 8005f28:	4013      	ands	r3, r2
 8005f2a:	d12c      	bne.n	8005f86 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2180      	movs	r1, #128	; 0x80
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005f3c:	f7fd ffc6 	bl	8003ecc <HAL_GetTick>
 8005f40:	0003      	movs	r3, r0
 8005f42:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005f44:	e014      	b.n	8005f70 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005f46:	f7fd ffc1 	bl	8003ecc <HAL_GetTick>
 8005f4a:	0002      	movs	r2, r0
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	1ad2      	subs	r2, r2, r3
 8005f50:	200f      	movs	r0, #15
 8005f52:	183b      	adds	r3, r7, r0
 8005f54:	1839      	adds	r1, r7, r0
 8005f56:	7809      	ldrb	r1, [r1, #0]
 8005f58:	7019      	strb	r1, [r3, #0]
 8005f5a:	23fa      	movs	r3, #250	; 0xfa
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d906      	bls.n	8005f70 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005f62:	183b      	adds	r3, r7, r0
 8005f64:	2203      	movs	r2, #3
 8005f66:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2229      	movs	r2, #41	; 0x29
 8005f6c:	2103      	movs	r1, #3
 8005f6e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	2240      	movs	r2, #64	; 0x40
 8005f78:	4013      	ands	r3, r2
 8005f7a:	d104      	bne.n	8005f86 <RTC_EnterInitMode+0x76>
 8005f7c:	230f      	movs	r3, #15
 8005f7e:	18fb      	adds	r3, r7, r3
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d1df      	bne.n	8005f46 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005f86:	230f      	movs	r3, #15
 8005f88:	18fb      	adds	r3, r7, r3
 8005f8a:	781b      	ldrb	r3, [r3, #0]
}
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b004      	add	sp, #16
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f94:	b590      	push	{r4, r7, lr}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9c:	240f      	movs	r4, #15
 8005f9e:	193b      	adds	r3, r7, r4
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005fa4:	4b1c      	ldr	r3, [pc, #112]	; (8006018 <RTC_ExitInitMode+0x84>)
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	4b1b      	ldr	r3, [pc, #108]	; (8006018 <RTC_ExitInitMode+0x84>)
 8005faa:	2180      	movs	r1, #128	; 0x80
 8005fac:	438a      	bics	r2, r1
 8005fae:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005fb0:	4b19      	ldr	r3, [pc, #100]	; (8006018 <RTC_ExitInitMode+0x84>)
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	d10d      	bne.n	8005fd6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f7ff ff81 	bl	8005ec4 <HAL_RTC_WaitForSynchro>
 8005fc2:	1e03      	subs	r3, r0, #0
 8005fc4:	d021      	beq.n	800600a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2229      	movs	r2, #41	; 0x29
 8005fca:	2103      	movs	r1, #3
 8005fcc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005fce:	193b      	adds	r3, r7, r4
 8005fd0:	2203      	movs	r2, #3
 8005fd2:	701a      	strb	r2, [r3, #0]
 8005fd4:	e019      	b.n	800600a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005fd6:	4b10      	ldr	r3, [pc, #64]	; (8006018 <RTC_ExitInitMode+0x84>)
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	4b0f      	ldr	r3, [pc, #60]	; (8006018 <RTC_ExitInitMode+0x84>)
 8005fdc:	2120      	movs	r1, #32
 8005fde:	438a      	bics	r2, r1
 8005fe0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f7ff ff6d 	bl	8005ec4 <HAL_RTC_WaitForSynchro>
 8005fea:	1e03      	subs	r3, r0, #0
 8005fec:	d007      	beq.n	8005ffe <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2229      	movs	r2, #41	; 0x29
 8005ff2:	2103      	movs	r1, #3
 8005ff4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005ff6:	230f      	movs	r3, #15
 8005ff8:	18fb      	adds	r3, r7, r3
 8005ffa:	2203      	movs	r2, #3
 8005ffc:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005ffe:	4b06      	ldr	r3, [pc, #24]	; (8006018 <RTC_ExitInitMode+0x84>)
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	4b05      	ldr	r3, [pc, #20]	; (8006018 <RTC_ExitInitMode+0x84>)
 8006004:	2120      	movs	r1, #32
 8006006:	430a      	orrs	r2, r1
 8006008:	619a      	str	r2, [r3, #24]
  }

  return status;
 800600a:	230f      	movs	r3, #15
 800600c:	18fb      	adds	r3, r7, r3
 800600e:	781b      	ldrb	r3, [r3, #0]
}
 8006010:	0018      	movs	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	b005      	add	sp, #20
 8006016:	bd90      	pop	{r4, r7, pc}
 8006018:	40002800 	.word	0x40002800

0800601c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	0002      	movs	r2, r0
 8006024:	1dfb      	adds	r3, r7, #7
 8006026:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800602c:	230b      	movs	r3, #11
 800602e:	18fb      	adds	r3, r7, r3
 8006030:	1dfa      	adds	r2, r7, #7
 8006032:	7812      	ldrb	r2, [r2, #0]
 8006034:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8006036:	e008      	b.n	800604a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	3301      	adds	r3, #1
 800603c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800603e:	220b      	movs	r2, #11
 8006040:	18bb      	adds	r3, r7, r2
 8006042:	18ba      	adds	r2, r7, r2
 8006044:	7812      	ldrb	r2, [r2, #0]
 8006046:	3a0a      	subs	r2, #10
 8006048:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800604a:	210b      	movs	r1, #11
 800604c:	187b      	adds	r3, r7, r1
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b09      	cmp	r3, #9
 8006052:	d8f1      	bhi.n	8006038 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	b2db      	uxtb	r3, r3
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	b2da      	uxtb	r2, r3
 800605c:	187b      	adds	r3, r7, r1
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	4313      	orrs	r3, r2
 8006062:	b2db      	uxtb	r3, r3
}
 8006064:	0018      	movs	r0, r3
 8006066:	46bd      	mov	sp, r7
 8006068:	b004      	add	sp, #16
 800606a:	bd80      	pop	{r7, pc}

0800606c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	0002      	movs	r2, r0
 8006074:	1dfb      	adds	r3, r7, #7
 8006076:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006078:	1dfb      	adds	r3, r7, #7
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	091b      	lsrs	r3, r3, #4
 800607e:	b2db      	uxtb	r3, r3
 8006080:	001a      	movs	r2, r3
 8006082:	0013      	movs	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	189b      	adds	r3, r3, r2
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	b2da      	uxtb	r2, r3
 8006090:	1dfb      	adds	r3, r7, #7
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	210f      	movs	r1, #15
 8006096:	400b      	ands	r3, r1
 8006098:	b2db      	uxtb	r3, r3
 800609a:	18d3      	adds	r3, r2, r3
 800609c:	b2db      	uxtb	r3, r3
}
 800609e:	0018      	movs	r0, r3
 80060a0:	46bd      	mov	sp, r7
 80060a2:	b004      	add	sp, #16
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2228      	movs	r2, #40	; 0x28
 80060b2:	5c9b      	ldrb	r3, [r3, r2]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_RTCEx_EnableBypassShadow+0x16>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e024      	b.n	8006106 <HAL_RTCEx_EnableBypassShadow+0x60>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2228      	movs	r2, #40	; 0x28
 80060c0:	2101      	movs	r1, #1
 80060c2:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2229      	movs	r2, #41	; 0x29
 80060c8:	2102      	movs	r1, #2
 80060ca:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	22ca      	movs	r2, #202	; 0xca
 80060d2:	625a      	str	r2, [r3, #36]	; 0x24
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2253      	movs	r2, #83	; 0x53
 80060da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2120      	movs	r1, #32
 80060e8:	430a      	orrs	r2, r1
 80060ea:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	22ff      	movs	r2, #255	; 0xff
 80060f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2229      	movs	r2, #41	; 0x29
 80060f8:	2101      	movs	r1, #1
 80060fa:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2228      	movs	r2, #40	; 0x28
 8006100:	2100      	movs	r1, #0
 8006102:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	0018      	movs	r0, r3
 8006108:	46bd      	mov	sp, r7
 800610a:	b002      	add	sp, #8
 800610c:	bd80      	pop	{r7, pc}

0800610e <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b082      	sub	sp, #8
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2228      	movs	r2, #40	; 0x28
 800611a:	5c9b      	ldrb	r3, [r3, r2]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <HAL_RTCEx_DisableBypassShadow+0x16>
 8006120:	2302      	movs	r3, #2
 8006122:	e024      	b.n	800616e <HAL_RTCEx_DisableBypassShadow+0x60>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2228      	movs	r2, #40	; 0x28
 8006128:	2101      	movs	r1, #1
 800612a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2229      	movs	r2, #41	; 0x29
 8006130:	2102      	movs	r1, #2
 8006132:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	22ca      	movs	r2, #202	; 0xca
 800613a:	625a      	str	r2, [r3, #36]	; 0x24
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2253      	movs	r2, #83	; 0x53
 8006142:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	21df      	movs	r1, #223	; 0xdf
 8006150:	400a      	ands	r2, r1
 8006152:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	22ff      	movs	r2, #255	; 0xff
 800615a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2229      	movs	r2, #41	; 0x29
 8006160:	2101      	movs	r1, #1
 8006162:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2228      	movs	r2, #40	; 0x28
 8006168:	2100      	movs	r1, #0
 800616a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	0018      	movs	r0, r3
 8006170:	46bd      	mov	sp, r7
 8006172:	b002      	add	sp, #8
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800617e:	46c0      	nop			; (mov r8, r8)
 8006180:	46bd      	mov	sp, r7
 8006182:	b002      	add	sp, #8
 8006184:	bd80      	pop	{r7, pc}
	...

08006188 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e0a8      	b.n	80062ec <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d109      	bne.n	80061b6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	2382      	movs	r3, #130	; 0x82
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d009      	beq.n	80061c2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	61da      	str	r2, [r3, #28]
 80061b4:	e005      	b.n	80061c2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	225d      	movs	r2, #93	; 0x5d
 80061cc:	5c9b      	ldrb	r3, [r3, r2]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d107      	bne.n	80061e4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	225c      	movs	r2, #92	; 0x5c
 80061d8:	2100      	movs	r1, #0
 80061da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	0018      	movs	r0, r3
 80061e0:	f7fd fad0 	bl	8003784 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	225d      	movs	r2, #93	; 0x5d
 80061e8:	2102      	movs	r1, #2
 80061ea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2140      	movs	r1, #64	; 0x40
 80061f8:	438a      	bics	r2, r1
 80061fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	23e0      	movs	r3, #224	; 0xe0
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	429a      	cmp	r2, r3
 8006206:	d902      	bls.n	800620e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006208:	2300      	movs	r3, #0
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	e002      	b.n	8006214 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800620e:	2380      	movs	r3, #128	; 0x80
 8006210:	015b      	lsls	r3, r3, #5
 8006212:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	23f0      	movs	r3, #240	; 0xf0
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	429a      	cmp	r2, r3
 800621e:	d008      	beq.n	8006232 <HAL_SPI_Init+0xaa>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	23e0      	movs	r3, #224	; 0xe0
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	429a      	cmp	r2, r3
 800622a:	d002      	beq.n	8006232 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	2382      	movs	r3, #130	; 0x82
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	401a      	ands	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6899      	ldr	r1, [r3, #8]
 8006240:	2384      	movs	r3, #132	; 0x84
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	400b      	ands	r3, r1
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	2102      	movs	r1, #2
 800624e:	400b      	ands	r3, r1
 8006250:	431a      	orrs	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	2101      	movs	r1, #1
 8006258:	400b      	ands	r3, r1
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6999      	ldr	r1, [r3, #24]
 8006260:	2380      	movs	r3, #128	; 0x80
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	400b      	ands	r3, r1
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	2138      	movs	r1, #56	; 0x38
 800626e:	400b      	ands	r3, r1
 8006270:	431a      	orrs	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	2180      	movs	r1, #128	; 0x80
 8006278:	400b      	ands	r3, r1
 800627a:	431a      	orrs	r2, r3
 800627c:	0011      	movs	r1, r2
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006282:	2380      	movs	r3, #128	; 0x80
 8006284:	019b      	lsls	r3, r3, #6
 8006286:	401a      	ands	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	0c1b      	lsrs	r3, r3, #16
 8006296:	2204      	movs	r2, #4
 8006298:	401a      	ands	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	2110      	movs	r1, #16
 80062a0:	400b      	ands	r3, r1
 80062a2:	431a      	orrs	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a8:	2108      	movs	r1, #8
 80062aa:	400b      	ands	r3, r1
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68d9      	ldr	r1, [r3, #12]
 80062b2:	23f0      	movs	r3, #240	; 0xf0
 80062b4:	011b      	lsls	r3, r3, #4
 80062b6:	400b      	ands	r3, r1
 80062b8:	431a      	orrs	r2, r3
 80062ba:	0011      	movs	r1, r2
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	2380      	movs	r3, #128	; 0x80
 80062c0:	015b      	lsls	r3, r3, #5
 80062c2:	401a      	ands	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	69da      	ldr	r2, [r3, #28]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4907      	ldr	r1, [pc, #28]	; (80062f4 <HAL_SPI_Init+0x16c>)
 80062d8:	400a      	ands	r2, r1
 80062da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	225d      	movs	r2, #93	; 0x5d
 80062e6:	2101      	movs	r1, #1
 80062e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	0018      	movs	r0, r3
 80062ee:	46bd      	mov	sp, r7
 80062f0:	b004      	add	sp, #16
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	fffff7ff 	.word	0xfffff7ff

080062f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e04a      	b.n	80063a0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	223d      	movs	r2, #61	; 0x3d
 800630e:	5c9b      	ldrb	r3, [r3, r2]
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d107      	bne.n	8006326 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	223c      	movs	r2, #60	; 0x3c
 800631a:	2100      	movs	r1, #0
 800631c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	0018      	movs	r0, r3
 8006322:	f7fd fa79 	bl	8003818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	223d      	movs	r2, #61	; 0x3d
 800632a:	2102      	movs	r1, #2
 800632c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3304      	adds	r3, #4
 8006336:	0019      	movs	r1, r3
 8006338:	0010      	movs	r0, r2
 800633a:	f000 f9ed 	bl	8006718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2248      	movs	r2, #72	; 0x48
 8006342:	2101      	movs	r1, #1
 8006344:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	223e      	movs	r2, #62	; 0x3e
 800634a:	2101      	movs	r1, #1
 800634c:	5499      	strb	r1, [r3, r2]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	223f      	movs	r2, #63	; 0x3f
 8006352:	2101      	movs	r1, #1
 8006354:	5499      	strb	r1, [r3, r2]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2240      	movs	r2, #64	; 0x40
 800635a:	2101      	movs	r1, #1
 800635c:	5499      	strb	r1, [r3, r2]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2241      	movs	r2, #65	; 0x41
 8006362:	2101      	movs	r1, #1
 8006364:	5499      	strb	r1, [r3, r2]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2242      	movs	r2, #66	; 0x42
 800636a:	2101      	movs	r1, #1
 800636c:	5499      	strb	r1, [r3, r2]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2243      	movs	r2, #67	; 0x43
 8006372:	2101      	movs	r1, #1
 8006374:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2244      	movs	r2, #68	; 0x44
 800637a:	2101      	movs	r1, #1
 800637c:	5499      	strb	r1, [r3, r2]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2245      	movs	r2, #69	; 0x45
 8006382:	2101      	movs	r1, #1
 8006384:	5499      	strb	r1, [r3, r2]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2246      	movs	r2, #70	; 0x46
 800638a:	2101      	movs	r1, #1
 800638c:	5499      	strb	r1, [r3, r2]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2247      	movs	r2, #71	; 0x47
 8006392:	2101      	movs	r1, #1
 8006394:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	223d      	movs	r2, #61	; 0x3d
 800639a:	2101      	movs	r1, #1
 800639c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	0018      	movs	r0, r3
 80063a2:	46bd      	mov	sp, r7
 80063a4:	b002      	add	sp, #8
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	223d      	movs	r2, #61	; 0x3d
 80063b4:	5c9b      	ldrb	r3, [r3, r2]
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d001      	beq.n	80063c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e047      	b.n	8006450 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	223d      	movs	r2, #61	; 0x3d
 80063c4:	2102      	movs	r1, #2
 80063c6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2101      	movs	r1, #1
 80063d4:	430a      	orrs	r2, r1
 80063d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a1e      	ldr	r2, [pc, #120]	; (8006458 <HAL_TIM_Base_Start_IT+0xb0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d014      	beq.n	800640c <HAL_TIM_Base_Start_IT+0x64>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	2380      	movs	r3, #128	; 0x80
 80063e8:	05db      	lsls	r3, r3, #23
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d00e      	beq.n	800640c <HAL_TIM_Base_Start_IT+0x64>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a1a      	ldr	r2, [pc, #104]	; (800645c <HAL_TIM_Base_Start_IT+0xb4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d009      	beq.n	800640c <HAL_TIM_Base_Start_IT+0x64>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a18      	ldr	r2, [pc, #96]	; (8006460 <HAL_TIM_Base_Start_IT+0xb8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d004      	beq.n	800640c <HAL_TIM_Base_Start_IT+0x64>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a17      	ldr	r2, [pc, #92]	; (8006464 <HAL_TIM_Base_Start_IT+0xbc>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d116      	bne.n	800643a <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	4a15      	ldr	r2, [pc, #84]	; (8006468 <HAL_TIM_Base_Start_IT+0xc0>)
 8006414:	4013      	ands	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b06      	cmp	r3, #6
 800641c:	d016      	beq.n	800644c <HAL_TIM_Base_Start_IT+0xa4>
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	2380      	movs	r3, #128	; 0x80
 8006422:	025b      	lsls	r3, r3, #9
 8006424:	429a      	cmp	r2, r3
 8006426:	d011      	beq.n	800644c <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2101      	movs	r1, #1
 8006434:	430a      	orrs	r2, r1
 8006436:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006438:	e008      	b.n	800644c <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2101      	movs	r1, #1
 8006446:	430a      	orrs	r2, r1
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	e000      	b.n	800644e <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	0018      	movs	r0, r3
 8006452:	46bd      	mov	sp, r7
 8006454:	b004      	add	sp, #16
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40012c00 	.word	0x40012c00
 800645c:	40000400 	.word	0x40000400
 8006460:	40000800 	.word	0x40000800
 8006464:	40014000 	.word	0x40014000
 8006468:	00010007 	.word	0x00010007

0800646c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2101      	movs	r1, #1
 8006480:	438a      	bics	r2, r1
 8006482:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	4a0d      	ldr	r2, [pc, #52]	; (80064c0 <HAL_TIM_Base_Stop_IT+0x54>)
 800648c:	4013      	ands	r3, r2
 800648e:	d10d      	bne.n	80064ac <HAL_TIM_Base_Stop_IT+0x40>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	4a0b      	ldr	r2, [pc, #44]	; (80064c4 <HAL_TIM_Base_Stop_IT+0x58>)
 8006498:	4013      	ands	r3, r2
 800649a:	d107      	bne.n	80064ac <HAL_TIM_Base_Stop_IT+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2101      	movs	r1, #1
 80064a8:	438a      	bics	r2, r1
 80064aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	223d      	movs	r2, #61	; 0x3d
 80064b0:	2101      	movs	r1, #1
 80064b2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	0018      	movs	r0, r3
 80064b8:	46bd      	mov	sp, r7
 80064ba:	b002      	add	sp, #8
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	46c0      	nop			; (mov r8, r8)
 80064c0:	00001111 	.word	0x00001111
 80064c4:	00000444 	.word	0x00000444

080064c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2202      	movs	r2, #2
 80064e4:	4013      	ands	r3, r2
 80064e6:	d021      	beq.n	800652c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2202      	movs	r2, #2
 80064ec:	4013      	ands	r3, r2
 80064ee:	d01d      	beq.n	800652c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2203      	movs	r2, #3
 80064f6:	4252      	negs	r2, r2
 80064f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	2203      	movs	r2, #3
 8006508:	4013      	ands	r3, r2
 800650a:	d004      	beq.n	8006516 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	0018      	movs	r0, r3
 8006510:	f000 f8ea 	bl	80066e8 <HAL_TIM_IC_CaptureCallback>
 8006514:	e007      	b.n	8006526 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	0018      	movs	r0, r3
 800651a:	f000 f8dd 	bl	80066d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	0018      	movs	r0, r3
 8006522:	f000 f8e9 	bl	80066f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2204      	movs	r2, #4
 8006530:	4013      	ands	r3, r2
 8006532:	d022      	beq.n	800657a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2204      	movs	r2, #4
 8006538:	4013      	ands	r3, r2
 800653a:	d01e      	beq.n	800657a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2205      	movs	r2, #5
 8006542:	4252      	negs	r2, r2
 8006544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2202      	movs	r2, #2
 800654a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699a      	ldr	r2, [r3, #24]
 8006552:	23c0      	movs	r3, #192	; 0xc0
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4013      	ands	r3, r2
 8006558:	d004      	beq.n	8006564 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	0018      	movs	r0, r3
 800655e:	f000 f8c3 	bl	80066e8 <HAL_TIM_IC_CaptureCallback>
 8006562:	e007      	b.n	8006574 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	0018      	movs	r0, r3
 8006568:	f000 f8b6 	bl	80066d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	0018      	movs	r0, r3
 8006570:	f000 f8c2 	bl	80066f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2208      	movs	r2, #8
 800657e:	4013      	ands	r3, r2
 8006580:	d021      	beq.n	80065c6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2208      	movs	r2, #8
 8006586:	4013      	ands	r3, r2
 8006588:	d01d      	beq.n	80065c6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2209      	movs	r2, #9
 8006590:	4252      	negs	r2, r2
 8006592:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2204      	movs	r2, #4
 8006598:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	2203      	movs	r2, #3
 80065a2:	4013      	ands	r3, r2
 80065a4:	d004      	beq.n	80065b0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	0018      	movs	r0, r3
 80065aa:	f000 f89d 	bl	80066e8 <HAL_TIM_IC_CaptureCallback>
 80065ae:	e007      	b.n	80065c0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	0018      	movs	r0, r3
 80065b4:	f000 f890 	bl	80066d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	0018      	movs	r0, r3
 80065bc:	f000 f89c 	bl	80066f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2210      	movs	r2, #16
 80065ca:	4013      	ands	r3, r2
 80065cc:	d022      	beq.n	8006614 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2210      	movs	r2, #16
 80065d2:	4013      	ands	r3, r2
 80065d4:	d01e      	beq.n	8006614 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2211      	movs	r2, #17
 80065dc:	4252      	negs	r2, r2
 80065de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2208      	movs	r2, #8
 80065e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69da      	ldr	r2, [r3, #28]
 80065ec:	23c0      	movs	r3, #192	; 0xc0
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4013      	ands	r3, r2
 80065f2:	d004      	beq.n	80065fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	0018      	movs	r0, r3
 80065f8:	f000 f876 	bl	80066e8 <HAL_TIM_IC_CaptureCallback>
 80065fc:	e007      	b.n	800660e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	0018      	movs	r0, r3
 8006602:	f000 f869 	bl	80066d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	0018      	movs	r0, r3
 800660a:	f000 f875 	bl	80066f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2201      	movs	r2, #1
 8006618:	4013      	ands	r3, r2
 800661a:	d00c      	beq.n	8006636 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2201      	movs	r2, #1
 8006620:	4013      	ands	r3, r2
 8006622:	d008      	beq.n	8006636 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2202      	movs	r2, #2
 800662a:	4252      	negs	r2, r2
 800662c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	0018      	movs	r0, r3
 8006632:	f7fc ffe1 	bl	80035f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2280      	movs	r2, #128	; 0x80
 800663a:	4013      	ands	r3, r2
 800663c:	d104      	bne.n	8006648 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	2380      	movs	r3, #128	; 0x80
 8006642:	019b      	lsls	r3, r3, #6
 8006644:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006646:	d00b      	beq.n	8006660 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2280      	movs	r2, #128	; 0x80
 800664c:	4013      	ands	r3, r2
 800664e:	d007      	beq.n	8006660 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a1e      	ldr	r2, [pc, #120]	; (80066d0 <HAL_TIM_IRQHandler+0x208>)
 8006656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	0018      	movs	r0, r3
 800665c:	f000 f972 	bl	8006944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	2380      	movs	r3, #128	; 0x80
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	4013      	ands	r3, r2
 8006668:	d00b      	beq.n	8006682 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2280      	movs	r2, #128	; 0x80
 800666e:	4013      	ands	r3, r2
 8006670:	d007      	beq.n	8006682 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a17      	ldr	r2, [pc, #92]	; (80066d4 <HAL_TIM_IRQHandler+0x20c>)
 8006678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	0018      	movs	r0, r3
 800667e:	f000 f969 	bl	8006954 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2240      	movs	r2, #64	; 0x40
 8006686:	4013      	ands	r3, r2
 8006688:	d00c      	beq.n	80066a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2240      	movs	r2, #64	; 0x40
 800668e:	4013      	ands	r3, r2
 8006690:	d008      	beq.n	80066a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2241      	movs	r2, #65	; 0x41
 8006698:	4252      	negs	r2, r2
 800669a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	0018      	movs	r0, r3
 80066a0:	f000 f832 	bl	8006708 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2220      	movs	r2, #32
 80066a8:	4013      	ands	r3, r2
 80066aa:	d00c      	beq.n	80066c6 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2220      	movs	r2, #32
 80066b0:	4013      	ands	r3, r2
 80066b2:	d008      	beq.n	80066c6 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2221      	movs	r2, #33	; 0x21
 80066ba:	4252      	negs	r2, r2
 80066bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	0018      	movs	r0, r3
 80066c2:	f000 f937 	bl	8006934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066c6:	46c0      	nop			; (mov r8, r8)
 80066c8:	46bd      	mov	sp, r7
 80066ca:	b004      	add	sp, #16
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	46c0      	nop			; (mov r8, r8)
 80066d0:	ffffdf7f 	.word	0xffffdf7f
 80066d4:	fffffeff 	.word	0xfffffeff

080066d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066e0:	46c0      	nop			; (mov r8, r8)
 80066e2:	46bd      	mov	sp, r7
 80066e4:	b002      	add	sp, #8
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066f0:	46c0      	nop			; (mov r8, r8)
 80066f2:	46bd      	mov	sp, r7
 80066f4:	b002      	add	sp, #8
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006700:	46c0      	nop			; (mov r8, r8)
 8006702:	46bd      	mov	sp, r7
 8006704:	b002      	add	sp, #8
 8006706:	bd80      	pop	{r7, pc}

08006708 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006710:	46c0      	nop			; (mov r8, r8)
 8006712:	46bd      	mov	sp, r7
 8006714:	b002      	add	sp, #8
 8006716:	bd80      	pop	{r7, pc}

08006718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a3f      	ldr	r2, [pc, #252]	; (8006828 <TIM_Base_SetConfig+0x110>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d00c      	beq.n	800674a <TIM_Base_SetConfig+0x32>
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	2380      	movs	r3, #128	; 0x80
 8006734:	05db      	lsls	r3, r3, #23
 8006736:	429a      	cmp	r2, r3
 8006738:	d007      	beq.n	800674a <TIM_Base_SetConfig+0x32>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a3b      	ldr	r2, [pc, #236]	; (800682c <TIM_Base_SetConfig+0x114>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d003      	beq.n	800674a <TIM_Base_SetConfig+0x32>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a3a      	ldr	r2, [pc, #232]	; (8006830 <TIM_Base_SetConfig+0x118>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d108      	bne.n	800675c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2270      	movs	r2, #112	; 0x70
 800674e:	4393      	bics	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a32      	ldr	r2, [pc, #200]	; (8006828 <TIM_Base_SetConfig+0x110>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d01c      	beq.n	800679e <TIM_Base_SetConfig+0x86>
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	2380      	movs	r3, #128	; 0x80
 8006768:	05db      	lsls	r3, r3, #23
 800676a:	429a      	cmp	r2, r3
 800676c:	d017      	beq.n	800679e <TIM_Base_SetConfig+0x86>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a2e      	ldr	r2, [pc, #184]	; (800682c <TIM_Base_SetConfig+0x114>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d013      	beq.n	800679e <TIM_Base_SetConfig+0x86>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a2d      	ldr	r2, [pc, #180]	; (8006830 <TIM_Base_SetConfig+0x118>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d00f      	beq.n	800679e <TIM_Base_SetConfig+0x86>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a2c      	ldr	r2, [pc, #176]	; (8006834 <TIM_Base_SetConfig+0x11c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00b      	beq.n	800679e <TIM_Base_SetConfig+0x86>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a2b      	ldr	r2, [pc, #172]	; (8006838 <TIM_Base_SetConfig+0x120>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d007      	beq.n	800679e <TIM_Base_SetConfig+0x86>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a2a      	ldr	r2, [pc, #168]	; (800683c <TIM_Base_SetConfig+0x124>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d003      	beq.n	800679e <TIM_Base_SetConfig+0x86>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a29      	ldr	r2, [pc, #164]	; (8006840 <TIM_Base_SetConfig+0x128>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d108      	bne.n	80067b0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4a28      	ldr	r2, [pc, #160]	; (8006844 <TIM_Base_SetConfig+0x12c>)
 80067a2:	4013      	ands	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2280      	movs	r2, #128	; 0x80
 80067b4:	4393      	bics	r3, r2
 80067b6:	001a      	movs	r2, r3
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	689a      	ldr	r2, [r3, #8]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a13      	ldr	r2, [pc, #76]	; (8006828 <TIM_Base_SetConfig+0x110>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00b      	beq.n	80067f6 <TIM_Base_SetConfig+0xde>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a15      	ldr	r2, [pc, #84]	; (8006838 <TIM_Base_SetConfig+0x120>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d007      	beq.n	80067f6 <TIM_Base_SetConfig+0xde>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a14      	ldr	r2, [pc, #80]	; (800683c <TIM_Base_SetConfig+0x124>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d003      	beq.n	80067f6 <TIM_Base_SetConfig+0xde>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a13      	ldr	r2, [pc, #76]	; (8006840 <TIM_Base_SetConfig+0x128>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d103      	bne.n	80067fe <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	691a      	ldr	r2, [r3, #16]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	2201      	movs	r2, #1
 800680a:	4013      	ands	r3, r2
 800680c:	2b01      	cmp	r3, #1
 800680e:	d106      	bne.n	800681e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	2201      	movs	r2, #1
 8006816:	4393      	bics	r3, r2
 8006818:	001a      	movs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	611a      	str	r2, [r3, #16]
  }
}
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	46bd      	mov	sp, r7
 8006822:	b004      	add	sp, #16
 8006824:	bd80      	pop	{r7, pc}
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	40012c00 	.word	0x40012c00
 800682c:	40000400 	.word	0x40000400
 8006830:	40000800 	.word	0x40000800
 8006834:	40002000 	.word	0x40002000
 8006838:	40014000 	.word	0x40014000
 800683c:	40014400 	.word	0x40014400
 8006840:	40014800 	.word	0x40014800
 8006844:	fffffcff 	.word	0xfffffcff

08006848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	223c      	movs	r2, #60	; 0x3c
 8006856:	5c9b      	ldrb	r3, [r3, r2]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800685c:	2302      	movs	r3, #2
 800685e:	e05a      	b.n	8006916 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	223c      	movs	r2, #60	; 0x3c
 8006864:	2101      	movs	r1, #1
 8006866:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	223d      	movs	r2, #61	; 0x3d
 800686c:	2102      	movs	r1, #2
 800686e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a26      	ldr	r2, [pc, #152]	; (8006920 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d108      	bne.n	800689c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4a25      	ldr	r2, [pc, #148]	; (8006924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800688e:	4013      	ands	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2270      	movs	r2, #112	; 0x70
 80068a0:	4393      	bics	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a19      	ldr	r2, [pc, #100]	; (8006920 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d014      	beq.n	80068ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	2380      	movs	r3, #128	; 0x80
 80068c6:	05db      	lsls	r3, r3, #23
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d00e      	beq.n	80068ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a15      	ldr	r2, [pc, #84]	; (8006928 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d009      	beq.n	80068ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a14      	ldr	r2, [pc, #80]	; (800692c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d004      	beq.n	80068ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a12      	ldr	r2, [pc, #72]	; (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d10c      	bne.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2280      	movs	r2, #128	; 0x80
 80068ee:	4393      	bics	r3, r2
 80068f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	223d      	movs	r2, #61	; 0x3d
 8006908:	2101      	movs	r1, #1
 800690a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	223c      	movs	r2, #60	; 0x3c
 8006910:	2100      	movs	r1, #0
 8006912:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	0018      	movs	r0, r3
 8006918:	46bd      	mov	sp, r7
 800691a:	b004      	add	sp, #16
 800691c:	bd80      	pop	{r7, pc}
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	40012c00 	.word	0x40012c00
 8006924:	ff0fffff 	.word	0xff0fffff
 8006928:	40000400 	.word	0x40000400
 800692c:	40000800 	.word	0x40000800
 8006930:	40014000 	.word	0x40014000

08006934 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800693c:	46c0      	nop			; (mov r8, r8)
 800693e:	46bd      	mov	sp, r7
 8006940:	b002      	add	sp, #8
 8006942:	bd80      	pop	{r7, pc}

08006944 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800694c:	46c0      	nop			; (mov r8, r8)
 800694e:	46bd      	mov	sp, r7
 8006950:	b002      	add	sp, #8
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800695c:	46c0      	nop			; (mov r8, r8)
 800695e:	46bd      	mov	sp, r7
 8006960:	b002      	add	sp, #8
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e046      	b.n	8006a04 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2288      	movs	r2, #136	; 0x88
 800697a:	589b      	ldr	r3, [r3, r2]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d107      	bne.n	8006990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2284      	movs	r2, #132	; 0x84
 8006984:	2100      	movs	r1, #0
 8006986:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	0018      	movs	r0, r3
 800698c:	f7fc ff6a 	bl	8003864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2288      	movs	r2, #136	; 0x88
 8006994:	2124      	movs	r1, #36	; 0x24
 8006996:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2101      	movs	r1, #1
 80069a4:	438a      	bics	r2, r1
 80069a6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d003      	beq.n	80069b8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	0018      	movs	r0, r3
 80069b4:	f000 fd4c 	bl	8007450 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	0018      	movs	r0, r3
 80069bc:	f000 f9f2 	bl	8006da4 <UART_SetConfig>
 80069c0:	0003      	movs	r3, r0
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e01c      	b.n	8006a04 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	490d      	ldr	r1, [pc, #52]	; (8006a0c <HAL_UART_Init+0xa8>)
 80069d6:	400a      	ands	r2, r1
 80069d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	212a      	movs	r1, #42	; 0x2a
 80069e6:	438a      	bics	r2, r1
 80069e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2101      	movs	r1, #1
 80069f6:	430a      	orrs	r2, r1
 80069f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	0018      	movs	r0, r3
 80069fe:	f000 fddb 	bl	80075b8 <UART_CheckIdleState>
 8006a02:	0003      	movs	r3, r0
}
 8006a04:	0018      	movs	r0, r3
 8006a06:	46bd      	mov	sp, r7
 8006a08:	b002      	add	sp, #8
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	ffffb7ff 	.word	0xffffb7ff

08006a10 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e032      	b.n	8006a88 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2288      	movs	r2, #136	; 0x88
 8006a26:	2124      	movs	r1, #36	; 0x24
 8006a28:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2101      	movs	r1, #1
 8006a36:	438a      	bics	r2, r1
 8006a38:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2200      	movs	r2, #0
 8006a48:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	0018      	movs	r0, r3
 8006a56:	f7fd f831 	bl	8003abc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2290      	movs	r2, #144	; 0x90
 8006a5e:	2100      	movs	r1, #0
 8006a60:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2288      	movs	r2, #136	; 0x88
 8006a66:	2100      	movs	r1, #0
 8006a68:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	228c      	movs	r2, #140	; 0x8c
 8006a6e:	2100      	movs	r1, #0
 8006a70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2284      	movs	r2, #132	; 0x84
 8006a82:	2100      	movs	r1, #0
 8006a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	0018      	movs	r0, r3
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	b002      	add	sp, #8
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08a      	sub	sp, #40	; 0x28
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	1dbb      	adds	r3, r7, #6
 8006a9e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2288      	movs	r2, #136	; 0x88
 8006aa4:	589b      	ldr	r3, [r3, r2]
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d000      	beq.n	8006aac <HAL_UART_Transmit+0x1c>
 8006aaa:	e090      	b.n	8006bce <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_UART_Transmit+0x2a>
 8006ab2:	1dbb      	adds	r3, r7, #6
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e088      	b.n	8006bd0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	2380      	movs	r3, #128	; 0x80
 8006ac4:	015b      	lsls	r3, r3, #5
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d109      	bne.n	8006ade <HAL_UART_Transmit+0x4e>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d105      	bne.n	8006ade <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	d001      	beq.n	8006ade <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e078      	b.n	8006bd0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2290      	movs	r2, #144	; 0x90
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2288      	movs	r2, #136	; 0x88
 8006aea:	2121      	movs	r1, #33	; 0x21
 8006aec:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aee:	f7fd f9ed 	bl	8003ecc <HAL_GetTick>
 8006af2:	0003      	movs	r3, r0
 8006af4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1dba      	adds	r2, r7, #6
 8006afa:	2154      	movs	r1, #84	; 0x54
 8006afc:	8812      	ldrh	r2, [r2, #0]
 8006afe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	1dba      	adds	r2, r7, #6
 8006b04:	2156      	movs	r1, #86	; 0x56
 8006b06:	8812      	ldrh	r2, [r2, #0]
 8006b08:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	2380      	movs	r3, #128	; 0x80
 8006b10:	015b      	lsls	r3, r3, #5
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d108      	bne.n	8006b28 <HAL_UART_Transmit+0x98>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d104      	bne.n	8006b28 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	61bb      	str	r3, [r7, #24]
 8006b26:	e003      	b.n	8006b30 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b30:	e030      	b.n	8006b94 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	0013      	movs	r3, r2
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2180      	movs	r1, #128	; 0x80
 8006b40:	f000 fde4 	bl	800770c <UART_WaitOnFlagUntilTimeout>
 8006b44:	1e03      	subs	r3, r0, #0
 8006b46:	d005      	beq.n	8006b54 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2288      	movs	r2, #136	; 0x88
 8006b4c:	2120      	movs	r1, #32
 8006b4e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e03d      	b.n	8006bd0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10b      	bne.n	8006b72 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	001a      	movs	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	05d2      	lsls	r2, r2, #23
 8006b66:	0dd2      	lsrs	r2, r2, #23
 8006b68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	61bb      	str	r3, [r7, #24]
 8006b70:	e007      	b.n	8006b82 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	781a      	ldrb	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2256      	movs	r2, #86	; 0x56
 8006b86:	5a9b      	ldrh	r3, [r3, r2]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	b299      	uxth	r1, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2256      	movs	r2, #86	; 0x56
 8006b92:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2256      	movs	r2, #86	; 0x56
 8006b98:	5a9b      	ldrh	r3, [r3, r2]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1c8      	bne.n	8006b32 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	0013      	movs	r3, r2
 8006baa:	2200      	movs	r2, #0
 8006bac:	2140      	movs	r1, #64	; 0x40
 8006bae:	f000 fdad 	bl	800770c <UART_WaitOnFlagUntilTimeout>
 8006bb2:	1e03      	subs	r3, r0, #0
 8006bb4:	d005      	beq.n	8006bc2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2288      	movs	r2, #136	; 0x88
 8006bba:	2120      	movs	r1, #32
 8006bbc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e006      	b.n	8006bd0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2288      	movs	r2, #136	; 0x88
 8006bc6:	2120      	movs	r1, #32
 8006bc8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	e000      	b.n	8006bd0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006bce:	2302      	movs	r3, #2
  }
}
 8006bd0:	0018      	movs	r0, r3
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	b008      	add	sp, #32
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08a      	sub	sp, #40	; 0x28
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	603b      	str	r3, [r7, #0]
 8006be4:	1dbb      	adds	r3, r7, #6
 8006be6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	228c      	movs	r2, #140	; 0x8c
 8006bec:	589b      	ldr	r3, [r3, r2]
 8006bee:	2b20      	cmp	r3, #32
 8006bf0:	d000      	beq.n	8006bf4 <HAL_UART_Receive+0x1c>
 8006bf2:	e0d0      	b.n	8006d96 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_UART_Receive+0x2a>
 8006bfa:	1dbb      	adds	r3, r7, #6
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e0c8      	b.n	8006d98 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	2380      	movs	r3, #128	; 0x80
 8006c0c:	015b      	lsls	r3, r3, #5
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d109      	bne.n	8006c26 <HAL_UART_Receive+0x4e>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d105      	bne.n	8006c26 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	4013      	ands	r3, r2
 8006c20:	d001      	beq.n	8006c26 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e0b8      	b.n	8006d98 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2290      	movs	r2, #144	; 0x90
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	228c      	movs	r2, #140	; 0x8c
 8006c32:	2122      	movs	r1, #34	; 0x22
 8006c34:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c3c:	f7fd f946 	bl	8003ecc <HAL_GetTick>
 8006c40:	0003      	movs	r3, r0
 8006c42:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	1dba      	adds	r2, r7, #6
 8006c48:	215c      	movs	r1, #92	; 0x5c
 8006c4a:	8812      	ldrh	r2, [r2, #0]
 8006c4c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	1dba      	adds	r2, r7, #6
 8006c52:	215e      	movs	r1, #94	; 0x5e
 8006c54:	8812      	ldrh	r2, [r2, #0]
 8006c56:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	2380      	movs	r3, #128	; 0x80
 8006c5e:	015b      	lsls	r3, r3, #5
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d10d      	bne.n	8006c80 <HAL_UART_Receive+0xa8>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d104      	bne.n	8006c76 <HAL_UART_Receive+0x9e>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2260      	movs	r2, #96	; 0x60
 8006c70:	494b      	ldr	r1, [pc, #300]	; (8006da0 <HAL_UART_Receive+0x1c8>)
 8006c72:	5299      	strh	r1, [r3, r2]
 8006c74:	e02e      	b.n	8006cd4 <HAL_UART_Receive+0xfc>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2260      	movs	r2, #96	; 0x60
 8006c7a:	21ff      	movs	r1, #255	; 0xff
 8006c7c:	5299      	strh	r1, [r3, r2]
 8006c7e:	e029      	b.n	8006cd4 <HAL_UART_Receive+0xfc>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10d      	bne.n	8006ca4 <HAL_UART_Receive+0xcc>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d104      	bne.n	8006c9a <HAL_UART_Receive+0xc2>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2260      	movs	r2, #96	; 0x60
 8006c94:	21ff      	movs	r1, #255	; 0xff
 8006c96:	5299      	strh	r1, [r3, r2]
 8006c98:	e01c      	b.n	8006cd4 <HAL_UART_Receive+0xfc>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2260      	movs	r2, #96	; 0x60
 8006c9e:	217f      	movs	r1, #127	; 0x7f
 8006ca0:	5299      	strh	r1, [r3, r2]
 8006ca2:	e017      	b.n	8006cd4 <HAL_UART_Receive+0xfc>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	689a      	ldr	r2, [r3, #8]
 8006ca8:	2380      	movs	r3, #128	; 0x80
 8006caa:	055b      	lsls	r3, r3, #21
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d10d      	bne.n	8006ccc <HAL_UART_Receive+0xf4>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d104      	bne.n	8006cc2 <HAL_UART_Receive+0xea>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2260      	movs	r2, #96	; 0x60
 8006cbc:	217f      	movs	r1, #127	; 0x7f
 8006cbe:	5299      	strh	r1, [r3, r2]
 8006cc0:	e008      	b.n	8006cd4 <HAL_UART_Receive+0xfc>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2260      	movs	r2, #96	; 0x60
 8006cc6:	213f      	movs	r1, #63	; 0x3f
 8006cc8:	5299      	strh	r1, [r3, r2]
 8006cca:	e003      	b.n	8006cd4 <HAL_UART_Receive+0xfc>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2260      	movs	r2, #96	; 0x60
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006cd4:	2312      	movs	r3, #18
 8006cd6:	18fb      	adds	r3, r7, r3
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	2160      	movs	r1, #96	; 0x60
 8006cdc:	5a52      	ldrh	r2, [r2, r1]
 8006cde:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	2380      	movs	r3, #128	; 0x80
 8006ce6:	015b      	lsls	r3, r3, #5
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d108      	bne.n	8006cfe <HAL_UART_Receive+0x126>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d104      	bne.n	8006cfe <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	61bb      	str	r3, [r7, #24]
 8006cfc:	e003      	b.n	8006d06 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006d06:	e03a      	b.n	8006d7e <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	0013      	movs	r3, r2
 8006d12:	2200      	movs	r2, #0
 8006d14:	2120      	movs	r1, #32
 8006d16:	f000 fcf9 	bl	800770c <UART_WaitOnFlagUntilTimeout>
 8006d1a:	1e03      	subs	r3, r0, #0
 8006d1c:	d005      	beq.n	8006d2a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	228c      	movs	r2, #140	; 0x8c
 8006d22:	2120      	movs	r1, #32
 8006d24:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e036      	b.n	8006d98 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10e      	bne.n	8006d4e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	2212      	movs	r2, #18
 8006d3a:	18ba      	adds	r2, r7, r2
 8006d3c:	8812      	ldrh	r2, [r2, #0]
 8006d3e:	4013      	ands	r3, r2
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	3302      	adds	r3, #2
 8006d4a:	61bb      	str	r3, [r7, #24]
 8006d4c:	e00e      	b.n	8006d6c <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2212      	movs	r2, #18
 8006d58:	18ba      	adds	r2, r7, r2
 8006d5a:	8812      	ldrh	r2, [r2, #0]
 8006d5c:	b2d2      	uxtb	r2, r2
 8006d5e:	4013      	ands	r3, r2
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	225e      	movs	r2, #94	; 0x5e
 8006d70:	5a9b      	ldrh	r3, [r3, r2]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	3b01      	subs	r3, #1
 8006d76:	b299      	uxth	r1, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	225e      	movs	r2, #94	; 0x5e
 8006d7c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	225e      	movs	r2, #94	; 0x5e
 8006d82:	5a9b      	ldrh	r3, [r3, r2]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1be      	bne.n	8006d08 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	228c      	movs	r2, #140	; 0x8c
 8006d8e:	2120      	movs	r1, #32
 8006d90:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e000      	b.n	8006d98 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8006d96:	2302      	movs	r3, #2
  }
}
 8006d98:	0018      	movs	r0, r3
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	b008      	add	sp, #32
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	000001ff 	.word	0x000001ff

08006da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006da4:	b5b0      	push	{r4, r5, r7, lr}
 8006da6:	b090      	sub	sp, #64	; 0x40
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dac:	231a      	movs	r3, #26
 8006dae:	2220      	movs	r2, #32
 8006db0:	189b      	adds	r3, r3, r2
 8006db2:	19db      	adds	r3, r3, r7
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	689a      	ldr	r2, [r3, #8]
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4ac1      	ldr	r2, [pc, #772]	; (80070dc <UART_SetConfig+0x338>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	0019      	movs	r1, r3
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de2:	430b      	orrs	r3, r1
 8006de4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	4abc      	ldr	r2, [pc, #752]	; (80070e0 <UART_SetConfig+0x33c>)
 8006dee:	4013      	ands	r3, r2
 8006df0:	0018      	movs	r0, r3
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	68d9      	ldr	r1, [r3, #12]
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	0003      	movs	r3, r0
 8006dfc:	430b      	orrs	r3, r1
 8006dfe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4ab6      	ldr	r2, [pc, #728]	; (80070e4 <UART_SetConfig+0x340>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d009      	beq.n	8006e24 <UART_SetConfig+0x80>
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4ab4      	ldr	r2, [pc, #720]	; (80070e8 <UART_SetConfig+0x344>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d004      	beq.n	8006e24 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e20:	4313      	orrs	r3, r2
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	4ab0      	ldr	r2, [pc, #704]	; (80070ec <UART_SetConfig+0x348>)
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	0019      	movs	r1, r3
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e36:	430b      	orrs	r3, r1
 8006e38:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	220f      	movs	r2, #15
 8006e42:	4393      	bics	r3, r2
 8006e44:	0018      	movs	r0, r3
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	0003      	movs	r3, r0
 8006e50:	430b      	orrs	r3, r1
 8006e52:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4aa5      	ldr	r2, [pc, #660]	; (80070f0 <UART_SetConfig+0x34c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d131      	bne.n	8006ec2 <UART_SetConfig+0x11e>
 8006e5e:	4ba5      	ldr	r3, [pc, #660]	; (80070f4 <UART_SetConfig+0x350>)
 8006e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e62:	2203      	movs	r2, #3
 8006e64:	4013      	ands	r3, r2
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d01d      	beq.n	8006ea6 <UART_SetConfig+0x102>
 8006e6a:	d823      	bhi.n	8006eb4 <UART_SetConfig+0x110>
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d00c      	beq.n	8006e8a <UART_SetConfig+0xe6>
 8006e70:	d820      	bhi.n	8006eb4 <UART_SetConfig+0x110>
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d002      	beq.n	8006e7c <UART_SetConfig+0xd8>
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d00e      	beq.n	8006e98 <UART_SetConfig+0xf4>
 8006e7a:	e01b      	b.n	8006eb4 <UART_SetConfig+0x110>
 8006e7c:	231b      	movs	r3, #27
 8006e7e:	2220      	movs	r2, #32
 8006e80:	189b      	adds	r3, r3, r2
 8006e82:	19db      	adds	r3, r3, r7
 8006e84:	2200      	movs	r2, #0
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	e154      	b.n	8007134 <UART_SetConfig+0x390>
 8006e8a:	231b      	movs	r3, #27
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	189b      	adds	r3, r3, r2
 8006e90:	19db      	adds	r3, r3, r7
 8006e92:	2202      	movs	r2, #2
 8006e94:	701a      	strb	r2, [r3, #0]
 8006e96:	e14d      	b.n	8007134 <UART_SetConfig+0x390>
 8006e98:	231b      	movs	r3, #27
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	189b      	adds	r3, r3, r2
 8006e9e:	19db      	adds	r3, r3, r7
 8006ea0:	2204      	movs	r2, #4
 8006ea2:	701a      	strb	r2, [r3, #0]
 8006ea4:	e146      	b.n	8007134 <UART_SetConfig+0x390>
 8006ea6:	231b      	movs	r3, #27
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	189b      	adds	r3, r3, r2
 8006eac:	19db      	adds	r3, r3, r7
 8006eae:	2208      	movs	r2, #8
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	e13f      	b.n	8007134 <UART_SetConfig+0x390>
 8006eb4:	231b      	movs	r3, #27
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	189b      	adds	r3, r3, r2
 8006eba:	19db      	adds	r3, r3, r7
 8006ebc:	2210      	movs	r2, #16
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	e138      	b.n	8007134 <UART_SetConfig+0x390>
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a8c      	ldr	r2, [pc, #560]	; (80070f8 <UART_SetConfig+0x354>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d131      	bne.n	8006f30 <UART_SetConfig+0x18c>
 8006ecc:	4b89      	ldr	r3, [pc, #548]	; (80070f4 <UART_SetConfig+0x350>)
 8006ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed0:	220c      	movs	r2, #12
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	2b0c      	cmp	r3, #12
 8006ed6:	d01d      	beq.n	8006f14 <UART_SetConfig+0x170>
 8006ed8:	d823      	bhi.n	8006f22 <UART_SetConfig+0x17e>
 8006eda:	2b08      	cmp	r3, #8
 8006edc:	d00c      	beq.n	8006ef8 <UART_SetConfig+0x154>
 8006ede:	d820      	bhi.n	8006f22 <UART_SetConfig+0x17e>
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <UART_SetConfig+0x146>
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d00e      	beq.n	8006f06 <UART_SetConfig+0x162>
 8006ee8:	e01b      	b.n	8006f22 <UART_SetConfig+0x17e>
 8006eea:	231b      	movs	r3, #27
 8006eec:	2220      	movs	r2, #32
 8006eee:	189b      	adds	r3, r3, r2
 8006ef0:	19db      	adds	r3, r3, r7
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	701a      	strb	r2, [r3, #0]
 8006ef6:	e11d      	b.n	8007134 <UART_SetConfig+0x390>
 8006ef8:	231b      	movs	r3, #27
 8006efa:	2220      	movs	r2, #32
 8006efc:	189b      	adds	r3, r3, r2
 8006efe:	19db      	adds	r3, r3, r7
 8006f00:	2202      	movs	r2, #2
 8006f02:	701a      	strb	r2, [r3, #0]
 8006f04:	e116      	b.n	8007134 <UART_SetConfig+0x390>
 8006f06:	231b      	movs	r3, #27
 8006f08:	2220      	movs	r2, #32
 8006f0a:	189b      	adds	r3, r3, r2
 8006f0c:	19db      	adds	r3, r3, r7
 8006f0e:	2204      	movs	r2, #4
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	e10f      	b.n	8007134 <UART_SetConfig+0x390>
 8006f14:	231b      	movs	r3, #27
 8006f16:	2220      	movs	r2, #32
 8006f18:	189b      	adds	r3, r3, r2
 8006f1a:	19db      	adds	r3, r3, r7
 8006f1c:	2208      	movs	r2, #8
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	e108      	b.n	8007134 <UART_SetConfig+0x390>
 8006f22:	231b      	movs	r3, #27
 8006f24:	2220      	movs	r2, #32
 8006f26:	189b      	adds	r3, r3, r2
 8006f28:	19db      	adds	r3, r3, r7
 8006f2a:	2210      	movs	r2, #16
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	e101      	b.n	8007134 <UART_SetConfig+0x390>
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a71      	ldr	r2, [pc, #452]	; (80070fc <UART_SetConfig+0x358>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d131      	bne.n	8006f9e <UART_SetConfig+0x1fa>
 8006f3a:	4b6e      	ldr	r3, [pc, #440]	; (80070f4 <UART_SetConfig+0x350>)
 8006f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3e:	2230      	movs	r2, #48	; 0x30
 8006f40:	4013      	ands	r3, r2
 8006f42:	2b30      	cmp	r3, #48	; 0x30
 8006f44:	d01d      	beq.n	8006f82 <UART_SetConfig+0x1de>
 8006f46:	d823      	bhi.n	8006f90 <UART_SetConfig+0x1ec>
 8006f48:	2b20      	cmp	r3, #32
 8006f4a:	d00c      	beq.n	8006f66 <UART_SetConfig+0x1c2>
 8006f4c:	d820      	bhi.n	8006f90 <UART_SetConfig+0x1ec>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <UART_SetConfig+0x1b4>
 8006f52:	2b10      	cmp	r3, #16
 8006f54:	d00e      	beq.n	8006f74 <UART_SetConfig+0x1d0>
 8006f56:	e01b      	b.n	8006f90 <UART_SetConfig+0x1ec>
 8006f58:	231b      	movs	r3, #27
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	189b      	adds	r3, r3, r2
 8006f5e:	19db      	adds	r3, r3, r7
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]
 8006f64:	e0e6      	b.n	8007134 <UART_SetConfig+0x390>
 8006f66:	231b      	movs	r3, #27
 8006f68:	2220      	movs	r2, #32
 8006f6a:	189b      	adds	r3, r3, r2
 8006f6c:	19db      	adds	r3, r3, r7
 8006f6e:	2202      	movs	r2, #2
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	e0df      	b.n	8007134 <UART_SetConfig+0x390>
 8006f74:	231b      	movs	r3, #27
 8006f76:	2220      	movs	r2, #32
 8006f78:	189b      	adds	r3, r3, r2
 8006f7a:	19db      	adds	r3, r3, r7
 8006f7c:	2204      	movs	r2, #4
 8006f7e:	701a      	strb	r2, [r3, #0]
 8006f80:	e0d8      	b.n	8007134 <UART_SetConfig+0x390>
 8006f82:	231b      	movs	r3, #27
 8006f84:	2220      	movs	r2, #32
 8006f86:	189b      	adds	r3, r3, r2
 8006f88:	19db      	adds	r3, r3, r7
 8006f8a:	2208      	movs	r2, #8
 8006f8c:	701a      	strb	r2, [r3, #0]
 8006f8e:	e0d1      	b.n	8007134 <UART_SetConfig+0x390>
 8006f90:	231b      	movs	r3, #27
 8006f92:	2220      	movs	r2, #32
 8006f94:	189b      	adds	r3, r3, r2
 8006f96:	19db      	adds	r3, r3, r7
 8006f98:	2210      	movs	r2, #16
 8006f9a:	701a      	strb	r2, [r3, #0]
 8006f9c:	e0ca      	b.n	8007134 <UART_SetConfig+0x390>
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a57      	ldr	r2, [pc, #348]	; (8007100 <UART_SetConfig+0x35c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d106      	bne.n	8006fb6 <UART_SetConfig+0x212>
 8006fa8:	231b      	movs	r3, #27
 8006faa:	2220      	movs	r2, #32
 8006fac:	189b      	adds	r3, r3, r2
 8006fae:	19db      	adds	r3, r3, r7
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	701a      	strb	r2, [r3, #0]
 8006fb4:	e0be      	b.n	8007134 <UART_SetConfig+0x390>
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a52      	ldr	r2, [pc, #328]	; (8007104 <UART_SetConfig+0x360>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d106      	bne.n	8006fce <UART_SetConfig+0x22a>
 8006fc0:	231b      	movs	r3, #27
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	189b      	adds	r3, r3, r2
 8006fc6:	19db      	adds	r3, r3, r7
 8006fc8:	2200      	movs	r2, #0
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	e0b2      	b.n	8007134 <UART_SetConfig+0x390>
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a4d      	ldr	r2, [pc, #308]	; (8007108 <UART_SetConfig+0x364>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d106      	bne.n	8006fe6 <UART_SetConfig+0x242>
 8006fd8:	231b      	movs	r3, #27
 8006fda:	2220      	movs	r2, #32
 8006fdc:	189b      	adds	r3, r3, r2
 8006fde:	19db      	adds	r3, r3, r7
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	701a      	strb	r2, [r3, #0]
 8006fe4:	e0a6      	b.n	8007134 <UART_SetConfig+0x390>
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a3e      	ldr	r2, [pc, #248]	; (80070e4 <UART_SetConfig+0x340>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d13e      	bne.n	800706e <UART_SetConfig+0x2ca>
 8006ff0:	4b40      	ldr	r3, [pc, #256]	; (80070f4 <UART_SetConfig+0x350>)
 8006ff2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ff4:	23c0      	movs	r3, #192	; 0xc0
 8006ff6:	011b      	lsls	r3, r3, #4
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	22c0      	movs	r2, #192	; 0xc0
 8006ffc:	0112      	lsls	r2, r2, #4
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d027      	beq.n	8007052 <UART_SetConfig+0x2ae>
 8007002:	22c0      	movs	r2, #192	; 0xc0
 8007004:	0112      	lsls	r2, r2, #4
 8007006:	4293      	cmp	r3, r2
 8007008:	d82a      	bhi.n	8007060 <UART_SetConfig+0x2bc>
 800700a:	2280      	movs	r2, #128	; 0x80
 800700c:	0112      	lsls	r2, r2, #4
 800700e:	4293      	cmp	r3, r2
 8007010:	d011      	beq.n	8007036 <UART_SetConfig+0x292>
 8007012:	2280      	movs	r2, #128	; 0x80
 8007014:	0112      	lsls	r2, r2, #4
 8007016:	4293      	cmp	r3, r2
 8007018:	d822      	bhi.n	8007060 <UART_SetConfig+0x2bc>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d004      	beq.n	8007028 <UART_SetConfig+0x284>
 800701e:	2280      	movs	r2, #128	; 0x80
 8007020:	00d2      	lsls	r2, r2, #3
 8007022:	4293      	cmp	r3, r2
 8007024:	d00e      	beq.n	8007044 <UART_SetConfig+0x2a0>
 8007026:	e01b      	b.n	8007060 <UART_SetConfig+0x2bc>
 8007028:	231b      	movs	r3, #27
 800702a:	2220      	movs	r2, #32
 800702c:	189b      	adds	r3, r3, r2
 800702e:	19db      	adds	r3, r3, r7
 8007030:	2200      	movs	r2, #0
 8007032:	701a      	strb	r2, [r3, #0]
 8007034:	e07e      	b.n	8007134 <UART_SetConfig+0x390>
 8007036:	231b      	movs	r3, #27
 8007038:	2220      	movs	r2, #32
 800703a:	189b      	adds	r3, r3, r2
 800703c:	19db      	adds	r3, r3, r7
 800703e:	2202      	movs	r2, #2
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	e077      	b.n	8007134 <UART_SetConfig+0x390>
 8007044:	231b      	movs	r3, #27
 8007046:	2220      	movs	r2, #32
 8007048:	189b      	adds	r3, r3, r2
 800704a:	19db      	adds	r3, r3, r7
 800704c:	2204      	movs	r2, #4
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	e070      	b.n	8007134 <UART_SetConfig+0x390>
 8007052:	231b      	movs	r3, #27
 8007054:	2220      	movs	r2, #32
 8007056:	189b      	adds	r3, r3, r2
 8007058:	19db      	adds	r3, r3, r7
 800705a:	2208      	movs	r2, #8
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	e069      	b.n	8007134 <UART_SetConfig+0x390>
 8007060:	231b      	movs	r3, #27
 8007062:	2220      	movs	r2, #32
 8007064:	189b      	adds	r3, r3, r2
 8007066:	19db      	adds	r3, r3, r7
 8007068:	2210      	movs	r2, #16
 800706a:	701a      	strb	r2, [r3, #0]
 800706c:	e062      	b.n	8007134 <UART_SetConfig+0x390>
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a1d      	ldr	r2, [pc, #116]	; (80070e8 <UART_SetConfig+0x344>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d157      	bne.n	8007128 <UART_SetConfig+0x384>
 8007078:	4b1e      	ldr	r3, [pc, #120]	; (80070f4 <UART_SetConfig+0x350>)
 800707a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800707c:	23c0      	movs	r3, #192	; 0xc0
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4013      	ands	r3, r2
 8007082:	22c0      	movs	r2, #192	; 0xc0
 8007084:	0092      	lsls	r2, r2, #2
 8007086:	4293      	cmp	r3, r2
 8007088:	d040      	beq.n	800710c <UART_SetConfig+0x368>
 800708a:	22c0      	movs	r2, #192	; 0xc0
 800708c:	0092      	lsls	r2, r2, #2
 800708e:	4293      	cmp	r3, r2
 8007090:	d843      	bhi.n	800711a <UART_SetConfig+0x376>
 8007092:	2280      	movs	r2, #128	; 0x80
 8007094:	0092      	lsls	r2, r2, #2
 8007096:	4293      	cmp	r3, r2
 8007098:	d011      	beq.n	80070be <UART_SetConfig+0x31a>
 800709a:	2280      	movs	r2, #128	; 0x80
 800709c:	0092      	lsls	r2, r2, #2
 800709e:	4293      	cmp	r3, r2
 80070a0:	d83b      	bhi.n	800711a <UART_SetConfig+0x376>
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d004      	beq.n	80070b0 <UART_SetConfig+0x30c>
 80070a6:	2280      	movs	r2, #128	; 0x80
 80070a8:	0052      	lsls	r2, r2, #1
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d00e      	beq.n	80070cc <UART_SetConfig+0x328>
 80070ae:	e034      	b.n	800711a <UART_SetConfig+0x376>
 80070b0:	231b      	movs	r3, #27
 80070b2:	2220      	movs	r2, #32
 80070b4:	189b      	adds	r3, r3, r2
 80070b6:	19db      	adds	r3, r3, r7
 80070b8:	2200      	movs	r2, #0
 80070ba:	701a      	strb	r2, [r3, #0]
 80070bc:	e03a      	b.n	8007134 <UART_SetConfig+0x390>
 80070be:	231b      	movs	r3, #27
 80070c0:	2220      	movs	r2, #32
 80070c2:	189b      	adds	r3, r3, r2
 80070c4:	19db      	adds	r3, r3, r7
 80070c6:	2202      	movs	r2, #2
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	e033      	b.n	8007134 <UART_SetConfig+0x390>
 80070cc:	231b      	movs	r3, #27
 80070ce:	2220      	movs	r2, #32
 80070d0:	189b      	adds	r3, r3, r2
 80070d2:	19db      	adds	r3, r3, r7
 80070d4:	2204      	movs	r2, #4
 80070d6:	701a      	strb	r2, [r3, #0]
 80070d8:	e02c      	b.n	8007134 <UART_SetConfig+0x390>
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	cfff69f3 	.word	0xcfff69f3
 80070e0:	ffffcfff 	.word	0xffffcfff
 80070e4:	40008000 	.word	0x40008000
 80070e8:	40008400 	.word	0x40008400
 80070ec:	11fff4ff 	.word	0x11fff4ff
 80070f0:	40013800 	.word	0x40013800
 80070f4:	40021000 	.word	0x40021000
 80070f8:	40004400 	.word	0x40004400
 80070fc:	40004800 	.word	0x40004800
 8007100:	40004c00 	.word	0x40004c00
 8007104:	40005000 	.word	0x40005000
 8007108:	40013c00 	.word	0x40013c00
 800710c:	231b      	movs	r3, #27
 800710e:	2220      	movs	r2, #32
 8007110:	189b      	adds	r3, r3, r2
 8007112:	19db      	adds	r3, r3, r7
 8007114:	2208      	movs	r2, #8
 8007116:	701a      	strb	r2, [r3, #0]
 8007118:	e00c      	b.n	8007134 <UART_SetConfig+0x390>
 800711a:	231b      	movs	r3, #27
 800711c:	2220      	movs	r2, #32
 800711e:	189b      	adds	r3, r3, r2
 8007120:	19db      	adds	r3, r3, r7
 8007122:	2210      	movs	r2, #16
 8007124:	701a      	strb	r2, [r3, #0]
 8007126:	e005      	b.n	8007134 <UART_SetConfig+0x390>
 8007128:	231b      	movs	r3, #27
 800712a:	2220      	movs	r2, #32
 800712c:	189b      	adds	r3, r3, r2
 800712e:	19db      	adds	r3, r3, r7
 8007130:	2210      	movs	r2, #16
 8007132:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4ac1      	ldr	r2, [pc, #772]	; (8007440 <UART_SetConfig+0x69c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d005      	beq.n	800714a <UART_SetConfig+0x3a6>
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4ac0      	ldr	r2, [pc, #768]	; (8007444 <UART_SetConfig+0x6a0>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d000      	beq.n	800714a <UART_SetConfig+0x3a6>
 8007148:	e093      	b.n	8007272 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800714a:	231b      	movs	r3, #27
 800714c:	2220      	movs	r2, #32
 800714e:	189b      	adds	r3, r3, r2
 8007150:	19db      	adds	r3, r3, r7
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b08      	cmp	r3, #8
 8007156:	d015      	beq.n	8007184 <UART_SetConfig+0x3e0>
 8007158:	dc18      	bgt.n	800718c <UART_SetConfig+0x3e8>
 800715a:	2b04      	cmp	r3, #4
 800715c:	d00d      	beq.n	800717a <UART_SetConfig+0x3d6>
 800715e:	dc15      	bgt.n	800718c <UART_SetConfig+0x3e8>
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <UART_SetConfig+0x3c6>
 8007164:	2b02      	cmp	r3, #2
 8007166:	d005      	beq.n	8007174 <UART_SetConfig+0x3d0>
 8007168:	e010      	b.n	800718c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800716a:	f7fe f855 	bl	8005218 <HAL_RCC_GetPCLK1Freq>
 800716e:	0003      	movs	r3, r0
 8007170:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007172:	e014      	b.n	800719e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007174:	4bb4      	ldr	r3, [pc, #720]	; (8007448 <UART_SetConfig+0x6a4>)
 8007176:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007178:	e011      	b.n	800719e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800717a:	f7fd ffc1 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 800717e:	0003      	movs	r3, r0
 8007180:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007182:	e00c      	b.n	800719e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007184:	2380      	movs	r3, #128	; 0x80
 8007186:	021b      	lsls	r3, r3, #8
 8007188:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800718a:	e008      	b.n	800719e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007190:	231a      	movs	r3, #26
 8007192:	2220      	movs	r2, #32
 8007194:	189b      	adds	r3, r3, r2
 8007196:	19db      	adds	r3, r3, r7
 8007198:	2201      	movs	r2, #1
 800719a:	701a      	strb	r2, [r3, #0]
        break;
 800719c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800719e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d100      	bne.n	80071a6 <UART_SetConfig+0x402>
 80071a4:	e135      	b.n	8007412 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071aa:	4ba8      	ldr	r3, [pc, #672]	; (800744c <UART_SetConfig+0x6a8>)
 80071ac:	0052      	lsls	r2, r2, #1
 80071ae:	5ad3      	ldrh	r3, [r2, r3]
 80071b0:	0019      	movs	r1, r3
 80071b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80071b4:	f7f8 ffc2 	bl	800013c <__udivsi3>
 80071b8:	0003      	movs	r3, r0
 80071ba:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	0013      	movs	r3, r2
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	189b      	adds	r3, r3, r2
 80071c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d305      	bcc.n	80071d8 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d906      	bls.n	80071e6 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80071d8:	231a      	movs	r3, #26
 80071da:	2220      	movs	r2, #32
 80071dc:	189b      	adds	r3, r3, r2
 80071de:	19db      	adds	r3, r3, r7
 80071e0:	2201      	movs	r2, #1
 80071e2:	701a      	strb	r2, [r3, #0]
 80071e4:	e044      	b.n	8007270 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e8:	61bb      	str	r3, [r7, #24]
 80071ea:	2300      	movs	r3, #0
 80071ec:	61fb      	str	r3, [r7, #28]
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071f2:	4b96      	ldr	r3, [pc, #600]	; (800744c <UART_SetConfig+0x6a8>)
 80071f4:	0052      	lsls	r2, r2, #1
 80071f6:	5ad3      	ldrh	r3, [r2, r3]
 80071f8:	613b      	str	r3, [r7, #16]
 80071fa:	2300      	movs	r3, #0
 80071fc:	617b      	str	r3, [r7, #20]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	69b8      	ldr	r0, [r7, #24]
 8007204:	69f9      	ldr	r1, [r7, #28]
 8007206:	f7f9 f94d 	bl	80004a4 <__aeabi_uldivmod>
 800720a:	0002      	movs	r2, r0
 800720c:	000b      	movs	r3, r1
 800720e:	0e11      	lsrs	r1, r2, #24
 8007210:	021d      	lsls	r5, r3, #8
 8007212:	430d      	orrs	r5, r1
 8007214:	0214      	lsls	r4, r2, #8
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	085b      	lsrs	r3, r3, #1
 800721c:	60bb      	str	r3, [r7, #8]
 800721e:	2300      	movs	r3, #0
 8007220:	60fb      	str	r3, [r7, #12]
 8007222:	68b8      	ldr	r0, [r7, #8]
 8007224:	68f9      	ldr	r1, [r7, #12]
 8007226:	1900      	adds	r0, r0, r4
 8007228:	4169      	adcs	r1, r5
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	603b      	str	r3, [r7, #0]
 8007230:	2300      	movs	r3, #0
 8007232:	607b      	str	r3, [r7, #4]
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f7f9 f934 	bl	80004a4 <__aeabi_uldivmod>
 800723c:	0002      	movs	r2, r0
 800723e:	000b      	movs	r3, r1
 8007240:	0013      	movs	r3, r2
 8007242:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007246:	23c0      	movs	r3, #192	; 0xc0
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	429a      	cmp	r2, r3
 800724c:	d309      	bcc.n	8007262 <UART_SetConfig+0x4be>
 800724e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007250:	2380      	movs	r3, #128	; 0x80
 8007252:	035b      	lsls	r3, r3, #13
 8007254:	429a      	cmp	r2, r3
 8007256:	d204      	bcs.n	8007262 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800725e:	60da      	str	r2, [r3, #12]
 8007260:	e006      	b.n	8007270 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8007262:	231a      	movs	r3, #26
 8007264:	2220      	movs	r2, #32
 8007266:	189b      	adds	r3, r3, r2
 8007268:	19db      	adds	r3, r3, r7
 800726a:	2201      	movs	r2, #1
 800726c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800726e:	e0d0      	b.n	8007412 <UART_SetConfig+0x66e>
 8007270:	e0cf      	b.n	8007412 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	69da      	ldr	r2, [r3, #28]
 8007276:	2380      	movs	r3, #128	; 0x80
 8007278:	021b      	lsls	r3, r3, #8
 800727a:	429a      	cmp	r2, r3
 800727c:	d000      	beq.n	8007280 <UART_SetConfig+0x4dc>
 800727e:	e070      	b.n	8007362 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8007280:	231b      	movs	r3, #27
 8007282:	2220      	movs	r2, #32
 8007284:	189b      	adds	r3, r3, r2
 8007286:	19db      	adds	r3, r3, r7
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b08      	cmp	r3, #8
 800728c:	d015      	beq.n	80072ba <UART_SetConfig+0x516>
 800728e:	dc18      	bgt.n	80072c2 <UART_SetConfig+0x51e>
 8007290:	2b04      	cmp	r3, #4
 8007292:	d00d      	beq.n	80072b0 <UART_SetConfig+0x50c>
 8007294:	dc15      	bgt.n	80072c2 <UART_SetConfig+0x51e>
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <UART_SetConfig+0x4fc>
 800729a:	2b02      	cmp	r3, #2
 800729c:	d005      	beq.n	80072aa <UART_SetConfig+0x506>
 800729e:	e010      	b.n	80072c2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072a0:	f7fd ffba 	bl	8005218 <HAL_RCC_GetPCLK1Freq>
 80072a4:	0003      	movs	r3, r0
 80072a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072a8:	e014      	b.n	80072d4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072aa:	4b67      	ldr	r3, [pc, #412]	; (8007448 <UART_SetConfig+0x6a4>)
 80072ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072ae:	e011      	b.n	80072d4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072b0:	f7fd ff26 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 80072b4:	0003      	movs	r3, r0
 80072b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072b8:	e00c      	b.n	80072d4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ba:	2380      	movs	r3, #128	; 0x80
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072c0:	e008      	b.n	80072d4 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80072c6:	231a      	movs	r3, #26
 80072c8:	2220      	movs	r2, #32
 80072ca:	189b      	adds	r3, r3, r2
 80072cc:	19db      	adds	r3, r3, r7
 80072ce:	2201      	movs	r2, #1
 80072d0:	701a      	strb	r2, [r3, #0]
        break;
 80072d2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d100      	bne.n	80072dc <UART_SetConfig+0x538>
 80072da:	e09a      	b.n	8007412 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072e0:	4b5a      	ldr	r3, [pc, #360]	; (800744c <UART_SetConfig+0x6a8>)
 80072e2:	0052      	lsls	r2, r2, #1
 80072e4:	5ad3      	ldrh	r3, [r2, r3]
 80072e6:	0019      	movs	r1, r3
 80072e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80072ea:	f7f8 ff27 	bl	800013c <__udivsi3>
 80072ee:	0003      	movs	r3, r0
 80072f0:	005a      	lsls	r2, r3, #1
 80072f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	085b      	lsrs	r3, r3, #1
 80072f8:	18d2      	adds	r2, r2, r3
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	0019      	movs	r1, r3
 8007300:	0010      	movs	r0, r2
 8007302:	f7f8 ff1b 	bl	800013c <__udivsi3>
 8007306:	0003      	movs	r3, r0
 8007308:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	2b0f      	cmp	r3, #15
 800730e:	d921      	bls.n	8007354 <UART_SetConfig+0x5b0>
 8007310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007312:	2380      	movs	r3, #128	; 0x80
 8007314:	025b      	lsls	r3, r3, #9
 8007316:	429a      	cmp	r2, r3
 8007318:	d21c      	bcs.n	8007354 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	b29a      	uxth	r2, r3
 800731e:	200e      	movs	r0, #14
 8007320:	2420      	movs	r4, #32
 8007322:	1903      	adds	r3, r0, r4
 8007324:	19db      	adds	r3, r3, r7
 8007326:	210f      	movs	r1, #15
 8007328:	438a      	bics	r2, r1
 800732a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	085b      	lsrs	r3, r3, #1
 8007330:	b29b      	uxth	r3, r3
 8007332:	2207      	movs	r2, #7
 8007334:	4013      	ands	r3, r2
 8007336:	b299      	uxth	r1, r3
 8007338:	1903      	adds	r3, r0, r4
 800733a:	19db      	adds	r3, r3, r7
 800733c:	1902      	adds	r2, r0, r4
 800733e:	19d2      	adds	r2, r2, r7
 8007340:	8812      	ldrh	r2, [r2, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	1902      	adds	r2, r0, r4
 800734c:	19d2      	adds	r2, r2, r7
 800734e:	8812      	ldrh	r2, [r2, #0]
 8007350:	60da      	str	r2, [r3, #12]
 8007352:	e05e      	b.n	8007412 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007354:	231a      	movs	r3, #26
 8007356:	2220      	movs	r2, #32
 8007358:	189b      	adds	r3, r3, r2
 800735a:	19db      	adds	r3, r3, r7
 800735c:	2201      	movs	r2, #1
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	e057      	b.n	8007412 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007362:	231b      	movs	r3, #27
 8007364:	2220      	movs	r2, #32
 8007366:	189b      	adds	r3, r3, r2
 8007368:	19db      	adds	r3, r3, r7
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	2b08      	cmp	r3, #8
 800736e:	d015      	beq.n	800739c <UART_SetConfig+0x5f8>
 8007370:	dc18      	bgt.n	80073a4 <UART_SetConfig+0x600>
 8007372:	2b04      	cmp	r3, #4
 8007374:	d00d      	beq.n	8007392 <UART_SetConfig+0x5ee>
 8007376:	dc15      	bgt.n	80073a4 <UART_SetConfig+0x600>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <UART_SetConfig+0x5de>
 800737c:	2b02      	cmp	r3, #2
 800737e:	d005      	beq.n	800738c <UART_SetConfig+0x5e8>
 8007380:	e010      	b.n	80073a4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007382:	f7fd ff49 	bl	8005218 <HAL_RCC_GetPCLK1Freq>
 8007386:	0003      	movs	r3, r0
 8007388:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800738a:	e014      	b.n	80073b6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800738c:	4b2e      	ldr	r3, [pc, #184]	; (8007448 <UART_SetConfig+0x6a4>)
 800738e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007390:	e011      	b.n	80073b6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007392:	f7fd feb5 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 8007396:	0003      	movs	r3, r0
 8007398:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800739a:	e00c      	b.n	80073b6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800739c:	2380      	movs	r3, #128	; 0x80
 800739e:	021b      	lsls	r3, r3, #8
 80073a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073a2:	e008      	b.n	80073b6 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80073a8:	231a      	movs	r3, #26
 80073aa:	2220      	movs	r2, #32
 80073ac:	189b      	adds	r3, r3, r2
 80073ae:	19db      	adds	r3, r3, r7
 80073b0:	2201      	movs	r2, #1
 80073b2:	701a      	strb	r2, [r3, #0]
        break;
 80073b4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80073b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d02a      	beq.n	8007412 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073c0:	4b22      	ldr	r3, [pc, #136]	; (800744c <UART_SetConfig+0x6a8>)
 80073c2:	0052      	lsls	r2, r2, #1
 80073c4:	5ad3      	ldrh	r3, [r2, r3]
 80073c6:	0019      	movs	r1, r3
 80073c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80073ca:	f7f8 feb7 	bl	800013c <__udivsi3>
 80073ce:	0003      	movs	r3, r0
 80073d0:	001a      	movs	r2, r3
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	085b      	lsrs	r3, r3, #1
 80073d8:	18d2      	adds	r2, r2, r3
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	0019      	movs	r1, r3
 80073e0:	0010      	movs	r0, r2
 80073e2:	f7f8 feab 	bl	800013c <__udivsi3>
 80073e6:	0003      	movs	r3, r0
 80073e8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	2b0f      	cmp	r3, #15
 80073ee:	d90a      	bls.n	8007406 <UART_SetConfig+0x662>
 80073f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073f2:	2380      	movs	r3, #128	; 0x80
 80073f4:	025b      	lsls	r3, r3, #9
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d205      	bcs.n	8007406 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	60da      	str	r2, [r3, #12]
 8007404:	e005      	b.n	8007412 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007406:	231a      	movs	r3, #26
 8007408:	2220      	movs	r2, #32
 800740a:	189b      	adds	r3, r3, r2
 800740c:	19db      	adds	r3, r3, r7
 800740e:	2201      	movs	r2, #1
 8007410:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	226a      	movs	r2, #106	; 0x6a
 8007416:	2101      	movs	r1, #1
 8007418:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	2268      	movs	r2, #104	; 0x68
 800741e:	2101      	movs	r1, #1
 8007420:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	2200      	movs	r2, #0
 8007426:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	2200      	movs	r2, #0
 800742c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800742e:	231a      	movs	r3, #26
 8007430:	2220      	movs	r2, #32
 8007432:	189b      	adds	r3, r3, r2
 8007434:	19db      	adds	r3, r3, r7
 8007436:	781b      	ldrb	r3, [r3, #0]
}
 8007438:	0018      	movs	r0, r3
 800743a:	46bd      	mov	sp, r7
 800743c:	b010      	add	sp, #64	; 0x40
 800743e:	bdb0      	pop	{r4, r5, r7, pc}
 8007440:	40008000 	.word	0x40008000
 8007444:	40008400 	.word	0x40008400
 8007448:	00f42400 	.word	0x00f42400
 800744c:	08014474 	.word	0x08014474

08007450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745c:	2208      	movs	r2, #8
 800745e:	4013      	ands	r3, r2
 8007460:	d00b      	beq.n	800747a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	4a4a      	ldr	r2, [pc, #296]	; (8007594 <UART_AdvFeatureConfig+0x144>)
 800746a:	4013      	ands	r3, r2
 800746c:	0019      	movs	r1, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747e:	2201      	movs	r2, #1
 8007480:	4013      	ands	r3, r2
 8007482:	d00b      	beq.n	800749c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	4a43      	ldr	r2, [pc, #268]	; (8007598 <UART_AdvFeatureConfig+0x148>)
 800748c:	4013      	ands	r3, r2
 800748e:	0019      	movs	r1, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	430a      	orrs	r2, r1
 800749a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	2202      	movs	r2, #2
 80074a2:	4013      	ands	r3, r2
 80074a4:	d00b      	beq.n	80074be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	4a3b      	ldr	r2, [pc, #236]	; (800759c <UART_AdvFeatureConfig+0x14c>)
 80074ae:	4013      	ands	r3, r2
 80074b0:	0019      	movs	r1, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	2204      	movs	r2, #4
 80074c4:	4013      	ands	r3, r2
 80074c6:	d00b      	beq.n	80074e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	4a34      	ldr	r2, [pc, #208]	; (80075a0 <UART_AdvFeatureConfig+0x150>)
 80074d0:	4013      	ands	r3, r2
 80074d2:	0019      	movs	r1, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e4:	2210      	movs	r2, #16
 80074e6:	4013      	ands	r3, r2
 80074e8:	d00b      	beq.n	8007502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	4a2c      	ldr	r2, [pc, #176]	; (80075a4 <UART_AdvFeatureConfig+0x154>)
 80074f2:	4013      	ands	r3, r2
 80074f4:	0019      	movs	r1, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007506:	2220      	movs	r2, #32
 8007508:	4013      	ands	r3, r2
 800750a:	d00b      	beq.n	8007524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	4a25      	ldr	r2, [pc, #148]	; (80075a8 <UART_AdvFeatureConfig+0x158>)
 8007514:	4013      	ands	r3, r2
 8007516:	0019      	movs	r1, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007528:	2240      	movs	r2, #64	; 0x40
 800752a:	4013      	ands	r3, r2
 800752c:	d01d      	beq.n	800756a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	4a1d      	ldr	r2, [pc, #116]	; (80075ac <UART_AdvFeatureConfig+0x15c>)
 8007536:	4013      	ands	r3, r2
 8007538:	0019      	movs	r1, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800754a:	2380      	movs	r3, #128	; 0x80
 800754c:	035b      	lsls	r3, r3, #13
 800754e:	429a      	cmp	r2, r3
 8007550:	d10b      	bne.n	800756a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	4a15      	ldr	r2, [pc, #84]	; (80075b0 <UART_AdvFeatureConfig+0x160>)
 800755a:	4013      	ands	r3, r2
 800755c:	0019      	movs	r1, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756e:	2280      	movs	r2, #128	; 0x80
 8007570:	4013      	ands	r3, r2
 8007572:	d00b      	beq.n	800758c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	4a0e      	ldr	r2, [pc, #56]	; (80075b4 <UART_AdvFeatureConfig+0x164>)
 800757c:	4013      	ands	r3, r2
 800757e:	0019      	movs	r1, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	605a      	str	r2, [r3, #4]
  }
}
 800758c:	46c0      	nop			; (mov r8, r8)
 800758e:	46bd      	mov	sp, r7
 8007590:	b002      	add	sp, #8
 8007592:	bd80      	pop	{r7, pc}
 8007594:	ffff7fff 	.word	0xffff7fff
 8007598:	fffdffff 	.word	0xfffdffff
 800759c:	fffeffff 	.word	0xfffeffff
 80075a0:	fffbffff 	.word	0xfffbffff
 80075a4:	ffffefff 	.word	0xffffefff
 80075a8:	ffffdfff 	.word	0xffffdfff
 80075ac:	ffefffff 	.word	0xffefffff
 80075b0:	ff9fffff 	.word	0xff9fffff
 80075b4:	fff7ffff 	.word	0xfff7ffff

080075b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b092      	sub	sp, #72	; 0x48
 80075bc:	af02      	add	r7, sp, #8
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2290      	movs	r2, #144	; 0x90
 80075c4:	2100      	movs	r1, #0
 80075c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075c8:	f7fc fc80 	bl	8003ecc <HAL_GetTick>
 80075cc:	0003      	movs	r3, r0
 80075ce:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2208      	movs	r2, #8
 80075d8:	4013      	ands	r3, r2
 80075da:	2b08      	cmp	r3, #8
 80075dc:	d12d      	bne.n	800763a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e0:	2280      	movs	r2, #128	; 0x80
 80075e2:	0391      	lsls	r1, r2, #14
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	4a47      	ldr	r2, [pc, #284]	; (8007704 <UART_CheckIdleState+0x14c>)
 80075e8:	9200      	str	r2, [sp, #0]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f000 f88e 	bl	800770c <UART_WaitOnFlagUntilTimeout>
 80075f0:	1e03      	subs	r3, r0, #0
 80075f2:	d022      	beq.n	800763a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075f4:	f3ef 8310 	mrs	r3, PRIMASK
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80075fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80075fe:	2301      	movs	r3, #1
 8007600:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	f383 8810 	msr	PRIMASK, r3
}
 8007608:	46c0      	nop			; (mov r8, r8)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2180      	movs	r1, #128	; 0x80
 8007616:	438a      	bics	r2, r1
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800761e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007620:	f383 8810 	msr	PRIMASK, r3
}
 8007624:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2288      	movs	r2, #136	; 0x88
 800762a:	2120      	movs	r1, #32
 800762c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2284      	movs	r2, #132	; 0x84
 8007632:	2100      	movs	r1, #0
 8007634:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e060      	b.n	80076fc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2204      	movs	r2, #4
 8007642:	4013      	ands	r3, r2
 8007644:	2b04      	cmp	r3, #4
 8007646:	d146      	bne.n	80076d6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800764a:	2280      	movs	r2, #128	; 0x80
 800764c:	03d1      	lsls	r1, r2, #15
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	4a2c      	ldr	r2, [pc, #176]	; (8007704 <UART_CheckIdleState+0x14c>)
 8007652:	9200      	str	r2, [sp, #0]
 8007654:	2200      	movs	r2, #0
 8007656:	f000 f859 	bl	800770c <UART_WaitOnFlagUntilTimeout>
 800765a:	1e03      	subs	r3, r0, #0
 800765c:	d03b      	beq.n	80076d6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800765e:	f3ef 8310 	mrs	r3, PRIMASK
 8007662:	60fb      	str	r3, [r7, #12]
  return(result);
 8007664:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007666:	637b      	str	r3, [r7, #52]	; 0x34
 8007668:	2301      	movs	r3, #1
 800766a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f383 8810 	msr	PRIMASK, r3
}
 8007672:	46c0      	nop			; (mov r8, r8)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4922      	ldr	r1, [pc, #136]	; (8007708 <UART_CheckIdleState+0x150>)
 8007680:	400a      	ands	r2, r1
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007686:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f383 8810 	msr	PRIMASK, r3
}
 800768e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007690:	f3ef 8310 	mrs	r3, PRIMASK
 8007694:	61bb      	str	r3, [r7, #24]
  return(result);
 8007696:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007698:	633b      	str	r3, [r7, #48]	; 0x30
 800769a:	2301      	movs	r3, #1
 800769c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	f383 8810 	msr	PRIMASK, r3
}
 80076a4:	46c0      	nop			; (mov r8, r8)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2101      	movs	r1, #1
 80076b2:	438a      	bics	r2, r1
 80076b4:	609a      	str	r2, [r3, #8]
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	f383 8810 	msr	PRIMASK, r3
}
 80076c0:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	228c      	movs	r2, #140	; 0x8c
 80076c6:	2120      	movs	r1, #32
 80076c8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2284      	movs	r2, #132	; 0x84
 80076ce:	2100      	movs	r1, #0
 80076d0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e012      	b.n	80076fc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2288      	movs	r2, #136	; 0x88
 80076da:	2120      	movs	r1, #32
 80076dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	228c      	movs	r2, #140	; 0x8c
 80076e2:	2120      	movs	r1, #32
 80076e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2284      	movs	r2, #132	; 0x84
 80076f6:	2100      	movs	r1, #0
 80076f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	0018      	movs	r0, r3
 80076fe:	46bd      	mov	sp, r7
 8007700:	b010      	add	sp, #64	; 0x40
 8007702:	bd80      	pop	{r7, pc}
 8007704:	01ffffff 	.word	0x01ffffff
 8007708:	fffffedf 	.word	0xfffffedf

0800770c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	603b      	str	r3, [r7, #0]
 8007718:	1dfb      	adds	r3, r7, #7
 800771a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800771c:	e051      	b.n	80077c2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	3301      	adds	r3, #1
 8007722:	d04e      	beq.n	80077c2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007724:	f7fc fbd2 	bl	8003ecc <HAL_GetTick>
 8007728:	0002      	movs	r2, r0
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	429a      	cmp	r2, r3
 8007732:	d302      	bcc.n	800773a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e051      	b.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2204      	movs	r2, #4
 8007746:	4013      	ands	r3, r2
 8007748:	d03b      	beq.n	80077c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b80      	cmp	r3, #128	; 0x80
 800774e:	d038      	beq.n	80077c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b40      	cmp	r3, #64	; 0x40
 8007754:	d035      	beq.n	80077c2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	2208      	movs	r2, #8
 800775e:	4013      	ands	r3, r2
 8007760:	2b08      	cmp	r3, #8
 8007762:	d111      	bne.n	8007788 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2208      	movs	r2, #8
 800776a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	0018      	movs	r0, r3
 8007770:	f000 f83c 	bl	80077ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2290      	movs	r2, #144	; 0x90
 8007778:	2108      	movs	r1, #8
 800777a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2284      	movs	r2, #132	; 0x84
 8007780:	2100      	movs	r1, #0
 8007782:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e02c      	b.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	69da      	ldr	r2, [r3, #28]
 800778e:	2380      	movs	r3, #128	; 0x80
 8007790:	011b      	lsls	r3, r3, #4
 8007792:	401a      	ands	r2, r3
 8007794:	2380      	movs	r3, #128	; 0x80
 8007796:	011b      	lsls	r3, r3, #4
 8007798:	429a      	cmp	r2, r3
 800779a:	d112      	bne.n	80077c2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2280      	movs	r2, #128	; 0x80
 80077a2:	0112      	lsls	r2, r2, #4
 80077a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	0018      	movs	r0, r3
 80077aa:	f000 f81f 	bl	80077ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2290      	movs	r2, #144	; 0x90
 80077b2:	2120      	movs	r1, #32
 80077b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2284      	movs	r2, #132	; 0x84
 80077ba:	2100      	movs	r1, #0
 80077bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e00f      	b.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	4013      	ands	r3, r2
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	425a      	negs	r2, r3
 80077d2:	4153      	adcs	r3, r2
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	001a      	movs	r2, r3
 80077d8:	1dfb      	adds	r3, r7, #7
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d09e      	beq.n	800771e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	0018      	movs	r0, r3
 80077e4:	46bd      	mov	sp, r7
 80077e6:	b004      	add	sp, #16
 80077e8:	bd80      	pop	{r7, pc}
	...

080077ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08e      	sub	sp, #56	; 0x38
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077f4:	f3ef 8310 	mrs	r3, PRIMASK
 80077f8:	617b      	str	r3, [r7, #20]
  return(result);
 80077fa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077fc:	637b      	str	r3, [r7, #52]	; 0x34
 80077fe:	2301      	movs	r3, #1
 8007800:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	f383 8810 	msr	PRIMASK, r3
}
 8007808:	46c0      	nop			; (mov r8, r8)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4926      	ldr	r1, [pc, #152]	; (80078b0 <UART_EndRxTransfer+0xc4>)
 8007816:	400a      	ands	r2, r1
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	f383 8810 	msr	PRIMASK, r3
}
 8007824:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007826:	f3ef 8310 	mrs	r3, PRIMASK
 800782a:	623b      	str	r3, [r7, #32]
  return(result);
 800782c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800782e:	633b      	str	r3, [r7, #48]	; 0x30
 8007830:	2301      	movs	r3, #1
 8007832:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	f383 8810 	msr	PRIMASK, r3
}
 800783a:	46c0      	nop			; (mov r8, r8)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689a      	ldr	r2, [r3, #8]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	491b      	ldr	r1, [pc, #108]	; (80078b4 <UART_EndRxTransfer+0xc8>)
 8007848:	400a      	ands	r2, r1
 800784a:	609a      	str	r2, [r3, #8]
 800784c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	f383 8810 	msr	PRIMASK, r3
}
 8007856:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800785c:	2b01      	cmp	r3, #1
 800785e:	d118      	bne.n	8007892 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007860:	f3ef 8310 	mrs	r3, PRIMASK
 8007864:	60bb      	str	r3, [r7, #8]
  return(result);
 8007866:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800786a:	2301      	movs	r3, #1
 800786c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f383 8810 	msr	PRIMASK, r3
}
 8007874:	46c0      	nop			; (mov r8, r8)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2110      	movs	r1, #16
 8007882:	438a      	bics	r2, r1
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007888:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f383 8810 	msr	PRIMASK, r3
}
 8007890:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	228c      	movs	r2, #140	; 0x8c
 8007896:	2120      	movs	r1, #32
 8007898:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80078a6:	46c0      	nop			; (mov r8, r8)
 80078a8:	46bd      	mov	sp, r7
 80078aa:	b00e      	add	sp, #56	; 0x38
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	46c0      	nop			; (mov r8, r8)
 80078b0:	fffffedf 	.word	0xfffffedf
 80078b4:	effffffe 	.word	0xeffffffe

080078b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2284      	movs	r2, #132	; 0x84
 80078c4:	5c9b      	ldrb	r3, [r3, r2]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d101      	bne.n	80078ce <HAL_UARTEx_DisableFifoMode+0x16>
 80078ca:	2302      	movs	r3, #2
 80078cc:	e027      	b.n	800791e <HAL_UARTEx_DisableFifoMode+0x66>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2284      	movs	r2, #132	; 0x84
 80078d2:	2101      	movs	r1, #1
 80078d4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2288      	movs	r2, #136	; 0x88
 80078da:	2124      	movs	r1, #36	; 0x24
 80078dc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2101      	movs	r1, #1
 80078f2:	438a      	bics	r2, r1
 80078f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4a0b      	ldr	r2, [pc, #44]	; (8007928 <HAL_UARTEx_DisableFifoMode+0x70>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2288      	movs	r2, #136	; 0x88
 8007910:	2120      	movs	r1, #32
 8007912:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2284      	movs	r2, #132	; 0x84
 8007918:	2100      	movs	r1, #0
 800791a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	0018      	movs	r0, r3
 8007920:	46bd      	mov	sp, r7
 8007922:	b004      	add	sp, #16
 8007924:	bd80      	pop	{r7, pc}
 8007926:	46c0      	nop			; (mov r8, r8)
 8007928:	dfffffff 	.word	0xdfffffff

0800792c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2284      	movs	r2, #132	; 0x84
 800793a:	5c9b      	ldrb	r3, [r3, r2]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007940:	2302      	movs	r3, #2
 8007942:	e02e      	b.n	80079a2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2284      	movs	r2, #132	; 0x84
 8007948:	2101      	movs	r1, #1
 800794a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2288      	movs	r2, #136	; 0x88
 8007950:	2124      	movs	r1, #36	; 0x24
 8007952:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2101      	movs	r1, #1
 8007968:	438a      	bics	r2, r1
 800796a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	08d9      	lsrs	r1, r3, #3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	0018      	movs	r0, r3
 8007984:	f000 f854 	bl	8007a30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2288      	movs	r2, #136	; 0x88
 8007994:	2120      	movs	r1, #32
 8007996:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2284      	movs	r2, #132	; 0x84
 800799c:	2100      	movs	r1, #0
 800799e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	0018      	movs	r0, r3
 80079a4:	46bd      	mov	sp, r7
 80079a6:	b004      	add	sp, #16
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2284      	movs	r2, #132	; 0x84
 80079ba:	5c9b      	ldrb	r3, [r3, r2]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d101      	bne.n	80079c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e02f      	b.n	8007a24 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2284      	movs	r2, #132	; 0x84
 80079c8:	2101      	movs	r1, #1
 80079ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2288      	movs	r2, #136	; 0x88
 80079d0:	2124      	movs	r1, #36	; 0x24
 80079d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2101      	movs	r1, #1
 80079e8:	438a      	bics	r2, r1
 80079ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	4a0e      	ldr	r2, [pc, #56]	; (8007a2c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	0019      	movs	r1, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	683a      	ldr	r2, [r7, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	0018      	movs	r0, r3
 8007a06:	f000 f813 	bl	8007a30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2288      	movs	r2, #136	; 0x88
 8007a16:	2120      	movs	r1, #32
 8007a18:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2284      	movs	r2, #132	; 0x84
 8007a1e:	2100      	movs	r1, #0
 8007a20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	0018      	movs	r0, r3
 8007a26:	46bd      	mov	sp, r7
 8007a28:	b004      	add	sp, #16
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	f1ffffff 	.word	0xf1ffffff

08007a30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d108      	bne.n	8007a52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	226a      	movs	r2, #106	; 0x6a
 8007a44:	2101      	movs	r1, #1
 8007a46:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2268      	movs	r2, #104	; 0x68
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a50:	e043      	b.n	8007ada <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a52:	260f      	movs	r6, #15
 8007a54:	19bb      	adds	r3, r7, r6
 8007a56:	2208      	movs	r2, #8
 8007a58:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a5a:	200e      	movs	r0, #14
 8007a5c:	183b      	adds	r3, r7, r0
 8007a5e:	2208      	movs	r2, #8
 8007a60:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	0e5b      	lsrs	r3, r3, #25
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	240d      	movs	r4, #13
 8007a6e:	193b      	adds	r3, r7, r4
 8007a70:	2107      	movs	r1, #7
 8007a72:	400a      	ands	r2, r1
 8007a74:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	0f5b      	lsrs	r3, r3, #29
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	250c      	movs	r5, #12
 8007a82:	197b      	adds	r3, r7, r5
 8007a84:	2107      	movs	r1, #7
 8007a86:	400a      	ands	r2, r1
 8007a88:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a8a:	183b      	adds	r3, r7, r0
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	197a      	adds	r2, r7, r5
 8007a90:	7812      	ldrb	r2, [r2, #0]
 8007a92:	4914      	ldr	r1, [pc, #80]	; (8007ae4 <UARTEx_SetNbDataToProcess+0xb4>)
 8007a94:	5c8a      	ldrb	r2, [r1, r2]
 8007a96:	435a      	muls	r2, r3
 8007a98:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a9a:	197b      	adds	r3, r7, r5
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	4a12      	ldr	r2, [pc, #72]	; (8007ae8 <UARTEx_SetNbDataToProcess+0xb8>)
 8007aa0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007aa2:	0019      	movs	r1, r3
 8007aa4:	f7f8 fbd4 	bl	8000250 <__divsi3>
 8007aa8:	0003      	movs	r3, r0
 8007aaa:	b299      	uxth	r1, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	226a      	movs	r2, #106	; 0x6a
 8007ab0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ab2:	19bb      	adds	r3, r7, r6
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	193a      	adds	r2, r7, r4
 8007ab8:	7812      	ldrb	r2, [r2, #0]
 8007aba:	490a      	ldr	r1, [pc, #40]	; (8007ae4 <UARTEx_SetNbDataToProcess+0xb4>)
 8007abc:	5c8a      	ldrb	r2, [r1, r2]
 8007abe:	435a      	muls	r2, r3
 8007ac0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ac2:	193b      	adds	r3, r7, r4
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	4a08      	ldr	r2, [pc, #32]	; (8007ae8 <UARTEx_SetNbDataToProcess+0xb8>)
 8007ac8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aca:	0019      	movs	r1, r3
 8007acc:	f7f8 fbc0 	bl	8000250 <__divsi3>
 8007ad0:	0003      	movs	r3, r0
 8007ad2:	b299      	uxth	r1, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2268      	movs	r2, #104	; 0x68
 8007ad8:	5299      	strh	r1, [r3, r2]
}
 8007ada:	46c0      	nop			; (mov r8, r8)
 8007adc:	46bd      	mov	sp, r7
 8007ade:	b005      	add	sp, #20
 8007ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	0801448c 	.word	0x0801448c
 8007ae8:	08014494 	.word	0x08014494

08007aec <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007aec:	b5b0      	push	{r4, r5, r7, lr}
 8007aee:	b0e4      	sub	sp, #400	; 0x190
 8007af0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007af2:	24c8      	movs	r4, #200	; 0xc8
 8007af4:	193b      	adds	r3, r7, r4
 8007af6:	0018      	movs	r0, r3
 8007af8:	23c6      	movs	r3, #198	; 0xc6
 8007afa:	001a      	movs	r2, r3
 8007afc:	2100      	movs	r1, #0
 8007afe:	f004 f8f7 	bl	800bcf0 <memset>
    astronode_app_msg_t answer = {0};
 8007b02:	4b13      	ldr	r3, [pc, #76]	; (8007b50 <astronode_send_cfg_sr+0x64>)
 8007b04:	25c8      	movs	r5, #200	; 0xc8
 8007b06:	006d      	lsls	r5, r5, #1
 8007b08:	195b      	adds	r3, r3, r5
 8007b0a:	19db      	adds	r3, r3, r7
 8007b0c:	0018      	movs	r0, r3
 8007b0e:	23c6      	movs	r3, #198	; 0xc6
 8007b10:	001a      	movs	r2, r3
 8007b12:	2100      	movs	r1, #0
 8007b14:	f004 f8ec 	bl	800bcf0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8007b18:	193b      	adds	r3, r7, r4
 8007b1a:	2210      	movs	r2, #16
 8007b1c:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8007b1e:	003a      	movs	r2, r7
 8007b20:	193b      	adds	r3, r7, r4
 8007b22:	0011      	movs	r1, r2
 8007b24:	0018      	movs	r0, r3
 8007b26:	f001 fa87 	bl	8009038 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8007b2a:	4b09      	ldr	r3, [pc, #36]	; (8007b50 <astronode_send_cfg_sr+0x64>)
 8007b2c:	195b      	adds	r3, r3, r5
 8007b2e:	19db      	adds	r3, r3, r7
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2b90      	cmp	r3, #144	; 0x90
 8007b34:	d104      	bne.n	8007b40 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8007b36:	4b07      	ldr	r3, [pc, #28]	; (8007b54 <astronode_send_cfg_sr+0x68>)
 8007b38:	0018      	movs	r0, r3
 8007b3a:	f7fb fb6d 	bl	8003218 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007b3e:	e003      	b.n	8007b48 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007b40:	4b05      	ldr	r3, [pc, #20]	; (8007b58 <astronode_send_cfg_sr+0x6c>)
 8007b42:	0018      	movs	r0, r3
 8007b44:	f7fb fb68 	bl	8003218 <send_debug_logs>
}
 8007b48:	46c0      	nop			; (mov r8, r8)
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	b064      	add	sp, #400	; 0x190
 8007b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8007b50:	fffffe70 	.word	0xfffffe70
 8007b54:	08012ed8 	.word	0x08012ed8
 8007b58:	08012f0c 	.word	0x08012f0c

08007b5c <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b5e:	b0e7      	sub	sp, #412	; 0x19c
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	0005      	movs	r5, r0
 8007b64:	000c      	movs	r4, r1
 8007b66:	0010      	movs	r0, r2
 8007b68:	0019      	movs	r1, r3
 8007b6a:	4b4b      	ldr	r3, [pc, #300]	; (8007c98 <astronode_send_cfg_wr+0x13c>)
 8007b6c:	26cc      	movs	r6, #204	; 0xcc
 8007b6e:	0076      	lsls	r6, r6, #1
 8007b70:	199b      	adds	r3, r3, r6
 8007b72:	19db      	adds	r3, r3, r7
 8007b74:	1c2a      	adds	r2, r5, #0
 8007b76:	701a      	strb	r2, [r3, #0]
 8007b78:	4b48      	ldr	r3, [pc, #288]	; (8007c9c <astronode_send_cfg_wr+0x140>)
 8007b7a:	0035      	movs	r5, r6
 8007b7c:	195b      	adds	r3, r3, r5
 8007b7e:	19db      	adds	r3, r3, r7
 8007b80:	1c22      	adds	r2, r4, #0
 8007b82:	701a      	strb	r2, [r3, #0]
 8007b84:	4b46      	ldr	r3, [pc, #280]	; (8007ca0 <astronode_send_cfg_wr+0x144>)
 8007b86:	002c      	movs	r4, r5
 8007b88:	191b      	adds	r3, r3, r4
 8007b8a:	19db      	adds	r3, r3, r7
 8007b8c:	1c02      	adds	r2, r0, #0
 8007b8e:	701a      	strb	r2, [r3, #0]
 8007b90:	4b44      	ldr	r3, [pc, #272]	; (8007ca4 <astronode_send_cfg_wr+0x148>)
 8007b92:	191b      	adds	r3, r3, r4
 8007b94:	19db      	adds	r3, r3, r7
 8007b96:	1c0a      	adds	r2, r1, #0
 8007b98:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007b9a:	25d0      	movs	r5, #208	; 0xd0
 8007b9c:	197b      	adds	r3, r7, r5
 8007b9e:	0018      	movs	r0, r3
 8007ba0:	23c6      	movs	r3, #198	; 0xc6
 8007ba2:	001a      	movs	r2, r3
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	f004 f8a3 	bl	800bcf0 <memset>
    astronode_app_msg_t answer = {0};
 8007baa:	4b3f      	ldr	r3, [pc, #252]	; (8007ca8 <astronode_send_cfg_wr+0x14c>)
 8007bac:	191b      	adds	r3, r3, r4
 8007bae:	19db      	adds	r3, r3, r7
 8007bb0:	0018      	movs	r0, r3
 8007bb2:	23c6      	movs	r3, #198	; 0xc6
 8007bb4:	001a      	movs	r2, r3
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	f004 f89a 	bl	800bcf0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007bbc:	0029      	movs	r1, r5
 8007bbe:	187b      	adds	r3, r7, r1
 8007bc0:	2205      	movs	r2, #5
 8007bc2:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007bc4:	4b34      	ldr	r3, [pc, #208]	; (8007c98 <astronode_send_cfg_wr+0x13c>)
 8007bc6:	191b      	adds	r3, r3, r4
 8007bc8:	19db      	adds	r3, r3, r7
 8007bca:	2200      	movs	r2, #0
 8007bcc:	569a      	ldrsb	r2, [r3, r2]
 8007bce:	4b33      	ldr	r3, [pc, #204]	; (8007c9c <astronode_send_cfg_wr+0x140>)
 8007bd0:	191b      	adds	r3, r3, r4
 8007bd2:	19db      	adds	r3, r3, r7
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	005b      	lsls	r3, r3, #1
 8007bd8:	b25b      	sxtb	r3, r3
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007bde:	4b30      	ldr	r3, [pc, #192]	; (8007ca0 <astronode_send_cfg_wr+0x144>)
 8007be0:	191b      	adds	r3, r3, r4
 8007be2:	19db      	adds	r3, r3, r7
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	b25b      	sxtb	r3, r3
 8007bea:	4313      	orrs	r3, r2
 8007bec:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007bee:	4b2d      	ldr	r3, [pc, #180]	; (8007ca4 <astronode_send_cfg_wr+0x148>)
 8007bf0:	191b      	adds	r3, r3, r4
 8007bf2:	19db      	adds	r3, r3, r7
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	b25b      	sxtb	r3, r3
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	b25b      	sxtb	r3, r3
 8007bfe:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007c00:	187b      	adds	r3, r7, r1
 8007c02:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007c04:	23d4      	movs	r3, #212	; 0xd4
 8007c06:	005b      	lsls	r3, r3, #1
 8007c08:	2508      	movs	r5, #8
 8007c0a:	195b      	adds	r3, r3, r5
 8007c0c:	19db      	adds	r3, r3, r7
 8007c0e:	2200      	movs	r2, #0
 8007c10:	569a      	ldrsb	r2, [r3, r2]
 8007c12:	23d6      	movs	r3, #214	; 0xd6
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	195b      	adds	r3, r3, r5
 8007c18:	19db      	adds	r3, r3, r7
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	005b      	lsls	r3, r3, #1
 8007c1e:	b25b      	sxtb	r3, r3
 8007c20:	4313      	orrs	r3, r2
 8007c22:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8007c24:	23d8      	movs	r3, #216	; 0xd8
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	195b      	adds	r3, r3, r5
 8007c2a:	19db      	adds	r3, r3, r7
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	b25b      	sxtb	r3, r3
 8007c32:	4313      	orrs	r3, r2
 8007c34:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8007c36:	23da      	movs	r3, #218	; 0xda
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	195b      	adds	r3, r3, r5
 8007c3c:	19db      	adds	r3, r3, r7
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	00db      	lsls	r3, r3, #3
 8007c42:	b25b      	sxtb	r3, r3
 8007c44:	4313      	orrs	r3, r2
 8007c46:	b25b      	sxtb	r3, r3
 8007c48:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007c4a:	187b      	adds	r3, r7, r1
 8007c4c:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007c4e:	0008      	movs	r0, r1
 8007c50:	187b      	adds	r3, r7, r1
 8007c52:	22c4      	movs	r2, #196	; 0xc4
 8007c54:	2103      	movs	r1, #3
 8007c56:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007c58:	002b      	movs	r3, r5
 8007c5a:	18fa      	adds	r2, r7, r3
 8007c5c:	183b      	adds	r3, r7, r0
 8007c5e:	0011      	movs	r1, r2
 8007c60:	0018      	movs	r0, r3
 8007c62:	f001 f9e9 	bl	8009038 <astronode_transport_send_receive>
 8007c66:	0003      	movs	r3, r0
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d10f      	bne.n	8007c8c <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007c6c:	4b0e      	ldr	r3, [pc, #56]	; (8007ca8 <astronode_send_cfg_wr+0x14c>)
 8007c6e:	191b      	adds	r3, r3, r4
 8007c70:	19db      	adds	r3, r3, r7
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	2b85      	cmp	r3, #133	; 0x85
 8007c76:	d105      	bne.n	8007c84 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007c78:	4b0c      	ldr	r3, [pc, #48]	; (8007cac <astronode_send_cfg_wr+0x150>)
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	f7fb facc 	bl	8003218 <send_debug_logs>
            return true ;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e004      	b.n	8007c8e <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007c84:	4b0a      	ldr	r3, [pc, #40]	; (8007cb0 <astronode_send_cfg_wr+0x154>)
 8007c86:	0018      	movs	r0, r3
 8007c88:	f7fb fac6 	bl	8003218 <send_debug_logs>
        }
    }
    return false ;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	0018      	movs	r0, r3
 8007c90:	46bd      	mov	sp, r7
 8007c92:	b067      	add	sp, #412	; 0x19c
 8007c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c96:	46c0      	nop			; (mov r8, r8)
 8007c98:	fffffe6f 	.word	0xfffffe6f
 8007c9c:	fffffe6e 	.word	0xfffffe6e
 8007ca0:	fffffe6d 	.word	0xfffffe6d
 8007ca4:	fffffe6c 	.word	0xfffffe6c
 8007ca8:	fffffe70 	.word	0xfffffe70
 8007cac:	08012f40 	.word	0x08012f40
 8007cb0:	08012f6c 	.word	0x08012f6c

08007cb4 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cb6:	b0ed      	sub	sp, #436	; 0x1b4
 8007cb8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007cba:	21c8      	movs	r1, #200	; 0xc8
 8007cbc:	2318      	movs	r3, #24
 8007cbe:	18cb      	adds	r3, r1, r3
 8007cc0:	19db      	adds	r3, r3, r7
 8007cc2:	0018      	movs	r0, r3
 8007cc4:	23c6      	movs	r3, #198	; 0xc6
 8007cc6:	001a      	movs	r2, r3
 8007cc8:	2100      	movs	r1, #0
 8007cca:	f004 f811 	bl	800bcf0 <memset>
    astronode_app_msg_t answer = {0};
 8007cce:	4b4a      	ldr	r3, [pc, #296]	; (8007df8 <astronode_send_mgi_rr+0x144>)
 8007cd0:	26cc      	movs	r6, #204	; 0xcc
 8007cd2:	0076      	lsls	r6, r6, #1
 8007cd4:	199b      	adds	r3, r3, r6
 8007cd6:	2218      	movs	r2, #24
 8007cd8:	4694      	mov	ip, r2
 8007cda:	44bc      	add	ip, r7
 8007cdc:	4463      	add	r3, ip
 8007cde:	0018      	movs	r0, r3
 8007ce0:	23c6      	movs	r3, #198	; 0xc6
 8007ce2:	001a      	movs	r2, r3
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	f004 f803 	bl	800bcf0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8007cea:	21c8      	movs	r1, #200	; 0xc8
 8007cec:	2318      	movs	r3, #24
 8007cee:	18cb      	adds	r3, r1, r3
 8007cf0:	19db      	adds	r3, r3, r7
 8007cf2:	2219      	movs	r2, #25
 8007cf4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007cf6:	2318      	movs	r3, #24
 8007cf8:	18fa      	adds	r2, r7, r3
 8007cfa:	2318      	movs	r3, #24
 8007cfc:	18cb      	adds	r3, r1, r3
 8007cfe:	19db      	adds	r3, r3, r7
 8007d00:	0011      	movs	r1, r2
 8007d02:	0018      	movs	r0, r3
 8007d04:	f001 f998 	bl	8009038 <astronode_transport_send_receive>
 8007d08:	0003      	movs	r3, r0
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d16f      	bne.n	8007dee <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007d0e:	4b3a      	ldr	r3, [pc, #232]	; (8007df8 <astronode_send_mgi_rr+0x144>)
 8007d10:	0032      	movs	r2, r6
 8007d12:	189b      	adds	r3, r3, r2
 8007d14:	2118      	movs	r1, #24
 8007d16:	468c      	mov	ip, r1
 8007d18:	44bc      	add	ip, r7
 8007d1a:	4463      	add	r3, ip
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2b99      	cmp	r3, #153	; 0x99
 8007d20:	d161      	bne.n	8007de6 <astronode_send_mgi_rr+0x132>
        {
 8007d22:	466b      	mov	r3, sp
 8007d24:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8007d26:	4b34      	ldr	r3, [pc, #208]	; (8007df8 <astronode_send_mgi_rr+0x144>)
 8007d28:	189b      	adds	r3, r3, r2
 8007d2a:	2218      	movs	r2, #24
 8007d2c:	4694      	mov	ip, r2
 8007d2e:	44bc      	add	ip, r7
 8007d30:	4463      	add	r3, ip
 8007d32:	22c4      	movs	r2, #196	; 0xc4
 8007d34:	5a9b      	ldrh	r3, [r3, r2]
 8007d36:	001a      	movs	r2, r3
 8007d38:	3a01      	subs	r2, #1
 8007d3a:	21ca      	movs	r1, #202	; 0xca
 8007d3c:	0049      	lsls	r1, r1, #1
 8007d3e:	2018      	movs	r0, #24
 8007d40:	1809      	adds	r1, r1, r0
 8007d42:	19c9      	adds	r1, r1, r7
 8007d44:	600a      	str	r2, [r1, #0]
 8007d46:	001c      	movs	r4, r3
 8007d48:	2200      	movs	r2, #0
 8007d4a:	0015      	movs	r5, r2
 8007d4c:	0020      	movs	r0, r4
 8007d4e:	0029      	movs	r1, r5
 8007d50:	0004      	movs	r4, r0
 8007d52:	0f62      	lsrs	r2, r4, #29
 8007d54:	000c      	movs	r4, r1
 8007d56:	00e4      	lsls	r4, r4, #3
 8007d58:	617c      	str	r4, [r7, #20]
 8007d5a:	697c      	ldr	r4, [r7, #20]
 8007d5c:	4314      	orrs	r4, r2
 8007d5e:	617c      	str	r4, [r7, #20]
 8007d60:	0001      	movs	r1, r0
 8007d62:	00c9      	lsls	r1, r1, #3
 8007d64:	6139      	str	r1, [r7, #16]
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	607a      	str	r2, [r7, #4]
 8007d6c:	6838      	ldr	r0, [r7, #0]
 8007d6e:	6879      	ldr	r1, [r7, #4]
 8007d70:	0004      	movs	r4, r0
 8007d72:	0f62      	lsrs	r2, r4, #29
 8007d74:	000c      	movs	r4, r1
 8007d76:	00e4      	lsls	r4, r4, #3
 8007d78:	60fc      	str	r4, [r7, #12]
 8007d7a:	68fc      	ldr	r4, [r7, #12]
 8007d7c:	4314      	orrs	r4, r2
 8007d7e:	60fc      	str	r4, [r7, #12]
 8007d80:	0001      	movs	r1, r0
 8007d82:	00ca      	lsls	r2, r1, #3
 8007d84:	60ba      	str	r2, [r7, #8]
 8007d86:	3307      	adds	r3, #7
 8007d88:	08db      	lsrs	r3, r3, #3
 8007d8a:	00db      	lsls	r3, r3, #3
 8007d8c:	4669      	mov	r1, sp
 8007d8e:	1acb      	subs	r3, r1, r3
 8007d90:	469d      	mov	sp, r3
 8007d92:	466b      	mov	r3, sp
 8007d94:	3300      	adds	r3, #0
 8007d96:	24c8      	movs	r4, #200	; 0xc8
 8007d98:	0064      	lsls	r4, r4, #1
 8007d9a:	2218      	movs	r2, #24
 8007d9c:	18a2      	adds	r2, r4, r2
 8007d9e:	19d1      	adds	r1, r2, r7
 8007da0:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8007da2:	4b16      	ldr	r3, [pc, #88]	; (8007dfc <astronode_send_mgi_rr+0x148>)
 8007da4:	0018      	movs	r0, r3
 8007da6:	f7fb fa37 	bl	8003218 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8007daa:	4b13      	ldr	r3, [pc, #76]	; (8007df8 <astronode_send_mgi_rr+0x144>)
 8007dac:	22cc      	movs	r2, #204	; 0xcc
 8007dae:	0052      	lsls	r2, r2, #1
 8007db0:	189b      	adds	r3, r3, r2
 8007db2:	2218      	movs	r2, #24
 8007db4:	4694      	mov	ip, r2
 8007db6:	44bc      	add	ip, r7
 8007db8:	4463      	add	r3, ip
 8007dba:	22c4      	movs	r2, #196	; 0xc4
 8007dbc:	5a9b      	ldrh	r3, [r3, r2]
 8007dbe:	0019      	movs	r1, r3
 8007dc0:	2318      	movs	r3, #24
 8007dc2:	18fb      	adds	r3, r7, r3
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	4a0e      	ldr	r2, [pc, #56]	; (8007e00 <astronode_send_mgi_rr+0x14c>)
 8007dc8:	2018      	movs	r0, #24
 8007dca:	1820      	adds	r0, r4, r0
 8007dcc:	19c0      	adds	r0, r0, r7
 8007dce:	6800      	ldr	r0, [r0, #0]
 8007dd0:	f003 fec4 	bl	800bb5c <snprintf>
            send_debug_logs(guid);
 8007dd4:	2318      	movs	r3, #24
 8007dd6:	18e3      	adds	r3, r4, r3
 8007dd8:	19db      	adds	r3, r3, r7
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	0018      	movs	r0, r3
 8007dde:	f7fb fa1b 	bl	8003218 <send_debug_logs>
 8007de2:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007de4:	e003      	b.n	8007dee <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8007de6:	4b07      	ldr	r3, [pc, #28]	; (8007e04 <astronode_send_mgi_rr+0x150>)
 8007de8:	0018      	movs	r0, r3
 8007dea:	f7fb fa15 	bl	8003218 <send_debug_logs>
}
 8007dee:	46c0      	nop			; (mov r8, r8)
 8007df0:	46bd      	mov	sp, r7
 8007df2:	b06d      	add	sp, #436	; 0x1b4
 8007df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007df6:	46c0      	nop			; (mov r8, r8)
 8007df8:	fffffe68 	.word	0xfffffe68
 8007dfc:	08012ff8 	.word	0x08012ff8
 8007e00:	08013008 	.word	0x08013008
 8007e04:	0801300c 	.word	0x0801300c

08007e08 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8007e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e0a:	b0ed      	sub	sp, #436	; 0x1b4
 8007e0c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007e0e:	21c8      	movs	r1, #200	; 0xc8
 8007e10:	2318      	movs	r3, #24
 8007e12:	18cb      	adds	r3, r1, r3
 8007e14:	19db      	adds	r3, r3, r7
 8007e16:	0018      	movs	r0, r3
 8007e18:	23c6      	movs	r3, #198	; 0xc6
 8007e1a:	001a      	movs	r2, r3
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	f003 ff67 	bl	800bcf0 <memset>
    astronode_app_msg_t answer = {0};
 8007e22:	4b4a      	ldr	r3, [pc, #296]	; (8007f4c <astronode_send_msn_rr+0x144>)
 8007e24:	26cc      	movs	r6, #204	; 0xcc
 8007e26:	0076      	lsls	r6, r6, #1
 8007e28:	199b      	adds	r3, r3, r6
 8007e2a:	2218      	movs	r2, #24
 8007e2c:	4694      	mov	ip, r2
 8007e2e:	44bc      	add	ip, r7
 8007e30:	4463      	add	r3, ip
 8007e32:	0018      	movs	r0, r3
 8007e34:	23c6      	movs	r3, #198	; 0xc6
 8007e36:	001a      	movs	r2, r3
 8007e38:	2100      	movs	r1, #0
 8007e3a:	f003 ff59 	bl	800bcf0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8007e3e:	21c8      	movs	r1, #200	; 0xc8
 8007e40:	2318      	movs	r3, #24
 8007e42:	18cb      	adds	r3, r1, r3
 8007e44:	19db      	adds	r3, r3, r7
 8007e46:	221a      	movs	r2, #26
 8007e48:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007e4a:	2318      	movs	r3, #24
 8007e4c:	18fa      	adds	r2, r7, r3
 8007e4e:	2318      	movs	r3, #24
 8007e50:	18cb      	adds	r3, r1, r3
 8007e52:	19db      	adds	r3, r3, r7
 8007e54:	0011      	movs	r1, r2
 8007e56:	0018      	movs	r0, r3
 8007e58:	f001 f8ee 	bl	8009038 <astronode_transport_send_receive>
 8007e5c:	0003      	movs	r3, r0
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d16f      	bne.n	8007f42 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8007e62:	4b3a      	ldr	r3, [pc, #232]	; (8007f4c <astronode_send_msn_rr+0x144>)
 8007e64:	0032      	movs	r2, r6
 8007e66:	189b      	adds	r3, r3, r2
 8007e68:	2118      	movs	r1, #24
 8007e6a:	468c      	mov	ip, r1
 8007e6c:	44bc      	add	ip, r7
 8007e6e:	4463      	add	r3, ip
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	2b9a      	cmp	r3, #154	; 0x9a
 8007e74:	d161      	bne.n	8007f3a <astronode_send_msn_rr+0x132>
        {
 8007e76:	466b      	mov	r3, sp
 8007e78:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8007e7a:	4b34      	ldr	r3, [pc, #208]	; (8007f4c <astronode_send_msn_rr+0x144>)
 8007e7c:	189b      	adds	r3, r3, r2
 8007e7e:	2218      	movs	r2, #24
 8007e80:	4694      	mov	ip, r2
 8007e82:	44bc      	add	ip, r7
 8007e84:	4463      	add	r3, ip
 8007e86:	22c4      	movs	r2, #196	; 0xc4
 8007e88:	5a9b      	ldrh	r3, [r3, r2]
 8007e8a:	001a      	movs	r2, r3
 8007e8c:	3a01      	subs	r2, #1
 8007e8e:	21ca      	movs	r1, #202	; 0xca
 8007e90:	0049      	lsls	r1, r1, #1
 8007e92:	2018      	movs	r0, #24
 8007e94:	1809      	adds	r1, r1, r0
 8007e96:	19c9      	adds	r1, r1, r7
 8007e98:	600a      	str	r2, [r1, #0]
 8007e9a:	001c      	movs	r4, r3
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	0015      	movs	r5, r2
 8007ea0:	0020      	movs	r0, r4
 8007ea2:	0029      	movs	r1, r5
 8007ea4:	0004      	movs	r4, r0
 8007ea6:	0f62      	lsrs	r2, r4, #29
 8007ea8:	000c      	movs	r4, r1
 8007eaa:	00e4      	lsls	r4, r4, #3
 8007eac:	617c      	str	r4, [r7, #20]
 8007eae:	697c      	ldr	r4, [r7, #20]
 8007eb0:	4314      	orrs	r4, r2
 8007eb2:	617c      	str	r4, [r7, #20]
 8007eb4:	0001      	movs	r1, r0
 8007eb6:	00c9      	lsls	r1, r1, #3
 8007eb8:	6139      	str	r1, [r7, #16]
 8007eba:	603b      	str	r3, [r7, #0]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	6838      	ldr	r0, [r7, #0]
 8007ec2:	6879      	ldr	r1, [r7, #4]
 8007ec4:	0004      	movs	r4, r0
 8007ec6:	0f62      	lsrs	r2, r4, #29
 8007ec8:	000c      	movs	r4, r1
 8007eca:	00e4      	lsls	r4, r4, #3
 8007ecc:	60fc      	str	r4, [r7, #12]
 8007ece:	68fc      	ldr	r4, [r7, #12]
 8007ed0:	4314      	orrs	r4, r2
 8007ed2:	60fc      	str	r4, [r7, #12]
 8007ed4:	0001      	movs	r1, r0
 8007ed6:	00ca      	lsls	r2, r1, #3
 8007ed8:	60ba      	str	r2, [r7, #8]
 8007eda:	3307      	adds	r3, #7
 8007edc:	08db      	lsrs	r3, r3, #3
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	4669      	mov	r1, sp
 8007ee2:	1acb      	subs	r3, r1, r3
 8007ee4:	469d      	mov	sp, r3
 8007ee6:	466b      	mov	r3, sp
 8007ee8:	3300      	adds	r3, #0
 8007eea:	24c8      	movs	r4, #200	; 0xc8
 8007eec:	0064      	lsls	r4, r4, #1
 8007eee:	2218      	movs	r2, #24
 8007ef0:	18a2      	adds	r2, r4, r2
 8007ef2:	19d1      	adds	r1, r2, r7
 8007ef4:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8007ef6:	4b16      	ldr	r3, [pc, #88]	; (8007f50 <astronode_send_msn_rr+0x148>)
 8007ef8:	0018      	movs	r0, r3
 8007efa:	f7fb f98d 	bl	8003218 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8007efe:	4b13      	ldr	r3, [pc, #76]	; (8007f4c <astronode_send_msn_rr+0x144>)
 8007f00:	22cc      	movs	r2, #204	; 0xcc
 8007f02:	0052      	lsls	r2, r2, #1
 8007f04:	189b      	adds	r3, r3, r2
 8007f06:	2218      	movs	r2, #24
 8007f08:	4694      	mov	ip, r2
 8007f0a:	44bc      	add	ip, r7
 8007f0c:	4463      	add	r3, ip
 8007f0e:	22c4      	movs	r2, #196	; 0xc4
 8007f10:	5a9b      	ldrh	r3, [r3, r2]
 8007f12:	0019      	movs	r1, r3
 8007f14:	2318      	movs	r3, #24
 8007f16:	18fb      	adds	r3, r7, r3
 8007f18:	3301      	adds	r3, #1
 8007f1a:	4a0e      	ldr	r2, [pc, #56]	; (8007f54 <astronode_send_msn_rr+0x14c>)
 8007f1c:	2018      	movs	r0, #24
 8007f1e:	1820      	adds	r0, r4, r0
 8007f20:	19c0      	adds	r0, r0, r7
 8007f22:	6800      	ldr	r0, [r0, #0]
 8007f24:	f003 fe1a 	bl	800bb5c <snprintf>
            send_debug_logs(serial_number);
 8007f28:	2318      	movs	r3, #24
 8007f2a:	18e3      	adds	r3, r4, r3
 8007f2c:	19db      	adds	r3, r3, r7
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	0018      	movs	r0, r3
 8007f32:	f7fb f971 	bl	8003218 <send_debug_logs>
 8007f36:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007f38:	e003      	b.n	8007f42 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007f3a:	4b07      	ldr	r3, [pc, #28]	; (8007f58 <astronode_send_msn_rr+0x150>)
 8007f3c:	0018      	movs	r0, r3
 8007f3e:	f7fb f96b 	bl	8003218 <send_debug_logs>
}
 8007f42:	46c0      	nop			; (mov r8, r8)
 8007f44:	46bd      	mov	sp, r7
 8007f46:	b06d      	add	sp, #436	; 0x1b4
 8007f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f4a:	46c0      	nop			; (mov r8, r8)
 8007f4c:	fffffe68 	.word	0xfffffe68
 8007f50:	08013028 	.word	0x08013028
 8007f54:	08013008 	.word	0x08013008
 8007f58:	08013044 	.word	0x08013044

08007f5c <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 8007f5c:	b5b0      	push	{r4, r5, r7, lr}
 8007f5e:	b0e4      	sub	sp, #400	; 0x190
 8007f60:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007f62:	24c8      	movs	r4, #200	; 0xc8
 8007f64:	193b      	adds	r3, r7, r4
 8007f66:	0018      	movs	r0, r3
 8007f68:	23c6      	movs	r3, #198	; 0xc6
 8007f6a:	001a      	movs	r2, r3
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	f003 febf 	bl	800bcf0 <memset>
    astronode_app_msg_t answer = {0};
 8007f72:	4b31      	ldr	r3, [pc, #196]	; (8008038 <astronode_send_evt_rr+0xdc>)
 8007f74:	25c8      	movs	r5, #200	; 0xc8
 8007f76:	006d      	lsls	r5, r5, #1
 8007f78:	195b      	adds	r3, r3, r5
 8007f7a:	19db      	adds	r3, r3, r7
 8007f7c:	0018      	movs	r0, r3
 8007f7e:	23c6      	movs	r3, #198	; 0xc6
 8007f80:	001a      	movs	r2, r3
 8007f82:	2100      	movs	r1, #0
 8007f84:	f003 feb4 	bl	800bcf0 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8007f88:	193b      	adds	r3, r7, r4
 8007f8a:	2265      	movs	r2, #101	; 0x65
 8007f8c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007f8e:	003a      	movs	r2, r7
 8007f90:	193b      	adds	r3, r7, r4
 8007f92:	0011      	movs	r1, r2
 8007f94:	0018      	movs	r0, r3
 8007f96:	f001 f84f 	bl	8009038 <astronode_transport_send_receive>
 8007f9a:	0003      	movs	r3, r0
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d147      	bne.n	8008030 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8007fa0:	4b25      	ldr	r3, [pc, #148]	; (8008038 <astronode_send_evt_rr+0xdc>)
 8007fa2:	195b      	adds	r3, r3, r5
 8007fa4:	19db      	adds	r3, r3, r7
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2be5      	cmp	r3, #229	; 0xe5
 8007faa:	d141      	bne.n	8008030 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8007fac:	4b22      	ldr	r3, [pc, #136]	; (8008038 <astronode_send_evt_rr+0xdc>)
 8007fae:	195b      	adds	r3, r3, r5
 8007fb0:	19db      	adds	r3, r3, r7
 8007fb2:	785b      	ldrb	r3, [r3, #1]
 8007fb4:	001a      	movs	r2, r3
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	4013      	ands	r3, r2
 8007fba:	d006      	beq.n	8007fca <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8007fbc:	4b1f      	ldr	r3, [pc, #124]	; (800803c <astronode_send_evt_rr+0xe0>)
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8007fc2:	4b1f      	ldr	r3, [pc, #124]	; (8008040 <astronode_send_evt_rr+0xe4>)
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	f7fb f927 	bl	8003218 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8007fca:	4b1b      	ldr	r3, [pc, #108]	; (8008038 <astronode_send_evt_rr+0xdc>)
 8007fcc:	22c8      	movs	r2, #200	; 0xc8
 8007fce:	0052      	lsls	r2, r2, #1
 8007fd0:	189b      	adds	r3, r3, r2
 8007fd2:	19db      	adds	r3, r3, r7
 8007fd4:	785b      	ldrb	r3, [r3, #1]
 8007fd6:	001a      	movs	r2, r3
 8007fd8:	2302      	movs	r3, #2
 8007fda:	4013      	ands	r3, r2
 8007fdc:	d006      	beq.n	8007fec <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8007fde:	4b19      	ldr	r3, [pc, #100]	; (8008044 <astronode_send_evt_rr+0xe8>)
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8007fe4:	4b18      	ldr	r3, [pc, #96]	; (8008048 <astronode_send_evt_rr+0xec>)
 8007fe6:	0018      	movs	r0, r3
 8007fe8:	f7fb f916 	bl	8003218 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8007fec:	4b12      	ldr	r3, [pc, #72]	; (8008038 <astronode_send_evt_rr+0xdc>)
 8007fee:	22c8      	movs	r2, #200	; 0xc8
 8007ff0:	0052      	lsls	r2, r2, #1
 8007ff2:	189b      	adds	r3, r3, r2
 8007ff4:	19db      	adds	r3, r3, r7
 8007ff6:	785b      	ldrb	r3, [r3, #1]
 8007ff8:	001a      	movs	r2, r3
 8007ffa:	2304      	movs	r3, #4
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	d006      	beq.n	800800e <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8008000:	4b12      	ldr	r3, [pc, #72]	; (800804c <astronode_send_evt_rr+0xf0>)
 8008002:	2201      	movs	r2, #1
 8008004:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8008006:	4b12      	ldr	r3, [pc, #72]	; (8008050 <astronode_send_evt_rr+0xf4>)
 8008008:	0018      	movs	r0, r3
 800800a:	f7fb f905 	bl	8003218 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 800800e:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <astronode_send_evt_rr+0xdc>)
 8008010:	22c8      	movs	r2, #200	; 0xc8
 8008012:	0052      	lsls	r2, r2, #1
 8008014:	189b      	adds	r3, r3, r2
 8008016:	19db      	adds	r3, r3, r7
 8008018:	785b      	ldrb	r3, [r3, #1]
 800801a:	001a      	movs	r2, r3
 800801c:	2308      	movs	r3, #8
 800801e:	4013      	ands	r3, r2
 8008020:	d006      	beq.n	8008030 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8008022:	4b0c      	ldr	r3, [pc, #48]	; (8008054 <astronode_send_evt_rr+0xf8>)
 8008024:	2201      	movs	r2, #1
 8008026:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8008028:	4b0b      	ldr	r3, [pc, #44]	; (8008058 <astronode_send_evt_rr+0xfc>)
 800802a:	0018      	movs	r0, r3
 800802c:	f7fb f8f4 	bl	8003218 <send_debug_logs>
            }

        }
    }
}
 8008030:	46c0      	nop			; (mov r8, r8)
 8008032:	46bd      	mov	sp, r7
 8008034:	b064      	add	sp, #400	; 0x190
 8008036:	bdb0      	pop	{r4, r5, r7, pc}
 8008038:	fffffe70 	.word	0xfffffe70
 800803c:	20000b04 	.word	0x20000b04
 8008040:	080130ec 	.word	0x080130ec
 8008044:	20000b05 	.word	0x20000b05
 8008048:	08013110 	.word	0x08013110
 800804c:	20000b06 	.word	0x20000b06
 8008050:	08013128 	.word	0x08013128
 8008054:	20000b07 	.word	0x20000b07
 8008058:	0801313c 	.word	0x0801313c

0800805c <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 800805c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800805e:	b0e7      	sub	sp, #412	; 0x19c
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 8008066:	24d0      	movs	r4, #208	; 0xd0
 8008068:	193b      	adds	r3, r7, r4
 800806a:	0018      	movs	r0, r3
 800806c:	23c6      	movs	r3, #198	; 0xc6
 800806e:	001a      	movs	r2, r3
 8008070:	2100      	movs	r1, #0
 8008072:	f003 fe3d 	bl	800bcf0 <memset>
    astronode_app_msg_t answer = {0};
 8008076:	4b56      	ldr	r3, [pc, #344]	; (80081d0 <astronode_send_geo_wr+0x174>)
 8008078:	26cc      	movs	r6, #204	; 0xcc
 800807a:	0076      	lsls	r6, r6, #1
 800807c:	199b      	adds	r3, r3, r6
 800807e:	19db      	adds	r3, r3, r7
 8008080:	0018      	movs	r0, r3
 8008082:	23c6      	movs	r3, #198	; 0xc6
 8008084:	001a      	movs	r2, r3
 8008086:	2100      	movs	r1, #0
 8008088:	f003 fe32 	bl	800bcf0 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 800808c:	193b      	adds	r3, r7, r4
 800808e:	2235      	movs	r2, #53	; 0x35
 8008090:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 8008092:	193b      	adds	r3, r7, r4
 8008094:	22c4      	movs	r2, #196	; 0xc4
 8008096:	5a9b      	ldrh	r3, [r3, r2]
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	b290      	uxth	r0, r2
 800809c:	193a      	adds	r2, r7, r4
 800809e:	21c4      	movs	r1, #196	; 0xc4
 80080a0:	5250      	strh	r0, [r2, r1]
 80080a2:	0019      	movs	r1, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	193b      	adds	r3, r7, r4
 80080aa:	185b      	adds	r3, r3, r1
 80080ac:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	1218      	asrs	r0, r3, #8
 80080b2:	0025      	movs	r5, r4
 80080b4:	197b      	adds	r3, r7, r5
 80080b6:	22c4      	movs	r2, #196	; 0xc4
 80080b8:	5a9b      	ldrh	r3, [r3, r2]
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	b294      	uxth	r4, r2
 80080be:	197a      	adds	r2, r7, r5
 80080c0:	21c4      	movs	r1, #196	; 0xc4
 80080c2:	5254      	strh	r4, [r2, r1]
 80080c4:	0019      	movs	r1, r3
 80080c6:	b2c2      	uxtb	r2, r0
 80080c8:	002c      	movs	r4, r5
 80080ca:	193b      	adds	r3, r7, r4
 80080cc:	185b      	adds	r3, r3, r1
 80080ce:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	1418      	asrs	r0, r3, #16
 80080d4:	0025      	movs	r5, r4
 80080d6:	197b      	adds	r3, r7, r5
 80080d8:	22c4      	movs	r2, #196	; 0xc4
 80080da:	5a9b      	ldrh	r3, [r3, r2]
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	b294      	uxth	r4, r2
 80080e0:	197a      	adds	r2, r7, r5
 80080e2:	21c4      	movs	r1, #196	; 0xc4
 80080e4:	5254      	strh	r4, [r2, r1]
 80080e6:	0019      	movs	r1, r3
 80080e8:	b2c2      	uxtb	r2, r0
 80080ea:	002c      	movs	r4, r5
 80080ec:	193b      	adds	r3, r7, r4
 80080ee:	185b      	adds	r3, r3, r1
 80080f0:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	1618      	asrs	r0, r3, #24
 80080f6:	0025      	movs	r5, r4
 80080f8:	197b      	adds	r3, r7, r5
 80080fa:	22c4      	movs	r2, #196	; 0xc4
 80080fc:	5a9b      	ldrh	r3, [r3, r2]
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	b294      	uxth	r4, r2
 8008102:	197a      	adds	r2, r7, r5
 8008104:	21c4      	movs	r1, #196	; 0xc4
 8008106:	5254      	strh	r4, [r2, r1]
 8008108:	0019      	movs	r1, r3
 800810a:	b2c2      	uxtb	r2, r0
 800810c:	002c      	movs	r4, r5
 800810e:	193b      	adds	r3, r7, r4
 8008110:	185b      	adds	r3, r3, r1
 8008112:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8008114:	193b      	adds	r3, r7, r4
 8008116:	22c4      	movs	r2, #196	; 0xc4
 8008118:	5a9b      	ldrh	r3, [r3, r2]
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	b290      	uxth	r0, r2
 800811e:	193a      	adds	r2, r7, r4
 8008120:	21c4      	movs	r1, #196	; 0xc4
 8008122:	5250      	strh	r0, [r2, r1]
 8008124:	0019      	movs	r1, r3
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	b2da      	uxtb	r2, r3
 800812a:	193b      	adds	r3, r7, r4
 800812c:	185b      	adds	r3, r3, r1
 800812e:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	1218      	asrs	r0, r3, #8
 8008134:	0025      	movs	r5, r4
 8008136:	197b      	adds	r3, r7, r5
 8008138:	22c4      	movs	r2, #196	; 0xc4
 800813a:	5a9b      	ldrh	r3, [r3, r2]
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	b294      	uxth	r4, r2
 8008140:	197a      	adds	r2, r7, r5
 8008142:	21c4      	movs	r1, #196	; 0xc4
 8008144:	5254      	strh	r4, [r2, r1]
 8008146:	0019      	movs	r1, r3
 8008148:	b2c2      	uxtb	r2, r0
 800814a:	002c      	movs	r4, r5
 800814c:	193b      	adds	r3, r7, r4
 800814e:	185b      	adds	r3, r3, r1
 8008150:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	1418      	asrs	r0, r3, #16
 8008156:	0025      	movs	r5, r4
 8008158:	197b      	adds	r3, r7, r5
 800815a:	22c4      	movs	r2, #196	; 0xc4
 800815c:	5a9b      	ldrh	r3, [r3, r2]
 800815e:	1c5a      	adds	r2, r3, #1
 8008160:	b294      	uxth	r4, r2
 8008162:	197a      	adds	r2, r7, r5
 8008164:	21c4      	movs	r1, #196	; 0xc4
 8008166:	5254      	strh	r4, [r2, r1]
 8008168:	0019      	movs	r1, r3
 800816a:	b2c2      	uxtb	r2, r0
 800816c:	002c      	movs	r4, r5
 800816e:	193b      	adds	r3, r7, r4
 8008170:	185b      	adds	r3, r3, r1
 8008172:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	1618      	asrs	r0, r3, #24
 8008178:	0025      	movs	r5, r4
 800817a:	197b      	adds	r3, r7, r5
 800817c:	22c4      	movs	r2, #196	; 0xc4
 800817e:	5a9b      	ldrh	r3, [r3, r2]
 8008180:	1c5a      	adds	r2, r3, #1
 8008182:	b294      	uxth	r4, r2
 8008184:	197a      	adds	r2, r7, r5
 8008186:	21c4      	movs	r1, #196	; 0xc4
 8008188:	5254      	strh	r4, [r2, r1]
 800818a:	0019      	movs	r1, r3
 800818c:	b2c2      	uxtb	r2, r0
 800818e:	0028      	movs	r0, r5
 8008190:	183b      	adds	r3, r7, r0
 8008192:	185b      	adds	r3, r3, r1
 8008194:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008196:	2308      	movs	r3, #8
 8008198:	18fa      	adds	r2, r7, r3
 800819a:	183b      	adds	r3, r7, r0
 800819c:	0011      	movs	r1, r2
 800819e:	0018      	movs	r0, r3
 80081a0:	f000 ff4a 	bl	8009038 <astronode_transport_send_receive>
 80081a4:	0003      	movs	r3, r0
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d10e      	bne.n	80081c8 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 80081aa:	4b09      	ldr	r3, [pc, #36]	; (80081d0 <astronode_send_geo_wr+0x174>)
 80081ac:	199b      	adds	r3, r3, r6
 80081ae:	19db      	adds	r3, r3, r7
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	2bb5      	cmp	r3, #181	; 0xb5
 80081b4:	d104      	bne.n	80081c0 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 80081b6:	4b07      	ldr	r3, [pc, #28]	; (80081d4 <astronode_send_geo_wr+0x178>)
 80081b8:	0018      	movs	r0, r3
 80081ba:	f7fb f82d 	bl	8003218 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 80081be:	e003      	b.n	80081c8 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 80081c0:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <astronode_send_geo_wr+0x17c>)
 80081c2:	0018      	movs	r0, r3
 80081c4:	f7fb f828 	bl	8003218 <send_debug_logs>
}
 80081c8:	46c0      	nop			; (mov r8, r8)
 80081ca:	46bd      	mov	sp, r7
 80081cc:	b067      	add	sp, #412	; 0x19c
 80081ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081d0:	fffffe70 	.word	0xfffffe70
 80081d4:	08013150 	.word	0x08013150
 80081d8:	0801317c 	.word	0x0801317c

080081dc <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 80081dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081de:	b0fd      	sub	sp, #500	; 0x1f4
 80081e0:	af02      	add	r7, sp, #8
 80081e2:	6039      	str	r1, [r7, #0]
 80081e4:	0011      	movs	r1, r2
 80081e6:	4b4c      	ldr	r3, [pc, #304]	; (8008318 <astronode_send_pld_er+0x13c>)
 80081e8:	26f4      	movs	r6, #244	; 0xf4
 80081ea:	0076      	lsls	r6, r6, #1
 80081ec:	199b      	adds	r3, r3, r6
 80081ee:	19db      	adds	r3, r3, r7
 80081f0:	1c02      	adds	r2, r0, #0
 80081f2:	801a      	strh	r2, [r3, #0]
 80081f4:	4b49      	ldr	r3, [pc, #292]	; (800831c <astronode_send_pld_er+0x140>)
 80081f6:	199b      	adds	r3, r3, r6
 80081f8:	19db      	adds	r3, r3, r7
 80081fa:	1c0a      	adds	r2, r1, #0
 80081fc:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80081fe:	2490      	movs	r4, #144	; 0x90
 8008200:	0064      	lsls	r4, r4, #1
 8008202:	193b      	adds	r3, r7, r4
 8008204:	0018      	movs	r0, r3
 8008206:	23c6      	movs	r3, #198	; 0xc6
 8008208:	001a      	movs	r2, r3
 800820a:	2100      	movs	r1, #0
 800820c:	f003 fd70 	bl	800bcf0 <memset>
    astronode_app_msg_t answer = {0};
 8008210:	4b43      	ldr	r3, [pc, #268]	; (8008320 <astronode_send_pld_er+0x144>)
 8008212:	199b      	adds	r3, r3, r6
 8008214:	19db      	adds	r3, r3, r7
 8008216:	0018      	movs	r0, r3
 8008218:	23c6      	movs	r3, #198	; 0xc6
 800821a:	001a      	movs	r2, r3
 800821c:	2100      	movs	r1, #0
 800821e:	f003 fd67 	bl	800bcf0 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 8008222:	193b      	adds	r3, r7, r4
 8008224:	2225      	movs	r2, #37	; 0x25
 8008226:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 8008228:	193b      	adds	r3, r7, r4
 800822a:	22c4      	movs	r2, #196	; 0xc4
 800822c:	5a9b      	ldrh	r3, [r3, r2]
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	b290      	uxth	r0, r2
 8008232:	193a      	adds	r2, r7, r4
 8008234:	21c4      	movs	r1, #196	; 0xc4
 8008236:	5250      	strh	r0, [r2, r1]
 8008238:	0019      	movs	r1, r3
 800823a:	4b37      	ldr	r3, [pc, #220]	; (8008318 <astronode_send_pld_er+0x13c>)
 800823c:	199b      	adds	r3, r3, r6
 800823e:	19db      	adds	r3, r3, r7
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	b2da      	uxtb	r2, r3
 8008244:	193b      	adds	r3, r7, r4
 8008246:	185b      	adds	r3, r3, r1
 8008248:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 800824a:	4b33      	ldr	r3, [pc, #204]	; (8008318 <astronode_send_pld_er+0x13c>)
 800824c:	199b      	adds	r3, r3, r6
 800824e:	19db      	adds	r3, r3, r7
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	0a1b      	lsrs	r3, r3, #8
 8008254:	b298      	uxth	r0, r3
 8008256:	0025      	movs	r5, r4
 8008258:	197b      	adds	r3, r7, r5
 800825a:	22c4      	movs	r2, #196	; 0xc4
 800825c:	5a9b      	ldrh	r3, [r3, r2]
 800825e:	1c5a      	adds	r2, r3, #1
 8008260:	b294      	uxth	r4, r2
 8008262:	197a      	adds	r2, r7, r5
 8008264:	21c4      	movs	r1, #196	; 0xc4
 8008266:	5254      	strh	r4, [r2, r1]
 8008268:	0019      	movs	r1, r3
 800826a:	b2c2      	uxtb	r2, r0
 800826c:	002c      	movs	r4, r5
 800826e:	193b      	adds	r3, r7, r4
 8008270:	185b      	adds	r3, r3, r1
 8008272:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 8008274:	193b      	adds	r3, r7, r4
 8008276:	22c4      	movs	r2, #196	; 0xc4
 8008278:	5a9b      	ldrh	r3, [r3, r2]
 800827a:	001a      	movs	r2, r3
 800827c:	193b      	adds	r3, r7, r4
 800827e:	189b      	adds	r3, r3, r2
 8008280:	1c58      	adds	r0, r3, #1
 8008282:	4b26      	ldr	r3, [pc, #152]	; (800831c <astronode_send_pld_er+0x140>)
 8008284:	199b      	adds	r3, r3, r6
 8008286:	19db      	adds	r3, r3, r7
 8008288:	881a      	ldrh	r2, [r3, #0]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	0019      	movs	r1, r3
 800828e:	f003 fe48 	bl	800bf22 <memcpy>
    request.payload_len = 2 + payload_length;
 8008292:	4b22      	ldr	r3, [pc, #136]	; (800831c <astronode_send_pld_er+0x140>)
 8008294:	199b      	adds	r3, r3, r6
 8008296:	19db      	adds	r3, r3, r7
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	3302      	adds	r3, #2
 800829c:	b299      	uxth	r1, r3
 800829e:	193b      	adds	r3, r7, r4
 80082a0:	22c4      	movs	r2, #196	; 0xc4
 80082a2:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80082a4:	2358      	movs	r3, #88	; 0x58
 80082a6:	18fa      	adds	r2, r7, r3
 80082a8:	193b      	adds	r3, r7, r4
 80082aa:	0011      	movs	r1, r2
 80082ac:	0018      	movs	r0, r3
 80082ae:	f000 fec3 	bl	8009038 <astronode_transport_send_receive>
 80082b2:	0003      	movs	r3, r0
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d12a      	bne.n	800830e <astronode_send_pld_er+0x132>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 80082b8:	4b19      	ldr	r3, [pc, #100]	; (8008320 <astronode_send_pld_er+0x144>)
 80082ba:	199b      	adds	r3, r3, r6
 80082bc:	19db      	adds	r3, r3, r7
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	2ba5      	cmp	r3, #165	; 0xa5
 80082c2:	d114      	bne.n	80082ee <astronode_send_pld_er+0x112>
        {
        	sprintf ( s , "%s,%d,payload_id:%d queued." , __FILE__ , __LINE__ , payload_id ) ;
 80082c4:	4b14      	ldr	r3, [pc, #80]	; (8008318 <astronode_send_pld_er+0x13c>)
 80082c6:	199b      	adds	r3, r3, r6
 80082c8:	19db      	adds	r3, r3, r7
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	22ea      	movs	r2, #234	; 0xea
 80082ce:	32ff      	adds	r2, #255	; 0xff
 80082d0:	0014      	movs	r4, r2
 80082d2:	4a14      	ldr	r2, [pc, #80]	; (8008324 <astronode_send_pld_er+0x148>)
 80082d4:	4914      	ldr	r1, [pc, #80]	; (8008328 <astronode_send_pld_er+0x14c>)
 80082d6:	2508      	movs	r5, #8
 80082d8:	1978      	adds	r0, r7, r5
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	0023      	movs	r3, r4
 80082de:	f003 fc71 	bl	800bbc4 <sprintf>
            send_debug_logs ( s ) ;
 80082e2:	197b      	adds	r3, r7, r5
 80082e4:	0018      	movs	r0, r3
 80082e6:	f7fa ff97 	bl	8003218 <send_debug_logs>
            return true ;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e010      	b.n	8008310 <astronode_send_pld_er+0x134>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 80082ee:	4b0a      	ldr	r3, [pc, #40]	; (8008318 <astronode_send_pld_er+0x13c>)
 80082f0:	22f4      	movs	r2, #244	; 0xf4
 80082f2:	0052      	lsls	r2, r2, #1
 80082f4:	189b      	adds	r3, r3, r2
 80082f6:	19db      	adds	r3, r3, r7
 80082f8:	881a      	ldrh	r2, [r3, #0]
 80082fa:	490c      	ldr	r1, [pc, #48]	; (800832c <astronode_send_pld_er+0x150>)
 80082fc:	2408      	movs	r4, #8
 80082fe:	193b      	adds	r3, r7, r4
 8008300:	0018      	movs	r0, r3
 8008302:	f003 fc5f 	bl	800bbc4 <sprintf>
            send_debug_logs ( s ) ;
 8008306:	193b      	adds	r3, r7, r4
 8008308:	0018      	movs	r0, r3
 800830a:	f7fa ff85 	bl	8003218 <send_debug_logs>
        }
    }
    return false ;
 800830e:	2300      	movs	r3, #0
}
 8008310:	0018      	movs	r0, r3
 8008312:	46bd      	mov	sp, r7
 8008314:	b07b      	add	sp, #492	; 0x1ec
 8008316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008318:	fffffe1e 	.word	0xfffffe1e
 800831c:	fffffe1c 	.word	0xfffffe1c
 8008320:	fffffe70 	.word	0xfffffe70
 8008324:	080131f4 	.word	0x080131f4
 8008328:	08013220 	.word	0x08013220
 800832c:	0801323c 	.word	0x0801323c

08008330 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 8008330:	b5b0      	push	{r4, r5, r7, lr}
 8008332:	b0e4      	sub	sp, #400	; 0x190
 8008334:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008336:	24c8      	movs	r4, #200	; 0xc8
 8008338:	193b      	adds	r3, r7, r4
 800833a:	0018      	movs	r0, r3
 800833c:	23c6      	movs	r3, #198	; 0xc6
 800833e:	001a      	movs	r2, r3
 8008340:	2100      	movs	r1, #0
 8008342:	f003 fcd5 	bl	800bcf0 <memset>
    astronode_app_msg_t answer = {0};
 8008346:	4b15      	ldr	r3, [pc, #84]	; (800839c <astronode_send_pld_fr+0x6c>)
 8008348:	25c8      	movs	r5, #200	; 0xc8
 800834a:	006d      	lsls	r5, r5, #1
 800834c:	195b      	adds	r3, r3, r5
 800834e:	19db      	adds	r3, r3, r7
 8008350:	0018      	movs	r0, r3
 8008352:	23c6      	movs	r3, #198	; 0xc6
 8008354:	001a      	movs	r2, r3
 8008356:	2100      	movs	r1, #0
 8008358:	f003 fcca 	bl	800bcf0 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 800835c:	193b      	adds	r3, r7, r4
 800835e:	2227      	movs	r2, #39	; 0x27
 8008360:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008362:	003a      	movs	r2, r7
 8008364:	193b      	adds	r3, r7, r4
 8008366:	0011      	movs	r1, r2
 8008368:	0018      	movs	r0, r3
 800836a:	f000 fe65 	bl	8009038 <astronode_transport_send_receive>
 800836e:	0003      	movs	r3, r0
 8008370:	2b01      	cmp	r3, #1
 8008372:	d10e      	bne.n	8008392 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8008374:	4b09      	ldr	r3, [pc, #36]	; (800839c <astronode_send_pld_fr+0x6c>)
 8008376:	195b      	adds	r3, r3, r5
 8008378:	19db      	adds	r3, r3, r7
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	2ba7      	cmp	r3, #167	; 0xa7
 800837e:	d104      	bne.n	800838a <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8008380:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <astronode_send_pld_fr+0x70>)
 8008382:	0018      	movs	r0, r3
 8008384:	f7fa ff48 	bl	8003218 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8008388:	e003      	b.n	8008392 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 800838a:	4b06      	ldr	r3, [pc, #24]	; (80083a4 <astronode_send_pld_fr+0x74>)
 800838c:	0018      	movs	r0, r3
 800838e:	f7fa ff43 	bl	8003218 <send_debug_logs>
}
 8008392:	46c0      	nop			; (mov r8, r8)
 8008394:	46bd      	mov	sp, r7
 8008396:	b064      	add	sp, #400	; 0x190
 8008398:	bdb0      	pop	{r4, r5, r7, pc}
 800839a:	46c0      	nop			; (mov r8, r8)
 800839c:	fffffe70 	.word	0xfffffe70
 80083a0:	0801326c 	.word	0x0801326c
 80083a4:	080132a4 	.word	0x080132a4

080083a8 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 80083a8:	b5b0      	push	{r4, r5, r7, lr}
 80083aa:	b0e4      	sub	sp, #400	; 0x190
 80083ac:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80083ae:	24c8      	movs	r4, #200	; 0xc8
 80083b0:	193b      	adds	r3, r7, r4
 80083b2:	0018      	movs	r0, r3
 80083b4:	23c6      	movs	r3, #198	; 0xc6
 80083b6:	001a      	movs	r2, r3
 80083b8:	2100      	movs	r1, #0
 80083ba:	f003 fc99 	bl	800bcf0 <memset>
    astronode_app_msg_t answer = {0};
 80083be:	4b16      	ldr	r3, [pc, #88]	; (8008418 <astronode_send_res_cr+0x70>)
 80083c0:	25c8      	movs	r5, #200	; 0xc8
 80083c2:	006d      	lsls	r5, r5, #1
 80083c4:	195b      	adds	r3, r3, r5
 80083c6:	19db      	adds	r3, r3, r7
 80083c8:	0018      	movs	r0, r3
 80083ca:	23c6      	movs	r3, #198	; 0xc6
 80083cc:	001a      	movs	r2, r3
 80083ce:	2100      	movs	r1, #0
 80083d0:	f003 fc8e 	bl	800bcf0 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 80083d4:	193b      	adds	r3, r7, r4
 80083d6:	2255      	movs	r2, #85	; 0x55
 80083d8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80083da:	003a      	movs	r2, r7
 80083dc:	193b      	adds	r3, r7, r4
 80083de:	0011      	movs	r1, r2
 80083e0:	0018      	movs	r0, r3
 80083e2:	f000 fe29 	bl	8009038 <astronode_transport_send_receive>
 80083e6:	0003      	movs	r3, r0
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d111      	bne.n	8008410 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 80083ec:	4b0a      	ldr	r3, [pc, #40]	; (8008418 <astronode_send_res_cr+0x70>)
 80083ee:	195b      	adds	r3, r3, r5
 80083f0:	19db      	adds	r3, r3, r7
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2bd5      	cmp	r3, #213	; 0xd5
 80083f6:	d107      	bne.n	8008408 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 80083f8:	4b08      	ldr	r3, [pc, #32]	; (800841c <astronode_send_res_cr+0x74>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 80083fe:	4b08      	ldr	r3, [pc, #32]	; (8008420 <astronode_send_res_cr+0x78>)
 8008400:	0018      	movs	r0, r3
 8008402:	f7fa ff09 	bl	8003218 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8008406:	e003      	b.n	8008410 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8008408:	4b06      	ldr	r3, [pc, #24]	; (8008424 <astronode_send_res_cr+0x7c>)
 800840a:	0018      	movs	r0, r3
 800840c:	f7fa ff04 	bl	8003218 <send_debug_logs>
}
 8008410:	46c0      	nop			; (mov r8, r8)
 8008412:	46bd      	mov	sp, r7
 8008414:	b064      	add	sp, #400	; 0x190
 8008416:	bdb0      	pop	{r4, r5, r7, pc}
 8008418:	fffffe70 	.word	0xfffffe70
 800841c:	20000b05 	.word	0x20000b05
 8008420:	080132e0 	.word	0x080132e0
 8008424:	08013314 	.word	0x08013314

08008428 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8008428:	b5b0      	push	{r4, r5, r7, lr}
 800842a:	b0fa      	sub	sp, #488	; 0x1e8
 800842c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 800842e:	258e      	movs	r5, #142	; 0x8e
 8008430:	006d      	lsls	r5, r5, #1
 8008432:	197b      	adds	r3, r7, r5
 8008434:	0018      	movs	r0, r3
 8008436:	23c6      	movs	r3, #198	; 0xc6
 8008438:	001a      	movs	r2, r3
 800843a:	2100      	movs	r1, #0
 800843c:	f003 fc58 	bl	800bcf0 <memset>
    astronode_app_msg_t answer = {0} ;
 8008440:	4b28      	ldr	r3, [pc, #160]	; (80084e4 <astronode_send_rtc_rr+0xbc>)
 8008442:	24f4      	movs	r4, #244	; 0xf4
 8008444:	0064      	lsls	r4, r4, #1
 8008446:	191b      	adds	r3, r3, r4
 8008448:	19db      	adds	r3, r3, r7
 800844a:	0018      	movs	r0, r3
 800844c:	23c6      	movs	r3, #198	; 0xc6
 800844e:	001a      	movs	r2, r3
 8008450:	2100      	movs	r1, #0
 8008452:	f003 fc4d 	bl	800bcf0 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8008456:	197b      	adds	r3, r7, r5
 8008458:	2217      	movs	r2, #23
 800845a:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 800845c:	2354      	movs	r3, #84	; 0x54
 800845e:	18fa      	adds	r2, r7, r3
 8008460:	197b      	adds	r3, r7, r5
 8008462:	0011      	movs	r1, r2
 8008464:	0018      	movs	r0, r3
 8008466:	f000 fde7 	bl	8009038 <astronode_transport_send_receive>
 800846a:	0003      	movs	r3, r0
 800846c:	2b01      	cmp	r3, #1
 800846e:	d133      	bne.n	80084d8 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 8008470:	4b1c      	ldr	r3, [pc, #112]	; (80084e4 <astronode_send_rtc_rr+0xbc>)
 8008472:	0021      	movs	r1, r4
 8008474:	185b      	adds	r3, r3, r1
 8008476:	19db      	adds	r3, r3, r7
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	2b97      	cmp	r3, #151	; 0x97
 800847c:	d128      	bne.n	80084d0 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 800847e:	4b19      	ldr	r3, [pc, #100]	; (80084e4 <astronode_send_rtc_rr+0xbc>)
 8008480:	185b      	adds	r3, r3, r1
 8008482:	19db      	adds	r3, r3, r7
 8008484:	785b      	ldrb	r3, [r3, #1]
 8008486:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8008488:	4b16      	ldr	r3, [pc, #88]	; (80084e4 <astronode_send_rtc_rr+0xbc>)
 800848a:	185b      	adds	r3, r3, r1
 800848c:	19db      	adds	r3, r3, r7
 800848e:	789b      	ldrb	r3, [r3, #2]
 8008490:	021b      	lsls	r3, r3, #8
 8008492:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8008494:	4b13      	ldr	r3, [pc, #76]	; (80084e4 <astronode_send_rtc_rr+0xbc>)
 8008496:	185b      	adds	r3, r3, r1
 8008498:	19db      	adds	r3, r3, r7
 800849a:	78db      	ldrb	r3, [r3, #3]
 800849c:	041b      	lsls	r3, r3, #16
 800849e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 80084a0:	4b10      	ldr	r3, [pc, #64]	; (80084e4 <astronode_send_rtc_rr+0xbc>)
 80084a2:	185b      	adds	r3, r3, r1
 80084a4:	19db      	adds	r3, r3, r7
 80084a6:	791b      	ldrb	r3, [r3, #4]
 80084a8:	061b      	lsls	r3, r3, #24
 80084aa:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 80084ac:	24f2      	movs	r4, #242	; 0xf2
 80084ae:	0064      	lsls	r4, r4, #1
 80084b0:	193a      	adds	r2, r7, r4
 80084b2:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 80084b4:	193b      	adds	r3, r7, r4
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	490b      	ldr	r1, [pc, #44]	; (80084e8 <astronode_send_rtc_rr+0xc0>)
 80084ba:	1d3b      	adds	r3, r7, #4
 80084bc:	0018      	movs	r0, r3
 80084be:	f003 fb81 	bl	800bbc4 <sprintf>
            send_debug_logs ( str ) ;
 80084c2:	1d3b      	adds	r3, r7, #4
 80084c4:	0018      	movs	r0, r3
 80084c6:	f7fa fea7 	bl	8003218 <send_debug_logs>
            return rtc_time ;
 80084ca:	193b      	adds	r3, r7, r4
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	e004      	b.n	80084da <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 80084d0:	4b06      	ldr	r3, [pc, #24]	; (80084ec <astronode_send_rtc_rr+0xc4>)
 80084d2:	0018      	movs	r0, r3
 80084d4:	f7fa fea0 	bl	8003218 <send_debug_logs>
        }
    }
    return 0 ;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	0018      	movs	r0, r3
 80084dc:	46bd      	mov	sp, r7
 80084de:	b07a      	add	sp, #488	; 0x1e8
 80084e0:	bdb0      	pop	{r4, r5, r7, pc}
 80084e2:	46c0      	nop			; (mov r8, r8)
 80084e4:	fffffe6c 	.word	0xfffffe6c
 80084e8:	08013340 	.word	0x08013340
 80084ec:	08013380 	.word	0x08013380

080084f0 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 80084f0:	b5b0      	push	{r4, r5, r7, lr}
 80084f2:	b0f8      	sub	sp, #480	; 0x1e0
 80084f4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80084f6:	258c      	movs	r5, #140	; 0x8c
 80084f8:	006d      	lsls	r5, r5, #1
 80084fa:	197b      	adds	r3, r7, r5
 80084fc:	0018      	movs	r0, r3
 80084fe:	23c6      	movs	r3, #198	; 0xc6
 8008500:	001a      	movs	r2, r3
 8008502:	2100      	movs	r1, #0
 8008504:	f003 fbf4 	bl	800bcf0 <memset>
    astronode_app_msg_t answer = {0};
 8008508:	4b21      	ldr	r3, [pc, #132]	; (8008590 <astronode_send_sak_rr+0xa0>)
 800850a:	24f0      	movs	r4, #240	; 0xf0
 800850c:	0064      	lsls	r4, r4, #1
 800850e:	191b      	adds	r3, r3, r4
 8008510:	19db      	adds	r3, r3, r7
 8008512:	0018      	movs	r0, r3
 8008514:	23c6      	movs	r3, #198	; 0xc6
 8008516:	001a      	movs	r2, r3
 8008518:	2100      	movs	r1, #0
 800851a:	f003 fbe9 	bl	800bcf0 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 800851e:	197b      	adds	r3, r7, r5
 8008520:	2245      	movs	r2, #69	; 0x45
 8008522:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008524:	2350      	movs	r3, #80	; 0x50
 8008526:	18fa      	adds	r2, r7, r3
 8008528:	197b      	adds	r3, r7, r5
 800852a:	0011      	movs	r1, r2
 800852c:	0018      	movs	r0, r3
 800852e:	f000 fd83 	bl	8009038 <astronode_transport_send_receive>
 8008532:	0003      	movs	r3, r0
 8008534:	2b01      	cmp	r3, #1
 8008536:	d126      	bne.n	8008586 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8008538:	4b15      	ldr	r3, [pc, #84]	; (8008590 <astronode_send_sak_rr+0xa0>)
 800853a:	191b      	adds	r3, r3, r4
 800853c:	19db      	adds	r3, r3, r7
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2bc5      	cmp	r3, #197	; 0xc5
 8008542:	d11c      	bne.n	800857e <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8008544:	4b12      	ldr	r3, [pc, #72]	; (8008590 <astronode_send_sak_rr+0xa0>)
 8008546:	191b      	adds	r3, r3, r4
 8008548:	19db      	adds	r3, r3, r7
 800854a:	785b      	ldrb	r3, [r3, #1]
 800854c:	b299      	uxth	r1, r3
 800854e:	4b10      	ldr	r3, [pc, #64]	; (8008590 <astronode_send_sak_rr+0xa0>)
 8008550:	191b      	adds	r3, r3, r4
 8008552:	19db      	adds	r3, r3, r7
 8008554:	789b      	ldrb	r3, [r3, #2]
 8008556:	b29b      	uxth	r3, r3
 8008558:	021b      	lsls	r3, r3, #8
 800855a:	b29a      	uxth	r2, r3
 800855c:	20ef      	movs	r0, #239	; 0xef
 800855e:	0040      	lsls	r0, r0, #1
 8008560:	183b      	adds	r3, r7, r0
 8008562:	188a      	adds	r2, r1, r2
 8008564:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8008566:	183b      	adds	r3, r7, r0
 8008568:	881a      	ldrh	r2, [r3, #0]
 800856a:	490a      	ldr	r1, [pc, #40]	; (8008594 <astronode_send_sak_rr+0xa4>)
 800856c:	003b      	movs	r3, r7
 800856e:	0018      	movs	r0, r3
 8008570:	f003 fb28 	bl	800bbc4 <sprintf>
            send_debug_logs(str);
 8008574:	003b      	movs	r3, r7
 8008576:	0018      	movs	r0, r3
 8008578:	f7fa fe4e 	bl	8003218 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 800857c:	e003      	b.n	8008586 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 800857e:	4b06      	ldr	r3, [pc, #24]	; (8008598 <astronode_send_sak_rr+0xa8>)
 8008580:	0018      	movs	r0, r3
 8008582:	f7fa fe49 	bl	8003218 <send_debug_logs>
}
 8008586:	46c0      	nop			; (mov r8, r8)
 8008588:	46bd      	mov	sp, r7
 800858a:	b078      	add	sp, #480	; 0x1e0
 800858c:	bdb0      	pop	{r4, r5, r7, pc}
 800858e:	46c0      	nop			; (mov r8, r8)
 8008590:	fffffe70 	.word	0xfffffe70
 8008594:	0801339c 	.word	0x0801339c
 8008598:	080133c8 	.word	0x080133c8

0800859c <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 800859c:	b5b0      	push	{r4, r5, r7, lr}
 800859e:	b0e4      	sub	sp, #400	; 0x190
 80085a0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80085a2:	24c8      	movs	r4, #200	; 0xc8
 80085a4:	193b      	adds	r3, r7, r4
 80085a6:	0018      	movs	r0, r3
 80085a8:	23c6      	movs	r3, #198	; 0xc6
 80085aa:	001a      	movs	r2, r3
 80085ac:	2100      	movs	r1, #0
 80085ae:	f003 fb9f 	bl	800bcf0 <memset>
    astronode_app_msg_t answer = {0};
 80085b2:	4b16      	ldr	r3, [pc, #88]	; (800860c <astronode_send_sak_cr+0x70>)
 80085b4:	25c8      	movs	r5, #200	; 0xc8
 80085b6:	006d      	lsls	r5, r5, #1
 80085b8:	195b      	adds	r3, r3, r5
 80085ba:	19db      	adds	r3, r3, r7
 80085bc:	0018      	movs	r0, r3
 80085be:	23c6      	movs	r3, #198	; 0xc6
 80085c0:	001a      	movs	r2, r3
 80085c2:	2100      	movs	r1, #0
 80085c4:	f003 fb94 	bl	800bcf0 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 80085c8:	193b      	adds	r3, r7, r4
 80085ca:	2246      	movs	r2, #70	; 0x46
 80085cc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80085ce:	003a      	movs	r2, r7
 80085d0:	193b      	adds	r3, r7, r4
 80085d2:	0011      	movs	r1, r2
 80085d4:	0018      	movs	r0, r3
 80085d6:	f000 fd2f 	bl	8009038 <astronode_transport_send_receive>
 80085da:	0003      	movs	r3, r0
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d111      	bne.n	8008604 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 80085e0:	4b0a      	ldr	r3, [pc, #40]	; (800860c <astronode_send_sak_cr+0x70>)
 80085e2:	195b      	adds	r3, r3, r5
 80085e4:	19db      	adds	r3, r3, r7
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2bc6      	cmp	r3, #198	; 0xc6
 80085ea:	d107      	bne.n	80085fc <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 80085ec:	4b08      	ldr	r3, [pc, #32]	; (8008610 <astronode_send_sak_cr+0x74>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 80085f2:	4b08      	ldr	r3, [pc, #32]	; (8008614 <astronode_send_sak_cr+0x78>)
 80085f4:	0018      	movs	r0, r3
 80085f6:	f7fa fe0f 	bl	8003218 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 80085fa:	e003      	b.n	8008604 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 80085fc:	4b06      	ldr	r3, [pc, #24]	; (8008618 <astronode_send_sak_cr+0x7c>)
 80085fe:	0018      	movs	r0, r3
 8008600:	f7fa fe0a 	bl	8003218 <send_debug_logs>
}
 8008604:	46c0      	nop			; (mov r8, r8)
 8008606:	46bd      	mov	sp, r7
 8008608:	b064      	add	sp, #400	; 0x190
 800860a:	bdb0      	pop	{r4, r5, r7, pc}
 800860c:	fffffe70 	.word	0xfffffe70
 8008610:	20000b04 	.word	0x20000b04
 8008614:	080133fc 	.word	0x080133fc
 8008618:	08013424 	.word	0x08013424

0800861c <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 800861c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800861e:	b0ed      	sub	sp, #436	; 0x1b4
 8008620:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008622:	21c8      	movs	r1, #200	; 0xc8
 8008624:	2318      	movs	r3, #24
 8008626:	18cb      	adds	r3, r1, r3
 8008628:	19db      	adds	r3, r3, r7
 800862a:	0018      	movs	r0, r3
 800862c:	23c6      	movs	r3, #198	; 0xc6
 800862e:	001a      	movs	r2, r3
 8008630:	2100      	movs	r1, #0
 8008632:	f003 fb5d 	bl	800bcf0 <memset>
    astronode_app_msg_t answer = {0};
 8008636:	4b4a      	ldr	r3, [pc, #296]	; (8008760 <astronode_send_mpn_rr+0x144>)
 8008638:	26cc      	movs	r6, #204	; 0xcc
 800863a:	0076      	lsls	r6, r6, #1
 800863c:	199b      	adds	r3, r3, r6
 800863e:	2218      	movs	r2, #24
 8008640:	4694      	mov	ip, r2
 8008642:	44bc      	add	ip, r7
 8008644:	4463      	add	r3, ip
 8008646:	0018      	movs	r0, r3
 8008648:	23c6      	movs	r3, #198	; 0xc6
 800864a:	001a      	movs	r2, r3
 800864c:	2100      	movs	r1, #0
 800864e:	f003 fb4f 	bl	800bcf0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8008652:	21c8      	movs	r1, #200	; 0xc8
 8008654:	2318      	movs	r3, #24
 8008656:	18cb      	adds	r3, r1, r3
 8008658:	19db      	adds	r3, r3, r7
 800865a:	221b      	movs	r2, #27
 800865c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800865e:	2318      	movs	r3, #24
 8008660:	18fa      	adds	r2, r7, r3
 8008662:	2318      	movs	r3, #24
 8008664:	18cb      	adds	r3, r1, r3
 8008666:	19db      	adds	r3, r3, r7
 8008668:	0011      	movs	r1, r2
 800866a:	0018      	movs	r0, r3
 800866c:	f000 fce4 	bl	8009038 <astronode_transport_send_receive>
 8008670:	0003      	movs	r3, r0
 8008672:	2b01      	cmp	r3, #1
 8008674:	d16f      	bne.n	8008756 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8008676:	4b3a      	ldr	r3, [pc, #232]	; (8008760 <astronode_send_mpn_rr+0x144>)
 8008678:	0032      	movs	r2, r6
 800867a:	189b      	adds	r3, r3, r2
 800867c:	2118      	movs	r1, #24
 800867e:	468c      	mov	ip, r1
 8008680:	44bc      	add	ip, r7
 8008682:	4463      	add	r3, ip
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	2b9b      	cmp	r3, #155	; 0x9b
 8008688:	d161      	bne.n	800874e <astronode_send_mpn_rr+0x132>
        {
 800868a:	466b      	mov	r3, sp
 800868c:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 800868e:	4b34      	ldr	r3, [pc, #208]	; (8008760 <astronode_send_mpn_rr+0x144>)
 8008690:	189b      	adds	r3, r3, r2
 8008692:	2218      	movs	r2, #24
 8008694:	4694      	mov	ip, r2
 8008696:	44bc      	add	ip, r7
 8008698:	4463      	add	r3, ip
 800869a:	22c4      	movs	r2, #196	; 0xc4
 800869c:	5a9b      	ldrh	r3, [r3, r2]
 800869e:	001a      	movs	r2, r3
 80086a0:	3a01      	subs	r2, #1
 80086a2:	21ca      	movs	r1, #202	; 0xca
 80086a4:	0049      	lsls	r1, r1, #1
 80086a6:	2018      	movs	r0, #24
 80086a8:	1809      	adds	r1, r1, r0
 80086aa:	19c9      	adds	r1, r1, r7
 80086ac:	600a      	str	r2, [r1, #0]
 80086ae:	001c      	movs	r4, r3
 80086b0:	2200      	movs	r2, #0
 80086b2:	0015      	movs	r5, r2
 80086b4:	0020      	movs	r0, r4
 80086b6:	0029      	movs	r1, r5
 80086b8:	0004      	movs	r4, r0
 80086ba:	0f62      	lsrs	r2, r4, #29
 80086bc:	000c      	movs	r4, r1
 80086be:	00e4      	lsls	r4, r4, #3
 80086c0:	617c      	str	r4, [r7, #20]
 80086c2:	697c      	ldr	r4, [r7, #20]
 80086c4:	4314      	orrs	r4, r2
 80086c6:	617c      	str	r4, [r7, #20]
 80086c8:	0001      	movs	r1, r0
 80086ca:	00c9      	lsls	r1, r1, #3
 80086cc:	6139      	str	r1, [r7, #16]
 80086ce:	603b      	str	r3, [r7, #0]
 80086d0:	2200      	movs	r2, #0
 80086d2:	607a      	str	r2, [r7, #4]
 80086d4:	6838      	ldr	r0, [r7, #0]
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	0004      	movs	r4, r0
 80086da:	0f62      	lsrs	r2, r4, #29
 80086dc:	000c      	movs	r4, r1
 80086de:	00e4      	lsls	r4, r4, #3
 80086e0:	60fc      	str	r4, [r7, #12]
 80086e2:	68fc      	ldr	r4, [r7, #12]
 80086e4:	4314      	orrs	r4, r2
 80086e6:	60fc      	str	r4, [r7, #12]
 80086e8:	0001      	movs	r1, r0
 80086ea:	00ca      	lsls	r2, r1, #3
 80086ec:	60ba      	str	r2, [r7, #8]
 80086ee:	3307      	adds	r3, #7
 80086f0:	08db      	lsrs	r3, r3, #3
 80086f2:	00db      	lsls	r3, r3, #3
 80086f4:	4669      	mov	r1, sp
 80086f6:	1acb      	subs	r3, r1, r3
 80086f8:	469d      	mov	sp, r3
 80086fa:	466b      	mov	r3, sp
 80086fc:	3300      	adds	r3, #0
 80086fe:	24c8      	movs	r4, #200	; 0xc8
 8008700:	0064      	lsls	r4, r4, #1
 8008702:	2218      	movs	r2, #24
 8008704:	18a2      	adds	r2, r4, r2
 8008706:	19d1      	adds	r1, r2, r7
 8008708:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 800870a:	4b16      	ldr	r3, [pc, #88]	; (8008764 <astronode_send_mpn_rr+0x148>)
 800870c:	0018      	movs	r0, r3
 800870e:	f7fa fd83 	bl	8003218 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8008712:	4b13      	ldr	r3, [pc, #76]	; (8008760 <astronode_send_mpn_rr+0x144>)
 8008714:	22cc      	movs	r2, #204	; 0xcc
 8008716:	0052      	lsls	r2, r2, #1
 8008718:	189b      	adds	r3, r3, r2
 800871a:	2218      	movs	r2, #24
 800871c:	4694      	mov	ip, r2
 800871e:	44bc      	add	ip, r7
 8008720:	4463      	add	r3, ip
 8008722:	22c4      	movs	r2, #196	; 0xc4
 8008724:	5a9b      	ldrh	r3, [r3, r2]
 8008726:	0019      	movs	r1, r3
 8008728:	2318      	movs	r3, #24
 800872a:	18fb      	adds	r3, r7, r3
 800872c:	3301      	adds	r3, #1
 800872e:	4a0e      	ldr	r2, [pc, #56]	; (8008768 <astronode_send_mpn_rr+0x14c>)
 8008730:	2018      	movs	r0, #24
 8008732:	1820      	adds	r0, r4, r0
 8008734:	19c0      	adds	r0, r0, r7
 8008736:	6800      	ldr	r0, [r0, #0]
 8008738:	f003 fa10 	bl	800bb5c <snprintf>
            send_debug_logs(product_number);
 800873c:	2318      	movs	r3, #24
 800873e:	18e3      	adds	r3, r4, r3
 8008740:	19db      	adds	r3, r3, r7
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	0018      	movs	r0, r3
 8008746:	f7fa fd67 	bl	8003218 <send_debug_logs>
 800874a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 800874c:	e003      	b.n	8008756 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 800874e:	4b07      	ldr	r3, [pc, #28]	; (800876c <astronode_send_mpn_rr+0x150>)
 8008750:	0018      	movs	r0, r3
 8008752:	f7fa fd61 	bl	8003218 <send_debug_logs>
}
 8008756:	46c0      	nop			; (mov r8, r8)
 8008758:	46bd      	mov	sp, r7
 800875a:	b06d      	add	sp, #436	; 0x1b4
 800875c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800875e:	46c0      	nop			; (mov r8, r8)
 8008760:	fffffe68 	.word	0xfffffe68
 8008764:	080134ec 	.word	0x080134ec
 8008768:	08013008 	.word	0x08013008
 800876c:	08013044 	.word	0x08013044

08008770 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8008770:	b5b0      	push	{r4, r5, r7, lr}
 8008772:	b0e4      	sub	sp, #400	; 0x190
 8008774:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008776:	24c8      	movs	r4, #200	; 0xc8
 8008778:	193b      	adds	r3, r7, r4
 800877a:	0018      	movs	r0, r3
 800877c:	23c6      	movs	r3, #198	; 0xc6
 800877e:	001a      	movs	r2, r3
 8008780:	2100      	movs	r1, #0
 8008782:	f003 fab5 	bl	800bcf0 <memset>
    astronode_app_msg_t answer = {0};
 8008786:	4b16      	ldr	r3, [pc, #88]	; (80087e0 <astronode_send_cmd_cr+0x70>)
 8008788:	25c8      	movs	r5, #200	; 0xc8
 800878a:	006d      	lsls	r5, r5, #1
 800878c:	195b      	adds	r3, r3, r5
 800878e:	19db      	adds	r3, r3, r7
 8008790:	0018      	movs	r0, r3
 8008792:	23c6      	movs	r3, #198	; 0xc6
 8008794:	001a      	movs	r2, r3
 8008796:	2100      	movs	r1, #0
 8008798:	f003 faaa 	bl	800bcf0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 800879c:	193b      	adds	r3, r7, r4
 800879e:	2248      	movs	r2, #72	; 0x48
 80087a0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80087a2:	003a      	movs	r2, r7
 80087a4:	193b      	adds	r3, r7, r4
 80087a6:	0011      	movs	r1, r2
 80087a8:	0018      	movs	r0, r3
 80087aa:	f000 fc45 	bl	8009038 <astronode_transport_send_receive>
 80087ae:	0003      	movs	r3, r0
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d111      	bne.n	80087d8 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 80087b4:	4b0a      	ldr	r3, [pc, #40]	; (80087e0 <astronode_send_cmd_cr+0x70>)
 80087b6:	195b      	adds	r3, r3, r5
 80087b8:	19db      	adds	r3, r3, r7
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	2bc8      	cmp	r3, #200	; 0xc8
 80087be:	d107      	bne.n	80087d0 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 80087c0:	4b08      	ldr	r3, [pc, #32]	; (80087e4 <astronode_send_cmd_cr+0x74>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 80087c6:	4b08      	ldr	r3, [pc, #32]	; (80087e8 <astronode_send_cmd_cr+0x78>)
 80087c8:	0018      	movs	r0, r3
 80087ca:	f7fa fd25 	bl	8003218 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 80087ce:	e003      	b.n	80087d8 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 80087d0:	4b06      	ldr	r3, [pc, #24]	; (80087ec <astronode_send_cmd_cr+0x7c>)
 80087d2:	0018      	movs	r0, r3
 80087d4:	f7fa fd20 	bl	8003218 <send_debug_logs>
}
 80087d8:	46c0      	nop			; (mov r8, r8)
 80087da:	46bd      	mov	sp, r7
 80087dc:	b064      	add	sp, #400	; 0x190
 80087de:	bdb0      	pop	{r4, r5, r7, pc}
 80087e0:	fffffe70 	.word	0xfffffe70
 80087e4:	20000b06 	.word	0x20000b06
 80087e8:	0801393c 	.word	0x0801393c
 80087ec:	08013960 	.word	0x08013960

080087f0 <astronode_send_cmd_rr>:

bool astronode_send_cmd_rr ( char* my_astro_rcv_cmd )
{
 80087f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087f2:	4cc6      	ldr	r4, [pc, #792]	; (8008b0c <astronode_send_cmd_rr+0x31c>)
 80087f4:	44a5      	add	sp, r4
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	61f8      	str	r0, [r7, #28]
    astronode_app_msg_t request = {0};
 80087fa:	2190      	movs	r1, #144	; 0x90
 80087fc:	0049      	lsls	r1, r1, #1
 80087fe:	2318      	movs	r3, #24
 8008800:	18cb      	adds	r3, r1, r3
 8008802:	19db      	adds	r3, r3, r7
 8008804:	0018      	movs	r0, r3
 8008806:	23c6      	movs	r3, #198	; 0xc6
 8008808:	001a      	movs	r2, r3
 800880a:	2100      	movs	r1, #0
 800880c:	f003 fa70 	bl	800bcf0 <memset>
    astronode_app_msg_t answer = {0};
 8008810:	4bbf      	ldr	r3, [pc, #764]	; (8008b10 <astronode_send_cmd_rr+0x320>)
 8008812:	26fc      	movs	r6, #252	; 0xfc
 8008814:	0076      	lsls	r6, r6, #1
 8008816:	199b      	adds	r3, r3, r6
 8008818:	2218      	movs	r2, #24
 800881a:	4694      	mov	ip, r2
 800881c:	44bc      	add	ip, r7
 800881e:	4463      	add	r3, ip
 8008820:	0018      	movs	r0, r3
 8008822:	23c6      	movs	r3, #198	; 0xc6
 8008824:	001a      	movs	r2, r3
 8008826:	2100      	movs	r1, #0
 8008828:	f003 fa62 	bl	800bcf0 <memset>
    bool result = false ;
 800882c:	23f8      	movs	r3, #248	; 0xf8
 800882e:	33ff      	adds	r3, #255	; 0xff
 8008830:	2218      	movs	r2, #24
 8008832:	189b      	adds	r3, r3, r2
 8008834:	19db      	adds	r3, r3, r7
 8008836:	2200      	movs	r2, #0
 8008838:	701a      	strb	r2, [r3, #0]

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 800883a:	2190      	movs	r1, #144	; 0x90
 800883c:	0049      	lsls	r1, r1, #1
 800883e:	2318      	movs	r3, #24
 8008840:	18cb      	adds	r3, r1, r3
 8008842:	19db      	adds	r3, r3, r7
 8008844:	2247      	movs	r2, #71	; 0x47
 8008846:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008848:	2358      	movs	r3, #88	; 0x58
 800884a:	2218      	movs	r2, #24
 800884c:	189b      	adds	r3, r3, r2
 800884e:	19da      	adds	r2, r3, r7
 8008850:	2318      	movs	r3, #24
 8008852:	18cb      	adds	r3, r1, r3
 8008854:	19db      	adds	r3, r3, r7
 8008856:	0011      	movs	r1, r2
 8008858:	0018      	movs	r0, r3
 800885a:	f000 fbed 	bl	8009038 <astronode_transport_send_receive>
 800885e:	0003      	movs	r3, r0
 8008860:	2b01      	cmp	r3, #1
 8008862:	d000      	beq.n	8008866 <astronode_send_cmd_rr+0x76>
 8008864:	e146      	b.n	8008af4 <astronode_send_cmd_rr+0x304>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8008866:	4baa      	ldr	r3, [pc, #680]	; (8008b10 <astronode_send_cmd_rr+0x320>)
 8008868:	199b      	adds	r3, r3, r6
 800886a:	2218      	movs	r2, #24
 800886c:	4694      	mov	ip, r2
 800886e:	44bc      	add	ip, r7
 8008870:	4463      	add	r3, ip
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2bc7      	cmp	r3, #199	; 0xc7
 8008876:	d000      	beq.n	800887a <astronode_send_cmd_rr+0x8a>
 8008878:	e138      	b.n	8008aec <astronode_send_cmd_rr+0x2fc>
        {
 800887a:	466b      	mov	r3, sp
 800887c:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 800887e:	4ba5      	ldr	r3, [pc, #660]	; (8008b14 <astronode_send_cmd_rr+0x324>)
 8008880:	0018      	movs	r0, r3
 8008882:	f7fa fcc9 	bl	8003218 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8008886:	4ba2      	ldr	r3, [pc, #648]	; (8008b10 <astronode_send_cmd_rr+0x320>)
 8008888:	21fc      	movs	r1, #252	; 0xfc
 800888a:	0049      	lsls	r1, r1, #1
 800888c:	185b      	adds	r3, r3, r1
 800888e:	2218      	movs	r2, #24
 8008890:	4694      	mov	ip, r2
 8008892:	44bc      	add	ip, r7
 8008894:	4463      	add	r3, ip
 8008896:	785b      	ldrb	r3, [r3, #1]
 8008898:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 800889a:	4b9d      	ldr	r3, [pc, #628]	; (8008b10 <astronode_send_cmd_rr+0x320>)
 800889c:	185b      	adds	r3, r3, r1
 800889e:	2018      	movs	r0, #24
 80088a0:	4684      	mov	ip, r0
 80088a2:	44bc      	add	ip, r7
 80088a4:	4463      	add	r3, ip
 80088a6:	789b      	ldrb	r3, [r3, #2]
 80088a8:	021b      	lsls	r3, r3, #8
 80088aa:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 80088ac:	4b98      	ldr	r3, [pc, #608]	; (8008b10 <astronode_send_cmd_rr+0x320>)
 80088ae:	185b      	adds	r3, r3, r1
 80088b0:	2018      	movs	r0, #24
 80088b2:	4684      	mov	ip, r0
 80088b4:	44bc      	add	ip, r7
 80088b6:	4463      	add	r3, ip
 80088b8:	78db      	ldrb	r3, [r3, #3]
 80088ba:	041b      	lsls	r3, r3, #16
 80088bc:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 80088be:	4b94      	ldr	r3, [pc, #592]	; (8008b10 <astronode_send_cmd_rr+0x320>)
 80088c0:	185b      	adds	r3, r3, r1
 80088c2:	2118      	movs	r1, #24
 80088c4:	468c      	mov	ip, r1
 80088c6:	44bc      	add	ip, r7
 80088c8:	4463      	add	r3, ip
 80088ca:	791b      	ldrb	r3, [r3, #4]
 80088cc:	061b      	lsls	r3, r3, #24
 80088ce:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 80088d0:	22f8      	movs	r2, #248	; 0xf8
 80088d2:	0052      	lsls	r2, r2, #1
 80088d4:	2118      	movs	r1, #24
 80088d6:	1851      	adds	r1, r2, r1
 80088d8:	19c8      	adds	r0, r1, r7
 80088da:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 80088dc:	2318      	movs	r3, #24
 80088de:	18d3      	adds	r3, r2, r3
 80088e0:	19db      	adds	r3, r3, r7
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	498c      	ldr	r1, [pc, #560]	; (8008b18 <astronode_send_cmd_rr+0x328>)
 80088e6:	2308      	movs	r3, #8
 80088e8:	2018      	movs	r0, #24
 80088ea:	181b      	adds	r3, r3, r0
 80088ec:	19db      	adds	r3, r3, r7
 80088ee:	0018      	movs	r0, r3
 80088f0:	f003 f968 	bl	800bbc4 <sprintf>
            send_debug_logs(str);
 80088f4:	2308      	movs	r3, #8
 80088f6:	2218      	movs	r2, #24
 80088f8:	189b      	adds	r3, r3, r2
 80088fa:	19db      	adds	r3, r3, r7
 80088fc:	0018      	movs	r0, r3
 80088fe:	f7fa fc8b 	bl	8003218 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8008902:	4b83      	ldr	r3, [pc, #524]	; (8008b10 <astronode_send_cmd_rr+0x320>)
 8008904:	21fc      	movs	r1, #252	; 0xfc
 8008906:	0049      	lsls	r1, r1, #1
 8008908:	185b      	adds	r3, r3, r1
 800890a:	2218      	movs	r2, #24
 800890c:	4694      	mov	ip, r2
 800890e:	44bc      	add	ip, r7
 8008910:	4463      	add	r3, ip
 8008912:	22c4      	movs	r2, #196	; 0xc4
 8008914:	5a9b      	ldrh	r3, [r3, r2]
 8008916:	2b2c      	cmp	r3, #44	; 0x2c
 8008918:	d00e      	beq.n	8008938 <astronode_send_cmd_rr+0x148>
 800891a:	4b7d      	ldr	r3, [pc, #500]	; (8008b10 <astronode_send_cmd_rr+0x320>)
 800891c:	185b      	adds	r3, r3, r1
 800891e:	2218      	movs	r2, #24
 8008920:	4694      	mov	ip, r2
 8008922:	44bc      	add	ip, r7
 8008924:	4463      	add	r3, ip
 8008926:	22c4      	movs	r2, #196	; 0xc4
 8008928:	5a9b      	ldrh	r3, [r3, r2]
 800892a:	2b0c      	cmp	r3, #12
 800892c:	d004      	beq.n	8008938 <astronode_send_cmd_rr+0x148>
            {
                send_debug_logs("Command size error");
 800892e:	4b7b      	ldr	r3, [pc, #492]	; (8008b1c <astronode_send_cmd_rr+0x32c>)
 8008930:	0018      	movs	r0, r3
 8008932:	f7fa fc71 	bl	8003218 <send_debug_logs>
                return;
 8008936:	e0d7      	b.n	8008ae8 <astronode_send_cmd_rr+0x2f8>
            }

            char command_content[answer.payload_len];
 8008938:	4b75      	ldr	r3, [pc, #468]	; (8008b10 <astronode_send_cmd_rr+0x320>)
 800893a:	22fc      	movs	r2, #252	; 0xfc
 800893c:	0052      	lsls	r2, r2, #1
 800893e:	189b      	adds	r3, r3, r2
 8008940:	2218      	movs	r2, #24
 8008942:	4694      	mov	ip, r2
 8008944:	44bc      	add	ip, r7
 8008946:	4463      	add	r3, ip
 8008948:	22c4      	movs	r2, #196	; 0xc4
 800894a:	5a9b      	ldrh	r3, [r3, r2]
 800894c:	001a      	movs	r2, r3
 800894e:	3a01      	subs	r2, #1
 8008950:	21f6      	movs	r1, #246	; 0xf6
 8008952:	0049      	lsls	r1, r1, #1
 8008954:	2018      	movs	r0, #24
 8008956:	1809      	adds	r1, r1, r0
 8008958:	19c9      	adds	r1, r1, r7
 800895a:	600a      	str	r2, [r1, #0]
 800895c:	001c      	movs	r4, r3
 800895e:	2200      	movs	r2, #0
 8008960:	0015      	movs	r5, r2
 8008962:	0020      	movs	r0, r4
 8008964:	0029      	movs	r1, r5
 8008966:	0004      	movs	r4, r0
 8008968:	0f62      	lsrs	r2, r4, #29
 800896a:	000c      	movs	r4, r1
 800896c:	00e4      	lsls	r4, r4, #3
 800896e:	617c      	str	r4, [r7, #20]
 8008970:	697c      	ldr	r4, [r7, #20]
 8008972:	4314      	orrs	r4, r2
 8008974:	617c      	str	r4, [r7, #20]
 8008976:	0001      	movs	r1, r0
 8008978:	00c9      	lsls	r1, r1, #3
 800897a:	6139      	str	r1, [r7, #16]
 800897c:	603b      	str	r3, [r7, #0]
 800897e:	2200      	movs	r2, #0
 8008980:	607a      	str	r2, [r7, #4]
 8008982:	6838      	ldr	r0, [r7, #0]
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	0004      	movs	r4, r0
 8008988:	0f62      	lsrs	r2, r4, #29
 800898a:	000c      	movs	r4, r1
 800898c:	00e4      	lsls	r4, r4, #3
 800898e:	60fc      	str	r4, [r7, #12]
 8008990:	68fc      	ldr	r4, [r7, #12]
 8008992:	4314      	orrs	r4, r2
 8008994:	60fc      	str	r4, [r7, #12]
 8008996:	0001      	movs	r1, r0
 8008998:	00ca      	lsls	r2, r1, #3
 800899a:	60ba      	str	r2, [r7, #8]
 800899c:	3307      	adds	r3, #7
 800899e:	08db      	lsrs	r3, r3, #3
 80089a0:	00db      	lsls	r3, r3, #3
 80089a2:	4669      	mov	r1, sp
 80089a4:	1acb      	subs	r3, r1, r3
 80089a6:	469d      	mov	sp, r3
 80089a8:	466b      	mov	r3, sp
 80089aa:	3300      	adds	r3, #0
 80089ac:	20f4      	movs	r0, #244	; 0xf4
 80089ae:	0040      	lsls	r0, r0, #1
 80089b0:	2218      	movs	r2, #24
 80089b2:	1882      	adds	r2, r0, r2
 80089b4:	19d1      	adds	r1, r2, r7
 80089b6:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 80089b8:	4b55      	ldr	r3, [pc, #340]	; (8008b10 <astronode_send_cmd_rr+0x320>)
 80089ba:	22fc      	movs	r2, #252	; 0xfc
 80089bc:	0052      	lsls	r2, r2, #1
 80089be:	189b      	adds	r3, r3, r2
 80089c0:	2218      	movs	r2, #24
 80089c2:	4694      	mov	ip, r2
 80089c4:	44bc      	add	ip, r7
 80089c6:	4463      	add	r3, ip
 80089c8:	22c4      	movs	r2, #196	; 0xc4
 80089ca:	5a9b      	ldrh	r3, [r3, r2]
 80089cc:	3b03      	subs	r3, #3
 80089ce:	0019      	movs	r1, r3
 80089d0:	2358      	movs	r3, #88	; 0x58
 80089d2:	2218      	movs	r2, #24
 80089d4:	189b      	adds	r3, r3, r2
 80089d6:	19db      	adds	r3, r3, r7
 80089d8:	3305      	adds	r3, #5
 80089da:	4a51      	ldr	r2, [pc, #324]	; (8008b20 <astronode_send_cmd_rr+0x330>)
 80089dc:	2418      	movs	r4, #24
 80089de:	1900      	adds	r0, r0, r4
 80089e0:	19c0      	adds	r0, r0, r7
 80089e2:	6800      	ldr	r0, [r0, #0]
 80089e4:	f003 f8ba 	bl	800bb5c <snprintf>
 80089e8:	0002      	movs	r2, r0
 80089ea:	23f3      	movs	r3, #243	; 0xf3
 80089ec:	005b      	lsls	r3, r3, #1
 80089ee:	2118      	movs	r1, #24
 80089f0:	185b      	adds	r3, r3, r1
 80089f2:	19db      	adds	r3, r3, r7
 80089f4:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 80089f6:	23fb      	movs	r3, #251	; 0xfb
 80089f8:	005b      	lsls	r3, r3, #1
 80089fa:	2218      	movs	r2, #24
 80089fc:	189b      	adds	r3, r3, r2
 80089fe:	19db      	adds	r3, r3, r7
 8008a00:	2200      	movs	r2, #0
 8008a02:	701a      	strb	r2, [r3, #0]
 8008a04:	e036      	b.n	8008a74 <astronode_send_cmd_rr+0x284>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8008a06:	23fb      	movs	r3, #251	; 0xfb
 8008a08:	005b      	lsls	r3, r3, #1
 8008a0a:	2218      	movs	r2, #24
 8008a0c:	189b      	adds	r3, r3, r2
 8008a0e:	19db      	adds	r3, r3, r7
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	22f4      	movs	r2, #244	; 0xf4
 8008a14:	0052      	lsls	r2, r2, #1
 8008a16:	2118      	movs	r1, #24
 8008a18:	1852      	adds	r2, r2, r1
 8008a1a:	19d2      	adds	r2, r2, r7
 8008a1c:	6812      	ldr	r2, [r2, #0]
 8008a1e:	5cd3      	ldrb	r3, [r2, r3]
 8008a20:	1c5a      	adds	r2, r3, #1
 8008a22:	4b40      	ldr	r3, [pc, #256]	; (8008b24 <astronode_send_cmd_rr+0x334>)
 8008a24:	18d3      	adds	r3, r2, r3
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	001a      	movs	r2, r3
 8008a2a:	2397      	movs	r3, #151	; 0x97
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	d104      	bne.n	8008a3a <astronode_send_cmd_rr+0x24a>
                {
                    send_debug_logs("Command contains non printable characters");
 8008a30:	4b3d      	ldr	r3, [pc, #244]	; (8008b28 <astronode_send_cmd_rr+0x338>)
 8008a32:	0018      	movs	r0, r3
 8008a34:	f7fa fbf0 	bl	8003218 <send_debug_logs>
                    return;
 8008a38:	e056      	b.n	8008ae8 <astronode_send_cmd_rr+0x2f8>
                }
            	my_astro_rcv_cmd[index] = command_content[index] ;
 8008a3a:	20fb      	movs	r0, #251	; 0xfb
 8008a3c:	0040      	lsls	r0, r0, #1
 8008a3e:	2318      	movs	r3, #24
 8008a40:	18c3      	adds	r3, r0, r3
 8008a42:	19db      	adds	r3, r3, r7
 8008a44:	781a      	ldrb	r2, [r3, #0]
 8008a46:	2318      	movs	r3, #24
 8008a48:	18c3      	adds	r3, r0, r3
 8008a4a:	19db      	adds	r3, r3, r7
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	69f9      	ldr	r1, [r7, #28]
 8008a50:	18cb      	adds	r3, r1, r3
 8008a52:	21f4      	movs	r1, #244	; 0xf4
 8008a54:	0049      	lsls	r1, r1, #1
 8008a56:	2418      	movs	r4, #24
 8008a58:	1909      	adds	r1, r1, r4
 8008a5a:	19c9      	adds	r1, r1, r7
 8008a5c:	6809      	ldr	r1, [r1, #0]
 8008a5e:	5c8a      	ldrb	r2, [r1, r2]
 8008a60:	701a      	strb	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008a62:	2318      	movs	r3, #24
 8008a64:	18c3      	adds	r3, r0, r3
 8008a66:	19db      	adds	r3, r3, r7
 8008a68:	781a      	ldrb	r2, [r3, #0]
 8008a6a:	2318      	movs	r3, #24
 8008a6c:	18c3      	adds	r3, r0, r3
 8008a6e:	19db      	adds	r3, r3, r7
 8008a70:	3201      	adds	r2, #1
 8008a72:	701a      	strb	r2, [r3, #0]
 8008a74:	23fb      	movs	r3, #251	; 0xfb
 8008a76:	005b      	lsls	r3, r3, #1
 8008a78:	2218      	movs	r2, #24
 8008a7a:	189b      	adds	r3, r3, r2
 8008a7c:	19db      	adds	r3, r3, r7
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	21f3      	movs	r1, #243	; 0xf3
 8008a84:	0049      	lsls	r1, r1, #1
 8008a86:	2218      	movs	r2, #24
 8008a88:	188a      	adds	r2, r1, r2
 8008a8a:	19d2      	adds	r2, r2, r7
 8008a8c:	8812      	ldrh	r2, [r2, #0]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d8b9      	bhi.n	8008a06 <astronode_send_cmd_rr+0x216>
            }
            result = true ;
 8008a92:	23f8      	movs	r3, #248	; 0xf8
 8008a94:	33ff      	adds	r3, #255	; 0xff
 8008a96:	2218      	movs	r2, #24
 8008a98:	189b      	adds	r3, r3, r2
 8008a9a:	19db      	adds	r3, r3, r7
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	701a      	strb	r2, [r3, #0]
            my_astro_rcv_cmd[command_content_size] = 0 ;
 8008aa0:	2318      	movs	r3, #24
 8008aa2:	18cb      	adds	r3, r1, r3
 8008aa4:	19db      	adds	r3, r3, r7
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	69fa      	ldr	r2, [r7, #28]
 8008aaa:	18d3      	adds	r3, r2, r3
 8008aac:	2200      	movs	r2, #0
 8008aae:	701a      	strb	r2, [r3, #0]
            send_debug_logs("Command content is: ");
 8008ab0:	4b1e      	ldr	r3, [pc, #120]	; (8008b2c <astronode_send_cmd_rr+0x33c>)
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	f7fa fbb0 	bl	8003218 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8008ab8:	2358      	movs	r3, #88	; 0x58
 8008aba:	2218      	movs	r2, #24
 8008abc:	189b      	adds	r3, r3, r2
 8008abe:	19db      	adds	r3, r3, r7
 8008ac0:	1d5a      	adds	r2, r3, #5
 8008ac2:	491b      	ldr	r1, [pc, #108]	; (8008b30 <astronode_send_cmd_rr+0x340>)
 8008ac4:	24f4      	movs	r4, #244	; 0xf4
 8008ac6:	0064      	lsls	r4, r4, #1
 8008ac8:	2318      	movs	r3, #24
 8008aca:	18e3      	adds	r3, r4, r3
 8008acc:	19db      	adds	r3, r3, r7
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	f003 f877 	bl	800bbc4 <sprintf>
            send_debug_logs(command_content);
 8008ad6:	2318      	movs	r3, #24
 8008ad8:	18e3      	adds	r3, r4, r3
 8008ada:	19db      	adds	r3, r3, r7
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	0018      	movs	r0, r3
 8008ae0:	f7fa fb9a 	bl	8003218 <send_debug_logs>
 8008ae4:	46b5      	mov	sp, r6
 8008ae6:	e005      	b.n	8008af4 <astronode_send_cmd_rr+0x304>
                return;
 8008ae8:	46b5      	mov	sp, r6
 8008aea:	e009      	b.n	8008b00 <astronode_send_cmd_rr+0x310>
        }
        else
        {
            send_debug_logs("No command available.");
 8008aec:	4b11      	ldr	r3, [pc, #68]	; (8008b34 <astronode_send_cmd_rr+0x344>)
 8008aee:	0018      	movs	r0, r3
 8008af0:	f7fa fb92 	bl	8003218 <send_debug_logs>
        }
    }
    return result ;
 8008af4:	23f8      	movs	r3, #248	; 0xf8
 8008af6:	33ff      	adds	r3, #255	; 0xff
 8008af8:	2218      	movs	r2, #24
 8008afa:	189b      	adds	r3, r3, r2
 8008afc:	19db      	adds	r3, r3, r7
 8008afe:	781b      	ldrb	r3, [r3, #0]
}
 8008b00:	0018      	movs	r0, r3
 8008b02:	46bd      	mov	sp, r7
 8008b04:	2385      	movs	r3, #133	; 0x85
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	449d      	add	sp, r3
 8008b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b0c:	fffffdec 	.word	0xfffffdec
 8008b10:	fffffe60 	.word	0xfffffe60
 8008b14:	08013978 	.word	0x08013978
 8008b18:	08013994 	.word	0x08013994
 8008b1c:	080139e4 	.word	0x080139e4
 8008b20:	08013008 	.word	0x08013008
 8008b24:	08014528 	.word	0x08014528
 8008b28:	080139f8 	.word	0x080139f8
 8008b2c:	08013a24 	.word	0x08013a24
 8008b30:	08013a3c 	.word	0x08013a3c
 8008b34:	08013a40 	.word	0x08013a40

08008b38 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008b3c:	4b02      	ldr	r3, [pc, #8]	; (8008b48 <is_sak_available+0x10>)
 8008b3e:	781b      	ldrb	r3, [r3, #0]
}
 8008b40:	0018      	movs	r0, r3
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	46c0      	nop			; (mov r8, r8)
 8008b48:	20000b04 	.word	0x20000b04

08008b4c <is_astronode_reset>:

bool is_astronode_reset()
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008b50:	4b02      	ldr	r3, [pc, #8]	; (8008b5c <is_astronode_reset+0x10>)
 8008b52:	781b      	ldrb	r3, [r3, #0]
}
 8008b54:	0018      	movs	r0, r3
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	46c0      	nop			; (mov r8, r8)
 8008b5c:	20000b05 	.word	0x20000b05

08008b60 <is_command_available>:

bool is_command_available()
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8008b64:	4b02      	ldr	r3, [pc, #8]	; (8008b70 <is_command_available+0x10>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
}
 8008b68:	0018      	movs	r0, r3
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	46c0      	nop			; (mov r8, r8)
 8008b70:	20000b06 	.word	0x20000b06

08008b74 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	0002      	movs	r2, r0
 8008b7c:	6039      	str	r1, [r7, #0]
 8008b7e:	1dfb      	adds	r3, r7, #7
 8008b80:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8008b82:	1dfb      	adds	r3, r7, #7
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	2b2f      	cmp	r3, #47	; 0x2f
 8008b88:	d90b      	bls.n	8008ba2 <ascii_to_value+0x2e>
 8008b8a:	1dfb      	adds	r3, r7, #7
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b39      	cmp	r3, #57	; 0x39
 8008b90:	d807      	bhi.n	8008ba2 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8008b92:	1dfb      	adds	r3, r7, #7
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	3b30      	subs	r3, #48	; 0x30
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	701a      	strb	r2, [r3, #0]
        return true;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e010      	b.n	8008bc4 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8008ba2:	1dfb      	adds	r3, r7, #7
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	2b40      	cmp	r3, #64	; 0x40
 8008ba8:	d90b      	bls.n	8008bc2 <ascii_to_value+0x4e>
 8008baa:	1dfb      	adds	r3, r7, #7
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	2b46      	cmp	r3, #70	; 0x46
 8008bb0:	d807      	bhi.n	8008bc2 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8008bb2:	1dfb      	adds	r3, r7, #7
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	3b37      	subs	r3, #55	; 0x37
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	701a      	strb	r2, [r3, #0]
        return true;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e000      	b.n	8008bc4 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8008bc2:	2300      	movs	r3, #0
    }
}
 8008bc4:	0018      	movs	r0, r3
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	b002      	add	sp, #8
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8008bd6:	250e      	movs	r5, #14
 8008bd8:	197b      	adds	r3, r7, r5
 8008bda:	2200      	movs	r2, #0
 8008bdc:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8008bde:	197b      	adds	r3, r7, r5
 8008be0:	881b      	ldrh	r3, [r3, #0]
 8008be2:	197a      	adds	r2, r7, r5
 8008be4:	1c59      	adds	r1, r3, #1
 8008be6:	8011      	strh	r1, [r2, #0]
 8008be8:	001a      	movs	r2, r3
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	189b      	adds	r3, r3, r2
 8008bee:	2202      	movs	r2, #2
 8008bf0:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	260a      	movs	r6, #10
 8008bf6:	19bc      	adds	r4, r7, r6
 8008bf8:	4a44      	ldr	r2, [pc, #272]	; (8008d0c <astronode_create_request_transport+0x140>)
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	0018      	movs	r0, r3
 8008bfe:	f000 fa7d 	bl	80090fc <calculate_crc>
 8008c02:	0003      	movs	r3, r0
 8008c04:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	1c58      	adds	r0, r3, #1
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	22c4      	movs	r2, #196	; 0xc4
 8008c0e:	5a99      	ldrh	r1, [r3, r2]
 8008c10:	19bc      	adds	r4, r7, r6
 8008c12:	19bb      	adds	r3, r7, r6
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	001a      	movs	r2, r3
 8008c18:	f000 fa70 	bl	80090fc <calculate_crc>
 8008c1c:	0003      	movs	r3, r0
 8008c1e:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008c20:	19bb      	adds	r3, r7, r6
 8008c22:	881b      	ldrh	r3, [r3, #0]
 8008c24:	021b      	lsls	r3, r3, #8
 8008c26:	b21a      	sxth	r2, r3
 8008c28:	0031      	movs	r1, r6
 8008c2a:	19bb      	adds	r3, r7, r6
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	0a1b      	lsrs	r3, r3, #8
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	b21b      	sxth	r3, r3
 8008c34:	4313      	orrs	r3, r2
 8008c36:	b21a      	sxth	r2, r3
 8008c38:	187b      	adds	r3, r7, r1
 8008c3a:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	7818      	ldrb	r0, [r3, #0]
 8008c40:	197b      	adds	r3, r7, r5
 8008c42:	881b      	ldrh	r3, [r3, #0]
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	18d3      	adds	r3, r2, r3
 8008c48:	0019      	movs	r1, r3
 8008c4a:	f000 fbeb 	bl	8009424 <uint8_to_ascii_buffer>
    index += 2;
 8008c4e:	197b      	adds	r3, r7, r5
 8008c50:	197a      	adds	r2, r7, r5
 8008c52:	8812      	ldrh	r2, [r2, #0]
 8008c54:	3202      	adds	r2, #2
 8008c56:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008c58:	230c      	movs	r3, #12
 8008c5a:	18fb      	adds	r3, r7, r3
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	801a      	strh	r2, [r3, #0]
 8008c60:	e017      	b.n	8008c92 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8008c62:	240c      	movs	r4, #12
 8008c64:	193b      	adds	r3, r7, r4
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	18d3      	adds	r3, r2, r3
 8008c6c:	7858      	ldrb	r0, [r3, #1]
 8008c6e:	250e      	movs	r5, #14
 8008c70:	197b      	adds	r3, r7, r5
 8008c72:	881b      	ldrh	r3, [r3, #0]
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	18d3      	adds	r3, r2, r3
 8008c78:	0019      	movs	r1, r3
 8008c7a:	f000 fbd3 	bl	8009424 <uint8_to_ascii_buffer>
        index += 2;
 8008c7e:	197b      	adds	r3, r7, r5
 8008c80:	197a      	adds	r2, r7, r5
 8008c82:	8812      	ldrh	r2, [r2, #0]
 8008c84:	3202      	adds	r2, #2
 8008c86:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008c88:	193b      	adds	r3, r7, r4
 8008c8a:	881a      	ldrh	r2, [r3, #0]
 8008c8c:	193b      	adds	r3, r7, r4
 8008c8e:	3201      	adds	r2, #1
 8008c90:	801a      	strh	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	22c4      	movs	r2, #196	; 0xc4
 8008c96:	5a9b      	ldrh	r3, [r3, r2]
 8008c98:	220c      	movs	r2, #12
 8008c9a:	18ba      	adds	r2, r7, r2
 8008c9c:	8812      	ldrh	r2, [r2, #0]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d3df      	bcc.n	8008c62 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8008ca2:	250a      	movs	r5, #10
 8008ca4:	197b      	adds	r3, r7, r5
 8008ca6:	881b      	ldrh	r3, [r3, #0]
 8008ca8:	0a1b      	lsrs	r3, r3, #8
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	b2d8      	uxtb	r0, r3
 8008cae:	240e      	movs	r4, #14
 8008cb0:	193b      	adds	r3, r7, r4
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	683a      	ldr	r2, [r7, #0]
 8008cb6:	18d3      	adds	r3, r2, r3
 8008cb8:	0019      	movs	r1, r3
 8008cba:	f000 fbb3 	bl	8009424 <uint8_to_ascii_buffer>
    index += 2;
 8008cbe:	0021      	movs	r1, r4
 8008cc0:	187b      	adds	r3, r7, r1
 8008cc2:	187a      	adds	r2, r7, r1
 8008cc4:	8812      	ldrh	r2, [r2, #0]
 8008cc6:	3202      	adds	r2, #2
 8008cc8:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8008cca:	197b      	adds	r3, r7, r5
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	b2d8      	uxtb	r0, r3
 8008cd0:	000c      	movs	r4, r1
 8008cd2:	187b      	adds	r3, r7, r1
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	683a      	ldr	r2, [r7, #0]
 8008cd8:	18d3      	adds	r3, r2, r3
 8008cda:	0019      	movs	r1, r3
 8008cdc:	f000 fba2 	bl	8009424 <uint8_to_ascii_buffer>
    index += 2;
 8008ce0:	0020      	movs	r0, r4
 8008ce2:	183b      	adds	r3, r7, r0
 8008ce4:	183a      	adds	r2, r7, r0
 8008ce6:	8812      	ldrh	r2, [r2, #0]
 8008ce8:	3202      	adds	r2, #2
 8008cea:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008cec:	183b      	adds	r3, r7, r0
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	183a      	adds	r2, r7, r0
 8008cf2:	1c59      	adds	r1, r3, #1
 8008cf4:	8011      	strh	r1, [r2, #0]
 8008cf6:	001a      	movs	r2, r3
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	189b      	adds	r3, r3, r2
 8008cfc:	2203      	movs	r2, #3
 8008cfe:	701a      	strb	r2, [r3, #0]

    return index;
 8008d00:	183b      	adds	r3, r7, r0
 8008d02:	881b      	ldrh	r3, [r3, #0]
}
 8008d04:	0018      	movs	r0, r3
 8008d06:	46bd      	mov	sp, r7
 8008d08:	b005      	add	sp, #20
 8008d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d0c:	0000ffff 	.word	0x0000ffff

08008d10 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8008d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d12:	b089      	sub	sp, #36	; 0x24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	607a      	str	r2, [r7, #4]
 8008d1a:	230a      	movs	r3, #10
 8008d1c:	18fb      	adds	r3, r7, r3
 8008d1e:	1c0a      	adds	r2, r1, #0
 8008d20:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d005      	beq.n	8008d36 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8008d2a:	4bbd      	ldr	r3, [pc, #756]	; (8009020 <astronode_decode_answer_transport+0x310>)
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	f7fa fa73 	bl	8003218 <send_debug_logs>
        return RS_FAILURE;
 8008d32:	2300      	movs	r3, #0
 8008d34:	e170      	b.n	8009018 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8008d36:	210a      	movs	r1, #10
 8008d38:	187b      	adds	r3, r7, r1
 8008d3a:	881b      	ldrh	r3, [r3, #0]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	4013      	ands	r3, r2
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d103      	bne.n	8008d4e <astronode_decode_answer_transport+0x3e>
 8008d46:	187b      	adds	r3, r7, r1
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	2b07      	cmp	r3, #7
 8008d4c:	d805      	bhi.n	8008d5a <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8008d4e:	4bb5      	ldr	r3, [pc, #724]	; (8009024 <astronode_decode_answer_transport+0x314>)
 8008d50:	0018      	movs	r0, r3
 8008d52:	f7fa fa61 	bl	8003218 <send_debug_logs>
        return RS_FAILURE;
 8008d56:	2300      	movs	r3, #0
 8008d58:	e15e      	b.n	8009018 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8008d5a:	230a      	movs	r3, #10
 8008d5c:	18fb      	adds	r3, r7, r3
 8008d5e:	881b      	ldrh	r3, [r3, #0]
 8008d60:	3b08      	subs	r3, #8
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	da00      	bge.n	8008d68 <astronode_decode_answer_transport+0x58>
 8008d66:	3301      	adds	r3, #1
 8008d68:	105b      	asrs	r3, r3, #1
 8008d6a:	b299      	uxth	r1, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	22c4      	movs	r2, #196	; 0xc4
 8008d70:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8008d72:	230a      	movs	r3, #10
 8008d74:	18fb      	adds	r3, r7, r3
 8008d76:	881b      	ldrh	r3, [r3, #0]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	18d3      	adds	r3, r2, r3
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b03      	cmp	r3, #3
 8008d82:	d005      	beq.n	8008d90 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8008d84:	4ba8      	ldr	r3, [pc, #672]	; (8009028 <astronode_decode_answer_transport+0x318>)
 8008d86:	0018      	movs	r0, r3
 8008d88:	f7fa fa46 	bl	8003218 <send_debug_logs>
        return RS_FAILURE;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	e143      	b.n	8009018 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8008d90:	2117      	movs	r1, #23
 8008d92:	187b      	adds	r3, r7, r1
 8008d94:	2200      	movs	r2, #0
 8008d96:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8008d98:	2416      	movs	r4, #22
 8008d9a:	193b      	adds	r3, r7, r4
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3301      	adds	r3, #1
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	187a      	adds	r2, r7, r1
 8008da8:	0011      	movs	r1, r2
 8008daa:	0018      	movs	r0, r3
 8008dac:	f7ff fee2 	bl	8008b74 <ascii_to_value>
 8008db0:	0003      	movs	r3, r0
 8008db2:	001a      	movs	r2, r3
 8008db4:	2301      	movs	r3, #1
 8008db6:	4053      	eors	r3, r2
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10e      	bne.n	8008ddc <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	3302      	adds	r3, #2
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	193a      	adds	r2, r7, r4
 8008dc6:	0011      	movs	r1, r2
 8008dc8:	0018      	movs	r0, r3
 8008dca:	f7ff fed3 	bl	8008b74 <ascii_to_value>
 8008dce:	0003      	movs	r3, r0
 8008dd0:	001a      	movs	r2, r3
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	4053      	eors	r3, r2
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d005      	beq.n	8008de8 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008ddc:	4b93      	ldr	r3, [pc, #588]	; (800902c <astronode_decode_answer_transport+0x31c>)
 8008dde:	0018      	movs	r0, r3
 8008de0:	f7fa fa1a 	bl	8003218 <send_debug_logs>
        return RS_FAILURE;
 8008de4:	2300      	movs	r3, #0
 8008de6:	e117      	b.n	8009018 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8008de8:	2317      	movs	r3, #23
 8008dea:	18fb      	adds	r3, r7, r3
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	011b      	lsls	r3, r3, #4
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	2316      	movs	r3, #22
 8008df4:	18fb      	adds	r3, r7, r3
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	18d3      	adds	r3, r2, r3
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008e00:	231e      	movs	r3, #30
 8008e02:	18fb      	adds	r3, r7, r3
 8008e04:	2203      	movs	r2, #3
 8008e06:	801a      	strh	r2, [r3, #0]
 8008e08:	231c      	movs	r3, #28
 8008e0a:	18fb      	adds	r3, r7, r3
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	801a      	strh	r2, [r3, #0]
 8008e10:	e045      	b.n	8008e9e <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8008e12:	241e      	movs	r4, #30
 8008e14:	193b      	adds	r3, r7, r4
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	18d3      	adds	r3, r2, r3
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	2217      	movs	r2, #23
 8008e20:	18ba      	adds	r2, r7, r2
 8008e22:	0011      	movs	r1, r2
 8008e24:	0018      	movs	r0, r3
 8008e26:	f7ff fea5 	bl	8008b74 <ascii_to_value>
 8008e2a:	0003      	movs	r3, r0
 8008e2c:	001a      	movs	r2, r3
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4053      	eors	r3, r2
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d112      	bne.n	8008e5e <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8008e38:	193b      	adds	r3, r7, r4
 8008e3a:	881b      	ldrh	r3, [r3, #0]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	18d3      	adds	r3, r2, r3
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	2216      	movs	r2, #22
 8008e46:	18ba      	adds	r2, r7, r2
 8008e48:	0011      	movs	r1, r2
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	f7ff fe92 	bl	8008b74 <ascii_to_value>
 8008e50:	0003      	movs	r3, r0
 8008e52:	001a      	movs	r2, r3
 8008e54:	2301      	movs	r3, #1
 8008e56:	4053      	eors	r3, r2
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d005      	beq.n	8008e6a <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008e5e:	4b73      	ldr	r3, [pc, #460]	; (800902c <astronode_decode_answer_transport+0x31c>)
 8008e60:	0018      	movs	r0, r3
 8008e62:	f7fa f9d9 	bl	8003218 <send_debug_logs>
            return RS_FAILURE;
 8008e66:	2300      	movs	r3, #0
 8008e68:	e0d6      	b.n	8009018 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8008e6a:	2317      	movs	r3, #23
 8008e6c:	18fb      	adds	r3, r7, r3
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	011b      	lsls	r3, r3, #4
 8008e72:	b2d9      	uxtb	r1, r3
 8008e74:	2316      	movs	r3, #22
 8008e76:	18fb      	adds	r3, r7, r3
 8008e78:	781a      	ldrb	r2, [r3, #0]
 8008e7a:	201c      	movs	r0, #28
 8008e7c:	183b      	adds	r3, r7, r0
 8008e7e:	881b      	ldrh	r3, [r3, #0]
 8008e80:	1838      	adds	r0, r7, r0
 8008e82:	1c5c      	adds	r4, r3, #1
 8008e84:	8004      	strh	r4, [r0, #0]
 8008e86:	0018      	movs	r0, r3
 8008e88:	188b      	adds	r3, r1, r2
 8008e8a:	b2da      	uxtb	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	181b      	adds	r3, r3, r0
 8008e90:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008e92:	221e      	movs	r2, #30
 8008e94:	18bb      	adds	r3, r7, r2
 8008e96:	18ba      	adds	r2, r7, r2
 8008e98:	8812      	ldrh	r2, [r2, #0]
 8008e9a:	3202      	adds	r2, #2
 8008e9c:	801a      	strh	r2, [r3, #0]
 8008e9e:	231e      	movs	r3, #30
 8008ea0:	18fb      	adds	r3, r7, r3
 8008ea2:	881a      	ldrh	r2, [r3, #0]
 8008ea4:	260a      	movs	r6, #10
 8008ea6:	19bb      	adds	r3, r7, r6
 8008ea8:	881b      	ldrh	r3, [r3, #0]
 8008eaa:	3b05      	subs	r3, #5
 8008eac:	429a      	cmp	r2, r3
 8008eae:	dbb0      	blt.n	8008e12 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	251a      	movs	r5, #26
 8008eb4:	197c      	adds	r4, r7, r5
 8008eb6:	4a5e      	ldr	r2, [pc, #376]	; (8009030 <astronode_decode_answer_transport+0x320>)
 8008eb8:	2101      	movs	r1, #1
 8008eba:	0018      	movs	r0, r3
 8008ebc:	f000 f91e 	bl	80090fc <calculate_crc>
 8008ec0:	0003      	movs	r3, r0
 8008ec2:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	1c58      	adds	r0, r3, #1
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	22c4      	movs	r2, #196	; 0xc4
 8008ecc:	5a99      	ldrh	r1, [r3, r2]
 8008ece:	197c      	adds	r4, r7, r5
 8008ed0:	197b      	adds	r3, r7, r5
 8008ed2:	881b      	ldrh	r3, [r3, #0]
 8008ed4:	001a      	movs	r2, r3
 8008ed6:	f000 f911 	bl	80090fc <calculate_crc>
 8008eda:	0003      	movs	r3, r0
 8008edc:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8008ede:	197b      	adds	r3, r7, r5
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	021b      	lsls	r3, r3, #8
 8008ee4:	b21a      	sxth	r2, r3
 8008ee6:	0029      	movs	r1, r5
 8008ee8:	197b      	adds	r3, r7, r5
 8008eea:	881b      	ldrh	r3, [r3, #0]
 8008eec:	0a1b      	lsrs	r3, r3, #8
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	b21b      	sxth	r3, r3
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	b21a      	sxth	r2, r3
 8008ef6:	187b      	adds	r3, r7, r1
 8008ef8:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8008efa:	19bb      	adds	r3, r7, r6
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	3b05      	subs	r3, #5
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	18d3      	adds	r3, r2, r3
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	2217      	movs	r2, #23
 8008f08:	18ba      	adds	r2, r7, r2
 8008f0a:	0011      	movs	r1, r2
 8008f0c:	0018      	movs	r0, r3
 8008f0e:	f7ff fe31 	bl	8008b74 <ascii_to_value>
 8008f12:	0003      	movs	r3, r0
 8008f14:	001a      	movs	r2, r3
 8008f16:	2301      	movs	r3, #1
 8008f18:	4053      	eors	r3, r2
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d112      	bne.n	8008f46 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8008f20:	19bb      	adds	r3, r7, r6
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	3b04      	subs	r3, #4
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	18d3      	adds	r3, r2, r3
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	2216      	movs	r2, #22
 8008f2e:	18ba      	adds	r2, r7, r2
 8008f30:	0011      	movs	r1, r2
 8008f32:	0018      	movs	r0, r3
 8008f34:	f7ff fe1e 	bl	8008b74 <ascii_to_value>
 8008f38:	0003      	movs	r3, r0
 8008f3a:	001a      	movs	r2, r3
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	4053      	eors	r3, r2
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d005      	beq.n	8008f52 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008f46:	4b39      	ldr	r3, [pc, #228]	; (800902c <astronode_decode_answer_transport+0x31c>)
 8008f48:	0018      	movs	r0, r3
 8008f4a:	f7fa f965 	bl	8003218 <send_debug_logs>
        return RS_FAILURE;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e062      	b.n	8009018 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8008f52:	2017      	movs	r0, #23
 8008f54:	183b      	adds	r3, r7, r0
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	031b      	lsls	r3, r3, #12
 8008f5c:	b299      	uxth	r1, r3
 8008f5e:	2416      	movs	r4, #22
 8008f60:	193b      	adds	r3, r7, r4
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	021b      	lsls	r3, r3, #8
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	2318      	movs	r3, #24
 8008f6c:	18fb      	adds	r3, r7, r3
 8008f6e:	188a      	adds	r2, r1, r2
 8008f70:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8008f72:	250a      	movs	r5, #10
 8008f74:	197b      	adds	r3, r7, r5
 8008f76:	881b      	ldrh	r3, [r3, #0]
 8008f78:	3b03      	subs	r3, #3
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	18d3      	adds	r3, r2, r3
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	183a      	adds	r2, r7, r0
 8008f82:	0011      	movs	r1, r2
 8008f84:	0018      	movs	r0, r3
 8008f86:	f7ff fdf5 	bl	8008b74 <ascii_to_value>
 8008f8a:	0003      	movs	r3, r0
 8008f8c:	001a      	movs	r2, r3
 8008f8e:	2301      	movs	r3, #1
 8008f90:	4053      	eors	r3, r2
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d111      	bne.n	8008fbc <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8008f98:	197b      	adds	r3, r7, r5
 8008f9a:	881b      	ldrh	r3, [r3, #0]
 8008f9c:	3b02      	subs	r3, #2
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	18d3      	adds	r3, r2, r3
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	193a      	adds	r2, r7, r4
 8008fa6:	0011      	movs	r1, r2
 8008fa8:	0018      	movs	r0, r3
 8008faa:	f7ff fde3 	bl	8008b74 <ascii_to_value>
 8008fae:	0003      	movs	r3, r0
 8008fb0:	001a      	movs	r2, r3
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	4053      	eors	r3, r2
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d005      	beq.n	8008fc8 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008fbc:	4b1b      	ldr	r3, [pc, #108]	; (800902c <astronode_decode_answer_transport+0x31c>)
 8008fbe:	0018      	movs	r0, r3
 8008fc0:	f7fa f92a 	bl	8003218 <send_debug_logs>
        return RS_FAILURE;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	e027      	b.n	8009018 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8008fc8:	2317      	movs	r3, #23
 8008fca:	18fb      	adds	r3, r7, r3
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	011b      	lsls	r3, r3, #4
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	2316      	movs	r3, #22
 8008fd6:	18fb      	adds	r3, r7, r3
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	18d3      	adds	r3, r2, r3
 8008fde:	b299      	uxth	r1, r3
 8008fe0:	2018      	movs	r0, #24
 8008fe2:	183b      	adds	r3, r7, r0
 8008fe4:	183a      	adds	r2, r7, r0
 8008fe6:	8812      	ldrh	r2, [r2, #0]
 8008fe8:	188a      	adds	r2, r1, r2
 8008fea:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8008fec:	183a      	adds	r2, r7, r0
 8008fee:	231a      	movs	r3, #26
 8008ff0:	18fb      	adds	r3, r7, r3
 8008ff2:	8812      	ldrh	r2, [r2, #0]
 8008ff4:	881b      	ldrh	r3, [r3, #0]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d005      	beq.n	8009006 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8008ffa:	4b0e      	ldr	r3, [pc, #56]	; (8009034 <astronode_decode_answer_transport+0x324>)
 8008ffc:	0018      	movs	r0, r3
 8008ffe:	f7fa f90b 	bl	8003218 <send_debug_logs>
        return RS_FAILURE;
 8009002:	2300      	movs	r3, #0
 8009004:	e008      	b.n	8009018 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	2bff      	cmp	r3, #255	; 0xff
 800900c:	d103      	bne.n	8009016 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	0018      	movs	r0, r3
 8009012:	f000 f8c3 	bl	800919c <check_for_error>
    }

    return RS_SUCCESS;
 8009016:	2301      	movs	r3, #1
}
 8009018:	0018      	movs	r0, r3
 800901a:	46bd      	mov	sp, r7
 800901c:	b009      	add	sp, #36	; 0x24
 800901e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009020:	08013ad0 	.word	0x08013ad0
 8009024:	08013b20 	.word	0x08013b20
 8009028:	08013b70 	.word	0x08013b70
 800902c:	08013bc0 	.word	0x08013bc0
 8009030:	0000ffff 	.word	0x0000ffff
 8009034:	08013c0c 	.word	0x08013c0c

08009038 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8009038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800903a:	4c2b      	ldr	r4, [pc, #172]	; (80090e8 <astronode_transport_send_receive+0xb0>)
 800903c:	44a5      	add	sp, r4
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8009044:	4b29      	ldr	r3, [pc, #164]	; (80090ec <astronode_transport_send_receive+0xb4>)
 8009046:	25ca      	movs	r5, #202	; 0xca
 8009048:	00ad      	lsls	r5, r5, #2
 800904a:	195b      	adds	r3, r3, r5
 800904c:	19db      	adds	r3, r3, r7
 800904e:	2200      	movs	r2, #0
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	3304      	adds	r3, #4
 8009054:	22c4      	movs	r2, #196	; 0xc4
 8009056:	0052      	lsls	r2, r2, #1
 8009058:	2100      	movs	r1, #0
 800905a:	0018      	movs	r0, r3
 800905c:	f002 fe48 	bl	800bcf0 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8009060:	4b23      	ldr	r3, [pc, #140]	; (80090f0 <astronode_transport_send_receive+0xb8>)
 8009062:	195b      	adds	r3, r3, r5
 8009064:	19db      	adds	r3, r3, r7
 8009066:	2200      	movs	r2, #0
 8009068:	601a      	str	r2, [r3, #0]
 800906a:	3304      	adds	r3, #4
 800906c:	22c4      	movs	r2, #196	; 0xc4
 800906e:	0052      	lsls	r2, r2, #1
 8009070:	2100      	movs	r1, #0
 8009072:	0018      	movs	r0, r3
 8009074:	f002 fe3c 	bl	800bcf0 <memset>
    uint16_t answer_length =  0;
 8009078:	4b1e      	ldr	r3, [pc, #120]	; (80090f4 <astronode_transport_send_receive+0xbc>)
 800907a:	195b      	adds	r3, r3, r5
 800907c:	19db      	adds	r3, r3, r7
 800907e:	2200      	movs	r2, #0
 8009080:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8009082:	4e1d      	ldr	r6, [pc, #116]	; (80090f8 <astronode_transport_send_receive+0xc0>)
 8009084:	19bc      	adds	r4, r7, r6
 8009086:	23cc      	movs	r3, #204	; 0xcc
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	18fa      	adds	r2, r7, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	0011      	movs	r1, r2
 8009090:	0018      	movs	r0, r3
 8009092:	f7ff fd9b 	bl	8008bcc <astronode_create_request_transport>
 8009096:	0003      	movs	r3, r0
 8009098:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 800909a:	19bb      	adds	r3, r7, r6
 800909c:	881a      	ldrh	r2, [r3, #0]
 800909e:	23cc      	movs	r3, #204	; 0xcc
 80090a0:	005b      	lsls	r3, r3, #1
 80090a2:	18fb      	adds	r3, r7, r3
 80090a4:	0011      	movs	r1, r2
 80090a6:	0018      	movs	r0, r3
 80090a8:	f7fa fa1c 	bl	80034e4 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 80090ac:	230a      	movs	r3, #10
 80090ae:	18fa      	adds	r2, r7, r3
 80090b0:	240c      	movs	r4, #12
 80090b2:	193b      	adds	r3, r7, r4
 80090b4:	0011      	movs	r1, r2
 80090b6:	0018      	movs	r0, r3
 80090b8:	f000 f92c 	bl	8009314 <receive_astronode_answer>
 80090bc:	0003      	movs	r3, r0
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d10a      	bne.n	80090d8 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 80090c2:	4b0c      	ldr	r3, [pc, #48]	; (80090f4 <astronode_transport_send_receive+0xbc>)
 80090c4:	195b      	adds	r3, r3, r5
 80090c6:	19db      	adds	r3, r3, r7
 80090c8:	8819      	ldrh	r1, [r3, #0]
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	193b      	adds	r3, r7, r4
 80090ce:	0018      	movs	r0, r3
 80090d0:	f7ff fe1e 	bl	8008d10 <astronode_decode_answer_transport>
 80090d4:	0003      	movs	r3, r0
 80090d6:	e000      	b.n	80090da <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 80090d8:	2300      	movs	r3, #0
    }
}
 80090da:	0018      	movs	r0, r3
 80090dc:	46bd      	mov	sp, r7
 80090de:	23cb      	movs	r3, #203	; 0xcb
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	449d      	add	sp, r3
 80090e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090e6:	46c0      	nop			; (mov r8, r8)
 80090e8:	fffffcd4 	.word	0xfffffcd4
 80090ec:	fffffe70 	.word	0xfffffe70
 80090f0:	fffffce4 	.word	0xfffffce4
 80090f4:	fffffce2 	.word	0xfffffce2
 80090f8:	00000326 	.word	0x00000326

080090fc <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 80090fc:	b590      	push	{r4, r7, lr}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	0008      	movs	r0, r1
 8009106:	0011      	movs	r1, r2
 8009108:	1cbb      	adds	r3, r7, #2
 800910a:	1c02      	adds	r2, r0, #0
 800910c:	801a      	strh	r2, [r3, #0]
 800910e:	003b      	movs	r3, r7
 8009110:	1c0a      	adds	r2, r1, #0
 8009112:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8009114:	230e      	movs	r3, #14
 8009116:	18fb      	adds	r3, r7, r3
 8009118:	003a      	movs	r2, r7
 800911a:	8812      	ldrh	r2, [r2, #0]
 800911c:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800911e:	e02e      	b.n	800917e <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8009120:	240e      	movs	r4, #14
 8009122:	193b      	adds	r3, r7, r4
 8009124:	881b      	ldrh	r3, [r3, #0]
 8009126:	0a1b      	lsrs	r3, r3, #8
 8009128:	b299      	uxth	r1, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	1c5a      	adds	r2, r3, #1
 800912e:	607a      	str	r2, [r7, #4]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	b29a      	uxth	r2, r3
 8009134:	200c      	movs	r0, #12
 8009136:	183b      	adds	r3, r7, r0
 8009138:	404a      	eors	r2, r1
 800913a:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 800913c:	183b      	adds	r3, r7, r0
 800913e:	881b      	ldrh	r3, [r3, #0]
 8009140:	091b      	lsrs	r3, r3, #4
 8009142:	b299      	uxth	r1, r3
 8009144:	183b      	adds	r3, r7, r0
 8009146:	183a      	adds	r2, r7, r0
 8009148:	8812      	ldrh	r2, [r2, #0]
 800914a:	404a      	eors	r2, r1
 800914c:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 800914e:	0021      	movs	r1, r4
 8009150:	187b      	adds	r3, r7, r1
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	021b      	lsls	r3, r3, #8
 8009156:	b21a      	sxth	r2, r3
 8009158:	183b      	adds	r3, r7, r0
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	031b      	lsls	r3, r3, #12
 800915e:	b21b      	sxth	r3, r3
 8009160:	4053      	eors	r3, r2
 8009162:	b21a      	sxth	r2, r3
 8009164:	183b      	adds	r3, r7, r0
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	015b      	lsls	r3, r3, #5
 800916a:	b21b      	sxth	r3, r3
 800916c:	4053      	eors	r3, r2
 800916e:	b21a      	sxth	r2, r3
 8009170:	183b      	adds	r3, r7, r0
 8009172:	2000      	movs	r0, #0
 8009174:	5e1b      	ldrsh	r3, [r3, r0]
 8009176:	4053      	eors	r3, r2
 8009178:	b21a      	sxth	r2, r3
 800917a:	187b      	adds	r3, r7, r1
 800917c:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 800917e:	1cbb      	adds	r3, r7, #2
 8009180:	881b      	ldrh	r3, [r3, #0]
 8009182:	1cba      	adds	r2, r7, #2
 8009184:	1e59      	subs	r1, r3, #1
 8009186:	8011      	strh	r1, [r2, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1c9      	bne.n	8009120 <calculate_crc+0x24>
    }
    return crc;
 800918c:	230e      	movs	r3, #14
 800918e:	18fb      	adds	r3, r7, r3
 8009190:	881b      	ldrh	r3, [r3, #0]
}
 8009192:	0018      	movs	r0, r3
 8009194:	46bd      	mov	sp, r7
 8009196:	b005      	add	sp, #20
 8009198:	bd90      	pop	{r4, r7, pc}
	...

0800919c <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	785b      	ldrb	r3, [r3, #1]
 80091a8:	b299      	uxth	r1, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	789b      	ldrb	r3, [r3, #2]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	021b      	lsls	r3, r3, #8
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	200e      	movs	r0, #14
 80091b6:	183b      	adds	r3, r7, r0
 80091b8:	188a      	adds	r2, r1, r2
 80091ba:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 80091bc:	183b      	adds	r3, r7, r0
 80091be:	881b      	ldrh	r3, [r3, #0]
 80091c0:	4a40      	ldr	r2, [pc, #256]	; (80092c4 <check_for_error+0x128>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d100      	bne.n	80091c8 <check_for_error+0x2c>
 80091c6:	e06f      	b.n	80092a8 <check_for_error+0x10c>
 80091c8:	4a3e      	ldr	r2, [pc, #248]	; (80092c4 <check_for_error+0x128>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	dd00      	ble.n	80091d0 <check_for_error+0x34>
 80091ce:	e070      	b.n	80092b2 <check_for_error+0x116>
 80091d0:	4a3d      	ldr	r2, [pc, #244]	; (80092c8 <check_for_error+0x12c>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d100      	bne.n	80091d8 <check_for_error+0x3c>
 80091d6:	e062      	b.n	800929e <check_for_error+0x102>
 80091d8:	4a3b      	ldr	r2, [pc, #236]	; (80092c8 <check_for_error+0x12c>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	dd00      	ble.n	80091e0 <check_for_error+0x44>
 80091de:	e068      	b.n	80092b2 <check_for_error+0x116>
 80091e0:	4a3a      	ldr	r2, [pc, #232]	; (80092cc <check_for_error+0x130>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d056      	beq.n	8009294 <check_for_error+0xf8>
 80091e6:	4a39      	ldr	r2, [pc, #228]	; (80092cc <check_for_error+0x130>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	dd00      	ble.n	80091ee <check_for_error+0x52>
 80091ec:	e061      	b.n	80092b2 <check_for_error+0x116>
 80091ee:	4a38      	ldr	r2, [pc, #224]	; (80092d0 <check_for_error+0x134>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d04a      	beq.n	800928a <check_for_error+0xee>
 80091f4:	4a36      	ldr	r2, [pc, #216]	; (80092d0 <check_for_error+0x134>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	dc5b      	bgt.n	80092b2 <check_for_error+0x116>
 80091fa:	4a36      	ldr	r2, [pc, #216]	; (80092d4 <check_for_error+0x138>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d03f      	beq.n	8009280 <check_for_error+0xe4>
 8009200:	4a34      	ldr	r2, [pc, #208]	; (80092d4 <check_for_error+0x138>)
 8009202:	4293      	cmp	r3, r2
 8009204:	dc55      	bgt.n	80092b2 <check_for_error+0x116>
 8009206:	4a34      	ldr	r2, [pc, #208]	; (80092d8 <check_for_error+0x13c>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d034      	beq.n	8009276 <check_for_error+0xda>
 800920c:	4a32      	ldr	r2, [pc, #200]	; (80092d8 <check_for_error+0x13c>)
 800920e:	4293      	cmp	r3, r2
 8009210:	dc4f      	bgt.n	80092b2 <check_for_error+0x116>
 8009212:	4a32      	ldr	r2, [pc, #200]	; (80092dc <check_for_error+0x140>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d029      	beq.n	800926c <check_for_error+0xd0>
 8009218:	4a30      	ldr	r2, [pc, #192]	; (80092dc <check_for_error+0x140>)
 800921a:	4293      	cmp	r3, r2
 800921c:	dc49      	bgt.n	80092b2 <check_for_error+0x116>
 800921e:	4a30      	ldr	r2, [pc, #192]	; (80092e0 <check_for_error+0x144>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d01e      	beq.n	8009262 <check_for_error+0xc6>
 8009224:	4a2e      	ldr	r2, [pc, #184]	; (80092e0 <check_for_error+0x144>)
 8009226:	4293      	cmp	r3, r2
 8009228:	dc43      	bgt.n	80092b2 <check_for_error+0x116>
 800922a:	2222      	movs	r2, #34	; 0x22
 800922c:	32ff      	adds	r2, #255	; 0xff
 800922e:	4293      	cmp	r3, r2
 8009230:	d012      	beq.n	8009258 <check_for_error+0xbc>
 8009232:	2291      	movs	r2, #145	; 0x91
 8009234:	0052      	lsls	r2, r2, #1
 8009236:	4293      	cmp	r3, r2
 8009238:	da3b      	bge.n	80092b2 <check_for_error+0x116>
 800923a:	2b01      	cmp	r3, #1
 800923c:	d002      	beq.n	8009244 <check_for_error+0xa8>
 800923e:	2b11      	cmp	r3, #17
 8009240:	d005      	beq.n	800924e <check_for_error+0xb2>
 8009242:	e036      	b.n	80092b2 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8009244:	4b27      	ldr	r3, [pc, #156]	; (80092e4 <check_for_error+0x148>)
 8009246:	0018      	movs	r0, r3
 8009248:	f7f9 ffe6 	bl	8003218 <send_debug_logs>
            break;
 800924c:	e036      	b.n	80092bc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 800924e:	4b26      	ldr	r3, [pc, #152]	; (80092e8 <check_for_error+0x14c>)
 8009250:	0018      	movs	r0, r3
 8009252:	f7f9 ffe1 	bl	8003218 <send_debug_logs>
            break;
 8009256:	e031      	b.n	80092bc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8009258:	4b24      	ldr	r3, [pc, #144]	; (80092ec <check_for_error+0x150>)
 800925a:	0018      	movs	r0, r3
 800925c:	f7f9 ffdc 	bl	8003218 <send_debug_logs>
            break;
 8009260:	e02c      	b.n	80092bc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8009262:	4b23      	ldr	r3, [pc, #140]	; (80092f0 <check_for_error+0x154>)
 8009264:	0018      	movs	r0, r3
 8009266:	f7f9 ffd7 	bl	8003218 <send_debug_logs>
            break;
 800926a:	e027      	b.n	80092bc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 800926c:	4b21      	ldr	r3, [pc, #132]	; (80092f4 <check_for_error+0x158>)
 800926e:	0018      	movs	r0, r3
 8009270:	f7f9 ffd2 	bl	8003218 <send_debug_logs>
            break;
 8009274:	e022      	b.n	80092bc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8009276:	4b20      	ldr	r3, [pc, #128]	; (80092f8 <check_for_error+0x15c>)
 8009278:	0018      	movs	r0, r3
 800927a:	f7f9 ffcd 	bl	8003218 <send_debug_logs>
            break;
 800927e:	e01d      	b.n	80092bc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8009280:	4b1e      	ldr	r3, [pc, #120]	; (80092fc <check_for_error+0x160>)
 8009282:	0018      	movs	r0, r3
 8009284:	f7f9 ffc8 	bl	8003218 <send_debug_logs>
            break;
 8009288:	e018      	b.n	80092bc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 800928a:	4b1d      	ldr	r3, [pc, #116]	; (8009300 <check_for_error+0x164>)
 800928c:	0018      	movs	r0, r3
 800928e:	f7f9 ffc3 	bl	8003218 <send_debug_logs>
            break;
 8009292:	e013      	b.n	80092bc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8009294:	4b1b      	ldr	r3, [pc, #108]	; (8009304 <check_for_error+0x168>)
 8009296:	0018      	movs	r0, r3
 8009298:	f7f9 ffbe 	bl	8003218 <send_debug_logs>
            break;
 800929c:	e00e      	b.n	80092bc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 800929e:	4b1a      	ldr	r3, [pc, #104]	; (8009308 <check_for_error+0x16c>)
 80092a0:	0018      	movs	r0, r3
 80092a2:	f7f9 ffb9 	bl	8003218 <send_debug_logs>
            break;
 80092a6:	e009      	b.n	80092bc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 80092a8:	4b18      	ldr	r3, [pc, #96]	; (800930c <check_for_error+0x170>)
 80092aa:	0018      	movs	r0, r3
 80092ac:	f7f9 ffb4 	bl	8003218 <send_debug_logs>
            break;
 80092b0:	e004      	b.n	80092bc <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 80092b2:	4b17      	ldr	r3, [pc, #92]	; (8009310 <check_for_error+0x174>)
 80092b4:	0018      	movs	r0, r3
 80092b6:	f7f9 ffaf 	bl	8003218 <send_debug_logs>
            break;
 80092ba:	46c0      	nop			; (mov r8, r8)
    }
}
 80092bc:	46c0      	nop			; (mov r8, r8)
 80092be:	46bd      	mov	sp, r7
 80092c0:	b004      	add	sp, #16
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	00004601 	.word	0x00004601
 80092c8:	00004501 	.word	0x00004501
 80092cc:	00003501 	.word	0x00003501
 80092d0:	00002601 	.word	0x00002601
 80092d4:	00002511 	.word	0x00002511
 80092d8:	00002501 	.word	0x00002501
 80092dc:	00000611 	.word	0x00000611
 80092e0:	00000601 	.word	0x00000601
 80092e4:	08013c50 	.word	0x08013c50
 80092e8:	08013c9c 	.word	0x08013c9c
 80092ec:	08013d00 	.word	0x08013d00
 80092f0:	08013d38 	.word	0x08013d38
 80092f4:	08013ddc 	.word	0x08013ddc
 80092f8:	08013e44 	.word	0x08013e44
 80092fc:	08013ea4 	.word	0x08013ea4
 8009300:	08013f30 	.word	0x08013f30
 8009304:	08013f90 	.word	0x08013f90
 8009308:	0801403c 	.word	0x0801403c
 800930c:	08014088 	.word	0x08014088
 8009310:	080140d0 	.word	0x080140d0

08009314 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8009314:	b5b0      	push	{r4, r5, r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 800931e:	230f      	movs	r3, #15
 8009320:	18fb      	adds	r3, r7, r3
 8009322:	2200      	movs	r2, #0
 8009324:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 8009326:	2316      	movs	r3, #22
 8009328:	18fb      	adds	r3, r7, r3
 800932a:	2200      	movs	r2, #0
 800932c:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 800932e:	f7fa f8f7 	bl	8003520 <get_systick>
 8009332:	0003      	movs	r3, r0
 8009334:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8009336:	2315      	movs	r3, #21
 8009338:	18fb      	adds	r3, r7, r3
 800933a:	2200      	movs	r2, #0
 800933c:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 800933e:	e054      	b.n	80093ea <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8009340:	4a34      	ldr	r2, [pc, #208]	; (8009414 <receive_astronode_answer+0x100>)
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	0011      	movs	r1, r2
 8009346:	0018      	movs	r0, r3
 8009348:	f7fa f8f2 	bl	8003530 <is_systick_timeout_over>
 800934c:	1e03      	subs	r3, r0, #0
 800934e:	d005      	beq.n	800935c <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8009350:	4b31      	ldr	r3, [pc, #196]	; (8009418 <receive_astronode_answer+0x104>)
 8009352:	0018      	movs	r0, r3
 8009354:	f7f9 ff60 	bl	8003218 <send_debug_logs>
            return RS_FAILURE;
 8009358:	2300      	movs	r3, #0
 800935a:	e057      	b.n	800940c <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 800935c:	250f      	movs	r5, #15
 800935e:	197b      	adds	r3, r7, r5
 8009360:	0018      	movs	r0, r3
 8009362:	f7fa f8fb 	bl	800355c <is_astronode_character_received>
 8009366:	0003      	movs	r3, r0
 8009368:	0019      	movs	r1, r3
 800936a:	2016      	movs	r0, #22
 800936c:	183b      	adds	r3, r7, r0
 800936e:	183a      	adds	r2, r7, r0
 8009370:	8812      	ldrh	r2, [r2, #0]
 8009372:	801a      	strh	r2, [r3, #0]
 8009374:	2415      	movs	r4, #21
 8009376:	193b      	adds	r3, r7, r4
 8009378:	193a      	adds	r2, r7, r4
 800937a:	7812      	ldrb	r2, [r2, #0]
 800937c:	701a      	strb	r2, [r3, #0]
 800937e:	2900      	cmp	r1, #0
 8009380:	d033      	beq.n	80093ea <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 8009382:	197b      	adds	r3, r7, r5
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	2b02      	cmp	r3, #2
 8009388:	d105      	bne.n	8009396 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 800938a:	193b      	adds	r3, r7, r4
 800938c:	2200      	movs	r2, #0
 800938e:	701a      	strb	r2, [r3, #0]
                length = 0;
 8009390:	183b      	adds	r3, r7, r0
 8009392:	2200      	movs	r2, #0
 8009394:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8009396:	2116      	movs	r1, #22
 8009398:	187b      	adds	r3, r7, r1
 800939a:	881b      	ldrh	r3, [r3, #0]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	18d3      	adds	r3, r2, r3
 80093a0:	220f      	movs	r2, #15
 80093a2:	18ba      	adds	r2, r7, r2
 80093a4:	7812      	ldrb	r2, [r2, #0]
 80093a6:	701a      	strb	r2, [r3, #0]
            length++;
 80093a8:	187b      	adds	r3, r7, r1
 80093aa:	881a      	ldrh	r2, [r3, #0]
 80093ac:	187b      	adds	r3, r7, r1
 80093ae:	3201      	adds	r2, #1
 80093b0:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80093b2:	187b      	adds	r3, r7, r1
 80093b4:	881b      	ldrh	r3, [r3, #0]
 80093b6:	2bb2      	cmp	r3, #178	; 0xb2
 80093b8:	d905      	bls.n	80093c6 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 80093ba:	4b18      	ldr	r3, [pc, #96]	; (800941c <receive_astronode_answer+0x108>)
 80093bc:	0018      	movs	r0, r3
 80093be:	f7f9 ff2b 	bl	8003218 <send_debug_logs>
                return RS_FAILURE;
 80093c2:	2300      	movs	r3, #0
 80093c4:	e022      	b.n	800940c <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 80093c6:	230f      	movs	r3, #15
 80093c8:	18fb      	adds	r3, r7, r3
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	2b03      	cmp	r3, #3
 80093ce:	d10c      	bne.n	80093ea <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 80093d0:	2216      	movs	r2, #22
 80093d2:	18bb      	adds	r3, r7, r2
 80093d4:	881b      	ldrh	r3, [r3, #0]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d907      	bls.n	80093ea <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	18ba      	adds	r2, r7, r2
 80093de:	8812      	ldrh	r2, [r2, #0]
 80093e0:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 80093e2:	2315      	movs	r3, #21
 80093e4:	18fb      	adds	r3, r7, r3
 80093e6:	2201      	movs	r2, #1
 80093e8:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 80093ea:	2315      	movs	r3, #21
 80093ec:	18fb      	adds	r3, r7, r3
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	2201      	movs	r2, #1
 80093f2:	4053      	eors	r3, r2
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1a2      	bne.n	8009340 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 80093fa:	4b09      	ldr	r3, [pc, #36]	; (8009420 <receive_astronode_answer+0x10c>)
 80093fc:	0018      	movs	r0, r3
 80093fe:	f7f9 ff0b 	bl	8003218 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	0018      	movs	r0, r3
 8009406:	f7f9 ff07 	bl	8003218 <send_debug_logs>

    return RS_SUCCESS;
 800940a:	2301      	movs	r3, #1
}
 800940c:	0018      	movs	r0, r3
 800940e:	46bd      	mov	sp, r7
 8009410:	b006      	add	sp, #24
 8009412:	bdb0      	pop	{r4, r5, r7, pc}
 8009414:	000005dc 	.word	0x000005dc
 8009418:	080140f4 	.word	0x080140f4
 800941c:	08014118 	.word	0x08014118
 8009420:	08014164 	.word	0x08014164

08009424 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	0002      	movs	r2, r0
 800942c:	6039      	str	r1, [r7, #0]
 800942e:	1dfb      	adds	r3, r7, #7
 8009430:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 8009432:	1dfb      	adds	r3, r7, #7
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	091b      	lsrs	r3, r3, #4
 8009438:	b2db      	uxtb	r3, r3
 800943a:	001a      	movs	r2, r3
 800943c:	4b08      	ldr	r3, [pc, #32]	; (8009460 <uint8_to_ascii_buffer+0x3c>)
 800943e:	5c9a      	ldrb	r2, [r3, r2]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8009444:	1dfb      	adds	r3, r7, #7
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	220f      	movs	r2, #15
 800944a:	401a      	ands	r2, r3
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	3301      	adds	r3, #1
 8009450:	4903      	ldr	r1, [pc, #12]	; (8009460 <uint8_to_ascii_buffer+0x3c>)
 8009452:	5c8a      	ldrb	r2, [r1, r2]
 8009454:	701a      	strb	r2, [r3, #0]
}
 8009456:	46c0      	nop			; (mov r8, r8)
 8009458:	46bd      	mov	sp, r7
 800945a:	b002      	add	sp, #8
 800945c:	bd80      	pop	{r7, pc}
 800945e:	46c0      	nop			; (mov r8, r8)
 8009460:	0801449c 	.word	0x0801449c

08009464 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ()
{
 8009464:	b590      	push	{r4, r7, lr}
 8009466:	b087      	sub	sp, #28
 8009468:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 800946a:	1dfb      	adds	r3, r7, #7
 800946c:	2200      	movs	r2, #0
 800946e:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 8009470:	e012      	b.n	8009498 <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 8009472:	f7fa f81d 	bl	80034b0 <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 8009476:	1dfc      	adds	r4, r7, #7
 8009478:	2300      	movs	r3, #0
 800947a:	9303      	str	r3, [sp, #12]
 800947c:	2301      	movs	r3, #1
 800947e:	9302      	str	r3, [sp, #8]
 8009480:	2301      	movs	r3, #1
 8009482:	9301      	str	r3, [sp, #4]
 8009484:	2301      	movs	r3, #1
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	2300      	movs	r3, #0
 800948a:	2201      	movs	r2, #1
 800948c:	2101      	movs	r1, #1
 800948e:	2001      	movs	r0, #1
 8009490:	f7fe fb64 	bl	8007b5c <astronode_send_cfg_wr>
 8009494:	0003      	movs	r3, r0
 8009496:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 8009498:	1dfb      	adds	r3, r7, #7
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	2201      	movs	r2, #1
 800949e:	4053      	eors	r3, r2
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1e5      	bne.n	8009472 <my_astro_init+0xe>
	}

	if ( cfg_wr )
 80094a6:	1dfb      	adds	r3, r7, #7
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00d      	beq.n	80094ca <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 80094ae:	f7fe ffbb 	bl	8008428 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 80094b2:	f7fe fb1b 	bl	8007aec <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 80094b6:	f7ff f8b1 	bl	800861c <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 80094ba:	f7fe fca5 	bl	8007e08 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 80094be:	f7fe fbf9 	bl	8007cb4 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 80094c2:	f7fe ff35 	bl	8008330 <astronode_send_pld_fr>
		return true ;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e000      	b.n	80094cc <my_astro_init+0x68>
	}
	else
	{
		return false ;
 80094ca:	2300      	movs	r3, #0
	}
}
 80094cc:	0018      	movs	r0, r3
 80094ce:	46bd      	mov	sp, r7
 80094d0:	b003      	add	sp, #12
 80094d2:	bd90      	pop	{r4, r7, pc}

080094d4 <my_astro_add_payload_2_queue>:

bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	0002      	movs	r2, r0
 80094dc:	6039      	str	r1, [r7, #0]
 80094de:	1dbb      	adds	r3, r7, #6
 80094e0:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	0018      	movs	r0, r3
 80094e6:	f7f6 fe0d 	bl	8000104 <strlen>
 80094ea:	0003      	movs	r3, r0
 80094ec:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2ba0      	cmp	r3, #160	; 0xa0
 80094f2:	d80b      	bhi.n	800950c <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	1dbb      	adds	r3, r7, #6
 80094fc:	881b      	ldrh	r3, [r3, #0]
 80094fe:	0018      	movs	r0, r3
 8009500:	f7fe fe6c 	bl	80081dc <astronode_send_pld_er>
 8009504:	1e03      	subs	r3, r0, #0
 8009506:	d005      	beq.n	8009514 <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 8009508:	2301      	movs	r3, #1
 800950a:	e004      	b.n	8009516 <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 800950c:	4b04      	ldr	r3, [pc, #16]	; (8009520 <my_astro_add_payload_2_queue+0x4c>)
 800950e:	0018      	movs	r0, r3
 8009510:	f7f9 fe82 	bl	8003218 <send_debug_logs>
	}
	return false ;
 8009514:	2300      	movs	r3, #0
}
 8009516:	0018      	movs	r0, r3
 8009518:	46bd      	mov	sp, r7
 800951a:	b004      	add	sp, #16
 800951c:	bd80      	pop	{r7, pc}
 800951e:	46c0      	nop			; (mov r8, r8)
 8009520:	08014190 	.word	0x08014190

08009524 <my_astro_handle_evt>:
bool my_astro_handle_evt ( void )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 8009528:	4b19      	ldr	r3, [pc, #100]	; (8009590 <my_astro_handle_evt+0x6c>)
 800952a:	0018      	movs	r0, r3
 800952c:	f7f9 fe74 	bl	8003218 <send_debug_logs>
	astronode_send_evt_rr () ;
 8009530:	f7fe fd14 	bl	8007f5c <astronode_send_evt_rr>
	if (is_sak_available () )
 8009534:	f7ff fb00 	bl	8008b38 <is_sak_available>
 8009538:	1e03      	subs	r3, r0, #0
 800953a:	d007      	beq.n	800954c <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 800953c:	f7fe ffd8 	bl	80084f0 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8009540:	f7ff f82c 	bl	800859c <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 8009544:	4b13      	ldr	r3, [pc, #76]	; (8009594 <my_astro_handle_evt+0x70>)
 8009546:	0018      	movs	r0, r3
 8009548:	f7f9 fe66 	bl	8003218 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 800954c:	f7ff fafe 	bl	8008b4c <is_astronode_reset>
 8009550:	1e03      	subs	r3, r0, #0
 8009552:	d005      	beq.n	8009560 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 8009554:	4b10      	ldr	r3, [pc, #64]	; (8009598 <my_astro_handle_evt+0x74>)
 8009556:	0018      	movs	r0, r3
 8009558:	f7f9 fe5e 	bl	8003218 <send_debug_logs>
	  astronode_send_res_cr () ;
 800955c:	f7fe ff24 	bl	80083a8 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8009560:	f7ff fafe 	bl	8008b60 <is_command_available>
 8009564:	1e03      	subs	r3, r0, #0
 8009566:	d00e      	beq.n	8009586 <my_astro_handle_evt+0x62>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 8009568:	4b0c      	ldr	r3, [pc, #48]	; (800959c <my_astro_handle_evt+0x78>)
 800956a:	0018      	movs	r0, r3
 800956c:	f7f9 fe54 	bl	8003218 <send_debug_logs>
	  if ( astronode_send_cmd_rr ( my_astro_rcv_cmd ) )
 8009570:	4b0b      	ldr	r3, [pc, #44]	; (80095a0 <my_astro_handle_evt+0x7c>)
 8009572:	0018      	movs	r0, r3
 8009574:	f7ff f93c 	bl	80087f0 <astronode_send_cmd_rr>
 8009578:	1e03      	subs	r3, r0, #0
 800957a:	d002      	beq.n	8009582 <my_astro_handle_evt+0x5e>
	  {
		  astro_rcv_cmd_flag = true ;
 800957c:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <my_astro_handle_evt+0x80>)
 800957e:	2201      	movs	r2, #1
 8009580:	701a      	strb	r2, [r3, #0]
	  }
	  astronode_send_cmd_cr () ;
 8009582:	f7ff f8f5 	bl	8008770 <astronode_send_cmd_cr>
	}
	return true ;
 8009586:	2301      	movs	r3, #1
}
 8009588:	0018      	movs	r0, r3
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	46c0      	nop			; (mov r8, r8)
 8009590:	080141f8 	.word	0x080141f8
 8009594:	0801422c 	.word	0x0801422c
 8009598:	08014270 	.word	0x08014270
 800959c:	080142ac 	.word	0x080142ac
 80095a0:	20000c04 	.word	0x20000c04
 80095a4:	20000c02 	.word	0x20000c02

080095a8 <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 80095b2:	683a      	ldr	r2, [r7, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	0011      	movs	r1, r2
 80095b8:	0018      	movs	r0, r3
 80095ba:	f7fe fd4f 	bl	800805c <astronode_send_geo_wr>
}
 80095be:	46c0      	nop			; (mov r8, r8)
 80095c0:	46bd      	mov	sp, r7
 80095c2:	b002      	add	sp, #8
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 80095c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ca:	4ca5      	ldr	r4, [pc, #660]	; (8009860 <my_gnss_acq_coordinates+0x298>)
 80095cc:	44a5      	add	sp, r4
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 80095d2:	4ba4      	ldr	r3, [pc, #656]	; (8009864 <my_gnss_acq_coordinates+0x29c>)
 80095d4:	18fb      	adds	r3, r7, r3
 80095d6:	2200      	movs	r2, #0
 80095d8:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 80095da:	4ba3      	ldr	r3, [pc, #652]	; (8009868 <my_gnss_acq_coordinates+0x2a0>)
 80095dc:	18fb      	adds	r3, r7, r3
 80095de:	2200      	movs	r2, #0
 80095e0:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 80095e2:	4ba2      	ldr	r3, [pc, #648]	; (800986c <my_gnss_acq_coordinates+0x2a4>)
 80095e4:	18fb      	adds	r3, r7, r3
 80095e6:	2200      	movs	r2, #0
 80095e8:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 80095ea:	4ba1      	ldr	r3, [pc, #644]	; (8009870 <my_gnss_acq_coordinates+0x2a8>)
 80095ec:	18fb      	adds	r3, r7, r3
 80095ee:	2200      	movs	r2, #0
 80095f0:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 80095f2:	4ba0      	ldr	r3, [pc, #640]	; (8009874 <my_gnss_acq_coordinates+0x2ac>)
 80095f4:	18fb      	adds	r3, r7, r3
 80095f6:	2200      	movs	r2, #0
 80095f8:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 80095fa:	4b9f      	ldr	r3, [pc, #636]	; (8009878 <my_gnss_acq_coordinates+0x2b0>)
 80095fc:	2486      	movs	r4, #134	; 0x86
 80095fe:	00a4      	lsls	r4, r4, #2
 8009600:	191b      	adds	r3, r3, r4
 8009602:	19db      	adds	r3, r3, r7
 8009604:	2200      	movs	r2, #0
 8009606:	601a      	str	r2, [r3, #0]
 8009608:	3304      	adds	r3, #4
 800960a:	22f6      	movs	r2, #246	; 0xf6
 800960c:	2100      	movs	r1, #0
 800960e:	0018      	movs	r0, r3
 8009610:	f002 fb6e 	bl	800bcf0 <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8009614:	4b99      	ldr	r3, [pc, #612]	; (800987c <my_gnss_acq_coordinates+0x2b4>)
 8009616:	191b      	adds	r3, r3, r4
 8009618:	19db      	adds	r3, r3, r7
 800961a:	2200      	movs	r2, #0
 800961c:	601a      	str	r2, [r3, #0]
 800961e:	3304      	adds	r3, #4
 8009620:	22f6      	movs	r2, #246	; 0xf6
 8009622:	2100      	movs	r1, #0
 8009624:	0018      	movs	r0, r3
 8009626:	f002 fb63 	bl	800bcf0 <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 800962a:	4b95      	ldr	r3, [pc, #596]	; (8009880 <my_gnss_acq_coordinates+0x2b8>)
 800962c:	2284      	movs	r2, #132	; 0x84
 800962e:	0092      	lsls	r2, r2, #2
 8009630:	18ba      	adds	r2, r7, r2
 8009632:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 8009634:	4b93      	ldr	r3, [pc, #588]	; (8009884 <my_gnss_acq_coordinates+0x2bc>)
 8009636:	2283      	movs	r2, #131	; 0x83
 8009638:	0092      	lsls	r2, r2, #2
 800963a:	18ba      	adds	r2, r7, r2
 800963c:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 800963e:	4b92      	ldr	r3, [pc, #584]	; (8009888 <my_gnss_acq_coordinates+0x2c0>)
 8009640:	2282      	movs	r2, #130	; 0x82
 8009642:	0092      	lsls	r2, r2, #2
 8009644:	18ba      	adds	r2, r7, r2
 8009646:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8009648:	4b90      	ldr	r3, [pc, #576]	; (800988c <my_gnss_acq_coordinates+0x2c4>)
 800964a:	2281      	movs	r2, #129	; 0x81
 800964c:	0092      	lsls	r2, r2, #2
 800964e:	18ba      	adds	r2, r7, r2
 8009650:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '0' ;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2230      	movs	r2, #48	; 0x30
 8009656:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 1000 ;
 8009658:	6879      	ldr	r1, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	4b8c      	ldr	r3, [pc, #560]	; (8009890 <my_gnss_acq_coordinates+0x2c8>)
 800965e:	608a      	str	r2, [r1, #8]
 8009660:	60cb      	str	r3, [r1, #12]
	my_tim_start () ;
 8009662:	f7f9 ffad 	bl	80035c0 <my_tim_start>
	while ( tim_seconds < fix_acq_ths )
 8009666:	e0c4      	b.n	80097f2 <my_gnss_acq_coordinates+0x22a>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, true ) ;
 8009668:	4c80      	ldr	r4, [pc, #512]	; (800986c <my_gnss_acq_coordinates+0x2a4>)
 800966a:	193b      	adds	r3, r7, r4
 800966c:	2101      	movs	r1, #1
 800966e:	0018      	movs	r0, r3
 8009670:	f7f9 fefa 	bl	8003468 <my_gnss_receive_byte>
		if ( rx_byte )
 8009674:	0020      	movs	r0, r4
 8009676:	183b      	adds	r3, r7, r0
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	4c7b      	ldr	r4, [pc, #492]	; (8009868 <my_gnss_acq_coordinates+0x2a0>)
 800967c:	193a      	adds	r2, r7, r4
 800967e:	1939      	adds	r1, r7, r4
 8009680:	7809      	ldrb	r1, [r1, #0]
 8009682:	7011      	strb	r1, [r2, #0]
 8009684:	4d7b      	ldr	r5, [pc, #492]	; (8009874 <my_gnss_acq_coordinates+0x2ac>)
 8009686:	197a      	adds	r2, r7, r5
 8009688:	1979      	adds	r1, r7, r5
 800968a:	7809      	ldrb	r1, [r1, #0]
 800968c:	7011      	strb	r1, [r2, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d100      	bne.n	8009694 <my_gnss_acq_coordinates+0xcc>
 8009692:	e0ae      	b.n	80097f2 <my_gnss_acq_coordinates+0x22a>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 8009694:	4b76      	ldr	r3, [pc, #472]	; (8009870 <my_gnss_acq_coordinates+0x2a8>)
 8009696:	18fa      	adds	r2, r7, r3
 8009698:	2684      	movs	r6, #132	; 0x84
 800969a:	0076      	lsls	r6, r6, #1
 800969c:	19b9      	adds	r1, r7, r6
 800969e:	183b      	adds	r3, r7, r0
 80096a0:	0018      	movs	r0, r3
 80096a2:	f000 fbe9 	bl	8009e78 <my_nmea_message>
 80096a6:	0001      	movs	r1, r0
 80096a8:	193b      	adds	r3, r7, r4
 80096aa:	193a      	adds	r2, r7, r4
 80096ac:	7812      	ldrb	r2, [r2, #0]
 80096ae:	701a      	strb	r2, [r3, #0]
 80096b0:	197b      	adds	r3, r7, r5
 80096b2:	197a      	adds	r2, r7, r5
 80096b4:	7812      	ldrb	r2, [r2, #0]
 80096b6:	701a      	strb	r2, [r3, #0]
 80096b8:	2902      	cmp	r1, #2
 80096ba:	d000      	beq.n	80096be <my_gnss_acq_coordinates+0xf6>
 80096bc:	e099      	b.n	80097f2 <my_gnss_acq_coordinates+0x22a>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 80096be:	19bb      	adds	r3, r7, r6
 80096c0:	0018      	movs	r0, r3
 80096c2:	f000 fc99 	bl	8009ff8 <is_my_nmea_checksum_ok>
 80096c6:	0003      	movs	r3, r0
 80096c8:	0019      	movs	r1, r3
 80096ca:	193b      	adds	r3, r7, r4
 80096cc:	193a      	adds	r2, r7, r4
 80096ce:	7812      	ldrb	r2, [r2, #0]
 80096d0:	701a      	strb	r2, [r3, #0]
 80096d2:	197b      	adds	r3, r7, r5
 80096d4:	197a      	adds	r2, r7, r5
 80096d6:	7812      	ldrb	r2, [r2, #0]
 80096d8:	701a      	strb	r2, [r3, #0]
 80096da:	2900      	cmp	r1, #0
 80096dc:	d100      	bne.n	80096e0 <my_gnss_acq_coordinates+0x118>
 80096de:	e088      	b.n	80097f2 <my_gnss_acq_coordinates+0x22a>
				{
					if ( !is_utc_saved )
 80096e0:	193b      	adds	r3, r7, r4
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	2201      	movs	r2, #1
 80096e6:	4053      	eors	r3, r2
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d015      	beq.n	800971a <my_gnss_acq_coordinates+0x152>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	7c1b      	ldrb	r3, [r3, #16]
 80096f2:	2b33      	cmp	r3, #51	; 0x33
 80096f4:	d111      	bne.n	800971a <my_gnss_acq_coordinates+0x152>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 80096f6:	2383      	movs	r3, #131	; 0x83
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	18fb      	adds	r3, r7, r3
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	19bb      	adds	r3, r7, r6
 8009700:	0011      	movs	r1, r2
 8009702:	0018      	movs	r0, r3
 8009704:	f002 fb55 	bl	800bdb2 <strstr>
 8009708:	1e03      	subs	r3, r0, #0
 800970a:	d006      	beq.n	800971a <my_gnss_acq_coordinates+0x152>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800970c:	19bb      	adds	r3, r7, r6
 800970e:	0018      	movs	r0, r3
 8009710:	f000 f9a6 	bl	8009a60 <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 8009714:	193b      	adds	r3, r7, r4
 8009716:	2201      	movs	r2, #1
 8009718:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS ) // Nie ma co tego później monitorować, bo jest cała kaskada wiadomości
 800971a:	2384      	movs	r3, #132	; 0x84
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	18fb      	adds	r3, r7, r3
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	2484      	movs	r4, #132	; 0x84
 8009724:	0064      	lsls	r4, r4, #1
 8009726:	193b      	adds	r3, r7, r4
 8009728:	0011      	movs	r1, r2
 800972a:	0018      	movs	r0, r3
 800972c:	f002 fb41 	bl	800bdb2 <strstr>
 8009730:	1e03      	subs	r3, r0, #0
 8009732:	d012      	beq.n	800975a <my_gnss_acq_coordinates+0x192>
 8009734:	4d4f      	ldr	r5, [pc, #316]	; (8009874 <my_gnss_acq_coordinates+0x2ac>)
 8009736:	197b      	adds	r3, r7, r5
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	2b02      	cmp	r3, #2
 800973c:	d80d      	bhi.n	800975a <my_gnss_acq_coordinates+0x192>
					{
						if ( tim_seconds > min_tns_time_ths )
 800973e:	4b55      	ldr	r3, [pc, #340]	; (8009894 <my_gnss_acq_coordinates+0x2cc>)
 8009740:	881a      	ldrh	r2, [r3, #0]
 8009742:	4b55      	ldr	r3, [pc, #340]	; (8009898 <my_gnss_acq_coordinates+0x2d0>)
 8009744:	881b      	ldrh	r3, [r3, #0]
 8009746:	429a      	cmp	r2, r3
 8009748:	d85b      	bhi.n	8009802 <my_gnss_acq_coordinates+0x23a>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 800974a:	193b      	adds	r3, r7, r4
 800974c:	0018      	movs	r0, r3
 800974e:	f000 fdf9 	bl	800a344 <my_nmea_get_gsv_tns>
 8009752:	0003      	movs	r3, r0
 8009754:	001a      	movs	r2, r3
 8009756:	197b      	adds	r3, r7, r5
 8009758:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) ) // Koniecznie monitorować cały czas
 800975a:	2382      	movs	r3, #130	; 0x82
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	18fb      	adds	r3, r7, r3
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	2484      	movs	r4, #132	; 0x84
 8009764:	0064      	lsls	r4, r4, #1
 8009766:	193b      	adds	r3, r7, r4
 8009768:	0011      	movs	r1, r2
 800976a:	0018      	movs	r0, r3
 800976c:	f002 fb21 	bl	800bdb2 <strstr>
 8009770:	1e03      	subs	r3, r0, #0
 8009772:	d010      	beq.n	8009796 <my_gnss_acq_coordinates+0x1ce>
					{
						fix3d->fix_mode = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 8009774:	193b      	adds	r3, r7, r4
 8009776:	0018      	movs	r0, r3
 8009778:	f000 fbea 	bl	8009f50 <get_my_nmea_gngsa_fixed_mode_s>
 800977c:	0003      	movs	r3, r0
 800977e:	001a      	movs	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	741a      	strb	r2, [r3, #16]
						fix3d->pdop = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 8009784:	193b      	adds	r3, r7, r4
 8009786:	0018      	movs	r0, r3
 8009788:	f000 fbed 	bl	8009f66 <get_my_nmea_gngsa_pdop_d>
 800978c:	0002      	movs	r2, r0
 800978e:	000b      	movs	r3, r1
 8009790:	6879      	ldr	r1, [r7, #4]
 8009792:	608a      	str	r2, [r1, #8]
 8009794:	60cb      	str	r3, [r1, #12]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) && is_utc_saved )
 8009796:	2381      	movs	r3, #129	; 0x81
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	18fb      	adds	r3, r7, r3
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	2384      	movs	r3, #132	; 0x84
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	18fb      	adds	r3, r7, r3
 80097a4:	0011      	movs	r1, r2
 80097a6:	0018      	movs	r0, r3
 80097a8:	f002 fb03 	bl	800bdb2 <strstr>
 80097ac:	1e03      	subs	r3, r0, #0
 80097ae:	d020      	beq.n	80097f2 <my_gnss_acq_coordinates+0x22a>
 80097b0:	4b2d      	ldr	r3, [pc, #180]	; (8009868 <my_gnss_acq_coordinates+0x2a0>)
 80097b2:	18fb      	adds	r3, r7, r3
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d01b      	beq.n	80097f2 <my_gnss_acq_coordinates+0x22a>
					{
						if ( fix3d->fix_mode != NMEA_3D_FIX ) // Solution for Issue #3 Handle a lost of fix during acquisition.
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	7c1b      	ldrb	r3, [r3, #16]
 80097be:	2b33      	cmp	r3, #51	; 0x33
 80097c0:	d121      	bne.n	8009806 <my_gnss_acq_coordinates+0x23e>
						{
							break ;
						}
						memcpy ( gngll_message , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 80097c2:	4b2e      	ldr	r3, [pc, #184]	; (800987c <my_gnss_acq_coordinates+0x2b4>)
 80097c4:	2186      	movs	r1, #134	; 0x86
 80097c6:	0089      	lsls	r1, r1, #2
 80097c8:	185b      	adds	r3, r3, r1
 80097ca:	19da      	adds	r2, r3, r7
 80097cc:	4b2a      	ldr	r3, [pc, #168]	; (8009878 <my_gnss_acq_coordinates+0x2b0>)
 80097ce:	185b      	adds	r3, r3, r1
 80097d0:	19db      	adds	r3, r3, r7
 80097d2:	0010      	movs	r0, r2
 80097d4:	0019      	movs	r1, r3
 80097d6:	23fa      	movs	r3, #250	; 0xfa
 80097d8:	001a      	movs	r2, r3
 80097da:	f002 fba2 	bl	800bf22 <memcpy>
						if ( fix3d->pdop <= pdop_ths )
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6898      	ldr	r0, [r3, #8]
 80097e2:	68d9      	ldr	r1, [r3, #12]
 80097e4:	4b2d      	ldr	r3, [pc, #180]	; (800989c <my_gnss_acq_coordinates+0x2d4>)
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	f7f6 fe3d 	bl	8000468 <__aeabi_dcmple>
 80097ee:	1e03      	subs	r3, r0, #0
 80097f0:	d10b      	bne.n	800980a <my_gnss_acq_coordinates+0x242>
	while ( tim_seconds < fix_acq_ths )
 80097f2:	4b28      	ldr	r3, [pc, #160]	; (8009894 <my_gnss_acq_coordinates+0x2cc>)
 80097f4:	881a      	ldrh	r2, [r3, #0]
 80097f6:	4b2a      	ldr	r3, [pc, #168]	; (80098a0 <my_gnss_acq_coordinates+0x2d8>)
 80097f8:	881b      	ldrh	r3, [r3, #0]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d200      	bcs.n	8009800 <my_gnss_acq_coordinates+0x238>
 80097fe:	e733      	b.n	8009668 <my_gnss_acq_coordinates+0xa0>
 8009800:	e004      	b.n	800980c <my_gnss_acq_coordinates+0x244>
							break ;
 8009802:	46c0      	nop			; (mov r8, r8)
 8009804:	e002      	b.n	800980c <my_gnss_acq_coordinates+0x244>
							break ;
 8009806:	46c0      	nop			; (mov r8, r8)
 8009808:	e000      	b.n	800980c <my_gnss_acq_coordinates+0x244>
						{
							break ;
 800980a:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 800980c:	f7f9 fee8 	bl	80035e0 <my_tim_stop>
	// WYŁĄCZYĆ I ZASAVEOWAĆ BRAK GLONASS BO OSTATNIO NIE ZROBIŁEM SAVE TO NVRAM

	if ( gngll_message[0] )
 8009810:	4b1a      	ldr	r3, [pc, #104]	; (800987c <my_gnss_acq_coordinates+0x2b4>)
 8009812:	2286      	movs	r2, #134	; 0x86
 8009814:	0092      	lsls	r2, r2, #2
 8009816:	189b      	adds	r3, r3, r2
 8009818:	19db      	adds	r3, r3, r7
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00a      	beq.n	8009836 <my_gnss_acq_coordinates+0x26e>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	230c      	movs	r3, #12
 8009824:	18fb      	adds	r3, r7, r3
 8009826:	0011      	movs	r1, r2
 8009828:	0018      	movs	r0, r3
 800982a:	f000 fca1 	bl	800a170 <my_nmea_get_gngll_coordinates>
		r = true ;
 800982e:	4b0d      	ldr	r3, [pc, #52]	; (8009864 <my_gnss_acq_coordinates+0x29c>)
 8009830:	18fb      	adds	r3, r7, r3
 8009832:	2201      	movs	r2, #1
 8009834:	701a      	strb	r2, [r3, #0]
	}
	fix3d->acq_time = tim_seconds ;
 8009836:	4b17      	ldr	r3, [pc, #92]	; (8009894 <my_gnss_acq_coordinates+0x2cc>)
 8009838:	881a      	ldrh	r2, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	825a      	strh	r2, [r3, #18]
	fix3d->acq_total_time += tim_seconds ; // UWAGA: Tutaj nie mogę zaokrąglać, bo będę tracił za każdym razem resztę co się uzbiera w duży błąd
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	4a14      	ldr	r2, [pc, #80]	; (8009894 <my_gnss_acq_coordinates+0x2cc>)
 8009844:	8812      	ldrh	r2, [r2, #0]
 8009846:	189a      	adds	r2, r3, r2
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	615a      	str	r2, [r3, #20]
	return r ;
 800984c:	4b05      	ldr	r3, [pc, #20]	; (8009864 <my_gnss_acq_coordinates+0x29c>)
 800984e:	18fb      	adds	r3, r7, r3
 8009850:	781b      	ldrb	r3, [r3, #0]
}
 8009852:	0018      	movs	r0, r3
 8009854:	46bd      	mov	sp, r7
 8009856:	2387      	movs	r3, #135	; 0x87
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	449d      	add	sp, r3
 800985c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800985e:	46c0      	nop			; (mov r8, r8)
 8009860:	fffffde4 	.word	0xfffffde4
 8009864:	00000217 	.word	0x00000217
 8009868:	00000216 	.word	0x00000216
 800986c:	00000203 	.word	0x00000203
 8009870:	00000202 	.word	0x00000202
 8009874:	00000215 	.word	0x00000215
 8009878:	fffffef0 	.word	0xfffffef0
 800987c:	fffffdf4 	.word	0xfffffdf4
 8009880:	080142ec 	.word	0x080142ec
 8009884:	080142f4 	.word	0x080142f4
 8009888:	080142fc 	.word	0x080142fc
 800988c:	08014304 	.word	0x08014304
 8009890:	408f4000 	.word	0x408f4000
 8009894:	20000c2c 	.word	0x20000c2c
 8009898:	20000018 	.word	0x20000018
 800989c:	20000020 	.word	0x20000020
 80098a0:	20000016 	.word	0x20000016

080098a4 <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 80098ae:	6879      	ldr	r1, [r7, #4]
 80098b0:	4b07      	ldr	r3, [pc, #28]	; (80098d0 <my_rtc_get_dt+0x2c>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	0018      	movs	r0, r3
 80098b6:	f7fc f939 	bl	8005b2c <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 80098ba:	6839      	ldr	r1, [r7, #0]
 80098bc:	4b04      	ldr	r3, [pc, #16]	; (80098d0 <my_rtc_get_dt+0x2c>)
 80098be:	2200      	movs	r2, #0
 80098c0:	0018      	movs	r0, r3
 80098c2:	f7fc f845 	bl	8005950 <HAL_RTC_GetTime>
}
 80098c6:	46c0      	nop			; (mov r8, r8)
 80098c8:	46bd      	mov	sp, r7
 80098ca:	b002      	add	sp, #8
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	46c0      	nop			; (mov r8, r8)
 80098d0:	200006f4 	.word	0x200006f4

080098d4 <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 80098d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098d6:	b08d      	sub	sp, #52	; 0x34
 80098d8:	af04      	add	r7, sp, #16
 80098da:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 80098dc:	2508      	movs	r5, #8
 80098de:	1979      	adds	r1, r7, r5
 80098e0:	4b1b      	ldr	r3, [pc, #108]	; (8009950 <my_rtc_get_dt_s+0x7c>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	0018      	movs	r0, r3
 80098e6:	f7fc f833 	bl	8005950 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 80098ea:	241c      	movs	r4, #28
 80098ec:	1939      	adds	r1, r7, r4
 80098ee:	4b18      	ldr	r3, [pc, #96]	; (8009950 <my_rtc_get_dt_s+0x7c>)
 80098f0:	2200      	movs	r2, #0
 80098f2:	0018      	movs	r0, r3
 80098f4:	f7fc f91a 	bl	8005b2c <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 80098f8:	0021      	movs	r1, r4
 80098fa:	187b      	adds	r3, r7, r1
 80098fc:	78db      	ldrb	r3, [r3, #3]
 80098fe:	22fa      	movs	r2, #250	; 0xfa
 8009900:	00d2      	lsls	r2, r2, #3
 8009902:	189a      	adds	r2, r3, r2
 8009904:	187b      	adds	r3, r7, r1
 8009906:	785b      	ldrb	r3, [r3, #1]
 8009908:	469c      	mov	ip, r3
 800990a:	187b      	adds	r3, r7, r1
 800990c:	789b      	ldrb	r3, [r3, #2]
 800990e:	001c      	movs	r4, r3
 8009910:	0028      	movs	r0, r5
 8009912:	183b      	adds	r3, r7, r0
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	001d      	movs	r5, r3
 8009918:	183b      	adds	r3, r7, r0
 800991a:	785b      	ldrb	r3, [r3, #1]
 800991c:	001e      	movs	r6, r3
 800991e:	183b      	adds	r3, r7, r0
 8009920:	789b      	ldrb	r3, [r3, #2]
 8009922:	490c      	ldr	r1, [pc, #48]	; (8009954 <my_rtc_get_dt_s+0x80>)
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	9303      	str	r3, [sp, #12]
 8009928:	9602      	str	r6, [sp, #8]
 800992a:	9501      	str	r5, [sp, #4]
 800992c:	9400      	str	r4, [sp, #0]
 800992e:	4663      	mov	r3, ip
 8009930:	f002 f948 	bl	800bbc4 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8009934:	211c      	movs	r1, #28
 8009936:	187b      	adds	r3, r7, r1
 8009938:	78db      	ldrb	r3, [r3, #3]
 800993a:	b29b      	uxth	r3, r3
 800993c:	22fa      	movs	r2, #250	; 0xfa
 800993e:	00d2      	lsls	r2, r2, #3
 8009940:	4694      	mov	ip, r2
 8009942:	4463      	add	r3, ip
 8009944:	b29b      	uxth	r3, r3
}
 8009946:	0018      	movs	r0, r3
 8009948:	46bd      	mov	sp, r7
 800994a:	b009      	add	sp, #36	; 0x24
 800994c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800994e:	46c0      	nop			; (mov r8, r8)
 8009950:	200006f4 	.word	0x200006f4
 8009954:	08014354 	.word	0x08014354

08009958 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 8009958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800995a:	b0a9      	sub	sp, #164	; 0xa4
 800995c:	af02      	add	r7, sp, #8
 800995e:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 8009960:	2434      	movs	r4, #52	; 0x34
 8009962:	193a      	adds	r2, r7, r4
 8009964:	2548      	movs	r5, #72	; 0x48
 8009966:	197b      	adds	r3, r7, r5
 8009968:	0011      	movs	r1, r2
 800996a:	0018      	movs	r0, r3
 800996c:	f7ff ff9a 	bl	80098a4 <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 8009970:	2680      	movs	r6, #128	; 0x80
 8009972:	19bb      	adds	r3, r7, r6
 8009974:	0018      	movs	r0, r3
 8009976:	f7ff ffad 	bl	80098d4 <my_rtc_get_dt_s>
	sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800997a:	4a36      	ldr	r2, [pc, #216]	; (8009a54 <my_rtc_set_alarm+0xfc>)
 800997c:	4936      	ldr	r1, [pc, #216]	; (8009a58 <my_rtc_set_alarm+0x100>)
 800997e:	234c      	movs	r3, #76	; 0x4c
 8009980:	18f8      	adds	r0, r7, r3
 8009982:	19bb      	adds	r3, r7, r6
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	232d      	movs	r3, #45	; 0x2d
 8009988:	f002 f91c 	bl	800bbc4 <sprintf>
	send_debug_logs ( m ) ;
 800998c:	234c      	movs	r3, #76	; 0x4c
 800998e:	18fb      	adds	r3, r7, r3
 8009990:	0018      	movs	r0, r3
 8009992:	f7f9 fc41 	bl	8003218 <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 8009996:	193a      	adds	r2, r7, r4
 8009998:	197b      	adds	r3, r7, r5
 800999a:	0011      	movs	r1, r2
 800999c:	0018      	movs	r0, r3
 800999e:	f000 f90d 	bl	8009bbc <my_conv_rtc2timestamp>
 80099a2:	0002      	movs	r2, r0
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	189b      	adds	r3, r3, r2
 80099a8:	2094      	movs	r0, #148	; 0x94
 80099aa:	183a      	adds	r2, r7, r0
 80099ac:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 80099ae:	193a      	adds	r2, r7, r4
 80099b0:	1979      	adds	r1, r7, r5
 80099b2:	1838      	adds	r0, r7, r0
 80099b4:	6803      	ldr	r3, [r0, #0]
 80099b6:	0018      	movs	r0, r3
 80099b8:	f000 f974 	bl	8009ca4 <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 80099bc:	193b      	adds	r3, r7, r4
 80099be:	781a      	ldrb	r2, [r3, #0]
 80099c0:	210c      	movs	r1, #12
 80099c2:	187b      	adds	r3, r7, r1
 80099c4:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 80099c6:	193b      	adds	r3, r7, r4
 80099c8:	785a      	ldrb	r2, [r3, #1]
 80099ca:	187b      	adds	r3, r7, r1
 80099cc:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 80099ce:	193b      	adds	r3, r7, r4
 80099d0:	789a      	ldrb	r2, [r3, #2]
 80099d2:	187b      	adds	r3, r7, r1
 80099d4:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 80099d6:	0008      	movs	r0, r1
 80099d8:	183b      	adds	r3, r7, r0
 80099da:	2200      	movs	r2, #0
 80099dc:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 80099de:	183b      	adds	r3, r7, r0
 80099e0:	2200      	movs	r2, #0
 80099e2:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 80099e4:	183b      	adds	r3, r7, r0
 80099e6:	2200      	movs	r2, #0
 80099e8:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 80099ea:	183b      	adds	r3, r7, r0
 80099ec:	2200      	movs	r2, #0
 80099ee:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 80099f0:	183b      	adds	r3, r7, r0
 80099f2:	2200      	movs	r2, #0
 80099f4:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 80099f6:	183b      	adds	r3, r7, r0
 80099f8:	2200      	movs	r2, #0
 80099fa:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 80099fc:	197b      	adds	r3, r7, r5
 80099fe:	7899      	ldrb	r1, [r3, #2]
 8009a00:	183b      	adds	r3, r7, r0
 8009a02:	2220      	movs	r2, #32
 8009a04:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 8009a06:	183b      	adds	r3, r7, r0
 8009a08:	2280      	movs	r2, #128	; 0x80
 8009a0a:	0052      	lsls	r2, r2, #1
 8009a0c:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 8009a0e:	1839      	adds	r1, r7, r0
 8009a10:	4b12      	ldr	r3, [pc, #72]	; (8009a5c <my_rtc_set_alarm+0x104>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	0018      	movs	r0, r3
 8009a16:	f7fc f8d7 	bl	8005bc8 <HAL_RTC_SetAlarm_IT>
 8009a1a:	1e03      	subs	r3, r0, #0
 8009a1c:	d114      	bne.n	8009a48 <my_rtc_set_alarm+0xf0>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 8009a1e:	19ba      	adds	r2, r7, r6
 8009a20:	1939      	adds	r1, r7, r4
 8009a22:	197b      	adds	r3, r7, r5
 8009a24:	0018      	movs	r0, r3
 8009a26:	f000 f9ff 	bl	8009e28 <my_conv_dt_2_dts>
		sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8009a2a:	4a0a      	ldr	r2, [pc, #40]	; (8009a54 <my_rtc_set_alarm+0xfc>)
 8009a2c:	490a      	ldr	r1, [pc, #40]	; (8009a58 <my_rtc_set_alarm+0x100>)
 8009a2e:	244c      	movs	r4, #76	; 0x4c
 8009a30:	1938      	adds	r0, r7, r4
 8009a32:	19bb      	adds	r3, r7, r6
 8009a34:	9300      	str	r3, [sp, #0]
 8009a36:	2341      	movs	r3, #65	; 0x41
 8009a38:	f002 f8c4 	bl	800bbc4 <sprintf>
		send_debug_logs ( m ) ;
 8009a3c:	193b      	adds	r3, r7, r4
 8009a3e:	0018      	movs	r0, r3
 8009a40:	f7f9 fbea 	bl	8003218 <send_debug_logs>
		return true ;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e000      	b.n	8009a4a <my_rtc_set_alarm+0xf2>
	}
	return false ;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	0018      	movs	r0, r3
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	b027      	add	sp, #156	; 0x9c
 8009a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a52:	46c0      	nop			; (mov r8, r8)
 8009a54:	08014374 	.word	0x08014374
 8009a58:	08014390 	.word	0x08014390
 8009a5c:	200006f4 	.word	0x200006f4

08009a60 <my_rtc_set_dt_from_nmea_rmc>:

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 8009a60:	b5b0      	push	{r4, r5, r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 8009a68:	2508      	movs	r5, #8
 8009a6a:	197b      	adds	r3, r7, r5
 8009a6c:	1cda      	adds	r2, r3, #3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	0011      	movs	r1, r2
 8009a72:	0018      	movs	r0, r3
 8009a74:	f000 fc9e 	bl	800a3b4 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 8009a78:	197b      	adds	r3, r7, r5
 8009a7a:	1c5a      	adds	r2, r3, #1
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	0011      	movs	r1, r2
 8009a80:	0018      	movs	r0, r3
 8009a82:	f000 fcd1 	bl	800a428 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 8009a86:	197b      	adds	r3, r7, r5
 8009a88:	1c9a      	adds	r2, r3, #2
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	0011      	movs	r1, r2
 8009a8e:	0018      	movs	r0, r3
 8009a90:	f000 fd04 	bl	800a49c <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 8009a94:	240c      	movs	r4, #12
 8009a96:	193a      	adds	r2, r7, r4
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	0011      	movs	r1, r2
 8009a9c:	0018      	movs	r0, r3
 8009a9e:	f000 fd37 	bl	800a510 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8009aa2:	193b      	adds	r3, r7, r4
 8009aa4:	1c5a      	adds	r2, r3, #1
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	0011      	movs	r1, r2
 8009aaa:	0018      	movs	r0, r3
 8009aac:	f000 fd6a 	bl	800a584 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8009ab0:	193b      	adds	r3, r7, r4
 8009ab2:	1c9a      	adds	r2, r3, #2
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	0011      	movs	r1, r2
 8009ab8:	0018      	movs	r0, r3
 8009aba:	f000 fd9d 	bl	800a5f8 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 8009abe:	193b      	adds	r3, r7, r4
 8009ac0:	1d1a      	adds	r2, r3, #4
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	0011      	movs	r1, r2
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	f000 fdd0 	bl	800a66c <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009acc:	193b      	adds	r3, r7, r4
 8009ace:	2200      	movs	r2, #0
 8009ad0:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009ad2:	193b      	adds	r3, r7, r4
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8009ad8:	4b0b      	ldr	r3, [pc, #44]	; (8009b08 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009ada:	0018      	movs	r0, r3
 8009adc:	f7fc fae3 	bl	80060a6 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8009ae0:	1939      	adds	r1, r7, r4
 8009ae2:	4b09      	ldr	r3, [pc, #36]	; (8009b08 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	0018      	movs	r0, r3
 8009ae8:	f7fb fe8a 	bl	8005800 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8009aec:	1979      	adds	r1, r7, r5
 8009aee:	4b06      	ldr	r3, [pc, #24]	; (8009b08 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	0018      	movs	r0, r3
 8009af4:	f7fb ff88 	bl	8005a08 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8009af8:	4b03      	ldr	r3, [pc, #12]	; (8009b08 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009afa:	0018      	movs	r0, r3
 8009afc:	f7fc fb07 	bl	800610e <HAL_RTCEx_DisableBypassShadow>
}
 8009b00:	46c0      	nop			; (mov r8, r8)
 8009b02:	46bd      	mov	sp, r7
 8009b04:	b008      	add	sp, #32
 8009b06:	bdb0      	pop	{r4, r5, r7, pc}
 8009b08:	200006f4 	.word	0x200006f4

08009b0c <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2100      	movs	r1, #0
 8009b18:	0018      	movs	r0, r3
 8009b1a:	f001 feb7 	bl	800b88c <strtod>
 8009b1e:	0002      	movs	r2, r0
 8009b20:	000b      	movs	r3, r1
 8009b22:	60ba      	str	r2, [r7, #8]
 8009b24:	60fb      	str	r3, [r7, #12]
    return d ;
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	68fb      	ldr	r3, [r7, #12]
}
 8009b2a:	0010      	movs	r0, r2
 8009b2c:	0019      	movs	r1, r3
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	b004      	add	sp, #16
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	0008      	movs	r0, r1
 8009b3e:	0011      	movs	r1, r2
 8009b40:	1cfb      	adds	r3, r7, #3
 8009b42:	1c02      	adds	r2, r0, #0
 8009b44:	701a      	strb	r2, [r3, #0]
 8009b46:	1cbb      	adds	r3, r7, #2
 8009b48:	1c0a      	adds	r2, r1, #0
 8009b4a:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8009b4c:	230f      	movs	r3, #15
 8009b4e:	18fb      	adds	r3, r7, r3
 8009b50:	2200      	movs	r2, #0
 8009b52:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8009b54:	230e      	movs	r3, #14
 8009b56:	18fb      	adds	r3, r7, r3
 8009b58:	2200      	movs	r2, #0
 8009b5a:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8009b5c:	e01c      	b.n	8009b98 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8009b5e:	230f      	movs	r3, #15
 8009b60:	18fb      	adds	r3, r7, r3
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	18d3      	adds	r3, r2, r3
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	1cfa      	adds	r2, r7, #3
 8009b6c:	7812      	ldrb	r2, [r2, #0]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d105      	bne.n	8009b7e <my_find_char_position+0x4a>
			p++ ;
 8009b72:	210e      	movs	r1, #14
 8009b74:	187b      	adds	r3, r7, r1
 8009b76:	781a      	ldrb	r2, [r3, #0]
 8009b78:	187b      	adds	r3, r7, r1
 8009b7a:	3201      	adds	r2, #1
 8009b7c:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8009b7e:	230e      	movs	r3, #14
 8009b80:	18fa      	adds	r2, r7, r3
 8009b82:	1cbb      	adds	r3, r7, #2
 8009b84:	7812      	ldrb	r2, [r2, #0]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d00e      	beq.n	8009baa <my_find_char_position+0x76>
			break ;
		i++ ;
 8009b8c:	210f      	movs	r1, #15
 8009b8e:	187b      	adds	r3, r7, r1
 8009b90:	781a      	ldrb	r2, [r3, #0]
 8009b92:	187b      	adds	r3, r7, r1
 8009b94:	3201      	adds	r2, #1
 8009b96:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8009b98:	230f      	movs	r3, #15
 8009b9a:	18fb      	adds	r3, r7, r3
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	18d3      	adds	r3, r2, r3
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1da      	bne.n	8009b5e <my_find_char_position+0x2a>
 8009ba8:	e000      	b.n	8009bac <my_find_char_position+0x78>
			break ;
 8009baa:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8009bac:	230f      	movs	r3, #15
 8009bae:	18fb      	adds	r3, r7, r3
 8009bb0:	781b      	ldrb	r3, [r3, #0]
}
 8009bb2:	0018      	movs	r0, r3
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	b004      	add	sp, #16
 8009bb8:	bd80      	pop	{r7, pc}
	...

08009bbc <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	78db      	ldrb	r3, [r3, #3]
 8009bca:	22fa      	movs	r2, #250	; 0xfa
 8009bcc:	00d2      	lsls	r2, r2, #3
 8009bce:	4694      	mov	ip, r2
 8009bd0:	4463      	add	r3, ip
 8009bd2:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	0013      	movs	r3, r2
 8009bd8:	00db      	lsls	r3, r3, #3
 8009bda:	189b      	adds	r3, r3, r2
 8009bdc:	00db      	lsls	r3, r3, #3
 8009bde:	189b      	adds	r3, r3, r2
 8009be0:	009a      	lsls	r2, r3, #2
 8009be2:	189a      	adds	r2, r3, r2
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	492c      	ldr	r1, [pc, #176]	; (8009c98 <my_conv_rtc2timestamp+0xdc>)
 8009be8:	468c      	mov	ip, r1
 8009bea:	4463      	add	r3, ip
 8009bec:	089b      	lsrs	r3, r3, #2
 8009bee:	18d3      	adds	r3, r2, r3
 8009bf0:	4a2a      	ldr	r2, [pc, #168]	; (8009c9c <my_conv_rtc2timestamp+0xe0>)
 8009bf2:	4694      	mov	ip, r2
 8009bf4:	4463      	add	r3, ip
 8009bf6:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	613b      	str	r3, [r7, #16]
 8009bfc:	e00a      	b.n	8009c14 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 8009bfe:	4a28      	ldr	r2, [pc, #160]	; (8009ca0 <my_conv_rtc2timestamp+0xe4>)
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	18d3      	adds	r3, r2, r3
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	001a      	movs	r2, r3
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	189b      	adds	r3, r3, r2
 8009c0c:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	3301      	adds	r3, #1
 8009c12:	613b      	str	r3, [r7, #16]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	785b      	ldrb	r3, [r3, #1]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	693a      	ldr	r2, [r7, #16]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	dbee      	blt.n	8009bfe <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	785b      	ldrb	r3, [r3, #1]
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d908      	bls.n	8009c3a <my_conv_rtc2timestamp+0x7e>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	0018      	movs	r0, r3
 8009c2c:	f000 f8de 	bl	8009dec <my_conv_is_leap_year>
 8009c30:	1e03      	subs	r3, r0, #0
 8009c32:	d002      	beq.n	8009c3a <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	3301      	adds	r3, #1
 8009c38:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	789b      	ldrb	r3, [r3, #2]
 8009c3e:	001a      	movs	r2, r3
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	18d3      	adds	r3, r2, r3
 8009c44:	3b01      	subs	r3, #1
 8009c46:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	0013      	movs	r3, r2
 8009c4c:	005b      	lsls	r3, r3, #1
 8009c4e:	189b      	adds	r3, r3, r2
 8009c50:	011a      	lsls	r2, r3, #4
 8009c52:	1ad2      	subs	r2, r2, r3
 8009c54:	0113      	lsls	r3, r2, #4
 8009c56:	1a9b      	subs	r3, r3, r2
 8009c58:	01db      	lsls	r3, r3, #7
 8009c5a:	0019      	movs	r1, r3
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	001a      	movs	r2, r3
 8009c62:	0013      	movs	r3, r2
 8009c64:	011b      	lsls	r3, r3, #4
 8009c66:	1a9b      	subs	r3, r3, r2
 8009c68:	011a      	lsls	r2, r3, #4
 8009c6a:	1ad2      	subs	r2, r2, r3
 8009c6c:	0113      	lsls	r3, r2, #4
 8009c6e:	001a      	movs	r2, r3
 8009c70:	0013      	movs	r3, r2
 8009c72:	18ca      	adds	r2, r1, r3
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	785b      	ldrb	r3, [r3, #1]
 8009c78:	0019      	movs	r1, r3
 8009c7a:	000b      	movs	r3, r1
 8009c7c:	011b      	lsls	r3, r3, #4
 8009c7e:	1a5b      	subs	r3, r3, r1
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	18d3      	adds	r3, r2, r3
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	7892      	ldrb	r2, [r2, #2]
 8009c88:	189b      	adds	r3, r3, r2
 8009c8a:	60bb      	str	r3, [r7, #8]

    return ts ;
 8009c8c:	68bb      	ldr	r3, [r7, #8]
}
 8009c8e:	0018      	movs	r0, r3
 8009c90:	46bd      	mov	sp, r7
 8009c92:	b006      	add	sp, #24
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	46c0      	nop			; (mov r8, r8)
 8009c98:	fffff84f 	.word	0xfffff84f
 8009c9c:	fff50736 	.word	0xfff50736
 8009ca0:	080144ac 	.word	0x080144ac

08009ca4 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009ca4:	b590      	push	{r4, r7, lr}
 8009ca6:	b08b      	sub	sp, #44	; 0x2c
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	213c      	movs	r1, #60	; 0x3c
 8009cb4:	0018      	movs	r0, r3
 8009cb6:	f7f6 fac7 	bl	8000248 <__aeabi_uidivmod>
 8009cba:	000b      	movs	r3, r1
 8009cbc:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	213c      	movs	r1, #60	; 0x3c
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	f7f6 fa3a 	bl	800013c <__udivsi3>
 8009cc8:	0003      	movs	r3, r0
 8009cca:	213c      	movs	r1, #60	; 0x3c
 8009ccc:	0018      	movs	r0, r3
 8009cce:	f7f6 fabb 	bl	8000248 <__aeabi_uidivmod>
 8009cd2:	000b      	movs	r3, r1
 8009cd4:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	22e1      	movs	r2, #225	; 0xe1
 8009cda:	0111      	lsls	r1, r2, #4
 8009cdc:	0018      	movs	r0, r3
 8009cde:	f7f6 fa2d 	bl	800013c <__udivsi3>
 8009ce2:	0003      	movs	r3, r0
 8009ce4:	2118      	movs	r1, #24
 8009ce6:	0018      	movs	r0, r3
 8009ce8:	f7f6 faae 	bl	8000248 <__aeabi_uidivmod>
 8009cec:	000b      	movs	r3, r1
 8009cee:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	493b      	ldr	r1, [pc, #236]	; (8009de0 <my_conv_timestamp2rtc+0x13c>)
 8009cf4:	0018      	movs	r0, r3
 8009cf6:	f7f6 fa21 	bl	800013c <__udivsi3>
 8009cfa:	0003      	movs	r3, r0
 8009cfc:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 8009cfe:	4b39      	ldr	r3, [pc, #228]	; (8009de4 <my_conv_timestamp2rtc+0x140>)
 8009d00:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8009d02:	e00d      	b.n	8009d20 <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	0018      	movs	r0, r3
 8009d08:	f000 f870 	bl	8009dec <my_conv_is_leap_year>
 8009d0c:	0003      	movs	r3, r0
 8009d0e:	336e      	adds	r3, #110	; 0x6e
 8009d10:	33ff      	adds	r3, #255	; 0xff
 8009d12:	001a      	movs	r2, r3
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	1a9b      	subs	r3, r3, r2
 8009d18:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 8009d1a:	6a3b      	ldr	r3, [r7, #32]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	0018      	movs	r0, r3
 8009d24:	f000 f862 	bl	8009dec <my_conv_is_leap_year>
 8009d28:	0003      	movs	r3, r0
 8009d2a:	336e      	adds	r3, #110	; 0x6e
 8009d2c:	33ff      	adds	r3, #255	; 0xff
 8009d2e:	001a      	movs	r2, r3
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d2e6      	bcs.n	8009d04 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 8009d36:	2300      	movs	r3, #0
 8009d38:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8009d3a:	e018      	b.n	8009d6e <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 8009d3c:	4b2a      	ldr	r3, [pc, #168]	; (8009de8 <my_conv_timestamp2rtc+0x144>)
 8009d3e:	69fa      	ldr	r2, [r7, #28]
 8009d40:	0052      	lsls	r2, r2, #1
 8009d42:	5ad3      	ldrh	r3, [r2, r3]
 8009d44:	001c      	movs	r4, r3
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d107      	bne.n	8009d5c <my_conv_timestamp2rtc+0xb8>
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	0018      	movs	r0, r3
 8009d50:	f000 f84c 	bl	8009dec <my_conv_is_leap_year>
 8009d54:	1e03      	subs	r3, r0, #0
 8009d56:	d001      	beq.n	8009d5c <my_conv_timestamp2rtc+0xb8>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e000      	b.n	8009d5e <my_conv_timestamp2rtc+0xba>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	191b      	adds	r3, r3, r4
 8009d60:	001a      	movs	r2, r3
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d64:	1a9b      	subs	r3, r3, r2
 8009d66:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8009d6e:	4b1e      	ldr	r3, [pc, #120]	; (8009de8 <my_conv_timestamp2rtc+0x144>)
 8009d70:	69fa      	ldr	r2, [r7, #28]
 8009d72:	0052      	lsls	r2, r2, #1
 8009d74:	5ad3      	ldrh	r3, [r2, r3]
 8009d76:	001c      	movs	r4, r3
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d107      	bne.n	8009d8e <my_conv_timestamp2rtc+0xea>
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	0018      	movs	r0, r3
 8009d82:	f000 f833 	bl	8009dec <my_conv_is_leap_year>
 8009d86:	1e03      	subs	r3, r0, #0
 8009d88:	d001      	beq.n	8009d8e <my_conv_timestamp2rtc+0xea>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e000      	b.n	8009d90 <my_conv_timestamp2rtc+0xec>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	191b      	adds	r3, r3, r4
 8009d92:	001a      	movs	r2, r3
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d2d0      	bcs.n	8009d3c <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	3330      	adds	r3, #48	; 0x30
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	3301      	adds	r3, #1
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 8009db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	3301      	adds	r3, #1
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	b2da      	uxtb	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	b2da      	uxtb	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	709a      	strb	r2, [r3, #2]
}
 8009dd6:	46c0      	nop			; (mov r8, r8)
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	b00b      	add	sp, #44	; 0x2c
 8009ddc:	bd90      	pop	{r4, r7, pc}
 8009dde:	46c0      	nop			; (mov r8, r8)
 8009de0:	00015180 	.word	0x00015180
 8009de4:	000007b2 	.word	0x000007b2
 8009de8:	080144b8 	.word	0x080144b8

08009dec <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2203      	movs	r2, #3
 8009df8:	4013      	ands	r3, r2
 8009dfa:	d106      	bne.n	8009e0a <my_conv_is_leap_year+0x1e>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2164      	movs	r1, #100	; 0x64
 8009e00:	0018      	movs	r0, r3
 8009e02:	f7f6 fb0b 	bl	800041c <__aeabi_idivmod>
 8009e06:	1e0b      	subs	r3, r1, #0
 8009e08:	d107      	bne.n	8009e1a <my_conv_is_leap_year+0x2e>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	22c8      	movs	r2, #200	; 0xc8
 8009e0e:	0051      	lsls	r1, r2, #1
 8009e10:	0018      	movs	r0, r3
 8009e12:	f7f6 fb03 	bl	800041c <__aeabi_idivmod>
 8009e16:	1e0b      	subs	r3, r1, #0
 8009e18:	d101      	bne.n	8009e1e <my_conv_is_leap_year+0x32>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e000      	b.n	8009e20 <my_conv_is_leap_year+0x34>
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	0018      	movs	r0, r3
 8009e22:	46bd      	mov	sp, r7
 8009e24:	b002      	add	sp, #8
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 8009e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e2a:	b089      	sub	sp, #36	; 0x24
 8009e2c:	af04      	add	r7, sp, #16
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	78db      	ldrb	r3, [r3, #3]
 8009e38:	22fa      	movs	r2, #250	; 0xfa
 8009e3a:	00d2      	lsls	r2, r2, #3
 8009e3c:	189a      	adds	r2, r3, r2
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	785b      	ldrb	r3, [r3, #1]
 8009e42:	469c      	mov	ip, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	789b      	ldrb	r3, [r3, #2]
 8009e48:	001c      	movs	r4, r3
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	001d      	movs	r5, r3
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	785b      	ldrb	r3, [r3, #1]
 8009e54:	001e      	movs	r6, r3
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	789b      	ldrb	r3, [r3, #2]
 8009e5a:	4906      	ldr	r1, [pc, #24]	; (8009e74 <my_conv_dt_2_dts+0x4c>)
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	9303      	str	r3, [sp, #12]
 8009e60:	9602      	str	r6, [sp, #8]
 8009e62:	9501      	str	r5, [sp, #4]
 8009e64:	9400      	str	r4, [sp, #0]
 8009e66:	4663      	mov	r3, ip
 8009e68:	f001 feac 	bl	800bbc4 <sprintf>
}
 8009e6c:	46c0      	nop			; (mov r8, r8)
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	b005      	add	sp, #20
 8009e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e74:	0801439c 	.word	0x0801439c

08009e78 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b24      	cmp	r3, #36	; 0x24
 8009e8a:	d117      	bne.n	8009ebc <my_nmea_message+0x44>
    {
        *i = 0 ;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	1c5a      	adds	r2, r3, #1
 8009e98:	b2d1      	uxtb	r1, r2
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	7011      	strb	r1, [r2, #0]
 8009e9e:	001a      	movs	r2, r3
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	189b      	adds	r3, r3, r2
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	7812      	ldrb	r2, [r2, #0]
 8009ea8:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	001a      	movs	r2, r3
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	189b      	adds	r3, r3, r2
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	e045      	b.n	8009f48 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	2b1f      	cmp	r3, #31
 8009ec2:	d907      	bls.n	8009ed4 <my_nmea_message+0x5c>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	2b7e      	cmp	r3, #126	; 0x7e
 8009eca:	d803      	bhi.n	8009ed4 <my_nmea_message+0x5c>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d103      	bne.n	8009edc <my_nmea_message+0x64>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	2b0d      	cmp	r3, #13
 8009eda:	d114      	bne.n	8009f06 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	1c5a      	adds	r2, r3, #1
 8009ee2:	b2d1      	uxtb	r1, r2
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	7011      	strb	r1, [r2, #0]
 8009ee8:	001a      	movs	r2, r3
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	189b      	adds	r3, r3, r2
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	7812      	ldrb	r2, [r2, #0]
 8009ef2:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	001a      	movs	r2, r3
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	189b      	adds	r3, r3, r2
 8009efe:	2200      	movs	r2, #0
 8009f00:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e020      	b.n	8009f48 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	2b0a      	cmp	r3, #10
 8009f0c:	d11a      	bne.n	8009f44 <my_nmea_message+0xcc>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d916      	bls.n	8009f44 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	701a      	strb	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	001a      	movs	r2, r3
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	189b      	adds	r3, r3, r2
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	2b0d      	cmp	r3, #13
 8009f30:	d108      	bne.n	8009f44 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	001a      	movs	r2, r3
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	189b      	adds	r3, r3, r2
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8009f40:	2302      	movs	r3, #2
 8009f42:	e001      	b.n	8009f48 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8009f44:	2301      	movs	r3, #1
 8009f46:	425b      	negs	r3, r3
}
 8009f48:	0018      	movs	r0, r3
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	b004      	add	sp, #16
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
	return m[9] ;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	3309      	adds	r3, #9
 8009f5c:	781b      	ldrb	r3, [r3, #0]
}
 8009f5e:	0018      	movs	r0, r3
 8009f60:	46bd      	mov	sp, r7
 8009f62:	b002      	add	sp, #8
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8009f66:	b5b0      	push	{r4, r5, r7, lr}
 8009f68:	b086      	sub	sp, #24
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	220f      	movs	r2, #15
 8009f72:	212c      	movs	r1, #44	; 0x2c
 8009f74:	0018      	movs	r0, r3
 8009f76:	f7ff fddd 	bl	8009b34 <my_find_char_position>
 8009f7a:	0003      	movs	r3, r0
 8009f7c:	001a      	movs	r2, r3
 8009f7e:	2517      	movs	r5, #23
 8009f80:	197b      	adds	r3, r7, r5
 8009f82:	3201      	adds	r2, #1
 8009f84:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2210      	movs	r2, #16
 8009f8a:	212c      	movs	r1, #44	; 0x2c
 8009f8c:	0018      	movs	r0, r3
 8009f8e:	f7ff fdd1 	bl	8009b34 <my_find_char_position>
 8009f92:	0003      	movs	r3, r0
 8009f94:	0019      	movs	r1, r3
 8009f96:	2416      	movs	r4, #22
 8009f98:	193b      	adds	r3, r7, r4
 8009f9a:	197a      	adds	r2, r7, r5
 8009f9c:	7812      	ldrb	r2, [r2, #0]
 8009f9e:	1a8a      	subs	r2, r1, r2
 8009fa0:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 8009fa2:	193b      	adds	r3, r7, r4
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	0018      	movs	r0, r3
 8009faa:	f000 fc0d 	bl	800a7c8 <malloc>
 8009fae:	0003      	movs	r3, r0
 8009fb0:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 8009fb2:	197b      	adds	r3, r7, r5
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	18d1      	adds	r1, r2, r3
 8009fba:	193b      	adds	r3, r7, r4
 8009fbc:	781a      	ldrb	r2, [r3, #0]
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	0018      	movs	r0, r3
 8009fc2:	f001 feae 	bl	800bd22 <strncpy>
	pdop_s[pdop_length] = '\0';
 8009fc6:	193b      	adds	r3, r7, r4
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	693a      	ldr	r2, [r7, #16]
 8009fcc:	18d3      	adds	r3, r2, r3
 8009fce:	2200      	movs	r2, #0
 8009fd0:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	0018      	movs	r0, r3
 8009fd6:	f7ff fd99 	bl	8009b0c <my_string2double_conv>
 8009fda:	0002      	movs	r2, r0
 8009fdc:	000b      	movs	r3, r1
 8009fde:	60ba      	str	r2, [r7, #8]
 8009fe0:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	0018      	movs	r0, r3
 8009fe6:	f000 fbf9 	bl	800a7dc <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	68fb      	ldr	r3, [r7, #12]
}
 8009fee:	0010      	movs	r0, r2
 8009ff0:	0019      	movs	r1, r3
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	b006      	add	sp, #24
 8009ff6:	bdb0      	pop	{r4, r5, r7, pc}

08009ff8 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 8009ff8:	b590      	push	{r4, r7, lr}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800a000:	230f      	movs	r3, #15
 800a002:	18fb      	adds	r3, r7, r3
 800a004:	2200      	movs	r2, #0
 800a006:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800a008:	230e      	movs	r3, #14
 800a00a:	18fb      	adds	r3, r7, r3
 800a00c:	2201      	movs	r2, #1
 800a00e:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a010:	e00f      	b.n	800a032 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800a012:	220e      	movs	r2, #14
 800a014:	18bb      	adds	r3, r7, r2
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	18ba      	adds	r2, r7, r2
 800a01a:	1c59      	adds	r1, r3, #1
 800a01c:	7011      	strb	r1, [r2, #0]
 800a01e:	001a      	movs	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	189b      	adds	r3, r3, r2
 800a024:	7819      	ldrb	r1, [r3, #0]
 800a026:	220f      	movs	r2, #15
 800a028:	18bb      	adds	r3, r7, r2
 800a02a:	18ba      	adds	r2, r7, r2
 800a02c:	7812      	ldrb	r2, [r2, #0]
 800a02e:	404a      	eors	r2, r1
 800a030:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a032:	210e      	movs	r1, #14
 800a034:	187b      	adds	r3, r7, r1
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	18d3      	adds	r3, r2, r3
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2b2a      	cmp	r3, #42	; 0x2a
 800a040:	d00a      	beq.n	800a058 <is_my_nmea_checksum_ok+0x60>
 800a042:	187b      	adds	r3, r7, r1
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	18d3      	adds	r3, r2, r3
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d003      	beq.n	800a058 <is_my_nmea_checksum_ok+0x60>
 800a050:	187b      	adds	r3, r7, r1
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1dc      	bne.n	800a012 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800a058:	230f      	movs	r3, #15
 800a05a:	18fb      	adds	r3, r7, r3
 800a05c:	781c      	ldrb	r4, [r3, #0]
 800a05e:	210e      	movs	r1, #14
 800a060:	187b      	adds	r3, r7, r1
 800a062:	187a      	adds	r2, r7, r1
 800a064:	7812      	ldrb	r2, [r2, #0]
 800a066:	3201      	adds	r2, #1
 800a068:	701a      	strb	r2, [r3, #0]
 800a06a:	187b      	adds	r3, r7, r1
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	18d3      	adds	r3, r2, r3
 800a072:	2210      	movs	r2, #16
 800a074:	2100      	movs	r1, #0
 800a076:	0018      	movs	r0, r3
 800a078:	f001 fca0 	bl	800b9bc <strtol>
 800a07c:	0003      	movs	r3, r0
 800a07e:	1ae3      	subs	r3, r4, r3
 800a080:	425a      	negs	r2, r3
 800a082:	4153      	adcs	r3, r2
 800a084:	b2db      	uxtb	r3, r3
}
 800a086:	0018      	movs	r0, r3
 800a088:	46bd      	mov	sp, r7
 800a08a:	b005      	add	sp, #20
 800a08c:	bd90      	pop	{r4, r7, pc}
	...

0800a090 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800a090:	b5b0      	push	{r4, r5, r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	000a      	movs	r2, r1
 800a09a:	1cfb      	adds	r3, r7, #3
 800a09c:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800a09e:	2308      	movs	r3, #8
 800a0a0:	18fa      	adds	r2, r7, r3
 800a0a2:	492f      	ldr	r1, [pc, #188]	; (800a160 <nmea2decimal+0xd0>)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	0018      	movs	r0, r3
 800a0a8:	f001 fdac 	bl	800bc04 <sscanf>
    min = deg / 100 ;
 800a0ac:	68b8      	ldr	r0, [r7, #8]
 800a0ae:	68f9      	ldr	r1, [r7, #12]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	4b2c      	ldr	r3, [pc, #176]	; (800a164 <nmea2decimal+0xd4>)
 800a0b4:	f7f6 fee0 	bl	8000e78 <__aeabi_ddiv>
 800a0b8:	0002      	movs	r2, r0
 800a0ba:	000b      	movs	r3, r1
 800a0bc:	613a      	str	r2, [r7, #16]
 800a0be:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800a0c0:	6938      	ldr	r0, [r7, #16]
 800a0c2:	6979      	ldr	r1, [r7, #20]
 800a0c4:	f7f8 f934 	bl	8002330 <__aeabi_d2iz>
 800a0c8:	0003      	movs	r3, r0
 800a0ca:	0018      	movs	r0, r3
 800a0cc:	f7f8 f966 	bl	800239c <__aeabi_i2d>
 800a0d0:	0002      	movs	r2, r0
 800a0d2:	000b      	movs	r3, r1
 800a0d4:	60ba      	str	r2, [r7, #8]
 800a0d6:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800a0d8:	68ba      	ldr	r2, [r7, #8]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6938      	ldr	r0, [r7, #16]
 800a0de:	6979      	ldr	r1, [r7, #20]
 800a0e0:	f7f7 fd86 	bl	8001bf0 <__aeabi_dsub>
 800a0e4:	0002      	movs	r2, r0
 800a0e6:	000b      	movs	r3, r1
 800a0e8:	0010      	movs	r0, r2
 800a0ea:	0019      	movs	r1, r3
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	4b1e      	ldr	r3, [pc, #120]	; (800a168 <nmea2decimal+0xd8>)
 800a0f0:	f7f7 fabc 	bl	800166c <__aeabi_dmul>
 800a0f4:	0002      	movs	r2, r0
 800a0f6:	000b      	movs	r3, r1
 800a0f8:	613a      	str	r2, [r7, #16]
 800a0fa:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	4b1b      	ldr	r3, [pc, #108]	; (800a16c <nmea2decimal+0xdc>)
 800a100:	6938      	ldr	r0, [r7, #16]
 800a102:	6979      	ldr	r1, [r7, #20]
 800a104:	f7f6 feb8 	bl	8000e78 <__aeabi_ddiv>
 800a108:	0002      	movs	r2, r0
 800a10a:	000b      	movs	r3, r1
 800a10c:	613a      	str	r2, [r7, #16]
 800a10e:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800a110:	1cfb      	adds	r3, r7, #3
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	2b53      	cmp	r3, #83	; 0x53
 800a116:	d003      	beq.n	800a120 <nmea2decimal+0x90>
 800a118:	1cfb      	adds	r3, r7, #3
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	2b57      	cmp	r3, #87	; 0x57
 800a11e:	d10e      	bne.n	800a13e <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800a120:	68b8      	ldr	r0, [r7, #8]
 800a122:	68f9      	ldr	r1, [r7, #12]
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f7f6 fb46 	bl	80007b8 <__aeabi_dadd>
 800a12c:	0002      	movs	r2, r0
 800a12e:	000b      	movs	r3, r1
 800a130:	0011      	movs	r1, r2
 800a132:	000c      	movs	r4, r1
 800a134:	2180      	movs	r1, #128	; 0x80
 800a136:	0609      	lsls	r1, r1, #24
 800a138:	4059      	eors	r1, r3
 800a13a:	000d      	movs	r5, r1
 800a13c:	e009      	b.n	800a152 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800a13e:	68b8      	ldr	r0, [r7, #8]
 800a140:	68f9      	ldr	r1, [r7, #12]
 800a142:	693a      	ldr	r2, [r7, #16]
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	f7f6 fb37 	bl	80007b8 <__aeabi_dadd>
 800a14a:	0002      	movs	r2, r0
 800a14c:	000b      	movs	r3, r1
 800a14e:	0014      	movs	r4, r2
 800a150:	001d      	movs	r5, r3
}
 800a152:	0022      	movs	r2, r4
 800a154:	002b      	movs	r3, r5
 800a156:	0010      	movs	r0, r2
 800a158:	0019      	movs	r1, r3
 800a15a:	46bd      	mov	sp, r7
 800a15c:	b006      	add	sp, #24
 800a15e:	bdb0      	pop	{r4, r5, r7, pc}
 800a160:	080143bc 	.word	0x080143bc
 800a164:	40590000 	.word	0x40590000
 800a168:	40240000 	.word	0x40240000
 800a16c:	40180000 	.word	0x40180000

0800a170 <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 800a170:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a172:	b08d      	sub	sp, #52	; 0x34
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	212c      	movs	r1, #44	; 0x2c
 800a180:	0018      	movs	r0, r3
 800a182:	f7ff fcd7 	bl	8009b34 <my_find_char_position>
 800a186:	0003      	movs	r3, r0
 800a188:	001a      	movs	r2, r3
 800a18a:	252f      	movs	r5, #47	; 0x2f
 800a18c:	197b      	adds	r3, r7, r5
 800a18e:	3201      	adds	r2, #1
 800a190:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2202      	movs	r2, #2
 800a196:	212c      	movs	r1, #44	; 0x2c
 800a198:	0018      	movs	r0, r3
 800a19a:	f7ff fccb 	bl	8009b34 <my_find_char_position>
 800a19e:	0003      	movs	r3, r0
 800a1a0:	0019      	movs	r1, r3
 800a1a2:	242e      	movs	r4, #46	; 0x2e
 800a1a4:	193b      	adds	r3, r7, r4
 800a1a6:	197a      	adds	r2, r7, r5
 800a1a8:	7812      	ldrb	r2, [r2, #0]
 800a1aa:	1a8a      	subs	r2, r1, r2
 800a1ac:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a1ae:	193b      	adds	r3, r7, r4
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	0018      	movs	r0, r3
 800a1b6:	f000 fb07 	bl	800a7c8 <malloc>
 800a1ba:	0003      	movs	r3, r0
 800a1bc:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a1be:	197b      	adds	r3, r7, r5
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	18d1      	adds	r1, r2, r3
 800a1c6:	193b      	adds	r3, r7, r4
 800a1c8:	781a      	ldrb	r2, [r3, #0]
 800a1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1cc:	0018      	movs	r0, r3
 800a1ce:	f001 fda8 	bl	800bd22 <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800a1d2:	193b      	adds	r3, r7, r4
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1d8:	18d3      	adds	r3, r2, r3
 800a1da:	2200      	movs	r2, #0
 800a1dc:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a1de:	197b      	adds	r3, r7, r5
 800a1e0:	781a      	ldrb	r2, [r3, #0]
 800a1e2:	193b      	adds	r3, r7, r4
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	18d3      	adds	r3, r2, r3
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	18d2      	adds	r2, r2, r3
 800a1ee:	2627      	movs	r6, #39	; 0x27
 800a1f0:	19bb      	adds	r3, r7, r6
 800a1f2:	7812      	ldrb	r2, [r2, #0]
 800a1f4:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800a1f6:	19bb      	adds	r3, r7, r6
 800a1f8:	781a      	ldrb	r2, [r3, #0]
 800a1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fc:	0011      	movs	r1, r2
 800a1fe:	0018      	movs	r0, r3
 800a200:	f7ff ff46 	bl	800a090 <nmea2decimal>
 800a204:	0002      	movs	r2, r0
 800a206:	000b      	movs	r3, r1
 800a208:	61ba      	str	r2, [r7, #24]
 800a20a:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 800a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20e:	0018      	movs	r0, r3
 800a210:	f000 fae4 	bl	800a7dc <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800a214:	2200      	movs	r2, #0
 800a216:	4b49      	ldr	r3, [pc, #292]	; (800a33c <my_nmea_get_gngll_coordinates+0x1cc>)
 800a218:	69b8      	ldr	r0, [r7, #24]
 800a21a:	69f9      	ldr	r1, [r7, #28]
 800a21c:	f7f7 fa26 	bl	800166c <__aeabi_dmul>
 800a220:	0002      	movs	r2, r0
 800a222:	000b      	movs	r3, r1
 800a224:	0010      	movs	r0, r2
 800a226:	0019      	movs	r1, r3
 800a228:	f008 facc 	bl	80127c4 <round>
 800a22c:	2200      	movs	r2, #0
 800a22e:	4b43      	ldr	r3, [pc, #268]	; (800a33c <my_nmea_get_gngll_coordinates+0x1cc>)
 800a230:	f7f6 fe22 	bl	8000e78 <__aeabi_ddiv>
 800a234:	0002      	movs	r2, r0
 800a236:	000b      	movs	r3, r1
 800a238:	61ba      	str	r2, [r7, #24]
 800a23a:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800a23c:	2200      	movs	r2, #0
 800a23e:	4b40      	ldr	r3, [pc, #256]	; (800a340 <my_nmea_get_gngll_coordinates+0x1d0>)
 800a240:	69b8      	ldr	r0, [r7, #24]
 800a242:	69f9      	ldr	r1, [r7, #28]
 800a244:	f7f7 fa12 	bl	800166c <__aeabi_dmul>
 800a248:	0002      	movs	r2, r0
 800a24a:	000b      	movs	r3, r1
 800a24c:	0010      	movs	r0, r2
 800a24e:	0019      	movs	r1, r3
 800a250:	f7f8 f86e 	bl	8002330 <__aeabi_d2iz>
 800a254:	0002      	movs	r2, r0
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2203      	movs	r2, #3
 800a25e:	212c      	movs	r1, #44	; 0x2c
 800a260:	0018      	movs	r0, r3
 800a262:	f7ff fc67 	bl	8009b34 <my_find_char_position>
 800a266:	0003      	movs	r3, r0
 800a268:	001a      	movs	r2, r3
 800a26a:	197b      	adds	r3, r7, r5
 800a26c:	3201      	adds	r2, #1
 800a26e:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2204      	movs	r2, #4
 800a274:	212c      	movs	r1, #44	; 0x2c
 800a276:	0018      	movs	r0, r3
 800a278:	f7ff fc5c 	bl	8009b34 <my_find_char_position>
 800a27c:	0003      	movs	r3, r0
 800a27e:	0019      	movs	r1, r3
 800a280:	193b      	adds	r3, r7, r4
 800a282:	197a      	adds	r2, r7, r5
 800a284:	7812      	ldrb	r2, [r2, #0]
 800a286:	1a8a      	subs	r2, r1, r2
 800a288:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a28a:	193b      	adds	r3, r7, r4
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	3301      	adds	r3, #1
 800a290:	0018      	movs	r0, r3
 800a292:	f000 fa99 	bl	800a7c8 <malloc>
 800a296:	0003      	movs	r3, r0
 800a298:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a29a:	197b      	adds	r3, r7, r5
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	18d1      	adds	r1, r2, r3
 800a2a2:	193b      	adds	r3, r7, r4
 800a2a4:	781a      	ldrb	r2, [r3, #0]
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	0018      	movs	r0, r3
 800a2aa:	f001 fd3a 	bl	800bd22 <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800a2ae:	193b      	adds	r3, r7, r4
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	18d3      	adds	r3, r2, r3
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a2ba:	197b      	adds	r3, r7, r5
 800a2bc:	781a      	ldrb	r2, [r3, #0]
 800a2be:	193b      	adds	r3, r7, r4
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	18d3      	adds	r3, r2, r3
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	18d2      	adds	r2, r2, r3
 800a2ca:	19bb      	adds	r3, r7, r6
 800a2cc:	7812      	ldrb	r2, [r2, #0]
 800a2ce:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800a2d0:	19bb      	adds	r3, r7, r6
 800a2d2:	781a      	ldrb	r2, [r3, #0]
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	0011      	movs	r1, r2
 800a2d8:	0018      	movs	r0, r3
 800a2da:	f7ff fed9 	bl	800a090 <nmea2decimal>
 800a2de:	0002      	movs	r2, r0
 800a2e0:	000b      	movs	r3, r1
 800a2e2:	60ba      	str	r2, [r7, #8]
 800a2e4:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	0018      	movs	r0, r3
 800a2ea:	f000 fa77 	bl	800a7dc <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	4b12      	ldr	r3, [pc, #72]	; (800a33c <my_nmea_get_gngll_coordinates+0x1cc>)
 800a2f2:	68b8      	ldr	r0, [r7, #8]
 800a2f4:	68f9      	ldr	r1, [r7, #12]
 800a2f6:	f7f7 f9b9 	bl	800166c <__aeabi_dmul>
 800a2fa:	0002      	movs	r2, r0
 800a2fc:	000b      	movs	r3, r1
 800a2fe:	0010      	movs	r0, r2
 800a300:	0019      	movs	r1, r3
 800a302:	f008 fa5f 	bl	80127c4 <round>
 800a306:	2200      	movs	r2, #0
 800a308:	4b0c      	ldr	r3, [pc, #48]	; (800a33c <my_nmea_get_gngll_coordinates+0x1cc>)
 800a30a:	f7f6 fdb5 	bl	8000e78 <__aeabi_ddiv>
 800a30e:	0002      	movs	r2, r0
 800a310:	000b      	movs	r3, r1
 800a312:	60ba      	str	r2, [r7, #8]
 800a314:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800a316:	2200      	movs	r2, #0
 800a318:	4b09      	ldr	r3, [pc, #36]	; (800a340 <my_nmea_get_gngll_coordinates+0x1d0>)
 800a31a:	68b8      	ldr	r0, [r7, #8]
 800a31c:	68f9      	ldr	r1, [r7, #12]
 800a31e:	f7f7 f9a5 	bl	800166c <__aeabi_dmul>
 800a322:	0002      	movs	r2, r0
 800a324:	000b      	movs	r3, r1
 800a326:	0010      	movs	r0, r2
 800a328:	0019      	movs	r1, r3
 800a32a:	f7f8 f801 	bl	8002330 <__aeabi_d2iz>
 800a32e:	0002      	movs	r2, r0
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	605a      	str	r2, [r3, #4]
}
 800a334:	46c0      	nop			; (mov r8, r8)
 800a336:	46bd      	mov	sp, r7
 800a338:	b00d      	add	sp, #52	; 0x34
 800a33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a33c:	412e8480 	.word	0x412e8480
 800a340:	416312d0 	.word	0x416312d0

0800a344 <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800a344:	b5b0      	push	{r4, r5, r7, lr}
 800a346:	b086      	sub	sp, #24
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800a34c:	240e      	movs	r4, #14
 800a34e:	193b      	adds	r3, r7, r4
 800a350:	2200      	movs	r2, #0
 800a352:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2203      	movs	r2, #3
 800a358:	212c      	movs	r1, #44	; 0x2c
 800a35a:	0018      	movs	r0, r3
 800a35c:	f7ff fbea 	bl	8009b34 <my_find_char_position>
 800a360:	0003      	movs	r3, r0
 800a362:	001a      	movs	r2, r3
 800a364:	2517      	movs	r5, #23
 800a366:	197b      	adds	r3, r7, r5
 800a368:	3201      	adds	r2, #1
 800a36a:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a36c:	2003      	movs	r0, #3
 800a36e:	f000 fa2b 	bl	800a7c8 <malloc>
 800a372:	0003      	movs	r3, r0
 800a374:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a376:	197b      	adds	r3, r7, r5
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	18d1      	adds	r1, r2, r3
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	2202      	movs	r2, #2
 800a382:	0018      	movs	r0, r3
 800a384:	f001 fccd 	bl	800bd22 <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	3302      	adds	r3, #2
 800a38c:	2200      	movs	r2, #0
 800a38e:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800a390:	193a      	adds	r2, r7, r4
 800a392:	4907      	ldr	r1, [pc, #28]	; (800a3b0 <my_nmea_get_gsv_tns+0x6c>)
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	0018      	movs	r0, r3
 800a398:	f001 fc34 	bl	800bc04 <sscanf>
	free ( s ) ;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	0018      	movs	r0, r3
 800a3a0:	f000 fa1c 	bl	800a7dc <free>
	return tns ;
 800a3a4:	193b      	adds	r3, r7, r4
 800a3a6:	881b      	ldrh	r3, [r3, #0]
}
 800a3a8:	0018      	movs	r0, r3
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	b006      	add	sp, #24
 800a3ae:	bdb0      	pop	{r4, r5, r7, pc}
 800a3b0:	080143c8 	.word	0x080143c8

0800a3b4 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800a3b4:	b590      	push	{r4, r7, lr}
 800a3b6:	b087      	sub	sp, #28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2209      	movs	r2, #9
 800a3c2:	212c      	movs	r1, #44	; 0x2c
 800a3c4:	0018      	movs	r0, r3
 800a3c6:	f7ff fbb5 	bl	8009b34 <my_find_char_position>
 800a3ca:	0003      	movs	r3, r0
 800a3cc:	001a      	movs	r2, r3
 800a3ce:	2417      	movs	r4, #23
 800a3d0:	193b      	adds	r3, r7, r4
 800a3d2:	3205      	adds	r2, #5
 800a3d4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a3d6:	2003      	movs	r0, #3
 800a3d8:	f000 f9f6 	bl	800a7c8 <malloc>
 800a3dc:	0003      	movs	r3, r0
 800a3de:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a3e0:	193b      	adds	r3, r7, r4
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	18d1      	adds	r1, r2, r3
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	2202      	movs	r2, #2
 800a3ec:	0018      	movs	r0, r3
 800a3ee:	f001 fc98 	bl	800bd22 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	3302      	adds	r3, #2
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a3fa:	240e      	movs	r4, #14
 800a3fc:	193a      	adds	r2, r7, r4
 800a3fe:	4909      	ldr	r1, [pc, #36]	; (800a424 <my_nmea_get_rmc_date_yy+0x70>)
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	0018      	movs	r0, r3
 800a404:	f001 fbfe 	bl	800bc04 <sscanf>
	free ( s ) ;
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	0018      	movs	r0, r3
 800a40c:	f000 f9e6 	bl	800a7dc <free>
	*yy = (uint8_t) temp ;
 800a410:	193b      	adds	r3, r7, r4
 800a412:	881b      	ldrh	r3, [r3, #0]
 800a414:	b2da      	uxtb	r2, r3
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	701a      	strb	r2, [r3, #0]

}
 800a41a:	46c0      	nop			; (mov r8, r8)
 800a41c:	46bd      	mov	sp, r7
 800a41e:	b007      	add	sp, #28
 800a420:	bd90      	pop	{r4, r7, pc}
 800a422:	46c0      	nop			; (mov r8, r8)
 800a424:	080143c8 	.word	0x080143c8

0800a428 <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800a428:	b590      	push	{r4, r7, lr}
 800a42a:	b087      	sub	sp, #28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2209      	movs	r2, #9
 800a436:	212c      	movs	r1, #44	; 0x2c
 800a438:	0018      	movs	r0, r3
 800a43a:	f7ff fb7b 	bl	8009b34 <my_find_char_position>
 800a43e:	0003      	movs	r3, r0
 800a440:	001a      	movs	r2, r3
 800a442:	2417      	movs	r4, #23
 800a444:	193b      	adds	r3, r7, r4
 800a446:	3203      	adds	r2, #3
 800a448:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a44a:	2003      	movs	r0, #3
 800a44c:	f000 f9bc 	bl	800a7c8 <malloc>
 800a450:	0003      	movs	r3, r0
 800a452:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a454:	193b      	adds	r3, r7, r4
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	18d1      	adds	r1, r2, r3
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	2202      	movs	r2, #2
 800a460:	0018      	movs	r0, r3
 800a462:	f001 fc5e 	bl	800bd22 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	3302      	adds	r3, #2
 800a46a:	2200      	movs	r2, #0
 800a46c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a46e:	240e      	movs	r4, #14
 800a470:	193a      	adds	r2, r7, r4
 800a472:	4909      	ldr	r1, [pc, #36]	; (800a498 <my_nmea_get_rmc_date_mm+0x70>)
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	0018      	movs	r0, r3
 800a478:	f001 fbc4 	bl	800bc04 <sscanf>
	free ( s ) ;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	0018      	movs	r0, r3
 800a480:	f000 f9ac 	bl	800a7dc <free>
	*mm = (uint8_t) temp ;
 800a484:	193b      	adds	r3, r7, r4
 800a486:	881b      	ldrh	r3, [r3, #0]
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	701a      	strb	r2, [r3, #0]

}
 800a48e:	46c0      	nop			; (mov r8, r8)
 800a490:	46bd      	mov	sp, r7
 800a492:	b007      	add	sp, #28
 800a494:	bd90      	pop	{r4, r7, pc}
 800a496:	46c0      	nop			; (mov r8, r8)
 800a498:	080143c8 	.word	0x080143c8

0800a49c <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800a49c:	b590      	push	{r4, r7, lr}
 800a49e:	b087      	sub	sp, #28
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2209      	movs	r2, #9
 800a4aa:	212c      	movs	r1, #44	; 0x2c
 800a4ac:	0018      	movs	r0, r3
 800a4ae:	f7ff fb41 	bl	8009b34 <my_find_char_position>
 800a4b2:	0003      	movs	r3, r0
 800a4b4:	001a      	movs	r2, r3
 800a4b6:	2417      	movs	r4, #23
 800a4b8:	193b      	adds	r3, r7, r4
 800a4ba:	3201      	adds	r2, #1
 800a4bc:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a4be:	2003      	movs	r0, #3
 800a4c0:	f000 f982 	bl	800a7c8 <malloc>
 800a4c4:	0003      	movs	r3, r0
 800a4c6:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a4c8:	193b      	adds	r3, r7, r4
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	18d1      	adds	r1, r2, r3
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	0018      	movs	r0, r3
 800a4d6:	f001 fc24 	bl	800bd22 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	3302      	adds	r3, #2
 800a4de:	2200      	movs	r2, #0
 800a4e0:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a4e2:	240e      	movs	r4, #14
 800a4e4:	193a      	adds	r2, r7, r4
 800a4e6:	4909      	ldr	r1, [pc, #36]	; (800a50c <my_nmea_get_rmc_date_dd+0x70>)
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	0018      	movs	r0, r3
 800a4ec:	f001 fb8a 	bl	800bc04 <sscanf>
	free ( s ) ;
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	0018      	movs	r0, r3
 800a4f4:	f000 f972 	bl	800a7dc <free>
	*dd = (uint8_t) temp ;
 800a4f8:	193b      	adds	r3, r7, r4
 800a4fa:	881b      	ldrh	r3, [r3, #0]
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	701a      	strb	r2, [r3, #0]

}
 800a502:	46c0      	nop			; (mov r8, r8)
 800a504:	46bd      	mov	sp, r7
 800a506:	b007      	add	sp, #28
 800a508:	bd90      	pop	{r4, r7, pc}
 800a50a:	46c0      	nop			; (mov r8, r8)
 800a50c:	080143c8 	.word	0x080143c8

0800a510 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800a510:	b590      	push	{r4, r7, lr}
 800a512:	b087      	sub	sp, #28
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2201      	movs	r2, #1
 800a51e:	212c      	movs	r1, #44	; 0x2c
 800a520:	0018      	movs	r0, r3
 800a522:	f7ff fb07 	bl	8009b34 <my_find_char_position>
 800a526:	0003      	movs	r3, r0
 800a528:	001a      	movs	r2, r3
 800a52a:	2417      	movs	r4, #23
 800a52c:	193b      	adds	r3, r7, r4
 800a52e:	3201      	adds	r2, #1
 800a530:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a532:	2003      	movs	r0, #3
 800a534:	f000 f948 	bl	800a7c8 <malloc>
 800a538:	0003      	movs	r3, r0
 800a53a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a53c:	193b      	adds	r3, r7, r4
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	18d1      	adds	r1, r2, r3
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	2202      	movs	r2, #2
 800a548:	0018      	movs	r0, r3
 800a54a:	f001 fbea 	bl	800bd22 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	3302      	adds	r3, #2
 800a552:	2200      	movs	r2, #0
 800a554:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a556:	240e      	movs	r4, #14
 800a558:	193a      	adds	r2, r7, r4
 800a55a:	4909      	ldr	r1, [pc, #36]	; (800a580 <my_nmea_get_rmc_utc_hh+0x70>)
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	0018      	movs	r0, r3
 800a560:	f001 fb50 	bl	800bc04 <sscanf>
	free ( s ) ;
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	0018      	movs	r0, r3
 800a568:	f000 f938 	bl	800a7dc <free>
	*hh = (uint8_t) temp ;
 800a56c:	193b      	adds	r3, r7, r4
 800a56e:	881b      	ldrh	r3, [r3, #0]
 800a570:	b2da      	uxtb	r2, r3
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	701a      	strb	r2, [r3, #0]

}
 800a576:	46c0      	nop			; (mov r8, r8)
 800a578:	46bd      	mov	sp, r7
 800a57a:	b007      	add	sp, #28
 800a57c:	bd90      	pop	{r4, r7, pc}
 800a57e:	46c0      	nop			; (mov r8, r8)
 800a580:	080143c8 	.word	0x080143c8

0800a584 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800a584:	b590      	push	{r4, r7, lr}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	212c      	movs	r1, #44	; 0x2c
 800a594:	0018      	movs	r0, r3
 800a596:	f7ff facd 	bl	8009b34 <my_find_char_position>
 800a59a:	0003      	movs	r3, r0
 800a59c:	001a      	movs	r2, r3
 800a59e:	2417      	movs	r4, #23
 800a5a0:	193b      	adds	r3, r7, r4
 800a5a2:	3203      	adds	r2, #3
 800a5a4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a5a6:	2003      	movs	r0, #3
 800a5a8:	f000 f90e 	bl	800a7c8 <malloc>
 800a5ac:	0003      	movs	r3, r0
 800a5ae:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a5b0:	193b      	adds	r3, r7, r4
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	18d1      	adds	r1, r2, r3
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	0018      	movs	r0, r3
 800a5be:	f001 fbb0 	bl	800bd22 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	3302      	adds	r3, #2
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a5ca:	240e      	movs	r4, #14
 800a5cc:	193a      	adds	r2, r7, r4
 800a5ce:	4909      	ldr	r1, [pc, #36]	; (800a5f4 <my_nmea_get_rmc_utc_mm+0x70>)
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	0018      	movs	r0, r3
 800a5d4:	f001 fb16 	bl	800bc04 <sscanf>
	free ( s ) ;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	0018      	movs	r0, r3
 800a5dc:	f000 f8fe 	bl	800a7dc <free>
	*mm = (uint8_t) temp ;
 800a5e0:	193b      	adds	r3, r7, r4
 800a5e2:	881b      	ldrh	r3, [r3, #0]
 800a5e4:	b2da      	uxtb	r2, r3
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	701a      	strb	r2, [r3, #0]

}
 800a5ea:	46c0      	nop			; (mov r8, r8)
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	b007      	add	sp, #28
 800a5f0:	bd90      	pop	{r4, r7, pc}
 800a5f2:	46c0      	nop			; (mov r8, r8)
 800a5f4:	080143c8 	.word	0x080143c8

0800a5f8 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800a5f8:	b590      	push	{r4, r7, lr}
 800a5fa:	b087      	sub	sp, #28
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	212c      	movs	r1, #44	; 0x2c
 800a608:	0018      	movs	r0, r3
 800a60a:	f7ff fa93 	bl	8009b34 <my_find_char_position>
 800a60e:	0003      	movs	r3, r0
 800a610:	001a      	movs	r2, r3
 800a612:	2417      	movs	r4, #23
 800a614:	193b      	adds	r3, r7, r4
 800a616:	3205      	adds	r2, #5
 800a618:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a61a:	2003      	movs	r0, #3
 800a61c:	f000 f8d4 	bl	800a7c8 <malloc>
 800a620:	0003      	movs	r3, r0
 800a622:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a624:	193b      	adds	r3, r7, r4
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	18d1      	adds	r1, r2, r3
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	2202      	movs	r2, #2
 800a630:	0018      	movs	r0, r3
 800a632:	f001 fb76 	bl	800bd22 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	3302      	adds	r3, #2
 800a63a:	2200      	movs	r2, #0
 800a63c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a63e:	240e      	movs	r4, #14
 800a640:	193a      	adds	r2, r7, r4
 800a642:	4909      	ldr	r1, [pc, #36]	; (800a668 <my_nmea_get_rmc_utc_ss+0x70>)
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	0018      	movs	r0, r3
 800a648:	f001 fadc 	bl	800bc04 <sscanf>
	free ( s ) ;
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	0018      	movs	r0, r3
 800a650:	f000 f8c4 	bl	800a7dc <free>
	*ss = (uint8_t) temp ;
 800a654:	193b      	adds	r3, r7, r4
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	701a      	strb	r2, [r3, #0]

}
 800a65e:	46c0      	nop			; (mov r8, r8)
 800a660:	46bd      	mov	sp, r7
 800a662:	b007      	add	sp, #28
 800a664:	bd90      	pop	{r4, r7, pc}
 800a666:	46c0      	nop			; (mov r8, r8)
 800a668:	080143c8 	.word	0x080143c8

0800a66c <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800a66c:	b590      	push	{r4, r7, lr}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	212c      	movs	r1, #44	; 0x2c
 800a67c:	0018      	movs	r0, r3
 800a67e:	f7ff fa59 	bl	8009b34 <my_find_char_position>
 800a682:	0003      	movs	r3, r0
 800a684:	001a      	movs	r2, r3
 800a686:	240f      	movs	r4, #15
 800a688:	193b      	adds	r3, r7, r4
 800a68a:	3208      	adds	r2, #8
 800a68c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a68e:	2004      	movs	r0, #4
 800a690:	f000 f89a 	bl	800a7c8 <malloc>
 800a694:	0003      	movs	r3, r0
 800a696:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a698:	193b      	adds	r3, r7, r4
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	18d1      	adds	r1, r2, r3
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	2203      	movs	r2, #3
 800a6a4:	0018      	movs	r0, r3
 800a6a6:	f001 fb3c 	bl	800bd22 <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	3303      	adds	r3, #3
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	4906      	ldr	r1, [pc, #24]	; (800a6d0 <my_nmea_get_rmc_utc_sss+0x64>)
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	0018      	movs	r0, r3
 800a6ba:	f001 faa3 	bl	800bc04 <sscanf>
	free ( s ) ;
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	0018      	movs	r0, r3
 800a6c2:	f000 f88b 	bl	800a7dc <free>
}
 800a6c6:	46c0      	nop			; (mov r8, r8)
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	b005      	add	sp, #20
 800a6cc:	bd90      	pop	{r4, r7, pc}
 800a6ce:	46c0      	nop			; (mov r8, r8)
 800a6d0:	080143cc 	.word	0x080143cc

0800a6d4 <my_tracker_api_is_cmd>:
 */

#include <my_tracker_api.h>

bool my_tracker_api_is_cmd ( char* c )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
	size_t l = strlen ( c ) ;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	0018      	movs	r0, r3
 800a6e0:	f7f5 fd10 	bl	8000104 <strlen>
 800a6e4:	0003      	movs	r3, r0
 800a6e6:	60bb      	str	r3, [r7, #8]
	uint8_t i = 0 ; // Znaków nie może być więcej niż max. cmd payload czyli 80
 800a6e8:	230f      	movs	r3, #15
 800a6ea:	18fb      	adds	r3, r7, r3
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	701a      	strb	r2, [r3, #0]
	uint8_t liczba_przecinkow = 0 ;
 800a6f0:	230e      	movs	r3, #14
 800a6f2:	18fb      	adds	r3, r7, r3
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	701a      	strb	r2, [r3, #0]

	if ( l < 3 || l > 8 )
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d902      	bls.n	800a704 <my_tracker_api_is_cmd+0x30>
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	2b08      	cmp	r3, #8
 800a702:	d901      	bls.n	800a708 <my_tracker_api_is_cmd+0x34>
		return false ;
 800a704:	2300      	movs	r3, #0
 800a706:	e043      	b.n	800a790 <my_tracker_api_is_cmd+0xbc>



	for ( i = 0 ; i < l ; i++ )
 800a708:	230f      	movs	r3, #15
 800a70a:	18fb      	adds	r3, r7, r3
 800a70c:	2200      	movs	r2, #0
 800a70e:	701a      	strb	r2, [r3, #0]
 800a710:	e025      	b.n	800a75e <my_tracker_api_is_cmd+0x8a>
	{
		if ( c[i] == ',' )
 800a712:	230f      	movs	r3, #15
 800a714:	18fb      	adds	r3, r7, r3
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	18d3      	adds	r3, r2, r3
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	2b2c      	cmp	r3, #44	; 0x2c
 800a720:	d106      	bne.n	800a730 <my_tracker_api_is_cmd+0x5c>
		{
			liczba_przecinkow++ ;
 800a722:	210e      	movs	r1, #14
 800a724:	187b      	adds	r3, r7, r1
 800a726:	781a      	ldrb	r2, [r3, #0]
 800a728:	187b      	adds	r3, r7, r1
 800a72a:	3201      	adds	r2, #1
 800a72c:	701a      	strb	r2, [r3, #0]
 800a72e:	e010      	b.n	800a752 <my_tracker_api_is_cmd+0x7e>
		}
		else if ( c[i] < '0' || c[i] > '9' )
 800a730:	210f      	movs	r1, #15
 800a732:	187b      	adds	r3, r7, r1
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	18d3      	adds	r3, r2, r3
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	2b2f      	cmp	r3, #47	; 0x2f
 800a73e:	d906      	bls.n	800a74e <my_tracker_api_is_cmd+0x7a>
 800a740:	187b      	adds	r3, r7, r1
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	18d3      	adds	r3, r2, r3
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	2b39      	cmp	r3, #57	; 0x39
 800a74c:	d901      	bls.n	800a752 <my_tracker_api_is_cmd+0x7e>
		{
			return false;
 800a74e:	2300      	movs	r3, #0
 800a750:	e01e      	b.n	800a790 <my_tracker_api_is_cmd+0xbc>
	for ( i = 0 ; i < l ; i++ )
 800a752:	210f      	movs	r1, #15
 800a754:	187b      	adds	r3, r7, r1
 800a756:	781a      	ldrb	r2, [r3, #0]
 800a758:	187b      	adds	r3, r7, r1
 800a75a:	3201      	adds	r2, #1
 800a75c:	701a      	strb	r2, [r3, #0]
 800a75e:	230f      	movs	r3, #15
 800a760:	18fb      	adds	r3, r7, r3
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	429a      	cmp	r2, r3
 800a768:	d8d3      	bhi.n	800a712 <my_tracker_api_is_cmd+0x3e>
	    }
	}

	if ( c[0] == ',' || c[l-1] == ',' || liczba_przecinkow > 1 )
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	2b2c      	cmp	r3, #44	; 0x2c
 800a770:	d00b      	beq.n	800a78a <my_tracker_api_is_cmd+0xb6>
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	3b01      	subs	r3, #1
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	18d3      	adds	r3, r2, r3
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	2b2c      	cmp	r3, #44	; 0x2c
 800a77e:	d004      	beq.n	800a78a <my_tracker_api_is_cmd+0xb6>
 800a780:	230e      	movs	r3, #14
 800a782:	18fb      	adds	r3, r7, r3
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d901      	bls.n	800a78e <my_tracker_api_is_cmd+0xba>
	{
		return false ;
 800a78a:	2300      	movs	r3, #0
 800a78c:	e000      	b.n	800a790 <my_tracker_api_is_cmd+0xbc>
	}

	return true ;
 800a78e:	2301      	movs	r3, #1
}
 800a790:	0018      	movs	r0, r3
 800a792:	46bd      	mov	sp, r7
 800a794:	b004      	add	sp, #16
 800a796:	bd80      	pop	{r7, pc}

0800a798 <my_tracker_api_get_cmd_code>:

uint8_t my_tracker_api_get_cmd_code ( char* c )
{
 800a798:	b590      	push	{r4, r7, lr}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
	char* tmp ;
	uint8_t cmd = 0 ;
 800a7a0:	240f      	movs	r4, #15
 800a7a2:	193b      	adds	r3, r7, r4
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	701a      	strb	r2, [r3, #0]

	tmp = strtok_r ( c , "," , &c ) ;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	1d3a      	adds	r2, r7, #4
 800a7ac:	4905      	ldr	r1, [pc, #20]	; (800a7c4 <my_tracker_api_get_cmd_code+0x2c>)
 800a7ae:	0018      	movs	r0, r3
 800a7b0:	f001 fafa 	bl	800bda8 <strtok_r>
 800a7b4:	0003      	movs	r3, r0
 800a7b6:	60bb      	str	r3, [r7, #8]

	return cmd ;
 800a7b8:	193b      	adds	r3, r7, r4
 800a7ba:	781b      	ldrb	r3, [r3, #0]
}
 800a7bc:	0018      	movs	r0, r3
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	b005      	add	sp, #20
 800a7c2:	bd90      	pop	{r4, r7, pc}
 800a7c4:	080143d0 	.word	0x080143d0

0800a7c8 <malloc>:
 800a7c8:	b510      	push	{r4, lr}
 800a7ca:	4b03      	ldr	r3, [pc, #12]	; (800a7d8 <malloc+0x10>)
 800a7cc:	0001      	movs	r1, r0
 800a7ce:	6818      	ldr	r0, [r3, #0]
 800a7d0:	f000 f80e 	bl	800a7f0 <_malloc_r>
 800a7d4:	bd10      	pop	{r4, pc}
 800a7d6:	46c0      	nop			; (mov r8, r8)
 800a7d8:	200006d0 	.word	0x200006d0

0800a7dc <free>:
 800a7dc:	b510      	push	{r4, lr}
 800a7de:	4b03      	ldr	r3, [pc, #12]	; (800a7ec <free+0x10>)
 800a7e0:	0001      	movs	r1, r0
 800a7e2:	6818      	ldr	r0, [r3, #0]
 800a7e4:	f001 fc18 	bl	800c018 <_free_r>
 800a7e8:	bd10      	pop	{r4, pc}
 800a7ea:	46c0      	nop			; (mov r8, r8)
 800a7ec:	200006d0 	.word	0x200006d0

0800a7f0 <_malloc_r>:
 800a7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7f2:	000d      	movs	r5, r1
 800a7f4:	b087      	sub	sp, #28
 800a7f6:	350b      	adds	r5, #11
 800a7f8:	9001      	str	r0, [sp, #4]
 800a7fa:	2d16      	cmp	r5, #22
 800a7fc:	d908      	bls.n	800a810 <_malloc_r+0x20>
 800a7fe:	2207      	movs	r2, #7
 800a800:	4395      	bics	r5, r2
 800a802:	d506      	bpl.n	800a812 <_malloc_r+0x22>
 800a804:	230c      	movs	r3, #12
 800a806:	9a01      	ldr	r2, [sp, #4]
 800a808:	6013      	str	r3, [r2, #0]
 800a80a:	2000      	movs	r0, #0
 800a80c:	b007      	add	sp, #28
 800a80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a810:	2510      	movs	r5, #16
 800a812:	42a9      	cmp	r1, r5
 800a814:	d8f6      	bhi.n	800a804 <_malloc_r+0x14>
 800a816:	9801      	ldr	r0, [sp, #4]
 800a818:	f000 f9fe 	bl	800ac18 <__malloc_lock>
 800a81c:	23fc      	movs	r3, #252	; 0xfc
 800a81e:	4ebe      	ldr	r6, [pc, #760]	; (800ab18 <_malloc_r+0x328>)
 800a820:	005b      	lsls	r3, r3, #1
 800a822:	429d      	cmp	r5, r3
 800a824:	d219      	bcs.n	800a85a <_malloc_r+0x6a>
 800a826:	002a      	movs	r2, r5
 800a828:	3208      	adds	r2, #8
 800a82a:	18b2      	adds	r2, r6, r2
 800a82c:	0011      	movs	r1, r2
 800a82e:	6854      	ldr	r4, [r2, #4]
 800a830:	3908      	subs	r1, #8
 800a832:	08eb      	lsrs	r3, r5, #3
 800a834:	428c      	cmp	r4, r1
 800a836:	d103      	bne.n	800a840 <_malloc_r+0x50>
 800a838:	68d4      	ldr	r4, [r2, #12]
 800a83a:	3302      	adds	r3, #2
 800a83c:	42a2      	cmp	r2, r4
 800a83e:	d022      	beq.n	800a886 <_malloc_r+0x96>
 800a840:	2203      	movs	r2, #3
 800a842:	6863      	ldr	r3, [r4, #4]
 800a844:	68a1      	ldr	r1, [r4, #8]
 800a846:	4393      	bics	r3, r2
 800a848:	68e2      	ldr	r2, [r4, #12]
 800a84a:	18e3      	adds	r3, r4, r3
 800a84c:	60ca      	str	r2, [r1, #12]
 800a84e:	6091      	str	r1, [r2, #8]
 800a850:	2201      	movs	r2, #1
 800a852:	6859      	ldr	r1, [r3, #4]
 800a854:	430a      	orrs	r2, r1
 800a856:	605a      	str	r2, [r3, #4]
 800a858:	e02a      	b.n	800a8b0 <_malloc_r+0xc0>
 800a85a:	233f      	movs	r3, #63	; 0x3f
 800a85c:	0a6a      	lsrs	r2, r5, #9
 800a85e:	d003      	beq.n	800a868 <_malloc_r+0x78>
 800a860:	2a04      	cmp	r2, #4
 800a862:	d82b      	bhi.n	800a8bc <_malloc_r+0xcc>
 800a864:	09ab      	lsrs	r3, r5, #6
 800a866:	3338      	adds	r3, #56	; 0x38
 800a868:	2203      	movs	r2, #3
 800a86a:	4694      	mov	ip, r2
 800a86c:	00d9      	lsls	r1, r3, #3
 800a86e:	1989      	adds	r1, r1, r6
 800a870:	68cc      	ldr	r4, [r1, #12]
 800a872:	428c      	cmp	r4, r1
 800a874:	d006      	beq.n	800a884 <_malloc_r+0x94>
 800a876:	4660      	mov	r0, ip
 800a878:	6862      	ldr	r2, [r4, #4]
 800a87a:	4382      	bics	r2, r0
 800a87c:	1b57      	subs	r7, r2, r5
 800a87e:	2f0f      	cmp	r7, #15
 800a880:	dd34      	ble.n	800a8ec <_malloc_r+0xfc>
 800a882:	3b01      	subs	r3, #1
 800a884:	3301      	adds	r3, #1
 800a886:	6934      	ldr	r4, [r6, #16]
 800a888:	49a4      	ldr	r1, [pc, #656]	; (800ab1c <_malloc_r+0x32c>)
 800a88a:	428c      	cmp	r4, r1
 800a88c:	d055      	beq.n	800a93a <_malloc_r+0x14a>
 800a88e:	2003      	movs	r0, #3
 800a890:	6862      	ldr	r2, [r4, #4]
 800a892:	4382      	bics	r2, r0
 800a894:	1b50      	subs	r0, r2, r5
 800a896:	280f      	cmp	r0, #15
 800a898:	dd36      	ble.n	800a908 <_malloc_r+0x118>
 800a89a:	2301      	movs	r3, #1
 800a89c:	1967      	adds	r7, r4, r5
 800a89e:	431d      	orrs	r5, r3
 800a8a0:	4303      	orrs	r3, r0
 800a8a2:	6065      	str	r5, [r4, #4]
 800a8a4:	6177      	str	r7, [r6, #20]
 800a8a6:	6137      	str	r7, [r6, #16]
 800a8a8:	60f9      	str	r1, [r7, #12]
 800a8aa:	60b9      	str	r1, [r7, #8]
 800a8ac:	607b      	str	r3, [r7, #4]
 800a8ae:	50a0      	str	r0, [r4, r2]
 800a8b0:	9801      	ldr	r0, [sp, #4]
 800a8b2:	f000 f9b9 	bl	800ac28 <__malloc_unlock>
 800a8b6:	0020      	movs	r0, r4
 800a8b8:	3008      	adds	r0, #8
 800a8ba:	e7a7      	b.n	800a80c <_malloc_r+0x1c>
 800a8bc:	2a14      	cmp	r2, #20
 800a8be:	d802      	bhi.n	800a8c6 <_malloc_r+0xd6>
 800a8c0:	0013      	movs	r3, r2
 800a8c2:	335b      	adds	r3, #91	; 0x5b
 800a8c4:	e7d0      	b.n	800a868 <_malloc_r+0x78>
 800a8c6:	2a54      	cmp	r2, #84	; 0x54
 800a8c8:	d802      	bhi.n	800a8d0 <_malloc_r+0xe0>
 800a8ca:	0b2b      	lsrs	r3, r5, #12
 800a8cc:	336e      	adds	r3, #110	; 0x6e
 800a8ce:	e7cb      	b.n	800a868 <_malloc_r+0x78>
 800a8d0:	23aa      	movs	r3, #170	; 0xaa
 800a8d2:	005b      	lsls	r3, r3, #1
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d802      	bhi.n	800a8de <_malloc_r+0xee>
 800a8d8:	0beb      	lsrs	r3, r5, #15
 800a8da:	3377      	adds	r3, #119	; 0x77
 800a8dc:	e7c4      	b.n	800a868 <_malloc_r+0x78>
 800a8de:	4990      	ldr	r1, [pc, #576]	; (800ab20 <_malloc_r+0x330>)
 800a8e0:	237e      	movs	r3, #126	; 0x7e
 800a8e2:	428a      	cmp	r2, r1
 800a8e4:	d8c0      	bhi.n	800a868 <_malloc_r+0x78>
 800a8e6:	0cab      	lsrs	r3, r5, #18
 800a8e8:	337c      	adds	r3, #124	; 0x7c
 800a8ea:	e7bd      	b.n	800a868 <_malloc_r+0x78>
 800a8ec:	68e0      	ldr	r0, [r4, #12]
 800a8ee:	2f00      	cmp	r7, #0
 800a8f0:	db08      	blt.n	800a904 <_malloc_r+0x114>
 800a8f2:	68a3      	ldr	r3, [r4, #8]
 800a8f4:	60d8      	str	r0, [r3, #12]
 800a8f6:	6083      	str	r3, [r0, #8]
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	18a2      	adds	r2, r4, r2
 800a8fc:	6851      	ldr	r1, [r2, #4]
 800a8fe:	430b      	orrs	r3, r1
 800a900:	6053      	str	r3, [r2, #4]
 800a902:	e7d5      	b.n	800a8b0 <_malloc_r+0xc0>
 800a904:	0004      	movs	r4, r0
 800a906:	e7b4      	b.n	800a872 <_malloc_r+0x82>
 800a908:	6171      	str	r1, [r6, #20]
 800a90a:	6131      	str	r1, [r6, #16]
 800a90c:	2800      	cmp	r0, #0
 800a90e:	daf3      	bge.n	800a8f8 <_malloc_r+0x108>
 800a910:	6871      	ldr	r1, [r6, #4]
 800a912:	468c      	mov	ip, r1
 800a914:	2180      	movs	r1, #128	; 0x80
 800a916:	0089      	lsls	r1, r1, #2
 800a918:	428a      	cmp	r2, r1
 800a91a:	d300      	bcc.n	800a91e <_malloc_r+0x12e>
 800a91c:	e08c      	b.n	800aa38 <_malloc_r+0x248>
 800a91e:	08d1      	lsrs	r1, r2, #3
 800a920:	0950      	lsrs	r0, r2, #5
 800a922:	2201      	movs	r2, #1
 800a924:	4082      	lsls	r2, r0
 800a926:	4660      	mov	r0, ip
 800a928:	4302      	orrs	r2, r0
 800a92a:	6072      	str	r2, [r6, #4]
 800a92c:	00ca      	lsls	r2, r1, #3
 800a92e:	1992      	adds	r2, r2, r6
 800a930:	6891      	ldr	r1, [r2, #8]
 800a932:	60e2      	str	r2, [r4, #12]
 800a934:	60a1      	str	r1, [r4, #8]
 800a936:	6094      	str	r4, [r2, #8]
 800a938:	60cc      	str	r4, [r1, #12]
 800a93a:	2201      	movs	r2, #1
 800a93c:	4876      	ldr	r0, [pc, #472]	; (800ab18 <_malloc_r+0x328>)
 800a93e:	1099      	asrs	r1, r3, #2
 800a940:	408a      	lsls	r2, r1
 800a942:	6841      	ldr	r1, [r0, #4]
 800a944:	4291      	cmp	r1, r2
 800a946:	d328      	bcc.n	800a99a <_malloc_r+0x1aa>
 800a948:	420a      	tst	r2, r1
 800a94a:	d105      	bne.n	800a958 <_malloc_r+0x168>
 800a94c:	2403      	movs	r4, #3
 800a94e:	43a3      	bics	r3, r4
 800a950:	0052      	lsls	r2, r2, #1
 800a952:	3304      	adds	r3, #4
 800a954:	420a      	tst	r2, r1
 800a956:	d0fb      	beq.n	800a950 <_malloc_r+0x160>
 800a958:	496f      	ldr	r1, [pc, #444]	; (800ab18 <_malloc_r+0x328>)
 800a95a:	9104      	str	r1, [sp, #16]
 800a95c:	00d9      	lsls	r1, r3, #3
 800a95e:	1841      	adds	r1, r0, r1
 800a960:	468c      	mov	ip, r1
 800a962:	000f      	movs	r7, r1
 800a964:	9302      	str	r3, [sp, #8]
 800a966:	68fc      	ldr	r4, [r7, #12]
 800a968:	42bc      	cmp	r4, r7
 800a96a:	d000      	beq.n	800a96e <_malloc_r+0x17e>
 800a96c:	e09b      	b.n	800aaa6 <_malloc_r+0x2b6>
 800a96e:	2403      	movs	r4, #3
 800a970:	9902      	ldr	r1, [sp, #8]
 800a972:	3708      	adds	r7, #8
 800a974:	3101      	adds	r1, #1
 800a976:	9102      	str	r1, [sp, #8]
 800a978:	4221      	tst	r1, r4
 800a97a:	d1f4      	bne.n	800a966 <_malloc_r+0x176>
 800a97c:	2103      	movs	r1, #3
 800a97e:	420b      	tst	r3, r1
 800a980:	d000      	beq.n	800a984 <_malloc_r+0x194>
 800a982:	e0b7      	b.n	800aaf4 <_malloc_r+0x304>
 800a984:	6843      	ldr	r3, [r0, #4]
 800a986:	4393      	bics	r3, r2
 800a988:	6043      	str	r3, [r0, #4]
 800a98a:	9b04      	ldr	r3, [sp, #16]
 800a98c:	0052      	lsls	r2, r2, #1
 800a98e:	6859      	ldr	r1, [r3, #4]
 800a990:	4291      	cmp	r1, r2
 800a992:	d302      	bcc.n	800a99a <_malloc_r+0x1aa>
 800a994:	2a00      	cmp	r2, #0
 800a996:	d000      	beq.n	800a99a <_malloc_r+0x1aa>
 800a998:	e0bb      	b.n	800ab12 <_malloc_r+0x322>
 800a99a:	2203      	movs	r2, #3
 800a99c:	6883      	ldr	r3, [r0, #8]
 800a99e:	9302      	str	r3, [sp, #8]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	4393      	bics	r3, r2
 800a9a4:	9303      	str	r3, [sp, #12]
 800a9a6:	42ab      	cmp	r3, r5
 800a9a8:	d303      	bcc.n	800a9b2 <_malloc_r+0x1c2>
 800a9aa:	1b59      	subs	r1, r3, r5
 800a9ac:	290f      	cmp	r1, #15
 800a9ae:	dd00      	ble.n	800a9b2 <_malloc_r+0x1c2>
 800a9b0:	e123      	b.n	800abfa <_malloc_r+0x40a>
 800a9b2:	9b02      	ldr	r3, [sp, #8]
 800a9b4:	9a03      	ldr	r2, [sp, #12]
 800a9b6:	2008      	movs	r0, #8
 800a9b8:	189e      	adds	r6, r3, r2
 800a9ba:	4b5a      	ldr	r3, [pc, #360]	; (800ab24 <_malloc_r+0x334>)
 800a9bc:	681f      	ldr	r7, [r3, #0]
 800a9be:	f001 faa5 	bl	800bf0c <sysconf>
 800a9c2:	4b59      	ldr	r3, [pc, #356]	; (800ab28 <_malloc_r+0x338>)
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	197f      	adds	r7, r7, r5
 800a9ca:	9004      	str	r0, [sp, #16]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	d003      	beq.n	800a9d8 <_malloc_r+0x1e8>
 800a9d0:	1e7b      	subs	r3, r7, #1
 800a9d2:	181b      	adds	r3, r3, r0
 800a9d4:	4247      	negs	r7, r0
 800a9d6:	401f      	ands	r7, r3
 800a9d8:	0039      	movs	r1, r7
 800a9da:	9801      	ldr	r0, [sp, #4]
 800a9dc:	f001 fa42 	bl	800be64 <_sbrk_r>
 800a9e0:	0004      	movs	r4, r0
 800a9e2:	1c43      	adds	r3, r0, #1
 800a9e4:	d100      	bne.n	800a9e8 <_malloc_r+0x1f8>
 800a9e6:	e0de      	b.n	800aba6 <_malloc_r+0x3b6>
 800a9e8:	4286      	cmp	r6, r0
 800a9ea:	d904      	bls.n	800a9f6 <_malloc_r+0x206>
 800a9ec:	4b4a      	ldr	r3, [pc, #296]	; (800ab18 <_malloc_r+0x328>)
 800a9ee:	9a02      	ldr	r2, [sp, #8]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d000      	beq.n	800a9f6 <_malloc_r+0x206>
 800a9f4:	e0d7      	b.n	800aba6 <_malloc_r+0x3b6>
 800a9f6:	4a4d      	ldr	r2, [pc, #308]	; (800ab2c <_malloc_r+0x33c>)
 800a9f8:	6813      	ldr	r3, [r2, #0]
 800a9fa:	18fb      	adds	r3, r7, r3
 800a9fc:	6013      	str	r3, [r2, #0]
 800a9fe:	9a04      	ldr	r2, [sp, #16]
 800aa00:	3a01      	subs	r2, #1
 800aa02:	42a6      	cmp	r6, r4
 800aa04:	d000      	beq.n	800aa08 <_malloc_r+0x218>
 800aa06:	e097      	b.n	800ab38 <_malloc_r+0x348>
 800aa08:	4216      	tst	r6, r2
 800aa0a:	d000      	beq.n	800aa0e <_malloc_r+0x21e>
 800aa0c:	e094      	b.n	800ab38 <_malloc_r+0x348>
 800aa0e:	4b42      	ldr	r3, [pc, #264]	; (800ab18 <_malloc_r+0x328>)
 800aa10:	689a      	ldr	r2, [r3, #8]
 800aa12:	9b03      	ldr	r3, [sp, #12]
 800aa14:	19df      	adds	r7, r3, r7
 800aa16:	2301      	movs	r3, #1
 800aa18:	433b      	orrs	r3, r7
 800aa1a:	6053      	str	r3, [r2, #4]
 800aa1c:	4b43      	ldr	r3, [pc, #268]	; (800ab2c <_malloc_r+0x33c>)
 800aa1e:	4a44      	ldr	r2, [pc, #272]	; (800ab30 <_malloc_r+0x340>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	6811      	ldr	r1, [r2, #0]
 800aa24:	428b      	cmp	r3, r1
 800aa26:	d900      	bls.n	800aa2a <_malloc_r+0x23a>
 800aa28:	6013      	str	r3, [r2, #0]
 800aa2a:	4a42      	ldr	r2, [pc, #264]	; (800ab34 <_malloc_r+0x344>)
 800aa2c:	6811      	ldr	r1, [r2, #0]
 800aa2e:	428b      	cmp	r3, r1
 800aa30:	d800      	bhi.n	800aa34 <_malloc_r+0x244>
 800aa32:	e0b8      	b.n	800aba6 <_malloc_r+0x3b6>
 800aa34:	6013      	str	r3, [r2, #0]
 800aa36:	e0b6      	b.n	800aba6 <_malloc_r+0x3b6>
 800aa38:	0a50      	lsrs	r0, r2, #9
 800aa3a:	2804      	cmp	r0, #4
 800aa3c:	d811      	bhi.n	800aa62 <_malloc_r+0x272>
 800aa3e:	0991      	lsrs	r1, r2, #6
 800aa40:	3138      	adds	r1, #56	; 0x38
 800aa42:	00cf      	lsls	r7, r1, #3
 800aa44:	19bf      	adds	r7, r7, r6
 800aa46:	68b8      	ldr	r0, [r7, #8]
 800aa48:	4287      	cmp	r7, r0
 800aa4a:	d125      	bne.n	800aa98 <_malloc_r+0x2a8>
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	1089      	asrs	r1, r1, #2
 800aa50:	408a      	lsls	r2, r1
 800aa52:	4661      	mov	r1, ip
 800aa54:	430a      	orrs	r2, r1
 800aa56:	6072      	str	r2, [r6, #4]
 800aa58:	60e7      	str	r7, [r4, #12]
 800aa5a:	60a0      	str	r0, [r4, #8]
 800aa5c:	60bc      	str	r4, [r7, #8]
 800aa5e:	60c4      	str	r4, [r0, #12]
 800aa60:	e76b      	b.n	800a93a <_malloc_r+0x14a>
 800aa62:	2814      	cmp	r0, #20
 800aa64:	d802      	bhi.n	800aa6c <_malloc_r+0x27c>
 800aa66:	0001      	movs	r1, r0
 800aa68:	315b      	adds	r1, #91	; 0x5b
 800aa6a:	e7ea      	b.n	800aa42 <_malloc_r+0x252>
 800aa6c:	2854      	cmp	r0, #84	; 0x54
 800aa6e:	d802      	bhi.n	800aa76 <_malloc_r+0x286>
 800aa70:	0b11      	lsrs	r1, r2, #12
 800aa72:	316e      	adds	r1, #110	; 0x6e
 800aa74:	e7e5      	b.n	800aa42 <_malloc_r+0x252>
 800aa76:	21aa      	movs	r1, #170	; 0xaa
 800aa78:	0049      	lsls	r1, r1, #1
 800aa7a:	4288      	cmp	r0, r1
 800aa7c:	d802      	bhi.n	800aa84 <_malloc_r+0x294>
 800aa7e:	0bd1      	lsrs	r1, r2, #15
 800aa80:	3177      	adds	r1, #119	; 0x77
 800aa82:	e7de      	b.n	800aa42 <_malloc_r+0x252>
 800aa84:	4f26      	ldr	r7, [pc, #152]	; (800ab20 <_malloc_r+0x330>)
 800aa86:	217e      	movs	r1, #126	; 0x7e
 800aa88:	42b8      	cmp	r0, r7
 800aa8a:	d8da      	bhi.n	800aa42 <_malloc_r+0x252>
 800aa8c:	0c91      	lsrs	r1, r2, #18
 800aa8e:	317c      	adds	r1, #124	; 0x7c
 800aa90:	e7d7      	b.n	800aa42 <_malloc_r+0x252>
 800aa92:	6880      	ldr	r0, [r0, #8]
 800aa94:	4287      	cmp	r7, r0
 800aa96:	d004      	beq.n	800aaa2 <_malloc_r+0x2b2>
 800aa98:	2603      	movs	r6, #3
 800aa9a:	6841      	ldr	r1, [r0, #4]
 800aa9c:	43b1      	bics	r1, r6
 800aa9e:	4291      	cmp	r1, r2
 800aaa0:	d8f7      	bhi.n	800aa92 <_malloc_r+0x2a2>
 800aaa2:	68c7      	ldr	r7, [r0, #12]
 800aaa4:	e7d8      	b.n	800aa58 <_malloc_r+0x268>
 800aaa6:	2603      	movs	r6, #3
 800aaa8:	6861      	ldr	r1, [r4, #4]
 800aaaa:	43b1      	bics	r1, r6
 800aaac:	9103      	str	r1, [sp, #12]
 800aaae:	68e6      	ldr	r6, [r4, #12]
 800aab0:	1b49      	subs	r1, r1, r5
 800aab2:	290f      	cmp	r1, #15
 800aab4:	dd10      	ble.n	800aad8 <_malloc_r+0x2e8>
 800aab6:	2201      	movs	r2, #1
 800aab8:	1963      	adds	r3, r4, r5
 800aaba:	4315      	orrs	r5, r2
 800aabc:	6065      	str	r5, [r4, #4]
 800aabe:	68a5      	ldr	r5, [r4, #8]
 800aac0:	430a      	orrs	r2, r1
 800aac2:	60ee      	str	r6, [r5, #12]
 800aac4:	60b5      	str	r5, [r6, #8]
 800aac6:	6143      	str	r3, [r0, #20]
 800aac8:	6103      	str	r3, [r0, #16]
 800aaca:	4814      	ldr	r0, [pc, #80]	; (800ab1c <_malloc_r+0x32c>)
 800aacc:	605a      	str	r2, [r3, #4]
 800aace:	60d8      	str	r0, [r3, #12]
 800aad0:	6098      	str	r0, [r3, #8]
 800aad2:	9b03      	ldr	r3, [sp, #12]
 800aad4:	50e1      	str	r1, [r4, r3]
 800aad6:	e6eb      	b.n	800a8b0 <_malloc_r+0xc0>
 800aad8:	2900      	cmp	r1, #0
 800aada:	db09      	blt.n	800aaf0 <_malloc_r+0x300>
 800aadc:	9b03      	ldr	r3, [sp, #12]
 800aade:	18e1      	adds	r1, r4, r3
 800aae0:	2301      	movs	r3, #1
 800aae2:	684a      	ldr	r2, [r1, #4]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	604b      	str	r3, [r1, #4]
 800aae8:	68a3      	ldr	r3, [r4, #8]
 800aaea:	60de      	str	r6, [r3, #12]
 800aaec:	60b3      	str	r3, [r6, #8]
 800aaee:	e6df      	b.n	800a8b0 <_malloc_r+0xc0>
 800aaf0:	0034      	movs	r4, r6
 800aaf2:	e739      	b.n	800a968 <_malloc_r+0x178>
 800aaf4:	2108      	movs	r1, #8
 800aaf6:	4249      	negs	r1, r1
 800aaf8:	448c      	add	ip, r1
 800aafa:	4661      	mov	r1, ip
 800aafc:	6889      	ldr	r1, [r1, #8]
 800aafe:	3b01      	subs	r3, #1
 800ab00:	4561      	cmp	r1, ip
 800ab02:	d100      	bne.n	800ab06 <_malloc_r+0x316>
 800ab04:	e73a      	b.n	800a97c <_malloc_r+0x18c>
 800ab06:	e740      	b.n	800a98a <_malloc_r+0x19a>
 800ab08:	3304      	adds	r3, #4
 800ab0a:	0052      	lsls	r2, r2, #1
 800ab0c:	420a      	tst	r2, r1
 800ab0e:	d0fb      	beq.n	800ab08 <_malloc_r+0x318>
 800ab10:	e724      	b.n	800a95c <_malloc_r+0x16c>
 800ab12:	9b02      	ldr	r3, [sp, #8]
 800ab14:	e7fa      	b.n	800ab0c <_malloc_r+0x31c>
 800ab16:	46c0      	nop			; (mov r8, r8)
 800ab18:	20000028 	.word	0x20000028
 800ab1c:	20000030 	.word	0x20000030
 800ab20:	00000554 	.word	0x00000554
 800ab24:	20000c60 	.word	0x20000c60
 800ab28:	20000430 	.word	0x20000430
 800ab2c:	20000c30 	.word	0x20000c30
 800ab30:	20000c58 	.word	0x20000c58
 800ab34:	20000c5c 	.word	0x20000c5c
 800ab38:	4934      	ldr	r1, [pc, #208]	; (800ac0c <_malloc_r+0x41c>)
 800ab3a:	6808      	ldr	r0, [r1, #0]
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	d140      	bne.n	800abc2 <_malloc_r+0x3d2>
 800ab40:	600c      	str	r4, [r1, #0]
 800ab42:	2107      	movs	r1, #7
 800ab44:	0026      	movs	r6, r4
 800ab46:	2300      	movs	r3, #0
 800ab48:	400e      	ands	r6, r1
 800ab4a:	420c      	tst	r4, r1
 800ab4c:	d002      	beq.n	800ab54 <_malloc_r+0x364>
 800ab4e:	3308      	adds	r3, #8
 800ab50:	1b9b      	subs	r3, r3, r6
 800ab52:	18e4      	adds	r4, r4, r3
 800ab54:	19e1      	adds	r1, r4, r7
 800ab56:	9105      	str	r1, [sp, #20]
 800ab58:	9f05      	ldr	r7, [sp, #20]
 800ab5a:	9904      	ldr	r1, [sp, #16]
 800ab5c:	4017      	ands	r7, r2
 800ab5e:	18cb      	adds	r3, r1, r3
 800ab60:	1bdf      	subs	r7, r3, r7
 800ab62:	4017      	ands	r7, r2
 800ab64:	0039      	movs	r1, r7
 800ab66:	9801      	ldr	r0, [sp, #4]
 800ab68:	f001 f97c 	bl	800be64 <_sbrk_r>
 800ab6c:	1c43      	adds	r3, r0, #1
 800ab6e:	d107      	bne.n	800ab80 <_malloc_r+0x390>
 800ab70:	1e37      	subs	r7, r6, #0
 800ab72:	9805      	ldr	r0, [sp, #20]
 800ab74:	d004      	beq.n	800ab80 <_malloc_r+0x390>
 800ab76:	0030      	movs	r0, r6
 800ab78:	2700      	movs	r7, #0
 800ab7a:	9b05      	ldr	r3, [sp, #20]
 800ab7c:	3808      	subs	r0, #8
 800ab7e:	1818      	adds	r0, r3, r0
 800ab80:	4a23      	ldr	r2, [pc, #140]	; (800ac10 <_malloc_r+0x420>)
 800ab82:	1b00      	subs	r0, r0, r4
 800ab84:	6813      	ldr	r3, [r2, #0]
 800ab86:	19c0      	adds	r0, r0, r7
 800ab88:	19db      	adds	r3, r3, r7
 800ab8a:	6013      	str	r3, [r2, #0]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	4b21      	ldr	r3, [pc, #132]	; (800ac14 <_malloc_r+0x424>)
 800ab90:	9902      	ldr	r1, [sp, #8]
 800ab92:	4310      	orrs	r0, r2
 800ab94:	609c      	str	r4, [r3, #8]
 800ab96:	6060      	str	r0, [r4, #4]
 800ab98:	4299      	cmp	r1, r3
 800ab9a:	d100      	bne.n	800ab9e <_malloc_r+0x3ae>
 800ab9c:	e73e      	b.n	800aa1c <_malloc_r+0x22c>
 800ab9e:	9b03      	ldr	r3, [sp, #12]
 800aba0:	2b0f      	cmp	r3, #15
 800aba2:	d813      	bhi.n	800abcc <_malloc_r+0x3dc>
 800aba4:	6062      	str	r2, [r4, #4]
 800aba6:	2203      	movs	r2, #3
 800aba8:	4b1a      	ldr	r3, [pc, #104]	; (800ac14 <_malloc_r+0x424>)
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	4393      	bics	r3, r2
 800abb0:	1b59      	subs	r1, r3, r5
 800abb2:	42ab      	cmp	r3, r5
 800abb4:	d301      	bcc.n	800abba <_malloc_r+0x3ca>
 800abb6:	290f      	cmp	r1, #15
 800abb8:	dc1f      	bgt.n	800abfa <_malloc_r+0x40a>
 800abba:	9801      	ldr	r0, [sp, #4]
 800abbc:	f000 f834 	bl	800ac28 <__malloc_unlock>
 800abc0:	e623      	b.n	800a80a <_malloc_r+0x1a>
 800abc2:	4913      	ldr	r1, [pc, #76]	; (800ac10 <_malloc_r+0x420>)
 800abc4:	1ba6      	subs	r6, r4, r6
 800abc6:	18f6      	adds	r6, r6, r3
 800abc8:	600e      	str	r6, [r1, #0]
 800abca:	e7ba      	b.n	800ab42 <_malloc_r+0x352>
 800abcc:	2107      	movs	r1, #7
 800abce:	9b03      	ldr	r3, [sp, #12]
 800abd0:	3b0c      	subs	r3, #12
 800abd2:	438b      	bics	r3, r1
 800abd4:	9902      	ldr	r1, [sp, #8]
 800abd6:	6849      	ldr	r1, [r1, #4]
 800abd8:	400a      	ands	r2, r1
 800abda:	9902      	ldr	r1, [sp, #8]
 800abdc:	431a      	orrs	r2, r3
 800abde:	604a      	str	r2, [r1, #4]
 800abe0:	18ca      	adds	r2, r1, r3
 800abe2:	2105      	movs	r1, #5
 800abe4:	6051      	str	r1, [r2, #4]
 800abe6:	6091      	str	r1, [r2, #8]
 800abe8:	2b0f      	cmp	r3, #15
 800abea:	d800      	bhi.n	800abee <_malloc_r+0x3fe>
 800abec:	e716      	b.n	800aa1c <_malloc_r+0x22c>
 800abee:	9902      	ldr	r1, [sp, #8]
 800abf0:	9801      	ldr	r0, [sp, #4]
 800abf2:	3108      	adds	r1, #8
 800abf4:	f001 fa10 	bl	800c018 <_free_r>
 800abf8:	e710      	b.n	800aa1c <_malloc_r+0x22c>
 800abfa:	2201      	movs	r2, #1
 800abfc:	0013      	movs	r3, r2
 800abfe:	4805      	ldr	r0, [pc, #20]	; (800ac14 <_malloc_r+0x424>)
 800ac00:	432b      	orrs	r3, r5
 800ac02:	6884      	ldr	r4, [r0, #8]
 800ac04:	6063      	str	r3, [r4, #4]
 800ac06:	1963      	adds	r3, r4, r5
 800ac08:	6083      	str	r3, [r0, #8]
 800ac0a:	e623      	b.n	800a854 <_malloc_r+0x64>
 800ac0c:	20000430 	.word	0x20000430
 800ac10:	20000c30 	.word	0x20000c30
 800ac14:	20000028 	.word	0x20000028

0800ac18 <__malloc_lock>:
 800ac18:	b510      	push	{r4, lr}
 800ac1a:	4802      	ldr	r0, [pc, #8]	; (800ac24 <__malloc_lock+0xc>)
 800ac1c:	f001 f974 	bl	800bf08 <__retarget_lock_acquire_recursive>
 800ac20:	bd10      	pop	{r4, pc}
 800ac22:	46c0      	nop			; (mov r8, r8)
 800ac24:	20000da5 	.word	0x20000da5

0800ac28 <__malloc_unlock>:
 800ac28:	b510      	push	{r4, lr}
 800ac2a:	4802      	ldr	r0, [pc, #8]	; (800ac34 <__malloc_unlock+0xc>)
 800ac2c:	f001 f96d 	bl	800bf0a <__retarget_lock_release_recursive>
 800ac30:	bd10      	pop	{r4, pc}
 800ac32:	46c0      	nop			; (mov r8, r8)
 800ac34:	20000da5 	.word	0x20000da5

0800ac38 <sulp>:
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	0016      	movs	r6, r2
 800ac3c:	000d      	movs	r5, r1
 800ac3e:	f002 f941 	bl	800cec4 <__ulp>
 800ac42:	2e00      	cmp	r6, #0
 800ac44:	d00d      	beq.n	800ac62 <sulp+0x2a>
 800ac46:	236b      	movs	r3, #107	; 0x6b
 800ac48:	006a      	lsls	r2, r5, #1
 800ac4a:	0d52      	lsrs	r2, r2, #21
 800ac4c:	1a9b      	subs	r3, r3, r2
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	dd07      	ble.n	800ac62 <sulp+0x2a>
 800ac52:	2400      	movs	r4, #0
 800ac54:	4a03      	ldr	r2, [pc, #12]	; (800ac64 <sulp+0x2c>)
 800ac56:	051b      	lsls	r3, r3, #20
 800ac58:	189d      	adds	r5, r3, r2
 800ac5a:	002b      	movs	r3, r5
 800ac5c:	0022      	movs	r2, r4
 800ac5e:	f7f6 fd05 	bl	800166c <__aeabi_dmul>
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
 800ac64:	3ff00000 	.word	0x3ff00000

0800ac68 <_strtod_l>:
 800ac68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac6a:	b0a1      	sub	sp, #132	; 0x84
 800ac6c:	9219      	str	r2, [sp, #100]	; 0x64
 800ac6e:	2200      	movs	r2, #0
 800ac70:	2600      	movs	r6, #0
 800ac72:	2700      	movs	r7, #0
 800ac74:	9004      	str	r0, [sp, #16]
 800ac76:	9107      	str	r1, [sp, #28]
 800ac78:	921c      	str	r2, [sp, #112]	; 0x70
 800ac7a:	911b      	str	r1, [sp, #108]	; 0x6c
 800ac7c:	780a      	ldrb	r2, [r1, #0]
 800ac7e:	2a2b      	cmp	r2, #43	; 0x2b
 800ac80:	d055      	beq.n	800ad2e <_strtod_l+0xc6>
 800ac82:	d841      	bhi.n	800ad08 <_strtod_l+0xa0>
 800ac84:	2a0d      	cmp	r2, #13
 800ac86:	d83b      	bhi.n	800ad00 <_strtod_l+0x98>
 800ac88:	2a08      	cmp	r2, #8
 800ac8a:	d83b      	bhi.n	800ad04 <_strtod_l+0x9c>
 800ac8c:	2a00      	cmp	r2, #0
 800ac8e:	d044      	beq.n	800ad1a <_strtod_l+0xb2>
 800ac90:	2200      	movs	r2, #0
 800ac92:	920f      	str	r2, [sp, #60]	; 0x3c
 800ac94:	2100      	movs	r1, #0
 800ac96:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ac98:	9109      	str	r1, [sp, #36]	; 0x24
 800ac9a:	782a      	ldrb	r2, [r5, #0]
 800ac9c:	2a30      	cmp	r2, #48	; 0x30
 800ac9e:	d000      	beq.n	800aca2 <_strtod_l+0x3a>
 800aca0:	e085      	b.n	800adae <_strtod_l+0x146>
 800aca2:	786a      	ldrb	r2, [r5, #1]
 800aca4:	3120      	adds	r1, #32
 800aca6:	438a      	bics	r2, r1
 800aca8:	2a58      	cmp	r2, #88	; 0x58
 800acaa:	d000      	beq.n	800acae <_strtod_l+0x46>
 800acac:	e075      	b.n	800ad9a <_strtod_l+0x132>
 800acae:	9302      	str	r3, [sp, #8]
 800acb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acb2:	4a97      	ldr	r2, [pc, #604]	; (800af10 <_strtod_l+0x2a8>)
 800acb4:	9301      	str	r3, [sp, #4]
 800acb6:	ab1c      	add	r3, sp, #112	; 0x70
 800acb8:	9300      	str	r3, [sp, #0]
 800acba:	9804      	ldr	r0, [sp, #16]
 800acbc:	ab1d      	add	r3, sp, #116	; 0x74
 800acbe:	a91b      	add	r1, sp, #108	; 0x6c
 800acc0:	f001 fac6 	bl	800c250 <__gethex>
 800acc4:	230f      	movs	r3, #15
 800acc6:	0002      	movs	r2, r0
 800acc8:	401a      	ands	r2, r3
 800acca:	0004      	movs	r4, r0
 800accc:	9205      	str	r2, [sp, #20]
 800acce:	4218      	tst	r0, r3
 800acd0:	d005      	beq.n	800acde <_strtod_l+0x76>
 800acd2:	2a06      	cmp	r2, #6
 800acd4:	d12d      	bne.n	800ad32 <_strtod_l+0xca>
 800acd6:	1c6b      	adds	r3, r5, #1
 800acd8:	931b      	str	r3, [sp, #108]	; 0x6c
 800acda:	2300      	movs	r3, #0
 800acdc:	930f      	str	r3, [sp, #60]	; 0x3c
 800acde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d002      	beq.n	800acea <_strtod_l+0x82>
 800ace4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ace6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ace8:	6013      	str	r3, [r2, #0]
 800acea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acec:	2b00      	cmp	r3, #0
 800acee:	d01b      	beq.n	800ad28 <_strtod_l+0xc0>
 800acf0:	2380      	movs	r3, #128	; 0x80
 800acf2:	0032      	movs	r2, r6
 800acf4:	061b      	lsls	r3, r3, #24
 800acf6:	18fb      	adds	r3, r7, r3
 800acf8:	0010      	movs	r0, r2
 800acfa:	0019      	movs	r1, r3
 800acfc:	b021      	add	sp, #132	; 0x84
 800acfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad00:	2a20      	cmp	r2, #32
 800ad02:	d1c5      	bne.n	800ac90 <_strtod_l+0x28>
 800ad04:	3101      	adds	r1, #1
 800ad06:	e7b8      	b.n	800ac7a <_strtod_l+0x12>
 800ad08:	2a2d      	cmp	r2, #45	; 0x2d
 800ad0a:	d1c1      	bne.n	800ac90 <_strtod_l+0x28>
 800ad0c:	3a2c      	subs	r2, #44	; 0x2c
 800ad0e:	920f      	str	r2, [sp, #60]	; 0x3c
 800ad10:	1c4a      	adds	r2, r1, #1
 800ad12:	921b      	str	r2, [sp, #108]	; 0x6c
 800ad14:	784a      	ldrb	r2, [r1, #1]
 800ad16:	2a00      	cmp	r2, #0
 800ad18:	d1bc      	bne.n	800ac94 <_strtod_l+0x2c>
 800ad1a:	9b07      	ldr	r3, [sp, #28]
 800ad1c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad1e:	2300      	movs	r3, #0
 800ad20:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d1dd      	bne.n	800ace4 <_strtod_l+0x7c>
 800ad28:	0032      	movs	r2, r6
 800ad2a:	003b      	movs	r3, r7
 800ad2c:	e7e4      	b.n	800acf8 <_strtod_l+0x90>
 800ad2e:	2200      	movs	r2, #0
 800ad30:	e7ed      	b.n	800ad0e <_strtod_l+0xa6>
 800ad32:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ad34:	2a00      	cmp	r2, #0
 800ad36:	d007      	beq.n	800ad48 <_strtod_l+0xe0>
 800ad38:	2135      	movs	r1, #53	; 0x35
 800ad3a:	a81e      	add	r0, sp, #120	; 0x78
 800ad3c:	f002 f9b3 	bl	800d0a6 <__copybits>
 800ad40:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad42:	9804      	ldr	r0, [sp, #16]
 800ad44:	f001 fdb0 	bl	800c8a8 <_Bfree>
 800ad48:	9805      	ldr	r0, [sp, #20]
 800ad4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad4c:	3801      	subs	r0, #1
 800ad4e:	2804      	cmp	r0, #4
 800ad50:	d806      	bhi.n	800ad60 <_strtod_l+0xf8>
 800ad52:	f7f5 f9df 	bl	8000114 <__gnu_thumb1_case_uqi>
 800ad56:	0312      	.short	0x0312
 800ad58:	1e1c      	.short	0x1e1c
 800ad5a:	12          	.byte	0x12
 800ad5b:	00          	.byte	0x00
 800ad5c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ad5e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800ad60:	05e4      	lsls	r4, r4, #23
 800ad62:	d502      	bpl.n	800ad6a <_strtod_l+0x102>
 800ad64:	2380      	movs	r3, #128	; 0x80
 800ad66:	061b      	lsls	r3, r3, #24
 800ad68:	431f      	orrs	r7, r3
 800ad6a:	4b6a      	ldr	r3, [pc, #424]	; (800af14 <_strtod_l+0x2ac>)
 800ad6c:	423b      	tst	r3, r7
 800ad6e:	d1b6      	bne.n	800acde <_strtod_l+0x76>
 800ad70:	f001 f89e 	bl	800beb0 <__errno>
 800ad74:	2322      	movs	r3, #34	; 0x22
 800ad76:	6003      	str	r3, [r0, #0]
 800ad78:	e7b1      	b.n	800acde <_strtod_l+0x76>
 800ad7a:	4967      	ldr	r1, [pc, #412]	; (800af18 <_strtod_l+0x2b0>)
 800ad7c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ad7e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ad80:	400a      	ands	r2, r1
 800ad82:	4966      	ldr	r1, [pc, #408]	; (800af1c <_strtod_l+0x2b4>)
 800ad84:	185b      	adds	r3, r3, r1
 800ad86:	051b      	lsls	r3, r3, #20
 800ad88:	431a      	orrs	r2, r3
 800ad8a:	0017      	movs	r7, r2
 800ad8c:	e7e8      	b.n	800ad60 <_strtod_l+0xf8>
 800ad8e:	4f61      	ldr	r7, [pc, #388]	; (800af14 <_strtod_l+0x2ac>)
 800ad90:	e7e6      	b.n	800ad60 <_strtod_l+0xf8>
 800ad92:	2601      	movs	r6, #1
 800ad94:	4f62      	ldr	r7, [pc, #392]	; (800af20 <_strtod_l+0x2b8>)
 800ad96:	4276      	negs	r6, r6
 800ad98:	e7e2      	b.n	800ad60 <_strtod_l+0xf8>
 800ad9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad9c:	1c5a      	adds	r2, r3, #1
 800ad9e:	921b      	str	r2, [sp, #108]	; 0x6c
 800ada0:	785b      	ldrb	r3, [r3, #1]
 800ada2:	2b30      	cmp	r3, #48	; 0x30
 800ada4:	d0f9      	beq.n	800ad9a <_strtod_l+0x132>
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d099      	beq.n	800acde <_strtod_l+0x76>
 800adaa:	2301      	movs	r3, #1
 800adac:	9309      	str	r3, [sp, #36]	; 0x24
 800adae:	2500      	movs	r5, #0
 800adb0:	220a      	movs	r2, #10
 800adb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800adb4:	950d      	str	r5, [sp, #52]	; 0x34
 800adb6:	9310      	str	r3, [sp, #64]	; 0x40
 800adb8:	9508      	str	r5, [sp, #32]
 800adba:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800adbc:	7804      	ldrb	r4, [r0, #0]
 800adbe:	0023      	movs	r3, r4
 800adc0:	3b30      	subs	r3, #48	; 0x30
 800adc2:	b2d9      	uxtb	r1, r3
 800adc4:	2909      	cmp	r1, #9
 800adc6:	d927      	bls.n	800ae18 <_strtod_l+0x1b0>
 800adc8:	2201      	movs	r2, #1
 800adca:	4956      	ldr	r1, [pc, #344]	; (800af24 <_strtod_l+0x2bc>)
 800adcc:	f000 ff98 	bl	800bd00 <strncmp>
 800add0:	2800      	cmp	r0, #0
 800add2:	d031      	beq.n	800ae38 <_strtod_l+0x1d0>
 800add4:	2000      	movs	r0, #0
 800add6:	0023      	movs	r3, r4
 800add8:	4684      	mov	ip, r0
 800adda:	9a08      	ldr	r2, [sp, #32]
 800addc:	900c      	str	r0, [sp, #48]	; 0x30
 800adde:	9205      	str	r2, [sp, #20]
 800ade0:	2220      	movs	r2, #32
 800ade2:	0019      	movs	r1, r3
 800ade4:	4391      	bics	r1, r2
 800ade6:	000a      	movs	r2, r1
 800ade8:	2100      	movs	r1, #0
 800adea:	9106      	str	r1, [sp, #24]
 800adec:	2a45      	cmp	r2, #69	; 0x45
 800adee:	d000      	beq.n	800adf2 <_strtod_l+0x18a>
 800adf0:	e0c2      	b.n	800af78 <_strtod_l+0x310>
 800adf2:	9b05      	ldr	r3, [sp, #20]
 800adf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adf6:	4303      	orrs	r3, r0
 800adf8:	4313      	orrs	r3, r2
 800adfa:	428b      	cmp	r3, r1
 800adfc:	d08d      	beq.n	800ad1a <_strtod_l+0xb2>
 800adfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae00:	9307      	str	r3, [sp, #28]
 800ae02:	3301      	adds	r3, #1
 800ae04:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae06:	9b07      	ldr	r3, [sp, #28]
 800ae08:	785b      	ldrb	r3, [r3, #1]
 800ae0a:	2b2b      	cmp	r3, #43	; 0x2b
 800ae0c:	d071      	beq.n	800aef2 <_strtod_l+0x28a>
 800ae0e:	000c      	movs	r4, r1
 800ae10:	2b2d      	cmp	r3, #45	; 0x2d
 800ae12:	d174      	bne.n	800aefe <_strtod_l+0x296>
 800ae14:	2401      	movs	r4, #1
 800ae16:	e06d      	b.n	800aef4 <_strtod_l+0x28c>
 800ae18:	9908      	ldr	r1, [sp, #32]
 800ae1a:	2908      	cmp	r1, #8
 800ae1c:	dc09      	bgt.n	800ae32 <_strtod_l+0x1ca>
 800ae1e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ae20:	4351      	muls	r1, r2
 800ae22:	185b      	adds	r3, r3, r1
 800ae24:	930d      	str	r3, [sp, #52]	; 0x34
 800ae26:	9b08      	ldr	r3, [sp, #32]
 800ae28:	3001      	adds	r0, #1
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	9308      	str	r3, [sp, #32]
 800ae2e:	901b      	str	r0, [sp, #108]	; 0x6c
 800ae30:	e7c3      	b.n	800adba <_strtod_l+0x152>
 800ae32:	4355      	muls	r5, r2
 800ae34:	195d      	adds	r5, r3, r5
 800ae36:	e7f6      	b.n	800ae26 <_strtod_l+0x1be>
 800ae38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae3a:	1c5a      	adds	r2, r3, #1
 800ae3c:	921b      	str	r2, [sp, #108]	; 0x6c
 800ae3e:	9a08      	ldr	r2, [sp, #32]
 800ae40:	785b      	ldrb	r3, [r3, #1]
 800ae42:	2a00      	cmp	r2, #0
 800ae44:	d03a      	beq.n	800aebc <_strtod_l+0x254>
 800ae46:	900c      	str	r0, [sp, #48]	; 0x30
 800ae48:	9205      	str	r2, [sp, #20]
 800ae4a:	001a      	movs	r2, r3
 800ae4c:	3a30      	subs	r2, #48	; 0x30
 800ae4e:	2a09      	cmp	r2, #9
 800ae50:	d912      	bls.n	800ae78 <_strtod_l+0x210>
 800ae52:	2201      	movs	r2, #1
 800ae54:	4694      	mov	ip, r2
 800ae56:	e7c3      	b.n	800ade0 <_strtod_l+0x178>
 800ae58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae5a:	3001      	adds	r0, #1
 800ae5c:	1c5a      	adds	r2, r3, #1
 800ae5e:	921b      	str	r2, [sp, #108]	; 0x6c
 800ae60:	785b      	ldrb	r3, [r3, #1]
 800ae62:	2b30      	cmp	r3, #48	; 0x30
 800ae64:	d0f8      	beq.n	800ae58 <_strtod_l+0x1f0>
 800ae66:	001a      	movs	r2, r3
 800ae68:	3a31      	subs	r2, #49	; 0x31
 800ae6a:	2a08      	cmp	r2, #8
 800ae6c:	d83c      	bhi.n	800aee8 <_strtod_l+0x280>
 800ae6e:	900c      	str	r0, [sp, #48]	; 0x30
 800ae70:	2000      	movs	r0, #0
 800ae72:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ae74:	9005      	str	r0, [sp, #20]
 800ae76:	9210      	str	r2, [sp, #64]	; 0x40
 800ae78:	001a      	movs	r2, r3
 800ae7a:	1c41      	adds	r1, r0, #1
 800ae7c:	3a30      	subs	r2, #48	; 0x30
 800ae7e:	2b30      	cmp	r3, #48	; 0x30
 800ae80:	d016      	beq.n	800aeb0 <_strtod_l+0x248>
 800ae82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae84:	185b      	adds	r3, r3, r1
 800ae86:	930c      	str	r3, [sp, #48]	; 0x30
 800ae88:	9b05      	ldr	r3, [sp, #20]
 800ae8a:	210a      	movs	r1, #10
 800ae8c:	469c      	mov	ip, r3
 800ae8e:	4484      	add	ip, r0
 800ae90:	4563      	cmp	r3, ip
 800ae92:	d115      	bne.n	800aec0 <_strtod_l+0x258>
 800ae94:	9905      	ldr	r1, [sp, #20]
 800ae96:	9b05      	ldr	r3, [sp, #20]
 800ae98:	3101      	adds	r1, #1
 800ae9a:	1809      	adds	r1, r1, r0
 800ae9c:	181b      	adds	r3, r3, r0
 800ae9e:	9105      	str	r1, [sp, #20]
 800aea0:	2b08      	cmp	r3, #8
 800aea2:	dc19      	bgt.n	800aed8 <_strtod_l+0x270>
 800aea4:	230a      	movs	r3, #10
 800aea6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aea8:	434b      	muls	r3, r1
 800aeaa:	2100      	movs	r1, #0
 800aeac:	18d3      	adds	r3, r2, r3
 800aeae:	930d      	str	r3, [sp, #52]	; 0x34
 800aeb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aeb2:	0008      	movs	r0, r1
 800aeb4:	1c5a      	adds	r2, r3, #1
 800aeb6:	921b      	str	r2, [sp, #108]	; 0x6c
 800aeb8:	785b      	ldrb	r3, [r3, #1]
 800aeba:	e7c6      	b.n	800ae4a <_strtod_l+0x1e2>
 800aebc:	9808      	ldr	r0, [sp, #32]
 800aebe:	e7d0      	b.n	800ae62 <_strtod_l+0x1fa>
 800aec0:	1c5c      	adds	r4, r3, #1
 800aec2:	2b08      	cmp	r3, #8
 800aec4:	dc04      	bgt.n	800aed0 <_strtod_l+0x268>
 800aec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aec8:	434b      	muls	r3, r1
 800aeca:	930d      	str	r3, [sp, #52]	; 0x34
 800aecc:	0023      	movs	r3, r4
 800aece:	e7df      	b.n	800ae90 <_strtod_l+0x228>
 800aed0:	2c10      	cmp	r4, #16
 800aed2:	dcfb      	bgt.n	800aecc <_strtod_l+0x264>
 800aed4:	434d      	muls	r5, r1
 800aed6:	e7f9      	b.n	800aecc <_strtod_l+0x264>
 800aed8:	9b05      	ldr	r3, [sp, #20]
 800aeda:	2100      	movs	r1, #0
 800aedc:	2b10      	cmp	r3, #16
 800aede:	dce7      	bgt.n	800aeb0 <_strtod_l+0x248>
 800aee0:	230a      	movs	r3, #10
 800aee2:	435d      	muls	r5, r3
 800aee4:	1955      	adds	r5, r2, r5
 800aee6:	e7e3      	b.n	800aeb0 <_strtod_l+0x248>
 800aee8:	2200      	movs	r2, #0
 800aeea:	920c      	str	r2, [sp, #48]	; 0x30
 800aeec:	9205      	str	r2, [sp, #20]
 800aeee:	3201      	adds	r2, #1
 800aef0:	e7b0      	b.n	800ae54 <_strtod_l+0x1ec>
 800aef2:	2400      	movs	r4, #0
 800aef4:	9b07      	ldr	r3, [sp, #28]
 800aef6:	3302      	adds	r3, #2
 800aef8:	931b      	str	r3, [sp, #108]	; 0x6c
 800aefa:	9b07      	ldr	r3, [sp, #28]
 800aefc:	789b      	ldrb	r3, [r3, #2]
 800aefe:	001a      	movs	r2, r3
 800af00:	3a30      	subs	r2, #48	; 0x30
 800af02:	2a09      	cmp	r2, #9
 800af04:	d914      	bls.n	800af30 <_strtod_l+0x2c8>
 800af06:	9a07      	ldr	r2, [sp, #28]
 800af08:	921b      	str	r2, [sp, #108]	; 0x6c
 800af0a:	2200      	movs	r2, #0
 800af0c:	e033      	b.n	800af76 <_strtod_l+0x30e>
 800af0e:	46c0      	nop			; (mov r8, r8)
 800af10:	080144d4 	.word	0x080144d4
 800af14:	7ff00000 	.word	0x7ff00000
 800af18:	ffefffff 	.word	0xffefffff
 800af1c:	00000433 	.word	0x00000433
 800af20:	7fffffff 	.word	0x7fffffff
 800af24:	080144d0 	.word	0x080144d0
 800af28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af2a:	1c5a      	adds	r2, r3, #1
 800af2c:	921b      	str	r2, [sp, #108]	; 0x6c
 800af2e:	785b      	ldrb	r3, [r3, #1]
 800af30:	2b30      	cmp	r3, #48	; 0x30
 800af32:	d0f9      	beq.n	800af28 <_strtod_l+0x2c0>
 800af34:	2200      	movs	r2, #0
 800af36:	9206      	str	r2, [sp, #24]
 800af38:	001a      	movs	r2, r3
 800af3a:	3a31      	subs	r2, #49	; 0x31
 800af3c:	2a08      	cmp	r2, #8
 800af3e:	d81b      	bhi.n	800af78 <_strtod_l+0x310>
 800af40:	3b30      	subs	r3, #48	; 0x30
 800af42:	930e      	str	r3, [sp, #56]	; 0x38
 800af44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af46:	9306      	str	r3, [sp, #24]
 800af48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af4a:	1c59      	adds	r1, r3, #1
 800af4c:	911b      	str	r1, [sp, #108]	; 0x6c
 800af4e:	785b      	ldrb	r3, [r3, #1]
 800af50:	001a      	movs	r2, r3
 800af52:	3a30      	subs	r2, #48	; 0x30
 800af54:	2a09      	cmp	r2, #9
 800af56:	d93a      	bls.n	800afce <_strtod_l+0x366>
 800af58:	9a06      	ldr	r2, [sp, #24]
 800af5a:	1a8a      	subs	r2, r1, r2
 800af5c:	49b2      	ldr	r1, [pc, #712]	; (800b228 <_strtod_l+0x5c0>)
 800af5e:	9106      	str	r1, [sp, #24]
 800af60:	2a08      	cmp	r2, #8
 800af62:	dc04      	bgt.n	800af6e <_strtod_l+0x306>
 800af64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af66:	9206      	str	r2, [sp, #24]
 800af68:	428a      	cmp	r2, r1
 800af6a:	dd00      	ble.n	800af6e <_strtod_l+0x306>
 800af6c:	9106      	str	r1, [sp, #24]
 800af6e:	2c00      	cmp	r4, #0
 800af70:	d002      	beq.n	800af78 <_strtod_l+0x310>
 800af72:	9a06      	ldr	r2, [sp, #24]
 800af74:	4252      	negs	r2, r2
 800af76:	9206      	str	r2, [sp, #24]
 800af78:	9a05      	ldr	r2, [sp, #20]
 800af7a:	2a00      	cmp	r2, #0
 800af7c:	d14d      	bne.n	800b01a <_strtod_l+0x3b2>
 800af7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af80:	4310      	orrs	r0, r2
 800af82:	d000      	beq.n	800af86 <_strtod_l+0x31e>
 800af84:	e6ab      	b.n	800acde <_strtod_l+0x76>
 800af86:	4662      	mov	r2, ip
 800af88:	2a00      	cmp	r2, #0
 800af8a:	d000      	beq.n	800af8e <_strtod_l+0x326>
 800af8c:	e6c5      	b.n	800ad1a <_strtod_l+0xb2>
 800af8e:	2b69      	cmp	r3, #105	; 0x69
 800af90:	d027      	beq.n	800afe2 <_strtod_l+0x37a>
 800af92:	dc23      	bgt.n	800afdc <_strtod_l+0x374>
 800af94:	2b49      	cmp	r3, #73	; 0x49
 800af96:	d024      	beq.n	800afe2 <_strtod_l+0x37a>
 800af98:	2b4e      	cmp	r3, #78	; 0x4e
 800af9a:	d000      	beq.n	800af9e <_strtod_l+0x336>
 800af9c:	e6bd      	b.n	800ad1a <_strtod_l+0xb2>
 800af9e:	49a3      	ldr	r1, [pc, #652]	; (800b22c <_strtod_l+0x5c4>)
 800afa0:	a81b      	add	r0, sp, #108	; 0x6c
 800afa2:	f001 fb8b 	bl	800c6bc <__match>
 800afa6:	2800      	cmp	r0, #0
 800afa8:	d100      	bne.n	800afac <_strtod_l+0x344>
 800afaa:	e6b6      	b.n	800ad1a <_strtod_l+0xb2>
 800afac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	2b28      	cmp	r3, #40	; 0x28
 800afb2:	d12c      	bne.n	800b00e <_strtod_l+0x3a6>
 800afb4:	499e      	ldr	r1, [pc, #632]	; (800b230 <_strtod_l+0x5c8>)
 800afb6:	aa1e      	add	r2, sp, #120	; 0x78
 800afb8:	a81b      	add	r0, sp, #108	; 0x6c
 800afba:	f001 fb93 	bl	800c6e4 <__hexnan>
 800afbe:	2805      	cmp	r0, #5
 800afc0:	d125      	bne.n	800b00e <_strtod_l+0x3a6>
 800afc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800afc4:	4a9b      	ldr	r2, [pc, #620]	; (800b234 <_strtod_l+0x5cc>)
 800afc6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800afc8:	431a      	orrs	r2, r3
 800afca:	0017      	movs	r7, r2
 800afcc:	e687      	b.n	800acde <_strtod_l+0x76>
 800afce:	220a      	movs	r2, #10
 800afd0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800afd2:	434a      	muls	r2, r1
 800afd4:	18d2      	adds	r2, r2, r3
 800afd6:	3a30      	subs	r2, #48	; 0x30
 800afd8:	920e      	str	r2, [sp, #56]	; 0x38
 800afda:	e7b5      	b.n	800af48 <_strtod_l+0x2e0>
 800afdc:	2b6e      	cmp	r3, #110	; 0x6e
 800afde:	d0de      	beq.n	800af9e <_strtod_l+0x336>
 800afe0:	e69b      	b.n	800ad1a <_strtod_l+0xb2>
 800afe2:	4995      	ldr	r1, [pc, #596]	; (800b238 <_strtod_l+0x5d0>)
 800afe4:	a81b      	add	r0, sp, #108	; 0x6c
 800afe6:	f001 fb69 	bl	800c6bc <__match>
 800afea:	2800      	cmp	r0, #0
 800afec:	d100      	bne.n	800aff0 <_strtod_l+0x388>
 800afee:	e694      	b.n	800ad1a <_strtod_l+0xb2>
 800aff0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aff2:	4992      	ldr	r1, [pc, #584]	; (800b23c <_strtod_l+0x5d4>)
 800aff4:	3b01      	subs	r3, #1
 800aff6:	a81b      	add	r0, sp, #108	; 0x6c
 800aff8:	931b      	str	r3, [sp, #108]	; 0x6c
 800affa:	f001 fb5f 	bl	800c6bc <__match>
 800affe:	2800      	cmp	r0, #0
 800b000:	d102      	bne.n	800b008 <_strtod_l+0x3a0>
 800b002:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b004:	3301      	adds	r3, #1
 800b006:	931b      	str	r3, [sp, #108]	; 0x6c
 800b008:	2600      	movs	r6, #0
 800b00a:	4f8a      	ldr	r7, [pc, #552]	; (800b234 <_strtod_l+0x5cc>)
 800b00c:	e667      	b.n	800acde <_strtod_l+0x76>
 800b00e:	488c      	ldr	r0, [pc, #560]	; (800b240 <_strtod_l+0x5d8>)
 800b010:	f000 ff90 	bl	800bf34 <nan>
 800b014:	0006      	movs	r6, r0
 800b016:	000f      	movs	r7, r1
 800b018:	e661      	b.n	800acde <_strtod_l+0x76>
 800b01a:	9b06      	ldr	r3, [sp, #24]
 800b01c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b01e:	1a9b      	subs	r3, r3, r2
 800b020:	9309      	str	r3, [sp, #36]	; 0x24
 800b022:	9b08      	ldr	r3, [sp, #32]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d101      	bne.n	800b02c <_strtod_l+0x3c4>
 800b028:	9b05      	ldr	r3, [sp, #20]
 800b02a:	9308      	str	r3, [sp, #32]
 800b02c:	9c05      	ldr	r4, [sp, #20]
 800b02e:	2c10      	cmp	r4, #16
 800b030:	dd00      	ble.n	800b034 <_strtod_l+0x3cc>
 800b032:	2410      	movs	r4, #16
 800b034:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b036:	f7f7 f9e1 	bl	80023fc <__aeabi_ui2d>
 800b03a:	9b05      	ldr	r3, [sp, #20]
 800b03c:	0006      	movs	r6, r0
 800b03e:	000f      	movs	r7, r1
 800b040:	2b09      	cmp	r3, #9
 800b042:	dd15      	ble.n	800b070 <_strtod_l+0x408>
 800b044:	0022      	movs	r2, r4
 800b046:	4b7f      	ldr	r3, [pc, #508]	; (800b244 <_strtod_l+0x5dc>)
 800b048:	3a09      	subs	r2, #9
 800b04a:	00d2      	lsls	r2, r2, #3
 800b04c:	189b      	adds	r3, r3, r2
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	f7f6 fb0b 	bl	800166c <__aeabi_dmul>
 800b056:	0006      	movs	r6, r0
 800b058:	0028      	movs	r0, r5
 800b05a:	000f      	movs	r7, r1
 800b05c:	f7f7 f9ce 	bl	80023fc <__aeabi_ui2d>
 800b060:	0002      	movs	r2, r0
 800b062:	000b      	movs	r3, r1
 800b064:	0030      	movs	r0, r6
 800b066:	0039      	movs	r1, r7
 800b068:	f7f5 fba6 	bl	80007b8 <__aeabi_dadd>
 800b06c:	0006      	movs	r6, r0
 800b06e:	000f      	movs	r7, r1
 800b070:	9b05      	ldr	r3, [sp, #20]
 800b072:	2b0f      	cmp	r3, #15
 800b074:	dc39      	bgt.n	800b0ea <_strtod_l+0x482>
 800b076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d100      	bne.n	800b07e <_strtod_l+0x416>
 800b07c:	e62f      	b.n	800acde <_strtod_l+0x76>
 800b07e:	dd24      	ble.n	800b0ca <_strtod_l+0x462>
 800b080:	2b16      	cmp	r3, #22
 800b082:	dc09      	bgt.n	800b098 <_strtod_l+0x430>
 800b084:	496f      	ldr	r1, [pc, #444]	; (800b244 <_strtod_l+0x5dc>)
 800b086:	00db      	lsls	r3, r3, #3
 800b088:	18c9      	adds	r1, r1, r3
 800b08a:	0032      	movs	r2, r6
 800b08c:	6808      	ldr	r0, [r1, #0]
 800b08e:	6849      	ldr	r1, [r1, #4]
 800b090:	003b      	movs	r3, r7
 800b092:	f7f6 faeb 	bl	800166c <__aeabi_dmul>
 800b096:	e7bd      	b.n	800b014 <_strtod_l+0x3ac>
 800b098:	2325      	movs	r3, #37	; 0x25
 800b09a:	9a05      	ldr	r2, [sp, #20]
 800b09c:	1a9b      	subs	r3, r3, r2
 800b09e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	db22      	blt.n	800b0ea <_strtod_l+0x482>
 800b0a4:	240f      	movs	r4, #15
 800b0a6:	9b05      	ldr	r3, [sp, #20]
 800b0a8:	4d66      	ldr	r5, [pc, #408]	; (800b244 <_strtod_l+0x5dc>)
 800b0aa:	1ae4      	subs	r4, r4, r3
 800b0ac:	00e1      	lsls	r1, r4, #3
 800b0ae:	1869      	adds	r1, r5, r1
 800b0b0:	0032      	movs	r2, r6
 800b0b2:	6808      	ldr	r0, [r1, #0]
 800b0b4:	6849      	ldr	r1, [r1, #4]
 800b0b6:	003b      	movs	r3, r7
 800b0b8:	f7f6 fad8 	bl	800166c <__aeabi_dmul>
 800b0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0be:	1b1c      	subs	r4, r3, r4
 800b0c0:	00e4      	lsls	r4, r4, #3
 800b0c2:	192d      	adds	r5, r5, r4
 800b0c4:	682a      	ldr	r2, [r5, #0]
 800b0c6:	686b      	ldr	r3, [r5, #4]
 800b0c8:	e7e3      	b.n	800b092 <_strtod_l+0x42a>
 800b0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0cc:	3316      	adds	r3, #22
 800b0ce:	db0c      	blt.n	800b0ea <_strtod_l+0x482>
 800b0d0:	9906      	ldr	r1, [sp, #24]
 800b0d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0d4:	4b5b      	ldr	r3, [pc, #364]	; (800b244 <_strtod_l+0x5dc>)
 800b0d6:	1a52      	subs	r2, r2, r1
 800b0d8:	00d2      	lsls	r2, r2, #3
 800b0da:	189b      	adds	r3, r3, r2
 800b0dc:	0030      	movs	r0, r6
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	0039      	movs	r1, r7
 800b0e4:	f7f5 fec8 	bl	8000e78 <__aeabi_ddiv>
 800b0e8:	e794      	b.n	800b014 <_strtod_l+0x3ac>
 800b0ea:	9b05      	ldr	r3, [sp, #20]
 800b0ec:	1b1c      	subs	r4, r3, r4
 800b0ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f0:	18e4      	adds	r4, r4, r3
 800b0f2:	2c00      	cmp	r4, #0
 800b0f4:	dd72      	ble.n	800b1dc <_strtod_l+0x574>
 800b0f6:	220f      	movs	r2, #15
 800b0f8:	0023      	movs	r3, r4
 800b0fa:	4013      	ands	r3, r2
 800b0fc:	4214      	tst	r4, r2
 800b0fe:	d00a      	beq.n	800b116 <_strtod_l+0x4ae>
 800b100:	4950      	ldr	r1, [pc, #320]	; (800b244 <_strtod_l+0x5dc>)
 800b102:	00db      	lsls	r3, r3, #3
 800b104:	18c9      	adds	r1, r1, r3
 800b106:	0032      	movs	r2, r6
 800b108:	6808      	ldr	r0, [r1, #0]
 800b10a:	6849      	ldr	r1, [r1, #4]
 800b10c:	003b      	movs	r3, r7
 800b10e:	f7f6 faad 	bl	800166c <__aeabi_dmul>
 800b112:	0006      	movs	r6, r0
 800b114:	000f      	movs	r7, r1
 800b116:	230f      	movs	r3, #15
 800b118:	439c      	bics	r4, r3
 800b11a:	d04a      	beq.n	800b1b2 <_strtod_l+0x54a>
 800b11c:	3326      	adds	r3, #38	; 0x26
 800b11e:	33ff      	adds	r3, #255	; 0xff
 800b120:	429c      	cmp	r4, r3
 800b122:	dd22      	ble.n	800b16a <_strtod_l+0x502>
 800b124:	2300      	movs	r3, #0
 800b126:	9305      	str	r3, [sp, #20]
 800b128:	9306      	str	r3, [sp, #24]
 800b12a:	930d      	str	r3, [sp, #52]	; 0x34
 800b12c:	9308      	str	r3, [sp, #32]
 800b12e:	2322      	movs	r3, #34	; 0x22
 800b130:	2600      	movs	r6, #0
 800b132:	9a04      	ldr	r2, [sp, #16]
 800b134:	4f3f      	ldr	r7, [pc, #252]	; (800b234 <_strtod_l+0x5cc>)
 800b136:	6013      	str	r3, [r2, #0]
 800b138:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b13a:	42b3      	cmp	r3, r6
 800b13c:	d100      	bne.n	800b140 <_strtod_l+0x4d8>
 800b13e:	e5ce      	b.n	800acde <_strtod_l+0x76>
 800b140:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b142:	9804      	ldr	r0, [sp, #16]
 800b144:	f001 fbb0 	bl	800c8a8 <_Bfree>
 800b148:	9908      	ldr	r1, [sp, #32]
 800b14a:	9804      	ldr	r0, [sp, #16]
 800b14c:	f001 fbac 	bl	800c8a8 <_Bfree>
 800b150:	9906      	ldr	r1, [sp, #24]
 800b152:	9804      	ldr	r0, [sp, #16]
 800b154:	f001 fba8 	bl	800c8a8 <_Bfree>
 800b158:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b15a:	9804      	ldr	r0, [sp, #16]
 800b15c:	f001 fba4 	bl	800c8a8 <_Bfree>
 800b160:	9905      	ldr	r1, [sp, #20]
 800b162:	9804      	ldr	r0, [sp, #16]
 800b164:	f001 fba0 	bl	800c8a8 <_Bfree>
 800b168:	e5b9      	b.n	800acde <_strtod_l+0x76>
 800b16a:	2300      	movs	r3, #0
 800b16c:	0030      	movs	r0, r6
 800b16e:	0039      	movs	r1, r7
 800b170:	4d35      	ldr	r5, [pc, #212]	; (800b248 <_strtod_l+0x5e0>)
 800b172:	1124      	asrs	r4, r4, #4
 800b174:	9307      	str	r3, [sp, #28]
 800b176:	2c01      	cmp	r4, #1
 800b178:	dc1e      	bgt.n	800b1b8 <_strtod_l+0x550>
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d001      	beq.n	800b182 <_strtod_l+0x51a>
 800b17e:	0006      	movs	r6, r0
 800b180:	000f      	movs	r7, r1
 800b182:	4b32      	ldr	r3, [pc, #200]	; (800b24c <_strtod_l+0x5e4>)
 800b184:	9a07      	ldr	r2, [sp, #28]
 800b186:	18ff      	adds	r7, r7, r3
 800b188:	4b2f      	ldr	r3, [pc, #188]	; (800b248 <_strtod_l+0x5e0>)
 800b18a:	00d2      	lsls	r2, r2, #3
 800b18c:	189d      	adds	r5, r3, r2
 800b18e:	6828      	ldr	r0, [r5, #0]
 800b190:	6869      	ldr	r1, [r5, #4]
 800b192:	0032      	movs	r2, r6
 800b194:	003b      	movs	r3, r7
 800b196:	f7f6 fa69 	bl	800166c <__aeabi_dmul>
 800b19a:	4b26      	ldr	r3, [pc, #152]	; (800b234 <_strtod_l+0x5cc>)
 800b19c:	4a2c      	ldr	r2, [pc, #176]	; (800b250 <_strtod_l+0x5e8>)
 800b19e:	0006      	movs	r6, r0
 800b1a0:	400b      	ands	r3, r1
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d8be      	bhi.n	800b124 <_strtod_l+0x4bc>
 800b1a6:	4a2b      	ldr	r2, [pc, #172]	; (800b254 <_strtod_l+0x5ec>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d913      	bls.n	800b1d4 <_strtod_l+0x56c>
 800b1ac:	2601      	movs	r6, #1
 800b1ae:	4f2a      	ldr	r7, [pc, #168]	; (800b258 <_strtod_l+0x5f0>)
 800b1b0:	4276      	negs	r6, r6
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	9307      	str	r3, [sp, #28]
 800b1b6:	e088      	b.n	800b2ca <_strtod_l+0x662>
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	4214      	tst	r4, r2
 800b1bc:	d004      	beq.n	800b1c8 <_strtod_l+0x560>
 800b1be:	682a      	ldr	r2, [r5, #0]
 800b1c0:	686b      	ldr	r3, [r5, #4]
 800b1c2:	f7f6 fa53 	bl	800166c <__aeabi_dmul>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	9a07      	ldr	r2, [sp, #28]
 800b1ca:	1064      	asrs	r4, r4, #1
 800b1cc:	3201      	adds	r2, #1
 800b1ce:	9207      	str	r2, [sp, #28]
 800b1d0:	3508      	adds	r5, #8
 800b1d2:	e7d0      	b.n	800b176 <_strtod_l+0x50e>
 800b1d4:	23d4      	movs	r3, #212	; 0xd4
 800b1d6:	049b      	lsls	r3, r3, #18
 800b1d8:	18cf      	adds	r7, r1, r3
 800b1da:	e7ea      	b.n	800b1b2 <_strtod_l+0x54a>
 800b1dc:	2c00      	cmp	r4, #0
 800b1de:	d0e8      	beq.n	800b1b2 <_strtod_l+0x54a>
 800b1e0:	4264      	negs	r4, r4
 800b1e2:	230f      	movs	r3, #15
 800b1e4:	0022      	movs	r2, r4
 800b1e6:	401a      	ands	r2, r3
 800b1e8:	421c      	tst	r4, r3
 800b1ea:	d00a      	beq.n	800b202 <_strtod_l+0x59a>
 800b1ec:	4b15      	ldr	r3, [pc, #84]	; (800b244 <_strtod_l+0x5dc>)
 800b1ee:	00d2      	lsls	r2, r2, #3
 800b1f0:	189b      	adds	r3, r3, r2
 800b1f2:	0030      	movs	r0, r6
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	0039      	movs	r1, r7
 800b1fa:	f7f5 fe3d 	bl	8000e78 <__aeabi_ddiv>
 800b1fe:	0006      	movs	r6, r0
 800b200:	000f      	movs	r7, r1
 800b202:	1124      	asrs	r4, r4, #4
 800b204:	d0d5      	beq.n	800b1b2 <_strtod_l+0x54a>
 800b206:	2c1f      	cmp	r4, #31
 800b208:	dd28      	ble.n	800b25c <_strtod_l+0x5f4>
 800b20a:	2300      	movs	r3, #0
 800b20c:	9305      	str	r3, [sp, #20]
 800b20e:	9306      	str	r3, [sp, #24]
 800b210:	930d      	str	r3, [sp, #52]	; 0x34
 800b212:	9308      	str	r3, [sp, #32]
 800b214:	2322      	movs	r3, #34	; 0x22
 800b216:	9a04      	ldr	r2, [sp, #16]
 800b218:	2600      	movs	r6, #0
 800b21a:	6013      	str	r3, [r2, #0]
 800b21c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b21e:	2700      	movs	r7, #0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d18d      	bne.n	800b140 <_strtod_l+0x4d8>
 800b224:	e55b      	b.n	800acde <_strtod_l+0x76>
 800b226:	46c0      	nop			; (mov r8, r8)
 800b228:	00004e1f 	.word	0x00004e1f
 800b22c:	08014809 	.word	0x08014809
 800b230:	080144e8 	.word	0x080144e8
 800b234:	7ff00000 	.word	0x7ff00000
 800b238:	08014801 	.word	0x08014801
 800b23c:	080148b7 	.word	0x080148b7
 800b240:	080148b3 	.word	0x080148b3
 800b244:	08014728 	.word	0x08014728
 800b248:	08014700 	.word	0x08014700
 800b24c:	fcb00000 	.word	0xfcb00000
 800b250:	7ca00000 	.word	0x7ca00000
 800b254:	7c900000 	.word	0x7c900000
 800b258:	7fefffff 	.word	0x7fefffff
 800b25c:	2310      	movs	r3, #16
 800b25e:	0022      	movs	r2, r4
 800b260:	401a      	ands	r2, r3
 800b262:	9207      	str	r2, [sp, #28]
 800b264:	421c      	tst	r4, r3
 800b266:	d001      	beq.n	800b26c <_strtod_l+0x604>
 800b268:	335a      	adds	r3, #90	; 0x5a
 800b26a:	9307      	str	r3, [sp, #28]
 800b26c:	0030      	movs	r0, r6
 800b26e:	0039      	movs	r1, r7
 800b270:	2300      	movs	r3, #0
 800b272:	4dc4      	ldr	r5, [pc, #784]	; (800b584 <_strtod_l+0x91c>)
 800b274:	2201      	movs	r2, #1
 800b276:	4214      	tst	r4, r2
 800b278:	d004      	beq.n	800b284 <_strtod_l+0x61c>
 800b27a:	682a      	ldr	r2, [r5, #0]
 800b27c:	686b      	ldr	r3, [r5, #4]
 800b27e:	f7f6 f9f5 	bl	800166c <__aeabi_dmul>
 800b282:	2301      	movs	r3, #1
 800b284:	1064      	asrs	r4, r4, #1
 800b286:	3508      	adds	r5, #8
 800b288:	2c00      	cmp	r4, #0
 800b28a:	d1f3      	bne.n	800b274 <_strtod_l+0x60c>
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d001      	beq.n	800b294 <_strtod_l+0x62c>
 800b290:	0006      	movs	r6, r0
 800b292:	000f      	movs	r7, r1
 800b294:	9b07      	ldr	r3, [sp, #28]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00f      	beq.n	800b2ba <_strtod_l+0x652>
 800b29a:	236b      	movs	r3, #107	; 0x6b
 800b29c:	007a      	lsls	r2, r7, #1
 800b29e:	0d52      	lsrs	r2, r2, #21
 800b2a0:	0039      	movs	r1, r7
 800b2a2:	1a9b      	subs	r3, r3, r2
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	dd08      	ble.n	800b2ba <_strtod_l+0x652>
 800b2a8:	2b1f      	cmp	r3, #31
 800b2aa:	dc00      	bgt.n	800b2ae <_strtod_l+0x646>
 800b2ac:	e121      	b.n	800b4f2 <_strtod_l+0x88a>
 800b2ae:	2600      	movs	r6, #0
 800b2b0:	2b34      	cmp	r3, #52	; 0x34
 800b2b2:	dc00      	bgt.n	800b2b6 <_strtod_l+0x64e>
 800b2b4:	e116      	b.n	800b4e4 <_strtod_l+0x87c>
 800b2b6:	27dc      	movs	r7, #220	; 0xdc
 800b2b8:	04bf      	lsls	r7, r7, #18
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	2300      	movs	r3, #0
 800b2be:	0030      	movs	r0, r6
 800b2c0:	0039      	movs	r1, r7
 800b2c2:	f7f5 f8c1 	bl	8000448 <__aeabi_dcmpeq>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d19f      	bne.n	800b20a <_strtod_l+0x5a2>
 800b2ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2cc:	9a08      	ldr	r2, [sp, #32]
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b2d2:	9b05      	ldr	r3, [sp, #20]
 800b2d4:	9804      	ldr	r0, [sp, #16]
 800b2d6:	f001 fb35 	bl	800c944 <__s2b>
 800b2da:	900d      	str	r0, [sp, #52]	; 0x34
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d100      	bne.n	800b2e2 <_strtod_l+0x67a>
 800b2e0:	e720      	b.n	800b124 <_strtod_l+0x4bc>
 800b2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e4:	9906      	ldr	r1, [sp, #24]
 800b2e6:	17da      	asrs	r2, r3, #31
 800b2e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2ea:	1a5b      	subs	r3, r3, r1
 800b2ec:	401a      	ands	r2, r3
 800b2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f0:	9215      	str	r2, [sp, #84]	; 0x54
 800b2f2:	43db      	mvns	r3, r3
 800b2f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2f6:	17db      	asrs	r3, r3, #31
 800b2f8:	401a      	ands	r2, r3
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	9218      	str	r2, [sp, #96]	; 0x60
 800b2fe:	9305      	str	r3, [sp, #20]
 800b300:	9306      	str	r3, [sp, #24]
 800b302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b304:	9804      	ldr	r0, [sp, #16]
 800b306:	6859      	ldr	r1, [r3, #4]
 800b308:	f001 faa6 	bl	800c858 <_Balloc>
 800b30c:	9008      	str	r0, [sp, #32]
 800b30e:	2800      	cmp	r0, #0
 800b310:	d100      	bne.n	800b314 <_strtod_l+0x6ac>
 800b312:	e70c      	b.n	800b12e <_strtod_l+0x4c6>
 800b314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b316:	300c      	adds	r0, #12
 800b318:	0019      	movs	r1, r3
 800b31a:	691a      	ldr	r2, [r3, #16]
 800b31c:	310c      	adds	r1, #12
 800b31e:	3202      	adds	r2, #2
 800b320:	0092      	lsls	r2, r2, #2
 800b322:	f000 fdfe 	bl	800bf22 <memcpy>
 800b326:	ab1e      	add	r3, sp, #120	; 0x78
 800b328:	9301      	str	r3, [sp, #4]
 800b32a:	ab1d      	add	r3, sp, #116	; 0x74
 800b32c:	9300      	str	r3, [sp, #0]
 800b32e:	0032      	movs	r2, r6
 800b330:	003b      	movs	r3, r7
 800b332:	9804      	ldr	r0, [sp, #16]
 800b334:	9610      	str	r6, [sp, #64]	; 0x40
 800b336:	9711      	str	r7, [sp, #68]	; 0x44
 800b338:	f001 fe2c 	bl	800cf94 <__d2b>
 800b33c:	901c      	str	r0, [sp, #112]	; 0x70
 800b33e:	2800      	cmp	r0, #0
 800b340:	d100      	bne.n	800b344 <_strtod_l+0x6dc>
 800b342:	e6f4      	b.n	800b12e <_strtod_l+0x4c6>
 800b344:	2101      	movs	r1, #1
 800b346:	9804      	ldr	r0, [sp, #16]
 800b348:	f001 fb90 	bl	800ca6c <__i2b>
 800b34c:	9006      	str	r0, [sp, #24]
 800b34e:	2800      	cmp	r0, #0
 800b350:	d100      	bne.n	800b354 <_strtod_l+0x6ec>
 800b352:	e6ec      	b.n	800b12e <_strtod_l+0x4c6>
 800b354:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b356:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b358:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b35a:	1ad4      	subs	r4, r2, r3
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	db01      	blt.n	800b364 <_strtod_l+0x6fc>
 800b360:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b362:	195d      	adds	r5, r3, r5
 800b364:	9907      	ldr	r1, [sp, #28]
 800b366:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b368:	1a5b      	subs	r3, r3, r1
 800b36a:	2136      	movs	r1, #54	; 0x36
 800b36c:	189b      	adds	r3, r3, r2
 800b36e:	1a8a      	subs	r2, r1, r2
 800b370:	4985      	ldr	r1, [pc, #532]	; (800b588 <_strtod_l+0x920>)
 800b372:	2001      	movs	r0, #1
 800b374:	468c      	mov	ip, r1
 800b376:	2100      	movs	r1, #0
 800b378:	3b01      	subs	r3, #1
 800b37a:	9114      	str	r1, [sp, #80]	; 0x50
 800b37c:	9012      	str	r0, [sp, #72]	; 0x48
 800b37e:	4563      	cmp	r3, ip
 800b380:	da07      	bge.n	800b392 <_strtod_l+0x72a>
 800b382:	4661      	mov	r1, ip
 800b384:	1ac9      	subs	r1, r1, r3
 800b386:	1a52      	subs	r2, r2, r1
 800b388:	291f      	cmp	r1, #31
 800b38a:	dd00      	ble.n	800b38e <_strtod_l+0x726>
 800b38c:	e0b6      	b.n	800b4fc <_strtod_l+0x894>
 800b38e:	4088      	lsls	r0, r1
 800b390:	9012      	str	r0, [sp, #72]	; 0x48
 800b392:	18ab      	adds	r3, r5, r2
 800b394:	930c      	str	r3, [sp, #48]	; 0x30
 800b396:	18a4      	adds	r4, r4, r2
 800b398:	9b07      	ldr	r3, [sp, #28]
 800b39a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b39c:	191c      	adds	r4, r3, r4
 800b39e:	002b      	movs	r3, r5
 800b3a0:	4295      	cmp	r5, r2
 800b3a2:	dd00      	ble.n	800b3a6 <_strtod_l+0x73e>
 800b3a4:	0013      	movs	r3, r2
 800b3a6:	42a3      	cmp	r3, r4
 800b3a8:	dd00      	ble.n	800b3ac <_strtod_l+0x744>
 800b3aa:	0023      	movs	r3, r4
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	dd04      	ble.n	800b3ba <_strtod_l+0x752>
 800b3b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3b2:	1ae4      	subs	r4, r4, r3
 800b3b4:	1ad2      	subs	r2, r2, r3
 800b3b6:	920c      	str	r2, [sp, #48]	; 0x30
 800b3b8:	1aed      	subs	r5, r5, r3
 800b3ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	dd17      	ble.n	800b3f0 <_strtod_l+0x788>
 800b3c0:	001a      	movs	r2, r3
 800b3c2:	9906      	ldr	r1, [sp, #24]
 800b3c4:	9804      	ldr	r0, [sp, #16]
 800b3c6:	f001 fc19 	bl	800cbfc <__pow5mult>
 800b3ca:	9006      	str	r0, [sp, #24]
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d100      	bne.n	800b3d2 <_strtod_l+0x76a>
 800b3d0:	e6ad      	b.n	800b12e <_strtod_l+0x4c6>
 800b3d2:	0001      	movs	r1, r0
 800b3d4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b3d6:	9804      	ldr	r0, [sp, #16]
 800b3d8:	f001 fb60 	bl	800ca9c <__multiply>
 800b3dc:	900e      	str	r0, [sp, #56]	; 0x38
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d100      	bne.n	800b3e4 <_strtod_l+0x77c>
 800b3e2:	e6a4      	b.n	800b12e <_strtod_l+0x4c6>
 800b3e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b3e6:	9804      	ldr	r0, [sp, #16]
 800b3e8:	f001 fa5e 	bl	800c8a8 <_Bfree>
 800b3ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3ee:	931c      	str	r3, [sp, #112]	; 0x70
 800b3f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	dd00      	ble.n	800b3f8 <_strtod_l+0x790>
 800b3f6:	e087      	b.n	800b508 <_strtod_l+0x8a0>
 800b3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	dd08      	ble.n	800b410 <_strtod_l+0x7a8>
 800b3fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b400:	9908      	ldr	r1, [sp, #32]
 800b402:	9804      	ldr	r0, [sp, #16]
 800b404:	f001 fbfa 	bl	800cbfc <__pow5mult>
 800b408:	9008      	str	r0, [sp, #32]
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d100      	bne.n	800b410 <_strtod_l+0x7a8>
 800b40e:	e68e      	b.n	800b12e <_strtod_l+0x4c6>
 800b410:	2c00      	cmp	r4, #0
 800b412:	dd08      	ble.n	800b426 <_strtod_l+0x7be>
 800b414:	0022      	movs	r2, r4
 800b416:	9908      	ldr	r1, [sp, #32]
 800b418:	9804      	ldr	r0, [sp, #16]
 800b41a:	f001 fc31 	bl	800cc80 <__lshift>
 800b41e:	9008      	str	r0, [sp, #32]
 800b420:	2800      	cmp	r0, #0
 800b422:	d100      	bne.n	800b426 <_strtod_l+0x7be>
 800b424:	e683      	b.n	800b12e <_strtod_l+0x4c6>
 800b426:	2d00      	cmp	r5, #0
 800b428:	dd08      	ble.n	800b43c <_strtod_l+0x7d4>
 800b42a:	002a      	movs	r2, r5
 800b42c:	9906      	ldr	r1, [sp, #24]
 800b42e:	9804      	ldr	r0, [sp, #16]
 800b430:	f001 fc26 	bl	800cc80 <__lshift>
 800b434:	9006      	str	r0, [sp, #24]
 800b436:	2800      	cmp	r0, #0
 800b438:	d100      	bne.n	800b43c <_strtod_l+0x7d4>
 800b43a:	e678      	b.n	800b12e <_strtod_l+0x4c6>
 800b43c:	9a08      	ldr	r2, [sp, #32]
 800b43e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b440:	9804      	ldr	r0, [sp, #16]
 800b442:	f001 fca7 	bl	800cd94 <__mdiff>
 800b446:	9005      	str	r0, [sp, #20]
 800b448:	2800      	cmp	r0, #0
 800b44a:	d100      	bne.n	800b44e <_strtod_l+0x7e6>
 800b44c:	e66f      	b.n	800b12e <_strtod_l+0x4c6>
 800b44e:	2200      	movs	r2, #0
 800b450:	68c3      	ldr	r3, [r0, #12]
 800b452:	9906      	ldr	r1, [sp, #24]
 800b454:	60c2      	str	r2, [r0, #12]
 800b456:	930c      	str	r3, [sp, #48]	; 0x30
 800b458:	f001 fc80 	bl	800cd5c <__mcmp>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	da5d      	bge.n	800b51c <_strtod_l+0x8b4>
 800b460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b462:	4333      	orrs	r3, r6
 800b464:	d000      	beq.n	800b468 <_strtod_l+0x800>
 800b466:	e088      	b.n	800b57a <_strtod_l+0x912>
 800b468:	033b      	lsls	r3, r7, #12
 800b46a:	d000      	beq.n	800b46e <_strtod_l+0x806>
 800b46c:	e085      	b.n	800b57a <_strtod_l+0x912>
 800b46e:	22d6      	movs	r2, #214	; 0xd6
 800b470:	4b46      	ldr	r3, [pc, #280]	; (800b58c <_strtod_l+0x924>)
 800b472:	04d2      	lsls	r2, r2, #19
 800b474:	403b      	ands	r3, r7
 800b476:	4293      	cmp	r3, r2
 800b478:	d97f      	bls.n	800b57a <_strtod_l+0x912>
 800b47a:	9b05      	ldr	r3, [sp, #20]
 800b47c:	695b      	ldr	r3, [r3, #20]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d103      	bne.n	800b48a <_strtod_l+0x822>
 800b482:	9b05      	ldr	r3, [sp, #20]
 800b484:	691b      	ldr	r3, [r3, #16]
 800b486:	2b01      	cmp	r3, #1
 800b488:	dd77      	ble.n	800b57a <_strtod_l+0x912>
 800b48a:	9905      	ldr	r1, [sp, #20]
 800b48c:	2201      	movs	r2, #1
 800b48e:	9804      	ldr	r0, [sp, #16]
 800b490:	f001 fbf6 	bl	800cc80 <__lshift>
 800b494:	9906      	ldr	r1, [sp, #24]
 800b496:	9005      	str	r0, [sp, #20]
 800b498:	f001 fc60 	bl	800cd5c <__mcmp>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	dd6c      	ble.n	800b57a <_strtod_l+0x912>
 800b4a0:	9907      	ldr	r1, [sp, #28]
 800b4a2:	003b      	movs	r3, r7
 800b4a4:	4a39      	ldr	r2, [pc, #228]	; (800b58c <_strtod_l+0x924>)
 800b4a6:	2900      	cmp	r1, #0
 800b4a8:	d100      	bne.n	800b4ac <_strtod_l+0x844>
 800b4aa:	e094      	b.n	800b5d6 <_strtod_l+0x96e>
 800b4ac:	0011      	movs	r1, r2
 800b4ae:	20d6      	movs	r0, #214	; 0xd6
 800b4b0:	4039      	ands	r1, r7
 800b4b2:	04c0      	lsls	r0, r0, #19
 800b4b4:	4281      	cmp	r1, r0
 800b4b6:	dd00      	ble.n	800b4ba <_strtod_l+0x852>
 800b4b8:	e08d      	b.n	800b5d6 <_strtod_l+0x96e>
 800b4ba:	23dc      	movs	r3, #220	; 0xdc
 800b4bc:	049b      	lsls	r3, r3, #18
 800b4be:	4299      	cmp	r1, r3
 800b4c0:	dc00      	bgt.n	800b4c4 <_strtod_l+0x85c>
 800b4c2:	e6a7      	b.n	800b214 <_strtod_l+0x5ac>
 800b4c4:	0030      	movs	r0, r6
 800b4c6:	0039      	movs	r1, r7
 800b4c8:	4b31      	ldr	r3, [pc, #196]	; (800b590 <_strtod_l+0x928>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f7f6 f8ce 	bl	800166c <__aeabi_dmul>
 800b4d0:	4b2e      	ldr	r3, [pc, #184]	; (800b58c <_strtod_l+0x924>)
 800b4d2:	0006      	movs	r6, r0
 800b4d4:	000f      	movs	r7, r1
 800b4d6:	420b      	tst	r3, r1
 800b4d8:	d000      	beq.n	800b4dc <_strtod_l+0x874>
 800b4da:	e631      	b.n	800b140 <_strtod_l+0x4d8>
 800b4dc:	2322      	movs	r3, #34	; 0x22
 800b4de:	9a04      	ldr	r2, [sp, #16]
 800b4e0:	6013      	str	r3, [r2, #0]
 800b4e2:	e62d      	b.n	800b140 <_strtod_l+0x4d8>
 800b4e4:	234b      	movs	r3, #75	; 0x4b
 800b4e6:	1a9a      	subs	r2, r3, r2
 800b4e8:	3b4c      	subs	r3, #76	; 0x4c
 800b4ea:	4093      	lsls	r3, r2
 800b4ec:	4019      	ands	r1, r3
 800b4ee:	000f      	movs	r7, r1
 800b4f0:	e6e3      	b.n	800b2ba <_strtod_l+0x652>
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	4252      	negs	r2, r2
 800b4f6:	409a      	lsls	r2, r3
 800b4f8:	4016      	ands	r6, r2
 800b4fa:	e6de      	b.n	800b2ba <_strtod_l+0x652>
 800b4fc:	4925      	ldr	r1, [pc, #148]	; (800b594 <_strtod_l+0x92c>)
 800b4fe:	1acb      	subs	r3, r1, r3
 800b500:	0001      	movs	r1, r0
 800b502:	4099      	lsls	r1, r3
 800b504:	9114      	str	r1, [sp, #80]	; 0x50
 800b506:	e743      	b.n	800b390 <_strtod_l+0x728>
 800b508:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b50a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b50c:	9804      	ldr	r0, [sp, #16]
 800b50e:	f001 fbb7 	bl	800cc80 <__lshift>
 800b512:	901c      	str	r0, [sp, #112]	; 0x70
 800b514:	2800      	cmp	r0, #0
 800b516:	d000      	beq.n	800b51a <_strtod_l+0x8b2>
 800b518:	e76e      	b.n	800b3f8 <_strtod_l+0x790>
 800b51a:	e608      	b.n	800b12e <_strtod_l+0x4c6>
 800b51c:	970e      	str	r7, [sp, #56]	; 0x38
 800b51e:	2800      	cmp	r0, #0
 800b520:	d177      	bne.n	800b612 <_strtod_l+0x9aa>
 800b522:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b524:	033b      	lsls	r3, r7, #12
 800b526:	0b1b      	lsrs	r3, r3, #12
 800b528:	2a00      	cmp	r2, #0
 800b52a:	d039      	beq.n	800b5a0 <_strtod_l+0x938>
 800b52c:	4a1a      	ldr	r2, [pc, #104]	; (800b598 <_strtod_l+0x930>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d139      	bne.n	800b5a6 <_strtod_l+0x93e>
 800b532:	2101      	movs	r1, #1
 800b534:	9b07      	ldr	r3, [sp, #28]
 800b536:	4249      	negs	r1, r1
 800b538:	0032      	movs	r2, r6
 800b53a:	0008      	movs	r0, r1
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00b      	beq.n	800b558 <_strtod_l+0x8f0>
 800b540:	24d4      	movs	r4, #212	; 0xd4
 800b542:	4b12      	ldr	r3, [pc, #72]	; (800b58c <_strtod_l+0x924>)
 800b544:	0008      	movs	r0, r1
 800b546:	403b      	ands	r3, r7
 800b548:	04e4      	lsls	r4, r4, #19
 800b54a:	42a3      	cmp	r3, r4
 800b54c:	d804      	bhi.n	800b558 <_strtod_l+0x8f0>
 800b54e:	306c      	adds	r0, #108	; 0x6c
 800b550:	0d1b      	lsrs	r3, r3, #20
 800b552:	1ac3      	subs	r3, r0, r3
 800b554:	4099      	lsls	r1, r3
 800b556:	0008      	movs	r0, r1
 800b558:	4282      	cmp	r2, r0
 800b55a:	d124      	bne.n	800b5a6 <_strtod_l+0x93e>
 800b55c:	4b0f      	ldr	r3, [pc, #60]	; (800b59c <_strtod_l+0x934>)
 800b55e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b560:	4299      	cmp	r1, r3
 800b562:	d102      	bne.n	800b56a <_strtod_l+0x902>
 800b564:	3201      	adds	r2, #1
 800b566:	d100      	bne.n	800b56a <_strtod_l+0x902>
 800b568:	e5e1      	b.n	800b12e <_strtod_l+0x4c6>
 800b56a:	4b08      	ldr	r3, [pc, #32]	; (800b58c <_strtod_l+0x924>)
 800b56c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b56e:	2600      	movs	r6, #0
 800b570:	401a      	ands	r2, r3
 800b572:	0013      	movs	r3, r2
 800b574:	2280      	movs	r2, #128	; 0x80
 800b576:	0352      	lsls	r2, r2, #13
 800b578:	189f      	adds	r7, r3, r2
 800b57a:	9b07      	ldr	r3, [sp, #28]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d1a1      	bne.n	800b4c4 <_strtod_l+0x85c>
 800b580:	e5de      	b.n	800b140 <_strtod_l+0x4d8>
 800b582:	46c0      	nop			; (mov r8, r8)
 800b584:	08014500 	.word	0x08014500
 800b588:	fffffc02 	.word	0xfffffc02
 800b58c:	7ff00000 	.word	0x7ff00000
 800b590:	39500000 	.word	0x39500000
 800b594:	fffffbe2 	.word	0xfffffbe2
 800b598:	000fffff 	.word	0x000fffff
 800b59c:	7fefffff 	.word	0x7fefffff
 800b5a0:	4333      	orrs	r3, r6
 800b5a2:	d100      	bne.n	800b5a6 <_strtod_l+0x93e>
 800b5a4:	e77c      	b.n	800b4a0 <_strtod_l+0x838>
 800b5a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d01d      	beq.n	800b5e8 <_strtod_l+0x980>
 800b5ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5b0:	4213      	tst	r3, r2
 800b5b2:	d0e2      	beq.n	800b57a <_strtod_l+0x912>
 800b5b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5b6:	0030      	movs	r0, r6
 800b5b8:	0039      	movs	r1, r7
 800b5ba:	9a07      	ldr	r2, [sp, #28]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d017      	beq.n	800b5f0 <_strtod_l+0x988>
 800b5c0:	f7ff fb3a 	bl	800ac38 <sulp>
 800b5c4:	0002      	movs	r2, r0
 800b5c6:	000b      	movs	r3, r1
 800b5c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b5ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b5cc:	f7f5 f8f4 	bl	80007b8 <__aeabi_dadd>
 800b5d0:	0006      	movs	r6, r0
 800b5d2:	000f      	movs	r7, r1
 800b5d4:	e7d1      	b.n	800b57a <_strtod_l+0x912>
 800b5d6:	2601      	movs	r6, #1
 800b5d8:	4013      	ands	r3, r2
 800b5da:	4a98      	ldr	r2, [pc, #608]	; (800b83c <_strtod_l+0xbd4>)
 800b5dc:	4276      	negs	r6, r6
 800b5de:	189b      	adds	r3, r3, r2
 800b5e0:	4a97      	ldr	r2, [pc, #604]	; (800b840 <_strtod_l+0xbd8>)
 800b5e2:	431a      	orrs	r2, r3
 800b5e4:	0017      	movs	r7, r2
 800b5e6:	e7c8      	b.n	800b57a <_strtod_l+0x912>
 800b5e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b5ea:	4233      	tst	r3, r6
 800b5ec:	d0c5      	beq.n	800b57a <_strtod_l+0x912>
 800b5ee:	e7e1      	b.n	800b5b4 <_strtod_l+0x94c>
 800b5f0:	f7ff fb22 	bl	800ac38 <sulp>
 800b5f4:	0002      	movs	r2, r0
 800b5f6:	000b      	movs	r3, r1
 800b5f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b5fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b5fc:	f7f6 faf8 	bl	8001bf0 <__aeabi_dsub>
 800b600:	2200      	movs	r2, #0
 800b602:	2300      	movs	r3, #0
 800b604:	0006      	movs	r6, r0
 800b606:	000f      	movs	r7, r1
 800b608:	f7f4 ff1e 	bl	8000448 <__aeabi_dcmpeq>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	d0b4      	beq.n	800b57a <_strtod_l+0x912>
 800b610:	e600      	b.n	800b214 <_strtod_l+0x5ac>
 800b612:	9906      	ldr	r1, [sp, #24]
 800b614:	9805      	ldr	r0, [sp, #20]
 800b616:	f001 fd1d 	bl	800d054 <__ratio>
 800b61a:	2380      	movs	r3, #128	; 0x80
 800b61c:	2200      	movs	r2, #0
 800b61e:	05db      	lsls	r3, r3, #23
 800b620:	0004      	movs	r4, r0
 800b622:	000d      	movs	r5, r1
 800b624:	f7f4 ff20 	bl	8000468 <__aeabi_dcmple>
 800b628:	2800      	cmp	r0, #0
 800b62a:	d06d      	beq.n	800b708 <_strtod_l+0xaa0>
 800b62c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d000      	beq.n	800b634 <_strtod_l+0x9cc>
 800b632:	e07e      	b.n	800b732 <_strtod_l+0xaca>
 800b634:	2e00      	cmp	r6, #0
 800b636:	d158      	bne.n	800b6ea <_strtod_l+0xa82>
 800b638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b63a:	031b      	lsls	r3, r3, #12
 800b63c:	d000      	beq.n	800b640 <_strtod_l+0x9d8>
 800b63e:	e07f      	b.n	800b740 <_strtod_l+0xad8>
 800b640:	2200      	movs	r2, #0
 800b642:	0020      	movs	r0, r4
 800b644:	0029      	movs	r1, r5
 800b646:	4b7f      	ldr	r3, [pc, #508]	; (800b844 <_strtod_l+0xbdc>)
 800b648:	f7f4 ff04 	bl	8000454 <__aeabi_dcmplt>
 800b64c:	2800      	cmp	r0, #0
 800b64e:	d158      	bne.n	800b702 <_strtod_l+0xa9a>
 800b650:	0020      	movs	r0, r4
 800b652:	0029      	movs	r1, r5
 800b654:	2200      	movs	r2, #0
 800b656:	4b7c      	ldr	r3, [pc, #496]	; (800b848 <_strtod_l+0xbe0>)
 800b658:	f7f6 f808 	bl	800166c <__aeabi_dmul>
 800b65c:	0004      	movs	r4, r0
 800b65e:	000d      	movs	r5, r1
 800b660:	2380      	movs	r3, #128	; 0x80
 800b662:	061b      	lsls	r3, r3, #24
 800b664:	940a      	str	r4, [sp, #40]	; 0x28
 800b666:	18eb      	adds	r3, r5, r3
 800b668:	930b      	str	r3, [sp, #44]	; 0x2c
 800b66a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b66c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b66e:	9212      	str	r2, [sp, #72]	; 0x48
 800b670:	9313      	str	r3, [sp, #76]	; 0x4c
 800b672:	4a76      	ldr	r2, [pc, #472]	; (800b84c <_strtod_l+0xbe4>)
 800b674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b676:	4013      	ands	r3, r2
 800b678:	9314      	str	r3, [sp, #80]	; 0x50
 800b67a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b67c:	4b74      	ldr	r3, [pc, #464]	; (800b850 <_strtod_l+0xbe8>)
 800b67e:	429a      	cmp	r2, r3
 800b680:	d000      	beq.n	800b684 <_strtod_l+0xa1c>
 800b682:	e091      	b.n	800b7a8 <_strtod_l+0xb40>
 800b684:	4a73      	ldr	r2, [pc, #460]	; (800b854 <_strtod_l+0xbec>)
 800b686:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b688:	4694      	mov	ip, r2
 800b68a:	4463      	add	r3, ip
 800b68c:	001f      	movs	r7, r3
 800b68e:	0030      	movs	r0, r6
 800b690:	0019      	movs	r1, r3
 800b692:	f001 fc17 	bl	800cec4 <__ulp>
 800b696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b69a:	f7f5 ffe7 	bl	800166c <__aeabi_dmul>
 800b69e:	0032      	movs	r2, r6
 800b6a0:	003b      	movs	r3, r7
 800b6a2:	f7f5 f889 	bl	80007b8 <__aeabi_dadd>
 800b6a6:	4a69      	ldr	r2, [pc, #420]	; (800b84c <_strtod_l+0xbe4>)
 800b6a8:	4b6b      	ldr	r3, [pc, #428]	; (800b858 <_strtod_l+0xbf0>)
 800b6aa:	0006      	movs	r6, r0
 800b6ac:	400a      	ands	r2, r1
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d949      	bls.n	800b746 <_strtod_l+0xade>
 800b6b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b6b4:	4b69      	ldr	r3, [pc, #420]	; (800b85c <_strtod_l+0xbf4>)
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d103      	bne.n	800b6c2 <_strtod_l+0xa5a>
 800b6ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b6bc:	3301      	adds	r3, #1
 800b6be:	d100      	bne.n	800b6c2 <_strtod_l+0xa5a>
 800b6c0:	e535      	b.n	800b12e <_strtod_l+0x4c6>
 800b6c2:	2601      	movs	r6, #1
 800b6c4:	4f65      	ldr	r7, [pc, #404]	; (800b85c <_strtod_l+0xbf4>)
 800b6c6:	4276      	negs	r6, r6
 800b6c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b6ca:	9804      	ldr	r0, [sp, #16]
 800b6cc:	f001 f8ec 	bl	800c8a8 <_Bfree>
 800b6d0:	9908      	ldr	r1, [sp, #32]
 800b6d2:	9804      	ldr	r0, [sp, #16]
 800b6d4:	f001 f8e8 	bl	800c8a8 <_Bfree>
 800b6d8:	9906      	ldr	r1, [sp, #24]
 800b6da:	9804      	ldr	r0, [sp, #16]
 800b6dc:	f001 f8e4 	bl	800c8a8 <_Bfree>
 800b6e0:	9905      	ldr	r1, [sp, #20]
 800b6e2:	9804      	ldr	r0, [sp, #16]
 800b6e4:	f001 f8e0 	bl	800c8a8 <_Bfree>
 800b6e8:	e60b      	b.n	800b302 <_strtod_l+0x69a>
 800b6ea:	2e01      	cmp	r6, #1
 800b6ec:	d103      	bne.n	800b6f6 <_strtod_l+0xa8e>
 800b6ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d100      	bne.n	800b6f6 <_strtod_l+0xa8e>
 800b6f4:	e58e      	b.n	800b214 <_strtod_l+0x5ac>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	4c59      	ldr	r4, [pc, #356]	; (800b860 <_strtod_l+0xbf8>)
 800b6fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b6fc:	940b      	str	r4, [sp, #44]	; 0x2c
 800b6fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b700:	e01c      	b.n	800b73c <_strtod_l+0xad4>
 800b702:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b704:	4d50      	ldr	r5, [pc, #320]	; (800b848 <_strtod_l+0xbe0>)
 800b706:	e7ab      	b.n	800b660 <_strtod_l+0x9f8>
 800b708:	2200      	movs	r2, #0
 800b70a:	0020      	movs	r0, r4
 800b70c:	0029      	movs	r1, r5
 800b70e:	4b4e      	ldr	r3, [pc, #312]	; (800b848 <_strtod_l+0xbe0>)
 800b710:	f7f5 ffac 	bl	800166c <__aeabi_dmul>
 800b714:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b716:	0004      	movs	r4, r0
 800b718:	000b      	movs	r3, r1
 800b71a:	000d      	movs	r5, r1
 800b71c:	2a00      	cmp	r2, #0
 800b71e:	d104      	bne.n	800b72a <_strtod_l+0xac2>
 800b720:	2280      	movs	r2, #128	; 0x80
 800b722:	0612      	lsls	r2, r2, #24
 800b724:	900a      	str	r0, [sp, #40]	; 0x28
 800b726:	188b      	adds	r3, r1, r2
 800b728:	e79e      	b.n	800b668 <_strtod_l+0xa00>
 800b72a:	0002      	movs	r2, r0
 800b72c:	920a      	str	r2, [sp, #40]	; 0x28
 800b72e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b730:	e79b      	b.n	800b66a <_strtod_l+0xa02>
 800b732:	2300      	movs	r3, #0
 800b734:	4c43      	ldr	r4, [pc, #268]	; (800b844 <_strtod_l+0xbdc>)
 800b736:	930a      	str	r3, [sp, #40]	; 0x28
 800b738:	940b      	str	r4, [sp, #44]	; 0x2c
 800b73a:	2400      	movs	r4, #0
 800b73c:	4d41      	ldr	r5, [pc, #260]	; (800b844 <_strtod_l+0xbdc>)
 800b73e:	e794      	b.n	800b66a <_strtod_l+0xa02>
 800b740:	2300      	movs	r3, #0
 800b742:	4c47      	ldr	r4, [pc, #284]	; (800b860 <_strtod_l+0xbf8>)
 800b744:	e7f7      	b.n	800b736 <_strtod_l+0xace>
 800b746:	23d4      	movs	r3, #212	; 0xd4
 800b748:	049b      	lsls	r3, r3, #18
 800b74a:	18cf      	adds	r7, r1, r3
 800b74c:	9b07      	ldr	r3, [sp, #28]
 800b74e:	970e      	str	r7, [sp, #56]	; 0x38
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1b9      	bne.n	800b6c8 <_strtod_l+0xa60>
 800b754:	4b3d      	ldr	r3, [pc, #244]	; (800b84c <_strtod_l+0xbe4>)
 800b756:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b758:	403b      	ands	r3, r7
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d1b4      	bne.n	800b6c8 <_strtod_l+0xa60>
 800b75e:	0020      	movs	r0, r4
 800b760:	0029      	movs	r1, r5
 800b762:	f7f4 ff0b 	bl	800057c <__aeabi_d2lz>
 800b766:	f7f4 ff45 	bl	80005f4 <__aeabi_l2d>
 800b76a:	0002      	movs	r2, r0
 800b76c:	000b      	movs	r3, r1
 800b76e:	0020      	movs	r0, r4
 800b770:	0029      	movs	r1, r5
 800b772:	f7f6 fa3d 	bl	8001bf0 <__aeabi_dsub>
 800b776:	033b      	lsls	r3, r7, #12
 800b778:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b77a:	0b1b      	lsrs	r3, r3, #12
 800b77c:	4333      	orrs	r3, r6
 800b77e:	4313      	orrs	r3, r2
 800b780:	0004      	movs	r4, r0
 800b782:	000d      	movs	r5, r1
 800b784:	4a37      	ldr	r2, [pc, #220]	; (800b864 <_strtod_l+0xbfc>)
 800b786:	2b00      	cmp	r3, #0
 800b788:	d054      	beq.n	800b834 <_strtod_l+0xbcc>
 800b78a:	4b37      	ldr	r3, [pc, #220]	; (800b868 <_strtod_l+0xc00>)
 800b78c:	f7f4 fe62 	bl	8000454 <__aeabi_dcmplt>
 800b790:	2800      	cmp	r0, #0
 800b792:	d000      	beq.n	800b796 <_strtod_l+0xb2e>
 800b794:	e4d4      	b.n	800b140 <_strtod_l+0x4d8>
 800b796:	0020      	movs	r0, r4
 800b798:	0029      	movs	r1, r5
 800b79a:	4a34      	ldr	r2, [pc, #208]	; (800b86c <_strtod_l+0xc04>)
 800b79c:	4b2a      	ldr	r3, [pc, #168]	; (800b848 <_strtod_l+0xbe0>)
 800b79e:	f7f4 fe6d 	bl	800047c <__aeabi_dcmpgt>
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	d090      	beq.n	800b6c8 <_strtod_l+0xa60>
 800b7a6:	e4cb      	b.n	800b140 <_strtod_l+0x4d8>
 800b7a8:	9b07      	ldr	r3, [sp, #28]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d02b      	beq.n	800b806 <_strtod_l+0xb9e>
 800b7ae:	23d4      	movs	r3, #212	; 0xd4
 800b7b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b7b2:	04db      	lsls	r3, r3, #19
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d826      	bhi.n	800b806 <_strtod_l+0xb9e>
 800b7b8:	0020      	movs	r0, r4
 800b7ba:	0029      	movs	r1, r5
 800b7bc:	4a2c      	ldr	r2, [pc, #176]	; (800b870 <_strtod_l+0xc08>)
 800b7be:	4b2d      	ldr	r3, [pc, #180]	; (800b874 <_strtod_l+0xc0c>)
 800b7c0:	f7f4 fe52 	bl	8000468 <__aeabi_dcmple>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d017      	beq.n	800b7f8 <_strtod_l+0xb90>
 800b7c8:	0020      	movs	r0, r4
 800b7ca:	0029      	movs	r1, r5
 800b7cc:	f7f4 feb8 	bl	8000540 <__aeabi_d2uiz>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	d100      	bne.n	800b7d6 <_strtod_l+0xb6e>
 800b7d4:	3001      	adds	r0, #1
 800b7d6:	f7f6 fe11 	bl	80023fc <__aeabi_ui2d>
 800b7da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7dc:	0004      	movs	r4, r0
 800b7de:	000b      	movs	r3, r1
 800b7e0:	000d      	movs	r5, r1
 800b7e2:	2a00      	cmp	r2, #0
 800b7e4:	d122      	bne.n	800b82c <_strtod_l+0xbc4>
 800b7e6:	2280      	movs	r2, #128	; 0x80
 800b7e8:	0612      	lsls	r2, r2, #24
 800b7ea:	188b      	adds	r3, r1, r2
 800b7ec:	9016      	str	r0, [sp, #88]	; 0x58
 800b7ee:	9317      	str	r3, [sp, #92]	; 0x5c
 800b7f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b7f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7f4:	9212      	str	r2, [sp, #72]	; 0x48
 800b7f6:	9313      	str	r3, [sp, #76]	; 0x4c
 800b7f8:	22d6      	movs	r2, #214	; 0xd6
 800b7fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b7fc:	04d2      	lsls	r2, r2, #19
 800b7fe:	189b      	adds	r3, r3, r2
 800b800:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b802:	1a9b      	subs	r3, r3, r2
 800b804:	9313      	str	r3, [sp, #76]	; 0x4c
 800b806:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b808:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b80a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b80c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b80e:	f001 fb59 	bl	800cec4 <__ulp>
 800b812:	0002      	movs	r2, r0
 800b814:	000b      	movs	r3, r1
 800b816:	0030      	movs	r0, r6
 800b818:	0039      	movs	r1, r7
 800b81a:	f7f5 ff27 	bl	800166c <__aeabi_dmul>
 800b81e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b820:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b822:	f7f4 ffc9 	bl	80007b8 <__aeabi_dadd>
 800b826:	0006      	movs	r6, r0
 800b828:	000f      	movs	r7, r1
 800b82a:	e78f      	b.n	800b74c <_strtod_l+0xae4>
 800b82c:	0002      	movs	r2, r0
 800b82e:	9216      	str	r2, [sp, #88]	; 0x58
 800b830:	9317      	str	r3, [sp, #92]	; 0x5c
 800b832:	e7dd      	b.n	800b7f0 <_strtod_l+0xb88>
 800b834:	4b10      	ldr	r3, [pc, #64]	; (800b878 <_strtod_l+0xc10>)
 800b836:	f7f4 fe0d 	bl	8000454 <__aeabi_dcmplt>
 800b83a:	e7b2      	b.n	800b7a2 <_strtod_l+0xb3a>
 800b83c:	fff00000 	.word	0xfff00000
 800b840:	000fffff 	.word	0x000fffff
 800b844:	3ff00000 	.word	0x3ff00000
 800b848:	3fe00000 	.word	0x3fe00000
 800b84c:	7ff00000 	.word	0x7ff00000
 800b850:	7fe00000 	.word	0x7fe00000
 800b854:	fcb00000 	.word	0xfcb00000
 800b858:	7c9fffff 	.word	0x7c9fffff
 800b85c:	7fefffff 	.word	0x7fefffff
 800b860:	bff00000 	.word	0xbff00000
 800b864:	94a03595 	.word	0x94a03595
 800b868:	3fdfffff 	.word	0x3fdfffff
 800b86c:	35afe535 	.word	0x35afe535
 800b870:	ffc00000 	.word	0xffc00000
 800b874:	41dfffff 	.word	0x41dfffff
 800b878:	3fcfffff 	.word	0x3fcfffff

0800b87c <_strtod_r>:
 800b87c:	b510      	push	{r4, lr}
 800b87e:	4b02      	ldr	r3, [pc, #8]	; (800b888 <_strtod_r+0xc>)
 800b880:	f7ff f9f2 	bl	800ac68 <_strtod_l>
 800b884:	bd10      	pop	{r4, pc}
 800b886:	46c0      	nop			; (mov r8, r8)
 800b888:	20000444 	.word	0x20000444

0800b88c <strtod>:
 800b88c:	b510      	push	{r4, lr}
 800b88e:	4c04      	ldr	r4, [pc, #16]	; (800b8a0 <strtod+0x14>)
 800b890:	000a      	movs	r2, r1
 800b892:	0001      	movs	r1, r0
 800b894:	4b03      	ldr	r3, [pc, #12]	; (800b8a4 <strtod+0x18>)
 800b896:	6820      	ldr	r0, [r4, #0]
 800b898:	f7ff f9e6 	bl	800ac68 <_strtod_l>
 800b89c:	bd10      	pop	{r4, pc}
 800b89e:	46c0      	nop			; (mov r8, r8)
 800b8a0:	200006d0 	.word	0x200006d0
 800b8a4:	20000444 	.word	0x20000444

0800b8a8 <_strtol_l.constprop.0>:
 800b8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8aa:	b087      	sub	sp, #28
 800b8ac:	001e      	movs	r6, r3
 800b8ae:	9005      	str	r0, [sp, #20]
 800b8b0:	9101      	str	r1, [sp, #4]
 800b8b2:	9202      	str	r2, [sp, #8]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d048      	beq.n	800b94a <_strtol_l.constprop.0+0xa2>
 800b8b8:	000b      	movs	r3, r1
 800b8ba:	2e24      	cmp	r6, #36	; 0x24
 800b8bc:	d845      	bhi.n	800b94a <_strtol_l.constprop.0+0xa2>
 800b8be:	4a3b      	ldr	r2, [pc, #236]	; (800b9ac <_strtol_l.constprop.0+0x104>)
 800b8c0:	2108      	movs	r1, #8
 800b8c2:	4694      	mov	ip, r2
 800b8c4:	001a      	movs	r2, r3
 800b8c6:	4660      	mov	r0, ip
 800b8c8:	7814      	ldrb	r4, [r2, #0]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	5d00      	ldrb	r0, [r0, r4]
 800b8ce:	001d      	movs	r5, r3
 800b8d0:	0007      	movs	r7, r0
 800b8d2:	400f      	ands	r7, r1
 800b8d4:	4208      	tst	r0, r1
 800b8d6:	d1f5      	bne.n	800b8c4 <_strtol_l.constprop.0+0x1c>
 800b8d8:	2c2d      	cmp	r4, #45	; 0x2d
 800b8da:	d13d      	bne.n	800b958 <_strtol_l.constprop.0+0xb0>
 800b8dc:	2701      	movs	r7, #1
 800b8de:	781c      	ldrb	r4, [r3, #0]
 800b8e0:	1c95      	adds	r5, r2, #2
 800b8e2:	2e00      	cmp	r6, #0
 800b8e4:	d05e      	beq.n	800b9a4 <_strtol_l.constprop.0+0xfc>
 800b8e6:	2e10      	cmp	r6, #16
 800b8e8:	d109      	bne.n	800b8fe <_strtol_l.constprop.0+0x56>
 800b8ea:	2c30      	cmp	r4, #48	; 0x30
 800b8ec:	d107      	bne.n	800b8fe <_strtol_l.constprop.0+0x56>
 800b8ee:	2220      	movs	r2, #32
 800b8f0:	782b      	ldrb	r3, [r5, #0]
 800b8f2:	4393      	bics	r3, r2
 800b8f4:	2b58      	cmp	r3, #88	; 0x58
 800b8f6:	d150      	bne.n	800b99a <_strtol_l.constprop.0+0xf2>
 800b8f8:	2610      	movs	r6, #16
 800b8fa:	786c      	ldrb	r4, [r5, #1]
 800b8fc:	3502      	adds	r5, #2
 800b8fe:	4b2c      	ldr	r3, [pc, #176]	; (800b9b0 <_strtol_l.constprop.0+0x108>)
 800b900:	0031      	movs	r1, r6
 800b902:	18fb      	adds	r3, r7, r3
 800b904:	0018      	movs	r0, r3
 800b906:	9303      	str	r3, [sp, #12]
 800b908:	f7f4 fc9e 	bl	8000248 <__aeabi_uidivmod>
 800b90c:	2200      	movs	r2, #0
 800b90e:	9104      	str	r1, [sp, #16]
 800b910:	2101      	movs	r1, #1
 800b912:	4684      	mov	ip, r0
 800b914:	0010      	movs	r0, r2
 800b916:	4249      	negs	r1, r1
 800b918:	0023      	movs	r3, r4
 800b91a:	3b30      	subs	r3, #48	; 0x30
 800b91c:	2b09      	cmp	r3, #9
 800b91e:	d903      	bls.n	800b928 <_strtol_l.constprop.0+0x80>
 800b920:	3b11      	subs	r3, #17
 800b922:	2b19      	cmp	r3, #25
 800b924:	d81d      	bhi.n	800b962 <_strtol_l.constprop.0+0xba>
 800b926:	330a      	adds	r3, #10
 800b928:	429e      	cmp	r6, r3
 800b92a:	dd1e      	ble.n	800b96a <_strtol_l.constprop.0+0xc2>
 800b92c:	1c54      	adds	r4, r2, #1
 800b92e:	d009      	beq.n	800b944 <_strtol_l.constprop.0+0x9c>
 800b930:	000a      	movs	r2, r1
 800b932:	4584      	cmp	ip, r0
 800b934:	d306      	bcc.n	800b944 <_strtol_l.constprop.0+0x9c>
 800b936:	d102      	bne.n	800b93e <_strtol_l.constprop.0+0x96>
 800b938:	9c04      	ldr	r4, [sp, #16]
 800b93a:	429c      	cmp	r4, r3
 800b93c:	db02      	blt.n	800b944 <_strtol_l.constprop.0+0x9c>
 800b93e:	2201      	movs	r2, #1
 800b940:	4370      	muls	r0, r6
 800b942:	1818      	adds	r0, r3, r0
 800b944:	782c      	ldrb	r4, [r5, #0]
 800b946:	3501      	adds	r5, #1
 800b948:	e7e6      	b.n	800b918 <_strtol_l.constprop.0+0x70>
 800b94a:	f000 fab1 	bl	800beb0 <__errno>
 800b94e:	2316      	movs	r3, #22
 800b950:	6003      	str	r3, [r0, #0]
 800b952:	2000      	movs	r0, #0
 800b954:	b007      	add	sp, #28
 800b956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b958:	2c2b      	cmp	r4, #43	; 0x2b
 800b95a:	d1c2      	bne.n	800b8e2 <_strtol_l.constprop.0+0x3a>
 800b95c:	781c      	ldrb	r4, [r3, #0]
 800b95e:	1c95      	adds	r5, r2, #2
 800b960:	e7bf      	b.n	800b8e2 <_strtol_l.constprop.0+0x3a>
 800b962:	0023      	movs	r3, r4
 800b964:	3b61      	subs	r3, #97	; 0x61
 800b966:	2b19      	cmp	r3, #25
 800b968:	d9dd      	bls.n	800b926 <_strtol_l.constprop.0+0x7e>
 800b96a:	1c53      	adds	r3, r2, #1
 800b96c:	d109      	bne.n	800b982 <_strtol_l.constprop.0+0xda>
 800b96e:	2322      	movs	r3, #34	; 0x22
 800b970:	9a05      	ldr	r2, [sp, #20]
 800b972:	9803      	ldr	r0, [sp, #12]
 800b974:	6013      	str	r3, [r2, #0]
 800b976:	9b02      	ldr	r3, [sp, #8]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d0eb      	beq.n	800b954 <_strtol_l.constprop.0+0xac>
 800b97c:	1e6b      	subs	r3, r5, #1
 800b97e:	9301      	str	r3, [sp, #4]
 800b980:	e007      	b.n	800b992 <_strtol_l.constprop.0+0xea>
 800b982:	2f00      	cmp	r7, #0
 800b984:	d000      	beq.n	800b988 <_strtol_l.constprop.0+0xe0>
 800b986:	4240      	negs	r0, r0
 800b988:	9b02      	ldr	r3, [sp, #8]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d0e2      	beq.n	800b954 <_strtol_l.constprop.0+0xac>
 800b98e:	2a00      	cmp	r2, #0
 800b990:	d1f4      	bne.n	800b97c <_strtol_l.constprop.0+0xd4>
 800b992:	9b02      	ldr	r3, [sp, #8]
 800b994:	9a01      	ldr	r2, [sp, #4]
 800b996:	601a      	str	r2, [r3, #0]
 800b998:	e7dc      	b.n	800b954 <_strtol_l.constprop.0+0xac>
 800b99a:	2430      	movs	r4, #48	; 0x30
 800b99c:	2e00      	cmp	r6, #0
 800b99e:	d1ae      	bne.n	800b8fe <_strtol_l.constprop.0+0x56>
 800b9a0:	3608      	adds	r6, #8
 800b9a2:	e7ac      	b.n	800b8fe <_strtol_l.constprop.0+0x56>
 800b9a4:	2c30      	cmp	r4, #48	; 0x30
 800b9a6:	d0a2      	beq.n	800b8ee <_strtol_l.constprop.0+0x46>
 800b9a8:	260a      	movs	r6, #10
 800b9aa:	e7a8      	b.n	800b8fe <_strtol_l.constprop.0+0x56>
 800b9ac:	08014529 	.word	0x08014529
 800b9b0:	7fffffff 	.word	0x7fffffff

0800b9b4 <_strtol_r>:
 800b9b4:	b510      	push	{r4, lr}
 800b9b6:	f7ff ff77 	bl	800b8a8 <_strtol_l.constprop.0>
 800b9ba:	bd10      	pop	{r4, pc}

0800b9bc <strtol>:
 800b9bc:	b510      	push	{r4, lr}
 800b9be:	4c04      	ldr	r4, [pc, #16]	; (800b9d0 <strtol+0x14>)
 800b9c0:	0013      	movs	r3, r2
 800b9c2:	000a      	movs	r2, r1
 800b9c4:	0001      	movs	r1, r0
 800b9c6:	6820      	ldr	r0, [r4, #0]
 800b9c8:	f7ff ff6e 	bl	800b8a8 <_strtol_l.constprop.0>
 800b9cc:	bd10      	pop	{r4, pc}
 800b9ce:	46c0      	nop			; (mov r8, r8)
 800b9d0:	200006d0 	.word	0x200006d0

0800b9d4 <std>:
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	b510      	push	{r4, lr}
 800b9d8:	0004      	movs	r4, r0
 800b9da:	6003      	str	r3, [r0, #0]
 800b9dc:	6043      	str	r3, [r0, #4]
 800b9de:	6083      	str	r3, [r0, #8]
 800b9e0:	8181      	strh	r1, [r0, #12]
 800b9e2:	6643      	str	r3, [r0, #100]	; 0x64
 800b9e4:	81c2      	strh	r2, [r0, #14]
 800b9e6:	6103      	str	r3, [r0, #16]
 800b9e8:	6143      	str	r3, [r0, #20]
 800b9ea:	6183      	str	r3, [r0, #24]
 800b9ec:	0019      	movs	r1, r3
 800b9ee:	2208      	movs	r2, #8
 800b9f0:	305c      	adds	r0, #92	; 0x5c
 800b9f2:	f000 f97d 	bl	800bcf0 <memset>
 800b9f6:	4b0b      	ldr	r3, [pc, #44]	; (800ba24 <std+0x50>)
 800b9f8:	61e4      	str	r4, [r4, #28]
 800b9fa:	6223      	str	r3, [r4, #32]
 800b9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ba28 <std+0x54>)
 800b9fe:	6263      	str	r3, [r4, #36]	; 0x24
 800ba00:	4b0a      	ldr	r3, [pc, #40]	; (800ba2c <std+0x58>)
 800ba02:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba04:	4b0a      	ldr	r3, [pc, #40]	; (800ba30 <std+0x5c>)
 800ba06:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba08:	4b0a      	ldr	r3, [pc, #40]	; (800ba34 <std+0x60>)
 800ba0a:	429c      	cmp	r4, r3
 800ba0c:	d005      	beq.n	800ba1a <std+0x46>
 800ba0e:	4b0a      	ldr	r3, [pc, #40]	; (800ba38 <std+0x64>)
 800ba10:	429c      	cmp	r4, r3
 800ba12:	d002      	beq.n	800ba1a <std+0x46>
 800ba14:	4b09      	ldr	r3, [pc, #36]	; (800ba3c <std+0x68>)
 800ba16:	429c      	cmp	r4, r3
 800ba18:	d103      	bne.n	800ba22 <std+0x4e>
 800ba1a:	0020      	movs	r0, r4
 800ba1c:	3058      	adds	r0, #88	; 0x58
 800ba1e:	f000 fa71 	bl	800bf04 <__retarget_lock_init_recursive>
 800ba22:	bd10      	pop	{r4, pc}
 800ba24:	0800bc55 	.word	0x0800bc55
 800ba28:	0800bc81 	.word	0x0800bc81
 800ba2c:	0800bcb9 	.word	0x0800bcb9
 800ba30:	0800bce5 	.word	0x0800bce5
 800ba34:	20000c64 	.word	0x20000c64
 800ba38:	20000ccc 	.word	0x20000ccc
 800ba3c:	20000d34 	.word	0x20000d34

0800ba40 <stdio_exit_handler>:
 800ba40:	b510      	push	{r4, lr}
 800ba42:	4a03      	ldr	r2, [pc, #12]	; (800ba50 <stdio_exit_handler+0x10>)
 800ba44:	4903      	ldr	r1, [pc, #12]	; (800ba54 <stdio_exit_handler+0x14>)
 800ba46:	4804      	ldr	r0, [pc, #16]	; (800ba58 <stdio_exit_handler+0x18>)
 800ba48:	f000 f86c 	bl	800bb24 <_fwalk_sglue>
 800ba4c:	bd10      	pop	{r4, pc}
 800ba4e:	46c0      	nop			; (mov r8, r8)
 800ba50:	20000438 	.word	0x20000438
 800ba54:	0800fa05 	.word	0x0800fa05
 800ba58:	200005b0 	.word	0x200005b0

0800ba5c <cleanup_stdio>:
 800ba5c:	6841      	ldr	r1, [r0, #4]
 800ba5e:	4b0b      	ldr	r3, [pc, #44]	; (800ba8c <cleanup_stdio+0x30>)
 800ba60:	b510      	push	{r4, lr}
 800ba62:	0004      	movs	r4, r0
 800ba64:	4299      	cmp	r1, r3
 800ba66:	d001      	beq.n	800ba6c <cleanup_stdio+0x10>
 800ba68:	f003 ffcc 	bl	800fa04 <_fclose_r>
 800ba6c:	68a1      	ldr	r1, [r4, #8]
 800ba6e:	4b08      	ldr	r3, [pc, #32]	; (800ba90 <cleanup_stdio+0x34>)
 800ba70:	4299      	cmp	r1, r3
 800ba72:	d002      	beq.n	800ba7a <cleanup_stdio+0x1e>
 800ba74:	0020      	movs	r0, r4
 800ba76:	f003 ffc5 	bl	800fa04 <_fclose_r>
 800ba7a:	68e1      	ldr	r1, [r4, #12]
 800ba7c:	4b05      	ldr	r3, [pc, #20]	; (800ba94 <cleanup_stdio+0x38>)
 800ba7e:	4299      	cmp	r1, r3
 800ba80:	d002      	beq.n	800ba88 <cleanup_stdio+0x2c>
 800ba82:	0020      	movs	r0, r4
 800ba84:	f003 ffbe 	bl	800fa04 <_fclose_r>
 800ba88:	bd10      	pop	{r4, pc}
 800ba8a:	46c0      	nop			; (mov r8, r8)
 800ba8c:	20000c64 	.word	0x20000c64
 800ba90:	20000ccc 	.word	0x20000ccc
 800ba94:	20000d34 	.word	0x20000d34

0800ba98 <global_stdio_init.part.0>:
 800ba98:	b510      	push	{r4, lr}
 800ba9a:	4b09      	ldr	r3, [pc, #36]	; (800bac0 <global_stdio_init.part.0+0x28>)
 800ba9c:	4a09      	ldr	r2, [pc, #36]	; (800bac4 <global_stdio_init.part.0+0x2c>)
 800ba9e:	2104      	movs	r1, #4
 800baa0:	601a      	str	r2, [r3, #0]
 800baa2:	4809      	ldr	r0, [pc, #36]	; (800bac8 <global_stdio_init.part.0+0x30>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	f7ff ff95 	bl	800b9d4 <std>
 800baaa:	2201      	movs	r2, #1
 800baac:	2109      	movs	r1, #9
 800baae:	4807      	ldr	r0, [pc, #28]	; (800bacc <global_stdio_init.part.0+0x34>)
 800bab0:	f7ff ff90 	bl	800b9d4 <std>
 800bab4:	2202      	movs	r2, #2
 800bab6:	2112      	movs	r1, #18
 800bab8:	4805      	ldr	r0, [pc, #20]	; (800bad0 <global_stdio_init.part.0+0x38>)
 800baba:	f7ff ff8b 	bl	800b9d4 <std>
 800babe:	bd10      	pop	{r4, pc}
 800bac0:	20000d9c 	.word	0x20000d9c
 800bac4:	0800ba41 	.word	0x0800ba41
 800bac8:	20000c64 	.word	0x20000c64
 800bacc:	20000ccc 	.word	0x20000ccc
 800bad0:	20000d34 	.word	0x20000d34

0800bad4 <__sfp_lock_acquire>:
 800bad4:	b510      	push	{r4, lr}
 800bad6:	4802      	ldr	r0, [pc, #8]	; (800bae0 <__sfp_lock_acquire+0xc>)
 800bad8:	f000 fa16 	bl	800bf08 <__retarget_lock_acquire_recursive>
 800badc:	bd10      	pop	{r4, pc}
 800bade:	46c0      	nop			; (mov r8, r8)
 800bae0:	20000da6 	.word	0x20000da6

0800bae4 <__sfp_lock_release>:
 800bae4:	b510      	push	{r4, lr}
 800bae6:	4802      	ldr	r0, [pc, #8]	; (800baf0 <__sfp_lock_release+0xc>)
 800bae8:	f000 fa0f 	bl	800bf0a <__retarget_lock_release_recursive>
 800baec:	bd10      	pop	{r4, pc}
 800baee:	46c0      	nop			; (mov r8, r8)
 800baf0:	20000da6 	.word	0x20000da6

0800baf4 <__sinit>:
 800baf4:	b510      	push	{r4, lr}
 800baf6:	0004      	movs	r4, r0
 800baf8:	f7ff ffec 	bl	800bad4 <__sfp_lock_acquire>
 800bafc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d002      	beq.n	800bb08 <__sinit+0x14>
 800bb02:	f7ff ffef 	bl	800bae4 <__sfp_lock_release>
 800bb06:	bd10      	pop	{r4, pc}
 800bb08:	4b04      	ldr	r3, [pc, #16]	; (800bb1c <__sinit+0x28>)
 800bb0a:	6363      	str	r3, [r4, #52]	; 0x34
 800bb0c:	4b04      	ldr	r3, [pc, #16]	; (800bb20 <__sinit+0x2c>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d1f6      	bne.n	800bb02 <__sinit+0xe>
 800bb14:	f7ff ffc0 	bl	800ba98 <global_stdio_init.part.0>
 800bb18:	e7f3      	b.n	800bb02 <__sinit+0xe>
 800bb1a:	46c0      	nop			; (mov r8, r8)
 800bb1c:	0800ba5d 	.word	0x0800ba5d
 800bb20:	20000d9c 	.word	0x20000d9c

0800bb24 <_fwalk_sglue>:
 800bb24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb26:	0014      	movs	r4, r2
 800bb28:	2600      	movs	r6, #0
 800bb2a:	9000      	str	r0, [sp, #0]
 800bb2c:	9101      	str	r1, [sp, #4]
 800bb2e:	68a5      	ldr	r5, [r4, #8]
 800bb30:	6867      	ldr	r7, [r4, #4]
 800bb32:	3f01      	subs	r7, #1
 800bb34:	d504      	bpl.n	800bb40 <_fwalk_sglue+0x1c>
 800bb36:	6824      	ldr	r4, [r4, #0]
 800bb38:	2c00      	cmp	r4, #0
 800bb3a:	d1f8      	bne.n	800bb2e <_fwalk_sglue+0xa>
 800bb3c:	0030      	movs	r0, r6
 800bb3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb40:	89ab      	ldrh	r3, [r5, #12]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d908      	bls.n	800bb58 <_fwalk_sglue+0x34>
 800bb46:	220e      	movs	r2, #14
 800bb48:	5eab      	ldrsh	r3, [r5, r2]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	d004      	beq.n	800bb58 <_fwalk_sglue+0x34>
 800bb4e:	0029      	movs	r1, r5
 800bb50:	9800      	ldr	r0, [sp, #0]
 800bb52:	9b01      	ldr	r3, [sp, #4]
 800bb54:	4798      	blx	r3
 800bb56:	4306      	orrs	r6, r0
 800bb58:	3568      	adds	r5, #104	; 0x68
 800bb5a:	e7ea      	b.n	800bb32 <_fwalk_sglue+0xe>

0800bb5c <snprintf>:
 800bb5c:	b40c      	push	{r2, r3}
 800bb5e:	b530      	push	{r4, r5, lr}
 800bb60:	4b17      	ldr	r3, [pc, #92]	; (800bbc0 <snprintf+0x64>)
 800bb62:	000c      	movs	r4, r1
 800bb64:	681d      	ldr	r5, [r3, #0]
 800bb66:	b09d      	sub	sp, #116	; 0x74
 800bb68:	2900      	cmp	r1, #0
 800bb6a:	da08      	bge.n	800bb7e <snprintf+0x22>
 800bb6c:	238b      	movs	r3, #139	; 0x8b
 800bb6e:	2001      	movs	r0, #1
 800bb70:	602b      	str	r3, [r5, #0]
 800bb72:	4240      	negs	r0, r0
 800bb74:	b01d      	add	sp, #116	; 0x74
 800bb76:	bc30      	pop	{r4, r5}
 800bb78:	bc08      	pop	{r3}
 800bb7a:	b002      	add	sp, #8
 800bb7c:	4718      	bx	r3
 800bb7e:	2382      	movs	r3, #130	; 0x82
 800bb80:	466a      	mov	r2, sp
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	8293      	strh	r3, [r2, #20]
 800bb86:	2300      	movs	r3, #0
 800bb88:	9002      	str	r0, [sp, #8]
 800bb8a:	9006      	str	r0, [sp, #24]
 800bb8c:	4299      	cmp	r1, r3
 800bb8e:	d000      	beq.n	800bb92 <snprintf+0x36>
 800bb90:	1e4b      	subs	r3, r1, #1
 800bb92:	9304      	str	r3, [sp, #16]
 800bb94:	9307      	str	r3, [sp, #28]
 800bb96:	2301      	movs	r3, #1
 800bb98:	466a      	mov	r2, sp
 800bb9a:	425b      	negs	r3, r3
 800bb9c:	82d3      	strh	r3, [r2, #22]
 800bb9e:	0028      	movs	r0, r5
 800bba0:	ab21      	add	r3, sp, #132	; 0x84
 800bba2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bba4:	a902      	add	r1, sp, #8
 800bba6:	9301      	str	r3, [sp, #4]
 800bba8:	f001 face 	bl	800d148 <_svfprintf_r>
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	da01      	bge.n	800bbb4 <snprintf+0x58>
 800bbb0:	238b      	movs	r3, #139	; 0x8b
 800bbb2:	602b      	str	r3, [r5, #0]
 800bbb4:	2c00      	cmp	r4, #0
 800bbb6:	d0dd      	beq.n	800bb74 <snprintf+0x18>
 800bbb8:	2200      	movs	r2, #0
 800bbba:	9b02      	ldr	r3, [sp, #8]
 800bbbc:	701a      	strb	r2, [r3, #0]
 800bbbe:	e7d9      	b.n	800bb74 <snprintf+0x18>
 800bbc0:	200006d0 	.word	0x200006d0

0800bbc4 <sprintf>:
 800bbc4:	b40e      	push	{r1, r2, r3}
 800bbc6:	b500      	push	{lr}
 800bbc8:	490b      	ldr	r1, [pc, #44]	; (800bbf8 <sprintf+0x34>)
 800bbca:	b09c      	sub	sp, #112	; 0x70
 800bbcc:	ab1d      	add	r3, sp, #116	; 0x74
 800bbce:	9002      	str	r0, [sp, #8]
 800bbd0:	9006      	str	r0, [sp, #24]
 800bbd2:	9107      	str	r1, [sp, #28]
 800bbd4:	9104      	str	r1, [sp, #16]
 800bbd6:	4809      	ldr	r0, [pc, #36]	; (800bbfc <sprintf+0x38>)
 800bbd8:	4909      	ldr	r1, [pc, #36]	; (800bc00 <sprintf+0x3c>)
 800bbda:	cb04      	ldmia	r3!, {r2}
 800bbdc:	9105      	str	r1, [sp, #20]
 800bbde:	6800      	ldr	r0, [r0, #0]
 800bbe0:	a902      	add	r1, sp, #8
 800bbe2:	9301      	str	r3, [sp, #4]
 800bbe4:	f001 fab0 	bl	800d148 <_svfprintf_r>
 800bbe8:	2200      	movs	r2, #0
 800bbea:	9b02      	ldr	r3, [sp, #8]
 800bbec:	701a      	strb	r2, [r3, #0]
 800bbee:	b01c      	add	sp, #112	; 0x70
 800bbf0:	bc08      	pop	{r3}
 800bbf2:	b003      	add	sp, #12
 800bbf4:	4718      	bx	r3
 800bbf6:	46c0      	nop			; (mov r8, r8)
 800bbf8:	7fffffff 	.word	0x7fffffff
 800bbfc:	200006d0 	.word	0x200006d0
 800bc00:	ffff0208 	.word	0xffff0208

0800bc04 <sscanf>:
 800bc04:	b40e      	push	{r1, r2, r3}
 800bc06:	b530      	push	{r4, r5, lr}
 800bc08:	2381      	movs	r3, #129	; 0x81
 800bc0a:	b09c      	sub	sp, #112	; 0x70
 800bc0c:	466a      	mov	r2, sp
 800bc0e:	ac1f      	add	r4, sp, #124	; 0x7c
 800bc10:	009b      	lsls	r3, r3, #2
 800bc12:	cc20      	ldmia	r4!, {r5}
 800bc14:	8293      	strh	r3, [r2, #20]
 800bc16:	9002      	str	r0, [sp, #8]
 800bc18:	9006      	str	r0, [sp, #24]
 800bc1a:	f7f4 fa73 	bl	8000104 <strlen>
 800bc1e:	4b0b      	ldr	r3, [pc, #44]	; (800bc4c <sscanf+0x48>)
 800bc20:	466a      	mov	r2, sp
 800bc22:	930a      	str	r3, [sp, #40]	; 0x28
 800bc24:	2300      	movs	r3, #0
 800bc26:	9003      	str	r0, [sp, #12]
 800bc28:	9007      	str	r0, [sp, #28]
 800bc2a:	4809      	ldr	r0, [pc, #36]	; (800bc50 <sscanf+0x4c>)
 800bc2c:	930e      	str	r3, [sp, #56]	; 0x38
 800bc2e:	9313      	str	r3, [sp, #76]	; 0x4c
 800bc30:	3b01      	subs	r3, #1
 800bc32:	82d3      	strh	r3, [r2, #22]
 800bc34:	a902      	add	r1, sp, #8
 800bc36:	0023      	movs	r3, r4
 800bc38:	002a      	movs	r2, r5
 800bc3a:	6800      	ldr	r0, [r0, #0]
 800bc3c:	9401      	str	r4, [sp, #4]
 800bc3e:	f002 fcc5 	bl	800e5cc <__ssvfscanf_r>
 800bc42:	b01c      	add	sp, #112	; 0x70
 800bc44:	bc30      	pop	{r4, r5}
 800bc46:	bc08      	pop	{r3}
 800bc48:	b003      	add	sp, #12
 800bc4a:	4718      	bx	r3
 800bc4c:	0800bc7d 	.word	0x0800bc7d
 800bc50:	200006d0 	.word	0x200006d0

0800bc54 <__sread>:
 800bc54:	b570      	push	{r4, r5, r6, lr}
 800bc56:	000c      	movs	r4, r1
 800bc58:	250e      	movs	r5, #14
 800bc5a:	5f49      	ldrsh	r1, [r1, r5]
 800bc5c:	f000 f8ee 	bl	800be3c <_read_r>
 800bc60:	2800      	cmp	r0, #0
 800bc62:	db03      	blt.n	800bc6c <__sread+0x18>
 800bc64:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bc66:	181b      	adds	r3, r3, r0
 800bc68:	6523      	str	r3, [r4, #80]	; 0x50
 800bc6a:	bd70      	pop	{r4, r5, r6, pc}
 800bc6c:	89a3      	ldrh	r3, [r4, #12]
 800bc6e:	4a02      	ldr	r2, [pc, #8]	; (800bc78 <__sread+0x24>)
 800bc70:	4013      	ands	r3, r2
 800bc72:	81a3      	strh	r3, [r4, #12]
 800bc74:	e7f9      	b.n	800bc6a <__sread+0x16>
 800bc76:	46c0      	nop			; (mov r8, r8)
 800bc78:	ffffefff 	.word	0xffffefff

0800bc7c <__seofread>:
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	4770      	bx	lr

0800bc80 <__swrite>:
 800bc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc82:	001f      	movs	r7, r3
 800bc84:	898b      	ldrh	r3, [r1, #12]
 800bc86:	0005      	movs	r5, r0
 800bc88:	000c      	movs	r4, r1
 800bc8a:	0016      	movs	r6, r2
 800bc8c:	05db      	lsls	r3, r3, #23
 800bc8e:	d505      	bpl.n	800bc9c <__swrite+0x1c>
 800bc90:	230e      	movs	r3, #14
 800bc92:	5ec9      	ldrsh	r1, [r1, r3]
 800bc94:	2200      	movs	r2, #0
 800bc96:	2302      	movs	r3, #2
 800bc98:	f000 f8bc 	bl	800be14 <_lseek_r>
 800bc9c:	89a3      	ldrh	r3, [r4, #12]
 800bc9e:	4a05      	ldr	r2, [pc, #20]	; (800bcb4 <__swrite+0x34>)
 800bca0:	0028      	movs	r0, r5
 800bca2:	4013      	ands	r3, r2
 800bca4:	81a3      	strh	r3, [r4, #12]
 800bca6:	0032      	movs	r2, r6
 800bca8:	230e      	movs	r3, #14
 800bcaa:	5ee1      	ldrsh	r1, [r4, r3]
 800bcac:	003b      	movs	r3, r7
 800bcae:	f000 f8eb 	bl	800be88 <_write_r>
 800bcb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcb4:	ffffefff 	.word	0xffffefff

0800bcb8 <__sseek>:
 800bcb8:	b570      	push	{r4, r5, r6, lr}
 800bcba:	000c      	movs	r4, r1
 800bcbc:	250e      	movs	r5, #14
 800bcbe:	5f49      	ldrsh	r1, [r1, r5]
 800bcc0:	f000 f8a8 	bl	800be14 <_lseek_r>
 800bcc4:	89a3      	ldrh	r3, [r4, #12]
 800bcc6:	1c42      	adds	r2, r0, #1
 800bcc8:	d103      	bne.n	800bcd2 <__sseek+0x1a>
 800bcca:	4a05      	ldr	r2, [pc, #20]	; (800bce0 <__sseek+0x28>)
 800bccc:	4013      	ands	r3, r2
 800bcce:	81a3      	strh	r3, [r4, #12]
 800bcd0:	bd70      	pop	{r4, r5, r6, pc}
 800bcd2:	2280      	movs	r2, #128	; 0x80
 800bcd4:	0152      	lsls	r2, r2, #5
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	81a3      	strh	r3, [r4, #12]
 800bcda:	6520      	str	r0, [r4, #80]	; 0x50
 800bcdc:	e7f8      	b.n	800bcd0 <__sseek+0x18>
 800bcde:	46c0      	nop			; (mov r8, r8)
 800bce0:	ffffefff 	.word	0xffffefff

0800bce4 <__sclose>:
 800bce4:	b510      	push	{r4, lr}
 800bce6:	230e      	movs	r3, #14
 800bce8:	5ec9      	ldrsh	r1, [r1, r3]
 800bcea:	f000 f881 	bl	800bdf0 <_close_r>
 800bcee:	bd10      	pop	{r4, pc}

0800bcf0 <memset>:
 800bcf0:	0003      	movs	r3, r0
 800bcf2:	1882      	adds	r2, r0, r2
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d100      	bne.n	800bcfa <memset+0xa>
 800bcf8:	4770      	bx	lr
 800bcfa:	7019      	strb	r1, [r3, #0]
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	e7f9      	b.n	800bcf4 <memset+0x4>

0800bd00 <strncmp>:
 800bd00:	b530      	push	{r4, r5, lr}
 800bd02:	0005      	movs	r5, r0
 800bd04:	1e10      	subs	r0, r2, #0
 800bd06:	d00b      	beq.n	800bd20 <strncmp+0x20>
 800bd08:	2400      	movs	r4, #0
 800bd0a:	3a01      	subs	r2, #1
 800bd0c:	5d2b      	ldrb	r3, [r5, r4]
 800bd0e:	5d08      	ldrb	r0, [r1, r4]
 800bd10:	4283      	cmp	r3, r0
 800bd12:	d104      	bne.n	800bd1e <strncmp+0x1e>
 800bd14:	42a2      	cmp	r2, r4
 800bd16:	d002      	beq.n	800bd1e <strncmp+0x1e>
 800bd18:	3401      	adds	r4, #1
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1f6      	bne.n	800bd0c <strncmp+0xc>
 800bd1e:	1a18      	subs	r0, r3, r0
 800bd20:	bd30      	pop	{r4, r5, pc}

0800bd22 <strncpy>:
 800bd22:	0003      	movs	r3, r0
 800bd24:	b530      	push	{r4, r5, lr}
 800bd26:	001d      	movs	r5, r3
 800bd28:	2a00      	cmp	r2, #0
 800bd2a:	d006      	beq.n	800bd3a <strncpy+0x18>
 800bd2c:	780c      	ldrb	r4, [r1, #0]
 800bd2e:	3a01      	subs	r2, #1
 800bd30:	3301      	adds	r3, #1
 800bd32:	702c      	strb	r4, [r5, #0]
 800bd34:	3101      	adds	r1, #1
 800bd36:	2c00      	cmp	r4, #0
 800bd38:	d1f5      	bne.n	800bd26 <strncpy+0x4>
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	189a      	adds	r2, r3, r2
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d100      	bne.n	800bd44 <strncpy+0x22>
 800bd42:	bd30      	pop	{r4, r5, pc}
 800bd44:	7019      	strb	r1, [r3, #0]
 800bd46:	3301      	adds	r3, #1
 800bd48:	e7f9      	b.n	800bd3e <strncpy+0x1c>

0800bd4a <__strtok_r>:
 800bd4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d102      	bne.n	800bd56 <__strtok_r+0xc>
 800bd50:	6810      	ldr	r0, [r2, #0]
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d013      	beq.n	800bd7e <__strtok_r+0x34>
 800bd56:	0004      	movs	r4, r0
 800bd58:	0020      	movs	r0, r4
 800bd5a:	000e      	movs	r6, r1
 800bd5c:	7805      	ldrb	r5, [r0, #0]
 800bd5e:	3401      	adds	r4, #1
 800bd60:	7837      	ldrb	r7, [r6, #0]
 800bd62:	2f00      	cmp	r7, #0
 800bd64:	d104      	bne.n	800bd70 <__strtok_r+0x26>
 800bd66:	2d00      	cmp	r5, #0
 800bd68:	d10f      	bne.n	800bd8a <__strtok_r+0x40>
 800bd6a:	0028      	movs	r0, r5
 800bd6c:	6015      	str	r5, [r2, #0]
 800bd6e:	e006      	b.n	800bd7e <__strtok_r+0x34>
 800bd70:	3601      	adds	r6, #1
 800bd72:	42bd      	cmp	r5, r7
 800bd74:	d1f4      	bne.n	800bd60 <__strtok_r+0x16>
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1ee      	bne.n	800bd58 <__strtok_r+0xe>
 800bd7a:	6014      	str	r4, [r2, #0]
 800bd7c:	7003      	strb	r3, [r0, #0]
 800bd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd80:	002f      	movs	r7, r5
 800bd82:	e00f      	b.n	800bda4 <__strtok_r+0x5a>
 800bd84:	3301      	adds	r3, #1
 800bd86:	2e00      	cmp	r6, #0
 800bd88:	d104      	bne.n	800bd94 <__strtok_r+0x4a>
 800bd8a:	0023      	movs	r3, r4
 800bd8c:	3401      	adds	r4, #1
 800bd8e:	781d      	ldrb	r5, [r3, #0]
 800bd90:	0027      	movs	r7, r4
 800bd92:	000b      	movs	r3, r1
 800bd94:	781e      	ldrb	r6, [r3, #0]
 800bd96:	42b5      	cmp	r5, r6
 800bd98:	d1f4      	bne.n	800bd84 <__strtok_r+0x3a>
 800bd9a:	2d00      	cmp	r5, #0
 800bd9c:	d0f0      	beq.n	800bd80 <__strtok_r+0x36>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	3c01      	subs	r4, #1
 800bda2:	7023      	strb	r3, [r4, #0]
 800bda4:	6017      	str	r7, [r2, #0]
 800bda6:	e7ea      	b.n	800bd7e <__strtok_r+0x34>

0800bda8 <strtok_r>:
 800bda8:	b510      	push	{r4, lr}
 800bdaa:	2301      	movs	r3, #1
 800bdac:	f7ff ffcd 	bl	800bd4a <__strtok_r>
 800bdb0:	bd10      	pop	{r4, pc}

0800bdb2 <strstr>:
 800bdb2:	780a      	ldrb	r2, [r1, #0]
 800bdb4:	b530      	push	{r4, r5, lr}
 800bdb6:	2a00      	cmp	r2, #0
 800bdb8:	d10c      	bne.n	800bdd4 <strstr+0x22>
 800bdba:	bd30      	pop	{r4, r5, pc}
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d108      	bne.n	800bdd2 <strstr+0x20>
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	5ccc      	ldrb	r4, [r1, r3]
 800bdc4:	2c00      	cmp	r4, #0
 800bdc6:	d0f8      	beq.n	800bdba <strstr+0x8>
 800bdc8:	5cc5      	ldrb	r5, [r0, r3]
 800bdca:	42a5      	cmp	r5, r4
 800bdcc:	d101      	bne.n	800bdd2 <strstr+0x20>
 800bdce:	3301      	adds	r3, #1
 800bdd0:	e7f7      	b.n	800bdc2 <strstr+0x10>
 800bdd2:	3001      	adds	r0, #1
 800bdd4:	7803      	ldrb	r3, [r0, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1f0      	bne.n	800bdbc <strstr+0xa>
 800bdda:	0018      	movs	r0, r3
 800bddc:	e7ed      	b.n	800bdba <strstr+0x8>
	...

0800bde0 <__locale_mb_cur_max>:
 800bde0:	2294      	movs	r2, #148	; 0x94
 800bde2:	4b02      	ldr	r3, [pc, #8]	; (800bdec <__locale_mb_cur_max+0xc>)
 800bde4:	0052      	lsls	r2, r2, #1
 800bde6:	5c98      	ldrb	r0, [r3, r2]
 800bde8:	4770      	bx	lr
 800bdea:	46c0      	nop			; (mov r8, r8)
 800bdec:	20000444 	.word	0x20000444

0800bdf0 <_close_r>:
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	b570      	push	{r4, r5, r6, lr}
 800bdf4:	4d06      	ldr	r5, [pc, #24]	; (800be10 <_close_r+0x20>)
 800bdf6:	0004      	movs	r4, r0
 800bdf8:	0008      	movs	r0, r1
 800bdfa:	602b      	str	r3, [r5, #0]
 800bdfc:	f7f7 ff57 	bl	8003cae <_close>
 800be00:	1c43      	adds	r3, r0, #1
 800be02:	d103      	bne.n	800be0c <_close_r+0x1c>
 800be04:	682b      	ldr	r3, [r5, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d000      	beq.n	800be0c <_close_r+0x1c>
 800be0a:	6023      	str	r3, [r4, #0]
 800be0c:	bd70      	pop	{r4, r5, r6, pc}
 800be0e:	46c0      	nop			; (mov r8, r8)
 800be10:	20000da0 	.word	0x20000da0

0800be14 <_lseek_r>:
 800be14:	b570      	push	{r4, r5, r6, lr}
 800be16:	0004      	movs	r4, r0
 800be18:	0008      	movs	r0, r1
 800be1a:	0011      	movs	r1, r2
 800be1c:	001a      	movs	r2, r3
 800be1e:	2300      	movs	r3, #0
 800be20:	4d05      	ldr	r5, [pc, #20]	; (800be38 <_lseek_r+0x24>)
 800be22:	602b      	str	r3, [r5, #0]
 800be24:	f7f7 ff64 	bl	8003cf0 <_lseek>
 800be28:	1c43      	adds	r3, r0, #1
 800be2a:	d103      	bne.n	800be34 <_lseek_r+0x20>
 800be2c:	682b      	ldr	r3, [r5, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d000      	beq.n	800be34 <_lseek_r+0x20>
 800be32:	6023      	str	r3, [r4, #0]
 800be34:	bd70      	pop	{r4, r5, r6, pc}
 800be36:	46c0      	nop			; (mov r8, r8)
 800be38:	20000da0 	.word	0x20000da0

0800be3c <_read_r>:
 800be3c:	b570      	push	{r4, r5, r6, lr}
 800be3e:	0004      	movs	r4, r0
 800be40:	0008      	movs	r0, r1
 800be42:	0011      	movs	r1, r2
 800be44:	001a      	movs	r2, r3
 800be46:	2300      	movs	r3, #0
 800be48:	4d05      	ldr	r5, [pc, #20]	; (800be60 <_read_r+0x24>)
 800be4a:	602b      	str	r3, [r5, #0]
 800be4c:	f7f7 fef6 	bl	8003c3c <_read>
 800be50:	1c43      	adds	r3, r0, #1
 800be52:	d103      	bne.n	800be5c <_read_r+0x20>
 800be54:	682b      	ldr	r3, [r5, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d000      	beq.n	800be5c <_read_r+0x20>
 800be5a:	6023      	str	r3, [r4, #0]
 800be5c:	bd70      	pop	{r4, r5, r6, pc}
 800be5e:	46c0      	nop			; (mov r8, r8)
 800be60:	20000da0 	.word	0x20000da0

0800be64 <_sbrk_r>:
 800be64:	2300      	movs	r3, #0
 800be66:	b570      	push	{r4, r5, r6, lr}
 800be68:	4d06      	ldr	r5, [pc, #24]	; (800be84 <_sbrk_r+0x20>)
 800be6a:	0004      	movs	r4, r0
 800be6c:	0008      	movs	r0, r1
 800be6e:	602b      	str	r3, [r5, #0]
 800be70:	f7f7 ff4a 	bl	8003d08 <_sbrk>
 800be74:	1c43      	adds	r3, r0, #1
 800be76:	d103      	bne.n	800be80 <_sbrk_r+0x1c>
 800be78:	682b      	ldr	r3, [r5, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d000      	beq.n	800be80 <_sbrk_r+0x1c>
 800be7e:	6023      	str	r3, [r4, #0]
 800be80:	bd70      	pop	{r4, r5, r6, pc}
 800be82:	46c0      	nop			; (mov r8, r8)
 800be84:	20000da0 	.word	0x20000da0

0800be88 <_write_r>:
 800be88:	b570      	push	{r4, r5, r6, lr}
 800be8a:	0004      	movs	r4, r0
 800be8c:	0008      	movs	r0, r1
 800be8e:	0011      	movs	r1, r2
 800be90:	001a      	movs	r2, r3
 800be92:	2300      	movs	r3, #0
 800be94:	4d05      	ldr	r5, [pc, #20]	; (800beac <_write_r+0x24>)
 800be96:	602b      	str	r3, [r5, #0]
 800be98:	f7f7 feed 	bl	8003c76 <_write>
 800be9c:	1c43      	adds	r3, r0, #1
 800be9e:	d103      	bne.n	800bea8 <_write_r+0x20>
 800bea0:	682b      	ldr	r3, [r5, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d000      	beq.n	800bea8 <_write_r+0x20>
 800bea6:	6023      	str	r3, [r4, #0]
 800bea8:	bd70      	pop	{r4, r5, r6, pc}
 800beaa:	46c0      	nop			; (mov r8, r8)
 800beac:	20000da0 	.word	0x20000da0

0800beb0 <__errno>:
 800beb0:	4b01      	ldr	r3, [pc, #4]	; (800beb8 <__errno+0x8>)
 800beb2:	6818      	ldr	r0, [r3, #0]
 800beb4:	4770      	bx	lr
 800beb6:	46c0      	nop			; (mov r8, r8)
 800beb8:	200006d0 	.word	0x200006d0

0800bebc <__libc_init_array>:
 800bebc:	b570      	push	{r4, r5, r6, lr}
 800bebe:	2600      	movs	r6, #0
 800bec0:	4c0c      	ldr	r4, [pc, #48]	; (800bef4 <__libc_init_array+0x38>)
 800bec2:	4d0d      	ldr	r5, [pc, #52]	; (800bef8 <__libc_init_array+0x3c>)
 800bec4:	1b64      	subs	r4, r4, r5
 800bec6:	10a4      	asrs	r4, r4, #2
 800bec8:	42a6      	cmp	r6, r4
 800beca:	d109      	bne.n	800bee0 <__libc_init_array+0x24>
 800becc:	2600      	movs	r6, #0
 800bece:	f006 fcc5 	bl	801285c <_init>
 800bed2:	4c0a      	ldr	r4, [pc, #40]	; (800befc <__libc_init_array+0x40>)
 800bed4:	4d0a      	ldr	r5, [pc, #40]	; (800bf00 <__libc_init_array+0x44>)
 800bed6:	1b64      	subs	r4, r4, r5
 800bed8:	10a4      	asrs	r4, r4, #2
 800beda:	42a6      	cmp	r6, r4
 800bedc:	d105      	bne.n	800beea <__libc_init_array+0x2e>
 800bede:	bd70      	pop	{r4, r5, r6, pc}
 800bee0:	00b3      	lsls	r3, r6, #2
 800bee2:	58eb      	ldr	r3, [r5, r3]
 800bee4:	4798      	blx	r3
 800bee6:	3601      	adds	r6, #1
 800bee8:	e7ee      	b.n	800bec8 <__libc_init_array+0xc>
 800beea:	00b3      	lsls	r3, r6, #2
 800beec:	58eb      	ldr	r3, [r5, r3]
 800beee:	4798      	blx	r3
 800bef0:	3601      	adds	r6, #1
 800bef2:	e7f2      	b.n	800beda <__libc_init_array+0x1e>
 800bef4:	08014944 	.word	0x08014944
 800bef8:	08014944 	.word	0x08014944
 800befc:	0801494c 	.word	0x0801494c
 800bf00:	08014944 	.word	0x08014944

0800bf04 <__retarget_lock_init_recursive>:
 800bf04:	4770      	bx	lr

0800bf06 <__retarget_lock_close_recursive>:
 800bf06:	4770      	bx	lr

0800bf08 <__retarget_lock_acquire_recursive>:
 800bf08:	4770      	bx	lr

0800bf0a <__retarget_lock_release_recursive>:
 800bf0a:	4770      	bx	lr

0800bf0c <sysconf>:
 800bf0c:	2380      	movs	r3, #128	; 0x80
 800bf0e:	b510      	push	{r4, lr}
 800bf10:	2808      	cmp	r0, #8
 800bf12:	d004      	beq.n	800bf1e <sysconf+0x12>
 800bf14:	f7ff ffcc 	bl	800beb0 <__errno>
 800bf18:	2316      	movs	r3, #22
 800bf1a:	6003      	str	r3, [r0, #0]
 800bf1c:	3b17      	subs	r3, #23
 800bf1e:	0018      	movs	r0, r3
 800bf20:	bd10      	pop	{r4, pc}

0800bf22 <memcpy>:
 800bf22:	2300      	movs	r3, #0
 800bf24:	b510      	push	{r4, lr}
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d100      	bne.n	800bf2c <memcpy+0xa>
 800bf2a:	bd10      	pop	{r4, pc}
 800bf2c:	5ccc      	ldrb	r4, [r1, r3]
 800bf2e:	54c4      	strb	r4, [r0, r3]
 800bf30:	3301      	adds	r3, #1
 800bf32:	e7f8      	b.n	800bf26 <memcpy+0x4>

0800bf34 <nan>:
 800bf34:	2000      	movs	r0, #0
 800bf36:	4901      	ldr	r1, [pc, #4]	; (800bf3c <nan+0x8>)
 800bf38:	4770      	bx	lr
 800bf3a:	46c0      	nop			; (mov r8, r8)
 800bf3c:	7ff80000 	.word	0x7ff80000

0800bf40 <nanf>:
 800bf40:	4800      	ldr	r0, [pc, #0]	; (800bf44 <nanf+0x4>)
 800bf42:	4770      	bx	lr
 800bf44:	7fc00000 	.word	0x7fc00000

0800bf48 <register_fini>:
 800bf48:	4b03      	ldr	r3, [pc, #12]	; (800bf58 <register_fini+0x10>)
 800bf4a:	b510      	push	{r4, lr}
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d002      	beq.n	800bf56 <register_fini+0xe>
 800bf50:	4802      	ldr	r0, [pc, #8]	; (800bf5c <register_fini+0x14>)
 800bf52:	f000 f805 	bl	800bf60 <atexit>
 800bf56:	bd10      	pop	{r4, pc}
 800bf58:	00000000 	.word	0x00000000
 800bf5c:	0800fcbd 	.word	0x0800fcbd

0800bf60 <atexit>:
 800bf60:	2300      	movs	r3, #0
 800bf62:	b510      	push	{r4, lr}
 800bf64:	0001      	movs	r1, r0
 800bf66:	001a      	movs	r2, r3
 800bf68:	0018      	movs	r0, r3
 800bf6a:	f003 fef9 	bl	800fd60 <__register_exitproc>
 800bf6e:	bd10      	pop	{r4, pc}

0800bf70 <_malloc_trim_r>:
 800bf70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf72:	0004      	movs	r4, r0
 800bf74:	2008      	movs	r0, #8
 800bf76:	000d      	movs	r5, r1
 800bf78:	f7ff ffc8 	bl	800bf0c <sysconf>
 800bf7c:	0006      	movs	r6, r0
 800bf7e:	0020      	movs	r0, r4
 800bf80:	f7fe fe4a 	bl	800ac18 <__malloc_lock>
 800bf84:	2203      	movs	r2, #3
 800bf86:	4f21      	ldr	r7, [pc, #132]	; (800c00c <_malloc_trim_r+0x9c>)
 800bf88:	0031      	movs	r1, r6
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	4393      	bics	r3, r2
 800bf90:	1b58      	subs	r0, r3, r5
 800bf92:	3811      	subs	r0, #17
 800bf94:	1980      	adds	r0, r0, r6
 800bf96:	9301      	str	r3, [sp, #4]
 800bf98:	f7f4 f8d0 	bl	800013c <__udivsi3>
 800bf9c:	1e45      	subs	r5, r0, #1
 800bf9e:	4375      	muls	r5, r6
 800bfa0:	42ae      	cmp	r6, r5
 800bfa2:	dd04      	ble.n	800bfae <_malloc_trim_r+0x3e>
 800bfa4:	0020      	movs	r0, r4
 800bfa6:	f7fe fe3f 	bl	800ac28 <__malloc_unlock>
 800bfaa:	2000      	movs	r0, #0
 800bfac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bfae:	2100      	movs	r1, #0
 800bfb0:	0020      	movs	r0, r4
 800bfb2:	f7ff ff57 	bl	800be64 <_sbrk_r>
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	9a01      	ldr	r2, [sp, #4]
 800bfba:	189b      	adds	r3, r3, r2
 800bfbc:	4298      	cmp	r0, r3
 800bfbe:	d1f1      	bne.n	800bfa4 <_malloc_trim_r+0x34>
 800bfc0:	0020      	movs	r0, r4
 800bfc2:	4269      	negs	r1, r5
 800bfc4:	f7ff ff4e 	bl	800be64 <_sbrk_r>
 800bfc8:	3001      	adds	r0, #1
 800bfca:	d110      	bne.n	800bfee <_malloc_trim_r+0x7e>
 800bfcc:	2100      	movs	r1, #0
 800bfce:	0020      	movs	r0, r4
 800bfd0:	f7ff ff48 	bl	800be64 <_sbrk_r>
 800bfd4:	68ba      	ldr	r2, [r7, #8]
 800bfd6:	1a81      	subs	r1, r0, r2
 800bfd8:	290f      	cmp	r1, #15
 800bfda:	dde3      	ble.n	800bfa4 <_malloc_trim_r+0x34>
 800bfdc:	4d0c      	ldr	r5, [pc, #48]	; (800c010 <_malloc_trim_r+0xa0>)
 800bfde:	4b0d      	ldr	r3, [pc, #52]	; (800c014 <_malloc_trim_r+0xa4>)
 800bfe0:	682d      	ldr	r5, [r5, #0]
 800bfe2:	1b40      	subs	r0, r0, r5
 800bfe4:	6018      	str	r0, [r3, #0]
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	430b      	orrs	r3, r1
 800bfea:	6053      	str	r3, [r2, #4]
 800bfec:	e7da      	b.n	800bfa4 <_malloc_trim_r+0x34>
 800bfee:	2601      	movs	r6, #1
 800bff0:	9b01      	ldr	r3, [sp, #4]
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	1b5b      	subs	r3, r3, r5
 800bff6:	4333      	orrs	r3, r6
 800bff8:	6053      	str	r3, [r2, #4]
 800bffa:	4a06      	ldr	r2, [pc, #24]	; (800c014 <_malloc_trim_r+0xa4>)
 800bffc:	0020      	movs	r0, r4
 800bffe:	6813      	ldr	r3, [r2, #0]
 800c000:	1b5b      	subs	r3, r3, r5
 800c002:	6013      	str	r3, [r2, #0]
 800c004:	f7fe fe10 	bl	800ac28 <__malloc_unlock>
 800c008:	0030      	movs	r0, r6
 800c00a:	e7cf      	b.n	800bfac <_malloc_trim_r+0x3c>
 800c00c:	20000028 	.word	0x20000028
 800c010:	20000430 	.word	0x20000430
 800c014:	20000c30 	.word	0x20000c30

0800c018 <_free_r>:
 800c018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c01a:	1e0d      	subs	r5, r1, #0
 800c01c:	9001      	str	r0, [sp, #4]
 800c01e:	d02d      	beq.n	800c07c <_free_r+0x64>
 800c020:	f7fe fdfa 	bl	800ac18 <__malloc_lock>
 800c024:	2301      	movs	r3, #1
 800c026:	0029      	movs	r1, r5
 800c028:	469c      	mov	ip, r3
 800c02a:	3908      	subs	r1, #8
 800c02c:	684f      	ldr	r7, [r1, #4]
 800c02e:	4662      	mov	r2, ip
 800c030:	003b      	movs	r3, r7
 800c032:	4664      	mov	r4, ip
 800c034:	4393      	bics	r3, r2
 800c036:	18c8      	adds	r0, r1, r3
 800c038:	6845      	ldr	r5, [r0, #4]
 800c03a:	3202      	adds	r2, #2
 800c03c:	4395      	bics	r5, r2
 800c03e:	4a4a      	ldr	r2, [pc, #296]	; (800c168 <_free_r+0x150>)
 800c040:	4027      	ands	r7, r4
 800c042:	6896      	ldr	r6, [r2, #8]
 800c044:	4286      	cmp	r6, r0
 800c046:	d11a      	bne.n	800c07e <_free_r+0x66>
 800c048:	195b      	adds	r3, r3, r5
 800c04a:	2f00      	cmp	r7, #0
 800c04c:	d106      	bne.n	800c05c <_free_r+0x44>
 800c04e:	6808      	ldr	r0, [r1, #0]
 800c050:	1a09      	subs	r1, r1, r0
 800c052:	688d      	ldr	r5, [r1, #8]
 800c054:	181b      	adds	r3, r3, r0
 800c056:	68c8      	ldr	r0, [r1, #12]
 800c058:	60e8      	str	r0, [r5, #12]
 800c05a:	6085      	str	r5, [r0, #8]
 800c05c:	2001      	movs	r0, #1
 800c05e:	4318      	orrs	r0, r3
 800c060:	6048      	str	r0, [r1, #4]
 800c062:	6091      	str	r1, [r2, #8]
 800c064:	4a41      	ldr	r2, [pc, #260]	; (800c16c <_free_r+0x154>)
 800c066:	6812      	ldr	r2, [r2, #0]
 800c068:	429a      	cmp	r2, r3
 800c06a:	d804      	bhi.n	800c076 <_free_r+0x5e>
 800c06c:	4b40      	ldr	r3, [pc, #256]	; (800c170 <_free_r+0x158>)
 800c06e:	9801      	ldr	r0, [sp, #4]
 800c070:	6819      	ldr	r1, [r3, #0]
 800c072:	f7ff ff7d 	bl	800bf70 <_malloc_trim_r>
 800c076:	9801      	ldr	r0, [sp, #4]
 800c078:	f7fe fdd6 	bl	800ac28 <__malloc_unlock>
 800c07c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c07e:	2600      	movs	r6, #0
 800c080:	6045      	str	r5, [r0, #4]
 800c082:	42b7      	cmp	r7, r6
 800c084:	d109      	bne.n	800c09a <_free_r+0x82>
 800c086:	680f      	ldr	r7, [r1, #0]
 800c088:	4c3a      	ldr	r4, [pc, #232]	; (800c174 <_free_r+0x15c>)
 800c08a:	1bc9      	subs	r1, r1, r7
 800c08c:	19db      	adds	r3, r3, r7
 800c08e:	688f      	ldr	r7, [r1, #8]
 800c090:	42a7      	cmp	r7, r4
 800c092:	d02c      	beq.n	800c0ee <_free_r+0xd6>
 800c094:	68cc      	ldr	r4, [r1, #12]
 800c096:	60fc      	str	r4, [r7, #12]
 800c098:	60a7      	str	r7, [r4, #8]
 800c09a:	1947      	adds	r7, r0, r5
 800c09c:	687c      	ldr	r4, [r7, #4]
 800c09e:	2701      	movs	r7, #1
 800c0a0:	423c      	tst	r4, r7
 800c0a2:	d10b      	bne.n	800c0bc <_free_r+0xa4>
 800c0a4:	195b      	adds	r3, r3, r5
 800c0a6:	6885      	ldr	r5, [r0, #8]
 800c0a8:	2e00      	cmp	r6, #0
 800c0aa:	d122      	bne.n	800c0f2 <_free_r+0xda>
 800c0ac:	4c31      	ldr	r4, [pc, #196]	; (800c174 <_free_r+0x15c>)
 800c0ae:	42a5      	cmp	r5, r4
 800c0b0:	d11f      	bne.n	800c0f2 <_free_r+0xda>
 800c0b2:	003e      	movs	r6, r7
 800c0b4:	6151      	str	r1, [r2, #20]
 800c0b6:	6111      	str	r1, [r2, #16]
 800c0b8:	60cd      	str	r5, [r1, #12]
 800c0ba:	608d      	str	r5, [r1, #8]
 800c0bc:	2501      	movs	r5, #1
 800c0be:	0028      	movs	r0, r5
 800c0c0:	4318      	orrs	r0, r3
 800c0c2:	6048      	str	r0, [r1, #4]
 800c0c4:	50cb      	str	r3, [r1, r3]
 800c0c6:	2e00      	cmp	r6, #0
 800c0c8:	d1d5      	bne.n	800c076 <_free_r+0x5e>
 800c0ca:	2080      	movs	r0, #128	; 0x80
 800c0cc:	0080      	lsls	r0, r0, #2
 800c0ce:	4283      	cmp	r3, r0
 800c0d0:	d213      	bcs.n	800c0fa <_free_r+0xe2>
 800c0d2:	08d8      	lsrs	r0, r3, #3
 800c0d4:	095b      	lsrs	r3, r3, #5
 800c0d6:	409d      	lsls	r5, r3
 800c0d8:	6853      	ldr	r3, [r2, #4]
 800c0da:	431d      	orrs	r5, r3
 800c0dc:	00c3      	lsls	r3, r0, #3
 800c0de:	189b      	adds	r3, r3, r2
 800c0e0:	6055      	str	r5, [r2, #4]
 800c0e2:	689a      	ldr	r2, [r3, #8]
 800c0e4:	60cb      	str	r3, [r1, #12]
 800c0e6:	608a      	str	r2, [r1, #8]
 800c0e8:	6099      	str	r1, [r3, #8]
 800c0ea:	60d1      	str	r1, [r2, #12]
 800c0ec:	e7c3      	b.n	800c076 <_free_r+0x5e>
 800c0ee:	4666      	mov	r6, ip
 800c0f0:	e7d3      	b.n	800c09a <_free_r+0x82>
 800c0f2:	68c0      	ldr	r0, [r0, #12]
 800c0f4:	60e8      	str	r0, [r5, #12]
 800c0f6:	6085      	str	r5, [r0, #8]
 800c0f8:	e7e0      	b.n	800c0bc <_free_r+0xa4>
 800c0fa:	0a5d      	lsrs	r5, r3, #9
 800c0fc:	2d04      	cmp	r5, #4
 800c0fe:	d812      	bhi.n	800c126 <_free_r+0x10e>
 800c100:	0998      	lsrs	r0, r3, #6
 800c102:	3038      	adds	r0, #56	; 0x38
 800c104:	00c6      	lsls	r6, r0, #3
 800c106:	18b6      	adds	r6, r6, r2
 800c108:	68b5      	ldr	r5, [r6, #8]
 800c10a:	2703      	movs	r7, #3
 800c10c:	42ae      	cmp	r6, r5
 800c10e:	d125      	bne.n	800c15c <_free_r+0x144>
 800c110:	2301      	movs	r3, #1
 800c112:	1080      	asrs	r0, r0, #2
 800c114:	4083      	lsls	r3, r0
 800c116:	6850      	ldr	r0, [r2, #4]
 800c118:	4303      	orrs	r3, r0
 800c11a:	6053      	str	r3, [r2, #4]
 800c11c:	60ce      	str	r6, [r1, #12]
 800c11e:	608d      	str	r5, [r1, #8]
 800c120:	60b1      	str	r1, [r6, #8]
 800c122:	60e9      	str	r1, [r5, #12]
 800c124:	e7a7      	b.n	800c076 <_free_r+0x5e>
 800c126:	2d14      	cmp	r5, #20
 800c128:	d802      	bhi.n	800c130 <_free_r+0x118>
 800c12a:	0028      	movs	r0, r5
 800c12c:	305b      	adds	r0, #91	; 0x5b
 800c12e:	e7e9      	b.n	800c104 <_free_r+0xec>
 800c130:	2d54      	cmp	r5, #84	; 0x54
 800c132:	d802      	bhi.n	800c13a <_free_r+0x122>
 800c134:	0b18      	lsrs	r0, r3, #12
 800c136:	306e      	adds	r0, #110	; 0x6e
 800c138:	e7e4      	b.n	800c104 <_free_r+0xec>
 800c13a:	20aa      	movs	r0, #170	; 0xaa
 800c13c:	0040      	lsls	r0, r0, #1
 800c13e:	4285      	cmp	r5, r0
 800c140:	d802      	bhi.n	800c148 <_free_r+0x130>
 800c142:	0bd8      	lsrs	r0, r3, #15
 800c144:	3077      	adds	r0, #119	; 0x77
 800c146:	e7dd      	b.n	800c104 <_free_r+0xec>
 800c148:	4e0b      	ldr	r6, [pc, #44]	; (800c178 <_free_r+0x160>)
 800c14a:	207e      	movs	r0, #126	; 0x7e
 800c14c:	42b5      	cmp	r5, r6
 800c14e:	d8d9      	bhi.n	800c104 <_free_r+0xec>
 800c150:	0c98      	lsrs	r0, r3, #18
 800c152:	307c      	adds	r0, #124	; 0x7c
 800c154:	e7d6      	b.n	800c104 <_free_r+0xec>
 800c156:	68ad      	ldr	r5, [r5, #8]
 800c158:	42ae      	cmp	r6, r5
 800c15a:	d003      	beq.n	800c164 <_free_r+0x14c>
 800c15c:	686a      	ldr	r2, [r5, #4]
 800c15e:	43ba      	bics	r2, r7
 800c160:	429a      	cmp	r2, r3
 800c162:	d8f8      	bhi.n	800c156 <_free_r+0x13e>
 800c164:	68ee      	ldr	r6, [r5, #12]
 800c166:	e7d9      	b.n	800c11c <_free_r+0x104>
 800c168:	20000028 	.word	0x20000028
 800c16c:	20000434 	.word	0x20000434
 800c170:	20000c60 	.word	0x20000c60
 800c174:	20000030 	.word	0x20000030
 800c178:	00000554 	.word	0x00000554

0800c17c <rshift>:
 800c17c:	0002      	movs	r2, r0
 800c17e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c180:	6904      	ldr	r4, [r0, #16]
 800c182:	114b      	asrs	r3, r1, #5
 800c184:	b085      	sub	sp, #20
 800c186:	3214      	adds	r2, #20
 800c188:	9302      	str	r3, [sp, #8]
 800c18a:	114d      	asrs	r5, r1, #5
 800c18c:	0013      	movs	r3, r2
 800c18e:	42ac      	cmp	r4, r5
 800c190:	dd32      	ble.n	800c1f8 <rshift+0x7c>
 800c192:	261f      	movs	r6, #31
 800c194:	000f      	movs	r7, r1
 800c196:	114b      	asrs	r3, r1, #5
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	00a5      	lsls	r5, r4, #2
 800c19c:	18d3      	adds	r3, r2, r3
 800c19e:	4037      	ands	r7, r6
 800c1a0:	1955      	adds	r5, r2, r5
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	9701      	str	r7, [sp, #4]
 800c1a6:	4231      	tst	r1, r6
 800c1a8:	d10d      	bne.n	800c1c6 <rshift+0x4a>
 800c1aa:	0016      	movs	r6, r2
 800c1ac:	0019      	movs	r1, r3
 800c1ae:	428d      	cmp	r5, r1
 800c1b0:	d836      	bhi.n	800c220 <rshift+0xa4>
 800c1b2:	9900      	ldr	r1, [sp, #0]
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	3903      	subs	r1, #3
 800c1b8:	428d      	cmp	r5, r1
 800c1ba:	d302      	bcc.n	800c1c2 <rshift+0x46>
 800c1bc:	9b02      	ldr	r3, [sp, #8]
 800c1be:	1ae4      	subs	r4, r4, r3
 800c1c0:	00a3      	lsls	r3, r4, #2
 800c1c2:	18d3      	adds	r3, r2, r3
 800c1c4:	e018      	b.n	800c1f8 <rshift+0x7c>
 800c1c6:	2120      	movs	r1, #32
 800c1c8:	9e01      	ldr	r6, [sp, #4]
 800c1ca:	9f01      	ldr	r7, [sp, #4]
 800c1cc:	1b89      	subs	r1, r1, r6
 800c1ce:	9e00      	ldr	r6, [sp, #0]
 800c1d0:	9103      	str	r1, [sp, #12]
 800c1d2:	ce02      	ldmia	r6!, {r1}
 800c1d4:	4694      	mov	ip, r2
 800c1d6:	40f9      	lsrs	r1, r7
 800c1d8:	42b5      	cmp	r5, r6
 800c1da:	d816      	bhi.n	800c20a <rshift+0x8e>
 800c1dc:	9e00      	ldr	r6, [sp, #0]
 800c1de:	2300      	movs	r3, #0
 800c1e0:	3601      	adds	r6, #1
 800c1e2:	42b5      	cmp	r5, r6
 800c1e4:	d303      	bcc.n	800c1ee <rshift+0x72>
 800c1e6:	9b02      	ldr	r3, [sp, #8]
 800c1e8:	1ae3      	subs	r3, r4, r3
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	3b04      	subs	r3, #4
 800c1ee:	18d3      	adds	r3, r2, r3
 800c1f0:	6019      	str	r1, [r3, #0]
 800c1f2:	2900      	cmp	r1, #0
 800c1f4:	d000      	beq.n	800c1f8 <rshift+0x7c>
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	1a99      	subs	r1, r3, r2
 800c1fa:	1089      	asrs	r1, r1, #2
 800c1fc:	6101      	str	r1, [r0, #16]
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d101      	bne.n	800c206 <rshift+0x8a>
 800c202:	2300      	movs	r3, #0
 800c204:	6143      	str	r3, [r0, #20]
 800c206:	b005      	add	sp, #20
 800c208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c20a:	6837      	ldr	r7, [r6, #0]
 800c20c:	9b03      	ldr	r3, [sp, #12]
 800c20e:	409f      	lsls	r7, r3
 800c210:	430f      	orrs	r7, r1
 800c212:	4661      	mov	r1, ip
 800c214:	c180      	stmia	r1!, {r7}
 800c216:	468c      	mov	ip, r1
 800c218:	9b01      	ldr	r3, [sp, #4]
 800c21a:	ce02      	ldmia	r6!, {r1}
 800c21c:	40d9      	lsrs	r1, r3
 800c21e:	e7db      	b.n	800c1d8 <rshift+0x5c>
 800c220:	c980      	ldmia	r1!, {r7}
 800c222:	c680      	stmia	r6!, {r7}
 800c224:	e7c3      	b.n	800c1ae <rshift+0x32>

0800c226 <__hexdig_fun>:
 800c226:	0002      	movs	r2, r0
 800c228:	3a30      	subs	r2, #48	; 0x30
 800c22a:	0003      	movs	r3, r0
 800c22c:	2a09      	cmp	r2, #9
 800c22e:	d802      	bhi.n	800c236 <__hexdig_fun+0x10>
 800c230:	3b20      	subs	r3, #32
 800c232:	b2d8      	uxtb	r0, r3
 800c234:	4770      	bx	lr
 800c236:	0002      	movs	r2, r0
 800c238:	3a61      	subs	r2, #97	; 0x61
 800c23a:	2a05      	cmp	r2, #5
 800c23c:	d801      	bhi.n	800c242 <__hexdig_fun+0x1c>
 800c23e:	3b47      	subs	r3, #71	; 0x47
 800c240:	e7f7      	b.n	800c232 <__hexdig_fun+0xc>
 800c242:	001a      	movs	r2, r3
 800c244:	3a41      	subs	r2, #65	; 0x41
 800c246:	2000      	movs	r0, #0
 800c248:	2a05      	cmp	r2, #5
 800c24a:	d8f3      	bhi.n	800c234 <__hexdig_fun+0xe>
 800c24c:	3b27      	subs	r3, #39	; 0x27
 800c24e:	e7f0      	b.n	800c232 <__hexdig_fun+0xc>

0800c250 <__gethex>:
 800c250:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c252:	b089      	sub	sp, #36	; 0x24
 800c254:	9307      	str	r3, [sp, #28]
 800c256:	2302      	movs	r3, #2
 800c258:	9201      	str	r2, [sp, #4]
 800c25a:	680a      	ldr	r2, [r1, #0]
 800c25c:	425b      	negs	r3, r3
 800c25e:	9003      	str	r0, [sp, #12]
 800c260:	9106      	str	r1, [sp, #24]
 800c262:	1c96      	adds	r6, r2, #2
 800c264:	1a9b      	subs	r3, r3, r2
 800c266:	199a      	adds	r2, r3, r6
 800c268:	9600      	str	r6, [sp, #0]
 800c26a:	9205      	str	r2, [sp, #20]
 800c26c:	9a00      	ldr	r2, [sp, #0]
 800c26e:	3601      	adds	r6, #1
 800c270:	7810      	ldrb	r0, [r2, #0]
 800c272:	2830      	cmp	r0, #48	; 0x30
 800c274:	d0f7      	beq.n	800c266 <__gethex+0x16>
 800c276:	f7ff ffd6 	bl	800c226 <__hexdig_fun>
 800c27a:	2300      	movs	r3, #0
 800c27c:	001d      	movs	r5, r3
 800c27e:	9302      	str	r3, [sp, #8]
 800c280:	4298      	cmp	r0, r3
 800c282:	d11d      	bne.n	800c2c0 <__gethex+0x70>
 800c284:	2201      	movs	r2, #1
 800c286:	49a6      	ldr	r1, [pc, #664]	; (800c520 <__gethex+0x2d0>)
 800c288:	9800      	ldr	r0, [sp, #0]
 800c28a:	f7ff fd39 	bl	800bd00 <strncmp>
 800c28e:	0007      	movs	r7, r0
 800c290:	42a8      	cmp	r0, r5
 800c292:	d169      	bne.n	800c368 <__gethex+0x118>
 800c294:	9b00      	ldr	r3, [sp, #0]
 800c296:	0034      	movs	r4, r6
 800c298:	7858      	ldrb	r0, [r3, #1]
 800c29a:	f7ff ffc4 	bl	800c226 <__hexdig_fun>
 800c29e:	2301      	movs	r3, #1
 800c2a0:	9302      	str	r3, [sp, #8]
 800c2a2:	42a8      	cmp	r0, r5
 800c2a4:	d02f      	beq.n	800c306 <__gethex+0xb6>
 800c2a6:	9600      	str	r6, [sp, #0]
 800c2a8:	9b00      	ldr	r3, [sp, #0]
 800c2aa:	7818      	ldrb	r0, [r3, #0]
 800c2ac:	2830      	cmp	r0, #48	; 0x30
 800c2ae:	d009      	beq.n	800c2c4 <__gethex+0x74>
 800c2b0:	f7ff ffb9 	bl	800c226 <__hexdig_fun>
 800c2b4:	4242      	negs	r2, r0
 800c2b6:	4142      	adcs	r2, r0
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	0035      	movs	r5, r6
 800c2bc:	9202      	str	r2, [sp, #8]
 800c2be:	9305      	str	r3, [sp, #20]
 800c2c0:	9c00      	ldr	r4, [sp, #0]
 800c2c2:	e004      	b.n	800c2ce <__gethex+0x7e>
 800c2c4:	9b00      	ldr	r3, [sp, #0]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	9300      	str	r3, [sp, #0]
 800c2ca:	e7ed      	b.n	800c2a8 <__gethex+0x58>
 800c2cc:	3401      	adds	r4, #1
 800c2ce:	7820      	ldrb	r0, [r4, #0]
 800c2d0:	f7ff ffa9 	bl	800c226 <__hexdig_fun>
 800c2d4:	1e07      	subs	r7, r0, #0
 800c2d6:	d1f9      	bne.n	800c2cc <__gethex+0x7c>
 800c2d8:	2201      	movs	r2, #1
 800c2da:	0020      	movs	r0, r4
 800c2dc:	4990      	ldr	r1, [pc, #576]	; (800c520 <__gethex+0x2d0>)
 800c2de:	f7ff fd0f 	bl	800bd00 <strncmp>
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	d10d      	bne.n	800c302 <__gethex+0xb2>
 800c2e6:	2d00      	cmp	r5, #0
 800c2e8:	d106      	bne.n	800c2f8 <__gethex+0xa8>
 800c2ea:	3401      	adds	r4, #1
 800c2ec:	0025      	movs	r5, r4
 800c2ee:	7820      	ldrb	r0, [r4, #0]
 800c2f0:	f7ff ff99 	bl	800c226 <__hexdig_fun>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	d102      	bne.n	800c2fe <__gethex+0xae>
 800c2f8:	1b2d      	subs	r5, r5, r4
 800c2fa:	00af      	lsls	r7, r5, #2
 800c2fc:	e003      	b.n	800c306 <__gethex+0xb6>
 800c2fe:	3401      	adds	r4, #1
 800c300:	e7f5      	b.n	800c2ee <__gethex+0x9e>
 800c302:	2d00      	cmp	r5, #0
 800c304:	d1f8      	bne.n	800c2f8 <__gethex+0xa8>
 800c306:	2220      	movs	r2, #32
 800c308:	7823      	ldrb	r3, [r4, #0]
 800c30a:	0026      	movs	r6, r4
 800c30c:	4393      	bics	r3, r2
 800c30e:	2b50      	cmp	r3, #80	; 0x50
 800c310:	d11d      	bne.n	800c34e <__gethex+0xfe>
 800c312:	7863      	ldrb	r3, [r4, #1]
 800c314:	2b2b      	cmp	r3, #43	; 0x2b
 800c316:	d02c      	beq.n	800c372 <__gethex+0x122>
 800c318:	2b2d      	cmp	r3, #45	; 0x2d
 800c31a:	d02e      	beq.n	800c37a <__gethex+0x12a>
 800c31c:	2300      	movs	r3, #0
 800c31e:	1c66      	adds	r6, r4, #1
 800c320:	9304      	str	r3, [sp, #16]
 800c322:	7830      	ldrb	r0, [r6, #0]
 800c324:	f7ff ff7f 	bl	800c226 <__hexdig_fun>
 800c328:	1e43      	subs	r3, r0, #1
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	2b18      	cmp	r3, #24
 800c32e:	d82b      	bhi.n	800c388 <__gethex+0x138>
 800c330:	3810      	subs	r0, #16
 800c332:	0005      	movs	r5, r0
 800c334:	7870      	ldrb	r0, [r6, #1]
 800c336:	f7ff ff76 	bl	800c226 <__hexdig_fun>
 800c33a:	1e43      	subs	r3, r0, #1
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	3601      	adds	r6, #1
 800c340:	2b18      	cmp	r3, #24
 800c342:	d91c      	bls.n	800c37e <__gethex+0x12e>
 800c344:	9b04      	ldr	r3, [sp, #16]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d000      	beq.n	800c34c <__gethex+0xfc>
 800c34a:	426d      	negs	r5, r5
 800c34c:	197f      	adds	r7, r7, r5
 800c34e:	9b06      	ldr	r3, [sp, #24]
 800c350:	601e      	str	r6, [r3, #0]
 800c352:	9b02      	ldr	r3, [sp, #8]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d019      	beq.n	800c38c <__gethex+0x13c>
 800c358:	2600      	movs	r6, #0
 800c35a:	9b05      	ldr	r3, [sp, #20]
 800c35c:	42b3      	cmp	r3, r6
 800c35e:	d100      	bne.n	800c362 <__gethex+0x112>
 800c360:	3606      	adds	r6, #6
 800c362:	0030      	movs	r0, r6
 800c364:	b009      	add	sp, #36	; 0x24
 800c366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c368:	2301      	movs	r3, #1
 800c36a:	2700      	movs	r7, #0
 800c36c:	9c00      	ldr	r4, [sp, #0]
 800c36e:	9302      	str	r3, [sp, #8]
 800c370:	e7c9      	b.n	800c306 <__gethex+0xb6>
 800c372:	2300      	movs	r3, #0
 800c374:	9304      	str	r3, [sp, #16]
 800c376:	1ca6      	adds	r6, r4, #2
 800c378:	e7d3      	b.n	800c322 <__gethex+0xd2>
 800c37a:	2301      	movs	r3, #1
 800c37c:	e7fa      	b.n	800c374 <__gethex+0x124>
 800c37e:	230a      	movs	r3, #10
 800c380:	435d      	muls	r5, r3
 800c382:	182d      	adds	r5, r5, r0
 800c384:	3d10      	subs	r5, #16
 800c386:	e7d5      	b.n	800c334 <__gethex+0xe4>
 800c388:	0026      	movs	r6, r4
 800c38a:	e7e0      	b.n	800c34e <__gethex+0xfe>
 800c38c:	9b00      	ldr	r3, [sp, #0]
 800c38e:	9902      	ldr	r1, [sp, #8]
 800c390:	1ae3      	subs	r3, r4, r3
 800c392:	3b01      	subs	r3, #1
 800c394:	2b07      	cmp	r3, #7
 800c396:	dc0a      	bgt.n	800c3ae <__gethex+0x15e>
 800c398:	9803      	ldr	r0, [sp, #12]
 800c39a:	f000 fa5d 	bl	800c858 <_Balloc>
 800c39e:	1e05      	subs	r5, r0, #0
 800c3a0:	d108      	bne.n	800c3b4 <__gethex+0x164>
 800c3a2:	002a      	movs	r2, r5
 800c3a4:	21e4      	movs	r1, #228	; 0xe4
 800c3a6:	4b5f      	ldr	r3, [pc, #380]	; (800c524 <__gethex+0x2d4>)
 800c3a8:	485f      	ldr	r0, [pc, #380]	; (800c528 <__gethex+0x2d8>)
 800c3aa:	f003 fd19 	bl	800fde0 <__assert_func>
 800c3ae:	3101      	adds	r1, #1
 800c3b0:	105b      	asrs	r3, r3, #1
 800c3b2:	e7ef      	b.n	800c394 <__gethex+0x144>
 800c3b4:	0003      	movs	r3, r0
 800c3b6:	3314      	adds	r3, #20
 800c3b8:	9302      	str	r3, [sp, #8]
 800c3ba:	9305      	str	r3, [sp, #20]
 800c3bc:	2300      	movs	r3, #0
 800c3be:	001e      	movs	r6, r3
 800c3c0:	9304      	str	r3, [sp, #16]
 800c3c2:	9b00      	ldr	r3, [sp, #0]
 800c3c4:	42a3      	cmp	r3, r4
 800c3c6:	d33f      	bcc.n	800c448 <__gethex+0x1f8>
 800c3c8:	9c05      	ldr	r4, [sp, #20]
 800c3ca:	9b02      	ldr	r3, [sp, #8]
 800c3cc:	c440      	stmia	r4!, {r6}
 800c3ce:	1ae4      	subs	r4, r4, r3
 800c3d0:	10a4      	asrs	r4, r4, #2
 800c3d2:	0030      	movs	r0, r6
 800c3d4:	612c      	str	r4, [r5, #16]
 800c3d6:	f000 fb01 	bl	800c9dc <__hi0bits>
 800c3da:	9b01      	ldr	r3, [sp, #4]
 800c3dc:	0164      	lsls	r4, r4, #5
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	1a26      	subs	r6, r4, r0
 800c3e2:	9300      	str	r3, [sp, #0]
 800c3e4:	429e      	cmp	r6, r3
 800c3e6:	dd51      	ble.n	800c48c <__gethex+0x23c>
 800c3e8:	1af6      	subs	r6, r6, r3
 800c3ea:	0031      	movs	r1, r6
 800c3ec:	0028      	movs	r0, r5
 800c3ee:	f000 fe7b 	bl	800d0e8 <__any_on>
 800c3f2:	1e04      	subs	r4, r0, #0
 800c3f4:	d016      	beq.n	800c424 <__gethex+0x1d4>
 800c3f6:	2401      	movs	r4, #1
 800c3f8:	231f      	movs	r3, #31
 800c3fa:	0020      	movs	r0, r4
 800c3fc:	1e72      	subs	r2, r6, #1
 800c3fe:	4013      	ands	r3, r2
 800c400:	4098      	lsls	r0, r3
 800c402:	0003      	movs	r3, r0
 800c404:	1151      	asrs	r1, r2, #5
 800c406:	9802      	ldr	r0, [sp, #8]
 800c408:	0089      	lsls	r1, r1, #2
 800c40a:	5809      	ldr	r1, [r1, r0]
 800c40c:	4219      	tst	r1, r3
 800c40e:	d009      	beq.n	800c424 <__gethex+0x1d4>
 800c410:	42a2      	cmp	r2, r4
 800c412:	dd06      	ble.n	800c422 <__gethex+0x1d2>
 800c414:	0028      	movs	r0, r5
 800c416:	1eb1      	subs	r1, r6, #2
 800c418:	f000 fe66 	bl	800d0e8 <__any_on>
 800c41c:	3402      	adds	r4, #2
 800c41e:	2800      	cmp	r0, #0
 800c420:	d100      	bne.n	800c424 <__gethex+0x1d4>
 800c422:	2402      	movs	r4, #2
 800c424:	0031      	movs	r1, r6
 800c426:	0028      	movs	r0, r5
 800c428:	f7ff fea8 	bl	800c17c <rshift>
 800c42c:	19bf      	adds	r7, r7, r6
 800c42e:	9b01      	ldr	r3, [sp, #4]
 800c430:	689b      	ldr	r3, [r3, #8]
 800c432:	42bb      	cmp	r3, r7
 800c434:	da3a      	bge.n	800c4ac <__gethex+0x25c>
 800c436:	0029      	movs	r1, r5
 800c438:	9803      	ldr	r0, [sp, #12]
 800c43a:	f000 fa35 	bl	800c8a8 <_Bfree>
 800c43e:	2300      	movs	r3, #0
 800c440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c442:	26a3      	movs	r6, #163	; 0xa3
 800c444:	6013      	str	r3, [r2, #0]
 800c446:	e78c      	b.n	800c362 <__gethex+0x112>
 800c448:	3c01      	subs	r4, #1
 800c44a:	7823      	ldrb	r3, [r4, #0]
 800c44c:	2b2e      	cmp	r3, #46	; 0x2e
 800c44e:	d012      	beq.n	800c476 <__gethex+0x226>
 800c450:	9b04      	ldr	r3, [sp, #16]
 800c452:	2b20      	cmp	r3, #32
 800c454:	d104      	bne.n	800c460 <__gethex+0x210>
 800c456:	9b05      	ldr	r3, [sp, #20]
 800c458:	c340      	stmia	r3!, {r6}
 800c45a:	2600      	movs	r6, #0
 800c45c:	9305      	str	r3, [sp, #20]
 800c45e:	9604      	str	r6, [sp, #16]
 800c460:	7820      	ldrb	r0, [r4, #0]
 800c462:	f7ff fee0 	bl	800c226 <__hexdig_fun>
 800c466:	230f      	movs	r3, #15
 800c468:	4018      	ands	r0, r3
 800c46a:	9b04      	ldr	r3, [sp, #16]
 800c46c:	4098      	lsls	r0, r3
 800c46e:	3304      	adds	r3, #4
 800c470:	4306      	orrs	r6, r0
 800c472:	9304      	str	r3, [sp, #16]
 800c474:	e7a5      	b.n	800c3c2 <__gethex+0x172>
 800c476:	9b00      	ldr	r3, [sp, #0]
 800c478:	42a3      	cmp	r3, r4
 800c47a:	d8e9      	bhi.n	800c450 <__gethex+0x200>
 800c47c:	2201      	movs	r2, #1
 800c47e:	0020      	movs	r0, r4
 800c480:	4927      	ldr	r1, [pc, #156]	; (800c520 <__gethex+0x2d0>)
 800c482:	f7ff fc3d 	bl	800bd00 <strncmp>
 800c486:	2800      	cmp	r0, #0
 800c488:	d1e2      	bne.n	800c450 <__gethex+0x200>
 800c48a:	e79a      	b.n	800c3c2 <__gethex+0x172>
 800c48c:	9b00      	ldr	r3, [sp, #0]
 800c48e:	2400      	movs	r4, #0
 800c490:	429e      	cmp	r6, r3
 800c492:	dacc      	bge.n	800c42e <__gethex+0x1de>
 800c494:	1b9e      	subs	r6, r3, r6
 800c496:	0029      	movs	r1, r5
 800c498:	0032      	movs	r2, r6
 800c49a:	9803      	ldr	r0, [sp, #12]
 800c49c:	f000 fbf0 	bl	800cc80 <__lshift>
 800c4a0:	0003      	movs	r3, r0
 800c4a2:	3314      	adds	r3, #20
 800c4a4:	0005      	movs	r5, r0
 800c4a6:	1bbf      	subs	r7, r7, r6
 800c4a8:	9302      	str	r3, [sp, #8]
 800c4aa:	e7c0      	b.n	800c42e <__gethex+0x1de>
 800c4ac:	9b01      	ldr	r3, [sp, #4]
 800c4ae:	685e      	ldr	r6, [r3, #4]
 800c4b0:	42be      	cmp	r6, r7
 800c4b2:	dd70      	ble.n	800c596 <__gethex+0x346>
 800c4b4:	9b00      	ldr	r3, [sp, #0]
 800c4b6:	1bf6      	subs	r6, r6, r7
 800c4b8:	42b3      	cmp	r3, r6
 800c4ba:	dc37      	bgt.n	800c52c <__gethex+0x2dc>
 800c4bc:	9b01      	ldr	r3, [sp, #4]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	2b02      	cmp	r3, #2
 800c4c2:	d024      	beq.n	800c50e <__gethex+0x2be>
 800c4c4:	2b03      	cmp	r3, #3
 800c4c6:	d026      	beq.n	800c516 <__gethex+0x2c6>
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d117      	bne.n	800c4fc <__gethex+0x2ac>
 800c4cc:	9b00      	ldr	r3, [sp, #0]
 800c4ce:	42b3      	cmp	r3, r6
 800c4d0:	d114      	bne.n	800c4fc <__gethex+0x2ac>
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d10b      	bne.n	800c4ee <__gethex+0x29e>
 800c4d6:	9b01      	ldr	r3, [sp, #4]
 800c4d8:	9a07      	ldr	r2, [sp, #28]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	2662      	movs	r6, #98	; 0x62
 800c4de:	6013      	str	r3, [r2, #0]
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	9a02      	ldr	r2, [sp, #8]
 800c4e4:	612b      	str	r3, [r5, #16]
 800c4e6:	6013      	str	r3, [r2, #0]
 800c4e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4ea:	601d      	str	r5, [r3, #0]
 800c4ec:	e739      	b.n	800c362 <__gethex+0x112>
 800c4ee:	9900      	ldr	r1, [sp, #0]
 800c4f0:	0028      	movs	r0, r5
 800c4f2:	3901      	subs	r1, #1
 800c4f4:	f000 fdf8 	bl	800d0e8 <__any_on>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	d1ec      	bne.n	800c4d6 <__gethex+0x286>
 800c4fc:	0029      	movs	r1, r5
 800c4fe:	9803      	ldr	r0, [sp, #12]
 800c500:	f000 f9d2 	bl	800c8a8 <_Bfree>
 800c504:	2300      	movs	r3, #0
 800c506:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c508:	2650      	movs	r6, #80	; 0x50
 800c50a:	6013      	str	r3, [r2, #0]
 800c50c:	e729      	b.n	800c362 <__gethex+0x112>
 800c50e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c510:	2b00      	cmp	r3, #0
 800c512:	d1f3      	bne.n	800c4fc <__gethex+0x2ac>
 800c514:	e7df      	b.n	800c4d6 <__gethex+0x286>
 800c516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1dc      	bne.n	800c4d6 <__gethex+0x286>
 800c51c:	e7ee      	b.n	800c4fc <__gethex+0x2ac>
 800c51e:	46c0      	nop			; (mov r8, r8)
 800c520:	080144d0 	.word	0x080144d0
 800c524:	08014631 	.word	0x08014631
 800c528:	08014642 	.word	0x08014642
 800c52c:	1e77      	subs	r7, r6, #1
 800c52e:	2c00      	cmp	r4, #0
 800c530:	d12f      	bne.n	800c592 <__gethex+0x342>
 800c532:	2f00      	cmp	r7, #0
 800c534:	d004      	beq.n	800c540 <__gethex+0x2f0>
 800c536:	0039      	movs	r1, r7
 800c538:	0028      	movs	r0, r5
 800c53a:	f000 fdd5 	bl	800d0e8 <__any_on>
 800c53e:	0004      	movs	r4, r0
 800c540:	231f      	movs	r3, #31
 800c542:	117a      	asrs	r2, r7, #5
 800c544:	401f      	ands	r7, r3
 800c546:	3b1e      	subs	r3, #30
 800c548:	40bb      	lsls	r3, r7
 800c54a:	9902      	ldr	r1, [sp, #8]
 800c54c:	0092      	lsls	r2, r2, #2
 800c54e:	5852      	ldr	r2, [r2, r1]
 800c550:	421a      	tst	r2, r3
 800c552:	d001      	beq.n	800c558 <__gethex+0x308>
 800c554:	2302      	movs	r3, #2
 800c556:	431c      	orrs	r4, r3
 800c558:	9b00      	ldr	r3, [sp, #0]
 800c55a:	0031      	movs	r1, r6
 800c55c:	1b9b      	subs	r3, r3, r6
 800c55e:	2602      	movs	r6, #2
 800c560:	0028      	movs	r0, r5
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	f7ff fe0a 	bl	800c17c <rshift>
 800c568:	9b01      	ldr	r3, [sp, #4]
 800c56a:	685f      	ldr	r7, [r3, #4]
 800c56c:	2c00      	cmp	r4, #0
 800c56e:	d041      	beq.n	800c5f4 <__gethex+0x3a4>
 800c570:	9b01      	ldr	r3, [sp, #4]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	2b02      	cmp	r3, #2
 800c576:	d010      	beq.n	800c59a <__gethex+0x34a>
 800c578:	2b03      	cmp	r3, #3
 800c57a:	d012      	beq.n	800c5a2 <__gethex+0x352>
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d106      	bne.n	800c58e <__gethex+0x33e>
 800c580:	07a2      	lsls	r2, r4, #30
 800c582:	d504      	bpl.n	800c58e <__gethex+0x33e>
 800c584:	9a02      	ldr	r2, [sp, #8]
 800c586:	6812      	ldr	r2, [r2, #0]
 800c588:	4314      	orrs	r4, r2
 800c58a:	421c      	tst	r4, r3
 800c58c:	d10c      	bne.n	800c5a8 <__gethex+0x358>
 800c58e:	2310      	movs	r3, #16
 800c590:	e02f      	b.n	800c5f2 <__gethex+0x3a2>
 800c592:	2401      	movs	r4, #1
 800c594:	e7d4      	b.n	800c540 <__gethex+0x2f0>
 800c596:	2601      	movs	r6, #1
 800c598:	e7e8      	b.n	800c56c <__gethex+0x31c>
 800c59a:	2301      	movs	r3, #1
 800c59c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c59e:	1a9b      	subs	r3, r3, r2
 800c5a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d0f2      	beq.n	800c58e <__gethex+0x33e>
 800c5a8:	692b      	ldr	r3, [r5, #16]
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	9302      	str	r3, [sp, #8]
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	9304      	str	r3, [sp, #16]
 800c5b2:	002b      	movs	r3, r5
 800c5b4:	9a04      	ldr	r2, [sp, #16]
 800c5b6:	3314      	adds	r3, #20
 800c5b8:	1899      	adds	r1, r3, r2
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	1c54      	adds	r4, r2, #1
 800c5be:	d01e      	beq.n	800c5fe <__gethex+0x3ae>
 800c5c0:	3201      	adds	r2, #1
 800c5c2:	601a      	str	r2, [r3, #0]
 800c5c4:	002b      	movs	r3, r5
 800c5c6:	3314      	adds	r3, #20
 800c5c8:	2e02      	cmp	r6, #2
 800c5ca:	d141      	bne.n	800c650 <__gethex+0x400>
 800c5cc:	9a01      	ldr	r2, [sp, #4]
 800c5ce:	9900      	ldr	r1, [sp, #0]
 800c5d0:	6812      	ldr	r2, [r2, #0]
 800c5d2:	3a01      	subs	r2, #1
 800c5d4:	428a      	cmp	r2, r1
 800c5d6:	d10b      	bne.n	800c5f0 <__gethex+0x3a0>
 800c5d8:	221f      	movs	r2, #31
 800c5da:	9800      	ldr	r0, [sp, #0]
 800c5dc:	1149      	asrs	r1, r1, #5
 800c5de:	4002      	ands	r2, r0
 800c5e0:	2001      	movs	r0, #1
 800c5e2:	0004      	movs	r4, r0
 800c5e4:	4094      	lsls	r4, r2
 800c5e6:	0089      	lsls	r1, r1, #2
 800c5e8:	58cb      	ldr	r3, [r1, r3]
 800c5ea:	4223      	tst	r3, r4
 800c5ec:	d000      	beq.n	800c5f0 <__gethex+0x3a0>
 800c5ee:	2601      	movs	r6, #1
 800c5f0:	2320      	movs	r3, #32
 800c5f2:	431e      	orrs	r6, r3
 800c5f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5f6:	601d      	str	r5, [r3, #0]
 800c5f8:	9b07      	ldr	r3, [sp, #28]
 800c5fa:	601f      	str	r7, [r3, #0]
 800c5fc:	e6b1      	b.n	800c362 <__gethex+0x112>
 800c5fe:	c301      	stmia	r3!, {r0}
 800c600:	4299      	cmp	r1, r3
 800c602:	d8da      	bhi.n	800c5ba <__gethex+0x36a>
 800c604:	68ab      	ldr	r3, [r5, #8]
 800c606:	9a02      	ldr	r2, [sp, #8]
 800c608:	429a      	cmp	r2, r3
 800c60a:	db18      	blt.n	800c63e <__gethex+0x3ee>
 800c60c:	6869      	ldr	r1, [r5, #4]
 800c60e:	9803      	ldr	r0, [sp, #12]
 800c610:	3101      	adds	r1, #1
 800c612:	f000 f921 	bl	800c858 <_Balloc>
 800c616:	1e04      	subs	r4, r0, #0
 800c618:	d104      	bne.n	800c624 <__gethex+0x3d4>
 800c61a:	0022      	movs	r2, r4
 800c61c:	2184      	movs	r1, #132	; 0x84
 800c61e:	4b1c      	ldr	r3, [pc, #112]	; (800c690 <__gethex+0x440>)
 800c620:	481c      	ldr	r0, [pc, #112]	; (800c694 <__gethex+0x444>)
 800c622:	e6c2      	b.n	800c3aa <__gethex+0x15a>
 800c624:	0029      	movs	r1, r5
 800c626:	692a      	ldr	r2, [r5, #16]
 800c628:	310c      	adds	r1, #12
 800c62a:	3202      	adds	r2, #2
 800c62c:	0092      	lsls	r2, r2, #2
 800c62e:	300c      	adds	r0, #12
 800c630:	f7ff fc77 	bl	800bf22 <memcpy>
 800c634:	0029      	movs	r1, r5
 800c636:	9803      	ldr	r0, [sp, #12]
 800c638:	f000 f936 	bl	800c8a8 <_Bfree>
 800c63c:	0025      	movs	r5, r4
 800c63e:	692b      	ldr	r3, [r5, #16]
 800c640:	1c5a      	adds	r2, r3, #1
 800c642:	612a      	str	r2, [r5, #16]
 800c644:	2201      	movs	r2, #1
 800c646:	3304      	adds	r3, #4
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	18eb      	adds	r3, r5, r3
 800c64c:	605a      	str	r2, [r3, #4]
 800c64e:	e7b9      	b.n	800c5c4 <__gethex+0x374>
 800c650:	692a      	ldr	r2, [r5, #16]
 800c652:	9902      	ldr	r1, [sp, #8]
 800c654:	428a      	cmp	r2, r1
 800c656:	dd09      	ble.n	800c66c <__gethex+0x41c>
 800c658:	2101      	movs	r1, #1
 800c65a:	0028      	movs	r0, r5
 800c65c:	f7ff fd8e 	bl	800c17c <rshift>
 800c660:	9b01      	ldr	r3, [sp, #4]
 800c662:	3701      	adds	r7, #1
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	42bb      	cmp	r3, r7
 800c668:	dac1      	bge.n	800c5ee <__gethex+0x39e>
 800c66a:	e6e4      	b.n	800c436 <__gethex+0x1e6>
 800c66c:	221f      	movs	r2, #31
 800c66e:	9c00      	ldr	r4, [sp, #0]
 800c670:	9900      	ldr	r1, [sp, #0]
 800c672:	2601      	movs	r6, #1
 800c674:	4014      	ands	r4, r2
 800c676:	4211      	tst	r1, r2
 800c678:	d0ba      	beq.n	800c5f0 <__gethex+0x3a0>
 800c67a:	9a04      	ldr	r2, [sp, #16]
 800c67c:	189b      	adds	r3, r3, r2
 800c67e:	3b04      	subs	r3, #4
 800c680:	6818      	ldr	r0, [r3, #0]
 800c682:	f000 f9ab 	bl	800c9dc <__hi0bits>
 800c686:	2320      	movs	r3, #32
 800c688:	1b1b      	subs	r3, r3, r4
 800c68a:	4298      	cmp	r0, r3
 800c68c:	dbe4      	blt.n	800c658 <__gethex+0x408>
 800c68e:	e7af      	b.n	800c5f0 <__gethex+0x3a0>
 800c690:	08014631 	.word	0x08014631
 800c694:	08014642 	.word	0x08014642

0800c698 <L_shift>:
 800c698:	2308      	movs	r3, #8
 800c69a:	b570      	push	{r4, r5, r6, lr}
 800c69c:	2520      	movs	r5, #32
 800c69e:	1a9a      	subs	r2, r3, r2
 800c6a0:	0092      	lsls	r2, r2, #2
 800c6a2:	1aad      	subs	r5, r5, r2
 800c6a4:	6843      	ldr	r3, [r0, #4]
 800c6a6:	6804      	ldr	r4, [r0, #0]
 800c6a8:	001e      	movs	r6, r3
 800c6aa:	40ae      	lsls	r6, r5
 800c6ac:	40d3      	lsrs	r3, r2
 800c6ae:	4334      	orrs	r4, r6
 800c6b0:	6004      	str	r4, [r0, #0]
 800c6b2:	6043      	str	r3, [r0, #4]
 800c6b4:	3004      	adds	r0, #4
 800c6b6:	4288      	cmp	r0, r1
 800c6b8:	d3f4      	bcc.n	800c6a4 <L_shift+0xc>
 800c6ba:	bd70      	pop	{r4, r5, r6, pc}

0800c6bc <__match>:
 800c6bc:	b530      	push	{r4, r5, lr}
 800c6be:	6803      	ldr	r3, [r0, #0]
 800c6c0:	780c      	ldrb	r4, [r1, #0]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	2c00      	cmp	r4, #0
 800c6c6:	d102      	bne.n	800c6ce <__match+0x12>
 800c6c8:	6003      	str	r3, [r0, #0]
 800c6ca:	2001      	movs	r0, #1
 800c6cc:	bd30      	pop	{r4, r5, pc}
 800c6ce:	781a      	ldrb	r2, [r3, #0]
 800c6d0:	0015      	movs	r5, r2
 800c6d2:	3d41      	subs	r5, #65	; 0x41
 800c6d4:	2d19      	cmp	r5, #25
 800c6d6:	d800      	bhi.n	800c6da <__match+0x1e>
 800c6d8:	3220      	adds	r2, #32
 800c6da:	3101      	adds	r1, #1
 800c6dc:	42a2      	cmp	r2, r4
 800c6de:	d0ef      	beq.n	800c6c0 <__match+0x4>
 800c6e0:	2000      	movs	r0, #0
 800c6e2:	e7f3      	b.n	800c6cc <__match+0x10>

0800c6e4 <__hexnan>:
 800c6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6e6:	680b      	ldr	r3, [r1, #0]
 800c6e8:	b08b      	sub	sp, #44	; 0x2c
 800c6ea:	9201      	str	r2, [sp, #4]
 800c6ec:	9901      	ldr	r1, [sp, #4]
 800c6ee:	115a      	asrs	r2, r3, #5
 800c6f0:	0092      	lsls	r2, r2, #2
 800c6f2:	188a      	adds	r2, r1, r2
 800c6f4:	9202      	str	r2, [sp, #8]
 800c6f6:	0019      	movs	r1, r3
 800c6f8:	221f      	movs	r2, #31
 800c6fa:	4011      	ands	r1, r2
 800c6fc:	9008      	str	r0, [sp, #32]
 800c6fe:	9106      	str	r1, [sp, #24]
 800c700:	4213      	tst	r3, r2
 800c702:	d002      	beq.n	800c70a <__hexnan+0x26>
 800c704:	9b02      	ldr	r3, [sp, #8]
 800c706:	3304      	adds	r3, #4
 800c708:	9302      	str	r3, [sp, #8]
 800c70a:	9b02      	ldr	r3, [sp, #8]
 800c70c:	2500      	movs	r5, #0
 800c70e:	1f1f      	subs	r7, r3, #4
 800c710:	003e      	movs	r6, r7
 800c712:	003c      	movs	r4, r7
 800c714:	9b08      	ldr	r3, [sp, #32]
 800c716:	603d      	str	r5, [r7, #0]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	9507      	str	r5, [sp, #28]
 800c71c:	9305      	str	r3, [sp, #20]
 800c71e:	9503      	str	r5, [sp, #12]
 800c720:	9b05      	ldr	r3, [sp, #20]
 800c722:	3301      	adds	r3, #1
 800c724:	9309      	str	r3, [sp, #36]	; 0x24
 800c726:	9b05      	ldr	r3, [sp, #20]
 800c728:	785b      	ldrb	r3, [r3, #1]
 800c72a:	9304      	str	r3, [sp, #16]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d028      	beq.n	800c782 <__hexnan+0x9e>
 800c730:	9804      	ldr	r0, [sp, #16]
 800c732:	f7ff fd78 	bl	800c226 <__hexdig_fun>
 800c736:	2800      	cmp	r0, #0
 800c738:	d154      	bne.n	800c7e4 <__hexnan+0x100>
 800c73a:	9b04      	ldr	r3, [sp, #16]
 800c73c:	2b20      	cmp	r3, #32
 800c73e:	d819      	bhi.n	800c774 <__hexnan+0x90>
 800c740:	9b03      	ldr	r3, [sp, #12]
 800c742:	9a07      	ldr	r2, [sp, #28]
 800c744:	4293      	cmp	r3, r2
 800c746:	dd12      	ble.n	800c76e <__hexnan+0x8a>
 800c748:	42b4      	cmp	r4, r6
 800c74a:	d206      	bcs.n	800c75a <__hexnan+0x76>
 800c74c:	2d07      	cmp	r5, #7
 800c74e:	dc04      	bgt.n	800c75a <__hexnan+0x76>
 800c750:	002a      	movs	r2, r5
 800c752:	0031      	movs	r1, r6
 800c754:	0020      	movs	r0, r4
 800c756:	f7ff ff9f 	bl	800c698 <L_shift>
 800c75a:	9b01      	ldr	r3, [sp, #4]
 800c75c:	2508      	movs	r5, #8
 800c75e:	429c      	cmp	r4, r3
 800c760:	d905      	bls.n	800c76e <__hexnan+0x8a>
 800c762:	1f26      	subs	r6, r4, #4
 800c764:	2500      	movs	r5, #0
 800c766:	0034      	movs	r4, r6
 800c768:	9b03      	ldr	r3, [sp, #12]
 800c76a:	6035      	str	r5, [r6, #0]
 800c76c:	9307      	str	r3, [sp, #28]
 800c76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c770:	9305      	str	r3, [sp, #20]
 800c772:	e7d5      	b.n	800c720 <__hexnan+0x3c>
 800c774:	9b04      	ldr	r3, [sp, #16]
 800c776:	2b29      	cmp	r3, #41	; 0x29
 800c778:	d159      	bne.n	800c82e <__hexnan+0x14a>
 800c77a:	9b05      	ldr	r3, [sp, #20]
 800c77c:	9a08      	ldr	r2, [sp, #32]
 800c77e:	3302      	adds	r3, #2
 800c780:	6013      	str	r3, [r2, #0]
 800c782:	9b03      	ldr	r3, [sp, #12]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d052      	beq.n	800c82e <__hexnan+0x14a>
 800c788:	42b4      	cmp	r4, r6
 800c78a:	d206      	bcs.n	800c79a <__hexnan+0xb6>
 800c78c:	2d07      	cmp	r5, #7
 800c78e:	dc04      	bgt.n	800c79a <__hexnan+0xb6>
 800c790:	002a      	movs	r2, r5
 800c792:	0031      	movs	r1, r6
 800c794:	0020      	movs	r0, r4
 800c796:	f7ff ff7f 	bl	800c698 <L_shift>
 800c79a:	9b01      	ldr	r3, [sp, #4]
 800c79c:	429c      	cmp	r4, r3
 800c79e:	d935      	bls.n	800c80c <__hexnan+0x128>
 800c7a0:	001a      	movs	r2, r3
 800c7a2:	0023      	movs	r3, r4
 800c7a4:	cb02      	ldmia	r3!, {r1}
 800c7a6:	c202      	stmia	r2!, {r1}
 800c7a8:	429f      	cmp	r7, r3
 800c7aa:	d2fb      	bcs.n	800c7a4 <__hexnan+0xc0>
 800c7ac:	9b02      	ldr	r3, [sp, #8]
 800c7ae:	1c62      	adds	r2, r4, #1
 800c7b0:	1ed9      	subs	r1, r3, #3
 800c7b2:	2304      	movs	r3, #4
 800c7b4:	4291      	cmp	r1, r2
 800c7b6:	d305      	bcc.n	800c7c4 <__hexnan+0xe0>
 800c7b8:	9b02      	ldr	r3, [sp, #8]
 800c7ba:	3b04      	subs	r3, #4
 800c7bc:	1b1b      	subs	r3, r3, r4
 800c7be:	089b      	lsrs	r3, r3, #2
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	9a01      	ldr	r2, [sp, #4]
 800c7c6:	18d3      	adds	r3, r2, r3
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	c304      	stmia	r3!, {r2}
 800c7cc:	429f      	cmp	r7, r3
 800c7ce:	d2fc      	bcs.n	800c7ca <__hexnan+0xe6>
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d104      	bne.n	800c7e0 <__hexnan+0xfc>
 800c7d6:	9b01      	ldr	r3, [sp, #4]
 800c7d8:	429f      	cmp	r7, r3
 800c7da:	d126      	bne.n	800c82a <__hexnan+0x146>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	603b      	str	r3, [r7, #0]
 800c7e0:	2005      	movs	r0, #5
 800c7e2:	e025      	b.n	800c830 <__hexnan+0x14c>
 800c7e4:	9b03      	ldr	r3, [sp, #12]
 800c7e6:	3501      	adds	r5, #1
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	9303      	str	r3, [sp, #12]
 800c7ec:	2d08      	cmp	r5, #8
 800c7ee:	dd06      	ble.n	800c7fe <__hexnan+0x11a>
 800c7f0:	9b01      	ldr	r3, [sp, #4]
 800c7f2:	429c      	cmp	r4, r3
 800c7f4:	d9bb      	bls.n	800c76e <__hexnan+0x8a>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	2501      	movs	r5, #1
 800c7fa:	3c04      	subs	r4, #4
 800c7fc:	6023      	str	r3, [r4, #0]
 800c7fe:	220f      	movs	r2, #15
 800c800:	6823      	ldr	r3, [r4, #0]
 800c802:	4010      	ands	r0, r2
 800c804:	011b      	lsls	r3, r3, #4
 800c806:	4303      	orrs	r3, r0
 800c808:	6023      	str	r3, [r4, #0]
 800c80a:	e7b0      	b.n	800c76e <__hexnan+0x8a>
 800c80c:	9b06      	ldr	r3, [sp, #24]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d0de      	beq.n	800c7d0 <__hexnan+0xec>
 800c812:	2320      	movs	r3, #32
 800c814:	9a06      	ldr	r2, [sp, #24]
 800c816:	9902      	ldr	r1, [sp, #8]
 800c818:	1a9b      	subs	r3, r3, r2
 800c81a:	2201      	movs	r2, #1
 800c81c:	4252      	negs	r2, r2
 800c81e:	40da      	lsrs	r2, r3
 800c820:	3904      	subs	r1, #4
 800c822:	680b      	ldr	r3, [r1, #0]
 800c824:	4013      	ands	r3, r2
 800c826:	600b      	str	r3, [r1, #0]
 800c828:	e7d2      	b.n	800c7d0 <__hexnan+0xec>
 800c82a:	3f04      	subs	r7, #4
 800c82c:	e7d0      	b.n	800c7d0 <__hexnan+0xec>
 800c82e:	2004      	movs	r0, #4
 800c830:	b00b      	add	sp, #44	; 0x2c
 800c832:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c834 <__ascii_mbtowc>:
 800c834:	b082      	sub	sp, #8
 800c836:	2900      	cmp	r1, #0
 800c838:	d100      	bne.n	800c83c <__ascii_mbtowc+0x8>
 800c83a:	a901      	add	r1, sp, #4
 800c83c:	1e10      	subs	r0, r2, #0
 800c83e:	d006      	beq.n	800c84e <__ascii_mbtowc+0x1a>
 800c840:	2b00      	cmp	r3, #0
 800c842:	d006      	beq.n	800c852 <__ascii_mbtowc+0x1e>
 800c844:	7813      	ldrb	r3, [r2, #0]
 800c846:	600b      	str	r3, [r1, #0]
 800c848:	7810      	ldrb	r0, [r2, #0]
 800c84a:	1e43      	subs	r3, r0, #1
 800c84c:	4198      	sbcs	r0, r3
 800c84e:	b002      	add	sp, #8
 800c850:	4770      	bx	lr
 800c852:	2002      	movs	r0, #2
 800c854:	4240      	negs	r0, r0
 800c856:	e7fa      	b.n	800c84e <__ascii_mbtowc+0x1a>

0800c858 <_Balloc>:
 800c858:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c85a:	b570      	push	{r4, r5, r6, lr}
 800c85c:	0006      	movs	r6, r0
 800c85e:	000c      	movs	r4, r1
 800c860:	2b00      	cmp	r3, #0
 800c862:	d012      	beq.n	800c88a <_Balloc+0x32>
 800c864:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800c866:	00a2      	lsls	r2, r4, #2
 800c868:	189b      	adds	r3, r3, r2
 800c86a:	6818      	ldr	r0, [r3, #0]
 800c86c:	2800      	cmp	r0, #0
 800c86e:	d115      	bne.n	800c89c <_Balloc+0x44>
 800c870:	2101      	movs	r1, #1
 800c872:	000d      	movs	r5, r1
 800c874:	40a5      	lsls	r5, r4
 800c876:	1d6a      	adds	r2, r5, #5
 800c878:	0030      	movs	r0, r6
 800c87a:	0092      	lsls	r2, r2, #2
 800c87c:	f003 face 	bl	800fe1c <_calloc_r>
 800c880:	2800      	cmp	r0, #0
 800c882:	d009      	beq.n	800c898 <_Balloc+0x40>
 800c884:	6044      	str	r4, [r0, #4]
 800c886:	6085      	str	r5, [r0, #8]
 800c888:	e00a      	b.n	800c8a0 <_Balloc+0x48>
 800c88a:	2221      	movs	r2, #33	; 0x21
 800c88c:	2104      	movs	r1, #4
 800c88e:	f003 fac5 	bl	800fe1c <_calloc_r>
 800c892:	6470      	str	r0, [r6, #68]	; 0x44
 800c894:	2800      	cmp	r0, #0
 800c896:	d1e5      	bne.n	800c864 <_Balloc+0xc>
 800c898:	2000      	movs	r0, #0
 800c89a:	bd70      	pop	{r4, r5, r6, pc}
 800c89c:	6802      	ldr	r2, [r0, #0]
 800c89e:	601a      	str	r2, [r3, #0]
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	6103      	str	r3, [r0, #16]
 800c8a4:	60c3      	str	r3, [r0, #12]
 800c8a6:	e7f8      	b.n	800c89a <_Balloc+0x42>

0800c8a8 <_Bfree>:
 800c8a8:	2900      	cmp	r1, #0
 800c8aa:	d006      	beq.n	800c8ba <_Bfree+0x12>
 800c8ac:	684a      	ldr	r2, [r1, #4]
 800c8ae:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c8b0:	0092      	lsls	r2, r2, #2
 800c8b2:	189b      	adds	r3, r3, r2
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	600a      	str	r2, [r1, #0]
 800c8b8:	6019      	str	r1, [r3, #0]
 800c8ba:	4770      	bx	lr

0800c8bc <__multadd>:
 800c8bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8be:	000e      	movs	r6, r1
 800c8c0:	9001      	str	r0, [sp, #4]
 800c8c2:	000c      	movs	r4, r1
 800c8c4:	001d      	movs	r5, r3
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	690f      	ldr	r7, [r1, #16]
 800c8ca:	3614      	adds	r6, #20
 800c8cc:	6833      	ldr	r3, [r6, #0]
 800c8ce:	3001      	adds	r0, #1
 800c8d0:	b299      	uxth	r1, r3
 800c8d2:	4351      	muls	r1, r2
 800c8d4:	0c1b      	lsrs	r3, r3, #16
 800c8d6:	4353      	muls	r3, r2
 800c8d8:	1949      	adds	r1, r1, r5
 800c8da:	0c0d      	lsrs	r5, r1, #16
 800c8dc:	195b      	adds	r3, r3, r5
 800c8de:	0c1d      	lsrs	r5, r3, #16
 800c8e0:	b289      	uxth	r1, r1
 800c8e2:	041b      	lsls	r3, r3, #16
 800c8e4:	185b      	adds	r3, r3, r1
 800c8e6:	c608      	stmia	r6!, {r3}
 800c8e8:	4287      	cmp	r7, r0
 800c8ea:	dcef      	bgt.n	800c8cc <__multadd+0x10>
 800c8ec:	2d00      	cmp	r5, #0
 800c8ee:	d022      	beq.n	800c936 <__multadd+0x7a>
 800c8f0:	68a3      	ldr	r3, [r4, #8]
 800c8f2:	42bb      	cmp	r3, r7
 800c8f4:	dc19      	bgt.n	800c92a <__multadd+0x6e>
 800c8f6:	6861      	ldr	r1, [r4, #4]
 800c8f8:	9801      	ldr	r0, [sp, #4]
 800c8fa:	3101      	adds	r1, #1
 800c8fc:	f7ff ffac 	bl	800c858 <_Balloc>
 800c900:	1e06      	subs	r6, r0, #0
 800c902:	d105      	bne.n	800c910 <__multadd+0x54>
 800c904:	0032      	movs	r2, r6
 800c906:	21ba      	movs	r1, #186	; 0xba
 800c908:	4b0c      	ldr	r3, [pc, #48]	; (800c93c <__multadd+0x80>)
 800c90a:	480d      	ldr	r0, [pc, #52]	; (800c940 <__multadd+0x84>)
 800c90c:	f003 fa68 	bl	800fde0 <__assert_func>
 800c910:	0021      	movs	r1, r4
 800c912:	6922      	ldr	r2, [r4, #16]
 800c914:	310c      	adds	r1, #12
 800c916:	3202      	adds	r2, #2
 800c918:	0092      	lsls	r2, r2, #2
 800c91a:	300c      	adds	r0, #12
 800c91c:	f7ff fb01 	bl	800bf22 <memcpy>
 800c920:	0021      	movs	r1, r4
 800c922:	9801      	ldr	r0, [sp, #4]
 800c924:	f7ff ffc0 	bl	800c8a8 <_Bfree>
 800c928:	0034      	movs	r4, r6
 800c92a:	1d3b      	adds	r3, r7, #4
 800c92c:	009b      	lsls	r3, r3, #2
 800c92e:	18e3      	adds	r3, r4, r3
 800c930:	605d      	str	r5, [r3, #4]
 800c932:	1c7b      	adds	r3, r7, #1
 800c934:	6123      	str	r3, [r4, #16]
 800c936:	0020      	movs	r0, r4
 800c938:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c93a:	46c0      	nop			; (mov r8, r8)
 800c93c:	08014631 	.word	0x08014631
 800c940:	080146a2 	.word	0x080146a2

0800c944 <__s2b>:
 800c944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c946:	0006      	movs	r6, r0
 800c948:	0018      	movs	r0, r3
 800c94a:	000c      	movs	r4, r1
 800c94c:	3008      	adds	r0, #8
 800c94e:	2109      	movs	r1, #9
 800c950:	9301      	str	r3, [sp, #4]
 800c952:	0015      	movs	r5, r2
 800c954:	f7f3 fc7c 	bl	8000250 <__divsi3>
 800c958:	2301      	movs	r3, #1
 800c95a:	2100      	movs	r1, #0
 800c95c:	4283      	cmp	r3, r0
 800c95e:	db0a      	blt.n	800c976 <__s2b+0x32>
 800c960:	0030      	movs	r0, r6
 800c962:	f7ff ff79 	bl	800c858 <_Balloc>
 800c966:	1e01      	subs	r1, r0, #0
 800c968:	d108      	bne.n	800c97c <__s2b+0x38>
 800c96a:	000a      	movs	r2, r1
 800c96c:	4b19      	ldr	r3, [pc, #100]	; (800c9d4 <__s2b+0x90>)
 800c96e:	481a      	ldr	r0, [pc, #104]	; (800c9d8 <__s2b+0x94>)
 800c970:	31d3      	adds	r1, #211	; 0xd3
 800c972:	f003 fa35 	bl	800fde0 <__assert_func>
 800c976:	005b      	lsls	r3, r3, #1
 800c978:	3101      	adds	r1, #1
 800c97a:	e7ef      	b.n	800c95c <__s2b+0x18>
 800c97c:	9b08      	ldr	r3, [sp, #32]
 800c97e:	6143      	str	r3, [r0, #20]
 800c980:	2301      	movs	r3, #1
 800c982:	6103      	str	r3, [r0, #16]
 800c984:	2d09      	cmp	r5, #9
 800c986:	dd18      	ble.n	800c9ba <__s2b+0x76>
 800c988:	0023      	movs	r3, r4
 800c98a:	3309      	adds	r3, #9
 800c98c:	001f      	movs	r7, r3
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	1964      	adds	r4, r4, r5
 800c992:	783b      	ldrb	r3, [r7, #0]
 800c994:	220a      	movs	r2, #10
 800c996:	0030      	movs	r0, r6
 800c998:	3b30      	subs	r3, #48	; 0x30
 800c99a:	f7ff ff8f 	bl	800c8bc <__multadd>
 800c99e:	3701      	adds	r7, #1
 800c9a0:	0001      	movs	r1, r0
 800c9a2:	42a7      	cmp	r7, r4
 800c9a4:	d1f5      	bne.n	800c992 <__s2b+0x4e>
 800c9a6:	002c      	movs	r4, r5
 800c9a8:	9b00      	ldr	r3, [sp, #0]
 800c9aa:	3c08      	subs	r4, #8
 800c9ac:	191c      	adds	r4, r3, r4
 800c9ae:	002f      	movs	r7, r5
 800c9b0:	9b01      	ldr	r3, [sp, #4]
 800c9b2:	429f      	cmp	r7, r3
 800c9b4:	db04      	blt.n	800c9c0 <__s2b+0x7c>
 800c9b6:	0008      	movs	r0, r1
 800c9b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c9ba:	2509      	movs	r5, #9
 800c9bc:	340a      	adds	r4, #10
 800c9be:	e7f6      	b.n	800c9ae <__s2b+0x6a>
 800c9c0:	1b63      	subs	r3, r4, r5
 800c9c2:	5ddb      	ldrb	r3, [r3, r7]
 800c9c4:	220a      	movs	r2, #10
 800c9c6:	0030      	movs	r0, r6
 800c9c8:	3b30      	subs	r3, #48	; 0x30
 800c9ca:	f7ff ff77 	bl	800c8bc <__multadd>
 800c9ce:	3701      	adds	r7, #1
 800c9d0:	0001      	movs	r1, r0
 800c9d2:	e7ed      	b.n	800c9b0 <__s2b+0x6c>
 800c9d4:	08014631 	.word	0x08014631
 800c9d8:	080146a2 	.word	0x080146a2

0800c9dc <__hi0bits>:
 800c9dc:	0003      	movs	r3, r0
 800c9de:	0c02      	lsrs	r2, r0, #16
 800c9e0:	2000      	movs	r0, #0
 800c9e2:	4282      	cmp	r2, r0
 800c9e4:	d101      	bne.n	800c9ea <__hi0bits+0xe>
 800c9e6:	041b      	lsls	r3, r3, #16
 800c9e8:	3010      	adds	r0, #16
 800c9ea:	0e1a      	lsrs	r2, r3, #24
 800c9ec:	d101      	bne.n	800c9f2 <__hi0bits+0x16>
 800c9ee:	3008      	adds	r0, #8
 800c9f0:	021b      	lsls	r3, r3, #8
 800c9f2:	0f1a      	lsrs	r2, r3, #28
 800c9f4:	d101      	bne.n	800c9fa <__hi0bits+0x1e>
 800c9f6:	3004      	adds	r0, #4
 800c9f8:	011b      	lsls	r3, r3, #4
 800c9fa:	0f9a      	lsrs	r2, r3, #30
 800c9fc:	d101      	bne.n	800ca02 <__hi0bits+0x26>
 800c9fe:	3002      	adds	r0, #2
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	db03      	blt.n	800ca0e <__hi0bits+0x32>
 800ca06:	3001      	adds	r0, #1
 800ca08:	005b      	lsls	r3, r3, #1
 800ca0a:	d400      	bmi.n	800ca0e <__hi0bits+0x32>
 800ca0c:	2020      	movs	r0, #32
 800ca0e:	4770      	bx	lr

0800ca10 <__lo0bits>:
 800ca10:	6803      	ldr	r3, [r0, #0]
 800ca12:	0001      	movs	r1, r0
 800ca14:	2207      	movs	r2, #7
 800ca16:	0018      	movs	r0, r3
 800ca18:	4010      	ands	r0, r2
 800ca1a:	4213      	tst	r3, r2
 800ca1c:	d00d      	beq.n	800ca3a <__lo0bits+0x2a>
 800ca1e:	3a06      	subs	r2, #6
 800ca20:	2000      	movs	r0, #0
 800ca22:	4213      	tst	r3, r2
 800ca24:	d105      	bne.n	800ca32 <__lo0bits+0x22>
 800ca26:	3002      	adds	r0, #2
 800ca28:	4203      	tst	r3, r0
 800ca2a:	d003      	beq.n	800ca34 <__lo0bits+0x24>
 800ca2c:	40d3      	lsrs	r3, r2
 800ca2e:	0010      	movs	r0, r2
 800ca30:	600b      	str	r3, [r1, #0]
 800ca32:	4770      	bx	lr
 800ca34:	089b      	lsrs	r3, r3, #2
 800ca36:	600b      	str	r3, [r1, #0]
 800ca38:	e7fb      	b.n	800ca32 <__lo0bits+0x22>
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	2a00      	cmp	r2, #0
 800ca3e:	d101      	bne.n	800ca44 <__lo0bits+0x34>
 800ca40:	2010      	movs	r0, #16
 800ca42:	0c1b      	lsrs	r3, r3, #16
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	2a00      	cmp	r2, #0
 800ca48:	d101      	bne.n	800ca4e <__lo0bits+0x3e>
 800ca4a:	3008      	adds	r0, #8
 800ca4c:	0a1b      	lsrs	r3, r3, #8
 800ca4e:	071a      	lsls	r2, r3, #28
 800ca50:	d101      	bne.n	800ca56 <__lo0bits+0x46>
 800ca52:	3004      	adds	r0, #4
 800ca54:	091b      	lsrs	r3, r3, #4
 800ca56:	079a      	lsls	r2, r3, #30
 800ca58:	d101      	bne.n	800ca5e <__lo0bits+0x4e>
 800ca5a:	3002      	adds	r0, #2
 800ca5c:	089b      	lsrs	r3, r3, #2
 800ca5e:	07da      	lsls	r2, r3, #31
 800ca60:	d4e9      	bmi.n	800ca36 <__lo0bits+0x26>
 800ca62:	3001      	adds	r0, #1
 800ca64:	085b      	lsrs	r3, r3, #1
 800ca66:	d1e6      	bne.n	800ca36 <__lo0bits+0x26>
 800ca68:	2020      	movs	r0, #32
 800ca6a:	e7e2      	b.n	800ca32 <__lo0bits+0x22>

0800ca6c <__i2b>:
 800ca6c:	b510      	push	{r4, lr}
 800ca6e:	000c      	movs	r4, r1
 800ca70:	2101      	movs	r1, #1
 800ca72:	f7ff fef1 	bl	800c858 <_Balloc>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	d107      	bne.n	800ca8a <__i2b+0x1e>
 800ca7a:	2146      	movs	r1, #70	; 0x46
 800ca7c:	4c05      	ldr	r4, [pc, #20]	; (800ca94 <__i2b+0x28>)
 800ca7e:	0002      	movs	r2, r0
 800ca80:	4b05      	ldr	r3, [pc, #20]	; (800ca98 <__i2b+0x2c>)
 800ca82:	0020      	movs	r0, r4
 800ca84:	31ff      	adds	r1, #255	; 0xff
 800ca86:	f003 f9ab 	bl	800fde0 <__assert_func>
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	6144      	str	r4, [r0, #20]
 800ca8e:	6103      	str	r3, [r0, #16]
 800ca90:	bd10      	pop	{r4, pc}
 800ca92:	46c0      	nop			; (mov r8, r8)
 800ca94:	080146a2 	.word	0x080146a2
 800ca98:	08014631 	.word	0x08014631

0800ca9c <__multiply>:
 800ca9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca9e:	0015      	movs	r5, r2
 800caa0:	690a      	ldr	r2, [r1, #16]
 800caa2:	692b      	ldr	r3, [r5, #16]
 800caa4:	000c      	movs	r4, r1
 800caa6:	b08b      	sub	sp, #44	; 0x2c
 800caa8:	429a      	cmp	r2, r3
 800caaa:	da01      	bge.n	800cab0 <__multiply+0x14>
 800caac:	002c      	movs	r4, r5
 800caae:	000d      	movs	r5, r1
 800cab0:	6927      	ldr	r7, [r4, #16]
 800cab2:	692e      	ldr	r6, [r5, #16]
 800cab4:	6861      	ldr	r1, [r4, #4]
 800cab6:	19bb      	adds	r3, r7, r6
 800cab8:	9303      	str	r3, [sp, #12]
 800caba:	68a3      	ldr	r3, [r4, #8]
 800cabc:	19ba      	adds	r2, r7, r6
 800cabe:	4293      	cmp	r3, r2
 800cac0:	da00      	bge.n	800cac4 <__multiply+0x28>
 800cac2:	3101      	adds	r1, #1
 800cac4:	f7ff fec8 	bl	800c858 <_Balloc>
 800cac8:	9002      	str	r0, [sp, #8]
 800caca:	2800      	cmp	r0, #0
 800cacc:	d106      	bne.n	800cadc <__multiply+0x40>
 800cace:	21b1      	movs	r1, #177	; 0xb1
 800cad0:	4b48      	ldr	r3, [pc, #288]	; (800cbf4 <__multiply+0x158>)
 800cad2:	4849      	ldr	r0, [pc, #292]	; (800cbf8 <__multiply+0x15c>)
 800cad4:	9a02      	ldr	r2, [sp, #8]
 800cad6:	0049      	lsls	r1, r1, #1
 800cad8:	f003 f982 	bl	800fde0 <__assert_func>
 800cadc:	9b02      	ldr	r3, [sp, #8]
 800cade:	2200      	movs	r2, #0
 800cae0:	3314      	adds	r3, #20
 800cae2:	469c      	mov	ip, r3
 800cae4:	19bb      	adds	r3, r7, r6
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	4463      	add	r3, ip
 800caea:	9304      	str	r3, [sp, #16]
 800caec:	4663      	mov	r3, ip
 800caee:	9904      	ldr	r1, [sp, #16]
 800caf0:	428b      	cmp	r3, r1
 800caf2:	d32a      	bcc.n	800cb4a <__multiply+0xae>
 800caf4:	0023      	movs	r3, r4
 800caf6:	00bf      	lsls	r7, r7, #2
 800caf8:	3314      	adds	r3, #20
 800cafa:	3514      	adds	r5, #20
 800cafc:	9308      	str	r3, [sp, #32]
 800cafe:	00b6      	lsls	r6, r6, #2
 800cb00:	19db      	adds	r3, r3, r7
 800cb02:	9305      	str	r3, [sp, #20]
 800cb04:	19ab      	adds	r3, r5, r6
 800cb06:	9309      	str	r3, [sp, #36]	; 0x24
 800cb08:	2304      	movs	r3, #4
 800cb0a:	9306      	str	r3, [sp, #24]
 800cb0c:	0023      	movs	r3, r4
 800cb0e:	9a05      	ldr	r2, [sp, #20]
 800cb10:	3315      	adds	r3, #21
 800cb12:	9501      	str	r5, [sp, #4]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d305      	bcc.n	800cb24 <__multiply+0x88>
 800cb18:	1b13      	subs	r3, r2, r4
 800cb1a:	3b15      	subs	r3, #21
 800cb1c:	089b      	lsrs	r3, r3, #2
 800cb1e:	3301      	adds	r3, #1
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	9306      	str	r3, [sp, #24]
 800cb24:	9b01      	ldr	r3, [sp, #4]
 800cb26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d310      	bcc.n	800cb4e <__multiply+0xb2>
 800cb2c:	9b03      	ldr	r3, [sp, #12]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	dd05      	ble.n	800cb3e <__multiply+0xa2>
 800cb32:	9b04      	ldr	r3, [sp, #16]
 800cb34:	3b04      	subs	r3, #4
 800cb36:	9304      	str	r3, [sp, #16]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d056      	beq.n	800cbec <__multiply+0x150>
 800cb3e:	9b02      	ldr	r3, [sp, #8]
 800cb40:	9a03      	ldr	r2, [sp, #12]
 800cb42:	0018      	movs	r0, r3
 800cb44:	611a      	str	r2, [r3, #16]
 800cb46:	b00b      	add	sp, #44	; 0x2c
 800cb48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb4a:	c304      	stmia	r3!, {r2}
 800cb4c:	e7cf      	b.n	800caee <__multiply+0x52>
 800cb4e:	9b01      	ldr	r3, [sp, #4]
 800cb50:	6818      	ldr	r0, [r3, #0]
 800cb52:	b280      	uxth	r0, r0
 800cb54:	2800      	cmp	r0, #0
 800cb56:	d01e      	beq.n	800cb96 <__multiply+0xfa>
 800cb58:	4667      	mov	r7, ip
 800cb5a:	2500      	movs	r5, #0
 800cb5c:	9e08      	ldr	r6, [sp, #32]
 800cb5e:	ce02      	ldmia	r6!, {r1}
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	9307      	str	r3, [sp, #28]
 800cb64:	b28b      	uxth	r3, r1
 800cb66:	4343      	muls	r3, r0
 800cb68:	001a      	movs	r2, r3
 800cb6a:	466b      	mov	r3, sp
 800cb6c:	8b9b      	ldrh	r3, [r3, #28]
 800cb6e:	18d3      	adds	r3, r2, r3
 800cb70:	195b      	adds	r3, r3, r5
 800cb72:	0c0d      	lsrs	r5, r1, #16
 800cb74:	4345      	muls	r5, r0
 800cb76:	9a07      	ldr	r2, [sp, #28]
 800cb78:	0c11      	lsrs	r1, r2, #16
 800cb7a:	1869      	adds	r1, r5, r1
 800cb7c:	0c1a      	lsrs	r2, r3, #16
 800cb7e:	188a      	adds	r2, r1, r2
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	0c15      	lsrs	r5, r2, #16
 800cb84:	0412      	lsls	r2, r2, #16
 800cb86:	431a      	orrs	r2, r3
 800cb88:	9b05      	ldr	r3, [sp, #20]
 800cb8a:	c704      	stmia	r7!, {r2}
 800cb8c:	42b3      	cmp	r3, r6
 800cb8e:	d8e6      	bhi.n	800cb5e <__multiply+0xc2>
 800cb90:	4663      	mov	r3, ip
 800cb92:	9a06      	ldr	r2, [sp, #24]
 800cb94:	509d      	str	r5, [r3, r2]
 800cb96:	9b01      	ldr	r3, [sp, #4]
 800cb98:	6818      	ldr	r0, [r3, #0]
 800cb9a:	0c00      	lsrs	r0, r0, #16
 800cb9c:	d020      	beq.n	800cbe0 <__multiply+0x144>
 800cb9e:	4663      	mov	r3, ip
 800cba0:	0025      	movs	r5, r4
 800cba2:	4661      	mov	r1, ip
 800cba4:	2700      	movs	r7, #0
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	3514      	adds	r5, #20
 800cbaa:	682a      	ldr	r2, [r5, #0]
 800cbac:	680e      	ldr	r6, [r1, #0]
 800cbae:	b292      	uxth	r2, r2
 800cbb0:	4342      	muls	r2, r0
 800cbb2:	0c36      	lsrs	r6, r6, #16
 800cbb4:	1992      	adds	r2, r2, r6
 800cbb6:	19d2      	adds	r2, r2, r7
 800cbb8:	0416      	lsls	r6, r2, #16
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	431e      	orrs	r6, r3
 800cbbe:	600e      	str	r6, [r1, #0]
 800cbc0:	cd40      	ldmia	r5!, {r6}
 800cbc2:	684b      	ldr	r3, [r1, #4]
 800cbc4:	0c36      	lsrs	r6, r6, #16
 800cbc6:	4346      	muls	r6, r0
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	0c12      	lsrs	r2, r2, #16
 800cbcc:	18f3      	adds	r3, r6, r3
 800cbce:	189b      	adds	r3, r3, r2
 800cbd0:	9a05      	ldr	r2, [sp, #20]
 800cbd2:	0c1f      	lsrs	r7, r3, #16
 800cbd4:	3104      	adds	r1, #4
 800cbd6:	42aa      	cmp	r2, r5
 800cbd8:	d8e7      	bhi.n	800cbaa <__multiply+0x10e>
 800cbda:	4662      	mov	r2, ip
 800cbdc:	9906      	ldr	r1, [sp, #24]
 800cbde:	5053      	str	r3, [r2, r1]
 800cbe0:	9b01      	ldr	r3, [sp, #4]
 800cbe2:	3304      	adds	r3, #4
 800cbe4:	9301      	str	r3, [sp, #4]
 800cbe6:	2304      	movs	r3, #4
 800cbe8:	449c      	add	ip, r3
 800cbea:	e79b      	b.n	800cb24 <__multiply+0x88>
 800cbec:	9b03      	ldr	r3, [sp, #12]
 800cbee:	3b01      	subs	r3, #1
 800cbf0:	9303      	str	r3, [sp, #12]
 800cbf2:	e79b      	b.n	800cb2c <__multiply+0x90>
 800cbf4:	08014631 	.word	0x08014631
 800cbf8:	080146a2 	.word	0x080146a2

0800cbfc <__pow5mult>:
 800cbfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbfe:	2303      	movs	r3, #3
 800cc00:	0015      	movs	r5, r2
 800cc02:	0007      	movs	r7, r0
 800cc04:	000e      	movs	r6, r1
 800cc06:	401a      	ands	r2, r3
 800cc08:	421d      	tst	r5, r3
 800cc0a:	d008      	beq.n	800cc1e <__pow5mult+0x22>
 800cc0c:	491a      	ldr	r1, [pc, #104]	; (800cc78 <__pow5mult+0x7c>)
 800cc0e:	3a01      	subs	r2, #1
 800cc10:	0092      	lsls	r2, r2, #2
 800cc12:	5852      	ldr	r2, [r2, r1]
 800cc14:	2300      	movs	r3, #0
 800cc16:	0031      	movs	r1, r6
 800cc18:	f7ff fe50 	bl	800c8bc <__multadd>
 800cc1c:	0006      	movs	r6, r0
 800cc1e:	10ad      	asrs	r5, r5, #2
 800cc20:	d027      	beq.n	800cc72 <__pow5mult+0x76>
 800cc22:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800cc24:	2c00      	cmp	r4, #0
 800cc26:	d107      	bne.n	800cc38 <__pow5mult+0x3c>
 800cc28:	0038      	movs	r0, r7
 800cc2a:	4914      	ldr	r1, [pc, #80]	; (800cc7c <__pow5mult+0x80>)
 800cc2c:	f7ff ff1e 	bl	800ca6c <__i2b>
 800cc30:	2300      	movs	r3, #0
 800cc32:	0004      	movs	r4, r0
 800cc34:	6438      	str	r0, [r7, #64]	; 0x40
 800cc36:	6003      	str	r3, [r0, #0]
 800cc38:	2301      	movs	r3, #1
 800cc3a:	421d      	tst	r5, r3
 800cc3c:	d00a      	beq.n	800cc54 <__pow5mult+0x58>
 800cc3e:	0031      	movs	r1, r6
 800cc40:	0022      	movs	r2, r4
 800cc42:	0038      	movs	r0, r7
 800cc44:	f7ff ff2a 	bl	800ca9c <__multiply>
 800cc48:	0031      	movs	r1, r6
 800cc4a:	9001      	str	r0, [sp, #4]
 800cc4c:	0038      	movs	r0, r7
 800cc4e:	f7ff fe2b 	bl	800c8a8 <_Bfree>
 800cc52:	9e01      	ldr	r6, [sp, #4]
 800cc54:	106d      	asrs	r5, r5, #1
 800cc56:	d00c      	beq.n	800cc72 <__pow5mult+0x76>
 800cc58:	6820      	ldr	r0, [r4, #0]
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	d107      	bne.n	800cc6e <__pow5mult+0x72>
 800cc5e:	0022      	movs	r2, r4
 800cc60:	0021      	movs	r1, r4
 800cc62:	0038      	movs	r0, r7
 800cc64:	f7ff ff1a 	bl	800ca9c <__multiply>
 800cc68:	2300      	movs	r3, #0
 800cc6a:	6020      	str	r0, [r4, #0]
 800cc6c:	6003      	str	r3, [r0, #0]
 800cc6e:	0004      	movs	r4, r0
 800cc70:	e7e2      	b.n	800cc38 <__pow5mult+0x3c>
 800cc72:	0030      	movs	r0, r6
 800cc74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc76:	46c0      	nop			; (mov r8, r8)
 800cc78:	080147f0 	.word	0x080147f0
 800cc7c:	00000271 	.word	0x00000271

0800cc80 <__lshift>:
 800cc80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc82:	000c      	movs	r4, r1
 800cc84:	0017      	movs	r7, r2
 800cc86:	6923      	ldr	r3, [r4, #16]
 800cc88:	1155      	asrs	r5, r2, #5
 800cc8a:	b087      	sub	sp, #28
 800cc8c:	18eb      	adds	r3, r5, r3
 800cc8e:	9302      	str	r3, [sp, #8]
 800cc90:	3301      	adds	r3, #1
 800cc92:	9301      	str	r3, [sp, #4]
 800cc94:	6849      	ldr	r1, [r1, #4]
 800cc96:	68a3      	ldr	r3, [r4, #8]
 800cc98:	9004      	str	r0, [sp, #16]
 800cc9a:	9a01      	ldr	r2, [sp, #4]
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	db10      	blt.n	800ccc2 <__lshift+0x42>
 800cca0:	9804      	ldr	r0, [sp, #16]
 800cca2:	f7ff fdd9 	bl	800c858 <_Balloc>
 800cca6:	2300      	movs	r3, #0
 800cca8:	0002      	movs	r2, r0
 800ccaa:	0006      	movs	r6, r0
 800ccac:	0019      	movs	r1, r3
 800ccae:	3214      	adds	r2, #20
 800ccb0:	4298      	cmp	r0, r3
 800ccb2:	d10c      	bne.n	800ccce <__lshift+0x4e>
 800ccb4:	31df      	adds	r1, #223	; 0xdf
 800ccb6:	0032      	movs	r2, r6
 800ccb8:	4b26      	ldr	r3, [pc, #152]	; (800cd54 <__lshift+0xd4>)
 800ccba:	4827      	ldr	r0, [pc, #156]	; (800cd58 <__lshift+0xd8>)
 800ccbc:	31ff      	adds	r1, #255	; 0xff
 800ccbe:	f003 f88f 	bl	800fde0 <__assert_func>
 800ccc2:	3101      	adds	r1, #1
 800ccc4:	005b      	lsls	r3, r3, #1
 800ccc6:	e7e8      	b.n	800cc9a <__lshift+0x1a>
 800ccc8:	0098      	lsls	r0, r3, #2
 800ccca:	5011      	str	r1, [r2, r0]
 800cccc:	3301      	adds	r3, #1
 800ccce:	42ab      	cmp	r3, r5
 800ccd0:	dbfa      	blt.n	800ccc8 <__lshift+0x48>
 800ccd2:	43eb      	mvns	r3, r5
 800ccd4:	17db      	asrs	r3, r3, #31
 800ccd6:	401d      	ands	r5, r3
 800ccd8:	211f      	movs	r1, #31
 800ccda:	0023      	movs	r3, r4
 800ccdc:	0038      	movs	r0, r7
 800ccde:	00ad      	lsls	r5, r5, #2
 800cce0:	1955      	adds	r5, r2, r5
 800cce2:	6922      	ldr	r2, [r4, #16]
 800cce4:	3314      	adds	r3, #20
 800cce6:	0092      	lsls	r2, r2, #2
 800cce8:	4008      	ands	r0, r1
 800ccea:	4684      	mov	ip, r0
 800ccec:	189a      	adds	r2, r3, r2
 800ccee:	420f      	tst	r7, r1
 800ccf0:	d02a      	beq.n	800cd48 <__lshift+0xc8>
 800ccf2:	3101      	adds	r1, #1
 800ccf4:	1a09      	subs	r1, r1, r0
 800ccf6:	9105      	str	r1, [sp, #20]
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	9503      	str	r5, [sp, #12]
 800ccfc:	4667      	mov	r7, ip
 800ccfe:	6818      	ldr	r0, [r3, #0]
 800cd00:	40b8      	lsls	r0, r7
 800cd02:	4308      	orrs	r0, r1
 800cd04:	9903      	ldr	r1, [sp, #12]
 800cd06:	c101      	stmia	r1!, {r0}
 800cd08:	9103      	str	r1, [sp, #12]
 800cd0a:	9805      	ldr	r0, [sp, #20]
 800cd0c:	cb02      	ldmia	r3!, {r1}
 800cd0e:	40c1      	lsrs	r1, r0
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d8f3      	bhi.n	800ccfc <__lshift+0x7c>
 800cd14:	0020      	movs	r0, r4
 800cd16:	3015      	adds	r0, #21
 800cd18:	2304      	movs	r3, #4
 800cd1a:	4282      	cmp	r2, r0
 800cd1c:	d304      	bcc.n	800cd28 <__lshift+0xa8>
 800cd1e:	1b13      	subs	r3, r2, r4
 800cd20:	3b15      	subs	r3, #21
 800cd22:	089b      	lsrs	r3, r3, #2
 800cd24:	3301      	adds	r3, #1
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	50e9      	str	r1, [r5, r3]
 800cd2a:	2900      	cmp	r1, #0
 800cd2c:	d002      	beq.n	800cd34 <__lshift+0xb4>
 800cd2e:	9b02      	ldr	r3, [sp, #8]
 800cd30:	3302      	adds	r3, #2
 800cd32:	9301      	str	r3, [sp, #4]
 800cd34:	9b01      	ldr	r3, [sp, #4]
 800cd36:	9804      	ldr	r0, [sp, #16]
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	0021      	movs	r1, r4
 800cd3c:	6133      	str	r3, [r6, #16]
 800cd3e:	f7ff fdb3 	bl	800c8a8 <_Bfree>
 800cd42:	0030      	movs	r0, r6
 800cd44:	b007      	add	sp, #28
 800cd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd48:	cb02      	ldmia	r3!, {r1}
 800cd4a:	c502      	stmia	r5!, {r1}
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d8fb      	bhi.n	800cd48 <__lshift+0xc8>
 800cd50:	e7f0      	b.n	800cd34 <__lshift+0xb4>
 800cd52:	46c0      	nop			; (mov r8, r8)
 800cd54:	08014631 	.word	0x08014631
 800cd58:	080146a2 	.word	0x080146a2

0800cd5c <__mcmp>:
 800cd5c:	b530      	push	{r4, r5, lr}
 800cd5e:	690b      	ldr	r3, [r1, #16]
 800cd60:	6904      	ldr	r4, [r0, #16]
 800cd62:	0002      	movs	r2, r0
 800cd64:	1ae0      	subs	r0, r4, r3
 800cd66:	429c      	cmp	r4, r3
 800cd68:	d10e      	bne.n	800cd88 <__mcmp+0x2c>
 800cd6a:	3214      	adds	r2, #20
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	3114      	adds	r1, #20
 800cd70:	0014      	movs	r4, r2
 800cd72:	18c9      	adds	r1, r1, r3
 800cd74:	18d2      	adds	r2, r2, r3
 800cd76:	3a04      	subs	r2, #4
 800cd78:	3904      	subs	r1, #4
 800cd7a:	6815      	ldr	r5, [r2, #0]
 800cd7c:	680b      	ldr	r3, [r1, #0]
 800cd7e:	429d      	cmp	r5, r3
 800cd80:	d003      	beq.n	800cd8a <__mcmp+0x2e>
 800cd82:	2001      	movs	r0, #1
 800cd84:	429d      	cmp	r5, r3
 800cd86:	d303      	bcc.n	800cd90 <__mcmp+0x34>
 800cd88:	bd30      	pop	{r4, r5, pc}
 800cd8a:	4294      	cmp	r4, r2
 800cd8c:	d3f3      	bcc.n	800cd76 <__mcmp+0x1a>
 800cd8e:	e7fb      	b.n	800cd88 <__mcmp+0x2c>
 800cd90:	4240      	negs	r0, r0
 800cd92:	e7f9      	b.n	800cd88 <__mcmp+0x2c>

0800cd94 <__mdiff>:
 800cd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd96:	000e      	movs	r6, r1
 800cd98:	0007      	movs	r7, r0
 800cd9a:	0011      	movs	r1, r2
 800cd9c:	0030      	movs	r0, r6
 800cd9e:	b087      	sub	sp, #28
 800cda0:	0014      	movs	r4, r2
 800cda2:	f7ff ffdb 	bl	800cd5c <__mcmp>
 800cda6:	1e05      	subs	r5, r0, #0
 800cda8:	d110      	bne.n	800cdcc <__mdiff+0x38>
 800cdaa:	0001      	movs	r1, r0
 800cdac:	0038      	movs	r0, r7
 800cdae:	f7ff fd53 	bl	800c858 <_Balloc>
 800cdb2:	1e02      	subs	r2, r0, #0
 800cdb4:	d104      	bne.n	800cdc0 <__mdiff+0x2c>
 800cdb6:	4b3f      	ldr	r3, [pc, #252]	; (800ceb4 <__mdiff+0x120>)
 800cdb8:	483f      	ldr	r0, [pc, #252]	; (800ceb8 <__mdiff+0x124>)
 800cdba:	4940      	ldr	r1, [pc, #256]	; (800cebc <__mdiff+0x128>)
 800cdbc:	f003 f810 	bl	800fde0 <__assert_func>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	6145      	str	r5, [r0, #20]
 800cdc4:	6103      	str	r3, [r0, #16]
 800cdc6:	0010      	movs	r0, r2
 800cdc8:	b007      	add	sp, #28
 800cdca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdcc:	2301      	movs	r3, #1
 800cdce:	9301      	str	r3, [sp, #4]
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	db04      	blt.n	800cdde <__mdiff+0x4a>
 800cdd4:	0023      	movs	r3, r4
 800cdd6:	0034      	movs	r4, r6
 800cdd8:	001e      	movs	r6, r3
 800cdda:	2300      	movs	r3, #0
 800cddc:	9301      	str	r3, [sp, #4]
 800cdde:	0038      	movs	r0, r7
 800cde0:	6861      	ldr	r1, [r4, #4]
 800cde2:	f7ff fd39 	bl	800c858 <_Balloc>
 800cde6:	1e02      	subs	r2, r0, #0
 800cde8:	d103      	bne.n	800cdf2 <__mdiff+0x5e>
 800cdea:	4b32      	ldr	r3, [pc, #200]	; (800ceb4 <__mdiff+0x120>)
 800cdec:	4832      	ldr	r0, [pc, #200]	; (800ceb8 <__mdiff+0x124>)
 800cdee:	4934      	ldr	r1, [pc, #208]	; (800cec0 <__mdiff+0x12c>)
 800cdf0:	e7e4      	b.n	800cdbc <__mdiff+0x28>
 800cdf2:	9b01      	ldr	r3, [sp, #4]
 800cdf4:	2700      	movs	r7, #0
 800cdf6:	60c3      	str	r3, [r0, #12]
 800cdf8:	6920      	ldr	r0, [r4, #16]
 800cdfa:	3414      	adds	r4, #20
 800cdfc:	0083      	lsls	r3, r0, #2
 800cdfe:	18e3      	adds	r3, r4, r3
 800ce00:	0021      	movs	r1, r4
 800ce02:	9401      	str	r4, [sp, #4]
 800ce04:	0034      	movs	r4, r6
 800ce06:	9302      	str	r3, [sp, #8]
 800ce08:	6933      	ldr	r3, [r6, #16]
 800ce0a:	3414      	adds	r4, #20
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	18e3      	adds	r3, r4, r3
 800ce10:	9303      	str	r3, [sp, #12]
 800ce12:	0013      	movs	r3, r2
 800ce14:	3314      	adds	r3, #20
 800ce16:	469c      	mov	ip, r3
 800ce18:	9305      	str	r3, [sp, #20]
 800ce1a:	9104      	str	r1, [sp, #16]
 800ce1c:	9b04      	ldr	r3, [sp, #16]
 800ce1e:	cc02      	ldmia	r4!, {r1}
 800ce20:	cb20      	ldmia	r3!, {r5}
 800ce22:	9304      	str	r3, [sp, #16]
 800ce24:	b2ab      	uxth	r3, r5
 800ce26:	19df      	adds	r7, r3, r7
 800ce28:	b28b      	uxth	r3, r1
 800ce2a:	1afb      	subs	r3, r7, r3
 800ce2c:	0c09      	lsrs	r1, r1, #16
 800ce2e:	0c2d      	lsrs	r5, r5, #16
 800ce30:	1a6d      	subs	r5, r5, r1
 800ce32:	1419      	asrs	r1, r3, #16
 800ce34:	1869      	adds	r1, r5, r1
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	140f      	asrs	r7, r1, #16
 800ce3a:	0409      	lsls	r1, r1, #16
 800ce3c:	4319      	orrs	r1, r3
 800ce3e:	4663      	mov	r3, ip
 800ce40:	c302      	stmia	r3!, {r1}
 800ce42:	469c      	mov	ip, r3
 800ce44:	9b03      	ldr	r3, [sp, #12]
 800ce46:	42a3      	cmp	r3, r4
 800ce48:	d8e8      	bhi.n	800ce1c <__mdiff+0x88>
 800ce4a:	0031      	movs	r1, r6
 800ce4c:	9c03      	ldr	r4, [sp, #12]
 800ce4e:	3115      	adds	r1, #21
 800ce50:	2304      	movs	r3, #4
 800ce52:	428c      	cmp	r4, r1
 800ce54:	d304      	bcc.n	800ce60 <__mdiff+0xcc>
 800ce56:	1ba3      	subs	r3, r4, r6
 800ce58:	3b15      	subs	r3, #21
 800ce5a:	089b      	lsrs	r3, r3, #2
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	9901      	ldr	r1, [sp, #4]
 800ce62:	18cd      	adds	r5, r1, r3
 800ce64:	9905      	ldr	r1, [sp, #20]
 800ce66:	002e      	movs	r6, r5
 800ce68:	18cb      	adds	r3, r1, r3
 800ce6a:	469c      	mov	ip, r3
 800ce6c:	9902      	ldr	r1, [sp, #8]
 800ce6e:	428e      	cmp	r6, r1
 800ce70:	d310      	bcc.n	800ce94 <__mdiff+0x100>
 800ce72:	9e02      	ldr	r6, [sp, #8]
 800ce74:	1ee9      	subs	r1, r5, #3
 800ce76:	2400      	movs	r4, #0
 800ce78:	428e      	cmp	r6, r1
 800ce7a:	d304      	bcc.n	800ce86 <__mdiff+0xf2>
 800ce7c:	0031      	movs	r1, r6
 800ce7e:	3103      	adds	r1, #3
 800ce80:	1b49      	subs	r1, r1, r5
 800ce82:	0889      	lsrs	r1, r1, #2
 800ce84:	008c      	lsls	r4, r1, #2
 800ce86:	191b      	adds	r3, r3, r4
 800ce88:	3b04      	subs	r3, #4
 800ce8a:	6819      	ldr	r1, [r3, #0]
 800ce8c:	2900      	cmp	r1, #0
 800ce8e:	d00f      	beq.n	800ceb0 <__mdiff+0x11c>
 800ce90:	6110      	str	r0, [r2, #16]
 800ce92:	e798      	b.n	800cdc6 <__mdiff+0x32>
 800ce94:	ce02      	ldmia	r6!, {r1}
 800ce96:	b28c      	uxth	r4, r1
 800ce98:	19e4      	adds	r4, r4, r7
 800ce9a:	0c0f      	lsrs	r7, r1, #16
 800ce9c:	1421      	asrs	r1, r4, #16
 800ce9e:	1879      	adds	r1, r7, r1
 800cea0:	b2a4      	uxth	r4, r4
 800cea2:	140f      	asrs	r7, r1, #16
 800cea4:	0409      	lsls	r1, r1, #16
 800cea6:	4321      	orrs	r1, r4
 800cea8:	4664      	mov	r4, ip
 800ceaa:	c402      	stmia	r4!, {r1}
 800ceac:	46a4      	mov	ip, r4
 800ceae:	e7dd      	b.n	800ce6c <__mdiff+0xd8>
 800ceb0:	3801      	subs	r0, #1
 800ceb2:	e7e9      	b.n	800ce88 <__mdiff+0xf4>
 800ceb4:	08014631 	.word	0x08014631
 800ceb8:	080146a2 	.word	0x080146a2
 800cebc:	00000237 	.word	0x00000237
 800cec0:	00000245 	.word	0x00000245

0800cec4 <__ulp>:
 800cec4:	2000      	movs	r0, #0
 800cec6:	4b0b      	ldr	r3, [pc, #44]	; (800cef4 <__ulp+0x30>)
 800cec8:	4019      	ands	r1, r3
 800ceca:	4b0b      	ldr	r3, [pc, #44]	; (800cef8 <__ulp+0x34>)
 800cecc:	18c9      	adds	r1, r1, r3
 800cece:	4281      	cmp	r1, r0
 800ced0:	dc06      	bgt.n	800cee0 <__ulp+0x1c>
 800ced2:	4249      	negs	r1, r1
 800ced4:	150b      	asrs	r3, r1, #20
 800ced6:	2b13      	cmp	r3, #19
 800ced8:	dc03      	bgt.n	800cee2 <__ulp+0x1e>
 800ceda:	2180      	movs	r1, #128	; 0x80
 800cedc:	0309      	lsls	r1, r1, #12
 800cede:	4119      	asrs	r1, r3
 800cee0:	4770      	bx	lr
 800cee2:	3b14      	subs	r3, #20
 800cee4:	2001      	movs	r0, #1
 800cee6:	2b1e      	cmp	r3, #30
 800cee8:	dc02      	bgt.n	800cef0 <__ulp+0x2c>
 800ceea:	2080      	movs	r0, #128	; 0x80
 800ceec:	0600      	lsls	r0, r0, #24
 800ceee:	40d8      	lsrs	r0, r3
 800cef0:	2100      	movs	r1, #0
 800cef2:	e7f5      	b.n	800cee0 <__ulp+0x1c>
 800cef4:	7ff00000 	.word	0x7ff00000
 800cef8:	fcc00000 	.word	0xfcc00000

0800cefc <__b2d>:
 800cefc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cefe:	0006      	movs	r6, r0
 800cf00:	6903      	ldr	r3, [r0, #16]
 800cf02:	3614      	adds	r6, #20
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	18f3      	adds	r3, r6, r3
 800cf08:	1f1d      	subs	r5, r3, #4
 800cf0a:	682c      	ldr	r4, [r5, #0]
 800cf0c:	000f      	movs	r7, r1
 800cf0e:	0020      	movs	r0, r4
 800cf10:	9301      	str	r3, [sp, #4]
 800cf12:	f7ff fd63 	bl	800c9dc <__hi0bits>
 800cf16:	2220      	movs	r2, #32
 800cf18:	1a12      	subs	r2, r2, r0
 800cf1a:	603a      	str	r2, [r7, #0]
 800cf1c:	0003      	movs	r3, r0
 800cf1e:	4a1c      	ldr	r2, [pc, #112]	; (800cf90 <__b2d+0x94>)
 800cf20:	280a      	cmp	r0, #10
 800cf22:	dc15      	bgt.n	800cf50 <__b2d+0x54>
 800cf24:	210b      	movs	r1, #11
 800cf26:	0027      	movs	r7, r4
 800cf28:	1a09      	subs	r1, r1, r0
 800cf2a:	40cf      	lsrs	r7, r1
 800cf2c:	433a      	orrs	r2, r7
 800cf2e:	468c      	mov	ip, r1
 800cf30:	0011      	movs	r1, r2
 800cf32:	2200      	movs	r2, #0
 800cf34:	42ae      	cmp	r6, r5
 800cf36:	d202      	bcs.n	800cf3e <__b2d+0x42>
 800cf38:	9a01      	ldr	r2, [sp, #4]
 800cf3a:	3a08      	subs	r2, #8
 800cf3c:	6812      	ldr	r2, [r2, #0]
 800cf3e:	3315      	adds	r3, #21
 800cf40:	409c      	lsls	r4, r3
 800cf42:	4663      	mov	r3, ip
 800cf44:	0027      	movs	r7, r4
 800cf46:	40da      	lsrs	r2, r3
 800cf48:	4317      	orrs	r7, r2
 800cf4a:	0038      	movs	r0, r7
 800cf4c:	b003      	add	sp, #12
 800cf4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf50:	2700      	movs	r7, #0
 800cf52:	42ae      	cmp	r6, r5
 800cf54:	d202      	bcs.n	800cf5c <__b2d+0x60>
 800cf56:	9d01      	ldr	r5, [sp, #4]
 800cf58:	3d08      	subs	r5, #8
 800cf5a:	682f      	ldr	r7, [r5, #0]
 800cf5c:	210b      	movs	r1, #11
 800cf5e:	4249      	negs	r1, r1
 800cf60:	468c      	mov	ip, r1
 800cf62:	449c      	add	ip, r3
 800cf64:	2b0b      	cmp	r3, #11
 800cf66:	d010      	beq.n	800cf8a <__b2d+0x8e>
 800cf68:	4661      	mov	r1, ip
 800cf6a:	2320      	movs	r3, #32
 800cf6c:	408c      	lsls	r4, r1
 800cf6e:	1a5b      	subs	r3, r3, r1
 800cf70:	0039      	movs	r1, r7
 800cf72:	40d9      	lsrs	r1, r3
 800cf74:	430c      	orrs	r4, r1
 800cf76:	4322      	orrs	r2, r4
 800cf78:	0011      	movs	r1, r2
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	42b5      	cmp	r5, r6
 800cf7e:	d901      	bls.n	800cf84 <__b2d+0x88>
 800cf80:	3d04      	subs	r5, #4
 800cf82:	682a      	ldr	r2, [r5, #0]
 800cf84:	4664      	mov	r4, ip
 800cf86:	40a7      	lsls	r7, r4
 800cf88:	e7dd      	b.n	800cf46 <__b2d+0x4a>
 800cf8a:	4322      	orrs	r2, r4
 800cf8c:	0011      	movs	r1, r2
 800cf8e:	e7dc      	b.n	800cf4a <__b2d+0x4e>
 800cf90:	3ff00000 	.word	0x3ff00000

0800cf94 <__d2b>:
 800cf94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf96:	2101      	movs	r1, #1
 800cf98:	0014      	movs	r4, r2
 800cf9a:	001d      	movs	r5, r3
 800cf9c:	9f08      	ldr	r7, [sp, #32]
 800cf9e:	f7ff fc5b 	bl	800c858 <_Balloc>
 800cfa2:	1e06      	subs	r6, r0, #0
 800cfa4:	d105      	bne.n	800cfb2 <__d2b+0x1e>
 800cfa6:	0032      	movs	r2, r6
 800cfa8:	4b24      	ldr	r3, [pc, #144]	; (800d03c <__d2b+0xa8>)
 800cfaa:	4825      	ldr	r0, [pc, #148]	; (800d040 <__d2b+0xac>)
 800cfac:	4925      	ldr	r1, [pc, #148]	; (800d044 <__d2b+0xb0>)
 800cfae:	f002 ff17 	bl	800fde0 <__assert_func>
 800cfb2:	032b      	lsls	r3, r5, #12
 800cfb4:	006d      	lsls	r5, r5, #1
 800cfb6:	0b1b      	lsrs	r3, r3, #12
 800cfb8:	0d6d      	lsrs	r5, r5, #21
 800cfba:	d125      	bne.n	800d008 <__d2b+0x74>
 800cfbc:	9301      	str	r3, [sp, #4]
 800cfbe:	2c00      	cmp	r4, #0
 800cfc0:	d028      	beq.n	800d014 <__d2b+0x80>
 800cfc2:	4668      	mov	r0, sp
 800cfc4:	9400      	str	r4, [sp, #0]
 800cfc6:	f7ff fd23 	bl	800ca10 <__lo0bits>
 800cfca:	9b01      	ldr	r3, [sp, #4]
 800cfcc:	9900      	ldr	r1, [sp, #0]
 800cfce:	2800      	cmp	r0, #0
 800cfd0:	d01e      	beq.n	800d010 <__d2b+0x7c>
 800cfd2:	2220      	movs	r2, #32
 800cfd4:	001c      	movs	r4, r3
 800cfd6:	1a12      	subs	r2, r2, r0
 800cfd8:	4094      	lsls	r4, r2
 800cfda:	0022      	movs	r2, r4
 800cfdc:	40c3      	lsrs	r3, r0
 800cfde:	430a      	orrs	r2, r1
 800cfe0:	6172      	str	r2, [r6, #20]
 800cfe2:	9301      	str	r3, [sp, #4]
 800cfe4:	9c01      	ldr	r4, [sp, #4]
 800cfe6:	61b4      	str	r4, [r6, #24]
 800cfe8:	1e63      	subs	r3, r4, #1
 800cfea:	419c      	sbcs	r4, r3
 800cfec:	3401      	adds	r4, #1
 800cfee:	6134      	str	r4, [r6, #16]
 800cff0:	2d00      	cmp	r5, #0
 800cff2:	d017      	beq.n	800d024 <__d2b+0x90>
 800cff4:	2435      	movs	r4, #53	; 0x35
 800cff6:	4b14      	ldr	r3, [pc, #80]	; (800d048 <__d2b+0xb4>)
 800cff8:	18ed      	adds	r5, r5, r3
 800cffa:	182d      	adds	r5, r5, r0
 800cffc:	603d      	str	r5, [r7, #0]
 800cffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d000:	1a24      	subs	r4, r4, r0
 800d002:	601c      	str	r4, [r3, #0]
 800d004:	0030      	movs	r0, r6
 800d006:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d008:	2280      	movs	r2, #128	; 0x80
 800d00a:	0352      	lsls	r2, r2, #13
 800d00c:	4313      	orrs	r3, r2
 800d00e:	e7d5      	b.n	800cfbc <__d2b+0x28>
 800d010:	6171      	str	r1, [r6, #20]
 800d012:	e7e7      	b.n	800cfe4 <__d2b+0x50>
 800d014:	a801      	add	r0, sp, #4
 800d016:	f7ff fcfb 	bl	800ca10 <__lo0bits>
 800d01a:	9b01      	ldr	r3, [sp, #4]
 800d01c:	2401      	movs	r4, #1
 800d01e:	6173      	str	r3, [r6, #20]
 800d020:	3020      	adds	r0, #32
 800d022:	e7e4      	b.n	800cfee <__d2b+0x5a>
 800d024:	4b09      	ldr	r3, [pc, #36]	; (800d04c <__d2b+0xb8>)
 800d026:	18c0      	adds	r0, r0, r3
 800d028:	4b09      	ldr	r3, [pc, #36]	; (800d050 <__d2b+0xbc>)
 800d02a:	6038      	str	r0, [r7, #0]
 800d02c:	18e3      	adds	r3, r4, r3
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	18f3      	adds	r3, r6, r3
 800d032:	6958      	ldr	r0, [r3, #20]
 800d034:	f7ff fcd2 	bl	800c9dc <__hi0bits>
 800d038:	0164      	lsls	r4, r4, #5
 800d03a:	e7e0      	b.n	800cffe <__d2b+0x6a>
 800d03c:	08014631 	.word	0x08014631
 800d040:	080146a2 	.word	0x080146a2
 800d044:	0000030f 	.word	0x0000030f
 800d048:	fffffbcd 	.word	0xfffffbcd
 800d04c:	fffffbce 	.word	0xfffffbce
 800d050:	3fffffff 	.word	0x3fffffff

0800d054 <__ratio>:
 800d054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d056:	b087      	sub	sp, #28
 800d058:	000f      	movs	r7, r1
 800d05a:	a904      	add	r1, sp, #16
 800d05c:	0006      	movs	r6, r0
 800d05e:	f7ff ff4d 	bl	800cefc <__b2d>
 800d062:	9000      	str	r0, [sp, #0]
 800d064:	9101      	str	r1, [sp, #4]
 800d066:	9c00      	ldr	r4, [sp, #0]
 800d068:	9d01      	ldr	r5, [sp, #4]
 800d06a:	0038      	movs	r0, r7
 800d06c:	a905      	add	r1, sp, #20
 800d06e:	f7ff ff45 	bl	800cefc <__b2d>
 800d072:	9002      	str	r0, [sp, #8]
 800d074:	9103      	str	r1, [sp, #12]
 800d076:	9a02      	ldr	r2, [sp, #8]
 800d078:	9b03      	ldr	r3, [sp, #12]
 800d07a:	6930      	ldr	r0, [r6, #16]
 800d07c:	6939      	ldr	r1, [r7, #16]
 800d07e:	9e04      	ldr	r6, [sp, #16]
 800d080:	1a40      	subs	r0, r0, r1
 800d082:	9905      	ldr	r1, [sp, #20]
 800d084:	0140      	lsls	r0, r0, #5
 800d086:	1a71      	subs	r1, r6, r1
 800d088:	1841      	adds	r1, r0, r1
 800d08a:	0508      	lsls	r0, r1, #20
 800d08c:	2900      	cmp	r1, #0
 800d08e:	dd07      	ble.n	800d0a0 <__ratio+0x4c>
 800d090:	9901      	ldr	r1, [sp, #4]
 800d092:	1845      	adds	r5, r0, r1
 800d094:	0020      	movs	r0, r4
 800d096:	0029      	movs	r1, r5
 800d098:	f7f3 feee 	bl	8000e78 <__aeabi_ddiv>
 800d09c:	b007      	add	sp, #28
 800d09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0a0:	9903      	ldr	r1, [sp, #12]
 800d0a2:	1a0b      	subs	r3, r1, r0
 800d0a4:	e7f6      	b.n	800d094 <__ratio+0x40>

0800d0a6 <__copybits>:
 800d0a6:	b570      	push	{r4, r5, r6, lr}
 800d0a8:	0014      	movs	r4, r2
 800d0aa:	0005      	movs	r5, r0
 800d0ac:	3901      	subs	r1, #1
 800d0ae:	6913      	ldr	r3, [r2, #16]
 800d0b0:	1149      	asrs	r1, r1, #5
 800d0b2:	3101      	adds	r1, #1
 800d0b4:	0089      	lsls	r1, r1, #2
 800d0b6:	3414      	adds	r4, #20
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	1841      	adds	r1, r0, r1
 800d0bc:	18e3      	adds	r3, r4, r3
 800d0be:	42a3      	cmp	r3, r4
 800d0c0:	d80d      	bhi.n	800d0de <__copybits+0x38>
 800d0c2:	0014      	movs	r4, r2
 800d0c4:	3411      	adds	r4, #17
 800d0c6:	2500      	movs	r5, #0
 800d0c8:	429c      	cmp	r4, r3
 800d0ca:	d803      	bhi.n	800d0d4 <__copybits+0x2e>
 800d0cc:	1a9b      	subs	r3, r3, r2
 800d0ce:	3b11      	subs	r3, #17
 800d0d0:	089b      	lsrs	r3, r3, #2
 800d0d2:	009d      	lsls	r5, r3, #2
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	1940      	adds	r0, r0, r5
 800d0d8:	4281      	cmp	r1, r0
 800d0da:	d803      	bhi.n	800d0e4 <__copybits+0x3e>
 800d0dc:	bd70      	pop	{r4, r5, r6, pc}
 800d0de:	cc40      	ldmia	r4!, {r6}
 800d0e0:	c540      	stmia	r5!, {r6}
 800d0e2:	e7ec      	b.n	800d0be <__copybits+0x18>
 800d0e4:	c008      	stmia	r0!, {r3}
 800d0e6:	e7f7      	b.n	800d0d8 <__copybits+0x32>

0800d0e8 <__any_on>:
 800d0e8:	0002      	movs	r2, r0
 800d0ea:	6900      	ldr	r0, [r0, #16]
 800d0ec:	b510      	push	{r4, lr}
 800d0ee:	3214      	adds	r2, #20
 800d0f0:	114b      	asrs	r3, r1, #5
 800d0f2:	4298      	cmp	r0, r3
 800d0f4:	db13      	blt.n	800d11e <__any_on+0x36>
 800d0f6:	dd0c      	ble.n	800d112 <__any_on+0x2a>
 800d0f8:	241f      	movs	r4, #31
 800d0fa:	0008      	movs	r0, r1
 800d0fc:	4020      	ands	r0, r4
 800d0fe:	4221      	tst	r1, r4
 800d100:	d007      	beq.n	800d112 <__any_on+0x2a>
 800d102:	0099      	lsls	r1, r3, #2
 800d104:	588c      	ldr	r4, [r1, r2]
 800d106:	0021      	movs	r1, r4
 800d108:	40c1      	lsrs	r1, r0
 800d10a:	4081      	lsls	r1, r0
 800d10c:	2001      	movs	r0, #1
 800d10e:	428c      	cmp	r4, r1
 800d110:	d104      	bne.n	800d11c <__any_on+0x34>
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	18d3      	adds	r3, r2, r3
 800d116:	4293      	cmp	r3, r2
 800d118:	d803      	bhi.n	800d122 <__any_on+0x3a>
 800d11a:	2000      	movs	r0, #0
 800d11c:	bd10      	pop	{r4, pc}
 800d11e:	0003      	movs	r3, r0
 800d120:	e7f7      	b.n	800d112 <__any_on+0x2a>
 800d122:	3b04      	subs	r3, #4
 800d124:	6819      	ldr	r1, [r3, #0]
 800d126:	2900      	cmp	r1, #0
 800d128:	d0f5      	beq.n	800d116 <__any_on+0x2e>
 800d12a:	2001      	movs	r0, #1
 800d12c:	e7f6      	b.n	800d11c <__any_on+0x34>

0800d12e <__ascii_wctomb>:
 800d12e:	0003      	movs	r3, r0
 800d130:	1e08      	subs	r0, r1, #0
 800d132:	d005      	beq.n	800d140 <__ascii_wctomb+0x12>
 800d134:	2aff      	cmp	r2, #255	; 0xff
 800d136:	d904      	bls.n	800d142 <__ascii_wctomb+0x14>
 800d138:	228a      	movs	r2, #138	; 0x8a
 800d13a:	2001      	movs	r0, #1
 800d13c:	601a      	str	r2, [r3, #0]
 800d13e:	4240      	negs	r0, r0
 800d140:	4770      	bx	lr
 800d142:	2001      	movs	r0, #1
 800d144:	700a      	strb	r2, [r1, #0]
 800d146:	e7fb      	b.n	800d140 <__ascii_wctomb+0x12>

0800d148 <_svfprintf_r>:
 800d148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d14a:	b0d9      	sub	sp, #356	; 0x164
 800d14c:	001c      	movs	r4, r3
 800d14e:	910b      	str	r1, [sp, #44]	; 0x2c
 800d150:	9208      	str	r2, [sp, #32]
 800d152:	900a      	str	r0, [sp, #40]	; 0x28
 800d154:	f002 fdae 	bl	800fcb4 <_localeconv_r>
 800d158:	6803      	ldr	r3, [r0, #0]
 800d15a:	0018      	movs	r0, r3
 800d15c:	931c      	str	r3, [sp, #112]	; 0x70
 800d15e:	f7f2 ffd1 	bl	8000104 <strlen>
 800d162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d164:	9016      	str	r0, [sp, #88]	; 0x58
 800d166:	899b      	ldrh	r3, [r3, #12]
 800d168:	061b      	lsls	r3, r3, #24
 800d16a:	d517      	bpl.n	800d19c <_svfprintf_r+0x54>
 800d16c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d113      	bne.n	800d19c <_svfprintf_r+0x54>
 800d174:	2140      	movs	r1, #64	; 0x40
 800d176:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d178:	f7fd fb3a 	bl	800a7f0 <_malloc_r>
 800d17c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d17e:	6018      	str	r0, [r3, #0]
 800d180:	6118      	str	r0, [r3, #16]
 800d182:	2800      	cmp	r0, #0
 800d184:	d107      	bne.n	800d196 <_svfprintf_r+0x4e>
 800d186:	230c      	movs	r3, #12
 800d188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d18a:	6013      	str	r3, [r2, #0]
 800d18c:	3b0d      	subs	r3, #13
 800d18e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d190:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d192:	b059      	add	sp, #356	; 0x164
 800d194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d196:	2340      	movs	r3, #64	; 0x40
 800d198:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d19a:	6153      	str	r3, [r2, #20]
 800d19c:	2300      	movs	r3, #0
 800d19e:	2200      	movs	r2, #0
 800d1a0:	932e      	str	r3, [sp, #184]	; 0xb8
 800d1a2:	932d      	str	r3, [sp, #180]	; 0xb4
 800d1a4:	930e      	str	r3, [sp, #56]	; 0x38
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	9214      	str	r2, [sp, #80]	; 0x50
 800d1aa:	9315      	str	r3, [sp, #84]	; 0x54
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	af2f      	add	r7, sp, #188	; 0xbc
 800d1b0:	972c      	str	r7, [sp, #176]	; 0xb0
 800d1b2:	931f      	str	r3, [sp, #124]	; 0x7c
 800d1b4:	931e      	str	r3, [sp, #120]	; 0x78
 800d1b6:	9312      	str	r3, [sp, #72]	; 0x48
 800d1b8:	931b      	str	r3, [sp, #108]	; 0x6c
 800d1ba:	931d      	str	r3, [sp, #116]	; 0x74
 800d1bc:	9317      	str	r3, [sp, #92]	; 0x5c
 800d1be:	9d08      	ldr	r5, [sp, #32]
 800d1c0:	782b      	ldrb	r3, [r5, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d002      	beq.n	800d1cc <_svfprintf_r+0x84>
 800d1c6:	2b25      	cmp	r3, #37	; 0x25
 800d1c8:	d000      	beq.n	800d1cc <_svfprintf_r+0x84>
 800d1ca:	e091      	b.n	800d2f0 <_svfprintf_r+0x1a8>
 800d1cc:	9b08      	ldr	r3, [sp, #32]
 800d1ce:	1aee      	subs	r6, r5, r3
 800d1d0:	429d      	cmp	r5, r3
 800d1d2:	d016      	beq.n	800d202 <_svfprintf_r+0xba>
 800d1d4:	603b      	str	r3, [r7, #0]
 800d1d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d1d8:	607e      	str	r6, [r7, #4]
 800d1da:	199b      	adds	r3, r3, r6
 800d1dc:	932e      	str	r3, [sp, #184]	; 0xb8
 800d1de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d1e0:	3708      	adds	r7, #8
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	932d      	str	r3, [sp, #180]	; 0xb4
 800d1e6:	2b07      	cmp	r3, #7
 800d1e8:	dd08      	ble.n	800d1fc <_svfprintf_r+0xb4>
 800d1ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d1ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d1ee:	aa2c      	add	r2, sp, #176	; 0xb0
 800d1f0:	f004 f8c0 	bl	8011374 <__ssprint_r>
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	d000      	beq.n	800d1fa <_svfprintf_r+0xb2>
 800d1f8:	e1cf      	b.n	800d59a <_svfprintf_r+0x452>
 800d1fa:	af2f      	add	r7, sp, #188	; 0xbc
 800d1fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d1fe:	199b      	adds	r3, r3, r6
 800d200:	9317      	str	r3, [sp, #92]	; 0x5c
 800d202:	782b      	ldrb	r3, [r5, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d101      	bne.n	800d20c <_svfprintf_r+0xc4>
 800d208:	f001 f99e 	bl	800e548 <_svfprintf_r+0x1400>
 800d20c:	221b      	movs	r2, #27
 800d20e:	2300      	movs	r3, #0
 800d210:	a91e      	add	r1, sp, #120	; 0x78
 800d212:	1852      	adds	r2, r2, r1
 800d214:	7013      	strb	r3, [r2, #0]
 800d216:	2201      	movs	r2, #1
 800d218:	001e      	movs	r6, r3
 800d21a:	4252      	negs	r2, r2
 800d21c:	3501      	adds	r5, #1
 800d21e:	9209      	str	r2, [sp, #36]	; 0x24
 800d220:	9318      	str	r3, [sp, #96]	; 0x60
 800d222:	1c6b      	adds	r3, r5, #1
 800d224:	9313      	str	r3, [sp, #76]	; 0x4c
 800d226:	782b      	ldrb	r3, [r5, #0]
 800d228:	930f      	str	r3, [sp, #60]	; 0x3c
 800d22a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d22c:	3820      	subs	r0, #32
 800d22e:	285a      	cmp	r0, #90	; 0x5a
 800d230:	d901      	bls.n	800d236 <_svfprintf_r+0xee>
 800d232:	f000 fe20 	bl	800de76 <_svfprintf_r+0xd2e>
 800d236:	f7f2 ff77 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d23a:	0078      	.short	0x0078
 800d23c:	061e061e 	.word	0x061e061e
 800d240:	061e0082 	.word	0x061e0082
 800d244:	061e061e 	.word	0x061e061e
 800d248:	061e005d 	.word	0x061e005d
 800d24c:	0084061e 	.word	0x0084061e
 800d250:	061e008c 	.word	0x061e008c
 800d254:	0091008a 	.word	0x0091008a
 800d258:	00b2061e 	.word	0x00b2061e
 800d25c:	00b400b4 	.word	0x00b400b4
 800d260:	00b400b4 	.word	0x00b400b4
 800d264:	00b400b4 	.word	0x00b400b4
 800d268:	00b400b4 	.word	0x00b400b4
 800d26c:	061e00b4 	.word	0x061e00b4
 800d270:	061e061e 	.word	0x061e061e
 800d274:	061e061e 	.word	0x061e061e
 800d278:	061e061e 	.word	0x061e061e
 800d27c:	061e013b 	.word	0x061e013b
 800d280:	00f400e0 	.word	0x00f400e0
 800d284:	013b013b 	.word	0x013b013b
 800d288:	061e013b 	.word	0x061e013b
 800d28c:	061e061e 	.word	0x061e061e
 800d290:	00c7061e 	.word	0x00c7061e
 800d294:	061e061e 	.word	0x061e061e
 800d298:	061e04c7 	.word	0x061e04c7
 800d29c:	061e061e 	.word	0x061e061e
 800d2a0:	061e050a 	.word	0x061e050a
 800d2a4:	061e052a 	.word	0x061e052a
 800d2a8:	055c061e 	.word	0x055c061e
 800d2ac:	061e061e 	.word	0x061e061e
 800d2b0:	061e061e 	.word	0x061e061e
 800d2b4:	061e061e 	.word	0x061e061e
 800d2b8:	061e061e 	.word	0x061e061e
 800d2bc:	061e013b 	.word	0x061e013b
 800d2c0:	00f600e0 	.word	0x00f600e0
 800d2c4:	013b013b 	.word	0x013b013b
 800d2c8:	00c9013b 	.word	0x00c9013b
 800d2cc:	00dc00f6 	.word	0x00dc00f6
 800d2d0:	00d5061e 	.word	0x00d5061e
 800d2d4:	04a7061e 	.word	0x04a7061e
 800d2d8:	04fa04c9 	.word	0x04fa04c9
 800d2dc:	061e00dc 	.word	0x061e00dc
 800d2e0:	0080050a 	.word	0x0080050a
 800d2e4:	061e052c 	.word	0x061e052c
 800d2e8:	057c061e 	.word	0x057c061e
 800d2ec:	0080061e 	.word	0x0080061e
 800d2f0:	3501      	adds	r5, #1
 800d2f2:	e765      	b.n	800d1c0 <_svfprintf_r+0x78>
 800d2f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d2f6:	f002 fcdd 	bl	800fcb4 <_localeconv_r>
 800d2fa:	6843      	ldr	r3, [r0, #4]
 800d2fc:	0018      	movs	r0, r3
 800d2fe:	931d      	str	r3, [sp, #116]	; 0x74
 800d300:	f7f2 ff00 	bl	8000104 <strlen>
 800d304:	901b      	str	r0, [sp, #108]	; 0x6c
 800d306:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d308:	f002 fcd4 	bl	800fcb4 <_localeconv_r>
 800d30c:	6883      	ldr	r3, [r0, #8]
 800d30e:	9312      	str	r3, [sp, #72]	; 0x48
 800d310:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d312:	2b00      	cmp	r3, #0
 800d314:	d011      	beq.n	800d33a <_svfprintf_r+0x1f2>
 800d316:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00e      	beq.n	800d33a <_svfprintf_r+0x1f2>
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d00b      	beq.n	800d33a <_svfprintf_r+0x1f2>
 800d322:	2380      	movs	r3, #128	; 0x80
 800d324:	00db      	lsls	r3, r3, #3
 800d326:	431e      	orrs	r6, r3
 800d328:	e007      	b.n	800d33a <_svfprintf_r+0x1f2>
 800d32a:	231b      	movs	r3, #27
 800d32c:	aa1e      	add	r2, sp, #120	; 0x78
 800d32e:	189b      	adds	r3, r3, r2
 800d330:	781a      	ldrb	r2, [r3, #0]
 800d332:	2a00      	cmp	r2, #0
 800d334:	d101      	bne.n	800d33a <_svfprintf_r+0x1f2>
 800d336:	3220      	adds	r2, #32
 800d338:	701a      	strb	r2, [r3, #0]
 800d33a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d33c:	e771      	b.n	800d222 <_svfprintf_r+0xda>
 800d33e:	2301      	movs	r3, #1
 800d340:	e7f1      	b.n	800d326 <_svfprintf_r+0x1de>
 800d342:	cc08      	ldmia	r4!, {r3}
 800d344:	9318      	str	r3, [sp, #96]	; 0x60
 800d346:	2b00      	cmp	r3, #0
 800d348:	daf7      	bge.n	800d33a <_svfprintf_r+0x1f2>
 800d34a:	425b      	negs	r3, r3
 800d34c:	9318      	str	r3, [sp, #96]	; 0x60
 800d34e:	2304      	movs	r3, #4
 800d350:	e7e9      	b.n	800d326 <_svfprintf_r+0x1de>
 800d352:	231b      	movs	r3, #27
 800d354:	aa1e      	add	r2, sp, #120	; 0x78
 800d356:	189b      	adds	r3, r3, r2
 800d358:	222b      	movs	r2, #43	; 0x2b
 800d35a:	e7ed      	b.n	800d338 <_svfprintf_r+0x1f0>
 800d35c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d35e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d360:	7812      	ldrb	r2, [r2, #0]
 800d362:	3301      	adds	r3, #1
 800d364:	920f      	str	r2, [sp, #60]	; 0x3c
 800d366:	2a2a      	cmp	r2, #42	; 0x2a
 800d368:	d010      	beq.n	800d38c <_svfprintf_r+0x244>
 800d36a:	2200      	movs	r2, #0
 800d36c:	9209      	str	r2, [sp, #36]	; 0x24
 800d36e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d370:	9313      	str	r3, [sp, #76]	; 0x4c
 800d372:	3a30      	subs	r2, #48	; 0x30
 800d374:	2a09      	cmp	r2, #9
 800d376:	d900      	bls.n	800d37a <_svfprintf_r+0x232>
 800d378:	e757      	b.n	800d22a <_svfprintf_r+0xe2>
 800d37a:	200a      	movs	r0, #10
 800d37c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d37e:	4341      	muls	r1, r0
 800d380:	188a      	adds	r2, r1, r2
 800d382:	9209      	str	r2, [sp, #36]	; 0x24
 800d384:	781a      	ldrb	r2, [r3, #0]
 800d386:	3301      	adds	r3, #1
 800d388:	920f      	str	r2, [sp, #60]	; 0x3c
 800d38a:	e7f0      	b.n	800d36e <_svfprintf_r+0x226>
 800d38c:	cc04      	ldmia	r4!, {r2}
 800d38e:	9209      	str	r2, [sp, #36]	; 0x24
 800d390:	2a00      	cmp	r2, #0
 800d392:	da02      	bge.n	800d39a <_svfprintf_r+0x252>
 800d394:	2201      	movs	r2, #1
 800d396:	4252      	negs	r2, r2
 800d398:	9209      	str	r2, [sp, #36]	; 0x24
 800d39a:	9313      	str	r3, [sp, #76]	; 0x4c
 800d39c:	e7cd      	b.n	800d33a <_svfprintf_r+0x1f2>
 800d39e:	2380      	movs	r3, #128	; 0x80
 800d3a0:	e7c1      	b.n	800d326 <_svfprintf_r+0x1de>
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d3a6:	9218      	str	r2, [sp, #96]	; 0x60
 800d3a8:	210a      	movs	r1, #10
 800d3aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d3ac:	434a      	muls	r2, r1
 800d3ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d3b0:	3930      	subs	r1, #48	; 0x30
 800d3b2:	188a      	adds	r2, r1, r2
 800d3b4:	9218      	str	r2, [sp, #96]	; 0x60
 800d3b6:	001a      	movs	r2, r3
 800d3b8:	7812      	ldrb	r2, [r2, #0]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	920f      	str	r2, [sp, #60]	; 0x3c
 800d3be:	3a30      	subs	r2, #48	; 0x30
 800d3c0:	9313      	str	r3, [sp, #76]	; 0x4c
 800d3c2:	2a09      	cmp	r2, #9
 800d3c4:	d9f0      	bls.n	800d3a8 <_svfprintf_r+0x260>
 800d3c6:	e730      	b.n	800d22a <_svfprintf_r+0xe2>
 800d3c8:	2308      	movs	r3, #8
 800d3ca:	e7ac      	b.n	800d326 <_svfprintf_r+0x1de>
 800d3cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	2b68      	cmp	r3, #104	; 0x68
 800d3d2:	d105      	bne.n	800d3e0 <_svfprintf_r+0x298>
 800d3d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	9313      	str	r3, [sp, #76]	; 0x4c
 800d3da:	2380      	movs	r3, #128	; 0x80
 800d3dc:	009b      	lsls	r3, r3, #2
 800d3de:	e7a2      	b.n	800d326 <_svfprintf_r+0x1de>
 800d3e0:	2340      	movs	r3, #64	; 0x40
 800d3e2:	e7a0      	b.n	800d326 <_svfprintf_r+0x1de>
 800d3e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	2b6c      	cmp	r3, #108	; 0x6c
 800d3ea:	d104      	bne.n	800d3f6 <_svfprintf_r+0x2ae>
 800d3ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	9313      	str	r3, [sp, #76]	; 0x4c
 800d3f2:	2320      	movs	r3, #32
 800d3f4:	e797      	b.n	800d326 <_svfprintf_r+0x1de>
 800d3f6:	2310      	movs	r3, #16
 800d3f8:	e795      	b.n	800d326 <_svfprintf_r+0x1de>
 800d3fa:	0021      	movs	r1, r4
 800d3fc:	c904      	ldmia	r1!, {r2}
 800d3fe:	ab3f      	add	r3, sp, #252	; 0xfc
 800d400:	910d      	str	r1, [sp, #52]	; 0x34
 800d402:	211b      	movs	r1, #27
 800d404:	701a      	strb	r2, [r3, #0]
 800d406:	2200      	movs	r2, #0
 800d408:	a81e      	add	r0, sp, #120	; 0x78
 800d40a:	1809      	adds	r1, r1, r0
 800d40c:	700a      	strb	r2, [r1, #0]
 800d40e:	920c      	str	r2, [sp, #48]	; 0x30
 800d410:	3201      	adds	r2, #1
 800d412:	9209      	str	r2, [sp, #36]	; 0x24
 800d414:	2200      	movs	r2, #0
 800d416:	9308      	str	r3, [sp, #32]
 800d418:	0015      	movs	r5, r2
 800d41a:	9219      	str	r2, [sp, #100]	; 0x64
 800d41c:	9210      	str	r2, [sp, #64]	; 0x40
 800d41e:	9211      	str	r2, [sp, #68]	; 0x44
 800d420:	e1f1      	b.n	800d806 <_svfprintf_r+0x6be>
 800d422:	2310      	movs	r3, #16
 800d424:	431e      	orrs	r6, r3
 800d426:	06b3      	lsls	r3, r6, #26
 800d428:	d531      	bpl.n	800d48e <_svfprintf_r+0x346>
 800d42a:	2307      	movs	r3, #7
 800d42c:	3407      	adds	r4, #7
 800d42e:	439c      	bics	r4, r3
 800d430:	0022      	movs	r2, r4
 800d432:	ca18      	ldmia	r2!, {r3, r4}
 800d434:	9306      	str	r3, [sp, #24]
 800d436:	9407      	str	r4, [sp, #28]
 800d438:	920d      	str	r2, [sp, #52]	; 0x34
 800d43a:	9a07      	ldr	r2, [sp, #28]
 800d43c:	2301      	movs	r3, #1
 800d43e:	2a00      	cmp	r2, #0
 800d440:	da0b      	bge.n	800d45a <_svfprintf_r+0x312>
 800d442:	9c06      	ldr	r4, [sp, #24]
 800d444:	9d07      	ldr	r5, [sp, #28]
 800d446:	2200      	movs	r2, #0
 800d448:	4261      	negs	r1, r4
 800d44a:	41aa      	sbcs	r2, r5
 800d44c:	9106      	str	r1, [sp, #24]
 800d44e:	9207      	str	r2, [sp, #28]
 800d450:	221b      	movs	r2, #27
 800d452:	a91e      	add	r1, sp, #120	; 0x78
 800d454:	1852      	adds	r2, r2, r1
 800d456:	212d      	movs	r1, #45	; 0x2d
 800d458:	7011      	strb	r1, [r2, #0]
 800d45a:	9907      	ldr	r1, [sp, #28]
 800d45c:	9a06      	ldr	r2, [sp, #24]
 800d45e:	430a      	orrs	r2, r1
 800d460:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d462:	3101      	adds	r1, #1
 800d464:	d101      	bne.n	800d46a <_svfprintf_r+0x322>
 800d466:	f001 f87b 	bl	800e560 <_svfprintf_r+0x1418>
 800d46a:	2180      	movs	r1, #128	; 0x80
 800d46c:	0034      	movs	r4, r6
 800d46e:	438c      	bics	r4, r1
 800d470:	2a00      	cmp	r2, #0
 800d472:	d001      	beq.n	800d478 <_svfprintf_r+0x330>
 800d474:	f001 f879 	bl	800e56a <_svfprintf_r+0x1422>
 800d478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d47a:	2a00      	cmp	r2, #0
 800d47c:	d101      	bne.n	800d482 <_svfprintf_r+0x33a>
 800d47e:	f000 fcef 	bl	800de60 <_svfprintf_r+0xd18>
 800d482:	2b01      	cmp	r3, #1
 800d484:	d001      	beq.n	800d48a <_svfprintf_r+0x342>
 800d486:	f001 f874 	bl	800e572 <_svfprintf_r+0x142a>
 800d48a:	f000 fc79 	bl	800dd80 <_svfprintf_r+0xc38>
 800d48e:	0022      	movs	r2, r4
 800d490:	ca08      	ldmia	r2!, {r3}
 800d492:	920d      	str	r2, [sp, #52]	; 0x34
 800d494:	06f2      	lsls	r2, r6, #27
 800d496:	d503      	bpl.n	800d4a0 <_svfprintf_r+0x358>
 800d498:	9306      	str	r3, [sp, #24]
 800d49a:	17db      	asrs	r3, r3, #31
 800d49c:	9307      	str	r3, [sp, #28]
 800d49e:	e7cc      	b.n	800d43a <_svfprintf_r+0x2f2>
 800d4a0:	0672      	lsls	r2, r6, #25
 800d4a2:	d501      	bpl.n	800d4a8 <_svfprintf_r+0x360>
 800d4a4:	b21b      	sxth	r3, r3
 800d4a6:	e7f7      	b.n	800d498 <_svfprintf_r+0x350>
 800d4a8:	05b2      	lsls	r2, r6, #22
 800d4aa:	d5f5      	bpl.n	800d498 <_svfprintf_r+0x350>
 800d4ac:	b25b      	sxtb	r3, r3
 800d4ae:	e7f3      	b.n	800d498 <_svfprintf_r+0x350>
 800d4b0:	2307      	movs	r3, #7
 800d4b2:	3407      	adds	r4, #7
 800d4b4:	439c      	bics	r4, r3
 800d4b6:	0022      	movs	r2, r4
 800d4b8:	ca18      	ldmia	r2!, {r3, r4}
 800d4ba:	920d      	str	r2, [sp, #52]	; 0x34
 800d4bc:	2201      	movs	r2, #1
 800d4be:	9314      	str	r3, [sp, #80]	; 0x50
 800d4c0:	9415      	str	r4, [sp, #84]	; 0x54
 800d4c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d4c4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d4c6:	005c      	lsls	r4, r3, #1
 800d4c8:	0864      	lsrs	r4, r4, #1
 800d4ca:	0028      	movs	r0, r5
 800d4cc:	0021      	movs	r1, r4
 800d4ce:	4b3e      	ldr	r3, [pc, #248]	; (800d5c8 <_svfprintf_r+0x480>)
 800d4d0:	4252      	negs	r2, r2
 800d4d2:	f7f4 ff0f 	bl	80022f4 <__aeabi_dcmpun>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d126      	bne.n	800d528 <_svfprintf_r+0x3e0>
 800d4da:	2201      	movs	r2, #1
 800d4dc:	0028      	movs	r0, r5
 800d4de:	0021      	movs	r1, r4
 800d4e0:	4b39      	ldr	r3, [pc, #228]	; (800d5c8 <_svfprintf_r+0x480>)
 800d4e2:	4252      	negs	r2, r2
 800d4e4:	f7f2 ffc0 	bl	8000468 <__aeabi_dcmple>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	d11d      	bne.n	800d528 <_svfprintf_r+0x3e0>
 800d4ec:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d4ee:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	f7f2 ffae 	bl	8000454 <__aeabi_dcmplt>
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d004      	beq.n	800d506 <_svfprintf_r+0x3be>
 800d4fc:	231b      	movs	r3, #27
 800d4fe:	aa1e      	add	r2, sp, #120	; 0x78
 800d500:	189b      	adds	r3, r3, r2
 800d502:	222d      	movs	r2, #45	; 0x2d
 800d504:	701a      	strb	r2, [r3, #0]
 800d506:	4b31      	ldr	r3, [pc, #196]	; (800d5cc <_svfprintf_r+0x484>)
 800d508:	9308      	str	r3, [sp, #32]
 800d50a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d50c:	2b47      	cmp	r3, #71	; 0x47
 800d50e:	dd01      	ble.n	800d514 <_svfprintf_r+0x3cc>
 800d510:	4b2f      	ldr	r3, [pc, #188]	; (800d5d0 <_svfprintf_r+0x488>)
 800d512:	9308      	str	r3, [sp, #32]
 800d514:	2380      	movs	r3, #128	; 0x80
 800d516:	439e      	bics	r6, r3
 800d518:	2300      	movs	r3, #0
 800d51a:	930c      	str	r3, [sp, #48]	; 0x30
 800d51c:	3303      	adds	r3, #3
 800d51e:	9309      	str	r3, [sp, #36]	; 0x24
 800d520:	2300      	movs	r3, #0
 800d522:	9319      	str	r3, [sp, #100]	; 0x64
 800d524:	f000 fc78 	bl	800de18 <_svfprintf_r+0xcd0>
 800d528:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d52a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d52c:	0010      	movs	r0, r2
 800d52e:	0019      	movs	r1, r3
 800d530:	f7f4 fee0 	bl	80022f4 <__aeabi_dcmpun>
 800d534:	2800      	cmp	r0, #0
 800d536:	d00e      	beq.n	800d556 <_svfprintf_r+0x40e>
 800d538:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	da04      	bge.n	800d548 <_svfprintf_r+0x400>
 800d53e:	231b      	movs	r3, #27
 800d540:	aa1e      	add	r2, sp, #120	; 0x78
 800d542:	189b      	adds	r3, r3, r2
 800d544:	222d      	movs	r2, #45	; 0x2d
 800d546:	701a      	strb	r2, [r3, #0]
 800d548:	4b22      	ldr	r3, [pc, #136]	; (800d5d4 <_svfprintf_r+0x48c>)
 800d54a:	9308      	str	r3, [sp, #32]
 800d54c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d54e:	2b47      	cmp	r3, #71	; 0x47
 800d550:	dde0      	ble.n	800d514 <_svfprintf_r+0x3cc>
 800d552:	4b21      	ldr	r3, [pc, #132]	; (800d5d8 <_svfprintf_r+0x490>)
 800d554:	e7dd      	b.n	800d512 <_svfprintf_r+0x3ca>
 800d556:	2320      	movs	r3, #32
 800d558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d55a:	439a      	bics	r2, r3
 800d55c:	9210      	str	r2, [sp, #64]	; 0x40
 800d55e:	2a41      	cmp	r2, #65	; 0x41
 800d560:	d123      	bne.n	800d5aa <_svfprintf_r+0x462>
 800d562:	2230      	movs	r2, #48	; 0x30
 800d564:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d566:	ab25      	add	r3, sp, #148	; 0x94
 800d568:	701a      	strb	r2, [r3, #0]
 800d56a:	3248      	adds	r2, #72	; 0x48
 800d56c:	2961      	cmp	r1, #97	; 0x61
 800d56e:	d000      	beq.n	800d572 <_svfprintf_r+0x42a>
 800d570:	3a20      	subs	r2, #32
 800d572:	705a      	strb	r2, [r3, #1]
 800d574:	2302      	movs	r3, #2
 800d576:	431e      	orrs	r6, r3
 800d578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d57a:	2b63      	cmp	r3, #99	; 0x63
 800d57c:	dd2e      	ble.n	800d5dc <_svfprintf_r+0x494>
 800d57e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d580:	1c59      	adds	r1, r3, #1
 800d582:	f7fd f935 	bl	800a7f0 <_malloc_r>
 800d586:	9008      	str	r0, [sp, #32]
 800d588:	2800      	cmp	r0, #0
 800d58a:	d000      	beq.n	800d58e <_svfprintf_r+0x446>
 800d58c:	e216      	b.n	800d9bc <_svfprintf_r+0x874>
 800d58e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d590:	899a      	ldrh	r2, [r3, #12]
 800d592:	2340      	movs	r3, #64	; 0x40
 800d594:	4313      	orrs	r3, r2
 800d596:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d598:	8193      	strh	r3, [r2, #12]
 800d59a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d59c:	899b      	ldrh	r3, [r3, #12]
 800d59e:	065b      	lsls	r3, r3, #25
 800d5a0:	d400      	bmi.n	800d5a4 <_svfprintf_r+0x45c>
 800d5a2:	e5f5      	b.n	800d190 <_svfprintf_r+0x48>
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	425b      	negs	r3, r3
 800d5a8:	e5f1      	b.n	800d18e <_svfprintf_r+0x46>
 800d5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5ac:	900c      	str	r0, [sp, #48]	; 0x30
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	d100      	bne.n	800d5b4 <_svfprintf_r+0x46c>
 800d5b2:	e206      	b.n	800d9c2 <_svfprintf_r+0x87a>
 800d5b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5b6:	2b47      	cmp	r3, #71	; 0x47
 800d5b8:	d114      	bne.n	800d5e4 <_svfprintf_r+0x49c>
 800d5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d111      	bne.n	800d5e4 <_svfprintf_r+0x49c>
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	9309      	str	r3, [sp, #36]	; 0x24
 800d5c4:	e00e      	b.n	800d5e4 <_svfprintf_r+0x49c>
 800d5c6:	46c0      	nop			; (mov r8, r8)
 800d5c8:	7fefffff 	.word	0x7fefffff
 800d5cc:	080147fc 	.word	0x080147fc
 800d5d0:	08014800 	.word	0x08014800
 800d5d4:	08014804 	.word	0x08014804
 800d5d8:	08014808 	.word	0x08014808
 800d5dc:	2300      	movs	r3, #0
 800d5de:	930c      	str	r3, [sp, #48]	; 0x30
 800d5e0:	ab3f      	add	r3, sp, #252	; 0xfc
 800d5e2:	9308      	str	r3, [sp, #32]
 800d5e4:	2380      	movs	r3, #128	; 0x80
 800d5e6:	005b      	lsls	r3, r3, #1
 800d5e8:	4333      	orrs	r3, r6
 800d5ea:	931a      	str	r3, [sp, #104]	; 0x68
 800d5ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5ee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	db00      	blt.n	800d5f6 <_svfprintf_r+0x4ae>
 800d5f4:	e1e7      	b.n	800d9c6 <_svfprintf_r+0x87e>
 800d5f6:	2280      	movs	r2, #128	; 0x80
 800d5f8:	0612      	lsls	r2, r2, #24
 800d5fa:	4694      	mov	ip, r2
 800d5fc:	4463      	add	r3, ip
 800d5fe:	930e      	str	r3, [sp, #56]	; 0x38
 800d600:	232d      	movs	r3, #45	; 0x2d
 800d602:	9322      	str	r3, [sp, #136]	; 0x88
 800d604:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d606:	2b41      	cmp	r3, #65	; 0x41
 800d608:	d000      	beq.n	800d60c <_svfprintf_r+0x4c4>
 800d60a:	e1f5      	b.n	800d9f8 <_svfprintf_r+0x8b0>
 800d60c:	0028      	movs	r0, r5
 800d60e:	aa26      	add	r2, sp, #152	; 0x98
 800d610:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d612:	f002 fb73 	bl	800fcfc <frexp>
 800d616:	23ff      	movs	r3, #255	; 0xff
 800d618:	2200      	movs	r2, #0
 800d61a:	059b      	lsls	r3, r3, #22
 800d61c:	f7f4 f826 	bl	800166c <__aeabi_dmul>
 800d620:	2200      	movs	r2, #0
 800d622:	2300      	movs	r3, #0
 800d624:	0004      	movs	r4, r0
 800d626:	000d      	movs	r5, r1
 800d628:	f7f2 ff0e 	bl	8000448 <__aeabi_dcmpeq>
 800d62c:	2800      	cmp	r0, #0
 800d62e:	d001      	beq.n	800d634 <_svfprintf_r+0x4ec>
 800d630:	2301      	movs	r3, #1
 800d632:	9326      	str	r3, [sp, #152]	; 0x98
 800d634:	4bda      	ldr	r3, [pc, #872]	; (800d9a0 <_svfprintf_r+0x858>)
 800d636:	9319      	str	r3, [sp, #100]	; 0x64
 800d638:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d63a:	2b61      	cmp	r3, #97	; 0x61
 800d63c:	d001      	beq.n	800d642 <_svfprintf_r+0x4fa>
 800d63e:	4bd9      	ldr	r3, [pc, #868]	; (800d9a4 <_svfprintf_r+0x85c>)
 800d640:	9319      	str	r3, [sp, #100]	; 0x64
 800d642:	9b08      	ldr	r3, [sp, #32]
 800d644:	930e      	str	r3, [sp, #56]	; 0x38
 800d646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d648:	3b01      	subs	r3, #1
 800d64a:	9311      	str	r3, [sp, #68]	; 0x44
 800d64c:	2200      	movs	r2, #0
 800d64e:	4bd6      	ldr	r3, [pc, #856]	; (800d9a8 <_svfprintf_r+0x860>)
 800d650:	0020      	movs	r0, r4
 800d652:	0029      	movs	r1, r5
 800d654:	f7f4 f80a 	bl	800166c <__aeabi_dmul>
 800d658:	000d      	movs	r5, r1
 800d65a:	0004      	movs	r4, r0
 800d65c:	f7f4 fe68 	bl	8002330 <__aeabi_d2iz>
 800d660:	9021      	str	r0, [sp, #132]	; 0x84
 800d662:	f7f4 fe9b 	bl	800239c <__aeabi_i2d>
 800d666:	0002      	movs	r2, r0
 800d668:	000b      	movs	r3, r1
 800d66a:	0020      	movs	r0, r4
 800d66c:	0029      	movs	r1, r5
 800d66e:	f7f4 fabf 	bl	8001bf0 <__aeabi_dsub>
 800d672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d674:	000d      	movs	r5, r1
 800d676:	001a      	movs	r2, r3
 800d678:	3201      	adds	r2, #1
 800d67a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d67c:	920e      	str	r2, [sp, #56]	; 0x38
 800d67e:	9223      	str	r2, [sp, #140]	; 0x8c
 800d680:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d682:	0004      	movs	r4, r0
 800d684:	5c52      	ldrb	r2, [r2, r1]
 800d686:	701a      	strb	r2, [r3, #0]
 800d688:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d68a:	9320      	str	r3, [sp, #128]	; 0x80
 800d68c:	3301      	adds	r3, #1
 800d68e:	d00a      	beq.n	800d6a6 <_svfprintf_r+0x55e>
 800d690:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d692:	2200      	movs	r2, #0
 800d694:	3b01      	subs	r3, #1
 800d696:	9311      	str	r3, [sp, #68]	; 0x44
 800d698:	0020      	movs	r0, r4
 800d69a:	2300      	movs	r3, #0
 800d69c:	0029      	movs	r1, r5
 800d69e:	f7f2 fed3 	bl	8000448 <__aeabi_dcmpeq>
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	d0d2      	beq.n	800d64c <_svfprintf_r+0x504>
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	0020      	movs	r0, r4
 800d6aa:	0029      	movs	r1, r5
 800d6ac:	4bbf      	ldr	r3, [pc, #764]	; (800d9ac <_svfprintf_r+0x864>)
 800d6ae:	f7f2 fee5 	bl	800047c <__aeabi_dcmpgt>
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	d10c      	bne.n	800d6d0 <_svfprintf_r+0x588>
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	0020      	movs	r0, r4
 800d6ba:	0029      	movs	r1, r5
 800d6bc:	4bbb      	ldr	r3, [pc, #748]	; (800d9ac <_svfprintf_r+0x864>)
 800d6be:	f7f2 fec3 	bl	8000448 <__aeabi_dcmpeq>
 800d6c2:	2800      	cmp	r0, #0
 800d6c4:	d100      	bne.n	800d6c8 <_svfprintf_r+0x580>
 800d6c6:	e191      	b.n	800d9ec <_svfprintf_r+0x8a4>
 800d6c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6ca:	07db      	lsls	r3, r3, #31
 800d6cc:	d400      	bmi.n	800d6d0 <_svfprintf_r+0x588>
 800d6ce:	e18d      	b.n	800d9ec <_svfprintf_r+0x8a4>
 800d6d0:	2030      	movs	r0, #48	; 0x30
 800d6d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6d4:	932a      	str	r3, [sp, #168]	; 0xa8
 800d6d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d6d8:	7bdb      	ldrb	r3, [r3, #15]
 800d6da:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d6dc:	3a01      	subs	r2, #1
 800d6de:	922a      	str	r2, [sp, #168]	; 0xa8
 800d6e0:	7811      	ldrb	r1, [r2, #0]
 800d6e2:	4299      	cmp	r1, r3
 800d6e4:	d100      	bne.n	800d6e8 <_svfprintf_r+0x5a0>
 800d6e6:	e171      	b.n	800d9cc <_svfprintf_r+0x884>
 800d6e8:	1c4b      	adds	r3, r1, #1
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	2939      	cmp	r1, #57	; 0x39
 800d6ee:	d101      	bne.n	800d6f4 <_svfprintf_r+0x5ac>
 800d6f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d6f2:	7a9b      	ldrb	r3, [r3, #10]
 800d6f4:	7013      	strb	r3, [r2, #0]
 800d6f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d6f8:	9a08      	ldr	r2, [sp, #32]
 800d6fa:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800d6fc:	1a9b      	subs	r3, r3, r2
 800d6fe:	930e      	str	r3, [sp, #56]	; 0x38
 800d700:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d702:	2b47      	cmp	r3, #71	; 0x47
 800d704:	d000      	beq.n	800d708 <_svfprintf_r+0x5c0>
 800d706:	e1c4      	b.n	800da92 <_svfprintf_r+0x94a>
 800d708:	1ceb      	adds	r3, r5, #3
 800d70a:	db03      	blt.n	800d714 <_svfprintf_r+0x5cc>
 800d70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d70e:	42ab      	cmp	r3, r5
 800d710:	db00      	blt.n	800d714 <_svfprintf_r+0x5cc>
 800d712:	e1e6      	b.n	800dae2 <_svfprintf_r+0x99a>
 800d714:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d716:	3b02      	subs	r3, #2
 800d718:	930f      	str	r3, [sp, #60]	; 0x3c
 800d71a:	223c      	movs	r2, #60	; 0x3c
 800d71c:	466b      	mov	r3, sp
 800d71e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d720:	189b      	adds	r3, r3, r2
 800d722:	1e6c      	subs	r4, r5, #1
 800d724:	3a1c      	subs	r2, #28
 800d726:	2000      	movs	r0, #0
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	9426      	str	r4, [sp, #152]	; 0x98
 800d72c:	4391      	bics	r1, r2
 800d72e:	2941      	cmp	r1, #65	; 0x41
 800d730:	d102      	bne.n	800d738 <_svfprintf_r+0x5f0>
 800d732:	330f      	adds	r3, #15
 800d734:	b2db      	uxtb	r3, r3
 800d736:	3001      	adds	r0, #1
 800d738:	a928      	add	r1, sp, #160	; 0xa0
 800d73a:	700b      	strb	r3, [r1, #0]
 800d73c:	232b      	movs	r3, #43	; 0x2b
 800d73e:	2c00      	cmp	r4, #0
 800d740:	da02      	bge.n	800d748 <_svfprintf_r+0x600>
 800d742:	2401      	movs	r4, #1
 800d744:	3302      	adds	r3, #2
 800d746:	1b64      	subs	r4, r4, r5
 800d748:	704b      	strb	r3, [r1, #1]
 800d74a:	2c09      	cmp	r4, #9
 800d74c:	dc00      	bgt.n	800d750 <_svfprintf_r+0x608>
 800d74e:	e1ba      	b.n	800dac6 <_svfprintf_r+0x97e>
 800d750:	2337      	movs	r3, #55	; 0x37
 800d752:	250a      	movs	r5, #10
 800d754:	aa1e      	add	r2, sp, #120	; 0x78
 800d756:	189b      	adds	r3, r3, r2
 800d758:	9310      	str	r3, [sp, #64]	; 0x40
 800d75a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d75c:	0020      	movs	r0, r4
 800d75e:	9309      	str	r3, [sp, #36]	; 0x24
 800d760:	0029      	movs	r1, r5
 800d762:	3b01      	subs	r3, #1
 800d764:	9310      	str	r3, [sp, #64]	; 0x40
 800d766:	f7f2 fe59 	bl	800041c <__aeabi_idivmod>
 800d76a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d76c:	3130      	adds	r1, #48	; 0x30
 800d76e:	7019      	strb	r1, [r3, #0]
 800d770:	0020      	movs	r0, r4
 800d772:	0029      	movs	r1, r5
 800d774:	9411      	str	r4, [sp, #68]	; 0x44
 800d776:	f7f2 fd6b 	bl	8000250 <__divsi3>
 800d77a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d77c:	0004      	movs	r4, r0
 800d77e:	2b63      	cmp	r3, #99	; 0x63
 800d780:	dceb      	bgt.n	800d75a <_svfprintf_r+0x612>
 800d782:	222a      	movs	r2, #42	; 0x2a
 800d784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d786:	a81e      	add	r0, sp, #120	; 0x78
 800d788:	1e99      	subs	r1, r3, #2
 800d78a:	1812      	adds	r2, r2, r0
 800d78c:	2037      	movs	r0, #55	; 0x37
 800d78e:	000b      	movs	r3, r1
 800d790:	3430      	adds	r4, #48	; 0x30
 800d792:	700c      	strb	r4, [r1, #0]
 800d794:	ac1e      	add	r4, sp, #120	; 0x78
 800d796:	1900      	adds	r0, r0, r4
 800d798:	4283      	cmp	r3, r0
 800d79a:	d200      	bcs.n	800d79e <_svfprintf_r+0x656>
 800d79c:	e18e      	b.n	800dabc <_svfprintf_r+0x974>
 800d79e:	2300      	movs	r3, #0
 800d7a0:	4281      	cmp	r1, r0
 800d7a2:	d804      	bhi.n	800d7ae <_svfprintf_r+0x666>
 800d7a4:	aa1e      	add	r2, sp, #120	; 0x78
 800d7a6:	3339      	adds	r3, #57	; 0x39
 800d7a8:	189b      	adds	r3, r3, r2
 800d7aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7ac:	1a9b      	subs	r3, r3, r2
 800d7ae:	222a      	movs	r2, #42	; 0x2a
 800d7b0:	a91e      	add	r1, sp, #120	; 0x78
 800d7b2:	1852      	adds	r2, r2, r1
 800d7b4:	18d3      	adds	r3, r2, r3
 800d7b6:	aa28      	add	r2, sp, #160	; 0xa0
 800d7b8:	1a9b      	subs	r3, r3, r2
 800d7ba:	931e      	str	r3, [sp, #120]	; 0x78
 800d7bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d7be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7c0:	4694      	mov	ip, r2
 800d7c2:	4463      	add	r3, ip
 800d7c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	dc01      	bgt.n	800d7d0 <_svfprintf_r+0x688>
 800d7cc:	07f3      	lsls	r3, r6, #31
 800d7ce:	d504      	bpl.n	800d7da <_svfprintf_r+0x692>
 800d7d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7d4:	4694      	mov	ip, r2
 800d7d6:	4463      	add	r3, ip
 800d7d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d7da:	2280      	movs	r2, #128	; 0x80
 800d7dc:	4b74      	ldr	r3, [pc, #464]	; (800d9b0 <_svfprintf_r+0x868>)
 800d7de:	0052      	lsls	r2, r2, #1
 800d7e0:	4033      	ands	r3, r6
 800d7e2:	431a      	orrs	r2, r3
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	001d      	movs	r5, r3
 800d7e8:	921a      	str	r2, [sp, #104]	; 0x68
 800d7ea:	9310      	str	r3, [sp, #64]	; 0x40
 800d7ec:	9311      	str	r3, [sp, #68]	; 0x44
 800d7ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d7f0:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d7f2:	9319      	str	r3, [sp, #100]	; 0x64
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d006      	beq.n	800d806 <_svfprintf_r+0x6be>
 800d7f8:	231b      	movs	r3, #27
 800d7fa:	aa1e      	add	r2, sp, #120	; 0x78
 800d7fc:	189b      	adds	r3, r3, r2
 800d7fe:	222d      	movs	r2, #45	; 0x2d
 800d800:	701a      	strb	r2, [r3, #0]
 800d802:	2300      	movs	r3, #0
 800d804:	9319      	str	r3, [sp, #100]	; 0x64
 800d806:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d808:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d80a:	931a      	str	r3, [sp, #104]	; 0x68
 800d80c:	4293      	cmp	r3, r2
 800d80e:	da00      	bge.n	800d812 <_svfprintf_r+0x6ca>
 800d810:	921a      	str	r2, [sp, #104]	; 0x68
 800d812:	231b      	movs	r3, #27
 800d814:	aa1e      	add	r2, sp, #120	; 0x78
 800d816:	189b      	adds	r3, r3, r2
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	1e5a      	subs	r2, r3, #1
 800d81c:	4193      	sbcs	r3, r2
 800d81e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d820:	18d3      	adds	r3, r2, r3
 800d822:	931a      	str	r3, [sp, #104]	; 0x68
 800d824:	0032      	movs	r2, r6
 800d826:	2302      	movs	r3, #2
 800d828:	401a      	ands	r2, r3
 800d82a:	9220      	str	r2, [sp, #128]	; 0x80
 800d82c:	421e      	tst	r6, r3
 800d82e:	d002      	beq.n	800d836 <_svfprintf_r+0x6ee>
 800d830:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d832:	3302      	adds	r3, #2
 800d834:	931a      	str	r3, [sp, #104]	; 0x68
 800d836:	2384      	movs	r3, #132	; 0x84
 800d838:	0032      	movs	r2, r6
 800d83a:	401a      	ands	r2, r3
 800d83c:	9221      	str	r2, [sp, #132]	; 0x84
 800d83e:	421e      	tst	r6, r3
 800d840:	d11f      	bne.n	800d882 <_svfprintf_r+0x73a>
 800d842:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d844:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d846:	1a9c      	subs	r4, r3, r2
 800d848:	2c00      	cmp	r4, #0
 800d84a:	dd1a      	ble.n	800d882 <_svfprintf_r+0x73a>
 800d84c:	0039      	movs	r1, r7
 800d84e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d850:	4858      	ldr	r0, [pc, #352]	; (800d9b4 <_svfprintf_r+0x86c>)
 800d852:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d854:	3301      	adds	r3, #1
 800d856:	3108      	adds	r1, #8
 800d858:	6038      	str	r0, [r7, #0]
 800d85a:	2c10      	cmp	r4, #16
 800d85c:	dd00      	ble.n	800d860 <_svfprintf_r+0x718>
 800d85e:	e31c      	b.n	800de9a <_svfprintf_r+0xd52>
 800d860:	607c      	str	r4, [r7, #4]
 800d862:	18a4      	adds	r4, r4, r2
 800d864:	000f      	movs	r7, r1
 800d866:	942e      	str	r4, [sp, #184]	; 0xb8
 800d868:	932d      	str	r3, [sp, #180]	; 0xb4
 800d86a:	2b07      	cmp	r3, #7
 800d86c:	dd09      	ble.n	800d882 <_svfprintf_r+0x73a>
 800d86e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d870:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d872:	aa2c      	add	r2, sp, #176	; 0xb0
 800d874:	f003 fd7e 	bl	8011374 <__ssprint_r>
 800d878:	2800      	cmp	r0, #0
 800d87a:	d001      	beq.n	800d880 <_svfprintf_r+0x738>
 800d87c:	f000 fe43 	bl	800e506 <_svfprintf_r+0x13be>
 800d880:	af2f      	add	r7, sp, #188	; 0xbc
 800d882:	221b      	movs	r2, #27
 800d884:	a91e      	add	r1, sp, #120	; 0x78
 800d886:	1852      	adds	r2, r2, r1
 800d888:	7811      	ldrb	r1, [r2, #0]
 800d88a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d88c:	2900      	cmp	r1, #0
 800d88e:	d014      	beq.n	800d8ba <_svfprintf_r+0x772>
 800d890:	603a      	str	r2, [r7, #0]
 800d892:	2201      	movs	r2, #1
 800d894:	189b      	adds	r3, r3, r2
 800d896:	932e      	str	r3, [sp, #184]	; 0xb8
 800d898:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d89a:	607a      	str	r2, [r7, #4]
 800d89c:	189b      	adds	r3, r3, r2
 800d89e:	932d      	str	r3, [sp, #180]	; 0xb4
 800d8a0:	3708      	adds	r7, #8
 800d8a2:	2b07      	cmp	r3, #7
 800d8a4:	dd09      	ble.n	800d8ba <_svfprintf_r+0x772>
 800d8a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d8a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d8aa:	aa2c      	add	r2, sp, #176	; 0xb0
 800d8ac:	f003 fd62 	bl	8011374 <__ssprint_r>
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	d001      	beq.n	800d8b8 <_svfprintf_r+0x770>
 800d8b4:	f000 fe27 	bl	800e506 <_svfprintf_r+0x13be>
 800d8b8:	af2f      	add	r7, sp, #188	; 0xbc
 800d8ba:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d8bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d8be:	2a00      	cmp	r2, #0
 800d8c0:	d015      	beq.n	800d8ee <_svfprintf_r+0x7a6>
 800d8c2:	aa25      	add	r2, sp, #148	; 0x94
 800d8c4:	603a      	str	r2, [r7, #0]
 800d8c6:	2202      	movs	r2, #2
 800d8c8:	189b      	adds	r3, r3, r2
 800d8ca:	932e      	str	r3, [sp, #184]	; 0xb8
 800d8cc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d8ce:	607a      	str	r2, [r7, #4]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	932d      	str	r3, [sp, #180]	; 0xb4
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	2b07      	cmp	r3, #7
 800d8d8:	dd09      	ble.n	800d8ee <_svfprintf_r+0x7a6>
 800d8da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d8dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d8de:	aa2c      	add	r2, sp, #176	; 0xb0
 800d8e0:	f003 fd48 	bl	8011374 <__ssprint_r>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	d001      	beq.n	800d8ec <_svfprintf_r+0x7a4>
 800d8e8:	f000 fe0d 	bl	800e506 <_svfprintf_r+0x13be>
 800d8ec:	af2f      	add	r7, sp, #188	; 0xbc
 800d8ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8f0:	2b80      	cmp	r3, #128	; 0x80
 800d8f2:	d11f      	bne.n	800d934 <_svfprintf_r+0x7ec>
 800d8f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d8f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d8f8:	1a9c      	subs	r4, r3, r2
 800d8fa:	2c00      	cmp	r4, #0
 800d8fc:	dd1a      	ble.n	800d934 <_svfprintf_r+0x7ec>
 800d8fe:	0039      	movs	r1, r7
 800d900:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d902:	482d      	ldr	r0, [pc, #180]	; (800d9b8 <_svfprintf_r+0x870>)
 800d904:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d906:	3301      	adds	r3, #1
 800d908:	3108      	adds	r1, #8
 800d90a:	6038      	str	r0, [r7, #0]
 800d90c:	2c10      	cmp	r4, #16
 800d90e:	dd00      	ble.n	800d912 <_svfprintf_r+0x7ca>
 800d910:	e2d6      	b.n	800dec0 <_svfprintf_r+0xd78>
 800d912:	607c      	str	r4, [r7, #4]
 800d914:	18a4      	adds	r4, r4, r2
 800d916:	000f      	movs	r7, r1
 800d918:	942e      	str	r4, [sp, #184]	; 0xb8
 800d91a:	932d      	str	r3, [sp, #180]	; 0xb4
 800d91c:	2b07      	cmp	r3, #7
 800d91e:	dd09      	ble.n	800d934 <_svfprintf_r+0x7ec>
 800d920:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d922:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d924:	aa2c      	add	r2, sp, #176	; 0xb0
 800d926:	f003 fd25 	bl	8011374 <__ssprint_r>
 800d92a:	2800      	cmp	r0, #0
 800d92c:	d001      	beq.n	800d932 <_svfprintf_r+0x7ea>
 800d92e:	f000 fdea 	bl	800e506 <_svfprintf_r+0x13be>
 800d932:	af2f      	add	r7, sp, #188	; 0xbc
 800d934:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d938:	1a9c      	subs	r4, r3, r2
 800d93a:	2c00      	cmp	r4, #0
 800d93c:	dd1a      	ble.n	800d974 <_svfprintf_r+0x82c>
 800d93e:	0039      	movs	r1, r7
 800d940:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d942:	481d      	ldr	r0, [pc, #116]	; (800d9b8 <_svfprintf_r+0x870>)
 800d944:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d946:	3301      	adds	r3, #1
 800d948:	3108      	adds	r1, #8
 800d94a:	6038      	str	r0, [r7, #0]
 800d94c:	2c10      	cmp	r4, #16
 800d94e:	dd00      	ble.n	800d952 <_svfprintf_r+0x80a>
 800d950:	e2c9      	b.n	800dee6 <_svfprintf_r+0xd9e>
 800d952:	18a2      	adds	r2, r4, r2
 800d954:	607c      	str	r4, [r7, #4]
 800d956:	922e      	str	r2, [sp, #184]	; 0xb8
 800d958:	000f      	movs	r7, r1
 800d95a:	932d      	str	r3, [sp, #180]	; 0xb4
 800d95c:	2b07      	cmp	r3, #7
 800d95e:	dd09      	ble.n	800d974 <_svfprintf_r+0x82c>
 800d960:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d962:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d964:	aa2c      	add	r2, sp, #176	; 0xb0
 800d966:	f003 fd05 	bl	8011374 <__ssprint_r>
 800d96a:	2800      	cmp	r0, #0
 800d96c:	d001      	beq.n	800d972 <_svfprintf_r+0x82a>
 800d96e:	f000 fdca 	bl	800e506 <_svfprintf_r+0x13be>
 800d972:	af2f      	add	r7, sp, #188	; 0xbc
 800d974:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d976:	9319      	str	r3, [sp, #100]	; 0x64
 800d978:	05f3      	lsls	r3, r6, #23
 800d97a:	d500      	bpl.n	800d97e <_svfprintf_r+0x836>
 800d97c:	e2ce      	b.n	800df1c <_svfprintf_r+0xdd4>
 800d97e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d980:	9b08      	ldr	r3, [sp, #32]
 800d982:	4694      	mov	ip, r2
 800d984:	603b      	str	r3, [r7, #0]
 800d986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d988:	607b      	str	r3, [r7, #4]
 800d98a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d98c:	4463      	add	r3, ip
 800d98e:	932e      	str	r3, [sp, #184]	; 0xb8
 800d990:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d992:	3301      	adds	r3, #1
 800d994:	932d      	str	r3, [sp, #180]	; 0xb4
 800d996:	2b07      	cmp	r3, #7
 800d998:	dd00      	ble.n	800d99c <_svfprintf_r+0x854>
 800d99a:	e3a3      	b.n	800e0e4 <_svfprintf_r+0xf9c>
 800d99c:	3708      	adds	r7, #8
 800d99e:	e301      	b.n	800dfa4 <_svfprintf_r+0xe5c>
 800d9a0:	0801480c 	.word	0x0801480c
 800d9a4:	0801481d 	.word	0x0801481d
 800d9a8:	40300000 	.word	0x40300000
 800d9ac:	3fe00000 	.word	0x3fe00000
 800d9b0:	fffffbff 	.word	0xfffffbff
 800d9b4:	08014830 	.word	0x08014830
 800d9b8:	08014840 	.word	0x08014840
 800d9bc:	9b08      	ldr	r3, [sp, #32]
 800d9be:	930c      	str	r3, [sp, #48]	; 0x30
 800d9c0:	e610      	b.n	800d5e4 <_svfprintf_r+0x49c>
 800d9c2:	2306      	movs	r3, #6
 800d9c4:	e5fd      	b.n	800d5c2 <_svfprintf_r+0x47a>
 800d9c6:	930e      	str	r3, [sp, #56]	; 0x38
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	e61a      	b.n	800d602 <_svfprintf_r+0x4ba>
 800d9cc:	7010      	strb	r0, [r2, #0]
 800d9ce:	e684      	b.n	800d6da <_svfprintf_r+0x592>
 800d9d0:	7018      	strb	r0, [r3, #0]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	1aca      	subs	r2, r1, r3
 800d9d6:	d5fb      	bpl.n	800d9d0 <_svfprintf_r+0x888>
 800d9d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d9da:	2300      	movs	r3, #0
 800d9dc:	3201      	adds	r2, #1
 800d9de:	db01      	blt.n	800d9e4 <_svfprintf_r+0x89c>
 800d9e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9e6:	18d3      	adds	r3, r2, r3
 800d9e8:	9323      	str	r3, [sp, #140]	; 0x8c
 800d9ea:	e684      	b.n	800d6f6 <_svfprintf_r+0x5ae>
 800d9ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9ee:	9920      	ldr	r1, [sp, #128]	; 0x80
 800d9f0:	2030      	movs	r0, #48	; 0x30
 800d9f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9f4:	1851      	adds	r1, r2, r1
 800d9f6:	e7ed      	b.n	800d9d4 <_svfprintf_r+0x88c>
 800d9f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d9fa:	2303      	movs	r3, #3
 800d9fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d9fe:	2a46      	cmp	r2, #70	; 0x46
 800da00:	d006      	beq.n	800da10 <_svfprintf_r+0x8c8>
 800da02:	0014      	movs	r4, r2
 800da04:	3c45      	subs	r4, #69	; 0x45
 800da06:	4262      	negs	r2, r4
 800da08:	4154      	adcs	r4, r2
 800da0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da0c:	3b01      	subs	r3, #1
 800da0e:	1914      	adds	r4, r2, r4
 800da10:	aa2a      	add	r2, sp, #168	; 0xa8
 800da12:	9204      	str	r2, [sp, #16]
 800da14:	aa27      	add	r2, sp, #156	; 0x9c
 800da16:	9203      	str	r2, [sp, #12]
 800da18:	aa26      	add	r2, sp, #152	; 0x98
 800da1a:	9202      	str	r2, [sp, #8]
 800da1c:	9300      	str	r3, [sp, #0]
 800da1e:	002a      	movs	r2, r5
 800da20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da22:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da24:	9401      	str	r4, [sp, #4]
 800da26:	f002 fad7 	bl	800ffd8 <_dtoa_r>
 800da2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da2c:	9008      	str	r0, [sp, #32]
 800da2e:	2b47      	cmp	r3, #71	; 0x47
 800da30:	d103      	bne.n	800da3a <_svfprintf_r+0x8f2>
 800da32:	07f3      	lsls	r3, r6, #31
 800da34:	d401      	bmi.n	800da3a <_svfprintf_r+0x8f2>
 800da36:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800da38:	e65e      	b.n	800d6f8 <_svfprintf_r+0x5b0>
 800da3a:	9b08      	ldr	r3, [sp, #32]
 800da3c:	191b      	adds	r3, r3, r4
 800da3e:	9311      	str	r3, [sp, #68]	; 0x44
 800da40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da42:	2b46      	cmp	r3, #70	; 0x46
 800da44:	d112      	bne.n	800da6c <_svfprintf_r+0x924>
 800da46:	9b08      	ldr	r3, [sp, #32]
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	2b30      	cmp	r3, #48	; 0x30
 800da4c:	d10a      	bne.n	800da64 <_svfprintf_r+0x91c>
 800da4e:	2200      	movs	r2, #0
 800da50:	2300      	movs	r3, #0
 800da52:	0028      	movs	r0, r5
 800da54:	990e      	ldr	r1, [sp, #56]	; 0x38
 800da56:	f7f2 fcf7 	bl	8000448 <__aeabi_dcmpeq>
 800da5a:	2800      	cmp	r0, #0
 800da5c:	d102      	bne.n	800da64 <_svfprintf_r+0x91c>
 800da5e:	2301      	movs	r3, #1
 800da60:	1b1b      	subs	r3, r3, r4
 800da62:	9326      	str	r3, [sp, #152]	; 0x98
 800da64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800da66:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800da68:	18d3      	adds	r3, r2, r3
 800da6a:	9311      	str	r3, [sp, #68]	; 0x44
 800da6c:	2200      	movs	r2, #0
 800da6e:	2300      	movs	r3, #0
 800da70:	0028      	movs	r0, r5
 800da72:	990e      	ldr	r1, [sp, #56]	; 0x38
 800da74:	f7f2 fce8 	bl	8000448 <__aeabi_dcmpeq>
 800da78:	2800      	cmp	r0, #0
 800da7a:	d001      	beq.n	800da80 <_svfprintf_r+0x938>
 800da7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da7e:	932a      	str	r3, [sp, #168]	; 0xa8
 800da80:	2230      	movs	r2, #48	; 0x30
 800da82:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800da84:	9911      	ldr	r1, [sp, #68]	; 0x44
 800da86:	4299      	cmp	r1, r3
 800da88:	d9d5      	bls.n	800da36 <_svfprintf_r+0x8ee>
 800da8a:	1c59      	adds	r1, r3, #1
 800da8c:	912a      	str	r1, [sp, #168]	; 0xa8
 800da8e:	701a      	strb	r2, [r3, #0]
 800da90:	e7f7      	b.n	800da82 <_svfprintf_r+0x93a>
 800da92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da94:	2b46      	cmp	r3, #70	; 0x46
 800da96:	d000      	beq.n	800da9a <_svfprintf_r+0x952>
 800da98:	e63f      	b.n	800d71a <_svfprintf_r+0x5d2>
 800da9a:	2201      	movs	r2, #1
 800da9c:	0033      	movs	r3, r6
 800da9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800daa0:	4013      	ands	r3, r2
 800daa2:	430b      	orrs	r3, r1
 800daa4:	2d00      	cmp	r5, #0
 800daa6:	dd2c      	ble.n	800db02 <_svfprintf_r+0x9ba>
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d046      	beq.n	800db3a <_svfprintf_r+0x9f2>
 800daac:	000a      	movs	r2, r1
 800daae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dab0:	18eb      	adds	r3, r5, r3
 800dab2:	18d3      	adds	r3, r2, r3
 800dab4:	9309      	str	r3, [sp, #36]	; 0x24
 800dab6:	2366      	movs	r3, #102	; 0x66
 800dab8:	930f      	str	r3, [sp, #60]	; 0x3c
 800daba:	e030      	b.n	800db1e <_svfprintf_r+0x9d6>
 800dabc:	781c      	ldrb	r4, [r3, #0]
 800dabe:	3301      	adds	r3, #1
 800dac0:	7014      	strb	r4, [r2, #0]
 800dac2:	3201      	adds	r2, #1
 800dac4:	e668      	b.n	800d798 <_svfprintf_r+0x650>
 800dac6:	222a      	movs	r2, #42	; 0x2a
 800dac8:	ab1e      	add	r3, sp, #120	; 0x78
 800daca:	18d2      	adds	r2, r2, r3
 800dacc:	2800      	cmp	r0, #0
 800dace:	d104      	bne.n	800dada <_svfprintf_r+0x992>
 800dad0:	2330      	movs	r3, #48	; 0x30
 800dad2:	222b      	movs	r2, #43	; 0x2b
 800dad4:	708b      	strb	r3, [r1, #2]
 800dad6:	ab1e      	add	r3, sp, #120	; 0x78
 800dad8:	18d2      	adds	r2, r2, r3
 800dada:	3430      	adds	r4, #48	; 0x30
 800dadc:	1c53      	adds	r3, r2, #1
 800dade:	7014      	strb	r4, [r2, #0]
 800dae0:	e669      	b.n	800d7b6 <_svfprintf_r+0x66e>
 800dae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dae4:	42ab      	cmp	r3, r5
 800dae6:	dd12      	ble.n	800db0e <_svfprintf_r+0x9c6>
 800dae8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800daea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800daec:	4694      	mov	ip, r2
 800daee:	4463      	add	r3, ip
 800daf0:	9309      	str	r3, [sp, #36]	; 0x24
 800daf2:	2367      	movs	r3, #103	; 0x67
 800daf4:	930f      	str	r3, [sp, #60]	; 0x3c
 800daf6:	2d00      	cmp	r5, #0
 800daf8:	dc11      	bgt.n	800db1e <_svfprintf_r+0x9d6>
 800dafa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dafc:	1b5b      	subs	r3, r3, r5
 800dafe:	3301      	adds	r3, #1
 800db00:	e00c      	b.n	800db1c <_svfprintf_r+0x9d4>
 800db02:	2b00      	cmp	r3, #0
 800db04:	d01b      	beq.n	800db3e <_svfprintf_r+0x9f6>
 800db06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800db08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db0a:	3301      	adds	r3, #1
 800db0c:	e7d1      	b.n	800dab2 <_svfprintf_r+0x96a>
 800db0e:	2367      	movs	r3, #103	; 0x67
 800db10:	9509      	str	r5, [sp, #36]	; 0x24
 800db12:	930f      	str	r3, [sp, #60]	; 0x3c
 800db14:	07f3      	lsls	r3, r6, #31
 800db16:	d502      	bpl.n	800db1e <_svfprintf_r+0x9d6>
 800db18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800db1a:	18eb      	adds	r3, r5, r3
 800db1c:	9309      	str	r3, [sp, #36]	; 0x24
 800db1e:	2380      	movs	r3, #128	; 0x80
 800db20:	0032      	movs	r2, r6
 800db22:	00db      	lsls	r3, r3, #3
 800db24:	401a      	ands	r2, r3
 800db26:	9211      	str	r2, [sp, #68]	; 0x44
 800db28:	2200      	movs	r2, #0
 800db2a:	9210      	str	r2, [sp, #64]	; 0x40
 800db2c:	421e      	tst	r6, r3
 800db2e:	d100      	bne.n	800db32 <_svfprintf_r+0x9ea>
 800db30:	e65d      	b.n	800d7ee <_svfprintf_r+0x6a6>
 800db32:	4295      	cmp	r5, r2
 800db34:	dc25      	bgt.n	800db82 <_svfprintf_r+0xa3a>
 800db36:	9211      	str	r2, [sp, #68]	; 0x44
 800db38:	e659      	b.n	800d7ee <_svfprintf_r+0x6a6>
 800db3a:	9509      	str	r5, [sp, #36]	; 0x24
 800db3c:	e7bb      	b.n	800dab6 <_svfprintf_r+0x96e>
 800db3e:	2366      	movs	r3, #102	; 0x66
 800db40:	9209      	str	r2, [sp, #36]	; 0x24
 800db42:	930f      	str	r3, [sp, #60]	; 0x3c
 800db44:	e7eb      	b.n	800db1e <_svfprintf_r+0x9d6>
 800db46:	42ab      	cmp	r3, r5
 800db48:	da0e      	bge.n	800db68 <_svfprintf_r+0xa20>
 800db4a:	1aed      	subs	r5, r5, r3
 800db4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db4e:	785b      	ldrb	r3, [r3, #1]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d012      	beq.n	800db7a <_svfprintf_r+0xa32>
 800db54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db56:	3301      	adds	r3, #1
 800db58:	9311      	str	r3, [sp, #68]	; 0x44
 800db5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db5c:	3301      	adds	r3, #1
 800db5e:	9312      	str	r3, [sp, #72]	; 0x48
 800db60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	2bff      	cmp	r3, #255	; 0xff
 800db66:	d1ee      	bne.n	800db46 <_svfprintf_r+0x9fe>
 800db68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800db6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db6c:	189b      	adds	r3, r3, r2
 800db6e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800db70:	4353      	muls	r3, r2
 800db72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db74:	189b      	adds	r3, r3, r2
 800db76:	9309      	str	r3, [sp, #36]	; 0x24
 800db78:	e639      	b.n	800d7ee <_svfprintf_r+0x6a6>
 800db7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db7c:	3301      	adds	r3, #1
 800db7e:	9310      	str	r3, [sp, #64]	; 0x40
 800db80:	e7ee      	b.n	800db60 <_svfprintf_r+0xa18>
 800db82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db84:	9311      	str	r3, [sp, #68]	; 0x44
 800db86:	e7eb      	b.n	800db60 <_svfprintf_r+0xa18>
 800db88:	1d23      	adds	r3, r4, #4
 800db8a:	930d      	str	r3, [sp, #52]	; 0x34
 800db8c:	06b3      	lsls	r3, r6, #26
 800db8e:	d509      	bpl.n	800dba4 <_svfprintf_r+0xa5c>
 800db90:	6823      	ldr	r3, [r4, #0]
 800db92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800db94:	601a      	str	r2, [r3, #0]
 800db96:	17d2      	asrs	r2, r2, #31
 800db98:	605a      	str	r2, [r3, #4]
 800db9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800db9c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800db9e:	9308      	str	r3, [sp, #32]
 800dba0:	f7ff fb0d 	bl	800d1be <_svfprintf_r+0x76>
 800dba4:	06f3      	lsls	r3, r6, #27
 800dba6:	d503      	bpl.n	800dbb0 <_svfprintf_r+0xa68>
 800dba8:	6823      	ldr	r3, [r4, #0]
 800dbaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dbac:	601a      	str	r2, [r3, #0]
 800dbae:	e7f4      	b.n	800db9a <_svfprintf_r+0xa52>
 800dbb0:	0673      	lsls	r3, r6, #25
 800dbb2:	d503      	bpl.n	800dbbc <_svfprintf_r+0xa74>
 800dbb4:	6823      	ldr	r3, [r4, #0]
 800dbb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dbb8:	801a      	strh	r2, [r3, #0]
 800dbba:	e7ee      	b.n	800db9a <_svfprintf_r+0xa52>
 800dbbc:	05b6      	lsls	r6, r6, #22
 800dbbe:	d5f3      	bpl.n	800dba8 <_svfprintf_r+0xa60>
 800dbc0:	6823      	ldr	r3, [r4, #0]
 800dbc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dbc4:	701a      	strb	r2, [r3, #0]
 800dbc6:	e7e8      	b.n	800db9a <_svfprintf_r+0xa52>
 800dbc8:	2310      	movs	r3, #16
 800dbca:	431e      	orrs	r6, r3
 800dbcc:	2320      	movs	r3, #32
 800dbce:	0030      	movs	r0, r6
 800dbd0:	4018      	ands	r0, r3
 800dbd2:	421e      	tst	r6, r3
 800dbd4:	d00f      	beq.n	800dbf6 <_svfprintf_r+0xaae>
 800dbd6:	3b19      	subs	r3, #25
 800dbd8:	3407      	adds	r4, #7
 800dbda:	439c      	bics	r4, r3
 800dbdc:	0022      	movs	r2, r4
 800dbde:	ca18      	ldmia	r2!, {r3, r4}
 800dbe0:	9306      	str	r3, [sp, #24]
 800dbe2:	9407      	str	r4, [sp, #28]
 800dbe4:	920d      	str	r2, [sp, #52]	; 0x34
 800dbe6:	4bc9      	ldr	r3, [pc, #804]	; (800df0c <_svfprintf_r+0xdc4>)
 800dbe8:	401e      	ands	r6, r3
 800dbea:	2300      	movs	r3, #0
 800dbec:	221b      	movs	r2, #27
 800dbee:	a91e      	add	r1, sp, #120	; 0x78
 800dbf0:	1852      	adds	r2, r2, r1
 800dbf2:	2100      	movs	r1, #0
 800dbf4:	e430      	b.n	800d458 <_svfprintf_r+0x310>
 800dbf6:	0022      	movs	r2, r4
 800dbf8:	ca08      	ldmia	r2!, {r3}
 800dbfa:	0031      	movs	r1, r6
 800dbfc:	920d      	str	r2, [sp, #52]	; 0x34
 800dbfe:	2210      	movs	r2, #16
 800dc00:	4011      	ands	r1, r2
 800dc02:	4216      	tst	r6, r2
 800dc04:	d002      	beq.n	800dc0c <_svfprintf_r+0xac4>
 800dc06:	9306      	str	r3, [sp, #24]
 800dc08:	9007      	str	r0, [sp, #28]
 800dc0a:	e7ec      	b.n	800dbe6 <_svfprintf_r+0xa9e>
 800dc0c:	2240      	movs	r2, #64	; 0x40
 800dc0e:	0030      	movs	r0, r6
 800dc10:	4010      	ands	r0, r2
 800dc12:	4216      	tst	r6, r2
 800dc14:	d003      	beq.n	800dc1e <_svfprintf_r+0xad6>
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	9306      	str	r3, [sp, #24]
 800dc1a:	9107      	str	r1, [sp, #28]
 800dc1c:	e7e3      	b.n	800dbe6 <_svfprintf_r+0xa9e>
 800dc1e:	2280      	movs	r2, #128	; 0x80
 800dc20:	0031      	movs	r1, r6
 800dc22:	0092      	lsls	r2, r2, #2
 800dc24:	4011      	ands	r1, r2
 800dc26:	4216      	tst	r6, r2
 800dc28:	d0f6      	beq.n	800dc18 <_svfprintf_r+0xad0>
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	e7eb      	b.n	800dc06 <_svfprintf_r+0xabe>
 800dc2e:	0023      	movs	r3, r4
 800dc30:	cb04      	ldmia	r3!, {r2}
 800dc32:	49b7      	ldr	r1, [pc, #732]	; (800df10 <_svfprintf_r+0xdc8>)
 800dc34:	9206      	str	r2, [sp, #24]
 800dc36:	aa25      	add	r2, sp, #148	; 0x94
 800dc38:	8011      	strh	r1, [r2, #0]
 800dc3a:	4ab6      	ldr	r2, [pc, #728]	; (800df14 <_svfprintf_r+0xdcc>)
 800dc3c:	930d      	str	r3, [sp, #52]	; 0x34
 800dc3e:	2300      	movs	r3, #0
 800dc40:	921f      	str	r2, [sp, #124]	; 0x7c
 800dc42:	2278      	movs	r2, #120	; 0x78
 800dc44:	9307      	str	r3, [sp, #28]
 800dc46:	3302      	adds	r3, #2
 800dc48:	431e      	orrs	r6, r3
 800dc4a:	920f      	str	r2, [sp, #60]	; 0x3c
 800dc4c:	e7ce      	b.n	800dbec <_svfprintf_r+0xaa4>
 800dc4e:	0023      	movs	r3, r4
 800dc50:	cb04      	ldmia	r3!, {r2}
 800dc52:	2400      	movs	r4, #0
 800dc54:	930d      	str	r3, [sp, #52]	; 0x34
 800dc56:	231b      	movs	r3, #27
 800dc58:	9208      	str	r2, [sp, #32]
 800dc5a:	aa1e      	add	r2, sp, #120	; 0x78
 800dc5c:	189b      	adds	r3, r3, r2
 800dc5e:	701c      	strb	r4, [r3, #0]
 800dc60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc62:	3301      	adds	r3, #1
 800dc64:	d00e      	beq.n	800dc84 <_svfprintf_r+0xb3c>
 800dc66:	0021      	movs	r1, r4
 800dc68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc6a:	9808      	ldr	r0, [sp, #32]
 800dc6c:	f002 f83a 	bl	800fce4 <memchr>
 800dc70:	900c      	str	r0, [sp, #48]	; 0x30
 800dc72:	42a0      	cmp	r0, r4
 800dc74:	d100      	bne.n	800dc78 <_svfprintf_r+0xb30>
 800dc76:	e10d      	b.n	800de94 <_svfprintf_r+0xd4c>
 800dc78:	9a08      	ldr	r2, [sp, #32]
 800dc7a:	1a83      	subs	r3, r0, r2
 800dc7c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc7e:	0023      	movs	r3, r4
 800dc80:	940c      	str	r4, [sp, #48]	; 0x30
 800dc82:	e44e      	b.n	800d522 <_svfprintf_r+0x3da>
 800dc84:	9808      	ldr	r0, [sp, #32]
 800dc86:	f7f2 fa3d 	bl	8000104 <strlen>
 800dc8a:	9009      	str	r0, [sp, #36]	; 0x24
 800dc8c:	e7f7      	b.n	800dc7e <_svfprintf_r+0xb36>
 800dc8e:	2310      	movs	r3, #16
 800dc90:	431e      	orrs	r6, r3
 800dc92:	2320      	movs	r3, #32
 800dc94:	0030      	movs	r0, r6
 800dc96:	4018      	ands	r0, r3
 800dc98:	421e      	tst	r6, r3
 800dc9a:	d009      	beq.n	800dcb0 <_svfprintf_r+0xb68>
 800dc9c:	3b19      	subs	r3, #25
 800dc9e:	3407      	adds	r4, #7
 800dca0:	439c      	bics	r4, r3
 800dca2:	0022      	movs	r2, r4
 800dca4:	ca18      	ldmia	r2!, {r3, r4}
 800dca6:	9306      	str	r3, [sp, #24]
 800dca8:	9407      	str	r4, [sp, #28]
 800dcaa:	920d      	str	r2, [sp, #52]	; 0x34
 800dcac:	2301      	movs	r3, #1
 800dcae:	e79d      	b.n	800dbec <_svfprintf_r+0xaa4>
 800dcb0:	0023      	movs	r3, r4
 800dcb2:	cb04      	ldmia	r3!, {r2}
 800dcb4:	0031      	movs	r1, r6
 800dcb6:	930d      	str	r3, [sp, #52]	; 0x34
 800dcb8:	2310      	movs	r3, #16
 800dcba:	4019      	ands	r1, r3
 800dcbc:	421e      	tst	r6, r3
 800dcbe:	d003      	beq.n	800dcc8 <_svfprintf_r+0xb80>
 800dcc0:	9206      	str	r2, [sp, #24]
 800dcc2:	9007      	str	r0, [sp, #28]
 800dcc4:	3b0f      	subs	r3, #15
 800dcc6:	e791      	b.n	800dbec <_svfprintf_r+0xaa4>
 800dcc8:	2340      	movs	r3, #64	; 0x40
 800dcca:	0030      	movs	r0, r6
 800dccc:	4018      	ands	r0, r3
 800dcce:	421e      	tst	r6, r3
 800dcd0:	d003      	beq.n	800dcda <_svfprintf_r+0xb92>
 800dcd2:	b293      	uxth	r3, r2
 800dcd4:	9306      	str	r3, [sp, #24]
 800dcd6:	9107      	str	r1, [sp, #28]
 800dcd8:	e7e8      	b.n	800dcac <_svfprintf_r+0xb64>
 800dcda:	2380      	movs	r3, #128	; 0x80
 800dcdc:	0031      	movs	r1, r6
 800dcde:	009b      	lsls	r3, r3, #2
 800dce0:	4019      	ands	r1, r3
 800dce2:	421e      	tst	r6, r3
 800dce4:	d003      	beq.n	800dcee <_svfprintf_r+0xba6>
 800dce6:	b2d3      	uxtb	r3, r2
 800dce8:	9306      	str	r3, [sp, #24]
 800dcea:	9007      	str	r0, [sp, #28]
 800dcec:	e7de      	b.n	800dcac <_svfprintf_r+0xb64>
 800dcee:	9206      	str	r2, [sp, #24]
 800dcf0:	e7f1      	b.n	800dcd6 <_svfprintf_r+0xb8e>
 800dcf2:	4b89      	ldr	r3, [pc, #548]	; (800df18 <_svfprintf_r+0xdd0>)
 800dcf4:	0030      	movs	r0, r6
 800dcf6:	931f      	str	r3, [sp, #124]	; 0x7c
 800dcf8:	2320      	movs	r3, #32
 800dcfa:	4018      	ands	r0, r3
 800dcfc:	421e      	tst	r6, r3
 800dcfe:	d01a      	beq.n	800dd36 <_svfprintf_r+0xbee>
 800dd00:	3b19      	subs	r3, #25
 800dd02:	3407      	adds	r4, #7
 800dd04:	439c      	bics	r4, r3
 800dd06:	0022      	movs	r2, r4
 800dd08:	ca18      	ldmia	r2!, {r3, r4}
 800dd0a:	9306      	str	r3, [sp, #24]
 800dd0c:	9407      	str	r4, [sp, #28]
 800dd0e:	920d      	str	r2, [sp, #52]	; 0x34
 800dd10:	07f3      	lsls	r3, r6, #31
 800dd12:	d50a      	bpl.n	800dd2a <_svfprintf_r+0xbe2>
 800dd14:	9b06      	ldr	r3, [sp, #24]
 800dd16:	9a07      	ldr	r2, [sp, #28]
 800dd18:	4313      	orrs	r3, r2
 800dd1a:	d006      	beq.n	800dd2a <_svfprintf_r+0xbe2>
 800dd1c:	2230      	movs	r2, #48	; 0x30
 800dd1e:	ab25      	add	r3, sp, #148	; 0x94
 800dd20:	701a      	strb	r2, [r3, #0]
 800dd22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dd24:	705a      	strb	r2, [r3, #1]
 800dd26:	2302      	movs	r3, #2
 800dd28:	431e      	orrs	r6, r3
 800dd2a:	4b78      	ldr	r3, [pc, #480]	; (800df0c <_svfprintf_r+0xdc4>)
 800dd2c:	401e      	ands	r6, r3
 800dd2e:	2302      	movs	r3, #2
 800dd30:	e75c      	b.n	800dbec <_svfprintf_r+0xaa4>
 800dd32:	4b78      	ldr	r3, [pc, #480]	; (800df14 <_svfprintf_r+0xdcc>)
 800dd34:	e7de      	b.n	800dcf4 <_svfprintf_r+0xbac>
 800dd36:	0023      	movs	r3, r4
 800dd38:	cb04      	ldmia	r3!, {r2}
 800dd3a:	0031      	movs	r1, r6
 800dd3c:	930d      	str	r3, [sp, #52]	; 0x34
 800dd3e:	2310      	movs	r3, #16
 800dd40:	4019      	ands	r1, r3
 800dd42:	421e      	tst	r6, r3
 800dd44:	d002      	beq.n	800dd4c <_svfprintf_r+0xc04>
 800dd46:	9206      	str	r2, [sp, #24]
 800dd48:	9007      	str	r0, [sp, #28]
 800dd4a:	e7e1      	b.n	800dd10 <_svfprintf_r+0xbc8>
 800dd4c:	2340      	movs	r3, #64	; 0x40
 800dd4e:	0030      	movs	r0, r6
 800dd50:	4018      	ands	r0, r3
 800dd52:	421e      	tst	r6, r3
 800dd54:	d003      	beq.n	800dd5e <_svfprintf_r+0xc16>
 800dd56:	b293      	uxth	r3, r2
 800dd58:	9306      	str	r3, [sp, #24]
 800dd5a:	9107      	str	r1, [sp, #28]
 800dd5c:	e7d8      	b.n	800dd10 <_svfprintf_r+0xbc8>
 800dd5e:	2380      	movs	r3, #128	; 0x80
 800dd60:	0031      	movs	r1, r6
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	4019      	ands	r1, r3
 800dd66:	421e      	tst	r6, r3
 800dd68:	d002      	beq.n	800dd70 <_svfprintf_r+0xc28>
 800dd6a:	b2d3      	uxtb	r3, r2
 800dd6c:	9306      	str	r3, [sp, #24]
 800dd6e:	e7eb      	b.n	800dd48 <_svfprintf_r+0xc00>
 800dd70:	9206      	str	r2, [sp, #24]
 800dd72:	e7f2      	b.n	800dd5a <_svfprintf_r+0xc12>
 800dd74:	9b07      	ldr	r3, [sp, #28]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d10a      	bne.n	800dd90 <_svfprintf_r+0xc48>
 800dd7a:	9b06      	ldr	r3, [sp, #24]
 800dd7c:	2b09      	cmp	r3, #9
 800dd7e:	d807      	bhi.n	800dd90 <_svfprintf_r+0xc48>
 800dd80:	23e7      	movs	r3, #231	; 0xe7
 800dd82:	aa1e      	add	r2, sp, #120	; 0x78
 800dd84:	189b      	adds	r3, r3, r2
 800dd86:	9a06      	ldr	r2, [sp, #24]
 800dd88:	3230      	adds	r2, #48	; 0x30
 800dd8a:	701a      	strb	r2, [r3, #0]
 800dd8c:	f000 fc18 	bl	800e5c0 <_svfprintf_r+0x1478>
 800dd90:	2680      	movs	r6, #128	; 0x80
 800dd92:	2300      	movs	r3, #0
 800dd94:	00f6      	lsls	r6, r6, #3
 800dd96:	930e      	str	r3, [sp, #56]	; 0x38
 800dd98:	ad58      	add	r5, sp, #352	; 0x160
 800dd9a:	4026      	ands	r6, r4
 800dd9c:	220a      	movs	r2, #10
 800dd9e:	9806      	ldr	r0, [sp, #24]
 800dda0:	9907      	ldr	r1, [sp, #28]
 800dda2:	2300      	movs	r3, #0
 800dda4:	f7f2 fb7e 	bl	80004a4 <__aeabi_uldivmod>
 800dda8:	1e6b      	subs	r3, r5, #1
 800ddaa:	3230      	adds	r2, #48	; 0x30
 800ddac:	9308      	str	r3, [sp, #32]
 800ddae:	701a      	strb	r2, [r3, #0]
 800ddb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddb2:	900c      	str	r0, [sp, #48]	; 0x30
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	9110      	str	r1, [sp, #64]	; 0x40
 800ddb8:	930e      	str	r3, [sp, #56]	; 0x38
 800ddba:	2e00      	cmp	r6, #0
 800ddbc:	d01d      	beq.n	800ddfa <_svfprintf_r+0xcb2>
 800ddbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ddc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d118      	bne.n	800ddfa <_svfprintf_r+0xcb2>
 800ddc8:	2aff      	cmp	r2, #255	; 0xff
 800ddca:	d016      	beq.n	800ddfa <_svfprintf_r+0xcb2>
 800ddcc:	9b07      	ldr	r3, [sp, #28]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d102      	bne.n	800ddd8 <_svfprintf_r+0xc90>
 800ddd2:	9b06      	ldr	r3, [sp, #24]
 800ddd4:	2b09      	cmp	r3, #9
 800ddd6:	d910      	bls.n	800ddfa <_svfprintf_r+0xcb2>
 800ddd8:	9b08      	ldr	r3, [sp, #32]
 800ddda:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dddc:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ddde:	1a9b      	subs	r3, r3, r2
 800dde0:	0018      	movs	r0, r3
 800dde2:	9308      	str	r3, [sp, #32]
 800dde4:	f7fd ff9d 	bl	800bd22 <strncpy>
 800dde8:	2200      	movs	r2, #0
 800ddea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ddec:	920e      	str	r2, [sp, #56]	; 0x38
 800ddee:	785b      	ldrb	r3, [r3, #1]
 800ddf0:	1e5a      	subs	r2, r3, #1
 800ddf2:	4193      	sbcs	r3, r2
 800ddf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ddf6:	18d3      	adds	r3, r2, r3
 800ddf8:	9312      	str	r3, [sp, #72]	; 0x48
 800ddfa:	9b07      	ldr	r3, [sp, #28]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d10f      	bne.n	800de20 <_svfprintf_r+0xcd8>
 800de00:	9b06      	ldr	r3, [sp, #24]
 800de02:	2b09      	cmp	r3, #9
 800de04:	d80c      	bhi.n	800de20 <_svfprintf_r+0xcd8>
 800de06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de08:	9a08      	ldr	r2, [sp, #32]
 800de0a:	9319      	str	r3, [sp, #100]	; 0x64
 800de0c:	ab58      	add	r3, sp, #352	; 0x160
 800de0e:	1a9b      	subs	r3, r3, r2
 800de10:	9309      	str	r3, [sp, #36]	; 0x24
 800de12:	2300      	movs	r3, #0
 800de14:	0026      	movs	r6, r4
 800de16:	930c      	str	r3, [sp, #48]	; 0x30
 800de18:	001d      	movs	r5, r3
 800de1a:	9310      	str	r3, [sp, #64]	; 0x40
 800de1c:	9311      	str	r3, [sp, #68]	; 0x44
 800de1e:	e4f2      	b.n	800d806 <_svfprintf_r+0x6be>
 800de20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de22:	9d08      	ldr	r5, [sp, #32]
 800de24:	9306      	str	r3, [sp, #24]
 800de26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de28:	9307      	str	r3, [sp, #28]
 800de2a:	e7b7      	b.n	800dd9c <_svfprintf_r+0xc54>
 800de2c:	200f      	movs	r0, #15
 800de2e:	ab58      	add	r3, sp, #352	; 0x160
 800de30:	9308      	str	r3, [sp, #32]
 800de32:	9b08      	ldr	r3, [sp, #32]
 800de34:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800de36:	3b01      	subs	r3, #1
 800de38:	9308      	str	r3, [sp, #32]
 800de3a:	9b06      	ldr	r3, [sp, #24]
 800de3c:	4003      	ands	r3, r0
 800de3e:	5cd3      	ldrb	r3, [r2, r3]
 800de40:	9a08      	ldr	r2, [sp, #32]
 800de42:	7013      	strb	r3, [r2, #0]
 800de44:	9b07      	ldr	r3, [sp, #28]
 800de46:	0719      	lsls	r1, r3, #28
 800de48:	9b06      	ldr	r3, [sp, #24]
 800de4a:	091a      	lsrs	r2, r3, #4
 800de4c:	9b07      	ldr	r3, [sp, #28]
 800de4e:	4311      	orrs	r1, r2
 800de50:	091b      	lsrs	r3, r3, #4
 800de52:	9307      	str	r3, [sp, #28]
 800de54:	000b      	movs	r3, r1
 800de56:	9a07      	ldr	r2, [sp, #28]
 800de58:	9106      	str	r1, [sp, #24]
 800de5a:	4313      	orrs	r3, r2
 800de5c:	d1e9      	bne.n	800de32 <_svfprintf_r+0xcea>
 800de5e:	e7d2      	b.n	800de06 <_svfprintf_r+0xcbe>
 800de60:	aa58      	add	r2, sp, #352	; 0x160
 800de62:	9208      	str	r2, [sp, #32]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d1ce      	bne.n	800de06 <_svfprintf_r+0xcbe>
 800de68:	07f6      	lsls	r6, r6, #31
 800de6a:	d5cc      	bpl.n	800de06 <_svfprintf_r+0xcbe>
 800de6c:	aa1e      	add	r2, sp, #120	; 0x78
 800de6e:	33e7      	adds	r3, #231	; 0xe7
 800de70:	189b      	adds	r3, r3, r2
 800de72:	2230      	movs	r2, #48	; 0x30
 800de74:	e789      	b.n	800dd8a <_svfprintf_r+0xc42>
 800de76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d100      	bne.n	800de7e <_svfprintf_r+0xd36>
 800de7c:	e364      	b.n	800e548 <_svfprintf_r+0x1400>
 800de7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800de80:	211b      	movs	r1, #27
 800de82:	ab3f      	add	r3, sp, #252	; 0xfc
 800de84:	701a      	strb	r2, [r3, #0]
 800de86:	2200      	movs	r2, #0
 800de88:	a81e      	add	r0, sp, #120	; 0x78
 800de8a:	1809      	adds	r1, r1, r0
 800de8c:	700a      	strb	r2, [r1, #0]
 800de8e:	940d      	str	r4, [sp, #52]	; 0x34
 800de90:	f7ff fabd 	bl	800d40e <_svfprintf_r+0x2c6>
 800de94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de96:	f7ff fb44 	bl	800d522 <_svfprintf_r+0x3da>
 800de9a:	2010      	movs	r0, #16
 800de9c:	1812      	adds	r2, r2, r0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	922e      	str	r2, [sp, #184]	; 0xb8
 800dea2:	932d      	str	r3, [sp, #180]	; 0xb4
 800dea4:	2b07      	cmp	r3, #7
 800dea6:	dd08      	ble.n	800deba <_svfprintf_r+0xd72>
 800dea8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800deaa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800deac:	aa2c      	add	r2, sp, #176	; 0xb0
 800deae:	f003 fa61 	bl	8011374 <__ssprint_r>
 800deb2:	2800      	cmp	r0, #0
 800deb4:	d000      	beq.n	800deb8 <_svfprintf_r+0xd70>
 800deb6:	e326      	b.n	800e506 <_svfprintf_r+0x13be>
 800deb8:	a92f      	add	r1, sp, #188	; 0xbc
 800deba:	000f      	movs	r7, r1
 800debc:	3c10      	subs	r4, #16
 800debe:	e4c5      	b.n	800d84c <_svfprintf_r+0x704>
 800dec0:	2010      	movs	r0, #16
 800dec2:	1812      	adds	r2, r2, r0
 800dec4:	6078      	str	r0, [r7, #4]
 800dec6:	922e      	str	r2, [sp, #184]	; 0xb8
 800dec8:	932d      	str	r3, [sp, #180]	; 0xb4
 800deca:	2b07      	cmp	r3, #7
 800decc:	dd08      	ble.n	800dee0 <_svfprintf_r+0xd98>
 800dece:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ded0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ded2:	aa2c      	add	r2, sp, #176	; 0xb0
 800ded4:	f003 fa4e 	bl	8011374 <__ssprint_r>
 800ded8:	2800      	cmp	r0, #0
 800deda:	d000      	beq.n	800dede <_svfprintf_r+0xd96>
 800dedc:	e313      	b.n	800e506 <_svfprintf_r+0x13be>
 800dede:	a92f      	add	r1, sp, #188	; 0xbc
 800dee0:	000f      	movs	r7, r1
 800dee2:	3c10      	subs	r4, #16
 800dee4:	e50b      	b.n	800d8fe <_svfprintf_r+0x7b6>
 800dee6:	2010      	movs	r0, #16
 800dee8:	1812      	adds	r2, r2, r0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	922e      	str	r2, [sp, #184]	; 0xb8
 800deee:	932d      	str	r3, [sp, #180]	; 0xb4
 800def0:	2b07      	cmp	r3, #7
 800def2:	dd08      	ble.n	800df06 <_svfprintf_r+0xdbe>
 800def4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800def6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800def8:	aa2c      	add	r2, sp, #176	; 0xb0
 800defa:	f003 fa3b 	bl	8011374 <__ssprint_r>
 800defe:	2800      	cmp	r0, #0
 800df00:	d000      	beq.n	800df04 <_svfprintf_r+0xdbc>
 800df02:	e300      	b.n	800e506 <_svfprintf_r+0x13be>
 800df04:	a92f      	add	r1, sp, #188	; 0xbc
 800df06:	000f      	movs	r7, r1
 800df08:	3c10      	subs	r4, #16
 800df0a:	e518      	b.n	800d93e <_svfprintf_r+0x7f6>
 800df0c:	fffffbff 	.word	0xfffffbff
 800df10:	00007830 	.word	0x00007830
 800df14:	0801480c 	.word	0x0801480c
 800df18:	0801481d 	.word	0x0801481d
 800df1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df1e:	2b65      	cmp	r3, #101	; 0x65
 800df20:	dc00      	bgt.n	800df24 <_svfprintf_r+0xddc>
 800df22:	e241      	b.n	800e3a8 <_svfprintf_r+0x1260>
 800df24:	9814      	ldr	r0, [sp, #80]	; 0x50
 800df26:	9915      	ldr	r1, [sp, #84]	; 0x54
 800df28:	2200      	movs	r2, #0
 800df2a:	2300      	movs	r3, #0
 800df2c:	f7f2 fa8c 	bl	8000448 <__aeabi_dcmpeq>
 800df30:	2800      	cmp	r0, #0
 800df32:	d077      	beq.n	800e024 <_svfprintf_r+0xedc>
 800df34:	4bca      	ldr	r3, [pc, #808]	; (800e260 <_svfprintf_r+0x1118>)
 800df36:	603b      	str	r3, [r7, #0]
 800df38:	2301      	movs	r3, #1
 800df3a:	607b      	str	r3, [r7, #4]
 800df3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df3e:	3708      	adds	r7, #8
 800df40:	3301      	adds	r3, #1
 800df42:	932e      	str	r3, [sp, #184]	; 0xb8
 800df44:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df46:	3301      	adds	r3, #1
 800df48:	932d      	str	r3, [sp, #180]	; 0xb4
 800df4a:	2b07      	cmp	r3, #7
 800df4c:	dd08      	ble.n	800df60 <_svfprintf_r+0xe18>
 800df4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df50:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df52:	aa2c      	add	r2, sp, #176	; 0xb0
 800df54:	f003 fa0e 	bl	8011374 <__ssprint_r>
 800df58:	2800      	cmp	r0, #0
 800df5a:	d000      	beq.n	800df5e <_svfprintf_r+0xe16>
 800df5c:	e2d3      	b.n	800e506 <_svfprintf_r+0x13be>
 800df5e:	af2f      	add	r7, sp, #188	; 0xbc
 800df60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800df62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df64:	4293      	cmp	r3, r2
 800df66:	db01      	blt.n	800df6c <_svfprintf_r+0xe24>
 800df68:	07f3      	lsls	r3, r6, #31
 800df6a:	d51b      	bpl.n	800dfa4 <_svfprintf_r+0xe5c>
 800df6c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800df6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800df70:	603b      	str	r3, [r7, #0]
 800df72:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800df74:	607b      	str	r3, [r7, #4]
 800df76:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800df78:	3708      	adds	r7, #8
 800df7a:	189b      	adds	r3, r3, r2
 800df7c:	932e      	str	r3, [sp, #184]	; 0xb8
 800df7e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df80:	3301      	adds	r3, #1
 800df82:	932d      	str	r3, [sp, #180]	; 0xb4
 800df84:	2b07      	cmp	r3, #7
 800df86:	dd08      	ble.n	800df9a <_svfprintf_r+0xe52>
 800df88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df8c:	aa2c      	add	r2, sp, #176	; 0xb0
 800df8e:	f003 f9f1 	bl	8011374 <__ssprint_r>
 800df92:	2800      	cmp	r0, #0
 800df94:	d000      	beq.n	800df98 <_svfprintf_r+0xe50>
 800df96:	e2b6      	b.n	800e506 <_svfprintf_r+0x13be>
 800df98:	af2f      	add	r7, sp, #188	; 0xbc
 800df9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df9c:	2510      	movs	r5, #16
 800df9e:	1e5c      	subs	r4, r3, #1
 800dfa0:	2c00      	cmp	r4, #0
 800dfa2:	dc2e      	bgt.n	800e002 <_svfprintf_r+0xeba>
 800dfa4:	0776      	lsls	r6, r6, #29
 800dfa6:	d500      	bpl.n	800dfaa <_svfprintf_r+0xe62>
 800dfa8:	e290      	b.n	800e4cc <_svfprintf_r+0x1384>
 800dfaa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dfac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	da00      	bge.n	800dfb4 <_svfprintf_r+0xe6c>
 800dfb2:	0013      	movs	r3, r2
 800dfb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dfb6:	18d3      	adds	r3, r2, r3
 800dfb8:	9317      	str	r3, [sp, #92]	; 0x5c
 800dfba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d007      	beq.n	800dfd0 <_svfprintf_r+0xe88>
 800dfc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dfc4:	aa2c      	add	r2, sp, #176	; 0xb0
 800dfc6:	f003 f9d5 	bl	8011374 <__ssprint_r>
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	d000      	beq.n	800dfd0 <_svfprintf_r+0xe88>
 800dfce:	e29a      	b.n	800e506 <_svfprintf_r+0x13be>
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	932d      	str	r3, [sp, #180]	; 0xb4
 800dfd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d000      	beq.n	800dfdc <_svfprintf_r+0xe94>
 800dfda:	e2b0      	b.n	800e53e <_svfprintf_r+0x13f6>
 800dfdc:	af2f      	add	r7, sp, #188	; 0xbc
 800dfde:	e5dc      	b.n	800db9a <_svfprintf_r+0xa52>
 800dfe0:	3210      	adds	r2, #16
 800dfe2:	607d      	str	r5, [r7, #4]
 800dfe4:	922e      	str	r2, [sp, #184]	; 0xb8
 800dfe6:	932d      	str	r3, [sp, #180]	; 0xb4
 800dfe8:	2b07      	cmp	r3, #7
 800dfea:	dd08      	ble.n	800dffe <_svfprintf_r+0xeb6>
 800dfec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfee:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dff0:	aa2c      	add	r2, sp, #176	; 0xb0
 800dff2:	f003 f9bf 	bl	8011374 <__ssprint_r>
 800dff6:	2800      	cmp	r0, #0
 800dff8:	d000      	beq.n	800dffc <_svfprintf_r+0xeb4>
 800dffa:	e284      	b.n	800e506 <_svfprintf_r+0x13be>
 800dffc:	a92f      	add	r1, sp, #188	; 0xbc
 800dffe:	000f      	movs	r7, r1
 800e000:	3c10      	subs	r4, #16
 800e002:	0039      	movs	r1, r7
 800e004:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e006:	4897      	ldr	r0, [pc, #604]	; (800e264 <_svfprintf_r+0x111c>)
 800e008:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e00a:	3301      	adds	r3, #1
 800e00c:	3108      	adds	r1, #8
 800e00e:	6038      	str	r0, [r7, #0]
 800e010:	2c10      	cmp	r4, #16
 800e012:	dce5      	bgt.n	800dfe0 <_svfprintf_r+0xe98>
 800e014:	607c      	str	r4, [r7, #4]
 800e016:	18a4      	adds	r4, r4, r2
 800e018:	942e      	str	r4, [sp, #184]	; 0xb8
 800e01a:	000f      	movs	r7, r1
 800e01c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e01e:	2b07      	cmp	r3, #7
 800e020:	ddc0      	ble.n	800dfa4 <_svfprintf_r+0xe5c>
 800e022:	e05f      	b.n	800e0e4 <_svfprintf_r+0xf9c>
 800e024:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e026:	2b00      	cmp	r3, #0
 800e028:	dc78      	bgt.n	800e11c <_svfprintf_r+0xfd4>
 800e02a:	4b8d      	ldr	r3, [pc, #564]	; (800e260 <_svfprintf_r+0x1118>)
 800e02c:	603b      	str	r3, [r7, #0]
 800e02e:	2301      	movs	r3, #1
 800e030:	607b      	str	r3, [r7, #4]
 800e032:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e034:	3708      	adds	r7, #8
 800e036:	3301      	adds	r3, #1
 800e038:	932e      	str	r3, [sp, #184]	; 0xb8
 800e03a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e03c:	3301      	adds	r3, #1
 800e03e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e040:	2b07      	cmp	r3, #7
 800e042:	dd08      	ble.n	800e056 <_svfprintf_r+0xf0e>
 800e044:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e046:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e048:	aa2c      	add	r2, sp, #176	; 0xb0
 800e04a:	f003 f993 	bl	8011374 <__ssprint_r>
 800e04e:	2800      	cmp	r0, #0
 800e050:	d000      	beq.n	800e054 <_svfprintf_r+0xf0c>
 800e052:	e258      	b.n	800e506 <_svfprintf_r+0x13be>
 800e054:	af2f      	add	r7, sp, #188	; 0xbc
 800e056:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e058:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e05a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e05c:	430b      	orrs	r3, r1
 800e05e:	2101      	movs	r1, #1
 800e060:	4031      	ands	r1, r6
 800e062:	430b      	orrs	r3, r1
 800e064:	d09e      	beq.n	800dfa4 <_svfprintf_r+0xe5c>
 800e066:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e068:	603b      	str	r3, [r7, #0]
 800e06a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e06c:	607b      	str	r3, [r7, #4]
 800e06e:	189a      	adds	r2, r3, r2
 800e070:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e072:	922e      	str	r2, [sp, #184]	; 0xb8
 800e074:	3301      	adds	r3, #1
 800e076:	932d      	str	r3, [sp, #180]	; 0xb4
 800e078:	3708      	adds	r7, #8
 800e07a:	2b07      	cmp	r3, #7
 800e07c:	dd08      	ble.n	800e090 <_svfprintf_r+0xf48>
 800e07e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e080:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e082:	aa2c      	add	r2, sp, #176	; 0xb0
 800e084:	f003 f976 	bl	8011374 <__ssprint_r>
 800e088:	2800      	cmp	r0, #0
 800e08a:	d000      	beq.n	800e08e <_svfprintf_r+0xf46>
 800e08c:	e23b      	b.n	800e506 <_svfprintf_r+0x13be>
 800e08e:	af2f      	add	r7, sp, #188	; 0xbc
 800e090:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e092:	2c00      	cmp	r4, #0
 800e094:	da19      	bge.n	800e0ca <_svfprintf_r+0xf82>
 800e096:	0038      	movs	r0, r7
 800e098:	2510      	movs	r5, #16
 800e09a:	4264      	negs	r4, r4
 800e09c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e09e:	4a71      	ldr	r2, [pc, #452]	; (800e264 <_svfprintf_r+0x111c>)
 800e0a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e0a2:	3101      	adds	r1, #1
 800e0a4:	3708      	adds	r7, #8
 800e0a6:	6002      	str	r2, [r0, #0]
 800e0a8:	2c10      	cmp	r4, #16
 800e0aa:	dc25      	bgt.n	800e0f8 <_svfprintf_r+0xfb0>
 800e0ac:	6044      	str	r4, [r0, #4]
 800e0ae:	18e4      	adds	r4, r4, r3
 800e0b0:	942e      	str	r4, [sp, #184]	; 0xb8
 800e0b2:	912d      	str	r1, [sp, #180]	; 0xb4
 800e0b4:	2907      	cmp	r1, #7
 800e0b6:	dd08      	ble.n	800e0ca <_svfprintf_r+0xf82>
 800e0b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e0bc:	aa2c      	add	r2, sp, #176	; 0xb0
 800e0be:	f003 f959 	bl	8011374 <__ssprint_r>
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	d000      	beq.n	800e0c8 <_svfprintf_r+0xf80>
 800e0c6:	e21e      	b.n	800e506 <_svfprintf_r+0x13be>
 800e0c8:	af2f      	add	r7, sp, #188	; 0xbc
 800e0ca:	9b08      	ldr	r3, [sp, #32]
 800e0cc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e0ce:	603b      	str	r3, [r7, #0]
 800e0d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0d2:	18d2      	adds	r2, r2, r3
 800e0d4:	922e      	str	r2, [sp, #184]	; 0xb8
 800e0d6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e0d8:	607b      	str	r3, [r7, #4]
 800e0da:	3201      	adds	r2, #1
 800e0dc:	922d      	str	r2, [sp, #180]	; 0xb4
 800e0de:	2a07      	cmp	r2, #7
 800e0e0:	dc00      	bgt.n	800e0e4 <_svfprintf_r+0xf9c>
 800e0e2:	e45b      	b.n	800d99c <_svfprintf_r+0x854>
 800e0e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e0e8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e0ea:	f003 f943 	bl	8011374 <__ssprint_r>
 800e0ee:	2800      	cmp	r0, #0
 800e0f0:	d000      	beq.n	800e0f4 <_svfprintf_r+0xfac>
 800e0f2:	e208      	b.n	800e506 <_svfprintf_r+0x13be>
 800e0f4:	af2f      	add	r7, sp, #188	; 0xbc
 800e0f6:	e755      	b.n	800dfa4 <_svfprintf_r+0xe5c>
 800e0f8:	3310      	adds	r3, #16
 800e0fa:	6045      	str	r5, [r0, #4]
 800e0fc:	932e      	str	r3, [sp, #184]	; 0xb8
 800e0fe:	912d      	str	r1, [sp, #180]	; 0xb4
 800e100:	2907      	cmp	r1, #7
 800e102:	dd08      	ble.n	800e116 <_svfprintf_r+0xfce>
 800e104:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e106:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e108:	aa2c      	add	r2, sp, #176	; 0xb0
 800e10a:	f003 f933 	bl	8011374 <__ssprint_r>
 800e10e:	2800      	cmp	r0, #0
 800e110:	d000      	beq.n	800e114 <_svfprintf_r+0xfcc>
 800e112:	e1f8      	b.n	800e506 <_svfprintf_r+0x13be>
 800e114:	af2f      	add	r7, sp, #188	; 0xbc
 800e116:	0038      	movs	r0, r7
 800e118:	3c10      	subs	r4, #16
 800e11a:	e7bf      	b.n	800e09c <_svfprintf_r+0xf54>
 800e11c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e11e:	002c      	movs	r4, r5
 800e120:	429d      	cmp	r5, r3
 800e122:	dd00      	ble.n	800e126 <_svfprintf_r+0xfde>
 800e124:	001c      	movs	r4, r3
 800e126:	2c00      	cmp	r4, #0
 800e128:	dd14      	ble.n	800e154 <_svfprintf_r+0x100c>
 800e12a:	9b08      	ldr	r3, [sp, #32]
 800e12c:	607c      	str	r4, [r7, #4]
 800e12e:	603b      	str	r3, [r7, #0]
 800e130:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e132:	3708      	adds	r7, #8
 800e134:	18e3      	adds	r3, r4, r3
 800e136:	932e      	str	r3, [sp, #184]	; 0xb8
 800e138:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e13a:	3301      	adds	r3, #1
 800e13c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e13e:	2b07      	cmp	r3, #7
 800e140:	dd08      	ble.n	800e154 <_svfprintf_r+0x100c>
 800e142:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e144:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e146:	aa2c      	add	r2, sp, #176	; 0xb0
 800e148:	f003 f914 	bl	8011374 <__ssprint_r>
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d000      	beq.n	800e152 <_svfprintf_r+0x100a>
 800e150:	e1d9      	b.n	800e506 <_svfprintf_r+0x13be>
 800e152:	af2f      	add	r7, sp, #188	; 0xbc
 800e154:	43e3      	mvns	r3, r4
 800e156:	17db      	asrs	r3, r3, #31
 800e158:	401c      	ands	r4, r3
 800e15a:	1b2c      	subs	r4, r5, r4
 800e15c:	2c00      	cmp	r4, #0
 800e15e:	dd18      	ble.n	800e192 <_svfprintf_r+0x104a>
 800e160:	0039      	movs	r1, r7
 800e162:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e164:	483f      	ldr	r0, [pc, #252]	; (800e264 <_svfprintf_r+0x111c>)
 800e166:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e168:	3301      	adds	r3, #1
 800e16a:	3108      	adds	r1, #8
 800e16c:	6038      	str	r0, [r7, #0]
 800e16e:	2c10      	cmp	r4, #16
 800e170:	dc7a      	bgt.n	800e268 <_svfprintf_r+0x1120>
 800e172:	607c      	str	r4, [r7, #4]
 800e174:	18a4      	adds	r4, r4, r2
 800e176:	000f      	movs	r7, r1
 800e178:	942e      	str	r4, [sp, #184]	; 0xb8
 800e17a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e17c:	2b07      	cmp	r3, #7
 800e17e:	dd08      	ble.n	800e192 <_svfprintf_r+0x104a>
 800e180:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e182:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e184:	aa2c      	add	r2, sp, #176	; 0xb0
 800e186:	f003 f8f5 	bl	8011374 <__ssprint_r>
 800e18a:	2800      	cmp	r0, #0
 800e18c:	d000      	beq.n	800e190 <_svfprintf_r+0x1048>
 800e18e:	e1ba      	b.n	800e506 <_svfprintf_r+0x13be>
 800e190:	af2f      	add	r7, sp, #188	; 0xbc
 800e192:	9b08      	ldr	r3, [sp, #32]
 800e194:	195d      	adds	r5, r3, r5
 800e196:	0573      	lsls	r3, r6, #21
 800e198:	d50b      	bpl.n	800e1b2 <_svfprintf_r+0x106a>
 800e19a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d176      	bne.n	800e28e <_svfprintf_r+0x1146>
 800e1a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d176      	bne.n	800e294 <_svfprintf_r+0x114c>
 800e1a6:	9b08      	ldr	r3, [sp, #32]
 800e1a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1aa:	189b      	adds	r3, r3, r2
 800e1ac:	429d      	cmp	r5, r3
 800e1ae:	d900      	bls.n	800e1b2 <_svfprintf_r+0x106a>
 800e1b0:	001d      	movs	r5, r3
 800e1b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e1b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	db01      	blt.n	800e1be <_svfprintf_r+0x1076>
 800e1ba:	07f3      	lsls	r3, r6, #31
 800e1bc:	d516      	bpl.n	800e1ec <_svfprintf_r+0x10a4>
 800e1be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e1c0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e1c2:	603b      	str	r3, [r7, #0]
 800e1c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e1c6:	607b      	str	r3, [r7, #4]
 800e1c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	189b      	adds	r3, r3, r2
 800e1ce:	932e      	str	r3, [sp, #184]	; 0xb8
 800e1d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	932d      	str	r3, [sp, #180]	; 0xb4
 800e1d6:	2b07      	cmp	r3, #7
 800e1d8:	dd08      	ble.n	800e1ec <_svfprintf_r+0x10a4>
 800e1da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e1dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e1de:	aa2c      	add	r2, sp, #176	; 0xb0
 800e1e0:	f003 f8c8 	bl	8011374 <__ssprint_r>
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	d000      	beq.n	800e1ea <_svfprintf_r+0x10a2>
 800e1e8:	e18d      	b.n	800e506 <_svfprintf_r+0x13be>
 800e1ea:	af2f      	add	r7, sp, #188	; 0xbc
 800e1ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1ee:	9b08      	ldr	r3, [sp, #32]
 800e1f0:	4694      	mov	ip, r2
 800e1f2:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e1f4:	4463      	add	r3, ip
 800e1f6:	1b5b      	subs	r3, r3, r5
 800e1f8:	1b14      	subs	r4, r2, r4
 800e1fa:	429c      	cmp	r4, r3
 800e1fc:	dd00      	ble.n	800e200 <_svfprintf_r+0x10b8>
 800e1fe:	001c      	movs	r4, r3
 800e200:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e202:	2c00      	cmp	r4, #0
 800e204:	dd12      	ble.n	800e22c <_svfprintf_r+0x10e4>
 800e206:	18e3      	adds	r3, r4, r3
 800e208:	932e      	str	r3, [sp, #184]	; 0xb8
 800e20a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e20c:	603d      	str	r5, [r7, #0]
 800e20e:	3301      	adds	r3, #1
 800e210:	607c      	str	r4, [r7, #4]
 800e212:	932d      	str	r3, [sp, #180]	; 0xb4
 800e214:	3708      	adds	r7, #8
 800e216:	2b07      	cmp	r3, #7
 800e218:	dd08      	ble.n	800e22c <_svfprintf_r+0x10e4>
 800e21a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e21c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e21e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e220:	f003 f8a8 	bl	8011374 <__ssprint_r>
 800e224:	2800      	cmp	r0, #0
 800e226:	d000      	beq.n	800e22a <_svfprintf_r+0x10e2>
 800e228:	e16d      	b.n	800e506 <_svfprintf_r+0x13be>
 800e22a:	af2f      	add	r7, sp, #188	; 0xbc
 800e22c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e22e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e230:	2510      	movs	r5, #16
 800e232:	1ad3      	subs	r3, r2, r3
 800e234:	43e2      	mvns	r2, r4
 800e236:	17d2      	asrs	r2, r2, #31
 800e238:	4014      	ands	r4, r2
 800e23a:	1b1c      	subs	r4, r3, r4
 800e23c:	2c00      	cmp	r4, #0
 800e23e:	dc00      	bgt.n	800e242 <_svfprintf_r+0x10fa>
 800e240:	e6b0      	b.n	800dfa4 <_svfprintf_r+0xe5c>
 800e242:	0039      	movs	r1, r7
 800e244:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e246:	4807      	ldr	r0, [pc, #28]	; (800e264 <_svfprintf_r+0x111c>)
 800e248:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e24a:	3301      	adds	r3, #1
 800e24c:	3108      	adds	r1, #8
 800e24e:	6038      	str	r0, [r7, #0]
 800e250:	2c10      	cmp	r4, #16
 800e252:	dd00      	ble.n	800e256 <_svfprintf_r+0x110e>
 800e254:	e096      	b.n	800e384 <_svfprintf_r+0x123c>
 800e256:	1912      	adds	r2, r2, r4
 800e258:	607c      	str	r4, [r7, #4]
 800e25a:	922e      	str	r2, [sp, #184]	; 0xb8
 800e25c:	e6dd      	b.n	800e01a <_svfprintf_r+0xed2>
 800e25e:	46c0      	nop			; (mov r8, r8)
 800e260:	0801482e 	.word	0x0801482e
 800e264:	08014840 	.word	0x08014840
 800e268:	2010      	movs	r0, #16
 800e26a:	1812      	adds	r2, r2, r0
 800e26c:	6078      	str	r0, [r7, #4]
 800e26e:	922e      	str	r2, [sp, #184]	; 0xb8
 800e270:	932d      	str	r3, [sp, #180]	; 0xb4
 800e272:	2b07      	cmp	r3, #7
 800e274:	dd08      	ble.n	800e288 <_svfprintf_r+0x1140>
 800e276:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e278:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e27a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e27c:	f003 f87a 	bl	8011374 <__ssprint_r>
 800e280:	2800      	cmp	r0, #0
 800e282:	d000      	beq.n	800e286 <_svfprintf_r+0x113e>
 800e284:	e13f      	b.n	800e506 <_svfprintf_r+0x13be>
 800e286:	a92f      	add	r1, sp, #188	; 0xbc
 800e288:	000f      	movs	r7, r1
 800e28a:	3c10      	subs	r4, #16
 800e28c:	e768      	b.n	800e160 <_svfprintf_r+0x1018>
 800e28e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e290:	2b00      	cmp	r3, #0
 800e292:	d05d      	beq.n	800e350 <_svfprintf_r+0x1208>
 800e294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e296:	3b01      	subs	r3, #1
 800e298:	9310      	str	r3, [sp, #64]	; 0x40
 800e29a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e29c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e29e:	603b      	str	r3, [r7, #0]
 800e2a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e2a2:	607b      	str	r3, [r7, #4]
 800e2a4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e2a6:	3708      	adds	r7, #8
 800e2a8:	189b      	adds	r3, r3, r2
 800e2aa:	932e      	str	r3, [sp, #184]	; 0xb8
 800e2ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	932d      	str	r3, [sp, #180]	; 0xb4
 800e2b2:	2b07      	cmp	r3, #7
 800e2b4:	dd08      	ble.n	800e2c8 <_svfprintf_r+0x1180>
 800e2b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e2b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e2ba:	aa2c      	add	r2, sp, #176	; 0xb0
 800e2bc:	f003 f85a 	bl	8011374 <__ssprint_r>
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	d000      	beq.n	800e2c6 <_svfprintf_r+0x117e>
 800e2c4:	e11f      	b.n	800e506 <_svfprintf_r+0x13be>
 800e2c6:	af2f      	add	r7, sp, #188	; 0xbc
 800e2c8:	9b08      	ldr	r3, [sp, #32]
 800e2ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2cc:	189c      	adds	r4, r3, r2
 800e2ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e2d0:	1b64      	subs	r4, r4, r5
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	429c      	cmp	r4, r3
 800e2d6:	dd00      	ble.n	800e2da <_svfprintf_r+0x1192>
 800e2d8:	001c      	movs	r4, r3
 800e2da:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e2dc:	2c00      	cmp	r4, #0
 800e2de:	dd12      	ble.n	800e306 <_svfprintf_r+0x11be>
 800e2e0:	18e3      	adds	r3, r4, r3
 800e2e2:	932e      	str	r3, [sp, #184]	; 0xb8
 800e2e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e2e6:	603d      	str	r5, [r7, #0]
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	607c      	str	r4, [r7, #4]
 800e2ec:	932d      	str	r3, [sp, #180]	; 0xb4
 800e2ee:	3708      	adds	r7, #8
 800e2f0:	2b07      	cmp	r3, #7
 800e2f2:	dd08      	ble.n	800e306 <_svfprintf_r+0x11be>
 800e2f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e2f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e2f8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e2fa:	f003 f83b 	bl	8011374 <__ssprint_r>
 800e2fe:	2800      	cmp	r0, #0
 800e300:	d000      	beq.n	800e304 <_svfprintf_r+0x11bc>
 800e302:	e100      	b.n	800e506 <_svfprintf_r+0x13be>
 800e304:	af2f      	add	r7, sp, #188	; 0xbc
 800e306:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e308:	781a      	ldrb	r2, [r3, #0]
 800e30a:	43e3      	mvns	r3, r4
 800e30c:	17db      	asrs	r3, r3, #31
 800e30e:	401c      	ands	r4, r3
 800e310:	1b14      	subs	r4, r2, r4
 800e312:	2c00      	cmp	r4, #0
 800e314:	dd18      	ble.n	800e348 <_svfprintf_r+0x1200>
 800e316:	0039      	movs	r1, r7
 800e318:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e31a:	48aa      	ldr	r0, [pc, #680]	; (800e5c4 <_svfprintf_r+0x147c>)
 800e31c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e31e:	3301      	adds	r3, #1
 800e320:	3108      	adds	r1, #8
 800e322:	6038      	str	r0, [r7, #0]
 800e324:	2c10      	cmp	r4, #16
 800e326:	dc1a      	bgt.n	800e35e <_svfprintf_r+0x1216>
 800e328:	1912      	adds	r2, r2, r4
 800e32a:	607c      	str	r4, [r7, #4]
 800e32c:	922e      	str	r2, [sp, #184]	; 0xb8
 800e32e:	000f      	movs	r7, r1
 800e330:	932d      	str	r3, [sp, #180]	; 0xb4
 800e332:	2b07      	cmp	r3, #7
 800e334:	dd08      	ble.n	800e348 <_svfprintf_r+0x1200>
 800e336:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e338:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e33a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e33c:	f003 f81a 	bl	8011374 <__ssprint_r>
 800e340:	2800      	cmp	r0, #0
 800e342:	d000      	beq.n	800e346 <_svfprintf_r+0x11fe>
 800e344:	e0df      	b.n	800e506 <_svfprintf_r+0x13be>
 800e346:	af2f      	add	r7, sp, #188	; 0xbc
 800e348:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	18ed      	adds	r5, r5, r3
 800e34e:	e724      	b.n	800e19a <_svfprintf_r+0x1052>
 800e350:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e352:	3b01      	subs	r3, #1
 800e354:	9312      	str	r3, [sp, #72]	; 0x48
 800e356:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e358:	3b01      	subs	r3, #1
 800e35a:	9311      	str	r3, [sp, #68]	; 0x44
 800e35c:	e79d      	b.n	800e29a <_svfprintf_r+0x1152>
 800e35e:	2010      	movs	r0, #16
 800e360:	1812      	adds	r2, r2, r0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	922e      	str	r2, [sp, #184]	; 0xb8
 800e366:	932d      	str	r3, [sp, #180]	; 0xb4
 800e368:	2b07      	cmp	r3, #7
 800e36a:	dd08      	ble.n	800e37e <_svfprintf_r+0x1236>
 800e36c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e36e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e370:	aa2c      	add	r2, sp, #176	; 0xb0
 800e372:	f002 ffff 	bl	8011374 <__ssprint_r>
 800e376:	2800      	cmp	r0, #0
 800e378:	d000      	beq.n	800e37c <_svfprintf_r+0x1234>
 800e37a:	e0c4      	b.n	800e506 <_svfprintf_r+0x13be>
 800e37c:	a92f      	add	r1, sp, #188	; 0xbc
 800e37e:	000f      	movs	r7, r1
 800e380:	3c10      	subs	r4, #16
 800e382:	e7c8      	b.n	800e316 <_svfprintf_r+0x11ce>
 800e384:	3210      	adds	r2, #16
 800e386:	607d      	str	r5, [r7, #4]
 800e388:	922e      	str	r2, [sp, #184]	; 0xb8
 800e38a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e38c:	2b07      	cmp	r3, #7
 800e38e:	dd08      	ble.n	800e3a2 <_svfprintf_r+0x125a>
 800e390:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e392:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e394:	aa2c      	add	r2, sp, #176	; 0xb0
 800e396:	f002 ffed 	bl	8011374 <__ssprint_r>
 800e39a:	2800      	cmp	r0, #0
 800e39c:	d000      	beq.n	800e3a0 <_svfprintf_r+0x1258>
 800e39e:	e0b2      	b.n	800e506 <_svfprintf_r+0x13be>
 800e3a0:	a92f      	add	r1, sp, #188	; 0xbc
 800e3a2:	000f      	movs	r7, r1
 800e3a4:	3c10      	subs	r4, #16
 800e3a6:	e74c      	b.n	800e242 <_svfprintf_r+0x10fa>
 800e3a8:	003c      	movs	r4, r7
 800e3aa:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e3ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e3ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3b0:	3101      	adds	r1, #1
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	3408      	adds	r4, #8
 800e3b6:	2a01      	cmp	r2, #1
 800e3b8:	dc03      	bgt.n	800e3c2 <_svfprintf_r+0x127a>
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	4216      	tst	r6, r2
 800e3be:	d100      	bne.n	800e3c2 <_svfprintf_r+0x127a>
 800e3c0:	e07f      	b.n	800e4c2 <_svfprintf_r+0x137a>
 800e3c2:	9a08      	ldr	r2, [sp, #32]
 800e3c4:	912e      	str	r1, [sp, #184]	; 0xb8
 800e3c6:	603a      	str	r2, [r7, #0]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	932d      	str	r3, [sp, #180]	; 0xb4
 800e3cc:	607a      	str	r2, [r7, #4]
 800e3ce:	2b07      	cmp	r3, #7
 800e3d0:	dd08      	ble.n	800e3e4 <_svfprintf_r+0x129c>
 800e3d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e3d6:	aa2c      	add	r2, sp, #176	; 0xb0
 800e3d8:	f002 ffcc 	bl	8011374 <__ssprint_r>
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	d000      	beq.n	800e3e2 <_svfprintf_r+0x129a>
 800e3e0:	e091      	b.n	800e506 <_svfprintf_r+0x13be>
 800e3e2:	ac2f      	add	r4, sp, #188	; 0xbc
 800e3e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e3e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e3e8:	6023      	str	r3, [r4, #0]
 800e3ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e3ec:	6063      	str	r3, [r4, #4]
 800e3ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e3f0:	3408      	adds	r4, #8
 800e3f2:	189b      	adds	r3, r3, r2
 800e3f4:	932e      	str	r3, [sp, #184]	; 0xb8
 800e3f6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e3f8:	3301      	adds	r3, #1
 800e3fa:	932d      	str	r3, [sp, #180]	; 0xb4
 800e3fc:	2b07      	cmp	r3, #7
 800e3fe:	dd07      	ble.n	800e410 <_svfprintf_r+0x12c8>
 800e400:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e402:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e404:	aa2c      	add	r2, sp, #176	; 0xb0
 800e406:	f002 ffb5 	bl	8011374 <__ssprint_r>
 800e40a:	2800      	cmp	r0, #0
 800e40c:	d17b      	bne.n	800e506 <_svfprintf_r+0x13be>
 800e40e:	ac2f      	add	r4, sp, #188	; 0xbc
 800e410:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e412:	2200      	movs	r2, #0
 800e414:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e416:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e418:	9309      	str	r3, [sp, #36]	; 0x24
 800e41a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e41c:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800e41e:	1e5d      	subs	r5, r3, #1
 800e420:	2300      	movs	r3, #0
 800e422:	f7f2 f811 	bl	8000448 <__aeabi_dcmpeq>
 800e426:	2800      	cmp	r0, #0
 800e428:	d126      	bne.n	800e478 <_svfprintf_r+0x1330>
 800e42a:	9b08      	ldr	r3, [sp, #32]
 800e42c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e42e:	3301      	adds	r3, #1
 800e430:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e432:	6023      	str	r3, [r4, #0]
 800e434:	1e7b      	subs	r3, r7, #1
 800e436:	3201      	adds	r2, #1
 800e438:	185b      	adds	r3, r3, r1
 800e43a:	6065      	str	r5, [r4, #4]
 800e43c:	932e      	str	r3, [sp, #184]	; 0xb8
 800e43e:	922d      	str	r2, [sp, #180]	; 0xb4
 800e440:	3408      	adds	r4, #8
 800e442:	2a07      	cmp	r2, #7
 800e444:	dd07      	ble.n	800e456 <_svfprintf_r+0x130e>
 800e446:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e448:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e44a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e44c:	f002 ff92 	bl	8011374 <__ssprint_r>
 800e450:	2800      	cmp	r0, #0
 800e452:	d158      	bne.n	800e506 <_svfprintf_r+0x13be>
 800e454:	ac2f      	add	r4, sp, #188	; 0xbc
 800e456:	ab28      	add	r3, sp, #160	; 0xa0
 800e458:	6023      	str	r3, [r4, #0]
 800e45a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e45c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e45e:	6063      	str	r3, [r4, #4]
 800e460:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e462:	189b      	adds	r3, r3, r2
 800e464:	932e      	str	r3, [sp, #184]	; 0xb8
 800e466:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e468:	3301      	adds	r3, #1
 800e46a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e46c:	2b07      	cmp	r3, #7
 800e46e:	dd00      	ble.n	800e472 <_svfprintf_r+0x132a>
 800e470:	e638      	b.n	800e0e4 <_svfprintf_r+0xf9c>
 800e472:	3408      	adds	r4, #8
 800e474:	0027      	movs	r7, r4
 800e476:	e595      	b.n	800dfa4 <_svfprintf_r+0xe5c>
 800e478:	2710      	movs	r7, #16
 800e47a:	2d00      	cmp	r5, #0
 800e47c:	ddeb      	ble.n	800e456 <_svfprintf_r+0x130e>
 800e47e:	0021      	movs	r1, r4
 800e480:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e482:	4850      	ldr	r0, [pc, #320]	; (800e5c4 <_svfprintf_r+0x147c>)
 800e484:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e486:	3301      	adds	r3, #1
 800e488:	3108      	adds	r1, #8
 800e48a:	6020      	str	r0, [r4, #0]
 800e48c:	2d10      	cmp	r5, #16
 800e48e:	dc07      	bgt.n	800e4a0 <_svfprintf_r+0x1358>
 800e490:	6065      	str	r5, [r4, #4]
 800e492:	000c      	movs	r4, r1
 800e494:	18ad      	adds	r5, r5, r2
 800e496:	952e      	str	r5, [sp, #184]	; 0xb8
 800e498:	932d      	str	r3, [sp, #180]	; 0xb4
 800e49a:	2b07      	cmp	r3, #7
 800e49c:	dddb      	ble.n	800e456 <_svfprintf_r+0x130e>
 800e49e:	e7d2      	b.n	800e446 <_svfprintf_r+0x12fe>
 800e4a0:	3210      	adds	r2, #16
 800e4a2:	6067      	str	r7, [r4, #4]
 800e4a4:	922e      	str	r2, [sp, #184]	; 0xb8
 800e4a6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4a8:	2b07      	cmp	r3, #7
 800e4aa:	dd07      	ble.n	800e4bc <_svfprintf_r+0x1374>
 800e4ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4b0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e4b2:	f002 ff5f 	bl	8011374 <__ssprint_r>
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	d125      	bne.n	800e506 <_svfprintf_r+0x13be>
 800e4ba:	a92f      	add	r1, sp, #188	; 0xbc
 800e4bc:	000c      	movs	r4, r1
 800e4be:	3d10      	subs	r5, #16
 800e4c0:	e7dd      	b.n	800e47e <_svfprintf_r+0x1336>
 800e4c2:	9808      	ldr	r0, [sp, #32]
 800e4c4:	912e      	str	r1, [sp, #184]	; 0xb8
 800e4c6:	c705      	stmia	r7!, {r0, r2}
 800e4c8:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4ca:	e7e6      	b.n	800e49a <_svfprintf_r+0x1352>
 800e4cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e4ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e4d0:	2510      	movs	r5, #16
 800e4d2:	1a9c      	subs	r4, r3, r2
 800e4d4:	2c00      	cmp	r4, #0
 800e4d6:	dc00      	bgt.n	800e4da <_svfprintf_r+0x1392>
 800e4d8:	e567      	b.n	800dfaa <_svfprintf_r+0xe62>
 800e4da:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e4dc:	493a      	ldr	r1, [pc, #232]	; (800e5c8 <_svfprintf_r+0x1480>)
 800e4de:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	6039      	str	r1, [r7, #0]
 800e4e4:	2c10      	cmp	r4, #16
 800e4e6:	dc19      	bgt.n	800e51c <_svfprintf_r+0x13d4>
 800e4e8:	607c      	str	r4, [r7, #4]
 800e4ea:	18a4      	adds	r4, r4, r2
 800e4ec:	942e      	str	r4, [sp, #184]	; 0xb8
 800e4ee:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4f0:	2b07      	cmp	r3, #7
 800e4f2:	dc00      	bgt.n	800e4f6 <_svfprintf_r+0x13ae>
 800e4f4:	e559      	b.n	800dfaa <_svfprintf_r+0xe62>
 800e4f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4fa:	aa2c      	add	r2, sp, #176	; 0xb0
 800e4fc:	f002 ff3a 	bl	8011374 <__ssprint_r>
 800e500:	2800      	cmp	r0, #0
 800e502:	d100      	bne.n	800e506 <_svfprintf_r+0x13be>
 800e504:	e551      	b.n	800dfaa <_svfprintf_r+0xe62>
 800e506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d101      	bne.n	800e510 <_svfprintf_r+0x13c8>
 800e50c:	f7ff f845 	bl	800d59a <_svfprintf_r+0x452>
 800e510:	0019      	movs	r1, r3
 800e512:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e514:	f7fd fd80 	bl	800c018 <_free_r>
 800e518:	f7ff f83f 	bl	800d59a <_svfprintf_r+0x452>
 800e51c:	3210      	adds	r2, #16
 800e51e:	607d      	str	r5, [r7, #4]
 800e520:	922e      	str	r2, [sp, #184]	; 0xb8
 800e522:	932d      	str	r3, [sp, #180]	; 0xb4
 800e524:	3708      	adds	r7, #8
 800e526:	2b07      	cmp	r3, #7
 800e528:	dd07      	ble.n	800e53a <_svfprintf_r+0x13f2>
 800e52a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e52c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e52e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e530:	f002 ff20 	bl	8011374 <__ssprint_r>
 800e534:	2800      	cmp	r0, #0
 800e536:	d1e6      	bne.n	800e506 <_svfprintf_r+0x13be>
 800e538:	af2f      	add	r7, sp, #188	; 0xbc
 800e53a:	3c10      	subs	r4, #16
 800e53c:	e7cd      	b.n	800e4da <_svfprintf_r+0x1392>
 800e53e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e540:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e542:	f7fd fd69 	bl	800c018 <_free_r>
 800e546:	e549      	b.n	800dfdc <_svfprintf_r+0xe94>
 800e548:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d101      	bne.n	800e552 <_svfprintf_r+0x140a>
 800e54e:	f7ff f824 	bl	800d59a <_svfprintf_r+0x452>
 800e552:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e554:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e556:	aa2c      	add	r2, sp, #176	; 0xb0
 800e558:	f002 ff0c 	bl	8011374 <__ssprint_r>
 800e55c:	f7ff f81d 	bl	800d59a <_svfprintf_r+0x452>
 800e560:	0034      	movs	r4, r6
 800e562:	2a00      	cmp	r2, #0
 800e564:	d101      	bne.n	800e56a <_svfprintf_r+0x1422>
 800e566:	f7fe ff8c 	bl	800d482 <_svfprintf_r+0x33a>
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d101      	bne.n	800e572 <_svfprintf_r+0x142a>
 800e56e:	f7ff fc01 	bl	800dd74 <_svfprintf_r+0xc2c>
 800e572:	2b02      	cmp	r3, #2
 800e574:	d100      	bne.n	800e578 <_svfprintf_r+0x1430>
 800e576:	e459      	b.n	800de2c <_svfprintf_r+0xce4>
 800e578:	2507      	movs	r5, #7
 800e57a:	ab58      	add	r3, sp, #352	; 0x160
 800e57c:	9308      	str	r3, [sp, #32]
 800e57e:	9a08      	ldr	r2, [sp, #32]
 800e580:	0013      	movs	r3, r2
 800e582:	3b01      	subs	r3, #1
 800e584:	9308      	str	r3, [sp, #32]
 800e586:	9b06      	ldr	r3, [sp, #24]
 800e588:	9908      	ldr	r1, [sp, #32]
 800e58a:	402b      	ands	r3, r5
 800e58c:	3330      	adds	r3, #48	; 0x30
 800e58e:	700b      	strb	r3, [r1, #0]
 800e590:	9907      	ldr	r1, [sp, #28]
 800e592:	074e      	lsls	r6, r1, #29
 800e594:	9906      	ldr	r1, [sp, #24]
 800e596:	08c8      	lsrs	r0, r1, #3
 800e598:	9907      	ldr	r1, [sp, #28]
 800e59a:	4306      	orrs	r6, r0
 800e59c:	08c9      	lsrs	r1, r1, #3
 800e59e:	9107      	str	r1, [sp, #28]
 800e5a0:	0031      	movs	r1, r6
 800e5a2:	9807      	ldr	r0, [sp, #28]
 800e5a4:	9606      	str	r6, [sp, #24]
 800e5a6:	4301      	orrs	r1, r0
 800e5a8:	d1e9      	bne.n	800e57e <_svfprintf_r+0x1436>
 800e5aa:	07e1      	lsls	r1, r4, #31
 800e5ac:	d400      	bmi.n	800e5b0 <_svfprintf_r+0x1468>
 800e5ae:	e42a      	b.n	800de06 <_svfprintf_r+0xcbe>
 800e5b0:	2b30      	cmp	r3, #48	; 0x30
 800e5b2:	d100      	bne.n	800e5b6 <_svfprintf_r+0x146e>
 800e5b4:	e427      	b.n	800de06 <_svfprintf_r+0xcbe>
 800e5b6:	2130      	movs	r1, #48	; 0x30
 800e5b8:	9b08      	ldr	r3, [sp, #32]
 800e5ba:	3b01      	subs	r3, #1
 800e5bc:	7019      	strb	r1, [r3, #0]
 800e5be:	1e93      	subs	r3, r2, #2
 800e5c0:	9308      	str	r3, [sp, #32]
 800e5c2:	e420      	b.n	800de06 <_svfprintf_r+0xcbe>
 800e5c4:	08014840 	.word	0x08014840
 800e5c8:	08014830 	.word	0x08014830

0800e5cc <__ssvfscanf_r>:
 800e5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5ce:	4ca7      	ldr	r4, [pc, #668]	; (800e86c <__ssvfscanf_r+0x2a0>)
 800e5d0:	44a5      	add	sp, r4
 800e5d2:	af02      	add	r7, sp, #8
 800e5d4:	633b      	str	r3, [r7, #48]	; 0x30
 800e5d6:	000b      	movs	r3, r1
 800e5d8:	6378      	str	r0, [r7, #52]	; 0x34
 800e5da:	6479      	str	r1, [r7, #68]	; 0x44
 800e5dc:	61ba      	str	r2, [r7, #24]
 800e5de:	220c      	movs	r2, #12
 800e5e0:	5e9a      	ldrsh	r2, [r3, r2]
 800e5e2:	2380      	movs	r3, #128	; 0x80
 800e5e4:	019b      	lsls	r3, r3, #6
 800e5e6:	421a      	tst	r2, r3
 800e5e8:	d105      	bne.n	800e5f6 <__ssvfscanf_r+0x2a>
 800e5ea:	4313      	orrs	r3, r2
 800e5ec:	818b      	strh	r3, [r1, #12]
 800e5ee:	4aa0      	ldr	r2, [pc, #640]	; (800e870 <__ssvfscanf_r+0x2a4>)
 800e5f0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e5f2:	4013      	ands	r3, r2
 800e5f4:	664b      	str	r3, [r1, #100]	; 0x64
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	617b      	str	r3, [r7, #20]
 800e5fa:	643b      	str	r3, [r7, #64]	; 0x40
 800e5fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5fe:	627b      	str	r3, [r7, #36]	; 0x24
 800e600:	63bb      	str	r3, [r7, #56]	; 0x38
 800e602:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	69ba      	ldr	r2, [r7, #24]
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	3201      	adds	r2, #1
 800e60c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e60e:	61ba      	str	r2, [r7, #24]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d100      	bne.n	800e616 <__ssvfscanf_r+0x4a>
 800e614:	e0d7      	b.n	800e7c6 <__ssvfscanf_r+0x1fa>
 800e616:	2608      	movs	r6, #8
 800e618:	2108      	movs	r1, #8
 800e61a:	4a96      	ldr	r2, [pc, #600]	; (800e874 <__ssvfscanf_r+0x2a8>)
 800e61c:	5cd2      	ldrb	r2, [r2, r3]
 800e61e:	4016      	ands	r6, r2
 800e620:	420a      	tst	r2, r1
 800e622:	d01d      	beq.n	800e660 <__ssvfscanf_r+0x94>
 800e624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	dd12      	ble.n	800e652 <__ssvfscanf_r+0x86>
 800e62c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e62e:	4991      	ldr	r1, [pc, #580]	; (800e874 <__ssvfscanf_r+0x2a8>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	781a      	ldrb	r2, [r3, #0]
 800e634:	5c8a      	ldrb	r2, [r1, r2]
 800e636:	2108      	movs	r1, #8
 800e638:	420a      	tst	r2, r1
 800e63a:	d0e3      	beq.n	800e604 <__ssvfscanf_r+0x38>
 800e63c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e63e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e640:	3201      	adds	r2, #1
 800e642:	63ba      	str	r2, [r7, #56]	; 0x38
 800e644:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e646:	3301      	adds	r3, #1
 800e648:	6852      	ldr	r2, [r2, #4]
 800e64a:	600b      	str	r3, [r1, #0]
 800e64c:	3a01      	subs	r2, #1
 800e64e:	604a      	str	r2, [r1, #4]
 800e650:	e7e8      	b.n	800e624 <__ssvfscanf_r+0x58>
 800e652:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e654:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e656:	f002 ff4d 	bl	80114f4 <__ssrefill_r>
 800e65a:	2800      	cmp	r0, #0
 800e65c:	d0e6      	beq.n	800e62c <__ssvfscanf_r+0x60>
 800e65e:	e7d1      	b.n	800e604 <__ssvfscanf_r+0x38>
 800e660:	2b25      	cmp	r3, #37	; 0x25
 800e662:	d165      	bne.n	800e730 <__ssvfscanf_r+0x164>
 800e664:	250a      	movs	r5, #10
 800e666:	2480      	movs	r4, #128	; 0x80
 800e668:	69ba      	ldr	r2, [r7, #24]
 800e66a:	63fe      	str	r6, [r7, #60]	; 0x3c
 800e66c:	3b16      	subs	r3, #22
 800e66e:	69b9      	ldr	r1, [r7, #24]
 800e670:	3101      	adds	r1, #1
 800e672:	61b9      	str	r1, [r7, #24]
 800e674:	7811      	ldrb	r1, [r2, #0]
 800e676:	0008      	movs	r0, r1
 800e678:	3825      	subs	r0, #37	; 0x25
 800e67a:	2855      	cmp	r0, #85	; 0x55
 800e67c:	d900      	bls.n	800e680 <__ssvfscanf_r+0xb4>
 800e67e:	e170      	b.n	800e962 <__ssvfscanf_r+0x396>
 800e680:	f7f1 fd52 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e684:	016f0056 	.word	0x016f0056
 800e688:	016f016f 	.word	0x016f016f
 800e68c:	0081016f 	.word	0x0081016f
 800e690:	016f016f 	.word	0x016f016f
 800e694:	016f016f 	.word	0x016f016f
 800e698:	00b8016f 	.word	0x00b8016f
 800e69c:	00b800b8 	.word	0x00b800b8
 800e6a0:	00b800b8 	.word	0x00b800b8
 800e6a4:	00b800b8 	.word	0x00b800b8
 800e6a8:	00b800b8 	.word	0x00b800b8
 800e6ac:	016f00b8 	.word	0x016f00b8
 800e6b0:	016f016f 	.word	0x016f016f
 800e6b4:	016f016f 	.word	0x016f016f
 800e6b8:	016f016f 	.word	0x016f016f
 800e6bc:	016f00d8 	.word	0x016f00d8
 800e6c0:	00c1010a 	.word	0x00c1010a
 800e6c4:	00d800d8 	.word	0x00d800d8
 800e6c8:	016f00d8 	.word	0x016f00d8
 800e6cc:	016f016f 	.word	0x016f016f
 800e6d0:	009f016f 	.word	0x009f016f
 800e6d4:	016f016f 	.word	0x016f016f
 800e6d8:	016f00c9 	.word	0x016f00c9
 800e6dc:	016f016f 	.word	0x016f016f
 800e6e0:	016f00f0 	.word	0x016f00f0
 800e6e4:	016f016f 	.word	0x016f016f
 800e6e8:	00d1016f 	.word	0x00d1016f
 800e6ec:	016f016f 	.word	0x016f016f
 800e6f0:	016f00fe 	.word	0x016f00fe
 800e6f4:	016f016f 	.word	0x016f016f
 800e6f8:	016f016f 	.word	0x016f016f
 800e6fc:	016f00d8 	.word	0x016f00d8
 800e700:	00c3010c 	.word	0x00c3010c
 800e704:	00d800d8 	.word	0x00d800d8
 800e708:	009400d8 	.word	0x009400d8
 800e70c:	009f012f 	.word	0x009f012f
 800e710:	0088016f 	.word	0x0088016f
 800e714:	011200a9 	.word	0x011200a9
 800e718:	011000cb 	.word	0x011000cb
 800e71c:	016f016f 	.word	0x016f016f
 800e720:	00a600f2 	.word	0x00a600f2
 800e724:	016f00cf 	.word	0x016f00cf
 800e728:	00d1016f 	.word	0x00d1016f
 800e72c:	00a6016f 	.word	0x00a6016f
 800e730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	2b00      	cmp	r3, #0
 800e736:	dd12      	ble.n	800e75e <__ssvfscanf_r+0x192>
 800e738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e73a:	69ba      	ldr	r2, [r7, #24]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	3a01      	subs	r2, #1
 800e740:	7819      	ldrb	r1, [r3, #0]
 800e742:	7812      	ldrb	r2, [r2, #0]
 800e744:	4291      	cmp	r1, r2
 800e746:	d13e      	bne.n	800e7c6 <__ssvfscanf_r+0x1fa>
 800e748:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e74a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e74c:	6852      	ldr	r2, [r2, #4]
 800e74e:	3301      	adds	r3, #1
 800e750:	600b      	str	r3, [r1, #0]
 800e752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e754:	3a01      	subs	r2, #1
 800e756:	604a      	str	r2, [r1, #4]
 800e758:	3301      	adds	r3, #1
 800e75a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e75c:	e752      	b.n	800e604 <__ssvfscanf_r+0x38>
 800e75e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e760:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e762:	f002 fec7 	bl	80114f4 <__ssrefill_r>
 800e766:	2800      	cmp	r0, #0
 800e768:	d0e6      	beq.n	800e738 <__ssvfscanf_r+0x16c>
 800e76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d003      	beq.n	800e778 <__ssvfscanf_r+0x1ac>
 800e770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e772:	899b      	ldrh	r3, [r3, #12]
 800e774:	065b      	lsls	r3, r3, #25
 800e776:	d526      	bpl.n	800e7c6 <__ssvfscanf_r+0x1fa>
 800e778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d000      	beq.n	800e780 <__ssvfscanf_r+0x1b4>
 800e77e:	e0f6      	b.n	800e96e <__ssvfscanf_r+0x3a2>
 800e780:	3b01      	subs	r3, #1
 800e782:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e784:	e104      	b.n	800e990 <__ssvfscanf_r+0x3c4>
 800e786:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e788:	4332      	orrs	r2, r6
 800e78a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e78c:	d11b      	bne.n	800e7c6 <__ssvfscanf_r+0x1fa>
 800e78e:	2610      	movs	r6, #16
 800e790:	69ba      	ldr	r2, [r7, #24]
 800e792:	e76c      	b.n	800e66e <__ssvfscanf_r+0xa2>
 800e794:	421e      	tst	r6, r3
 800e796:	d116      	bne.n	800e7c6 <__ssvfscanf_r+0x1fa>
 800e798:	7851      	ldrb	r1, [r2, #1]
 800e79a:	296c      	cmp	r1, #108	; 0x6c
 800e79c:	d103      	bne.n	800e7a6 <__ssvfscanf_r+0x1da>
 800e79e:	3202      	adds	r2, #2
 800e7a0:	61ba      	str	r2, [r7, #24]
 800e7a2:	2202      	movs	r2, #2
 800e7a4:	e000      	b.n	800e7a8 <__ssvfscanf_r+0x1dc>
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	4316      	orrs	r6, r2
 800e7aa:	e7f1      	b.n	800e790 <__ssvfscanf_r+0x1c4>
 800e7ac:	421e      	tst	r6, r3
 800e7ae:	d10a      	bne.n	800e7c6 <__ssvfscanf_r+0x1fa>
 800e7b0:	7851      	ldrb	r1, [r2, #1]
 800e7b2:	2968      	cmp	r1, #104	; 0x68
 800e7b4:	d103      	bne.n	800e7be <__ssvfscanf_r+0x1f2>
 800e7b6:	3202      	adds	r2, #2
 800e7b8:	61ba      	str	r2, [r7, #24]
 800e7ba:	2208      	movs	r2, #8
 800e7bc:	e7f4      	b.n	800e7a8 <__ssvfscanf_r+0x1dc>
 800e7be:	2204      	movs	r2, #4
 800e7c0:	e7f2      	b.n	800e7a8 <__ssvfscanf_r+0x1dc>
 800e7c2:	421e      	tst	r6, r3
 800e7c4:	d0ed      	beq.n	800e7a2 <__ssvfscanf_r+0x1d6>
 800e7c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d000      	beq.n	800e7ce <__ssvfscanf_r+0x202>
 800e7cc:	e0da      	b.n	800e984 <__ssvfscanf_r+0x3b8>
 800e7ce:	e0df      	b.n	800e990 <__ssvfscanf_r+0x3c4>
 800e7d0:	421e      	tst	r6, r3
 800e7d2:	d0dd      	beq.n	800e790 <__ssvfscanf_r+0x1c4>
 800e7d4:	e7f7      	b.n	800e7c6 <__ssvfscanf_r+0x1fa>
 800e7d6:	228f      	movs	r2, #143	; 0x8f
 800e7d8:	218f      	movs	r1, #143	; 0x8f
 800e7da:	4032      	ands	r2, r6
 800e7dc:	420e      	tst	r6, r1
 800e7de:	d1f2      	bne.n	800e7c6 <__ssvfscanf_r+0x1fa>
 800e7e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e7e2:	2900      	cmp	r1, #0
 800e7e4:	d104      	bne.n	800e7f0 <__ssvfscanf_r+0x224>
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	a902      	add	r1, sp, #8
 800e7ea:	6439      	str	r1, [r7, #64]	; 0x40
 800e7ec:	600a      	str	r2, [r1, #0]
 800e7ee:	604a      	str	r2, [r1, #4]
 800e7f0:	4326      	orrs	r6, r4
 800e7f2:	e7cd      	b.n	800e790 <__ssvfscanf_r+0x1c4>
 800e7f4:	228f      	movs	r2, #143	; 0x8f
 800e7f6:	4216      	tst	r6, r2
 800e7f8:	d1e5      	bne.n	800e7c6 <__ssvfscanf_r+0x1fa>
 800e7fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7fc:	436a      	muls	r2, r5
 800e7fe:	3a30      	subs	r2, #48	; 0x30
 800e800:	188a      	adds	r2, r1, r2
 800e802:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e804:	e7c4      	b.n	800e790 <__ssvfscanf_r+0x1c4>
 800e806:	2301      	movs	r3, #1
 800e808:	431e      	orrs	r6, r3
 800e80a:	4b1b      	ldr	r3, [pc, #108]	; (800e878 <__ssvfscanf_r+0x2ac>)
 800e80c:	617b      	str	r3, [r7, #20]
 800e80e:	230a      	movs	r3, #10
 800e810:	2403      	movs	r4, #3
 800e812:	627b      	str	r3, [r7, #36]	; 0x24
 800e814:	e00f      	b.n	800e836 <__ssvfscanf_r+0x26a>
 800e816:	2301      	movs	r3, #1
 800e818:	431e      	orrs	r6, r3
 800e81a:	4b18      	ldr	r3, [pc, #96]	; (800e87c <__ssvfscanf_r+0x2b0>)
 800e81c:	617b      	str	r3, [r7, #20]
 800e81e:	2308      	movs	r3, #8
 800e820:	e7f6      	b.n	800e810 <__ssvfscanf_r+0x244>
 800e822:	4b16      	ldr	r3, [pc, #88]	; (800e87c <__ssvfscanf_r+0x2b0>)
 800e824:	e7f2      	b.n	800e80c <__ssvfscanf_r+0x240>
 800e826:	2380      	movs	r3, #128	; 0x80
 800e828:	009b      	lsls	r3, r3, #2
 800e82a:	431e      	orrs	r6, r3
 800e82c:	4b13      	ldr	r3, [pc, #76]	; (800e87c <__ssvfscanf_r+0x2b0>)
 800e82e:	617b      	str	r3, [r7, #20]
 800e830:	2310      	movs	r3, #16
 800e832:	e7ed      	b.n	800e810 <__ssvfscanf_r+0x244>
 800e834:	2404      	movs	r4, #4
 800e836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	dd55      	ble.n	800e8ea <__ssvfscanf_r+0x31e>
 800e83e:	0673      	lsls	r3, r6, #25
 800e840:	d407      	bmi.n	800e852 <__ssvfscanf_r+0x286>
 800e842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e844:	490b      	ldr	r1, [pc, #44]	; (800e874 <__ssvfscanf_r+0x2a8>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	781a      	ldrb	r2, [r3, #0]
 800e84a:	5c8a      	ldrb	r2, [r1, r2]
 800e84c:	2108      	movs	r1, #8
 800e84e:	420a      	tst	r2, r1
 800e850:	d152      	bne.n	800e8f8 <__ssvfscanf_r+0x32c>
 800e852:	1e60      	subs	r0, r4, #1
 800e854:	2803      	cmp	r0, #3
 800e856:	d863      	bhi.n	800e920 <__ssvfscanf_r+0x354>
 800e858:	f7f1 fc66 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e85c:	03bd01da 	.word	0x03bd01da
 800e860:	068a0579 	.word	0x068a0579
 800e864:	2301      	movs	r3, #1
 800e866:	431e      	orrs	r6, r3
 800e868:	2402      	movs	r4, #2
 800e86a:	e7e4      	b.n	800e836 <__ssvfscanf_r+0x26a>
 800e86c:	fffffd34 	.word	0xfffffd34
 800e870:	ffffdfff 	.word	0xffffdfff
 800e874:	08014529 	.word	0x08014529
 800e878:	0800b9b5 	.word	0x0800b9b5
 800e87c:	08011025 	.word	0x08011025
 800e880:	2248      	movs	r2, #72	; 0x48
 800e882:	2318      	movs	r3, #24
 800e884:	189b      	adds	r3, r3, r2
 800e886:	19d8      	adds	r0, r3, r7
 800e888:	69b9      	ldr	r1, [r7, #24]
 800e88a:	f001 f9d7 	bl	800fc3c <__sccl>
 800e88e:	2340      	movs	r3, #64	; 0x40
 800e890:	2401      	movs	r4, #1
 800e892:	61b8      	str	r0, [r7, #24]
 800e894:	431e      	orrs	r6, r3
 800e896:	e7ce      	b.n	800e836 <__ssvfscanf_r+0x26a>
 800e898:	2301      	movs	r3, #1
 800e89a:	431e      	orrs	r6, r3
 800e89c:	2340      	movs	r3, #64	; 0x40
 800e89e:	2400      	movs	r4, #0
 800e8a0:	431e      	orrs	r6, r3
 800e8a2:	e7c8      	b.n	800e836 <__ssvfscanf_r+0x26a>
 800e8a4:	2388      	movs	r3, #136	; 0x88
 800e8a6:	e7bf      	b.n	800e828 <__ssvfscanf_r+0x25c>
 800e8a8:	06f3      	lsls	r3, r6, #27
 800e8aa:	d500      	bpl.n	800e8ae <__ssvfscanf_r+0x2e2>
 800e8ac:	e6aa      	b.n	800e604 <__ssvfscanf_r+0x38>
 800e8ae:	2108      	movs	r1, #8
 800e8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b2:	cb04      	ldmia	r3!, {r2}
 800e8b4:	420e      	tst	r6, r1
 800e8b6:	d003      	beq.n	800e8c0 <__ssvfscanf_r+0x2f4>
 800e8b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8ba:	7011      	strb	r1, [r2, #0]
 800e8bc:	633b      	str	r3, [r7, #48]	; 0x30
 800e8be:	e6a1      	b.n	800e604 <__ssvfscanf_r+0x38>
 800e8c0:	0771      	lsls	r1, r6, #29
 800e8c2:	d502      	bpl.n	800e8ca <__ssvfscanf_r+0x2fe>
 800e8c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8c6:	8011      	strh	r1, [r2, #0]
 800e8c8:	e7f8      	b.n	800e8bc <__ssvfscanf_r+0x2f0>
 800e8ca:	07f1      	lsls	r1, r6, #31
 800e8cc:	d502      	bpl.n	800e8d4 <__ssvfscanf_r+0x308>
 800e8ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8d0:	6011      	str	r1, [r2, #0]
 800e8d2:	e7f3      	b.n	800e8bc <__ssvfscanf_r+0x2f0>
 800e8d4:	07b6      	lsls	r6, r6, #30
 800e8d6:	d5fa      	bpl.n	800e8ce <__ssvfscanf_r+0x302>
 800e8d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8da:	6011      	str	r1, [r2, #0]
 800e8dc:	17c9      	asrs	r1, r1, #31
 800e8de:	6051      	str	r1, [r2, #4]
 800e8e0:	e7ec      	b.n	800e8bc <__ssvfscanf_r+0x2f0>
 800e8e2:	4ba2      	ldr	r3, [pc, #648]	; (800eb6c <__ssvfscanf_r+0x5a0>)
 800e8e4:	617b      	str	r3, [r7, #20]
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	e792      	b.n	800e810 <__ssvfscanf_r+0x244>
 800e8ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e8ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e8ee:	f002 fe01 	bl	80114f4 <__ssrefill_r>
 800e8f2:	2800      	cmp	r0, #0
 800e8f4:	d0a3      	beq.n	800e83e <__ssvfscanf_r+0x272>
 800e8f6:	e738      	b.n	800e76a <__ssvfscanf_r+0x19e>
 800e8f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e8fc:	3201      	adds	r2, #1
 800e8fe:	63ba      	str	r2, [r7, #56]	; 0x38
 800e900:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e902:	6852      	ldr	r2, [r2, #4]
 800e904:	3a01      	subs	r2, #1
 800e906:	604a      	str	r2, [r1, #4]
 800e908:	2a00      	cmp	r2, #0
 800e90a:	dd02      	ble.n	800e912 <__ssvfscanf_r+0x346>
 800e90c:	3301      	adds	r3, #1
 800e90e:	600b      	str	r3, [r1, #0]
 800e910:	e797      	b.n	800e842 <__ssvfscanf_r+0x276>
 800e912:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e914:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e916:	f002 fded 	bl	80114f4 <__ssrefill_r>
 800e91a:	2800      	cmp	r0, #0
 800e91c:	d091      	beq.n	800e842 <__ssvfscanf_r+0x276>
 800e91e:	e724      	b.n	800e76a <__ssvfscanf_r+0x19e>
 800e920:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e922:	2301      	movs	r3, #1
 800e924:	2a00      	cmp	r2, #0
 800e926:	d100      	bne.n	800e92a <__ssvfscanf_r+0x35e>
 800e928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e92a:	2210      	movs	r2, #16
 800e92c:	0034      	movs	r4, r6
 800e92e:	4032      	ands	r2, r6
 800e930:	623a      	str	r2, [r7, #32]
 800e932:	401c      	ands	r4, r3
 800e934:	421e      	tst	r6, r3
 800e936:	d100      	bne.n	800e93a <__ssvfscanf_r+0x36e>
 800e938:	e0f3      	b.n	800eb22 <__ssvfscanf_r+0x556>
 800e93a:	2a00      	cmp	r2, #0
 800e93c:	d000      	beq.n	800e940 <__ssvfscanf_r+0x374>
 800e93e:	e0b6      	b.n	800eaae <__ssvfscanf_r+0x4e2>
 800e940:	2080      	movs	r0, #128	; 0x80
 800e942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e944:	cb10      	ldmia	r3!, {r4}
 800e946:	613b      	str	r3, [r7, #16]
 800e948:	4206      	tst	r6, r0
 800e94a:	d100      	bne.n	800e94e <__ssvfscanf_r+0x382>
 800e94c:	e0b7      	b.n	800eabe <__ssvfscanf_r+0x4f2>
 800e94e:	2c00      	cmp	r4, #0
 800e950:	d007      	beq.n	800e962 <__ssvfscanf_r+0x396>
 800e952:	f7fb ff39 	bl	800a7c8 <malloc>
 800e956:	6338      	str	r0, [r7, #48]	; 0x30
 800e958:	2800      	cmp	r0, #0
 800e95a:	d11f      	bne.n	800e99c <__ssvfscanf_r+0x3d0>
 800e95c:	2301      	movs	r3, #1
 800e95e:	425b      	negs	r3, r3
 800e960:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e964:	2b00      	cmp	r3, #0
 800e966:	d013      	beq.n	800e990 <__ssvfscanf_r+0x3c4>
 800e968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96a:	3301      	adds	r3, #1
 800e96c:	d10a      	bne.n	800e984 <__ssvfscanf_r+0x3b8>
 800e96e:	2400      	movs	r4, #0
 800e970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e972:	681d      	ldr	r5, [r3, #0]
 800e974:	88db      	ldrh	r3, [r3, #6]
 800e976:	42a3      	cmp	r3, r4
 800e978:	dd01      	ble.n	800e97e <__ssvfscanf_r+0x3b2>
 800e97a:	f001 f82a 	bl	800f9d2 <__ssvfscanf_r+0x1406>
 800e97e:	2301      	movs	r3, #1
 800e980:	425b      	negs	r3, r3
 800e982:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e986:	6818      	ldr	r0, [r3, #0]
 800e988:	2800      	cmp	r0, #0
 800e98a:	d001      	beq.n	800e990 <__ssvfscanf_r+0x3c4>
 800e98c:	f7fb ff26 	bl	800a7dc <free>
 800e990:	46bd      	mov	sp, r7
 800e992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e994:	23b1      	movs	r3, #177	; 0xb1
 800e996:	009b      	lsls	r3, r3, #2
 800e998:	449d      	add	sp, r3
 800e99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99e:	6023      	str	r3, [r4, #0]
 800e9a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9a2:	88de      	ldrh	r6, [r3, #6]
 800e9a4:	889d      	ldrh	r5, [r3, #4]
 800e9a6:	42ae      	cmp	r6, r5
 800e9a8:	d30e      	bcc.n	800e9c8 <__ssvfscanf_r+0x3fc>
 800e9aa:	4b71      	ldr	r3, [pc, #452]	; (800eb70 <__ssvfscanf_r+0x5a4>)
 800e9ac:	429d      	cmp	r5, r3
 800e9ae:	d8d5      	bhi.n	800e95c <__ssvfscanf_r+0x390>
 800e9b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9b2:	3508      	adds	r5, #8
 800e9b4:	b2ad      	uxth	r5, r5
 800e9b6:	6818      	ldr	r0, [r3, #0]
 800e9b8:	00a9      	lsls	r1, r5, #2
 800e9ba:	f002 f901 	bl	8010bc0 <realloc>
 800e9be:	2800      	cmp	r0, #0
 800e9c0:	d0cc      	beq.n	800e95c <__ssvfscanf_r+0x390>
 800e9c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9c4:	6018      	str	r0, [r3, #0]
 800e9c6:	809d      	strh	r5, [r3, #4]
 800e9c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9ca:	1c72      	adds	r2, r6, #1
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	00b6      	lsls	r6, r6, #2
 800e9d0:	50f4      	str	r4, [r6, r3]
 800e9d2:	2320      	movs	r3, #32
 800e9d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e9d6:	0026      	movs	r6, r4
 800e9d8:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800e9da:	80ca      	strh	r2, [r1, #6]
 800e9dc:	61fb      	str	r3, [r7, #28]
 800e9de:	2500      	movs	r5, #0
 800e9e0:	f7fd f9fe 	bl	800bde0 <__locale_mb_cur_max>
 800e9e4:	42a8      	cmp	r0, r5
 800e9e6:	d100      	bne.n	800e9ea <__ssvfscanf_r+0x41e>
 800e9e8:	e6bf      	b.n	800e76a <__ssvfscanf_r+0x19e>
 800e9ea:	1c6a      	adds	r2, r5, #1
 800e9ec:	60fa      	str	r2, [r7, #12]
 800e9ee:	228c      	movs	r2, #140	; 0x8c
 800e9f0:	2048      	movs	r0, #72	; 0x48
 800e9f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9f4:	0052      	lsls	r2, r2, #1
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	1812      	adds	r2, r2, r0
 800e9fa:	7819      	ldrb	r1, [r3, #0]
 800e9fc:	19d2      	adds	r2, r2, r7
 800e9fe:	5551      	strb	r1, [r2, r5]
 800ea00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea04:	6852      	ldr	r2, [r2, #4]
 800ea06:	3301      	adds	r3, #1
 800ea08:	600b      	str	r3, [r1, #0]
 800ea0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0c:	3a01      	subs	r2, #1
 800ea0e:	604a      	str	r2, [r1, #4]
 800ea10:	2b03      	cmp	r3, #3
 800ea12:	d102      	bne.n	800ea1a <__ssvfscanf_r+0x44e>
 800ea14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea16:	2b04      	cmp	r3, #4
 800ea18:	d007      	beq.n	800ea2a <__ssvfscanf_r+0x45e>
 800ea1a:	2048      	movs	r0, #72	; 0x48
 800ea1c:	2310      	movs	r3, #16
 800ea1e:	181b      	adds	r3, r3, r0
 800ea20:	2208      	movs	r2, #8
 800ea22:	2100      	movs	r1, #0
 800ea24:	19d8      	adds	r0, r3, r7
 800ea26:	f7fd f963 	bl	800bcf0 <memset>
 800ea2a:	2148      	movs	r1, #72	; 0x48
 800ea2c:	2310      	movs	r3, #16
 800ea2e:	228c      	movs	r2, #140	; 0x8c
 800ea30:	185b      	adds	r3, r3, r1
 800ea32:	0052      	lsls	r2, r2, #1
 800ea34:	19db      	adds	r3, r3, r7
 800ea36:	1852      	adds	r2, r2, r1
 800ea38:	9300      	str	r3, [sp, #0]
 800ea3a:	0021      	movs	r1, r4
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ea40:	19d2      	adds	r2, r2, r7
 800ea42:	f002 fc57 	bl	80112f4 <_mbrtowc_r>
 800ea46:	0003      	movs	r3, r0
 800ea48:	62b8      	str	r0, [r7, #40]	; 0x28
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	d100      	bne.n	800ea50 <__ssvfscanf_r+0x484>
 800ea4e:	e68c      	b.n	800e76a <__ssvfscanf_r+0x19e>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	d139      	bne.n	800eac8 <__ssvfscanf_r+0x4fc>
 800ea54:	6a3b      	ldr	r3, [r7, #32]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d100      	bne.n	800ea5c <__ssvfscanf_r+0x490>
 800ea5a:	6023      	str	r3, [r4, #0]
 800ea5c:	68fa      	ldr	r2, [r7, #12]
 800ea5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea60:	4694      	mov	ip, r2
 800ea62:	4463      	add	r3, ip
 800ea64:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea68:	2b03      	cmp	r3, #3
 800ea6a:	d102      	bne.n	800ea72 <__ssvfscanf_r+0x4a6>
 800ea6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea6e:	2b04      	cmp	r3, #4
 800ea70:	d002      	beq.n	800ea78 <__ssvfscanf_r+0x4ac>
 800ea72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea74:	3b01      	subs	r3, #1
 800ea76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea78:	6a3b      	ldr	r3, [r7, #32]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d115      	bne.n	800eaaa <__ssvfscanf_r+0x4de>
 800ea7e:	2e00      	cmp	r6, #0
 800ea80:	d012      	beq.n	800eaa8 <__ssvfscanf_r+0x4dc>
 800ea82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea84:	69fa      	ldr	r2, [r7, #28]
 800ea86:	1ae5      	subs	r5, r4, r3
 800ea88:	10ab      	asrs	r3, r5, #2
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	d30c      	bcc.n	800eaa8 <__ssvfscanf_r+0x4dc>
 800ea8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea90:	00d1      	lsls	r1, r2, #3
 800ea92:	f002 f895 	bl	8010bc0 <realloc>
 800ea96:	6338      	str	r0, [r7, #48]	; 0x30
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	d100      	bne.n	800ea9e <__ssvfscanf_r+0x4d2>
 800ea9c:	e75e      	b.n	800e95c <__ssvfscanf_r+0x390>
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	1944      	adds	r4, r0, r5
 800eaa2:	005b      	lsls	r3, r3, #1
 800eaa4:	6030      	str	r0, [r6, #0]
 800eaa6:	61fb      	str	r3, [r7, #28]
 800eaa8:	3404      	adds	r4, #4
 800eaaa:	2500      	movs	r5, #0
 800eaac:	e010      	b.n	800ead0 <__ssvfscanf_r+0x504>
 800eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab0:	613b      	str	r3, [r7, #16]
 800eab2:	2300      	movs	r3, #0
 800eab4:	001e      	movs	r6, r3
 800eab6:	001c      	movs	r4, r3
 800eab8:	61fb      	str	r3, [r7, #28]
 800eaba:	633b      	str	r3, [r7, #48]	; 0x30
 800eabc:	e78f      	b.n	800e9de <__ssvfscanf_r+0x412>
 800eabe:	6a3b      	ldr	r3, [r7, #32]
 800eac0:	001e      	movs	r6, r3
 800eac2:	61fb      	str	r3, [r7, #28]
 800eac4:	633b      	str	r3, [r7, #48]	; 0x30
 800eac6:	e78a      	b.n	800e9de <__ssvfscanf_r+0x412>
 800eac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaca:	68fd      	ldr	r5, [r7, #12]
 800eacc:	3302      	adds	r3, #2
 800eace:	d1c5      	bne.n	800ea5c <__ssvfscanf_r+0x490>
 800ead0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	dc12      	bgt.n	800eafe <__ssvfscanf_r+0x532>
 800ead8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eada:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eadc:	f002 fd0a 	bl	80114f4 <__ssrefill_r>
 800eae0:	2800      	cmp	r0, #0
 800eae2:	d00c      	beq.n	800eafe <__ssvfscanf_r+0x532>
 800eae4:	2d00      	cmp	r5, #0
 800eae6:	d000      	beq.n	800eaea <__ssvfscanf_r+0x51e>
 800eae8:	e63f      	b.n	800e76a <__ssvfscanf_r+0x19e>
 800eaea:	2e00      	cmp	r6, #0
 800eaec:	d10c      	bne.n	800eb08 <__ssvfscanf_r+0x53c>
 800eaee:	6a3b      	ldr	r3, [r7, #32]
 800eaf0:	425a      	negs	r2, r3
 800eaf2:	4153      	adcs	r3, r2
 800eaf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eaf6:	18d3      	adds	r3, r2, r3
 800eaf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	e6de      	b.n	800e8bc <__ssvfscanf_r+0x2f0>
 800eafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d000      	beq.n	800eb06 <__ssvfscanf_r+0x53a>
 800eb04:	e76c      	b.n	800e9e0 <__ssvfscanf_r+0x414>
 800eb06:	e7f0      	b.n	800eaea <__ssvfscanf_r+0x51e>
 800eb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0a:	69fa      	ldr	r2, [r7, #28]
 800eb0c:	1ae1      	subs	r1, r4, r3
 800eb0e:	108b      	asrs	r3, r1, #2
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d9ec      	bls.n	800eaee <__ssvfscanf_r+0x522>
 800eb14:	6830      	ldr	r0, [r6, #0]
 800eb16:	f002 f853 	bl	8010bc0 <realloc>
 800eb1a:	2800      	cmp	r0, #0
 800eb1c:	d0e7      	beq.n	800eaee <__ssvfscanf_r+0x522>
 800eb1e:	6030      	str	r0, [r6, #0]
 800eb20:	e7e5      	b.n	800eaee <__ssvfscanf_r+0x522>
 800eb22:	6a3b      	ldr	r3, [r7, #32]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d025      	beq.n	800eb74 <__ssvfscanf_r+0x5a8>
 800eb28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb30:	6812      	ldr	r2, [r2, #0]
 800eb32:	4299      	cmp	r1, r3
 800eb34:	dd11      	ble.n	800eb5a <__ssvfscanf_r+0x58e>
 800eb36:	1ac9      	subs	r1, r1, r3
 800eb38:	18d2      	adds	r2, r2, r3
 800eb3a:	18e4      	adds	r4, r4, r3
 800eb3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb3e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800eb40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb42:	0019      	movs	r1, r3
 800eb44:	601a      	str	r2, [r3, #0]
 800eb46:	f002 fcd5 	bl	80114f4 <__ssrefill_r>
 800eb4a:	2800      	cmp	r0, #0
 800eb4c:	d0ec      	beq.n	800eb28 <__ssvfscanf_r+0x55c>
 800eb4e:	2c00      	cmp	r4, #0
 800eb50:	d100      	bne.n	800eb54 <__ssvfscanf_r+0x588>
 800eb52:	e60a      	b.n	800e76a <__ssvfscanf_r+0x19e>
 800eb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb56:	191b      	adds	r3, r3, r4
 800eb58:	e5ff      	b.n	800e75a <__ssvfscanf_r+0x18e>
 800eb5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb5c:	1a5b      	subs	r3, r3, r1
 800eb5e:	1864      	adds	r4, r4, r1
 800eb60:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb62:	604b      	str	r3, [r1, #4]
 800eb64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb66:	18d2      	adds	r2, r2, r3
 800eb68:	600a      	str	r2, [r1, #0]
 800eb6a:	e7f3      	b.n	800eb54 <__ssvfscanf_r+0x588>
 800eb6c:	0800b9b5 	.word	0x0800b9b5
 800eb70:	0000fff6 	.word	0x0000fff6
 800eb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb76:	0034      	movs	r4, r6
 800eb78:	cb20      	ldmia	r3!, {r5}
 800eb7a:	633b      	str	r3, [r7, #48]	; 0x30
 800eb7c:	2380      	movs	r3, #128	; 0x80
 800eb7e:	401c      	ands	r4, r3
 800eb80:	421e      	tst	r6, r3
 800eb82:	d028      	beq.n	800ebd6 <__ssvfscanf_r+0x60a>
 800eb84:	2d00      	cmp	r5, #0
 800eb86:	d100      	bne.n	800eb8a <__ssvfscanf_r+0x5be>
 800eb88:	e61d      	b.n	800e7c6 <__ssvfscanf_r+0x1fa>
 800eb8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800eb8c:	f7fb fe1c 	bl	800a7c8 <malloc>
 800eb90:	6238      	str	r0, [r7, #32]
 800eb92:	2800      	cmp	r0, #0
 800eb94:	d100      	bne.n	800eb98 <__ssvfscanf_r+0x5cc>
 800eb96:	e5ef      	b.n	800e778 <__ssvfscanf_r+0x1ac>
 800eb98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb9a:	6028      	str	r0, [r5, #0]
 800eb9c:	88de      	ldrh	r6, [r3, #6]
 800eb9e:	889c      	ldrh	r4, [r3, #4]
 800eba0:	6818      	ldr	r0, [r3, #0]
 800eba2:	42a6      	cmp	r6, r4
 800eba4:	d30e      	bcc.n	800ebc4 <__ssvfscanf_r+0x5f8>
 800eba6:	4bbf      	ldr	r3, [pc, #764]	; (800eea4 <__ssvfscanf_r+0x8d8>)
 800eba8:	429c      	cmp	r4, r3
 800ebaa:	d900      	bls.n	800ebae <__ssvfscanf_r+0x5e2>
 800ebac:	e6df      	b.n	800e96e <__ssvfscanf_r+0x3a2>
 800ebae:	3408      	adds	r4, #8
 800ebb0:	b2a4      	uxth	r4, r4
 800ebb2:	00a1      	lsls	r1, r4, #2
 800ebb4:	f002 f804 	bl	8010bc0 <realloc>
 800ebb8:	2800      	cmp	r0, #0
 800ebba:	d100      	bne.n	800ebbe <__ssvfscanf_r+0x5f2>
 800ebbc:	e6d7      	b.n	800e96e <__ssvfscanf_r+0x3a2>
 800ebbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebc0:	6018      	str	r0, [r3, #0]
 800ebc2:	809c      	strh	r4, [r3, #4]
 800ebc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebc6:	1c72      	adds	r2, r6, #1
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ebcc:	00b6      	lsls	r6, r6, #2
 800ebce:	002c      	movs	r4, r5
 800ebd0:	50f5      	str	r5, [r6, r3]
 800ebd2:	6a3d      	ldr	r5, [r7, #32]
 800ebd4:	80ca      	strh	r2, [r1, #6]
 800ebd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebd8:	0029      	movs	r1, r5
 800ebda:	9300      	str	r3, [sp, #0]
 800ebdc:	2201      	movs	r2, #1
 800ebde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebe0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ebe2:	f002 fca6 	bl	8011532 <_sfread_r>
 800ebe6:	1e05      	subs	r5, r0, #0
 800ebe8:	d100      	bne.n	800ebec <__ssvfscanf_r+0x620>
 800ebea:	e5be      	b.n	800e76a <__ssvfscanf_r+0x19e>
 800ebec:	2c00      	cmp	r4, #0
 800ebee:	d009      	beq.n	800ec04 <__ssvfscanf_r+0x638>
 800ebf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebf2:	4283      	cmp	r3, r0
 800ebf4:	d906      	bls.n	800ec04 <__ssvfscanf_r+0x638>
 800ebf6:	0001      	movs	r1, r0
 800ebf8:	6820      	ldr	r0, [r4, #0]
 800ebfa:	f001 ffe1 	bl	8010bc0 <realloc>
 800ebfe:	2800      	cmp	r0, #0
 800ec00:	d000      	beq.n	800ec04 <__ssvfscanf_r+0x638>
 800ec02:	6020      	str	r0, [r4, #0]
 800ec04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec06:	195b      	adds	r3, r3, r5
 800ec08:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	e4f8      	b.n	800e602 <__ssvfscanf_r+0x36>
 800ec10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d101      	bne.n	800ec1a <__ssvfscanf_r+0x64e>
 800ec16:	3b01      	subs	r3, #1
 800ec18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec1a:	2210      	movs	r2, #16
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	0034      	movs	r4, r6
 800ec20:	4032      	ands	r2, r6
 800ec22:	401c      	ands	r4, r3
 800ec24:	623a      	str	r2, [r7, #32]
 800ec26:	421e      	tst	r6, r3
 800ec28:	d100      	bne.n	800ec2c <__ssvfscanf_r+0x660>
 800ec2a:	e116      	b.n	800ee5a <__ssvfscanf_r+0x88e>
 800ec2c:	2a00      	cmp	r2, #0
 800ec2e:	d000      	beq.n	800ec32 <__ssvfscanf_r+0x666>
 800ec30:	e0b0      	b.n	800ed94 <__ssvfscanf_r+0x7c8>
 800ec32:	2080      	movs	r0, #128	; 0x80
 800ec34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec36:	cb10      	ldmia	r3!, {r4}
 800ec38:	60fb      	str	r3, [r7, #12]
 800ec3a:	4206      	tst	r6, r0
 800ec3c:	d100      	bne.n	800ec40 <__ssvfscanf_r+0x674>
 800ec3e:	e0b2      	b.n	800eda6 <__ssvfscanf_r+0x7da>
 800ec40:	2c00      	cmp	r4, #0
 800ec42:	d100      	bne.n	800ec46 <__ssvfscanf_r+0x67a>
 800ec44:	e68d      	b.n	800e962 <__ssvfscanf_r+0x396>
 800ec46:	f7fb fdbf 	bl	800a7c8 <malloc>
 800ec4a:	6338      	str	r0, [r7, #48]	; 0x30
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d100      	bne.n	800ec52 <__ssvfscanf_r+0x686>
 800ec50:	e684      	b.n	800e95c <__ssvfscanf_r+0x390>
 800ec52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec54:	6023      	str	r3, [r4, #0]
 800ec56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec58:	88de      	ldrh	r6, [r3, #6]
 800ec5a:	889d      	ldrh	r5, [r3, #4]
 800ec5c:	42ae      	cmp	r6, r5
 800ec5e:	d310      	bcc.n	800ec82 <__ssvfscanf_r+0x6b6>
 800ec60:	4b90      	ldr	r3, [pc, #576]	; (800eea4 <__ssvfscanf_r+0x8d8>)
 800ec62:	429d      	cmp	r5, r3
 800ec64:	d900      	bls.n	800ec68 <__ssvfscanf_r+0x69c>
 800ec66:	e679      	b.n	800e95c <__ssvfscanf_r+0x390>
 800ec68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec6a:	3508      	adds	r5, #8
 800ec6c:	b2ad      	uxth	r5, r5
 800ec6e:	6818      	ldr	r0, [r3, #0]
 800ec70:	00a9      	lsls	r1, r5, #2
 800ec72:	f001 ffa5 	bl	8010bc0 <realloc>
 800ec76:	2800      	cmp	r0, #0
 800ec78:	d100      	bne.n	800ec7c <__ssvfscanf_r+0x6b0>
 800ec7a:	e66f      	b.n	800e95c <__ssvfscanf_r+0x390>
 800ec7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec7e:	6018      	str	r0, [r3, #0]
 800ec80:	809d      	strh	r5, [r3, #4]
 800ec82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec84:	1c72      	adds	r2, r6, #1
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	00b6      	lsls	r6, r6, #2
 800ec8a:	50f4      	str	r4, [r6, r3]
 800ec8c:	2320      	movs	r3, #32
 800ec8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec90:	0026      	movs	r6, r4
 800ec92:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800ec94:	80ca      	strh	r2, [r1, #6]
 800ec96:	613b      	str	r3, [r7, #16]
 800ec98:	2500      	movs	r5, #0
 800ec9a:	f7fd f8a1 	bl	800bde0 <__locale_mb_cur_max>
 800ec9e:	42a8      	cmp	r0, r5
 800eca0:	d100      	bne.n	800eca4 <__ssvfscanf_r+0x6d8>
 800eca2:	e562      	b.n	800e76a <__ssvfscanf_r+0x19e>
 800eca4:	1c6a      	adds	r2, r5, #1
 800eca6:	61fa      	str	r2, [r7, #28]
 800eca8:	228c      	movs	r2, #140	; 0x8c
 800ecaa:	2048      	movs	r0, #72	; 0x48
 800ecac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecae:	0052      	lsls	r2, r2, #1
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	1812      	adds	r2, r2, r0
 800ecb4:	7819      	ldrb	r1, [r3, #0]
 800ecb6:	19d2      	adds	r2, r2, r7
 800ecb8:	5551      	strb	r1, [r2, r5]
 800ecba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecbc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ecbe:	6852      	ldr	r2, [r2, #4]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	600b      	str	r3, [r1, #0]
 800ecc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc6:	3a01      	subs	r2, #1
 800ecc8:	604a      	str	r2, [r1, #4]
 800ecca:	2b03      	cmp	r3, #3
 800eccc:	d102      	bne.n	800ecd4 <__ssvfscanf_r+0x708>
 800ecce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecd0:	2b04      	cmp	r3, #4
 800ecd2:	d006      	beq.n	800ece2 <__ssvfscanf_r+0x716>
 800ecd4:	2048      	movs	r0, #72	; 0x48
 800ecd6:	2208      	movs	r2, #8
 800ecd8:	1813      	adds	r3, r2, r0
 800ecda:	2100      	movs	r1, #0
 800ecdc:	19d8      	adds	r0, r3, r7
 800ecde:	f7fd f807 	bl	800bcf0 <memset>
 800ece2:	2148      	movs	r1, #72	; 0x48
 800ece4:	2308      	movs	r3, #8
 800ece6:	228c      	movs	r2, #140	; 0x8c
 800ece8:	185b      	adds	r3, r3, r1
 800ecea:	0052      	lsls	r2, r2, #1
 800ecec:	19db      	adds	r3, r3, r7
 800ecee:	1852      	adds	r2, r2, r1
 800ecf0:	9300      	str	r3, [sp, #0]
 800ecf2:	0021      	movs	r1, r4
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ecf8:	19d2      	adds	r2, r2, r7
 800ecfa:	f002 fafb 	bl	80112f4 <_mbrtowc_r>
 800ecfe:	0003      	movs	r3, r0
 800ed00:	62b8      	str	r0, [r7, #40]	; 0x28
 800ed02:	3301      	adds	r3, #1
 800ed04:	d100      	bne.n	800ed08 <__ssvfscanf_r+0x73c>
 800ed06:	e530      	b.n	800e76a <__ssvfscanf_r+0x19e>
 800ed08:	2800      	cmp	r0, #0
 800ed0a:	d151      	bne.n	800edb0 <__ssvfscanf_r+0x7e4>
 800ed0c:	6020      	str	r0, [r4, #0]
 800ed0e:	2301      	movs	r3, #1
 800ed10:	6825      	ldr	r5, [r4, #0]
 800ed12:	425b      	negs	r3, r3
 800ed14:	1c6a      	adds	r2, r5, #1
 800ed16:	d01a      	beq.n	800ed4e <__ssvfscanf_r+0x782>
 800ed18:	2048      	movs	r0, #72	; 0x48
 800ed1a:	3311      	adds	r3, #17
 800ed1c:	181b      	adds	r3, r3, r0
 800ed1e:	2208      	movs	r2, #8
 800ed20:	2100      	movs	r1, #0
 800ed22:	19d8      	adds	r0, r3, r7
 800ed24:	f7fc ffe4 	bl	800bcf0 <memset>
 800ed28:	4b5f      	ldr	r3, [pc, #380]	; (800eea8 <__ssvfscanf_r+0x8dc>)
 800ed2a:	2148      	movs	r1, #72	; 0x48
 800ed2c:	33e0      	adds	r3, #224	; 0xe0
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	2310      	movs	r3, #16
 800ed32:	4694      	mov	ip, r2
 800ed34:	185b      	adds	r3, r3, r1
 800ed36:	002a      	movs	r2, r5
 800ed38:	19db      	adds	r3, r3, r7
 800ed3a:	4665      	mov	r5, ip
 800ed3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed3e:	1879      	adds	r1, r7, r1
 800ed40:	47a8      	blx	r5
 800ed42:	2300      	movs	r3, #0
 800ed44:	2801      	cmp	r0, #1
 800ed46:	d102      	bne.n	800ed4e <__ssvfscanf_r+0x782>
 800ed48:	3348      	adds	r3, #72	; 0x48
 800ed4a:	18fb      	adds	r3, r7, r3
 800ed4c:	781b      	ldrb	r3, [r3, #0]
 800ed4e:	2218      	movs	r2, #24
 800ed50:	2148      	movs	r1, #72	; 0x48
 800ed52:	1852      	adds	r2, r2, r1
 800ed54:	19d2      	adds	r2, r2, r7
 800ed56:	5cd3      	ldrb	r3, [r2, r3]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d149      	bne.n	800edf0 <__ssvfscanf_r+0x824>
 800ed5c:	69fb      	ldr	r3, [r7, #28]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d137      	bne.n	800edd2 <__ssvfscanf_r+0x806>
 800ed62:	6a3b      	ldr	r3, [r7, #32]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d113      	bne.n	800ed90 <__ssvfscanf_r+0x7c4>
 800ed68:	6023      	str	r3, [r4, #0]
 800ed6a:	2e00      	cmp	r6, #0
 800ed6c:	d00d      	beq.n	800ed8a <__ssvfscanf_r+0x7be>
 800ed6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed70:	693a      	ldr	r2, [r7, #16]
 800ed72:	1ae4      	subs	r4, r4, r3
 800ed74:	10a3      	asrs	r3, r4, #2
 800ed76:	3301      	adds	r3, #1
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d906      	bls.n	800ed8a <__ssvfscanf_r+0x7be>
 800ed7c:	6830      	ldr	r0, [r6, #0]
 800ed7e:	1d21      	adds	r1, r4, #4
 800ed80:	f001 ff1e 	bl	8010bc0 <realloc>
 800ed84:	2800      	cmp	r0, #0
 800ed86:	d000      	beq.n	800ed8a <__ssvfscanf_r+0x7be>
 800ed88:	6030      	str	r0, [r6, #0]
 800ed8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8c:	3301      	adds	r3, #1
 800ed8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	e593      	b.n	800e8bc <__ssvfscanf_r+0x2f0>
 800ed94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed96:	60fb      	str	r3, [r7, #12]
 800ed98:	2300      	movs	r3, #0
 800ed9a:	001e      	movs	r6, r3
 800ed9c:	613b      	str	r3, [r7, #16]
 800ed9e:	633b      	str	r3, [r7, #48]	; 0x30
 800eda0:	334c      	adds	r3, #76	; 0x4c
 800eda2:	18fc      	adds	r4, r7, r3
 800eda4:	e778      	b.n	800ec98 <__ssvfscanf_r+0x6cc>
 800eda6:	6a3b      	ldr	r3, [r7, #32]
 800eda8:	001e      	movs	r6, r3
 800edaa:	613b      	str	r3, [r7, #16]
 800edac:	633b      	str	r3, [r7, #48]	; 0x30
 800edae:	e773      	b.n	800ec98 <__ssvfscanf_r+0x6cc>
 800edb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb2:	69fd      	ldr	r5, [r7, #28]
 800edb4:	3302      	adds	r3, #2
 800edb6:	d1aa      	bne.n	800ed0e <__ssvfscanf_r+0x742>
 800edb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	dc47      	bgt.n	800ee50 <__ssvfscanf_r+0x884>
 800edc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edc2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800edc4:	f002 fb96 	bl	80114f4 <__ssrefill_r>
 800edc8:	2800      	cmp	r0, #0
 800edca:	d041      	beq.n	800ee50 <__ssvfscanf_r+0x884>
 800edcc:	2d00      	cmp	r5, #0
 800edce:	d0c8      	beq.n	800ed62 <__ssvfscanf_r+0x796>
 800edd0:	e4cb      	b.n	800e76a <__ssvfscanf_r+0x19e>
 800edd2:	69fb      	ldr	r3, [r7, #28]
 800edd4:	2248      	movs	r2, #72	; 0x48
 800edd6:	3b01      	subs	r3, #1
 800edd8:	61fb      	str	r3, [r7, #28]
 800edda:	238c      	movs	r3, #140	; 0x8c
 800eddc:	005b      	lsls	r3, r3, #1
 800edde:	189b      	adds	r3, r3, r2
 800ede0:	69fa      	ldr	r2, [r7, #28]
 800ede2:	19db      	adds	r3, r3, r7
 800ede4:	5cd1      	ldrb	r1, [r2, r3]
 800ede6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ede8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800edea:	f002 fb47 	bl	801147c <_sungetc_r>
 800edee:	e7b5      	b.n	800ed5c <__ssvfscanf_r+0x790>
 800edf0:	69fa      	ldr	r2, [r7, #28]
 800edf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf4:	4694      	mov	ip, r2
 800edf6:	4463      	add	r3, ip
 800edf8:	63bb      	str	r3, [r7, #56]	; 0x38
 800edfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfc:	2b03      	cmp	r3, #3
 800edfe:	d102      	bne.n	800ee06 <__ssvfscanf_r+0x83a>
 800ee00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee02:	2b04      	cmp	r3, #4
 800ee04:	d002      	beq.n	800ee0c <__ssvfscanf_r+0x840>
 800ee06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee08:	3b01      	subs	r3, #1
 800ee0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee0c:	6a3b      	ldr	r3, [r7, #32]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d11a      	bne.n	800ee48 <__ssvfscanf_r+0x87c>
 800ee12:	3404      	adds	r4, #4
 800ee14:	2e00      	cmp	r6, #0
 800ee16:	d019      	beq.n	800ee4c <__ssvfscanf_r+0x880>
 800ee18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1a:	693a      	ldr	r2, [r7, #16]
 800ee1c:	1ae3      	subs	r3, r4, r3
 800ee1e:	61fb      	str	r3, [r7, #28]
 800ee20:	6a3d      	ldr	r5, [r7, #32]
 800ee22:	109b      	asrs	r3, r3, #2
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d3c7      	bcc.n	800edb8 <__ssvfscanf_r+0x7ec>
 800ee28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee2a:	00d1      	lsls	r1, r2, #3
 800ee2c:	f001 fec8 	bl	8010bc0 <realloc>
 800ee30:	6338      	str	r0, [r7, #48]	; 0x30
 800ee32:	2800      	cmp	r0, #0
 800ee34:	d100      	bne.n	800ee38 <__ssvfscanf_r+0x86c>
 800ee36:	e591      	b.n	800e95c <__ssvfscanf_r+0x390>
 800ee38:	4684      	mov	ip, r0
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	69fc      	ldr	r4, [r7, #28]
 800ee3e:	005b      	lsls	r3, r3, #1
 800ee40:	4464      	add	r4, ip
 800ee42:	6030      	str	r0, [r6, #0]
 800ee44:	613b      	str	r3, [r7, #16]
 800ee46:	e7b7      	b.n	800edb8 <__ssvfscanf_r+0x7ec>
 800ee48:	2500      	movs	r5, #0
 800ee4a:	e7b5      	b.n	800edb8 <__ssvfscanf_r+0x7ec>
 800ee4c:	0035      	movs	r5, r6
 800ee4e:	e7b3      	b.n	800edb8 <__ssvfscanf_r+0x7ec>
 800ee50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d000      	beq.n	800ee58 <__ssvfscanf_r+0x88c>
 800ee56:	e720      	b.n	800ec9a <__ssvfscanf_r+0x6ce>
 800ee58:	e783      	b.n	800ed62 <__ssvfscanf_r+0x796>
 800ee5a:	6a3b      	ldr	r3, [r7, #32]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d025      	beq.n	800eeac <__ssvfscanf_r+0x8e0>
 800ee60:	2118      	movs	r1, #24
 800ee62:	2048      	movs	r0, #72	; 0x48
 800ee64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee66:	1809      	adds	r1, r1, r0
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	19c9      	adds	r1, r1, r7
 800ee6c:	781a      	ldrb	r2, [r3, #0]
 800ee6e:	5c8a      	ldrb	r2, [r1, r2]
 800ee70:	2a00      	cmp	r2, #0
 800ee72:	d103      	bne.n	800ee7c <__ssvfscanf_r+0x8b0>
 800ee74:	2c00      	cmp	r4, #0
 800ee76:	d000      	beq.n	800ee7a <__ssvfscanf_r+0x8ae>
 800ee78:	e66c      	b.n	800eb54 <__ssvfscanf_r+0x588>
 800ee7a:	e4a4      	b.n	800e7c6 <__ssvfscanf_r+0x1fa>
 800ee7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee80:	6852      	ldr	r2, [r2, #4]
 800ee82:	3301      	adds	r3, #1
 800ee84:	600b      	str	r3, [r1, #0]
 800ee86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee88:	3a01      	subs	r2, #1
 800ee8a:	3401      	adds	r4, #1
 800ee8c:	604a      	str	r2, [r1, #4]
 800ee8e:	429c      	cmp	r4, r3
 800ee90:	d100      	bne.n	800ee94 <__ssvfscanf_r+0x8c8>
 800ee92:	e65f      	b.n	800eb54 <__ssvfscanf_r+0x588>
 800ee94:	2a00      	cmp	r2, #0
 800ee96:	dce3      	bgt.n	800ee60 <__ssvfscanf_r+0x894>
 800ee98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee9a:	f002 fb2b 	bl	80114f4 <__ssrefill_r>
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	d0de      	beq.n	800ee60 <__ssvfscanf_r+0x894>
 800eea2:	e657      	b.n	800eb54 <__ssvfscanf_r+0x588>
 800eea4:	0000fff6 	.word	0x0000fff6
 800eea8:	20000444 	.word	0x20000444
 800eeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeae:	0032      	movs	r2, r6
 800eeb0:	cb20      	ldmia	r3!, {r5}
 800eeb2:	61fb      	str	r3, [r7, #28]
 800eeb4:	2380      	movs	r3, #128	; 0x80
 800eeb6:	401a      	ands	r2, r3
 800eeb8:	421e      	tst	r6, r3
 800eeba:	d100      	bne.n	800eebe <__ssvfscanf_r+0x8f2>
 800eebc:	e086      	b.n	800efcc <__ssvfscanf_r+0xa00>
 800eebe:	2d00      	cmp	r5, #0
 800eec0:	d100      	bne.n	800eec4 <__ssvfscanf_r+0x8f8>
 800eec2:	e480      	b.n	800e7c6 <__ssvfscanf_r+0x1fa>
 800eec4:	2020      	movs	r0, #32
 800eec6:	f7fb fc7f 	bl	800a7c8 <malloc>
 800eeca:	6338      	str	r0, [r7, #48]	; 0x30
 800eecc:	2800      	cmp	r0, #0
 800eece:	d100      	bne.n	800eed2 <__ssvfscanf_r+0x906>
 800eed0:	e452      	b.n	800e778 <__ssvfscanf_r+0x1ac>
 800eed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eed4:	6028      	str	r0, [r5, #0]
 800eed6:	88de      	ldrh	r6, [r3, #6]
 800eed8:	889c      	ldrh	r4, [r3, #4]
 800eeda:	6818      	ldr	r0, [r3, #0]
 800eedc:	42a6      	cmp	r6, r4
 800eede:	d30e      	bcc.n	800eefe <__ssvfscanf_r+0x932>
 800eee0:	4bc3      	ldr	r3, [pc, #780]	; (800f1f0 <__ssvfscanf_r+0xc24>)
 800eee2:	429c      	cmp	r4, r3
 800eee4:	d900      	bls.n	800eee8 <__ssvfscanf_r+0x91c>
 800eee6:	e542      	b.n	800e96e <__ssvfscanf_r+0x3a2>
 800eee8:	3408      	adds	r4, #8
 800eeea:	b2a4      	uxth	r4, r4
 800eeec:	00a1      	lsls	r1, r4, #2
 800eeee:	f001 fe67 	bl	8010bc0 <realloc>
 800eef2:	2800      	cmp	r0, #0
 800eef4:	d100      	bne.n	800eef8 <__ssvfscanf_r+0x92c>
 800eef6:	e53a      	b.n	800e96e <__ssvfscanf_r+0x3a2>
 800eef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eefa:	6018      	str	r0, [r3, #0]
 800eefc:	809c      	strh	r4, [r3, #4]
 800eefe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef00:	1c72      	adds	r2, r6, #1
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	00b6      	lsls	r6, r6, #2
 800ef06:	50f5      	str	r5, [r6, r3]
 800ef08:	2320      	movs	r3, #32
 800ef0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ef0c:	002e      	movs	r6, r5
 800ef0e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800ef10:	80ca      	strh	r2, [r1, #6]
 800ef12:	623b      	str	r3, [r7, #32]
 800ef14:	002c      	movs	r4, r5
 800ef16:	2118      	movs	r1, #24
 800ef18:	2048      	movs	r0, #72	; 0x48
 800ef1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef1c:	1809      	adds	r1, r1, r0
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	19c9      	adds	r1, r1, r7
 800ef22:	781a      	ldrb	r2, [r3, #0]
 800ef24:	5c8a      	ldrb	r2, [r1, r2]
 800ef26:	2a00      	cmp	r2, #0
 800ef28:	d101      	bne.n	800ef2e <__ssvfscanf_r+0x962>
 800ef2a:	633d      	str	r5, [r7, #48]	; 0x30
 800ef2c:	e031      	b.n	800ef92 <__ssvfscanf_r+0x9c6>
 800ef2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef32:	6852      	ldr	r2, [r2, #4]
 800ef34:	3a01      	subs	r2, #1
 800ef36:	604a      	str	r2, [r1, #4]
 800ef38:	1c5a      	adds	r2, r3, #1
 800ef3a:	600a      	str	r2, [r1, #0]
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	1c6a      	adds	r2, r5, #1
 800ef40:	633a      	str	r2, [r7, #48]	; 0x30
 800ef42:	702b      	strb	r3, [r5, #0]
 800ef44:	2e00      	cmp	r6, #0
 800ef46:	d010      	beq.n	800ef6a <__ssvfscanf_r+0x99e>
 800ef48:	6a3b      	ldr	r3, [r7, #32]
 800ef4a:	1b15      	subs	r5, r2, r4
 800ef4c:	429d      	cmp	r5, r3
 800ef4e:	d30c      	bcc.n	800ef6a <__ssvfscanf_r+0x99e>
 800ef50:	005b      	lsls	r3, r3, #1
 800ef52:	0020      	movs	r0, r4
 800ef54:	0019      	movs	r1, r3
 800ef56:	623b      	str	r3, [r7, #32]
 800ef58:	f001 fe32 	bl	8010bc0 <realloc>
 800ef5c:	1e04      	subs	r4, r0, #0
 800ef5e:	d101      	bne.n	800ef64 <__ssvfscanf_r+0x998>
 800ef60:	f7ff fc0a 	bl	800e778 <__ssvfscanf_r+0x1ac>
 800ef64:	1943      	adds	r3, r0, r5
 800ef66:	633b      	str	r3, [r7, #48]	; 0x30
 800ef68:	6030      	str	r0, [r6, #0]
 800ef6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef6c:	3b01      	subs	r3, #1
 800ef6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d00e      	beq.n	800ef92 <__ssvfscanf_r+0x9c6>
 800ef74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	dc2a      	bgt.n	800efd2 <__ssvfscanf_r+0xa06>
 800ef7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef80:	f002 fab8 	bl	80114f4 <__ssrefill_r>
 800ef84:	2800      	cmp	r0, #0
 800ef86:	d024      	beq.n	800efd2 <__ssvfscanf_r+0xa06>
 800ef88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8a:	42a3      	cmp	r3, r4
 800ef8c:	d101      	bne.n	800ef92 <__ssvfscanf_r+0x9c6>
 800ef8e:	f7ff fbec 	bl	800e76a <__ssvfscanf_r+0x19e>
 800ef92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef94:	1b1d      	subs	r5, r3, r4
 800ef96:	42a3      	cmp	r3, r4
 800ef98:	d101      	bne.n	800ef9e <__ssvfscanf_r+0x9d2>
 800ef9a:	f7ff fc14 	bl	800e7c6 <__ssvfscanf_r+0x1fa>
 800ef9e:	2300      	movs	r3, #0
 800efa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efa2:	7013      	strb	r3, [r2, #0]
 800efa4:	429e      	cmp	r6, r3
 800efa6:	d009      	beq.n	800efbc <__ssvfscanf_r+0x9f0>
 800efa8:	6a3b      	ldr	r3, [r7, #32]
 800efaa:	1c69      	adds	r1, r5, #1
 800efac:	428b      	cmp	r3, r1
 800efae:	d905      	bls.n	800efbc <__ssvfscanf_r+0x9f0>
 800efb0:	6830      	ldr	r0, [r6, #0]
 800efb2:	f001 fe05 	bl	8010bc0 <realloc>
 800efb6:	2800      	cmp	r0, #0
 800efb8:	d000      	beq.n	800efbc <__ssvfscanf_r+0x9f0>
 800efba:	6030      	str	r0, [r6, #0]
 800efbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbe:	3301      	adds	r3, #1
 800efc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc4:	195b      	adds	r3, r3, r5
 800efc6:	63bb      	str	r3, [r7, #56]	; 0x38
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	e477      	b.n	800e8bc <__ssvfscanf_r+0x2f0>
 800efcc:	0016      	movs	r6, r2
 800efce:	623a      	str	r2, [r7, #32]
 800efd0:	e7a0      	b.n	800ef14 <__ssvfscanf_r+0x948>
 800efd2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800efd4:	e79f      	b.n	800ef16 <__ssvfscanf_r+0x94a>
 800efd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d101      	bne.n	800efe0 <__ssvfscanf_r+0xa14>
 800efdc:	3b01      	subs	r3, #1
 800efde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efe0:	2210      	movs	r2, #16
 800efe2:	2301      	movs	r3, #1
 800efe4:	0034      	movs	r4, r6
 800efe6:	4032      	ands	r2, r6
 800efe8:	401c      	ands	r4, r3
 800efea:	61fa      	str	r2, [r7, #28]
 800efec:	421e      	tst	r6, r3
 800efee:	d100      	bne.n	800eff2 <__ssvfscanf_r+0xa26>
 800eff0:	e102      	b.n	800f1f8 <__ssvfscanf_r+0xc2c>
 800eff2:	2a00      	cmp	r2, #0
 800eff4:	d000      	beq.n	800eff8 <__ssvfscanf_r+0xa2c>
 800eff6:	e09f      	b.n	800f138 <__ssvfscanf_r+0xb6c>
 800eff8:	2080      	movs	r0, #128	; 0x80
 800effa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effc:	cb10      	ldmia	r3!, {r4}
 800effe:	60fb      	str	r3, [r7, #12]
 800f000:	4206      	tst	r6, r0
 800f002:	d100      	bne.n	800f006 <__ssvfscanf_r+0xa3a>
 800f004:	e0a1      	b.n	800f14a <__ssvfscanf_r+0xb7e>
 800f006:	2c00      	cmp	r4, #0
 800f008:	d100      	bne.n	800f00c <__ssvfscanf_r+0xa40>
 800f00a:	e4aa      	b.n	800e962 <__ssvfscanf_r+0x396>
 800f00c:	f7fb fbdc 	bl	800a7c8 <malloc>
 800f010:	6338      	str	r0, [r7, #48]	; 0x30
 800f012:	2800      	cmp	r0, #0
 800f014:	d100      	bne.n	800f018 <__ssvfscanf_r+0xa4c>
 800f016:	e4a1      	b.n	800e95c <__ssvfscanf_r+0x390>
 800f018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01a:	6023      	str	r3, [r4, #0]
 800f01c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f01e:	88de      	ldrh	r6, [r3, #6]
 800f020:	889d      	ldrh	r5, [r3, #4]
 800f022:	42ae      	cmp	r6, r5
 800f024:	d310      	bcc.n	800f048 <__ssvfscanf_r+0xa7c>
 800f026:	4b72      	ldr	r3, [pc, #456]	; (800f1f0 <__ssvfscanf_r+0xc24>)
 800f028:	429d      	cmp	r5, r3
 800f02a:	d900      	bls.n	800f02e <__ssvfscanf_r+0xa62>
 800f02c:	e496      	b.n	800e95c <__ssvfscanf_r+0x390>
 800f02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f030:	3508      	adds	r5, #8
 800f032:	b2ad      	uxth	r5, r5
 800f034:	6818      	ldr	r0, [r3, #0]
 800f036:	00a9      	lsls	r1, r5, #2
 800f038:	f001 fdc2 	bl	8010bc0 <realloc>
 800f03c:	2800      	cmp	r0, #0
 800f03e:	d100      	bne.n	800f042 <__ssvfscanf_r+0xa76>
 800f040:	e48c      	b.n	800e95c <__ssvfscanf_r+0x390>
 800f042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f044:	6018      	str	r0, [r3, #0]
 800f046:	809d      	strh	r5, [r3, #4]
 800f048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f04a:	1c72      	adds	r2, r6, #1
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	00b6      	lsls	r6, r6, #2
 800f050:	50f4      	str	r4, [r6, r3]
 800f052:	2320      	movs	r3, #32
 800f054:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f056:	0025      	movs	r5, r4
 800f058:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f05a:	80ca      	strh	r2, [r1, #6]
 800f05c:	613b      	str	r3, [r7, #16]
 800f05e:	2300      	movs	r3, #0
 800f060:	623b      	str	r3, [r7, #32]
 800f062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f064:	4a63      	ldr	r2, [pc, #396]	; (800f1f4 <__ssvfscanf_r+0xc28>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	781b      	ldrb	r3, [r3, #0]
 800f06a:	5cd3      	ldrb	r3, [r2, r3]
 800f06c:	2208      	movs	r2, #8
 800f06e:	4213      	tst	r3, r2
 800f070:	d149      	bne.n	800f106 <__ssvfscanf_r+0xb3a>
 800f072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f074:	2b00      	cmp	r3, #0
 800f076:	d046      	beq.n	800f106 <__ssvfscanf_r+0xb3a>
 800f078:	f7fc feb2 	bl	800bde0 <__locale_mb_cur_max>
 800f07c:	6a3b      	ldr	r3, [r7, #32]
 800f07e:	4298      	cmp	r0, r3
 800f080:	d101      	bne.n	800f086 <__ssvfscanf_r+0xaba>
 800f082:	f7ff fb72 	bl	800e76a <__ssvfscanf_r+0x19e>
 800f086:	6a3a      	ldr	r2, [r7, #32]
 800f088:	2048      	movs	r0, #72	; 0x48
 800f08a:	1c56      	adds	r6, r2, #1
 800f08c:	228c      	movs	r2, #140	; 0x8c
 800f08e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f090:	0052      	lsls	r2, r2, #1
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	1812      	adds	r2, r2, r0
 800f096:	7819      	ldrb	r1, [r3, #0]
 800f098:	6a38      	ldr	r0, [r7, #32]
 800f09a:	19d2      	adds	r2, r2, r7
 800f09c:	5411      	strb	r1, [r2, r0]
 800f09e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f0a2:	6852      	ldr	r2, [r2, #4]
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	600b      	str	r3, [r1, #0]
 800f0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0aa:	3a01      	subs	r2, #1
 800f0ac:	604a      	str	r2, [r1, #4]
 800f0ae:	2b03      	cmp	r3, #3
 800f0b0:	d102      	bne.n	800f0b8 <__ssvfscanf_r+0xaec>
 800f0b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0b4:	2b04      	cmp	r3, #4
 800f0b6:	d007      	beq.n	800f0c8 <__ssvfscanf_r+0xafc>
 800f0b8:	2048      	movs	r0, #72	; 0x48
 800f0ba:	2310      	movs	r3, #16
 800f0bc:	181b      	adds	r3, r3, r0
 800f0be:	2208      	movs	r2, #8
 800f0c0:	2100      	movs	r1, #0
 800f0c2:	19d8      	adds	r0, r3, r7
 800f0c4:	f7fc fe14 	bl	800bcf0 <memset>
 800f0c8:	2148      	movs	r1, #72	; 0x48
 800f0ca:	2310      	movs	r3, #16
 800f0cc:	228c      	movs	r2, #140	; 0x8c
 800f0ce:	185b      	adds	r3, r3, r1
 800f0d0:	0052      	lsls	r2, r2, #1
 800f0d2:	19db      	adds	r3, r3, r7
 800f0d4:	1852      	adds	r2, r2, r1
 800f0d6:	9300      	str	r3, [sp, #0]
 800f0d8:	0021      	movs	r1, r4
 800f0da:	0033      	movs	r3, r6
 800f0dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f0de:	19d2      	adds	r2, r2, r7
 800f0e0:	f002 f908 	bl	80112f4 <_mbrtowc_r>
 800f0e4:	0003      	movs	r3, r0
 800f0e6:	62b8      	str	r0, [r7, #40]	; 0x28
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	d101      	bne.n	800f0f0 <__ssvfscanf_r+0xb24>
 800f0ec:	f7ff fb3d 	bl	800e76a <__ssvfscanf_r+0x19e>
 800f0f0:	2800      	cmp	r0, #0
 800f0f2:	d12f      	bne.n	800f154 <__ssvfscanf_r+0xb88>
 800f0f4:	6020      	str	r0, [r4, #0]
 800f0f6:	6820      	ldr	r0, [r4, #0]
 800f0f8:	f002 f91a 	bl	8011330 <iswspace>
 800f0fc:	6238      	str	r0, [r7, #32]
 800f0fe:	2800      	cmp	r0, #0
 800f100:	d04a      	beq.n	800f198 <__ssvfscanf_r+0xbcc>
 800f102:	2e00      	cmp	r6, #0
 800f104:	d13c      	bne.n	800f180 <__ssvfscanf_r+0xbb4>
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d000      	beq.n	800f10e <__ssvfscanf_r+0xb42>
 800f10c:	e640      	b.n	800ed90 <__ssvfscanf_r+0x7c4>
 800f10e:	6023      	str	r3, [r4, #0]
 800f110:	2d00      	cmp	r5, #0
 800f112:	d100      	bne.n	800f116 <__ssvfscanf_r+0xb4a>
 800f114:	e639      	b.n	800ed8a <__ssvfscanf_r+0x7be>
 800f116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f118:	693a      	ldr	r2, [r7, #16]
 800f11a:	1ae4      	subs	r4, r4, r3
 800f11c:	10a3      	asrs	r3, r4, #2
 800f11e:	3301      	adds	r3, #1
 800f120:	429a      	cmp	r2, r3
 800f122:	d800      	bhi.n	800f126 <__ssvfscanf_r+0xb5a>
 800f124:	e631      	b.n	800ed8a <__ssvfscanf_r+0x7be>
 800f126:	6828      	ldr	r0, [r5, #0]
 800f128:	1d21      	adds	r1, r4, #4
 800f12a:	f001 fd49 	bl	8010bc0 <realloc>
 800f12e:	2800      	cmp	r0, #0
 800f130:	d100      	bne.n	800f134 <__ssvfscanf_r+0xb68>
 800f132:	e62a      	b.n	800ed8a <__ssvfscanf_r+0x7be>
 800f134:	6028      	str	r0, [r5, #0]
 800f136:	e628      	b.n	800ed8a <__ssvfscanf_r+0x7be>
 800f138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13a:	60fb      	str	r3, [r7, #12]
 800f13c:	2300      	movs	r3, #0
 800f13e:	001d      	movs	r5, r3
 800f140:	613b      	str	r3, [r7, #16]
 800f142:	633b      	str	r3, [r7, #48]	; 0x30
 800f144:	334c      	adds	r3, #76	; 0x4c
 800f146:	18fc      	adds	r4, r7, r3
 800f148:	e789      	b.n	800f05e <__ssvfscanf_r+0xa92>
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	001d      	movs	r5, r3
 800f14e:	613b      	str	r3, [r7, #16]
 800f150:	633b      	str	r3, [r7, #48]	; 0x30
 800f152:	e784      	b.n	800f05e <__ssvfscanf_r+0xa92>
 800f154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f156:	623e      	str	r6, [r7, #32]
 800f158:	3302      	adds	r3, #2
 800f15a:	d1cc      	bne.n	800f0f6 <__ssvfscanf_r+0xb2a>
 800f15c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f15e:	685b      	ldr	r3, [r3, #4]
 800f160:	2b00      	cmp	r3, #0
 800f162:	dd00      	ble.n	800f166 <__ssvfscanf_r+0xb9a>
 800f164:	e77d      	b.n	800f062 <__ssvfscanf_r+0xa96>
 800f166:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f168:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f16a:	f002 f9c3 	bl	80114f4 <__ssrefill_r>
 800f16e:	2800      	cmp	r0, #0
 800f170:	d100      	bne.n	800f174 <__ssvfscanf_r+0xba8>
 800f172:	e776      	b.n	800f062 <__ssvfscanf_r+0xa96>
 800f174:	6a3b      	ldr	r3, [r7, #32]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d001      	beq.n	800f17e <__ssvfscanf_r+0xbb2>
 800f17a:	f7ff faf6 	bl	800e76a <__ssvfscanf_r+0x19e>
 800f17e:	e7c2      	b.n	800f106 <__ssvfscanf_r+0xb3a>
 800f180:	238c      	movs	r3, #140	; 0x8c
 800f182:	2248      	movs	r2, #72	; 0x48
 800f184:	005b      	lsls	r3, r3, #1
 800f186:	189b      	adds	r3, r3, r2
 800f188:	3e01      	subs	r6, #1
 800f18a:	19db      	adds	r3, r3, r7
 800f18c:	5cf1      	ldrb	r1, [r6, r3]
 800f18e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f190:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f192:	f002 f973 	bl	801147c <_sungetc_r>
 800f196:	e7b4      	b.n	800f102 <__ssvfscanf_r+0xb36>
 800f198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19a:	199b      	adds	r3, r3, r6
 800f19c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a0:	2b03      	cmp	r3, #3
 800f1a2:	d102      	bne.n	800f1aa <__ssvfscanf_r+0xbde>
 800f1a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f1a6:	2b04      	cmp	r3, #4
 800f1a8:	d002      	beq.n	800f1b0 <__ssvfscanf_r+0xbe4>
 800f1aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1ac:	3b01      	subs	r3, #1
 800f1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d1d2      	bne.n	800f15c <__ssvfscanf_r+0xb90>
 800f1b6:	3404      	adds	r4, #4
 800f1b8:	2d00      	cmp	r5, #0
 800f1ba:	d016      	beq.n	800f1ea <__ssvfscanf_r+0xc1e>
 800f1bc:	69fa      	ldr	r2, [r7, #28]
 800f1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c0:	623a      	str	r2, [r7, #32]
 800f1c2:	693a      	ldr	r2, [r7, #16]
 800f1c4:	1ae6      	subs	r6, r4, r3
 800f1c6:	10b3      	asrs	r3, r6, #2
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	d3c7      	bcc.n	800f15c <__ssvfscanf_r+0xb90>
 800f1cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1ce:	00d1      	lsls	r1, r2, #3
 800f1d0:	f001 fcf6 	bl	8010bc0 <realloc>
 800f1d4:	6338      	str	r0, [r7, #48]	; 0x30
 800f1d6:	2800      	cmp	r0, #0
 800f1d8:	d101      	bne.n	800f1de <__ssvfscanf_r+0xc12>
 800f1da:	f7ff fbbf 	bl	800e95c <__ssvfscanf_r+0x390>
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	1984      	adds	r4, r0, r6
 800f1e2:	005b      	lsls	r3, r3, #1
 800f1e4:	6028      	str	r0, [r5, #0]
 800f1e6:	613b      	str	r3, [r7, #16]
 800f1e8:	e7b8      	b.n	800f15c <__ssvfscanf_r+0xb90>
 800f1ea:	623d      	str	r5, [r7, #32]
 800f1ec:	e7b6      	b.n	800f15c <__ssvfscanf_r+0xb90>
 800f1ee:	46c0      	nop			; (mov r8, r8)
 800f1f0:	0000fff6 	.word	0x0000fff6
 800f1f4:	08014529 	.word	0x08014529
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d01c      	beq.n	800f238 <__ssvfscanf_r+0xc6c>
 800f1fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f200:	49bf      	ldr	r1, [pc, #764]	; (800f500 <__ssvfscanf_r+0xf34>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	781a      	ldrb	r2, [r3, #0]
 800f206:	5c8a      	ldrb	r2, [r1, r2]
 800f208:	2108      	movs	r1, #8
 800f20a:	420a      	tst	r2, r1
 800f20c:	d000      	beq.n	800f210 <__ssvfscanf_r+0xc44>
 800f20e:	e4a1      	b.n	800eb54 <__ssvfscanf_r+0x588>
 800f210:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f214:	6852      	ldr	r2, [r2, #4]
 800f216:	3301      	adds	r3, #1
 800f218:	600b      	str	r3, [r1, #0]
 800f21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f21c:	3a01      	subs	r2, #1
 800f21e:	3401      	adds	r4, #1
 800f220:	604a      	str	r2, [r1, #4]
 800f222:	429c      	cmp	r4, r3
 800f224:	d100      	bne.n	800f228 <__ssvfscanf_r+0xc5c>
 800f226:	e495      	b.n	800eb54 <__ssvfscanf_r+0x588>
 800f228:	2a00      	cmp	r2, #0
 800f22a:	dce8      	bgt.n	800f1fe <__ssvfscanf_r+0xc32>
 800f22c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f22e:	f002 f961 	bl	80114f4 <__ssrefill_r>
 800f232:	2800      	cmp	r0, #0
 800f234:	d0e3      	beq.n	800f1fe <__ssvfscanf_r+0xc32>
 800f236:	e48d      	b.n	800eb54 <__ssvfscanf_r+0x588>
 800f238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23a:	0032      	movs	r2, r6
 800f23c:	cb10      	ldmia	r3!, {r4}
 800f23e:	61fb      	str	r3, [r7, #28]
 800f240:	2380      	movs	r3, #128	; 0x80
 800f242:	401a      	ands	r2, r3
 800f244:	421e      	tst	r6, r3
 800f246:	d039      	beq.n	800f2bc <__ssvfscanf_r+0xcf0>
 800f248:	2c00      	cmp	r4, #0
 800f24a:	d101      	bne.n	800f250 <__ssvfscanf_r+0xc84>
 800f24c:	f7ff fabb 	bl	800e7c6 <__ssvfscanf_r+0x1fa>
 800f250:	2020      	movs	r0, #32
 800f252:	f7fb fab9 	bl	800a7c8 <malloc>
 800f256:	6338      	str	r0, [r7, #48]	; 0x30
 800f258:	2800      	cmp	r0, #0
 800f25a:	d101      	bne.n	800f260 <__ssvfscanf_r+0xc94>
 800f25c:	f7ff fa8c 	bl	800e778 <__ssvfscanf_r+0x1ac>
 800f260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f262:	6020      	str	r0, [r4, #0]
 800f264:	88de      	ldrh	r6, [r3, #6]
 800f266:	889d      	ldrh	r5, [r3, #4]
 800f268:	6818      	ldr	r0, [r3, #0]
 800f26a:	42ae      	cmp	r6, r5
 800f26c:	d310      	bcc.n	800f290 <__ssvfscanf_r+0xcc4>
 800f26e:	4ba5      	ldr	r3, [pc, #660]	; (800f504 <__ssvfscanf_r+0xf38>)
 800f270:	429d      	cmp	r5, r3
 800f272:	d901      	bls.n	800f278 <__ssvfscanf_r+0xcac>
 800f274:	f7ff fb7b 	bl	800e96e <__ssvfscanf_r+0x3a2>
 800f278:	3508      	adds	r5, #8
 800f27a:	b2ad      	uxth	r5, r5
 800f27c:	00a9      	lsls	r1, r5, #2
 800f27e:	f001 fc9f 	bl	8010bc0 <realloc>
 800f282:	2800      	cmp	r0, #0
 800f284:	d101      	bne.n	800f28a <__ssvfscanf_r+0xcbe>
 800f286:	f7ff fb72 	bl	800e96e <__ssvfscanf_r+0x3a2>
 800f28a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f28c:	6018      	str	r0, [r3, #0]
 800f28e:	809d      	strh	r5, [r3, #4]
 800f290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f292:	1c72      	adds	r2, r6, #1
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	00b6      	lsls	r6, r6, #2
 800f298:	50f4      	str	r4, [r6, r3]
 800f29a:	2320      	movs	r3, #32
 800f29c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f29e:	0026      	movs	r6, r4
 800f2a0:	80ca      	strh	r2, [r1, #6]
 800f2a2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f2a4:	633b      	str	r3, [r7, #48]	; 0x30
 800f2a6:	0025      	movs	r5, r4
 800f2a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2aa:	4995      	ldr	r1, [pc, #596]	; (800f500 <__ssvfscanf_r+0xf34>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	781a      	ldrb	r2, [r3, #0]
 800f2b0:	5c8a      	ldrb	r2, [r1, r2]
 800f2b2:	2108      	movs	r1, #8
 800f2b4:	420a      	tst	r2, r1
 800f2b6:	d004      	beq.n	800f2c2 <__ssvfscanf_r+0xcf6>
 800f2b8:	623c      	str	r4, [r7, #32]
 800f2ba:	e031      	b.n	800f320 <__ssvfscanf_r+0xd54>
 800f2bc:	0016      	movs	r6, r2
 800f2be:	633a      	str	r2, [r7, #48]	; 0x30
 800f2c0:	e7f1      	b.n	800f2a6 <__ssvfscanf_r+0xcda>
 800f2c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f2c6:	6852      	ldr	r2, [r2, #4]
 800f2c8:	3a01      	subs	r2, #1
 800f2ca:	604a      	str	r2, [r1, #4]
 800f2cc:	1c5a      	adds	r2, r3, #1
 800f2ce:	600a      	str	r2, [r1, #0]
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	1c62      	adds	r2, r4, #1
 800f2d4:	623a      	str	r2, [r7, #32]
 800f2d6:	7023      	strb	r3, [r4, #0]
 800f2d8:	2e00      	cmp	r6, #0
 800f2da:	d010      	beq.n	800f2fe <__ssvfscanf_r+0xd32>
 800f2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2de:	1b54      	subs	r4, r2, r5
 800f2e0:	429c      	cmp	r4, r3
 800f2e2:	d30c      	bcc.n	800f2fe <__ssvfscanf_r+0xd32>
 800f2e4:	005b      	lsls	r3, r3, #1
 800f2e6:	0028      	movs	r0, r5
 800f2e8:	0019      	movs	r1, r3
 800f2ea:	633b      	str	r3, [r7, #48]	; 0x30
 800f2ec:	f001 fc68 	bl	8010bc0 <realloc>
 800f2f0:	1e05      	subs	r5, r0, #0
 800f2f2:	d101      	bne.n	800f2f8 <__ssvfscanf_r+0xd2c>
 800f2f4:	f7ff fa40 	bl	800e778 <__ssvfscanf_r+0x1ac>
 800f2f8:	1903      	adds	r3, r0, r4
 800f2fa:	623b      	str	r3, [r7, #32]
 800f2fc:	6030      	str	r0, [r6, #0]
 800f2fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f300:	3b01      	subs	r3, #1
 800f302:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f304:	2b00      	cmp	r3, #0
 800f306:	d00b      	beq.n	800f320 <__ssvfscanf_r+0xd54>
 800f308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f30a:	685b      	ldr	r3, [r3, #4]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	dd01      	ble.n	800f314 <__ssvfscanf_r+0xd48>
 800f310:	6a3c      	ldr	r4, [r7, #32]
 800f312:	e7c9      	b.n	800f2a8 <__ssvfscanf_r+0xcdc>
 800f314:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f316:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f318:	f002 f8ec 	bl	80114f4 <__ssrefill_r>
 800f31c:	2800      	cmp	r0, #0
 800f31e:	d0f7      	beq.n	800f310 <__ssvfscanf_r+0xd44>
 800f320:	2300      	movs	r3, #0
 800f322:	6a3a      	ldr	r2, [r7, #32]
 800f324:	7013      	strb	r3, [r2, #0]
 800f326:	1b55      	subs	r5, r2, r5
 800f328:	2e00      	cmp	r6, #0
 800f32a:	d009      	beq.n	800f340 <__ssvfscanf_r+0xd74>
 800f32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f32e:	1c69      	adds	r1, r5, #1
 800f330:	428b      	cmp	r3, r1
 800f332:	d905      	bls.n	800f340 <__ssvfscanf_r+0xd74>
 800f334:	6830      	ldr	r0, [r6, #0]
 800f336:	f001 fc43 	bl	8010bc0 <realloc>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	d000      	beq.n	800f340 <__ssvfscanf_r+0xd74>
 800f33e:	6030      	str	r0, [r6, #0]
 800f340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f342:	195b      	adds	r3, r3, r5
 800f344:	63bb      	str	r3, [r7, #56]	; 0x38
 800f346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f348:	3301      	adds	r3, #1
 800f34a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f34c:	e63c      	b.n	800efc8 <__ssvfscanf_r+0x9fc>
 800f34e:	22ae      	movs	r2, #174	; 0xae
 800f350:	2100      	movs	r1, #0
 800f352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f354:	0052      	lsls	r2, r2, #1
 800f356:	3b01      	subs	r3, #1
 800f358:	6239      	str	r1, [r7, #32]
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d906      	bls.n	800f36c <__ssvfscanf_r+0xda0>
 800f35e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f360:	3b5e      	subs	r3, #94	; 0x5e
 800f362:	3bff      	subs	r3, #255	; 0xff
 800f364:	623b      	str	r3, [r7, #32]
 800f366:	235e      	movs	r3, #94	; 0x5e
 800f368:	33ff      	adds	r3, #255	; 0xff
 800f36a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f36c:	24d8      	movs	r4, #216	; 0xd8
 800f36e:	2300      	movs	r3, #0
 800f370:	2248      	movs	r2, #72	; 0x48
 800f372:	0124      	lsls	r4, r4, #4
 800f374:	4334      	orrs	r4, r6
 800f376:	2680      	movs	r6, #128	; 0x80
 800f378:	61fb      	str	r3, [r7, #28]
 800f37a:	3319      	adds	r3, #25
 800f37c:	33ff      	adds	r3, #255	; 0xff
 800f37e:	189b      	adds	r3, r3, r2
 800f380:	19dd      	adds	r5, r3, r7
 800f382:	00b6      	lsls	r6, r6, #2
 800f384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f386:	681a      	ldr	r2, [r3, #0]
 800f388:	7813      	ldrb	r3, [r2, #0]
 800f38a:	2b39      	cmp	r3, #57	; 0x39
 800f38c:	d80f      	bhi.n	800f3ae <__ssvfscanf_r+0xde2>
 800f38e:	2b2a      	cmp	r3, #42	; 0x2a
 800f390:	d91b      	bls.n	800f3ca <__ssvfscanf_r+0xdfe>
 800f392:	0018      	movs	r0, r3
 800f394:	382b      	subs	r0, #43	; 0x2b
 800f396:	280e      	cmp	r0, #14
 800f398:	d817      	bhi.n	800f3ca <__ssvfscanf_r+0xdfe>
 800f39a:	f7f0 febb 	bl	8000114 <__gnu_thumb1_case_uqi>
 800f39e:	168f      	.short	0x168f
 800f3a0:	5416168f 	.word	0x5416168f
 800f3a4:	80808080 	.word	0x80808080
 800f3a8:	87808080 	.word	0x87808080
 800f3ac:	87          	.byte	0x87
 800f3ad:	00          	.byte	0x00
 800f3ae:	2b66      	cmp	r3, #102	; 0x66
 800f3b0:	d83a      	bhi.n	800f428 <__ssvfscanf_r+0xe5c>
 800f3b2:	2b60      	cmp	r3, #96	; 0x60
 800f3b4:	d803      	bhi.n	800f3be <__ssvfscanf_r+0xdf2>
 800f3b6:	2b46      	cmp	r3, #70	; 0x46
 800f3b8:	d805      	bhi.n	800f3c6 <__ssvfscanf_r+0xdfa>
 800f3ba:	2b40      	cmp	r3, #64	; 0x40
 800f3bc:	d905      	bls.n	800f3ca <__ssvfscanf_r+0xdfe>
 800f3be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3c0:	290a      	cmp	r1, #10
 800f3c2:	dc71      	bgt.n	800f4a8 <__ssvfscanf_r+0xedc>
 800f3c4:	e001      	b.n	800f3ca <__ssvfscanf_r+0xdfe>
 800f3c6:	2b58      	cmp	r3, #88	; 0x58
 800f3c8:	d030      	beq.n	800f42c <__ssvfscanf_r+0xe60>
 800f3ca:	05e3      	lsls	r3, r4, #23
 800f3cc:	d515      	bpl.n	800f3fa <__ssvfscanf_r+0xe2e>
 800f3ce:	238c      	movs	r3, #140	; 0x8c
 800f3d0:	2248      	movs	r2, #72	; 0x48
 800f3d2:	005b      	lsls	r3, r3, #1
 800f3d4:	189b      	adds	r3, r3, r2
 800f3d6:	19db      	adds	r3, r3, r7
 800f3d8:	429d      	cmp	r5, r3
 800f3da:	d905      	bls.n	800f3e8 <__ssvfscanf_r+0xe1c>
 800f3dc:	3d01      	subs	r5, #1
 800f3de:	7829      	ldrb	r1, [r5, #0]
 800f3e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f3e4:	f002 f84a 	bl	801147c <_sungetc_r>
 800f3e8:	238c      	movs	r3, #140	; 0x8c
 800f3ea:	2248      	movs	r2, #72	; 0x48
 800f3ec:	005b      	lsls	r3, r3, #1
 800f3ee:	189b      	adds	r3, r3, r2
 800f3f0:	19db      	adds	r3, r3, r7
 800f3f2:	429d      	cmp	r5, r3
 800f3f4:	d101      	bne.n	800f3fa <__ssvfscanf_r+0xe2e>
 800f3f6:	f7ff f9e6 	bl	800e7c6 <__ssvfscanf_r+0x1fa>
 800f3fa:	2310      	movs	r3, #16
 800f3fc:	0022      	movs	r2, r4
 800f3fe:	401a      	ands	r2, r3
 800f400:	421c      	tst	r4, r3
 800f402:	d171      	bne.n	800f4e8 <__ssvfscanf_r+0xf1c>
 800f404:	218c      	movs	r1, #140	; 0x8c
 800f406:	2048      	movs	r0, #72	; 0x48
 800f408:	0049      	lsls	r1, r1, #1
 800f40a:	1809      	adds	r1, r1, r0
 800f40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40e:	697e      	ldr	r6, [r7, #20]
 800f410:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f412:	19c9      	adds	r1, r1, r7
 800f414:	702a      	strb	r2, [r5, #0]
 800f416:	47b0      	blx	r6
 800f418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41a:	1d1e      	adds	r6, r3, #4
 800f41c:	06a3      	lsls	r3, r4, #26
 800f41e:	d559      	bpl.n	800f4d4 <__ssvfscanf_r+0xf08>
 800f420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	6018      	str	r0, [r3, #0]
 800f426:	e05b      	b.n	800f4e0 <__ssvfscanf_r+0xf14>
 800f428:	2b78      	cmp	r3, #120	; 0x78
 800f42a:	d1ce      	bne.n	800f3ca <__ssvfscanf_r+0xdfe>
 800f42c:	21c0      	movs	r1, #192	; 0xc0
 800f42e:	00c9      	lsls	r1, r1, #3
 800f430:	4021      	ands	r1, r4
 800f432:	42b1      	cmp	r1, r6
 800f434:	d1c9      	bne.n	800f3ca <__ssvfscanf_r+0xdfe>
 800f436:	4934      	ldr	r1, [pc, #208]	; (800f508 <__ssvfscanf_r+0xf3c>)
 800f438:	4021      	ands	r1, r4
 800f43a:	24a0      	movs	r4, #160	; 0xa0
 800f43c:	00e4      	lsls	r4, r4, #3
 800f43e:	430c      	orrs	r4, r1
 800f440:	2110      	movs	r1, #16
 800f442:	6279      	str	r1, [r7, #36]	; 0x24
 800f444:	e00b      	b.n	800f45e <__ssvfscanf_r+0xe92>
 800f446:	0521      	lsls	r1, r4, #20
 800f448:	d509      	bpl.n	800f45e <__ssvfscanf_r+0xe92>
 800f44a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f44c:	2900      	cmp	r1, #0
 800f44e:	d102      	bne.n	800f456 <__ssvfscanf_r+0xe8a>
 800f450:	3108      	adds	r1, #8
 800f452:	4334      	orrs	r4, r6
 800f454:	6279      	str	r1, [r7, #36]	; 0x24
 800f456:	0561      	lsls	r1, r4, #21
 800f458:	d504      	bpl.n	800f464 <__ssvfscanf_r+0xe98>
 800f45a:	492c      	ldr	r1, [pc, #176]	; (800f50c <__ssvfscanf_r+0xf40>)
 800f45c:	400c      	ands	r4, r1
 800f45e:	702b      	strb	r3, [r5, #0]
 800f460:	3501      	adds	r5, #1
 800f462:	e00c      	b.n	800f47e <__ssvfscanf_r+0xeb2>
 800f464:	4b2a      	ldr	r3, [pc, #168]	; (800f510 <__ssvfscanf_r+0xf44>)
 800f466:	401c      	ands	r4, r3
 800f468:	6a3b      	ldr	r3, [r7, #32]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d004      	beq.n	800f478 <__ssvfscanf_r+0xeac>
 800f46e:	3b01      	subs	r3, #1
 800f470:	623b      	str	r3, [r7, #32]
 800f472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f474:	3301      	adds	r3, #1
 800f476:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f478:	69fb      	ldr	r3, [r7, #28]
 800f47a:	3301      	adds	r3, #1
 800f47c:	61fb      	str	r3, [r7, #28]
 800f47e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f480:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	3b01      	subs	r3, #1
 800f486:	604b      	str	r3, [r1, #4]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	dd1c      	ble.n	800f4c6 <__ssvfscanf_r+0xefa>
 800f48c:	3201      	adds	r2, #1
 800f48e:	600a      	str	r2, [r1, #0]
 800f490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f492:	3b01      	subs	r3, #1
 800f494:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f496:	2b00      	cmp	r3, #0
 800f498:	d000      	beq.n	800f49c <__ssvfscanf_r+0xed0>
 800f49a:	e773      	b.n	800f384 <__ssvfscanf_r+0xdb8>
 800f49c:	e795      	b.n	800f3ca <__ssvfscanf_r+0xdfe>
 800f49e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4a0:	491c      	ldr	r1, [pc, #112]	; (800f514 <__ssvfscanf_r+0xf48>)
 800f4a2:	0040      	lsls	r0, r0, #1
 800f4a4:	5e41      	ldrsh	r1, [r0, r1]
 800f4a6:	6279      	str	r1, [r7, #36]	; 0x24
 800f4a8:	491b      	ldr	r1, [pc, #108]	; (800f518 <__ssvfscanf_r+0xf4c>)
 800f4aa:	e7d7      	b.n	800f45c <__ssvfscanf_r+0xe90>
 800f4ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4ae:	4919      	ldr	r1, [pc, #100]	; (800f514 <__ssvfscanf_r+0xf48>)
 800f4b0:	0040      	lsls	r0, r0, #1
 800f4b2:	5e41      	ldrsh	r1, [r0, r1]
 800f4b4:	6279      	str	r1, [r7, #36]	; 0x24
 800f4b6:	2908      	cmp	r1, #8
 800f4b8:	dcf6      	bgt.n	800f4a8 <__ssvfscanf_r+0xedc>
 800f4ba:	e786      	b.n	800f3ca <__ssvfscanf_r+0xdfe>
 800f4bc:	2180      	movs	r1, #128	; 0x80
 800f4be:	420c      	tst	r4, r1
 800f4c0:	d083      	beq.n	800f3ca <__ssvfscanf_r+0xdfe>
 800f4c2:	438c      	bics	r4, r1
 800f4c4:	e7cb      	b.n	800f45e <__ssvfscanf_r+0xe92>
 800f4c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f4ca:	f002 f813 	bl	80114f4 <__ssrefill_r>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	d0de      	beq.n	800f490 <__ssvfscanf_r+0xec4>
 800f4d2:	e77a      	b.n	800f3ca <__ssvfscanf_r+0xdfe>
 800f4d4:	2308      	movs	r3, #8
 800f4d6:	421c      	tst	r4, r3
 800f4d8:	d020      	beq.n	800f51c <__ssvfscanf_r+0xf50>
 800f4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	7018      	strb	r0, [r3, #0]
 800f4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e2:	633e      	str	r6, [r7, #48]	; 0x30
 800f4e4:	3301      	adds	r3, #1
 800f4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f4e8:	238c      	movs	r3, #140	; 0x8c
 800f4ea:	2248      	movs	r2, #72	; 0x48
 800f4ec:	005b      	lsls	r3, r3, #1
 800f4ee:	189b      	adds	r3, r3, r2
 800f4f0:	19db      	adds	r3, r3, r7
 800f4f2:	1aed      	subs	r5, r5, r3
 800f4f4:	69fb      	ldr	r3, [r7, #28]
 800f4f6:	18ed      	adds	r5, r5, r3
 800f4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fa:	195b      	adds	r3, r3, r5
 800f4fc:	f7ff f92d 	bl	800e75a <__ssvfscanf_r+0x18e>
 800f500:	08014529 	.word	0x08014529
 800f504:	0000fff6 	.word	0x0000fff6
 800f508:	fffffdff 	.word	0xfffffdff
 800f50c:	fffffa7f 	.word	0xfffffa7f
 800f510:	fffffc7f 	.word	0xfffffc7f
 800f514:	08014856 	.word	0x08014856
 800f518:	fffff47f 	.word	0xfffff47f
 800f51c:	0763      	lsls	r3, r4, #29
 800f51e:	d503      	bpl.n	800f528 <__ssvfscanf_r+0xf5c>
 800f520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	8018      	strh	r0, [r3, #0]
 800f526:	e7db      	b.n	800f4e0 <__ssvfscanf_r+0xf14>
 800f528:	2301      	movs	r3, #1
 800f52a:	0022      	movs	r2, r4
 800f52c:	401a      	ands	r2, r3
 800f52e:	421c      	tst	r4, r3
 800f530:	d000      	beq.n	800f534 <__ssvfscanf_r+0xf68>
 800f532:	e775      	b.n	800f420 <__ssvfscanf_r+0xe54>
 800f534:	07a4      	lsls	r4, r4, #30
 800f536:	d400      	bmi.n	800f53a <__ssvfscanf_r+0xf6e>
 800f538:	e772      	b.n	800f420 <__ssvfscanf_r+0xe54>
 800f53a:	4ba8      	ldr	r3, [pc, #672]	; (800f7dc <__ssvfscanf_r+0x1210>)
 800f53c:	6979      	ldr	r1, [r7, #20]
 800f53e:	4299      	cmp	r1, r3
 800f540:	d10c      	bne.n	800f55c <__ssvfscanf_r+0xf90>
 800f542:	218c      	movs	r1, #140	; 0x8c
 800f544:	2048      	movs	r0, #72	; 0x48
 800f546:	0049      	lsls	r1, r1, #1
 800f548:	1809      	adds	r1, r1, r0
 800f54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f54e:	19c9      	adds	r1, r1, r7
 800f550:	f001 fecc 	bl	80112ec <_strtoull_r>
 800f554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	c303      	stmia	r3!, {r0, r1}
 800f55a:	e7c1      	b.n	800f4e0 <__ssvfscanf_r+0xf14>
 800f55c:	218c      	movs	r1, #140	; 0x8c
 800f55e:	2048      	movs	r0, #72	; 0x48
 800f560:	0049      	lsls	r1, r1, #1
 800f562:	1809      	adds	r1, r1, r0
 800f564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f566:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f568:	19c9      	adds	r1, r1, r7
 800f56a:	f001 fe0d 	bl	8011188 <_strtoll_r>
 800f56e:	e7f1      	b.n	800f554 <__ssvfscanf_r+0xf88>
 800f570:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f572:	f000 fb9f 	bl	800fcb4 <_localeconv_r>
 800f576:	22ae      	movs	r2, #174	; 0xae
 800f578:	2100      	movs	r1, #0
 800f57a:	6803      	ldr	r3, [r0, #0]
 800f57c:	0052      	lsls	r2, r2, #1
 800f57e:	603b      	str	r3, [r7, #0]
 800f580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f582:	60f9      	str	r1, [r7, #12]
 800f584:	3b01      	subs	r3, #1
 800f586:	4293      	cmp	r3, r2
 800f588:	d906      	bls.n	800f598 <__ssvfscanf_r+0xfcc>
 800f58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f58c:	3b5e      	subs	r3, #94	; 0x5e
 800f58e:	3bff      	subs	r3, #255	; 0xff
 800f590:	60fb      	str	r3, [r7, #12]
 800f592:	235e      	movs	r3, #94	; 0x5e
 800f594:	33ff      	adds	r3, #255	; 0xff
 800f596:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f598:	23f0      	movs	r3, #240	; 0xf0
 800f59a:	00db      	lsls	r3, r3, #3
 800f59c:	431e      	orrs	r6, r3
 800f59e:	238c      	movs	r3, #140	; 0x8c
 800f5a0:	2248      	movs	r2, #72	; 0x48
 800f5a2:	2400      	movs	r4, #0
 800f5a4:	005b      	lsls	r3, r3, #1
 800f5a6:	189b      	adds	r3, r3, r2
 800f5a8:	623c      	str	r4, [r7, #32]
 800f5aa:	607c      	str	r4, [r7, #4]
 800f5ac:	60bc      	str	r4, [r7, #8]
 800f5ae:	61fc      	str	r4, [r7, #28]
 800f5b0:	613c      	str	r4, [r7, #16]
 800f5b2:	19dd      	adds	r5, r3, r7
 800f5b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	781a      	ldrb	r2, [r3, #0]
 800f5ba:	0010      	movs	r0, r2
 800f5bc:	382b      	subs	r0, #43	; 0x2b
 800f5be:	284e      	cmp	r0, #78	; 0x4e
 800f5c0:	d900      	bls.n	800f5c4 <__ssvfscanf_r+0xff8>
 800f5c2:	e133      	b.n	800f82c <__ssvfscanf_r+0x1260>
 800f5c4:	f7f0 fdb0 	bl	8000128 <__gnu_thumb1_case_uhi>
 800f5c8:	0132009b 	.word	0x0132009b
 800f5cc:	0132009b 	.word	0x0132009b
 800f5d0:	004f0132 	.word	0x004f0132
 800f5d4:	00720072 	.word	0x00720072
 800f5d8:	00720072 	.word	0x00720072
 800f5dc:	00720072 	.word	0x00720072
 800f5e0:	00720072 	.word	0x00720072
 800f5e4:	01320072 	.word	0x01320072
 800f5e8:	01320132 	.word	0x01320132
 800f5ec:	01320132 	.word	0x01320132
 800f5f0:	01320132 	.word	0x01320132
 800f5f4:	007b00bc 	.word	0x007b00bc
 800f5f8:	007b007b 	.word	0x007b007b
 800f5fc:	00f7012f 	.word	0x00f7012f
 800f600:	01320132 	.word	0x01320132
 800f604:	013200e3 	.word	0x013200e3
 800f608:	01320132 	.word	0x01320132
 800f60c:	00a00132 	.word	0x00a00132
 800f610:	01120132 	.word	0x01120132
 800f614:	01320132 	.word	0x01320132
 800f618:	01010132 	.word	0x01010132
 800f61c:	01320132 	.word	0x01320132
 800f620:	00820132 	.word	0x00820132
 800f624:	01320105 	.word	0x01320105
 800f628:	01320132 	.word	0x01320132
 800f62c:	01320132 	.word	0x01320132
 800f630:	01320132 	.word	0x01320132
 800f634:	007b00bc 	.word	0x007b00bc
 800f638:	007b007b 	.word	0x007b007b
 800f63c:	00f7012f 	.word	0x00f7012f
 800f640:	01320132 	.word	0x01320132
 800f644:	013200e3 	.word	0x013200e3
 800f648:	01320132 	.word	0x01320132
 800f64c:	00a00132 	.word	0x00a00132
 800f650:	01120132 	.word	0x01120132
 800f654:	01320132 	.word	0x01320132
 800f658:	01010132 	.word	0x01010132
 800f65c:	01320132 	.word	0x01320132
 800f660:	00820132 	.word	0x00820132
 800f664:	0105      	.short	0x0105
 800f666:	05f1      	lsls	r1, r6, #23
 800f668:	d520      	bpl.n	800f6ac <__ssvfscanf_r+0x10e0>
 800f66a:	2280      	movs	r2, #128	; 0x80
 800f66c:	4396      	bics	r6, r2
 800f66e:	69fa      	ldr	r2, [r7, #28]
 800f670:	3201      	adds	r2, #1
 800f672:	61fa      	str	r2, [r7, #28]
 800f674:	68fa      	ldr	r2, [r7, #12]
 800f676:	2a00      	cmp	r2, #0
 800f678:	d004      	beq.n	800f684 <__ssvfscanf_r+0x10b8>
 800f67a:	3a01      	subs	r2, #1
 800f67c:	60fa      	str	r2, [r7, #12]
 800f67e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f680:	3201      	adds	r2, #1
 800f682:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f686:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f688:	3a01      	subs	r2, #1
 800f68a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f68c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f68e:	3201      	adds	r2, #1
 800f690:	63ba      	str	r2, [r7, #56]	; 0x38
 800f692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f694:	6852      	ldr	r2, [r2, #4]
 800f696:	3a01      	subs	r2, #1
 800f698:	604a      	str	r2, [r1, #4]
 800f69a:	2a00      	cmp	r2, #0
 800f69c:	dc00      	bgt.n	800f6a0 <__ssvfscanf_r+0x10d4>
 800f69e:	e0d6      	b.n	800f84e <__ssvfscanf_r+0x1282>
 800f6a0:	3301      	adds	r3, #1
 800f6a2:	600b      	str	r3, [r1, #0]
 800f6a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d184      	bne.n	800f5b4 <__ssvfscanf_r+0xfe8>
 800f6aa:	e057      	b.n	800f75c <__ssvfscanf_r+0x1190>
 800f6ac:	6a39      	ldr	r1, [r7, #32]
 800f6ae:	1909      	adds	r1, r1, r4
 800f6b0:	2900      	cmp	r1, #0
 800f6b2:	d153      	bne.n	800f75c <__ssvfscanf_r+0x1190>
 800f6b4:	494a      	ldr	r1, [pc, #296]	; (800f7e0 <__ssvfscanf_r+0x1214>)
 800f6b6:	400e      	ands	r6, r1
 800f6b8:	702a      	strb	r2, [r5, #0]
 800f6ba:	3501      	adds	r5, #1
 800f6bc:	e7e2      	b.n	800f684 <__ssvfscanf_r+0x10b8>
 800f6be:	0531      	lsls	r1, r6, #20
 800f6c0:	d54c      	bpl.n	800f75c <__ssvfscanf_r+0x1190>
 800f6c2:	6a39      	ldr	r1, [r7, #32]
 800f6c4:	1909      	adds	r1, r1, r4
 800f6c6:	2900      	cmp	r1, #0
 800f6c8:	d040      	beq.n	800f74c <__ssvfscanf_r+0x1180>
 800f6ca:	e047      	b.n	800f75c <__ssvfscanf_r+0x1190>
 800f6cc:	2198      	movs	r1, #152	; 0x98
 800f6ce:	2080      	movs	r0, #128	; 0x80
 800f6d0:	0109      	lsls	r1, r1, #4
 800f6d2:	4031      	ands	r1, r6
 800f6d4:	0040      	lsls	r0, r0, #1
 800f6d6:	4281      	cmp	r1, r0
 800f6d8:	d140      	bne.n	800f75c <__ssvfscanf_r+0x1190>
 800f6da:	69f9      	ldr	r1, [r7, #28]
 800f6dc:	2901      	cmp	r1, #1
 800f6de:	d13d      	bne.n	800f75c <__ssvfscanf_r+0x1190>
 800f6e0:	2080      	movs	r0, #128	; 0x80
 800f6e2:	4940      	ldr	r1, [pc, #256]	; (800f7e4 <__ssvfscanf_r+0x1218>)
 800f6e4:	0100      	lsls	r0, r0, #4
 800f6e6:	400e      	ands	r6, r1
 800f6e8:	3132      	adds	r1, #50	; 0x32
 800f6ea:	31ff      	adds	r1, #255	; 0xff
 800f6ec:	7029      	strb	r1, [r5, #0]
 800f6ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f6f0:	4306      	orrs	r6, r0
 800f6f2:	3901      	subs	r1, #1
 800f6f4:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f6f6:	3501      	adds	r5, #1
 800f6f8:	2100      	movs	r1, #0
 800f6fa:	61f9      	str	r1, [r7, #28]
 800f6fc:	e7dc      	b.n	800f6b8 <__ssvfscanf_r+0x10ec>
 800f6fe:	2180      	movs	r1, #128	; 0x80
 800f700:	420e      	tst	r6, r1
 800f702:	d02b      	beq.n	800f75c <__ssvfscanf_r+0x1190>
 800f704:	438e      	bics	r6, r1
 800f706:	e7d7      	b.n	800f6b8 <__ssvfscanf_r+0x10ec>
 800f708:	6a39      	ldr	r1, [r7, #32]
 800f70a:	2900      	cmp	r1, #0
 800f70c:	d10d      	bne.n	800f72a <__ssvfscanf_r+0x115e>
 800f70e:	69f9      	ldr	r1, [r7, #28]
 800f710:	2900      	cmp	r1, #0
 800f712:	d10e      	bne.n	800f732 <__ssvfscanf_r+0x1166>
 800f714:	21e0      	movs	r1, #224	; 0xe0
 800f716:	0030      	movs	r0, r6
 800f718:	00c9      	lsls	r1, r1, #3
 800f71a:	4008      	ands	r0, r1
 800f71c:	4288      	cmp	r0, r1
 800f71e:	d108      	bne.n	800f732 <__ssvfscanf_r+0x1166>
 800f720:	4931      	ldr	r1, [pc, #196]	; (800f7e8 <__ssvfscanf_r+0x121c>)
 800f722:	400e      	ands	r6, r1
 800f724:	2101      	movs	r1, #1
 800f726:	6239      	str	r1, [r7, #32]
 800f728:	e7c6      	b.n	800f6b8 <__ssvfscanf_r+0x10ec>
 800f72a:	6a39      	ldr	r1, [r7, #32]
 800f72c:	2902      	cmp	r1, #2
 800f72e:	d100      	bne.n	800f732 <__ssvfscanf_r+0x1166>
 800f730:	e089      	b.n	800f846 <__ssvfscanf_r+0x127a>
 800f732:	2c01      	cmp	r4, #1
 800f734:	d001      	beq.n	800f73a <__ssvfscanf_r+0x116e>
 800f736:	2c04      	cmp	r4, #4
 800f738:	d110      	bne.n	800f75c <__ssvfscanf_r+0x1190>
 800f73a:	3401      	adds	r4, #1
 800f73c:	b2e4      	uxtb	r4, r4
 800f73e:	e7bb      	b.n	800f6b8 <__ssvfscanf_r+0x10ec>
 800f740:	0531      	lsls	r1, r6, #20
 800f742:	d508      	bpl.n	800f756 <__ssvfscanf_r+0x118a>
 800f744:	6a39      	ldr	r1, [r7, #32]
 800f746:	1909      	adds	r1, r1, r4
 800f748:	2900      	cmp	r1, #0
 800f74a:	d104      	bne.n	800f756 <__ssvfscanf_r+0x118a>
 800f74c:	4824      	ldr	r0, [pc, #144]	; (800f7e0 <__ssvfscanf_r+0x1214>)
 800f74e:	000c      	movs	r4, r1
 800f750:	4006      	ands	r6, r0
 800f752:	6239      	str	r1, [r7, #32]
 800f754:	e7b0      	b.n	800f6b8 <__ssvfscanf_r+0x10ec>
 800f756:	6a39      	ldr	r1, [r7, #32]
 800f758:	2901      	cmp	r1, #1
 800f75a:	d076      	beq.n	800f84a <__ssvfscanf_r+0x127e>
 800f75c:	69fb      	ldr	r3, [r7, #28]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d001      	beq.n	800f766 <__ssvfscanf_r+0x119a>
 800f762:	4b20      	ldr	r3, [pc, #128]	; (800f7e4 <__ssvfscanf_r+0x1218>)
 800f764:	401e      	ands	r6, r3
 800f766:	6a3b      	ldr	r3, [r7, #32]
 800f768:	3b01      	subs	r3, #1
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d877      	bhi.n	800f85e <__ssvfscanf_r+0x1292>
 800f76e:	238c      	movs	r3, #140	; 0x8c
 800f770:	2248      	movs	r2, #72	; 0x48
 800f772:	005b      	lsls	r3, r3, #1
 800f774:	189b      	adds	r3, r3, r2
 800f776:	19db      	adds	r3, r3, r7
 800f778:	429d      	cmp	r5, r3
 800f77a:	d801      	bhi.n	800f780 <__ssvfscanf_r+0x11b4>
 800f77c:	f7ff f823 	bl	800e7c6 <__ssvfscanf_r+0x1fa>
 800f780:	3d01      	subs	r5, #1
 800f782:	7829      	ldrb	r1, [r5, #0]
 800f784:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f786:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f788:	f001 fe78 	bl	801147c <_sungetc_r>
 800f78c:	e7ef      	b.n	800f76e <__ssvfscanf_r+0x11a2>
 800f78e:	2c00      	cmp	r4, #0
 800f790:	d10c      	bne.n	800f7ac <__ssvfscanf_r+0x11e0>
 800f792:	69f9      	ldr	r1, [r7, #28]
 800f794:	2900      	cmp	r1, #0
 800f796:	d1e4      	bne.n	800f762 <__ssvfscanf_r+0x1196>
 800f798:	21e0      	movs	r1, #224	; 0xe0
 800f79a:	0030      	movs	r0, r6
 800f79c:	00c9      	lsls	r1, r1, #3
 800f79e:	4008      	ands	r0, r1
 800f7a0:	4288      	cmp	r0, r1
 800f7a2:	d1e0      	bne.n	800f766 <__ssvfscanf_r+0x119a>
 800f7a4:	4910      	ldr	r1, [pc, #64]	; (800f7e8 <__ssvfscanf_r+0x121c>)
 800f7a6:	3401      	adds	r4, #1
 800f7a8:	400e      	ands	r6, r1
 800f7aa:	e785      	b.n	800f6b8 <__ssvfscanf_r+0x10ec>
 800f7ac:	20fd      	movs	r0, #253	; 0xfd
 800f7ae:	1ee1      	subs	r1, r4, #3
 800f7b0:	4201      	tst	r1, r0
 800f7b2:	d1d3      	bne.n	800f75c <__ssvfscanf_r+0x1190>
 800f7b4:	e7c1      	b.n	800f73a <__ssvfscanf_r+0x116e>
 800f7b6:	0531      	lsls	r1, r6, #20
 800f7b8:	d503      	bpl.n	800f7c2 <__ssvfscanf_r+0x11f6>
 800f7ba:	6a39      	ldr	r1, [r7, #32]
 800f7bc:	1909      	adds	r1, r1, r4
 800f7be:	2900      	cmp	r1, #0
 800f7c0:	d0c4      	beq.n	800f74c <__ssvfscanf_r+0x1180>
 800f7c2:	2c02      	cmp	r4, #2
 800f7c4:	d1ca      	bne.n	800f75c <__ssvfscanf_r+0x1190>
 800f7c6:	2403      	movs	r4, #3
 800f7c8:	e776      	b.n	800f6b8 <__ssvfscanf_r+0x10ec>
 800f7ca:	2c06      	cmp	r4, #6
 800f7cc:	d1c6      	bne.n	800f75c <__ssvfscanf_r+0x1190>
 800f7ce:	2407      	movs	r4, #7
 800f7d0:	e772      	b.n	800f6b8 <__ssvfscanf_r+0x10ec>
 800f7d2:	2c07      	cmp	r4, #7
 800f7d4:	d1c2      	bne.n	800f75c <__ssvfscanf_r+0x1190>
 800f7d6:	2408      	movs	r4, #8
 800f7d8:	e76e      	b.n	800f6b8 <__ssvfscanf_r+0x10ec>
 800f7da:	46c0      	nop			; (mov r8, r8)
 800f7dc:	08011025 	.word	0x08011025
 800f7e0:	fffffe7f 	.word	0xfffffe7f
 800f7e4:	fffffeff 	.word	0xfffffeff
 800f7e8:	fffff87f 	.word	0xfffff87f
 800f7ec:	0531      	lsls	r1, r6, #20
 800f7ee:	d5b5      	bpl.n	800f75c <__ssvfscanf_r+0x1190>
 800f7f0:	21a0      	movs	r1, #160	; 0xa0
 800f7f2:	2080      	movs	r0, #128	; 0x80
 800f7f4:	00c9      	lsls	r1, r1, #3
 800f7f6:	00c0      	lsls	r0, r0, #3
 800f7f8:	4031      	ands	r1, r6
 800f7fa:	4281      	cmp	r1, r0
 800f7fc:	d004      	beq.n	800f808 <__ssvfscanf_r+0x123c>
 800f7fe:	4206      	tst	r6, r0
 800f800:	d0ac      	beq.n	800f75c <__ssvfscanf_r+0x1190>
 800f802:	69f9      	ldr	r1, [r7, #28]
 800f804:	2900      	cmp	r1, #0
 800f806:	d0ae      	beq.n	800f766 <__ssvfscanf_r+0x119a>
 800f808:	2180      	movs	r1, #128	; 0x80
 800f80a:	0089      	lsls	r1, r1, #2
 800f80c:	420e      	tst	r6, r1
 800f80e:	d104      	bne.n	800f81a <__ssvfscanf_r+0x124e>
 800f810:	69f9      	ldr	r1, [r7, #28]
 800f812:	6938      	ldr	r0, [r7, #16]
 800f814:	607d      	str	r5, [r7, #4]
 800f816:	1a09      	subs	r1, r1, r0
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	20c0      	movs	r0, #192	; 0xc0
 800f81c:	4973      	ldr	r1, [pc, #460]	; (800f9ec <__ssvfscanf_r+0x1420>)
 800f81e:	0040      	lsls	r0, r0, #1
 800f820:	400e      	ands	r6, r1
 800f822:	4306      	orrs	r6, r0
 800f824:	e768      	b.n	800f6f8 <__ssvfscanf_r+0x112c>
 800f826:	0531      	lsls	r1, r6, #20
 800f828:	d5e2      	bpl.n	800f7f0 <__ssvfscanf_r+0x1224>
 800f82a:	e74a      	b.n	800f6c2 <__ssvfscanf_r+0x10f6>
 800f82c:	6839      	ldr	r1, [r7, #0]
 800f82e:	7809      	ldrb	r1, [r1, #0]
 800f830:	4291      	cmp	r1, r2
 800f832:	d193      	bne.n	800f75c <__ssvfscanf_r+0x1190>
 800f834:	2180      	movs	r1, #128	; 0x80
 800f836:	0089      	lsls	r1, r1, #2
 800f838:	420e      	tst	r6, r1
 800f83a:	d08f      	beq.n	800f75c <__ssvfscanf_r+0x1190>
 800f83c:	496c      	ldr	r1, [pc, #432]	; (800f9f0 <__ssvfscanf_r+0x1424>)
 800f83e:	400e      	ands	r6, r1
 800f840:	69f9      	ldr	r1, [r7, #28]
 800f842:	6139      	str	r1, [r7, #16]
 800f844:	e738      	b.n	800f6b8 <__ssvfscanf_r+0x10ec>
 800f846:	2103      	movs	r1, #3
 800f848:	e76d      	b.n	800f726 <__ssvfscanf_r+0x115a>
 800f84a:	2102      	movs	r1, #2
 800f84c:	e76b      	b.n	800f726 <__ssvfscanf_r+0x115a>
 800f84e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f850:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f852:	f001 fe4f 	bl	80114f4 <__ssrefill_r>
 800f856:	2800      	cmp	r0, #0
 800f858:	d100      	bne.n	800f85c <__ssvfscanf_r+0x1290>
 800f85a:	e723      	b.n	800f6a4 <__ssvfscanf_r+0x10d8>
 800f85c:	e77e      	b.n	800f75c <__ssvfscanf_r+0x1190>
 800f85e:	1e63      	subs	r3, r4, #1
 800f860:	2b06      	cmp	r3, #6
 800f862:	d825      	bhi.n	800f8b0 <__ssvfscanf_r+0x12e4>
 800f864:	2c02      	cmp	r4, #2
 800f866:	d837      	bhi.n	800f8d8 <__ssvfscanf_r+0x130c>
 800f868:	238c      	movs	r3, #140	; 0x8c
 800f86a:	2248      	movs	r2, #72	; 0x48
 800f86c:	005b      	lsls	r3, r3, #1
 800f86e:	189b      	adds	r3, r3, r2
 800f870:	19db      	adds	r3, r3, r7
 800f872:	429d      	cmp	r5, r3
 800f874:	d801      	bhi.n	800f87a <__ssvfscanf_r+0x12ae>
 800f876:	f7fe ffa6 	bl	800e7c6 <__ssvfscanf_r+0x1fa>
 800f87a:	3d01      	subs	r5, #1
 800f87c:	7829      	ldrb	r1, [r5, #0]
 800f87e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f880:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f882:	f001 fdfb 	bl	801147c <_sungetc_r>
 800f886:	e7ef      	b.n	800f868 <__ssvfscanf_r+0x129c>
 800f888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f88a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f88c:	3b01      	subs	r3, #1
 800f88e:	7819      	ldrb	r1, [r3, #0]
 800f890:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f892:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f894:	f001 fdf2 	bl	801147c <_sungetc_r>
 800f898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f89a:	6a3a      	ldr	r2, [r7, #32]
 800f89c:	189b      	adds	r3, r3, r2
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	2b03      	cmp	r3, #3
 800f8a2:	d8f1      	bhi.n	800f888 <__ssvfscanf_r+0x12bc>
 800f8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a6:	3c03      	subs	r4, #3
 800f8a8:	b2e4      	uxtb	r4, r4
 800f8aa:	1b1b      	subs	r3, r3, r4
 800f8ac:	1b2d      	subs	r5, r5, r4
 800f8ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800f8b0:	05f3      	lsls	r3, r6, #23
 800f8b2:	d52f      	bpl.n	800f914 <__ssvfscanf_r+0x1348>
 800f8b4:	0573      	lsls	r3, r6, #21
 800f8b6:	d514      	bpl.n	800f8e2 <__ssvfscanf_r+0x1316>
 800f8b8:	238c      	movs	r3, #140	; 0x8c
 800f8ba:	2248      	movs	r2, #72	; 0x48
 800f8bc:	005b      	lsls	r3, r3, #1
 800f8be:	189b      	adds	r3, r3, r2
 800f8c0:	19db      	adds	r3, r3, r7
 800f8c2:	429d      	cmp	r5, r3
 800f8c4:	d801      	bhi.n	800f8ca <__ssvfscanf_r+0x12fe>
 800f8c6:	f7fe ff7e 	bl	800e7c6 <__ssvfscanf_r+0x1fa>
 800f8ca:	3d01      	subs	r5, #1
 800f8cc:	7829      	ldrb	r1, [r5, #0]
 800f8ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f8d2:	f001 fdd3 	bl	801147c <_sungetc_r>
 800f8d6:	e7ef      	b.n	800f8b8 <__ssvfscanf_r+0x12ec>
 800f8d8:	1b63      	subs	r3, r4, r5
 800f8da:	b2db      	uxtb	r3, r3
 800f8dc:	63fd      	str	r5, [r7, #60]	; 0x3c
 800f8de:	623b      	str	r3, [r7, #32]
 800f8e0:	e7da      	b.n	800f898 <__ssvfscanf_r+0x12cc>
 800f8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e4:	1e6c      	subs	r4, r5, #1
 800f8e6:	7821      	ldrb	r1, [r4, #0]
 800f8e8:	3b01      	subs	r3, #1
 800f8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f8ec:	2965      	cmp	r1, #101	; 0x65
 800f8ee:	d00a      	beq.n	800f906 <__ssvfscanf_r+0x133a>
 800f8f0:	2945      	cmp	r1, #69	; 0x45
 800f8f2:	d008      	beq.n	800f906 <__ssvfscanf_r+0x133a>
 800f8f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f8f8:	f001 fdc0 	bl	801147c <_sungetc_r>
 800f8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fe:	1eac      	subs	r4, r5, #2
 800f900:	3b02      	subs	r3, #2
 800f902:	7821      	ldrb	r1, [r4, #0]
 800f904:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f906:	0025      	movs	r5, r4
 800f908:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f90a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f90c:	f001 fdb6 	bl	801147c <_sungetc_r>
 800f910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f912:	63bb      	str	r3, [r7, #56]	; 0x38
 800f914:	2310      	movs	r3, #16
 800f916:	0032      	movs	r2, r6
 800f918:	401a      	ands	r2, r3
 800f91a:	421e      	tst	r6, r3
 800f91c:	d001      	beq.n	800f922 <__ssvfscanf_r+0x1356>
 800f91e:	f7fe fe71 	bl	800e604 <__ssvfscanf_r+0x38>
 800f922:	23c0      	movs	r3, #192	; 0xc0
 800f924:	2180      	movs	r1, #128	; 0x80
 800f926:	00db      	lsls	r3, r3, #3
 800f928:	702a      	strb	r2, [r5, #0]
 800f92a:	4033      	ands	r3, r6
 800f92c:	00c9      	lsls	r1, r1, #3
 800f92e:	428b      	cmp	r3, r1
 800f930:	d11f      	bne.n	800f972 <__ssvfscanf_r+0x13a6>
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	69fa      	ldr	r2, [r7, #28]
 800f936:	69f9      	ldr	r1, [r7, #28]
 800f938:	1a9a      	subs	r2, r3, r2
 800f93a:	428b      	cmp	r3, r1
 800f93c:	d125      	bne.n	800f98a <__ssvfscanf_r+0x13be>
 800f93e:	238c      	movs	r3, #140	; 0x8c
 800f940:	2148      	movs	r1, #72	; 0x48
 800f942:	005b      	lsls	r3, r3, #1
 800f944:	185b      	adds	r3, r3, r1
 800f946:	19d9      	adds	r1, r3, r7
 800f948:	2200      	movs	r2, #0
 800f94a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f94c:	f7fb ff96 	bl	800b87c <_strtod_r>
 800f950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f952:	0004      	movs	r4, r0
 800f954:	3304      	adds	r3, #4
 800f956:	000d      	movs	r5, r1
 800f958:	623b      	str	r3, [r7, #32]
 800f95a:	07f3      	lsls	r3, r6, #31
 800f95c:	d523      	bpl.n	800f9a6 <__ssvfscanf_r+0x13da>
 800f95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	601c      	str	r4, [r3, #0]
 800f964:	605d      	str	r5, [r3, #4]
 800f966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f968:	3301      	adds	r3, #1
 800f96a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f96c:	6a3b      	ldr	r3, [r7, #32]
 800f96e:	f7fe ffa5 	bl	800e8bc <__ssvfscanf_r+0x2f0>
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d0e2      	beq.n	800f93e <__ssvfscanf_r+0x1372>
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f97c:	1c59      	adds	r1, r3, #1
 800f97e:	230a      	movs	r3, #10
 800f980:	f7fc f818 	bl	800b9b4 <_strtol_r>
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	687d      	ldr	r5, [r7, #4]
 800f988:	1ac2      	subs	r2, r0, r3
 800f98a:	2148      	movs	r1, #72	; 0x48
 800f98c:	4b19      	ldr	r3, [pc, #100]	; (800f9f4 <__ssvfscanf_r+0x1428>)
 800f98e:	185b      	adds	r3, r3, r1
 800f990:	19db      	adds	r3, r3, r7
 800f992:	429d      	cmp	r5, r3
 800f994:	d302      	bcc.n	800f99c <__ssvfscanf_r+0x13d0>
 800f996:	4b18      	ldr	r3, [pc, #96]	; (800f9f8 <__ssvfscanf_r+0x142c>)
 800f998:	185b      	adds	r3, r3, r1
 800f99a:	19dd      	adds	r5, r3, r7
 800f99c:	0028      	movs	r0, r5
 800f99e:	4917      	ldr	r1, [pc, #92]	; (800f9fc <__ssvfscanf_r+0x1430>)
 800f9a0:	f7fc f910 	bl	800bbc4 <sprintf>
 800f9a4:	e7cb      	b.n	800f93e <__ssvfscanf_r+0x1372>
 800f9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9ac:	07b6      	lsls	r6, r6, #30
 800f9ae:	d4d8      	bmi.n	800f962 <__ssvfscanf_r+0x1396>
 800f9b0:	0002      	movs	r2, r0
 800f9b2:	000b      	movs	r3, r1
 800f9b4:	f7f2 fc9e 	bl	80022f4 <__aeabi_dcmpun>
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	d005      	beq.n	800f9c8 <__ssvfscanf_r+0x13fc>
 800f9bc:	4810      	ldr	r0, [pc, #64]	; (800fa00 <__ssvfscanf_r+0x1434>)
 800f9be:	f7fc fabf 	bl	800bf40 <nanf>
 800f9c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9c4:	6018      	str	r0, [r3, #0]
 800f9c6:	e7ce      	b.n	800f966 <__ssvfscanf_r+0x139a>
 800f9c8:	0020      	movs	r0, r4
 800f9ca:	0029      	movs	r1, r5
 800f9cc:	f7f2 fd3c 	bl	8002448 <__aeabi_d2f>
 800f9d0:	e7f7      	b.n	800f9c2 <__ssvfscanf_r+0x13f6>
 800f9d2:	00a3      	lsls	r3, r4, #2
 800f9d4:	18ed      	adds	r5, r5, r3
 800f9d6:	682b      	ldr	r3, [r5, #0]
 800f9d8:	3401      	adds	r4, #1
 800f9da:	6818      	ldr	r0, [r3, #0]
 800f9dc:	f7fa fefe 	bl	800a7dc <free>
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	682b      	ldr	r3, [r5, #0]
 800f9e4:	601a      	str	r2, [r3, #0]
 800f9e6:	f7fe ffc3 	bl	800e970 <__ssvfscanf_r+0x3a4>
 800f9ea:	46c0      	nop			; (mov r8, r8)
 800f9ec:	fffff07f 	.word	0xfffff07f
 800f9f0:	fffffd7f 	.word	0xfffffd7f
 800f9f4:	0000026b 	.word	0x0000026b
 800f9f8:	0000026a 	.word	0x0000026a
 800f9fc:	08014850 	.word	0x08014850
 800fa00:	080148b3 	.word	0x080148b3

0800fa04 <_fclose_r>:
 800fa04:	b570      	push	{r4, r5, r6, lr}
 800fa06:	0005      	movs	r5, r0
 800fa08:	1e0c      	subs	r4, r1, #0
 800fa0a:	d102      	bne.n	800fa12 <_fclose_r+0xe>
 800fa0c:	2600      	movs	r6, #0
 800fa0e:	0030      	movs	r0, r6
 800fa10:	bd70      	pop	{r4, r5, r6, pc}
 800fa12:	2800      	cmp	r0, #0
 800fa14:	d004      	beq.n	800fa20 <_fclose_r+0x1c>
 800fa16:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d101      	bne.n	800fa20 <_fclose_r+0x1c>
 800fa1c:	f7fc f86a 	bl	800baf4 <__sinit>
 800fa20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa22:	07db      	lsls	r3, r3, #31
 800fa24:	d405      	bmi.n	800fa32 <_fclose_r+0x2e>
 800fa26:	89a3      	ldrh	r3, [r4, #12]
 800fa28:	059b      	lsls	r3, r3, #22
 800fa2a:	d402      	bmi.n	800fa32 <_fclose_r+0x2e>
 800fa2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa2e:	f7fc fa6b 	bl	800bf08 <__retarget_lock_acquire_recursive>
 800fa32:	220c      	movs	r2, #12
 800fa34:	5ea3      	ldrsh	r3, [r4, r2]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d109      	bne.n	800fa4e <_fclose_r+0x4a>
 800fa3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	0016      	movs	r6, r2
 800fa40:	401e      	ands	r6, r3
 800fa42:	421a      	tst	r2, r3
 800fa44:	d1e2      	bne.n	800fa0c <_fclose_r+0x8>
 800fa46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa48:	f7fc fa5f 	bl	800bf0a <__retarget_lock_release_recursive>
 800fa4c:	e7df      	b.n	800fa0e <_fclose_r+0xa>
 800fa4e:	0021      	movs	r1, r4
 800fa50:	0028      	movs	r0, r5
 800fa52:	f000 f837 	bl	800fac4 <__sflush_r>
 800fa56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fa58:	0006      	movs	r6, r0
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d006      	beq.n	800fa6c <_fclose_r+0x68>
 800fa5e:	0028      	movs	r0, r5
 800fa60:	69e1      	ldr	r1, [r4, #28]
 800fa62:	4798      	blx	r3
 800fa64:	2800      	cmp	r0, #0
 800fa66:	da01      	bge.n	800fa6c <_fclose_r+0x68>
 800fa68:	2601      	movs	r6, #1
 800fa6a:	4276      	negs	r6, r6
 800fa6c:	89a3      	ldrh	r3, [r4, #12]
 800fa6e:	061b      	lsls	r3, r3, #24
 800fa70:	d503      	bpl.n	800fa7a <_fclose_r+0x76>
 800fa72:	0028      	movs	r0, r5
 800fa74:	6921      	ldr	r1, [r4, #16]
 800fa76:	f7fc facf 	bl	800c018 <_free_r>
 800fa7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fa7c:	2900      	cmp	r1, #0
 800fa7e:	d008      	beq.n	800fa92 <_fclose_r+0x8e>
 800fa80:	0023      	movs	r3, r4
 800fa82:	3340      	adds	r3, #64	; 0x40
 800fa84:	4299      	cmp	r1, r3
 800fa86:	d002      	beq.n	800fa8e <_fclose_r+0x8a>
 800fa88:	0028      	movs	r0, r5
 800fa8a:	f7fc fac5 	bl	800c018 <_free_r>
 800fa8e:	2300      	movs	r3, #0
 800fa90:	6323      	str	r3, [r4, #48]	; 0x30
 800fa92:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800fa94:	2900      	cmp	r1, #0
 800fa96:	d004      	beq.n	800faa2 <_fclose_r+0x9e>
 800fa98:	0028      	movs	r0, r5
 800fa9a:	f7fc fabd 	bl	800c018 <_free_r>
 800fa9e:	2300      	movs	r3, #0
 800faa0:	6463      	str	r3, [r4, #68]	; 0x44
 800faa2:	f7fc f817 	bl	800bad4 <__sfp_lock_acquire>
 800faa6:	2300      	movs	r3, #0
 800faa8:	81a3      	strh	r3, [r4, #12]
 800faaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800faac:	07db      	lsls	r3, r3, #31
 800faae:	d402      	bmi.n	800fab6 <_fclose_r+0xb2>
 800fab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fab2:	f7fc fa2a 	bl	800bf0a <__retarget_lock_release_recursive>
 800fab6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fab8:	f7fc fa25 	bl	800bf06 <__retarget_lock_close_recursive>
 800fabc:	f7fc f812 	bl	800bae4 <__sfp_lock_release>
 800fac0:	e7a5      	b.n	800fa0e <_fclose_r+0xa>
	...

0800fac4 <__sflush_r>:
 800fac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fac6:	230c      	movs	r3, #12
 800fac8:	5eca      	ldrsh	r2, [r1, r3]
 800faca:	000c      	movs	r4, r1
 800facc:	0005      	movs	r5, r0
 800face:	b291      	uxth	r1, r2
 800fad0:	0713      	lsls	r3, r2, #28
 800fad2:	d464      	bmi.n	800fb9e <__sflush_r+0xda>
 800fad4:	2380      	movs	r3, #128	; 0x80
 800fad6:	011b      	lsls	r3, r3, #4
 800fad8:	4313      	orrs	r3, r2
 800fada:	6862      	ldr	r2, [r4, #4]
 800fadc:	81a3      	strh	r3, [r4, #12]
 800fade:	2a00      	cmp	r2, #0
 800fae0:	dc04      	bgt.n	800faec <__sflush_r+0x28>
 800fae2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800fae4:	2a00      	cmp	r2, #0
 800fae6:	dc01      	bgt.n	800faec <__sflush_r+0x28>
 800fae8:	2000      	movs	r0, #0
 800faea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800faec:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800faee:	2f00      	cmp	r7, #0
 800faf0:	d0fa      	beq.n	800fae8 <__sflush_r+0x24>
 800faf2:	2200      	movs	r2, #0
 800faf4:	2080      	movs	r0, #128	; 0x80
 800faf6:	682e      	ldr	r6, [r5, #0]
 800faf8:	602a      	str	r2, [r5, #0]
 800fafa:	001a      	movs	r2, r3
 800fafc:	0140      	lsls	r0, r0, #5
 800fafe:	69e1      	ldr	r1, [r4, #28]
 800fb00:	4002      	ands	r2, r0
 800fb02:	4203      	tst	r3, r0
 800fb04:	d038      	beq.n	800fb78 <__sflush_r+0xb4>
 800fb06:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800fb08:	89a3      	ldrh	r3, [r4, #12]
 800fb0a:	075b      	lsls	r3, r3, #29
 800fb0c:	d506      	bpl.n	800fb1c <__sflush_r+0x58>
 800fb0e:	6863      	ldr	r3, [r4, #4]
 800fb10:	1ac0      	subs	r0, r0, r3
 800fb12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d001      	beq.n	800fb1c <__sflush_r+0x58>
 800fb18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fb1a:	1ac0      	subs	r0, r0, r3
 800fb1c:	0002      	movs	r2, r0
 800fb1e:	2300      	movs	r3, #0
 800fb20:	0028      	movs	r0, r5
 800fb22:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800fb24:	69e1      	ldr	r1, [r4, #28]
 800fb26:	47b8      	blx	r7
 800fb28:	89a2      	ldrh	r2, [r4, #12]
 800fb2a:	1c43      	adds	r3, r0, #1
 800fb2c:	d106      	bne.n	800fb3c <__sflush_r+0x78>
 800fb2e:	6829      	ldr	r1, [r5, #0]
 800fb30:	291d      	cmp	r1, #29
 800fb32:	d830      	bhi.n	800fb96 <__sflush_r+0xd2>
 800fb34:	4b2c      	ldr	r3, [pc, #176]	; (800fbe8 <__sflush_r+0x124>)
 800fb36:	410b      	asrs	r3, r1
 800fb38:	07db      	lsls	r3, r3, #31
 800fb3a:	d42c      	bmi.n	800fb96 <__sflush_r+0xd2>
 800fb3c:	4b2b      	ldr	r3, [pc, #172]	; (800fbec <__sflush_r+0x128>)
 800fb3e:	4013      	ands	r3, r2
 800fb40:	2200      	movs	r2, #0
 800fb42:	6062      	str	r2, [r4, #4]
 800fb44:	6922      	ldr	r2, [r4, #16]
 800fb46:	b21b      	sxth	r3, r3
 800fb48:	81a3      	strh	r3, [r4, #12]
 800fb4a:	6022      	str	r2, [r4, #0]
 800fb4c:	04db      	lsls	r3, r3, #19
 800fb4e:	d505      	bpl.n	800fb5c <__sflush_r+0x98>
 800fb50:	1c43      	adds	r3, r0, #1
 800fb52:	d102      	bne.n	800fb5a <__sflush_r+0x96>
 800fb54:	682b      	ldr	r3, [r5, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d100      	bne.n	800fb5c <__sflush_r+0x98>
 800fb5a:	6520      	str	r0, [r4, #80]	; 0x50
 800fb5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fb5e:	602e      	str	r6, [r5, #0]
 800fb60:	2900      	cmp	r1, #0
 800fb62:	d0c1      	beq.n	800fae8 <__sflush_r+0x24>
 800fb64:	0023      	movs	r3, r4
 800fb66:	3340      	adds	r3, #64	; 0x40
 800fb68:	4299      	cmp	r1, r3
 800fb6a:	d002      	beq.n	800fb72 <__sflush_r+0xae>
 800fb6c:	0028      	movs	r0, r5
 800fb6e:	f7fc fa53 	bl	800c018 <_free_r>
 800fb72:	2000      	movs	r0, #0
 800fb74:	6320      	str	r0, [r4, #48]	; 0x30
 800fb76:	e7b8      	b.n	800faea <__sflush_r+0x26>
 800fb78:	2301      	movs	r3, #1
 800fb7a:	0028      	movs	r0, r5
 800fb7c:	47b8      	blx	r7
 800fb7e:	1c43      	adds	r3, r0, #1
 800fb80:	d1c2      	bne.n	800fb08 <__sflush_r+0x44>
 800fb82:	682b      	ldr	r3, [r5, #0]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d0bf      	beq.n	800fb08 <__sflush_r+0x44>
 800fb88:	2b1d      	cmp	r3, #29
 800fb8a:	d001      	beq.n	800fb90 <__sflush_r+0xcc>
 800fb8c:	2b16      	cmp	r3, #22
 800fb8e:	d101      	bne.n	800fb94 <__sflush_r+0xd0>
 800fb90:	602e      	str	r6, [r5, #0]
 800fb92:	e7a9      	b.n	800fae8 <__sflush_r+0x24>
 800fb94:	89a2      	ldrh	r2, [r4, #12]
 800fb96:	2340      	movs	r3, #64	; 0x40
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	81a3      	strh	r3, [r4, #12]
 800fb9c:	e7a5      	b.n	800faea <__sflush_r+0x26>
 800fb9e:	6926      	ldr	r6, [r4, #16]
 800fba0:	2e00      	cmp	r6, #0
 800fba2:	d0a1      	beq.n	800fae8 <__sflush_r+0x24>
 800fba4:	6827      	ldr	r7, [r4, #0]
 800fba6:	6026      	str	r6, [r4, #0]
 800fba8:	1bbb      	subs	r3, r7, r6
 800fbaa:	9301      	str	r3, [sp, #4]
 800fbac:	2300      	movs	r3, #0
 800fbae:	0789      	lsls	r1, r1, #30
 800fbb0:	d100      	bne.n	800fbb4 <__sflush_r+0xf0>
 800fbb2:	6963      	ldr	r3, [r4, #20]
 800fbb4:	60a3      	str	r3, [r4, #8]
 800fbb6:	9b01      	ldr	r3, [sp, #4]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	dc00      	bgt.n	800fbbe <__sflush_r+0xfa>
 800fbbc:	e794      	b.n	800fae8 <__sflush_r+0x24>
 800fbbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbc0:	0032      	movs	r2, r6
 800fbc2:	001f      	movs	r7, r3
 800fbc4:	0028      	movs	r0, r5
 800fbc6:	9b01      	ldr	r3, [sp, #4]
 800fbc8:	69e1      	ldr	r1, [r4, #28]
 800fbca:	47b8      	blx	r7
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	dc06      	bgt.n	800fbde <__sflush_r+0x11a>
 800fbd0:	2340      	movs	r3, #64	; 0x40
 800fbd2:	2001      	movs	r0, #1
 800fbd4:	89a2      	ldrh	r2, [r4, #12]
 800fbd6:	4240      	negs	r0, r0
 800fbd8:	4313      	orrs	r3, r2
 800fbda:	81a3      	strh	r3, [r4, #12]
 800fbdc:	e785      	b.n	800faea <__sflush_r+0x26>
 800fbde:	9b01      	ldr	r3, [sp, #4]
 800fbe0:	1836      	adds	r6, r6, r0
 800fbe2:	1a1b      	subs	r3, r3, r0
 800fbe4:	9301      	str	r3, [sp, #4]
 800fbe6:	e7e6      	b.n	800fbb6 <__sflush_r+0xf2>
 800fbe8:	dfbffffe 	.word	0xdfbffffe
 800fbec:	fffff7ff 	.word	0xfffff7ff

0800fbf0 <_fflush_r>:
 800fbf0:	b570      	push	{r4, r5, r6, lr}
 800fbf2:	0005      	movs	r5, r0
 800fbf4:	000c      	movs	r4, r1
 800fbf6:	2800      	cmp	r0, #0
 800fbf8:	d004      	beq.n	800fc04 <_fflush_r+0x14>
 800fbfa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d101      	bne.n	800fc04 <_fflush_r+0x14>
 800fc00:	f7fb ff78 	bl	800baf4 <__sinit>
 800fc04:	220c      	movs	r2, #12
 800fc06:	5ea3      	ldrsh	r3, [r4, r2]
 800fc08:	1e1e      	subs	r6, r3, #0
 800fc0a:	d015      	beq.n	800fc38 <_fflush_r+0x48>
 800fc0c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fc0e:	07d2      	lsls	r2, r2, #31
 800fc10:	d404      	bmi.n	800fc1c <_fflush_r+0x2c>
 800fc12:	059b      	lsls	r3, r3, #22
 800fc14:	d402      	bmi.n	800fc1c <_fflush_r+0x2c>
 800fc16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc18:	f7fc f976 	bl	800bf08 <__retarget_lock_acquire_recursive>
 800fc1c:	0021      	movs	r1, r4
 800fc1e:	0028      	movs	r0, r5
 800fc20:	f7ff ff50 	bl	800fac4 <__sflush_r>
 800fc24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc26:	0006      	movs	r6, r0
 800fc28:	07db      	lsls	r3, r3, #31
 800fc2a:	d405      	bmi.n	800fc38 <_fflush_r+0x48>
 800fc2c:	89a3      	ldrh	r3, [r4, #12]
 800fc2e:	059b      	lsls	r3, r3, #22
 800fc30:	d402      	bmi.n	800fc38 <_fflush_r+0x48>
 800fc32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc34:	f7fc f969 	bl	800bf0a <__retarget_lock_release_recursive>
 800fc38:	0030      	movs	r0, r6
 800fc3a:	bd70      	pop	{r4, r5, r6, pc}

0800fc3c <__sccl>:
 800fc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc3e:	780b      	ldrb	r3, [r1, #0]
 800fc40:	0004      	movs	r4, r0
 800fc42:	2b5e      	cmp	r3, #94	; 0x5e
 800fc44:	d019      	beq.n	800fc7a <__sccl+0x3e>
 800fc46:	2200      	movs	r2, #0
 800fc48:	1c4d      	adds	r5, r1, #1
 800fc4a:	0021      	movs	r1, r4
 800fc4c:	1c60      	adds	r0, r4, #1
 800fc4e:	30ff      	adds	r0, #255	; 0xff
 800fc50:	700a      	strb	r2, [r1, #0]
 800fc52:	3101      	adds	r1, #1
 800fc54:	4281      	cmp	r1, r0
 800fc56:	d1fb      	bne.n	800fc50 <__sccl+0x14>
 800fc58:	1e68      	subs	r0, r5, #1
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d00c      	beq.n	800fc78 <__sccl+0x3c>
 800fc5e:	2101      	movs	r1, #1
 800fc60:	262d      	movs	r6, #45	; 0x2d
 800fc62:	404a      	eors	r2, r1
 800fc64:	0028      	movs	r0, r5
 800fc66:	54e2      	strb	r2, [r4, r3]
 800fc68:	7801      	ldrb	r1, [r0, #0]
 800fc6a:	1c45      	adds	r5, r0, #1
 800fc6c:	292d      	cmp	r1, #45	; 0x2d
 800fc6e:	d00c      	beq.n	800fc8a <__sccl+0x4e>
 800fc70:	295d      	cmp	r1, #93	; 0x5d
 800fc72:	d01d      	beq.n	800fcb0 <__sccl+0x74>
 800fc74:	2900      	cmp	r1, #0
 800fc76:	d104      	bne.n	800fc82 <__sccl+0x46>
 800fc78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	784b      	ldrb	r3, [r1, #1]
 800fc7e:	1c8d      	adds	r5, r1, #2
 800fc80:	e7e3      	b.n	800fc4a <__sccl+0xe>
 800fc82:	000b      	movs	r3, r1
 800fc84:	e7ee      	b.n	800fc64 <__sccl+0x28>
 800fc86:	0033      	movs	r3, r6
 800fc88:	e7ec      	b.n	800fc64 <__sccl+0x28>
 800fc8a:	7841      	ldrb	r1, [r0, #1]
 800fc8c:	295d      	cmp	r1, #93	; 0x5d
 800fc8e:	d0fa      	beq.n	800fc86 <__sccl+0x4a>
 800fc90:	428b      	cmp	r3, r1
 800fc92:	dcf8      	bgt.n	800fc86 <__sccl+0x4a>
 800fc94:	001d      	movs	r5, r3
 800fc96:	3002      	adds	r0, #2
 800fc98:	3501      	adds	r5, #1
 800fc9a:	5562      	strb	r2, [r4, r5]
 800fc9c:	42a9      	cmp	r1, r5
 800fc9e:	dcfb      	bgt.n	800fc98 <__sccl+0x5c>
 800fca0:	2500      	movs	r5, #0
 800fca2:	1c5f      	adds	r7, r3, #1
 800fca4:	428b      	cmp	r3, r1
 800fca6:	da01      	bge.n	800fcac <__sccl+0x70>
 800fca8:	1acd      	subs	r5, r1, r3
 800fcaa:	3d01      	subs	r5, #1
 800fcac:	197b      	adds	r3, r7, r5
 800fcae:	e7db      	b.n	800fc68 <__sccl+0x2c>
 800fcb0:	0028      	movs	r0, r5
 800fcb2:	e7e1      	b.n	800fc78 <__sccl+0x3c>

0800fcb4 <_localeconv_r>:
 800fcb4:	4800      	ldr	r0, [pc, #0]	; (800fcb8 <_localeconv_r+0x4>)
 800fcb6:	4770      	bx	lr
 800fcb8:	20000534 	.word	0x20000534

0800fcbc <__libc_fini_array>:
 800fcbc:	b570      	push	{r4, r5, r6, lr}
 800fcbe:	4c07      	ldr	r4, [pc, #28]	; (800fcdc <__libc_fini_array+0x20>)
 800fcc0:	4d07      	ldr	r5, [pc, #28]	; (800fce0 <__libc_fini_array+0x24>)
 800fcc2:	1b64      	subs	r4, r4, r5
 800fcc4:	10a4      	asrs	r4, r4, #2
 800fcc6:	2c00      	cmp	r4, #0
 800fcc8:	d102      	bne.n	800fcd0 <__libc_fini_array+0x14>
 800fcca:	f002 fdcd 	bl	8012868 <_fini>
 800fcce:	bd70      	pop	{r4, r5, r6, pc}
 800fcd0:	3c01      	subs	r4, #1
 800fcd2:	00a3      	lsls	r3, r4, #2
 800fcd4:	58eb      	ldr	r3, [r5, r3]
 800fcd6:	4798      	blx	r3
 800fcd8:	e7f5      	b.n	800fcc6 <__libc_fini_array+0xa>
 800fcda:	46c0      	nop			; (mov r8, r8)
 800fcdc:	08014950 	.word	0x08014950
 800fce0:	0801494c 	.word	0x0801494c

0800fce4 <memchr>:
 800fce4:	b2c9      	uxtb	r1, r1
 800fce6:	1882      	adds	r2, r0, r2
 800fce8:	4290      	cmp	r0, r2
 800fcea:	d101      	bne.n	800fcf0 <memchr+0xc>
 800fcec:	2000      	movs	r0, #0
 800fcee:	4770      	bx	lr
 800fcf0:	7803      	ldrb	r3, [r0, #0]
 800fcf2:	428b      	cmp	r3, r1
 800fcf4:	d0fb      	beq.n	800fcee <memchr+0xa>
 800fcf6:	3001      	adds	r0, #1
 800fcf8:	e7f6      	b.n	800fce8 <memchr+0x4>
	...

0800fcfc <frexp>:
 800fcfc:	b570      	push	{r4, r5, r6, lr}
 800fcfe:	0014      	movs	r4, r2
 800fd00:	2500      	movs	r5, #0
 800fd02:	6025      	str	r5, [r4, #0]
 800fd04:	4d10      	ldr	r5, [pc, #64]	; (800fd48 <frexp+0x4c>)
 800fd06:	004b      	lsls	r3, r1, #1
 800fd08:	000a      	movs	r2, r1
 800fd0a:	085b      	lsrs	r3, r3, #1
 800fd0c:	42ab      	cmp	r3, r5
 800fd0e:	dc1a      	bgt.n	800fd46 <frexp+0x4a>
 800fd10:	001d      	movs	r5, r3
 800fd12:	4305      	orrs	r5, r0
 800fd14:	d017      	beq.n	800fd46 <frexp+0x4a>
 800fd16:	4d0d      	ldr	r5, [pc, #52]	; (800fd4c <frexp+0x50>)
 800fd18:	4229      	tst	r1, r5
 800fd1a:	d109      	bne.n	800fd30 <frexp+0x34>
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	4b0c      	ldr	r3, [pc, #48]	; (800fd50 <frexp+0x54>)
 800fd20:	f7f1 fca4 	bl	800166c <__aeabi_dmul>
 800fd24:	2536      	movs	r5, #54	; 0x36
 800fd26:	000a      	movs	r2, r1
 800fd28:	004b      	lsls	r3, r1, #1
 800fd2a:	426d      	negs	r5, r5
 800fd2c:	085b      	lsrs	r3, r3, #1
 800fd2e:	6025      	str	r5, [r4, #0]
 800fd30:	4d08      	ldr	r5, [pc, #32]	; (800fd54 <frexp+0x58>)
 800fd32:	151b      	asrs	r3, r3, #20
 800fd34:	195b      	adds	r3, r3, r5
 800fd36:	6825      	ldr	r5, [r4, #0]
 800fd38:	18eb      	adds	r3, r5, r3
 800fd3a:	6023      	str	r3, [r4, #0]
 800fd3c:	4b06      	ldr	r3, [pc, #24]	; (800fd58 <frexp+0x5c>)
 800fd3e:	401a      	ands	r2, r3
 800fd40:	4b06      	ldr	r3, [pc, #24]	; (800fd5c <frexp+0x60>)
 800fd42:	4313      	orrs	r3, r2
 800fd44:	0019      	movs	r1, r3
 800fd46:	bd70      	pop	{r4, r5, r6, pc}
 800fd48:	7fefffff 	.word	0x7fefffff
 800fd4c:	7ff00000 	.word	0x7ff00000
 800fd50:	43500000 	.word	0x43500000
 800fd54:	fffffc02 	.word	0xfffffc02
 800fd58:	800fffff 	.word	0x800fffff
 800fd5c:	3fe00000 	.word	0x3fe00000

0800fd60 <__register_exitproc>:
 800fd60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd62:	4f1c      	ldr	r7, [pc, #112]	; (800fdd4 <__register_exitproc+0x74>)
 800fd64:	0004      	movs	r4, r0
 800fd66:	6838      	ldr	r0, [r7, #0]
 800fd68:	0016      	movs	r6, r2
 800fd6a:	9301      	str	r3, [sp, #4]
 800fd6c:	9100      	str	r1, [sp, #0]
 800fd6e:	f7fc f8cb 	bl	800bf08 <__retarget_lock_acquire_recursive>
 800fd72:	4a19      	ldr	r2, [pc, #100]	; (800fdd8 <__register_exitproc+0x78>)
 800fd74:	6813      	ldr	r3, [r2, #0]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d101      	bne.n	800fd7e <__register_exitproc+0x1e>
 800fd7a:	4b18      	ldr	r3, [pc, #96]	; (800fddc <__register_exitproc+0x7c>)
 800fd7c:	6013      	str	r3, [r2, #0]
 800fd7e:	685a      	ldr	r2, [r3, #4]
 800fd80:	6838      	ldr	r0, [r7, #0]
 800fd82:	2a1f      	cmp	r2, #31
 800fd84:	dd04      	ble.n	800fd90 <__register_exitproc+0x30>
 800fd86:	f7fc f8c0 	bl	800bf0a <__retarget_lock_release_recursive>
 800fd8a:	2001      	movs	r0, #1
 800fd8c:	4240      	negs	r0, r0
 800fd8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fd90:	2c00      	cmp	r4, #0
 800fd92:	d014      	beq.n	800fdbe <__register_exitproc+0x5e>
 800fd94:	0091      	lsls	r1, r2, #2
 800fd96:	1859      	adds	r1, r3, r1
 800fd98:	000f      	movs	r7, r1
 800fd9a:	3788      	adds	r7, #136	; 0x88
 800fd9c:	603e      	str	r6, [r7, #0]
 800fd9e:	2701      	movs	r7, #1
 800fda0:	001e      	movs	r6, r3
 800fda2:	4097      	lsls	r7, r2
 800fda4:	3685      	adds	r6, #133	; 0x85
 800fda6:	36ff      	adds	r6, #255	; 0xff
 800fda8:	6875      	ldr	r5, [r6, #4]
 800fdaa:	31fc      	adds	r1, #252	; 0xfc
 800fdac:	433d      	orrs	r5, r7
 800fdae:	6075      	str	r5, [r6, #4]
 800fdb0:	9d01      	ldr	r5, [sp, #4]
 800fdb2:	60cd      	str	r5, [r1, #12]
 800fdb4:	2c02      	cmp	r4, #2
 800fdb6:	d102      	bne.n	800fdbe <__register_exitproc+0x5e>
 800fdb8:	68b1      	ldr	r1, [r6, #8]
 800fdba:	4339      	orrs	r1, r7
 800fdbc:	60b1      	str	r1, [r6, #8]
 800fdbe:	1c51      	adds	r1, r2, #1
 800fdc0:	6059      	str	r1, [r3, #4]
 800fdc2:	3202      	adds	r2, #2
 800fdc4:	9900      	ldr	r1, [sp, #0]
 800fdc6:	0092      	lsls	r2, r2, #2
 800fdc8:	50d1      	str	r1, [r2, r3]
 800fdca:	f7fc f89e 	bl	800bf0a <__retarget_lock_release_recursive>
 800fdce:	2000      	movs	r0, #0
 800fdd0:	e7dd      	b.n	800fd8e <__register_exitproc+0x2e>
 800fdd2:	46c0      	nop			; (mov r8, r8)
 800fdd4:	200006d4 	.word	0x200006d4
 800fdd8:	20000da8 	.word	0x20000da8
 800fddc:	20000dac 	.word	0x20000dac

0800fde0 <__assert_func>:
 800fde0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fde2:	0014      	movs	r4, r2
 800fde4:	001a      	movs	r2, r3
 800fde6:	4b09      	ldr	r3, [pc, #36]	; (800fe0c <__assert_func+0x2c>)
 800fde8:	0005      	movs	r5, r0
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	000e      	movs	r6, r1
 800fdee:	68d8      	ldr	r0, [r3, #12]
 800fdf0:	4b07      	ldr	r3, [pc, #28]	; (800fe10 <__assert_func+0x30>)
 800fdf2:	2c00      	cmp	r4, #0
 800fdf4:	d101      	bne.n	800fdfa <__assert_func+0x1a>
 800fdf6:	4b07      	ldr	r3, [pc, #28]	; (800fe14 <__assert_func+0x34>)
 800fdf8:	001c      	movs	r4, r3
 800fdfa:	4907      	ldr	r1, [pc, #28]	; (800fe18 <__assert_func+0x38>)
 800fdfc:	9301      	str	r3, [sp, #4]
 800fdfe:	9402      	str	r4, [sp, #8]
 800fe00:	002b      	movs	r3, r5
 800fe02:	9600      	str	r6, [sp, #0]
 800fe04:	f001 faa6 	bl	8011354 <fiprintf>
 800fe08:	f002 fb8e 	bl	8012528 <abort>
 800fe0c:	200006d0 	.word	0x200006d0
 800fe10:	08014878 	.word	0x08014878
 800fe14:	080148b3 	.word	0x080148b3
 800fe18:	08014885 	.word	0x08014885

0800fe1c <_calloc_r>:
 800fe1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe1e:	2400      	movs	r4, #0
 800fe20:	0c0b      	lsrs	r3, r1, #16
 800fe22:	0c16      	lsrs	r6, r2, #16
 800fe24:	42a3      	cmp	r3, r4
 800fe26:	d133      	bne.n	800fe90 <_calloc_r+0x74>
 800fe28:	42a6      	cmp	r6, r4
 800fe2a:	d121      	bne.n	800fe70 <_calloc_r+0x54>
 800fe2c:	b28b      	uxth	r3, r1
 800fe2e:	b291      	uxth	r1, r2
 800fe30:	4359      	muls	r1, r3
 800fe32:	f7fa fcdd 	bl	800a7f0 <_malloc_r>
 800fe36:	1e05      	subs	r5, r0, #0
 800fe38:	d033      	beq.n	800fea2 <_calloc_r+0x86>
 800fe3a:	0003      	movs	r3, r0
 800fe3c:	3b08      	subs	r3, #8
 800fe3e:	685a      	ldr	r2, [r3, #4]
 800fe40:	2303      	movs	r3, #3
 800fe42:	439a      	bics	r2, r3
 800fe44:	3a04      	subs	r2, #4
 800fe46:	2a24      	cmp	r2, #36	; 0x24
 800fe48:	d832      	bhi.n	800feb0 <_calloc_r+0x94>
 800fe4a:	0003      	movs	r3, r0
 800fe4c:	2a13      	cmp	r2, #19
 800fe4e:	d90a      	bls.n	800fe66 <_calloc_r+0x4a>
 800fe50:	6004      	str	r4, [r0, #0]
 800fe52:	6044      	str	r4, [r0, #4]
 800fe54:	3308      	adds	r3, #8
 800fe56:	2a1b      	cmp	r2, #27
 800fe58:	d905      	bls.n	800fe66 <_calloc_r+0x4a>
 800fe5a:	6084      	str	r4, [r0, #8]
 800fe5c:	60c4      	str	r4, [r0, #12]
 800fe5e:	2a24      	cmp	r2, #36	; 0x24
 800fe60:	d021      	beq.n	800fea6 <_calloc_r+0x8a>
 800fe62:	0003      	movs	r3, r0
 800fe64:	3310      	adds	r3, #16
 800fe66:	2200      	movs	r2, #0
 800fe68:	601a      	str	r2, [r3, #0]
 800fe6a:	605a      	str	r2, [r3, #4]
 800fe6c:	609a      	str	r2, [r3, #8]
 800fe6e:	e018      	b.n	800fea2 <_calloc_r+0x86>
 800fe70:	1c33      	adds	r3, r6, #0
 800fe72:	1c0d      	adds	r5, r1, #0
 800fe74:	b289      	uxth	r1, r1
 800fe76:	b292      	uxth	r2, r2
 800fe78:	434a      	muls	r2, r1
 800fe7a:	b2ad      	uxth	r5, r5
 800fe7c:	b299      	uxth	r1, r3
 800fe7e:	4369      	muls	r1, r5
 800fe80:	0c13      	lsrs	r3, r2, #16
 800fe82:	18c9      	adds	r1, r1, r3
 800fe84:	0c0b      	lsrs	r3, r1, #16
 800fe86:	d107      	bne.n	800fe98 <_calloc_r+0x7c>
 800fe88:	0409      	lsls	r1, r1, #16
 800fe8a:	b292      	uxth	r2, r2
 800fe8c:	4311      	orrs	r1, r2
 800fe8e:	e7d0      	b.n	800fe32 <_calloc_r+0x16>
 800fe90:	2e00      	cmp	r6, #0
 800fe92:	d101      	bne.n	800fe98 <_calloc_r+0x7c>
 800fe94:	1c15      	adds	r5, r2, #0
 800fe96:	e7ed      	b.n	800fe74 <_calloc_r+0x58>
 800fe98:	f7fc f80a 	bl	800beb0 <__errno>
 800fe9c:	230c      	movs	r3, #12
 800fe9e:	2500      	movs	r5, #0
 800fea0:	6003      	str	r3, [r0, #0]
 800fea2:	0028      	movs	r0, r5
 800fea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fea6:	0003      	movs	r3, r0
 800fea8:	6104      	str	r4, [r0, #16]
 800feaa:	3318      	adds	r3, #24
 800feac:	6144      	str	r4, [r0, #20]
 800feae:	e7da      	b.n	800fe66 <_calloc_r+0x4a>
 800feb0:	2100      	movs	r1, #0
 800feb2:	f7fb ff1d 	bl	800bcf0 <memset>
 800feb6:	e7f4      	b.n	800fea2 <_calloc_r+0x86>

0800feb8 <quorem>:
 800feb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800feba:	6902      	ldr	r2, [r0, #16]
 800febc:	690b      	ldr	r3, [r1, #16]
 800febe:	b089      	sub	sp, #36	; 0x24
 800fec0:	0007      	movs	r7, r0
 800fec2:	9104      	str	r1, [sp, #16]
 800fec4:	2000      	movs	r0, #0
 800fec6:	429a      	cmp	r2, r3
 800fec8:	db69      	blt.n	800ff9e <quorem+0xe6>
 800feca:	3b01      	subs	r3, #1
 800fecc:	009c      	lsls	r4, r3, #2
 800fece:	9301      	str	r3, [sp, #4]
 800fed0:	000b      	movs	r3, r1
 800fed2:	3314      	adds	r3, #20
 800fed4:	9306      	str	r3, [sp, #24]
 800fed6:	191b      	adds	r3, r3, r4
 800fed8:	9305      	str	r3, [sp, #20]
 800feda:	003b      	movs	r3, r7
 800fedc:	3314      	adds	r3, #20
 800fede:	9303      	str	r3, [sp, #12]
 800fee0:	191c      	adds	r4, r3, r4
 800fee2:	9b05      	ldr	r3, [sp, #20]
 800fee4:	6826      	ldr	r6, [r4, #0]
 800fee6:	681d      	ldr	r5, [r3, #0]
 800fee8:	0030      	movs	r0, r6
 800feea:	3501      	adds	r5, #1
 800feec:	0029      	movs	r1, r5
 800feee:	f7f0 f925 	bl	800013c <__udivsi3>
 800fef2:	9002      	str	r0, [sp, #8]
 800fef4:	42ae      	cmp	r6, r5
 800fef6:	d329      	bcc.n	800ff4c <quorem+0x94>
 800fef8:	9b06      	ldr	r3, [sp, #24]
 800fefa:	2600      	movs	r6, #0
 800fefc:	469c      	mov	ip, r3
 800fefe:	9d03      	ldr	r5, [sp, #12]
 800ff00:	9606      	str	r6, [sp, #24]
 800ff02:	4662      	mov	r2, ip
 800ff04:	ca08      	ldmia	r2!, {r3}
 800ff06:	6828      	ldr	r0, [r5, #0]
 800ff08:	4694      	mov	ip, r2
 800ff0a:	9a02      	ldr	r2, [sp, #8]
 800ff0c:	b299      	uxth	r1, r3
 800ff0e:	4351      	muls	r1, r2
 800ff10:	0c1b      	lsrs	r3, r3, #16
 800ff12:	4353      	muls	r3, r2
 800ff14:	1989      	adds	r1, r1, r6
 800ff16:	0c0a      	lsrs	r2, r1, #16
 800ff18:	189b      	adds	r3, r3, r2
 800ff1a:	9307      	str	r3, [sp, #28]
 800ff1c:	0c1e      	lsrs	r6, r3, #16
 800ff1e:	9b06      	ldr	r3, [sp, #24]
 800ff20:	b282      	uxth	r2, r0
 800ff22:	18d2      	adds	r2, r2, r3
 800ff24:	466b      	mov	r3, sp
 800ff26:	b289      	uxth	r1, r1
 800ff28:	8b9b      	ldrh	r3, [r3, #28]
 800ff2a:	1a52      	subs	r2, r2, r1
 800ff2c:	0c01      	lsrs	r1, r0, #16
 800ff2e:	1ac9      	subs	r1, r1, r3
 800ff30:	1413      	asrs	r3, r2, #16
 800ff32:	18cb      	adds	r3, r1, r3
 800ff34:	1419      	asrs	r1, r3, #16
 800ff36:	b292      	uxth	r2, r2
 800ff38:	041b      	lsls	r3, r3, #16
 800ff3a:	4313      	orrs	r3, r2
 800ff3c:	c508      	stmia	r5!, {r3}
 800ff3e:	9b05      	ldr	r3, [sp, #20]
 800ff40:	9106      	str	r1, [sp, #24]
 800ff42:	4563      	cmp	r3, ip
 800ff44:	d2dd      	bcs.n	800ff02 <quorem+0x4a>
 800ff46:	6823      	ldr	r3, [r4, #0]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d030      	beq.n	800ffae <quorem+0xf6>
 800ff4c:	0038      	movs	r0, r7
 800ff4e:	9904      	ldr	r1, [sp, #16]
 800ff50:	f7fc ff04 	bl	800cd5c <__mcmp>
 800ff54:	2800      	cmp	r0, #0
 800ff56:	db21      	blt.n	800ff9c <quorem+0xe4>
 800ff58:	0038      	movs	r0, r7
 800ff5a:	2600      	movs	r6, #0
 800ff5c:	9b02      	ldr	r3, [sp, #8]
 800ff5e:	9c04      	ldr	r4, [sp, #16]
 800ff60:	3301      	adds	r3, #1
 800ff62:	9302      	str	r3, [sp, #8]
 800ff64:	3014      	adds	r0, #20
 800ff66:	3414      	adds	r4, #20
 800ff68:	6803      	ldr	r3, [r0, #0]
 800ff6a:	cc02      	ldmia	r4!, {r1}
 800ff6c:	b29d      	uxth	r5, r3
 800ff6e:	19ad      	adds	r5, r5, r6
 800ff70:	b28a      	uxth	r2, r1
 800ff72:	1aaa      	subs	r2, r5, r2
 800ff74:	0c09      	lsrs	r1, r1, #16
 800ff76:	0c1b      	lsrs	r3, r3, #16
 800ff78:	1a5b      	subs	r3, r3, r1
 800ff7a:	1411      	asrs	r1, r2, #16
 800ff7c:	185b      	adds	r3, r3, r1
 800ff7e:	141e      	asrs	r6, r3, #16
 800ff80:	b292      	uxth	r2, r2
 800ff82:	041b      	lsls	r3, r3, #16
 800ff84:	4313      	orrs	r3, r2
 800ff86:	c008      	stmia	r0!, {r3}
 800ff88:	9b05      	ldr	r3, [sp, #20]
 800ff8a:	42a3      	cmp	r3, r4
 800ff8c:	d2ec      	bcs.n	800ff68 <quorem+0xb0>
 800ff8e:	9b01      	ldr	r3, [sp, #4]
 800ff90:	9a03      	ldr	r2, [sp, #12]
 800ff92:	009b      	lsls	r3, r3, #2
 800ff94:	18d3      	adds	r3, r2, r3
 800ff96:	681a      	ldr	r2, [r3, #0]
 800ff98:	2a00      	cmp	r2, #0
 800ff9a:	d015      	beq.n	800ffc8 <quorem+0x110>
 800ff9c:	9802      	ldr	r0, [sp, #8]
 800ff9e:	b009      	add	sp, #36	; 0x24
 800ffa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffa2:	6823      	ldr	r3, [r4, #0]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d106      	bne.n	800ffb6 <quorem+0xfe>
 800ffa8:	9b01      	ldr	r3, [sp, #4]
 800ffaa:	3b01      	subs	r3, #1
 800ffac:	9301      	str	r3, [sp, #4]
 800ffae:	9b03      	ldr	r3, [sp, #12]
 800ffb0:	3c04      	subs	r4, #4
 800ffb2:	42a3      	cmp	r3, r4
 800ffb4:	d3f5      	bcc.n	800ffa2 <quorem+0xea>
 800ffb6:	9b01      	ldr	r3, [sp, #4]
 800ffb8:	613b      	str	r3, [r7, #16]
 800ffba:	e7c7      	b.n	800ff4c <quorem+0x94>
 800ffbc:	681a      	ldr	r2, [r3, #0]
 800ffbe:	2a00      	cmp	r2, #0
 800ffc0:	d106      	bne.n	800ffd0 <quorem+0x118>
 800ffc2:	9a01      	ldr	r2, [sp, #4]
 800ffc4:	3a01      	subs	r2, #1
 800ffc6:	9201      	str	r2, [sp, #4]
 800ffc8:	9a03      	ldr	r2, [sp, #12]
 800ffca:	3b04      	subs	r3, #4
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d3f5      	bcc.n	800ffbc <quorem+0x104>
 800ffd0:	9b01      	ldr	r3, [sp, #4]
 800ffd2:	613b      	str	r3, [r7, #16]
 800ffd4:	e7e2      	b.n	800ff9c <quorem+0xe4>
	...

0800ffd8 <_dtoa_r>:
 800ffd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffda:	0014      	movs	r4, r2
 800ffdc:	001d      	movs	r5, r3
 800ffde:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800ffe0:	b09d      	sub	sp, #116	; 0x74
 800ffe2:	9408      	str	r4, [sp, #32]
 800ffe4:	9509      	str	r5, [sp, #36]	; 0x24
 800ffe6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800ffe8:	9004      	str	r0, [sp, #16]
 800ffea:	2900      	cmp	r1, #0
 800ffec:	d009      	beq.n	8010002 <_dtoa_r+0x2a>
 800ffee:	2301      	movs	r3, #1
 800fff0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fff2:	4093      	lsls	r3, r2
 800fff4:	604a      	str	r2, [r1, #4]
 800fff6:	608b      	str	r3, [r1, #8]
 800fff8:	f7fc fc56 	bl	800c8a8 <_Bfree>
 800fffc:	2300      	movs	r3, #0
 800fffe:	9a04      	ldr	r2, [sp, #16]
 8010000:	6393      	str	r3, [r2, #56]	; 0x38
 8010002:	2d00      	cmp	r5, #0
 8010004:	da1e      	bge.n	8010044 <_dtoa_r+0x6c>
 8010006:	2301      	movs	r3, #1
 8010008:	6033      	str	r3, [r6, #0]
 801000a:	006b      	lsls	r3, r5, #1
 801000c:	085b      	lsrs	r3, r3, #1
 801000e:	9309      	str	r3, [sp, #36]	; 0x24
 8010010:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010012:	4bb5      	ldr	r3, [pc, #724]	; (80102e8 <_dtoa_r+0x310>)
 8010014:	4ab4      	ldr	r2, [pc, #720]	; (80102e8 <_dtoa_r+0x310>)
 8010016:	403b      	ands	r3, r7
 8010018:	4293      	cmp	r3, r2
 801001a:	d116      	bne.n	801004a <_dtoa_r+0x72>
 801001c:	4bb3      	ldr	r3, [pc, #716]	; (80102ec <_dtoa_r+0x314>)
 801001e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010020:	6013      	str	r3, [r2, #0]
 8010022:	033b      	lsls	r3, r7, #12
 8010024:	0b1b      	lsrs	r3, r3, #12
 8010026:	4323      	orrs	r3, r4
 8010028:	d101      	bne.n	801002e <_dtoa_r+0x56>
 801002a:	f000 fdb2 	bl	8010b92 <_dtoa_r+0xbba>
 801002e:	4bb0      	ldr	r3, [pc, #704]	; (80102f0 <_dtoa_r+0x318>)
 8010030:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010032:	9306      	str	r3, [sp, #24]
 8010034:	2a00      	cmp	r2, #0
 8010036:	d002      	beq.n	801003e <_dtoa_r+0x66>
 8010038:	4bae      	ldr	r3, [pc, #696]	; (80102f4 <_dtoa_r+0x31c>)
 801003a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801003c:	6013      	str	r3, [r2, #0]
 801003e:	9806      	ldr	r0, [sp, #24]
 8010040:	b01d      	add	sp, #116	; 0x74
 8010042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010044:	2300      	movs	r3, #0
 8010046:	6033      	str	r3, [r6, #0]
 8010048:	e7e2      	b.n	8010010 <_dtoa_r+0x38>
 801004a:	9a08      	ldr	r2, [sp, #32]
 801004c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801004e:	9210      	str	r2, [sp, #64]	; 0x40
 8010050:	9311      	str	r3, [sp, #68]	; 0x44
 8010052:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010054:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010056:	2200      	movs	r2, #0
 8010058:	2300      	movs	r3, #0
 801005a:	f7f0 f9f5 	bl	8000448 <__aeabi_dcmpeq>
 801005e:	1e06      	subs	r6, r0, #0
 8010060:	d009      	beq.n	8010076 <_dtoa_r+0x9e>
 8010062:	2301      	movs	r3, #1
 8010064:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010066:	6013      	str	r3, [r2, #0]
 8010068:	4ba3      	ldr	r3, [pc, #652]	; (80102f8 <_dtoa_r+0x320>)
 801006a:	9306      	str	r3, [sp, #24]
 801006c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801006e:	2b00      	cmp	r3, #0
 8010070:	d0e5      	beq.n	801003e <_dtoa_r+0x66>
 8010072:	4ba2      	ldr	r3, [pc, #648]	; (80102fc <_dtoa_r+0x324>)
 8010074:	e7e1      	b.n	801003a <_dtoa_r+0x62>
 8010076:	ab1a      	add	r3, sp, #104	; 0x68
 8010078:	9301      	str	r3, [sp, #4]
 801007a:	ab1b      	add	r3, sp, #108	; 0x6c
 801007c:	9300      	str	r3, [sp, #0]
 801007e:	9804      	ldr	r0, [sp, #16]
 8010080:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010082:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010084:	f7fc ff86 	bl	800cf94 <__d2b>
 8010088:	007a      	lsls	r2, r7, #1
 801008a:	9005      	str	r0, [sp, #20]
 801008c:	0d52      	lsrs	r2, r2, #21
 801008e:	d100      	bne.n	8010092 <_dtoa_r+0xba>
 8010090:	e07b      	b.n	801018a <_dtoa_r+0x1b2>
 8010092:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010094:	9617      	str	r6, [sp, #92]	; 0x5c
 8010096:	0319      	lsls	r1, r3, #12
 8010098:	4b99      	ldr	r3, [pc, #612]	; (8010300 <_dtoa_r+0x328>)
 801009a:	0b09      	lsrs	r1, r1, #12
 801009c:	430b      	orrs	r3, r1
 801009e:	4999      	ldr	r1, [pc, #612]	; (8010304 <_dtoa_r+0x32c>)
 80100a0:	1857      	adds	r7, r2, r1
 80100a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80100a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80100a6:	0019      	movs	r1, r3
 80100a8:	2200      	movs	r2, #0
 80100aa:	4b97      	ldr	r3, [pc, #604]	; (8010308 <_dtoa_r+0x330>)
 80100ac:	f7f1 fda0 	bl	8001bf0 <__aeabi_dsub>
 80100b0:	4a96      	ldr	r2, [pc, #600]	; (801030c <_dtoa_r+0x334>)
 80100b2:	4b97      	ldr	r3, [pc, #604]	; (8010310 <_dtoa_r+0x338>)
 80100b4:	f7f1 fada 	bl	800166c <__aeabi_dmul>
 80100b8:	4a96      	ldr	r2, [pc, #600]	; (8010314 <_dtoa_r+0x33c>)
 80100ba:	4b97      	ldr	r3, [pc, #604]	; (8010318 <_dtoa_r+0x340>)
 80100bc:	f7f0 fb7c 	bl	80007b8 <__aeabi_dadd>
 80100c0:	0004      	movs	r4, r0
 80100c2:	0038      	movs	r0, r7
 80100c4:	000d      	movs	r5, r1
 80100c6:	f7f2 f969 	bl	800239c <__aeabi_i2d>
 80100ca:	4a94      	ldr	r2, [pc, #592]	; (801031c <_dtoa_r+0x344>)
 80100cc:	4b94      	ldr	r3, [pc, #592]	; (8010320 <_dtoa_r+0x348>)
 80100ce:	f7f1 facd 	bl	800166c <__aeabi_dmul>
 80100d2:	0002      	movs	r2, r0
 80100d4:	000b      	movs	r3, r1
 80100d6:	0020      	movs	r0, r4
 80100d8:	0029      	movs	r1, r5
 80100da:	f7f0 fb6d 	bl	80007b8 <__aeabi_dadd>
 80100de:	0004      	movs	r4, r0
 80100e0:	000d      	movs	r5, r1
 80100e2:	f7f2 f925 	bl	8002330 <__aeabi_d2iz>
 80100e6:	2200      	movs	r2, #0
 80100e8:	9003      	str	r0, [sp, #12]
 80100ea:	2300      	movs	r3, #0
 80100ec:	0020      	movs	r0, r4
 80100ee:	0029      	movs	r1, r5
 80100f0:	f7f0 f9b0 	bl	8000454 <__aeabi_dcmplt>
 80100f4:	2800      	cmp	r0, #0
 80100f6:	d00b      	beq.n	8010110 <_dtoa_r+0x138>
 80100f8:	9803      	ldr	r0, [sp, #12]
 80100fa:	f7f2 f94f 	bl	800239c <__aeabi_i2d>
 80100fe:	002b      	movs	r3, r5
 8010100:	0022      	movs	r2, r4
 8010102:	f7f0 f9a1 	bl	8000448 <__aeabi_dcmpeq>
 8010106:	4243      	negs	r3, r0
 8010108:	4158      	adcs	r0, r3
 801010a:	9b03      	ldr	r3, [sp, #12]
 801010c:	1a1b      	subs	r3, r3, r0
 801010e:	9303      	str	r3, [sp, #12]
 8010110:	2301      	movs	r3, #1
 8010112:	9316      	str	r3, [sp, #88]	; 0x58
 8010114:	9b03      	ldr	r3, [sp, #12]
 8010116:	2b16      	cmp	r3, #22
 8010118:	d810      	bhi.n	801013c <_dtoa_r+0x164>
 801011a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801011c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801011e:	9a03      	ldr	r2, [sp, #12]
 8010120:	4b80      	ldr	r3, [pc, #512]	; (8010324 <_dtoa_r+0x34c>)
 8010122:	00d2      	lsls	r2, r2, #3
 8010124:	189b      	adds	r3, r3, r2
 8010126:	681a      	ldr	r2, [r3, #0]
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	f7f0 f993 	bl	8000454 <__aeabi_dcmplt>
 801012e:	2800      	cmp	r0, #0
 8010130:	d047      	beq.n	80101c2 <_dtoa_r+0x1ea>
 8010132:	9b03      	ldr	r3, [sp, #12]
 8010134:	3b01      	subs	r3, #1
 8010136:	9303      	str	r3, [sp, #12]
 8010138:	2300      	movs	r3, #0
 801013a:	9316      	str	r3, [sp, #88]	; 0x58
 801013c:	2200      	movs	r2, #0
 801013e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010140:	920a      	str	r2, [sp, #40]	; 0x28
 8010142:	1bdb      	subs	r3, r3, r7
 8010144:	1e5a      	subs	r2, r3, #1
 8010146:	d53e      	bpl.n	80101c6 <_dtoa_r+0x1ee>
 8010148:	2201      	movs	r2, #1
 801014a:	1ad3      	subs	r3, r2, r3
 801014c:	930a      	str	r3, [sp, #40]	; 0x28
 801014e:	2300      	movs	r3, #0
 8010150:	930c      	str	r3, [sp, #48]	; 0x30
 8010152:	9b03      	ldr	r3, [sp, #12]
 8010154:	2b00      	cmp	r3, #0
 8010156:	db38      	blt.n	80101ca <_dtoa_r+0x1f2>
 8010158:	9a03      	ldr	r2, [sp, #12]
 801015a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801015c:	4694      	mov	ip, r2
 801015e:	4463      	add	r3, ip
 8010160:	930c      	str	r3, [sp, #48]	; 0x30
 8010162:	2300      	movs	r3, #0
 8010164:	9213      	str	r2, [sp, #76]	; 0x4c
 8010166:	930d      	str	r3, [sp, #52]	; 0x34
 8010168:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801016a:	2401      	movs	r4, #1
 801016c:	2b09      	cmp	r3, #9
 801016e:	d867      	bhi.n	8010240 <_dtoa_r+0x268>
 8010170:	2b05      	cmp	r3, #5
 8010172:	dd02      	ble.n	801017a <_dtoa_r+0x1a2>
 8010174:	2400      	movs	r4, #0
 8010176:	3b04      	subs	r3, #4
 8010178:	9322      	str	r3, [sp, #136]	; 0x88
 801017a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801017c:	1e98      	subs	r0, r3, #2
 801017e:	2803      	cmp	r0, #3
 8010180:	d867      	bhi.n	8010252 <_dtoa_r+0x27a>
 8010182:	f7ef ffc7 	bl	8000114 <__gnu_thumb1_case_uqi>
 8010186:	3a2b      	.short	0x3a2b
 8010188:	5b38      	.short	0x5b38
 801018a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801018c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801018e:	18f6      	adds	r6, r6, r3
 8010190:	4b65      	ldr	r3, [pc, #404]	; (8010328 <_dtoa_r+0x350>)
 8010192:	18f2      	adds	r2, r6, r3
 8010194:	2a20      	cmp	r2, #32
 8010196:	dd0f      	ble.n	80101b8 <_dtoa_r+0x1e0>
 8010198:	2340      	movs	r3, #64	; 0x40
 801019a:	1a9b      	subs	r3, r3, r2
 801019c:	409f      	lsls	r7, r3
 801019e:	4b63      	ldr	r3, [pc, #396]	; (801032c <_dtoa_r+0x354>)
 80101a0:	0038      	movs	r0, r7
 80101a2:	18f3      	adds	r3, r6, r3
 80101a4:	40dc      	lsrs	r4, r3
 80101a6:	4320      	orrs	r0, r4
 80101a8:	f7f2 f928 	bl	80023fc <__aeabi_ui2d>
 80101ac:	2201      	movs	r2, #1
 80101ae:	4b60      	ldr	r3, [pc, #384]	; (8010330 <_dtoa_r+0x358>)
 80101b0:	1e77      	subs	r7, r6, #1
 80101b2:	18cb      	adds	r3, r1, r3
 80101b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80101b6:	e776      	b.n	80100a6 <_dtoa_r+0xce>
 80101b8:	2320      	movs	r3, #32
 80101ba:	0020      	movs	r0, r4
 80101bc:	1a9b      	subs	r3, r3, r2
 80101be:	4098      	lsls	r0, r3
 80101c0:	e7f2      	b.n	80101a8 <_dtoa_r+0x1d0>
 80101c2:	9016      	str	r0, [sp, #88]	; 0x58
 80101c4:	e7ba      	b.n	801013c <_dtoa_r+0x164>
 80101c6:	920c      	str	r2, [sp, #48]	; 0x30
 80101c8:	e7c3      	b.n	8010152 <_dtoa_r+0x17a>
 80101ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101cc:	9a03      	ldr	r2, [sp, #12]
 80101ce:	1a9b      	subs	r3, r3, r2
 80101d0:	930a      	str	r3, [sp, #40]	; 0x28
 80101d2:	4253      	negs	r3, r2
 80101d4:	930d      	str	r3, [sp, #52]	; 0x34
 80101d6:	2300      	movs	r3, #0
 80101d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80101da:	e7c5      	b.n	8010168 <_dtoa_r+0x190>
 80101dc:	2300      	movs	r3, #0
 80101de:	930f      	str	r3, [sp, #60]	; 0x3c
 80101e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80101e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80101e4:	9307      	str	r3, [sp, #28]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	dc13      	bgt.n	8010212 <_dtoa_r+0x23a>
 80101ea:	2301      	movs	r3, #1
 80101ec:	001a      	movs	r2, r3
 80101ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80101f0:	9307      	str	r3, [sp, #28]
 80101f2:	9223      	str	r2, [sp, #140]	; 0x8c
 80101f4:	e00d      	b.n	8010212 <_dtoa_r+0x23a>
 80101f6:	2301      	movs	r3, #1
 80101f8:	e7f1      	b.n	80101de <_dtoa_r+0x206>
 80101fa:	2300      	movs	r3, #0
 80101fc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80101fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8010200:	4694      	mov	ip, r2
 8010202:	9b03      	ldr	r3, [sp, #12]
 8010204:	4463      	add	r3, ip
 8010206:	930b      	str	r3, [sp, #44]	; 0x2c
 8010208:	3301      	adds	r3, #1
 801020a:	9307      	str	r3, [sp, #28]
 801020c:	2b00      	cmp	r3, #0
 801020e:	dc00      	bgt.n	8010212 <_dtoa_r+0x23a>
 8010210:	2301      	movs	r3, #1
 8010212:	2100      	movs	r1, #0
 8010214:	2204      	movs	r2, #4
 8010216:	0010      	movs	r0, r2
 8010218:	3014      	adds	r0, #20
 801021a:	4298      	cmp	r0, r3
 801021c:	d91d      	bls.n	801025a <_dtoa_r+0x282>
 801021e:	9b04      	ldr	r3, [sp, #16]
 8010220:	0018      	movs	r0, r3
 8010222:	63d9      	str	r1, [r3, #60]	; 0x3c
 8010224:	f7fc fb18 	bl	800c858 <_Balloc>
 8010228:	9006      	str	r0, [sp, #24]
 801022a:	2800      	cmp	r0, #0
 801022c:	d118      	bne.n	8010260 <_dtoa_r+0x288>
 801022e:	21b0      	movs	r1, #176	; 0xb0
 8010230:	4b40      	ldr	r3, [pc, #256]	; (8010334 <_dtoa_r+0x35c>)
 8010232:	4841      	ldr	r0, [pc, #260]	; (8010338 <_dtoa_r+0x360>)
 8010234:	9a06      	ldr	r2, [sp, #24]
 8010236:	31ff      	adds	r1, #255	; 0xff
 8010238:	f7ff fdd2 	bl	800fde0 <__assert_func>
 801023c:	2301      	movs	r3, #1
 801023e:	e7dd      	b.n	80101fc <_dtoa_r+0x224>
 8010240:	2300      	movs	r3, #0
 8010242:	940f      	str	r4, [sp, #60]	; 0x3c
 8010244:	9322      	str	r3, [sp, #136]	; 0x88
 8010246:	3b01      	subs	r3, #1
 8010248:	930b      	str	r3, [sp, #44]	; 0x2c
 801024a:	9307      	str	r3, [sp, #28]
 801024c:	2200      	movs	r2, #0
 801024e:	3313      	adds	r3, #19
 8010250:	e7cf      	b.n	80101f2 <_dtoa_r+0x21a>
 8010252:	2301      	movs	r3, #1
 8010254:	930f      	str	r3, [sp, #60]	; 0x3c
 8010256:	3b02      	subs	r3, #2
 8010258:	e7f6      	b.n	8010248 <_dtoa_r+0x270>
 801025a:	3101      	adds	r1, #1
 801025c:	0052      	lsls	r2, r2, #1
 801025e:	e7da      	b.n	8010216 <_dtoa_r+0x23e>
 8010260:	9b04      	ldr	r3, [sp, #16]
 8010262:	9a06      	ldr	r2, [sp, #24]
 8010264:	639a      	str	r2, [r3, #56]	; 0x38
 8010266:	9b07      	ldr	r3, [sp, #28]
 8010268:	2b0e      	cmp	r3, #14
 801026a:	d900      	bls.n	801026e <_dtoa_r+0x296>
 801026c:	e0e3      	b.n	8010436 <_dtoa_r+0x45e>
 801026e:	2c00      	cmp	r4, #0
 8010270:	d100      	bne.n	8010274 <_dtoa_r+0x29c>
 8010272:	e0e0      	b.n	8010436 <_dtoa_r+0x45e>
 8010274:	9b03      	ldr	r3, [sp, #12]
 8010276:	2b00      	cmp	r3, #0
 8010278:	dd62      	ble.n	8010340 <_dtoa_r+0x368>
 801027a:	210f      	movs	r1, #15
 801027c:	9a03      	ldr	r2, [sp, #12]
 801027e:	4b29      	ldr	r3, [pc, #164]	; (8010324 <_dtoa_r+0x34c>)
 8010280:	400a      	ands	r2, r1
 8010282:	00d2      	lsls	r2, r2, #3
 8010284:	189b      	adds	r3, r3, r2
 8010286:	681e      	ldr	r6, [r3, #0]
 8010288:	685f      	ldr	r7, [r3, #4]
 801028a:	9b03      	ldr	r3, [sp, #12]
 801028c:	2402      	movs	r4, #2
 801028e:	111d      	asrs	r5, r3, #4
 8010290:	05db      	lsls	r3, r3, #23
 8010292:	d50a      	bpl.n	80102aa <_dtoa_r+0x2d2>
 8010294:	4b29      	ldr	r3, [pc, #164]	; (801033c <_dtoa_r+0x364>)
 8010296:	400d      	ands	r5, r1
 8010298:	6a1a      	ldr	r2, [r3, #32]
 801029a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801029c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801029e:	9911      	ldr	r1, [sp, #68]	; 0x44
 80102a0:	f7f0 fdea 	bl	8000e78 <__aeabi_ddiv>
 80102a4:	9008      	str	r0, [sp, #32]
 80102a6:	9109      	str	r1, [sp, #36]	; 0x24
 80102a8:	3401      	adds	r4, #1
 80102aa:	4b24      	ldr	r3, [pc, #144]	; (801033c <_dtoa_r+0x364>)
 80102ac:	930e      	str	r3, [sp, #56]	; 0x38
 80102ae:	2d00      	cmp	r5, #0
 80102b0:	d108      	bne.n	80102c4 <_dtoa_r+0x2ec>
 80102b2:	9808      	ldr	r0, [sp, #32]
 80102b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80102b6:	0032      	movs	r2, r6
 80102b8:	003b      	movs	r3, r7
 80102ba:	f7f0 fddd 	bl	8000e78 <__aeabi_ddiv>
 80102be:	9008      	str	r0, [sp, #32]
 80102c0:	9109      	str	r1, [sp, #36]	; 0x24
 80102c2:	e058      	b.n	8010376 <_dtoa_r+0x39e>
 80102c4:	2301      	movs	r3, #1
 80102c6:	421d      	tst	r5, r3
 80102c8:	d009      	beq.n	80102de <_dtoa_r+0x306>
 80102ca:	18e4      	adds	r4, r4, r3
 80102cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80102ce:	0030      	movs	r0, r6
 80102d0:	681a      	ldr	r2, [r3, #0]
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	0039      	movs	r1, r7
 80102d6:	f7f1 f9c9 	bl	800166c <__aeabi_dmul>
 80102da:	0006      	movs	r6, r0
 80102dc:	000f      	movs	r7, r1
 80102de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80102e0:	106d      	asrs	r5, r5, #1
 80102e2:	3308      	adds	r3, #8
 80102e4:	e7e2      	b.n	80102ac <_dtoa_r+0x2d4>
 80102e6:	46c0      	nop			; (mov r8, r8)
 80102e8:	7ff00000 	.word	0x7ff00000
 80102ec:	0000270f 	.word	0x0000270f
 80102f0:	080148bd 	.word	0x080148bd
 80102f4:	080148c0 	.word	0x080148c0
 80102f8:	0801482e 	.word	0x0801482e
 80102fc:	0801482f 	.word	0x0801482f
 8010300:	3ff00000 	.word	0x3ff00000
 8010304:	fffffc01 	.word	0xfffffc01
 8010308:	3ff80000 	.word	0x3ff80000
 801030c:	636f4361 	.word	0x636f4361
 8010310:	3fd287a7 	.word	0x3fd287a7
 8010314:	8b60c8b3 	.word	0x8b60c8b3
 8010318:	3fc68a28 	.word	0x3fc68a28
 801031c:	509f79fb 	.word	0x509f79fb
 8010320:	3fd34413 	.word	0x3fd34413
 8010324:	08014728 	.word	0x08014728
 8010328:	00000432 	.word	0x00000432
 801032c:	00000412 	.word	0x00000412
 8010330:	fe100000 	.word	0xfe100000
 8010334:	08014631 	.word	0x08014631
 8010338:	080148c1 	.word	0x080148c1
 801033c:	08014700 	.word	0x08014700
 8010340:	9b03      	ldr	r3, [sp, #12]
 8010342:	2402      	movs	r4, #2
 8010344:	2b00      	cmp	r3, #0
 8010346:	d016      	beq.n	8010376 <_dtoa_r+0x39e>
 8010348:	9810      	ldr	r0, [sp, #64]	; 0x40
 801034a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801034c:	220f      	movs	r2, #15
 801034e:	425d      	negs	r5, r3
 8010350:	402a      	ands	r2, r5
 8010352:	4bdd      	ldr	r3, [pc, #884]	; (80106c8 <_dtoa_r+0x6f0>)
 8010354:	00d2      	lsls	r2, r2, #3
 8010356:	189b      	adds	r3, r3, r2
 8010358:	681a      	ldr	r2, [r3, #0]
 801035a:	685b      	ldr	r3, [r3, #4]
 801035c:	f7f1 f986 	bl	800166c <__aeabi_dmul>
 8010360:	2701      	movs	r7, #1
 8010362:	2300      	movs	r3, #0
 8010364:	9008      	str	r0, [sp, #32]
 8010366:	9109      	str	r1, [sp, #36]	; 0x24
 8010368:	4ed8      	ldr	r6, [pc, #864]	; (80106cc <_dtoa_r+0x6f4>)
 801036a:	112d      	asrs	r5, r5, #4
 801036c:	2d00      	cmp	r5, #0
 801036e:	d000      	beq.n	8010372 <_dtoa_r+0x39a>
 8010370:	e091      	b.n	8010496 <_dtoa_r+0x4be>
 8010372:	2b00      	cmp	r3, #0
 8010374:	d1a3      	bne.n	80102be <_dtoa_r+0x2e6>
 8010376:	9e08      	ldr	r6, [sp, #32]
 8010378:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801037a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801037c:	2b00      	cmp	r3, #0
 801037e:	d100      	bne.n	8010382 <_dtoa_r+0x3aa>
 8010380:	e094      	b.n	80104ac <_dtoa_r+0x4d4>
 8010382:	2200      	movs	r2, #0
 8010384:	0030      	movs	r0, r6
 8010386:	0039      	movs	r1, r7
 8010388:	4bd1      	ldr	r3, [pc, #836]	; (80106d0 <_dtoa_r+0x6f8>)
 801038a:	f7f0 f863 	bl	8000454 <__aeabi_dcmplt>
 801038e:	2800      	cmp	r0, #0
 8010390:	d100      	bne.n	8010394 <_dtoa_r+0x3bc>
 8010392:	e08b      	b.n	80104ac <_dtoa_r+0x4d4>
 8010394:	9b07      	ldr	r3, [sp, #28]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d100      	bne.n	801039c <_dtoa_r+0x3c4>
 801039a:	e087      	b.n	80104ac <_dtoa_r+0x4d4>
 801039c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801039e:	2b00      	cmp	r3, #0
 80103a0:	dd45      	ble.n	801042e <_dtoa_r+0x456>
 80103a2:	9b03      	ldr	r3, [sp, #12]
 80103a4:	2200      	movs	r2, #0
 80103a6:	3b01      	subs	r3, #1
 80103a8:	930e      	str	r3, [sp, #56]	; 0x38
 80103aa:	0030      	movs	r0, r6
 80103ac:	4bc9      	ldr	r3, [pc, #804]	; (80106d4 <_dtoa_r+0x6fc>)
 80103ae:	0039      	movs	r1, r7
 80103b0:	f7f1 f95c 	bl	800166c <__aeabi_dmul>
 80103b4:	9008      	str	r0, [sp, #32]
 80103b6:	9109      	str	r1, [sp, #36]	; 0x24
 80103b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103ba:	3401      	adds	r4, #1
 80103bc:	0020      	movs	r0, r4
 80103be:	9e08      	ldr	r6, [sp, #32]
 80103c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80103c2:	9312      	str	r3, [sp, #72]	; 0x48
 80103c4:	f7f1 ffea 	bl	800239c <__aeabi_i2d>
 80103c8:	0032      	movs	r2, r6
 80103ca:	003b      	movs	r3, r7
 80103cc:	f7f1 f94e 	bl	800166c <__aeabi_dmul>
 80103d0:	2200      	movs	r2, #0
 80103d2:	4bc1      	ldr	r3, [pc, #772]	; (80106d8 <_dtoa_r+0x700>)
 80103d4:	f7f0 f9f0 	bl	80007b8 <__aeabi_dadd>
 80103d8:	4ac0      	ldr	r2, [pc, #768]	; (80106dc <_dtoa_r+0x704>)
 80103da:	9014      	str	r0, [sp, #80]	; 0x50
 80103dc:	9115      	str	r1, [sp, #84]	; 0x54
 80103de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80103e0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80103e2:	4694      	mov	ip, r2
 80103e4:	9308      	str	r3, [sp, #32]
 80103e6:	9409      	str	r4, [sp, #36]	; 0x24
 80103e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80103ea:	4463      	add	r3, ip
 80103ec:	9318      	str	r3, [sp, #96]	; 0x60
 80103ee:	9309      	str	r3, [sp, #36]	; 0x24
 80103f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d15e      	bne.n	80104b4 <_dtoa_r+0x4dc>
 80103f6:	2200      	movs	r2, #0
 80103f8:	4bb9      	ldr	r3, [pc, #740]	; (80106e0 <_dtoa_r+0x708>)
 80103fa:	0030      	movs	r0, r6
 80103fc:	0039      	movs	r1, r7
 80103fe:	f7f1 fbf7 	bl	8001bf0 <__aeabi_dsub>
 8010402:	9a08      	ldr	r2, [sp, #32]
 8010404:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010406:	0004      	movs	r4, r0
 8010408:	000d      	movs	r5, r1
 801040a:	f7f0 f837 	bl	800047c <__aeabi_dcmpgt>
 801040e:	2800      	cmp	r0, #0
 8010410:	d000      	beq.n	8010414 <_dtoa_r+0x43c>
 8010412:	e2b3      	b.n	801097c <_dtoa_r+0x9a4>
 8010414:	48b3      	ldr	r0, [pc, #716]	; (80106e4 <_dtoa_r+0x70c>)
 8010416:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010418:	4684      	mov	ip, r0
 801041a:	4461      	add	r1, ip
 801041c:	000b      	movs	r3, r1
 801041e:	0020      	movs	r0, r4
 8010420:	0029      	movs	r1, r5
 8010422:	9a08      	ldr	r2, [sp, #32]
 8010424:	f7f0 f816 	bl	8000454 <__aeabi_dcmplt>
 8010428:	2800      	cmp	r0, #0
 801042a:	d000      	beq.n	801042e <_dtoa_r+0x456>
 801042c:	e2a3      	b.n	8010976 <_dtoa_r+0x99e>
 801042e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010430:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010432:	9308      	str	r3, [sp, #32]
 8010434:	9409      	str	r4, [sp, #36]	; 0x24
 8010436:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010438:	2b00      	cmp	r3, #0
 801043a:	da00      	bge.n	801043e <_dtoa_r+0x466>
 801043c:	e179      	b.n	8010732 <_dtoa_r+0x75a>
 801043e:	9a03      	ldr	r2, [sp, #12]
 8010440:	2a0e      	cmp	r2, #14
 8010442:	dd00      	ble.n	8010446 <_dtoa_r+0x46e>
 8010444:	e175      	b.n	8010732 <_dtoa_r+0x75a>
 8010446:	4ba0      	ldr	r3, [pc, #640]	; (80106c8 <_dtoa_r+0x6f0>)
 8010448:	00d2      	lsls	r2, r2, #3
 801044a:	189b      	adds	r3, r3, r2
 801044c:	681e      	ldr	r6, [r3, #0]
 801044e:	685f      	ldr	r7, [r3, #4]
 8010450:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010452:	2b00      	cmp	r3, #0
 8010454:	db00      	blt.n	8010458 <_dtoa_r+0x480>
 8010456:	e0e5      	b.n	8010624 <_dtoa_r+0x64c>
 8010458:	9b07      	ldr	r3, [sp, #28]
 801045a:	2b00      	cmp	r3, #0
 801045c:	dd00      	ble.n	8010460 <_dtoa_r+0x488>
 801045e:	e0e1      	b.n	8010624 <_dtoa_r+0x64c>
 8010460:	d000      	beq.n	8010464 <_dtoa_r+0x48c>
 8010462:	e288      	b.n	8010976 <_dtoa_r+0x99e>
 8010464:	2200      	movs	r2, #0
 8010466:	0030      	movs	r0, r6
 8010468:	0039      	movs	r1, r7
 801046a:	4b9d      	ldr	r3, [pc, #628]	; (80106e0 <_dtoa_r+0x708>)
 801046c:	f7f1 f8fe 	bl	800166c <__aeabi_dmul>
 8010470:	9a08      	ldr	r2, [sp, #32]
 8010472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010474:	f7f0 f80c 	bl	8000490 <__aeabi_dcmpge>
 8010478:	9e07      	ldr	r6, [sp, #28]
 801047a:	0037      	movs	r7, r6
 801047c:	2800      	cmp	r0, #0
 801047e:	d000      	beq.n	8010482 <_dtoa_r+0x4aa>
 8010480:	e25f      	b.n	8010942 <_dtoa_r+0x96a>
 8010482:	9b06      	ldr	r3, [sp, #24]
 8010484:	9a06      	ldr	r2, [sp, #24]
 8010486:	3301      	adds	r3, #1
 8010488:	9308      	str	r3, [sp, #32]
 801048a:	2331      	movs	r3, #49	; 0x31
 801048c:	7013      	strb	r3, [r2, #0]
 801048e:	9b03      	ldr	r3, [sp, #12]
 8010490:	3301      	adds	r3, #1
 8010492:	9303      	str	r3, [sp, #12]
 8010494:	e25a      	b.n	801094c <_dtoa_r+0x974>
 8010496:	423d      	tst	r5, r7
 8010498:	d005      	beq.n	80104a6 <_dtoa_r+0x4ce>
 801049a:	6832      	ldr	r2, [r6, #0]
 801049c:	6873      	ldr	r3, [r6, #4]
 801049e:	f7f1 f8e5 	bl	800166c <__aeabi_dmul>
 80104a2:	003b      	movs	r3, r7
 80104a4:	3401      	adds	r4, #1
 80104a6:	106d      	asrs	r5, r5, #1
 80104a8:	3608      	adds	r6, #8
 80104aa:	e75f      	b.n	801036c <_dtoa_r+0x394>
 80104ac:	9b03      	ldr	r3, [sp, #12]
 80104ae:	930e      	str	r3, [sp, #56]	; 0x38
 80104b0:	9b07      	ldr	r3, [sp, #28]
 80104b2:	e783      	b.n	80103bc <_dtoa_r+0x3e4>
 80104b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80104b6:	4b84      	ldr	r3, [pc, #528]	; (80106c8 <_dtoa_r+0x6f0>)
 80104b8:	3a01      	subs	r2, #1
 80104ba:	00d2      	lsls	r2, r2, #3
 80104bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80104be:	189b      	adds	r3, r3, r2
 80104c0:	9c08      	ldr	r4, [sp, #32]
 80104c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80104c4:	681a      	ldr	r2, [r3, #0]
 80104c6:	685b      	ldr	r3, [r3, #4]
 80104c8:	2900      	cmp	r1, #0
 80104ca:	d051      	beq.n	8010570 <_dtoa_r+0x598>
 80104cc:	2000      	movs	r0, #0
 80104ce:	4986      	ldr	r1, [pc, #536]	; (80106e8 <_dtoa_r+0x710>)
 80104d0:	f7f0 fcd2 	bl	8000e78 <__aeabi_ddiv>
 80104d4:	0022      	movs	r2, r4
 80104d6:	002b      	movs	r3, r5
 80104d8:	f7f1 fb8a 	bl	8001bf0 <__aeabi_dsub>
 80104dc:	9a06      	ldr	r2, [sp, #24]
 80104de:	0004      	movs	r4, r0
 80104e0:	4694      	mov	ip, r2
 80104e2:	000d      	movs	r5, r1
 80104e4:	9b06      	ldr	r3, [sp, #24]
 80104e6:	9314      	str	r3, [sp, #80]	; 0x50
 80104e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80104ea:	4463      	add	r3, ip
 80104ec:	9318      	str	r3, [sp, #96]	; 0x60
 80104ee:	0039      	movs	r1, r7
 80104f0:	0030      	movs	r0, r6
 80104f2:	f7f1 ff1d 	bl	8002330 <__aeabi_d2iz>
 80104f6:	9012      	str	r0, [sp, #72]	; 0x48
 80104f8:	f7f1 ff50 	bl	800239c <__aeabi_i2d>
 80104fc:	0002      	movs	r2, r0
 80104fe:	000b      	movs	r3, r1
 8010500:	0030      	movs	r0, r6
 8010502:	0039      	movs	r1, r7
 8010504:	f7f1 fb74 	bl	8001bf0 <__aeabi_dsub>
 8010508:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801050a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801050c:	3301      	adds	r3, #1
 801050e:	9308      	str	r3, [sp, #32]
 8010510:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010512:	0006      	movs	r6, r0
 8010514:	3330      	adds	r3, #48	; 0x30
 8010516:	7013      	strb	r3, [r2, #0]
 8010518:	0022      	movs	r2, r4
 801051a:	002b      	movs	r3, r5
 801051c:	000f      	movs	r7, r1
 801051e:	f7ef ff99 	bl	8000454 <__aeabi_dcmplt>
 8010522:	2800      	cmp	r0, #0
 8010524:	d174      	bne.n	8010610 <_dtoa_r+0x638>
 8010526:	0032      	movs	r2, r6
 8010528:	003b      	movs	r3, r7
 801052a:	2000      	movs	r0, #0
 801052c:	4968      	ldr	r1, [pc, #416]	; (80106d0 <_dtoa_r+0x6f8>)
 801052e:	f7f1 fb5f 	bl	8001bf0 <__aeabi_dsub>
 8010532:	0022      	movs	r2, r4
 8010534:	002b      	movs	r3, r5
 8010536:	f7ef ff8d 	bl	8000454 <__aeabi_dcmplt>
 801053a:	2800      	cmp	r0, #0
 801053c:	d000      	beq.n	8010540 <_dtoa_r+0x568>
 801053e:	e0d7      	b.n	80106f0 <_dtoa_r+0x718>
 8010540:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010542:	9a08      	ldr	r2, [sp, #32]
 8010544:	4293      	cmp	r3, r2
 8010546:	d100      	bne.n	801054a <_dtoa_r+0x572>
 8010548:	e771      	b.n	801042e <_dtoa_r+0x456>
 801054a:	2200      	movs	r2, #0
 801054c:	0020      	movs	r0, r4
 801054e:	0029      	movs	r1, r5
 8010550:	4b60      	ldr	r3, [pc, #384]	; (80106d4 <_dtoa_r+0x6fc>)
 8010552:	f7f1 f88b 	bl	800166c <__aeabi_dmul>
 8010556:	4b5f      	ldr	r3, [pc, #380]	; (80106d4 <_dtoa_r+0x6fc>)
 8010558:	0004      	movs	r4, r0
 801055a:	000d      	movs	r5, r1
 801055c:	0030      	movs	r0, r6
 801055e:	0039      	movs	r1, r7
 8010560:	2200      	movs	r2, #0
 8010562:	f7f1 f883 	bl	800166c <__aeabi_dmul>
 8010566:	9b08      	ldr	r3, [sp, #32]
 8010568:	0006      	movs	r6, r0
 801056a:	000f      	movs	r7, r1
 801056c:	9314      	str	r3, [sp, #80]	; 0x50
 801056e:	e7be      	b.n	80104ee <_dtoa_r+0x516>
 8010570:	0020      	movs	r0, r4
 8010572:	0029      	movs	r1, r5
 8010574:	f7f1 f87a 	bl	800166c <__aeabi_dmul>
 8010578:	9a06      	ldr	r2, [sp, #24]
 801057a:	9b06      	ldr	r3, [sp, #24]
 801057c:	4694      	mov	ip, r2
 801057e:	9308      	str	r3, [sp, #32]
 8010580:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010582:	9014      	str	r0, [sp, #80]	; 0x50
 8010584:	9115      	str	r1, [sp, #84]	; 0x54
 8010586:	4463      	add	r3, ip
 8010588:	9319      	str	r3, [sp, #100]	; 0x64
 801058a:	0030      	movs	r0, r6
 801058c:	0039      	movs	r1, r7
 801058e:	f7f1 fecf 	bl	8002330 <__aeabi_d2iz>
 8010592:	9018      	str	r0, [sp, #96]	; 0x60
 8010594:	f7f1 ff02 	bl	800239c <__aeabi_i2d>
 8010598:	0002      	movs	r2, r0
 801059a:	000b      	movs	r3, r1
 801059c:	0030      	movs	r0, r6
 801059e:	0039      	movs	r1, r7
 80105a0:	f7f1 fb26 	bl	8001bf0 <__aeabi_dsub>
 80105a4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80105a6:	9b08      	ldr	r3, [sp, #32]
 80105a8:	3630      	adds	r6, #48	; 0x30
 80105aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80105ac:	701e      	strb	r6, [r3, #0]
 80105ae:	3301      	adds	r3, #1
 80105b0:	0004      	movs	r4, r0
 80105b2:	000d      	movs	r5, r1
 80105b4:	9308      	str	r3, [sp, #32]
 80105b6:	4293      	cmp	r3, r2
 80105b8:	d12d      	bne.n	8010616 <_dtoa_r+0x63e>
 80105ba:	9814      	ldr	r0, [sp, #80]	; 0x50
 80105bc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80105be:	9a06      	ldr	r2, [sp, #24]
 80105c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80105c2:	4694      	mov	ip, r2
 80105c4:	4463      	add	r3, ip
 80105c6:	2200      	movs	r2, #0
 80105c8:	9308      	str	r3, [sp, #32]
 80105ca:	4b47      	ldr	r3, [pc, #284]	; (80106e8 <_dtoa_r+0x710>)
 80105cc:	f7f0 f8f4 	bl	80007b8 <__aeabi_dadd>
 80105d0:	0002      	movs	r2, r0
 80105d2:	000b      	movs	r3, r1
 80105d4:	0020      	movs	r0, r4
 80105d6:	0029      	movs	r1, r5
 80105d8:	f7ef ff50 	bl	800047c <__aeabi_dcmpgt>
 80105dc:	2800      	cmp	r0, #0
 80105de:	d000      	beq.n	80105e2 <_dtoa_r+0x60a>
 80105e0:	e086      	b.n	80106f0 <_dtoa_r+0x718>
 80105e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80105e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80105e6:	2000      	movs	r0, #0
 80105e8:	493f      	ldr	r1, [pc, #252]	; (80106e8 <_dtoa_r+0x710>)
 80105ea:	f7f1 fb01 	bl	8001bf0 <__aeabi_dsub>
 80105ee:	0002      	movs	r2, r0
 80105f0:	000b      	movs	r3, r1
 80105f2:	0020      	movs	r0, r4
 80105f4:	0029      	movs	r1, r5
 80105f6:	f7ef ff2d 	bl	8000454 <__aeabi_dcmplt>
 80105fa:	2800      	cmp	r0, #0
 80105fc:	d100      	bne.n	8010600 <_dtoa_r+0x628>
 80105fe:	e716      	b.n	801042e <_dtoa_r+0x456>
 8010600:	9b08      	ldr	r3, [sp, #32]
 8010602:	001a      	movs	r2, r3
 8010604:	3a01      	subs	r2, #1
 8010606:	9208      	str	r2, [sp, #32]
 8010608:	7812      	ldrb	r2, [r2, #0]
 801060a:	2a30      	cmp	r2, #48	; 0x30
 801060c:	d0f8      	beq.n	8010600 <_dtoa_r+0x628>
 801060e:	9308      	str	r3, [sp, #32]
 8010610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010612:	9303      	str	r3, [sp, #12]
 8010614:	e046      	b.n	80106a4 <_dtoa_r+0x6cc>
 8010616:	2200      	movs	r2, #0
 8010618:	4b2e      	ldr	r3, [pc, #184]	; (80106d4 <_dtoa_r+0x6fc>)
 801061a:	f7f1 f827 	bl	800166c <__aeabi_dmul>
 801061e:	0006      	movs	r6, r0
 8010620:	000f      	movs	r7, r1
 8010622:	e7b2      	b.n	801058a <_dtoa_r+0x5b2>
 8010624:	9b06      	ldr	r3, [sp, #24]
 8010626:	9a06      	ldr	r2, [sp, #24]
 8010628:	930a      	str	r3, [sp, #40]	; 0x28
 801062a:	9b07      	ldr	r3, [sp, #28]
 801062c:	9c08      	ldr	r4, [sp, #32]
 801062e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010630:	3b01      	subs	r3, #1
 8010632:	189b      	adds	r3, r3, r2
 8010634:	930b      	str	r3, [sp, #44]	; 0x2c
 8010636:	0032      	movs	r2, r6
 8010638:	003b      	movs	r3, r7
 801063a:	0020      	movs	r0, r4
 801063c:	0029      	movs	r1, r5
 801063e:	f7f0 fc1b 	bl	8000e78 <__aeabi_ddiv>
 8010642:	f7f1 fe75 	bl	8002330 <__aeabi_d2iz>
 8010646:	9007      	str	r0, [sp, #28]
 8010648:	f7f1 fea8 	bl	800239c <__aeabi_i2d>
 801064c:	0032      	movs	r2, r6
 801064e:	003b      	movs	r3, r7
 8010650:	f7f1 f80c 	bl	800166c <__aeabi_dmul>
 8010654:	0002      	movs	r2, r0
 8010656:	000b      	movs	r3, r1
 8010658:	0020      	movs	r0, r4
 801065a:	0029      	movs	r1, r5
 801065c:	f7f1 fac8 	bl	8001bf0 <__aeabi_dsub>
 8010660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010662:	001a      	movs	r2, r3
 8010664:	3201      	adds	r2, #1
 8010666:	920a      	str	r2, [sp, #40]	; 0x28
 8010668:	9208      	str	r2, [sp, #32]
 801066a:	9a07      	ldr	r2, [sp, #28]
 801066c:	3230      	adds	r2, #48	; 0x30
 801066e:	701a      	strb	r2, [r3, #0]
 8010670:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010672:	429a      	cmp	r2, r3
 8010674:	d14f      	bne.n	8010716 <_dtoa_r+0x73e>
 8010676:	0002      	movs	r2, r0
 8010678:	000b      	movs	r3, r1
 801067a:	f7f0 f89d 	bl	80007b8 <__aeabi_dadd>
 801067e:	0032      	movs	r2, r6
 8010680:	003b      	movs	r3, r7
 8010682:	0004      	movs	r4, r0
 8010684:	000d      	movs	r5, r1
 8010686:	f7ef fef9 	bl	800047c <__aeabi_dcmpgt>
 801068a:	2800      	cmp	r0, #0
 801068c:	d12e      	bne.n	80106ec <_dtoa_r+0x714>
 801068e:	0032      	movs	r2, r6
 8010690:	003b      	movs	r3, r7
 8010692:	0020      	movs	r0, r4
 8010694:	0029      	movs	r1, r5
 8010696:	f7ef fed7 	bl	8000448 <__aeabi_dcmpeq>
 801069a:	2800      	cmp	r0, #0
 801069c:	d002      	beq.n	80106a4 <_dtoa_r+0x6cc>
 801069e:	9b07      	ldr	r3, [sp, #28]
 80106a0:	07de      	lsls	r6, r3, #31
 80106a2:	d423      	bmi.n	80106ec <_dtoa_r+0x714>
 80106a4:	9905      	ldr	r1, [sp, #20]
 80106a6:	9804      	ldr	r0, [sp, #16]
 80106a8:	f7fc f8fe 	bl	800c8a8 <_Bfree>
 80106ac:	2300      	movs	r3, #0
 80106ae:	9a08      	ldr	r2, [sp, #32]
 80106b0:	7013      	strb	r3, [r2, #0]
 80106b2:	9b03      	ldr	r3, [sp, #12]
 80106b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80106b6:	3301      	adds	r3, #1
 80106b8:	6013      	str	r3, [r2, #0]
 80106ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d100      	bne.n	80106c2 <_dtoa_r+0x6ea>
 80106c0:	e4bd      	b.n	801003e <_dtoa_r+0x66>
 80106c2:	9a08      	ldr	r2, [sp, #32]
 80106c4:	601a      	str	r2, [r3, #0]
 80106c6:	e4ba      	b.n	801003e <_dtoa_r+0x66>
 80106c8:	08014728 	.word	0x08014728
 80106cc:	08014700 	.word	0x08014700
 80106d0:	3ff00000 	.word	0x3ff00000
 80106d4:	40240000 	.word	0x40240000
 80106d8:	401c0000 	.word	0x401c0000
 80106dc:	fcc00000 	.word	0xfcc00000
 80106e0:	40140000 	.word	0x40140000
 80106e4:	7cc00000 	.word	0x7cc00000
 80106e8:	3fe00000 	.word	0x3fe00000
 80106ec:	9b03      	ldr	r3, [sp, #12]
 80106ee:	930e      	str	r3, [sp, #56]	; 0x38
 80106f0:	9b08      	ldr	r3, [sp, #32]
 80106f2:	9308      	str	r3, [sp, #32]
 80106f4:	3b01      	subs	r3, #1
 80106f6:	781a      	ldrb	r2, [r3, #0]
 80106f8:	2a39      	cmp	r2, #57	; 0x39
 80106fa:	d108      	bne.n	801070e <_dtoa_r+0x736>
 80106fc:	9a06      	ldr	r2, [sp, #24]
 80106fe:	429a      	cmp	r2, r3
 8010700:	d1f7      	bne.n	80106f2 <_dtoa_r+0x71a>
 8010702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010704:	9906      	ldr	r1, [sp, #24]
 8010706:	3201      	adds	r2, #1
 8010708:	920e      	str	r2, [sp, #56]	; 0x38
 801070a:	2230      	movs	r2, #48	; 0x30
 801070c:	700a      	strb	r2, [r1, #0]
 801070e:	781a      	ldrb	r2, [r3, #0]
 8010710:	3201      	adds	r2, #1
 8010712:	701a      	strb	r2, [r3, #0]
 8010714:	e77c      	b.n	8010610 <_dtoa_r+0x638>
 8010716:	2200      	movs	r2, #0
 8010718:	4ba9      	ldr	r3, [pc, #676]	; (80109c0 <_dtoa_r+0x9e8>)
 801071a:	f7f0 ffa7 	bl	800166c <__aeabi_dmul>
 801071e:	2200      	movs	r2, #0
 8010720:	2300      	movs	r3, #0
 8010722:	0004      	movs	r4, r0
 8010724:	000d      	movs	r5, r1
 8010726:	f7ef fe8f 	bl	8000448 <__aeabi_dcmpeq>
 801072a:	2800      	cmp	r0, #0
 801072c:	d100      	bne.n	8010730 <_dtoa_r+0x758>
 801072e:	e782      	b.n	8010636 <_dtoa_r+0x65e>
 8010730:	e7b8      	b.n	80106a4 <_dtoa_r+0x6cc>
 8010732:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010734:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010736:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010738:	2f00      	cmp	r7, #0
 801073a:	d012      	beq.n	8010762 <_dtoa_r+0x78a>
 801073c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801073e:	2a01      	cmp	r2, #1
 8010740:	dc6e      	bgt.n	8010820 <_dtoa_r+0x848>
 8010742:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010744:	2a00      	cmp	r2, #0
 8010746:	d065      	beq.n	8010814 <_dtoa_r+0x83c>
 8010748:	4a9e      	ldr	r2, [pc, #632]	; (80109c4 <_dtoa_r+0x9ec>)
 801074a:	189b      	adds	r3, r3, r2
 801074c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801074e:	2101      	movs	r1, #1
 8010750:	18d2      	adds	r2, r2, r3
 8010752:	920a      	str	r2, [sp, #40]	; 0x28
 8010754:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010756:	9804      	ldr	r0, [sp, #16]
 8010758:	18d3      	adds	r3, r2, r3
 801075a:	930c      	str	r3, [sp, #48]	; 0x30
 801075c:	f7fc f986 	bl	800ca6c <__i2b>
 8010760:	0007      	movs	r7, r0
 8010762:	2c00      	cmp	r4, #0
 8010764:	d00e      	beq.n	8010784 <_dtoa_r+0x7ac>
 8010766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010768:	2b00      	cmp	r3, #0
 801076a:	dd0b      	ble.n	8010784 <_dtoa_r+0x7ac>
 801076c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801076e:	0023      	movs	r3, r4
 8010770:	4294      	cmp	r4, r2
 8010772:	dd00      	ble.n	8010776 <_dtoa_r+0x79e>
 8010774:	0013      	movs	r3, r2
 8010776:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010778:	1ae4      	subs	r4, r4, r3
 801077a:	1ad2      	subs	r2, r2, r3
 801077c:	920a      	str	r2, [sp, #40]	; 0x28
 801077e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010780:	1ad3      	subs	r3, r2, r3
 8010782:	930c      	str	r3, [sp, #48]	; 0x30
 8010784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010786:	2b00      	cmp	r3, #0
 8010788:	d01e      	beq.n	80107c8 <_dtoa_r+0x7f0>
 801078a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801078c:	2b00      	cmp	r3, #0
 801078e:	d05c      	beq.n	801084a <_dtoa_r+0x872>
 8010790:	2d00      	cmp	r5, #0
 8010792:	dd10      	ble.n	80107b6 <_dtoa_r+0x7de>
 8010794:	0039      	movs	r1, r7
 8010796:	002a      	movs	r2, r5
 8010798:	9804      	ldr	r0, [sp, #16]
 801079a:	f7fc fa2f 	bl	800cbfc <__pow5mult>
 801079e:	9a05      	ldr	r2, [sp, #20]
 80107a0:	0001      	movs	r1, r0
 80107a2:	0007      	movs	r7, r0
 80107a4:	9804      	ldr	r0, [sp, #16]
 80107a6:	f7fc f979 	bl	800ca9c <__multiply>
 80107aa:	0006      	movs	r6, r0
 80107ac:	9905      	ldr	r1, [sp, #20]
 80107ae:	9804      	ldr	r0, [sp, #16]
 80107b0:	f7fc f87a 	bl	800c8a8 <_Bfree>
 80107b4:	9605      	str	r6, [sp, #20]
 80107b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80107b8:	1b5a      	subs	r2, r3, r5
 80107ba:	42ab      	cmp	r3, r5
 80107bc:	d004      	beq.n	80107c8 <_dtoa_r+0x7f0>
 80107be:	9905      	ldr	r1, [sp, #20]
 80107c0:	9804      	ldr	r0, [sp, #16]
 80107c2:	f7fc fa1b 	bl	800cbfc <__pow5mult>
 80107c6:	9005      	str	r0, [sp, #20]
 80107c8:	2101      	movs	r1, #1
 80107ca:	9804      	ldr	r0, [sp, #16]
 80107cc:	f7fc f94e 	bl	800ca6c <__i2b>
 80107d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80107d2:	0006      	movs	r6, r0
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	dd3a      	ble.n	801084e <_dtoa_r+0x876>
 80107d8:	001a      	movs	r2, r3
 80107da:	0001      	movs	r1, r0
 80107dc:	9804      	ldr	r0, [sp, #16]
 80107de:	f7fc fa0d 	bl	800cbfc <__pow5mult>
 80107e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80107e4:	0006      	movs	r6, r0
 80107e6:	2500      	movs	r5, #0
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	dc38      	bgt.n	801085e <_dtoa_r+0x886>
 80107ec:	2500      	movs	r5, #0
 80107ee:	9b08      	ldr	r3, [sp, #32]
 80107f0:	42ab      	cmp	r3, r5
 80107f2:	d130      	bne.n	8010856 <_dtoa_r+0x87e>
 80107f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107f6:	031b      	lsls	r3, r3, #12
 80107f8:	42ab      	cmp	r3, r5
 80107fa:	d12c      	bne.n	8010856 <_dtoa_r+0x87e>
 80107fc:	4b72      	ldr	r3, [pc, #456]	; (80109c8 <_dtoa_r+0x9f0>)
 80107fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010800:	4213      	tst	r3, r2
 8010802:	d028      	beq.n	8010856 <_dtoa_r+0x87e>
 8010804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010806:	3501      	adds	r5, #1
 8010808:	3301      	adds	r3, #1
 801080a:	930a      	str	r3, [sp, #40]	; 0x28
 801080c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801080e:	3301      	adds	r3, #1
 8010810:	930c      	str	r3, [sp, #48]	; 0x30
 8010812:	e020      	b.n	8010856 <_dtoa_r+0x87e>
 8010814:	2336      	movs	r3, #54	; 0x36
 8010816:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010818:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801081a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801081c:	1a9b      	subs	r3, r3, r2
 801081e:	e795      	b.n	801074c <_dtoa_r+0x774>
 8010820:	9b07      	ldr	r3, [sp, #28]
 8010822:	1e5d      	subs	r5, r3, #1
 8010824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010826:	42ab      	cmp	r3, r5
 8010828:	db07      	blt.n	801083a <_dtoa_r+0x862>
 801082a:	1b5d      	subs	r5, r3, r5
 801082c:	9b07      	ldr	r3, [sp, #28]
 801082e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010830:	2b00      	cmp	r3, #0
 8010832:	da8b      	bge.n	801074c <_dtoa_r+0x774>
 8010834:	1ae4      	subs	r4, r4, r3
 8010836:	2300      	movs	r3, #0
 8010838:	e788      	b.n	801074c <_dtoa_r+0x774>
 801083a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801083c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801083e:	1aeb      	subs	r3, r5, r3
 8010840:	18d3      	adds	r3, r2, r3
 8010842:	950d      	str	r5, [sp, #52]	; 0x34
 8010844:	9313      	str	r3, [sp, #76]	; 0x4c
 8010846:	2500      	movs	r5, #0
 8010848:	e7f0      	b.n	801082c <_dtoa_r+0x854>
 801084a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801084c:	e7b7      	b.n	80107be <_dtoa_r+0x7e6>
 801084e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010850:	2500      	movs	r5, #0
 8010852:	2b01      	cmp	r3, #1
 8010854:	ddca      	ble.n	80107ec <_dtoa_r+0x814>
 8010856:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010858:	2001      	movs	r0, #1
 801085a:	2b00      	cmp	r3, #0
 801085c:	d008      	beq.n	8010870 <_dtoa_r+0x898>
 801085e:	6933      	ldr	r3, [r6, #16]
 8010860:	3303      	adds	r3, #3
 8010862:	009b      	lsls	r3, r3, #2
 8010864:	18f3      	adds	r3, r6, r3
 8010866:	6858      	ldr	r0, [r3, #4]
 8010868:	f7fc f8b8 	bl	800c9dc <__hi0bits>
 801086c:	2320      	movs	r3, #32
 801086e:	1a18      	subs	r0, r3, r0
 8010870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010872:	1818      	adds	r0, r3, r0
 8010874:	0002      	movs	r2, r0
 8010876:	231f      	movs	r3, #31
 8010878:	401a      	ands	r2, r3
 801087a:	4218      	tst	r0, r3
 801087c:	d047      	beq.n	801090e <_dtoa_r+0x936>
 801087e:	3301      	adds	r3, #1
 8010880:	1a9b      	subs	r3, r3, r2
 8010882:	2b04      	cmp	r3, #4
 8010884:	dd3f      	ble.n	8010906 <_dtoa_r+0x92e>
 8010886:	231c      	movs	r3, #28
 8010888:	1a9b      	subs	r3, r3, r2
 801088a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801088c:	18e4      	adds	r4, r4, r3
 801088e:	18d2      	adds	r2, r2, r3
 8010890:	920a      	str	r2, [sp, #40]	; 0x28
 8010892:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010894:	18d3      	adds	r3, r2, r3
 8010896:	930c      	str	r3, [sp, #48]	; 0x30
 8010898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801089a:	2b00      	cmp	r3, #0
 801089c:	dd05      	ble.n	80108aa <_dtoa_r+0x8d2>
 801089e:	001a      	movs	r2, r3
 80108a0:	9905      	ldr	r1, [sp, #20]
 80108a2:	9804      	ldr	r0, [sp, #16]
 80108a4:	f7fc f9ec 	bl	800cc80 <__lshift>
 80108a8:	9005      	str	r0, [sp, #20]
 80108aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	dd05      	ble.n	80108bc <_dtoa_r+0x8e4>
 80108b0:	0031      	movs	r1, r6
 80108b2:	001a      	movs	r2, r3
 80108b4:	9804      	ldr	r0, [sp, #16]
 80108b6:	f7fc f9e3 	bl	800cc80 <__lshift>
 80108ba:	0006      	movs	r6, r0
 80108bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d027      	beq.n	8010912 <_dtoa_r+0x93a>
 80108c2:	0031      	movs	r1, r6
 80108c4:	9805      	ldr	r0, [sp, #20]
 80108c6:	f7fc fa49 	bl	800cd5c <__mcmp>
 80108ca:	2800      	cmp	r0, #0
 80108cc:	da21      	bge.n	8010912 <_dtoa_r+0x93a>
 80108ce:	9b03      	ldr	r3, [sp, #12]
 80108d0:	220a      	movs	r2, #10
 80108d2:	3b01      	subs	r3, #1
 80108d4:	9303      	str	r3, [sp, #12]
 80108d6:	9905      	ldr	r1, [sp, #20]
 80108d8:	2300      	movs	r3, #0
 80108da:	9804      	ldr	r0, [sp, #16]
 80108dc:	f7fb ffee 	bl	800c8bc <__multadd>
 80108e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80108e2:	9005      	str	r0, [sp, #20]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d100      	bne.n	80108ea <_dtoa_r+0x912>
 80108e8:	e15d      	b.n	8010ba6 <_dtoa_r+0xbce>
 80108ea:	2300      	movs	r3, #0
 80108ec:	0039      	movs	r1, r7
 80108ee:	220a      	movs	r2, #10
 80108f0:	9804      	ldr	r0, [sp, #16]
 80108f2:	f7fb ffe3 	bl	800c8bc <__multadd>
 80108f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108f8:	0007      	movs	r7, r0
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	dc49      	bgt.n	8010992 <_dtoa_r+0x9ba>
 80108fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010900:	2b02      	cmp	r3, #2
 8010902:	dc0e      	bgt.n	8010922 <_dtoa_r+0x94a>
 8010904:	e045      	b.n	8010992 <_dtoa_r+0x9ba>
 8010906:	2b04      	cmp	r3, #4
 8010908:	d0c6      	beq.n	8010898 <_dtoa_r+0x8c0>
 801090a:	331c      	adds	r3, #28
 801090c:	e7bd      	b.n	801088a <_dtoa_r+0x8b2>
 801090e:	0013      	movs	r3, r2
 8010910:	e7fb      	b.n	801090a <_dtoa_r+0x932>
 8010912:	9b07      	ldr	r3, [sp, #28]
 8010914:	2b00      	cmp	r3, #0
 8010916:	dc36      	bgt.n	8010986 <_dtoa_r+0x9ae>
 8010918:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801091a:	2b02      	cmp	r3, #2
 801091c:	dd33      	ble.n	8010986 <_dtoa_r+0x9ae>
 801091e:	9b07      	ldr	r3, [sp, #28]
 8010920:	930b      	str	r3, [sp, #44]	; 0x2c
 8010922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010924:	2b00      	cmp	r3, #0
 8010926:	d10c      	bne.n	8010942 <_dtoa_r+0x96a>
 8010928:	0031      	movs	r1, r6
 801092a:	2205      	movs	r2, #5
 801092c:	9804      	ldr	r0, [sp, #16]
 801092e:	f7fb ffc5 	bl	800c8bc <__multadd>
 8010932:	0006      	movs	r6, r0
 8010934:	0001      	movs	r1, r0
 8010936:	9805      	ldr	r0, [sp, #20]
 8010938:	f7fc fa10 	bl	800cd5c <__mcmp>
 801093c:	2800      	cmp	r0, #0
 801093e:	dd00      	ble.n	8010942 <_dtoa_r+0x96a>
 8010940:	e59f      	b.n	8010482 <_dtoa_r+0x4aa>
 8010942:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010944:	43db      	mvns	r3, r3
 8010946:	9303      	str	r3, [sp, #12]
 8010948:	9b06      	ldr	r3, [sp, #24]
 801094a:	9308      	str	r3, [sp, #32]
 801094c:	2500      	movs	r5, #0
 801094e:	0031      	movs	r1, r6
 8010950:	9804      	ldr	r0, [sp, #16]
 8010952:	f7fb ffa9 	bl	800c8a8 <_Bfree>
 8010956:	2f00      	cmp	r7, #0
 8010958:	d100      	bne.n	801095c <_dtoa_r+0x984>
 801095a:	e6a3      	b.n	80106a4 <_dtoa_r+0x6cc>
 801095c:	2d00      	cmp	r5, #0
 801095e:	d005      	beq.n	801096c <_dtoa_r+0x994>
 8010960:	42bd      	cmp	r5, r7
 8010962:	d003      	beq.n	801096c <_dtoa_r+0x994>
 8010964:	0029      	movs	r1, r5
 8010966:	9804      	ldr	r0, [sp, #16]
 8010968:	f7fb ff9e 	bl	800c8a8 <_Bfree>
 801096c:	0039      	movs	r1, r7
 801096e:	9804      	ldr	r0, [sp, #16]
 8010970:	f7fb ff9a 	bl	800c8a8 <_Bfree>
 8010974:	e696      	b.n	80106a4 <_dtoa_r+0x6cc>
 8010976:	2600      	movs	r6, #0
 8010978:	0037      	movs	r7, r6
 801097a:	e7e2      	b.n	8010942 <_dtoa_r+0x96a>
 801097c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801097e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010980:	9303      	str	r3, [sp, #12]
 8010982:	0037      	movs	r7, r6
 8010984:	e57d      	b.n	8010482 <_dtoa_r+0x4aa>
 8010986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010988:	2b00      	cmp	r3, #0
 801098a:	d100      	bne.n	801098e <_dtoa_r+0x9b6>
 801098c:	e0c3      	b.n	8010b16 <_dtoa_r+0xb3e>
 801098e:	9b07      	ldr	r3, [sp, #28]
 8010990:	930b      	str	r3, [sp, #44]	; 0x2c
 8010992:	2c00      	cmp	r4, #0
 8010994:	dd05      	ble.n	80109a2 <_dtoa_r+0x9ca>
 8010996:	0039      	movs	r1, r7
 8010998:	0022      	movs	r2, r4
 801099a:	9804      	ldr	r0, [sp, #16]
 801099c:	f7fc f970 	bl	800cc80 <__lshift>
 80109a0:	0007      	movs	r7, r0
 80109a2:	0038      	movs	r0, r7
 80109a4:	2d00      	cmp	r5, #0
 80109a6:	d024      	beq.n	80109f2 <_dtoa_r+0xa1a>
 80109a8:	6879      	ldr	r1, [r7, #4]
 80109aa:	9804      	ldr	r0, [sp, #16]
 80109ac:	f7fb ff54 	bl	800c858 <_Balloc>
 80109b0:	1e04      	subs	r4, r0, #0
 80109b2:	d111      	bne.n	80109d8 <_dtoa_r+0xa00>
 80109b4:	0022      	movs	r2, r4
 80109b6:	4b05      	ldr	r3, [pc, #20]	; (80109cc <_dtoa_r+0x9f4>)
 80109b8:	4805      	ldr	r0, [pc, #20]	; (80109d0 <_dtoa_r+0x9f8>)
 80109ba:	4906      	ldr	r1, [pc, #24]	; (80109d4 <_dtoa_r+0x9fc>)
 80109bc:	e43c      	b.n	8010238 <_dtoa_r+0x260>
 80109be:	46c0      	nop			; (mov r8, r8)
 80109c0:	40240000 	.word	0x40240000
 80109c4:	00000433 	.word	0x00000433
 80109c8:	7ff00000 	.word	0x7ff00000
 80109cc:	08014631 	.word	0x08014631
 80109d0:	080148c1 	.word	0x080148c1
 80109d4:	000002ef 	.word	0x000002ef
 80109d8:	0039      	movs	r1, r7
 80109da:	693a      	ldr	r2, [r7, #16]
 80109dc:	310c      	adds	r1, #12
 80109de:	3202      	adds	r2, #2
 80109e0:	0092      	lsls	r2, r2, #2
 80109e2:	300c      	adds	r0, #12
 80109e4:	f7fb fa9d 	bl	800bf22 <memcpy>
 80109e8:	2201      	movs	r2, #1
 80109ea:	0021      	movs	r1, r4
 80109ec:	9804      	ldr	r0, [sp, #16]
 80109ee:	f7fc f947 	bl	800cc80 <__lshift>
 80109f2:	9b06      	ldr	r3, [sp, #24]
 80109f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80109f6:	9307      	str	r3, [sp, #28]
 80109f8:	3b01      	subs	r3, #1
 80109fa:	189b      	adds	r3, r3, r2
 80109fc:	2201      	movs	r2, #1
 80109fe:	003d      	movs	r5, r7
 8010a00:	0007      	movs	r7, r0
 8010a02:	930e      	str	r3, [sp, #56]	; 0x38
 8010a04:	9b08      	ldr	r3, [sp, #32]
 8010a06:	4013      	ands	r3, r2
 8010a08:	930d      	str	r3, [sp, #52]	; 0x34
 8010a0a:	0031      	movs	r1, r6
 8010a0c:	9805      	ldr	r0, [sp, #20]
 8010a0e:	f7ff fa53 	bl	800feb8 <quorem>
 8010a12:	0029      	movs	r1, r5
 8010a14:	0004      	movs	r4, r0
 8010a16:	900b      	str	r0, [sp, #44]	; 0x2c
 8010a18:	9805      	ldr	r0, [sp, #20]
 8010a1a:	f7fc f99f 	bl	800cd5c <__mcmp>
 8010a1e:	003a      	movs	r2, r7
 8010a20:	900c      	str	r0, [sp, #48]	; 0x30
 8010a22:	0031      	movs	r1, r6
 8010a24:	9804      	ldr	r0, [sp, #16]
 8010a26:	f7fc f9b5 	bl	800cd94 <__mdiff>
 8010a2a:	2201      	movs	r2, #1
 8010a2c:	68c3      	ldr	r3, [r0, #12]
 8010a2e:	3430      	adds	r4, #48	; 0x30
 8010a30:	9008      	str	r0, [sp, #32]
 8010a32:	920a      	str	r2, [sp, #40]	; 0x28
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d104      	bne.n	8010a42 <_dtoa_r+0xa6a>
 8010a38:	0001      	movs	r1, r0
 8010a3a:	9805      	ldr	r0, [sp, #20]
 8010a3c:	f7fc f98e 	bl	800cd5c <__mcmp>
 8010a40:	900a      	str	r0, [sp, #40]	; 0x28
 8010a42:	9908      	ldr	r1, [sp, #32]
 8010a44:	9804      	ldr	r0, [sp, #16]
 8010a46:	f7fb ff2f 	bl	800c8a8 <_Bfree>
 8010a4a:	9b07      	ldr	r3, [sp, #28]
 8010a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a4e:	3301      	adds	r3, #1
 8010a50:	9308      	str	r3, [sp, #32]
 8010a52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010a54:	4313      	orrs	r3, r2
 8010a56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a58:	4313      	orrs	r3, r2
 8010a5a:	d109      	bne.n	8010a70 <_dtoa_r+0xa98>
 8010a5c:	2c39      	cmp	r4, #57	; 0x39
 8010a5e:	d022      	beq.n	8010aa6 <_dtoa_r+0xace>
 8010a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	dd01      	ble.n	8010a6a <_dtoa_r+0xa92>
 8010a66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010a68:	3431      	adds	r4, #49	; 0x31
 8010a6a:	9b07      	ldr	r3, [sp, #28]
 8010a6c:	701c      	strb	r4, [r3, #0]
 8010a6e:	e76e      	b.n	801094e <_dtoa_r+0x976>
 8010a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	db04      	blt.n	8010a80 <_dtoa_r+0xaa8>
 8010a76:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010a78:	4313      	orrs	r3, r2
 8010a7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a7c:	4313      	orrs	r3, r2
 8010a7e:	d11e      	bne.n	8010abe <_dtoa_r+0xae6>
 8010a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	ddf1      	ble.n	8010a6a <_dtoa_r+0xa92>
 8010a86:	9905      	ldr	r1, [sp, #20]
 8010a88:	2201      	movs	r2, #1
 8010a8a:	9804      	ldr	r0, [sp, #16]
 8010a8c:	f7fc f8f8 	bl	800cc80 <__lshift>
 8010a90:	0031      	movs	r1, r6
 8010a92:	9005      	str	r0, [sp, #20]
 8010a94:	f7fc f962 	bl	800cd5c <__mcmp>
 8010a98:	2800      	cmp	r0, #0
 8010a9a:	dc02      	bgt.n	8010aa2 <_dtoa_r+0xaca>
 8010a9c:	d1e5      	bne.n	8010a6a <_dtoa_r+0xa92>
 8010a9e:	07e3      	lsls	r3, r4, #31
 8010aa0:	d5e3      	bpl.n	8010a6a <_dtoa_r+0xa92>
 8010aa2:	2c39      	cmp	r4, #57	; 0x39
 8010aa4:	d1df      	bne.n	8010a66 <_dtoa_r+0xa8e>
 8010aa6:	2339      	movs	r3, #57	; 0x39
 8010aa8:	9a07      	ldr	r2, [sp, #28]
 8010aaa:	7013      	strb	r3, [r2, #0]
 8010aac:	9b08      	ldr	r3, [sp, #32]
 8010aae:	9308      	str	r3, [sp, #32]
 8010ab0:	3b01      	subs	r3, #1
 8010ab2:	781a      	ldrb	r2, [r3, #0]
 8010ab4:	2a39      	cmp	r2, #57	; 0x39
 8010ab6:	d063      	beq.n	8010b80 <_dtoa_r+0xba8>
 8010ab8:	3201      	adds	r2, #1
 8010aba:	701a      	strb	r2, [r3, #0]
 8010abc:	e747      	b.n	801094e <_dtoa_r+0x976>
 8010abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	dd03      	ble.n	8010acc <_dtoa_r+0xaf4>
 8010ac4:	2c39      	cmp	r4, #57	; 0x39
 8010ac6:	d0ee      	beq.n	8010aa6 <_dtoa_r+0xace>
 8010ac8:	3401      	adds	r4, #1
 8010aca:	e7ce      	b.n	8010a6a <_dtoa_r+0xa92>
 8010acc:	9b07      	ldr	r3, [sp, #28]
 8010ace:	9a07      	ldr	r2, [sp, #28]
 8010ad0:	701c      	strb	r4, [r3, #0]
 8010ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	d03e      	beq.n	8010b56 <_dtoa_r+0xb7e>
 8010ad8:	2300      	movs	r3, #0
 8010ada:	220a      	movs	r2, #10
 8010adc:	9905      	ldr	r1, [sp, #20]
 8010ade:	9804      	ldr	r0, [sp, #16]
 8010ae0:	f7fb feec 	bl	800c8bc <__multadd>
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	9005      	str	r0, [sp, #20]
 8010ae8:	220a      	movs	r2, #10
 8010aea:	0029      	movs	r1, r5
 8010aec:	9804      	ldr	r0, [sp, #16]
 8010aee:	42bd      	cmp	r5, r7
 8010af0:	d106      	bne.n	8010b00 <_dtoa_r+0xb28>
 8010af2:	f7fb fee3 	bl	800c8bc <__multadd>
 8010af6:	0005      	movs	r5, r0
 8010af8:	0007      	movs	r7, r0
 8010afa:	9b08      	ldr	r3, [sp, #32]
 8010afc:	9307      	str	r3, [sp, #28]
 8010afe:	e784      	b.n	8010a0a <_dtoa_r+0xa32>
 8010b00:	f7fb fedc 	bl	800c8bc <__multadd>
 8010b04:	0039      	movs	r1, r7
 8010b06:	0005      	movs	r5, r0
 8010b08:	2300      	movs	r3, #0
 8010b0a:	220a      	movs	r2, #10
 8010b0c:	9804      	ldr	r0, [sp, #16]
 8010b0e:	f7fb fed5 	bl	800c8bc <__multadd>
 8010b12:	0007      	movs	r7, r0
 8010b14:	e7f1      	b.n	8010afa <_dtoa_r+0xb22>
 8010b16:	9b07      	ldr	r3, [sp, #28]
 8010b18:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b1a:	2500      	movs	r5, #0
 8010b1c:	0031      	movs	r1, r6
 8010b1e:	9805      	ldr	r0, [sp, #20]
 8010b20:	f7ff f9ca 	bl	800feb8 <quorem>
 8010b24:	9b06      	ldr	r3, [sp, #24]
 8010b26:	3030      	adds	r0, #48	; 0x30
 8010b28:	5558      	strb	r0, [r3, r5]
 8010b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b2c:	3501      	adds	r5, #1
 8010b2e:	0004      	movs	r4, r0
 8010b30:	42ab      	cmp	r3, r5
 8010b32:	dd07      	ble.n	8010b44 <_dtoa_r+0xb6c>
 8010b34:	2300      	movs	r3, #0
 8010b36:	220a      	movs	r2, #10
 8010b38:	9905      	ldr	r1, [sp, #20]
 8010b3a:	9804      	ldr	r0, [sp, #16]
 8010b3c:	f7fb febe 	bl	800c8bc <__multadd>
 8010b40:	9005      	str	r0, [sp, #20]
 8010b42:	e7eb      	b.n	8010b1c <_dtoa_r+0xb44>
 8010b44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010b46:	2301      	movs	r3, #1
 8010b48:	2a00      	cmp	r2, #0
 8010b4a:	dd00      	ble.n	8010b4e <_dtoa_r+0xb76>
 8010b4c:	0013      	movs	r3, r2
 8010b4e:	2500      	movs	r5, #0
 8010b50:	9a06      	ldr	r2, [sp, #24]
 8010b52:	18d3      	adds	r3, r2, r3
 8010b54:	9308      	str	r3, [sp, #32]
 8010b56:	9905      	ldr	r1, [sp, #20]
 8010b58:	2201      	movs	r2, #1
 8010b5a:	9804      	ldr	r0, [sp, #16]
 8010b5c:	f7fc f890 	bl	800cc80 <__lshift>
 8010b60:	0031      	movs	r1, r6
 8010b62:	9005      	str	r0, [sp, #20]
 8010b64:	f7fc f8fa 	bl	800cd5c <__mcmp>
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	dc9f      	bgt.n	8010aac <_dtoa_r+0xad4>
 8010b6c:	d101      	bne.n	8010b72 <_dtoa_r+0xb9a>
 8010b6e:	07e4      	lsls	r4, r4, #31
 8010b70:	d49c      	bmi.n	8010aac <_dtoa_r+0xad4>
 8010b72:	9b08      	ldr	r3, [sp, #32]
 8010b74:	9308      	str	r3, [sp, #32]
 8010b76:	3b01      	subs	r3, #1
 8010b78:	781a      	ldrb	r2, [r3, #0]
 8010b7a:	2a30      	cmp	r2, #48	; 0x30
 8010b7c:	d0fa      	beq.n	8010b74 <_dtoa_r+0xb9c>
 8010b7e:	e6e6      	b.n	801094e <_dtoa_r+0x976>
 8010b80:	9a06      	ldr	r2, [sp, #24]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d193      	bne.n	8010aae <_dtoa_r+0xad6>
 8010b86:	9b03      	ldr	r3, [sp, #12]
 8010b88:	3301      	adds	r3, #1
 8010b8a:	9303      	str	r3, [sp, #12]
 8010b8c:	2331      	movs	r3, #49	; 0x31
 8010b8e:	7013      	strb	r3, [r2, #0]
 8010b90:	e6dd      	b.n	801094e <_dtoa_r+0x976>
 8010b92:	4b09      	ldr	r3, [pc, #36]	; (8010bb8 <_dtoa_r+0xbe0>)
 8010b94:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010b96:	9306      	str	r3, [sp, #24]
 8010b98:	4b08      	ldr	r3, [pc, #32]	; (8010bbc <_dtoa_r+0xbe4>)
 8010b9a:	2a00      	cmp	r2, #0
 8010b9c:	d001      	beq.n	8010ba2 <_dtoa_r+0xbca>
 8010b9e:	f7ff fa4c 	bl	801003a <_dtoa_r+0x62>
 8010ba2:	f7ff fa4c 	bl	801003e <_dtoa_r+0x66>
 8010ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	dcb6      	bgt.n	8010b1a <_dtoa_r+0xb42>
 8010bac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010bae:	2b02      	cmp	r3, #2
 8010bb0:	dd00      	ble.n	8010bb4 <_dtoa_r+0xbdc>
 8010bb2:	e6b6      	b.n	8010922 <_dtoa_r+0x94a>
 8010bb4:	e7b1      	b.n	8010b1a <_dtoa_r+0xb42>
 8010bb6:	46c0      	nop			; (mov r8, r8)
 8010bb8:	080148b4 	.word	0x080148b4
 8010bbc:	080148bc 	.word	0x080148bc

08010bc0 <realloc>:
 8010bc0:	b510      	push	{r4, lr}
 8010bc2:	4b03      	ldr	r3, [pc, #12]	; (8010bd0 <realloc+0x10>)
 8010bc4:	000a      	movs	r2, r1
 8010bc6:	0001      	movs	r1, r0
 8010bc8:	6818      	ldr	r0, [r3, #0]
 8010bca:	f000 f803 	bl	8010bd4 <_realloc_r>
 8010bce:	bd10      	pop	{r4, pc}
 8010bd0:	200006d0 	.word	0x200006d0

08010bd4 <_realloc_r>:
 8010bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bd6:	b087      	sub	sp, #28
 8010bd8:	1e0c      	subs	r4, r1, #0
 8010bda:	9001      	str	r0, [sp, #4]
 8010bdc:	9205      	str	r2, [sp, #20]
 8010bde:	d106      	bne.n	8010bee <_realloc_r+0x1a>
 8010be0:	0011      	movs	r1, r2
 8010be2:	f7f9 fe05 	bl	800a7f0 <_malloc_r>
 8010be6:	0007      	movs	r7, r0
 8010be8:	0038      	movs	r0, r7
 8010bea:	b007      	add	sp, #28
 8010bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bee:	9801      	ldr	r0, [sp, #4]
 8010bf0:	f7fa f812 	bl	800ac18 <__malloc_lock>
 8010bf4:	0023      	movs	r3, r4
 8010bf6:	3b08      	subs	r3, #8
 8010bf8:	685f      	ldr	r7, [r3, #4]
 8010bfa:	9304      	str	r3, [sp, #16]
 8010bfc:	9b05      	ldr	r3, [sp, #20]
 8010bfe:	330b      	adds	r3, #11
 8010c00:	2b16      	cmp	r3, #22
 8010c02:	d908      	bls.n	8010c16 <_realloc_r+0x42>
 8010c04:	2207      	movs	r2, #7
 8010c06:	4393      	bics	r3, r2
 8010c08:	9300      	str	r3, [sp, #0]
 8010c0a:	d506      	bpl.n	8010c1a <_realloc_r+0x46>
 8010c0c:	230c      	movs	r3, #12
 8010c0e:	9a01      	ldr	r2, [sp, #4]
 8010c10:	2700      	movs	r7, #0
 8010c12:	6013      	str	r3, [r2, #0]
 8010c14:	e7e8      	b.n	8010be8 <_realloc_r+0x14>
 8010c16:	2310      	movs	r3, #16
 8010c18:	9300      	str	r3, [sp, #0]
 8010c1a:	9b00      	ldr	r3, [sp, #0]
 8010c1c:	9a05      	ldr	r2, [sp, #20]
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d3f4      	bcc.n	8010c0c <_realloc_r+0x38>
 8010c22:	9b04      	ldr	r3, [sp, #16]
 8010c24:	003a      	movs	r2, r7
 8010c26:	9302      	str	r3, [sp, #8]
 8010c28:	2303      	movs	r3, #3
 8010c2a:	439a      	bics	r2, r3
 8010c2c:	9b00      	ldr	r3, [sp, #0]
 8010c2e:	9203      	str	r2, [sp, #12]
 8010c30:	4293      	cmp	r3, r2
 8010c32:	dc00      	bgt.n	8010c36 <_realloc_r+0x62>
 8010c34:	e169      	b.n	8010f0a <_realloc_r+0x336>
 8010c36:	9b04      	ldr	r3, [sp, #16]
 8010c38:	48b8      	ldr	r0, [pc, #736]	; (8010f1c <_realloc_r+0x348>)
 8010c3a:	189b      	adds	r3, r3, r2
 8010c3c:	6882      	ldr	r2, [r0, #8]
 8010c3e:	4694      	mov	ip, r2
 8010c40:	685a      	ldr	r2, [r3, #4]
 8010c42:	459c      	cmp	ip, r3
 8010c44:	d006      	beq.n	8010c54 <_realloc_r+0x80>
 8010c46:	2501      	movs	r5, #1
 8010c48:	0011      	movs	r1, r2
 8010c4a:	43a9      	bics	r1, r5
 8010c4c:	1859      	adds	r1, r3, r1
 8010c4e:	6849      	ldr	r1, [r1, #4]
 8010c50:	4229      	tst	r1, r5
 8010c52:	d144      	bne.n	8010cde <_realloc_r+0x10a>
 8010c54:	2103      	movs	r1, #3
 8010c56:	438a      	bics	r2, r1
 8010c58:	9903      	ldr	r1, [sp, #12]
 8010c5a:	188e      	adds	r6, r1, r2
 8010c5c:	9900      	ldr	r1, [sp, #0]
 8010c5e:	459c      	cmp	ip, r3
 8010c60:	d117      	bne.n	8010c92 <_realloc_r+0xbe>
 8010c62:	3110      	adds	r1, #16
 8010c64:	42b1      	cmp	r1, r6
 8010c66:	dc3c      	bgt.n	8010ce2 <_realloc_r+0x10e>
 8010c68:	9a00      	ldr	r2, [sp, #0]
 8010c6a:	2101      	movs	r1, #1
 8010c6c:	4694      	mov	ip, r2
 8010c6e:	1ab6      	subs	r6, r6, r2
 8010c70:	0022      	movs	r2, r4
 8010c72:	9b04      	ldr	r3, [sp, #16]
 8010c74:	430e      	orrs	r6, r1
 8010c76:	4463      	add	r3, ip
 8010c78:	6083      	str	r3, [r0, #8]
 8010c7a:	3a08      	subs	r2, #8
 8010c7c:	605e      	str	r6, [r3, #4]
 8010c7e:	6853      	ldr	r3, [r2, #4]
 8010c80:	9801      	ldr	r0, [sp, #4]
 8010c82:	400b      	ands	r3, r1
 8010c84:	4661      	mov	r1, ip
 8010c86:	430b      	orrs	r3, r1
 8010c88:	6053      	str	r3, [r2, #4]
 8010c8a:	f7f9 ffcd 	bl	800ac28 <__malloc_unlock>
 8010c8e:	0027      	movs	r7, r4
 8010c90:	e7aa      	b.n	8010be8 <_realloc_r+0x14>
 8010c92:	42b1      	cmp	r1, r6
 8010c94:	dc25      	bgt.n	8010ce2 <_realloc_r+0x10e>
 8010c96:	68da      	ldr	r2, [r3, #12]
 8010c98:	689b      	ldr	r3, [r3, #8]
 8010c9a:	60da      	str	r2, [r3, #12]
 8010c9c:	6093      	str	r3, [r2, #8]
 8010c9e:	9b00      	ldr	r3, [sp, #0]
 8010ca0:	9a02      	ldr	r2, [sp, #8]
 8010ca2:	1af4      	subs	r4, r6, r3
 8010ca4:	9b02      	ldr	r3, [sp, #8]
 8010ca6:	1992      	adds	r2, r2, r6
 8010ca8:	6858      	ldr	r0, [r3, #4]
 8010caa:	2301      	movs	r3, #1
 8010cac:	4018      	ands	r0, r3
 8010cae:	2c0f      	cmp	r4, #15
 8010cb0:	d800      	bhi.n	8010cb4 <_realloc_r+0xe0>
 8010cb2:	e12c      	b.n	8010f0e <_realloc_r+0x33a>
 8010cb4:	9d00      	ldr	r5, [sp, #0]
 8010cb6:	9902      	ldr	r1, [sp, #8]
 8010cb8:	4328      	orrs	r0, r5
 8010cba:	1949      	adds	r1, r1, r5
 8010cbc:	9d02      	ldr	r5, [sp, #8]
 8010cbe:	431c      	orrs	r4, r3
 8010cc0:	6068      	str	r0, [r5, #4]
 8010cc2:	604c      	str	r4, [r1, #4]
 8010cc4:	6850      	ldr	r0, [r2, #4]
 8010cc6:	3108      	adds	r1, #8
 8010cc8:	4303      	orrs	r3, r0
 8010cca:	6053      	str	r3, [r2, #4]
 8010ccc:	9801      	ldr	r0, [sp, #4]
 8010cce:	f7fb f9a3 	bl	800c018 <_free_r>
 8010cd2:	9801      	ldr	r0, [sp, #4]
 8010cd4:	f7f9 ffa8 	bl	800ac28 <__malloc_unlock>
 8010cd8:	9f02      	ldr	r7, [sp, #8]
 8010cda:	3708      	adds	r7, #8
 8010cdc:	e784      	b.n	8010be8 <_realloc_r+0x14>
 8010cde:	2200      	movs	r2, #0
 8010ce0:	0013      	movs	r3, r2
 8010ce2:	07ff      	lsls	r7, r7, #31
 8010ce4:	d500      	bpl.n	8010ce8 <_realloc_r+0x114>
 8010ce6:	e0c6      	b.n	8010e76 <_realloc_r+0x2a2>
 8010ce8:	0021      	movs	r1, r4
 8010cea:	2003      	movs	r0, #3
 8010cec:	3908      	subs	r1, #8
 8010cee:	680d      	ldr	r5, [r1, #0]
 8010cf0:	9904      	ldr	r1, [sp, #16]
 8010cf2:	1b4d      	subs	r5, r1, r5
 8010cf4:	6869      	ldr	r1, [r5, #4]
 8010cf6:	4381      	bics	r1, r0
 8010cf8:	9803      	ldr	r0, [sp, #12]
 8010cfa:	180f      	adds	r7, r1, r0
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d100      	bne.n	8010d02 <_realloc_r+0x12e>
 8010d00:	e084      	b.n	8010e0c <_realloc_r+0x238>
 8010d02:	19d6      	adds	r6, r2, r7
 8010d04:	459c      	cmp	ip, r3
 8010d06:	d148      	bne.n	8010d9a <_realloc_r+0x1c6>
 8010d08:	9b00      	ldr	r3, [sp, #0]
 8010d0a:	3310      	adds	r3, #16
 8010d0c:	42b3      	cmp	r3, r6
 8010d0e:	dc7d      	bgt.n	8010e0c <_realloc_r+0x238>
 8010d10:	68aa      	ldr	r2, [r5, #8]
 8010d12:	68eb      	ldr	r3, [r5, #12]
 8010d14:	002f      	movs	r7, r5
 8010d16:	60d3      	str	r3, [r2, #12]
 8010d18:	609a      	str	r2, [r3, #8]
 8010d1a:	0002      	movs	r2, r0
 8010d1c:	3a04      	subs	r2, #4
 8010d1e:	3708      	adds	r7, #8
 8010d20:	2a24      	cmp	r2, #36	; 0x24
 8010d22:	d835      	bhi.n	8010d90 <_realloc_r+0x1bc>
 8010d24:	003b      	movs	r3, r7
 8010d26:	2a13      	cmp	r2, #19
 8010d28:	d908      	bls.n	8010d3c <_realloc_r+0x168>
 8010d2a:	6823      	ldr	r3, [r4, #0]
 8010d2c:	60ab      	str	r3, [r5, #8]
 8010d2e:	6863      	ldr	r3, [r4, #4]
 8010d30:	60eb      	str	r3, [r5, #12]
 8010d32:	2a1b      	cmp	r2, #27
 8010d34:	d81a      	bhi.n	8010d6c <_realloc_r+0x198>
 8010d36:	002b      	movs	r3, r5
 8010d38:	3408      	adds	r4, #8
 8010d3a:	3310      	adds	r3, #16
 8010d3c:	6822      	ldr	r2, [r4, #0]
 8010d3e:	601a      	str	r2, [r3, #0]
 8010d40:	6862      	ldr	r2, [r4, #4]
 8010d42:	605a      	str	r2, [r3, #4]
 8010d44:	68a2      	ldr	r2, [r4, #8]
 8010d46:	609a      	str	r2, [r3, #8]
 8010d48:	9b00      	ldr	r3, [sp, #0]
 8010d4a:	4a74      	ldr	r2, [pc, #464]	; (8010f1c <_realloc_r+0x348>)
 8010d4c:	18eb      	adds	r3, r5, r3
 8010d4e:	6093      	str	r3, [r2, #8]
 8010d50:	9a00      	ldr	r2, [sp, #0]
 8010d52:	1ab6      	subs	r6, r6, r2
 8010d54:	2201      	movs	r2, #1
 8010d56:	4316      	orrs	r6, r2
 8010d58:	605e      	str	r6, [r3, #4]
 8010d5a:	686b      	ldr	r3, [r5, #4]
 8010d5c:	4013      	ands	r3, r2
 8010d5e:	9a00      	ldr	r2, [sp, #0]
 8010d60:	4313      	orrs	r3, r2
 8010d62:	606b      	str	r3, [r5, #4]
 8010d64:	9801      	ldr	r0, [sp, #4]
 8010d66:	f7f9 ff5f 	bl	800ac28 <__malloc_unlock>
 8010d6a:	e73d      	b.n	8010be8 <_realloc_r+0x14>
 8010d6c:	68a3      	ldr	r3, [r4, #8]
 8010d6e:	612b      	str	r3, [r5, #16]
 8010d70:	68e3      	ldr	r3, [r4, #12]
 8010d72:	616b      	str	r3, [r5, #20]
 8010d74:	2a24      	cmp	r2, #36	; 0x24
 8010d76:	d003      	beq.n	8010d80 <_realloc_r+0x1ac>
 8010d78:	002b      	movs	r3, r5
 8010d7a:	3410      	adds	r4, #16
 8010d7c:	3318      	adds	r3, #24
 8010d7e:	e7dd      	b.n	8010d3c <_realloc_r+0x168>
 8010d80:	6923      	ldr	r3, [r4, #16]
 8010d82:	61ab      	str	r3, [r5, #24]
 8010d84:	002b      	movs	r3, r5
 8010d86:	6962      	ldr	r2, [r4, #20]
 8010d88:	3320      	adds	r3, #32
 8010d8a:	61ea      	str	r2, [r5, #28]
 8010d8c:	3418      	adds	r4, #24
 8010d8e:	e7d5      	b.n	8010d3c <_realloc_r+0x168>
 8010d90:	0021      	movs	r1, r4
 8010d92:	0038      	movs	r0, r7
 8010d94:	f001 fbb5 	bl	8012502 <memmove>
 8010d98:	e7d6      	b.n	8010d48 <_realloc_r+0x174>
 8010d9a:	9a00      	ldr	r2, [sp, #0]
 8010d9c:	42b2      	cmp	r2, r6
 8010d9e:	dc35      	bgt.n	8010e0c <_realloc_r+0x238>
 8010da0:	0028      	movs	r0, r5
 8010da2:	68da      	ldr	r2, [r3, #12]
 8010da4:	689b      	ldr	r3, [r3, #8]
 8010da6:	3008      	adds	r0, #8
 8010da8:	60da      	str	r2, [r3, #12]
 8010daa:	6093      	str	r3, [r2, #8]
 8010dac:	68aa      	ldr	r2, [r5, #8]
 8010dae:	68eb      	ldr	r3, [r5, #12]
 8010db0:	60d3      	str	r3, [r2, #12]
 8010db2:	609a      	str	r2, [r3, #8]
 8010db4:	9a03      	ldr	r2, [sp, #12]
 8010db6:	3a04      	subs	r2, #4
 8010db8:	2a24      	cmp	r2, #36	; 0x24
 8010dba:	d823      	bhi.n	8010e04 <_realloc_r+0x230>
 8010dbc:	2a13      	cmp	r2, #19
 8010dbe:	d907      	bls.n	8010dd0 <_realloc_r+0x1fc>
 8010dc0:	6823      	ldr	r3, [r4, #0]
 8010dc2:	60ab      	str	r3, [r5, #8]
 8010dc4:	6863      	ldr	r3, [r4, #4]
 8010dc6:	60eb      	str	r3, [r5, #12]
 8010dc8:	2a1b      	cmp	r2, #27
 8010dca:	d809      	bhi.n	8010de0 <_realloc_r+0x20c>
 8010dcc:	3408      	adds	r4, #8
 8010dce:	3008      	adds	r0, #8
 8010dd0:	6823      	ldr	r3, [r4, #0]
 8010dd2:	6003      	str	r3, [r0, #0]
 8010dd4:	6863      	ldr	r3, [r4, #4]
 8010dd6:	6043      	str	r3, [r0, #4]
 8010dd8:	68a3      	ldr	r3, [r4, #8]
 8010dda:	6083      	str	r3, [r0, #8]
 8010ddc:	9502      	str	r5, [sp, #8]
 8010dde:	e75e      	b.n	8010c9e <_realloc_r+0xca>
 8010de0:	68a3      	ldr	r3, [r4, #8]
 8010de2:	612b      	str	r3, [r5, #16]
 8010de4:	68e3      	ldr	r3, [r4, #12]
 8010de6:	616b      	str	r3, [r5, #20]
 8010de8:	2a24      	cmp	r2, #36	; 0x24
 8010dea:	d003      	beq.n	8010df4 <_realloc_r+0x220>
 8010dec:	0028      	movs	r0, r5
 8010dee:	3410      	adds	r4, #16
 8010df0:	3018      	adds	r0, #24
 8010df2:	e7ed      	b.n	8010dd0 <_realloc_r+0x1fc>
 8010df4:	0028      	movs	r0, r5
 8010df6:	6923      	ldr	r3, [r4, #16]
 8010df8:	3020      	adds	r0, #32
 8010dfa:	61ab      	str	r3, [r5, #24]
 8010dfc:	6963      	ldr	r3, [r4, #20]
 8010dfe:	3418      	adds	r4, #24
 8010e00:	61eb      	str	r3, [r5, #28]
 8010e02:	e7e5      	b.n	8010dd0 <_realloc_r+0x1fc>
 8010e04:	0021      	movs	r1, r4
 8010e06:	f001 fb7c 	bl	8012502 <memmove>
 8010e0a:	e7e7      	b.n	8010ddc <_realloc_r+0x208>
 8010e0c:	9b00      	ldr	r3, [sp, #0]
 8010e0e:	42bb      	cmp	r3, r7
 8010e10:	dc31      	bgt.n	8010e76 <_realloc_r+0x2a2>
 8010e12:	0028      	movs	r0, r5
 8010e14:	68aa      	ldr	r2, [r5, #8]
 8010e16:	68eb      	ldr	r3, [r5, #12]
 8010e18:	3008      	adds	r0, #8
 8010e1a:	60d3      	str	r3, [r2, #12]
 8010e1c:	609a      	str	r2, [r3, #8]
 8010e1e:	9a03      	ldr	r2, [sp, #12]
 8010e20:	3a04      	subs	r2, #4
 8010e22:	2a24      	cmp	r2, #36	; 0x24
 8010e24:	d823      	bhi.n	8010e6e <_realloc_r+0x29a>
 8010e26:	2a13      	cmp	r2, #19
 8010e28:	d907      	bls.n	8010e3a <_realloc_r+0x266>
 8010e2a:	6823      	ldr	r3, [r4, #0]
 8010e2c:	60ab      	str	r3, [r5, #8]
 8010e2e:	6863      	ldr	r3, [r4, #4]
 8010e30:	60eb      	str	r3, [r5, #12]
 8010e32:	2a1b      	cmp	r2, #27
 8010e34:	d809      	bhi.n	8010e4a <_realloc_r+0x276>
 8010e36:	3408      	adds	r4, #8
 8010e38:	3008      	adds	r0, #8
 8010e3a:	6823      	ldr	r3, [r4, #0]
 8010e3c:	6003      	str	r3, [r0, #0]
 8010e3e:	6863      	ldr	r3, [r4, #4]
 8010e40:	6043      	str	r3, [r0, #4]
 8010e42:	68a3      	ldr	r3, [r4, #8]
 8010e44:	6083      	str	r3, [r0, #8]
 8010e46:	003e      	movs	r6, r7
 8010e48:	e7c8      	b.n	8010ddc <_realloc_r+0x208>
 8010e4a:	68a3      	ldr	r3, [r4, #8]
 8010e4c:	612b      	str	r3, [r5, #16]
 8010e4e:	68e3      	ldr	r3, [r4, #12]
 8010e50:	616b      	str	r3, [r5, #20]
 8010e52:	2a24      	cmp	r2, #36	; 0x24
 8010e54:	d003      	beq.n	8010e5e <_realloc_r+0x28a>
 8010e56:	0028      	movs	r0, r5
 8010e58:	3410      	adds	r4, #16
 8010e5a:	3018      	adds	r0, #24
 8010e5c:	e7ed      	b.n	8010e3a <_realloc_r+0x266>
 8010e5e:	0028      	movs	r0, r5
 8010e60:	6923      	ldr	r3, [r4, #16]
 8010e62:	3020      	adds	r0, #32
 8010e64:	61ab      	str	r3, [r5, #24]
 8010e66:	6963      	ldr	r3, [r4, #20]
 8010e68:	3418      	adds	r4, #24
 8010e6a:	61eb      	str	r3, [r5, #28]
 8010e6c:	e7e5      	b.n	8010e3a <_realloc_r+0x266>
 8010e6e:	0021      	movs	r1, r4
 8010e70:	f001 fb47 	bl	8012502 <memmove>
 8010e74:	e7e7      	b.n	8010e46 <_realloc_r+0x272>
 8010e76:	9905      	ldr	r1, [sp, #20]
 8010e78:	9801      	ldr	r0, [sp, #4]
 8010e7a:	f7f9 fcb9 	bl	800a7f0 <_malloc_r>
 8010e7e:	1e07      	subs	r7, r0, #0
 8010e80:	d100      	bne.n	8010e84 <_realloc_r+0x2b0>
 8010e82:	e76f      	b.n	8010d64 <_realloc_r+0x190>
 8010e84:	0023      	movs	r3, r4
 8010e86:	2201      	movs	r2, #1
 8010e88:	3b08      	subs	r3, #8
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	4393      	bics	r3, r2
 8010e8e:	9a04      	ldr	r2, [sp, #16]
 8010e90:	18d3      	adds	r3, r2, r3
 8010e92:	0002      	movs	r2, r0
 8010e94:	3a08      	subs	r2, #8
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d105      	bne.n	8010ea6 <_realloc_r+0x2d2>
 8010e9a:	685e      	ldr	r6, [r3, #4]
 8010e9c:	2303      	movs	r3, #3
 8010e9e:	439e      	bics	r6, r3
 8010ea0:	9b03      	ldr	r3, [sp, #12]
 8010ea2:	18f6      	adds	r6, r6, r3
 8010ea4:	e6fb      	b.n	8010c9e <_realloc_r+0xca>
 8010ea6:	9a03      	ldr	r2, [sp, #12]
 8010ea8:	3a04      	subs	r2, #4
 8010eaa:	2a24      	cmp	r2, #36	; 0x24
 8010eac:	d829      	bhi.n	8010f02 <_realloc_r+0x32e>
 8010eae:	0003      	movs	r3, r0
 8010eb0:	0021      	movs	r1, r4
 8010eb2:	2a13      	cmp	r2, #19
 8010eb4:	d908      	bls.n	8010ec8 <_realloc_r+0x2f4>
 8010eb6:	6823      	ldr	r3, [r4, #0]
 8010eb8:	6003      	str	r3, [r0, #0]
 8010eba:	6863      	ldr	r3, [r4, #4]
 8010ebc:	6043      	str	r3, [r0, #4]
 8010ebe:	2a1b      	cmp	r2, #27
 8010ec0:	d80d      	bhi.n	8010ede <_realloc_r+0x30a>
 8010ec2:	0003      	movs	r3, r0
 8010ec4:	3108      	adds	r1, #8
 8010ec6:	3308      	adds	r3, #8
 8010ec8:	680a      	ldr	r2, [r1, #0]
 8010eca:	601a      	str	r2, [r3, #0]
 8010ecc:	684a      	ldr	r2, [r1, #4]
 8010ece:	605a      	str	r2, [r3, #4]
 8010ed0:	688a      	ldr	r2, [r1, #8]
 8010ed2:	609a      	str	r2, [r3, #8]
 8010ed4:	0021      	movs	r1, r4
 8010ed6:	9801      	ldr	r0, [sp, #4]
 8010ed8:	f7fb f89e 	bl	800c018 <_free_r>
 8010edc:	e742      	b.n	8010d64 <_realloc_r+0x190>
 8010ede:	68a3      	ldr	r3, [r4, #8]
 8010ee0:	6083      	str	r3, [r0, #8]
 8010ee2:	68e3      	ldr	r3, [r4, #12]
 8010ee4:	60c3      	str	r3, [r0, #12]
 8010ee6:	2a24      	cmp	r2, #36	; 0x24
 8010ee8:	d003      	beq.n	8010ef2 <_realloc_r+0x31e>
 8010eea:	0003      	movs	r3, r0
 8010eec:	3110      	adds	r1, #16
 8010eee:	3310      	adds	r3, #16
 8010ef0:	e7ea      	b.n	8010ec8 <_realloc_r+0x2f4>
 8010ef2:	6923      	ldr	r3, [r4, #16]
 8010ef4:	3118      	adds	r1, #24
 8010ef6:	6103      	str	r3, [r0, #16]
 8010ef8:	0003      	movs	r3, r0
 8010efa:	6962      	ldr	r2, [r4, #20]
 8010efc:	3318      	adds	r3, #24
 8010efe:	6142      	str	r2, [r0, #20]
 8010f00:	e7e2      	b.n	8010ec8 <_realloc_r+0x2f4>
 8010f02:	0021      	movs	r1, r4
 8010f04:	f001 fafd 	bl	8012502 <memmove>
 8010f08:	e7e4      	b.n	8010ed4 <_realloc_r+0x300>
 8010f0a:	9e03      	ldr	r6, [sp, #12]
 8010f0c:	e6c7      	b.n	8010c9e <_realloc_r+0xca>
 8010f0e:	9902      	ldr	r1, [sp, #8]
 8010f10:	4306      	orrs	r6, r0
 8010f12:	604e      	str	r6, [r1, #4]
 8010f14:	6851      	ldr	r1, [r2, #4]
 8010f16:	430b      	orrs	r3, r1
 8010f18:	6053      	str	r3, [r2, #4]
 8010f1a:	e6da      	b.n	8010cd2 <_realloc_r+0xfe>
 8010f1c:	20000028 	.word	0x20000028

08010f20 <_strtoul_l.constprop.0>:
 8010f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f22:	b087      	sub	sp, #28
 8010f24:	9202      	str	r2, [sp, #8]
 8010f26:	4a3e      	ldr	r2, [pc, #248]	; (8011020 <_strtoul_l.constprop.0+0x100>)
 8010f28:	001e      	movs	r6, r3
 8010f2a:	9101      	str	r1, [sp, #4]
 8010f2c:	000b      	movs	r3, r1
 8010f2e:	4694      	mov	ip, r2
 8010f30:	2108      	movs	r1, #8
 8010f32:	9005      	str	r0, [sp, #20]
 8010f34:	001a      	movs	r2, r3
 8010f36:	4660      	mov	r0, ip
 8010f38:	7814      	ldrb	r4, [r2, #0]
 8010f3a:	3301      	adds	r3, #1
 8010f3c:	5d00      	ldrb	r0, [r0, r4]
 8010f3e:	001d      	movs	r5, r3
 8010f40:	0007      	movs	r7, r0
 8010f42:	400f      	ands	r7, r1
 8010f44:	4208      	tst	r0, r1
 8010f46:	d1f5      	bne.n	8010f34 <_strtoul_l.constprop.0+0x14>
 8010f48:	2c2d      	cmp	r4, #45	; 0x2d
 8010f4a:	d13d      	bne.n	8010fc8 <_strtoul_l.constprop.0+0xa8>
 8010f4c:	2701      	movs	r7, #1
 8010f4e:	781c      	ldrb	r4, [r3, #0]
 8010f50:	1c95      	adds	r5, r2, #2
 8010f52:	2e00      	cmp	r6, #0
 8010f54:	d05f      	beq.n	8011016 <_strtoul_l.constprop.0+0xf6>
 8010f56:	2e10      	cmp	r6, #16
 8010f58:	d109      	bne.n	8010f6e <_strtoul_l.constprop.0+0x4e>
 8010f5a:	2c30      	cmp	r4, #48	; 0x30
 8010f5c:	d107      	bne.n	8010f6e <_strtoul_l.constprop.0+0x4e>
 8010f5e:	2220      	movs	r2, #32
 8010f60:	782b      	ldrb	r3, [r5, #0]
 8010f62:	4393      	bics	r3, r2
 8010f64:	2b58      	cmp	r3, #88	; 0x58
 8010f66:	d151      	bne.n	801100c <_strtoul_l.constprop.0+0xec>
 8010f68:	2610      	movs	r6, #16
 8010f6a:	786c      	ldrb	r4, [r5, #1]
 8010f6c:	3502      	adds	r5, #2
 8010f6e:	2001      	movs	r0, #1
 8010f70:	0031      	movs	r1, r6
 8010f72:	4240      	negs	r0, r0
 8010f74:	f7ef f8e2 	bl	800013c <__udivsi3>
 8010f78:	9003      	str	r0, [sp, #12]
 8010f7a:	2001      	movs	r0, #1
 8010f7c:	0031      	movs	r1, r6
 8010f7e:	4240      	negs	r0, r0
 8010f80:	f7ef f962 	bl	8000248 <__aeabi_uidivmod>
 8010f84:	2300      	movs	r3, #0
 8010f86:	2201      	movs	r2, #1
 8010f88:	9104      	str	r1, [sp, #16]
 8010f8a:	2101      	movs	r1, #1
 8010f8c:	0018      	movs	r0, r3
 8010f8e:	4694      	mov	ip, r2
 8010f90:	4249      	negs	r1, r1
 8010f92:	0022      	movs	r2, r4
 8010f94:	3a30      	subs	r2, #48	; 0x30
 8010f96:	2a09      	cmp	r2, #9
 8010f98:	d903      	bls.n	8010fa2 <_strtoul_l.constprop.0+0x82>
 8010f9a:	3a11      	subs	r2, #17
 8010f9c:	2a19      	cmp	r2, #25
 8010f9e:	d818      	bhi.n	8010fd2 <_strtoul_l.constprop.0+0xb2>
 8010fa0:	320a      	adds	r2, #10
 8010fa2:	4296      	cmp	r6, r2
 8010fa4:	dd19      	ble.n	8010fda <_strtoul_l.constprop.0+0xba>
 8010fa6:	1c5c      	adds	r4, r3, #1
 8010fa8:	d00b      	beq.n	8010fc2 <_strtoul_l.constprop.0+0xa2>
 8010faa:	9c03      	ldr	r4, [sp, #12]
 8010fac:	000b      	movs	r3, r1
 8010fae:	4284      	cmp	r4, r0
 8010fb0:	d307      	bcc.n	8010fc2 <_strtoul_l.constprop.0+0xa2>
 8010fb2:	d103      	bne.n	8010fbc <_strtoul_l.constprop.0+0x9c>
 8010fb4:	9c04      	ldr	r4, [sp, #16]
 8010fb6:	000b      	movs	r3, r1
 8010fb8:	4294      	cmp	r4, r2
 8010fba:	db02      	blt.n	8010fc2 <_strtoul_l.constprop.0+0xa2>
 8010fbc:	4663      	mov	r3, ip
 8010fbe:	4370      	muls	r0, r6
 8010fc0:	1810      	adds	r0, r2, r0
 8010fc2:	782c      	ldrb	r4, [r5, #0]
 8010fc4:	3501      	adds	r5, #1
 8010fc6:	e7e4      	b.n	8010f92 <_strtoul_l.constprop.0+0x72>
 8010fc8:	2c2b      	cmp	r4, #43	; 0x2b
 8010fca:	d1c2      	bne.n	8010f52 <_strtoul_l.constprop.0+0x32>
 8010fcc:	781c      	ldrb	r4, [r3, #0]
 8010fce:	1c95      	adds	r5, r2, #2
 8010fd0:	e7bf      	b.n	8010f52 <_strtoul_l.constprop.0+0x32>
 8010fd2:	0022      	movs	r2, r4
 8010fd4:	3a61      	subs	r2, #97	; 0x61
 8010fd6:	2a19      	cmp	r2, #25
 8010fd8:	d9e2      	bls.n	8010fa0 <_strtoul_l.constprop.0+0x80>
 8010fda:	1c5a      	adds	r2, r3, #1
 8010fdc:	d108      	bne.n	8010ff0 <_strtoul_l.constprop.0+0xd0>
 8010fde:	2222      	movs	r2, #34	; 0x22
 8010fe0:	9905      	ldr	r1, [sp, #20]
 8010fe2:	0018      	movs	r0, r3
 8010fe4:	600a      	str	r2, [r1, #0]
 8010fe6:	9a02      	ldr	r2, [sp, #8]
 8010fe8:	2a00      	cmp	r2, #0
 8010fea:	d109      	bne.n	8011000 <_strtoul_l.constprop.0+0xe0>
 8010fec:	b007      	add	sp, #28
 8010fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ff0:	2f00      	cmp	r7, #0
 8010ff2:	d000      	beq.n	8010ff6 <_strtoul_l.constprop.0+0xd6>
 8010ff4:	4240      	negs	r0, r0
 8010ff6:	9a02      	ldr	r2, [sp, #8]
 8010ff8:	2a00      	cmp	r2, #0
 8010ffa:	d0f7      	beq.n	8010fec <_strtoul_l.constprop.0+0xcc>
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d001      	beq.n	8011004 <_strtoul_l.constprop.0+0xe4>
 8011000:	1e6b      	subs	r3, r5, #1
 8011002:	9301      	str	r3, [sp, #4]
 8011004:	9b02      	ldr	r3, [sp, #8]
 8011006:	9a01      	ldr	r2, [sp, #4]
 8011008:	601a      	str	r2, [r3, #0]
 801100a:	e7ef      	b.n	8010fec <_strtoul_l.constprop.0+0xcc>
 801100c:	2430      	movs	r4, #48	; 0x30
 801100e:	2e00      	cmp	r6, #0
 8011010:	d1ad      	bne.n	8010f6e <_strtoul_l.constprop.0+0x4e>
 8011012:	3608      	adds	r6, #8
 8011014:	e7ab      	b.n	8010f6e <_strtoul_l.constprop.0+0x4e>
 8011016:	2c30      	cmp	r4, #48	; 0x30
 8011018:	d0a1      	beq.n	8010f5e <_strtoul_l.constprop.0+0x3e>
 801101a:	260a      	movs	r6, #10
 801101c:	e7a7      	b.n	8010f6e <_strtoul_l.constprop.0+0x4e>
 801101e:	46c0      	nop			; (mov r8, r8)
 8011020:	08014529 	.word	0x08014529

08011024 <_strtoul_r>:
 8011024:	b510      	push	{r4, lr}
 8011026:	f7ff ff7b 	bl	8010f20 <_strtoul_l.constprop.0>
 801102a:	bd10      	pop	{r4, pc}

0801102c <_strtoll_l.constprop.0>:
 801102c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801102e:	b08d      	sub	sp, #52	; 0x34
 8011030:	9203      	str	r2, [sp, #12]
 8011032:	4a53      	ldr	r2, [pc, #332]	; (8011180 <_strtoll_l.constprop.0+0x154>)
 8011034:	001e      	movs	r6, r3
 8011036:	9102      	str	r1, [sp, #8]
 8011038:	000b      	movs	r3, r1
 801103a:	4694      	mov	ip, r2
 801103c:	2108      	movs	r1, #8
 801103e:	900a      	str	r0, [sp, #40]	; 0x28
 8011040:	001a      	movs	r2, r3
 8011042:	4660      	mov	r0, ip
 8011044:	7814      	ldrb	r4, [r2, #0]
 8011046:	3301      	adds	r3, #1
 8011048:	5d00      	ldrb	r0, [r0, r4]
 801104a:	001d      	movs	r5, r3
 801104c:	0007      	movs	r7, r0
 801104e:	400f      	ands	r7, r1
 8011050:	4208      	tst	r0, r1
 8011052:	d1f5      	bne.n	8011040 <_strtoll_l.constprop.0+0x14>
 8011054:	2c2d      	cmp	r4, #45	; 0x2d
 8011056:	d153      	bne.n	8011100 <_strtoll_l.constprop.0+0xd4>
 8011058:	781c      	ldrb	r4, [r3, #0]
 801105a:	2301      	movs	r3, #1
 801105c:	1c95      	adds	r5, r2, #2
 801105e:	9301      	str	r3, [sp, #4]
 8011060:	2e00      	cmp	r6, #0
 8011062:	d100      	bne.n	8011066 <_strtoll_l.constprop.0+0x3a>
 8011064:	e086      	b.n	8011174 <_strtoll_l.constprop.0+0x148>
 8011066:	2e10      	cmp	r6, #16
 8011068:	d10a      	bne.n	8011080 <_strtoll_l.constprop.0+0x54>
 801106a:	2c30      	cmp	r4, #48	; 0x30
 801106c:	d108      	bne.n	8011080 <_strtoll_l.constprop.0+0x54>
 801106e:	2220      	movs	r2, #32
 8011070:	782b      	ldrb	r3, [r5, #0]
 8011072:	4393      	bics	r3, r2
 8011074:	2b58      	cmp	r3, #88	; 0x58
 8011076:	d000      	beq.n	801107a <_strtoll_l.constprop.0+0x4e>
 8011078:	e076      	b.n	8011168 <_strtoll_l.constprop.0+0x13c>
 801107a:	2610      	movs	r6, #16
 801107c:	786c      	ldrb	r4, [r5, #1]
 801107e:	3502      	adds	r5, #2
 8011080:	2001      	movs	r0, #1
 8011082:	2300      	movs	r3, #0
 8011084:	493f      	ldr	r1, [pc, #252]	; (8011184 <_strtoll_l.constprop.0+0x158>)
 8011086:	9a01      	ldr	r2, [sp, #4]
 8011088:	4240      	negs	r0, r0
 801108a:	1812      	adds	r2, r2, r0
 801108c:	414b      	adcs	r3, r1
 801108e:	9204      	str	r2, [sp, #16]
 8011090:	9305      	str	r3, [sp, #20]
 8011092:	9804      	ldr	r0, [sp, #16]
 8011094:	9905      	ldr	r1, [sp, #20]
 8011096:	17f3      	asrs	r3, r6, #31
 8011098:	0032      	movs	r2, r6
 801109a:	930b      	str	r3, [sp, #44]	; 0x2c
 801109c:	f7ef fa02 	bl	80004a4 <__aeabi_uldivmod>
 80110a0:	2300      	movs	r3, #0
 80110a2:	000f      	movs	r7, r1
 80110a4:	9008      	str	r0, [sp, #32]
 80110a6:	2100      	movs	r1, #0
 80110a8:	2000      	movs	r0, #0
 80110aa:	9209      	str	r2, [sp, #36]	; 0x24
 80110ac:	0022      	movs	r2, r4
 80110ae:	3a30      	subs	r2, #48	; 0x30
 80110b0:	2a09      	cmp	r2, #9
 80110b2:	d82b      	bhi.n	801110c <_strtoll_l.constprop.0+0xe0>
 80110b4:	0014      	movs	r4, r2
 80110b6:	42a6      	cmp	r6, r4
 80110b8:	dd37      	ble.n	801112a <_strtoll_l.constprop.0+0xfe>
 80110ba:	1c5a      	adds	r2, r3, #1
 80110bc:	d01d      	beq.n	80110fa <_strtoll_l.constprop.0+0xce>
 80110be:	42b9      	cmp	r1, r7
 80110c0:	d830      	bhi.n	8011124 <_strtoll_l.constprop.0+0xf8>
 80110c2:	d102      	bne.n	80110ca <_strtoll_l.constprop.0+0x9e>
 80110c4:	9b08      	ldr	r3, [sp, #32]
 80110c6:	4298      	cmp	r0, r3
 80110c8:	d82c      	bhi.n	8011124 <_strtoll_l.constprop.0+0xf8>
 80110ca:	9b08      	ldr	r3, [sp, #32]
 80110cc:	4283      	cmp	r3, r0
 80110ce:	d106      	bne.n	80110de <_strtoll_l.constprop.0+0xb2>
 80110d0:	428f      	cmp	r7, r1
 80110d2:	d104      	bne.n	80110de <_strtoll_l.constprop.0+0xb2>
 80110d4:	2301      	movs	r3, #1
 80110d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110d8:	425b      	negs	r3, r3
 80110da:	42a2      	cmp	r2, r4
 80110dc:	db0d      	blt.n	80110fa <_strtoll_l.constprop.0+0xce>
 80110de:	000b      	movs	r3, r1
 80110e0:	0002      	movs	r2, r0
 80110e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80110e4:	0030      	movs	r0, r6
 80110e6:	f7ef f9fd 	bl	80004e4 <__aeabi_lmul>
 80110ea:	17e3      	asrs	r3, r4, #31
 80110ec:	9406      	str	r4, [sp, #24]
 80110ee:	9307      	str	r3, [sp, #28]
 80110f0:	9b06      	ldr	r3, [sp, #24]
 80110f2:	9c07      	ldr	r4, [sp, #28]
 80110f4:	18c0      	adds	r0, r0, r3
 80110f6:	4161      	adcs	r1, r4
 80110f8:	2301      	movs	r3, #1
 80110fa:	782c      	ldrb	r4, [r5, #0]
 80110fc:	3501      	adds	r5, #1
 80110fe:	e7d5      	b.n	80110ac <_strtoll_l.constprop.0+0x80>
 8011100:	9701      	str	r7, [sp, #4]
 8011102:	2c2b      	cmp	r4, #43	; 0x2b
 8011104:	d1ac      	bne.n	8011060 <_strtoll_l.constprop.0+0x34>
 8011106:	781c      	ldrb	r4, [r3, #0]
 8011108:	1c95      	adds	r5, r2, #2
 801110a:	e7a9      	b.n	8011060 <_strtoll_l.constprop.0+0x34>
 801110c:	0022      	movs	r2, r4
 801110e:	3a41      	subs	r2, #65	; 0x41
 8011110:	2a19      	cmp	r2, #25
 8011112:	d801      	bhi.n	8011118 <_strtoll_l.constprop.0+0xec>
 8011114:	3c37      	subs	r4, #55	; 0x37
 8011116:	e7ce      	b.n	80110b6 <_strtoll_l.constprop.0+0x8a>
 8011118:	0022      	movs	r2, r4
 801111a:	3a61      	subs	r2, #97	; 0x61
 801111c:	2a19      	cmp	r2, #25
 801111e:	d804      	bhi.n	801112a <_strtoll_l.constprop.0+0xfe>
 8011120:	3c57      	subs	r4, #87	; 0x57
 8011122:	e7c8      	b.n	80110b6 <_strtoll_l.constprop.0+0x8a>
 8011124:	2301      	movs	r3, #1
 8011126:	425b      	negs	r3, r3
 8011128:	e7e7      	b.n	80110fa <_strtoll_l.constprop.0+0xce>
 801112a:	1c5a      	adds	r2, r3, #1
 801112c:	d109      	bne.n	8011142 <_strtoll_l.constprop.0+0x116>
 801112e:	9804      	ldr	r0, [sp, #16]
 8011130:	9905      	ldr	r1, [sp, #20]
 8011132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011134:	3323      	adds	r3, #35	; 0x23
 8011136:	6013      	str	r3, [r2, #0]
 8011138:	9b03      	ldr	r3, [sp, #12]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d10e      	bne.n	801115c <_strtoll_l.constprop.0+0x130>
 801113e:	b00d      	add	sp, #52	; 0x34
 8011140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011142:	9a01      	ldr	r2, [sp, #4]
 8011144:	2a00      	cmp	r2, #0
 8011146:	d004      	beq.n	8011152 <_strtoll_l.constprop.0+0x126>
 8011148:	0006      	movs	r6, r0
 801114a:	000f      	movs	r7, r1
 801114c:	2100      	movs	r1, #0
 801114e:	4270      	negs	r0, r6
 8011150:	41b9      	sbcs	r1, r7
 8011152:	9a03      	ldr	r2, [sp, #12]
 8011154:	2a00      	cmp	r2, #0
 8011156:	d0f2      	beq.n	801113e <_strtoll_l.constprop.0+0x112>
 8011158:	2b00      	cmp	r3, #0
 801115a:	d001      	beq.n	8011160 <_strtoll_l.constprop.0+0x134>
 801115c:	1e6b      	subs	r3, r5, #1
 801115e:	9302      	str	r3, [sp, #8]
 8011160:	9b03      	ldr	r3, [sp, #12]
 8011162:	9a02      	ldr	r2, [sp, #8]
 8011164:	601a      	str	r2, [r3, #0]
 8011166:	e7ea      	b.n	801113e <_strtoll_l.constprop.0+0x112>
 8011168:	2430      	movs	r4, #48	; 0x30
 801116a:	2e00      	cmp	r6, #0
 801116c:	d000      	beq.n	8011170 <_strtoll_l.constprop.0+0x144>
 801116e:	e787      	b.n	8011080 <_strtoll_l.constprop.0+0x54>
 8011170:	3608      	adds	r6, #8
 8011172:	e785      	b.n	8011080 <_strtoll_l.constprop.0+0x54>
 8011174:	2c30      	cmp	r4, #48	; 0x30
 8011176:	d100      	bne.n	801117a <_strtoll_l.constprop.0+0x14e>
 8011178:	e779      	b.n	801106e <_strtoll_l.constprop.0+0x42>
 801117a:	260a      	movs	r6, #10
 801117c:	e780      	b.n	8011080 <_strtoll_l.constprop.0+0x54>
 801117e:	46c0      	nop			; (mov r8, r8)
 8011180:	08014529 	.word	0x08014529
 8011184:	7fffffff 	.word	0x7fffffff

08011188 <_strtoll_r>:
 8011188:	b510      	push	{r4, lr}
 801118a:	f7ff ff4f 	bl	801102c <_strtoll_l.constprop.0>
 801118e:	bd10      	pop	{r4, pc}

08011190 <_strtoull_l.constprop.0>:
 8011190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011192:	b08b      	sub	sp, #44	; 0x2c
 8011194:	9202      	str	r2, [sp, #8]
 8011196:	4a54      	ldr	r2, [pc, #336]	; (80112e8 <_strtoull_l.constprop.0+0x158>)
 8011198:	001e      	movs	r6, r3
 801119a:	9101      	str	r1, [sp, #4]
 801119c:	000b      	movs	r3, r1
 801119e:	4694      	mov	ip, r2
 80111a0:	2108      	movs	r1, #8
 80111a2:	9009      	str	r0, [sp, #36]	; 0x24
 80111a4:	001a      	movs	r2, r3
 80111a6:	4660      	mov	r0, ip
 80111a8:	7814      	ldrb	r4, [r2, #0]
 80111aa:	3301      	adds	r3, #1
 80111ac:	5d00      	ldrb	r0, [r0, r4]
 80111ae:	001d      	movs	r5, r3
 80111b0:	0007      	movs	r7, r0
 80111b2:	400f      	ands	r7, r1
 80111b4:	4208      	tst	r0, r1
 80111b6:	d1f5      	bne.n	80111a4 <_strtoull_l.constprop.0+0x14>
 80111b8:	2c2d      	cmp	r4, #45	; 0x2d
 80111ba:	d154      	bne.n	8011266 <_strtoull_l.constprop.0+0xd6>
 80111bc:	781c      	ldrb	r4, [r3, #0]
 80111be:	2301      	movs	r3, #1
 80111c0:	1c95      	adds	r5, r2, #2
 80111c2:	9306      	str	r3, [sp, #24]
 80111c4:	2e00      	cmp	r6, #0
 80111c6:	d100      	bne.n	80111ca <_strtoull_l.constprop.0+0x3a>
 80111c8:	e088      	b.n	80112dc <_strtoull_l.constprop.0+0x14c>
 80111ca:	2e10      	cmp	r6, #16
 80111cc:	d10a      	bne.n	80111e4 <_strtoull_l.constprop.0+0x54>
 80111ce:	2c30      	cmp	r4, #48	; 0x30
 80111d0:	d108      	bne.n	80111e4 <_strtoull_l.constprop.0+0x54>
 80111d2:	2220      	movs	r2, #32
 80111d4:	782b      	ldrb	r3, [r5, #0]
 80111d6:	4393      	bics	r3, r2
 80111d8:	2b58      	cmp	r3, #88	; 0x58
 80111da:	d000      	beq.n	80111de <_strtoull_l.constprop.0+0x4e>
 80111dc:	e078      	b.n	80112d0 <_strtoull_l.constprop.0+0x140>
 80111de:	2610      	movs	r6, #16
 80111e0:	786c      	ldrb	r4, [r5, #1]
 80111e2:	3502      	adds	r5, #2
 80111e4:	17f7      	asrs	r7, r6, #31
 80111e6:	0032      	movs	r2, r6
 80111e8:	003b      	movs	r3, r7
 80111ea:	2001      	movs	r0, #1
 80111ec:	4240      	negs	r0, r0
 80111ee:	17c1      	asrs	r1, r0, #31
 80111f0:	f7ef f958 	bl	80004a4 <__aeabi_uldivmod>
 80111f4:	0032      	movs	r2, r6
 80111f6:	9007      	str	r0, [sp, #28]
 80111f8:	9103      	str	r1, [sp, #12]
 80111fa:	003b      	movs	r3, r7
 80111fc:	2001      	movs	r0, #1
 80111fe:	4240      	negs	r0, r0
 8011200:	17c1      	asrs	r1, r0, #31
 8011202:	f7ef f94f 	bl	80004a4 <__aeabi_uldivmod>
 8011206:	2300      	movs	r3, #0
 8011208:	2000      	movs	r0, #0
 801120a:	2100      	movs	r1, #0
 801120c:	9208      	str	r2, [sp, #32]
 801120e:	0022      	movs	r2, r4
 8011210:	3a30      	subs	r2, #48	; 0x30
 8011212:	2a09      	cmp	r2, #9
 8011214:	d82d      	bhi.n	8011272 <_strtoull_l.constprop.0+0xe2>
 8011216:	0014      	movs	r4, r2
 8011218:	42a6      	cmp	r6, r4
 801121a:	dd39      	ble.n	8011290 <_strtoull_l.constprop.0+0x100>
 801121c:	1c5a      	adds	r2, r3, #1
 801121e:	d01f      	beq.n	8011260 <_strtoull_l.constprop.0+0xd0>
 8011220:	9b03      	ldr	r3, [sp, #12]
 8011222:	4299      	cmp	r1, r3
 8011224:	d831      	bhi.n	801128a <_strtoull_l.constprop.0+0xfa>
 8011226:	d102      	bne.n	801122e <_strtoull_l.constprop.0+0x9e>
 8011228:	9b07      	ldr	r3, [sp, #28]
 801122a:	4298      	cmp	r0, r3
 801122c:	d82d      	bhi.n	801128a <_strtoull_l.constprop.0+0xfa>
 801122e:	9b07      	ldr	r3, [sp, #28]
 8011230:	4283      	cmp	r3, r0
 8011232:	d107      	bne.n	8011244 <_strtoull_l.constprop.0+0xb4>
 8011234:	9b03      	ldr	r3, [sp, #12]
 8011236:	428b      	cmp	r3, r1
 8011238:	d104      	bne.n	8011244 <_strtoull_l.constprop.0+0xb4>
 801123a:	2301      	movs	r3, #1
 801123c:	9a08      	ldr	r2, [sp, #32]
 801123e:	425b      	negs	r3, r3
 8011240:	42a2      	cmp	r2, r4
 8011242:	db0d      	blt.n	8011260 <_strtoull_l.constprop.0+0xd0>
 8011244:	000b      	movs	r3, r1
 8011246:	0002      	movs	r2, r0
 8011248:	0039      	movs	r1, r7
 801124a:	0030      	movs	r0, r6
 801124c:	f7ef f94a 	bl	80004e4 <__aeabi_lmul>
 8011250:	17e3      	asrs	r3, r4, #31
 8011252:	9404      	str	r4, [sp, #16]
 8011254:	9305      	str	r3, [sp, #20]
 8011256:	9b04      	ldr	r3, [sp, #16]
 8011258:	9c05      	ldr	r4, [sp, #20]
 801125a:	18c0      	adds	r0, r0, r3
 801125c:	4161      	adcs	r1, r4
 801125e:	2301      	movs	r3, #1
 8011260:	782c      	ldrb	r4, [r5, #0]
 8011262:	3501      	adds	r5, #1
 8011264:	e7d3      	b.n	801120e <_strtoull_l.constprop.0+0x7e>
 8011266:	9706      	str	r7, [sp, #24]
 8011268:	2c2b      	cmp	r4, #43	; 0x2b
 801126a:	d1ab      	bne.n	80111c4 <_strtoull_l.constprop.0+0x34>
 801126c:	781c      	ldrb	r4, [r3, #0]
 801126e:	1c95      	adds	r5, r2, #2
 8011270:	e7a8      	b.n	80111c4 <_strtoull_l.constprop.0+0x34>
 8011272:	0022      	movs	r2, r4
 8011274:	3a41      	subs	r2, #65	; 0x41
 8011276:	2a19      	cmp	r2, #25
 8011278:	d801      	bhi.n	801127e <_strtoull_l.constprop.0+0xee>
 801127a:	3c37      	subs	r4, #55	; 0x37
 801127c:	e7cc      	b.n	8011218 <_strtoull_l.constprop.0+0x88>
 801127e:	0022      	movs	r2, r4
 8011280:	3a61      	subs	r2, #97	; 0x61
 8011282:	2a19      	cmp	r2, #25
 8011284:	d804      	bhi.n	8011290 <_strtoull_l.constprop.0+0x100>
 8011286:	3c57      	subs	r4, #87	; 0x57
 8011288:	e7c6      	b.n	8011218 <_strtoull_l.constprop.0+0x88>
 801128a:	2301      	movs	r3, #1
 801128c:	425b      	negs	r3, r3
 801128e:	e7e7      	b.n	8011260 <_strtoull_l.constprop.0+0xd0>
 8011290:	1c5a      	adds	r2, r3, #1
 8011292:	d10a      	bne.n	80112aa <_strtoull_l.constprop.0+0x11a>
 8011294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011296:	3323      	adds	r3, #35	; 0x23
 8011298:	6013      	str	r3, [r2, #0]
 801129a:	9b02      	ldr	r3, [sp, #8]
 801129c:	2001      	movs	r0, #1
 801129e:	4240      	negs	r0, r0
 80112a0:	17c1      	asrs	r1, r0, #31
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d10e      	bne.n	80112c4 <_strtoull_l.constprop.0+0x134>
 80112a6:	b00b      	add	sp, #44	; 0x2c
 80112a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112aa:	9a06      	ldr	r2, [sp, #24]
 80112ac:	2a00      	cmp	r2, #0
 80112ae:	d004      	beq.n	80112ba <_strtoull_l.constprop.0+0x12a>
 80112b0:	0006      	movs	r6, r0
 80112b2:	000f      	movs	r7, r1
 80112b4:	2100      	movs	r1, #0
 80112b6:	4270      	negs	r0, r6
 80112b8:	41b9      	sbcs	r1, r7
 80112ba:	9a02      	ldr	r2, [sp, #8]
 80112bc:	2a00      	cmp	r2, #0
 80112be:	d0f2      	beq.n	80112a6 <_strtoull_l.constprop.0+0x116>
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d001      	beq.n	80112c8 <_strtoull_l.constprop.0+0x138>
 80112c4:	1e6b      	subs	r3, r5, #1
 80112c6:	9301      	str	r3, [sp, #4]
 80112c8:	9b02      	ldr	r3, [sp, #8]
 80112ca:	9a01      	ldr	r2, [sp, #4]
 80112cc:	601a      	str	r2, [r3, #0]
 80112ce:	e7ea      	b.n	80112a6 <_strtoull_l.constprop.0+0x116>
 80112d0:	2430      	movs	r4, #48	; 0x30
 80112d2:	2e00      	cmp	r6, #0
 80112d4:	d000      	beq.n	80112d8 <_strtoull_l.constprop.0+0x148>
 80112d6:	e785      	b.n	80111e4 <_strtoull_l.constprop.0+0x54>
 80112d8:	3608      	adds	r6, #8
 80112da:	e783      	b.n	80111e4 <_strtoull_l.constprop.0+0x54>
 80112dc:	2c30      	cmp	r4, #48	; 0x30
 80112de:	d100      	bne.n	80112e2 <_strtoull_l.constprop.0+0x152>
 80112e0:	e777      	b.n	80111d2 <_strtoull_l.constprop.0+0x42>
 80112e2:	260a      	movs	r6, #10
 80112e4:	e77e      	b.n	80111e4 <_strtoull_l.constprop.0+0x54>
 80112e6:	46c0      	nop			; (mov r8, r8)
 80112e8:	08014529 	.word	0x08014529

080112ec <_strtoull_r>:
 80112ec:	b510      	push	{r4, lr}
 80112ee:	f7ff ff4f 	bl	8011190 <_strtoull_l.constprop.0>
 80112f2:	bd10      	pop	{r4, pc}

080112f4 <_mbrtowc_r>:
 80112f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80112f6:	0004      	movs	r4, r0
 80112f8:	0010      	movs	r0, r2
 80112fa:	4a0b      	ldr	r2, [pc, #44]	; (8011328 <_mbrtowc_r+0x34>)
 80112fc:	9d06      	ldr	r5, [sp, #24]
 80112fe:	32e4      	adds	r2, #228	; 0xe4
 8011300:	6816      	ldr	r6, [r2, #0]
 8011302:	2800      	cmp	r0, #0
 8011304:	d10c      	bne.n	8011320 <_mbrtowc_r+0x2c>
 8011306:	2301      	movs	r3, #1
 8011308:	0001      	movs	r1, r0
 801130a:	4a08      	ldr	r2, [pc, #32]	; (801132c <_mbrtowc_r+0x38>)
 801130c:	9500      	str	r5, [sp, #0]
 801130e:	0020      	movs	r0, r4
 8011310:	47b0      	blx	r6
 8011312:	1c43      	adds	r3, r0, #1
 8011314:	d103      	bne.n	801131e <_mbrtowc_r+0x2a>
 8011316:	2300      	movs	r3, #0
 8011318:	602b      	str	r3, [r5, #0]
 801131a:	338a      	adds	r3, #138	; 0x8a
 801131c:	6023      	str	r3, [r4, #0]
 801131e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8011320:	0002      	movs	r2, r0
 8011322:	9500      	str	r5, [sp, #0]
 8011324:	e7f3      	b.n	801130e <_mbrtowc_r+0x1a>
 8011326:	46c0      	nop			; (mov r8, r8)
 8011328:	20000444 	.word	0x20000444
 801132c:	080148b3 	.word	0x080148b3

08011330 <iswspace>:
 8011330:	b510      	push	{r4, lr}
 8011332:	2100      	movs	r1, #0
 8011334:	f000 f802 	bl	801133c <iswspace_l>
 8011338:	bd10      	pop	{r4, pc}
	...

0801133c <iswspace_l>:
 801133c:	0003      	movs	r3, r0
 801133e:	2000      	movs	r0, #0
 8011340:	2bff      	cmp	r3, #255	; 0xff
 8011342:	d803      	bhi.n	801134c <iswspace_l+0x10>
 8011344:	4a02      	ldr	r2, [pc, #8]	; (8011350 <iswspace_l+0x14>)
 8011346:	5cd0      	ldrb	r0, [r2, r3]
 8011348:	2308      	movs	r3, #8
 801134a:	4018      	ands	r0, r3
 801134c:	4770      	bx	lr
 801134e:	46c0      	nop			; (mov r8, r8)
 8011350:	08014529 	.word	0x08014529

08011354 <fiprintf>:
 8011354:	b40e      	push	{r1, r2, r3}
 8011356:	b517      	push	{r0, r1, r2, r4, lr}
 8011358:	4c05      	ldr	r4, [pc, #20]	; (8011370 <fiprintf+0x1c>)
 801135a:	ab05      	add	r3, sp, #20
 801135c:	cb04      	ldmia	r3!, {r2}
 801135e:	0001      	movs	r1, r0
 8011360:	6820      	ldr	r0, [r4, #0]
 8011362:	9301      	str	r3, [sp, #4]
 8011364:	f000 f954 	bl	8011610 <_vfiprintf_r>
 8011368:	bc1e      	pop	{r1, r2, r3, r4}
 801136a:	bc08      	pop	{r3}
 801136c:	b003      	add	sp, #12
 801136e:	4718      	bx	r3
 8011370:	200006d0 	.word	0x200006d0

08011374 <__ssprint_r>:
 8011374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011376:	6813      	ldr	r3, [r2, #0]
 8011378:	b087      	sub	sp, #28
 801137a:	0017      	movs	r7, r2
 801137c:	9303      	str	r3, [sp, #12]
 801137e:	6893      	ldr	r3, [r2, #8]
 8011380:	2200      	movs	r2, #0
 8011382:	000c      	movs	r4, r1
 8011384:	9005      	str	r0, [sp, #20]
 8011386:	9202      	str	r2, [sp, #8]
 8011388:	9201      	str	r2, [sp, #4]
 801138a:	4293      	cmp	r3, r2
 801138c:	d10d      	bne.n	80113aa <__ssprint_r+0x36>
 801138e:	2000      	movs	r0, #0
 8011390:	2300      	movs	r3, #0
 8011392:	607b      	str	r3, [r7, #4]
 8011394:	b007      	add	sp, #28
 8011396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011398:	9b03      	ldr	r3, [sp, #12]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	9302      	str	r3, [sp, #8]
 801139e:	9b03      	ldr	r3, [sp, #12]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	9301      	str	r3, [sp, #4]
 80113a4:	9b03      	ldr	r3, [sp, #12]
 80113a6:	3308      	adds	r3, #8
 80113a8:	9303      	str	r3, [sp, #12]
 80113aa:	9a01      	ldr	r2, [sp, #4]
 80113ac:	68a6      	ldr	r6, [r4, #8]
 80113ae:	6823      	ldr	r3, [r4, #0]
 80113b0:	2a00      	cmp	r2, #0
 80113b2:	d0f1      	beq.n	8011398 <__ssprint_r+0x24>
 80113b4:	42b2      	cmp	r2, r6
 80113b6:	d32e      	bcc.n	8011416 <__ssprint_r+0xa2>
 80113b8:	2190      	movs	r1, #144	; 0x90
 80113ba:	89a2      	ldrh	r2, [r4, #12]
 80113bc:	00c9      	lsls	r1, r1, #3
 80113be:	420a      	tst	r2, r1
 80113c0:	d029      	beq.n	8011416 <__ssprint_r+0xa2>
 80113c2:	2003      	movs	r0, #3
 80113c4:	6921      	ldr	r1, [r4, #16]
 80113c6:	1a5b      	subs	r3, r3, r1
 80113c8:	9304      	str	r3, [sp, #16]
 80113ca:	6963      	ldr	r3, [r4, #20]
 80113cc:	4343      	muls	r3, r0
 80113ce:	0fdd      	lsrs	r5, r3, #31
 80113d0:	18ed      	adds	r5, r5, r3
 80113d2:	9b04      	ldr	r3, [sp, #16]
 80113d4:	9801      	ldr	r0, [sp, #4]
 80113d6:	3301      	adds	r3, #1
 80113d8:	181b      	adds	r3, r3, r0
 80113da:	106d      	asrs	r5, r5, #1
 80113dc:	42ab      	cmp	r3, r5
 80113de:	d900      	bls.n	80113e2 <__ssprint_r+0x6e>
 80113e0:	001d      	movs	r5, r3
 80113e2:	0552      	lsls	r2, r2, #21
 80113e4:	d532      	bpl.n	801144c <__ssprint_r+0xd8>
 80113e6:	0029      	movs	r1, r5
 80113e8:	9805      	ldr	r0, [sp, #20]
 80113ea:	f7f9 fa01 	bl	800a7f0 <_malloc_r>
 80113ee:	1e06      	subs	r6, r0, #0
 80113f0:	d036      	beq.n	8011460 <__ssprint_r+0xec>
 80113f2:	9a04      	ldr	r2, [sp, #16]
 80113f4:	6921      	ldr	r1, [r4, #16]
 80113f6:	f7fa fd94 	bl	800bf22 <memcpy>
 80113fa:	89a2      	ldrh	r2, [r4, #12]
 80113fc:	4b1e      	ldr	r3, [pc, #120]	; (8011478 <__ssprint_r+0x104>)
 80113fe:	401a      	ands	r2, r3
 8011400:	2380      	movs	r3, #128	; 0x80
 8011402:	4313      	orrs	r3, r2
 8011404:	81a3      	strh	r3, [r4, #12]
 8011406:	9b04      	ldr	r3, [sp, #16]
 8011408:	6126      	str	r6, [r4, #16]
 801140a:	18f6      	adds	r6, r6, r3
 801140c:	6026      	str	r6, [r4, #0]
 801140e:	6165      	str	r5, [r4, #20]
 8011410:	9e01      	ldr	r6, [sp, #4]
 8011412:	1aed      	subs	r5, r5, r3
 8011414:	60a5      	str	r5, [r4, #8]
 8011416:	9b01      	ldr	r3, [sp, #4]
 8011418:	429e      	cmp	r6, r3
 801141a:	d900      	bls.n	801141e <__ssprint_r+0xaa>
 801141c:	001e      	movs	r6, r3
 801141e:	0032      	movs	r2, r6
 8011420:	9902      	ldr	r1, [sp, #8]
 8011422:	6820      	ldr	r0, [r4, #0]
 8011424:	f001 f86d 	bl	8012502 <memmove>
 8011428:	9a01      	ldr	r2, [sp, #4]
 801142a:	68a3      	ldr	r3, [r4, #8]
 801142c:	4694      	mov	ip, r2
 801142e:	1b9b      	subs	r3, r3, r6
 8011430:	60a3      	str	r3, [r4, #8]
 8011432:	6823      	ldr	r3, [r4, #0]
 8011434:	199b      	adds	r3, r3, r6
 8011436:	6023      	str	r3, [r4, #0]
 8011438:	9b02      	ldr	r3, [sp, #8]
 801143a:	4463      	add	r3, ip
 801143c:	9302      	str	r3, [sp, #8]
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	1a9b      	subs	r3, r3, r2
 8011442:	60bb      	str	r3, [r7, #8]
 8011444:	d0a3      	beq.n	801138e <__ssprint_r+0x1a>
 8011446:	2300      	movs	r3, #0
 8011448:	9301      	str	r3, [sp, #4]
 801144a:	e7ae      	b.n	80113aa <__ssprint_r+0x36>
 801144c:	002a      	movs	r2, r5
 801144e:	9805      	ldr	r0, [sp, #20]
 8011450:	f7ff fbc0 	bl	8010bd4 <_realloc_r>
 8011454:	1e06      	subs	r6, r0, #0
 8011456:	d1d6      	bne.n	8011406 <__ssprint_r+0x92>
 8011458:	6921      	ldr	r1, [r4, #16]
 801145a:	9805      	ldr	r0, [sp, #20]
 801145c:	f7fa fddc 	bl	800c018 <_free_r>
 8011460:	230c      	movs	r3, #12
 8011462:	9a05      	ldr	r2, [sp, #20]
 8011464:	2001      	movs	r0, #1
 8011466:	6013      	str	r3, [r2, #0]
 8011468:	89a2      	ldrh	r2, [r4, #12]
 801146a:	3334      	adds	r3, #52	; 0x34
 801146c:	4313      	orrs	r3, r2
 801146e:	81a3      	strh	r3, [r4, #12]
 8011470:	2300      	movs	r3, #0
 8011472:	4240      	negs	r0, r0
 8011474:	60bb      	str	r3, [r7, #8]
 8011476:	e78b      	b.n	8011390 <__ssprint_r+0x1c>
 8011478:	fffffb7f 	.word	0xfffffb7f

0801147c <_sungetc_r>:
 801147c:	b570      	push	{r4, r5, r6, lr}
 801147e:	0014      	movs	r4, r2
 8011480:	1c4b      	adds	r3, r1, #1
 8011482:	d103      	bne.n	801148c <_sungetc_r+0x10>
 8011484:	2501      	movs	r5, #1
 8011486:	426d      	negs	r5, r5
 8011488:	0028      	movs	r0, r5
 801148a:	bd70      	pop	{r4, r5, r6, pc}
 801148c:	8993      	ldrh	r3, [r2, #12]
 801148e:	2220      	movs	r2, #32
 8011490:	4393      	bics	r3, r2
 8011492:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011494:	81a3      	strh	r3, [r4, #12]
 8011496:	b2ce      	uxtb	r6, r1
 8011498:	6863      	ldr	r3, [r4, #4]
 801149a:	b2cd      	uxtb	r5, r1
 801149c:	2a00      	cmp	r2, #0
 801149e:	d010      	beq.n	80114c2 <_sungetc_r+0x46>
 80114a0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80114a2:	429a      	cmp	r2, r3
 80114a4:	dd07      	ble.n	80114b6 <_sungetc_r+0x3a>
 80114a6:	6823      	ldr	r3, [r4, #0]
 80114a8:	3b01      	subs	r3, #1
 80114aa:	6023      	str	r3, [r4, #0]
 80114ac:	701e      	strb	r6, [r3, #0]
 80114ae:	6863      	ldr	r3, [r4, #4]
 80114b0:	3301      	adds	r3, #1
 80114b2:	6063      	str	r3, [r4, #4]
 80114b4:	e7e8      	b.n	8011488 <_sungetc_r+0xc>
 80114b6:	0021      	movs	r1, r4
 80114b8:	f000 ff1a 	bl	80122f0 <__submore>
 80114bc:	2800      	cmp	r0, #0
 80114be:	d0f2      	beq.n	80114a6 <_sungetc_r+0x2a>
 80114c0:	e7e0      	b.n	8011484 <_sungetc_r+0x8>
 80114c2:	6921      	ldr	r1, [r4, #16]
 80114c4:	6822      	ldr	r2, [r4, #0]
 80114c6:	2900      	cmp	r1, #0
 80114c8:	d007      	beq.n	80114da <_sungetc_r+0x5e>
 80114ca:	4291      	cmp	r1, r2
 80114cc:	d205      	bcs.n	80114da <_sungetc_r+0x5e>
 80114ce:	1e51      	subs	r1, r2, #1
 80114d0:	7808      	ldrb	r0, [r1, #0]
 80114d2:	42a8      	cmp	r0, r5
 80114d4:	d101      	bne.n	80114da <_sungetc_r+0x5e>
 80114d6:	6021      	str	r1, [r4, #0]
 80114d8:	e7ea      	b.n	80114b0 <_sungetc_r+0x34>
 80114da:	63e3      	str	r3, [r4, #60]	; 0x3c
 80114dc:	0023      	movs	r3, r4
 80114de:	3340      	adds	r3, #64	; 0x40
 80114e0:	6323      	str	r3, [r4, #48]	; 0x30
 80114e2:	2303      	movs	r3, #3
 80114e4:	6363      	str	r3, [r4, #52]	; 0x34
 80114e6:	0023      	movs	r3, r4
 80114e8:	3342      	adds	r3, #66	; 0x42
 80114ea:	63a2      	str	r2, [r4, #56]	; 0x38
 80114ec:	701e      	strb	r6, [r3, #0]
 80114ee:	6023      	str	r3, [r4, #0]
 80114f0:	2301      	movs	r3, #1
 80114f2:	e7de      	b.n	80114b2 <_sungetc_r+0x36>

080114f4 <__ssrefill_r>:
 80114f4:	b510      	push	{r4, lr}
 80114f6:	000c      	movs	r4, r1
 80114f8:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80114fa:	2900      	cmp	r1, #0
 80114fc:	d00e      	beq.n	801151c <__ssrefill_r+0x28>
 80114fe:	0023      	movs	r3, r4
 8011500:	3340      	adds	r3, #64	; 0x40
 8011502:	4299      	cmp	r1, r3
 8011504:	d001      	beq.n	801150a <__ssrefill_r+0x16>
 8011506:	f7fa fd87 	bl	800c018 <_free_r>
 801150a:	2000      	movs	r0, #0
 801150c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801150e:	6320      	str	r0, [r4, #48]	; 0x30
 8011510:	6063      	str	r3, [r4, #4]
 8011512:	4283      	cmp	r3, r0
 8011514:	d002      	beq.n	801151c <__ssrefill_r+0x28>
 8011516:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011518:	6023      	str	r3, [r4, #0]
 801151a:	bd10      	pop	{r4, pc}
 801151c:	6923      	ldr	r3, [r4, #16]
 801151e:	2001      	movs	r0, #1
 8011520:	6023      	str	r3, [r4, #0]
 8011522:	2300      	movs	r3, #0
 8011524:	89a2      	ldrh	r2, [r4, #12]
 8011526:	6063      	str	r3, [r4, #4]
 8011528:	3320      	adds	r3, #32
 801152a:	4313      	orrs	r3, r2
 801152c:	81a3      	strh	r3, [r4, #12]
 801152e:	4240      	negs	r0, r0
 8011530:	e7f3      	b.n	801151a <__ssrefill_r+0x26>

08011532 <_sfread_r>:
 8011532:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011534:	0014      	movs	r4, r2
 8011536:	435c      	muls	r4, r3
 8011538:	b087      	sub	sp, #28
 801153a:	1e26      	subs	r6, r4, #0
 801153c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801153e:	9005      	str	r0, [sp, #20]
 8011540:	9101      	str	r1, [sp, #4]
 8011542:	9202      	str	r2, [sp, #8]
 8011544:	9303      	str	r3, [sp, #12]
 8011546:	d11e      	bne.n	8011586 <_sfread_r+0x54>
 8011548:	0020      	movs	r0, r4
 801154a:	b007      	add	sp, #28
 801154c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801154e:	003a      	movs	r2, r7
 8011550:	9801      	ldr	r0, [sp, #4]
 8011552:	f7fa fce6 	bl	800bf22 <memcpy>
 8011556:	682b      	ldr	r3, [r5, #0]
 8011558:	0029      	movs	r1, r5
 801155a:	19db      	adds	r3, r3, r7
 801155c:	602b      	str	r3, [r5, #0]
 801155e:	2300      	movs	r3, #0
 8011560:	606b      	str	r3, [r5, #4]
 8011562:	9b01      	ldr	r3, [sp, #4]
 8011564:	9805      	ldr	r0, [sp, #20]
 8011566:	19db      	adds	r3, r3, r7
 8011568:	9301      	str	r3, [sp, #4]
 801156a:	1bf3      	subs	r3, r6, r7
 801156c:	9304      	str	r3, [sp, #16]
 801156e:	f7ff ffc1 	bl	80114f4 <__ssrefill_r>
 8011572:	2800      	cmp	r0, #0
 8011574:	d006      	beq.n	8011584 <_sfread_r+0x52>
 8011576:	193c      	adds	r4, r7, r4
 8011578:	1ba0      	subs	r0, r4, r6
 801157a:	9902      	ldr	r1, [sp, #8]
 801157c:	f7ee fdde 	bl	800013c <__udivsi3>
 8011580:	0004      	movs	r4, r0
 8011582:	e7e1      	b.n	8011548 <_sfread_r+0x16>
 8011584:	9e04      	ldr	r6, [sp, #16]
 8011586:	686f      	ldr	r7, [r5, #4]
 8011588:	6829      	ldr	r1, [r5, #0]
 801158a:	42b7      	cmp	r7, r6
 801158c:	d3df      	bcc.n	801154e <_sfread_r+0x1c>
 801158e:	0032      	movs	r2, r6
 8011590:	9801      	ldr	r0, [sp, #4]
 8011592:	f7fa fcc6 	bl	800bf22 <memcpy>
 8011596:	686b      	ldr	r3, [r5, #4]
 8011598:	9c03      	ldr	r4, [sp, #12]
 801159a:	1b9b      	subs	r3, r3, r6
 801159c:	606b      	str	r3, [r5, #4]
 801159e:	682b      	ldr	r3, [r5, #0]
 80115a0:	199b      	adds	r3, r3, r6
 80115a2:	602b      	str	r3, [r5, #0]
 80115a4:	e7d0      	b.n	8011548 <_sfread_r+0x16>

080115a6 <__sprint_r>:
 80115a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115a8:	6893      	ldr	r3, [r2, #8]
 80115aa:	b085      	sub	sp, #20
 80115ac:	9001      	str	r0, [sp, #4]
 80115ae:	000d      	movs	r5, r1
 80115b0:	0014      	movs	r4, r2
 80115b2:	1e18      	subs	r0, r3, #0
 80115b4:	d018      	beq.n	80115e8 <__sprint_r+0x42>
 80115b6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80115b8:	049b      	lsls	r3, r3, #18
 80115ba:	d524      	bpl.n	8011606 <__sprint_r+0x60>
 80115bc:	6817      	ldr	r7, [r2, #0]
 80115be:	2600      	movs	r6, #0
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	9302      	str	r3, [sp, #8]
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	9300      	str	r3, [sp, #0]
 80115c8:	089b      	lsrs	r3, r3, #2
 80115ca:	9303      	str	r3, [sp, #12]
 80115cc:	9b03      	ldr	r3, [sp, #12]
 80115ce:	42b3      	cmp	r3, r6
 80115d0:	dc0e      	bgt.n	80115f0 <__sprint_r+0x4a>
 80115d2:	2203      	movs	r2, #3
 80115d4:	9b00      	ldr	r3, [sp, #0]
 80115d6:	68a0      	ldr	r0, [r4, #8]
 80115d8:	4393      	bics	r3, r2
 80115da:	1ac0      	subs	r0, r0, r3
 80115dc:	60a0      	str	r0, [r4, #8]
 80115de:	3708      	adds	r7, #8
 80115e0:	2800      	cmp	r0, #0
 80115e2:	d1ec      	bne.n	80115be <__sprint_r+0x18>
 80115e4:	2300      	movs	r3, #0
 80115e6:	60a3      	str	r3, [r4, #8]
 80115e8:	2300      	movs	r3, #0
 80115ea:	6063      	str	r3, [r4, #4]
 80115ec:	b005      	add	sp, #20
 80115ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115f0:	9902      	ldr	r1, [sp, #8]
 80115f2:	00b3      	lsls	r3, r6, #2
 80115f4:	58c9      	ldr	r1, [r1, r3]
 80115f6:	002a      	movs	r2, r5
 80115f8:	9801      	ldr	r0, [sp, #4]
 80115fa:	f000 ff59 	bl	80124b0 <_fputwc_r>
 80115fe:	1c43      	adds	r3, r0, #1
 8011600:	d0f0      	beq.n	80115e4 <__sprint_r+0x3e>
 8011602:	3601      	adds	r6, #1
 8011604:	e7e2      	b.n	80115cc <__sprint_r+0x26>
 8011606:	9801      	ldr	r0, [sp, #4]
 8011608:	f000 fd14 	bl	8012034 <__sfvwrite_r>
 801160c:	e7ea      	b.n	80115e4 <__sprint_r+0x3e>
	...

08011610 <_vfiprintf_r>:
 8011610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011612:	b0c1      	sub	sp, #260	; 0x104
 8011614:	001c      	movs	r4, r3
 8011616:	001f      	movs	r7, r3
 8011618:	9006      	str	r0, [sp, #24]
 801161a:	9103      	str	r1, [sp, #12]
 801161c:	9207      	str	r2, [sp, #28]
 801161e:	2800      	cmp	r0, #0
 8011620:	d004      	beq.n	801162c <_vfiprintf_r+0x1c>
 8011622:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011624:	2b00      	cmp	r3, #0
 8011626:	d101      	bne.n	801162c <_vfiprintf_r+0x1c>
 8011628:	f7fa fa64 	bl	800baf4 <__sinit>
 801162c:	9b03      	ldr	r3, [sp, #12]
 801162e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011630:	07db      	lsls	r3, r3, #31
 8011632:	d407      	bmi.n	8011644 <_vfiprintf_r+0x34>
 8011634:	9b03      	ldr	r3, [sp, #12]
 8011636:	899b      	ldrh	r3, [r3, #12]
 8011638:	059b      	lsls	r3, r3, #22
 801163a:	d403      	bmi.n	8011644 <_vfiprintf_r+0x34>
 801163c:	9b03      	ldr	r3, [sp, #12]
 801163e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011640:	f7fa fc62 	bl	800bf08 <__retarget_lock_acquire_recursive>
 8011644:	9b03      	ldr	r3, [sp, #12]
 8011646:	220c      	movs	r2, #12
 8011648:	5e9a      	ldrsh	r2, [r3, r2]
 801164a:	2380      	movs	r3, #128	; 0x80
 801164c:	019b      	lsls	r3, r3, #6
 801164e:	421a      	tst	r2, r3
 8011650:	d107      	bne.n	8011662 <_vfiprintf_r+0x52>
 8011652:	4313      	orrs	r3, r2
 8011654:	9a03      	ldr	r2, [sp, #12]
 8011656:	8193      	strh	r3, [r2, #12]
 8011658:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801165a:	4aa3      	ldr	r2, [pc, #652]	; (80118e8 <_vfiprintf_r+0x2d8>)
 801165c:	4013      	ands	r3, r2
 801165e:	9a03      	ldr	r2, [sp, #12]
 8011660:	6653      	str	r3, [r2, #100]	; 0x64
 8011662:	9b03      	ldr	r3, [sp, #12]
 8011664:	899b      	ldrh	r3, [r3, #12]
 8011666:	071b      	lsls	r3, r3, #28
 8011668:	d503      	bpl.n	8011672 <_vfiprintf_r+0x62>
 801166a:	9b03      	ldr	r3, [sp, #12]
 801166c:	691b      	ldr	r3, [r3, #16]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d118      	bne.n	80116a4 <_vfiprintf_r+0x94>
 8011672:	9903      	ldr	r1, [sp, #12]
 8011674:	9806      	ldr	r0, [sp, #24]
 8011676:	f000 fe79 	bl	801236c <__swsetup_r>
 801167a:	2800      	cmp	r0, #0
 801167c:	d012      	beq.n	80116a4 <_vfiprintf_r+0x94>
 801167e:	9b03      	ldr	r3, [sp, #12]
 8011680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011682:	07db      	lsls	r3, r3, #31
 8011684:	d505      	bpl.n	8011692 <_vfiprintf_r+0x82>
 8011686:	2301      	movs	r3, #1
 8011688:	425b      	negs	r3, r3
 801168a:	9308      	str	r3, [sp, #32]
 801168c:	9808      	ldr	r0, [sp, #32]
 801168e:	b041      	add	sp, #260	; 0x104
 8011690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011692:	9b03      	ldr	r3, [sp, #12]
 8011694:	899b      	ldrh	r3, [r3, #12]
 8011696:	059b      	lsls	r3, r3, #22
 8011698:	d4f5      	bmi.n	8011686 <_vfiprintf_r+0x76>
 801169a:	9b03      	ldr	r3, [sp, #12]
 801169c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801169e:	f7fa fc34 	bl	800bf0a <__retarget_lock_release_recursive>
 80116a2:	e7f0      	b.n	8011686 <_vfiprintf_r+0x76>
 80116a4:	221a      	movs	r2, #26
 80116a6:	9b03      	ldr	r3, [sp, #12]
 80116a8:	899b      	ldrh	r3, [r3, #12]
 80116aa:	401a      	ands	r2, r3
 80116ac:	2a0a      	cmp	r2, #10
 80116ae:	d116      	bne.n	80116de <_vfiprintf_r+0xce>
 80116b0:	9a03      	ldr	r2, [sp, #12]
 80116b2:	210e      	movs	r1, #14
 80116b4:	5e52      	ldrsh	r2, [r2, r1]
 80116b6:	2a00      	cmp	r2, #0
 80116b8:	db11      	blt.n	80116de <_vfiprintf_r+0xce>
 80116ba:	9a03      	ldr	r2, [sp, #12]
 80116bc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80116be:	07d2      	lsls	r2, r2, #31
 80116c0:	d405      	bmi.n	80116ce <_vfiprintf_r+0xbe>
 80116c2:	059b      	lsls	r3, r3, #22
 80116c4:	d403      	bmi.n	80116ce <_vfiprintf_r+0xbe>
 80116c6:	9b03      	ldr	r3, [sp, #12]
 80116c8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80116ca:	f7fa fc1e 	bl	800bf0a <__retarget_lock_release_recursive>
 80116ce:	0023      	movs	r3, r4
 80116d0:	9a07      	ldr	r2, [sp, #28]
 80116d2:	9903      	ldr	r1, [sp, #12]
 80116d4:	9806      	ldr	r0, [sp, #24]
 80116d6:	f000 fc69 	bl	8011fac <__sbprintf>
 80116da:	9008      	str	r0, [sp, #32]
 80116dc:	e7d6      	b.n	801168c <_vfiprintf_r+0x7c>
 80116de:	2300      	movs	r3, #0
 80116e0:	ad17      	add	r5, sp, #92	; 0x5c
 80116e2:	9514      	str	r5, [sp, #80]	; 0x50
 80116e4:	9316      	str	r3, [sp, #88]	; 0x58
 80116e6:	9315      	str	r3, [sp, #84]	; 0x54
 80116e8:	930c      	str	r3, [sp, #48]	; 0x30
 80116ea:	930d      	str	r3, [sp, #52]	; 0x34
 80116ec:	930e      	str	r3, [sp, #56]	; 0x38
 80116ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80116f0:	9308      	str	r3, [sp, #32]
 80116f2:	9c07      	ldr	r4, [sp, #28]
 80116f4:	7823      	ldrb	r3, [r4, #0]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d002      	beq.n	8011700 <_vfiprintf_r+0xf0>
 80116fa:	2b25      	cmp	r3, #37	; 0x25
 80116fc:	d000      	beq.n	8011700 <_vfiprintf_r+0xf0>
 80116fe:	e08d      	b.n	801181c <_vfiprintf_r+0x20c>
 8011700:	9b07      	ldr	r3, [sp, #28]
 8011702:	1ae6      	subs	r6, r4, r3
 8011704:	429c      	cmp	r4, r3
 8011706:	d016      	beq.n	8011736 <_vfiprintf_r+0x126>
 8011708:	602b      	str	r3, [r5, #0]
 801170a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801170c:	606e      	str	r6, [r5, #4]
 801170e:	199b      	adds	r3, r3, r6
 8011710:	9316      	str	r3, [sp, #88]	; 0x58
 8011712:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011714:	3508      	adds	r5, #8
 8011716:	3301      	adds	r3, #1
 8011718:	9315      	str	r3, [sp, #84]	; 0x54
 801171a:	2b07      	cmp	r3, #7
 801171c:	dd08      	ble.n	8011730 <_vfiprintf_r+0x120>
 801171e:	9903      	ldr	r1, [sp, #12]
 8011720:	9806      	ldr	r0, [sp, #24]
 8011722:	aa14      	add	r2, sp, #80	; 0x50
 8011724:	f7ff ff3f 	bl	80115a6 <__sprint_r>
 8011728:	2800      	cmp	r0, #0
 801172a:	d000      	beq.n	801172e <_vfiprintf_r+0x11e>
 801172c:	e3d9      	b.n	8011ee2 <_vfiprintf_r+0x8d2>
 801172e:	ad17      	add	r5, sp, #92	; 0x5c
 8011730:	9b08      	ldr	r3, [sp, #32]
 8011732:	199b      	adds	r3, r3, r6
 8011734:	9308      	str	r3, [sp, #32]
 8011736:	7823      	ldrb	r3, [r4, #0]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d101      	bne.n	8011740 <_vfiprintf_r+0x130>
 801173c:	f000 fbf6 	bl	8011f2c <_vfiprintf_r+0x91c>
 8011740:	2200      	movs	r2, #0
 8011742:	a912      	add	r1, sp, #72	; 0x48
 8011744:	70ca      	strb	r2, [r1, #3]
 8011746:	2101      	movs	r1, #1
 8011748:	1c63      	adds	r3, r4, #1
 801174a:	0014      	movs	r4, r2
 801174c:	4249      	negs	r1, r1
 801174e:	9105      	str	r1, [sp, #20]
 8011750:	9209      	str	r2, [sp, #36]	; 0x24
 8011752:	1c5a      	adds	r2, r3, #1
 8011754:	781b      	ldrb	r3, [r3, #0]
 8011756:	9207      	str	r2, [sp, #28]
 8011758:	0018      	movs	r0, r3
 801175a:	3820      	subs	r0, #32
 801175c:	285a      	cmp	r0, #90	; 0x5a
 801175e:	d900      	bls.n	8011762 <_vfiprintf_r+0x152>
 8011760:	e362      	b.n	8011e28 <_vfiprintf_r+0x818>
 8011762:	f7ee fce1 	bl	8000128 <__gnu_thumb1_case_uhi>
 8011766:	0078      	.short	0x0078
 8011768:	03610361 	.word	0x03610361
 801176c:	03610081 	.word	0x03610081
 8011770:	03610361 	.word	0x03610361
 8011774:	0361005d 	.word	0x0361005d
 8011778:	00830361 	.word	0x00830361
 801177c:	0361008b 	.word	0x0361008b
 8011780:	008f0089 	.word	0x008f0089
 8011784:	00ad0361 	.word	0x00ad0361
 8011788:	00af00af 	.word	0x00af00af
 801178c:	00af00af 	.word	0x00af00af
 8011790:	00af00af 	.word	0x00af00af
 8011794:	00af00af 	.word	0x00af00af
 8011798:	036100af 	.word	0x036100af
 801179c:	03610361 	.word	0x03610361
 80117a0:	03610361 	.word	0x03610361
 80117a4:	03610361 	.word	0x03610361
 80117a8:	03610361 	.word	0x03610361
 80117ac:	00e600da 	.word	0x00e600da
 80117b0:	03610361 	.word	0x03610361
 80117b4:	03610361 	.word	0x03610361
 80117b8:	03610361 	.word	0x03610361
 80117bc:	03610361 	.word	0x03610361
 80117c0:	03610361 	.word	0x03610361
 80117c4:	03610143 	.word	0x03610143
 80117c8:	03610361 	.word	0x03610361
 80117cc:	03610182 	.word	0x03610182
 80117d0:	0361027c 	.word	0x0361027c
 80117d4:	02ae0361 	.word	0x02ae0361
 80117d8:	03610361 	.word	0x03610361
 80117dc:	03610361 	.word	0x03610361
 80117e0:	03610361 	.word	0x03610361
 80117e4:	03610361 	.word	0x03610361
 80117e8:	03610361 	.word	0x03610361
 80117ec:	00e800da 	.word	0x00e800da
 80117f0:	03610361 	.word	0x03610361
 80117f4:	00c30361 	.word	0x00c30361
 80117f8:	00d600e8 	.word	0x00d600e8
 80117fc:	00cf0361 	.word	0x00cf0361
 8011800:	01260361 	.word	0x01260361
 8011804:	01740145 	.word	0x01740145
 8011808:	036100d6 	.word	0x036100d6
 801180c:	007f0182 	.word	0x007f0182
 8011810:	0361027e 	.word	0x0361027e
 8011814:	02cd0361 	.word	0x02cd0361
 8011818:	007f0361 	.word	0x007f0361
 801181c:	3401      	adds	r4, #1
 801181e:	e769      	b.n	80116f4 <_vfiprintf_r+0xe4>
 8011820:	9806      	ldr	r0, [sp, #24]
 8011822:	f7fe fa47 	bl	800fcb4 <_localeconv_r>
 8011826:	6843      	ldr	r3, [r0, #4]
 8011828:	0018      	movs	r0, r3
 801182a:	930f      	str	r3, [sp, #60]	; 0x3c
 801182c:	f7ee fc6a 	bl	8000104 <strlen>
 8011830:	900e      	str	r0, [sp, #56]	; 0x38
 8011832:	9806      	ldr	r0, [sp, #24]
 8011834:	f7fe fa3e 	bl	800fcb4 <_localeconv_r>
 8011838:	6883      	ldr	r3, [r0, #8]
 801183a:	930d      	str	r3, [sp, #52]	; 0x34
 801183c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801183e:	2b00      	cmp	r3, #0
 8011840:	d010      	beq.n	8011864 <_vfiprintf_r+0x254>
 8011842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011844:	2b00      	cmp	r3, #0
 8011846:	d00d      	beq.n	8011864 <_vfiprintf_r+0x254>
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d00a      	beq.n	8011864 <_vfiprintf_r+0x254>
 801184e:	2380      	movs	r3, #128	; 0x80
 8011850:	00db      	lsls	r3, r3, #3
 8011852:	431c      	orrs	r4, r3
 8011854:	e006      	b.n	8011864 <_vfiprintf_r+0x254>
 8011856:	ab12      	add	r3, sp, #72	; 0x48
 8011858:	78da      	ldrb	r2, [r3, #3]
 801185a:	3303      	adds	r3, #3
 801185c:	2a00      	cmp	r2, #0
 801185e:	d101      	bne.n	8011864 <_vfiprintf_r+0x254>
 8011860:	3220      	adds	r2, #32
 8011862:	701a      	strb	r2, [r3, #0]
 8011864:	9b07      	ldr	r3, [sp, #28]
 8011866:	e774      	b.n	8011752 <_vfiprintf_r+0x142>
 8011868:	2301      	movs	r3, #1
 801186a:	e7f2      	b.n	8011852 <_vfiprintf_r+0x242>
 801186c:	cf08      	ldmia	r7!, {r3}
 801186e:	9309      	str	r3, [sp, #36]	; 0x24
 8011870:	2b00      	cmp	r3, #0
 8011872:	daf7      	bge.n	8011864 <_vfiprintf_r+0x254>
 8011874:	425b      	negs	r3, r3
 8011876:	9309      	str	r3, [sp, #36]	; 0x24
 8011878:	2304      	movs	r3, #4
 801187a:	e7ea      	b.n	8011852 <_vfiprintf_r+0x242>
 801187c:	222b      	movs	r2, #43	; 0x2b
 801187e:	ab12      	add	r3, sp, #72	; 0x48
 8011880:	70da      	strb	r2, [r3, #3]
 8011882:	e7ef      	b.n	8011864 <_vfiprintf_r+0x254>
 8011884:	9b07      	ldr	r3, [sp, #28]
 8011886:	1c5a      	adds	r2, r3, #1
 8011888:	781b      	ldrb	r3, [r3, #0]
 801188a:	2b2a      	cmp	r3, #42	; 0x2a
 801188c:	d00f      	beq.n	80118ae <_vfiprintf_r+0x29e>
 801188e:	2100      	movs	r1, #0
 8011890:	9105      	str	r1, [sp, #20]
 8011892:	0019      	movs	r1, r3
 8011894:	3930      	subs	r1, #48	; 0x30
 8011896:	9207      	str	r2, [sp, #28]
 8011898:	2909      	cmp	r1, #9
 801189a:	d900      	bls.n	801189e <_vfiprintf_r+0x28e>
 801189c:	e75c      	b.n	8011758 <_vfiprintf_r+0x148>
 801189e:	200a      	movs	r0, #10
 80118a0:	9b05      	ldr	r3, [sp, #20]
 80118a2:	4343      	muls	r3, r0
 80118a4:	185b      	adds	r3, r3, r1
 80118a6:	9305      	str	r3, [sp, #20]
 80118a8:	7813      	ldrb	r3, [r2, #0]
 80118aa:	3201      	adds	r2, #1
 80118ac:	e7f1      	b.n	8011892 <_vfiprintf_r+0x282>
 80118ae:	cf08      	ldmia	r7!, {r3}
 80118b0:	9305      	str	r3, [sp, #20]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	da02      	bge.n	80118bc <_vfiprintf_r+0x2ac>
 80118b6:	2301      	movs	r3, #1
 80118b8:	425b      	negs	r3, r3
 80118ba:	9305      	str	r3, [sp, #20]
 80118bc:	9207      	str	r2, [sp, #28]
 80118be:	e7d1      	b.n	8011864 <_vfiprintf_r+0x254>
 80118c0:	2380      	movs	r3, #128	; 0x80
 80118c2:	e7c6      	b.n	8011852 <_vfiprintf_r+0x242>
 80118c4:	2100      	movs	r1, #0
 80118c6:	9a07      	ldr	r2, [sp, #28]
 80118c8:	9109      	str	r1, [sp, #36]	; 0x24
 80118ca:	200a      	movs	r0, #10
 80118cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118ce:	3b30      	subs	r3, #48	; 0x30
 80118d0:	4341      	muls	r1, r0
 80118d2:	185b      	adds	r3, r3, r1
 80118d4:	9309      	str	r3, [sp, #36]	; 0x24
 80118d6:	0013      	movs	r3, r2
 80118d8:	781b      	ldrb	r3, [r3, #0]
 80118da:	3201      	adds	r2, #1
 80118dc:	0019      	movs	r1, r3
 80118de:	3930      	subs	r1, #48	; 0x30
 80118e0:	9207      	str	r2, [sp, #28]
 80118e2:	2909      	cmp	r1, #9
 80118e4:	d9f1      	bls.n	80118ca <_vfiprintf_r+0x2ba>
 80118e6:	e737      	b.n	8011758 <_vfiprintf_r+0x148>
 80118e8:	ffffdfff 	.word	0xffffdfff
 80118ec:	9b07      	ldr	r3, [sp, #28]
 80118ee:	781b      	ldrb	r3, [r3, #0]
 80118f0:	2b68      	cmp	r3, #104	; 0x68
 80118f2:	d105      	bne.n	8011900 <_vfiprintf_r+0x2f0>
 80118f4:	9b07      	ldr	r3, [sp, #28]
 80118f6:	3301      	adds	r3, #1
 80118f8:	9307      	str	r3, [sp, #28]
 80118fa:	2380      	movs	r3, #128	; 0x80
 80118fc:	009b      	lsls	r3, r3, #2
 80118fe:	e7a8      	b.n	8011852 <_vfiprintf_r+0x242>
 8011900:	2340      	movs	r3, #64	; 0x40
 8011902:	e7a6      	b.n	8011852 <_vfiprintf_r+0x242>
 8011904:	9b07      	ldr	r3, [sp, #28]
 8011906:	781b      	ldrb	r3, [r3, #0]
 8011908:	2b6c      	cmp	r3, #108	; 0x6c
 801190a:	d104      	bne.n	8011916 <_vfiprintf_r+0x306>
 801190c:	9b07      	ldr	r3, [sp, #28]
 801190e:	3301      	adds	r3, #1
 8011910:	9307      	str	r3, [sp, #28]
 8011912:	2320      	movs	r3, #32
 8011914:	e79d      	b.n	8011852 <_vfiprintf_r+0x242>
 8011916:	2310      	movs	r3, #16
 8011918:	e79b      	b.n	8011852 <_vfiprintf_r+0x242>
 801191a:	003a      	movs	r2, r7
 801191c:	ca08      	ldmia	r2!, {r3}
 801191e:	ae27      	add	r6, sp, #156	; 0x9c
 8011920:	7033      	strb	r3, [r6, #0]
 8011922:	2300      	movs	r3, #0
 8011924:	9204      	str	r2, [sp, #16]
 8011926:	aa12      	add	r2, sp, #72	; 0x48
 8011928:	70d3      	strb	r3, [r2, #3]
 801192a:	2201      	movs	r2, #1
 801192c:	930b      	str	r3, [sp, #44]	; 0x2c
 801192e:	9205      	str	r2, [sp, #20]
 8011930:	e0b0      	b.n	8011a94 <_vfiprintf_r+0x484>
 8011932:	2310      	movs	r3, #16
 8011934:	431c      	orrs	r4, r3
 8011936:	06a3      	lsls	r3, r4, #26
 8011938:	d52a      	bpl.n	8011990 <_vfiprintf_r+0x380>
 801193a:	2307      	movs	r3, #7
 801193c:	3707      	adds	r7, #7
 801193e:	439f      	bics	r7, r3
 8011940:	0039      	movs	r1, r7
 8011942:	c90c      	ldmia	r1!, {r2, r3}
 8011944:	9200      	str	r2, [sp, #0]
 8011946:	9301      	str	r3, [sp, #4]
 8011948:	9104      	str	r1, [sp, #16]
 801194a:	9a01      	ldr	r2, [sp, #4]
 801194c:	2301      	movs	r3, #1
 801194e:	2a00      	cmp	r2, #0
 8011950:	da09      	bge.n	8011966 <_vfiprintf_r+0x356>
 8011952:	9e00      	ldr	r6, [sp, #0]
 8011954:	9f01      	ldr	r7, [sp, #4]
 8011956:	2200      	movs	r2, #0
 8011958:	4271      	negs	r1, r6
 801195a:	41ba      	sbcs	r2, r7
 801195c:	9100      	str	r1, [sp, #0]
 801195e:	9201      	str	r2, [sp, #4]
 8011960:	212d      	movs	r1, #45	; 0x2d
 8011962:	aa12      	add	r2, sp, #72	; 0x48
 8011964:	70d1      	strb	r1, [r2, #3]
 8011966:	9901      	ldr	r1, [sp, #4]
 8011968:	9a00      	ldr	r2, [sp, #0]
 801196a:	430a      	orrs	r2, r1
 801196c:	9905      	ldr	r1, [sp, #20]
 801196e:	3101      	adds	r1, #1
 8011970:	d100      	bne.n	8011974 <_vfiprintf_r+0x364>
 8011972:	e2e9      	b.n	8011f48 <_vfiprintf_r+0x938>
 8011974:	2180      	movs	r1, #128	; 0x80
 8011976:	0027      	movs	r7, r4
 8011978:	438f      	bics	r7, r1
 801197a:	2a00      	cmp	r2, #0
 801197c:	d000      	beq.n	8011980 <_vfiprintf_r+0x370>
 801197e:	e2e7      	b.n	8011f50 <_vfiprintf_r+0x940>
 8011980:	9a05      	ldr	r2, [sp, #20]
 8011982:	2a00      	cmp	r2, #0
 8011984:	d100      	bne.n	8011988 <_vfiprintf_r+0x378>
 8011986:	e243      	b.n	8011e10 <_vfiprintf_r+0x800>
 8011988:	2b01      	cmp	r3, #1
 801198a:	d000      	beq.n	801198e <_vfiprintf_r+0x37e>
 801198c:	e2e3      	b.n	8011f56 <_vfiprintf_r+0x946>
 801198e:	e1e7      	b.n	8011d60 <_vfiprintf_r+0x750>
 8011990:	003a      	movs	r2, r7
 8011992:	ca08      	ldmia	r2!, {r3}
 8011994:	9204      	str	r2, [sp, #16]
 8011996:	06e2      	lsls	r2, r4, #27
 8011998:	d503      	bpl.n	80119a2 <_vfiprintf_r+0x392>
 801199a:	9300      	str	r3, [sp, #0]
 801199c:	17db      	asrs	r3, r3, #31
 801199e:	9301      	str	r3, [sp, #4]
 80119a0:	e7d3      	b.n	801194a <_vfiprintf_r+0x33a>
 80119a2:	0662      	lsls	r2, r4, #25
 80119a4:	d501      	bpl.n	80119aa <_vfiprintf_r+0x39a>
 80119a6:	b21b      	sxth	r3, r3
 80119a8:	e7f7      	b.n	801199a <_vfiprintf_r+0x38a>
 80119aa:	05a2      	lsls	r2, r4, #22
 80119ac:	d5f5      	bpl.n	801199a <_vfiprintf_r+0x38a>
 80119ae:	b25b      	sxtb	r3, r3
 80119b0:	e7f3      	b.n	801199a <_vfiprintf_r+0x38a>
 80119b2:	1d3b      	adds	r3, r7, #4
 80119b4:	9304      	str	r3, [sp, #16]
 80119b6:	06a3      	lsls	r3, r4, #26
 80119b8:	d506      	bpl.n	80119c8 <_vfiprintf_r+0x3b8>
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	9a08      	ldr	r2, [sp, #32]
 80119be:	601a      	str	r2, [r3, #0]
 80119c0:	17d2      	asrs	r2, r2, #31
 80119c2:	605a      	str	r2, [r3, #4]
 80119c4:	9f04      	ldr	r7, [sp, #16]
 80119c6:	e694      	b.n	80116f2 <_vfiprintf_r+0xe2>
 80119c8:	06e3      	lsls	r3, r4, #27
 80119ca:	d503      	bpl.n	80119d4 <_vfiprintf_r+0x3c4>
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	9a08      	ldr	r2, [sp, #32]
 80119d0:	601a      	str	r2, [r3, #0]
 80119d2:	e7f7      	b.n	80119c4 <_vfiprintf_r+0x3b4>
 80119d4:	0663      	lsls	r3, r4, #25
 80119d6:	d503      	bpl.n	80119e0 <_vfiprintf_r+0x3d0>
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	9a08      	ldr	r2, [sp, #32]
 80119dc:	801a      	strh	r2, [r3, #0]
 80119de:	e7f1      	b.n	80119c4 <_vfiprintf_r+0x3b4>
 80119e0:	05a4      	lsls	r4, r4, #22
 80119e2:	d5f3      	bpl.n	80119cc <_vfiprintf_r+0x3bc>
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	9a08      	ldr	r2, [sp, #32]
 80119e8:	701a      	strb	r2, [r3, #0]
 80119ea:	e7eb      	b.n	80119c4 <_vfiprintf_r+0x3b4>
 80119ec:	2310      	movs	r3, #16
 80119ee:	431c      	orrs	r4, r3
 80119f0:	2320      	movs	r3, #32
 80119f2:	0020      	movs	r0, r4
 80119f4:	4018      	ands	r0, r3
 80119f6:	421c      	tst	r4, r3
 80119f8:	d00d      	beq.n	8011a16 <_vfiprintf_r+0x406>
 80119fa:	3b19      	subs	r3, #25
 80119fc:	3707      	adds	r7, #7
 80119fe:	439f      	bics	r7, r3
 8011a00:	0039      	movs	r1, r7
 8011a02:	c90c      	ldmia	r1!, {r2, r3}
 8011a04:	9200      	str	r2, [sp, #0]
 8011a06:	9301      	str	r3, [sp, #4]
 8011a08:	9104      	str	r1, [sp, #16]
 8011a0a:	4bcc      	ldr	r3, [pc, #816]	; (8011d3c <_vfiprintf_r+0x72c>)
 8011a0c:	401c      	ands	r4, r3
 8011a0e:	2300      	movs	r3, #0
 8011a10:	2100      	movs	r1, #0
 8011a12:	aa12      	add	r2, sp, #72	; 0x48
 8011a14:	e7a6      	b.n	8011964 <_vfiprintf_r+0x354>
 8011a16:	003a      	movs	r2, r7
 8011a18:	ca08      	ldmia	r2!, {r3}
 8011a1a:	0021      	movs	r1, r4
 8011a1c:	9204      	str	r2, [sp, #16]
 8011a1e:	2210      	movs	r2, #16
 8011a20:	4011      	ands	r1, r2
 8011a22:	4214      	tst	r4, r2
 8011a24:	d002      	beq.n	8011a2c <_vfiprintf_r+0x41c>
 8011a26:	9300      	str	r3, [sp, #0]
 8011a28:	9001      	str	r0, [sp, #4]
 8011a2a:	e7ee      	b.n	8011a0a <_vfiprintf_r+0x3fa>
 8011a2c:	2240      	movs	r2, #64	; 0x40
 8011a2e:	0020      	movs	r0, r4
 8011a30:	4010      	ands	r0, r2
 8011a32:	4214      	tst	r4, r2
 8011a34:	d003      	beq.n	8011a3e <_vfiprintf_r+0x42e>
 8011a36:	b29b      	uxth	r3, r3
 8011a38:	9300      	str	r3, [sp, #0]
 8011a3a:	9101      	str	r1, [sp, #4]
 8011a3c:	e7e5      	b.n	8011a0a <_vfiprintf_r+0x3fa>
 8011a3e:	2280      	movs	r2, #128	; 0x80
 8011a40:	0021      	movs	r1, r4
 8011a42:	0092      	lsls	r2, r2, #2
 8011a44:	4011      	ands	r1, r2
 8011a46:	4214      	tst	r4, r2
 8011a48:	d0f6      	beq.n	8011a38 <_vfiprintf_r+0x428>
 8011a4a:	b2db      	uxtb	r3, r3
 8011a4c:	e7eb      	b.n	8011a26 <_vfiprintf_r+0x416>
 8011a4e:	003b      	movs	r3, r7
 8011a50:	cb04      	ldmia	r3!, {r2}
 8011a52:	49bb      	ldr	r1, [pc, #748]	; (8011d40 <_vfiprintf_r+0x730>)
 8011a54:	9304      	str	r3, [sp, #16]
 8011a56:	2300      	movs	r3, #0
 8011a58:	9200      	str	r2, [sp, #0]
 8011a5a:	aa13      	add	r2, sp, #76	; 0x4c
 8011a5c:	8011      	strh	r1, [r2, #0]
 8011a5e:	4ab9      	ldr	r2, [pc, #740]	; (8011d44 <_vfiprintf_r+0x734>)
 8011a60:	9301      	str	r3, [sp, #4]
 8011a62:	3302      	adds	r3, #2
 8011a64:	431c      	orrs	r4, r3
 8011a66:	920c      	str	r2, [sp, #48]	; 0x30
 8011a68:	e7d2      	b.n	8011a10 <_vfiprintf_r+0x400>
 8011a6a:	003b      	movs	r3, r7
 8011a6c:	2700      	movs	r7, #0
 8011a6e:	cb40      	ldmia	r3!, {r6}
 8011a70:	9304      	str	r3, [sp, #16]
 8011a72:	ab12      	add	r3, sp, #72	; 0x48
 8011a74:	70df      	strb	r7, [r3, #3]
 8011a76:	9b05      	ldr	r3, [sp, #20]
 8011a78:	3301      	adds	r3, #1
 8011a7a:	d100      	bne.n	8011a7e <_vfiprintf_r+0x46e>
 8011a7c:	e0ea      	b.n	8011c54 <_vfiprintf_r+0x644>
 8011a7e:	0039      	movs	r1, r7
 8011a80:	0030      	movs	r0, r6
 8011a82:	9a05      	ldr	r2, [sp, #20]
 8011a84:	f7fe f92e 	bl	800fce4 <memchr>
 8011a88:	900b      	str	r0, [sp, #44]	; 0x2c
 8011a8a:	42b8      	cmp	r0, r7
 8011a8c:	d002      	beq.n	8011a94 <_vfiprintf_r+0x484>
 8011a8e:	1b83      	subs	r3, r0, r6
 8011a90:	9305      	str	r3, [sp, #20]
 8011a92:	970b      	str	r7, [sp, #44]	; 0x2c
 8011a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a96:	9a05      	ldr	r2, [sp, #20]
 8011a98:	930a      	str	r3, [sp, #40]	; 0x28
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	da00      	bge.n	8011aa0 <_vfiprintf_r+0x490>
 8011a9e:	920a      	str	r2, [sp, #40]	; 0x28
 8011aa0:	ab12      	add	r3, sp, #72	; 0x48
 8011aa2:	3303      	adds	r3, #3
 8011aa4:	781b      	ldrb	r3, [r3, #0]
 8011aa6:	1e5a      	subs	r2, r3, #1
 8011aa8:	4193      	sbcs	r3, r2
 8011aaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011aac:	18d3      	adds	r3, r2, r3
 8011aae:	930a      	str	r3, [sp, #40]	; 0x28
 8011ab0:	0022      	movs	r2, r4
 8011ab2:	2302      	movs	r3, #2
 8011ab4:	401a      	ands	r2, r3
 8011ab6:	9210      	str	r2, [sp, #64]	; 0x40
 8011ab8:	421c      	tst	r4, r3
 8011aba:	d002      	beq.n	8011ac2 <_vfiprintf_r+0x4b2>
 8011abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011abe:	3302      	adds	r3, #2
 8011ac0:	930a      	str	r3, [sp, #40]	; 0x28
 8011ac2:	2384      	movs	r3, #132	; 0x84
 8011ac4:	0022      	movs	r2, r4
 8011ac6:	401a      	ands	r2, r3
 8011ac8:	9211      	str	r2, [sp, #68]	; 0x44
 8011aca:	421c      	tst	r4, r3
 8011acc:	d11e      	bne.n	8011b0c <_vfiprintf_r+0x4fc>
 8011ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ad2:	1a9f      	subs	r7, r3, r2
 8011ad4:	2f00      	cmp	r7, #0
 8011ad6:	dd19      	ble.n	8011b0c <_vfiprintf_r+0x4fc>
 8011ad8:	0029      	movs	r1, r5
 8011ada:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011adc:	489a      	ldr	r0, [pc, #616]	; (8011d48 <_vfiprintf_r+0x738>)
 8011ade:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011ae0:	3301      	adds	r3, #1
 8011ae2:	3108      	adds	r1, #8
 8011ae4:	6028      	str	r0, [r5, #0]
 8011ae6:	2f10      	cmp	r7, #16
 8011ae8:	dd00      	ble.n	8011aec <_vfiprintf_r+0x4dc>
 8011aea:	e1a7      	b.n	8011e3c <_vfiprintf_r+0x82c>
 8011aec:	606f      	str	r7, [r5, #4]
 8011aee:	18bf      	adds	r7, r7, r2
 8011af0:	000d      	movs	r5, r1
 8011af2:	9716      	str	r7, [sp, #88]	; 0x58
 8011af4:	9315      	str	r3, [sp, #84]	; 0x54
 8011af6:	2b07      	cmp	r3, #7
 8011af8:	dd08      	ble.n	8011b0c <_vfiprintf_r+0x4fc>
 8011afa:	9903      	ldr	r1, [sp, #12]
 8011afc:	9806      	ldr	r0, [sp, #24]
 8011afe:	aa14      	add	r2, sp, #80	; 0x50
 8011b00:	f7ff fd51 	bl	80115a6 <__sprint_r>
 8011b04:	2800      	cmp	r0, #0
 8011b06:	d000      	beq.n	8011b0a <_vfiprintf_r+0x4fa>
 8011b08:	e1eb      	b.n	8011ee2 <_vfiprintf_r+0x8d2>
 8011b0a:	ad17      	add	r5, sp, #92	; 0x5c
 8011b0c:	a912      	add	r1, sp, #72	; 0x48
 8011b0e:	78c8      	ldrb	r0, [r1, #3]
 8011b10:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011b12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b14:	3103      	adds	r1, #3
 8011b16:	2800      	cmp	r0, #0
 8011b18:	d012      	beq.n	8011b40 <_vfiprintf_r+0x530>
 8011b1a:	6029      	str	r1, [r5, #0]
 8011b1c:	2101      	movs	r1, #1
 8011b1e:	3301      	adds	r3, #1
 8011b20:	1852      	adds	r2, r2, r1
 8011b22:	6069      	str	r1, [r5, #4]
 8011b24:	9216      	str	r2, [sp, #88]	; 0x58
 8011b26:	9315      	str	r3, [sp, #84]	; 0x54
 8011b28:	3508      	adds	r5, #8
 8011b2a:	2b07      	cmp	r3, #7
 8011b2c:	dd08      	ble.n	8011b40 <_vfiprintf_r+0x530>
 8011b2e:	9903      	ldr	r1, [sp, #12]
 8011b30:	9806      	ldr	r0, [sp, #24]
 8011b32:	aa14      	add	r2, sp, #80	; 0x50
 8011b34:	f7ff fd37 	bl	80115a6 <__sprint_r>
 8011b38:	2800      	cmp	r0, #0
 8011b3a:	d000      	beq.n	8011b3e <_vfiprintf_r+0x52e>
 8011b3c:	e1d1      	b.n	8011ee2 <_vfiprintf_r+0x8d2>
 8011b3e:	ad17      	add	r5, sp, #92	; 0x5c
 8011b40:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011b42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011b44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b46:	2900      	cmp	r1, #0
 8011b48:	d013      	beq.n	8011b72 <_vfiprintf_r+0x562>
 8011b4a:	a913      	add	r1, sp, #76	; 0x4c
 8011b4c:	6029      	str	r1, [r5, #0]
 8011b4e:	2102      	movs	r1, #2
 8011b50:	3301      	adds	r3, #1
 8011b52:	1852      	adds	r2, r2, r1
 8011b54:	6069      	str	r1, [r5, #4]
 8011b56:	9216      	str	r2, [sp, #88]	; 0x58
 8011b58:	9315      	str	r3, [sp, #84]	; 0x54
 8011b5a:	3508      	adds	r5, #8
 8011b5c:	2b07      	cmp	r3, #7
 8011b5e:	dd08      	ble.n	8011b72 <_vfiprintf_r+0x562>
 8011b60:	9903      	ldr	r1, [sp, #12]
 8011b62:	9806      	ldr	r0, [sp, #24]
 8011b64:	aa14      	add	r2, sp, #80	; 0x50
 8011b66:	f7ff fd1e 	bl	80115a6 <__sprint_r>
 8011b6a:	2800      	cmp	r0, #0
 8011b6c:	d000      	beq.n	8011b70 <_vfiprintf_r+0x560>
 8011b6e:	e1b8      	b.n	8011ee2 <_vfiprintf_r+0x8d2>
 8011b70:	ad17      	add	r5, sp, #92	; 0x5c
 8011b72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011b74:	2b80      	cmp	r3, #128	; 0x80
 8011b76:	d11e      	bne.n	8011bb6 <_vfiprintf_r+0x5a6>
 8011b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b7c:	1a9f      	subs	r7, r3, r2
 8011b7e:	2f00      	cmp	r7, #0
 8011b80:	dd19      	ble.n	8011bb6 <_vfiprintf_r+0x5a6>
 8011b82:	0029      	movs	r1, r5
 8011b84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b86:	4871      	ldr	r0, [pc, #452]	; (8011d4c <_vfiprintf_r+0x73c>)
 8011b88:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011b8a:	3301      	adds	r3, #1
 8011b8c:	3108      	adds	r1, #8
 8011b8e:	6028      	str	r0, [r5, #0]
 8011b90:	2f10      	cmp	r7, #16
 8011b92:	dd00      	ble.n	8011b96 <_vfiprintf_r+0x586>
 8011b94:	e164      	b.n	8011e60 <_vfiprintf_r+0x850>
 8011b96:	606f      	str	r7, [r5, #4]
 8011b98:	18bf      	adds	r7, r7, r2
 8011b9a:	000d      	movs	r5, r1
 8011b9c:	9716      	str	r7, [sp, #88]	; 0x58
 8011b9e:	9315      	str	r3, [sp, #84]	; 0x54
 8011ba0:	2b07      	cmp	r3, #7
 8011ba2:	dd08      	ble.n	8011bb6 <_vfiprintf_r+0x5a6>
 8011ba4:	9903      	ldr	r1, [sp, #12]
 8011ba6:	9806      	ldr	r0, [sp, #24]
 8011ba8:	aa14      	add	r2, sp, #80	; 0x50
 8011baa:	f7ff fcfc 	bl	80115a6 <__sprint_r>
 8011bae:	2800      	cmp	r0, #0
 8011bb0:	d000      	beq.n	8011bb4 <_vfiprintf_r+0x5a4>
 8011bb2:	e196      	b.n	8011ee2 <_vfiprintf_r+0x8d2>
 8011bb4:	ad17      	add	r5, sp, #92	; 0x5c
 8011bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bb8:	9a05      	ldr	r2, [sp, #20]
 8011bba:	1a9f      	subs	r7, r3, r2
 8011bbc:	2f00      	cmp	r7, #0
 8011bbe:	dd19      	ble.n	8011bf4 <_vfiprintf_r+0x5e4>
 8011bc0:	0029      	movs	r1, r5
 8011bc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011bc4:	4861      	ldr	r0, [pc, #388]	; (8011d4c <_vfiprintf_r+0x73c>)
 8011bc6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011bc8:	3301      	adds	r3, #1
 8011bca:	3108      	adds	r1, #8
 8011bcc:	6028      	str	r0, [r5, #0]
 8011bce:	2f10      	cmp	r7, #16
 8011bd0:	dd00      	ble.n	8011bd4 <_vfiprintf_r+0x5c4>
 8011bd2:	e157      	b.n	8011e84 <_vfiprintf_r+0x874>
 8011bd4:	606f      	str	r7, [r5, #4]
 8011bd6:	18bf      	adds	r7, r7, r2
 8011bd8:	000d      	movs	r5, r1
 8011bda:	9716      	str	r7, [sp, #88]	; 0x58
 8011bdc:	9315      	str	r3, [sp, #84]	; 0x54
 8011bde:	2b07      	cmp	r3, #7
 8011be0:	dd08      	ble.n	8011bf4 <_vfiprintf_r+0x5e4>
 8011be2:	9903      	ldr	r1, [sp, #12]
 8011be4:	9806      	ldr	r0, [sp, #24]
 8011be6:	aa14      	add	r2, sp, #80	; 0x50
 8011be8:	f7ff fcdd 	bl	80115a6 <__sprint_r>
 8011bec:	2800      	cmp	r0, #0
 8011bee:	d000      	beq.n	8011bf2 <_vfiprintf_r+0x5e2>
 8011bf0:	e177      	b.n	8011ee2 <_vfiprintf_r+0x8d2>
 8011bf2:	ad17      	add	r5, sp, #92	; 0x5c
 8011bf4:	9b05      	ldr	r3, [sp, #20]
 8011bf6:	9a05      	ldr	r2, [sp, #20]
 8011bf8:	606b      	str	r3, [r5, #4]
 8011bfa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011bfc:	602e      	str	r6, [r5, #0]
 8011bfe:	189b      	adds	r3, r3, r2
 8011c00:	9316      	str	r3, [sp, #88]	; 0x58
 8011c02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c04:	3508      	adds	r5, #8
 8011c06:	3301      	adds	r3, #1
 8011c08:	9315      	str	r3, [sp, #84]	; 0x54
 8011c0a:	2b07      	cmp	r3, #7
 8011c0c:	dd08      	ble.n	8011c20 <_vfiprintf_r+0x610>
 8011c0e:	9903      	ldr	r1, [sp, #12]
 8011c10:	9806      	ldr	r0, [sp, #24]
 8011c12:	aa14      	add	r2, sp, #80	; 0x50
 8011c14:	f7ff fcc7 	bl	80115a6 <__sprint_r>
 8011c18:	2800      	cmp	r0, #0
 8011c1a:	d000      	beq.n	8011c1e <_vfiprintf_r+0x60e>
 8011c1c:	e161      	b.n	8011ee2 <_vfiprintf_r+0x8d2>
 8011c1e:	ad17      	add	r5, sp, #92	; 0x5c
 8011c20:	0764      	lsls	r4, r4, #29
 8011c22:	d500      	bpl.n	8011c26 <_vfiprintf_r+0x616>
 8011c24:	e140      	b.n	8011ea8 <_vfiprintf_r+0x898>
 8011c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c2a:	4293      	cmp	r3, r2
 8011c2c:	da00      	bge.n	8011c30 <_vfiprintf_r+0x620>
 8011c2e:	0013      	movs	r3, r2
 8011c30:	9a08      	ldr	r2, [sp, #32]
 8011c32:	18d3      	adds	r3, r2, r3
 8011c34:	9308      	str	r3, [sp, #32]
 8011c36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d007      	beq.n	8011c4c <_vfiprintf_r+0x63c>
 8011c3c:	9903      	ldr	r1, [sp, #12]
 8011c3e:	9806      	ldr	r0, [sp, #24]
 8011c40:	aa14      	add	r2, sp, #80	; 0x50
 8011c42:	f7ff fcb0 	bl	80115a6 <__sprint_r>
 8011c46:	2800      	cmp	r0, #0
 8011c48:	d000      	beq.n	8011c4c <_vfiprintf_r+0x63c>
 8011c4a:	e14a      	b.n	8011ee2 <_vfiprintf_r+0x8d2>
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	ad17      	add	r5, sp, #92	; 0x5c
 8011c50:	9315      	str	r3, [sp, #84]	; 0x54
 8011c52:	e6b7      	b.n	80119c4 <_vfiprintf_r+0x3b4>
 8011c54:	0030      	movs	r0, r6
 8011c56:	f7ee fa55 	bl	8000104 <strlen>
 8011c5a:	9005      	str	r0, [sp, #20]
 8011c5c:	e719      	b.n	8011a92 <_vfiprintf_r+0x482>
 8011c5e:	2310      	movs	r3, #16
 8011c60:	431c      	orrs	r4, r3
 8011c62:	2320      	movs	r3, #32
 8011c64:	0020      	movs	r0, r4
 8011c66:	4018      	ands	r0, r3
 8011c68:	421c      	tst	r4, r3
 8011c6a:	d009      	beq.n	8011c80 <_vfiprintf_r+0x670>
 8011c6c:	3b19      	subs	r3, #25
 8011c6e:	3707      	adds	r7, #7
 8011c70:	439f      	bics	r7, r3
 8011c72:	0039      	movs	r1, r7
 8011c74:	c90c      	ldmia	r1!, {r2, r3}
 8011c76:	9200      	str	r2, [sp, #0]
 8011c78:	9301      	str	r3, [sp, #4]
 8011c7a:	9104      	str	r1, [sp, #16]
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	e6c7      	b.n	8011a10 <_vfiprintf_r+0x400>
 8011c80:	003b      	movs	r3, r7
 8011c82:	cb04      	ldmia	r3!, {r2}
 8011c84:	0021      	movs	r1, r4
 8011c86:	9304      	str	r3, [sp, #16]
 8011c88:	2310      	movs	r3, #16
 8011c8a:	4019      	ands	r1, r3
 8011c8c:	421c      	tst	r4, r3
 8011c8e:	d003      	beq.n	8011c98 <_vfiprintf_r+0x688>
 8011c90:	9200      	str	r2, [sp, #0]
 8011c92:	9001      	str	r0, [sp, #4]
 8011c94:	3b0f      	subs	r3, #15
 8011c96:	e6bb      	b.n	8011a10 <_vfiprintf_r+0x400>
 8011c98:	2340      	movs	r3, #64	; 0x40
 8011c9a:	0020      	movs	r0, r4
 8011c9c:	4018      	ands	r0, r3
 8011c9e:	421c      	tst	r4, r3
 8011ca0:	d003      	beq.n	8011caa <_vfiprintf_r+0x69a>
 8011ca2:	b293      	uxth	r3, r2
 8011ca4:	9300      	str	r3, [sp, #0]
 8011ca6:	9101      	str	r1, [sp, #4]
 8011ca8:	e7e8      	b.n	8011c7c <_vfiprintf_r+0x66c>
 8011caa:	2380      	movs	r3, #128	; 0x80
 8011cac:	0021      	movs	r1, r4
 8011cae:	009b      	lsls	r3, r3, #2
 8011cb0:	4019      	ands	r1, r3
 8011cb2:	421c      	tst	r4, r3
 8011cb4:	d003      	beq.n	8011cbe <_vfiprintf_r+0x6ae>
 8011cb6:	b2d3      	uxtb	r3, r2
 8011cb8:	9300      	str	r3, [sp, #0]
 8011cba:	9001      	str	r0, [sp, #4]
 8011cbc:	e7de      	b.n	8011c7c <_vfiprintf_r+0x66c>
 8011cbe:	9200      	str	r2, [sp, #0]
 8011cc0:	e7f1      	b.n	8011ca6 <_vfiprintf_r+0x696>
 8011cc2:	4a23      	ldr	r2, [pc, #140]	; (8011d50 <_vfiprintf_r+0x740>)
 8011cc4:	0020      	movs	r0, r4
 8011cc6:	920c      	str	r2, [sp, #48]	; 0x30
 8011cc8:	2220      	movs	r2, #32
 8011cca:	4010      	ands	r0, r2
 8011ccc:	4214      	tst	r4, r2
 8011cce:	d019      	beq.n	8011d04 <_vfiprintf_r+0x6f4>
 8011cd0:	3a19      	subs	r2, #25
 8011cd2:	3707      	adds	r7, #7
 8011cd4:	4397      	bics	r7, r2
 8011cd6:	0038      	movs	r0, r7
 8011cd8:	c806      	ldmia	r0!, {r1, r2}
 8011cda:	9100      	str	r1, [sp, #0]
 8011cdc:	9201      	str	r2, [sp, #4]
 8011cde:	9004      	str	r0, [sp, #16]
 8011ce0:	07e2      	lsls	r2, r4, #31
 8011ce2:	d509      	bpl.n	8011cf8 <_vfiprintf_r+0x6e8>
 8011ce4:	9a00      	ldr	r2, [sp, #0]
 8011ce6:	9901      	ldr	r1, [sp, #4]
 8011ce8:	430a      	orrs	r2, r1
 8011cea:	d005      	beq.n	8011cf8 <_vfiprintf_r+0x6e8>
 8011cec:	aa13      	add	r2, sp, #76	; 0x4c
 8011cee:	2130      	movs	r1, #48	; 0x30
 8011cf0:	7053      	strb	r3, [r2, #1]
 8011cf2:	2302      	movs	r3, #2
 8011cf4:	7011      	strb	r1, [r2, #0]
 8011cf6:	431c      	orrs	r4, r3
 8011cf8:	4b10      	ldr	r3, [pc, #64]	; (8011d3c <_vfiprintf_r+0x72c>)
 8011cfa:	401c      	ands	r4, r3
 8011cfc:	2302      	movs	r3, #2
 8011cfe:	e687      	b.n	8011a10 <_vfiprintf_r+0x400>
 8011d00:	4a10      	ldr	r2, [pc, #64]	; (8011d44 <_vfiprintf_r+0x734>)
 8011d02:	e7df      	b.n	8011cc4 <_vfiprintf_r+0x6b4>
 8011d04:	0039      	movs	r1, r7
 8011d06:	c904      	ldmia	r1!, {r2}
 8011d08:	0026      	movs	r6, r4
 8011d0a:	9104      	str	r1, [sp, #16]
 8011d0c:	2110      	movs	r1, #16
 8011d0e:	400e      	ands	r6, r1
 8011d10:	420c      	tst	r4, r1
 8011d12:	d002      	beq.n	8011d1a <_vfiprintf_r+0x70a>
 8011d14:	9200      	str	r2, [sp, #0]
 8011d16:	9001      	str	r0, [sp, #4]
 8011d18:	e7e2      	b.n	8011ce0 <_vfiprintf_r+0x6d0>
 8011d1a:	2140      	movs	r1, #64	; 0x40
 8011d1c:	0020      	movs	r0, r4
 8011d1e:	4008      	ands	r0, r1
 8011d20:	420c      	tst	r4, r1
 8011d22:	d003      	beq.n	8011d2c <_vfiprintf_r+0x71c>
 8011d24:	b292      	uxth	r2, r2
 8011d26:	9200      	str	r2, [sp, #0]
 8011d28:	9601      	str	r6, [sp, #4]
 8011d2a:	e7d9      	b.n	8011ce0 <_vfiprintf_r+0x6d0>
 8011d2c:	2180      	movs	r1, #128	; 0x80
 8011d2e:	0026      	movs	r6, r4
 8011d30:	0089      	lsls	r1, r1, #2
 8011d32:	400e      	ands	r6, r1
 8011d34:	420c      	tst	r4, r1
 8011d36:	d0f6      	beq.n	8011d26 <_vfiprintf_r+0x716>
 8011d38:	b2d2      	uxtb	r2, r2
 8011d3a:	e7eb      	b.n	8011d14 <_vfiprintf_r+0x704>
 8011d3c:	fffffbff 	.word	0xfffffbff
 8011d40:	00007830 	.word	0x00007830
 8011d44:	0801480c 	.word	0x0801480c
 8011d48:	08014919 	.word	0x08014919
 8011d4c:	08014929 	.word	0x08014929
 8011d50:	0801481d 	.word	0x0801481d
 8011d54:	9b01      	ldr	r3, [sp, #4]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d109      	bne.n	8011d6e <_vfiprintf_r+0x75e>
 8011d5a:	9b00      	ldr	r3, [sp, #0]
 8011d5c:	2b09      	cmp	r3, #9
 8011d5e:	d806      	bhi.n	8011d6e <_vfiprintf_r+0x75e>
 8011d60:	26b7      	movs	r6, #183	; 0xb7
 8011d62:	ab12      	add	r3, sp, #72	; 0x48
 8011d64:	18f6      	adds	r6, r6, r3
 8011d66:	9b00      	ldr	r3, [sp, #0]
 8011d68:	3330      	adds	r3, #48	; 0x30
 8011d6a:	7033      	strb	r3, [r6, #0]
 8011d6c:	e115      	b.n	8011f9a <_vfiprintf_r+0x98a>
 8011d6e:	2380      	movs	r3, #128	; 0x80
 8011d70:	2400      	movs	r4, #0
 8011d72:	00db      	lsls	r3, r3, #3
 8011d74:	403b      	ands	r3, r7
 8011d76:	ae40      	add	r6, sp, #256	; 0x100
 8011d78:	930a      	str	r3, [sp, #40]	; 0x28
 8011d7a:	220a      	movs	r2, #10
 8011d7c:	9800      	ldr	r0, [sp, #0]
 8011d7e:	9901      	ldr	r1, [sp, #4]
 8011d80:	2300      	movs	r3, #0
 8011d82:	f7ee fb8f 	bl	80004a4 <__aeabi_uldivmod>
 8011d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d88:	3e01      	subs	r6, #1
 8011d8a:	3230      	adds	r2, #48	; 0x30
 8011d8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8011d8e:	9110      	str	r1, [sp, #64]	; 0x40
 8011d90:	7032      	strb	r2, [r6, #0]
 8011d92:	3401      	adds	r4, #1
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d01a      	beq.n	8011dce <_vfiprintf_r+0x7be>
 8011d98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d9a:	781b      	ldrb	r3, [r3, #0]
 8011d9c:	42a3      	cmp	r3, r4
 8011d9e:	d116      	bne.n	8011dce <_vfiprintf_r+0x7be>
 8011da0:	2cff      	cmp	r4, #255	; 0xff
 8011da2:	d014      	beq.n	8011dce <_vfiprintf_r+0x7be>
 8011da4:	9b01      	ldr	r3, [sp, #4]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d102      	bne.n	8011db0 <_vfiprintf_r+0x7a0>
 8011daa:	9b00      	ldr	r3, [sp, #0]
 8011dac:	2b09      	cmp	r3, #9
 8011dae:	d90e      	bls.n	8011dce <_vfiprintf_r+0x7be>
 8011db0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011db2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011db4:	1af6      	subs	r6, r6, r3
 8011db6:	001a      	movs	r2, r3
 8011db8:	0030      	movs	r0, r6
 8011dba:	f7f9 ffb2 	bl	800bd22 <strncpy>
 8011dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011dc0:	2400      	movs	r4, #0
 8011dc2:	785b      	ldrb	r3, [r3, #1]
 8011dc4:	1e5a      	subs	r2, r3, #1
 8011dc6:	4193      	sbcs	r3, r2
 8011dc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011dca:	18d3      	adds	r3, r2, r3
 8011dcc:	930d      	str	r3, [sp, #52]	; 0x34
 8011dce:	9b01      	ldr	r3, [sp, #4]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d103      	bne.n	8011ddc <_vfiprintf_r+0x7cc>
 8011dd4:	9b00      	ldr	r3, [sp, #0]
 8011dd6:	2b09      	cmp	r3, #9
 8011dd8:	d800      	bhi.n	8011ddc <_vfiprintf_r+0x7cc>
 8011dda:	e0de      	b.n	8011f9a <_vfiprintf_r+0x98a>
 8011ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011dde:	9300      	str	r3, [sp, #0]
 8011de0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011de2:	9301      	str	r3, [sp, #4]
 8011de4:	e7c9      	b.n	8011d7a <_vfiprintf_r+0x76a>
 8011de6:	200f      	movs	r0, #15
 8011de8:	9b00      	ldr	r3, [sp, #0]
 8011dea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011dec:	4003      	ands	r3, r0
 8011dee:	5cd3      	ldrb	r3, [r2, r3]
 8011df0:	3e01      	subs	r6, #1
 8011df2:	7033      	strb	r3, [r6, #0]
 8011df4:	9b01      	ldr	r3, [sp, #4]
 8011df6:	0719      	lsls	r1, r3, #28
 8011df8:	9b00      	ldr	r3, [sp, #0]
 8011dfa:	091a      	lsrs	r2, r3, #4
 8011dfc:	9b01      	ldr	r3, [sp, #4]
 8011dfe:	4311      	orrs	r1, r2
 8011e00:	091b      	lsrs	r3, r3, #4
 8011e02:	9301      	str	r3, [sp, #4]
 8011e04:	000b      	movs	r3, r1
 8011e06:	9a01      	ldr	r2, [sp, #4]
 8011e08:	9100      	str	r1, [sp, #0]
 8011e0a:	4313      	orrs	r3, r2
 8011e0c:	d1ec      	bne.n	8011de8 <_vfiprintf_r+0x7d8>
 8011e0e:	e0c4      	b.n	8011f9a <_vfiprintf_r+0x98a>
 8011e10:	ae40      	add	r6, sp, #256	; 0x100
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d000      	beq.n	8011e18 <_vfiprintf_r+0x808>
 8011e16:	e0c0      	b.n	8011f9a <_vfiprintf_r+0x98a>
 8011e18:	07e4      	lsls	r4, r4, #31
 8011e1a:	d400      	bmi.n	8011e1e <_vfiprintf_r+0x80e>
 8011e1c:	e0bd      	b.n	8011f9a <_vfiprintf_r+0x98a>
 8011e1e:	26b7      	movs	r6, #183	; 0xb7
 8011e20:	ab12      	add	r3, sp, #72	; 0x48
 8011e22:	18f6      	adds	r6, r6, r3
 8011e24:	2330      	movs	r3, #48	; 0x30
 8011e26:	e7a0      	b.n	8011d6a <_vfiprintf_r+0x75a>
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d100      	bne.n	8011e2e <_vfiprintf_r+0x81e>
 8011e2c:	e07e      	b.n	8011f2c <_vfiprintf_r+0x91c>
 8011e2e:	ae27      	add	r6, sp, #156	; 0x9c
 8011e30:	7033      	strb	r3, [r6, #0]
 8011e32:	2300      	movs	r3, #0
 8011e34:	aa12      	add	r2, sp, #72	; 0x48
 8011e36:	70d3      	strb	r3, [r2, #3]
 8011e38:	9704      	str	r7, [sp, #16]
 8011e3a:	e576      	b.n	801192a <_vfiprintf_r+0x31a>
 8011e3c:	2010      	movs	r0, #16
 8011e3e:	1812      	adds	r2, r2, r0
 8011e40:	6068      	str	r0, [r5, #4]
 8011e42:	9216      	str	r2, [sp, #88]	; 0x58
 8011e44:	9315      	str	r3, [sp, #84]	; 0x54
 8011e46:	2b07      	cmp	r3, #7
 8011e48:	dd07      	ble.n	8011e5a <_vfiprintf_r+0x84a>
 8011e4a:	9903      	ldr	r1, [sp, #12]
 8011e4c:	9806      	ldr	r0, [sp, #24]
 8011e4e:	aa14      	add	r2, sp, #80	; 0x50
 8011e50:	f7ff fba9 	bl	80115a6 <__sprint_r>
 8011e54:	2800      	cmp	r0, #0
 8011e56:	d144      	bne.n	8011ee2 <_vfiprintf_r+0x8d2>
 8011e58:	a917      	add	r1, sp, #92	; 0x5c
 8011e5a:	000d      	movs	r5, r1
 8011e5c:	3f10      	subs	r7, #16
 8011e5e:	e63b      	b.n	8011ad8 <_vfiprintf_r+0x4c8>
 8011e60:	2010      	movs	r0, #16
 8011e62:	1812      	adds	r2, r2, r0
 8011e64:	6068      	str	r0, [r5, #4]
 8011e66:	9216      	str	r2, [sp, #88]	; 0x58
 8011e68:	9315      	str	r3, [sp, #84]	; 0x54
 8011e6a:	2b07      	cmp	r3, #7
 8011e6c:	dd07      	ble.n	8011e7e <_vfiprintf_r+0x86e>
 8011e6e:	9903      	ldr	r1, [sp, #12]
 8011e70:	9806      	ldr	r0, [sp, #24]
 8011e72:	aa14      	add	r2, sp, #80	; 0x50
 8011e74:	f7ff fb97 	bl	80115a6 <__sprint_r>
 8011e78:	2800      	cmp	r0, #0
 8011e7a:	d132      	bne.n	8011ee2 <_vfiprintf_r+0x8d2>
 8011e7c:	a917      	add	r1, sp, #92	; 0x5c
 8011e7e:	000d      	movs	r5, r1
 8011e80:	3f10      	subs	r7, #16
 8011e82:	e67e      	b.n	8011b82 <_vfiprintf_r+0x572>
 8011e84:	2010      	movs	r0, #16
 8011e86:	1812      	adds	r2, r2, r0
 8011e88:	6068      	str	r0, [r5, #4]
 8011e8a:	9216      	str	r2, [sp, #88]	; 0x58
 8011e8c:	9315      	str	r3, [sp, #84]	; 0x54
 8011e8e:	2b07      	cmp	r3, #7
 8011e90:	dd07      	ble.n	8011ea2 <_vfiprintf_r+0x892>
 8011e92:	9903      	ldr	r1, [sp, #12]
 8011e94:	9806      	ldr	r0, [sp, #24]
 8011e96:	aa14      	add	r2, sp, #80	; 0x50
 8011e98:	f7ff fb85 	bl	80115a6 <__sprint_r>
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	d120      	bne.n	8011ee2 <_vfiprintf_r+0x8d2>
 8011ea0:	a917      	add	r1, sp, #92	; 0x5c
 8011ea2:	000d      	movs	r5, r1
 8011ea4:	3f10      	subs	r7, #16
 8011ea6:	e68b      	b.n	8011bc0 <_vfiprintf_r+0x5b0>
 8011ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011eac:	2610      	movs	r6, #16
 8011eae:	1a9c      	subs	r4, r3, r2
 8011eb0:	2c00      	cmp	r4, #0
 8011eb2:	dc00      	bgt.n	8011eb6 <_vfiprintf_r+0x8a6>
 8011eb4:	e6b7      	b.n	8011c26 <_vfiprintf_r+0x616>
 8011eb6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011eb8:	4a3b      	ldr	r2, [pc, #236]	; (8011fa8 <_vfiprintf_r+0x998>)
 8011eba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011ebc:	3101      	adds	r1, #1
 8011ebe:	602a      	str	r2, [r5, #0]
 8011ec0:	2c10      	cmp	r4, #16
 8011ec2:	dc22      	bgt.n	8011f0a <_vfiprintf_r+0x8fa>
 8011ec4:	606c      	str	r4, [r5, #4]
 8011ec6:	18e4      	adds	r4, r4, r3
 8011ec8:	9416      	str	r4, [sp, #88]	; 0x58
 8011eca:	9115      	str	r1, [sp, #84]	; 0x54
 8011ecc:	2907      	cmp	r1, #7
 8011ece:	dc00      	bgt.n	8011ed2 <_vfiprintf_r+0x8c2>
 8011ed0:	e6a9      	b.n	8011c26 <_vfiprintf_r+0x616>
 8011ed2:	9903      	ldr	r1, [sp, #12]
 8011ed4:	9806      	ldr	r0, [sp, #24]
 8011ed6:	aa14      	add	r2, sp, #80	; 0x50
 8011ed8:	f7ff fb65 	bl	80115a6 <__sprint_r>
 8011edc:	2800      	cmp	r0, #0
 8011ede:	d100      	bne.n	8011ee2 <_vfiprintf_r+0x8d2>
 8011ee0:	e6a1      	b.n	8011c26 <_vfiprintf_r+0x616>
 8011ee2:	9b03      	ldr	r3, [sp, #12]
 8011ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ee6:	07db      	lsls	r3, r3, #31
 8011ee8:	d407      	bmi.n	8011efa <_vfiprintf_r+0x8ea>
 8011eea:	9b03      	ldr	r3, [sp, #12]
 8011eec:	899b      	ldrh	r3, [r3, #12]
 8011eee:	059b      	lsls	r3, r3, #22
 8011ef0:	d403      	bmi.n	8011efa <_vfiprintf_r+0x8ea>
 8011ef2:	9b03      	ldr	r3, [sp, #12]
 8011ef4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011ef6:	f7fa f808 	bl	800bf0a <__retarget_lock_release_recursive>
 8011efa:	9b03      	ldr	r3, [sp, #12]
 8011efc:	899b      	ldrh	r3, [r3, #12]
 8011efe:	065b      	lsls	r3, r3, #25
 8011f00:	d401      	bmi.n	8011f06 <_vfiprintf_r+0x8f6>
 8011f02:	f7ff fbc3 	bl	801168c <_vfiprintf_r+0x7c>
 8011f06:	f7ff fbbe 	bl	8011686 <_vfiprintf_r+0x76>
 8011f0a:	3310      	adds	r3, #16
 8011f0c:	606e      	str	r6, [r5, #4]
 8011f0e:	9316      	str	r3, [sp, #88]	; 0x58
 8011f10:	9115      	str	r1, [sp, #84]	; 0x54
 8011f12:	3508      	adds	r5, #8
 8011f14:	2907      	cmp	r1, #7
 8011f16:	dd07      	ble.n	8011f28 <_vfiprintf_r+0x918>
 8011f18:	9903      	ldr	r1, [sp, #12]
 8011f1a:	9806      	ldr	r0, [sp, #24]
 8011f1c:	aa14      	add	r2, sp, #80	; 0x50
 8011f1e:	f7ff fb42 	bl	80115a6 <__sprint_r>
 8011f22:	2800      	cmp	r0, #0
 8011f24:	d1dd      	bne.n	8011ee2 <_vfiprintf_r+0x8d2>
 8011f26:	ad17      	add	r5, sp, #92	; 0x5c
 8011f28:	3c10      	subs	r4, #16
 8011f2a:	e7c4      	b.n	8011eb6 <_vfiprintf_r+0x8a6>
 8011f2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d102      	bne.n	8011f38 <_vfiprintf_r+0x928>
 8011f32:	2300      	movs	r3, #0
 8011f34:	9315      	str	r3, [sp, #84]	; 0x54
 8011f36:	e7d4      	b.n	8011ee2 <_vfiprintf_r+0x8d2>
 8011f38:	9903      	ldr	r1, [sp, #12]
 8011f3a:	9806      	ldr	r0, [sp, #24]
 8011f3c:	aa14      	add	r2, sp, #80	; 0x50
 8011f3e:	f7ff fb32 	bl	80115a6 <__sprint_r>
 8011f42:	2800      	cmp	r0, #0
 8011f44:	d0f5      	beq.n	8011f32 <_vfiprintf_r+0x922>
 8011f46:	e7cc      	b.n	8011ee2 <_vfiprintf_r+0x8d2>
 8011f48:	0027      	movs	r7, r4
 8011f4a:	2a00      	cmp	r2, #0
 8011f4c:	d100      	bne.n	8011f50 <_vfiprintf_r+0x940>
 8011f4e:	e51b      	b.n	8011988 <_vfiprintf_r+0x378>
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	d100      	bne.n	8011f56 <_vfiprintf_r+0x946>
 8011f54:	e6fe      	b.n	8011d54 <_vfiprintf_r+0x744>
 8011f56:	ae40      	add	r6, sp, #256	; 0x100
 8011f58:	2b02      	cmp	r3, #2
 8011f5a:	d100      	bne.n	8011f5e <_vfiprintf_r+0x94e>
 8011f5c:	e743      	b.n	8011de6 <_vfiprintf_r+0x7d6>
 8011f5e:	2307      	movs	r3, #7
 8011f60:	469c      	mov	ip, r3
 8011f62:	4663      	mov	r3, ip
 8011f64:	9900      	ldr	r1, [sp, #0]
 8011f66:	0032      	movs	r2, r6
 8011f68:	400b      	ands	r3, r1
 8011f6a:	9901      	ldr	r1, [sp, #4]
 8011f6c:	3e01      	subs	r6, #1
 8011f6e:	074c      	lsls	r4, r1, #29
 8011f70:	9900      	ldr	r1, [sp, #0]
 8011f72:	3330      	adds	r3, #48	; 0x30
 8011f74:	08c8      	lsrs	r0, r1, #3
 8011f76:	9901      	ldr	r1, [sp, #4]
 8011f78:	4304      	orrs	r4, r0
 8011f7a:	08c9      	lsrs	r1, r1, #3
 8011f7c:	9101      	str	r1, [sp, #4]
 8011f7e:	0021      	movs	r1, r4
 8011f80:	9801      	ldr	r0, [sp, #4]
 8011f82:	7033      	strb	r3, [r6, #0]
 8011f84:	9400      	str	r4, [sp, #0]
 8011f86:	4301      	orrs	r1, r0
 8011f88:	d1eb      	bne.n	8011f62 <_vfiprintf_r+0x952>
 8011f8a:	07f9      	lsls	r1, r7, #31
 8011f8c:	d505      	bpl.n	8011f9a <_vfiprintf_r+0x98a>
 8011f8e:	2b30      	cmp	r3, #48	; 0x30
 8011f90:	d003      	beq.n	8011f9a <_vfiprintf_r+0x98a>
 8011f92:	2330      	movs	r3, #48	; 0x30
 8011f94:	3e01      	subs	r6, #1
 8011f96:	7033      	strb	r3, [r6, #0]
 8011f98:	1e96      	subs	r6, r2, #2
 8011f9a:	9b05      	ldr	r3, [sp, #20]
 8011f9c:	003c      	movs	r4, r7
 8011f9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011fa0:	ab40      	add	r3, sp, #256	; 0x100
 8011fa2:	1b9b      	subs	r3, r3, r6
 8011fa4:	9305      	str	r3, [sp, #20]
 8011fa6:	e575      	b.n	8011a94 <_vfiprintf_r+0x484>
 8011fa8:	08014919 	.word	0x08014919

08011fac <__sbprintf>:
 8011fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fae:	0015      	movs	r5, r2
 8011fb0:	2202      	movs	r2, #2
 8011fb2:	4c1e      	ldr	r4, [pc, #120]	; (801202c <__sbprintf+0x80>)
 8011fb4:	001f      	movs	r7, r3
 8011fb6:	898b      	ldrh	r3, [r1, #12]
 8011fb8:	44a5      	add	sp, r4
 8011fba:	4393      	bics	r3, r2
 8011fbc:	466a      	mov	r2, sp
 8011fbe:	8193      	strh	r3, [r2, #12]
 8011fc0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011fc2:	0006      	movs	r6, r0
 8011fc4:	9319      	str	r3, [sp, #100]	; 0x64
 8011fc6:	89cb      	ldrh	r3, [r1, #14]
 8011fc8:	a816      	add	r0, sp, #88	; 0x58
 8011fca:	81d3      	strh	r3, [r2, #14]
 8011fcc:	69cb      	ldr	r3, [r1, #28]
 8011fce:	000c      	movs	r4, r1
 8011fd0:	9307      	str	r3, [sp, #28]
 8011fd2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8011fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8011fd6:	ab1a      	add	r3, sp, #104	; 0x68
 8011fd8:	9300      	str	r3, [sp, #0]
 8011fda:	9304      	str	r3, [sp, #16]
 8011fdc:	2380      	movs	r3, #128	; 0x80
 8011fde:	00db      	lsls	r3, r3, #3
 8011fe0:	9302      	str	r3, [sp, #8]
 8011fe2:	9305      	str	r3, [sp, #20]
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	9306      	str	r3, [sp, #24]
 8011fe8:	f7f9 ff8c 	bl	800bf04 <__retarget_lock_init_recursive>
 8011fec:	002a      	movs	r2, r5
 8011fee:	003b      	movs	r3, r7
 8011ff0:	4669      	mov	r1, sp
 8011ff2:	0030      	movs	r0, r6
 8011ff4:	f7ff fb0c 	bl	8011610 <_vfiprintf_r>
 8011ff8:	1e05      	subs	r5, r0, #0
 8011ffa:	db07      	blt.n	801200c <__sbprintf+0x60>
 8011ffc:	4669      	mov	r1, sp
 8011ffe:	0030      	movs	r0, r6
 8012000:	f7fd fdf6 	bl	800fbf0 <_fflush_r>
 8012004:	2800      	cmp	r0, #0
 8012006:	d001      	beq.n	801200c <__sbprintf+0x60>
 8012008:	2501      	movs	r5, #1
 801200a:	426d      	negs	r5, r5
 801200c:	466b      	mov	r3, sp
 801200e:	899a      	ldrh	r2, [r3, #12]
 8012010:	2340      	movs	r3, #64	; 0x40
 8012012:	421a      	tst	r2, r3
 8012014:	d002      	beq.n	801201c <__sbprintf+0x70>
 8012016:	89a2      	ldrh	r2, [r4, #12]
 8012018:	4313      	orrs	r3, r2
 801201a:	81a3      	strh	r3, [r4, #12]
 801201c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801201e:	f7f9 ff72 	bl	800bf06 <__retarget_lock_close_recursive>
 8012022:	0028      	movs	r0, r5
 8012024:	4b02      	ldr	r3, [pc, #8]	; (8012030 <__sbprintf+0x84>)
 8012026:	449d      	add	sp, r3
 8012028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801202a:	46c0      	nop			; (mov r8, r8)
 801202c:	fffffb94 	.word	0xfffffb94
 8012030:	0000046c 	.word	0x0000046c

08012034 <__sfvwrite_r>:
 8012034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012036:	6893      	ldr	r3, [r2, #8]
 8012038:	b087      	sub	sp, #28
 801203a:	000c      	movs	r4, r1
 801203c:	9002      	str	r0, [sp, #8]
 801203e:	9204      	str	r2, [sp, #16]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d102      	bne.n	801204a <__sfvwrite_r+0x16>
 8012044:	2000      	movs	r0, #0
 8012046:	b007      	add	sp, #28
 8012048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801204a:	898b      	ldrh	r3, [r1, #12]
 801204c:	071b      	lsls	r3, r3, #28
 801204e:	d557      	bpl.n	8012100 <__sfvwrite_r+0xcc>
 8012050:	690b      	ldr	r3, [r1, #16]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d054      	beq.n	8012100 <__sfvwrite_r+0xcc>
 8012056:	9b04      	ldr	r3, [sp, #16]
 8012058:	2202      	movs	r2, #2
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	9301      	str	r3, [sp, #4]
 801205e:	89a3      	ldrh	r3, [r4, #12]
 8012060:	001f      	movs	r7, r3
 8012062:	4017      	ands	r7, r2
 8012064:	4213      	tst	r3, r2
 8012066:	d171      	bne.n	801214c <__sfvwrite_r+0x118>
 8012068:	2201      	movs	r2, #1
 801206a:	2101      	movs	r1, #1
 801206c:	401a      	ands	r2, r3
 801206e:	420b      	tst	r3, r1
 8012070:	d100      	bne.n	8012074 <__sfvwrite_r+0x40>
 8012072:	e0a5      	b.n	80121c0 <__sfvwrite_r+0x18c>
 8012074:	0038      	movs	r0, r7
 8012076:	003e      	movs	r6, r7
 8012078:	9703      	str	r7, [sp, #12]
 801207a:	9b03      	ldr	r3, [sp, #12]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d100      	bne.n	8012082 <__sfvwrite_r+0x4e>
 8012080:	e10b      	b.n	801229a <__sfvwrite_r+0x266>
 8012082:	2800      	cmp	r0, #0
 8012084:	d10a      	bne.n	801209c <__sfvwrite_r+0x68>
 8012086:	001a      	movs	r2, r3
 8012088:	210a      	movs	r1, #10
 801208a:	0030      	movs	r0, r6
 801208c:	f7fd fe2a 	bl	800fce4 <memchr>
 8012090:	9b03      	ldr	r3, [sp, #12]
 8012092:	1c5f      	adds	r7, r3, #1
 8012094:	2800      	cmp	r0, #0
 8012096:	d001      	beq.n	801209c <__sfvwrite_r+0x68>
 8012098:	3001      	adds	r0, #1
 801209a:	1b87      	subs	r7, r0, r6
 801209c:	9b03      	ldr	r3, [sp, #12]
 801209e:	9705      	str	r7, [sp, #20]
 80120a0:	429f      	cmp	r7, r3
 80120a2:	d900      	bls.n	80120a6 <__sfvwrite_r+0x72>
 80120a4:	9305      	str	r3, [sp, #20]
 80120a6:	6820      	ldr	r0, [r4, #0]
 80120a8:	6922      	ldr	r2, [r4, #16]
 80120aa:	68a5      	ldr	r5, [r4, #8]
 80120ac:	6963      	ldr	r3, [r4, #20]
 80120ae:	4290      	cmp	r0, r2
 80120b0:	d800      	bhi.n	80120b4 <__sfvwrite_r+0x80>
 80120b2:	e0fb      	b.n	80122ac <__sfvwrite_r+0x278>
 80120b4:	9a05      	ldr	r2, [sp, #20]
 80120b6:	18ed      	adds	r5, r5, r3
 80120b8:	42aa      	cmp	r2, r5
 80120ba:	dc00      	bgt.n	80120be <__sfvwrite_r+0x8a>
 80120bc:	e0f6      	b.n	80122ac <__sfvwrite_r+0x278>
 80120be:	0031      	movs	r1, r6
 80120c0:	002a      	movs	r2, r5
 80120c2:	f000 fa1e 	bl	8012502 <memmove>
 80120c6:	6823      	ldr	r3, [r4, #0]
 80120c8:	0021      	movs	r1, r4
 80120ca:	195b      	adds	r3, r3, r5
 80120cc:	9802      	ldr	r0, [sp, #8]
 80120ce:	6023      	str	r3, [r4, #0]
 80120d0:	f7fd fd8e 	bl	800fbf0 <_fflush_r>
 80120d4:	2800      	cmp	r0, #0
 80120d6:	d16e      	bne.n	80121b6 <__sfvwrite_r+0x182>
 80120d8:	2001      	movs	r0, #1
 80120da:	1b7f      	subs	r7, r7, r5
 80120dc:	d105      	bne.n	80120ea <__sfvwrite_r+0xb6>
 80120de:	0021      	movs	r1, r4
 80120e0:	9802      	ldr	r0, [sp, #8]
 80120e2:	f7fd fd85 	bl	800fbf0 <_fflush_r>
 80120e6:	2800      	cmp	r0, #0
 80120e8:	d165      	bne.n	80121b6 <__sfvwrite_r+0x182>
 80120ea:	9b03      	ldr	r3, [sp, #12]
 80120ec:	9a04      	ldr	r2, [sp, #16]
 80120ee:	1b5b      	subs	r3, r3, r5
 80120f0:	9303      	str	r3, [sp, #12]
 80120f2:	9b04      	ldr	r3, [sp, #16]
 80120f4:	1976      	adds	r6, r6, r5
 80120f6:	689b      	ldr	r3, [r3, #8]
 80120f8:	1b5b      	subs	r3, r3, r5
 80120fa:	6093      	str	r3, [r2, #8]
 80120fc:	d1bd      	bne.n	801207a <__sfvwrite_r+0x46>
 80120fe:	e7a1      	b.n	8012044 <__sfvwrite_r+0x10>
 8012100:	0021      	movs	r1, r4
 8012102:	9802      	ldr	r0, [sp, #8]
 8012104:	f000 f932 	bl	801236c <__swsetup_r>
 8012108:	2800      	cmp	r0, #0
 801210a:	d0a4      	beq.n	8012056 <__sfvwrite_r+0x22>
 801210c:	2001      	movs	r0, #1
 801210e:	4240      	negs	r0, r0
 8012110:	e799      	b.n	8012046 <__sfvwrite_r+0x12>
 8012112:	9b01      	ldr	r3, [sp, #4]
 8012114:	681e      	ldr	r6, [r3, #0]
 8012116:	685d      	ldr	r5, [r3, #4]
 8012118:	3308      	adds	r3, #8
 801211a:	9301      	str	r3, [sp, #4]
 801211c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801211e:	69e1      	ldr	r1, [r4, #28]
 8012120:	2d00      	cmp	r5, #0
 8012122:	d0f6      	beq.n	8012112 <__sfvwrite_r+0xde>
 8012124:	4a6e      	ldr	r2, [pc, #440]	; (80122e0 <__sfvwrite_r+0x2ac>)
 8012126:	002b      	movs	r3, r5
 8012128:	4295      	cmp	r5, r2
 801212a:	d900      	bls.n	801212e <__sfvwrite_r+0xfa>
 801212c:	0013      	movs	r3, r2
 801212e:	0032      	movs	r2, r6
 8012130:	9802      	ldr	r0, [sp, #8]
 8012132:	47b8      	blx	r7
 8012134:	2800      	cmp	r0, #0
 8012136:	dd3e      	ble.n	80121b6 <__sfvwrite_r+0x182>
 8012138:	9b04      	ldr	r3, [sp, #16]
 801213a:	9a04      	ldr	r2, [sp, #16]
 801213c:	689b      	ldr	r3, [r3, #8]
 801213e:	1836      	adds	r6, r6, r0
 8012140:	1a1b      	subs	r3, r3, r0
 8012142:	1a2d      	subs	r5, r5, r0
 8012144:	6093      	str	r3, [r2, #8]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d1e8      	bne.n	801211c <__sfvwrite_r+0xe8>
 801214a:	e77b      	b.n	8012044 <__sfvwrite_r+0x10>
 801214c:	2600      	movs	r6, #0
 801214e:	0035      	movs	r5, r6
 8012150:	e7e4      	b.n	801211c <__sfvwrite_r+0xe8>
 8012152:	9b01      	ldr	r3, [sp, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	9303      	str	r3, [sp, #12]
 8012158:	9b01      	ldr	r3, [sp, #4]
 801215a:	685d      	ldr	r5, [r3, #4]
 801215c:	3308      	adds	r3, #8
 801215e:	9301      	str	r3, [sp, #4]
 8012160:	220c      	movs	r2, #12
 8012162:	5ea3      	ldrsh	r3, [r4, r2]
 8012164:	6820      	ldr	r0, [r4, #0]
 8012166:	68a6      	ldr	r6, [r4, #8]
 8012168:	2d00      	cmp	r5, #0
 801216a:	d0f2      	beq.n	8012152 <__sfvwrite_r+0x11e>
 801216c:	2180      	movs	r1, #128	; 0x80
 801216e:	0089      	lsls	r1, r1, #2
 8012170:	b29a      	uxth	r2, r3
 8012172:	420b      	tst	r3, r1
 8012174:	d062      	beq.n	801223c <__sfvwrite_r+0x208>
 8012176:	42ae      	cmp	r6, r5
 8012178:	d837      	bhi.n	80121ea <__sfvwrite_r+0x1b6>
 801217a:	2390      	movs	r3, #144	; 0x90
 801217c:	00db      	lsls	r3, r3, #3
 801217e:	421a      	tst	r2, r3
 8012180:	d033      	beq.n	80121ea <__sfvwrite_r+0x1b6>
 8012182:	6921      	ldr	r1, [r4, #16]
 8012184:	1a43      	subs	r3, r0, r1
 8012186:	2003      	movs	r0, #3
 8012188:	9305      	str	r3, [sp, #20]
 801218a:	6963      	ldr	r3, [r4, #20]
 801218c:	4343      	muls	r3, r0
 801218e:	0fdf      	lsrs	r7, r3, #31
 8012190:	18ff      	adds	r7, r7, r3
 8012192:	9b05      	ldr	r3, [sp, #20]
 8012194:	107f      	asrs	r7, r7, #1
 8012196:	3301      	adds	r3, #1
 8012198:	195b      	adds	r3, r3, r5
 801219a:	42bb      	cmp	r3, r7
 801219c:	d900      	bls.n	80121a0 <__sfvwrite_r+0x16c>
 801219e:	001f      	movs	r7, r3
 80121a0:	0552      	lsls	r2, r2, #21
 80121a2:	d53c      	bpl.n	801221e <__sfvwrite_r+0x1ea>
 80121a4:	0039      	movs	r1, r7
 80121a6:	9802      	ldr	r0, [sp, #8]
 80121a8:	f7f8 fb22 	bl	800a7f0 <_malloc_r>
 80121ac:	1e06      	subs	r6, r0, #0
 80121ae:	d10a      	bne.n	80121c6 <__sfvwrite_r+0x192>
 80121b0:	230c      	movs	r3, #12
 80121b2:	9a02      	ldr	r2, [sp, #8]
 80121b4:	6013      	str	r3, [r2, #0]
 80121b6:	2340      	movs	r3, #64	; 0x40
 80121b8:	89a2      	ldrh	r2, [r4, #12]
 80121ba:	4313      	orrs	r3, r2
 80121bc:	81a3      	strh	r3, [r4, #12]
 80121be:	e7a5      	b.n	801210c <__sfvwrite_r+0xd8>
 80121c0:	0015      	movs	r5, r2
 80121c2:	9203      	str	r2, [sp, #12]
 80121c4:	e7cc      	b.n	8012160 <__sfvwrite_r+0x12c>
 80121c6:	9a05      	ldr	r2, [sp, #20]
 80121c8:	6921      	ldr	r1, [r4, #16]
 80121ca:	f7f9 feaa 	bl	800bf22 <memcpy>
 80121ce:	89a2      	ldrh	r2, [r4, #12]
 80121d0:	4b44      	ldr	r3, [pc, #272]	; (80122e4 <__sfvwrite_r+0x2b0>)
 80121d2:	401a      	ands	r2, r3
 80121d4:	2380      	movs	r3, #128	; 0x80
 80121d6:	4313      	orrs	r3, r2
 80121d8:	81a3      	strh	r3, [r4, #12]
 80121da:	9b05      	ldr	r3, [sp, #20]
 80121dc:	6126      	str	r6, [r4, #16]
 80121de:	18f6      	adds	r6, r6, r3
 80121e0:	6026      	str	r6, [r4, #0]
 80121e2:	002e      	movs	r6, r5
 80121e4:	6167      	str	r7, [r4, #20]
 80121e6:	1aff      	subs	r7, r7, r3
 80121e8:	60a7      	str	r7, [r4, #8]
 80121ea:	002f      	movs	r7, r5
 80121ec:	42ae      	cmp	r6, r5
 80121ee:	d900      	bls.n	80121f2 <__sfvwrite_r+0x1be>
 80121f0:	002e      	movs	r6, r5
 80121f2:	0032      	movs	r2, r6
 80121f4:	9903      	ldr	r1, [sp, #12]
 80121f6:	6820      	ldr	r0, [r4, #0]
 80121f8:	f000 f983 	bl	8012502 <memmove>
 80121fc:	68a3      	ldr	r3, [r4, #8]
 80121fe:	1b9b      	subs	r3, r3, r6
 8012200:	60a3      	str	r3, [r4, #8]
 8012202:	6823      	ldr	r3, [r4, #0]
 8012204:	199b      	adds	r3, r3, r6
 8012206:	6023      	str	r3, [r4, #0]
 8012208:	9b03      	ldr	r3, [sp, #12]
 801220a:	9a04      	ldr	r2, [sp, #16]
 801220c:	19db      	adds	r3, r3, r7
 801220e:	9303      	str	r3, [sp, #12]
 8012210:	9b04      	ldr	r3, [sp, #16]
 8012212:	1bed      	subs	r5, r5, r7
 8012214:	689b      	ldr	r3, [r3, #8]
 8012216:	1bdb      	subs	r3, r3, r7
 8012218:	6093      	str	r3, [r2, #8]
 801221a:	d1a1      	bne.n	8012160 <__sfvwrite_r+0x12c>
 801221c:	e712      	b.n	8012044 <__sfvwrite_r+0x10>
 801221e:	003a      	movs	r2, r7
 8012220:	9802      	ldr	r0, [sp, #8]
 8012222:	f7fe fcd7 	bl	8010bd4 <_realloc_r>
 8012226:	1e06      	subs	r6, r0, #0
 8012228:	d1d7      	bne.n	80121da <__sfvwrite_r+0x1a6>
 801222a:	6921      	ldr	r1, [r4, #16]
 801222c:	9802      	ldr	r0, [sp, #8]
 801222e:	f7f9 fef3 	bl	800c018 <_free_r>
 8012232:	2280      	movs	r2, #128	; 0x80
 8012234:	89a3      	ldrh	r3, [r4, #12]
 8012236:	4393      	bics	r3, r2
 8012238:	81a3      	strh	r3, [r4, #12]
 801223a:	e7b9      	b.n	80121b0 <__sfvwrite_r+0x17c>
 801223c:	6923      	ldr	r3, [r4, #16]
 801223e:	4283      	cmp	r3, r0
 8012240:	d302      	bcc.n	8012248 <__sfvwrite_r+0x214>
 8012242:	6967      	ldr	r7, [r4, #20]
 8012244:	42af      	cmp	r7, r5
 8012246:	d916      	bls.n	8012276 <__sfvwrite_r+0x242>
 8012248:	42ae      	cmp	r6, r5
 801224a:	d900      	bls.n	801224e <__sfvwrite_r+0x21a>
 801224c:	002e      	movs	r6, r5
 801224e:	0032      	movs	r2, r6
 8012250:	9903      	ldr	r1, [sp, #12]
 8012252:	f000 f956 	bl	8012502 <memmove>
 8012256:	68a3      	ldr	r3, [r4, #8]
 8012258:	6822      	ldr	r2, [r4, #0]
 801225a:	1b9b      	subs	r3, r3, r6
 801225c:	1992      	adds	r2, r2, r6
 801225e:	0037      	movs	r7, r6
 8012260:	60a3      	str	r3, [r4, #8]
 8012262:	6022      	str	r2, [r4, #0]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d1cf      	bne.n	8012208 <__sfvwrite_r+0x1d4>
 8012268:	0021      	movs	r1, r4
 801226a:	9802      	ldr	r0, [sp, #8]
 801226c:	f7fd fcc0 	bl	800fbf0 <_fflush_r>
 8012270:	2800      	cmp	r0, #0
 8012272:	d0c9      	beq.n	8012208 <__sfvwrite_r+0x1d4>
 8012274:	e79f      	b.n	80121b6 <__sfvwrite_r+0x182>
 8012276:	4b1c      	ldr	r3, [pc, #112]	; (80122e8 <__sfvwrite_r+0x2b4>)
 8012278:	0028      	movs	r0, r5
 801227a:	429d      	cmp	r5, r3
 801227c:	d900      	bls.n	8012280 <__sfvwrite_r+0x24c>
 801227e:	481b      	ldr	r0, [pc, #108]	; (80122ec <__sfvwrite_r+0x2b8>)
 8012280:	0039      	movs	r1, r7
 8012282:	f7ed ffe5 	bl	8000250 <__divsi3>
 8012286:	003b      	movs	r3, r7
 8012288:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801228a:	4343      	muls	r3, r0
 801228c:	9a03      	ldr	r2, [sp, #12]
 801228e:	69e1      	ldr	r1, [r4, #28]
 8012290:	9802      	ldr	r0, [sp, #8]
 8012292:	47b0      	blx	r6
 8012294:	1e07      	subs	r7, r0, #0
 8012296:	dcb7      	bgt.n	8012208 <__sfvwrite_r+0x1d4>
 8012298:	e78d      	b.n	80121b6 <__sfvwrite_r+0x182>
 801229a:	9b01      	ldr	r3, [sp, #4]
 801229c:	2000      	movs	r0, #0
 801229e:	681e      	ldr	r6, [r3, #0]
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	9303      	str	r3, [sp, #12]
 80122a4:	9b01      	ldr	r3, [sp, #4]
 80122a6:	3308      	adds	r3, #8
 80122a8:	9301      	str	r3, [sp, #4]
 80122aa:	e6e6      	b.n	801207a <__sfvwrite_r+0x46>
 80122ac:	9a05      	ldr	r2, [sp, #20]
 80122ae:	4293      	cmp	r3, r2
 80122b0:	dc08      	bgt.n	80122c4 <__sfvwrite_r+0x290>
 80122b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80122b4:	0032      	movs	r2, r6
 80122b6:	69e1      	ldr	r1, [r4, #28]
 80122b8:	9802      	ldr	r0, [sp, #8]
 80122ba:	47a8      	blx	r5
 80122bc:	1e05      	subs	r5, r0, #0
 80122be:	dd00      	ble.n	80122c2 <__sfvwrite_r+0x28e>
 80122c0:	e70a      	b.n	80120d8 <__sfvwrite_r+0xa4>
 80122c2:	e778      	b.n	80121b6 <__sfvwrite_r+0x182>
 80122c4:	9a05      	ldr	r2, [sp, #20]
 80122c6:	0031      	movs	r1, r6
 80122c8:	f000 f91b 	bl	8012502 <memmove>
 80122cc:	9a05      	ldr	r2, [sp, #20]
 80122ce:	68a3      	ldr	r3, [r4, #8]
 80122d0:	0015      	movs	r5, r2
 80122d2:	1a9b      	subs	r3, r3, r2
 80122d4:	60a3      	str	r3, [r4, #8]
 80122d6:	6823      	ldr	r3, [r4, #0]
 80122d8:	189b      	adds	r3, r3, r2
 80122da:	6023      	str	r3, [r4, #0]
 80122dc:	e6fc      	b.n	80120d8 <__sfvwrite_r+0xa4>
 80122de:	46c0      	nop			; (mov r8, r8)
 80122e0:	7ffffc00 	.word	0x7ffffc00
 80122e4:	fffffb7f 	.word	0xfffffb7f
 80122e8:	7ffffffe 	.word	0x7ffffffe
 80122ec:	7fffffff 	.word	0x7fffffff

080122f0 <__submore>:
 80122f0:	000b      	movs	r3, r1
 80122f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122f4:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80122f6:	3340      	adds	r3, #64	; 0x40
 80122f8:	000c      	movs	r4, r1
 80122fa:	429d      	cmp	r5, r3
 80122fc:	d11c      	bne.n	8012338 <__submore+0x48>
 80122fe:	2680      	movs	r6, #128	; 0x80
 8012300:	00f6      	lsls	r6, r6, #3
 8012302:	0031      	movs	r1, r6
 8012304:	f7f8 fa74 	bl	800a7f0 <_malloc_r>
 8012308:	2800      	cmp	r0, #0
 801230a:	d102      	bne.n	8012312 <__submore+0x22>
 801230c:	2001      	movs	r0, #1
 801230e:	4240      	negs	r0, r0
 8012310:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012312:	0023      	movs	r3, r4
 8012314:	6320      	str	r0, [r4, #48]	; 0x30
 8012316:	6366      	str	r6, [r4, #52]	; 0x34
 8012318:	3342      	adds	r3, #66	; 0x42
 801231a:	781a      	ldrb	r2, [r3, #0]
 801231c:	4b10      	ldr	r3, [pc, #64]	; (8012360 <__submore+0x70>)
 801231e:	54c2      	strb	r2, [r0, r3]
 8012320:	0023      	movs	r3, r4
 8012322:	3341      	adds	r3, #65	; 0x41
 8012324:	781a      	ldrb	r2, [r3, #0]
 8012326:	4b0f      	ldr	r3, [pc, #60]	; (8012364 <__submore+0x74>)
 8012328:	54c2      	strb	r2, [r0, r3]
 801232a:	782a      	ldrb	r2, [r5, #0]
 801232c:	4b0e      	ldr	r3, [pc, #56]	; (8012368 <__submore+0x78>)
 801232e:	54c2      	strb	r2, [r0, r3]
 8012330:	18c0      	adds	r0, r0, r3
 8012332:	6020      	str	r0, [r4, #0]
 8012334:	2000      	movs	r0, #0
 8012336:	e7eb      	b.n	8012310 <__submore+0x20>
 8012338:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 801233a:	0029      	movs	r1, r5
 801233c:	0073      	lsls	r3, r6, #1
 801233e:	001a      	movs	r2, r3
 8012340:	9301      	str	r3, [sp, #4]
 8012342:	f7fe fc47 	bl	8010bd4 <_realloc_r>
 8012346:	1e05      	subs	r5, r0, #0
 8012348:	d0e0      	beq.n	801230c <__submore+0x1c>
 801234a:	1987      	adds	r7, r0, r6
 801234c:	0001      	movs	r1, r0
 801234e:	0032      	movs	r2, r6
 8012350:	0038      	movs	r0, r7
 8012352:	f7f9 fde6 	bl	800bf22 <memcpy>
 8012356:	9b01      	ldr	r3, [sp, #4]
 8012358:	6027      	str	r7, [r4, #0]
 801235a:	6325      	str	r5, [r4, #48]	; 0x30
 801235c:	6363      	str	r3, [r4, #52]	; 0x34
 801235e:	e7e9      	b.n	8012334 <__submore+0x44>
 8012360:	000003ff 	.word	0x000003ff
 8012364:	000003fe 	.word	0x000003fe
 8012368:	000003fd 	.word	0x000003fd

0801236c <__swsetup_r>:
 801236c:	4b30      	ldr	r3, [pc, #192]	; (8012430 <__swsetup_r+0xc4>)
 801236e:	b570      	push	{r4, r5, r6, lr}
 8012370:	0005      	movs	r5, r0
 8012372:	6818      	ldr	r0, [r3, #0]
 8012374:	000c      	movs	r4, r1
 8012376:	2800      	cmp	r0, #0
 8012378:	d004      	beq.n	8012384 <__swsetup_r+0x18>
 801237a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801237c:	2b00      	cmp	r3, #0
 801237e:	d101      	bne.n	8012384 <__swsetup_r+0x18>
 8012380:	f7f9 fbb8 	bl	800baf4 <__sinit>
 8012384:	230c      	movs	r3, #12
 8012386:	5ee2      	ldrsh	r2, [r4, r3]
 8012388:	b293      	uxth	r3, r2
 801238a:	0711      	lsls	r1, r2, #28
 801238c:	d423      	bmi.n	80123d6 <__swsetup_r+0x6a>
 801238e:	06d9      	lsls	r1, r3, #27
 8012390:	d407      	bmi.n	80123a2 <__swsetup_r+0x36>
 8012392:	2309      	movs	r3, #9
 8012394:	2001      	movs	r0, #1
 8012396:	602b      	str	r3, [r5, #0]
 8012398:	3337      	adds	r3, #55	; 0x37
 801239a:	4313      	orrs	r3, r2
 801239c:	81a3      	strh	r3, [r4, #12]
 801239e:	4240      	negs	r0, r0
 80123a0:	bd70      	pop	{r4, r5, r6, pc}
 80123a2:	075b      	lsls	r3, r3, #29
 80123a4:	d513      	bpl.n	80123ce <__swsetup_r+0x62>
 80123a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80123a8:	2900      	cmp	r1, #0
 80123aa:	d008      	beq.n	80123be <__swsetup_r+0x52>
 80123ac:	0023      	movs	r3, r4
 80123ae:	3340      	adds	r3, #64	; 0x40
 80123b0:	4299      	cmp	r1, r3
 80123b2:	d002      	beq.n	80123ba <__swsetup_r+0x4e>
 80123b4:	0028      	movs	r0, r5
 80123b6:	f7f9 fe2f 	bl	800c018 <_free_r>
 80123ba:	2300      	movs	r3, #0
 80123bc:	6323      	str	r3, [r4, #48]	; 0x30
 80123be:	2224      	movs	r2, #36	; 0x24
 80123c0:	89a3      	ldrh	r3, [r4, #12]
 80123c2:	4393      	bics	r3, r2
 80123c4:	81a3      	strh	r3, [r4, #12]
 80123c6:	2300      	movs	r3, #0
 80123c8:	6063      	str	r3, [r4, #4]
 80123ca:	6923      	ldr	r3, [r4, #16]
 80123cc:	6023      	str	r3, [r4, #0]
 80123ce:	2308      	movs	r3, #8
 80123d0:	89a2      	ldrh	r2, [r4, #12]
 80123d2:	4313      	orrs	r3, r2
 80123d4:	81a3      	strh	r3, [r4, #12]
 80123d6:	6923      	ldr	r3, [r4, #16]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d10b      	bne.n	80123f4 <__swsetup_r+0x88>
 80123dc:	21a0      	movs	r1, #160	; 0xa0
 80123de:	2280      	movs	r2, #128	; 0x80
 80123e0:	89a3      	ldrh	r3, [r4, #12]
 80123e2:	0089      	lsls	r1, r1, #2
 80123e4:	0092      	lsls	r2, r2, #2
 80123e6:	400b      	ands	r3, r1
 80123e8:	4293      	cmp	r3, r2
 80123ea:	d003      	beq.n	80123f4 <__swsetup_r+0x88>
 80123ec:	0021      	movs	r1, r4
 80123ee:	0028      	movs	r0, r5
 80123f0:	f000 f8e8 	bl	80125c4 <__smakebuf_r>
 80123f4:	220c      	movs	r2, #12
 80123f6:	5ea3      	ldrsh	r3, [r4, r2]
 80123f8:	2001      	movs	r0, #1
 80123fa:	001a      	movs	r2, r3
 80123fc:	b299      	uxth	r1, r3
 80123fe:	4002      	ands	r2, r0
 8012400:	4203      	tst	r3, r0
 8012402:	d00f      	beq.n	8012424 <__swsetup_r+0xb8>
 8012404:	2200      	movs	r2, #0
 8012406:	60a2      	str	r2, [r4, #8]
 8012408:	6962      	ldr	r2, [r4, #20]
 801240a:	4252      	negs	r2, r2
 801240c:	61a2      	str	r2, [r4, #24]
 801240e:	2000      	movs	r0, #0
 8012410:	6922      	ldr	r2, [r4, #16]
 8012412:	4282      	cmp	r2, r0
 8012414:	d1c4      	bne.n	80123a0 <__swsetup_r+0x34>
 8012416:	0609      	lsls	r1, r1, #24
 8012418:	d5c2      	bpl.n	80123a0 <__swsetup_r+0x34>
 801241a:	2240      	movs	r2, #64	; 0x40
 801241c:	4313      	orrs	r3, r2
 801241e:	81a3      	strh	r3, [r4, #12]
 8012420:	3801      	subs	r0, #1
 8012422:	e7bd      	b.n	80123a0 <__swsetup_r+0x34>
 8012424:	0788      	lsls	r0, r1, #30
 8012426:	d400      	bmi.n	801242a <__swsetup_r+0xbe>
 8012428:	6962      	ldr	r2, [r4, #20]
 801242a:	60a2      	str	r2, [r4, #8]
 801242c:	e7ef      	b.n	801240e <__swsetup_r+0xa2>
 801242e:	46c0      	nop			; (mov r8, r8)
 8012430:	200006d0 	.word	0x200006d0

08012434 <__fputwc>:
 8012434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012436:	b085      	sub	sp, #20
 8012438:	000e      	movs	r6, r1
 801243a:	0015      	movs	r5, r2
 801243c:	9001      	str	r0, [sp, #4]
 801243e:	f7f9 fccf 	bl	800bde0 <__locale_mb_cur_max>
 8012442:	0004      	movs	r4, r0
 8012444:	2801      	cmp	r0, #1
 8012446:	d119      	bne.n	801247c <__fputwc+0x48>
 8012448:	1e73      	subs	r3, r6, #1
 801244a:	2bfe      	cmp	r3, #254	; 0xfe
 801244c:	d816      	bhi.n	801247c <__fputwc+0x48>
 801244e:	ab02      	add	r3, sp, #8
 8012450:	711e      	strb	r6, [r3, #4]
 8012452:	2700      	movs	r7, #0
 8012454:	42a7      	cmp	r7, r4
 8012456:	d020      	beq.n	801249a <__fputwc+0x66>
 8012458:	ab03      	add	r3, sp, #12
 801245a:	5dd9      	ldrb	r1, [r3, r7]
 801245c:	68ab      	ldr	r3, [r5, #8]
 801245e:	3b01      	subs	r3, #1
 8012460:	60ab      	str	r3, [r5, #8]
 8012462:	2b00      	cmp	r3, #0
 8012464:	da04      	bge.n	8012470 <__fputwc+0x3c>
 8012466:	69aa      	ldr	r2, [r5, #24]
 8012468:	4293      	cmp	r3, r2
 801246a:	db19      	blt.n	80124a0 <__fputwc+0x6c>
 801246c:	290a      	cmp	r1, #10
 801246e:	d017      	beq.n	80124a0 <__fputwc+0x6c>
 8012470:	682b      	ldr	r3, [r5, #0]
 8012472:	1c5a      	adds	r2, r3, #1
 8012474:	602a      	str	r2, [r5, #0]
 8012476:	7019      	strb	r1, [r3, #0]
 8012478:	3701      	adds	r7, #1
 801247a:	e7eb      	b.n	8012454 <__fputwc+0x20>
 801247c:	002b      	movs	r3, r5
 801247e:	0032      	movs	r2, r6
 8012480:	9801      	ldr	r0, [sp, #4]
 8012482:	335c      	adds	r3, #92	; 0x5c
 8012484:	a903      	add	r1, sp, #12
 8012486:	f000 f857 	bl	8012538 <_wcrtomb_r>
 801248a:	0004      	movs	r4, r0
 801248c:	1c43      	adds	r3, r0, #1
 801248e:	d1e0      	bne.n	8012452 <__fputwc+0x1e>
 8012490:	2340      	movs	r3, #64	; 0x40
 8012492:	0006      	movs	r6, r0
 8012494:	89aa      	ldrh	r2, [r5, #12]
 8012496:	4313      	orrs	r3, r2
 8012498:	81ab      	strh	r3, [r5, #12]
 801249a:	0030      	movs	r0, r6
 801249c:	b005      	add	sp, #20
 801249e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124a0:	002a      	movs	r2, r5
 80124a2:	9801      	ldr	r0, [sp, #4]
 80124a4:	f000 f8cc 	bl	8012640 <__swbuf_r>
 80124a8:	1c43      	adds	r3, r0, #1
 80124aa:	d1e5      	bne.n	8012478 <__fputwc+0x44>
 80124ac:	0006      	movs	r6, r0
 80124ae:	e7f4      	b.n	801249a <__fputwc+0x66>

080124b0 <_fputwc_r>:
 80124b0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80124b2:	b570      	push	{r4, r5, r6, lr}
 80124b4:	0005      	movs	r5, r0
 80124b6:	000e      	movs	r6, r1
 80124b8:	0014      	movs	r4, r2
 80124ba:	07db      	lsls	r3, r3, #31
 80124bc:	d405      	bmi.n	80124ca <_fputwc_r+0x1a>
 80124be:	8993      	ldrh	r3, [r2, #12]
 80124c0:	059b      	lsls	r3, r3, #22
 80124c2:	d402      	bmi.n	80124ca <_fputwc_r+0x1a>
 80124c4:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80124c6:	f7f9 fd1f 	bl	800bf08 <__retarget_lock_acquire_recursive>
 80124ca:	230c      	movs	r3, #12
 80124cc:	5ee2      	ldrsh	r2, [r4, r3]
 80124ce:	2380      	movs	r3, #128	; 0x80
 80124d0:	019b      	lsls	r3, r3, #6
 80124d2:	421a      	tst	r2, r3
 80124d4:	d104      	bne.n	80124e0 <_fputwc_r+0x30>
 80124d6:	431a      	orrs	r2, r3
 80124d8:	81a2      	strh	r2, [r4, #12]
 80124da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80124dc:	4313      	orrs	r3, r2
 80124de:	6663      	str	r3, [r4, #100]	; 0x64
 80124e0:	0028      	movs	r0, r5
 80124e2:	0022      	movs	r2, r4
 80124e4:	0031      	movs	r1, r6
 80124e6:	f7ff ffa5 	bl	8012434 <__fputwc>
 80124ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124ec:	0005      	movs	r5, r0
 80124ee:	07db      	lsls	r3, r3, #31
 80124f0:	d405      	bmi.n	80124fe <_fputwc_r+0x4e>
 80124f2:	89a3      	ldrh	r3, [r4, #12]
 80124f4:	059b      	lsls	r3, r3, #22
 80124f6:	d402      	bmi.n	80124fe <_fputwc_r+0x4e>
 80124f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124fa:	f7f9 fd06 	bl	800bf0a <__retarget_lock_release_recursive>
 80124fe:	0028      	movs	r0, r5
 8012500:	bd70      	pop	{r4, r5, r6, pc}

08012502 <memmove>:
 8012502:	b510      	push	{r4, lr}
 8012504:	4288      	cmp	r0, r1
 8012506:	d902      	bls.n	801250e <memmove+0xc>
 8012508:	188b      	adds	r3, r1, r2
 801250a:	4298      	cmp	r0, r3
 801250c:	d303      	bcc.n	8012516 <memmove+0x14>
 801250e:	2300      	movs	r3, #0
 8012510:	e007      	b.n	8012522 <memmove+0x20>
 8012512:	5c8b      	ldrb	r3, [r1, r2]
 8012514:	5483      	strb	r3, [r0, r2]
 8012516:	3a01      	subs	r2, #1
 8012518:	d2fb      	bcs.n	8012512 <memmove+0x10>
 801251a:	bd10      	pop	{r4, pc}
 801251c:	5ccc      	ldrb	r4, [r1, r3]
 801251e:	54c4      	strb	r4, [r0, r3]
 8012520:	3301      	adds	r3, #1
 8012522:	429a      	cmp	r2, r3
 8012524:	d1fa      	bne.n	801251c <memmove+0x1a>
 8012526:	e7f8      	b.n	801251a <memmove+0x18>

08012528 <abort>:
 8012528:	2006      	movs	r0, #6
 801252a:	b510      	push	{r4, lr}
 801252c:	f000 f906 	bl	801273c <raise>
 8012530:	2001      	movs	r0, #1
 8012532:	f7f1 fb77 	bl	8003c24 <_exit>
	...

08012538 <_wcrtomb_r>:
 8012538:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801253a:	001d      	movs	r5, r3
 801253c:	4b09      	ldr	r3, [pc, #36]	; (8012564 <_wcrtomb_r+0x2c>)
 801253e:	0004      	movs	r4, r0
 8012540:	33e0      	adds	r3, #224	; 0xe0
 8012542:	681e      	ldr	r6, [r3, #0]
 8012544:	002b      	movs	r3, r5
 8012546:	2900      	cmp	r1, #0
 8012548:	d101      	bne.n	801254e <_wcrtomb_r+0x16>
 801254a:	000a      	movs	r2, r1
 801254c:	a901      	add	r1, sp, #4
 801254e:	0020      	movs	r0, r4
 8012550:	47b0      	blx	r6
 8012552:	1c43      	adds	r3, r0, #1
 8012554:	d103      	bne.n	801255e <_wcrtomb_r+0x26>
 8012556:	2300      	movs	r3, #0
 8012558:	602b      	str	r3, [r5, #0]
 801255a:	338a      	adds	r3, #138	; 0x8a
 801255c:	6023      	str	r3, [r4, #0]
 801255e:	b004      	add	sp, #16
 8012560:	bd70      	pop	{r4, r5, r6, pc}
 8012562:	46c0      	nop			; (mov r8, r8)
 8012564:	20000444 	.word	0x20000444

08012568 <__swhatbuf_r>:
 8012568:	b570      	push	{r4, r5, r6, lr}
 801256a:	000e      	movs	r6, r1
 801256c:	001d      	movs	r5, r3
 801256e:	230e      	movs	r3, #14
 8012570:	5ec9      	ldrsh	r1, [r1, r3]
 8012572:	0014      	movs	r4, r2
 8012574:	b096      	sub	sp, #88	; 0x58
 8012576:	2900      	cmp	r1, #0
 8012578:	da09      	bge.n	801258e <__swhatbuf_r+0x26>
 801257a:	89b2      	ldrh	r2, [r6, #12]
 801257c:	2380      	movs	r3, #128	; 0x80
 801257e:	0011      	movs	r1, r2
 8012580:	4019      	ands	r1, r3
 8012582:	421a      	tst	r2, r3
 8012584:	d018      	beq.n	80125b8 <__swhatbuf_r+0x50>
 8012586:	2100      	movs	r1, #0
 8012588:	3b40      	subs	r3, #64	; 0x40
 801258a:	0008      	movs	r0, r1
 801258c:	e010      	b.n	80125b0 <__swhatbuf_r+0x48>
 801258e:	466a      	mov	r2, sp
 8012590:	f000 f8de 	bl	8012750 <_fstat_r>
 8012594:	2800      	cmp	r0, #0
 8012596:	dbf0      	blt.n	801257a <__swhatbuf_r+0x12>
 8012598:	23f0      	movs	r3, #240	; 0xf0
 801259a:	9901      	ldr	r1, [sp, #4]
 801259c:	021b      	lsls	r3, r3, #8
 801259e:	4019      	ands	r1, r3
 80125a0:	4b07      	ldr	r3, [pc, #28]	; (80125c0 <__swhatbuf_r+0x58>)
 80125a2:	2080      	movs	r0, #128	; 0x80
 80125a4:	18c9      	adds	r1, r1, r3
 80125a6:	424b      	negs	r3, r1
 80125a8:	4159      	adcs	r1, r3
 80125aa:	2380      	movs	r3, #128	; 0x80
 80125ac:	0100      	lsls	r0, r0, #4
 80125ae:	00db      	lsls	r3, r3, #3
 80125b0:	6029      	str	r1, [r5, #0]
 80125b2:	6023      	str	r3, [r4, #0]
 80125b4:	b016      	add	sp, #88	; 0x58
 80125b6:	bd70      	pop	{r4, r5, r6, pc}
 80125b8:	2380      	movs	r3, #128	; 0x80
 80125ba:	00db      	lsls	r3, r3, #3
 80125bc:	e7e5      	b.n	801258a <__swhatbuf_r+0x22>
 80125be:	46c0      	nop			; (mov r8, r8)
 80125c0:	ffffe000 	.word	0xffffe000

080125c4 <__smakebuf_r>:
 80125c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80125c6:	2602      	movs	r6, #2
 80125c8:	898b      	ldrh	r3, [r1, #12]
 80125ca:	0005      	movs	r5, r0
 80125cc:	000c      	movs	r4, r1
 80125ce:	4233      	tst	r3, r6
 80125d0:	d006      	beq.n	80125e0 <__smakebuf_r+0x1c>
 80125d2:	0023      	movs	r3, r4
 80125d4:	3343      	adds	r3, #67	; 0x43
 80125d6:	6023      	str	r3, [r4, #0]
 80125d8:	6123      	str	r3, [r4, #16]
 80125da:	2301      	movs	r3, #1
 80125dc:	6163      	str	r3, [r4, #20]
 80125de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80125e0:	466a      	mov	r2, sp
 80125e2:	ab01      	add	r3, sp, #4
 80125e4:	f7ff ffc0 	bl	8012568 <__swhatbuf_r>
 80125e8:	9900      	ldr	r1, [sp, #0]
 80125ea:	0007      	movs	r7, r0
 80125ec:	0028      	movs	r0, r5
 80125ee:	f7f8 f8ff 	bl	800a7f0 <_malloc_r>
 80125f2:	2800      	cmp	r0, #0
 80125f4:	d108      	bne.n	8012608 <__smakebuf_r+0x44>
 80125f6:	220c      	movs	r2, #12
 80125f8:	5ea3      	ldrsh	r3, [r4, r2]
 80125fa:	059a      	lsls	r2, r3, #22
 80125fc:	d4ef      	bmi.n	80125de <__smakebuf_r+0x1a>
 80125fe:	2203      	movs	r2, #3
 8012600:	4393      	bics	r3, r2
 8012602:	431e      	orrs	r6, r3
 8012604:	81a6      	strh	r6, [r4, #12]
 8012606:	e7e4      	b.n	80125d2 <__smakebuf_r+0xe>
 8012608:	2380      	movs	r3, #128	; 0x80
 801260a:	89a2      	ldrh	r2, [r4, #12]
 801260c:	6020      	str	r0, [r4, #0]
 801260e:	4313      	orrs	r3, r2
 8012610:	81a3      	strh	r3, [r4, #12]
 8012612:	9b00      	ldr	r3, [sp, #0]
 8012614:	6120      	str	r0, [r4, #16]
 8012616:	6163      	str	r3, [r4, #20]
 8012618:	9b01      	ldr	r3, [sp, #4]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d00c      	beq.n	8012638 <__smakebuf_r+0x74>
 801261e:	0028      	movs	r0, r5
 8012620:	230e      	movs	r3, #14
 8012622:	5ee1      	ldrsh	r1, [r4, r3]
 8012624:	f000 f8a6 	bl	8012774 <_isatty_r>
 8012628:	2800      	cmp	r0, #0
 801262a:	d005      	beq.n	8012638 <__smakebuf_r+0x74>
 801262c:	2303      	movs	r3, #3
 801262e:	89a2      	ldrh	r2, [r4, #12]
 8012630:	439a      	bics	r2, r3
 8012632:	3b02      	subs	r3, #2
 8012634:	4313      	orrs	r3, r2
 8012636:	81a3      	strh	r3, [r4, #12]
 8012638:	89a3      	ldrh	r3, [r4, #12]
 801263a:	433b      	orrs	r3, r7
 801263c:	81a3      	strh	r3, [r4, #12]
 801263e:	e7ce      	b.n	80125de <__smakebuf_r+0x1a>

08012640 <__swbuf_r>:
 8012640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012642:	0006      	movs	r6, r0
 8012644:	000d      	movs	r5, r1
 8012646:	0014      	movs	r4, r2
 8012648:	2800      	cmp	r0, #0
 801264a:	d004      	beq.n	8012656 <__swbuf_r+0x16>
 801264c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801264e:	2b00      	cmp	r3, #0
 8012650:	d101      	bne.n	8012656 <__swbuf_r+0x16>
 8012652:	f7f9 fa4f 	bl	800baf4 <__sinit>
 8012656:	69a3      	ldr	r3, [r4, #24]
 8012658:	60a3      	str	r3, [r4, #8]
 801265a:	89a3      	ldrh	r3, [r4, #12]
 801265c:	071b      	lsls	r3, r3, #28
 801265e:	d52e      	bpl.n	80126be <__swbuf_r+0x7e>
 8012660:	6923      	ldr	r3, [r4, #16]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d02b      	beq.n	80126be <__swbuf_r+0x7e>
 8012666:	230c      	movs	r3, #12
 8012668:	5ee2      	ldrsh	r2, [r4, r3]
 801266a:	2380      	movs	r3, #128	; 0x80
 801266c:	019b      	lsls	r3, r3, #6
 801266e:	b2ef      	uxtb	r7, r5
 8012670:	b2ed      	uxtb	r5, r5
 8012672:	421a      	tst	r2, r3
 8012674:	d02c      	beq.n	80126d0 <__swbuf_r+0x90>
 8012676:	6923      	ldr	r3, [r4, #16]
 8012678:	6820      	ldr	r0, [r4, #0]
 801267a:	1ac0      	subs	r0, r0, r3
 801267c:	6963      	ldr	r3, [r4, #20]
 801267e:	4283      	cmp	r3, r0
 8012680:	dc05      	bgt.n	801268e <__swbuf_r+0x4e>
 8012682:	0021      	movs	r1, r4
 8012684:	0030      	movs	r0, r6
 8012686:	f7fd fab3 	bl	800fbf0 <_fflush_r>
 801268a:	2800      	cmp	r0, #0
 801268c:	d11d      	bne.n	80126ca <__swbuf_r+0x8a>
 801268e:	68a3      	ldr	r3, [r4, #8]
 8012690:	3001      	adds	r0, #1
 8012692:	3b01      	subs	r3, #1
 8012694:	60a3      	str	r3, [r4, #8]
 8012696:	6823      	ldr	r3, [r4, #0]
 8012698:	1c5a      	adds	r2, r3, #1
 801269a:	6022      	str	r2, [r4, #0]
 801269c:	701f      	strb	r7, [r3, #0]
 801269e:	6963      	ldr	r3, [r4, #20]
 80126a0:	4283      	cmp	r3, r0
 80126a2:	d004      	beq.n	80126ae <__swbuf_r+0x6e>
 80126a4:	89a3      	ldrh	r3, [r4, #12]
 80126a6:	07db      	lsls	r3, r3, #31
 80126a8:	d507      	bpl.n	80126ba <__swbuf_r+0x7a>
 80126aa:	2d0a      	cmp	r5, #10
 80126ac:	d105      	bne.n	80126ba <__swbuf_r+0x7a>
 80126ae:	0021      	movs	r1, r4
 80126b0:	0030      	movs	r0, r6
 80126b2:	f7fd fa9d 	bl	800fbf0 <_fflush_r>
 80126b6:	2800      	cmp	r0, #0
 80126b8:	d107      	bne.n	80126ca <__swbuf_r+0x8a>
 80126ba:	0028      	movs	r0, r5
 80126bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126be:	0021      	movs	r1, r4
 80126c0:	0030      	movs	r0, r6
 80126c2:	f7ff fe53 	bl	801236c <__swsetup_r>
 80126c6:	2800      	cmp	r0, #0
 80126c8:	d0cd      	beq.n	8012666 <__swbuf_r+0x26>
 80126ca:	2501      	movs	r5, #1
 80126cc:	426d      	negs	r5, r5
 80126ce:	e7f4      	b.n	80126ba <__swbuf_r+0x7a>
 80126d0:	4313      	orrs	r3, r2
 80126d2:	81a3      	strh	r3, [r4, #12]
 80126d4:	4a02      	ldr	r2, [pc, #8]	; (80126e0 <__swbuf_r+0xa0>)
 80126d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126d8:	4013      	ands	r3, r2
 80126da:	6663      	str	r3, [r4, #100]	; 0x64
 80126dc:	e7cb      	b.n	8012676 <__swbuf_r+0x36>
 80126de:	46c0      	nop			; (mov r8, r8)
 80126e0:	ffffdfff 	.word	0xffffdfff

080126e4 <_raise_r>:
 80126e4:	b570      	push	{r4, r5, r6, lr}
 80126e6:	0004      	movs	r4, r0
 80126e8:	000d      	movs	r5, r1
 80126ea:	291f      	cmp	r1, #31
 80126ec:	d904      	bls.n	80126f8 <_raise_r+0x14>
 80126ee:	2316      	movs	r3, #22
 80126f0:	6003      	str	r3, [r0, #0]
 80126f2:	2001      	movs	r0, #1
 80126f4:	4240      	negs	r0, r0
 80126f6:	bd70      	pop	{r4, r5, r6, pc}
 80126f8:	0003      	movs	r3, r0
 80126fa:	33fc      	adds	r3, #252	; 0xfc
 80126fc:	69db      	ldr	r3, [r3, #28]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d004      	beq.n	801270c <_raise_r+0x28>
 8012702:	008a      	lsls	r2, r1, #2
 8012704:	189b      	adds	r3, r3, r2
 8012706:	681a      	ldr	r2, [r3, #0]
 8012708:	2a00      	cmp	r2, #0
 801270a:	d108      	bne.n	801271e <_raise_r+0x3a>
 801270c:	0020      	movs	r0, r4
 801270e:	f000 f855 	bl	80127bc <_getpid_r>
 8012712:	002a      	movs	r2, r5
 8012714:	0001      	movs	r1, r0
 8012716:	0020      	movs	r0, r4
 8012718:	f000 f83e 	bl	8012798 <_kill_r>
 801271c:	e7eb      	b.n	80126f6 <_raise_r+0x12>
 801271e:	2000      	movs	r0, #0
 8012720:	2a01      	cmp	r2, #1
 8012722:	d0e8      	beq.n	80126f6 <_raise_r+0x12>
 8012724:	1c51      	adds	r1, r2, #1
 8012726:	d103      	bne.n	8012730 <_raise_r+0x4c>
 8012728:	2316      	movs	r3, #22
 801272a:	3001      	adds	r0, #1
 801272c:	6023      	str	r3, [r4, #0]
 801272e:	e7e2      	b.n	80126f6 <_raise_r+0x12>
 8012730:	2400      	movs	r4, #0
 8012732:	0028      	movs	r0, r5
 8012734:	601c      	str	r4, [r3, #0]
 8012736:	4790      	blx	r2
 8012738:	0020      	movs	r0, r4
 801273a:	e7dc      	b.n	80126f6 <_raise_r+0x12>

0801273c <raise>:
 801273c:	b510      	push	{r4, lr}
 801273e:	4b03      	ldr	r3, [pc, #12]	; (801274c <raise+0x10>)
 8012740:	0001      	movs	r1, r0
 8012742:	6818      	ldr	r0, [r3, #0]
 8012744:	f7ff ffce 	bl	80126e4 <_raise_r>
 8012748:	bd10      	pop	{r4, pc}
 801274a:	46c0      	nop			; (mov r8, r8)
 801274c:	200006d0 	.word	0x200006d0

08012750 <_fstat_r>:
 8012750:	2300      	movs	r3, #0
 8012752:	b570      	push	{r4, r5, r6, lr}
 8012754:	4d06      	ldr	r5, [pc, #24]	; (8012770 <_fstat_r+0x20>)
 8012756:	0004      	movs	r4, r0
 8012758:	0008      	movs	r0, r1
 801275a:	0011      	movs	r1, r2
 801275c:	602b      	str	r3, [r5, #0]
 801275e:	f7f1 fab0 	bl	8003cc2 <_fstat>
 8012762:	1c43      	adds	r3, r0, #1
 8012764:	d103      	bne.n	801276e <_fstat_r+0x1e>
 8012766:	682b      	ldr	r3, [r5, #0]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d000      	beq.n	801276e <_fstat_r+0x1e>
 801276c:	6023      	str	r3, [r4, #0]
 801276e:	bd70      	pop	{r4, r5, r6, pc}
 8012770:	20000da0 	.word	0x20000da0

08012774 <_isatty_r>:
 8012774:	2300      	movs	r3, #0
 8012776:	b570      	push	{r4, r5, r6, lr}
 8012778:	4d06      	ldr	r5, [pc, #24]	; (8012794 <_isatty_r+0x20>)
 801277a:	0004      	movs	r4, r0
 801277c:	0008      	movs	r0, r1
 801277e:	602b      	str	r3, [r5, #0]
 8012780:	f7f1 faad 	bl	8003cde <_isatty>
 8012784:	1c43      	adds	r3, r0, #1
 8012786:	d103      	bne.n	8012790 <_isatty_r+0x1c>
 8012788:	682b      	ldr	r3, [r5, #0]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d000      	beq.n	8012790 <_isatty_r+0x1c>
 801278e:	6023      	str	r3, [r4, #0]
 8012790:	bd70      	pop	{r4, r5, r6, pc}
 8012792:	46c0      	nop			; (mov r8, r8)
 8012794:	20000da0 	.word	0x20000da0

08012798 <_kill_r>:
 8012798:	2300      	movs	r3, #0
 801279a:	b570      	push	{r4, r5, r6, lr}
 801279c:	4d06      	ldr	r5, [pc, #24]	; (80127b8 <_kill_r+0x20>)
 801279e:	0004      	movs	r4, r0
 80127a0:	0008      	movs	r0, r1
 80127a2:	0011      	movs	r1, r2
 80127a4:	602b      	str	r3, [r5, #0]
 80127a6:	f7f1 fa2d 	bl	8003c04 <_kill>
 80127aa:	1c43      	adds	r3, r0, #1
 80127ac:	d103      	bne.n	80127b6 <_kill_r+0x1e>
 80127ae:	682b      	ldr	r3, [r5, #0]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d000      	beq.n	80127b6 <_kill_r+0x1e>
 80127b4:	6023      	str	r3, [r4, #0]
 80127b6:	bd70      	pop	{r4, r5, r6, pc}
 80127b8:	20000da0 	.word	0x20000da0

080127bc <_getpid_r>:
 80127bc:	b510      	push	{r4, lr}
 80127be:	f7f1 fa1b 	bl	8003bf8 <_getpid>
 80127c2:	bd10      	pop	{r4, pc}

080127c4 <round>:
 80127c4:	b570      	push	{r4, r5, r6, lr}
 80127c6:	004a      	lsls	r2, r1, #1
 80127c8:	000d      	movs	r5, r1
 80127ca:	4920      	ldr	r1, [pc, #128]	; (801284c <round+0x88>)
 80127cc:	0d52      	lsrs	r2, r2, #21
 80127ce:	1851      	adds	r1, r2, r1
 80127d0:	0006      	movs	r6, r0
 80127d2:	2913      	cmp	r1, #19
 80127d4:	dc18      	bgt.n	8012808 <round+0x44>
 80127d6:	2900      	cmp	r1, #0
 80127d8:	da09      	bge.n	80127ee <round+0x2a>
 80127da:	0feb      	lsrs	r3, r5, #31
 80127dc:	2200      	movs	r2, #0
 80127de:	07db      	lsls	r3, r3, #31
 80127e0:	3101      	adds	r1, #1
 80127e2:	d101      	bne.n	80127e8 <round+0x24>
 80127e4:	491a      	ldr	r1, [pc, #104]	; (8012850 <round+0x8c>)
 80127e6:	430b      	orrs	r3, r1
 80127e8:	0019      	movs	r1, r3
 80127ea:	0010      	movs	r0, r2
 80127ec:	e017      	b.n	801281e <round+0x5a>
 80127ee:	4c19      	ldr	r4, [pc, #100]	; (8012854 <round+0x90>)
 80127f0:	410c      	asrs	r4, r1
 80127f2:	0022      	movs	r2, r4
 80127f4:	402a      	ands	r2, r5
 80127f6:	4302      	orrs	r2, r0
 80127f8:	d013      	beq.n	8012822 <round+0x5e>
 80127fa:	2280      	movs	r2, #128	; 0x80
 80127fc:	0312      	lsls	r2, r2, #12
 80127fe:	410a      	asrs	r2, r1
 8012800:	1953      	adds	r3, r2, r5
 8012802:	43a3      	bics	r3, r4
 8012804:	2200      	movs	r2, #0
 8012806:	e7ef      	b.n	80127e8 <round+0x24>
 8012808:	2933      	cmp	r1, #51	; 0x33
 801280a:	dd0d      	ble.n	8012828 <round+0x64>
 801280c:	2380      	movs	r3, #128	; 0x80
 801280e:	00db      	lsls	r3, r3, #3
 8012810:	4299      	cmp	r1, r3
 8012812:	d106      	bne.n	8012822 <round+0x5e>
 8012814:	0002      	movs	r2, r0
 8012816:	002b      	movs	r3, r5
 8012818:	0029      	movs	r1, r5
 801281a:	f7ed ffcd 	bl	80007b8 <__aeabi_dadd>
 801281e:	0006      	movs	r6, r0
 8012820:	000d      	movs	r5, r1
 8012822:	0030      	movs	r0, r6
 8012824:	0029      	movs	r1, r5
 8012826:	bd70      	pop	{r4, r5, r6, pc}
 8012828:	4c0b      	ldr	r4, [pc, #44]	; (8012858 <round+0x94>)
 801282a:	1912      	adds	r2, r2, r4
 801282c:	2401      	movs	r4, #1
 801282e:	4264      	negs	r4, r4
 8012830:	40d4      	lsrs	r4, r2
 8012832:	4220      	tst	r0, r4
 8012834:	d0f5      	beq.n	8012822 <round+0x5e>
 8012836:	2233      	movs	r2, #51	; 0x33
 8012838:	1a51      	subs	r1, r2, r1
 801283a:	3a32      	subs	r2, #50	; 0x32
 801283c:	408a      	lsls	r2, r1
 801283e:	1812      	adds	r2, r2, r0
 8012840:	4282      	cmp	r2, r0
 8012842:	4180      	sbcs	r0, r0
 8012844:	4240      	negs	r0, r0
 8012846:	182b      	adds	r3, r5, r0
 8012848:	43a2      	bics	r2, r4
 801284a:	e7cd      	b.n	80127e8 <round+0x24>
 801284c:	fffffc01 	.word	0xfffffc01
 8012850:	3ff00000 	.word	0x3ff00000
 8012854:	000fffff 	.word	0x000fffff
 8012858:	fffffbed 	.word	0xfffffbed

0801285c <_init>:
 801285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801285e:	46c0      	nop			; (mov r8, r8)
 8012860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012862:	bc08      	pop	{r3}
 8012864:	469e      	mov	lr, r3
 8012866:	4770      	bx	lr

08012868 <_fini>:
 8012868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801286a:	46c0      	nop			; (mov r8, r8)
 801286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801286e:	bc08      	pop	{r3}
 8012870:	469e      	mov	lr, r3
 8012872:	4770      	bx	lr
