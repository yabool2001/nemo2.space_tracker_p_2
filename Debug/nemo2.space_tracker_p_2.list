
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f38c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800f448  0800f448  0001f448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800faec  0800faec  000206c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800faec  0800faec  0001faec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800faf4  0800faf4  000206c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800faf4  0800faf4  0001faf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fafc  0800fafc  0001fafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c0  20000000  0800fb00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  200006c0  080101c0  000206c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d50  080101c0  00020d50  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000206c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000206e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d0b  00000000  00000000  0002072b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033be  00000000  00000000  00038436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001638  00000000  00000000  0003b7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001144  00000000  00000000  0003ce30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020872  00000000  00000000  0003df74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b7c3  00000000  00000000  0005e7e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8cd3  00000000  00000000  00079fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a74  00000000  00000000  00142c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001496f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006c0 	.word	0x200006c0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800f430 	.word	0x0800f430

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006c4 	.word	0x200006c4
 8000100:	0800f430 	.word	0x0800f430

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	0800f5b8 	.word	0x0800f5b8
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ac:	f001 f80a 	bl	80035c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b0:	f000 f83a 	bl	8002628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b4:	f000 facc 	bl	8002b50 <MX_GPIO_Init>
  MX_RTC_Init();
 80025b8:	f000 f88c 	bl	80026d4 <MX_RTC_Init>
  MX_TIM6_Init();
 80025bc:	f000 f96c 	bl	8002898 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c0:	f000 f92c 	bl	800281c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025c4:	f000 f9a6 	bl	8002914 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025c8:	f000 f9f2 	bl	80029b0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025cc:	f000 fa3e 	bl	8002a4c <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d0:	f000 fa8a 	bl	8002ae8 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  // System hello
  send_debug_logs ( hello ) ;
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <main+0x74>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0018      	movs	r0, r3
 80025da:	f000 fbbd 	bl	8002d58 <send_debug_logs>

  my_tim_init () ;
 80025de:	f000 fc75 	bl	8002ecc <my_tim_init>

  // my_gnss_verbose ( 15 ) ;

  if ( !is_system_initialized () )
 80025e2:	f000 fbe9 	bl	8002db8 <is_system_initialized>
 80025e6:	0003      	movs	r3, r0
 80025e8:	001a      	movs	r2, r3
 80025ea:	2301      	movs	r3, #1
 80025ec:	4053      	eors	r3, r2
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d011      	beq.n	8002618 <main+0x70>
  {
	  my_gnss_sw_on () ;
 80025f4:	f000 fc2e 	bl	8002e54 <my_gnss_sw_on>
	  my_tim_start () ;
 80025f8:	f000 fc74 	bl	8002ee4 <my_tim_start>
	  //my_gnss_get_utc () ;
	  my_gnss_acq_coordinates ( &fix3d ) ;
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <main+0x78>)
 80025fe:	0018      	movs	r0, r3
 8002600:	f004 fc12 	bl	8006e28 <my_gnss_acq_coordinates>
	  my_tim_stop () ;
 8002604:	f000 fc7e 	bl	8002f04 <my_tim_stop>
	  //my_gnss_sw_off () ;
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <main+0x7c>)
 800260a:	0018      	movs	r0, r3
 800260c:	f004 fcbc 	bl	8006f88 <my_rtc_get_dt_s>
	  send_debug_logs ( rtc_dt_s ) ;
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <main+0x7c>)
 8002612:	0018      	movs	r0, r3
 8002614:	f000 fba0 	bl	8002d58 <send_debug_logs>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002618:	e7fe      	b.n	8002618 <main+0x70>
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	20000000 	.word	0x20000000
 8002620:	20000a20 	.word	0x20000a20
 8002624:	20000a08 	.word	0x20000a08

08002628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b095      	sub	sp, #84	; 0x54
 800262c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800262e:	2414      	movs	r4, #20
 8002630:	193b      	adds	r3, r7, r4
 8002632:	0018      	movs	r0, r3
 8002634:	233c      	movs	r3, #60	; 0x3c
 8002636:	001a      	movs	r2, r3
 8002638:	2100      	movs	r1, #0
 800263a:	f006 f98d 	bl	8008958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	0018      	movs	r0, r3
 8002642:	2310      	movs	r3, #16
 8002644:	001a      	movs	r2, r3
 8002646:	2100      	movs	r1, #0
 8002648:	f006 f986 	bl	8008958 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	0018      	movs	r0, r3
 8002652:	f001 fadf 	bl	8003c14 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002656:	f001 facf 	bl	8003bf8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800265a:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <SystemClock_Config+0xa8>)
 800265c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <SystemClock_Config+0xa8>)
 8002660:	2118      	movs	r1, #24
 8002662:	438a      	bics	r2, r1
 8002664:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002666:	193b      	adds	r3, r7, r4
 8002668:	2206      	movs	r2, #6
 800266a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800266c:	193b      	adds	r3, r7, r4
 800266e:	2201      	movs	r2, #1
 8002670:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002672:	193b      	adds	r3, r7, r4
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	0052      	lsls	r2, r2, #1
 8002678:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800267a:	193b      	adds	r3, r7, r4
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002680:	193b      	adds	r3, r7, r4
 8002682:	2240      	movs	r2, #64	; 0x40
 8002684:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002686:	193b      	adds	r3, r7, r4
 8002688:	2200      	movs	r2, #0
 800268a:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800268c:	193b      	adds	r3, r7, r4
 800268e:	0018      	movs	r0, r3
 8002690:	f001 fb0c 	bl	8003cac <HAL_RCC_OscConfig>
 8002694:	1e03      	subs	r3, r0, #0
 8002696:	d001      	beq.n	800269c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002698:	f000 fc66 	bl	8002f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	2207      	movs	r2, #7
 80026a0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	2200      	movs	r2, #0
 80026a6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	2200      	movs	r2, #0
 80026b2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	2100      	movs	r1, #0
 80026b8:	0018      	movs	r0, r3
 80026ba:	f001 fe57 	bl	800436c <HAL_RCC_ClockConfig>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d001      	beq.n	80026c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80026c2:	f000 fc51 	bl	8002f68 <Error_Handler>
  }
}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b015      	add	sp, #84	; 0x54
 80026cc:	bd90      	pop	{r4, r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	40021000 	.word	0x40021000

080026d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b090      	sub	sp, #64	; 0x40
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80026da:	232c      	movs	r3, #44	; 0x2c
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	0018      	movs	r0, r3
 80026e0:	2314      	movs	r3, #20
 80026e2:	001a      	movs	r2, r3
 80026e4:	2100      	movs	r1, #0
 80026e6:	f006 f937 	bl	8008958 <memset>
  RTC_DateTypeDef sDate = {0};
 80026ea:	2328      	movs	r3, #40	; 0x28
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80026f2:	003b      	movs	r3, r7
 80026f4:	0018      	movs	r0, r3
 80026f6:	2328      	movs	r3, #40	; 0x28
 80026f8:	001a      	movs	r2, r3
 80026fa:	2100      	movs	r1, #0
 80026fc:	f006 f92c 	bl	8008958 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002700:	4b44      	ldr	r3, [pc, #272]	; (8002814 <MX_RTC_Init+0x140>)
 8002702:	4a45      	ldr	r2, [pc, #276]	; (8002818 <MX_RTC_Init+0x144>)
 8002704:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002706:	4b43      	ldr	r3, [pc, #268]	; (8002814 <MX_RTC_Init+0x140>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800270c:	4b41      	ldr	r3, [pc, #260]	; (8002814 <MX_RTC_Init+0x140>)
 800270e:	227f      	movs	r2, #127	; 0x7f
 8002710:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002712:	4b40      	ldr	r3, [pc, #256]	; (8002814 <MX_RTC_Init+0x140>)
 8002714:	22ff      	movs	r2, #255	; 0xff
 8002716:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002718:	4b3e      	ldr	r3, [pc, #248]	; (8002814 <MX_RTC_Init+0x140>)
 800271a:	2200      	movs	r2, #0
 800271c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800271e:	4b3d      	ldr	r3, [pc, #244]	; (8002814 <MX_RTC_Init+0x140>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002724:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <MX_RTC_Init+0x140>)
 8002726:	2200      	movs	r2, #0
 8002728:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800272a:	4b3a      	ldr	r3, [pc, #232]	; (8002814 <MX_RTC_Init+0x140>)
 800272c:	2280      	movs	r2, #128	; 0x80
 800272e:	05d2      	lsls	r2, r2, #23
 8002730:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002732:	4b38      	ldr	r3, [pc, #224]	; (8002814 <MX_RTC_Init+0x140>)
 8002734:	2200      	movs	r2, #0
 8002736:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002738:	4b36      	ldr	r3, [pc, #216]	; (8002814 <MX_RTC_Init+0x140>)
 800273a:	0018      	movs	r0, r3
 800273c:	f002 f9fc 	bl	8004b38 <HAL_RTC_Init>
 8002740:	1e03      	subs	r3, r0, #0
 8002742:	d001      	beq.n	8002748 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002744:	f000 fc10 	bl	8002f68 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	187b      	adds	r3, r7, r1
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002750:	187b      	adds	r3, r7, r1
 8002752:	2200      	movs	r2, #0
 8002754:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002756:	187b      	adds	r3, r7, r1
 8002758:	2200      	movs	r2, #0
 800275a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800275c:	187b      	adds	r3, r7, r1
 800275e:	2200      	movs	r2, #0
 8002760:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002762:	187b      	adds	r3, r7, r1
 8002764:	2200      	movs	r2, #0
 8002766:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002768:	187b      	adds	r3, r7, r1
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800276e:	1879      	adds	r1, r7, r1
 8002770:	4b28      	ldr	r3, [pc, #160]	; (8002814 <MX_RTC_Init+0x140>)
 8002772:	2201      	movs	r2, #1
 8002774:	0018      	movs	r0, r3
 8002776:	f002 fa81 	bl	8004c7c <HAL_RTC_SetTime>
 800277a:	1e03      	subs	r3, r0, #0
 800277c:	d001      	beq.n	8002782 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800277e:	f000 fbf3 	bl	8002f68 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002782:	2128      	movs	r1, #40	; 0x28
 8002784:	187b      	adds	r3, r7, r1
 8002786:	2206      	movs	r2, #6
 8002788:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800278a:	187b      	adds	r3, r7, r1
 800278c:	2201      	movs	r2, #1
 800278e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002790:	187b      	adds	r3, r7, r1
 8002792:	2201      	movs	r2, #1
 8002794:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002796:	187b      	adds	r3, r7, r1
 8002798:	2200      	movs	r2, #0
 800279a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800279c:	1879      	adds	r1, r7, r1
 800279e:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <MX_RTC_Init+0x140>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	0018      	movs	r0, r3
 80027a4:	f002 fb6e 	bl	8004e84 <HAL_RTC_SetDate>
 80027a8:	1e03      	subs	r3, r0, #0
 80027aa:	d001      	beq.n	80027b0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80027ac:	f000 fbdc 	bl	8002f68 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80027b0:	003b      	movs	r3, r7
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80027b6:	003b      	movs	r3, r7
 80027b8:	2200      	movs	r2, #0
 80027ba:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80027bc:	003b      	movs	r3, r7
 80027be:	2200      	movs	r2, #0
 80027c0:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80027c2:	003b      	movs	r3, r7
 80027c4:	2200      	movs	r2, #0
 80027c6:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80027c8:	003b      	movs	r3, r7
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80027ce:	003b      	movs	r3, r7
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80027d4:	003b      	movs	r3, r7
 80027d6:	2200      	movs	r2, #0
 80027d8:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80027da:	003b      	movs	r3, r7
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80027e0:	003b      	movs	r3, r7
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80027e6:	003b      	movs	r3, r7
 80027e8:	2220      	movs	r2, #32
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80027ee:	003b      	movs	r3, r7
 80027f0:	2280      	movs	r2, #128	; 0x80
 80027f2:	0052      	lsls	r2, r2, #1
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80027f6:	0039      	movs	r1, r7
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <MX_RTC_Init+0x140>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	0018      	movs	r0, r3
 80027fe:	f002 fc21 	bl	8005044 <HAL_RTC_SetAlarm_IT>
 8002802:	1e03      	subs	r3, r0, #0
 8002804:	d001      	beq.n	800280a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002806:	f000 fbaf 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	b010      	add	sp, #64	; 0x40
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	200006dc 	.word	0x200006dc
 8002818:	40002800 	.word	0x40002800

0800281c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <MX_SPI1_Init+0x74>)
 8002822:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <MX_SPI1_Init+0x78>)
 8002824:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002826:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <MX_SPI1_Init+0x74>)
 8002828:	2282      	movs	r2, #130	; 0x82
 800282a:	0052      	lsls	r2, r2, #1
 800282c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <MX_SPI1_Init+0x74>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002834:	4b16      	ldr	r3, [pc, #88]	; (8002890 <MX_SPI1_Init+0x74>)
 8002836:	22e0      	movs	r2, #224	; 0xe0
 8002838:	00d2      	lsls	r2, r2, #3
 800283a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800283c:	4b14      	ldr	r3, [pc, #80]	; (8002890 <MX_SPI1_Init+0x74>)
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002842:	4b13      	ldr	r3, [pc, #76]	; (8002890 <MX_SPI1_Init+0x74>)
 8002844:	2200      	movs	r2, #0
 8002846:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <MX_SPI1_Init+0x74>)
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	0092      	lsls	r2, r2, #2
 800284e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002850:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <MX_SPI1_Init+0x74>)
 8002852:	2200      	movs	r2, #0
 8002854:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <MX_SPI1_Init+0x74>)
 8002858:	2200      	movs	r2, #0
 800285a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <MX_SPI1_Init+0x74>)
 800285e:	2200      	movs	r2, #0
 8002860:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <MX_SPI1_Init+0x74>)
 8002864:	2200      	movs	r2, #0
 8002866:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <MX_SPI1_Init+0x74>)
 800286a:	2207      	movs	r2, #7
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <MX_SPI1_Init+0x74>)
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <MX_SPI1_Init+0x74>)
 8002876:	2208      	movs	r2, #8
 8002878:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <MX_SPI1_Init+0x74>)
 800287c:	0018      	movs	r0, r3
 800287e:	f002 fe61 	bl	8005544 <HAL_SPI_Init>
 8002882:	1e03      	subs	r3, r0, #0
 8002884:	d001      	beq.n	800288a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002886:	f000 fb6f 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000708 	.word	0x20000708
 8002894:	40013000 	.word	0x40013000

08002898 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	0018      	movs	r0, r3
 80028a2:	230c      	movs	r3, #12
 80028a4:	001a      	movs	r2, r3
 80028a6:	2100      	movs	r1, #0
 80028a8:	f006 f856 	bl	8008958 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80028ac:	4b15      	ldr	r3, [pc, #84]	; (8002904 <MX_TIM6_Init+0x6c>)
 80028ae:	4a16      	ldr	r2, [pc, #88]	; (8002908 <MX_TIM6_Init+0x70>)
 80028b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <MX_TIM6_Init+0x6c>)
 80028b4:	4a15      	ldr	r2, [pc, #84]	; (800290c <MX_TIM6_Init+0x74>)
 80028b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <MX_TIM6_Init+0x6c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <MX_TIM6_Init+0x6c>)
 80028c0:	4a13      	ldr	r2, [pc, #76]	; (8002910 <MX_TIM6_Init+0x78>)
 80028c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <MX_TIM6_Init+0x6c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <MX_TIM6_Init+0x6c>)
 80028cc:	0018      	movs	r0, r3
 80028ce:	f002 fef1 	bl	80056b4 <HAL_TIM_Base_Init>
 80028d2:	1e03      	subs	r3, r0, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80028d6:	f000 fb47 	bl	8002f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028e6:	1d3a      	adds	r2, r7, #4
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <MX_TIM6_Init+0x6c>)
 80028ea:	0011      	movs	r1, r2
 80028ec:	0018      	movs	r0, r3
 80028ee:	f003 f989 	bl	8005c04 <HAL_TIMEx_MasterConfigSynchronization>
 80028f2:	1e03      	subs	r3, r0, #0
 80028f4:	d001      	beq.n	80028fa <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80028f6:	f000 fb37 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b004      	add	sp, #16
 8002900:	bd80      	pop	{r7, pc}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	2000076c 	.word	0x2000076c
 8002908:	40001000 	.word	0x40001000
 800290c:	00003e7f 	.word	0x00003e7f
 8002910:	000003e7 	.word	0x000003e7

08002914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002918:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800291a:	4a24      	ldr	r2, [pc, #144]	; (80029ac <MX_USART1_UART_Init+0x98>)
 800291c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800291e:	4b22      	ldr	r3, [pc, #136]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002920:	22e1      	movs	r2, #225	; 0xe1
 8002922:	0252      	lsls	r2, r2, #9
 8002924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800292c:	4b1e      	ldr	r3, [pc, #120]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800292e:	2200      	movs	r2, #0
 8002930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002934:	2200      	movs	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800293a:	220c      	movs	r2, #12
 800293c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002944:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800294a:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800294c:	2200      	movs	r2, #0
 800294e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002950:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002952:	2200      	movs	r2, #0
 8002954:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002956:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002958:	2200      	movs	r2, #0
 800295a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800295c:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800295e:	0018      	movs	r0, r3
 8002960:	f003 f9de 	bl	8005d20 <HAL_UART_Init>
 8002964:	1e03      	subs	r3, r0, #0
 8002966:	d001      	beq.n	800296c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002968:	f000 fafe 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800296c:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800296e:	2100      	movs	r1, #0
 8002970:	0018      	movs	r0, r3
 8002972:	f004 f979 	bl	8006c68 <HAL_UARTEx_SetTxFifoThreshold>
 8002976:	1e03      	subs	r3, r0, #0
 8002978:	d001      	beq.n	800297e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800297a:	f000 faf5 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002980:	2100      	movs	r1, #0
 8002982:	0018      	movs	r0, r3
 8002984:	f004 f9b0 	bl	8006ce8 <HAL_UARTEx_SetRxFifoThreshold>
 8002988:	1e03      	subs	r3, r0, #0
 800298a:	d001      	beq.n	8002990 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800298c:	f000 faec 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002992:	0018      	movs	r0, r3
 8002994:	f004 f92e 	bl	8006bf4 <HAL_UARTEx_DisableFifoMode>
 8002998:	1e03      	subs	r3, r0, #0
 800299a:	d001      	beq.n	80029a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800299c:	f000 fae4 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	200007b8 	.word	0x200007b8
 80029ac:	40013800 	.word	0x40013800

080029b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029b6:	4a24      	ldr	r2, [pc, #144]	; (8002a48 <MX_USART2_UART_Init+0x98>)
 80029b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80029ba:	4b22      	ldr	r3, [pc, #136]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029bc:	22e1      	movs	r2, #225	; 0xe1
 80029be:	0292      	lsls	r2, r2, #10
 80029c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029c8:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029d6:	220c      	movs	r2, #12
 80029d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029da:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e0:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029e6:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029ec:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029f2:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029f8:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029fa:	0018      	movs	r0, r3
 80029fc:	f003 f990 	bl	8005d20 <HAL_UART_Init>
 8002a00:	1e03      	subs	r3, r0, #0
 8002a02:	d001      	beq.n	8002a08 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002a04:	f000 fab0 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a08:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f004 f92b 	bl	8006c68 <HAL_UARTEx_SetTxFifoThreshold>
 8002a12:	1e03      	subs	r3, r0, #0
 8002a14:	d001      	beq.n	8002a1a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002a16:	f000 faa7 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f004 f962 	bl	8006ce8 <HAL_UARTEx_SetRxFifoThreshold>
 8002a24:	1e03      	subs	r3, r0, #0
 8002a26:	d001      	beq.n	8002a2c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002a28:	f000 fa9e 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f004 f8e0 	bl	8006bf4 <HAL_UARTEx_DisableFifoMode>
 8002a34:	1e03      	subs	r3, r0, #0
 8002a36:	d001      	beq.n	8002a3c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002a38:	f000 fa96 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	2000084c 	.word	0x2000084c
 8002a48:	40004400 	.word	0x40004400

08002a4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a50:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a52:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <MX_USART3_UART_Init+0x98>)
 8002a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a58:	2296      	movs	r2, #150	; 0x96
 8002a5a:	0192      	lsls	r2, r2, #6
 8002a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a64:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a72:	220c      	movs	r2, #12
 8002a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a7c:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a82:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a88:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a8e:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a96:	0018      	movs	r0, r3
 8002a98:	f003 f942 	bl	8005d20 <HAL_UART_Init>
 8002a9c:	1e03      	subs	r3, r0, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002aa0:	f000 fa62 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f004 f8dd 	bl	8006c68 <HAL_UARTEx_SetTxFifoThreshold>
 8002aae:	1e03      	subs	r3, r0, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002ab2:	f000 fa59 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002ab8:	2100      	movs	r1, #0
 8002aba:	0018      	movs	r0, r3
 8002abc:	f004 f914 	bl	8006ce8 <HAL_UARTEx_SetRxFifoThreshold>
 8002ac0:	1e03      	subs	r3, r0, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002ac4:	f000 fa50 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002aca:	0018      	movs	r0, r3
 8002acc:	f004 f892 	bl	8006bf4 <HAL_UARTEx_DisableFifoMode>
 8002ad0:	1e03      	subs	r3, r0, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002ad4:	f000 fa48 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	200008e0 	.word	0x200008e0
 8002ae4:	40004800 	.word	0x40004800

08002ae8 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002aec:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002aee:	4a17      	ldr	r2, [pc, #92]	; (8002b4c <MX_USART5_UART_Init+0x64>)
 8002af0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002af4:	22e1      	movs	r2, #225	; 0xe1
 8002af6:	0252      	lsls	r2, r2, #9
 8002af8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002b00:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b0e:	220c      	movs	r2, #12
 8002b10:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b24:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b2a:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b32:	0018      	movs	r0, r3
 8002b34:	f003 f8f4 	bl	8005d20 <HAL_UART_Init>
 8002b38:	1e03      	subs	r3, r0, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002b3c:	f000 fa14 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	20000974 	.word	0x20000974
 8002b4c:	40005000 	.word	0x40005000

08002b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b08b      	sub	sp, #44	; 0x2c
 8002b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b56:	2414      	movs	r4, #20
 8002b58:	193b      	adds	r3, r7, r4
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	2314      	movs	r3, #20
 8002b5e:	001a      	movs	r2, r3
 8002b60:	2100      	movs	r1, #0
 8002b62:	f005 fef9 	bl	8008958 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b66:	4b76      	ldr	r3, [pc, #472]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6a:	4b75      	ldr	r3, [pc, #468]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002b6c:	2104      	movs	r1, #4
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	635a      	str	r2, [r3, #52]	; 0x34
 8002b72:	4b73      	ldr	r3, [pc, #460]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b76:	2204      	movs	r2, #4
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7e:	4b70      	ldr	r3, [pc, #448]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b82:	4b6f      	ldr	r3, [pc, #444]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002b84:	2101      	movs	r1, #1
 8002b86:	430a      	orrs	r2, r1
 8002b88:	635a      	str	r2, [r3, #52]	; 0x34
 8002b8a:	4b6d      	ldr	r3, [pc, #436]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4013      	ands	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b96:	4b6a      	ldr	r3, [pc, #424]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9a:	4b69      	ldr	r3, [pc, #420]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ba2:	4b67      	ldr	r3, [pc, #412]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	4013      	ands	r3, r2
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bae:	4b64      	ldr	r3, [pc, #400]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb2:	4b63      	ldr	r3, [pc, #396]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002bb4:	2108      	movs	r1, #8
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34
 8002bba:	4b61      	ldr	r3, [pc, #388]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbe:	2208      	movs	r2, #8
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	607b      	str	r3, [r7, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002bc6:	23a0      	movs	r3, #160	; 0xa0
 8002bc8:	05db      	lsls	r3, r3, #23
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2110      	movs	r1, #16
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f000 fff4 	bl	8003bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002bd4:	495b      	ldr	r1, [pc, #364]	; (8002d44 <MX_GPIO_Init+0x1f4>)
 8002bd6:	4b5c      	ldr	r3, [pc, #368]	; (8002d48 <MX_GPIO_Init+0x1f8>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 ffee 	bl	8003bbc <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	4858      	ldr	r0, [pc, #352]	; (8002d48 <MX_GPIO_Init+0x1f8>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	0019      	movs	r1, r3
 8002bea:	f000 ffe7 	bl	8003bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8002bee:	4b57      	ldr	r3, [pc, #348]	; (8002d4c <MX_GPIO_Init+0x1fc>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2103      	movs	r1, #3
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f000 ffe1 	bl	8003bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8002bfa:	193b      	adds	r3, r7, r4
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c00:	193b      	adds	r3, r7, r4
 8002c02:	2288      	movs	r2, #136	; 0x88
 8002c04:	0352      	lsls	r2, r2, #13
 8002c06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	193b      	adds	r3, r7, r4
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8002c0e:	193a      	adds	r2, r7, r4
 8002c10:	23a0      	movs	r3, #160	; 0xa0
 8002c12:	05db      	lsls	r3, r3, #23
 8002c14:	0011      	movs	r1, r2
 8002c16:	0018      	movs	r0, r3
 8002c18:	f000 fe64 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8002c1c:	193b      	adds	r3, r7, r4
 8002c1e:	2202      	movs	r2, #2
 8002c20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c22:	193b      	adds	r3, r7, r4
 8002c24:	2200      	movs	r2, #0
 8002c26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	193b      	adds	r3, r7, r4
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8002c2e:	193a      	adds	r2, r7, r4
 8002c30:	23a0      	movs	r3, #160	; 0xa0
 8002c32:	05db      	lsls	r3, r3, #23
 8002c34:	0011      	movs	r1, r2
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 fe54 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8002c3c:	193b      	adds	r3, r7, r4
 8002c3e:	2210      	movs	r2, #16
 8002c40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c42:	193b      	adds	r3, r7, r4
 8002c44:	2201      	movs	r2, #1
 8002c46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	193b      	adds	r3, r7, r4
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	193b      	adds	r3, r7, r4
 8002c50:	2200      	movs	r2, #0
 8002c52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002c54:	193a      	adds	r2, r7, r4
 8002c56:	23a0      	movs	r3, #160	; 0xa0
 8002c58:	05db      	lsls	r3, r3, #23
 8002c5a:	0011      	movs	r1, r2
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f000 fe41 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8002c62:	193b      	adds	r3, r7, r4
 8002c64:	4a3a      	ldr	r2, [pc, #232]	; (8002d50 <MX_GPIO_Init+0x200>)
 8002c66:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c68:	193b      	adds	r3, r7, r4
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	193b      	adds	r3, r7, r4
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c74:	193b      	adds	r3, r7, r4
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	4a32      	ldr	r2, [pc, #200]	; (8002d48 <MX_GPIO_Init+0x1f8>)
 8002c7e:	0019      	movs	r1, r3
 8002c80:	0010      	movs	r0, r2
 8002c82:	f000 fe2f 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8002c86:	0021      	movs	r1, r4
 8002c88:	187b      	adds	r3, r7, r1
 8002c8a:	2224      	movs	r2, #36	; 0x24
 8002c8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c8e:	187b      	adds	r3, r7, r1
 8002c90:	2288      	movs	r2, #136	; 0x88
 8002c92:	0352      	lsls	r2, r2, #13
 8002c94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c9c:	000c      	movs	r4, r1
 8002c9e:	187b      	adds	r3, r7, r1
 8002ca0:	4a29      	ldr	r2, [pc, #164]	; (8002d48 <MX_GPIO_Init+0x1f8>)
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	0010      	movs	r0, r2
 8002ca6:	f000 fe1d 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8002caa:	0021      	movs	r1, r4
 8002cac:	187b      	adds	r3, r7, r1
 8002cae:	2280      	movs	r2, #128	; 0x80
 8002cb0:	0192      	lsls	r2, r2, #6
 8002cb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002cb4:	000c      	movs	r4, r1
 8002cb6:	193b      	adds	r3, r7, r4
 8002cb8:	2211      	movs	r2, #17
 8002cba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	193b      	adds	r3, r7, r4
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc2:	193b      	adds	r3, r7, r4
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8002cc8:	193b      	adds	r3, r7, r4
 8002cca:	4a1f      	ldr	r2, [pc, #124]	; (8002d48 <MX_GPIO_Init+0x1f8>)
 8002ccc:	0019      	movs	r1, r3
 8002cce:	0010      	movs	r0, r2
 8002cd0:	f000 fe08 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8002cd4:	193b      	adds	r3, r7, r4
 8002cd6:	4a1f      	ldr	r2, [pc, #124]	; (8002d54 <MX_GPIO_Init+0x204>)
 8002cd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cda:	193b      	adds	r3, r7, r4
 8002cdc:	2200      	movs	r2, #0
 8002cde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	193b      	adds	r3, r7, r4
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce6:	193b      	adds	r3, r7, r4
 8002ce8:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <MX_GPIO_Init+0x1f8>)
 8002cea:	0019      	movs	r1, r3
 8002cec:	0010      	movs	r0, r2
 8002cee:	f000 fdf9 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8002cf2:	193b      	adds	r3, r7, r4
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf8:	193b      	adds	r3, r7, r4
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	193b      	adds	r3, r7, r4
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d04:	193b      	adds	r3, r7, r4
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d0a:	193b      	adds	r3, r7, r4
 8002d0c:	4a0f      	ldr	r2, [pc, #60]	; (8002d4c <MX_GPIO_Init+0x1fc>)
 8002d0e:	0019      	movs	r1, r3
 8002d10:	0010      	movs	r0, r2
 8002d12:	f000 fde7 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8002d16:	0021      	movs	r1, r4
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	220c      	movs	r2, #12
 8002d1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2200      	movs	r2, #0
 8002d22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d2a:	187b      	adds	r3, r7, r1
 8002d2c:	4a07      	ldr	r2, [pc, #28]	; (8002d4c <MX_GPIO_Init+0x1fc>)
 8002d2e:	0019      	movs	r1, r3
 8002d30:	0010      	movs	r0, r2
 8002d32:	f000 fdd7 	bl	80038e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b00b      	add	sp, #44	; 0x2c
 8002d3c:	bd90      	pop	{r4, r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	40021000 	.word	0x40021000
 8002d44:	0000a403 	.word	0x0000a403
 8002d48:	50000400 	.word	0x50000400
 8002d4c:	50000c00 	.word	0x50000c00
 8002d50:	00008c03 	.word	0x00008c03
 8002d54:	00004040 	.word	0x00004040

08002d58 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7fd f9ce 	bl	8000104 <strlen>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2bfa      	cmp	r3, #250	; 0xfa
 8002d70:	d908      	bls.n	8002d84 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002d72:	23fa      	movs	r3, #250	; 0xfa
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	490d      	ldr	r1, [pc, #52]	; (8002dac <send_debug_logs+0x54>)
 8002d78:	480d      	ldr	r0, [pc, #52]	; (8002db0 <send_debug_logs+0x58>)
 8002d7a:	222a      	movs	r2, #42	; 0x2a
 8002d7c:	f003 f826 	bl	8005dcc <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002d80:	23fa      	movs	r3, #250	; 0xfa
 8002d82:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	23fa      	movs	r3, #250	; 0xfa
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4808      	ldr	r0, [pc, #32]	; (8002db0 <send_debug_logs+0x58>)
 8002d90:	f003 f81c 	bl	8005dcc <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002d94:	23fa      	movs	r3, #250	; 0xfa
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4906      	ldr	r1, [pc, #24]	; (8002db4 <send_debug_logs+0x5c>)
 8002d9a:	4805      	ldr	r0, [pc, #20]	; (8002db0 <send_debug_logs+0x58>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f003 f815 	bl	8005dcc <HAL_UART_Transmit>
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b004      	add	sp, #16
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	0800f470 	.word	0x0800f470
 8002db0:	2000084c 	.word	0x2000084c
 8002db4:	0800f49c 	.word	0x0800f49c

08002db8 <is_system_initialized>:
// System functions
bool is_system_initialized ( void )
{
 8002db8:	b590      	push	{r4, r7, lr}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
	// Nie próbuj robić nic z Astronode, bo nie wiesz czy nie trzeba go zainicjować restartem. Ogranicz się do samego systemu.
	uint16_t yyyy = my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002dbe:	1dbc      	adds	r4, r7, #6
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <is_system_initialized+0x34>)
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f004 f8e0 	bl	8006f88 <my_rtc_get_dt_s>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt_s ) ;
 8002dcc:	4b07      	ldr	r3, [pc, #28]	; (8002dec <is_system_initialized+0x34>)
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f7ff ffc2 	bl	8002d58 <send_debug_logs>
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
 8002dd4:	1dbb      	adds	r3, r7, #6
 8002dd6:	8819      	ldrh	r1, [r3, #0]
 8002dd8:	23fd      	movs	r3, #253	; 0xfd
 8002dda:	00da      	lsls	r2, r3, #3
 8002ddc:	2300      	movs	r3, #0
 8002dde:	4291      	cmp	r1, r2
 8002de0:	415b      	adcs	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
}
 8002de4:	0018      	movs	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b003      	add	sp, #12
 8002dea:	bd90      	pop	{r4, r7, pc}
 8002dec:	20000a08 	.word	0x20000a08

08002df0 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	0002      	movs	r2, r0
 8002df8:	1dfb      	adds	r3, r7, #7
 8002dfa:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 8002dfc:	1dfb      	adds	r3, r7, #7
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d10e      	bne.n	8002e22 <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	4811      	ldr	r0, [pc, #68]	; (8002e50 <my_ant_sw_pos+0x60>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	f000 fed5 	bl	8003bbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	480e      	ldr	r0, [pc, #56]	; (8002e50 <my_ant_sw_pos+0x60>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	f000 fece 	bl	8003bbc <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8002e20:	e011      	b.n	8002e46 <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 8002e22:	1dfb      	adds	r3, r7, #7
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d10d      	bne.n	8002e46 <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	4808      	ldr	r0, [pc, #32]	; (8002e50 <my_ant_sw_pos+0x60>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	0019      	movs	r1, r3
 8002e34:	f000 fec2 	bl	8003bbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4804      	ldr	r0, [pc, #16]	; (8002e50 <my_ant_sw_pos+0x60>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	0019      	movs	r1, r3
 8002e42:	f000 febb 	bl	8003bbc <HAL_GPIO_WritePin>
}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b002      	add	sp, #8
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	50000400 	.word	0x50000400

08002e54 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 8002e58:	2001      	movs	r0, #1
 8002e5a:	f7ff ffc9 	bl	8002df0 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	4808      	ldr	r0, [pc, #32]	; (8002e84 <my_gnss_sw_on+0x30>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	0019      	movs	r1, r3
 8002e68:	f000 fea8 	bl	8003bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	019b      	lsls	r3, r3, #6
 8002e70:	4804      	ldr	r0, [pc, #16]	; (8002e84 <my_gnss_sw_on+0x30>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	0019      	movs	r1, r3
 8002e76:	f000 fea1 	bl	8003bbc <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 8002e7a:	f7ff fe35 	bl	8002ae8 <MX_USART5_UART_Init>
}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	50000400 	.word	0x50000400

08002e88 <my_gnss_receive_byte>:
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
	HAL_UART_DeInit ( &HUART_GNSS ) ;

}
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	000a      	movs	r2, r1
 8002e92:	1cfb      	adds	r3, r7, #3
 8002e94:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 8002e96:	23fa      	movs	r3, #250	; 0xfa
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4809      	ldr	r0, [pc, #36]	; (8002ec4 <my_gnss_receive_byte+0x3c>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f003 f838 	bl	8005f14 <HAL_UART_Receive>
	if ( verbose )
 8002ea4:	1cfb      	adds	r3, r7, #3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d006      	beq.n	8002eba <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 8002eac:	23fa      	movs	r3, #250	; 0xfa
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4805      	ldr	r0, [pc, #20]	; (8002ec8 <my_gnss_receive_byte+0x40>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f002 ff89 	bl	8005dcc <HAL_UART_Transmit>
}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b002      	add	sp, #8
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	20000974 	.word	0x20000974
 8002ec8:	2000084c 	.word	0x2000084c

08002ecc <my_tim_init>:
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
}

// TIM operations
void my_tim_init ()
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <my_tim_init+0x14>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	4252      	negs	r2, r2
 8002ed8:	611a      	str	r2, [r3, #16]
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	2000076c 	.word	0x2000076c

08002ee4 <my_tim_start>:

void my_tim_start ()
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <my_tim_start+0x18>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 8002eee:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <my_tim_start+0x1c>)
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f002 fc37 	bl	8005764 <HAL_TIM_Base_Start_IT>
}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000a40 	.word	0x20000a40
 8002f00:	2000076c 	.word	0x2000076c

08002f04 <my_tim_stop>:

void my_tim_stop ()
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8002f08:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <my_tim_stop+0x14>)
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f002 fc8c 	bl	8005828 <HAL_TIM_Base_Stop_IT>
}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	2000076c 	.word	0x2000076c

08002f1c <HAL_TIM_PeriodElapsedCallback>:
// *** CALBACKS

// TIM Callback

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0c      	ldr	r2, [pc, #48]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d111      	bne.n	8002f52 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		tim_seconds++ ;
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	3301      	adds	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002f38:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002f3c:	881a      	ldrh	r2, [r3, #0]
 8002f3e:	2396      	movs	r3, #150	; 0x96
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d905      	bls.n	8002f52 <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			send_debug_logs ( "main.c,HAL_TIM_PeriodElapsedCallback,HAL_NVIC_SystemReset" ) ;
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f7ff ff05 	bl	8002d58 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 8002f4e:	f000 fcb8 	bl	80038c2 <HAL_NVIC_SystemReset>
		}
	}
}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b002      	add	sp, #8
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	40001000 	.word	0x40001000
 8002f60:	20000a40 	.word	0x20000a40
 8002f64:	0800f4cc 	.word	0x0800f4cc

08002f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f6c:	b672      	cpsid	i
}
 8002f6e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f70:	e7fe      	b.n	8002f70 <Error_Handler+0x8>
	...

08002f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f80:	2101      	movs	r1, #1
 8002f82:	430a      	orrs	r2, r1
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	607b      	str	r3, [r7, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f98:	2180      	movs	r1, #128	; 0x80
 8002f9a:	0549      	lsls	r1, r1, #21
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fa0:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	055b      	lsls	r3, r3, #21
 8002fa8:	4013      	ands	r3, r2
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002fae:	23c0      	movs	r3, #192	; 0xc0
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f000 fb8c 	bl	80036d0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b097      	sub	sp, #92	; 0x5c
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fcc:	240c      	movs	r4, #12
 8002fce:	193b      	adds	r3, r7, r4
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	234c      	movs	r3, #76	; 0x4c
 8002fd4:	001a      	movs	r2, r3
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	f005 fcbe 	bl	8008958 <memset>
  if(hrtc->Instance==RTC)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a19      	ldr	r2, [pc, #100]	; (8003048 <HAL_RTC_MspInit+0x84>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d12c      	bne.n	8003040 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002fe6:	193b      	adds	r3, r7, r4
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	0292      	lsls	r2, r2, #10
 8002fec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	0052      	lsls	r2, r2, #1
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ff6:	193b      	adds	r3, r7, r4
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f001 fb61 	bl	80046c0 <HAL_RCCEx_PeriphCLKConfig>
 8002ffe:	1e03      	subs	r3, r0, #0
 8003000:	d001      	beq.n	8003006 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003002:	f7ff ffb1 	bl	8002f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <HAL_RTC_MspInit+0x88>)
 8003008:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800300a:	4b10      	ldr	r3, [pc, #64]	; (800304c <HAL_RTC_MspInit+0x88>)
 800300c:	2180      	movs	r1, #128	; 0x80
 800300e:	0209      	lsls	r1, r1, #8
 8003010:	430a      	orrs	r2, r1
 8003012:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <HAL_RTC_MspInit+0x88>)
 8003016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <HAL_RTC_MspInit+0x88>)
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	00c9      	lsls	r1, r1, #3
 800301e:	430a      	orrs	r2, r1
 8003020:	63da      	str	r2, [r3, #60]	; 0x3c
 8003022:	4b0a      	ldr	r3, [pc, #40]	; (800304c <HAL_RTC_MspInit+0x88>)
 8003024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4013      	ands	r3, r2
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8003030:	2200      	movs	r2, #0
 8003032:	2103      	movs	r1, #3
 8003034:	2002      	movs	r0, #2
 8003036:	f000 fc1f 	bl	8003878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800303a:	2002      	movs	r0, #2
 800303c:	f000 fc31 	bl	80038a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003040:	46c0      	nop			; (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	b017      	add	sp, #92	; 0x5c
 8003046:	bd90      	pop	{r4, r7, pc}
 8003048:	40002800 	.word	0x40002800
 800304c:	40021000 	.word	0x40021000

08003050 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b08b      	sub	sp, #44	; 0x2c
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	2414      	movs	r4, #20
 800305a:	193b      	adds	r3, r7, r4
 800305c:	0018      	movs	r0, r3
 800305e:	2314      	movs	r3, #20
 8003060:	001a      	movs	r2, r3
 8003062:	2100      	movs	r1, #0
 8003064:	f005 fc78 	bl	8008958 <memset>
  if(hspi->Instance==SPI1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1b      	ldr	r2, [pc, #108]	; (80030dc <HAL_SPI_MspInit+0x8c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d130      	bne.n	80030d4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003072:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_SPI_MspInit+0x90>)
 8003074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003076:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <HAL_SPI_MspInit+0x90>)
 8003078:	2180      	movs	r1, #128	; 0x80
 800307a:	0149      	lsls	r1, r1, #5
 800307c:	430a      	orrs	r2, r1
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
 8003080:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <HAL_SPI_MspInit+0x90>)
 8003082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	015b      	lsls	r3, r3, #5
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308e:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <HAL_SPI_MspInit+0x90>)
 8003090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003092:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <HAL_SPI_MspInit+0x90>)
 8003094:	2101      	movs	r1, #1
 8003096:	430a      	orrs	r2, r1
 8003098:	635a      	str	r2, [r3, #52]	; 0x34
 800309a:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <HAL_SPI_MspInit+0x90>)
 800309c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309e:	2201      	movs	r2, #1
 80030a0:	4013      	ands	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 80030a6:	0021      	movs	r1, r4
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	22e0      	movs	r2, #224	; 0xe0
 80030ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ae:	187b      	adds	r3, r7, r1
 80030b0:	2202      	movs	r2, #2
 80030b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	2200      	movs	r2, #0
 80030b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	2200      	movs	r2, #0
 80030be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	2200      	movs	r2, #0
 80030c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c6:	187a      	adds	r2, r7, r1
 80030c8:	23a0      	movs	r3, #160	; 0xa0
 80030ca:	05db      	lsls	r3, r3, #23
 80030cc:	0011      	movs	r1, r2
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 fc08 	bl	80038e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80030d4:	46c0      	nop			; (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b00b      	add	sp, #44	; 0x2c
 80030da:	bd90      	pop	{r4, r7, pc}
 80030dc:	40013000 	.word	0x40013000
 80030e0:	40021000 	.word	0x40021000

080030e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <HAL_TIM_Base_MspInit+0x44>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d113      	bne.n	800311e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <HAL_TIM_Base_MspInit+0x48>)
 80030f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030fa:	4b0c      	ldr	r3, [pc, #48]	; (800312c <HAL_TIM_Base_MspInit+0x48>)
 80030fc:	2110      	movs	r1, #16
 80030fe:	430a      	orrs	r2, r1
 8003100:	63da      	str	r2, [r3, #60]	; 0x3c
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_TIM_Base_MspInit+0x48>)
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	2210      	movs	r2, #16
 8003108:	4013      	ands	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 800310e:	2200      	movs	r2, #0
 8003110:	2102      	movs	r1, #2
 8003112:	2011      	movs	r0, #17
 8003114:	f000 fbb0 	bl	8003878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003118:	2011      	movs	r0, #17
 800311a:	f000 fbc2 	bl	80038a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	46bd      	mov	sp, r7
 8003122:	b004      	add	sp, #16
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	40001000 	.word	0x40001000
 800312c:	40021000 	.word	0x40021000

08003130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b0a3      	sub	sp, #140	; 0x8c
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003138:	2374      	movs	r3, #116	; 0x74
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	0018      	movs	r0, r3
 800313e:	2314      	movs	r3, #20
 8003140:	001a      	movs	r2, r3
 8003142:	2100      	movs	r1, #0
 8003144:	f005 fc08 	bl	8008958 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003148:	2428      	movs	r4, #40	; 0x28
 800314a:	193b      	adds	r3, r7, r4
 800314c:	0018      	movs	r0, r3
 800314e:	234c      	movs	r3, #76	; 0x4c
 8003150:	001a      	movs	r2, r3
 8003152:	2100      	movs	r1, #0
 8003154:	f005 fc00 	bl	8008958 <memset>
  if(huart->Instance==USART1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a84      	ldr	r2, [pc, #528]	; (8003370 <HAL_UART_MspInit+0x240>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d140      	bne.n	80031e4 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003162:	193b      	adds	r3, r7, r4
 8003164:	2201      	movs	r2, #1
 8003166:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003168:	193b      	adds	r3, r7, r4
 800316a:	2200      	movs	r2, #0
 800316c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800316e:	193b      	adds	r3, r7, r4
 8003170:	0018      	movs	r0, r3
 8003172:	f001 faa5 	bl	80046c0 <HAL_RCCEx_PeriphCLKConfig>
 8003176:	1e03      	subs	r3, r0, #0
 8003178:	d001      	beq.n	800317e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800317a:	f7ff fef5 	bl	8002f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800317e:	4b7d      	ldr	r3, [pc, #500]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003182:	4b7c      	ldr	r3, [pc, #496]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003184:	2180      	movs	r1, #128	; 0x80
 8003186:	01c9      	lsls	r1, r1, #7
 8003188:	430a      	orrs	r2, r1
 800318a:	641a      	str	r2, [r3, #64]	; 0x40
 800318c:	4b79      	ldr	r3, [pc, #484]	; (8003374 <HAL_UART_MspInit+0x244>)
 800318e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	01db      	lsls	r3, r3, #7
 8003194:	4013      	ands	r3, r2
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800319a:	4b76      	ldr	r3, [pc, #472]	; (8003374 <HAL_UART_MspInit+0x244>)
 800319c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800319e:	4b75      	ldr	r3, [pc, #468]	; (8003374 <HAL_UART_MspInit+0x244>)
 80031a0:	2101      	movs	r1, #1
 80031a2:	430a      	orrs	r2, r1
 80031a4:	635a      	str	r2, [r3, #52]	; 0x34
 80031a6:	4b73      	ldr	r3, [pc, #460]	; (8003374 <HAL_UART_MspInit+0x244>)
 80031a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031aa:	2201      	movs	r2, #1
 80031ac:	4013      	ands	r3, r2
 80031ae:	623b      	str	r3, [r7, #32]
 80031b0:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 80031b2:	2174      	movs	r1, #116	; 0x74
 80031b4:	187b      	adds	r3, r7, r1
 80031b6:	22c0      	movs	r2, #192	; 0xc0
 80031b8:	00d2      	lsls	r2, r2, #3
 80031ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031bc:	187b      	adds	r3, r7, r1
 80031be:	2202      	movs	r2, #2
 80031c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	187b      	adds	r3, r7, r1
 80031c4:	2200      	movs	r2, #0
 80031c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c8:	187b      	adds	r3, r7, r1
 80031ca:	2200      	movs	r2, #0
 80031cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80031ce:	187b      	adds	r3, r7, r1
 80031d0:	2201      	movs	r2, #1
 80031d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d4:	187a      	adds	r2, r7, r1
 80031d6:	23a0      	movs	r3, #160	; 0xa0
 80031d8:	05db      	lsls	r3, r3, #23
 80031da:	0011      	movs	r1, r2
 80031dc:	0018      	movs	r0, r3
 80031de:	f000 fb81 	bl	80038e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 80031e2:	e0c0      	b.n	8003366 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a63      	ldr	r2, [pc, #396]	; (8003378 <HAL_UART_MspInit+0x248>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d140      	bne.n	8003270 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80031ee:	2128      	movs	r1, #40	; 0x28
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	2202      	movs	r2, #2
 80031f4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80031f6:	187b      	adds	r3, r7, r1
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	0018      	movs	r0, r3
 8003200:	f001 fa5e 	bl	80046c0 <HAL_RCCEx_PeriphCLKConfig>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d001      	beq.n	800320c <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003208:	f7ff feae 	bl	8002f68 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800320c:	4b59      	ldr	r3, [pc, #356]	; (8003374 <HAL_UART_MspInit+0x244>)
 800320e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003210:	4b58      	ldr	r3, [pc, #352]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	0289      	lsls	r1, r1, #10
 8003216:	430a      	orrs	r2, r1
 8003218:	63da      	str	r2, [r3, #60]	; 0x3c
 800321a:	4b56      	ldr	r3, [pc, #344]	; (8003374 <HAL_UART_MspInit+0x244>)
 800321c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	029b      	lsls	r3, r3, #10
 8003222:	4013      	ands	r3, r2
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003228:	4b52      	ldr	r3, [pc, #328]	; (8003374 <HAL_UART_MspInit+0x244>)
 800322a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800322c:	4b51      	ldr	r3, [pc, #324]	; (8003374 <HAL_UART_MspInit+0x244>)
 800322e:	2101      	movs	r1, #1
 8003230:	430a      	orrs	r2, r1
 8003232:	635a      	str	r2, [r3, #52]	; 0x34
 8003234:	4b4f      	ldr	r3, [pc, #316]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003238:	2201      	movs	r2, #1
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8003240:	2174      	movs	r1, #116	; 0x74
 8003242:	187b      	adds	r3, r7, r1
 8003244:	220c      	movs	r2, #12
 8003246:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003248:	187b      	adds	r3, r7, r1
 800324a:	2202      	movs	r2, #2
 800324c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	187b      	adds	r3, r7, r1
 8003250:	2200      	movs	r2, #0
 8003252:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003254:	187b      	adds	r3, r7, r1
 8003256:	2200      	movs	r2, #0
 8003258:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800325a:	187b      	adds	r3, r7, r1
 800325c:	2201      	movs	r2, #1
 800325e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003260:	187a      	adds	r2, r7, r1
 8003262:	23a0      	movs	r3, #160	; 0xa0
 8003264:	05db      	lsls	r3, r3, #23
 8003266:	0011      	movs	r1, r2
 8003268:	0018      	movs	r0, r3
 800326a:	f000 fb3b 	bl	80038e4 <HAL_GPIO_Init>
}
 800326e:	e07a      	b.n	8003366 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a41      	ldr	r2, [pc, #260]	; (800337c <HAL_UART_MspInit+0x24c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d140      	bne.n	80032fc <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800327a:	2128      	movs	r1, #40	; 0x28
 800327c:	187b      	adds	r3, r7, r1
 800327e:	2204      	movs	r2, #4
 8003280:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003282:	187b      	adds	r3, r7, r1
 8003284:	2200      	movs	r2, #0
 8003286:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003288:	187b      	adds	r3, r7, r1
 800328a:	0018      	movs	r0, r3
 800328c:	f001 fa18 	bl	80046c0 <HAL_RCCEx_PeriphCLKConfig>
 8003290:	1e03      	subs	r3, r0, #0
 8003292:	d001      	beq.n	8003298 <HAL_UART_MspInit+0x168>
      Error_Handler();
 8003294:	f7ff fe68 	bl	8002f68 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003298:	4b36      	ldr	r3, [pc, #216]	; (8003374 <HAL_UART_MspInit+0x244>)
 800329a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800329c:	4b35      	ldr	r3, [pc, #212]	; (8003374 <HAL_UART_MspInit+0x244>)
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	02c9      	lsls	r1, r1, #11
 80032a2:	430a      	orrs	r2, r1
 80032a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80032a6:	4b33      	ldr	r3, [pc, #204]	; (8003374 <HAL_UART_MspInit+0x244>)
 80032a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	02db      	lsls	r3, r3, #11
 80032ae:	4013      	ands	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b4:	4b2f      	ldr	r3, [pc, #188]	; (8003374 <HAL_UART_MspInit+0x244>)
 80032b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b8:	4b2e      	ldr	r3, [pc, #184]	; (8003374 <HAL_UART_MspInit+0x244>)
 80032ba:	2102      	movs	r1, #2
 80032bc:	430a      	orrs	r2, r1
 80032be:	635a      	str	r2, [r3, #52]	; 0x34
 80032c0:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <HAL_UART_MspInit+0x244>)
 80032c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c4:	2202      	movs	r2, #2
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 80032cc:	2174      	movs	r1, #116	; 0x74
 80032ce:	187b      	adds	r3, r7, r1
 80032d0:	22c0      	movs	r2, #192	; 0xc0
 80032d2:	0092      	lsls	r2, r2, #2
 80032d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d6:	187b      	adds	r3, r7, r1
 80032d8:	2202      	movs	r2, #2
 80032da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	187b      	adds	r3, r7, r1
 80032de:	2200      	movs	r2, #0
 80032e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e2:	187b      	adds	r3, r7, r1
 80032e4:	2200      	movs	r2, #0
 80032e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80032e8:	187b      	adds	r3, r7, r1
 80032ea:	2204      	movs	r2, #4
 80032ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ee:	187b      	adds	r3, r7, r1
 80032f0:	4a23      	ldr	r2, [pc, #140]	; (8003380 <HAL_UART_MspInit+0x250>)
 80032f2:	0019      	movs	r1, r3
 80032f4:	0010      	movs	r0, r2
 80032f6:	f000 faf5 	bl	80038e4 <HAL_GPIO_Init>
}
 80032fa:	e034      	b.n	8003366 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a20      	ldr	r2, [pc, #128]	; (8003384 <HAL_UART_MspInit+0x254>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d12f      	bne.n	8003366 <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003308:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800330a:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <HAL_UART_MspInit+0x244>)
 800330c:	2180      	movs	r1, #128	; 0x80
 800330e:	0049      	lsls	r1, r1, #1
 8003310:	430a      	orrs	r2, r1
 8003312:	63da      	str	r2, [r3, #60]	; 0x3c
 8003314:	4b17      	ldr	r3, [pc, #92]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4013      	ands	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003322:	4b14      	ldr	r3, [pc, #80]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003328:	2102      	movs	r1, #2
 800332a:	430a      	orrs	r2, r1
 800332c:	635a      	str	r2, [r3, #52]	; 0x34
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003332:	2202      	movs	r2, #2
 8003334:	4013      	ands	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 800333a:	2174      	movs	r1, #116	; 0x74
 800333c:	187b      	adds	r3, r7, r1
 800333e:	2218      	movs	r2, #24
 8003340:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003342:	187b      	adds	r3, r7, r1
 8003344:	2202      	movs	r2, #2
 8003346:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	187b      	adds	r3, r7, r1
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334e:	187b      	adds	r3, r7, r1
 8003350:	2200      	movs	r2, #0
 8003352:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8003354:	187b      	adds	r3, r7, r1
 8003356:	2203      	movs	r2, #3
 8003358:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335a:	187b      	adds	r3, r7, r1
 800335c:	4a08      	ldr	r2, [pc, #32]	; (8003380 <HAL_UART_MspInit+0x250>)
 800335e:	0019      	movs	r1, r3
 8003360:	0010      	movs	r0, r2
 8003362:	f000 fabf 	bl	80038e4 <HAL_GPIO_Init>
}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	46bd      	mov	sp, r7
 800336a:	b023      	add	sp, #140	; 0x8c
 800336c:	bd90      	pop	{r4, r7, pc}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	40013800 	.word	0x40013800
 8003374:	40021000 	.word	0x40021000
 8003378:	40004400 	.word	0x40004400
 800337c:	40004800 	.word	0x40004800
 8003380:	50000400 	.word	0x50000400
 8003384:	40005000 	.word	0x40005000

08003388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800338c:	e7fe      	b.n	800338c <NMI_Handler+0x4>

0800338e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003392:	e7fe      	b.n	8003392 <HardFault_Handler+0x4>

08003394 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003398:	46c0      	nop			; (mov r8, r8)
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ac:	f000 f974 	bl	8003698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <RTC_TAMP_IRQHandler+0x14>)
 80033be:	0018      	movs	r0, r3
 80033c0:	f001 ff80 	bl	80052c4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	200006dc 	.word	0x200006dc

080033d0 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80033d6:	0018      	movs	r0, r3
 80033d8:	f002 fa54 	bl	8005884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	2000076c 	.word	0x2000076c

080033e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  return 1;
 80033ec:	2301      	movs	r3, #1
}
 80033ee:	0018      	movs	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <_kill>:

int _kill(int pid, int sig)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033fe:	f005 fb41 	bl	8008a84 <__errno>
 8003402:	0003      	movs	r3, r0
 8003404:	2216      	movs	r2, #22
 8003406:	601a      	str	r2, [r3, #0]
  return -1;
 8003408:	2301      	movs	r3, #1
 800340a:	425b      	negs	r3, r3
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	b002      	add	sp, #8
 8003412:	bd80      	pop	{r7, pc}

08003414 <_exit>:

void _exit (int status)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800341c:	2301      	movs	r3, #1
 800341e:	425a      	negs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	0011      	movs	r1, r2
 8003424:	0018      	movs	r0, r3
 8003426:	f7ff ffe5 	bl	80033f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800342a:	e7fe      	b.n	800342a <_exit+0x16>

0800342c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	e00a      	b.n	8003454 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800343e:	e000      	b.n	8003442 <_read+0x16>
 8003440:	bf00      	nop
 8003442:	0001      	movs	r1, r0
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	60ba      	str	r2, [r7, #8]
 800344a:	b2ca      	uxtb	r2, r1
 800344c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	3301      	adds	r3, #1
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	429a      	cmp	r2, r3
 800345a:	dbf0      	blt.n	800343e <_read+0x12>
  }

  return len;
 800345c:	687b      	ldr	r3, [r7, #4]
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b006      	add	sp, #24
 8003464:	bd80      	pop	{r7, pc}

08003466 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	e009      	b.n	800348c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	60ba      	str	r2, [r7, #8]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	0018      	movs	r0, r3
 8003482:	e000      	b.n	8003486 <_write+0x20>
 8003484:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3301      	adds	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	dbf1      	blt.n	8003478 <_write+0x12>
  }
  return len;
 8003494:	687b      	ldr	r3, [r7, #4]
}
 8003496:	0018      	movs	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	b006      	add	sp, #24
 800349c:	bd80      	pop	{r7, pc}

0800349e <_close>:

int _close(int file)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034a6:	2301      	movs	r3, #1
 80034a8:	425b      	negs	r3, r3
}
 80034aa:	0018      	movs	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b002      	add	sp, #8
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2280      	movs	r2, #128	; 0x80
 80034c0:	0192      	lsls	r2, r2, #6
 80034c2:	605a      	str	r2, [r3, #4]
  return 0;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	0018      	movs	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b002      	add	sp, #8
 80034cc:	bd80      	pop	{r7, pc}

080034ce <_isatty>:

int _isatty(int file)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034d6:	2301      	movs	r3, #1
}
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b002      	add	sp, #8
 80034de:	bd80      	pop	{r7, pc}

080034e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	0018      	movs	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b004      	add	sp, #16
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003500:	4a14      	ldr	r2, [pc, #80]	; (8003554 <_sbrk+0x5c>)
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <_sbrk+0x60>)
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800350c:	4b13      	ldr	r3, [pc, #76]	; (800355c <_sbrk+0x64>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003514:	4b11      	ldr	r3, [pc, #68]	; (800355c <_sbrk+0x64>)
 8003516:	4a12      	ldr	r2, [pc, #72]	; (8003560 <_sbrk+0x68>)
 8003518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <_sbrk+0x64>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	18d3      	adds	r3, r2, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	429a      	cmp	r2, r3
 8003526:	d207      	bcs.n	8003538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003528:	f005 faac 	bl	8008a84 <__errno>
 800352c:	0003      	movs	r3, r0
 800352e:	220c      	movs	r2, #12
 8003530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003532:	2301      	movs	r3, #1
 8003534:	425b      	negs	r3, r3
 8003536:	e009      	b.n	800354c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003538:	4b08      	ldr	r3, [pc, #32]	; (800355c <_sbrk+0x64>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800353e:	4b07      	ldr	r3, [pc, #28]	; (800355c <_sbrk+0x64>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	18d2      	adds	r2, r2, r3
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <_sbrk+0x64>)
 8003548:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800354a:	68fb      	ldr	r3, [r7, #12]
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b006      	add	sp, #24
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20024000 	.word	0x20024000
 8003558:	00000400 	.word	0x00000400
 800355c:	20000a38 	.word	0x20000a38
 8003560:	20000d50 	.word	0x20000d50

08003564 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003570:	480d      	ldr	r0, [pc, #52]	; (80035a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003572:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003574:	f7ff fff6 	bl	8003564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003578:	480c      	ldr	r0, [pc, #48]	; (80035ac <LoopForever+0x6>)
  ldr r1, =_edata
 800357a:	490d      	ldr	r1, [pc, #52]	; (80035b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800357c:	4a0d      	ldr	r2, [pc, #52]	; (80035b4 <LoopForever+0xe>)
  movs r3, #0
 800357e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003580:	e002      	b.n	8003588 <LoopCopyDataInit>

08003582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003586:	3304      	adds	r3, #4

08003588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800358a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800358c:	d3f9      	bcc.n	8003582 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800358e:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003590:	4c0a      	ldr	r4, [pc, #40]	; (80035bc <LoopForever+0x16>)
  movs r3, #0
 8003592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003594:	e001      	b.n	800359a <LoopFillZerobss>

08003596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003598:	3204      	adds	r2, #4

0800359a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800359a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800359c:	d3fb      	bcc.n	8003596 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800359e:	f005 fa77 	bl	8008a90 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80035a2:	f7ff f801 	bl	80025a8 <main>

080035a6 <LoopForever>:

LoopForever:
  b LoopForever
 80035a6:	e7fe      	b.n	80035a6 <LoopForever>
  ldr   r0, =_estack
 80035a8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80035ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035b0:	200006c0 	.word	0x200006c0
  ldr r2, =_sidata
 80035b4:	0800fb00 	.word	0x0800fb00
  ldr r2, =_sbss
 80035b8:	200006c0 	.word	0x200006c0
  ldr r4, =_ebss
 80035bc:	20000d50 	.word	0x20000d50

080035c0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035c0:	e7fe      	b.n	80035c0 <ADC1_COMP_IRQHandler>
	...

080035c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035ca:	1dfb      	adds	r3, r7, #7
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_Init+0x3c>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <HAL_Init+0x3c>)
 80035d6:	2180      	movs	r1, #128	; 0x80
 80035d8:	0049      	lsls	r1, r1, #1
 80035da:	430a      	orrs	r2, r1
 80035dc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035de:	2003      	movs	r0, #3
 80035e0:	f000 f810 	bl	8003604 <HAL_InitTick>
 80035e4:	1e03      	subs	r3, r0, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80035e8:	1dfb      	adds	r3, r7, #7
 80035ea:	2201      	movs	r2, #1
 80035ec:	701a      	strb	r2, [r3, #0]
 80035ee:	e001      	b.n	80035f4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80035f0:	f7ff fcc0 	bl	8002f74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035f4:	1dfb      	adds	r3, r7, #7
 80035f6:	781b      	ldrb	r3, [r3, #0]
}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b002      	add	sp, #8
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40022000 	.word	0x40022000

08003604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800360c:	230f      	movs	r3, #15
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003614:	4b1d      	ldr	r3, [pc, #116]	; (800368c <HAL_InitTick+0x88>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d02b      	beq.n	8003674 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800361c:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HAL_InitTick+0x8c>)
 800361e:	681c      	ldr	r4, [r3, #0]
 8003620:	4b1a      	ldr	r3, [pc, #104]	; (800368c <HAL_InitTick+0x88>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	0019      	movs	r1, r3
 8003626:	23fa      	movs	r3, #250	; 0xfa
 8003628:	0098      	lsls	r0, r3, #2
 800362a:	f7fc fd87 	bl	800013c <__udivsi3>
 800362e:	0003      	movs	r3, r0
 8003630:	0019      	movs	r1, r3
 8003632:	0020      	movs	r0, r4
 8003634:	f7fc fd82 	bl	800013c <__udivsi3>
 8003638:	0003      	movs	r3, r0
 800363a:	0018      	movs	r0, r3
 800363c:	f000 f945 	bl	80038ca <HAL_SYSTICK_Config>
 8003640:	1e03      	subs	r3, r0, #0
 8003642:	d112      	bne.n	800366a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b03      	cmp	r3, #3
 8003648:	d80a      	bhi.n	8003660 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	2301      	movs	r3, #1
 800364e:	425b      	negs	r3, r3
 8003650:	2200      	movs	r2, #0
 8003652:	0018      	movs	r0, r3
 8003654:	f000 f910 	bl	8003878 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003658:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <HAL_InitTick+0x90>)
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e00d      	b.n	800367c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003660:	230f      	movs	r3, #15
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	e008      	b.n	800367c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800366a:	230f      	movs	r3, #15
 800366c:	18fb      	adds	r3, r7, r3
 800366e:	2201      	movs	r2, #1
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	e003      	b.n	800367c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003674:	230f      	movs	r3, #15
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	2201      	movs	r2, #1
 800367a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800367c:	230f      	movs	r3, #15
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
}
 8003682:	0018      	movs	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	b005      	add	sp, #20
 8003688:	bd90      	pop	{r4, r7, pc}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	2000000c 	.word	0x2000000c
 8003690:	20000004 	.word	0x20000004
 8003694:	20000008 	.word	0x20000008

08003698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_IncTick+0x1c>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	001a      	movs	r2, r3
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_IncTick+0x20>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	18d2      	adds	r2, r2, r3
 80036a8:	4b03      	ldr	r3, [pc, #12]	; (80036b8 <HAL_IncTick+0x20>)
 80036aa:	601a      	str	r2, [r3, #0]
}
 80036ac:	46c0      	nop			; (mov r8, r8)
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	2000000c 	.word	0x2000000c
 80036b8:	20000a3c 	.word	0x20000a3c

080036bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  return uwTick;
 80036c0:	4b02      	ldr	r3, [pc, #8]	; (80036cc <HAL_GetTick+0x10>)
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	0018      	movs	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	20000a3c 	.word	0x20000a3c

080036d0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80036d8:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a06      	ldr	r2, [pc, #24]	; (80036f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80036de:	4013      	ands	r3, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]
}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b002      	add	sp, #8
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	40010000 	.word	0x40010000
 80036f8:	fffff9ff 	.word	0xfffff9ff

080036fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	0002      	movs	r2, r0
 8003704:	1dfb      	adds	r3, r7, #7
 8003706:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b7f      	cmp	r3, #127	; 0x7f
 800370e:	d809      	bhi.n	8003724 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003710:	1dfb      	adds	r3, r7, #7
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	001a      	movs	r2, r3
 8003716:	231f      	movs	r3, #31
 8003718:	401a      	ands	r2, r3
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <__NVIC_EnableIRQ+0x30>)
 800371c:	2101      	movs	r1, #1
 800371e:	4091      	lsls	r1, r2
 8003720:	000a      	movs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	b002      	add	sp, #8
 800372a:	bd80      	pop	{r7, pc}
 800372c:	e000e100 	.word	0xe000e100

08003730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	0002      	movs	r2, r0
 8003738:	6039      	str	r1, [r7, #0]
 800373a:	1dfb      	adds	r3, r7, #7
 800373c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800373e:	1dfb      	adds	r3, r7, #7
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b7f      	cmp	r3, #127	; 0x7f
 8003744:	d828      	bhi.n	8003798 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003746:	4a2f      	ldr	r2, [pc, #188]	; (8003804 <__NVIC_SetPriority+0xd4>)
 8003748:	1dfb      	adds	r3, r7, #7
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	b25b      	sxtb	r3, r3
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	33c0      	adds	r3, #192	; 0xc0
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	589b      	ldr	r3, [r3, r2]
 8003756:	1dfa      	adds	r2, r7, #7
 8003758:	7812      	ldrb	r2, [r2, #0]
 800375a:	0011      	movs	r1, r2
 800375c:	2203      	movs	r2, #3
 800375e:	400a      	ands	r2, r1
 8003760:	00d2      	lsls	r2, r2, #3
 8003762:	21ff      	movs	r1, #255	; 0xff
 8003764:	4091      	lsls	r1, r2
 8003766:	000a      	movs	r2, r1
 8003768:	43d2      	mvns	r2, r2
 800376a:	401a      	ands	r2, r3
 800376c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	019b      	lsls	r3, r3, #6
 8003772:	22ff      	movs	r2, #255	; 0xff
 8003774:	401a      	ands	r2, r3
 8003776:	1dfb      	adds	r3, r7, #7
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	0018      	movs	r0, r3
 800377c:	2303      	movs	r3, #3
 800377e:	4003      	ands	r3, r0
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003784:	481f      	ldr	r0, [pc, #124]	; (8003804 <__NVIC_SetPriority+0xd4>)
 8003786:	1dfb      	adds	r3, r7, #7
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	b25b      	sxtb	r3, r3
 800378c:	089b      	lsrs	r3, r3, #2
 800378e:	430a      	orrs	r2, r1
 8003790:	33c0      	adds	r3, #192	; 0xc0
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003796:	e031      	b.n	80037fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003798:	4a1b      	ldr	r2, [pc, #108]	; (8003808 <__NVIC_SetPriority+0xd8>)
 800379a:	1dfb      	adds	r3, r7, #7
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	0019      	movs	r1, r3
 80037a0:	230f      	movs	r3, #15
 80037a2:	400b      	ands	r3, r1
 80037a4:	3b08      	subs	r3, #8
 80037a6:	089b      	lsrs	r3, r3, #2
 80037a8:	3306      	adds	r3, #6
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	18d3      	adds	r3, r2, r3
 80037ae:	3304      	adds	r3, #4
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	1dfa      	adds	r2, r7, #7
 80037b4:	7812      	ldrb	r2, [r2, #0]
 80037b6:	0011      	movs	r1, r2
 80037b8:	2203      	movs	r2, #3
 80037ba:	400a      	ands	r2, r1
 80037bc:	00d2      	lsls	r2, r2, #3
 80037be:	21ff      	movs	r1, #255	; 0xff
 80037c0:	4091      	lsls	r1, r2
 80037c2:	000a      	movs	r2, r1
 80037c4:	43d2      	mvns	r2, r2
 80037c6:	401a      	ands	r2, r3
 80037c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	019b      	lsls	r3, r3, #6
 80037ce:	22ff      	movs	r2, #255	; 0xff
 80037d0:	401a      	ands	r2, r3
 80037d2:	1dfb      	adds	r3, r7, #7
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	0018      	movs	r0, r3
 80037d8:	2303      	movs	r3, #3
 80037da:	4003      	ands	r3, r0
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037e0:	4809      	ldr	r0, [pc, #36]	; (8003808 <__NVIC_SetPriority+0xd8>)
 80037e2:	1dfb      	adds	r3, r7, #7
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	001c      	movs	r4, r3
 80037e8:	230f      	movs	r3, #15
 80037ea:	4023      	ands	r3, r4
 80037ec:	3b08      	subs	r3, #8
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	430a      	orrs	r2, r1
 80037f2:	3306      	adds	r3, #6
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	18c3      	adds	r3, r0, r3
 80037f8:	3304      	adds	r3, #4
 80037fa:	601a      	str	r2, [r3, #0]
}
 80037fc:	46c0      	nop			; (mov r8, r8)
 80037fe:	46bd      	mov	sp, r7
 8003800:	b003      	add	sp, #12
 8003802:	bd90      	pop	{r4, r7, pc}
 8003804:	e000e100 	.word	0xe000e100
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003810:	f3bf 8f4f 	dsb	sy
}
 8003814:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003816:	4b04      	ldr	r3, [pc, #16]	; (8003828 <__NVIC_SystemReset+0x1c>)
 8003818:	4a04      	ldr	r2, [pc, #16]	; (800382c <__NVIC_SystemReset+0x20>)
 800381a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800381c:	f3bf 8f4f 	dsb	sy
}
 8003820:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	e7fd      	b.n	8003822 <__NVIC_SystemReset+0x16>
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	e000ed00 	.word	0xe000ed00
 800382c:	05fa0004 	.word	0x05fa0004

08003830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	1e5a      	subs	r2, r3, #1
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	045b      	lsls	r3, r3, #17
 8003840:	429a      	cmp	r2, r3
 8003842:	d301      	bcc.n	8003848 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003844:	2301      	movs	r3, #1
 8003846:	e010      	b.n	800386a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003848:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <SysTick_Config+0x44>)
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	3a01      	subs	r2, #1
 800384e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003850:	2301      	movs	r3, #1
 8003852:	425b      	negs	r3, r3
 8003854:	2103      	movs	r1, #3
 8003856:	0018      	movs	r0, r3
 8003858:	f7ff ff6a 	bl	8003730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <SysTick_Config+0x44>)
 800385e:	2200      	movs	r2, #0
 8003860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003862:	4b04      	ldr	r3, [pc, #16]	; (8003874 <SysTick_Config+0x44>)
 8003864:	2207      	movs	r2, #7
 8003866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003868:	2300      	movs	r3, #0
}
 800386a:	0018      	movs	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	b002      	add	sp, #8
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	e000e010 	.word	0xe000e010

08003878 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	210f      	movs	r1, #15
 8003884:	187b      	adds	r3, r7, r1
 8003886:	1c02      	adds	r2, r0, #0
 8003888:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	187b      	adds	r3, r7, r1
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	b25b      	sxtb	r3, r3
 8003892:	0011      	movs	r1, r2
 8003894:	0018      	movs	r0, r3
 8003896:	f7ff ff4b 	bl	8003730 <__NVIC_SetPriority>
}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b004      	add	sp, #16
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	0002      	movs	r2, r0
 80038aa:	1dfb      	adds	r3, r7, #7
 80038ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ae:	1dfb      	adds	r3, r7, #7
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	b25b      	sxtb	r3, r3
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7ff ff21 	bl	80036fc <__NVIC_EnableIRQ>
}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80038c6:	f7ff ffa1 	bl	800380c <__NVIC_SystemReset>

080038ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f7ff ffab 	bl	8003830 <SysTick_Config>
 80038da:	0003      	movs	r3, r0
}
 80038dc:	0018      	movs	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	b002      	add	sp, #8
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038f2:	e14d      	b.n	8003b90 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2101      	movs	r1, #1
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4091      	lsls	r1, r2
 80038fe:	000a      	movs	r2, r1
 8003900:	4013      	ands	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d100      	bne.n	800390c <HAL_GPIO_Init+0x28>
 800390a:	e13e      	b.n	8003b8a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2203      	movs	r2, #3
 8003912:	4013      	ands	r3, r2
 8003914:	2b01      	cmp	r3, #1
 8003916:	d005      	beq.n	8003924 <HAL_GPIO_Init+0x40>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2203      	movs	r2, #3
 800391e:	4013      	ands	r3, r2
 8003920:	2b02      	cmp	r3, #2
 8003922:	d130      	bne.n	8003986 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	2203      	movs	r2, #3
 8003930:	409a      	lsls	r2, r3
 8003932:	0013      	movs	r3, r2
 8003934:	43da      	mvns	r2, r3
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4013      	ands	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	409a      	lsls	r2, r3
 8003946:	0013      	movs	r3, r2
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800395a:	2201      	movs	r2, #1
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	409a      	lsls	r2, r3
 8003960:	0013      	movs	r3, r2
 8003962:	43da      	mvns	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4013      	ands	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	091b      	lsrs	r3, r3, #4
 8003970:	2201      	movs	r2, #1
 8003972:	401a      	ands	r2, r3
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	409a      	lsls	r2, r3
 8003978:	0013      	movs	r3, r2
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2203      	movs	r2, #3
 800398c:	4013      	ands	r3, r2
 800398e:	2b03      	cmp	r3, #3
 8003990:	d017      	beq.n	80039c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	2203      	movs	r2, #3
 800399e:	409a      	lsls	r2, r3
 80039a0:	0013      	movs	r3, r2
 80039a2:	43da      	mvns	r2, r3
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4013      	ands	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	409a      	lsls	r2, r3
 80039b4:	0013      	movs	r3, r2
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2203      	movs	r2, #3
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d123      	bne.n	8003a16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	08da      	lsrs	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3208      	adds	r2, #8
 80039d6:	0092      	lsls	r2, r2, #2
 80039d8:	58d3      	ldr	r3, [r2, r3]
 80039da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2207      	movs	r2, #7
 80039e0:	4013      	ands	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	220f      	movs	r2, #15
 80039e6:	409a      	lsls	r2, r3
 80039e8:	0013      	movs	r3, r2
 80039ea:	43da      	mvns	r2, r3
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4013      	ands	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2107      	movs	r1, #7
 80039fa:	400b      	ands	r3, r1
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	409a      	lsls	r2, r3
 8003a00:	0013      	movs	r3, r2
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	08da      	lsrs	r2, r3, #3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3208      	adds	r2, #8
 8003a10:	0092      	lsls	r2, r2, #2
 8003a12:	6939      	ldr	r1, [r7, #16]
 8003a14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	2203      	movs	r2, #3
 8003a22:	409a      	lsls	r2, r3
 8003a24:	0013      	movs	r3, r2
 8003a26:	43da      	mvns	r2, r3
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2203      	movs	r2, #3
 8003a34:	401a      	ands	r2, r3
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	0013      	movs	r3, r2
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	23c0      	movs	r3, #192	; 0xc0
 8003a50:	029b      	lsls	r3, r3, #10
 8003a52:	4013      	ands	r3, r2
 8003a54:	d100      	bne.n	8003a58 <HAL_GPIO_Init+0x174>
 8003a56:	e098      	b.n	8003b8a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003a58:	4a53      	ldr	r2, [pc, #332]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	089b      	lsrs	r3, r3, #2
 8003a5e:	3318      	adds	r3, #24
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	589b      	ldr	r3, [r3, r2]
 8003a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2203      	movs	r2, #3
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	220f      	movs	r2, #15
 8003a70:	409a      	lsls	r2, r3
 8003a72:	0013      	movs	r3, r2
 8003a74:	43da      	mvns	r2, r3
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	23a0      	movs	r3, #160	; 0xa0
 8003a80:	05db      	lsls	r3, r3, #23
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d019      	beq.n	8003aba <HAL_GPIO_Init+0x1d6>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a48      	ldr	r2, [pc, #288]	; (8003bac <HAL_GPIO_Init+0x2c8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_GPIO_Init+0x1d2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a47      	ldr	r2, [pc, #284]	; (8003bb0 <HAL_GPIO_Init+0x2cc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00d      	beq.n	8003ab2 <HAL_GPIO_Init+0x1ce>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a46      	ldr	r2, [pc, #280]	; (8003bb4 <HAL_GPIO_Init+0x2d0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d007      	beq.n	8003aae <HAL_GPIO_Init+0x1ca>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a45      	ldr	r2, [pc, #276]	; (8003bb8 <HAL_GPIO_Init+0x2d4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <HAL_GPIO_Init+0x1c6>
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	e008      	b.n	8003abc <HAL_GPIO_Init+0x1d8>
 8003aaa:	2305      	movs	r3, #5
 8003aac:	e006      	b.n	8003abc <HAL_GPIO_Init+0x1d8>
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e004      	b.n	8003abc <HAL_GPIO_Init+0x1d8>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e002      	b.n	8003abc <HAL_GPIO_Init+0x1d8>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_GPIO_Init+0x1d8>
 8003aba:	2300      	movs	r3, #0
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	2103      	movs	r1, #3
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	00d2      	lsls	r2, r2, #3
 8003ac4:	4093      	lsls	r3, r2
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003acc:	4936      	ldr	r1, [pc, #216]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	089b      	lsrs	r3, r3, #2
 8003ad2:	3318      	adds	r3, #24
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ada:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	2380      	movs	r3, #128	; 0x80
 8003af0:	035b      	lsls	r3, r3, #13
 8003af2:	4013      	ands	r3, r2
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003afe:	4b2a      	ldr	r3, [pc, #168]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003b04:	4b28      	ldr	r3, [pc, #160]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	43da      	mvns	r2, r3
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4013      	ands	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	2380      	movs	r3, #128	; 0x80
 8003b1a:	039b      	lsls	r3, r3, #14
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b28:	4b1f      	ldr	r3, [pc, #124]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003b30:	2384      	movs	r3, #132	; 0x84
 8003b32:	58d3      	ldr	r3, [r2, r3]
 8003b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	43da      	mvns	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	029b      	lsls	r3, r3, #10
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d003      	beq.n	8003b54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b54:	4914      	ldr	r1, [pc, #80]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003b56:	2284      	movs	r2, #132	; 0x84
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003b5c:	4a12      	ldr	r2, [pc, #72]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	58d3      	ldr	r3, [r2, r3]
 8003b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	43da      	mvns	r2, r3
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	025b      	lsls	r3, r3, #9
 8003b76:	4013      	ands	r3, r2
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b82:	4909      	ldr	r1, [pc, #36]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003b84:	2280      	movs	r2, #128	; 0x80
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	40da      	lsrs	r2, r3
 8003b98:	1e13      	subs	r3, r2, #0
 8003b9a:	d000      	beq.n	8003b9e <HAL_GPIO_Init+0x2ba>
 8003b9c:	e6aa      	b.n	80038f4 <HAL_GPIO_Init+0x10>
  }
}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	46c0      	nop			; (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b006      	add	sp, #24
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021800 	.word	0x40021800
 8003bac:	50000400 	.word	0x50000400
 8003bb0:	50000800 	.word	0x50000800
 8003bb4:	50000c00 	.word	0x50000c00
 8003bb8:	50001000 	.word	0x50001000

08003bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	0008      	movs	r0, r1
 8003bc6:	0011      	movs	r1, r2
 8003bc8:	1cbb      	adds	r3, r7, #2
 8003bca:	1c02      	adds	r2, r0, #0
 8003bcc:	801a      	strh	r2, [r3, #0]
 8003bce:	1c7b      	adds	r3, r7, #1
 8003bd0:	1c0a      	adds	r2, r1, #0
 8003bd2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bd4:	1c7b      	adds	r3, r7, #1
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d004      	beq.n	8003be6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bdc:	1cbb      	adds	r3, r7, #2
 8003bde:	881a      	ldrh	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003be4:	e003      	b.n	8003bee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003be6:	1cbb      	adds	r3, r7, #2
 8003be8:	881a      	ldrh	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b002      	add	sp, #8
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bfc:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003c02:	2180      	movs	r1, #128	; 0x80
 8003c04:	0049      	lsls	r1, r1, #1
 8003c06:	430a      	orrs	r2, r1
 8003c08:	601a      	str	r2, [r3, #0]
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40007000 	.word	0x40007000

08003c14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003c1c:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	0019      	movs	r1, r3
 8003c26:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d11f      	bne.n	8003c78 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003c38:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	0013      	movs	r3, r2
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	189b      	adds	r3, r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4912      	ldr	r1, [pc, #72]	; (8003c90 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003c46:	0018      	movs	r0, r3
 8003c48:	f7fc fa78 	bl	800013c <__udivsi3>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	3301      	adds	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c52:	e008      	b.n	8003c66 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	e001      	b.n	8003c66 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e009      	b.n	8003c7a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c68:	695a      	ldr	r2, [r3, #20]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	401a      	ands	r2, r3
 8003c70:	2380      	movs	r3, #128	; 0x80
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d0ed      	beq.n	8003c54 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b004      	add	sp, #16
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	40007000 	.word	0x40007000
 8003c88:	fffff9ff 	.word	0xfffff9ff
 8003c8c:	20000004 	.word	0x20000004
 8003c90:	000f4240 	.word	0x000f4240

08003c94 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003c98:	4b03      	ldr	r3, [pc, #12]	; (8003ca8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	23e0      	movs	r3, #224	; 0xe0
 8003c9e:	01db      	lsls	r3, r3, #7
 8003ca0:	4013      	ands	r3, r2
}
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40021000 	.word	0x40021000

08003cac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d102      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	f000 fb50 	bl	8004360 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d100      	bne.n	8003ccc <HAL_RCC_OscConfig+0x20>
 8003cca:	e07c      	b.n	8003dc6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ccc:	4bc3      	ldr	r3, [pc, #780]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2238      	movs	r2, #56	; 0x38
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd6:	4bc1      	ldr	r3, [pc, #772]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	2203      	movs	r2, #3
 8003cdc:	4013      	ands	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b10      	cmp	r3, #16
 8003ce4:	d102      	bne.n	8003cec <HAL_RCC_OscConfig+0x40>
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d002      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d10b      	bne.n	8003d0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf2:	4bba      	ldr	r3, [pc, #744]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	029b      	lsls	r3, r3, #10
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d062      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x118>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d15e      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e32a      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	025b      	lsls	r3, r3, #9
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_OscConfig+0x7a>
 8003d16:	4bb1      	ldr	r3, [pc, #708]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4bb0      	ldr	r3, [pc, #704]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d1c:	2180      	movs	r1, #128	; 0x80
 8003d1e:	0249      	lsls	r1, r1, #9
 8003d20:	430a      	orrs	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	e020      	b.n	8003d68 <HAL_RCC_OscConfig+0xbc>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	23a0      	movs	r3, #160	; 0xa0
 8003d2c:	02db      	lsls	r3, r3, #11
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d10e      	bne.n	8003d50 <HAL_RCC_OscConfig+0xa4>
 8003d32:	4baa      	ldr	r3, [pc, #680]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4ba9      	ldr	r3, [pc, #676]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d38:	2180      	movs	r1, #128	; 0x80
 8003d3a:	02c9      	lsls	r1, r1, #11
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	4ba6      	ldr	r3, [pc, #664]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4ba5      	ldr	r3, [pc, #660]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d46:	2180      	movs	r1, #128	; 0x80
 8003d48:	0249      	lsls	r1, r1, #9
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	e00b      	b.n	8003d68 <HAL_RCC_OscConfig+0xbc>
 8003d50:	4ba2      	ldr	r3, [pc, #648]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4ba1      	ldr	r3, [pc, #644]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d56:	49a2      	ldr	r1, [pc, #648]	; (8003fe0 <HAL_RCC_OscConfig+0x334>)
 8003d58:	400a      	ands	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	4b9f      	ldr	r3, [pc, #636]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	4b9e      	ldr	r3, [pc, #632]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d62:	49a0      	ldr	r1, [pc, #640]	; (8003fe4 <HAL_RCC_OscConfig+0x338>)
 8003d64:	400a      	ands	r2, r1
 8003d66:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d014      	beq.n	8003d9a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7ff fca4 	bl	80036bc <HAL_GetTick>
 8003d74:	0003      	movs	r3, r0
 8003d76:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d7a:	f7ff fc9f 	bl	80036bc <HAL_GetTick>
 8003d7e:	0002      	movs	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b64      	cmp	r3, #100	; 0x64
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e2e9      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d8c:	4b93      	ldr	r3, [pc, #588]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	029b      	lsls	r3, r3, #10
 8003d94:	4013      	ands	r3, r2
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCC_OscConfig+0xce>
 8003d98:	e015      	b.n	8003dc6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9a:	f7ff fc8f 	bl	80036bc <HAL_GetTick>
 8003d9e:	0003      	movs	r3, r0
 8003da0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da4:	f7ff fc8a 	bl	80036bc <HAL_GetTick>
 8003da8:	0002      	movs	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	; 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e2d4      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003db6:	4b89      	ldr	r3, [pc, #548]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	029b      	lsls	r3, r3, #10
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0xf8>
 8003dc2:	e000      	b.n	8003dc6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d100      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x126>
 8003dd0:	e099      	b.n	8003f06 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dd2:	4b82      	ldr	r3, [pc, #520]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2238      	movs	r2, #56	; 0x38
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ddc:	4b7f      	ldr	r3, [pc, #508]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2203      	movs	r2, #3
 8003de2:	4013      	ands	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	2b10      	cmp	r3, #16
 8003dea:	d102      	bne.n	8003df2 <HAL_RCC_OscConfig+0x146>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d002      	beq.n	8003df8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d135      	bne.n	8003e64 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003df8:	4b78      	ldr	r3, [pc, #480]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4013      	ands	r3, r2
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_OscConfig+0x164>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e2a7      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e10:	4b72      	ldr	r3, [pc, #456]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4a74      	ldr	r2, [pc, #464]	; (8003fe8 <HAL_RCC_OscConfig+0x33c>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	0019      	movs	r1, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	021a      	lsls	r2, r3, #8
 8003e20:	4b6e      	ldr	r3, [pc, #440]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d112      	bne.n	8003e52 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e2c:	4b6b      	ldr	r3, [pc, #428]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a6e      	ldr	r2, [pc, #440]	; (8003fec <HAL_RCC_OscConfig+0x340>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	0019      	movs	r1, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	4b68      	ldr	r3, [pc, #416]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003e40:	4b66      	ldr	r3, [pc, #408]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	0adb      	lsrs	r3, r3, #11
 8003e46:	2207      	movs	r2, #7
 8003e48:	4013      	ands	r3, r2
 8003e4a:	4a69      	ldr	r2, [pc, #420]	; (8003ff0 <HAL_RCC_OscConfig+0x344>)
 8003e4c:	40da      	lsrs	r2, r3
 8003e4e:	4b69      	ldr	r3, [pc, #420]	; (8003ff4 <HAL_RCC_OscConfig+0x348>)
 8003e50:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e52:	4b69      	ldr	r3, [pc, #420]	; (8003ff8 <HAL_RCC_OscConfig+0x34c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	0018      	movs	r0, r3
 8003e58:	f7ff fbd4 	bl	8003604 <HAL_InitTick>
 8003e5c:	1e03      	subs	r3, r0, #0
 8003e5e:	d051      	beq.n	8003f04 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e27d      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d030      	beq.n	8003ece <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e6c:	4b5b      	ldr	r3, [pc, #364]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a5e      	ldr	r2, [pc, #376]	; (8003fec <HAL_RCC_OscConfig+0x340>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	0019      	movs	r1, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	4b58      	ldr	r3, [pc, #352]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003e80:	4b56      	ldr	r3, [pc, #344]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4b55      	ldr	r3, [pc, #340]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e86:	2180      	movs	r1, #128	; 0x80
 8003e88:	0049      	lsls	r1, r1, #1
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7ff fc15 	bl	80036bc <HAL_GetTick>
 8003e92:	0003      	movs	r3, r0
 8003e94:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e98:	f7ff fc10 	bl	80036bc <HAL_GetTick>
 8003e9c:	0002      	movs	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e25a      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eaa:	4b4c      	ldr	r3, [pc, #304]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb6:	4b49      	ldr	r3, [pc, #292]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4a4b      	ldr	r2, [pc, #300]	; (8003fe8 <HAL_RCC_OscConfig+0x33c>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	0019      	movs	r1, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	021a      	lsls	r2, r3, #8
 8003ec6:	4b45      	ldr	r3, [pc, #276]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	e01b      	b.n	8003f06 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003ece:	4b43      	ldr	r3, [pc, #268]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4b42      	ldr	r3, [pc, #264]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003ed4:	4949      	ldr	r1, [pc, #292]	; (8003ffc <HAL_RCC_OscConfig+0x350>)
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eda:	f7ff fbef 	bl	80036bc <HAL_GetTick>
 8003ede:	0003      	movs	r3, r0
 8003ee0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee4:	f7ff fbea 	bl	80036bc <HAL_GetTick>
 8003ee8:	0002      	movs	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e234      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ef6:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4013      	ands	r3, r2
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x238>
 8003f02:	e000      	b.n	8003f06 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2208      	movs	r2, #8
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d047      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f10:	4b32      	ldr	r3, [pc, #200]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2238      	movs	r2, #56	; 0x38
 8003f16:	4013      	ands	r3, r2
 8003f18:	2b18      	cmp	r3, #24
 8003f1a:	d10a      	bne.n	8003f32 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003f1c:	4b2f      	ldr	r3, [pc, #188]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f20:	2202      	movs	r2, #2
 8003f22:	4013      	ands	r3, r2
 8003f24:	d03c      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x2f4>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d138      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e216      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d019      	beq.n	8003f6e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003f3a:	4b28      	ldr	r3, [pc, #160]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003f3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f3e:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003f40:	2101      	movs	r1, #1
 8003f42:	430a      	orrs	r2, r1
 8003f44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7ff fbb9 	bl	80036bc <HAL_GetTick>
 8003f4a:	0003      	movs	r3, r0
 8003f4c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f50:	f7ff fbb4 	bl	80036bc <HAL_GetTick>
 8003f54:	0002      	movs	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e1fe      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f62:	4b1e      	ldr	r3, [pc, #120]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f66:	2202      	movs	r2, #2
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d0f1      	beq.n	8003f50 <HAL_RCC_OscConfig+0x2a4>
 8003f6c:	e018      	b.n	8003fa0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003f6e:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003f70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f72:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003f74:	2101      	movs	r1, #1
 8003f76:	438a      	bics	r2, r1
 8003f78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7a:	f7ff fb9f 	bl	80036bc <HAL_GetTick>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f84:	f7ff fb9a 	bl	80036bc <HAL_GetTick>
 8003f88:	0002      	movs	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e1e4      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f96:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d1f1      	bne.n	8003f84 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d100      	bne.n	8003fac <HAL_RCC_OscConfig+0x300>
 8003faa:	e0c7      	b.n	800413c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fac:	231f      	movs	r3, #31
 8003fae:	18fb      	adds	r3, r7, r3
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003fb4:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2238      	movs	r2, #56	; 0x38
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	d11f      	bne.n	8004000 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003fc0:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d100      	bne.n	8003fcc <HAL_RCC_OscConfig+0x320>
 8003fca:	e0b7      	b.n	800413c <HAL_RCC_OscConfig+0x490>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d000      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x32a>
 8003fd4:	e0b2      	b.n	800413c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e1c2      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	fffeffff 	.word	0xfffeffff
 8003fe4:	fffbffff 	.word	0xfffbffff
 8003fe8:	ffff80ff 	.word	0xffff80ff
 8003fec:	ffffc7ff 	.word	0xffffc7ff
 8003ff0:	00f42400 	.word	0x00f42400
 8003ff4:	20000004 	.word	0x20000004
 8003ff8:	20000008 	.word	0x20000008
 8003ffc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004000:	4bb5      	ldr	r3, [pc, #724]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004004:	2380      	movs	r3, #128	; 0x80
 8004006:	055b      	lsls	r3, r3, #21
 8004008:	4013      	ands	r3, r2
 800400a:	d101      	bne.n	8004010 <HAL_RCC_OscConfig+0x364>
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x366>
 8004010:	2300      	movs	r3, #0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d011      	beq.n	800403a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004016:	4bb0      	ldr	r3, [pc, #704]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800401a:	4baf      	ldr	r3, [pc, #700]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800401c:	2180      	movs	r1, #128	; 0x80
 800401e:	0549      	lsls	r1, r1, #21
 8004020:	430a      	orrs	r2, r1
 8004022:	63da      	str	r2, [r3, #60]	; 0x3c
 8004024:	4bac      	ldr	r3, [pc, #688]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004028:	2380      	movs	r3, #128	; 0x80
 800402a:	055b      	lsls	r3, r3, #21
 800402c:	4013      	ands	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004032:	231f      	movs	r3, #31
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	2201      	movs	r2, #1
 8004038:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800403a:	4ba8      	ldr	r3, [pc, #672]	; (80042dc <HAL_RCC_OscConfig+0x630>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	4013      	ands	r3, r2
 8004044:	d11a      	bne.n	800407c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004046:	4ba5      	ldr	r3, [pc, #660]	; (80042dc <HAL_RCC_OscConfig+0x630>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4ba4      	ldr	r3, [pc, #656]	; (80042dc <HAL_RCC_OscConfig+0x630>)
 800404c:	2180      	movs	r1, #128	; 0x80
 800404e:	0049      	lsls	r1, r1, #1
 8004050:	430a      	orrs	r2, r1
 8004052:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004054:	f7ff fb32 	bl	80036bc <HAL_GetTick>
 8004058:	0003      	movs	r3, r0
 800405a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405e:	f7ff fb2d 	bl	80036bc <HAL_GetTick>
 8004062:	0002      	movs	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e177      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004070:	4b9a      	ldr	r3, [pc, #616]	; (80042dc <HAL_RCC_OscConfig+0x630>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	2380      	movs	r3, #128	; 0x80
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4013      	ands	r3, r2
 800407a:	d0f0      	beq.n	800405e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d106      	bne.n	8004092 <HAL_RCC_OscConfig+0x3e6>
 8004084:	4b94      	ldr	r3, [pc, #592]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004086:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004088:	4b93      	ldr	r3, [pc, #588]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800408a:	2101      	movs	r1, #1
 800408c:	430a      	orrs	r2, r1
 800408e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004090:	e01c      	b.n	80040cc <HAL_RCC_OscConfig+0x420>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2b05      	cmp	r3, #5
 8004098:	d10c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x408>
 800409a:	4b8f      	ldr	r3, [pc, #572]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800409c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800409e:	4b8e      	ldr	r3, [pc, #568]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80040a0:	2104      	movs	r1, #4
 80040a2:	430a      	orrs	r2, r1
 80040a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80040a6:	4b8c      	ldr	r3, [pc, #560]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80040a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040aa:	4b8b      	ldr	r3, [pc, #556]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80040ac:	2101      	movs	r1, #1
 80040ae:	430a      	orrs	r2, r1
 80040b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80040b2:	e00b      	b.n	80040cc <HAL_RCC_OscConfig+0x420>
 80040b4:	4b88      	ldr	r3, [pc, #544]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80040b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040b8:	4b87      	ldr	r3, [pc, #540]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80040ba:	2101      	movs	r1, #1
 80040bc:	438a      	bics	r2, r1
 80040be:	65da      	str	r2, [r3, #92]	; 0x5c
 80040c0:	4b85      	ldr	r3, [pc, #532]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80040c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040c4:	4b84      	ldr	r3, [pc, #528]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80040c6:	2104      	movs	r1, #4
 80040c8:	438a      	bics	r2, r1
 80040ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d014      	beq.n	80040fe <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7ff faf2 	bl	80036bc <HAL_GetTick>
 80040d8:	0003      	movs	r3, r0
 80040da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040dc:	e009      	b.n	80040f2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7ff faed 	bl	80036bc <HAL_GetTick>
 80040e2:	0002      	movs	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	4a7d      	ldr	r2, [pc, #500]	; (80042e0 <HAL_RCC_OscConfig+0x634>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e136      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f2:	4b79      	ldr	r3, [pc, #484]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80040f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f6:	2202      	movs	r2, #2
 80040f8:	4013      	ands	r3, r2
 80040fa:	d0f0      	beq.n	80040de <HAL_RCC_OscConfig+0x432>
 80040fc:	e013      	b.n	8004126 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fe:	f7ff fadd 	bl	80036bc <HAL_GetTick>
 8004102:	0003      	movs	r3, r0
 8004104:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004106:	e009      	b.n	800411c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004108:	f7ff fad8 	bl	80036bc <HAL_GetTick>
 800410c:	0002      	movs	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	4a73      	ldr	r2, [pc, #460]	; (80042e0 <HAL_RCC_OscConfig+0x634>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e121      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800411c:	4b6e      	ldr	r3, [pc, #440]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800411e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004120:	2202      	movs	r2, #2
 8004122:	4013      	ands	r3, r2
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004126:	231f      	movs	r3, #31
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d105      	bne.n	800413c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004130:	4b69      	ldr	r3, [pc, #420]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004134:	4b68      	ldr	r3, [pc, #416]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004136:	496b      	ldr	r1, [pc, #428]	; (80042e4 <HAL_RCC_OscConfig+0x638>)
 8004138:	400a      	ands	r2, r1
 800413a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2220      	movs	r2, #32
 8004142:	4013      	ands	r3, r2
 8004144:	d039      	beq.n	80041ba <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d01b      	beq.n	8004186 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800414e:	4b62      	ldr	r3, [pc, #392]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	4b61      	ldr	r3, [pc, #388]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004154:	2180      	movs	r1, #128	; 0x80
 8004156:	03c9      	lsls	r1, r1, #15
 8004158:	430a      	orrs	r2, r1
 800415a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7ff faae 	bl	80036bc <HAL_GetTick>
 8004160:	0003      	movs	r3, r0
 8004162:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004166:	f7ff faa9 	bl	80036bc <HAL_GetTick>
 800416a:	0002      	movs	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e0f3      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004178:	4b57      	ldr	r3, [pc, #348]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	2380      	movs	r3, #128	; 0x80
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	4013      	ands	r3, r2
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0x4ba>
 8004184:	e019      	b.n	80041ba <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004186:	4b54      	ldr	r3, [pc, #336]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	4b53      	ldr	r3, [pc, #332]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800418c:	4956      	ldr	r1, [pc, #344]	; (80042e8 <HAL_RCC_OscConfig+0x63c>)
 800418e:	400a      	ands	r2, r1
 8004190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004192:	f7ff fa93 	bl	80036bc <HAL_GetTick>
 8004196:	0003      	movs	r3, r0
 8004198:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800419c:	f7ff fa8e 	bl	80036bc <HAL_GetTick>
 80041a0:	0002      	movs	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e0d8      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80041ae:	4b4a      	ldr	r3, [pc, #296]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	041b      	lsls	r3, r3, #16
 80041b6:	4013      	ands	r3, r2
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d100      	bne.n	80041c4 <HAL_RCC_OscConfig+0x518>
 80041c2:	e0cc      	b.n	800435e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041c4:	4b44      	ldr	r3, [pc, #272]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2238      	movs	r2, #56	; 0x38
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d100      	bne.n	80041d2 <HAL_RCC_OscConfig+0x526>
 80041d0:	e07b      	b.n	80042ca <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d156      	bne.n	8004288 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041da:	4b3f      	ldr	r3, [pc, #252]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b3e      	ldr	r3, [pc, #248]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80041e0:	4942      	ldr	r1, [pc, #264]	; (80042ec <HAL_RCC_OscConfig+0x640>)
 80041e2:	400a      	ands	r2, r1
 80041e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7ff fa69 	bl	80036bc <HAL_GetTick>
 80041ea:	0003      	movs	r3, r0
 80041ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f0:	f7ff fa64 	bl	80036bc <HAL_GetTick>
 80041f4:	0002      	movs	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e0ae      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004202:	4b35      	ldr	r3, [pc, #212]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	049b      	lsls	r3, r3, #18
 800420a:	4013      	ands	r3, r2
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800420e:	4b32      	ldr	r3, [pc, #200]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	4a37      	ldr	r2, [pc, #220]	; (80042f0 <HAL_RCC_OscConfig+0x644>)
 8004214:	4013      	ands	r3, r2
 8004216:	0019      	movs	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	431a      	orrs	r2, r3
 800423c:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800423e:	430a      	orrs	r2, r1
 8004240:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004242:	4b25      	ldr	r3, [pc, #148]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004248:	2180      	movs	r1, #128	; 0x80
 800424a:	0449      	lsls	r1, r1, #17
 800424c:	430a      	orrs	r2, r1
 800424e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004250:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	0549      	lsls	r1, r1, #21
 800425a:	430a      	orrs	r2, r1
 800425c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425e:	f7ff fa2d 	bl	80036bc <HAL_GetTick>
 8004262:	0003      	movs	r3, r0
 8004264:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004268:	f7ff fa28 	bl	80036bc <HAL_GetTick>
 800426c:	0002      	movs	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e072      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800427a:	4b17      	ldr	r3, [pc, #92]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	2380      	movs	r3, #128	; 0x80
 8004280:	049b      	lsls	r3, r3, #18
 8004282:	4013      	ands	r3, r2
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x5bc>
 8004286:	e06a      	b.n	800435e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004288:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800428e:	4917      	ldr	r1, [pc, #92]	; (80042ec <HAL_RCC_OscConfig+0x640>)
 8004290:	400a      	ands	r2, r1
 8004292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7ff fa12 	bl	80036bc <HAL_GetTick>
 8004298:	0003      	movs	r3, r0
 800429a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800429e:	f7ff fa0d 	bl	80036bc <HAL_GetTick>
 80042a2:	0002      	movs	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e057      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b0:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	049b      	lsls	r3, r3, #18
 80042b8:	4013      	ands	r3, r2
 80042ba:	d1f0      	bne.n	800429e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80042bc:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80042c2:	490c      	ldr	r1, [pc, #48]	; (80042f4 <HAL_RCC_OscConfig+0x648>)
 80042c4:	400a      	ands	r2, r1
 80042c6:	60da      	str	r2, [r3, #12]
 80042c8:	e049      	b.n	800435e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d112      	bne.n	80042f8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e044      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40007000 	.word	0x40007000
 80042e0:	00001388 	.word	0x00001388
 80042e4:	efffffff 	.word	0xefffffff
 80042e8:	ffbfffff 	.word	0xffbfffff
 80042ec:	feffffff 	.word	0xfeffffff
 80042f0:	11c1808c 	.word	0x11c1808c
 80042f4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80042f8:	4b1b      	ldr	r3, [pc, #108]	; (8004368 <HAL_RCC_OscConfig+0x6bc>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2203      	movs	r2, #3
 8004302:	401a      	ands	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	429a      	cmp	r2, r3
 800430a:	d126      	bne.n	800435a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2270      	movs	r2, #112	; 0x70
 8004310:	401a      	ands	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d11f      	bne.n	800435a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	23fe      	movs	r3, #254	; 0xfe
 800431e:	01db      	lsls	r3, r3, #7
 8004320:	401a      	ands	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d116      	bne.n	800435a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	23f8      	movs	r3, #248	; 0xf8
 8004330:	039b      	lsls	r3, r3, #14
 8004332:	401a      	ands	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004338:	429a      	cmp	r2, r3
 800433a:	d10e      	bne.n	800435a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	23e0      	movs	r3, #224	; 0xe0
 8004340:	051b      	lsls	r3, r3, #20
 8004342:	401a      	ands	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004348:	429a      	cmp	r2, r3
 800434a:	d106      	bne.n	800435a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	0f5b      	lsrs	r3, r3, #29
 8004350:	075a      	lsls	r2, r3, #29
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004356:	429a      	cmp	r2, r3
 8004358:	d001      	beq.n	800435e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	0018      	movs	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	b008      	add	sp, #32
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40021000 	.word	0x40021000

0800436c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0e9      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004380:	4b76      	ldr	r3, [pc, #472]	; (800455c <HAL_RCC_ClockConfig+0x1f0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2207      	movs	r2, #7
 8004386:	4013      	ands	r3, r2
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d91e      	bls.n	80043cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438e:	4b73      	ldr	r3, [pc, #460]	; (800455c <HAL_RCC_ClockConfig+0x1f0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2207      	movs	r2, #7
 8004394:	4393      	bics	r3, r2
 8004396:	0019      	movs	r1, r3
 8004398:	4b70      	ldr	r3, [pc, #448]	; (800455c <HAL_RCC_ClockConfig+0x1f0>)
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043a0:	f7ff f98c 	bl	80036bc <HAL_GetTick>
 80043a4:	0003      	movs	r3, r0
 80043a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043a8:	e009      	b.n	80043be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043aa:	f7ff f987 	bl	80036bc <HAL_GetTick>
 80043ae:	0002      	movs	r2, r0
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	4a6a      	ldr	r2, [pc, #424]	; (8004560 <HAL_RCC_ClockConfig+0x1f4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e0ca      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043be:	4b67      	ldr	r3, [pc, #412]	; (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2207      	movs	r2, #7
 80043c4:	4013      	ands	r3, r2
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d1ee      	bne.n	80043aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2202      	movs	r2, #2
 80043d2:	4013      	ands	r3, r2
 80043d4:	d015      	beq.n	8004402 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2204      	movs	r2, #4
 80043dc:	4013      	ands	r3, r2
 80043de:	d006      	beq.n	80043ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80043e0:	4b60      	ldr	r3, [pc, #384]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	4b5f      	ldr	r3, [pc, #380]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 80043e6:	21e0      	movs	r1, #224	; 0xe0
 80043e8:	01c9      	lsls	r1, r1, #7
 80043ea:	430a      	orrs	r2, r1
 80043ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ee:	4b5d      	ldr	r3, [pc, #372]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	4a5d      	ldr	r2, [pc, #372]	; (8004568 <HAL_RCC_ClockConfig+0x1fc>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	0019      	movs	r1, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	4b59      	ldr	r3, [pc, #356]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 80043fe:	430a      	orrs	r2, r1
 8004400:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2201      	movs	r2, #1
 8004408:	4013      	ands	r3, r2
 800440a:	d057      	beq.n	80044bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d107      	bne.n	8004424 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004414:	4b53      	ldr	r3, [pc, #332]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	029b      	lsls	r3, r3, #10
 800441c:	4013      	ands	r3, r2
 800441e:	d12b      	bne.n	8004478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e097      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b02      	cmp	r3, #2
 800442a:	d107      	bne.n	800443c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800442c:	4b4d      	ldr	r3, [pc, #308]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	049b      	lsls	r3, r3, #18
 8004434:	4013      	ands	r3, r2
 8004436:	d11f      	bne.n	8004478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e08b      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d107      	bne.n	8004454 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004444:	4b47      	ldr	r3, [pc, #284]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	2380      	movs	r3, #128	; 0x80
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4013      	ands	r3, r2
 800444e:	d113      	bne.n	8004478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e07f      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b03      	cmp	r3, #3
 800445a:	d106      	bne.n	800446a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800445c:	4b41      	ldr	r3, [pc, #260]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 800445e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004460:	2202      	movs	r2, #2
 8004462:	4013      	ands	r3, r2
 8004464:	d108      	bne.n	8004478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e074      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800446a:	4b3e      	ldr	r3, [pc, #248]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 800446c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446e:	2202      	movs	r2, #2
 8004470:	4013      	ands	r3, r2
 8004472:	d101      	bne.n	8004478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e06d      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004478:	4b3a      	ldr	r3, [pc, #232]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2207      	movs	r2, #7
 800447e:	4393      	bics	r3, r2
 8004480:	0019      	movs	r1, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	4b37      	ldr	r3, [pc, #220]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 8004488:	430a      	orrs	r2, r1
 800448a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448c:	f7ff f916 	bl	80036bc <HAL_GetTick>
 8004490:	0003      	movs	r3, r0
 8004492:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004494:	e009      	b.n	80044aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004496:	f7ff f911 	bl	80036bc <HAL_GetTick>
 800449a:	0002      	movs	r2, r0
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	4a2f      	ldr	r2, [pc, #188]	; (8004560 <HAL_RCC_ClockConfig+0x1f4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e054      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044aa:	4b2e      	ldr	r3, [pc, #184]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2238      	movs	r2, #56	; 0x38
 80044b0:	401a      	ands	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d1ec      	bne.n	8004496 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044bc:	4b27      	ldr	r3, [pc, #156]	; (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2207      	movs	r2, #7
 80044c2:	4013      	ands	r3, r2
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d21e      	bcs.n	8004508 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ca:	4b24      	ldr	r3, [pc, #144]	; (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2207      	movs	r2, #7
 80044d0:	4393      	bics	r3, r2
 80044d2:	0019      	movs	r1, r3
 80044d4:	4b21      	ldr	r3, [pc, #132]	; (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044dc:	f7ff f8ee 	bl	80036bc <HAL_GetTick>
 80044e0:	0003      	movs	r3, r0
 80044e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044e4:	e009      	b.n	80044fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e6:	f7ff f8e9 	bl	80036bc <HAL_GetTick>
 80044ea:	0002      	movs	r2, r0
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	4a1b      	ldr	r2, [pc, #108]	; (8004560 <HAL_RCC_ClockConfig+0x1f4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e02c      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044fa:	4b18      	ldr	r3, [pc, #96]	; (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2207      	movs	r2, #7
 8004500:	4013      	ands	r3, r2
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d1ee      	bne.n	80044e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2204      	movs	r2, #4
 800450e:	4013      	ands	r3, r2
 8004510:	d009      	beq.n	8004526 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004512:	4b14      	ldr	r3, [pc, #80]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	4a15      	ldr	r2, [pc, #84]	; (800456c <HAL_RCC_ClockConfig+0x200>)
 8004518:	4013      	ands	r3, r2
 800451a:	0019      	movs	r1, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	4b10      	ldr	r3, [pc, #64]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 8004522:	430a      	orrs	r2, r1
 8004524:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004526:	f000 f829 	bl	800457c <HAL_RCC_GetSysClockFreq>
 800452a:	0001      	movs	r1, r0
 800452c:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	0a1b      	lsrs	r3, r3, #8
 8004532:	220f      	movs	r2, #15
 8004534:	401a      	ands	r2, r3
 8004536:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <HAL_RCC_ClockConfig+0x204>)
 8004538:	0092      	lsls	r2, r2, #2
 800453a:	58d3      	ldr	r3, [r2, r3]
 800453c:	221f      	movs	r2, #31
 800453e:	4013      	ands	r3, r2
 8004540:	000a      	movs	r2, r1
 8004542:	40da      	lsrs	r2, r3
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCC_ClockConfig+0x208>)
 8004546:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <HAL_RCC_ClockConfig+0x20c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0018      	movs	r0, r3
 800454e:	f7ff f859 	bl	8003604 <HAL_InitTick>
 8004552:	0003      	movs	r3, r0
}
 8004554:	0018      	movs	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	b004      	add	sp, #16
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40022000 	.word	0x40022000
 8004560:	00001388 	.word	0x00001388
 8004564:	40021000 	.word	0x40021000
 8004568:	fffff0ff 	.word	0xfffff0ff
 800456c:	ffff8fff 	.word	0xffff8fff
 8004570:	0800f5f8 	.word	0x0800f5f8
 8004574:	20000004 	.word	0x20000004
 8004578:	20000008 	.word	0x20000008

0800457c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004582:	4b3c      	ldr	r3, [pc, #240]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2238      	movs	r2, #56	; 0x38
 8004588:	4013      	ands	r3, r2
 800458a:	d10f      	bne.n	80045ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800458c:	4b39      	ldr	r3, [pc, #228]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	0adb      	lsrs	r3, r3, #11
 8004592:	2207      	movs	r2, #7
 8004594:	4013      	ands	r3, r2
 8004596:	2201      	movs	r2, #1
 8004598:	409a      	lsls	r2, r3
 800459a:	0013      	movs	r3, r2
 800459c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800459e:	6839      	ldr	r1, [r7, #0]
 80045a0:	4835      	ldr	r0, [pc, #212]	; (8004678 <HAL_RCC_GetSysClockFreq+0xfc>)
 80045a2:	f7fb fdcb 	bl	800013c <__udivsi3>
 80045a6:	0003      	movs	r3, r0
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	e05d      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045ac:	4b31      	ldr	r3, [pc, #196]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2238      	movs	r2, #56	; 0x38
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d102      	bne.n	80045be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045b8:	4b30      	ldr	r3, [pc, #192]	; (800467c <HAL_RCC_GetSysClockFreq+0x100>)
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	e054      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045be:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2238      	movs	r2, #56	; 0x38
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d138      	bne.n	800463c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80045ca:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2203      	movs	r2, #3
 80045d0:	4013      	ands	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045d4:	4b27      	ldr	r3, [pc, #156]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	091b      	lsrs	r3, r3, #4
 80045da:	2207      	movs	r2, #7
 80045dc:	4013      	ands	r3, r2
 80045de:	3301      	adds	r3, #1
 80045e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d10d      	bne.n	8004604 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	4824      	ldr	r0, [pc, #144]	; (800467c <HAL_RCC_GetSysClockFreq+0x100>)
 80045ec:	f7fb fda6 	bl	800013c <__udivsi3>
 80045f0:	0003      	movs	r3, r0
 80045f2:	0019      	movs	r1, r3
 80045f4:	4b1f      	ldr	r3, [pc, #124]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	0a1b      	lsrs	r3, r3, #8
 80045fa:	227f      	movs	r2, #127	; 0x7f
 80045fc:	4013      	ands	r3, r2
 80045fe:	434b      	muls	r3, r1
 8004600:	617b      	str	r3, [r7, #20]
        break;
 8004602:	e00d      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	481c      	ldr	r0, [pc, #112]	; (8004678 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004608:	f7fb fd98 	bl	800013c <__udivsi3>
 800460c:	0003      	movs	r3, r0
 800460e:	0019      	movs	r1, r3
 8004610:	4b18      	ldr	r3, [pc, #96]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	0a1b      	lsrs	r3, r3, #8
 8004616:	227f      	movs	r2, #127	; 0x7f
 8004618:	4013      	ands	r3, r2
 800461a:	434b      	muls	r3, r1
 800461c:	617b      	str	r3, [r7, #20]
        break;
 800461e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004620:	4b14      	ldr	r3, [pc, #80]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	0f5b      	lsrs	r3, r3, #29
 8004626:	2207      	movs	r2, #7
 8004628:	4013      	ands	r3, r2
 800462a:	3301      	adds	r3, #1
 800462c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	6978      	ldr	r0, [r7, #20]
 8004632:	f7fb fd83 	bl	800013c <__udivsi3>
 8004636:	0003      	movs	r3, r0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	e015      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800463c:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2238      	movs	r2, #56	; 0x38
 8004642:	4013      	ands	r3, r2
 8004644:	2b20      	cmp	r3, #32
 8004646:	d103      	bne.n	8004650 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004648:	2380      	movs	r3, #128	; 0x80
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e00b      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004650:	4b08      	ldr	r3, [pc, #32]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2238      	movs	r2, #56	; 0x38
 8004656:	4013      	ands	r3, r2
 8004658:	2b18      	cmp	r3, #24
 800465a:	d103      	bne.n	8004664 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800465c:	23fa      	movs	r3, #250	; 0xfa
 800465e:	01db      	lsls	r3, r3, #7
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	e001      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004668:	693b      	ldr	r3, [r7, #16]
}
 800466a:	0018      	movs	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	b006      	add	sp, #24
 8004670:	bd80      	pop	{r7, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	40021000 	.word	0x40021000
 8004678:	00f42400 	.word	0x00f42400
 800467c:	007a1200 	.word	0x007a1200

08004680 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004684:	4b02      	ldr	r3, [pc, #8]	; (8004690 <HAL_RCC_GetHCLKFreq+0x10>)
 8004686:	681b      	ldr	r3, [r3, #0]
}
 8004688:	0018      	movs	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	20000004 	.word	0x20000004

08004694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004694:	b5b0      	push	{r4, r5, r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004698:	f7ff fff2 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 800469c:	0004      	movs	r4, r0
 800469e:	f7ff faf9 	bl	8003c94 <LL_RCC_GetAPB1Prescaler>
 80046a2:	0003      	movs	r3, r0
 80046a4:	0b1a      	lsrs	r2, r3, #12
 80046a6:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80046a8:	0092      	lsls	r2, r2, #2
 80046aa:	58d3      	ldr	r3, [r2, r3]
 80046ac:	221f      	movs	r2, #31
 80046ae:	4013      	ands	r3, r2
 80046b0:	40dc      	lsrs	r4, r3
 80046b2:	0023      	movs	r3, r4
}
 80046b4:	0018      	movs	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bdb0      	pop	{r4, r5, r7, pc}
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	0800f638 	.word	0x0800f638

080046c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80046c8:	2313      	movs	r3, #19
 80046ca:	18fb      	adds	r3, r7, r3
 80046cc:	2200      	movs	r2, #0
 80046ce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046d0:	2312      	movs	r3, #18
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	2380      	movs	r3, #128	; 0x80
 80046de:	029b      	lsls	r3, r3, #10
 80046e0:	4013      	ands	r3, r2
 80046e2:	d100      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80046e4:	e0ad      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046e6:	2011      	movs	r0, #17
 80046e8:	183b      	adds	r3, r7, r0
 80046ea:	2200      	movs	r2, #0
 80046ec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ee:	4b47      	ldr	r3, [pc, #284]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80046f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046f2:	2380      	movs	r3, #128	; 0x80
 80046f4:	055b      	lsls	r3, r3, #21
 80046f6:	4013      	ands	r3, r2
 80046f8:	d110      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046fa:	4b44      	ldr	r3, [pc, #272]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80046fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046fe:	4b43      	ldr	r3, [pc, #268]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004700:	2180      	movs	r1, #128	; 0x80
 8004702:	0549      	lsls	r1, r1, #21
 8004704:	430a      	orrs	r2, r1
 8004706:	63da      	str	r2, [r3, #60]	; 0x3c
 8004708:	4b40      	ldr	r3, [pc, #256]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800470a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	055b      	lsls	r3, r3, #21
 8004710:	4013      	ands	r3, r2
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004716:	183b      	adds	r3, r7, r0
 8004718:	2201      	movs	r2, #1
 800471a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800471c:	4b3c      	ldr	r3, [pc, #240]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	4b3b      	ldr	r3, [pc, #236]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004722:	2180      	movs	r1, #128	; 0x80
 8004724:	0049      	lsls	r1, r1, #1
 8004726:	430a      	orrs	r2, r1
 8004728:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800472a:	f7fe ffc7 	bl	80036bc <HAL_GetTick>
 800472e:	0003      	movs	r3, r0
 8004730:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004732:	e00b      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004734:	f7fe ffc2 	bl	80036bc <HAL_GetTick>
 8004738:	0002      	movs	r2, r0
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d904      	bls.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004742:	2313      	movs	r3, #19
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	2203      	movs	r2, #3
 8004748:	701a      	strb	r2, [r3, #0]
        break;
 800474a:	e005      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800474c:	4b30      	ldr	r3, [pc, #192]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	2380      	movs	r3, #128	; 0x80
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	4013      	ands	r3, r2
 8004756:	d0ed      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004758:	2313      	movs	r3, #19
 800475a:	18fb      	adds	r3, r7, r3
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d15e      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004762:	4b2a      	ldr	r3, [pc, #168]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004764:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004766:	23c0      	movs	r3, #192	; 0xc0
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4013      	ands	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d019      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	429a      	cmp	r2, r3
 800477c:	d014      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800477e:	4b23      	ldr	r3, [pc, #140]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004782:	4a24      	ldr	r2, [pc, #144]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004784:	4013      	ands	r3, r2
 8004786:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004788:	4b20      	ldr	r3, [pc, #128]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800478a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800478c:	4b1f      	ldr	r3, [pc, #124]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800478e:	2180      	movs	r1, #128	; 0x80
 8004790:	0249      	lsls	r1, r1, #9
 8004792:	430a      	orrs	r2, r1
 8004794:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004796:	4b1d      	ldr	r3, [pc, #116]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004798:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800479a:	4b1c      	ldr	r3, [pc, #112]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800479c:	491e      	ldr	r1, [pc, #120]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800479e:	400a      	ands	r2, r1
 80047a0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047a2:	4b1a      	ldr	r3, [pc, #104]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2201      	movs	r2, #1
 80047ac:	4013      	ands	r3, r2
 80047ae:	d016      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fe ff84 	bl	80036bc <HAL_GetTick>
 80047b4:	0003      	movs	r3, r0
 80047b6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b8:	e00c      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ba:	f7fe ff7f 	bl	80036bc <HAL_GetTick>
 80047be:	0002      	movs	r2, r0
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	4a15      	ldr	r2, [pc, #84]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d904      	bls.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80047ca:	2313      	movs	r3, #19
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	2203      	movs	r2, #3
 80047d0:	701a      	strb	r2, [r3, #0]
            break;
 80047d2:	e004      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d4:	4b0d      	ldr	r3, [pc, #52]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d8:	2202      	movs	r2, #2
 80047da:	4013      	ands	r3, r2
 80047dc:	d0ed      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80047de:	2313      	movs	r3, #19
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047e8:	4b08      	ldr	r3, [pc, #32]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ec:	4a09      	ldr	r2, [pc, #36]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	0019      	movs	r1, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047f8:	430a      	orrs	r2, r1
 80047fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80047fc:	e016      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047fe:	2312      	movs	r3, #18
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	2213      	movs	r2, #19
 8004804:	18ba      	adds	r2, r7, r2
 8004806:	7812      	ldrb	r2, [r2, #0]
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	e00f      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800480c:	40021000 	.word	0x40021000
 8004810:	40007000 	.word	0x40007000
 8004814:	fffffcff 	.word	0xfffffcff
 8004818:	fffeffff 	.word	0xfffeffff
 800481c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004820:	2312      	movs	r3, #18
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	2213      	movs	r2, #19
 8004826:	18ba      	adds	r2, r7, r2
 8004828:	7812      	ldrb	r2, [r2, #0]
 800482a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800482c:	2311      	movs	r3, #17
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d105      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004836:	4bb6      	ldr	r3, [pc, #728]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800483a:	4bb5      	ldr	r3, [pc, #724]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800483c:	49b5      	ldr	r1, [pc, #724]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800483e:	400a      	ands	r2, r1
 8004840:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2201      	movs	r2, #1
 8004848:	4013      	ands	r3, r2
 800484a:	d009      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800484c:	4bb0      	ldr	r3, [pc, #704]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800484e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004850:	2203      	movs	r2, #3
 8004852:	4393      	bics	r3, r2
 8004854:	0019      	movs	r1, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	4bad      	ldr	r3, [pc, #692]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800485c:	430a      	orrs	r2, r1
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2202      	movs	r2, #2
 8004866:	4013      	ands	r3, r2
 8004868:	d009      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800486a:	4ba9      	ldr	r3, [pc, #676]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800486c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486e:	220c      	movs	r2, #12
 8004870:	4393      	bics	r3, r2
 8004872:	0019      	movs	r1, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	4ba5      	ldr	r3, [pc, #660]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800487a:	430a      	orrs	r2, r1
 800487c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2204      	movs	r2, #4
 8004884:	4013      	ands	r3, r2
 8004886:	d009      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004888:	4ba1      	ldr	r3, [pc, #644]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	2230      	movs	r2, #48	; 0x30
 800488e:	4393      	bics	r3, r2
 8004890:	0019      	movs	r1, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	4b9e      	ldr	r3, [pc, #632]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004898:	430a      	orrs	r2, r1
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2210      	movs	r2, #16
 80048a2:	4013      	ands	r3, r2
 80048a4:	d009      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048a6:	4b9a      	ldr	r3, [pc, #616]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	4a9b      	ldr	r2, [pc, #620]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	0019      	movs	r1, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	4b96      	ldr	r3, [pc, #600]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048b6:	430a      	orrs	r2, r1
 80048b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	015b      	lsls	r3, r3, #5
 80048c2:	4013      	ands	r3, r2
 80048c4:	d009      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80048c6:	4b92      	ldr	r3, [pc, #584]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	4a94      	ldr	r2, [pc, #592]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	0019      	movs	r1, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	4b8e      	ldr	r3, [pc, #568]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048d6:	430a      	orrs	r2, r1
 80048d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4013      	ands	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048e6:	4b8a      	ldr	r3, [pc, #552]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ea:	4a8d      	ldr	r2, [pc, #564]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	0019      	movs	r1, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048f4:	4b86      	ldr	r3, [pc, #536]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048f6:	430a      	orrs	r2, r1
 80048f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4013      	ands	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004906:	4b82      	ldr	r3, [pc, #520]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490a:	4a86      	ldr	r2, [pc, #536]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800490c:	4013      	ands	r3, r2
 800490e:	0019      	movs	r1, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004914:	4b7e      	ldr	r3, [pc, #504]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004916:	430a      	orrs	r2, r1
 8004918:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2220      	movs	r2, #32
 8004920:	4013      	ands	r3, r2
 8004922:	d009      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004924:	4b7a      	ldr	r3, [pc, #488]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004928:	4a7f      	ldr	r2, [pc, #508]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800492a:	4013      	ands	r3, r2
 800492c:	0019      	movs	r1, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	4b77      	ldr	r3, [pc, #476]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004934:	430a      	orrs	r2, r1
 8004936:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2240      	movs	r2, #64	; 0x40
 800493e:	4013      	ands	r3, r2
 8004940:	d009      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004942:	4b73      	ldr	r3, [pc, #460]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004946:	4a79      	ldr	r2, [pc, #484]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004948:	4013      	ands	r3, r2
 800494a:	0019      	movs	r1, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69da      	ldr	r2, [r3, #28]
 8004950:	4b6f      	ldr	r3, [pc, #444]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004952:	430a      	orrs	r2, r1
 8004954:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	2380      	movs	r3, #128	; 0x80
 800495c:	01db      	lsls	r3, r3, #7
 800495e:	4013      	ands	r3, r2
 8004960:	d015      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004962:	4b6b      	ldr	r3, [pc, #428]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	0899      	lsrs	r1, r3, #2
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800496e:	4b68      	ldr	r3, [pc, #416]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004970:	430a      	orrs	r2, r1
 8004972:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004978:	2380      	movs	r3, #128	; 0x80
 800497a:	05db      	lsls	r3, r3, #23
 800497c:	429a      	cmp	r2, r3
 800497e:	d106      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004980:	4b63      	ldr	r3, [pc, #396]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	4b62      	ldr	r3, [pc, #392]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004986:	2180      	movs	r1, #128	; 0x80
 8004988:	0249      	lsls	r1, r1, #9
 800498a:	430a      	orrs	r2, r1
 800498c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	2380      	movs	r3, #128	; 0x80
 8004994:	031b      	lsls	r3, r3, #12
 8004996:	4013      	ands	r3, r2
 8004998:	d009      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800499a:	4b5d      	ldr	r3, [pc, #372]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	2240      	movs	r2, #64	; 0x40
 80049a0:	4393      	bics	r3, r2
 80049a2:	0019      	movs	r1, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a8:	4b59      	ldr	r3, [pc, #356]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049aa:	430a      	orrs	r2, r1
 80049ac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	2380      	movs	r3, #128	; 0x80
 80049b4:	039b      	lsls	r3, r3, #14
 80049b6:	4013      	ands	r3, r2
 80049b8:	d016      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049ba:	4b55      	ldr	r3, [pc, #340]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049be:	4a5c      	ldr	r2, [pc, #368]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	0019      	movs	r1, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049c8:	4b51      	ldr	r3, [pc, #324]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049ca:	430a      	orrs	r2, r1
 80049cc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d2:	2380      	movs	r3, #128	; 0x80
 80049d4:	03db      	lsls	r3, r3, #15
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d106      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80049da:	4b4d      	ldr	r3, [pc, #308]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	4b4c      	ldr	r3, [pc, #304]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049e0:	2180      	movs	r1, #128	; 0x80
 80049e2:	0449      	lsls	r1, r1, #17
 80049e4:	430a      	orrs	r2, r1
 80049e6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	2380      	movs	r3, #128	; 0x80
 80049ee:	03db      	lsls	r3, r3, #15
 80049f0:	4013      	ands	r3, r2
 80049f2:	d016      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80049f4:	4b46      	ldr	r3, [pc, #280]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f8:	4a4e      	ldr	r2, [pc, #312]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	0019      	movs	r1, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a02:	4b43      	ldr	r3, [pc, #268]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a04:	430a      	orrs	r2, r1
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	045b      	lsls	r3, r3, #17
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d106      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a14:	4b3e      	ldr	r3, [pc, #248]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a1a:	2180      	movs	r1, #128	; 0x80
 8004a1c:	0449      	lsls	r1, r1, #17
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	2380      	movs	r3, #128	; 0x80
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d014      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004a2e:	4b38      	ldr	r3, [pc, #224]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a32:	2203      	movs	r2, #3
 8004a34:	4393      	bics	r3, r2
 8004a36:	0019      	movs	r1, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1a      	ldr	r2, [r3, #32]
 8004a3c:	4b34      	ldr	r3, [pc, #208]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d106      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a4a:	4b31      	ldr	r3, [pc, #196]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	4b30      	ldr	r3, [pc, #192]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a50:	2180      	movs	r1, #128	; 0x80
 8004a52:	0249      	lsls	r1, r1, #9
 8004a54:	430a      	orrs	r2, r1
 8004a56:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	019b      	lsls	r3, r3, #6
 8004a60:	4013      	ands	r3, r2
 8004a62:	d014      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004a64:	4b2a      	ldr	r3, [pc, #168]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	220c      	movs	r2, #12
 8004a6a:	4393      	bics	r3, r2
 8004a6c:	0019      	movs	r1, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a72:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a74:	430a      	orrs	r2, r1
 8004a76:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d106      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a80:	4b23      	ldr	r3, [pc, #140]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a86:	2180      	movs	r1, #128	; 0x80
 8004a88:	0249      	lsls	r1, r1, #9
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	2380      	movs	r3, #128	; 0x80
 8004a94:	045b      	lsls	r3, r3, #17
 8004a96:	4013      	ands	r3, r2
 8004a98:	d016      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a9a:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9e:	4a22      	ldr	r2, [pc, #136]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	0019      	movs	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa8:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ab2:	2380      	movs	r3, #128	; 0x80
 8004ab4:	019b      	lsls	r3, r3, #6
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d106      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004aba:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ac0:	2180      	movs	r1, #128	; 0x80
 8004ac2:	0449      	lsls	r1, r1, #17
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	2380      	movs	r3, #128	; 0x80
 8004ace:	049b      	lsls	r3, r3, #18
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d016      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad8:	4a10      	ldr	r2, [pc, #64]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	0019      	movs	r1, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ae2:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d106      	bne.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004afa:	2180      	movs	r1, #128	; 0x80
 8004afc:	0449      	lsls	r1, r1, #17
 8004afe:	430a      	orrs	r2, r1
 8004b00:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004b02:	2312      	movs	r3, #18
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	781b      	ldrb	r3, [r3, #0]
}
 8004b08:	0018      	movs	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b006      	add	sp, #24
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40021000 	.word	0x40021000
 8004b14:	efffffff 	.word	0xefffffff
 8004b18:	fffff3ff 	.word	0xfffff3ff
 8004b1c:	fffffcff 	.word	0xfffffcff
 8004b20:	fff3ffff 	.word	0xfff3ffff
 8004b24:	ffcfffff 	.word	0xffcfffff
 8004b28:	ffffcfff 	.word	0xffffcfff
 8004b2c:	ffff3fff 	.word	0xffff3fff
 8004b30:	ffbfffff 	.word	0xffbfffff
 8004b34:	feffffff 	.word	0xfeffffff

08004b38 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b38:	b5b0      	push	{r4, r5, r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004b40:	230f      	movs	r3, #15
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	2201      	movs	r2, #1
 8004b46:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d100      	bne.n	8004b50 <HAL_RTC_Init+0x18>
 8004b4e:	e08c      	b.n	8004c6a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2229      	movs	r2, #41	; 0x29
 8004b54:	5c9b      	ldrb	r3, [r3, r2]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10b      	bne.n	8004b74 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2228      	movs	r2, #40	; 0x28
 8004b60:	2100      	movs	r1, #0
 8004b62:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2288      	movs	r2, #136	; 0x88
 8004b68:	0212      	lsls	r2, r2, #8
 8004b6a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f7fe fa28 	bl	8002fc4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2229      	movs	r2, #41	; 0x29
 8004b78:	2102      	movs	r1, #2
 8004b7a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	2210      	movs	r2, #16
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b10      	cmp	r3, #16
 8004b88:	d062      	beq.n	8004c50 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	22ca      	movs	r2, #202	; 0xca
 8004b90:	625a      	str	r2, [r3, #36]	; 0x24
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2253      	movs	r2, #83	; 0x53
 8004b98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004b9a:	250f      	movs	r5, #15
 8004b9c:	197c      	adds	r4, r7, r5
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f000 fbfb 	bl	800539c <RTC_EnterInitMode>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004baa:	0028      	movs	r0, r5
 8004bac:	183b      	adds	r3, r7, r0
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d12c      	bne.n	8004c0e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	492e      	ldr	r1, [pc, #184]	; (8004c78 <HAL_RTC_Init+0x140>)
 8004bc0:	400a      	ands	r2, r1
 8004bc2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6999      	ldr	r1, [r3, #24]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6912      	ldr	r2, [r2, #16]
 8004bea:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6919      	ldr	r1, [r3, #16]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	041a      	lsls	r2, r3, #16
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004c00:	183c      	adds	r4, r7, r0
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f000 fc0b 	bl	8005420 <RTC_ExitInitMode>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004c0e:	230f      	movs	r3, #15
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d116      	bne.n	8004c46 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	00d2      	lsls	r2, r2, #3
 8004c24:	08d2      	lsrs	r2, r2, #3
 8004c26:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6999      	ldr	r1, [r3, #24]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	22ff      	movs	r2, #255	; 0xff
 8004c4c:	625a      	str	r2, [r3, #36]	; 0x24
 8004c4e:	e003      	b.n	8004c58 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004c50:	230f      	movs	r3, #15
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004c58:	230f      	movs	r3, #15
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2229      	movs	r2, #41	; 0x29
 8004c66:	2101      	movs	r1, #1
 8004c68:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004c6a:	230f      	movs	r3, #15
 8004c6c:	18fb      	adds	r3, r7, r3
 8004c6e:	781b      	ldrb	r3, [r3, #0]
}
 8004c70:	0018      	movs	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	b004      	add	sp, #16
 8004c76:	bdb0      	pop	{r4, r5, r7, pc}
 8004c78:	fb8fffbf 	.word	0xfb8fffbf

08004c7c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c7c:	b5b0      	push	{r4, r5, r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2228      	movs	r2, #40	; 0x28
 8004c8c:	5c9b      	ldrb	r3, [r3, r2]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_RTC_SetTime+0x1a>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e092      	b.n	8004dbc <HAL_RTC_SetTime+0x140>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2228      	movs	r2, #40	; 0x28
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2229      	movs	r2, #41	; 0x29
 8004ca2:	2102      	movs	r1, #2
 8004ca4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	22ca      	movs	r2, #202	; 0xca
 8004cac:	625a      	str	r2, [r3, #36]	; 0x24
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2253      	movs	r2, #83	; 0x53
 8004cb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004cb6:	2513      	movs	r5, #19
 8004cb8:	197c      	adds	r4, r7, r5
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f000 fb6d 	bl	800539c <RTC_EnterInitMode>
 8004cc2:	0003      	movs	r3, r0
 8004cc4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004cc6:	197b      	adds	r3, r7, r5
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d162      	bne.n	8004d94 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d125      	bne.n	8004d20 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2240      	movs	r2, #64	; 0x40
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d102      	bne.n	8004ce6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	0018      	movs	r0, r3
 8004cec:	f000 fbdc 	bl	80054a8 <RTC_ByteToBcd2>
 8004cf0:	0003      	movs	r3, r0
 8004cf2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f000 fbd5 	bl	80054a8 <RTC_ByteToBcd2>
 8004cfe:	0003      	movs	r3, r0
 8004d00:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d02:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	789b      	ldrb	r3, [r3, #2]
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f000 fbcd 	bl	80054a8 <RTC_ByteToBcd2>
 8004d0e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d10:	0022      	movs	r2, r4
 8004d12:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	78db      	ldrb	r3, [r3, #3]
 8004d18:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	e017      	b.n	8004d50 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2240      	movs	r2, #64	; 0x40
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d102      	bne.n	8004d32 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	785b      	ldrb	r3, [r3, #1]
 8004d3c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d3e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d44:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	78db      	ldrb	r3, [r3, #3]
 8004d4a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	491b      	ldr	r1, [pc, #108]	; (8004dc4 <HAL_RTC_SetTime+0x148>)
 8004d58:	400a      	ands	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4918      	ldr	r1, [pc, #96]	; (8004dc8 <HAL_RTC_SetTime+0x14c>)
 8004d68:	400a      	ands	r2, r1
 8004d6a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6999      	ldr	r1, [r3, #24]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d84:	2313      	movs	r3, #19
 8004d86:	18fc      	adds	r4, r7, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f000 fb48 	bl	8005420 <RTC_ExitInitMode>
 8004d90:	0003      	movs	r3, r0
 8004d92:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	22ff      	movs	r2, #255	; 0xff
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004d9c:	2313      	movs	r3, #19
 8004d9e:	18fb      	adds	r3, r7, r3
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d103      	bne.n	8004dae <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2229      	movs	r2, #41	; 0x29
 8004daa:	2101      	movs	r1, #1
 8004dac:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2228      	movs	r2, #40	; 0x28
 8004db2:	2100      	movs	r1, #0
 8004db4:	5499      	strb	r1, [r3, r2]

  return status;
 8004db6:	2313      	movs	r3, #19
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	781b      	ldrb	r3, [r3, #0]
}
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	b006      	add	sp, #24
 8004dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8004dc4:	007f7f7f 	.word	0x007f7f7f
 8004dc8:	fffbffff 	.word	0xfffbffff

08004dcc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	045b      	lsls	r3, r3, #17
 8004dea:	0c5a      	lsrs	r2, r3, #17
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a22      	ldr	r2, [pc, #136]	; (8004e80 <HAL_RTC_GetTime+0xb4>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	0c1b      	lsrs	r3, r3, #16
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	223f      	movs	r2, #63	; 0x3f
 8004e04:	4013      	ands	r3, r2
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	0a1b      	lsrs	r3, r3, #8
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	227f      	movs	r2, #127	; 0x7f
 8004e14:	4013      	ands	r3, r2
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	227f      	movs	r2, #127	; 0x7f
 8004e22:	4013      	ands	r3, r2
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	0d9b      	lsrs	r3, r3, #22
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2201      	movs	r2, #1
 8004e32:	4013      	ands	r3, r2
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d11a      	bne.n	8004e76 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	0018      	movs	r0, r3
 8004e46:	f000 fb57 	bl	80054f8 <RTC_Bcd2ToByte>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	001a      	movs	r2, r3
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	0018      	movs	r0, r3
 8004e58:	f000 fb4e 	bl	80054f8 <RTC_Bcd2ToByte>
 8004e5c:	0003      	movs	r3, r0
 8004e5e:	001a      	movs	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	789b      	ldrb	r3, [r3, #2]
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f000 fb45 	bl	80054f8 <RTC_Bcd2ToByte>
 8004e6e:	0003      	movs	r3, r0
 8004e70:	001a      	movs	r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	0018      	movs	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	b006      	add	sp, #24
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	007f7f7f 	.word	0x007f7f7f

08004e84 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e84:	b5b0      	push	{r4, r5, r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2228      	movs	r2, #40	; 0x28
 8004e94:	5c9b      	ldrb	r3, [r3, r2]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_RTC_SetDate+0x1a>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e07e      	b.n	8004f9c <HAL_RTC_SetDate+0x118>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2228      	movs	r2, #40	; 0x28
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2229      	movs	r2, #41	; 0x29
 8004eaa:	2102      	movs	r1, #2
 8004eac:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10e      	bne.n	8004ed2 <HAL_RTC_SetDate+0x4e>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	785b      	ldrb	r3, [r3, #1]
 8004eb8:	001a      	movs	r2, r3
 8004eba:	2310      	movs	r3, #16
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d008      	beq.n	8004ed2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	785b      	ldrb	r3, [r3, #1]
 8004ec4:	2210      	movs	r2, #16
 8004ec6:	4393      	bics	r3, r2
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	330a      	adds	r3, #10
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d11c      	bne.n	8004f12 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	78db      	ldrb	r3, [r3, #3]
 8004edc:	0018      	movs	r0, r3
 8004ede:	f000 fae3 	bl	80054a8 <RTC_ByteToBcd2>
 8004ee2:	0003      	movs	r3, r0
 8004ee4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	785b      	ldrb	r3, [r3, #1]
 8004eea:	0018      	movs	r0, r3
 8004eec:	f000 fadc 	bl	80054a8 <RTC_ByteToBcd2>
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ef4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	789b      	ldrb	r3, [r3, #2]
 8004efa:	0018      	movs	r0, r3
 8004efc:	f000 fad4 	bl	80054a8 <RTC_ByteToBcd2>
 8004f00:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f02:	0022      	movs	r2, r4
 8004f04:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	e00e      	b.n	8004f30 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	78db      	ldrb	r3, [r3, #3]
 8004f16:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	785b      	ldrb	r3, [r3, #1]
 8004f1c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f1e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004f24:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	22ca      	movs	r2, #202	; 0xca
 8004f36:	625a      	str	r2, [r3, #36]	; 0x24
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2253      	movs	r2, #83	; 0x53
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f40:	2513      	movs	r5, #19
 8004f42:	197c      	adds	r4, r7, r5
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	0018      	movs	r0, r3
 8004f48:	f000 fa28 	bl	800539c <RTC_EnterInitMode>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004f50:	0028      	movs	r0, r5
 8004f52:	183b      	adds	r3, r7, r0
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10c      	bne.n	8004f74 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4910      	ldr	r1, [pc, #64]	; (8004fa4 <HAL_RTC_SetDate+0x120>)
 8004f62:	400a      	ands	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f66:	183c      	adds	r4, r7, r0
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f000 fa58 	bl	8005420 <RTC_ExitInitMode>
 8004f70:	0003      	movs	r3, r0
 8004f72:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	22ff      	movs	r2, #255	; 0xff
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004f7c:	2313      	movs	r3, #19
 8004f7e:	18fb      	adds	r3, r7, r3
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d103      	bne.n	8004f8e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2229      	movs	r2, #41	; 0x29
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2228      	movs	r2, #40	; 0x28
 8004f92:	2100      	movs	r1, #0
 8004f94:	5499      	strb	r1, [r3, r2]

  return status;
 8004f96:	2313      	movs	r3, #19
 8004f98:	18fb      	adds	r3, r7, r3
 8004f9a:	781b      	ldrb	r3, [r3, #0]
}
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b006      	add	sp, #24
 8004fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8004fa4:	00ffff3f 	.word	0x00ffff3f

08004fa8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4a21      	ldr	r2, [pc, #132]	; (8005040 <HAL_RTC_GetDate+0x98>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	0c1b      	lsrs	r3, r3, #16
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	0a1b      	lsrs	r3, r3, #8
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	221f      	movs	r2, #31
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	223f      	movs	r2, #63	; 0x3f
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	0b5b      	lsrs	r3, r3, #13
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2207      	movs	r2, #7
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d11a      	bne.n	8005034 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	78db      	ldrb	r3, [r3, #3]
 8005002:	0018      	movs	r0, r3
 8005004:	f000 fa78 	bl	80054f8 <RTC_Bcd2ToByte>
 8005008:	0003      	movs	r3, r0
 800500a:	001a      	movs	r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	785b      	ldrb	r3, [r3, #1]
 8005014:	0018      	movs	r0, r3
 8005016:	f000 fa6f 	bl	80054f8 <RTC_Bcd2ToByte>
 800501a:	0003      	movs	r3, r0
 800501c:	001a      	movs	r2, r3
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	789b      	ldrb	r3, [r3, #2]
 8005026:	0018      	movs	r0, r3
 8005028:	f000 fa66 	bl	80054f8 <RTC_Bcd2ToByte>
 800502c:	0003      	movs	r3, r0
 800502e:	001a      	movs	r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	0018      	movs	r0, r3
 8005038:	46bd      	mov	sp, r7
 800503a:	b006      	add	sp, #24
 800503c:	bd80      	pop	{r7, pc}
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	00ffff3f 	.word	0x00ffff3f

08005044 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005044:	b590      	push	{r4, r7, lr}
 8005046:	b089      	sub	sp, #36	; 0x24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2228      	movs	r2, #40	; 0x28
 8005054:	5c9b      	ldrb	r3, [r3, r2]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_RTC_SetAlarm_IT+0x1a>
 800505a:	2302      	movs	r3, #2
 800505c:	e127      	b.n	80052ae <HAL_RTC_SetAlarm_IT+0x26a>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2228      	movs	r2, #40	; 0x28
 8005062:	2101      	movs	r1, #1
 8005064:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2229      	movs	r2, #41	; 0x29
 800506a:	2102      	movs	r1, #2
 800506c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d136      	bne.n	80050e2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	2240      	movs	r2, #64	; 0x40
 800507c:	4013      	ands	r3, r2
 800507e:	d102      	bne.n	8005086 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2200      	movs	r2, #0
 8005084:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	0018      	movs	r0, r3
 800508c:	f000 fa0c 	bl	80054a8 <RTC_ByteToBcd2>
 8005090:	0003      	movs	r3, r0
 8005092:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	785b      	ldrb	r3, [r3, #1]
 8005098:	0018      	movs	r0, r3
 800509a:	f000 fa05 	bl	80054a8 <RTC_ByteToBcd2>
 800509e:	0003      	movs	r3, r0
 80050a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050a2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	789b      	ldrb	r3, [r3, #2]
 80050a8:	0018      	movs	r0, r3
 80050aa:	f000 f9fd 	bl	80054a8 <RTC_ByteToBcd2>
 80050ae:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80050b0:	0022      	movs	r2, r4
 80050b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	78db      	ldrb	r3, [r3, #3]
 80050b8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80050ba:	431a      	orrs	r2, r3
 80050bc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2220      	movs	r2, #32
 80050c2:	5c9b      	ldrb	r3, [r3, r2]
 80050c4:	0018      	movs	r0, r3
 80050c6:	f000 f9ef 	bl	80054a8 <RTC_ByteToBcd2>
 80050ca:	0003      	movs	r3, r0
 80050cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80050ce:	0022      	movs	r2, r4
 80050d0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80050d6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050dc:	4313      	orrs	r3, r2
 80050de:	61fb      	str	r3, [r7, #28]
 80050e0:	e022      	b.n	8005128 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	2240      	movs	r2, #64	; 0x40
 80050ea:	4013      	ands	r3, r2
 80050ec:	d102      	bne.n	80050f4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2200      	movs	r2, #0
 80050f2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	785b      	ldrb	r3, [r3, #1]
 80050fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005100:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005106:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	78db      	ldrb	r3, [r3, #3]
 800510c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800510e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2120      	movs	r1, #32
 8005114:	5c5b      	ldrb	r3, [r3, r1]
 8005116:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005118:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800511e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005124:	4313      	orrs	r3, r2
 8005126:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	4313      	orrs	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	22ca      	movs	r2, #202	; 0xca
 800513a:	625a      	str	r2, [r3, #36]	; 0x24
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2253      	movs	r2, #83	; 0x53
 8005142:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005148:	2380      	movs	r3, #128	; 0x80
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	429a      	cmp	r2, r3
 800514e:	d14c      	bne.n	80051ea <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4957      	ldr	r1, [pc, #348]	; (80052b8 <HAL_RTC_SetAlarm_IT+0x274>)
 800515c:	400a      	ands	r2, r1
 800515e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2101      	movs	r1, #1
 800516c:	430a      	orrs	r2, r1
 800516e:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005170:	f7fe faa4 	bl	80036bc <HAL_GetTick>
 8005174:	0003      	movs	r3, r0
 8005176:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005178:	e016      	b.n	80051a8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800517a:	f7fe fa9f 	bl	80036bc <HAL_GetTick>
 800517e:	0002      	movs	r2, r0
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	1ad2      	subs	r2, r2, r3
 8005184:	23fa      	movs	r3, #250	; 0xfa
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	429a      	cmp	r2, r3
 800518a:	d90d      	bls.n	80051a8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	22ff      	movs	r2, #255	; 0xff
 8005192:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2229      	movs	r2, #41	; 0x29
 8005198:	2103      	movs	r1, #3
 800519a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2228      	movs	r2, #40	; 0x28
 80051a0:	2100      	movs	r1, #0
 80051a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e082      	b.n	80052ae <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	2201      	movs	r2, #1
 80051b0:	4013      	ands	r3, r2
 80051b2:	d0e2      	beq.n	800517a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2180      	movs	r1, #128	; 0x80
 80051d0:	0049      	lsls	r1, r1, #1
 80051d2:	430a      	orrs	r2, r1
 80051d4:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699a      	ldr	r2, [r3, #24]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2180      	movs	r1, #128	; 0x80
 80051e2:	0149      	lsls	r1, r1, #5
 80051e4:	430a      	orrs	r2, r1
 80051e6:	619a      	str	r2, [r3, #24]
 80051e8:	e04b      	b.n	8005282 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699a      	ldr	r2, [r3, #24]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4931      	ldr	r1, [pc, #196]	; (80052bc <HAL_RTC_SetAlarm_IT+0x278>)
 80051f6:	400a      	ands	r2, r1
 80051f8:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2102      	movs	r1, #2
 8005206:	430a      	orrs	r2, r1
 8005208:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800520a:	f7fe fa57 	bl	80036bc <HAL_GetTick>
 800520e:	0003      	movs	r3, r0
 8005210:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005212:	e016      	b.n	8005242 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005214:	f7fe fa52 	bl	80036bc <HAL_GetTick>
 8005218:	0002      	movs	r2, r0
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	1ad2      	subs	r2, r2, r3
 800521e:	23fa      	movs	r3, #250	; 0xfa
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	429a      	cmp	r2, r3
 8005224:	d90d      	bls.n	8005242 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	22ff      	movs	r2, #255	; 0xff
 800522c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2229      	movs	r2, #41	; 0x29
 8005232:	2103      	movs	r1, #3
 8005234:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2228      	movs	r2, #40	; 0x28
 800523a:	2100      	movs	r1, #0
 800523c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e035      	b.n	80052ae <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	2202      	movs	r2, #2
 800524a:	4013      	ands	r3, r2
 800524c:	d0e2      	beq.n	8005214 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699a      	ldr	r2, [r3, #24]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2180      	movs	r1, #128	; 0x80
 800526a:	0089      	lsls	r1, r1, #2
 800526c:	430a      	orrs	r2, r1
 800526e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2180      	movs	r1, #128	; 0x80
 800527c:	0189      	lsls	r1, r1, #6
 800527e:	430a      	orrs	r2, r1
 8005280:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005282:	4a0f      	ldr	r2, [pc, #60]	; (80052c0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005284:	2380      	movs	r3, #128	; 0x80
 8005286:	58d3      	ldr	r3, [r2, r3]
 8005288:	490d      	ldr	r1, [pc, #52]	; (80052c0 <HAL_RTC_SetAlarm_IT+0x27c>)
 800528a:	2280      	movs	r2, #128	; 0x80
 800528c:	0312      	lsls	r2, r2, #12
 800528e:	4313      	orrs	r3, r2
 8005290:	2280      	movs	r2, #128	; 0x80
 8005292:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	22ff      	movs	r2, #255	; 0xff
 800529a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2229      	movs	r2, #41	; 0x29
 80052a0:	2101      	movs	r1, #1
 80052a2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2228      	movs	r2, #40	; 0x28
 80052a8:	2100      	movs	r1, #0
 80052aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	0018      	movs	r0, r3
 80052b0:	46bd      	mov	sp, r7
 80052b2:	b009      	add	sp, #36	; 0x24
 80052b4:	bd90      	pop	{r4, r7, pc}
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	fffffeff 	.word	0xfffffeff
 80052bc:	fffffdff 	.word	0xfffffdff
 80052c0:	40021800 	.word	0x40021800

080052c4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699a      	ldr	r2, [r3, #24]
 80052d2:	2380      	movs	r3, #128	; 0x80
 80052d4:	015b      	lsls	r3, r3, #5
 80052d6:	4013      	ands	r3, r2
 80052d8:	d011      	beq.n	80052fe <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e0:	2201      	movs	r2, #1
 80052e2:	4013      	ands	r3, r2
 80052e4:	d00b      	beq.n	80052fe <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2101      	movs	r1, #1
 80052f2:	430a      	orrs	r2, r1
 80052f4:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	0018      	movs	r0, r3
 80052fa:	f000 f821 	bl	8005340 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	699a      	ldr	r2, [r3, #24]
 8005304:	2380      	movs	r3, #128	; 0x80
 8005306:	019b      	lsls	r3, r3, #6
 8005308:	4013      	ands	r3, r2
 800530a:	d011      	beq.n	8005330 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005312:	2202      	movs	r2, #2
 8005314:	4013      	ands	r3, r2
 8005316:	d00b      	beq.n	8005330 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2102      	movs	r1, #2
 8005324:	430a      	orrs	r2, r1
 8005326:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	0018      	movs	r0, r3
 800532c:	f000 f901 	bl	8005532 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2229      	movs	r2, #41	; 0x29
 8005334:	2101      	movs	r1, #1
 8005336:	5499      	strb	r1, [r3, r2]
}
 8005338:	46c0      	nop			; (mov r8, r8)
 800533a:	46bd      	mov	sp, r7
 800533c:	b002      	add	sp, #8
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005348:	46c0      	nop			; (mov r8, r8)
 800534a:	46bd      	mov	sp, r7
 800534c:	b002      	add	sp, #8
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a0e      	ldr	r2, [pc, #56]	; (8005398 <HAL_RTC_WaitForSynchro+0x48>)
 800535e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005360:	f7fe f9ac 	bl	80036bc <HAL_GetTick>
 8005364:	0003      	movs	r3, r0
 8005366:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005368:	e00a      	b.n	8005380 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800536a:	f7fe f9a7 	bl	80036bc <HAL_GetTick>
 800536e:	0002      	movs	r2, r0
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	1ad2      	subs	r2, r2, r3
 8005374:	23fa      	movs	r3, #250	; 0xfa
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	429a      	cmp	r2, r3
 800537a:	d901      	bls.n	8005380 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e006      	b.n	800538e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	4013      	ands	r3, r2
 800538a:	d0ee      	beq.n	800536a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	0018      	movs	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	b004      	add	sp, #16
 8005394:	bd80      	pop	{r7, pc}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	0001005f 	.word	0x0001005f

0800539c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80053a4:	230f      	movs	r3, #15
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	2200      	movs	r2, #0
 80053aa:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	2240      	movs	r2, #64	; 0x40
 80053b4:	4013      	ands	r3, r2
 80053b6:	d12c      	bne.n	8005412 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2180      	movs	r1, #128	; 0x80
 80053c4:	430a      	orrs	r2, r1
 80053c6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80053c8:	f7fe f978 	bl	80036bc <HAL_GetTick>
 80053cc:	0003      	movs	r3, r0
 80053ce:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80053d0:	e014      	b.n	80053fc <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80053d2:	f7fe f973 	bl	80036bc <HAL_GetTick>
 80053d6:	0002      	movs	r2, r0
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	1ad2      	subs	r2, r2, r3
 80053dc:	200f      	movs	r0, #15
 80053de:	183b      	adds	r3, r7, r0
 80053e0:	1839      	adds	r1, r7, r0
 80053e2:	7809      	ldrb	r1, [r1, #0]
 80053e4:	7019      	strb	r1, [r3, #0]
 80053e6:	23fa      	movs	r3, #250	; 0xfa
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d906      	bls.n	80053fc <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80053ee:	183b      	adds	r3, r7, r0
 80053f0:	2203      	movs	r2, #3
 80053f2:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2229      	movs	r2, #41	; 0x29
 80053f8:	2103      	movs	r1, #3
 80053fa:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	2240      	movs	r2, #64	; 0x40
 8005404:	4013      	ands	r3, r2
 8005406:	d104      	bne.n	8005412 <RTC_EnterInitMode+0x76>
 8005408:	230f      	movs	r3, #15
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	2b03      	cmp	r3, #3
 8005410:	d1df      	bne.n	80053d2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005412:	230f      	movs	r3, #15
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	781b      	ldrb	r3, [r3, #0]
}
 8005418:	0018      	movs	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	b004      	add	sp, #16
 800541e:	bd80      	pop	{r7, pc}

08005420 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005420:	b590      	push	{r4, r7, lr}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005428:	240f      	movs	r4, #15
 800542a:	193b      	adds	r3, r7, r4
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005430:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <RTC_ExitInitMode+0x84>)
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	4b1b      	ldr	r3, [pc, #108]	; (80054a4 <RTC_ExitInitMode+0x84>)
 8005436:	2180      	movs	r1, #128	; 0x80
 8005438:	438a      	bics	r2, r1
 800543a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800543c:	4b19      	ldr	r3, [pc, #100]	; (80054a4 <RTC_ExitInitMode+0x84>)
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	2220      	movs	r2, #32
 8005442:	4013      	ands	r3, r2
 8005444:	d10d      	bne.n	8005462 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	0018      	movs	r0, r3
 800544a:	f7ff ff81 	bl	8005350 <HAL_RTC_WaitForSynchro>
 800544e:	1e03      	subs	r3, r0, #0
 8005450:	d021      	beq.n	8005496 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2229      	movs	r2, #41	; 0x29
 8005456:	2103      	movs	r1, #3
 8005458:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800545a:	193b      	adds	r3, r7, r4
 800545c:	2203      	movs	r2, #3
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	e019      	b.n	8005496 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005462:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <RTC_ExitInitMode+0x84>)
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	4b0f      	ldr	r3, [pc, #60]	; (80054a4 <RTC_ExitInitMode+0x84>)
 8005468:	2120      	movs	r1, #32
 800546a:	438a      	bics	r2, r1
 800546c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	0018      	movs	r0, r3
 8005472:	f7ff ff6d 	bl	8005350 <HAL_RTC_WaitForSynchro>
 8005476:	1e03      	subs	r3, r0, #0
 8005478:	d007      	beq.n	800548a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2229      	movs	r2, #41	; 0x29
 800547e:	2103      	movs	r1, #3
 8005480:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005482:	230f      	movs	r3, #15
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	2203      	movs	r2, #3
 8005488:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800548a:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <RTC_ExitInitMode+0x84>)
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <RTC_ExitInitMode+0x84>)
 8005490:	2120      	movs	r1, #32
 8005492:	430a      	orrs	r2, r1
 8005494:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005496:	230f      	movs	r3, #15
 8005498:	18fb      	adds	r3, r7, r3
 800549a:	781b      	ldrb	r3, [r3, #0]
}
 800549c:	0018      	movs	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	b005      	add	sp, #20
 80054a2:	bd90      	pop	{r4, r7, pc}
 80054a4:	40002800 	.word	0x40002800

080054a8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	0002      	movs	r2, r0
 80054b0:	1dfb      	adds	r3, r7, #7
 80054b2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80054b8:	230b      	movs	r3, #11
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	1dfa      	adds	r2, r7, #7
 80054be:	7812      	ldrb	r2, [r2, #0]
 80054c0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80054c2:	e008      	b.n	80054d6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	3301      	adds	r3, #1
 80054c8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80054ca:	220b      	movs	r2, #11
 80054cc:	18bb      	adds	r3, r7, r2
 80054ce:	18ba      	adds	r2, r7, r2
 80054d0:	7812      	ldrb	r2, [r2, #0]
 80054d2:	3a0a      	subs	r2, #10
 80054d4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80054d6:	210b      	movs	r1, #11
 80054d8:	187b      	adds	r3, r7, r1
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b09      	cmp	r3, #9
 80054de:	d8f1      	bhi.n	80054c4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	187b      	adds	r3, r7, r1
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	b2db      	uxtb	r3, r3
}
 80054f0:	0018      	movs	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b004      	add	sp, #16
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	0002      	movs	r2, r0
 8005500:	1dfb      	adds	r3, r7, #7
 8005502:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005504:	1dfb      	adds	r3, r7, #7
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	091b      	lsrs	r3, r3, #4
 800550a:	b2db      	uxtb	r3, r3
 800550c:	001a      	movs	r2, r3
 800550e:	0013      	movs	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	189b      	adds	r3, r3, r2
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	b2da      	uxtb	r2, r3
 800551c:	1dfb      	adds	r3, r7, #7
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	210f      	movs	r1, #15
 8005522:	400b      	ands	r3, r1
 8005524:	b2db      	uxtb	r3, r3
 8005526:	18d3      	adds	r3, r2, r3
 8005528:	b2db      	uxtb	r3, r3
}
 800552a:	0018      	movs	r0, r3
 800552c:	46bd      	mov	sp, r7
 800552e:	b004      	add	sp, #16
 8005530:	bd80      	pop	{r7, pc}

08005532 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b082      	sub	sp, #8
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	46bd      	mov	sp, r7
 800553e:	b002      	add	sp, #8
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e0a8      	b.n	80056a8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	2b00      	cmp	r3, #0
 800555c:	d109      	bne.n	8005572 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	2382      	movs	r3, #130	; 0x82
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	429a      	cmp	r2, r3
 8005568:	d009      	beq.n	800557e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	61da      	str	r2, [r3, #28]
 8005570:	e005      	b.n	800557e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	225d      	movs	r2, #93	; 0x5d
 8005588:	5c9b      	ldrb	r3, [r3, r2]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d107      	bne.n	80055a0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	225c      	movs	r2, #92	; 0x5c
 8005594:	2100      	movs	r1, #0
 8005596:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	0018      	movs	r0, r3
 800559c:	f7fd fd58 	bl	8003050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	225d      	movs	r2, #93	; 0x5d
 80055a4:	2102      	movs	r1, #2
 80055a6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2140      	movs	r1, #64	; 0x40
 80055b4:	438a      	bics	r2, r1
 80055b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	23e0      	movs	r3, #224	; 0xe0
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d902      	bls.n	80055ca <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	e002      	b.n	80055d0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055ca:	2380      	movs	r3, #128	; 0x80
 80055cc:	015b      	lsls	r3, r3, #5
 80055ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	23f0      	movs	r3, #240	; 0xf0
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	429a      	cmp	r2, r3
 80055da:	d008      	beq.n	80055ee <HAL_SPI_Init+0xaa>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	23e0      	movs	r3, #224	; 0xe0
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d002      	beq.n	80055ee <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	2382      	movs	r3, #130	; 0x82
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	401a      	ands	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6899      	ldr	r1, [r3, #8]
 80055fc:	2384      	movs	r3, #132	; 0x84
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	400b      	ands	r3, r1
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	2102      	movs	r1, #2
 800560a:	400b      	ands	r3, r1
 800560c:	431a      	orrs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	2101      	movs	r1, #1
 8005614:	400b      	ands	r3, r1
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6999      	ldr	r1, [r3, #24]
 800561c:	2380      	movs	r3, #128	; 0x80
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	400b      	ands	r3, r1
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	2138      	movs	r1, #56	; 0x38
 800562a:	400b      	ands	r3, r1
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	2180      	movs	r1, #128	; 0x80
 8005634:	400b      	ands	r3, r1
 8005636:	431a      	orrs	r2, r3
 8005638:	0011      	movs	r1, r2
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800563e:	2380      	movs	r3, #128	; 0x80
 8005640:	019b      	lsls	r3, r3, #6
 8005642:	401a      	ands	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	0c1b      	lsrs	r3, r3, #16
 8005652:	2204      	movs	r2, #4
 8005654:	401a      	ands	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	2110      	movs	r1, #16
 800565c:	400b      	ands	r3, r1
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005664:	2108      	movs	r1, #8
 8005666:	400b      	ands	r3, r1
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68d9      	ldr	r1, [r3, #12]
 800566e:	23f0      	movs	r3, #240	; 0xf0
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	400b      	ands	r3, r1
 8005674:	431a      	orrs	r2, r3
 8005676:	0011      	movs	r1, r2
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	015b      	lsls	r3, r3, #5
 800567e:	401a      	ands	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69da      	ldr	r2, [r3, #28]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4907      	ldr	r1, [pc, #28]	; (80056b0 <HAL_SPI_Init+0x16c>)
 8005694:	400a      	ands	r2, r1
 8005696:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	225d      	movs	r2, #93	; 0x5d
 80056a2:	2101      	movs	r1, #1
 80056a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	0018      	movs	r0, r3
 80056aa:	46bd      	mov	sp, r7
 80056ac:	b004      	add	sp, #16
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	fffff7ff 	.word	0xfffff7ff

080056b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e04a      	b.n	800575c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	223d      	movs	r2, #61	; 0x3d
 80056ca:	5c9b      	ldrb	r3, [r3, r2]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d107      	bne.n	80056e2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	223c      	movs	r2, #60	; 0x3c
 80056d6:	2100      	movs	r1, #0
 80056d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	0018      	movs	r0, r3
 80056de:	f7fd fd01 	bl	80030e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	223d      	movs	r2, #61	; 0x3d
 80056e6:	2102      	movs	r1, #2
 80056e8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	3304      	adds	r3, #4
 80056f2:	0019      	movs	r1, r3
 80056f4:	0010      	movs	r0, r2
 80056f6:	f000 f9ed 	bl	8005ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2248      	movs	r2, #72	; 0x48
 80056fe:	2101      	movs	r1, #1
 8005700:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	223e      	movs	r2, #62	; 0x3e
 8005706:	2101      	movs	r1, #1
 8005708:	5499      	strb	r1, [r3, r2]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	223f      	movs	r2, #63	; 0x3f
 800570e:	2101      	movs	r1, #1
 8005710:	5499      	strb	r1, [r3, r2]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2240      	movs	r2, #64	; 0x40
 8005716:	2101      	movs	r1, #1
 8005718:	5499      	strb	r1, [r3, r2]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2241      	movs	r2, #65	; 0x41
 800571e:	2101      	movs	r1, #1
 8005720:	5499      	strb	r1, [r3, r2]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2242      	movs	r2, #66	; 0x42
 8005726:	2101      	movs	r1, #1
 8005728:	5499      	strb	r1, [r3, r2]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2243      	movs	r2, #67	; 0x43
 800572e:	2101      	movs	r1, #1
 8005730:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2244      	movs	r2, #68	; 0x44
 8005736:	2101      	movs	r1, #1
 8005738:	5499      	strb	r1, [r3, r2]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2245      	movs	r2, #69	; 0x45
 800573e:	2101      	movs	r1, #1
 8005740:	5499      	strb	r1, [r3, r2]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2246      	movs	r2, #70	; 0x46
 8005746:	2101      	movs	r1, #1
 8005748:	5499      	strb	r1, [r3, r2]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2247      	movs	r2, #71	; 0x47
 800574e:	2101      	movs	r1, #1
 8005750:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	223d      	movs	r2, #61	; 0x3d
 8005756:	2101      	movs	r1, #1
 8005758:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	0018      	movs	r0, r3
 800575e:	46bd      	mov	sp, r7
 8005760:	b002      	add	sp, #8
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	223d      	movs	r2, #61	; 0x3d
 8005770:	5c9b      	ldrb	r3, [r3, r2]
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	d001      	beq.n	800577c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e047      	b.n	800580c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	223d      	movs	r2, #61	; 0x3d
 8005780:	2102      	movs	r1, #2
 8005782:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2101      	movs	r1, #1
 8005790:	430a      	orrs	r2, r1
 8005792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1e      	ldr	r2, [pc, #120]	; (8005814 <HAL_TIM_Base_Start_IT+0xb0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d014      	beq.n	80057c8 <HAL_TIM_Base_Start_IT+0x64>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	2380      	movs	r3, #128	; 0x80
 80057a4:	05db      	lsls	r3, r3, #23
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d00e      	beq.n	80057c8 <HAL_TIM_Base_Start_IT+0x64>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1a      	ldr	r2, [pc, #104]	; (8005818 <HAL_TIM_Base_Start_IT+0xb4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d009      	beq.n	80057c8 <HAL_TIM_Base_Start_IT+0x64>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a18      	ldr	r2, [pc, #96]	; (800581c <HAL_TIM_Base_Start_IT+0xb8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d004      	beq.n	80057c8 <HAL_TIM_Base_Start_IT+0x64>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a17      	ldr	r2, [pc, #92]	; (8005820 <HAL_TIM_Base_Start_IT+0xbc>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d116      	bne.n	80057f6 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	4a15      	ldr	r2, [pc, #84]	; (8005824 <HAL_TIM_Base_Start_IT+0xc0>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b06      	cmp	r3, #6
 80057d8:	d016      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0xa4>
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	2380      	movs	r3, #128	; 0x80
 80057de:	025b      	lsls	r3, r3, #9
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d011      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2101      	movs	r1, #1
 80057f0:	430a      	orrs	r2, r1
 80057f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f4:	e008      	b.n	8005808 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2101      	movs	r1, #1
 8005802:	430a      	orrs	r2, r1
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	e000      	b.n	800580a <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005808:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	0018      	movs	r0, r3
 800580e:	46bd      	mov	sp, r7
 8005810:	b004      	add	sp, #16
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40000400 	.word	0x40000400
 800581c:	40000800 	.word	0x40000800
 8005820:	40014000 	.word	0x40014000
 8005824:	00010007 	.word	0x00010007

08005828 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2101      	movs	r1, #1
 800583c:	438a      	bics	r2, r1
 800583e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	4a0d      	ldr	r2, [pc, #52]	; (800587c <HAL_TIM_Base_Stop_IT+0x54>)
 8005848:	4013      	ands	r3, r2
 800584a:	d10d      	bne.n	8005868 <HAL_TIM_Base_Stop_IT+0x40>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	4a0b      	ldr	r2, [pc, #44]	; (8005880 <HAL_TIM_Base_Stop_IT+0x58>)
 8005854:	4013      	ands	r3, r2
 8005856:	d107      	bne.n	8005868 <HAL_TIM_Base_Stop_IT+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2101      	movs	r1, #1
 8005864:	438a      	bics	r2, r1
 8005866:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	223d      	movs	r2, #61	; 0x3d
 800586c:	2101      	movs	r1, #1
 800586e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	0018      	movs	r0, r3
 8005874:	46bd      	mov	sp, r7
 8005876:	b002      	add	sp, #8
 8005878:	bd80      	pop	{r7, pc}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	00001111 	.word	0x00001111
 8005880:	00000444 	.word	0x00000444

08005884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2202      	movs	r2, #2
 80058a0:	4013      	ands	r3, r2
 80058a2:	d021      	beq.n	80058e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2202      	movs	r2, #2
 80058a8:	4013      	ands	r3, r2
 80058aa:	d01d      	beq.n	80058e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2203      	movs	r2, #3
 80058b2:	4252      	negs	r2, r2
 80058b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	2203      	movs	r2, #3
 80058c4:	4013      	ands	r3, r2
 80058c6:	d004      	beq.n	80058d2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	0018      	movs	r0, r3
 80058cc:	f000 f8ea 	bl	8005aa4 <HAL_TIM_IC_CaptureCallback>
 80058d0:	e007      	b.n	80058e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	0018      	movs	r0, r3
 80058d6:	f000 f8dd 	bl	8005a94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	0018      	movs	r0, r3
 80058de:	f000 f8e9 	bl	8005ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2204      	movs	r2, #4
 80058ec:	4013      	ands	r3, r2
 80058ee:	d022      	beq.n	8005936 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2204      	movs	r2, #4
 80058f4:	4013      	ands	r3, r2
 80058f6:	d01e      	beq.n	8005936 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2205      	movs	r2, #5
 80058fe:	4252      	negs	r2, r2
 8005900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2202      	movs	r2, #2
 8005906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	23c0      	movs	r3, #192	; 0xc0
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4013      	ands	r3, r2
 8005914:	d004      	beq.n	8005920 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	0018      	movs	r0, r3
 800591a:	f000 f8c3 	bl	8005aa4 <HAL_TIM_IC_CaptureCallback>
 800591e:	e007      	b.n	8005930 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	0018      	movs	r0, r3
 8005924:	f000 f8b6 	bl	8005a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	0018      	movs	r0, r3
 800592c:	f000 f8c2 	bl	8005ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2208      	movs	r2, #8
 800593a:	4013      	ands	r3, r2
 800593c:	d021      	beq.n	8005982 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2208      	movs	r2, #8
 8005942:	4013      	ands	r3, r2
 8005944:	d01d      	beq.n	8005982 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2209      	movs	r2, #9
 800594c:	4252      	negs	r2, r2
 800594e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2204      	movs	r2, #4
 8005954:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	2203      	movs	r2, #3
 800595e:	4013      	ands	r3, r2
 8005960:	d004      	beq.n	800596c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	0018      	movs	r0, r3
 8005966:	f000 f89d 	bl	8005aa4 <HAL_TIM_IC_CaptureCallback>
 800596a:	e007      	b.n	800597c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	0018      	movs	r0, r3
 8005970:	f000 f890 	bl	8005a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	0018      	movs	r0, r3
 8005978:	f000 f89c 	bl	8005ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2210      	movs	r2, #16
 8005986:	4013      	ands	r3, r2
 8005988:	d022      	beq.n	80059d0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2210      	movs	r2, #16
 800598e:	4013      	ands	r3, r2
 8005990:	d01e      	beq.n	80059d0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2211      	movs	r2, #17
 8005998:	4252      	negs	r2, r2
 800599a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2208      	movs	r2, #8
 80059a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	23c0      	movs	r3, #192	; 0xc0
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4013      	ands	r3, r2
 80059ae:	d004      	beq.n	80059ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	0018      	movs	r0, r3
 80059b4:	f000 f876 	bl	8005aa4 <HAL_TIM_IC_CaptureCallback>
 80059b8:	e007      	b.n	80059ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	0018      	movs	r0, r3
 80059be:	f000 f869 	bl	8005a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	0018      	movs	r0, r3
 80059c6:	f000 f875 	bl	8005ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2201      	movs	r2, #1
 80059d4:	4013      	ands	r3, r2
 80059d6:	d00c      	beq.n	80059f2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2201      	movs	r2, #1
 80059dc:	4013      	ands	r3, r2
 80059de:	d008      	beq.n	80059f2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2202      	movs	r2, #2
 80059e6:	4252      	negs	r2, r2
 80059e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	0018      	movs	r0, r3
 80059ee:	f7fd fa95 	bl	8002f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2280      	movs	r2, #128	; 0x80
 80059f6:	4013      	ands	r3, r2
 80059f8:	d104      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	2380      	movs	r3, #128	; 0x80
 80059fe:	019b      	lsls	r3, r3, #6
 8005a00:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a02:	d00b      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2280      	movs	r2, #128	; 0x80
 8005a08:	4013      	ands	r3, r2
 8005a0a:	d007      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a1e      	ldr	r2, [pc, #120]	; (8005a8c <HAL_TIM_IRQHandler+0x208>)
 8005a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	0018      	movs	r0, r3
 8005a18:	f000 f972 	bl	8005d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	2380      	movs	r3, #128	; 0x80
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	4013      	ands	r3, r2
 8005a24:	d00b      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2280      	movs	r2, #128	; 0x80
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	d007      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a17      	ldr	r2, [pc, #92]	; (8005a90 <HAL_TIM_IRQHandler+0x20c>)
 8005a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f000 f969 	bl	8005d10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2240      	movs	r2, #64	; 0x40
 8005a42:	4013      	ands	r3, r2
 8005a44:	d00c      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2240      	movs	r2, #64	; 0x40
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	d008      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2241      	movs	r2, #65	; 0x41
 8005a54:	4252      	negs	r2, r2
 8005a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f000 f832 	bl	8005ac4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2220      	movs	r2, #32
 8005a64:	4013      	ands	r3, r2
 8005a66:	d00c      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	d008      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2221      	movs	r2, #33	; 0x21
 8005a76:	4252      	negs	r2, r2
 8005a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	f000 f937 	bl	8005cf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	46bd      	mov	sp, r7
 8005a86:	b004      	add	sp, #16
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	ffffdf7f 	.word	0xffffdf7f
 8005a90:	fffffeff 	.word	0xfffffeff

08005a94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a9c:	46c0      	nop			; (mov r8, r8)
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	b002      	add	sp, #8
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aac:	46c0      	nop			; (mov r8, r8)
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	b002      	add	sp, #8
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005abc:	46c0      	nop			; (mov r8, r8)
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	b002      	add	sp, #8
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005acc:	46c0      	nop			; (mov r8, r8)
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	b002      	add	sp, #8
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a3f      	ldr	r2, [pc, #252]	; (8005be4 <TIM_Base_SetConfig+0x110>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00c      	beq.n	8005b06 <TIM_Base_SetConfig+0x32>
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	2380      	movs	r3, #128	; 0x80
 8005af0:	05db      	lsls	r3, r3, #23
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d007      	beq.n	8005b06 <TIM_Base_SetConfig+0x32>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a3b      	ldr	r2, [pc, #236]	; (8005be8 <TIM_Base_SetConfig+0x114>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d003      	beq.n	8005b06 <TIM_Base_SetConfig+0x32>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a3a      	ldr	r2, [pc, #232]	; (8005bec <TIM_Base_SetConfig+0x118>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d108      	bne.n	8005b18 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2270      	movs	r2, #112	; 0x70
 8005b0a:	4393      	bics	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a32      	ldr	r2, [pc, #200]	; (8005be4 <TIM_Base_SetConfig+0x110>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d01c      	beq.n	8005b5a <TIM_Base_SetConfig+0x86>
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	2380      	movs	r3, #128	; 0x80
 8005b24:	05db      	lsls	r3, r3, #23
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d017      	beq.n	8005b5a <TIM_Base_SetConfig+0x86>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a2e      	ldr	r2, [pc, #184]	; (8005be8 <TIM_Base_SetConfig+0x114>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d013      	beq.n	8005b5a <TIM_Base_SetConfig+0x86>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a2d      	ldr	r2, [pc, #180]	; (8005bec <TIM_Base_SetConfig+0x118>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00f      	beq.n	8005b5a <TIM_Base_SetConfig+0x86>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a2c      	ldr	r2, [pc, #176]	; (8005bf0 <TIM_Base_SetConfig+0x11c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00b      	beq.n	8005b5a <TIM_Base_SetConfig+0x86>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a2b      	ldr	r2, [pc, #172]	; (8005bf4 <TIM_Base_SetConfig+0x120>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d007      	beq.n	8005b5a <TIM_Base_SetConfig+0x86>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a2a      	ldr	r2, [pc, #168]	; (8005bf8 <TIM_Base_SetConfig+0x124>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d003      	beq.n	8005b5a <TIM_Base_SetConfig+0x86>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a29      	ldr	r2, [pc, #164]	; (8005bfc <TIM_Base_SetConfig+0x128>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d108      	bne.n	8005b6c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4a28      	ldr	r2, [pc, #160]	; (8005c00 <TIM_Base_SetConfig+0x12c>)
 8005b5e:	4013      	ands	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2280      	movs	r2, #128	; 0x80
 8005b70:	4393      	bics	r3, r2
 8005b72:	001a      	movs	r2, r3
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a13      	ldr	r2, [pc, #76]	; (8005be4 <TIM_Base_SetConfig+0x110>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00b      	beq.n	8005bb2 <TIM_Base_SetConfig+0xde>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a15      	ldr	r2, [pc, #84]	; (8005bf4 <TIM_Base_SetConfig+0x120>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d007      	beq.n	8005bb2 <TIM_Base_SetConfig+0xde>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a14      	ldr	r2, [pc, #80]	; (8005bf8 <TIM_Base_SetConfig+0x124>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d003      	beq.n	8005bb2 <TIM_Base_SetConfig+0xde>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a13      	ldr	r2, [pc, #76]	; (8005bfc <TIM_Base_SetConfig+0x128>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d103      	bne.n	8005bba <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	691a      	ldr	r2, [r3, #16]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d106      	bne.n	8005bda <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	4393      	bics	r3, r2
 8005bd4:	001a      	movs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	611a      	str	r2, [r3, #16]
  }
}
 8005bda:	46c0      	nop			; (mov r8, r8)
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	b004      	add	sp, #16
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	46c0      	nop			; (mov r8, r8)
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40000400 	.word	0x40000400
 8005bec:	40000800 	.word	0x40000800
 8005bf0:	40002000 	.word	0x40002000
 8005bf4:	40014000 	.word	0x40014000
 8005bf8:	40014400 	.word	0x40014400
 8005bfc:	40014800 	.word	0x40014800
 8005c00:	fffffcff 	.word	0xfffffcff

08005c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	223c      	movs	r2, #60	; 0x3c
 8005c12:	5c9b      	ldrb	r3, [r3, r2]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e05a      	b.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	223c      	movs	r2, #60	; 0x3c
 8005c20:	2101      	movs	r1, #1
 8005c22:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	223d      	movs	r2, #61	; 0x3d
 8005c28:	2102      	movs	r1, #2
 8005c2a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a26      	ldr	r2, [pc, #152]	; (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d108      	bne.n	8005c58 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4a25      	ldr	r2, [pc, #148]	; (8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2270      	movs	r2, #112	; 0x70
 8005c5c:	4393      	bics	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a19      	ldr	r2, [pc, #100]	; (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d014      	beq.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	2380      	movs	r3, #128	; 0x80
 8005c82:	05db      	lsls	r3, r3, #23
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d00e      	beq.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a15      	ldr	r2, [pc, #84]	; (8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d009      	beq.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a14      	ldr	r2, [pc, #80]	; (8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d004      	beq.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a12      	ldr	r2, [pc, #72]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d10c      	bne.n	8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2280      	movs	r2, #128	; 0x80
 8005caa:	4393      	bics	r3, r2
 8005cac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	223d      	movs	r2, #61	; 0x3d
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	223c      	movs	r2, #60	; 0x3c
 8005ccc:	2100      	movs	r1, #0
 8005cce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	b004      	add	sp, #16
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	46c0      	nop			; (mov r8, r8)
 8005cdc:	40012c00 	.word	0x40012c00
 8005ce0:	ff0fffff 	.word	0xff0fffff
 8005ce4:	40000400 	.word	0x40000400
 8005ce8:	40000800 	.word	0x40000800
 8005cec:	40014000 	.word	0x40014000

08005cf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cf8:	46c0      	nop			; (mov r8, r8)
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	b002      	add	sp, #8
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d08:	46c0      	nop			; (mov r8, r8)
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	b002      	add	sp, #8
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d18:	46c0      	nop			; (mov r8, r8)
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	b002      	add	sp, #8
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e046      	b.n	8005dc0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2288      	movs	r2, #136	; 0x88
 8005d36:	589b      	ldr	r3, [r3, r2]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d107      	bne.n	8005d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2284      	movs	r2, #132	; 0x84
 8005d40:	2100      	movs	r1, #0
 8005d42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	0018      	movs	r0, r3
 8005d48:	f7fd f9f2 	bl	8003130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2288      	movs	r2, #136	; 0x88
 8005d50:	2124      	movs	r1, #36	; 0x24
 8005d52:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2101      	movs	r1, #1
 8005d60:	438a      	bics	r2, r1
 8005d62:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	0018      	movs	r0, r3
 8005d70:	f000 fd0c 	bl	800678c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	0018      	movs	r0, r3
 8005d78:	f000 f9b2 	bl	80060e0 <UART_SetConfig>
 8005d7c:	0003      	movs	r3, r0
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d101      	bne.n	8005d86 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e01c      	b.n	8005dc0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	490d      	ldr	r1, [pc, #52]	; (8005dc8 <HAL_UART_Init+0xa8>)
 8005d92:	400a      	ands	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	212a      	movs	r1, #42	; 0x2a
 8005da2:	438a      	bics	r2, r1
 8005da4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2101      	movs	r1, #1
 8005db2:	430a      	orrs	r2, r1
 8005db4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	0018      	movs	r0, r3
 8005dba:	f000 fd9b 	bl	80068f4 <UART_CheckIdleState>
 8005dbe:	0003      	movs	r3, r0
}
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b002      	add	sp, #8
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	ffffb7ff 	.word	0xffffb7ff

08005dcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08a      	sub	sp, #40	; 0x28
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	1dbb      	adds	r3, r7, #6
 8005dda:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2288      	movs	r2, #136	; 0x88
 8005de0:	589b      	ldr	r3, [r3, r2]
 8005de2:	2b20      	cmp	r3, #32
 8005de4:	d000      	beq.n	8005de8 <HAL_UART_Transmit+0x1c>
 8005de6:	e090      	b.n	8005f0a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_UART_Transmit+0x2a>
 8005dee:	1dbb      	adds	r3, r7, #6
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e088      	b.n	8005f0c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	2380      	movs	r3, #128	; 0x80
 8005e00:	015b      	lsls	r3, r3, #5
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d109      	bne.n	8005e1a <HAL_UART_Transmit+0x4e>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d105      	bne.n	8005e1a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2201      	movs	r2, #1
 8005e12:	4013      	ands	r3, r2
 8005e14:	d001      	beq.n	8005e1a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e078      	b.n	8005f0c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2290      	movs	r2, #144	; 0x90
 8005e1e:	2100      	movs	r1, #0
 8005e20:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2288      	movs	r2, #136	; 0x88
 8005e26:	2121      	movs	r1, #33	; 0x21
 8005e28:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e2a:	f7fd fc47 	bl	80036bc <HAL_GetTick>
 8005e2e:	0003      	movs	r3, r0
 8005e30:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	1dba      	adds	r2, r7, #6
 8005e36:	2154      	movs	r1, #84	; 0x54
 8005e38:	8812      	ldrh	r2, [r2, #0]
 8005e3a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	1dba      	adds	r2, r7, #6
 8005e40:	2156      	movs	r1, #86	; 0x56
 8005e42:	8812      	ldrh	r2, [r2, #0]
 8005e44:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	2380      	movs	r3, #128	; 0x80
 8005e4c:	015b      	lsls	r3, r3, #5
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d108      	bne.n	8005e64 <HAL_UART_Transmit+0x98>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d104      	bne.n	8005e64 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	61bb      	str	r3, [r7, #24]
 8005e62:	e003      	b.n	8005e6c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e6c:	e030      	b.n	8005ed0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	0013      	movs	r3, r2
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2180      	movs	r1, #128	; 0x80
 8005e7c:	f000 fde4 	bl	8006a48 <UART_WaitOnFlagUntilTimeout>
 8005e80:	1e03      	subs	r3, r0, #0
 8005e82:	d005      	beq.n	8005e90 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2288      	movs	r2, #136	; 0x88
 8005e88:	2120      	movs	r1, #32
 8005e8a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e03d      	b.n	8005f0c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10b      	bne.n	8005eae <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	001a      	movs	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	05d2      	lsls	r2, r2, #23
 8005ea2:	0dd2      	lsrs	r2, r2, #23
 8005ea4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	3302      	adds	r3, #2
 8005eaa:	61bb      	str	r3, [r7, #24]
 8005eac:	e007      	b.n	8005ebe <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	781a      	ldrb	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2256      	movs	r2, #86	; 0x56
 8005ec2:	5a9b      	ldrh	r3, [r3, r2]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b299      	uxth	r1, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2256      	movs	r2, #86	; 0x56
 8005ece:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2256      	movs	r2, #86	; 0x56
 8005ed4:	5a9b      	ldrh	r3, [r3, r2]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1c8      	bne.n	8005e6e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	0013      	movs	r3, r2
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2140      	movs	r1, #64	; 0x40
 8005eea:	f000 fdad 	bl	8006a48 <UART_WaitOnFlagUntilTimeout>
 8005eee:	1e03      	subs	r3, r0, #0
 8005ef0:	d005      	beq.n	8005efe <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2288      	movs	r2, #136	; 0x88
 8005ef6:	2120      	movs	r1, #32
 8005ef8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e006      	b.n	8005f0c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2288      	movs	r2, #136	; 0x88
 8005f02:	2120      	movs	r1, #32
 8005f04:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	e000      	b.n	8005f0c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005f0a:	2302      	movs	r3, #2
  }
}
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	b008      	add	sp, #32
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08a      	sub	sp, #40	; 0x28
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	1dbb      	adds	r3, r7, #6
 8005f22:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	228c      	movs	r2, #140	; 0x8c
 8005f28:	589b      	ldr	r3, [r3, r2]
 8005f2a:	2b20      	cmp	r3, #32
 8005f2c:	d000      	beq.n	8005f30 <HAL_UART_Receive+0x1c>
 8005f2e:	e0d0      	b.n	80060d2 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_UART_Receive+0x2a>
 8005f36:	1dbb      	adds	r3, r7, #6
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e0c8      	b.n	80060d4 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	2380      	movs	r3, #128	; 0x80
 8005f48:	015b      	lsls	r3, r3, #5
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d109      	bne.n	8005f62 <HAL_UART_Receive+0x4e>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d105      	bne.n	8005f62 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	d001      	beq.n	8005f62 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e0b8      	b.n	80060d4 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2290      	movs	r2, #144	; 0x90
 8005f66:	2100      	movs	r1, #0
 8005f68:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	228c      	movs	r2, #140	; 0x8c
 8005f6e:	2122      	movs	r1, #34	; 0x22
 8005f70:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f78:	f7fd fba0 	bl	80036bc <HAL_GetTick>
 8005f7c:	0003      	movs	r3, r0
 8005f7e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	1dba      	adds	r2, r7, #6
 8005f84:	215c      	movs	r1, #92	; 0x5c
 8005f86:	8812      	ldrh	r2, [r2, #0]
 8005f88:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	1dba      	adds	r2, r7, #6
 8005f8e:	215e      	movs	r1, #94	; 0x5e
 8005f90:	8812      	ldrh	r2, [r2, #0]
 8005f92:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	2380      	movs	r3, #128	; 0x80
 8005f9a:	015b      	lsls	r3, r3, #5
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d10d      	bne.n	8005fbc <HAL_UART_Receive+0xa8>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d104      	bne.n	8005fb2 <HAL_UART_Receive+0x9e>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2260      	movs	r2, #96	; 0x60
 8005fac:	494b      	ldr	r1, [pc, #300]	; (80060dc <HAL_UART_Receive+0x1c8>)
 8005fae:	5299      	strh	r1, [r3, r2]
 8005fb0:	e02e      	b.n	8006010 <HAL_UART_Receive+0xfc>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2260      	movs	r2, #96	; 0x60
 8005fb6:	21ff      	movs	r1, #255	; 0xff
 8005fb8:	5299      	strh	r1, [r3, r2]
 8005fba:	e029      	b.n	8006010 <HAL_UART_Receive+0xfc>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10d      	bne.n	8005fe0 <HAL_UART_Receive+0xcc>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d104      	bne.n	8005fd6 <HAL_UART_Receive+0xc2>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2260      	movs	r2, #96	; 0x60
 8005fd0:	21ff      	movs	r1, #255	; 0xff
 8005fd2:	5299      	strh	r1, [r3, r2]
 8005fd4:	e01c      	b.n	8006010 <HAL_UART_Receive+0xfc>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2260      	movs	r2, #96	; 0x60
 8005fda:	217f      	movs	r1, #127	; 0x7f
 8005fdc:	5299      	strh	r1, [r3, r2]
 8005fde:	e017      	b.n	8006010 <HAL_UART_Receive+0xfc>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	2380      	movs	r3, #128	; 0x80
 8005fe6:	055b      	lsls	r3, r3, #21
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d10d      	bne.n	8006008 <HAL_UART_Receive+0xf4>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d104      	bne.n	8005ffe <HAL_UART_Receive+0xea>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2260      	movs	r2, #96	; 0x60
 8005ff8:	217f      	movs	r1, #127	; 0x7f
 8005ffa:	5299      	strh	r1, [r3, r2]
 8005ffc:	e008      	b.n	8006010 <HAL_UART_Receive+0xfc>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2260      	movs	r2, #96	; 0x60
 8006002:	213f      	movs	r1, #63	; 0x3f
 8006004:	5299      	strh	r1, [r3, r2]
 8006006:	e003      	b.n	8006010 <HAL_UART_Receive+0xfc>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2260      	movs	r2, #96	; 0x60
 800600c:	2100      	movs	r1, #0
 800600e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006010:	2312      	movs	r3, #18
 8006012:	18fb      	adds	r3, r7, r3
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	2160      	movs	r1, #96	; 0x60
 8006018:	5a52      	ldrh	r2, [r2, r1]
 800601a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	2380      	movs	r3, #128	; 0x80
 8006022:	015b      	lsls	r3, r3, #5
 8006024:	429a      	cmp	r2, r3
 8006026:	d108      	bne.n	800603a <HAL_UART_Receive+0x126>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d104      	bne.n	800603a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006030:	2300      	movs	r3, #0
 8006032:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	61bb      	str	r3, [r7, #24]
 8006038:	e003      	b.n	8006042 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800603e:	2300      	movs	r3, #0
 8006040:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006042:	e03a      	b.n	80060ba <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	0013      	movs	r3, r2
 800604e:	2200      	movs	r2, #0
 8006050:	2120      	movs	r1, #32
 8006052:	f000 fcf9 	bl	8006a48 <UART_WaitOnFlagUntilTimeout>
 8006056:	1e03      	subs	r3, r0, #0
 8006058:	d005      	beq.n	8006066 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	228c      	movs	r2, #140	; 0x8c
 800605e:	2120      	movs	r1, #32
 8006060:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e036      	b.n	80060d4 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10e      	bne.n	800608a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	b29b      	uxth	r3, r3
 8006074:	2212      	movs	r2, #18
 8006076:	18ba      	adds	r2, r7, r2
 8006078:	8812      	ldrh	r2, [r2, #0]
 800607a:	4013      	ands	r3, r2
 800607c:	b29a      	uxth	r2, r3
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	3302      	adds	r3, #2
 8006086:	61bb      	str	r3, [r7, #24]
 8006088:	e00e      	b.n	80060a8 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2212      	movs	r2, #18
 8006094:	18ba      	adds	r2, r7, r2
 8006096:	8812      	ldrh	r2, [r2, #0]
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	4013      	ands	r3, r2
 800609c:	b2da      	uxtb	r2, r3
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	3301      	adds	r3, #1
 80060a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	225e      	movs	r2, #94	; 0x5e
 80060ac:	5a9b      	ldrh	r3, [r3, r2]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b299      	uxth	r1, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	225e      	movs	r2, #94	; 0x5e
 80060b8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	225e      	movs	r2, #94	; 0x5e
 80060be:	5a9b      	ldrh	r3, [r3, r2]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1be      	bne.n	8006044 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	228c      	movs	r2, #140	; 0x8c
 80060ca:	2120      	movs	r1, #32
 80060cc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	e000      	b.n	80060d4 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80060d2:	2302      	movs	r3, #2
  }
}
 80060d4:	0018      	movs	r0, r3
 80060d6:	46bd      	mov	sp, r7
 80060d8:	b008      	add	sp, #32
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	000001ff 	.word	0x000001ff

080060e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060e0:	b5b0      	push	{r4, r5, r7, lr}
 80060e2:	b090      	sub	sp, #64	; 0x40
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060e8:	231a      	movs	r3, #26
 80060ea:	2220      	movs	r2, #32
 80060ec:	189b      	adds	r3, r3, r2
 80060ee:	19db      	adds	r3, r3, r7
 80060f0:	2200      	movs	r2, #0
 80060f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	431a      	orrs	r2, r3
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	431a      	orrs	r2, r3
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	4313      	orrs	r3, r2
 800610a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4ac1      	ldr	r2, [pc, #772]	; (8006418 <UART_SetConfig+0x338>)
 8006114:	4013      	ands	r3, r2
 8006116:	0019      	movs	r1, r3
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611e:	430b      	orrs	r3, r1
 8006120:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	4abc      	ldr	r2, [pc, #752]	; (800641c <UART_SetConfig+0x33c>)
 800612a:	4013      	ands	r3, r2
 800612c:	0018      	movs	r0, r3
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	68d9      	ldr	r1, [r3, #12]
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	0003      	movs	r3, r0
 8006138:	430b      	orrs	r3, r1
 800613a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4ab6      	ldr	r2, [pc, #728]	; (8006420 <UART_SetConfig+0x340>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d009      	beq.n	8006160 <UART_SetConfig+0x80>
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4ab4      	ldr	r2, [pc, #720]	; (8006424 <UART_SetConfig+0x344>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d004      	beq.n	8006160 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800615c:	4313      	orrs	r3, r2
 800615e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	4ab0      	ldr	r2, [pc, #704]	; (8006428 <UART_SetConfig+0x348>)
 8006168:	4013      	ands	r3, r2
 800616a:	0019      	movs	r1, r3
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006172:	430b      	orrs	r3, r1
 8006174:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	220f      	movs	r2, #15
 800617e:	4393      	bics	r3, r2
 8006180:	0018      	movs	r0, r3
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	0003      	movs	r3, r0
 800618c:	430b      	orrs	r3, r1
 800618e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4aa5      	ldr	r2, [pc, #660]	; (800642c <UART_SetConfig+0x34c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d131      	bne.n	80061fe <UART_SetConfig+0x11e>
 800619a:	4ba5      	ldr	r3, [pc, #660]	; (8006430 <UART_SetConfig+0x350>)
 800619c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619e:	2203      	movs	r2, #3
 80061a0:	4013      	ands	r3, r2
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	d01d      	beq.n	80061e2 <UART_SetConfig+0x102>
 80061a6:	d823      	bhi.n	80061f0 <UART_SetConfig+0x110>
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d00c      	beq.n	80061c6 <UART_SetConfig+0xe6>
 80061ac:	d820      	bhi.n	80061f0 <UART_SetConfig+0x110>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <UART_SetConfig+0xd8>
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d00e      	beq.n	80061d4 <UART_SetConfig+0xf4>
 80061b6:	e01b      	b.n	80061f0 <UART_SetConfig+0x110>
 80061b8:	231b      	movs	r3, #27
 80061ba:	2220      	movs	r2, #32
 80061bc:	189b      	adds	r3, r3, r2
 80061be:	19db      	adds	r3, r3, r7
 80061c0:	2200      	movs	r2, #0
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	e154      	b.n	8006470 <UART_SetConfig+0x390>
 80061c6:	231b      	movs	r3, #27
 80061c8:	2220      	movs	r2, #32
 80061ca:	189b      	adds	r3, r3, r2
 80061cc:	19db      	adds	r3, r3, r7
 80061ce:	2202      	movs	r2, #2
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	e14d      	b.n	8006470 <UART_SetConfig+0x390>
 80061d4:	231b      	movs	r3, #27
 80061d6:	2220      	movs	r2, #32
 80061d8:	189b      	adds	r3, r3, r2
 80061da:	19db      	adds	r3, r3, r7
 80061dc:	2204      	movs	r2, #4
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	e146      	b.n	8006470 <UART_SetConfig+0x390>
 80061e2:	231b      	movs	r3, #27
 80061e4:	2220      	movs	r2, #32
 80061e6:	189b      	adds	r3, r3, r2
 80061e8:	19db      	adds	r3, r3, r7
 80061ea:	2208      	movs	r2, #8
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	e13f      	b.n	8006470 <UART_SetConfig+0x390>
 80061f0:	231b      	movs	r3, #27
 80061f2:	2220      	movs	r2, #32
 80061f4:	189b      	adds	r3, r3, r2
 80061f6:	19db      	adds	r3, r3, r7
 80061f8:	2210      	movs	r2, #16
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	e138      	b.n	8006470 <UART_SetConfig+0x390>
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a8c      	ldr	r2, [pc, #560]	; (8006434 <UART_SetConfig+0x354>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d131      	bne.n	800626c <UART_SetConfig+0x18c>
 8006208:	4b89      	ldr	r3, [pc, #548]	; (8006430 <UART_SetConfig+0x350>)
 800620a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620c:	220c      	movs	r2, #12
 800620e:	4013      	ands	r3, r2
 8006210:	2b0c      	cmp	r3, #12
 8006212:	d01d      	beq.n	8006250 <UART_SetConfig+0x170>
 8006214:	d823      	bhi.n	800625e <UART_SetConfig+0x17e>
 8006216:	2b08      	cmp	r3, #8
 8006218:	d00c      	beq.n	8006234 <UART_SetConfig+0x154>
 800621a:	d820      	bhi.n	800625e <UART_SetConfig+0x17e>
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <UART_SetConfig+0x146>
 8006220:	2b04      	cmp	r3, #4
 8006222:	d00e      	beq.n	8006242 <UART_SetConfig+0x162>
 8006224:	e01b      	b.n	800625e <UART_SetConfig+0x17e>
 8006226:	231b      	movs	r3, #27
 8006228:	2220      	movs	r2, #32
 800622a:	189b      	adds	r3, r3, r2
 800622c:	19db      	adds	r3, r3, r7
 800622e:	2200      	movs	r2, #0
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	e11d      	b.n	8006470 <UART_SetConfig+0x390>
 8006234:	231b      	movs	r3, #27
 8006236:	2220      	movs	r2, #32
 8006238:	189b      	adds	r3, r3, r2
 800623a:	19db      	adds	r3, r3, r7
 800623c:	2202      	movs	r2, #2
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	e116      	b.n	8006470 <UART_SetConfig+0x390>
 8006242:	231b      	movs	r3, #27
 8006244:	2220      	movs	r2, #32
 8006246:	189b      	adds	r3, r3, r2
 8006248:	19db      	adds	r3, r3, r7
 800624a:	2204      	movs	r2, #4
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	e10f      	b.n	8006470 <UART_SetConfig+0x390>
 8006250:	231b      	movs	r3, #27
 8006252:	2220      	movs	r2, #32
 8006254:	189b      	adds	r3, r3, r2
 8006256:	19db      	adds	r3, r3, r7
 8006258:	2208      	movs	r2, #8
 800625a:	701a      	strb	r2, [r3, #0]
 800625c:	e108      	b.n	8006470 <UART_SetConfig+0x390>
 800625e:	231b      	movs	r3, #27
 8006260:	2220      	movs	r2, #32
 8006262:	189b      	adds	r3, r3, r2
 8006264:	19db      	adds	r3, r3, r7
 8006266:	2210      	movs	r2, #16
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	e101      	b.n	8006470 <UART_SetConfig+0x390>
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a71      	ldr	r2, [pc, #452]	; (8006438 <UART_SetConfig+0x358>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d131      	bne.n	80062da <UART_SetConfig+0x1fa>
 8006276:	4b6e      	ldr	r3, [pc, #440]	; (8006430 <UART_SetConfig+0x350>)
 8006278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627a:	2230      	movs	r2, #48	; 0x30
 800627c:	4013      	ands	r3, r2
 800627e:	2b30      	cmp	r3, #48	; 0x30
 8006280:	d01d      	beq.n	80062be <UART_SetConfig+0x1de>
 8006282:	d823      	bhi.n	80062cc <UART_SetConfig+0x1ec>
 8006284:	2b20      	cmp	r3, #32
 8006286:	d00c      	beq.n	80062a2 <UART_SetConfig+0x1c2>
 8006288:	d820      	bhi.n	80062cc <UART_SetConfig+0x1ec>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <UART_SetConfig+0x1b4>
 800628e:	2b10      	cmp	r3, #16
 8006290:	d00e      	beq.n	80062b0 <UART_SetConfig+0x1d0>
 8006292:	e01b      	b.n	80062cc <UART_SetConfig+0x1ec>
 8006294:	231b      	movs	r3, #27
 8006296:	2220      	movs	r2, #32
 8006298:	189b      	adds	r3, r3, r2
 800629a:	19db      	adds	r3, r3, r7
 800629c:	2200      	movs	r2, #0
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	e0e6      	b.n	8006470 <UART_SetConfig+0x390>
 80062a2:	231b      	movs	r3, #27
 80062a4:	2220      	movs	r2, #32
 80062a6:	189b      	adds	r3, r3, r2
 80062a8:	19db      	adds	r3, r3, r7
 80062aa:	2202      	movs	r2, #2
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	e0df      	b.n	8006470 <UART_SetConfig+0x390>
 80062b0:	231b      	movs	r3, #27
 80062b2:	2220      	movs	r2, #32
 80062b4:	189b      	adds	r3, r3, r2
 80062b6:	19db      	adds	r3, r3, r7
 80062b8:	2204      	movs	r2, #4
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	e0d8      	b.n	8006470 <UART_SetConfig+0x390>
 80062be:	231b      	movs	r3, #27
 80062c0:	2220      	movs	r2, #32
 80062c2:	189b      	adds	r3, r3, r2
 80062c4:	19db      	adds	r3, r3, r7
 80062c6:	2208      	movs	r2, #8
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	e0d1      	b.n	8006470 <UART_SetConfig+0x390>
 80062cc:	231b      	movs	r3, #27
 80062ce:	2220      	movs	r2, #32
 80062d0:	189b      	adds	r3, r3, r2
 80062d2:	19db      	adds	r3, r3, r7
 80062d4:	2210      	movs	r2, #16
 80062d6:	701a      	strb	r2, [r3, #0]
 80062d8:	e0ca      	b.n	8006470 <UART_SetConfig+0x390>
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a57      	ldr	r2, [pc, #348]	; (800643c <UART_SetConfig+0x35c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d106      	bne.n	80062f2 <UART_SetConfig+0x212>
 80062e4:	231b      	movs	r3, #27
 80062e6:	2220      	movs	r2, #32
 80062e8:	189b      	adds	r3, r3, r2
 80062ea:	19db      	adds	r3, r3, r7
 80062ec:	2200      	movs	r2, #0
 80062ee:	701a      	strb	r2, [r3, #0]
 80062f0:	e0be      	b.n	8006470 <UART_SetConfig+0x390>
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a52      	ldr	r2, [pc, #328]	; (8006440 <UART_SetConfig+0x360>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d106      	bne.n	800630a <UART_SetConfig+0x22a>
 80062fc:	231b      	movs	r3, #27
 80062fe:	2220      	movs	r2, #32
 8006300:	189b      	adds	r3, r3, r2
 8006302:	19db      	adds	r3, r3, r7
 8006304:	2200      	movs	r2, #0
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	e0b2      	b.n	8006470 <UART_SetConfig+0x390>
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a4d      	ldr	r2, [pc, #308]	; (8006444 <UART_SetConfig+0x364>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d106      	bne.n	8006322 <UART_SetConfig+0x242>
 8006314:	231b      	movs	r3, #27
 8006316:	2220      	movs	r2, #32
 8006318:	189b      	adds	r3, r3, r2
 800631a:	19db      	adds	r3, r3, r7
 800631c:	2200      	movs	r2, #0
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	e0a6      	b.n	8006470 <UART_SetConfig+0x390>
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a3e      	ldr	r2, [pc, #248]	; (8006420 <UART_SetConfig+0x340>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d13e      	bne.n	80063aa <UART_SetConfig+0x2ca>
 800632c:	4b40      	ldr	r3, [pc, #256]	; (8006430 <UART_SetConfig+0x350>)
 800632e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006330:	23c0      	movs	r3, #192	; 0xc0
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	4013      	ands	r3, r2
 8006336:	22c0      	movs	r2, #192	; 0xc0
 8006338:	0112      	lsls	r2, r2, #4
 800633a:	4293      	cmp	r3, r2
 800633c:	d027      	beq.n	800638e <UART_SetConfig+0x2ae>
 800633e:	22c0      	movs	r2, #192	; 0xc0
 8006340:	0112      	lsls	r2, r2, #4
 8006342:	4293      	cmp	r3, r2
 8006344:	d82a      	bhi.n	800639c <UART_SetConfig+0x2bc>
 8006346:	2280      	movs	r2, #128	; 0x80
 8006348:	0112      	lsls	r2, r2, #4
 800634a:	4293      	cmp	r3, r2
 800634c:	d011      	beq.n	8006372 <UART_SetConfig+0x292>
 800634e:	2280      	movs	r2, #128	; 0x80
 8006350:	0112      	lsls	r2, r2, #4
 8006352:	4293      	cmp	r3, r2
 8006354:	d822      	bhi.n	800639c <UART_SetConfig+0x2bc>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d004      	beq.n	8006364 <UART_SetConfig+0x284>
 800635a:	2280      	movs	r2, #128	; 0x80
 800635c:	00d2      	lsls	r2, r2, #3
 800635e:	4293      	cmp	r3, r2
 8006360:	d00e      	beq.n	8006380 <UART_SetConfig+0x2a0>
 8006362:	e01b      	b.n	800639c <UART_SetConfig+0x2bc>
 8006364:	231b      	movs	r3, #27
 8006366:	2220      	movs	r2, #32
 8006368:	189b      	adds	r3, r3, r2
 800636a:	19db      	adds	r3, r3, r7
 800636c:	2200      	movs	r2, #0
 800636e:	701a      	strb	r2, [r3, #0]
 8006370:	e07e      	b.n	8006470 <UART_SetConfig+0x390>
 8006372:	231b      	movs	r3, #27
 8006374:	2220      	movs	r2, #32
 8006376:	189b      	adds	r3, r3, r2
 8006378:	19db      	adds	r3, r3, r7
 800637a:	2202      	movs	r2, #2
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	e077      	b.n	8006470 <UART_SetConfig+0x390>
 8006380:	231b      	movs	r3, #27
 8006382:	2220      	movs	r2, #32
 8006384:	189b      	adds	r3, r3, r2
 8006386:	19db      	adds	r3, r3, r7
 8006388:	2204      	movs	r2, #4
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	e070      	b.n	8006470 <UART_SetConfig+0x390>
 800638e:	231b      	movs	r3, #27
 8006390:	2220      	movs	r2, #32
 8006392:	189b      	adds	r3, r3, r2
 8006394:	19db      	adds	r3, r3, r7
 8006396:	2208      	movs	r2, #8
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	e069      	b.n	8006470 <UART_SetConfig+0x390>
 800639c:	231b      	movs	r3, #27
 800639e:	2220      	movs	r2, #32
 80063a0:	189b      	adds	r3, r3, r2
 80063a2:	19db      	adds	r3, r3, r7
 80063a4:	2210      	movs	r2, #16
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	e062      	b.n	8006470 <UART_SetConfig+0x390>
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a1d      	ldr	r2, [pc, #116]	; (8006424 <UART_SetConfig+0x344>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d157      	bne.n	8006464 <UART_SetConfig+0x384>
 80063b4:	4b1e      	ldr	r3, [pc, #120]	; (8006430 <UART_SetConfig+0x350>)
 80063b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063b8:	23c0      	movs	r3, #192	; 0xc0
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4013      	ands	r3, r2
 80063be:	22c0      	movs	r2, #192	; 0xc0
 80063c0:	0092      	lsls	r2, r2, #2
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d040      	beq.n	8006448 <UART_SetConfig+0x368>
 80063c6:	22c0      	movs	r2, #192	; 0xc0
 80063c8:	0092      	lsls	r2, r2, #2
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d843      	bhi.n	8006456 <UART_SetConfig+0x376>
 80063ce:	2280      	movs	r2, #128	; 0x80
 80063d0:	0092      	lsls	r2, r2, #2
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d011      	beq.n	80063fa <UART_SetConfig+0x31a>
 80063d6:	2280      	movs	r2, #128	; 0x80
 80063d8:	0092      	lsls	r2, r2, #2
 80063da:	4293      	cmp	r3, r2
 80063dc:	d83b      	bhi.n	8006456 <UART_SetConfig+0x376>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d004      	beq.n	80063ec <UART_SetConfig+0x30c>
 80063e2:	2280      	movs	r2, #128	; 0x80
 80063e4:	0052      	lsls	r2, r2, #1
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00e      	beq.n	8006408 <UART_SetConfig+0x328>
 80063ea:	e034      	b.n	8006456 <UART_SetConfig+0x376>
 80063ec:	231b      	movs	r3, #27
 80063ee:	2220      	movs	r2, #32
 80063f0:	189b      	adds	r3, r3, r2
 80063f2:	19db      	adds	r3, r3, r7
 80063f4:	2200      	movs	r2, #0
 80063f6:	701a      	strb	r2, [r3, #0]
 80063f8:	e03a      	b.n	8006470 <UART_SetConfig+0x390>
 80063fa:	231b      	movs	r3, #27
 80063fc:	2220      	movs	r2, #32
 80063fe:	189b      	adds	r3, r3, r2
 8006400:	19db      	adds	r3, r3, r7
 8006402:	2202      	movs	r2, #2
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	e033      	b.n	8006470 <UART_SetConfig+0x390>
 8006408:	231b      	movs	r3, #27
 800640a:	2220      	movs	r2, #32
 800640c:	189b      	adds	r3, r3, r2
 800640e:	19db      	adds	r3, r3, r7
 8006410:	2204      	movs	r2, #4
 8006412:	701a      	strb	r2, [r3, #0]
 8006414:	e02c      	b.n	8006470 <UART_SetConfig+0x390>
 8006416:	46c0      	nop			; (mov r8, r8)
 8006418:	cfff69f3 	.word	0xcfff69f3
 800641c:	ffffcfff 	.word	0xffffcfff
 8006420:	40008000 	.word	0x40008000
 8006424:	40008400 	.word	0x40008400
 8006428:	11fff4ff 	.word	0x11fff4ff
 800642c:	40013800 	.word	0x40013800
 8006430:	40021000 	.word	0x40021000
 8006434:	40004400 	.word	0x40004400
 8006438:	40004800 	.word	0x40004800
 800643c:	40004c00 	.word	0x40004c00
 8006440:	40005000 	.word	0x40005000
 8006444:	40013c00 	.word	0x40013c00
 8006448:	231b      	movs	r3, #27
 800644a:	2220      	movs	r2, #32
 800644c:	189b      	adds	r3, r3, r2
 800644e:	19db      	adds	r3, r3, r7
 8006450:	2208      	movs	r2, #8
 8006452:	701a      	strb	r2, [r3, #0]
 8006454:	e00c      	b.n	8006470 <UART_SetConfig+0x390>
 8006456:	231b      	movs	r3, #27
 8006458:	2220      	movs	r2, #32
 800645a:	189b      	adds	r3, r3, r2
 800645c:	19db      	adds	r3, r3, r7
 800645e:	2210      	movs	r2, #16
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	e005      	b.n	8006470 <UART_SetConfig+0x390>
 8006464:	231b      	movs	r3, #27
 8006466:	2220      	movs	r2, #32
 8006468:	189b      	adds	r3, r3, r2
 800646a:	19db      	adds	r3, r3, r7
 800646c:	2210      	movs	r2, #16
 800646e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4ac1      	ldr	r2, [pc, #772]	; (800677c <UART_SetConfig+0x69c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d005      	beq.n	8006486 <UART_SetConfig+0x3a6>
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4ac0      	ldr	r2, [pc, #768]	; (8006780 <UART_SetConfig+0x6a0>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d000      	beq.n	8006486 <UART_SetConfig+0x3a6>
 8006484:	e093      	b.n	80065ae <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006486:	231b      	movs	r3, #27
 8006488:	2220      	movs	r2, #32
 800648a:	189b      	adds	r3, r3, r2
 800648c:	19db      	adds	r3, r3, r7
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b08      	cmp	r3, #8
 8006492:	d015      	beq.n	80064c0 <UART_SetConfig+0x3e0>
 8006494:	dc18      	bgt.n	80064c8 <UART_SetConfig+0x3e8>
 8006496:	2b04      	cmp	r3, #4
 8006498:	d00d      	beq.n	80064b6 <UART_SetConfig+0x3d6>
 800649a:	dc15      	bgt.n	80064c8 <UART_SetConfig+0x3e8>
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <UART_SetConfig+0x3c6>
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d005      	beq.n	80064b0 <UART_SetConfig+0x3d0>
 80064a4:	e010      	b.n	80064c8 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064a6:	f7fe f8f5 	bl	8004694 <HAL_RCC_GetPCLK1Freq>
 80064aa:	0003      	movs	r3, r0
 80064ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064ae:	e014      	b.n	80064da <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064b0:	4bb4      	ldr	r3, [pc, #720]	; (8006784 <UART_SetConfig+0x6a4>)
 80064b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064b4:	e011      	b.n	80064da <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064b6:	f7fe f861 	bl	800457c <HAL_RCC_GetSysClockFreq>
 80064ba:	0003      	movs	r3, r0
 80064bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064be:	e00c      	b.n	80064da <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064c0:	2380      	movs	r3, #128	; 0x80
 80064c2:	021b      	lsls	r3, r3, #8
 80064c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064c6:	e008      	b.n	80064da <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80064cc:	231a      	movs	r3, #26
 80064ce:	2220      	movs	r2, #32
 80064d0:	189b      	adds	r3, r3, r2
 80064d2:	19db      	adds	r3, r3, r7
 80064d4:	2201      	movs	r2, #1
 80064d6:	701a      	strb	r2, [r3, #0]
        break;
 80064d8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d100      	bne.n	80064e2 <UART_SetConfig+0x402>
 80064e0:	e135      	b.n	800674e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064e6:	4ba8      	ldr	r3, [pc, #672]	; (8006788 <UART_SetConfig+0x6a8>)
 80064e8:	0052      	lsls	r2, r2, #1
 80064ea:	5ad3      	ldrh	r3, [r2, r3]
 80064ec:	0019      	movs	r1, r3
 80064ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80064f0:	f7f9 fe24 	bl	800013c <__udivsi3>
 80064f4:	0003      	movs	r3, r0
 80064f6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	0013      	movs	r3, r2
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	189b      	adds	r3, r3, r2
 8006502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006504:	429a      	cmp	r2, r3
 8006506:	d305      	bcc.n	8006514 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800650e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006510:	429a      	cmp	r2, r3
 8006512:	d906      	bls.n	8006522 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8006514:	231a      	movs	r3, #26
 8006516:	2220      	movs	r2, #32
 8006518:	189b      	adds	r3, r3, r2
 800651a:	19db      	adds	r3, r3, r7
 800651c:	2201      	movs	r2, #1
 800651e:	701a      	strb	r2, [r3, #0]
 8006520:	e044      	b.n	80065ac <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	2300      	movs	r3, #0
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800652e:	4b96      	ldr	r3, [pc, #600]	; (8006788 <UART_SetConfig+0x6a8>)
 8006530:	0052      	lsls	r2, r2, #1
 8006532:	5ad3      	ldrh	r3, [r2, r3]
 8006534:	613b      	str	r3, [r7, #16]
 8006536:	2300      	movs	r3, #0
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	69b8      	ldr	r0, [r7, #24]
 8006540:	69f9      	ldr	r1, [r7, #28]
 8006542:	f7f9 ffaf 	bl	80004a4 <__aeabi_uldivmod>
 8006546:	0002      	movs	r2, r0
 8006548:	000b      	movs	r3, r1
 800654a:	0e11      	lsrs	r1, r2, #24
 800654c:	021d      	lsls	r5, r3, #8
 800654e:	430d      	orrs	r5, r1
 8006550:	0214      	lsls	r4, r2, #8
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	085b      	lsrs	r3, r3, #1
 8006558:	60bb      	str	r3, [r7, #8]
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	68b8      	ldr	r0, [r7, #8]
 8006560:	68f9      	ldr	r1, [r7, #12]
 8006562:	1900      	adds	r0, r0, r4
 8006564:	4169      	adcs	r1, r5
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	2300      	movs	r3, #0
 800656e:	607b      	str	r3, [r7, #4]
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f7f9 ff96 	bl	80004a4 <__aeabi_uldivmod>
 8006578:	0002      	movs	r2, r0
 800657a:	000b      	movs	r3, r1
 800657c:	0013      	movs	r3, r2
 800657e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006582:	23c0      	movs	r3, #192	; 0xc0
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	429a      	cmp	r2, r3
 8006588:	d309      	bcc.n	800659e <UART_SetConfig+0x4be>
 800658a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800658c:	2380      	movs	r3, #128	; 0x80
 800658e:	035b      	lsls	r3, r3, #13
 8006590:	429a      	cmp	r2, r3
 8006592:	d204      	bcs.n	800659e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800659a:	60da      	str	r2, [r3, #12]
 800659c:	e006      	b.n	80065ac <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800659e:	231a      	movs	r3, #26
 80065a0:	2220      	movs	r2, #32
 80065a2:	189b      	adds	r3, r3, r2
 80065a4:	19db      	adds	r3, r3, r7
 80065a6:	2201      	movs	r2, #1
 80065a8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80065aa:	e0d0      	b.n	800674e <UART_SetConfig+0x66e>
 80065ac:	e0cf      	b.n	800674e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	69da      	ldr	r2, [r3, #28]
 80065b2:	2380      	movs	r3, #128	; 0x80
 80065b4:	021b      	lsls	r3, r3, #8
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d000      	beq.n	80065bc <UART_SetConfig+0x4dc>
 80065ba:	e070      	b.n	800669e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80065bc:	231b      	movs	r3, #27
 80065be:	2220      	movs	r2, #32
 80065c0:	189b      	adds	r3, r3, r2
 80065c2:	19db      	adds	r3, r3, r7
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d015      	beq.n	80065f6 <UART_SetConfig+0x516>
 80065ca:	dc18      	bgt.n	80065fe <UART_SetConfig+0x51e>
 80065cc:	2b04      	cmp	r3, #4
 80065ce:	d00d      	beq.n	80065ec <UART_SetConfig+0x50c>
 80065d0:	dc15      	bgt.n	80065fe <UART_SetConfig+0x51e>
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <UART_SetConfig+0x4fc>
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d005      	beq.n	80065e6 <UART_SetConfig+0x506>
 80065da:	e010      	b.n	80065fe <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065dc:	f7fe f85a 	bl	8004694 <HAL_RCC_GetPCLK1Freq>
 80065e0:	0003      	movs	r3, r0
 80065e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065e4:	e014      	b.n	8006610 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065e6:	4b67      	ldr	r3, [pc, #412]	; (8006784 <UART_SetConfig+0x6a4>)
 80065e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065ea:	e011      	b.n	8006610 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ec:	f7fd ffc6 	bl	800457c <HAL_RCC_GetSysClockFreq>
 80065f0:	0003      	movs	r3, r0
 80065f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065f4:	e00c      	b.n	8006610 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065f6:	2380      	movs	r3, #128	; 0x80
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065fc:	e008      	b.n	8006610 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006602:	231a      	movs	r3, #26
 8006604:	2220      	movs	r2, #32
 8006606:	189b      	adds	r3, r3, r2
 8006608:	19db      	adds	r3, r3, r7
 800660a:	2201      	movs	r2, #1
 800660c:	701a      	strb	r2, [r3, #0]
        break;
 800660e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006612:	2b00      	cmp	r3, #0
 8006614:	d100      	bne.n	8006618 <UART_SetConfig+0x538>
 8006616:	e09a      	b.n	800674e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800661c:	4b5a      	ldr	r3, [pc, #360]	; (8006788 <UART_SetConfig+0x6a8>)
 800661e:	0052      	lsls	r2, r2, #1
 8006620:	5ad3      	ldrh	r3, [r2, r3]
 8006622:	0019      	movs	r1, r3
 8006624:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006626:	f7f9 fd89 	bl	800013c <__udivsi3>
 800662a:	0003      	movs	r3, r0
 800662c:	005a      	lsls	r2, r3, #1
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	085b      	lsrs	r3, r3, #1
 8006634:	18d2      	adds	r2, r2, r3
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	0019      	movs	r1, r3
 800663c:	0010      	movs	r0, r2
 800663e:	f7f9 fd7d 	bl	800013c <__udivsi3>
 8006642:	0003      	movs	r3, r0
 8006644:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	2b0f      	cmp	r3, #15
 800664a:	d921      	bls.n	8006690 <UART_SetConfig+0x5b0>
 800664c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800664e:	2380      	movs	r3, #128	; 0x80
 8006650:	025b      	lsls	r3, r3, #9
 8006652:	429a      	cmp	r2, r3
 8006654:	d21c      	bcs.n	8006690 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	b29a      	uxth	r2, r3
 800665a:	200e      	movs	r0, #14
 800665c:	2420      	movs	r4, #32
 800665e:	1903      	adds	r3, r0, r4
 8006660:	19db      	adds	r3, r3, r7
 8006662:	210f      	movs	r1, #15
 8006664:	438a      	bics	r2, r1
 8006666:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	085b      	lsrs	r3, r3, #1
 800666c:	b29b      	uxth	r3, r3
 800666e:	2207      	movs	r2, #7
 8006670:	4013      	ands	r3, r2
 8006672:	b299      	uxth	r1, r3
 8006674:	1903      	adds	r3, r0, r4
 8006676:	19db      	adds	r3, r3, r7
 8006678:	1902      	adds	r2, r0, r4
 800667a:	19d2      	adds	r2, r2, r7
 800667c:	8812      	ldrh	r2, [r2, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	1902      	adds	r2, r0, r4
 8006688:	19d2      	adds	r2, r2, r7
 800668a:	8812      	ldrh	r2, [r2, #0]
 800668c:	60da      	str	r2, [r3, #12]
 800668e:	e05e      	b.n	800674e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006690:	231a      	movs	r3, #26
 8006692:	2220      	movs	r2, #32
 8006694:	189b      	adds	r3, r3, r2
 8006696:	19db      	adds	r3, r3, r7
 8006698:	2201      	movs	r2, #1
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	e057      	b.n	800674e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800669e:	231b      	movs	r3, #27
 80066a0:	2220      	movs	r2, #32
 80066a2:	189b      	adds	r3, r3, r2
 80066a4:	19db      	adds	r3, r3, r7
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d015      	beq.n	80066d8 <UART_SetConfig+0x5f8>
 80066ac:	dc18      	bgt.n	80066e0 <UART_SetConfig+0x600>
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d00d      	beq.n	80066ce <UART_SetConfig+0x5ee>
 80066b2:	dc15      	bgt.n	80066e0 <UART_SetConfig+0x600>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <UART_SetConfig+0x5de>
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d005      	beq.n	80066c8 <UART_SetConfig+0x5e8>
 80066bc:	e010      	b.n	80066e0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066be:	f7fd ffe9 	bl	8004694 <HAL_RCC_GetPCLK1Freq>
 80066c2:	0003      	movs	r3, r0
 80066c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066c6:	e014      	b.n	80066f2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066c8:	4b2e      	ldr	r3, [pc, #184]	; (8006784 <UART_SetConfig+0x6a4>)
 80066ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066cc:	e011      	b.n	80066f2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ce:	f7fd ff55 	bl	800457c <HAL_RCC_GetSysClockFreq>
 80066d2:	0003      	movs	r3, r0
 80066d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066d6:	e00c      	b.n	80066f2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066d8:	2380      	movs	r3, #128	; 0x80
 80066da:	021b      	lsls	r3, r3, #8
 80066dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066de:	e008      	b.n	80066f2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80066e4:	231a      	movs	r3, #26
 80066e6:	2220      	movs	r2, #32
 80066e8:	189b      	adds	r3, r3, r2
 80066ea:	19db      	adds	r3, r3, r7
 80066ec:	2201      	movs	r2, #1
 80066ee:	701a      	strb	r2, [r3, #0]
        break;
 80066f0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80066f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d02a      	beq.n	800674e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066fc:	4b22      	ldr	r3, [pc, #136]	; (8006788 <UART_SetConfig+0x6a8>)
 80066fe:	0052      	lsls	r2, r2, #1
 8006700:	5ad3      	ldrh	r3, [r2, r3]
 8006702:	0019      	movs	r1, r3
 8006704:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006706:	f7f9 fd19 	bl	800013c <__udivsi3>
 800670a:	0003      	movs	r3, r0
 800670c:	001a      	movs	r2, r3
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	085b      	lsrs	r3, r3, #1
 8006714:	18d2      	adds	r2, r2, r3
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	0019      	movs	r1, r3
 800671c:	0010      	movs	r0, r2
 800671e:	f7f9 fd0d 	bl	800013c <__udivsi3>
 8006722:	0003      	movs	r3, r0
 8006724:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	2b0f      	cmp	r3, #15
 800672a:	d90a      	bls.n	8006742 <UART_SetConfig+0x662>
 800672c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800672e:	2380      	movs	r3, #128	; 0x80
 8006730:	025b      	lsls	r3, r3, #9
 8006732:	429a      	cmp	r2, r3
 8006734:	d205      	bcs.n	8006742 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	b29a      	uxth	r2, r3
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	60da      	str	r2, [r3, #12]
 8006740:	e005      	b.n	800674e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006742:	231a      	movs	r3, #26
 8006744:	2220      	movs	r2, #32
 8006746:	189b      	adds	r3, r3, r2
 8006748:	19db      	adds	r3, r3, r7
 800674a:	2201      	movs	r2, #1
 800674c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	226a      	movs	r2, #106	; 0x6a
 8006752:	2101      	movs	r1, #1
 8006754:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	2268      	movs	r2, #104	; 0x68
 800675a:	2101      	movs	r1, #1
 800675c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	2200      	movs	r2, #0
 8006762:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	2200      	movs	r2, #0
 8006768:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800676a:	231a      	movs	r3, #26
 800676c:	2220      	movs	r2, #32
 800676e:	189b      	adds	r3, r3, r2
 8006770:	19db      	adds	r3, r3, r7
 8006772:	781b      	ldrb	r3, [r3, #0]
}
 8006774:	0018      	movs	r0, r3
 8006776:	46bd      	mov	sp, r7
 8006778:	b010      	add	sp, #64	; 0x40
 800677a:	bdb0      	pop	{r4, r5, r7, pc}
 800677c:	40008000 	.word	0x40008000
 8006780:	40008400 	.word	0x40008400
 8006784:	00f42400 	.word	0x00f42400
 8006788:	0800f658 	.word	0x0800f658

0800678c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006798:	2208      	movs	r2, #8
 800679a:	4013      	ands	r3, r2
 800679c:	d00b      	beq.n	80067b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	4a4a      	ldr	r2, [pc, #296]	; (80068d0 <UART_AdvFeatureConfig+0x144>)
 80067a6:	4013      	ands	r3, r2
 80067a8:	0019      	movs	r1, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ba:	2201      	movs	r2, #1
 80067bc:	4013      	ands	r3, r2
 80067be:	d00b      	beq.n	80067d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	4a43      	ldr	r2, [pc, #268]	; (80068d4 <UART_AdvFeatureConfig+0x148>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	0019      	movs	r1, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067dc:	2202      	movs	r2, #2
 80067de:	4013      	ands	r3, r2
 80067e0:	d00b      	beq.n	80067fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	4a3b      	ldr	r2, [pc, #236]	; (80068d8 <UART_AdvFeatureConfig+0x14c>)
 80067ea:	4013      	ands	r3, r2
 80067ec:	0019      	movs	r1, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fe:	2204      	movs	r2, #4
 8006800:	4013      	ands	r3, r2
 8006802:	d00b      	beq.n	800681c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	4a34      	ldr	r2, [pc, #208]	; (80068dc <UART_AdvFeatureConfig+0x150>)
 800680c:	4013      	ands	r3, r2
 800680e:	0019      	movs	r1, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006820:	2210      	movs	r2, #16
 8006822:	4013      	ands	r3, r2
 8006824:	d00b      	beq.n	800683e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	4a2c      	ldr	r2, [pc, #176]	; (80068e0 <UART_AdvFeatureConfig+0x154>)
 800682e:	4013      	ands	r3, r2
 8006830:	0019      	movs	r1, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006842:	2220      	movs	r2, #32
 8006844:	4013      	ands	r3, r2
 8006846:	d00b      	beq.n	8006860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	4a25      	ldr	r2, [pc, #148]	; (80068e4 <UART_AdvFeatureConfig+0x158>)
 8006850:	4013      	ands	r3, r2
 8006852:	0019      	movs	r1, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	2240      	movs	r2, #64	; 0x40
 8006866:	4013      	ands	r3, r2
 8006868:	d01d      	beq.n	80068a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	4a1d      	ldr	r2, [pc, #116]	; (80068e8 <UART_AdvFeatureConfig+0x15c>)
 8006872:	4013      	ands	r3, r2
 8006874:	0019      	movs	r1, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006886:	2380      	movs	r3, #128	; 0x80
 8006888:	035b      	lsls	r3, r3, #13
 800688a:	429a      	cmp	r2, r3
 800688c:	d10b      	bne.n	80068a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	4a15      	ldr	r2, [pc, #84]	; (80068ec <UART_AdvFeatureConfig+0x160>)
 8006896:	4013      	ands	r3, r2
 8006898:	0019      	movs	r1, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068aa:	2280      	movs	r2, #128	; 0x80
 80068ac:	4013      	ands	r3, r2
 80068ae:	d00b      	beq.n	80068c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	4a0e      	ldr	r2, [pc, #56]	; (80068f0 <UART_AdvFeatureConfig+0x164>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	0019      	movs	r1, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	605a      	str	r2, [r3, #4]
  }
}
 80068c8:	46c0      	nop			; (mov r8, r8)
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b002      	add	sp, #8
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	ffff7fff 	.word	0xffff7fff
 80068d4:	fffdffff 	.word	0xfffdffff
 80068d8:	fffeffff 	.word	0xfffeffff
 80068dc:	fffbffff 	.word	0xfffbffff
 80068e0:	ffffefff 	.word	0xffffefff
 80068e4:	ffffdfff 	.word	0xffffdfff
 80068e8:	ffefffff 	.word	0xffefffff
 80068ec:	ff9fffff 	.word	0xff9fffff
 80068f0:	fff7ffff 	.word	0xfff7ffff

080068f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b092      	sub	sp, #72	; 0x48
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2290      	movs	r2, #144	; 0x90
 8006900:	2100      	movs	r1, #0
 8006902:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006904:	f7fc feda 	bl	80036bc <HAL_GetTick>
 8006908:	0003      	movs	r3, r0
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2208      	movs	r2, #8
 8006914:	4013      	ands	r3, r2
 8006916:	2b08      	cmp	r3, #8
 8006918:	d12d      	bne.n	8006976 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800691a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800691c:	2280      	movs	r2, #128	; 0x80
 800691e:	0391      	lsls	r1, r2, #14
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	4a47      	ldr	r2, [pc, #284]	; (8006a40 <UART_CheckIdleState+0x14c>)
 8006924:	9200      	str	r2, [sp, #0]
 8006926:	2200      	movs	r2, #0
 8006928:	f000 f88e 	bl	8006a48 <UART_WaitOnFlagUntilTimeout>
 800692c:	1e03      	subs	r3, r0, #0
 800692e:	d022      	beq.n	8006976 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006930:	f3ef 8310 	mrs	r3, PRIMASK
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006938:	63bb      	str	r3, [r7, #56]	; 0x38
 800693a:	2301      	movs	r3, #1
 800693c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	f383 8810 	msr	PRIMASK, r3
}
 8006944:	46c0      	nop			; (mov r8, r8)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2180      	movs	r1, #128	; 0x80
 8006952:	438a      	bics	r2, r1
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	f383 8810 	msr	PRIMASK, r3
}
 8006960:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2288      	movs	r2, #136	; 0x88
 8006966:	2120      	movs	r1, #32
 8006968:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2284      	movs	r2, #132	; 0x84
 800696e:	2100      	movs	r1, #0
 8006970:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e060      	b.n	8006a38 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2204      	movs	r2, #4
 800697e:	4013      	ands	r3, r2
 8006980:	2b04      	cmp	r3, #4
 8006982:	d146      	bne.n	8006a12 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006986:	2280      	movs	r2, #128	; 0x80
 8006988:	03d1      	lsls	r1, r2, #15
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	4a2c      	ldr	r2, [pc, #176]	; (8006a40 <UART_CheckIdleState+0x14c>)
 800698e:	9200      	str	r2, [sp, #0]
 8006990:	2200      	movs	r2, #0
 8006992:	f000 f859 	bl	8006a48 <UART_WaitOnFlagUntilTimeout>
 8006996:	1e03      	subs	r3, r0, #0
 8006998:	d03b      	beq.n	8006a12 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800699a:	f3ef 8310 	mrs	r3, PRIMASK
 800699e:	60fb      	str	r3, [r7, #12]
  return(result);
 80069a0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069a2:	637b      	str	r3, [r7, #52]	; 0x34
 80069a4:	2301      	movs	r3, #1
 80069a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f383 8810 	msr	PRIMASK, r3
}
 80069ae:	46c0      	nop			; (mov r8, r8)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4922      	ldr	r1, [pc, #136]	; (8006a44 <UART_CheckIdleState+0x150>)
 80069bc:	400a      	ands	r2, r1
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f383 8810 	msr	PRIMASK, r3
}
 80069ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069cc:	f3ef 8310 	mrs	r3, PRIMASK
 80069d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80069d2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d4:	633b      	str	r3, [r7, #48]	; 0x30
 80069d6:	2301      	movs	r3, #1
 80069d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	f383 8810 	msr	PRIMASK, r3
}
 80069e0:	46c0      	nop			; (mov r8, r8)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2101      	movs	r1, #1
 80069ee:	438a      	bics	r2, r1
 80069f0:	609a      	str	r2, [r3, #8]
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	f383 8810 	msr	PRIMASK, r3
}
 80069fc:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	228c      	movs	r2, #140	; 0x8c
 8006a02:	2120      	movs	r1, #32
 8006a04:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2284      	movs	r2, #132	; 0x84
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e012      	b.n	8006a38 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2288      	movs	r2, #136	; 0x88
 8006a16:	2120      	movs	r1, #32
 8006a18:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	228c      	movs	r2, #140	; 0x8c
 8006a1e:	2120      	movs	r1, #32
 8006a20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2284      	movs	r2, #132	; 0x84
 8006a32:	2100      	movs	r1, #0
 8006a34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	0018      	movs	r0, r3
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	b010      	add	sp, #64	; 0x40
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	01ffffff 	.word	0x01ffffff
 8006a44:	fffffedf 	.word	0xfffffedf

08006a48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	1dfb      	adds	r3, r7, #7
 8006a56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a58:	e051      	b.n	8006afe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	d04e      	beq.n	8006afe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a60:	f7fc fe2c 	bl	80036bc <HAL_GetTick>
 8006a64:	0002      	movs	r2, r0
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d302      	bcc.n	8006a76 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e051      	b.n	8006b1e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2204      	movs	r2, #4
 8006a82:	4013      	ands	r3, r2
 8006a84:	d03b      	beq.n	8006afe <UART_WaitOnFlagUntilTimeout+0xb6>
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b80      	cmp	r3, #128	; 0x80
 8006a8a:	d038      	beq.n	8006afe <UART_WaitOnFlagUntilTimeout+0xb6>
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2b40      	cmp	r3, #64	; 0x40
 8006a90:	d035      	beq.n	8006afe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	2208      	movs	r2, #8
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d111      	bne.n	8006ac4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2208      	movs	r2, #8
 8006aa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	0018      	movs	r0, r3
 8006aac:	f000 f83c 	bl	8006b28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2290      	movs	r2, #144	; 0x90
 8006ab4:	2108      	movs	r1, #8
 8006ab6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2284      	movs	r2, #132	; 0x84
 8006abc:	2100      	movs	r1, #0
 8006abe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e02c      	b.n	8006b1e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	69da      	ldr	r2, [r3, #28]
 8006aca:	2380      	movs	r3, #128	; 0x80
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	401a      	ands	r2, r3
 8006ad0:	2380      	movs	r3, #128	; 0x80
 8006ad2:	011b      	lsls	r3, r3, #4
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d112      	bne.n	8006afe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2280      	movs	r2, #128	; 0x80
 8006ade:	0112      	lsls	r2, r2, #4
 8006ae0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	f000 f81f 	bl	8006b28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2290      	movs	r2, #144	; 0x90
 8006aee:	2120      	movs	r1, #32
 8006af0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2284      	movs	r2, #132	; 0x84
 8006af6:	2100      	movs	r1, #0
 8006af8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e00f      	b.n	8006b1e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	4013      	ands	r3, r2
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	425a      	negs	r2, r3
 8006b0e:	4153      	adcs	r3, r2
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	001a      	movs	r2, r3
 8006b14:	1dfb      	adds	r3, r7, #7
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d09e      	beq.n	8006a5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	0018      	movs	r0, r3
 8006b20:	46bd      	mov	sp, r7
 8006b22:	b004      	add	sp, #16
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08e      	sub	sp, #56	; 0x38
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b30:	f3ef 8310 	mrs	r3, PRIMASK
 8006b34:	617b      	str	r3, [r7, #20]
  return(result);
 8006b36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b38:	637b      	str	r3, [r7, #52]	; 0x34
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	f383 8810 	msr	PRIMASK, r3
}
 8006b44:	46c0      	nop			; (mov r8, r8)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4926      	ldr	r1, [pc, #152]	; (8006bec <UART_EndRxTransfer+0xc4>)
 8006b52:	400a      	ands	r2, r1
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	f383 8810 	msr	PRIMASK, r3
}
 8006b60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b62:	f3ef 8310 	mrs	r3, PRIMASK
 8006b66:	623b      	str	r3, [r7, #32]
  return(result);
 8006b68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	f383 8810 	msr	PRIMASK, r3
}
 8006b76:	46c0      	nop			; (mov r8, r8)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	491b      	ldr	r1, [pc, #108]	; (8006bf0 <UART_EndRxTransfer+0xc8>)
 8006b84:	400a      	ands	r2, r1
 8006b86:	609a      	str	r2, [r3, #8]
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	f383 8810 	msr	PRIMASK, r3
}
 8006b92:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d118      	bne.n	8006bce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006ba0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ba2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f383 8810 	msr	PRIMASK, r3
}
 8006bb0:	46c0      	nop			; (mov r8, r8)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2110      	movs	r1, #16
 8006bbe:	438a      	bics	r2, r1
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f383 8810 	msr	PRIMASK, r3
}
 8006bcc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	228c      	movs	r2, #140	; 0x8c
 8006bd2:	2120      	movs	r1, #32
 8006bd4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006be2:	46c0      	nop			; (mov r8, r8)
 8006be4:	46bd      	mov	sp, r7
 8006be6:	b00e      	add	sp, #56	; 0x38
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	46c0      	nop			; (mov r8, r8)
 8006bec:	fffffedf 	.word	0xfffffedf
 8006bf0:	effffffe 	.word	0xeffffffe

08006bf4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2284      	movs	r2, #132	; 0x84
 8006c00:	5c9b      	ldrb	r3, [r3, r2]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d101      	bne.n	8006c0a <HAL_UARTEx_DisableFifoMode+0x16>
 8006c06:	2302      	movs	r3, #2
 8006c08:	e027      	b.n	8006c5a <HAL_UARTEx_DisableFifoMode+0x66>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2284      	movs	r2, #132	; 0x84
 8006c0e:	2101      	movs	r1, #1
 8006c10:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2288      	movs	r2, #136	; 0x88
 8006c16:	2124      	movs	r1, #36	; 0x24
 8006c18:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	438a      	bics	r2, r1
 8006c30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4a0b      	ldr	r2, [pc, #44]	; (8006c64 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006c36:	4013      	ands	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2288      	movs	r2, #136	; 0x88
 8006c4c:	2120      	movs	r1, #32
 8006c4e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2284      	movs	r2, #132	; 0x84
 8006c54:	2100      	movs	r1, #0
 8006c56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	0018      	movs	r0, r3
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	b004      	add	sp, #16
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	dfffffff 	.word	0xdfffffff

08006c68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2284      	movs	r2, #132	; 0x84
 8006c76:	5c9b      	ldrb	r3, [r3, r2]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e02e      	b.n	8006cde <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2284      	movs	r2, #132	; 0x84
 8006c84:	2101      	movs	r1, #1
 8006c86:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2288      	movs	r2, #136	; 0x88
 8006c8c:	2124      	movs	r1, #36	; 0x24
 8006c8e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	438a      	bics	r2, r1
 8006ca6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	08d9      	lsrs	r1, r3, #3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f000 f854 	bl	8006d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2288      	movs	r2, #136	; 0x88
 8006cd0:	2120      	movs	r1, #32
 8006cd2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2284      	movs	r2, #132	; 0x84
 8006cd8:	2100      	movs	r1, #0
 8006cda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	0018      	movs	r0, r3
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	b004      	add	sp, #16
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2284      	movs	r2, #132	; 0x84
 8006cf6:	5c9b      	ldrb	r3, [r3, r2]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d101      	bne.n	8006d00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	e02f      	b.n	8006d60 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2284      	movs	r2, #132	; 0x84
 8006d04:	2101      	movs	r1, #1
 8006d06:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2288      	movs	r2, #136	; 0x88
 8006d0c:	2124      	movs	r1, #36	; 0x24
 8006d0e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2101      	movs	r1, #1
 8006d24:	438a      	bics	r2, r1
 8006d26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	4a0e      	ldr	r2, [pc, #56]	; (8006d68 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006d30:	4013      	ands	r3, r2
 8006d32:	0019      	movs	r1, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	0018      	movs	r0, r3
 8006d42:	f000 f813 	bl	8006d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2288      	movs	r2, #136	; 0x88
 8006d52:	2120      	movs	r1, #32
 8006d54:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2284      	movs	r2, #132	; 0x84
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	0018      	movs	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	b004      	add	sp, #16
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	f1ffffff 	.word	0xf1ffffff

08006d6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d108      	bne.n	8006d8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	226a      	movs	r2, #106	; 0x6a
 8006d80:	2101      	movs	r1, #1
 8006d82:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2268      	movs	r2, #104	; 0x68
 8006d88:	2101      	movs	r1, #1
 8006d8a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d8c:	e043      	b.n	8006e16 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d8e:	260f      	movs	r6, #15
 8006d90:	19bb      	adds	r3, r7, r6
 8006d92:	2208      	movs	r2, #8
 8006d94:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d96:	200e      	movs	r0, #14
 8006d98:	183b      	adds	r3, r7, r0
 8006d9a:	2208      	movs	r2, #8
 8006d9c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	0e5b      	lsrs	r3, r3, #25
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	240d      	movs	r4, #13
 8006daa:	193b      	adds	r3, r7, r4
 8006dac:	2107      	movs	r1, #7
 8006dae:	400a      	ands	r2, r1
 8006db0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	0f5b      	lsrs	r3, r3, #29
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	250c      	movs	r5, #12
 8006dbe:	197b      	adds	r3, r7, r5
 8006dc0:	2107      	movs	r1, #7
 8006dc2:	400a      	ands	r2, r1
 8006dc4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dc6:	183b      	adds	r3, r7, r0
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	197a      	adds	r2, r7, r5
 8006dcc:	7812      	ldrb	r2, [r2, #0]
 8006dce:	4914      	ldr	r1, [pc, #80]	; (8006e20 <UARTEx_SetNbDataToProcess+0xb4>)
 8006dd0:	5c8a      	ldrb	r2, [r1, r2]
 8006dd2:	435a      	muls	r2, r3
 8006dd4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006dd6:	197b      	adds	r3, r7, r5
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	4a12      	ldr	r2, [pc, #72]	; (8006e24 <UARTEx_SetNbDataToProcess+0xb8>)
 8006ddc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dde:	0019      	movs	r1, r3
 8006de0:	f7f9 fa36 	bl	8000250 <__divsi3>
 8006de4:	0003      	movs	r3, r0
 8006de6:	b299      	uxth	r1, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	226a      	movs	r2, #106	; 0x6a
 8006dec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dee:	19bb      	adds	r3, r7, r6
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	193a      	adds	r2, r7, r4
 8006df4:	7812      	ldrb	r2, [r2, #0]
 8006df6:	490a      	ldr	r1, [pc, #40]	; (8006e20 <UARTEx_SetNbDataToProcess+0xb4>)
 8006df8:	5c8a      	ldrb	r2, [r1, r2]
 8006dfa:	435a      	muls	r2, r3
 8006dfc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006dfe:	193b      	adds	r3, r7, r4
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	4a08      	ldr	r2, [pc, #32]	; (8006e24 <UARTEx_SetNbDataToProcess+0xb8>)
 8006e04:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e06:	0019      	movs	r1, r3
 8006e08:	f7f9 fa22 	bl	8000250 <__divsi3>
 8006e0c:	0003      	movs	r3, r0
 8006e0e:	b299      	uxth	r1, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2268      	movs	r2, #104	; 0x68
 8006e14:	5299      	strh	r1, [r3, r2]
}
 8006e16:	46c0      	nop			; (mov r8, r8)
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	b005      	add	sp, #20
 8006e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e1e:	46c0      	nop			; (mov r8, r8)
 8006e20:	0800f670 	.word	0x0800f670
 8006e24:	0800f678 	.word	0x0800f678

08006e28 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 8006e28:	b590      	push	{r4, r7, lr}
 8006e2a:	4c48      	ldr	r4, [pc, #288]	; (8006f4c <my_gnss_acq_coordinates+0x124>)
 8006e2c:	44a5      	add	sp, r4
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 8006e32:	4b47      	ldr	r3, [pc, #284]	; (8006f50 <my_gnss_acq_coordinates+0x128>)
 8006e34:	18fb      	adds	r3, r7, r3
 8006e36:	2200      	movs	r2, #0
 8006e38:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 8006e3a:	4b46      	ldr	r3, [pc, #280]	; (8006f54 <my_gnss_acq_coordinates+0x12c>)
 8006e3c:	18fb      	adds	r3, r7, r3
 8006e3e:	2200      	movs	r2, #0
 8006e40:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 8006e42:	4b45      	ldr	r3, [pc, #276]	; (8006f58 <my_gnss_acq_coordinates+0x130>)
 8006e44:	18fb      	adds	r3, r7, r3
 8006e46:	2200      	movs	r2, #0
 8006e48:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 8006e4a:	4b44      	ldr	r3, [pc, #272]	; (8006f5c <my_gnss_acq_coordinates+0x134>)
 8006e4c:	18fb      	adds	r3, r7, r3
 8006e4e:	2200      	movs	r2, #0
 8006e50:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8006e52:	4b43      	ldr	r3, [pc, #268]	; (8006f60 <my_gnss_acq_coordinates+0x138>)
 8006e54:	18fb      	adds	r3, r7, r3
 8006e56:	2200      	movs	r2, #0
 8006e58:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8006e5a:	4b42      	ldr	r3, [pc, #264]	; (8006f64 <my_gnss_acq_coordinates+0x13c>)
 8006e5c:	2486      	movs	r4, #134	; 0x86
 8006e5e:	00a4      	lsls	r4, r4, #2
 8006e60:	191b      	adds	r3, r3, r4
 8006e62:	19db      	adds	r3, r3, r7
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	22f6      	movs	r2, #246	; 0xf6
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	0018      	movs	r0, r3
 8006e70:	f001 fd72 	bl	8008958 <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8006e74:	4b3c      	ldr	r3, [pc, #240]	; (8006f68 <my_gnss_acq_coordinates+0x140>)
 8006e76:	191b      	adds	r3, r3, r4
 8006e78:	19db      	adds	r3, r3, r7
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	22f6      	movs	r2, #246	; 0xf6
 8006e82:	2100      	movs	r1, #0
 8006e84:	0018      	movs	r0, r3
 8006e86:	f001 fd67 	bl	8008958 <memset>
	char* 		nmea_gsv_label = "GSV" ;
 8006e8a:	4b38      	ldr	r3, [pc, #224]	; (8006f6c <my_gnss_acq_coordinates+0x144>)
 8006e8c:	2284      	movs	r2, #132	; 0x84
 8006e8e:	0092      	lsls	r2, r2, #2
 8006e90:	18ba      	adds	r2, r7, r2
 8006e92:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "RMC" ;
 8006e94:	4b36      	ldr	r3, [pc, #216]	; (8006f70 <my_gnss_acq_coordinates+0x148>)
 8006e96:	2283      	movs	r2, #131	; 0x83
 8006e98:	0092      	lsls	r2, r2, #2
 8006e9a:	18ba      	adds	r2, r7, r2
 8006e9c:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 8006e9e:	4b35      	ldr	r3, [pc, #212]	; (8006f74 <my_gnss_acq_coordinates+0x14c>)
 8006ea0:	2282      	movs	r2, #130	; 0x82
 8006ea2:	0092      	lsls	r2, r2, #2
 8006ea4:	18ba      	adds	r2, r7, r2
 8006ea6:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8006ea8:	4b33      	ldr	r3, [pc, #204]	; (8006f78 <my_gnss_acq_coordinates+0x150>)
 8006eaa:	2281      	movs	r2, #129	; 0x81
 8006eac:	0092      	lsls	r2, r2, #2
 8006eae:	18ba      	adds	r2, r7, r2
 8006eb0:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '\0' ;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 100 ;
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	4b2f      	ldr	r3, [pc, #188]	; (8006f7c <my_gnss_acq_coordinates+0x154>)
 8006ebe:	608a      	str	r2, [r1, #8]
 8006ec0:	60cb      	str	r3, [r1, #12]

	while ( tim_seconds < fix_acq_ths )
 8006ec2:	e021      	b.n	8006f08 <my_gnss_acq_coordinates+0xe0>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, false ) ;
 8006ec4:	4c24      	ldr	r4, [pc, #144]	; (8006f58 <my_gnss_acq_coordinates+0x130>)
 8006ec6:	193b      	adds	r3, r7, r4
 8006ec8:	2100      	movs	r1, #0
 8006eca:	0018      	movs	r0, r3
 8006ecc:	f7fb ffdc 	bl	8002e88 <my_gnss_receive_byte>
		if ( rx_byte )
 8006ed0:	0020      	movs	r0, r4
 8006ed2:	183b      	adds	r3, r7, r0
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d016      	beq.n	8006f08 <my_gnss_acq_coordinates+0xe0>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 8006eda:	4b20      	ldr	r3, [pc, #128]	; (8006f5c <my_gnss_acq_coordinates+0x134>)
 8006edc:	18fa      	adds	r2, r7, r3
 8006ede:	2484      	movs	r4, #132	; 0x84
 8006ee0:	0064      	lsls	r4, r4, #1
 8006ee2:	1939      	adds	r1, r7, r4
 8006ee4:	183b      	adds	r3, r7, r0
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	f000 f8d3 	bl	8007092 <my_nmea_message>
 8006eec:	0003      	movs	r3, r0
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d10a      	bne.n	8006f08 <my_gnss_acq_coordinates+0xe0>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 8006ef2:	193b      	adds	r3, r7, r4
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f000 f938 	bl	800716a <is_my_nmea_checksum_ok>
 8006efa:	1e03      	subs	r3, r0, #0
 8006efc:	d004      	beq.n	8006f08 <my_gnss_acq_coordinates+0xe0>
					/*
					if ( gsv_tns > MIN_TNS ) {
						__NOP() ; }
					}
					*/
					if ( tim_seconds > 30 ) {
 8006efe:	4b20      	ldr	r3, [pc, #128]	; (8006f80 <my_gnss_acq_coordinates+0x158>)
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	2b1e      	cmp	r3, #30
 8006f04:	d900      	bls.n	8006f08 <my_gnss_acq_coordinates+0xe0>
						__NOP() ;
 8006f06:	46c0      	nop			; (mov r8, r8)
	while ( tim_seconds < fix_acq_ths )
 8006f08:	4b1d      	ldr	r3, [pc, #116]	; (8006f80 <my_gnss_acq_coordinates+0x158>)
 8006f0a:	881a      	ldrh	r2, [r3, #0]
 8006f0c:	4b1d      	ldr	r3, [pc, #116]	; (8006f84 <my_gnss_acq_coordinates+0x15c>)
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d3d7      	bcc.n	8006ec4 <my_gnss_acq_coordinates+0x9c>
					*/
				}
			}
		}
	}
	if ( gngll_message[0] )
 8006f14:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <my_gnss_acq_coordinates+0x140>)
 8006f16:	2286      	movs	r2, #134	; 0x86
 8006f18:	0092      	lsls	r2, r2, #2
 8006f1a:	189b      	adds	r3, r3, r2
 8006f1c:	19db      	adds	r3, r3, r7
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00a      	beq.n	8006f3a <my_gnss_acq_coordinates+0x112>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	230c      	movs	r3, #12
 8006f28:	18fb      	adds	r3, r7, r3
 8006f2a:	0011      	movs	r1, r2
 8006f2c:	0018      	movs	r0, r3
 8006f2e:	f000 f9d7 	bl	80072e0 <my_nmea_get_gngll_coordinates>
		r = true ;
 8006f32:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <my_gnss_acq_coordinates+0x128>)
 8006f34:	18fb      	adds	r3, r7, r3
 8006f36:	2201      	movs	r2, #1
 8006f38:	701a      	strb	r2, [r3, #0]
	}
	return r ;
 8006f3a:	4b05      	ldr	r3, [pc, #20]	; (8006f50 <my_gnss_acq_coordinates+0x128>)
 8006f3c:	18fb      	adds	r3, r7, r3
 8006f3e:	781b      	ldrb	r3, [r3, #0]
}
 8006f40:	0018      	movs	r0, r3
 8006f42:	46bd      	mov	sp, r7
 8006f44:	2387      	movs	r3, #135	; 0x87
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	449d      	add	sp, r3
 8006f4a:	bd90      	pop	{r4, r7, pc}
 8006f4c:	fffffde4 	.word	0xfffffde4
 8006f50:	00000217 	.word	0x00000217
 8006f54:	00000216 	.word	0x00000216
 8006f58:	00000203 	.word	0x00000203
 8006f5c:	00000202 	.word	0x00000202
 8006f60:	00000215 	.word	0x00000215
 8006f64:	fffffef0 	.word	0xfffffef0
 8006f68:	fffffdf4 	.word	0xfffffdf4
 8006f6c:	0800f508 	.word	0x0800f508
 8006f70:	0800f50c 	.word	0x0800f50c
 8006f74:	0800f510 	.word	0x0800f510
 8006f78:	0800f518 	.word	0x0800f518
 8006f7c:	40590000 	.word	0x40590000
 8006f80:	20000a40 	.word	0x20000a40
 8006f84:	2000000e 	.word	0x2000000e

08006f88 <my_rtc_get_dt_s>:
{
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
}
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 8006f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f8a:	b08d      	sub	sp, #52	; 0x34
 8006f8c:	af04      	add	r7, sp, #16
 8006f8e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8006f90:	2508      	movs	r5, #8
 8006f92:	1979      	adds	r1, r7, r5
 8006f94:	4b1b      	ldr	r3, [pc, #108]	; (8007004 <my_rtc_get_dt_s+0x7c>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f7fd ff17 	bl	8004dcc <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8006f9e:	241c      	movs	r4, #28
 8006fa0:	1939      	adds	r1, r7, r4
 8006fa2:	4b18      	ldr	r3, [pc, #96]	; (8007004 <my_rtc_get_dt_s+0x7c>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	0018      	movs	r0, r3
 8006fa8:	f7fd fffe 	bl	8004fa8 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 8006fac:	0021      	movs	r1, r4
 8006fae:	187b      	adds	r3, r7, r1
 8006fb0:	78db      	ldrb	r3, [r3, #3]
 8006fb2:	22fa      	movs	r2, #250	; 0xfa
 8006fb4:	00d2      	lsls	r2, r2, #3
 8006fb6:	189a      	adds	r2, r3, r2
 8006fb8:	187b      	adds	r3, r7, r1
 8006fba:	785b      	ldrb	r3, [r3, #1]
 8006fbc:	469c      	mov	ip, r3
 8006fbe:	187b      	adds	r3, r7, r1
 8006fc0:	789b      	ldrb	r3, [r3, #2]
 8006fc2:	001c      	movs	r4, r3
 8006fc4:	0028      	movs	r0, r5
 8006fc6:	183b      	adds	r3, r7, r0
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	001d      	movs	r5, r3
 8006fcc:	183b      	adds	r3, r7, r0
 8006fce:	785b      	ldrb	r3, [r3, #1]
 8006fd0:	001e      	movs	r6, r3
 8006fd2:	183b      	adds	r3, r7, r0
 8006fd4:	789b      	ldrb	r3, [r3, #2]
 8006fd6:	490c      	ldr	r1, [pc, #48]	; (8007008 <my_rtc_get_dt_s+0x80>)
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	9303      	str	r3, [sp, #12]
 8006fdc:	9602      	str	r6, [sp, #8]
 8006fde:	9501      	str	r5, [sp, #4]
 8006fe0:	9400      	str	r4, [sp, #0]
 8006fe2:	4663      	mov	r3, ip
 8006fe4:	f001 fc22 	bl	800882c <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8006fe8:	211c      	movs	r1, #28
 8006fea:	187b      	adds	r3, r7, r1
 8006fec:	78db      	ldrb	r3, [r3, #3]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	22fa      	movs	r2, #250	; 0xfa
 8006ff2:	00d2      	lsls	r2, r2, #3
 8006ff4:	4694      	mov	ip, r2
 8006ff6:	4463      	add	r3, ip
 8006ff8:	b29b      	uxth	r3, r3
}
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	b009      	add	sp, #36	; 0x24
 8007000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007002:	46c0      	nop			; (mov r8, r8)
 8007004:	200006dc 	.word	0x200006dc
 8007008:	0800f558 	.word	0x0800f558

0800700c <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	0008      	movs	r0, r1
 8007016:	0011      	movs	r1, r2
 8007018:	1cfb      	adds	r3, r7, #3
 800701a:	1c02      	adds	r2, r0, #0
 800701c:	701a      	strb	r2, [r3, #0]
 800701e:	1cbb      	adds	r3, r7, #2
 8007020:	1c0a      	adds	r2, r1, #0
 8007022:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8007024:	230f      	movs	r3, #15
 8007026:	18fb      	adds	r3, r7, r3
 8007028:	2200      	movs	r2, #0
 800702a:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 800702c:	230e      	movs	r3, #14
 800702e:	18fb      	adds	r3, r7, r3
 8007030:	2200      	movs	r2, #0
 8007032:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8007034:	e01c      	b.n	8007070 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8007036:	230f      	movs	r3, #15
 8007038:	18fb      	adds	r3, r7, r3
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	18d3      	adds	r3, r2, r3
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	1cfa      	adds	r2, r7, #3
 8007044:	7812      	ldrb	r2, [r2, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d105      	bne.n	8007056 <my_find_char_position+0x4a>
			p++ ;
 800704a:	210e      	movs	r1, #14
 800704c:	187b      	adds	r3, r7, r1
 800704e:	781a      	ldrb	r2, [r3, #0]
 8007050:	187b      	adds	r3, r7, r1
 8007052:	3201      	adds	r2, #1
 8007054:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8007056:	230e      	movs	r3, #14
 8007058:	18fa      	adds	r2, r7, r3
 800705a:	1cbb      	adds	r3, r7, #2
 800705c:	7812      	ldrb	r2, [r2, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d00e      	beq.n	8007082 <my_find_char_position+0x76>
			break ;
		i++ ;
 8007064:	210f      	movs	r1, #15
 8007066:	187b      	adds	r3, r7, r1
 8007068:	781a      	ldrb	r2, [r3, #0]
 800706a:	187b      	adds	r3, r7, r1
 800706c:	3201      	adds	r2, #1
 800706e:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8007070:	230f      	movs	r3, #15
 8007072:	18fb      	adds	r3, r7, r3
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	18d3      	adds	r3, r2, r3
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1da      	bne.n	8007036 <my_find_char_position+0x2a>
 8007080:	e000      	b.n	8007084 <my_find_char_position+0x78>
			break ;
 8007082:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8007084:	230f      	movs	r3, #15
 8007086:	18fb      	adds	r3, r7, r3
 8007088:	781b      	ldrb	r3, [r3, #0]
}
 800708a:	0018      	movs	r0, r3
 800708c:	46bd      	mov	sp, r7
 800708e:	b004      	add	sp, #16
 8007090:	bd80      	pop	{r7, pc}

08007092 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b24      	cmp	r3, #36	; 0x24
 80070a4:	d117      	bne.n	80070d6 <my_nmea_message+0x44>
    {
        *i = 0 ;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	b2d1      	uxtb	r1, r2
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	7011      	strb	r1, [r2, #0]
 80070b8:	001a      	movs	r2, r3
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	189b      	adds	r3, r3, r2
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	7812      	ldrb	r2, [r2, #0]
 80070c2:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	001a      	movs	r2, r3
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	189b      	adds	r3, r3, r2
 80070ce:	2200      	movs	r2, #0
 80070d0:	701a      	strb	r2, [r3, #0]
        return 0 ;
 80070d2:	2300      	movs	r3, #0
 80070d4:	e045      	b.n	8007162 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b1f      	cmp	r3, #31
 80070dc:	d907      	bls.n	80070ee <my_nmea_message+0x5c>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b7e      	cmp	r3, #126	; 0x7e
 80070e4:	d803      	bhi.n	80070ee <my_nmea_message+0x5c>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d103      	bne.n	80070f6 <my_nmea_message+0x64>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	2b0d      	cmp	r3, #13
 80070f4:	d114      	bne.n	8007120 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	b2d1      	uxtb	r1, r2
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	7011      	strb	r1, [r2, #0]
 8007102:	001a      	movs	r2, r3
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	189b      	adds	r3, r3, r2
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	7812      	ldrb	r2, [r2, #0]
 800710c:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	001a      	movs	r2, r3
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	189b      	adds	r3, r3, r2
 8007118:	2200      	movs	r2, #0
 800711a:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800711c:	2301      	movs	r3, #1
 800711e:	e020      	b.n	8007162 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	2b0a      	cmp	r3, #10
 8007126:	d11a      	bne.n	800715e <my_nmea_message+0xcc>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d916      	bls.n	800715e <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	3b01      	subs	r3, #1
 8007136:	b2da      	uxtb	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	701a      	strb	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	001a      	movs	r2, r3
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	189b      	adds	r3, r3, r2
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	2b0d      	cmp	r3, #13
 800714a:	d108      	bne.n	800715e <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	001a      	movs	r2, r3
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	189b      	adds	r3, r3, r2
 8007156:	2200      	movs	r2, #0
 8007158:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800715a:	2302      	movs	r3, #2
 800715c:	e001      	b.n	8007162 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800715e:	2301      	movs	r3, #1
 8007160:	425b      	negs	r3, r3
}
 8007162:	0018      	movs	r0, r3
 8007164:	46bd      	mov	sp, r7
 8007166:	b004      	add	sp, #16
 8007168:	bd80      	pop	{r7, pc}

0800716a <is_my_nmea_checksum_ok>:
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
}


bool is_my_nmea_checksum_ok ( const char* s )
{
 800716a:	b590      	push	{r4, r7, lr}
 800716c:	b085      	sub	sp, #20
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8007172:	230f      	movs	r3, #15
 8007174:	18fb      	adds	r3, r7, r3
 8007176:	2200      	movs	r2, #0
 8007178:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800717a:	230e      	movs	r3, #14
 800717c:	18fb      	adds	r3, r7, r3
 800717e:	2201      	movs	r2, #1
 8007180:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8007182:	e00f      	b.n	80071a4 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8007184:	220e      	movs	r2, #14
 8007186:	18bb      	adds	r3, r7, r2
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	18ba      	adds	r2, r7, r2
 800718c:	1c59      	adds	r1, r3, #1
 800718e:	7011      	strb	r1, [r2, #0]
 8007190:	001a      	movs	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	189b      	adds	r3, r3, r2
 8007196:	7819      	ldrb	r1, [r3, #0]
 8007198:	220f      	movs	r2, #15
 800719a:	18bb      	adds	r3, r7, r2
 800719c:	18ba      	adds	r2, r7, r2
 800719e:	7812      	ldrb	r2, [r2, #0]
 80071a0:	404a      	eors	r2, r1
 80071a2:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 80071a4:	210e      	movs	r1, #14
 80071a6:	187b      	adds	r3, r7, r1
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	18d3      	adds	r3, r2, r3
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b2a      	cmp	r3, #42	; 0x2a
 80071b2:	d00a      	beq.n	80071ca <is_my_nmea_checksum_ok+0x60>
 80071b4:	187b      	adds	r3, r7, r1
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	18d3      	adds	r3, r2, r3
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <is_my_nmea_checksum_ok+0x60>
 80071c2:	187b      	adds	r3, r7, r1
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1dc      	bne.n	8007184 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 80071ca:	230f      	movs	r3, #15
 80071cc:	18fb      	adds	r3, r7, r3
 80071ce:	781c      	ldrb	r4, [r3, #0]
 80071d0:	210e      	movs	r1, #14
 80071d2:	187b      	adds	r3, r7, r1
 80071d4:	187a      	adds	r2, r7, r1
 80071d6:	7812      	ldrb	r2, [r2, #0]
 80071d8:	3201      	adds	r2, #1
 80071da:	701a      	strb	r2, [r3, #0]
 80071dc:	187b      	adds	r3, r7, r1
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	18d3      	adds	r3, r2, r3
 80071e4:	2210      	movs	r2, #16
 80071e6:	2100      	movs	r1, #0
 80071e8:	0018      	movs	r0, r3
 80071ea:	f001 fa4f 	bl	800868c <strtol>
 80071ee:	0003      	movs	r3, r0
 80071f0:	1ae3      	subs	r3, r4, r3
 80071f2:	425a      	negs	r2, r3
 80071f4:	4153      	adcs	r3, r2
 80071f6:	b2db      	uxtb	r3, r3
}
 80071f8:	0018      	movs	r0, r3
 80071fa:	46bd      	mov	sp, r7
 80071fc:	b005      	add	sp, #20
 80071fe:	bd90      	pop	{r4, r7, pc}

08007200 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 8007200:	b5b0      	push	{r4, r5, r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	000a      	movs	r2, r1
 800720a:	1cfb      	adds	r3, r7, #3
 800720c:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800720e:	2308      	movs	r3, #8
 8007210:	18fa      	adds	r2, r7, r3
 8007212:	492f      	ldr	r1, [pc, #188]	; (80072d0 <nmea2decimal+0xd0>)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	0018      	movs	r0, r3
 8007218:	f001 fb28 	bl	800886c <sscanf>
    min = deg / 100 ;
 800721c:	68b8      	ldr	r0, [r7, #8]
 800721e:	68f9      	ldr	r1, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	4b2c      	ldr	r3, [pc, #176]	; (80072d4 <nmea2decimal+0xd4>)
 8007224:	f7f9 fe28 	bl	8000e78 <__aeabi_ddiv>
 8007228:	0002      	movs	r2, r0
 800722a:	000b      	movs	r3, r1
 800722c:	613a      	str	r2, [r7, #16]
 800722e:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 8007230:	6938      	ldr	r0, [r7, #16]
 8007232:	6979      	ldr	r1, [r7, #20]
 8007234:	f7fb f87c 	bl	8002330 <__aeabi_d2iz>
 8007238:	0003      	movs	r3, r0
 800723a:	0018      	movs	r0, r3
 800723c:	f7fb f8ae 	bl	800239c <__aeabi_i2d>
 8007240:	0002      	movs	r2, r0
 8007242:	000b      	movs	r3, r1
 8007244:	60ba      	str	r2, [r7, #8]
 8007246:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6938      	ldr	r0, [r7, #16]
 800724e:	6979      	ldr	r1, [r7, #20]
 8007250:	f7fa fcce 	bl	8001bf0 <__aeabi_dsub>
 8007254:	0002      	movs	r2, r0
 8007256:	000b      	movs	r3, r1
 8007258:	0010      	movs	r0, r2
 800725a:	0019      	movs	r1, r3
 800725c:	2200      	movs	r2, #0
 800725e:	4b1e      	ldr	r3, [pc, #120]	; (80072d8 <nmea2decimal+0xd8>)
 8007260:	f7fa fa04 	bl	800166c <__aeabi_dmul>
 8007264:	0002      	movs	r2, r0
 8007266:	000b      	movs	r3, r1
 8007268:	613a      	str	r2, [r7, #16]
 800726a:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800726c:	2200      	movs	r2, #0
 800726e:	4b1b      	ldr	r3, [pc, #108]	; (80072dc <nmea2decimal+0xdc>)
 8007270:	6938      	ldr	r0, [r7, #16]
 8007272:	6979      	ldr	r1, [r7, #20]
 8007274:	f7f9 fe00 	bl	8000e78 <__aeabi_ddiv>
 8007278:	0002      	movs	r2, r0
 800727a:	000b      	movs	r3, r1
 800727c:	613a      	str	r2, [r7, #16]
 800727e:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 8007280:	1cfb      	adds	r3, r7, #3
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b53      	cmp	r3, #83	; 0x53
 8007286:	d003      	beq.n	8007290 <nmea2decimal+0x90>
 8007288:	1cfb      	adds	r3, r7, #3
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	2b57      	cmp	r3, #87	; 0x57
 800728e:	d10e      	bne.n	80072ae <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 8007290:	68b8      	ldr	r0, [r7, #8]
 8007292:	68f9      	ldr	r1, [r7, #12]
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f7f9 fa8e 	bl	80007b8 <__aeabi_dadd>
 800729c:	0002      	movs	r2, r0
 800729e:	000b      	movs	r3, r1
 80072a0:	0011      	movs	r1, r2
 80072a2:	000c      	movs	r4, r1
 80072a4:	2180      	movs	r1, #128	; 0x80
 80072a6:	0609      	lsls	r1, r1, #24
 80072a8:	4059      	eors	r1, r3
 80072aa:	000d      	movs	r5, r1
 80072ac:	e009      	b.n	80072c2 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 80072ae:	68b8      	ldr	r0, [r7, #8]
 80072b0:	68f9      	ldr	r1, [r7, #12]
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f7f9 fa7f 	bl	80007b8 <__aeabi_dadd>
 80072ba:	0002      	movs	r2, r0
 80072bc:	000b      	movs	r3, r1
 80072be:	0014      	movs	r4, r2
 80072c0:	001d      	movs	r5, r3
}
 80072c2:	0022      	movs	r2, r4
 80072c4:	002b      	movs	r3, r5
 80072c6:	0010      	movs	r0, r2
 80072c8:	0019      	movs	r1, r3
 80072ca:	46bd      	mov	sp, r7
 80072cc:	b006      	add	sp, #24
 80072ce:	bdb0      	pop	{r4, r5, r7, pc}
 80072d0:	0800f5a4 	.word	0x0800f5a4
 80072d4:	40590000 	.word	0x40590000
 80072d8:	40240000 	.word	0x40240000
 80072dc:	40180000 	.word	0x40180000

080072e0 <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 80072e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072e2:	b08d      	sub	sp, #52	; 0x34
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	212c      	movs	r1, #44	; 0x2c
 80072f0:	0018      	movs	r0, r3
 80072f2:	f7ff fe8b 	bl	800700c <my_find_char_position>
 80072f6:	0003      	movs	r3, r0
 80072f8:	001a      	movs	r2, r3
 80072fa:	252f      	movs	r5, #47	; 0x2f
 80072fc:	197b      	adds	r3, r7, r5
 80072fe:	3201      	adds	r2, #1
 8007300:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2202      	movs	r2, #2
 8007306:	212c      	movs	r1, #44	; 0x2c
 8007308:	0018      	movs	r0, r3
 800730a:	f7ff fe7f 	bl	800700c <my_find_char_position>
 800730e:	0003      	movs	r3, r0
 8007310:	0019      	movs	r1, r3
 8007312:	242e      	movs	r4, #46	; 0x2e
 8007314:	193b      	adds	r3, r7, r4
 8007316:	197a      	adds	r2, r7, r5
 8007318:	7812      	ldrb	r2, [r2, #0]
 800731a:	1a8a      	subs	r2, r1, r2
 800731c:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800731e:	193b      	adds	r3, r7, r4
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	3301      	adds	r3, #1
 8007324:	0018      	movs	r0, r3
 8007326:	f000 f8c5 	bl	80074b4 <malloc>
 800732a:	0003      	movs	r3, r0
 800732c:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800732e:	197b      	adds	r3, r7, r5
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	18d1      	adds	r1, r2, r3
 8007336:	193b      	adds	r3, r7, r4
 8007338:	781a      	ldrb	r2, [r3, #0]
 800733a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733c:	0018      	movs	r0, r3
 800733e:	f001 fb24 	bl	800898a <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 8007342:	193b      	adds	r3, r7, r4
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007348:	18d3      	adds	r3, r2, r3
 800734a:	2200      	movs	r2, #0
 800734c:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800734e:	197b      	adds	r3, r7, r5
 8007350:	781a      	ldrb	r2, [r3, #0]
 8007352:	193b      	adds	r3, r7, r4
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	18d3      	adds	r3, r2, r3
 8007358:	3301      	adds	r3, #1
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	18d2      	adds	r2, r2, r3
 800735e:	2627      	movs	r6, #39	; 0x27
 8007360:	19bb      	adds	r3, r7, r6
 8007362:	7812      	ldrb	r2, [r2, #0]
 8007364:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 8007366:	19bb      	adds	r3, r7, r6
 8007368:	781a      	ldrb	r2, [r3, #0]
 800736a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736c:	0011      	movs	r1, r2
 800736e:	0018      	movs	r0, r3
 8007370:	f7ff ff46 	bl	8007200 <nmea2decimal>
 8007374:	0002      	movs	r2, r0
 8007376:	000b      	movs	r3, r1
 8007378:	61ba      	str	r2, [r7, #24]
 800737a:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	0018      	movs	r0, r3
 8007380:	f000 f8a2 	bl	80074c8 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 8007384:	2200      	movs	r2, #0
 8007386:	4b49      	ldr	r3, [pc, #292]	; (80074ac <my_nmea_get_gngll_coordinates+0x1cc>)
 8007388:	69b8      	ldr	r0, [r7, #24]
 800738a:	69f9      	ldr	r1, [r7, #28]
 800738c:	f7fa f96e 	bl	800166c <__aeabi_dmul>
 8007390:	0002      	movs	r2, r0
 8007392:	000b      	movs	r3, r1
 8007394:	0010      	movs	r0, r2
 8007396:	0019      	movs	r1, r3
 8007398:	f007 fffe 	bl	800f398 <round>
 800739c:	2200      	movs	r2, #0
 800739e:	4b43      	ldr	r3, [pc, #268]	; (80074ac <my_nmea_get_gngll_coordinates+0x1cc>)
 80073a0:	f7f9 fd6a 	bl	8000e78 <__aeabi_ddiv>
 80073a4:	0002      	movs	r2, r0
 80073a6:	000b      	movs	r3, r1
 80073a8:	61ba      	str	r2, [r7, #24]
 80073aa:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 80073ac:	2200      	movs	r2, #0
 80073ae:	4b40      	ldr	r3, [pc, #256]	; (80074b0 <my_nmea_get_gngll_coordinates+0x1d0>)
 80073b0:	69b8      	ldr	r0, [r7, #24]
 80073b2:	69f9      	ldr	r1, [r7, #28]
 80073b4:	f7fa f95a 	bl	800166c <__aeabi_dmul>
 80073b8:	0002      	movs	r2, r0
 80073ba:	000b      	movs	r3, r1
 80073bc:	0010      	movs	r0, r2
 80073be:	0019      	movs	r1, r3
 80073c0:	f7fa ffb6 	bl	8002330 <__aeabi_d2iz>
 80073c4:	0002      	movs	r2, r0
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2203      	movs	r2, #3
 80073ce:	212c      	movs	r1, #44	; 0x2c
 80073d0:	0018      	movs	r0, r3
 80073d2:	f7ff fe1b 	bl	800700c <my_find_char_position>
 80073d6:	0003      	movs	r3, r0
 80073d8:	001a      	movs	r2, r3
 80073da:	197b      	adds	r3, r7, r5
 80073dc:	3201      	adds	r2, #1
 80073de:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2204      	movs	r2, #4
 80073e4:	212c      	movs	r1, #44	; 0x2c
 80073e6:	0018      	movs	r0, r3
 80073e8:	f7ff fe10 	bl	800700c <my_find_char_position>
 80073ec:	0003      	movs	r3, r0
 80073ee:	0019      	movs	r1, r3
 80073f0:	193b      	adds	r3, r7, r4
 80073f2:	197a      	adds	r2, r7, r5
 80073f4:	7812      	ldrb	r2, [r2, #0]
 80073f6:	1a8a      	subs	r2, r1, r2
 80073f8:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 80073fa:	193b      	adds	r3, r7, r4
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	3301      	adds	r3, #1
 8007400:	0018      	movs	r0, r3
 8007402:	f000 f857 	bl	80074b4 <malloc>
 8007406:	0003      	movs	r3, r0
 8007408:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800740a:	197b      	adds	r3, r7, r5
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	18d1      	adds	r1, r2, r3
 8007412:	193b      	adds	r3, r7, r4
 8007414:	781a      	ldrb	r2, [r3, #0]
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	0018      	movs	r0, r3
 800741a:	f001 fab6 	bl	800898a <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800741e:	193b      	adds	r3, r7, r4
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	18d3      	adds	r3, r2, r3
 8007426:	2200      	movs	r2, #0
 8007428:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800742a:	197b      	adds	r3, r7, r5
 800742c:	781a      	ldrb	r2, [r3, #0]
 800742e:	193b      	adds	r3, r7, r4
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	18d3      	adds	r3, r2, r3
 8007434:	3301      	adds	r3, #1
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	18d2      	adds	r2, r2, r3
 800743a:	19bb      	adds	r3, r7, r6
 800743c:	7812      	ldrb	r2, [r2, #0]
 800743e:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 8007440:	19bb      	adds	r3, r7, r6
 8007442:	781a      	ldrb	r2, [r3, #0]
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	0011      	movs	r1, r2
 8007448:	0018      	movs	r0, r3
 800744a:	f7ff fed9 	bl	8007200 <nmea2decimal>
 800744e:	0002      	movs	r2, r0
 8007450:	000b      	movs	r3, r1
 8007452:	60ba      	str	r2, [r7, #8]
 8007454:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	0018      	movs	r0, r3
 800745a:	f000 f835 	bl	80074c8 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800745e:	2200      	movs	r2, #0
 8007460:	4b12      	ldr	r3, [pc, #72]	; (80074ac <my_nmea_get_gngll_coordinates+0x1cc>)
 8007462:	68b8      	ldr	r0, [r7, #8]
 8007464:	68f9      	ldr	r1, [r7, #12]
 8007466:	f7fa f901 	bl	800166c <__aeabi_dmul>
 800746a:	0002      	movs	r2, r0
 800746c:	000b      	movs	r3, r1
 800746e:	0010      	movs	r0, r2
 8007470:	0019      	movs	r1, r3
 8007472:	f007 ff91 	bl	800f398 <round>
 8007476:	2200      	movs	r2, #0
 8007478:	4b0c      	ldr	r3, [pc, #48]	; (80074ac <my_nmea_get_gngll_coordinates+0x1cc>)
 800747a:	f7f9 fcfd 	bl	8000e78 <__aeabi_ddiv>
 800747e:	0002      	movs	r2, r0
 8007480:	000b      	movs	r3, r1
 8007482:	60ba      	str	r2, [r7, #8]
 8007484:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 8007486:	2200      	movs	r2, #0
 8007488:	4b09      	ldr	r3, [pc, #36]	; (80074b0 <my_nmea_get_gngll_coordinates+0x1d0>)
 800748a:	68b8      	ldr	r0, [r7, #8]
 800748c:	68f9      	ldr	r1, [r7, #12]
 800748e:	f7fa f8ed 	bl	800166c <__aeabi_dmul>
 8007492:	0002      	movs	r2, r0
 8007494:	000b      	movs	r3, r1
 8007496:	0010      	movs	r0, r2
 8007498:	0019      	movs	r1, r3
 800749a:	f7fa ff49 	bl	8002330 <__aeabi_d2iz>
 800749e:	0002      	movs	r2, r0
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	605a      	str	r2, [r3, #4]
}
 80074a4:	46c0      	nop			; (mov r8, r8)
 80074a6:	46bd      	mov	sp, r7
 80074a8:	b00d      	add	sp, #52	; 0x34
 80074aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074ac:	412e8480 	.word	0x412e8480
 80074b0:	416312d0 	.word	0x416312d0

080074b4 <malloc>:
 80074b4:	b510      	push	{r4, lr}
 80074b6:	4b03      	ldr	r3, [pc, #12]	; (80074c4 <malloc+0x10>)
 80074b8:	0001      	movs	r1, r0
 80074ba:	6818      	ldr	r0, [r3, #0]
 80074bc:	f000 f80e 	bl	80074dc <_malloc_r>
 80074c0:	bd10      	pop	{r4, pc}
 80074c2:	46c0      	nop			; (mov r8, r8)
 80074c4:	200006b8 	.word	0x200006b8

080074c8 <free>:
 80074c8:	b510      	push	{r4, lr}
 80074ca:	4b03      	ldr	r3, [pc, #12]	; (80074d8 <free+0x10>)
 80074cc:	0001      	movs	r1, r0
 80074ce:	6818      	ldr	r0, [r3, #0]
 80074d0:	f001 fb8c 	bl	8008bec <_free_r>
 80074d4:	bd10      	pop	{r4, pc}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	200006b8 	.word	0x200006b8

080074dc <_malloc_r>:
 80074dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074de:	000d      	movs	r5, r1
 80074e0:	b087      	sub	sp, #28
 80074e2:	350b      	adds	r5, #11
 80074e4:	9001      	str	r0, [sp, #4]
 80074e6:	2d16      	cmp	r5, #22
 80074e8:	d908      	bls.n	80074fc <_malloc_r+0x20>
 80074ea:	2207      	movs	r2, #7
 80074ec:	4395      	bics	r5, r2
 80074ee:	d506      	bpl.n	80074fe <_malloc_r+0x22>
 80074f0:	230c      	movs	r3, #12
 80074f2:	9a01      	ldr	r2, [sp, #4]
 80074f4:	6013      	str	r3, [r2, #0]
 80074f6:	2000      	movs	r0, #0
 80074f8:	b007      	add	sp, #28
 80074fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074fc:	2510      	movs	r5, #16
 80074fe:	42a9      	cmp	r1, r5
 8007500:	d8f6      	bhi.n	80074f0 <_malloc_r+0x14>
 8007502:	9801      	ldr	r0, [sp, #4]
 8007504:	f000 f9fe 	bl	8007904 <__malloc_lock>
 8007508:	23fc      	movs	r3, #252	; 0xfc
 800750a:	4ebe      	ldr	r6, [pc, #760]	; (8007804 <_malloc_r+0x328>)
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	429d      	cmp	r5, r3
 8007510:	d219      	bcs.n	8007546 <_malloc_r+0x6a>
 8007512:	002a      	movs	r2, r5
 8007514:	3208      	adds	r2, #8
 8007516:	18b2      	adds	r2, r6, r2
 8007518:	0011      	movs	r1, r2
 800751a:	6854      	ldr	r4, [r2, #4]
 800751c:	3908      	subs	r1, #8
 800751e:	08eb      	lsrs	r3, r5, #3
 8007520:	428c      	cmp	r4, r1
 8007522:	d103      	bne.n	800752c <_malloc_r+0x50>
 8007524:	68d4      	ldr	r4, [r2, #12]
 8007526:	3302      	adds	r3, #2
 8007528:	42a2      	cmp	r2, r4
 800752a:	d022      	beq.n	8007572 <_malloc_r+0x96>
 800752c:	2203      	movs	r2, #3
 800752e:	6863      	ldr	r3, [r4, #4]
 8007530:	68a1      	ldr	r1, [r4, #8]
 8007532:	4393      	bics	r3, r2
 8007534:	68e2      	ldr	r2, [r4, #12]
 8007536:	18e3      	adds	r3, r4, r3
 8007538:	60ca      	str	r2, [r1, #12]
 800753a:	6091      	str	r1, [r2, #8]
 800753c:	2201      	movs	r2, #1
 800753e:	6859      	ldr	r1, [r3, #4]
 8007540:	430a      	orrs	r2, r1
 8007542:	605a      	str	r2, [r3, #4]
 8007544:	e02a      	b.n	800759c <_malloc_r+0xc0>
 8007546:	233f      	movs	r3, #63	; 0x3f
 8007548:	0a6a      	lsrs	r2, r5, #9
 800754a:	d003      	beq.n	8007554 <_malloc_r+0x78>
 800754c:	2a04      	cmp	r2, #4
 800754e:	d82b      	bhi.n	80075a8 <_malloc_r+0xcc>
 8007550:	09ab      	lsrs	r3, r5, #6
 8007552:	3338      	adds	r3, #56	; 0x38
 8007554:	2203      	movs	r2, #3
 8007556:	4694      	mov	ip, r2
 8007558:	00d9      	lsls	r1, r3, #3
 800755a:	1989      	adds	r1, r1, r6
 800755c:	68cc      	ldr	r4, [r1, #12]
 800755e:	428c      	cmp	r4, r1
 8007560:	d006      	beq.n	8007570 <_malloc_r+0x94>
 8007562:	4660      	mov	r0, ip
 8007564:	6862      	ldr	r2, [r4, #4]
 8007566:	4382      	bics	r2, r0
 8007568:	1b57      	subs	r7, r2, r5
 800756a:	2f0f      	cmp	r7, #15
 800756c:	dd34      	ble.n	80075d8 <_malloc_r+0xfc>
 800756e:	3b01      	subs	r3, #1
 8007570:	3301      	adds	r3, #1
 8007572:	6934      	ldr	r4, [r6, #16]
 8007574:	49a4      	ldr	r1, [pc, #656]	; (8007808 <_malloc_r+0x32c>)
 8007576:	428c      	cmp	r4, r1
 8007578:	d055      	beq.n	8007626 <_malloc_r+0x14a>
 800757a:	2003      	movs	r0, #3
 800757c:	6862      	ldr	r2, [r4, #4]
 800757e:	4382      	bics	r2, r0
 8007580:	1b50      	subs	r0, r2, r5
 8007582:	280f      	cmp	r0, #15
 8007584:	dd36      	ble.n	80075f4 <_malloc_r+0x118>
 8007586:	2301      	movs	r3, #1
 8007588:	1967      	adds	r7, r4, r5
 800758a:	431d      	orrs	r5, r3
 800758c:	4303      	orrs	r3, r0
 800758e:	6065      	str	r5, [r4, #4]
 8007590:	6177      	str	r7, [r6, #20]
 8007592:	6137      	str	r7, [r6, #16]
 8007594:	60f9      	str	r1, [r7, #12]
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	607b      	str	r3, [r7, #4]
 800759a:	50a0      	str	r0, [r4, r2]
 800759c:	9801      	ldr	r0, [sp, #4]
 800759e:	f000 f9b9 	bl	8007914 <__malloc_unlock>
 80075a2:	0020      	movs	r0, r4
 80075a4:	3008      	adds	r0, #8
 80075a6:	e7a7      	b.n	80074f8 <_malloc_r+0x1c>
 80075a8:	2a14      	cmp	r2, #20
 80075aa:	d802      	bhi.n	80075b2 <_malloc_r+0xd6>
 80075ac:	0013      	movs	r3, r2
 80075ae:	335b      	adds	r3, #91	; 0x5b
 80075b0:	e7d0      	b.n	8007554 <_malloc_r+0x78>
 80075b2:	2a54      	cmp	r2, #84	; 0x54
 80075b4:	d802      	bhi.n	80075bc <_malloc_r+0xe0>
 80075b6:	0b2b      	lsrs	r3, r5, #12
 80075b8:	336e      	adds	r3, #110	; 0x6e
 80075ba:	e7cb      	b.n	8007554 <_malloc_r+0x78>
 80075bc:	23aa      	movs	r3, #170	; 0xaa
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d802      	bhi.n	80075ca <_malloc_r+0xee>
 80075c4:	0beb      	lsrs	r3, r5, #15
 80075c6:	3377      	adds	r3, #119	; 0x77
 80075c8:	e7c4      	b.n	8007554 <_malloc_r+0x78>
 80075ca:	4990      	ldr	r1, [pc, #576]	; (800780c <_malloc_r+0x330>)
 80075cc:	237e      	movs	r3, #126	; 0x7e
 80075ce:	428a      	cmp	r2, r1
 80075d0:	d8c0      	bhi.n	8007554 <_malloc_r+0x78>
 80075d2:	0cab      	lsrs	r3, r5, #18
 80075d4:	337c      	adds	r3, #124	; 0x7c
 80075d6:	e7bd      	b.n	8007554 <_malloc_r+0x78>
 80075d8:	68e0      	ldr	r0, [r4, #12]
 80075da:	2f00      	cmp	r7, #0
 80075dc:	db08      	blt.n	80075f0 <_malloc_r+0x114>
 80075de:	68a3      	ldr	r3, [r4, #8]
 80075e0:	60d8      	str	r0, [r3, #12]
 80075e2:	6083      	str	r3, [r0, #8]
 80075e4:	2301      	movs	r3, #1
 80075e6:	18a2      	adds	r2, r4, r2
 80075e8:	6851      	ldr	r1, [r2, #4]
 80075ea:	430b      	orrs	r3, r1
 80075ec:	6053      	str	r3, [r2, #4]
 80075ee:	e7d5      	b.n	800759c <_malloc_r+0xc0>
 80075f0:	0004      	movs	r4, r0
 80075f2:	e7b4      	b.n	800755e <_malloc_r+0x82>
 80075f4:	6171      	str	r1, [r6, #20]
 80075f6:	6131      	str	r1, [r6, #16]
 80075f8:	2800      	cmp	r0, #0
 80075fa:	daf3      	bge.n	80075e4 <_malloc_r+0x108>
 80075fc:	6871      	ldr	r1, [r6, #4]
 80075fe:	468c      	mov	ip, r1
 8007600:	2180      	movs	r1, #128	; 0x80
 8007602:	0089      	lsls	r1, r1, #2
 8007604:	428a      	cmp	r2, r1
 8007606:	d300      	bcc.n	800760a <_malloc_r+0x12e>
 8007608:	e08c      	b.n	8007724 <_malloc_r+0x248>
 800760a:	08d1      	lsrs	r1, r2, #3
 800760c:	0950      	lsrs	r0, r2, #5
 800760e:	2201      	movs	r2, #1
 8007610:	4082      	lsls	r2, r0
 8007612:	4660      	mov	r0, ip
 8007614:	4302      	orrs	r2, r0
 8007616:	6072      	str	r2, [r6, #4]
 8007618:	00ca      	lsls	r2, r1, #3
 800761a:	1992      	adds	r2, r2, r6
 800761c:	6891      	ldr	r1, [r2, #8]
 800761e:	60e2      	str	r2, [r4, #12]
 8007620:	60a1      	str	r1, [r4, #8]
 8007622:	6094      	str	r4, [r2, #8]
 8007624:	60cc      	str	r4, [r1, #12]
 8007626:	2201      	movs	r2, #1
 8007628:	4876      	ldr	r0, [pc, #472]	; (8007804 <_malloc_r+0x328>)
 800762a:	1099      	asrs	r1, r3, #2
 800762c:	408a      	lsls	r2, r1
 800762e:	6841      	ldr	r1, [r0, #4]
 8007630:	4291      	cmp	r1, r2
 8007632:	d328      	bcc.n	8007686 <_malloc_r+0x1aa>
 8007634:	420a      	tst	r2, r1
 8007636:	d105      	bne.n	8007644 <_malloc_r+0x168>
 8007638:	2403      	movs	r4, #3
 800763a:	43a3      	bics	r3, r4
 800763c:	0052      	lsls	r2, r2, #1
 800763e:	3304      	adds	r3, #4
 8007640:	420a      	tst	r2, r1
 8007642:	d0fb      	beq.n	800763c <_malloc_r+0x160>
 8007644:	496f      	ldr	r1, [pc, #444]	; (8007804 <_malloc_r+0x328>)
 8007646:	9104      	str	r1, [sp, #16]
 8007648:	00d9      	lsls	r1, r3, #3
 800764a:	1841      	adds	r1, r0, r1
 800764c:	468c      	mov	ip, r1
 800764e:	000f      	movs	r7, r1
 8007650:	9302      	str	r3, [sp, #8]
 8007652:	68fc      	ldr	r4, [r7, #12]
 8007654:	42bc      	cmp	r4, r7
 8007656:	d000      	beq.n	800765a <_malloc_r+0x17e>
 8007658:	e09b      	b.n	8007792 <_malloc_r+0x2b6>
 800765a:	2403      	movs	r4, #3
 800765c:	9902      	ldr	r1, [sp, #8]
 800765e:	3708      	adds	r7, #8
 8007660:	3101      	adds	r1, #1
 8007662:	9102      	str	r1, [sp, #8]
 8007664:	4221      	tst	r1, r4
 8007666:	d1f4      	bne.n	8007652 <_malloc_r+0x176>
 8007668:	2103      	movs	r1, #3
 800766a:	420b      	tst	r3, r1
 800766c:	d000      	beq.n	8007670 <_malloc_r+0x194>
 800766e:	e0b7      	b.n	80077e0 <_malloc_r+0x304>
 8007670:	6843      	ldr	r3, [r0, #4]
 8007672:	4393      	bics	r3, r2
 8007674:	6043      	str	r3, [r0, #4]
 8007676:	9b04      	ldr	r3, [sp, #16]
 8007678:	0052      	lsls	r2, r2, #1
 800767a:	6859      	ldr	r1, [r3, #4]
 800767c:	4291      	cmp	r1, r2
 800767e:	d302      	bcc.n	8007686 <_malloc_r+0x1aa>
 8007680:	2a00      	cmp	r2, #0
 8007682:	d000      	beq.n	8007686 <_malloc_r+0x1aa>
 8007684:	e0bb      	b.n	80077fe <_malloc_r+0x322>
 8007686:	2203      	movs	r2, #3
 8007688:	6883      	ldr	r3, [r0, #8]
 800768a:	9302      	str	r3, [sp, #8]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	4393      	bics	r3, r2
 8007690:	9303      	str	r3, [sp, #12]
 8007692:	42ab      	cmp	r3, r5
 8007694:	d303      	bcc.n	800769e <_malloc_r+0x1c2>
 8007696:	1b59      	subs	r1, r3, r5
 8007698:	290f      	cmp	r1, #15
 800769a:	dd00      	ble.n	800769e <_malloc_r+0x1c2>
 800769c:	e123      	b.n	80078e6 <_malloc_r+0x40a>
 800769e:	9b02      	ldr	r3, [sp, #8]
 80076a0:	9a03      	ldr	r2, [sp, #12]
 80076a2:	2008      	movs	r0, #8
 80076a4:	189e      	adds	r6, r3, r2
 80076a6:	4b5a      	ldr	r3, [pc, #360]	; (8007810 <_malloc_r+0x334>)
 80076a8:	681f      	ldr	r7, [r3, #0]
 80076aa:	f001 fa19 	bl	8008ae0 <sysconf>
 80076ae:	4b59      	ldr	r3, [pc, #356]	; (8007814 <_malloc_r+0x338>)
 80076b0:	3710      	adds	r7, #16
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	197f      	adds	r7, r7, r5
 80076b6:	9004      	str	r0, [sp, #16]
 80076b8:	3301      	adds	r3, #1
 80076ba:	d003      	beq.n	80076c4 <_malloc_r+0x1e8>
 80076bc:	1e7b      	subs	r3, r7, #1
 80076be:	181b      	adds	r3, r3, r0
 80076c0:	4247      	negs	r7, r0
 80076c2:	401f      	ands	r7, r3
 80076c4:	0039      	movs	r1, r7
 80076c6:	9801      	ldr	r0, [sp, #4]
 80076c8:	f001 f9b6 	bl	8008a38 <_sbrk_r>
 80076cc:	0004      	movs	r4, r0
 80076ce:	1c43      	adds	r3, r0, #1
 80076d0:	d100      	bne.n	80076d4 <_malloc_r+0x1f8>
 80076d2:	e0de      	b.n	8007892 <_malloc_r+0x3b6>
 80076d4:	4286      	cmp	r6, r0
 80076d6:	d904      	bls.n	80076e2 <_malloc_r+0x206>
 80076d8:	4b4a      	ldr	r3, [pc, #296]	; (8007804 <_malloc_r+0x328>)
 80076da:	9a02      	ldr	r2, [sp, #8]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d000      	beq.n	80076e2 <_malloc_r+0x206>
 80076e0:	e0d7      	b.n	8007892 <_malloc_r+0x3b6>
 80076e2:	4a4d      	ldr	r2, [pc, #308]	; (8007818 <_malloc_r+0x33c>)
 80076e4:	6813      	ldr	r3, [r2, #0]
 80076e6:	18fb      	adds	r3, r7, r3
 80076e8:	6013      	str	r3, [r2, #0]
 80076ea:	9a04      	ldr	r2, [sp, #16]
 80076ec:	3a01      	subs	r2, #1
 80076ee:	42a6      	cmp	r6, r4
 80076f0:	d000      	beq.n	80076f4 <_malloc_r+0x218>
 80076f2:	e097      	b.n	8007824 <_malloc_r+0x348>
 80076f4:	4216      	tst	r6, r2
 80076f6:	d000      	beq.n	80076fa <_malloc_r+0x21e>
 80076f8:	e094      	b.n	8007824 <_malloc_r+0x348>
 80076fa:	4b42      	ldr	r3, [pc, #264]	; (8007804 <_malloc_r+0x328>)
 80076fc:	689a      	ldr	r2, [r3, #8]
 80076fe:	9b03      	ldr	r3, [sp, #12]
 8007700:	19df      	adds	r7, r3, r7
 8007702:	2301      	movs	r3, #1
 8007704:	433b      	orrs	r3, r7
 8007706:	6053      	str	r3, [r2, #4]
 8007708:	4b43      	ldr	r3, [pc, #268]	; (8007818 <_malloc_r+0x33c>)
 800770a:	4a44      	ldr	r2, [pc, #272]	; (800781c <_malloc_r+0x340>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6811      	ldr	r1, [r2, #0]
 8007710:	428b      	cmp	r3, r1
 8007712:	d900      	bls.n	8007716 <_malloc_r+0x23a>
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	4a42      	ldr	r2, [pc, #264]	; (8007820 <_malloc_r+0x344>)
 8007718:	6811      	ldr	r1, [r2, #0]
 800771a:	428b      	cmp	r3, r1
 800771c:	d800      	bhi.n	8007720 <_malloc_r+0x244>
 800771e:	e0b8      	b.n	8007892 <_malloc_r+0x3b6>
 8007720:	6013      	str	r3, [r2, #0]
 8007722:	e0b6      	b.n	8007892 <_malloc_r+0x3b6>
 8007724:	0a50      	lsrs	r0, r2, #9
 8007726:	2804      	cmp	r0, #4
 8007728:	d811      	bhi.n	800774e <_malloc_r+0x272>
 800772a:	0991      	lsrs	r1, r2, #6
 800772c:	3138      	adds	r1, #56	; 0x38
 800772e:	00cf      	lsls	r7, r1, #3
 8007730:	19bf      	adds	r7, r7, r6
 8007732:	68b8      	ldr	r0, [r7, #8]
 8007734:	4287      	cmp	r7, r0
 8007736:	d125      	bne.n	8007784 <_malloc_r+0x2a8>
 8007738:	2201      	movs	r2, #1
 800773a:	1089      	asrs	r1, r1, #2
 800773c:	408a      	lsls	r2, r1
 800773e:	4661      	mov	r1, ip
 8007740:	430a      	orrs	r2, r1
 8007742:	6072      	str	r2, [r6, #4]
 8007744:	60e7      	str	r7, [r4, #12]
 8007746:	60a0      	str	r0, [r4, #8]
 8007748:	60bc      	str	r4, [r7, #8]
 800774a:	60c4      	str	r4, [r0, #12]
 800774c:	e76b      	b.n	8007626 <_malloc_r+0x14a>
 800774e:	2814      	cmp	r0, #20
 8007750:	d802      	bhi.n	8007758 <_malloc_r+0x27c>
 8007752:	0001      	movs	r1, r0
 8007754:	315b      	adds	r1, #91	; 0x5b
 8007756:	e7ea      	b.n	800772e <_malloc_r+0x252>
 8007758:	2854      	cmp	r0, #84	; 0x54
 800775a:	d802      	bhi.n	8007762 <_malloc_r+0x286>
 800775c:	0b11      	lsrs	r1, r2, #12
 800775e:	316e      	adds	r1, #110	; 0x6e
 8007760:	e7e5      	b.n	800772e <_malloc_r+0x252>
 8007762:	21aa      	movs	r1, #170	; 0xaa
 8007764:	0049      	lsls	r1, r1, #1
 8007766:	4288      	cmp	r0, r1
 8007768:	d802      	bhi.n	8007770 <_malloc_r+0x294>
 800776a:	0bd1      	lsrs	r1, r2, #15
 800776c:	3177      	adds	r1, #119	; 0x77
 800776e:	e7de      	b.n	800772e <_malloc_r+0x252>
 8007770:	4f26      	ldr	r7, [pc, #152]	; (800780c <_malloc_r+0x330>)
 8007772:	217e      	movs	r1, #126	; 0x7e
 8007774:	42b8      	cmp	r0, r7
 8007776:	d8da      	bhi.n	800772e <_malloc_r+0x252>
 8007778:	0c91      	lsrs	r1, r2, #18
 800777a:	317c      	adds	r1, #124	; 0x7c
 800777c:	e7d7      	b.n	800772e <_malloc_r+0x252>
 800777e:	6880      	ldr	r0, [r0, #8]
 8007780:	4287      	cmp	r7, r0
 8007782:	d004      	beq.n	800778e <_malloc_r+0x2b2>
 8007784:	2603      	movs	r6, #3
 8007786:	6841      	ldr	r1, [r0, #4]
 8007788:	43b1      	bics	r1, r6
 800778a:	4291      	cmp	r1, r2
 800778c:	d8f7      	bhi.n	800777e <_malloc_r+0x2a2>
 800778e:	68c7      	ldr	r7, [r0, #12]
 8007790:	e7d8      	b.n	8007744 <_malloc_r+0x268>
 8007792:	2603      	movs	r6, #3
 8007794:	6861      	ldr	r1, [r4, #4]
 8007796:	43b1      	bics	r1, r6
 8007798:	9103      	str	r1, [sp, #12]
 800779a:	68e6      	ldr	r6, [r4, #12]
 800779c:	1b49      	subs	r1, r1, r5
 800779e:	290f      	cmp	r1, #15
 80077a0:	dd10      	ble.n	80077c4 <_malloc_r+0x2e8>
 80077a2:	2201      	movs	r2, #1
 80077a4:	1963      	adds	r3, r4, r5
 80077a6:	4315      	orrs	r5, r2
 80077a8:	6065      	str	r5, [r4, #4]
 80077aa:	68a5      	ldr	r5, [r4, #8]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	60ee      	str	r6, [r5, #12]
 80077b0:	60b5      	str	r5, [r6, #8]
 80077b2:	6143      	str	r3, [r0, #20]
 80077b4:	6103      	str	r3, [r0, #16]
 80077b6:	4814      	ldr	r0, [pc, #80]	; (8007808 <_malloc_r+0x32c>)
 80077b8:	605a      	str	r2, [r3, #4]
 80077ba:	60d8      	str	r0, [r3, #12]
 80077bc:	6098      	str	r0, [r3, #8]
 80077be:	9b03      	ldr	r3, [sp, #12]
 80077c0:	50e1      	str	r1, [r4, r3]
 80077c2:	e6eb      	b.n	800759c <_malloc_r+0xc0>
 80077c4:	2900      	cmp	r1, #0
 80077c6:	db09      	blt.n	80077dc <_malloc_r+0x300>
 80077c8:	9b03      	ldr	r3, [sp, #12]
 80077ca:	18e1      	adds	r1, r4, r3
 80077cc:	2301      	movs	r3, #1
 80077ce:	684a      	ldr	r2, [r1, #4]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	604b      	str	r3, [r1, #4]
 80077d4:	68a3      	ldr	r3, [r4, #8]
 80077d6:	60de      	str	r6, [r3, #12]
 80077d8:	60b3      	str	r3, [r6, #8]
 80077da:	e6df      	b.n	800759c <_malloc_r+0xc0>
 80077dc:	0034      	movs	r4, r6
 80077de:	e739      	b.n	8007654 <_malloc_r+0x178>
 80077e0:	2108      	movs	r1, #8
 80077e2:	4249      	negs	r1, r1
 80077e4:	448c      	add	ip, r1
 80077e6:	4661      	mov	r1, ip
 80077e8:	6889      	ldr	r1, [r1, #8]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	4561      	cmp	r1, ip
 80077ee:	d100      	bne.n	80077f2 <_malloc_r+0x316>
 80077f0:	e73a      	b.n	8007668 <_malloc_r+0x18c>
 80077f2:	e740      	b.n	8007676 <_malloc_r+0x19a>
 80077f4:	3304      	adds	r3, #4
 80077f6:	0052      	lsls	r2, r2, #1
 80077f8:	420a      	tst	r2, r1
 80077fa:	d0fb      	beq.n	80077f4 <_malloc_r+0x318>
 80077fc:	e724      	b.n	8007648 <_malloc_r+0x16c>
 80077fe:	9b02      	ldr	r3, [sp, #8]
 8007800:	e7fa      	b.n	80077f8 <_malloc_r+0x31c>
 8007802:	46c0      	nop			; (mov r8, r8)
 8007804:	20000010 	.word	0x20000010
 8007808:	20000018 	.word	0x20000018
 800780c:	00000554 	.word	0x00000554
 8007810:	20000a74 	.word	0x20000a74
 8007814:	20000418 	.word	0x20000418
 8007818:	20000a44 	.word	0x20000a44
 800781c:	20000a6c 	.word	0x20000a6c
 8007820:	20000a70 	.word	0x20000a70
 8007824:	4934      	ldr	r1, [pc, #208]	; (80078f8 <_malloc_r+0x41c>)
 8007826:	6808      	ldr	r0, [r1, #0]
 8007828:	3001      	adds	r0, #1
 800782a:	d140      	bne.n	80078ae <_malloc_r+0x3d2>
 800782c:	600c      	str	r4, [r1, #0]
 800782e:	2107      	movs	r1, #7
 8007830:	0026      	movs	r6, r4
 8007832:	2300      	movs	r3, #0
 8007834:	400e      	ands	r6, r1
 8007836:	420c      	tst	r4, r1
 8007838:	d002      	beq.n	8007840 <_malloc_r+0x364>
 800783a:	3308      	adds	r3, #8
 800783c:	1b9b      	subs	r3, r3, r6
 800783e:	18e4      	adds	r4, r4, r3
 8007840:	19e1      	adds	r1, r4, r7
 8007842:	9105      	str	r1, [sp, #20]
 8007844:	9f05      	ldr	r7, [sp, #20]
 8007846:	9904      	ldr	r1, [sp, #16]
 8007848:	4017      	ands	r7, r2
 800784a:	18cb      	adds	r3, r1, r3
 800784c:	1bdf      	subs	r7, r3, r7
 800784e:	4017      	ands	r7, r2
 8007850:	0039      	movs	r1, r7
 8007852:	9801      	ldr	r0, [sp, #4]
 8007854:	f001 f8f0 	bl	8008a38 <_sbrk_r>
 8007858:	1c43      	adds	r3, r0, #1
 800785a:	d107      	bne.n	800786c <_malloc_r+0x390>
 800785c:	1e37      	subs	r7, r6, #0
 800785e:	9805      	ldr	r0, [sp, #20]
 8007860:	d004      	beq.n	800786c <_malloc_r+0x390>
 8007862:	0030      	movs	r0, r6
 8007864:	2700      	movs	r7, #0
 8007866:	9b05      	ldr	r3, [sp, #20]
 8007868:	3808      	subs	r0, #8
 800786a:	1818      	adds	r0, r3, r0
 800786c:	4a23      	ldr	r2, [pc, #140]	; (80078fc <_malloc_r+0x420>)
 800786e:	1b00      	subs	r0, r0, r4
 8007870:	6813      	ldr	r3, [r2, #0]
 8007872:	19c0      	adds	r0, r0, r7
 8007874:	19db      	adds	r3, r3, r7
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	2201      	movs	r2, #1
 800787a:	4b21      	ldr	r3, [pc, #132]	; (8007900 <_malloc_r+0x424>)
 800787c:	9902      	ldr	r1, [sp, #8]
 800787e:	4310      	orrs	r0, r2
 8007880:	609c      	str	r4, [r3, #8]
 8007882:	6060      	str	r0, [r4, #4]
 8007884:	4299      	cmp	r1, r3
 8007886:	d100      	bne.n	800788a <_malloc_r+0x3ae>
 8007888:	e73e      	b.n	8007708 <_malloc_r+0x22c>
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	2b0f      	cmp	r3, #15
 800788e:	d813      	bhi.n	80078b8 <_malloc_r+0x3dc>
 8007890:	6062      	str	r2, [r4, #4]
 8007892:	2203      	movs	r2, #3
 8007894:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <_malloc_r+0x424>)
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	4393      	bics	r3, r2
 800789c:	1b59      	subs	r1, r3, r5
 800789e:	42ab      	cmp	r3, r5
 80078a0:	d301      	bcc.n	80078a6 <_malloc_r+0x3ca>
 80078a2:	290f      	cmp	r1, #15
 80078a4:	dc1f      	bgt.n	80078e6 <_malloc_r+0x40a>
 80078a6:	9801      	ldr	r0, [sp, #4]
 80078a8:	f000 f834 	bl	8007914 <__malloc_unlock>
 80078ac:	e623      	b.n	80074f6 <_malloc_r+0x1a>
 80078ae:	4913      	ldr	r1, [pc, #76]	; (80078fc <_malloc_r+0x420>)
 80078b0:	1ba6      	subs	r6, r4, r6
 80078b2:	18f6      	adds	r6, r6, r3
 80078b4:	600e      	str	r6, [r1, #0]
 80078b6:	e7ba      	b.n	800782e <_malloc_r+0x352>
 80078b8:	2107      	movs	r1, #7
 80078ba:	9b03      	ldr	r3, [sp, #12]
 80078bc:	3b0c      	subs	r3, #12
 80078be:	438b      	bics	r3, r1
 80078c0:	9902      	ldr	r1, [sp, #8]
 80078c2:	6849      	ldr	r1, [r1, #4]
 80078c4:	400a      	ands	r2, r1
 80078c6:	9902      	ldr	r1, [sp, #8]
 80078c8:	431a      	orrs	r2, r3
 80078ca:	604a      	str	r2, [r1, #4]
 80078cc:	18ca      	adds	r2, r1, r3
 80078ce:	2105      	movs	r1, #5
 80078d0:	6051      	str	r1, [r2, #4]
 80078d2:	6091      	str	r1, [r2, #8]
 80078d4:	2b0f      	cmp	r3, #15
 80078d6:	d800      	bhi.n	80078da <_malloc_r+0x3fe>
 80078d8:	e716      	b.n	8007708 <_malloc_r+0x22c>
 80078da:	9902      	ldr	r1, [sp, #8]
 80078dc:	9801      	ldr	r0, [sp, #4]
 80078de:	3108      	adds	r1, #8
 80078e0:	f001 f984 	bl	8008bec <_free_r>
 80078e4:	e710      	b.n	8007708 <_malloc_r+0x22c>
 80078e6:	2201      	movs	r2, #1
 80078e8:	0013      	movs	r3, r2
 80078ea:	4805      	ldr	r0, [pc, #20]	; (8007900 <_malloc_r+0x424>)
 80078ec:	432b      	orrs	r3, r5
 80078ee:	6884      	ldr	r4, [r0, #8]
 80078f0:	6063      	str	r3, [r4, #4]
 80078f2:	1963      	adds	r3, r4, r5
 80078f4:	6083      	str	r3, [r0, #8]
 80078f6:	e623      	b.n	8007540 <_malloc_r+0x64>
 80078f8:	20000418 	.word	0x20000418
 80078fc:	20000a44 	.word	0x20000a44
 8007900:	20000010 	.word	0x20000010

08007904 <__malloc_lock>:
 8007904:	b510      	push	{r4, lr}
 8007906:	4802      	ldr	r0, [pc, #8]	; (8007910 <__malloc_lock+0xc>)
 8007908:	f001 f8e8 	bl	8008adc <__retarget_lock_acquire_recursive>
 800790c:	bd10      	pop	{r4, pc}
 800790e:	46c0      	nop			; (mov r8, r8)
 8007910:	20000bb9 	.word	0x20000bb9

08007914 <__malloc_unlock>:
 8007914:	b510      	push	{r4, lr}
 8007916:	4802      	ldr	r0, [pc, #8]	; (8007920 <__malloc_unlock+0xc>)
 8007918:	f001 f8e1 	bl	8008ade <__retarget_lock_release_recursive>
 800791c:	bd10      	pop	{r4, pc}
 800791e:	46c0      	nop			; (mov r8, r8)
 8007920:	20000bb9 	.word	0x20000bb9

08007924 <sulp>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	0016      	movs	r6, r2
 8007928:	000d      	movs	r5, r1
 800792a:	f002 f8b5 	bl	8009a98 <__ulp>
 800792e:	2e00      	cmp	r6, #0
 8007930:	d00d      	beq.n	800794e <sulp+0x2a>
 8007932:	236b      	movs	r3, #107	; 0x6b
 8007934:	006a      	lsls	r2, r5, #1
 8007936:	0d52      	lsrs	r2, r2, #21
 8007938:	1a9b      	subs	r3, r3, r2
 800793a:	2b00      	cmp	r3, #0
 800793c:	dd07      	ble.n	800794e <sulp+0x2a>
 800793e:	2400      	movs	r4, #0
 8007940:	4a03      	ldr	r2, [pc, #12]	; (8007950 <sulp+0x2c>)
 8007942:	051b      	lsls	r3, r3, #20
 8007944:	189d      	adds	r5, r3, r2
 8007946:	002b      	movs	r3, r5
 8007948:	0022      	movs	r2, r4
 800794a:	f7f9 fe8f 	bl	800166c <__aeabi_dmul>
 800794e:	bd70      	pop	{r4, r5, r6, pc}
 8007950:	3ff00000 	.word	0x3ff00000

08007954 <_strtod_l>:
 8007954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007956:	b0a1      	sub	sp, #132	; 0x84
 8007958:	9219      	str	r2, [sp, #100]	; 0x64
 800795a:	2200      	movs	r2, #0
 800795c:	2600      	movs	r6, #0
 800795e:	2700      	movs	r7, #0
 8007960:	9004      	str	r0, [sp, #16]
 8007962:	9107      	str	r1, [sp, #28]
 8007964:	921c      	str	r2, [sp, #112]	; 0x70
 8007966:	911b      	str	r1, [sp, #108]	; 0x6c
 8007968:	780a      	ldrb	r2, [r1, #0]
 800796a:	2a2b      	cmp	r2, #43	; 0x2b
 800796c:	d055      	beq.n	8007a1a <_strtod_l+0xc6>
 800796e:	d841      	bhi.n	80079f4 <_strtod_l+0xa0>
 8007970:	2a0d      	cmp	r2, #13
 8007972:	d83b      	bhi.n	80079ec <_strtod_l+0x98>
 8007974:	2a08      	cmp	r2, #8
 8007976:	d83b      	bhi.n	80079f0 <_strtod_l+0x9c>
 8007978:	2a00      	cmp	r2, #0
 800797a:	d044      	beq.n	8007a06 <_strtod_l+0xb2>
 800797c:	2200      	movs	r2, #0
 800797e:	920f      	str	r2, [sp, #60]	; 0x3c
 8007980:	2100      	movs	r1, #0
 8007982:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007984:	9109      	str	r1, [sp, #36]	; 0x24
 8007986:	782a      	ldrb	r2, [r5, #0]
 8007988:	2a30      	cmp	r2, #48	; 0x30
 800798a:	d000      	beq.n	800798e <_strtod_l+0x3a>
 800798c:	e085      	b.n	8007a9a <_strtod_l+0x146>
 800798e:	786a      	ldrb	r2, [r5, #1]
 8007990:	3120      	adds	r1, #32
 8007992:	438a      	bics	r2, r1
 8007994:	2a58      	cmp	r2, #88	; 0x58
 8007996:	d000      	beq.n	800799a <_strtod_l+0x46>
 8007998:	e075      	b.n	8007a86 <_strtod_l+0x132>
 800799a:	9302      	str	r3, [sp, #8]
 800799c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800799e:	4a97      	ldr	r2, [pc, #604]	; (8007bfc <_strtod_l+0x2a8>)
 80079a0:	9301      	str	r3, [sp, #4]
 80079a2:	ab1c      	add	r3, sp, #112	; 0x70
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	9804      	ldr	r0, [sp, #16]
 80079a8:	ab1d      	add	r3, sp, #116	; 0x74
 80079aa:	a91b      	add	r1, sp, #108	; 0x6c
 80079ac:	f001 fa3a 	bl	8008e24 <__gethex>
 80079b0:	230f      	movs	r3, #15
 80079b2:	0002      	movs	r2, r0
 80079b4:	401a      	ands	r2, r3
 80079b6:	0004      	movs	r4, r0
 80079b8:	9205      	str	r2, [sp, #20]
 80079ba:	4218      	tst	r0, r3
 80079bc:	d005      	beq.n	80079ca <_strtod_l+0x76>
 80079be:	2a06      	cmp	r2, #6
 80079c0:	d12d      	bne.n	8007a1e <_strtod_l+0xca>
 80079c2:	1c6b      	adds	r3, r5, #1
 80079c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80079c6:	2300      	movs	r3, #0
 80079c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80079ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <_strtod_l+0x82>
 80079d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01b      	beq.n	8007a14 <_strtod_l+0xc0>
 80079dc:	2380      	movs	r3, #128	; 0x80
 80079de:	0032      	movs	r2, r6
 80079e0:	061b      	lsls	r3, r3, #24
 80079e2:	18fb      	adds	r3, r7, r3
 80079e4:	0010      	movs	r0, r2
 80079e6:	0019      	movs	r1, r3
 80079e8:	b021      	add	sp, #132	; 0x84
 80079ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ec:	2a20      	cmp	r2, #32
 80079ee:	d1c5      	bne.n	800797c <_strtod_l+0x28>
 80079f0:	3101      	adds	r1, #1
 80079f2:	e7b8      	b.n	8007966 <_strtod_l+0x12>
 80079f4:	2a2d      	cmp	r2, #45	; 0x2d
 80079f6:	d1c1      	bne.n	800797c <_strtod_l+0x28>
 80079f8:	3a2c      	subs	r2, #44	; 0x2c
 80079fa:	920f      	str	r2, [sp, #60]	; 0x3c
 80079fc:	1c4a      	adds	r2, r1, #1
 80079fe:	921b      	str	r2, [sp, #108]	; 0x6c
 8007a00:	784a      	ldrb	r2, [r1, #1]
 8007a02:	2a00      	cmp	r2, #0
 8007a04:	d1bc      	bne.n	8007980 <_strtod_l+0x2c>
 8007a06:	9b07      	ldr	r3, [sp, #28]
 8007a08:	931b      	str	r3, [sp, #108]	; 0x6c
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1dd      	bne.n	80079d0 <_strtod_l+0x7c>
 8007a14:	0032      	movs	r2, r6
 8007a16:	003b      	movs	r3, r7
 8007a18:	e7e4      	b.n	80079e4 <_strtod_l+0x90>
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	e7ed      	b.n	80079fa <_strtod_l+0xa6>
 8007a1e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007a20:	2a00      	cmp	r2, #0
 8007a22:	d007      	beq.n	8007a34 <_strtod_l+0xe0>
 8007a24:	2135      	movs	r1, #53	; 0x35
 8007a26:	a81e      	add	r0, sp, #120	; 0x78
 8007a28:	f002 f927 	bl	8009c7a <__copybits>
 8007a2c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007a2e:	9804      	ldr	r0, [sp, #16]
 8007a30:	f001 fd24 	bl	800947c <_Bfree>
 8007a34:	9805      	ldr	r0, [sp, #20]
 8007a36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a38:	3801      	subs	r0, #1
 8007a3a:	2804      	cmp	r0, #4
 8007a3c:	d806      	bhi.n	8007a4c <_strtod_l+0xf8>
 8007a3e:	f7f8 fb69 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007a42:	0312      	.short	0x0312
 8007a44:	1e1c      	.short	0x1e1c
 8007a46:	12          	.byte	0x12
 8007a47:	00          	.byte	0x00
 8007a48:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007a4a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8007a4c:	05e4      	lsls	r4, r4, #23
 8007a4e:	d502      	bpl.n	8007a56 <_strtod_l+0x102>
 8007a50:	2380      	movs	r3, #128	; 0x80
 8007a52:	061b      	lsls	r3, r3, #24
 8007a54:	431f      	orrs	r7, r3
 8007a56:	4b6a      	ldr	r3, [pc, #424]	; (8007c00 <_strtod_l+0x2ac>)
 8007a58:	423b      	tst	r3, r7
 8007a5a:	d1b6      	bne.n	80079ca <_strtod_l+0x76>
 8007a5c:	f001 f812 	bl	8008a84 <__errno>
 8007a60:	2322      	movs	r3, #34	; 0x22
 8007a62:	6003      	str	r3, [r0, #0]
 8007a64:	e7b1      	b.n	80079ca <_strtod_l+0x76>
 8007a66:	4967      	ldr	r1, [pc, #412]	; (8007c04 <_strtod_l+0x2b0>)
 8007a68:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007a6a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007a6c:	400a      	ands	r2, r1
 8007a6e:	4966      	ldr	r1, [pc, #408]	; (8007c08 <_strtod_l+0x2b4>)
 8007a70:	185b      	adds	r3, r3, r1
 8007a72:	051b      	lsls	r3, r3, #20
 8007a74:	431a      	orrs	r2, r3
 8007a76:	0017      	movs	r7, r2
 8007a78:	e7e8      	b.n	8007a4c <_strtod_l+0xf8>
 8007a7a:	4f61      	ldr	r7, [pc, #388]	; (8007c00 <_strtod_l+0x2ac>)
 8007a7c:	e7e6      	b.n	8007a4c <_strtod_l+0xf8>
 8007a7e:	2601      	movs	r6, #1
 8007a80:	4f62      	ldr	r7, [pc, #392]	; (8007c0c <_strtod_l+0x2b8>)
 8007a82:	4276      	negs	r6, r6
 8007a84:	e7e2      	b.n	8007a4c <_strtod_l+0xf8>
 8007a86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a88:	1c5a      	adds	r2, r3, #1
 8007a8a:	921b      	str	r2, [sp, #108]	; 0x6c
 8007a8c:	785b      	ldrb	r3, [r3, #1]
 8007a8e:	2b30      	cmp	r3, #48	; 0x30
 8007a90:	d0f9      	beq.n	8007a86 <_strtod_l+0x132>
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d099      	beq.n	80079ca <_strtod_l+0x76>
 8007a96:	2301      	movs	r3, #1
 8007a98:	9309      	str	r3, [sp, #36]	; 0x24
 8007a9a:	2500      	movs	r5, #0
 8007a9c:	220a      	movs	r2, #10
 8007a9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007aa0:	950d      	str	r5, [sp, #52]	; 0x34
 8007aa2:	9310      	str	r3, [sp, #64]	; 0x40
 8007aa4:	9508      	str	r5, [sp, #32]
 8007aa6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007aa8:	7804      	ldrb	r4, [r0, #0]
 8007aaa:	0023      	movs	r3, r4
 8007aac:	3b30      	subs	r3, #48	; 0x30
 8007aae:	b2d9      	uxtb	r1, r3
 8007ab0:	2909      	cmp	r1, #9
 8007ab2:	d927      	bls.n	8007b04 <_strtod_l+0x1b0>
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	4956      	ldr	r1, [pc, #344]	; (8007c10 <_strtod_l+0x2bc>)
 8007ab8:	f000 ff56 	bl	8008968 <strncmp>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d031      	beq.n	8007b24 <_strtod_l+0x1d0>
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	0023      	movs	r3, r4
 8007ac4:	4684      	mov	ip, r0
 8007ac6:	9a08      	ldr	r2, [sp, #32]
 8007ac8:	900c      	str	r0, [sp, #48]	; 0x30
 8007aca:	9205      	str	r2, [sp, #20]
 8007acc:	2220      	movs	r2, #32
 8007ace:	0019      	movs	r1, r3
 8007ad0:	4391      	bics	r1, r2
 8007ad2:	000a      	movs	r2, r1
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	9106      	str	r1, [sp, #24]
 8007ad8:	2a45      	cmp	r2, #69	; 0x45
 8007ada:	d000      	beq.n	8007ade <_strtod_l+0x18a>
 8007adc:	e0c2      	b.n	8007c64 <_strtod_l+0x310>
 8007ade:	9b05      	ldr	r3, [sp, #20]
 8007ae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ae2:	4303      	orrs	r3, r0
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	428b      	cmp	r3, r1
 8007ae8:	d08d      	beq.n	8007a06 <_strtod_l+0xb2>
 8007aea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007aec:	9307      	str	r3, [sp, #28]
 8007aee:	3301      	adds	r3, #1
 8007af0:	931b      	str	r3, [sp, #108]	; 0x6c
 8007af2:	9b07      	ldr	r3, [sp, #28]
 8007af4:	785b      	ldrb	r3, [r3, #1]
 8007af6:	2b2b      	cmp	r3, #43	; 0x2b
 8007af8:	d071      	beq.n	8007bde <_strtod_l+0x28a>
 8007afa:	000c      	movs	r4, r1
 8007afc:	2b2d      	cmp	r3, #45	; 0x2d
 8007afe:	d174      	bne.n	8007bea <_strtod_l+0x296>
 8007b00:	2401      	movs	r4, #1
 8007b02:	e06d      	b.n	8007be0 <_strtod_l+0x28c>
 8007b04:	9908      	ldr	r1, [sp, #32]
 8007b06:	2908      	cmp	r1, #8
 8007b08:	dc09      	bgt.n	8007b1e <_strtod_l+0x1ca>
 8007b0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007b0c:	4351      	muls	r1, r2
 8007b0e:	185b      	adds	r3, r3, r1
 8007b10:	930d      	str	r3, [sp, #52]	; 0x34
 8007b12:	9b08      	ldr	r3, [sp, #32]
 8007b14:	3001      	adds	r0, #1
 8007b16:	3301      	adds	r3, #1
 8007b18:	9308      	str	r3, [sp, #32]
 8007b1a:	901b      	str	r0, [sp, #108]	; 0x6c
 8007b1c:	e7c3      	b.n	8007aa6 <_strtod_l+0x152>
 8007b1e:	4355      	muls	r5, r2
 8007b20:	195d      	adds	r5, r3, r5
 8007b22:	e7f6      	b.n	8007b12 <_strtod_l+0x1be>
 8007b24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	921b      	str	r2, [sp, #108]	; 0x6c
 8007b2a:	9a08      	ldr	r2, [sp, #32]
 8007b2c:	785b      	ldrb	r3, [r3, #1]
 8007b2e:	2a00      	cmp	r2, #0
 8007b30:	d03a      	beq.n	8007ba8 <_strtod_l+0x254>
 8007b32:	900c      	str	r0, [sp, #48]	; 0x30
 8007b34:	9205      	str	r2, [sp, #20]
 8007b36:	001a      	movs	r2, r3
 8007b38:	3a30      	subs	r2, #48	; 0x30
 8007b3a:	2a09      	cmp	r2, #9
 8007b3c:	d912      	bls.n	8007b64 <_strtod_l+0x210>
 8007b3e:	2201      	movs	r2, #1
 8007b40:	4694      	mov	ip, r2
 8007b42:	e7c3      	b.n	8007acc <_strtod_l+0x178>
 8007b44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b46:	3001      	adds	r0, #1
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	921b      	str	r2, [sp, #108]	; 0x6c
 8007b4c:	785b      	ldrb	r3, [r3, #1]
 8007b4e:	2b30      	cmp	r3, #48	; 0x30
 8007b50:	d0f8      	beq.n	8007b44 <_strtod_l+0x1f0>
 8007b52:	001a      	movs	r2, r3
 8007b54:	3a31      	subs	r2, #49	; 0x31
 8007b56:	2a08      	cmp	r2, #8
 8007b58:	d83c      	bhi.n	8007bd4 <_strtod_l+0x280>
 8007b5a:	900c      	str	r0, [sp, #48]	; 0x30
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007b60:	9005      	str	r0, [sp, #20]
 8007b62:	9210      	str	r2, [sp, #64]	; 0x40
 8007b64:	001a      	movs	r2, r3
 8007b66:	1c41      	adds	r1, r0, #1
 8007b68:	3a30      	subs	r2, #48	; 0x30
 8007b6a:	2b30      	cmp	r3, #48	; 0x30
 8007b6c:	d016      	beq.n	8007b9c <_strtod_l+0x248>
 8007b6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b70:	185b      	adds	r3, r3, r1
 8007b72:	930c      	str	r3, [sp, #48]	; 0x30
 8007b74:	9b05      	ldr	r3, [sp, #20]
 8007b76:	210a      	movs	r1, #10
 8007b78:	469c      	mov	ip, r3
 8007b7a:	4484      	add	ip, r0
 8007b7c:	4563      	cmp	r3, ip
 8007b7e:	d115      	bne.n	8007bac <_strtod_l+0x258>
 8007b80:	9905      	ldr	r1, [sp, #20]
 8007b82:	9b05      	ldr	r3, [sp, #20]
 8007b84:	3101      	adds	r1, #1
 8007b86:	1809      	adds	r1, r1, r0
 8007b88:	181b      	adds	r3, r3, r0
 8007b8a:	9105      	str	r1, [sp, #20]
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	dc19      	bgt.n	8007bc4 <_strtod_l+0x270>
 8007b90:	230a      	movs	r3, #10
 8007b92:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007b94:	434b      	muls	r3, r1
 8007b96:	2100      	movs	r1, #0
 8007b98:	18d3      	adds	r3, r2, r3
 8007b9a:	930d      	str	r3, [sp, #52]	; 0x34
 8007b9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b9e:	0008      	movs	r0, r1
 8007ba0:	1c5a      	adds	r2, r3, #1
 8007ba2:	921b      	str	r2, [sp, #108]	; 0x6c
 8007ba4:	785b      	ldrb	r3, [r3, #1]
 8007ba6:	e7c6      	b.n	8007b36 <_strtod_l+0x1e2>
 8007ba8:	9808      	ldr	r0, [sp, #32]
 8007baa:	e7d0      	b.n	8007b4e <_strtod_l+0x1fa>
 8007bac:	1c5c      	adds	r4, r3, #1
 8007bae:	2b08      	cmp	r3, #8
 8007bb0:	dc04      	bgt.n	8007bbc <_strtod_l+0x268>
 8007bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bb4:	434b      	muls	r3, r1
 8007bb6:	930d      	str	r3, [sp, #52]	; 0x34
 8007bb8:	0023      	movs	r3, r4
 8007bba:	e7df      	b.n	8007b7c <_strtod_l+0x228>
 8007bbc:	2c10      	cmp	r4, #16
 8007bbe:	dcfb      	bgt.n	8007bb8 <_strtod_l+0x264>
 8007bc0:	434d      	muls	r5, r1
 8007bc2:	e7f9      	b.n	8007bb8 <_strtod_l+0x264>
 8007bc4:	9b05      	ldr	r3, [sp, #20]
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	2b10      	cmp	r3, #16
 8007bca:	dce7      	bgt.n	8007b9c <_strtod_l+0x248>
 8007bcc:	230a      	movs	r3, #10
 8007bce:	435d      	muls	r5, r3
 8007bd0:	1955      	adds	r5, r2, r5
 8007bd2:	e7e3      	b.n	8007b9c <_strtod_l+0x248>
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	920c      	str	r2, [sp, #48]	; 0x30
 8007bd8:	9205      	str	r2, [sp, #20]
 8007bda:	3201      	adds	r2, #1
 8007bdc:	e7b0      	b.n	8007b40 <_strtod_l+0x1ec>
 8007bde:	2400      	movs	r4, #0
 8007be0:	9b07      	ldr	r3, [sp, #28]
 8007be2:	3302      	adds	r3, #2
 8007be4:	931b      	str	r3, [sp, #108]	; 0x6c
 8007be6:	9b07      	ldr	r3, [sp, #28]
 8007be8:	789b      	ldrb	r3, [r3, #2]
 8007bea:	001a      	movs	r2, r3
 8007bec:	3a30      	subs	r2, #48	; 0x30
 8007bee:	2a09      	cmp	r2, #9
 8007bf0:	d914      	bls.n	8007c1c <_strtod_l+0x2c8>
 8007bf2:	9a07      	ldr	r2, [sp, #28]
 8007bf4:	921b      	str	r2, [sp, #108]	; 0x6c
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	e033      	b.n	8007c62 <_strtod_l+0x30e>
 8007bfa:	46c0      	nop			; (mov r8, r8)
 8007bfc:	0800f684 	.word	0x0800f684
 8007c00:	7ff00000 	.word	0x7ff00000
 8007c04:	ffefffff 	.word	0xffefffff
 8007c08:	00000433 	.word	0x00000433
 8007c0c:	7fffffff 	.word	0x7fffffff
 8007c10:	0800f680 	.word	0x0800f680
 8007c14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c16:	1c5a      	adds	r2, r3, #1
 8007c18:	921b      	str	r2, [sp, #108]	; 0x6c
 8007c1a:	785b      	ldrb	r3, [r3, #1]
 8007c1c:	2b30      	cmp	r3, #48	; 0x30
 8007c1e:	d0f9      	beq.n	8007c14 <_strtod_l+0x2c0>
 8007c20:	2200      	movs	r2, #0
 8007c22:	9206      	str	r2, [sp, #24]
 8007c24:	001a      	movs	r2, r3
 8007c26:	3a31      	subs	r2, #49	; 0x31
 8007c28:	2a08      	cmp	r2, #8
 8007c2a:	d81b      	bhi.n	8007c64 <_strtod_l+0x310>
 8007c2c:	3b30      	subs	r3, #48	; 0x30
 8007c2e:	930e      	str	r3, [sp, #56]	; 0x38
 8007c30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c32:	9306      	str	r3, [sp, #24]
 8007c34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c36:	1c59      	adds	r1, r3, #1
 8007c38:	911b      	str	r1, [sp, #108]	; 0x6c
 8007c3a:	785b      	ldrb	r3, [r3, #1]
 8007c3c:	001a      	movs	r2, r3
 8007c3e:	3a30      	subs	r2, #48	; 0x30
 8007c40:	2a09      	cmp	r2, #9
 8007c42:	d93a      	bls.n	8007cba <_strtod_l+0x366>
 8007c44:	9a06      	ldr	r2, [sp, #24]
 8007c46:	1a8a      	subs	r2, r1, r2
 8007c48:	49b2      	ldr	r1, [pc, #712]	; (8007f14 <_strtod_l+0x5c0>)
 8007c4a:	9106      	str	r1, [sp, #24]
 8007c4c:	2a08      	cmp	r2, #8
 8007c4e:	dc04      	bgt.n	8007c5a <_strtod_l+0x306>
 8007c50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c52:	9206      	str	r2, [sp, #24]
 8007c54:	428a      	cmp	r2, r1
 8007c56:	dd00      	ble.n	8007c5a <_strtod_l+0x306>
 8007c58:	9106      	str	r1, [sp, #24]
 8007c5a:	2c00      	cmp	r4, #0
 8007c5c:	d002      	beq.n	8007c64 <_strtod_l+0x310>
 8007c5e:	9a06      	ldr	r2, [sp, #24]
 8007c60:	4252      	negs	r2, r2
 8007c62:	9206      	str	r2, [sp, #24]
 8007c64:	9a05      	ldr	r2, [sp, #20]
 8007c66:	2a00      	cmp	r2, #0
 8007c68:	d14d      	bne.n	8007d06 <_strtod_l+0x3b2>
 8007c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c6c:	4310      	orrs	r0, r2
 8007c6e:	d000      	beq.n	8007c72 <_strtod_l+0x31e>
 8007c70:	e6ab      	b.n	80079ca <_strtod_l+0x76>
 8007c72:	4662      	mov	r2, ip
 8007c74:	2a00      	cmp	r2, #0
 8007c76:	d000      	beq.n	8007c7a <_strtod_l+0x326>
 8007c78:	e6c5      	b.n	8007a06 <_strtod_l+0xb2>
 8007c7a:	2b69      	cmp	r3, #105	; 0x69
 8007c7c:	d027      	beq.n	8007cce <_strtod_l+0x37a>
 8007c7e:	dc23      	bgt.n	8007cc8 <_strtod_l+0x374>
 8007c80:	2b49      	cmp	r3, #73	; 0x49
 8007c82:	d024      	beq.n	8007cce <_strtod_l+0x37a>
 8007c84:	2b4e      	cmp	r3, #78	; 0x4e
 8007c86:	d000      	beq.n	8007c8a <_strtod_l+0x336>
 8007c88:	e6bd      	b.n	8007a06 <_strtod_l+0xb2>
 8007c8a:	49a3      	ldr	r1, [pc, #652]	; (8007f18 <_strtod_l+0x5c4>)
 8007c8c:	a81b      	add	r0, sp, #108	; 0x6c
 8007c8e:	f001 faff 	bl	8009290 <__match>
 8007c92:	2800      	cmp	r0, #0
 8007c94:	d100      	bne.n	8007c98 <_strtod_l+0x344>
 8007c96:	e6b6      	b.n	8007a06 <_strtod_l+0xb2>
 8007c98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b28      	cmp	r3, #40	; 0x28
 8007c9e:	d12c      	bne.n	8007cfa <_strtod_l+0x3a6>
 8007ca0:	499e      	ldr	r1, [pc, #632]	; (8007f1c <_strtod_l+0x5c8>)
 8007ca2:	aa1e      	add	r2, sp, #120	; 0x78
 8007ca4:	a81b      	add	r0, sp, #108	; 0x6c
 8007ca6:	f001 fb07 	bl	80092b8 <__hexnan>
 8007caa:	2805      	cmp	r0, #5
 8007cac:	d125      	bne.n	8007cfa <_strtod_l+0x3a6>
 8007cae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007cb0:	4a9b      	ldr	r2, [pc, #620]	; (8007f20 <_strtod_l+0x5cc>)
 8007cb2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007cb4:	431a      	orrs	r2, r3
 8007cb6:	0017      	movs	r7, r2
 8007cb8:	e687      	b.n	80079ca <_strtod_l+0x76>
 8007cba:	220a      	movs	r2, #10
 8007cbc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007cbe:	434a      	muls	r2, r1
 8007cc0:	18d2      	adds	r2, r2, r3
 8007cc2:	3a30      	subs	r2, #48	; 0x30
 8007cc4:	920e      	str	r2, [sp, #56]	; 0x38
 8007cc6:	e7b5      	b.n	8007c34 <_strtod_l+0x2e0>
 8007cc8:	2b6e      	cmp	r3, #110	; 0x6e
 8007cca:	d0de      	beq.n	8007c8a <_strtod_l+0x336>
 8007ccc:	e69b      	b.n	8007a06 <_strtod_l+0xb2>
 8007cce:	4995      	ldr	r1, [pc, #596]	; (8007f24 <_strtod_l+0x5d0>)
 8007cd0:	a81b      	add	r0, sp, #108	; 0x6c
 8007cd2:	f001 fadd 	bl	8009290 <__match>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d100      	bne.n	8007cdc <_strtod_l+0x388>
 8007cda:	e694      	b.n	8007a06 <_strtod_l+0xb2>
 8007cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cde:	4992      	ldr	r1, [pc, #584]	; (8007f28 <_strtod_l+0x5d4>)
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	a81b      	add	r0, sp, #108	; 0x6c
 8007ce4:	931b      	str	r3, [sp, #108]	; 0x6c
 8007ce6:	f001 fad3 	bl	8009290 <__match>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d102      	bne.n	8007cf4 <_strtod_l+0x3a0>
 8007cee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	931b      	str	r3, [sp, #108]	; 0x6c
 8007cf4:	2600      	movs	r6, #0
 8007cf6:	4f8a      	ldr	r7, [pc, #552]	; (8007f20 <_strtod_l+0x5cc>)
 8007cf8:	e667      	b.n	80079ca <_strtod_l+0x76>
 8007cfa:	488c      	ldr	r0, [pc, #560]	; (8007f2c <_strtod_l+0x5d8>)
 8007cfc:	f000 ff04 	bl	8008b08 <nan>
 8007d00:	0006      	movs	r6, r0
 8007d02:	000f      	movs	r7, r1
 8007d04:	e661      	b.n	80079ca <_strtod_l+0x76>
 8007d06:	9b06      	ldr	r3, [sp, #24]
 8007d08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d0a:	1a9b      	subs	r3, r3, r2
 8007d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0e:	9b08      	ldr	r3, [sp, #32]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <_strtod_l+0x3c4>
 8007d14:	9b05      	ldr	r3, [sp, #20]
 8007d16:	9308      	str	r3, [sp, #32]
 8007d18:	9c05      	ldr	r4, [sp, #20]
 8007d1a:	2c10      	cmp	r4, #16
 8007d1c:	dd00      	ble.n	8007d20 <_strtod_l+0x3cc>
 8007d1e:	2410      	movs	r4, #16
 8007d20:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007d22:	f7fa fb6b 	bl	80023fc <__aeabi_ui2d>
 8007d26:	9b05      	ldr	r3, [sp, #20]
 8007d28:	0006      	movs	r6, r0
 8007d2a:	000f      	movs	r7, r1
 8007d2c:	2b09      	cmp	r3, #9
 8007d2e:	dd15      	ble.n	8007d5c <_strtod_l+0x408>
 8007d30:	0022      	movs	r2, r4
 8007d32:	4b7f      	ldr	r3, [pc, #508]	; (8007f30 <_strtod_l+0x5dc>)
 8007d34:	3a09      	subs	r2, #9
 8007d36:	00d2      	lsls	r2, r2, #3
 8007d38:	189b      	adds	r3, r3, r2
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f7f9 fc95 	bl	800166c <__aeabi_dmul>
 8007d42:	0006      	movs	r6, r0
 8007d44:	0028      	movs	r0, r5
 8007d46:	000f      	movs	r7, r1
 8007d48:	f7fa fb58 	bl	80023fc <__aeabi_ui2d>
 8007d4c:	0002      	movs	r2, r0
 8007d4e:	000b      	movs	r3, r1
 8007d50:	0030      	movs	r0, r6
 8007d52:	0039      	movs	r1, r7
 8007d54:	f7f8 fd30 	bl	80007b8 <__aeabi_dadd>
 8007d58:	0006      	movs	r6, r0
 8007d5a:	000f      	movs	r7, r1
 8007d5c:	9b05      	ldr	r3, [sp, #20]
 8007d5e:	2b0f      	cmp	r3, #15
 8007d60:	dc39      	bgt.n	8007dd6 <_strtod_l+0x482>
 8007d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d100      	bne.n	8007d6a <_strtod_l+0x416>
 8007d68:	e62f      	b.n	80079ca <_strtod_l+0x76>
 8007d6a:	dd24      	ble.n	8007db6 <_strtod_l+0x462>
 8007d6c:	2b16      	cmp	r3, #22
 8007d6e:	dc09      	bgt.n	8007d84 <_strtod_l+0x430>
 8007d70:	496f      	ldr	r1, [pc, #444]	; (8007f30 <_strtod_l+0x5dc>)
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	18c9      	adds	r1, r1, r3
 8007d76:	0032      	movs	r2, r6
 8007d78:	6808      	ldr	r0, [r1, #0]
 8007d7a:	6849      	ldr	r1, [r1, #4]
 8007d7c:	003b      	movs	r3, r7
 8007d7e:	f7f9 fc75 	bl	800166c <__aeabi_dmul>
 8007d82:	e7bd      	b.n	8007d00 <_strtod_l+0x3ac>
 8007d84:	2325      	movs	r3, #37	; 0x25
 8007d86:	9a05      	ldr	r2, [sp, #20]
 8007d88:	1a9b      	subs	r3, r3, r2
 8007d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	db22      	blt.n	8007dd6 <_strtod_l+0x482>
 8007d90:	240f      	movs	r4, #15
 8007d92:	9b05      	ldr	r3, [sp, #20]
 8007d94:	4d66      	ldr	r5, [pc, #408]	; (8007f30 <_strtod_l+0x5dc>)
 8007d96:	1ae4      	subs	r4, r4, r3
 8007d98:	00e1      	lsls	r1, r4, #3
 8007d9a:	1869      	adds	r1, r5, r1
 8007d9c:	0032      	movs	r2, r6
 8007d9e:	6808      	ldr	r0, [r1, #0]
 8007da0:	6849      	ldr	r1, [r1, #4]
 8007da2:	003b      	movs	r3, r7
 8007da4:	f7f9 fc62 	bl	800166c <__aeabi_dmul>
 8007da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007daa:	1b1c      	subs	r4, r3, r4
 8007dac:	00e4      	lsls	r4, r4, #3
 8007dae:	192d      	adds	r5, r5, r4
 8007db0:	682a      	ldr	r2, [r5, #0]
 8007db2:	686b      	ldr	r3, [r5, #4]
 8007db4:	e7e3      	b.n	8007d7e <_strtod_l+0x42a>
 8007db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db8:	3316      	adds	r3, #22
 8007dba:	db0c      	blt.n	8007dd6 <_strtod_l+0x482>
 8007dbc:	9906      	ldr	r1, [sp, #24]
 8007dbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dc0:	4b5b      	ldr	r3, [pc, #364]	; (8007f30 <_strtod_l+0x5dc>)
 8007dc2:	1a52      	subs	r2, r2, r1
 8007dc4:	00d2      	lsls	r2, r2, #3
 8007dc6:	189b      	adds	r3, r3, r2
 8007dc8:	0030      	movs	r0, r6
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	0039      	movs	r1, r7
 8007dd0:	f7f9 f852 	bl	8000e78 <__aeabi_ddiv>
 8007dd4:	e794      	b.n	8007d00 <_strtod_l+0x3ac>
 8007dd6:	9b05      	ldr	r3, [sp, #20]
 8007dd8:	1b1c      	subs	r4, r3, r4
 8007dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ddc:	18e4      	adds	r4, r4, r3
 8007dde:	2c00      	cmp	r4, #0
 8007de0:	dd72      	ble.n	8007ec8 <_strtod_l+0x574>
 8007de2:	220f      	movs	r2, #15
 8007de4:	0023      	movs	r3, r4
 8007de6:	4013      	ands	r3, r2
 8007de8:	4214      	tst	r4, r2
 8007dea:	d00a      	beq.n	8007e02 <_strtod_l+0x4ae>
 8007dec:	4950      	ldr	r1, [pc, #320]	; (8007f30 <_strtod_l+0x5dc>)
 8007dee:	00db      	lsls	r3, r3, #3
 8007df0:	18c9      	adds	r1, r1, r3
 8007df2:	0032      	movs	r2, r6
 8007df4:	6808      	ldr	r0, [r1, #0]
 8007df6:	6849      	ldr	r1, [r1, #4]
 8007df8:	003b      	movs	r3, r7
 8007dfa:	f7f9 fc37 	bl	800166c <__aeabi_dmul>
 8007dfe:	0006      	movs	r6, r0
 8007e00:	000f      	movs	r7, r1
 8007e02:	230f      	movs	r3, #15
 8007e04:	439c      	bics	r4, r3
 8007e06:	d04a      	beq.n	8007e9e <_strtod_l+0x54a>
 8007e08:	3326      	adds	r3, #38	; 0x26
 8007e0a:	33ff      	adds	r3, #255	; 0xff
 8007e0c:	429c      	cmp	r4, r3
 8007e0e:	dd22      	ble.n	8007e56 <_strtod_l+0x502>
 8007e10:	2300      	movs	r3, #0
 8007e12:	9305      	str	r3, [sp, #20]
 8007e14:	9306      	str	r3, [sp, #24]
 8007e16:	930d      	str	r3, [sp, #52]	; 0x34
 8007e18:	9308      	str	r3, [sp, #32]
 8007e1a:	2322      	movs	r3, #34	; 0x22
 8007e1c:	2600      	movs	r6, #0
 8007e1e:	9a04      	ldr	r2, [sp, #16]
 8007e20:	4f3f      	ldr	r7, [pc, #252]	; (8007f20 <_strtod_l+0x5cc>)
 8007e22:	6013      	str	r3, [r2, #0]
 8007e24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e26:	42b3      	cmp	r3, r6
 8007e28:	d100      	bne.n	8007e2c <_strtod_l+0x4d8>
 8007e2a:	e5ce      	b.n	80079ca <_strtod_l+0x76>
 8007e2c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007e2e:	9804      	ldr	r0, [sp, #16]
 8007e30:	f001 fb24 	bl	800947c <_Bfree>
 8007e34:	9908      	ldr	r1, [sp, #32]
 8007e36:	9804      	ldr	r0, [sp, #16]
 8007e38:	f001 fb20 	bl	800947c <_Bfree>
 8007e3c:	9906      	ldr	r1, [sp, #24]
 8007e3e:	9804      	ldr	r0, [sp, #16]
 8007e40:	f001 fb1c 	bl	800947c <_Bfree>
 8007e44:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007e46:	9804      	ldr	r0, [sp, #16]
 8007e48:	f001 fb18 	bl	800947c <_Bfree>
 8007e4c:	9905      	ldr	r1, [sp, #20]
 8007e4e:	9804      	ldr	r0, [sp, #16]
 8007e50:	f001 fb14 	bl	800947c <_Bfree>
 8007e54:	e5b9      	b.n	80079ca <_strtod_l+0x76>
 8007e56:	2300      	movs	r3, #0
 8007e58:	0030      	movs	r0, r6
 8007e5a:	0039      	movs	r1, r7
 8007e5c:	4d35      	ldr	r5, [pc, #212]	; (8007f34 <_strtod_l+0x5e0>)
 8007e5e:	1124      	asrs	r4, r4, #4
 8007e60:	9307      	str	r3, [sp, #28]
 8007e62:	2c01      	cmp	r4, #1
 8007e64:	dc1e      	bgt.n	8007ea4 <_strtod_l+0x550>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <_strtod_l+0x51a>
 8007e6a:	0006      	movs	r6, r0
 8007e6c:	000f      	movs	r7, r1
 8007e6e:	4b32      	ldr	r3, [pc, #200]	; (8007f38 <_strtod_l+0x5e4>)
 8007e70:	9a07      	ldr	r2, [sp, #28]
 8007e72:	18ff      	adds	r7, r7, r3
 8007e74:	4b2f      	ldr	r3, [pc, #188]	; (8007f34 <_strtod_l+0x5e0>)
 8007e76:	00d2      	lsls	r2, r2, #3
 8007e78:	189d      	adds	r5, r3, r2
 8007e7a:	6828      	ldr	r0, [r5, #0]
 8007e7c:	6869      	ldr	r1, [r5, #4]
 8007e7e:	0032      	movs	r2, r6
 8007e80:	003b      	movs	r3, r7
 8007e82:	f7f9 fbf3 	bl	800166c <__aeabi_dmul>
 8007e86:	4b26      	ldr	r3, [pc, #152]	; (8007f20 <_strtod_l+0x5cc>)
 8007e88:	4a2c      	ldr	r2, [pc, #176]	; (8007f3c <_strtod_l+0x5e8>)
 8007e8a:	0006      	movs	r6, r0
 8007e8c:	400b      	ands	r3, r1
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d8be      	bhi.n	8007e10 <_strtod_l+0x4bc>
 8007e92:	4a2b      	ldr	r2, [pc, #172]	; (8007f40 <_strtod_l+0x5ec>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d913      	bls.n	8007ec0 <_strtod_l+0x56c>
 8007e98:	2601      	movs	r6, #1
 8007e9a:	4f2a      	ldr	r7, [pc, #168]	; (8007f44 <_strtod_l+0x5f0>)
 8007e9c:	4276      	negs	r6, r6
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	9307      	str	r3, [sp, #28]
 8007ea2:	e088      	b.n	8007fb6 <_strtod_l+0x662>
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	4214      	tst	r4, r2
 8007ea8:	d004      	beq.n	8007eb4 <_strtod_l+0x560>
 8007eaa:	682a      	ldr	r2, [r5, #0]
 8007eac:	686b      	ldr	r3, [r5, #4]
 8007eae:	f7f9 fbdd 	bl	800166c <__aeabi_dmul>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	9a07      	ldr	r2, [sp, #28]
 8007eb6:	1064      	asrs	r4, r4, #1
 8007eb8:	3201      	adds	r2, #1
 8007eba:	9207      	str	r2, [sp, #28]
 8007ebc:	3508      	adds	r5, #8
 8007ebe:	e7d0      	b.n	8007e62 <_strtod_l+0x50e>
 8007ec0:	23d4      	movs	r3, #212	; 0xd4
 8007ec2:	049b      	lsls	r3, r3, #18
 8007ec4:	18cf      	adds	r7, r1, r3
 8007ec6:	e7ea      	b.n	8007e9e <_strtod_l+0x54a>
 8007ec8:	2c00      	cmp	r4, #0
 8007eca:	d0e8      	beq.n	8007e9e <_strtod_l+0x54a>
 8007ecc:	4264      	negs	r4, r4
 8007ece:	230f      	movs	r3, #15
 8007ed0:	0022      	movs	r2, r4
 8007ed2:	401a      	ands	r2, r3
 8007ed4:	421c      	tst	r4, r3
 8007ed6:	d00a      	beq.n	8007eee <_strtod_l+0x59a>
 8007ed8:	4b15      	ldr	r3, [pc, #84]	; (8007f30 <_strtod_l+0x5dc>)
 8007eda:	00d2      	lsls	r2, r2, #3
 8007edc:	189b      	adds	r3, r3, r2
 8007ede:	0030      	movs	r0, r6
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	0039      	movs	r1, r7
 8007ee6:	f7f8 ffc7 	bl	8000e78 <__aeabi_ddiv>
 8007eea:	0006      	movs	r6, r0
 8007eec:	000f      	movs	r7, r1
 8007eee:	1124      	asrs	r4, r4, #4
 8007ef0:	d0d5      	beq.n	8007e9e <_strtod_l+0x54a>
 8007ef2:	2c1f      	cmp	r4, #31
 8007ef4:	dd28      	ble.n	8007f48 <_strtod_l+0x5f4>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	9305      	str	r3, [sp, #20]
 8007efa:	9306      	str	r3, [sp, #24]
 8007efc:	930d      	str	r3, [sp, #52]	; 0x34
 8007efe:	9308      	str	r3, [sp, #32]
 8007f00:	2322      	movs	r3, #34	; 0x22
 8007f02:	9a04      	ldr	r2, [sp, #16]
 8007f04:	2600      	movs	r6, #0
 8007f06:	6013      	str	r3, [r2, #0]
 8007f08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f0a:	2700      	movs	r7, #0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d18d      	bne.n	8007e2c <_strtod_l+0x4d8>
 8007f10:	e55b      	b.n	80079ca <_strtod_l+0x76>
 8007f12:	46c0      	nop			; (mov r8, r8)
 8007f14:	00004e1f 	.word	0x00004e1f
 8007f18:	0800f9b9 	.word	0x0800f9b9
 8007f1c:	0800f698 	.word	0x0800f698
 8007f20:	7ff00000 	.word	0x7ff00000
 8007f24:	0800f9b1 	.word	0x0800f9b1
 8007f28:	0800fa67 	.word	0x0800fa67
 8007f2c:	0800fa63 	.word	0x0800fa63
 8007f30:	0800f8d8 	.word	0x0800f8d8
 8007f34:	0800f8b0 	.word	0x0800f8b0
 8007f38:	fcb00000 	.word	0xfcb00000
 8007f3c:	7ca00000 	.word	0x7ca00000
 8007f40:	7c900000 	.word	0x7c900000
 8007f44:	7fefffff 	.word	0x7fefffff
 8007f48:	2310      	movs	r3, #16
 8007f4a:	0022      	movs	r2, r4
 8007f4c:	401a      	ands	r2, r3
 8007f4e:	9207      	str	r2, [sp, #28]
 8007f50:	421c      	tst	r4, r3
 8007f52:	d001      	beq.n	8007f58 <_strtod_l+0x604>
 8007f54:	335a      	adds	r3, #90	; 0x5a
 8007f56:	9307      	str	r3, [sp, #28]
 8007f58:	0030      	movs	r0, r6
 8007f5a:	0039      	movs	r1, r7
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4dc4      	ldr	r5, [pc, #784]	; (8008270 <_strtod_l+0x91c>)
 8007f60:	2201      	movs	r2, #1
 8007f62:	4214      	tst	r4, r2
 8007f64:	d004      	beq.n	8007f70 <_strtod_l+0x61c>
 8007f66:	682a      	ldr	r2, [r5, #0]
 8007f68:	686b      	ldr	r3, [r5, #4]
 8007f6a:	f7f9 fb7f 	bl	800166c <__aeabi_dmul>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	1064      	asrs	r4, r4, #1
 8007f72:	3508      	adds	r5, #8
 8007f74:	2c00      	cmp	r4, #0
 8007f76:	d1f3      	bne.n	8007f60 <_strtod_l+0x60c>
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <_strtod_l+0x62c>
 8007f7c:	0006      	movs	r6, r0
 8007f7e:	000f      	movs	r7, r1
 8007f80:	9b07      	ldr	r3, [sp, #28]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00f      	beq.n	8007fa6 <_strtod_l+0x652>
 8007f86:	236b      	movs	r3, #107	; 0x6b
 8007f88:	007a      	lsls	r2, r7, #1
 8007f8a:	0d52      	lsrs	r2, r2, #21
 8007f8c:	0039      	movs	r1, r7
 8007f8e:	1a9b      	subs	r3, r3, r2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	dd08      	ble.n	8007fa6 <_strtod_l+0x652>
 8007f94:	2b1f      	cmp	r3, #31
 8007f96:	dc00      	bgt.n	8007f9a <_strtod_l+0x646>
 8007f98:	e121      	b.n	80081de <_strtod_l+0x88a>
 8007f9a:	2600      	movs	r6, #0
 8007f9c:	2b34      	cmp	r3, #52	; 0x34
 8007f9e:	dc00      	bgt.n	8007fa2 <_strtod_l+0x64e>
 8007fa0:	e116      	b.n	80081d0 <_strtod_l+0x87c>
 8007fa2:	27dc      	movs	r7, #220	; 0xdc
 8007fa4:	04bf      	lsls	r7, r7, #18
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	2300      	movs	r3, #0
 8007faa:	0030      	movs	r0, r6
 8007fac:	0039      	movs	r1, r7
 8007fae:	f7f8 fa4b 	bl	8000448 <__aeabi_dcmpeq>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d19f      	bne.n	8007ef6 <_strtod_l+0x5a2>
 8007fb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fb8:	9a08      	ldr	r2, [sp, #32]
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007fbe:	9b05      	ldr	r3, [sp, #20]
 8007fc0:	9804      	ldr	r0, [sp, #16]
 8007fc2:	f001 faa9 	bl	8009518 <__s2b>
 8007fc6:	900d      	str	r0, [sp, #52]	; 0x34
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d100      	bne.n	8007fce <_strtod_l+0x67a>
 8007fcc:	e720      	b.n	8007e10 <_strtod_l+0x4bc>
 8007fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd0:	9906      	ldr	r1, [sp, #24]
 8007fd2:	17da      	asrs	r2, r3, #31
 8007fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fd6:	1a5b      	subs	r3, r3, r1
 8007fd8:	401a      	ands	r2, r3
 8007fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fdc:	9215      	str	r2, [sp, #84]	; 0x54
 8007fde:	43db      	mvns	r3, r3
 8007fe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fe2:	17db      	asrs	r3, r3, #31
 8007fe4:	401a      	ands	r2, r3
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	9218      	str	r2, [sp, #96]	; 0x60
 8007fea:	9305      	str	r3, [sp, #20]
 8007fec:	9306      	str	r3, [sp, #24]
 8007fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ff0:	9804      	ldr	r0, [sp, #16]
 8007ff2:	6859      	ldr	r1, [r3, #4]
 8007ff4:	f001 fa1a 	bl	800942c <_Balloc>
 8007ff8:	9008      	str	r0, [sp, #32]
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	d100      	bne.n	8008000 <_strtod_l+0x6ac>
 8007ffe:	e70c      	b.n	8007e1a <_strtod_l+0x4c6>
 8008000:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008002:	300c      	adds	r0, #12
 8008004:	0019      	movs	r1, r3
 8008006:	691a      	ldr	r2, [r3, #16]
 8008008:	310c      	adds	r1, #12
 800800a:	3202      	adds	r2, #2
 800800c:	0092      	lsls	r2, r2, #2
 800800e:	f000 fd72 	bl	8008af6 <memcpy>
 8008012:	ab1e      	add	r3, sp, #120	; 0x78
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	ab1d      	add	r3, sp, #116	; 0x74
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	0032      	movs	r2, r6
 800801c:	003b      	movs	r3, r7
 800801e:	9804      	ldr	r0, [sp, #16]
 8008020:	9610      	str	r6, [sp, #64]	; 0x40
 8008022:	9711      	str	r7, [sp, #68]	; 0x44
 8008024:	f001 fda0 	bl	8009b68 <__d2b>
 8008028:	901c      	str	r0, [sp, #112]	; 0x70
 800802a:	2800      	cmp	r0, #0
 800802c:	d100      	bne.n	8008030 <_strtod_l+0x6dc>
 800802e:	e6f4      	b.n	8007e1a <_strtod_l+0x4c6>
 8008030:	2101      	movs	r1, #1
 8008032:	9804      	ldr	r0, [sp, #16]
 8008034:	f001 fb04 	bl	8009640 <__i2b>
 8008038:	9006      	str	r0, [sp, #24]
 800803a:	2800      	cmp	r0, #0
 800803c:	d100      	bne.n	8008040 <_strtod_l+0x6ec>
 800803e:	e6ec      	b.n	8007e1a <_strtod_l+0x4c6>
 8008040:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008042:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008044:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008046:	1ad4      	subs	r4, r2, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	db01      	blt.n	8008050 <_strtod_l+0x6fc>
 800804c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800804e:	195d      	adds	r5, r3, r5
 8008050:	9907      	ldr	r1, [sp, #28]
 8008052:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008054:	1a5b      	subs	r3, r3, r1
 8008056:	2136      	movs	r1, #54	; 0x36
 8008058:	189b      	adds	r3, r3, r2
 800805a:	1a8a      	subs	r2, r1, r2
 800805c:	4985      	ldr	r1, [pc, #532]	; (8008274 <_strtod_l+0x920>)
 800805e:	2001      	movs	r0, #1
 8008060:	468c      	mov	ip, r1
 8008062:	2100      	movs	r1, #0
 8008064:	3b01      	subs	r3, #1
 8008066:	9114      	str	r1, [sp, #80]	; 0x50
 8008068:	9012      	str	r0, [sp, #72]	; 0x48
 800806a:	4563      	cmp	r3, ip
 800806c:	da07      	bge.n	800807e <_strtod_l+0x72a>
 800806e:	4661      	mov	r1, ip
 8008070:	1ac9      	subs	r1, r1, r3
 8008072:	1a52      	subs	r2, r2, r1
 8008074:	291f      	cmp	r1, #31
 8008076:	dd00      	ble.n	800807a <_strtod_l+0x726>
 8008078:	e0b6      	b.n	80081e8 <_strtod_l+0x894>
 800807a:	4088      	lsls	r0, r1
 800807c:	9012      	str	r0, [sp, #72]	; 0x48
 800807e:	18ab      	adds	r3, r5, r2
 8008080:	930c      	str	r3, [sp, #48]	; 0x30
 8008082:	18a4      	adds	r4, r4, r2
 8008084:	9b07      	ldr	r3, [sp, #28]
 8008086:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008088:	191c      	adds	r4, r3, r4
 800808a:	002b      	movs	r3, r5
 800808c:	4295      	cmp	r5, r2
 800808e:	dd00      	ble.n	8008092 <_strtod_l+0x73e>
 8008090:	0013      	movs	r3, r2
 8008092:	42a3      	cmp	r3, r4
 8008094:	dd00      	ble.n	8008098 <_strtod_l+0x744>
 8008096:	0023      	movs	r3, r4
 8008098:	2b00      	cmp	r3, #0
 800809a:	dd04      	ble.n	80080a6 <_strtod_l+0x752>
 800809c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800809e:	1ae4      	subs	r4, r4, r3
 80080a0:	1ad2      	subs	r2, r2, r3
 80080a2:	920c      	str	r2, [sp, #48]	; 0x30
 80080a4:	1aed      	subs	r5, r5, r3
 80080a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	dd17      	ble.n	80080dc <_strtod_l+0x788>
 80080ac:	001a      	movs	r2, r3
 80080ae:	9906      	ldr	r1, [sp, #24]
 80080b0:	9804      	ldr	r0, [sp, #16]
 80080b2:	f001 fb8d 	bl	80097d0 <__pow5mult>
 80080b6:	9006      	str	r0, [sp, #24]
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d100      	bne.n	80080be <_strtod_l+0x76a>
 80080bc:	e6ad      	b.n	8007e1a <_strtod_l+0x4c6>
 80080be:	0001      	movs	r1, r0
 80080c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80080c2:	9804      	ldr	r0, [sp, #16]
 80080c4:	f001 fad4 	bl	8009670 <__multiply>
 80080c8:	900e      	str	r0, [sp, #56]	; 0x38
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d100      	bne.n	80080d0 <_strtod_l+0x77c>
 80080ce:	e6a4      	b.n	8007e1a <_strtod_l+0x4c6>
 80080d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80080d2:	9804      	ldr	r0, [sp, #16]
 80080d4:	f001 f9d2 	bl	800947c <_Bfree>
 80080d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080da:	931c      	str	r3, [sp, #112]	; 0x70
 80080dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080de:	2b00      	cmp	r3, #0
 80080e0:	dd00      	ble.n	80080e4 <_strtod_l+0x790>
 80080e2:	e087      	b.n	80081f4 <_strtod_l+0x8a0>
 80080e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	dd08      	ble.n	80080fc <_strtod_l+0x7a8>
 80080ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80080ec:	9908      	ldr	r1, [sp, #32]
 80080ee:	9804      	ldr	r0, [sp, #16]
 80080f0:	f001 fb6e 	bl	80097d0 <__pow5mult>
 80080f4:	9008      	str	r0, [sp, #32]
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d100      	bne.n	80080fc <_strtod_l+0x7a8>
 80080fa:	e68e      	b.n	8007e1a <_strtod_l+0x4c6>
 80080fc:	2c00      	cmp	r4, #0
 80080fe:	dd08      	ble.n	8008112 <_strtod_l+0x7be>
 8008100:	0022      	movs	r2, r4
 8008102:	9908      	ldr	r1, [sp, #32]
 8008104:	9804      	ldr	r0, [sp, #16]
 8008106:	f001 fba5 	bl	8009854 <__lshift>
 800810a:	9008      	str	r0, [sp, #32]
 800810c:	2800      	cmp	r0, #0
 800810e:	d100      	bne.n	8008112 <_strtod_l+0x7be>
 8008110:	e683      	b.n	8007e1a <_strtod_l+0x4c6>
 8008112:	2d00      	cmp	r5, #0
 8008114:	dd08      	ble.n	8008128 <_strtod_l+0x7d4>
 8008116:	002a      	movs	r2, r5
 8008118:	9906      	ldr	r1, [sp, #24]
 800811a:	9804      	ldr	r0, [sp, #16]
 800811c:	f001 fb9a 	bl	8009854 <__lshift>
 8008120:	9006      	str	r0, [sp, #24]
 8008122:	2800      	cmp	r0, #0
 8008124:	d100      	bne.n	8008128 <_strtod_l+0x7d4>
 8008126:	e678      	b.n	8007e1a <_strtod_l+0x4c6>
 8008128:	9a08      	ldr	r2, [sp, #32]
 800812a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800812c:	9804      	ldr	r0, [sp, #16]
 800812e:	f001 fc1b 	bl	8009968 <__mdiff>
 8008132:	9005      	str	r0, [sp, #20]
 8008134:	2800      	cmp	r0, #0
 8008136:	d100      	bne.n	800813a <_strtod_l+0x7e6>
 8008138:	e66f      	b.n	8007e1a <_strtod_l+0x4c6>
 800813a:	2200      	movs	r2, #0
 800813c:	68c3      	ldr	r3, [r0, #12]
 800813e:	9906      	ldr	r1, [sp, #24]
 8008140:	60c2      	str	r2, [r0, #12]
 8008142:	930c      	str	r3, [sp, #48]	; 0x30
 8008144:	f001 fbf4 	bl	8009930 <__mcmp>
 8008148:	2800      	cmp	r0, #0
 800814a:	da5d      	bge.n	8008208 <_strtod_l+0x8b4>
 800814c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800814e:	4333      	orrs	r3, r6
 8008150:	d000      	beq.n	8008154 <_strtod_l+0x800>
 8008152:	e088      	b.n	8008266 <_strtod_l+0x912>
 8008154:	033b      	lsls	r3, r7, #12
 8008156:	d000      	beq.n	800815a <_strtod_l+0x806>
 8008158:	e085      	b.n	8008266 <_strtod_l+0x912>
 800815a:	22d6      	movs	r2, #214	; 0xd6
 800815c:	4b46      	ldr	r3, [pc, #280]	; (8008278 <_strtod_l+0x924>)
 800815e:	04d2      	lsls	r2, r2, #19
 8008160:	403b      	ands	r3, r7
 8008162:	4293      	cmp	r3, r2
 8008164:	d97f      	bls.n	8008266 <_strtod_l+0x912>
 8008166:	9b05      	ldr	r3, [sp, #20]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d103      	bne.n	8008176 <_strtod_l+0x822>
 800816e:	9b05      	ldr	r3, [sp, #20]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	2b01      	cmp	r3, #1
 8008174:	dd77      	ble.n	8008266 <_strtod_l+0x912>
 8008176:	9905      	ldr	r1, [sp, #20]
 8008178:	2201      	movs	r2, #1
 800817a:	9804      	ldr	r0, [sp, #16]
 800817c:	f001 fb6a 	bl	8009854 <__lshift>
 8008180:	9906      	ldr	r1, [sp, #24]
 8008182:	9005      	str	r0, [sp, #20]
 8008184:	f001 fbd4 	bl	8009930 <__mcmp>
 8008188:	2800      	cmp	r0, #0
 800818a:	dd6c      	ble.n	8008266 <_strtod_l+0x912>
 800818c:	9907      	ldr	r1, [sp, #28]
 800818e:	003b      	movs	r3, r7
 8008190:	4a39      	ldr	r2, [pc, #228]	; (8008278 <_strtod_l+0x924>)
 8008192:	2900      	cmp	r1, #0
 8008194:	d100      	bne.n	8008198 <_strtod_l+0x844>
 8008196:	e094      	b.n	80082c2 <_strtod_l+0x96e>
 8008198:	0011      	movs	r1, r2
 800819a:	20d6      	movs	r0, #214	; 0xd6
 800819c:	4039      	ands	r1, r7
 800819e:	04c0      	lsls	r0, r0, #19
 80081a0:	4281      	cmp	r1, r0
 80081a2:	dd00      	ble.n	80081a6 <_strtod_l+0x852>
 80081a4:	e08d      	b.n	80082c2 <_strtod_l+0x96e>
 80081a6:	23dc      	movs	r3, #220	; 0xdc
 80081a8:	049b      	lsls	r3, r3, #18
 80081aa:	4299      	cmp	r1, r3
 80081ac:	dc00      	bgt.n	80081b0 <_strtod_l+0x85c>
 80081ae:	e6a7      	b.n	8007f00 <_strtod_l+0x5ac>
 80081b0:	0030      	movs	r0, r6
 80081b2:	0039      	movs	r1, r7
 80081b4:	4b31      	ldr	r3, [pc, #196]	; (800827c <_strtod_l+0x928>)
 80081b6:	2200      	movs	r2, #0
 80081b8:	f7f9 fa58 	bl	800166c <__aeabi_dmul>
 80081bc:	4b2e      	ldr	r3, [pc, #184]	; (8008278 <_strtod_l+0x924>)
 80081be:	0006      	movs	r6, r0
 80081c0:	000f      	movs	r7, r1
 80081c2:	420b      	tst	r3, r1
 80081c4:	d000      	beq.n	80081c8 <_strtod_l+0x874>
 80081c6:	e631      	b.n	8007e2c <_strtod_l+0x4d8>
 80081c8:	2322      	movs	r3, #34	; 0x22
 80081ca:	9a04      	ldr	r2, [sp, #16]
 80081cc:	6013      	str	r3, [r2, #0]
 80081ce:	e62d      	b.n	8007e2c <_strtod_l+0x4d8>
 80081d0:	234b      	movs	r3, #75	; 0x4b
 80081d2:	1a9a      	subs	r2, r3, r2
 80081d4:	3b4c      	subs	r3, #76	; 0x4c
 80081d6:	4093      	lsls	r3, r2
 80081d8:	4019      	ands	r1, r3
 80081da:	000f      	movs	r7, r1
 80081dc:	e6e3      	b.n	8007fa6 <_strtod_l+0x652>
 80081de:	2201      	movs	r2, #1
 80081e0:	4252      	negs	r2, r2
 80081e2:	409a      	lsls	r2, r3
 80081e4:	4016      	ands	r6, r2
 80081e6:	e6de      	b.n	8007fa6 <_strtod_l+0x652>
 80081e8:	4925      	ldr	r1, [pc, #148]	; (8008280 <_strtod_l+0x92c>)
 80081ea:	1acb      	subs	r3, r1, r3
 80081ec:	0001      	movs	r1, r0
 80081ee:	4099      	lsls	r1, r3
 80081f0:	9114      	str	r1, [sp, #80]	; 0x50
 80081f2:	e743      	b.n	800807c <_strtod_l+0x728>
 80081f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80081f8:	9804      	ldr	r0, [sp, #16]
 80081fa:	f001 fb2b 	bl	8009854 <__lshift>
 80081fe:	901c      	str	r0, [sp, #112]	; 0x70
 8008200:	2800      	cmp	r0, #0
 8008202:	d000      	beq.n	8008206 <_strtod_l+0x8b2>
 8008204:	e76e      	b.n	80080e4 <_strtod_l+0x790>
 8008206:	e608      	b.n	8007e1a <_strtod_l+0x4c6>
 8008208:	970e      	str	r7, [sp, #56]	; 0x38
 800820a:	2800      	cmp	r0, #0
 800820c:	d177      	bne.n	80082fe <_strtod_l+0x9aa>
 800820e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008210:	033b      	lsls	r3, r7, #12
 8008212:	0b1b      	lsrs	r3, r3, #12
 8008214:	2a00      	cmp	r2, #0
 8008216:	d039      	beq.n	800828c <_strtod_l+0x938>
 8008218:	4a1a      	ldr	r2, [pc, #104]	; (8008284 <_strtod_l+0x930>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d139      	bne.n	8008292 <_strtod_l+0x93e>
 800821e:	2101      	movs	r1, #1
 8008220:	9b07      	ldr	r3, [sp, #28]
 8008222:	4249      	negs	r1, r1
 8008224:	0032      	movs	r2, r6
 8008226:	0008      	movs	r0, r1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <_strtod_l+0x8f0>
 800822c:	24d4      	movs	r4, #212	; 0xd4
 800822e:	4b12      	ldr	r3, [pc, #72]	; (8008278 <_strtod_l+0x924>)
 8008230:	0008      	movs	r0, r1
 8008232:	403b      	ands	r3, r7
 8008234:	04e4      	lsls	r4, r4, #19
 8008236:	42a3      	cmp	r3, r4
 8008238:	d804      	bhi.n	8008244 <_strtod_l+0x8f0>
 800823a:	306c      	adds	r0, #108	; 0x6c
 800823c:	0d1b      	lsrs	r3, r3, #20
 800823e:	1ac3      	subs	r3, r0, r3
 8008240:	4099      	lsls	r1, r3
 8008242:	0008      	movs	r0, r1
 8008244:	4282      	cmp	r2, r0
 8008246:	d124      	bne.n	8008292 <_strtod_l+0x93e>
 8008248:	4b0f      	ldr	r3, [pc, #60]	; (8008288 <_strtod_l+0x934>)
 800824a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800824c:	4299      	cmp	r1, r3
 800824e:	d102      	bne.n	8008256 <_strtod_l+0x902>
 8008250:	3201      	adds	r2, #1
 8008252:	d100      	bne.n	8008256 <_strtod_l+0x902>
 8008254:	e5e1      	b.n	8007e1a <_strtod_l+0x4c6>
 8008256:	4b08      	ldr	r3, [pc, #32]	; (8008278 <_strtod_l+0x924>)
 8008258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800825a:	2600      	movs	r6, #0
 800825c:	401a      	ands	r2, r3
 800825e:	0013      	movs	r3, r2
 8008260:	2280      	movs	r2, #128	; 0x80
 8008262:	0352      	lsls	r2, r2, #13
 8008264:	189f      	adds	r7, r3, r2
 8008266:	9b07      	ldr	r3, [sp, #28]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1a1      	bne.n	80081b0 <_strtod_l+0x85c>
 800826c:	e5de      	b.n	8007e2c <_strtod_l+0x4d8>
 800826e:	46c0      	nop			; (mov r8, r8)
 8008270:	0800f6b0 	.word	0x0800f6b0
 8008274:	fffffc02 	.word	0xfffffc02
 8008278:	7ff00000 	.word	0x7ff00000
 800827c:	39500000 	.word	0x39500000
 8008280:	fffffbe2 	.word	0xfffffbe2
 8008284:	000fffff 	.word	0x000fffff
 8008288:	7fefffff 	.word	0x7fefffff
 800828c:	4333      	orrs	r3, r6
 800828e:	d100      	bne.n	8008292 <_strtod_l+0x93e>
 8008290:	e77c      	b.n	800818c <_strtod_l+0x838>
 8008292:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008294:	2b00      	cmp	r3, #0
 8008296:	d01d      	beq.n	80082d4 <_strtod_l+0x980>
 8008298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800829a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800829c:	4213      	tst	r3, r2
 800829e:	d0e2      	beq.n	8008266 <_strtod_l+0x912>
 80082a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082a2:	0030      	movs	r0, r6
 80082a4:	0039      	movs	r1, r7
 80082a6:	9a07      	ldr	r2, [sp, #28]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d017      	beq.n	80082dc <_strtod_l+0x988>
 80082ac:	f7ff fb3a 	bl	8007924 <sulp>
 80082b0:	0002      	movs	r2, r0
 80082b2:	000b      	movs	r3, r1
 80082b4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80082b6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80082b8:	f7f8 fa7e 	bl	80007b8 <__aeabi_dadd>
 80082bc:	0006      	movs	r6, r0
 80082be:	000f      	movs	r7, r1
 80082c0:	e7d1      	b.n	8008266 <_strtod_l+0x912>
 80082c2:	2601      	movs	r6, #1
 80082c4:	4013      	ands	r3, r2
 80082c6:	4a98      	ldr	r2, [pc, #608]	; (8008528 <_strtod_l+0xbd4>)
 80082c8:	4276      	negs	r6, r6
 80082ca:	189b      	adds	r3, r3, r2
 80082cc:	4a97      	ldr	r2, [pc, #604]	; (800852c <_strtod_l+0xbd8>)
 80082ce:	431a      	orrs	r2, r3
 80082d0:	0017      	movs	r7, r2
 80082d2:	e7c8      	b.n	8008266 <_strtod_l+0x912>
 80082d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082d6:	4233      	tst	r3, r6
 80082d8:	d0c5      	beq.n	8008266 <_strtod_l+0x912>
 80082da:	e7e1      	b.n	80082a0 <_strtod_l+0x94c>
 80082dc:	f7ff fb22 	bl	8007924 <sulp>
 80082e0:	0002      	movs	r2, r0
 80082e2:	000b      	movs	r3, r1
 80082e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80082e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80082e8:	f7f9 fc82 	bl	8001bf0 <__aeabi_dsub>
 80082ec:	2200      	movs	r2, #0
 80082ee:	2300      	movs	r3, #0
 80082f0:	0006      	movs	r6, r0
 80082f2:	000f      	movs	r7, r1
 80082f4:	f7f8 f8a8 	bl	8000448 <__aeabi_dcmpeq>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d0b4      	beq.n	8008266 <_strtod_l+0x912>
 80082fc:	e600      	b.n	8007f00 <_strtod_l+0x5ac>
 80082fe:	9906      	ldr	r1, [sp, #24]
 8008300:	9805      	ldr	r0, [sp, #20]
 8008302:	f001 fc91 	bl	8009c28 <__ratio>
 8008306:	2380      	movs	r3, #128	; 0x80
 8008308:	2200      	movs	r2, #0
 800830a:	05db      	lsls	r3, r3, #23
 800830c:	0004      	movs	r4, r0
 800830e:	000d      	movs	r5, r1
 8008310:	f7f8 f8aa 	bl	8000468 <__aeabi_dcmple>
 8008314:	2800      	cmp	r0, #0
 8008316:	d06d      	beq.n	80083f4 <_strtod_l+0xaa0>
 8008318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800831a:	2b00      	cmp	r3, #0
 800831c:	d000      	beq.n	8008320 <_strtod_l+0x9cc>
 800831e:	e07e      	b.n	800841e <_strtod_l+0xaca>
 8008320:	2e00      	cmp	r6, #0
 8008322:	d158      	bne.n	80083d6 <_strtod_l+0xa82>
 8008324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008326:	031b      	lsls	r3, r3, #12
 8008328:	d000      	beq.n	800832c <_strtod_l+0x9d8>
 800832a:	e07f      	b.n	800842c <_strtod_l+0xad8>
 800832c:	2200      	movs	r2, #0
 800832e:	0020      	movs	r0, r4
 8008330:	0029      	movs	r1, r5
 8008332:	4b7f      	ldr	r3, [pc, #508]	; (8008530 <_strtod_l+0xbdc>)
 8008334:	f7f8 f88e 	bl	8000454 <__aeabi_dcmplt>
 8008338:	2800      	cmp	r0, #0
 800833a:	d158      	bne.n	80083ee <_strtod_l+0xa9a>
 800833c:	0020      	movs	r0, r4
 800833e:	0029      	movs	r1, r5
 8008340:	2200      	movs	r2, #0
 8008342:	4b7c      	ldr	r3, [pc, #496]	; (8008534 <_strtod_l+0xbe0>)
 8008344:	f7f9 f992 	bl	800166c <__aeabi_dmul>
 8008348:	0004      	movs	r4, r0
 800834a:	000d      	movs	r5, r1
 800834c:	2380      	movs	r3, #128	; 0x80
 800834e:	061b      	lsls	r3, r3, #24
 8008350:	940a      	str	r4, [sp, #40]	; 0x28
 8008352:	18eb      	adds	r3, r5, r3
 8008354:	930b      	str	r3, [sp, #44]	; 0x2c
 8008356:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800835a:	9212      	str	r2, [sp, #72]	; 0x48
 800835c:	9313      	str	r3, [sp, #76]	; 0x4c
 800835e:	4a76      	ldr	r2, [pc, #472]	; (8008538 <_strtod_l+0xbe4>)
 8008360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008362:	4013      	ands	r3, r2
 8008364:	9314      	str	r3, [sp, #80]	; 0x50
 8008366:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008368:	4b74      	ldr	r3, [pc, #464]	; (800853c <_strtod_l+0xbe8>)
 800836a:	429a      	cmp	r2, r3
 800836c:	d000      	beq.n	8008370 <_strtod_l+0xa1c>
 800836e:	e091      	b.n	8008494 <_strtod_l+0xb40>
 8008370:	4a73      	ldr	r2, [pc, #460]	; (8008540 <_strtod_l+0xbec>)
 8008372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008374:	4694      	mov	ip, r2
 8008376:	4463      	add	r3, ip
 8008378:	001f      	movs	r7, r3
 800837a:	0030      	movs	r0, r6
 800837c:	0019      	movs	r1, r3
 800837e:	f001 fb8b 	bl	8009a98 <__ulp>
 8008382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008386:	f7f9 f971 	bl	800166c <__aeabi_dmul>
 800838a:	0032      	movs	r2, r6
 800838c:	003b      	movs	r3, r7
 800838e:	f7f8 fa13 	bl	80007b8 <__aeabi_dadd>
 8008392:	4a69      	ldr	r2, [pc, #420]	; (8008538 <_strtod_l+0xbe4>)
 8008394:	4b6b      	ldr	r3, [pc, #428]	; (8008544 <_strtod_l+0xbf0>)
 8008396:	0006      	movs	r6, r0
 8008398:	400a      	ands	r2, r1
 800839a:	429a      	cmp	r2, r3
 800839c:	d949      	bls.n	8008432 <_strtod_l+0xade>
 800839e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80083a0:	4b69      	ldr	r3, [pc, #420]	; (8008548 <_strtod_l+0xbf4>)
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d103      	bne.n	80083ae <_strtod_l+0xa5a>
 80083a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083a8:	3301      	adds	r3, #1
 80083aa:	d100      	bne.n	80083ae <_strtod_l+0xa5a>
 80083ac:	e535      	b.n	8007e1a <_strtod_l+0x4c6>
 80083ae:	2601      	movs	r6, #1
 80083b0:	4f65      	ldr	r7, [pc, #404]	; (8008548 <_strtod_l+0xbf4>)
 80083b2:	4276      	negs	r6, r6
 80083b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80083b6:	9804      	ldr	r0, [sp, #16]
 80083b8:	f001 f860 	bl	800947c <_Bfree>
 80083bc:	9908      	ldr	r1, [sp, #32]
 80083be:	9804      	ldr	r0, [sp, #16]
 80083c0:	f001 f85c 	bl	800947c <_Bfree>
 80083c4:	9906      	ldr	r1, [sp, #24]
 80083c6:	9804      	ldr	r0, [sp, #16]
 80083c8:	f001 f858 	bl	800947c <_Bfree>
 80083cc:	9905      	ldr	r1, [sp, #20]
 80083ce:	9804      	ldr	r0, [sp, #16]
 80083d0:	f001 f854 	bl	800947c <_Bfree>
 80083d4:	e60b      	b.n	8007fee <_strtod_l+0x69a>
 80083d6:	2e01      	cmp	r6, #1
 80083d8:	d103      	bne.n	80083e2 <_strtod_l+0xa8e>
 80083da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d100      	bne.n	80083e2 <_strtod_l+0xa8e>
 80083e0:	e58e      	b.n	8007f00 <_strtod_l+0x5ac>
 80083e2:	2300      	movs	r3, #0
 80083e4:	4c59      	ldr	r4, [pc, #356]	; (800854c <_strtod_l+0xbf8>)
 80083e6:	930a      	str	r3, [sp, #40]	; 0x28
 80083e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80083ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80083ec:	e01c      	b.n	8008428 <_strtod_l+0xad4>
 80083ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80083f0:	4d50      	ldr	r5, [pc, #320]	; (8008534 <_strtod_l+0xbe0>)
 80083f2:	e7ab      	b.n	800834c <_strtod_l+0x9f8>
 80083f4:	2200      	movs	r2, #0
 80083f6:	0020      	movs	r0, r4
 80083f8:	0029      	movs	r1, r5
 80083fa:	4b4e      	ldr	r3, [pc, #312]	; (8008534 <_strtod_l+0xbe0>)
 80083fc:	f7f9 f936 	bl	800166c <__aeabi_dmul>
 8008400:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008402:	0004      	movs	r4, r0
 8008404:	000b      	movs	r3, r1
 8008406:	000d      	movs	r5, r1
 8008408:	2a00      	cmp	r2, #0
 800840a:	d104      	bne.n	8008416 <_strtod_l+0xac2>
 800840c:	2280      	movs	r2, #128	; 0x80
 800840e:	0612      	lsls	r2, r2, #24
 8008410:	900a      	str	r0, [sp, #40]	; 0x28
 8008412:	188b      	adds	r3, r1, r2
 8008414:	e79e      	b.n	8008354 <_strtod_l+0xa00>
 8008416:	0002      	movs	r2, r0
 8008418:	920a      	str	r2, [sp, #40]	; 0x28
 800841a:	930b      	str	r3, [sp, #44]	; 0x2c
 800841c:	e79b      	b.n	8008356 <_strtod_l+0xa02>
 800841e:	2300      	movs	r3, #0
 8008420:	4c43      	ldr	r4, [pc, #268]	; (8008530 <_strtod_l+0xbdc>)
 8008422:	930a      	str	r3, [sp, #40]	; 0x28
 8008424:	940b      	str	r4, [sp, #44]	; 0x2c
 8008426:	2400      	movs	r4, #0
 8008428:	4d41      	ldr	r5, [pc, #260]	; (8008530 <_strtod_l+0xbdc>)
 800842a:	e794      	b.n	8008356 <_strtod_l+0xa02>
 800842c:	2300      	movs	r3, #0
 800842e:	4c47      	ldr	r4, [pc, #284]	; (800854c <_strtod_l+0xbf8>)
 8008430:	e7f7      	b.n	8008422 <_strtod_l+0xace>
 8008432:	23d4      	movs	r3, #212	; 0xd4
 8008434:	049b      	lsls	r3, r3, #18
 8008436:	18cf      	adds	r7, r1, r3
 8008438:	9b07      	ldr	r3, [sp, #28]
 800843a:	970e      	str	r7, [sp, #56]	; 0x38
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1b9      	bne.n	80083b4 <_strtod_l+0xa60>
 8008440:	4b3d      	ldr	r3, [pc, #244]	; (8008538 <_strtod_l+0xbe4>)
 8008442:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008444:	403b      	ands	r3, r7
 8008446:	429a      	cmp	r2, r3
 8008448:	d1b4      	bne.n	80083b4 <_strtod_l+0xa60>
 800844a:	0020      	movs	r0, r4
 800844c:	0029      	movs	r1, r5
 800844e:	f7f8 f895 	bl	800057c <__aeabi_d2lz>
 8008452:	f7f8 f8cf 	bl	80005f4 <__aeabi_l2d>
 8008456:	0002      	movs	r2, r0
 8008458:	000b      	movs	r3, r1
 800845a:	0020      	movs	r0, r4
 800845c:	0029      	movs	r1, r5
 800845e:	f7f9 fbc7 	bl	8001bf0 <__aeabi_dsub>
 8008462:	033b      	lsls	r3, r7, #12
 8008464:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008466:	0b1b      	lsrs	r3, r3, #12
 8008468:	4333      	orrs	r3, r6
 800846a:	4313      	orrs	r3, r2
 800846c:	0004      	movs	r4, r0
 800846e:	000d      	movs	r5, r1
 8008470:	4a37      	ldr	r2, [pc, #220]	; (8008550 <_strtod_l+0xbfc>)
 8008472:	2b00      	cmp	r3, #0
 8008474:	d054      	beq.n	8008520 <_strtod_l+0xbcc>
 8008476:	4b37      	ldr	r3, [pc, #220]	; (8008554 <_strtod_l+0xc00>)
 8008478:	f7f7 ffec 	bl	8000454 <__aeabi_dcmplt>
 800847c:	2800      	cmp	r0, #0
 800847e:	d000      	beq.n	8008482 <_strtod_l+0xb2e>
 8008480:	e4d4      	b.n	8007e2c <_strtod_l+0x4d8>
 8008482:	0020      	movs	r0, r4
 8008484:	0029      	movs	r1, r5
 8008486:	4a34      	ldr	r2, [pc, #208]	; (8008558 <_strtod_l+0xc04>)
 8008488:	4b2a      	ldr	r3, [pc, #168]	; (8008534 <_strtod_l+0xbe0>)
 800848a:	f7f7 fff7 	bl	800047c <__aeabi_dcmpgt>
 800848e:	2800      	cmp	r0, #0
 8008490:	d090      	beq.n	80083b4 <_strtod_l+0xa60>
 8008492:	e4cb      	b.n	8007e2c <_strtod_l+0x4d8>
 8008494:	9b07      	ldr	r3, [sp, #28]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d02b      	beq.n	80084f2 <_strtod_l+0xb9e>
 800849a:	23d4      	movs	r3, #212	; 0xd4
 800849c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800849e:	04db      	lsls	r3, r3, #19
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d826      	bhi.n	80084f2 <_strtod_l+0xb9e>
 80084a4:	0020      	movs	r0, r4
 80084a6:	0029      	movs	r1, r5
 80084a8:	4a2c      	ldr	r2, [pc, #176]	; (800855c <_strtod_l+0xc08>)
 80084aa:	4b2d      	ldr	r3, [pc, #180]	; (8008560 <_strtod_l+0xc0c>)
 80084ac:	f7f7 ffdc 	bl	8000468 <__aeabi_dcmple>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d017      	beq.n	80084e4 <_strtod_l+0xb90>
 80084b4:	0020      	movs	r0, r4
 80084b6:	0029      	movs	r1, r5
 80084b8:	f7f8 f842 	bl	8000540 <__aeabi_d2uiz>
 80084bc:	2800      	cmp	r0, #0
 80084be:	d100      	bne.n	80084c2 <_strtod_l+0xb6e>
 80084c0:	3001      	adds	r0, #1
 80084c2:	f7f9 ff9b 	bl	80023fc <__aeabi_ui2d>
 80084c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084c8:	0004      	movs	r4, r0
 80084ca:	000b      	movs	r3, r1
 80084cc:	000d      	movs	r5, r1
 80084ce:	2a00      	cmp	r2, #0
 80084d0:	d122      	bne.n	8008518 <_strtod_l+0xbc4>
 80084d2:	2280      	movs	r2, #128	; 0x80
 80084d4:	0612      	lsls	r2, r2, #24
 80084d6:	188b      	adds	r3, r1, r2
 80084d8:	9016      	str	r0, [sp, #88]	; 0x58
 80084da:	9317      	str	r3, [sp, #92]	; 0x5c
 80084dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80084de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084e0:	9212      	str	r2, [sp, #72]	; 0x48
 80084e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80084e4:	22d6      	movs	r2, #214	; 0xd6
 80084e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084e8:	04d2      	lsls	r2, r2, #19
 80084ea:	189b      	adds	r3, r3, r2
 80084ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80084ee:	1a9b      	subs	r3, r3, r2
 80084f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80084f2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80084f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80084f6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80084f8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80084fa:	f001 facd 	bl	8009a98 <__ulp>
 80084fe:	0002      	movs	r2, r0
 8008500:	000b      	movs	r3, r1
 8008502:	0030      	movs	r0, r6
 8008504:	0039      	movs	r1, r7
 8008506:	f7f9 f8b1 	bl	800166c <__aeabi_dmul>
 800850a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800850c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800850e:	f7f8 f953 	bl	80007b8 <__aeabi_dadd>
 8008512:	0006      	movs	r6, r0
 8008514:	000f      	movs	r7, r1
 8008516:	e78f      	b.n	8008438 <_strtod_l+0xae4>
 8008518:	0002      	movs	r2, r0
 800851a:	9216      	str	r2, [sp, #88]	; 0x58
 800851c:	9317      	str	r3, [sp, #92]	; 0x5c
 800851e:	e7dd      	b.n	80084dc <_strtod_l+0xb88>
 8008520:	4b10      	ldr	r3, [pc, #64]	; (8008564 <_strtod_l+0xc10>)
 8008522:	f7f7 ff97 	bl	8000454 <__aeabi_dcmplt>
 8008526:	e7b2      	b.n	800848e <_strtod_l+0xb3a>
 8008528:	fff00000 	.word	0xfff00000
 800852c:	000fffff 	.word	0x000fffff
 8008530:	3ff00000 	.word	0x3ff00000
 8008534:	3fe00000 	.word	0x3fe00000
 8008538:	7ff00000 	.word	0x7ff00000
 800853c:	7fe00000 	.word	0x7fe00000
 8008540:	fcb00000 	.word	0xfcb00000
 8008544:	7c9fffff 	.word	0x7c9fffff
 8008548:	7fefffff 	.word	0x7fefffff
 800854c:	bff00000 	.word	0xbff00000
 8008550:	94a03595 	.word	0x94a03595
 8008554:	3fdfffff 	.word	0x3fdfffff
 8008558:	35afe535 	.word	0x35afe535
 800855c:	ffc00000 	.word	0xffc00000
 8008560:	41dfffff 	.word	0x41dfffff
 8008564:	3fcfffff 	.word	0x3fcfffff

08008568 <_strtod_r>:
 8008568:	b510      	push	{r4, lr}
 800856a:	4b02      	ldr	r3, [pc, #8]	; (8008574 <_strtod_r+0xc>)
 800856c:	f7ff f9f2 	bl	8007954 <_strtod_l>
 8008570:	bd10      	pop	{r4, pc}
 8008572:	46c0      	nop			; (mov r8, r8)
 8008574:	2000042c 	.word	0x2000042c

08008578 <_strtol_l.constprop.0>:
 8008578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800857a:	b087      	sub	sp, #28
 800857c:	001e      	movs	r6, r3
 800857e:	9005      	str	r0, [sp, #20]
 8008580:	9101      	str	r1, [sp, #4]
 8008582:	9202      	str	r2, [sp, #8]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d048      	beq.n	800861a <_strtol_l.constprop.0+0xa2>
 8008588:	000b      	movs	r3, r1
 800858a:	2e24      	cmp	r6, #36	; 0x24
 800858c:	d845      	bhi.n	800861a <_strtol_l.constprop.0+0xa2>
 800858e:	4a3b      	ldr	r2, [pc, #236]	; (800867c <_strtol_l.constprop.0+0x104>)
 8008590:	2108      	movs	r1, #8
 8008592:	4694      	mov	ip, r2
 8008594:	001a      	movs	r2, r3
 8008596:	4660      	mov	r0, ip
 8008598:	7814      	ldrb	r4, [r2, #0]
 800859a:	3301      	adds	r3, #1
 800859c:	5d00      	ldrb	r0, [r0, r4]
 800859e:	001d      	movs	r5, r3
 80085a0:	0007      	movs	r7, r0
 80085a2:	400f      	ands	r7, r1
 80085a4:	4208      	tst	r0, r1
 80085a6:	d1f5      	bne.n	8008594 <_strtol_l.constprop.0+0x1c>
 80085a8:	2c2d      	cmp	r4, #45	; 0x2d
 80085aa:	d13d      	bne.n	8008628 <_strtol_l.constprop.0+0xb0>
 80085ac:	2701      	movs	r7, #1
 80085ae:	781c      	ldrb	r4, [r3, #0]
 80085b0:	1c95      	adds	r5, r2, #2
 80085b2:	2e00      	cmp	r6, #0
 80085b4:	d05e      	beq.n	8008674 <_strtol_l.constprop.0+0xfc>
 80085b6:	2e10      	cmp	r6, #16
 80085b8:	d109      	bne.n	80085ce <_strtol_l.constprop.0+0x56>
 80085ba:	2c30      	cmp	r4, #48	; 0x30
 80085bc:	d107      	bne.n	80085ce <_strtol_l.constprop.0+0x56>
 80085be:	2220      	movs	r2, #32
 80085c0:	782b      	ldrb	r3, [r5, #0]
 80085c2:	4393      	bics	r3, r2
 80085c4:	2b58      	cmp	r3, #88	; 0x58
 80085c6:	d150      	bne.n	800866a <_strtol_l.constprop.0+0xf2>
 80085c8:	2610      	movs	r6, #16
 80085ca:	786c      	ldrb	r4, [r5, #1]
 80085cc:	3502      	adds	r5, #2
 80085ce:	4b2c      	ldr	r3, [pc, #176]	; (8008680 <_strtol_l.constprop.0+0x108>)
 80085d0:	0031      	movs	r1, r6
 80085d2:	18fb      	adds	r3, r7, r3
 80085d4:	0018      	movs	r0, r3
 80085d6:	9303      	str	r3, [sp, #12]
 80085d8:	f7f7 fe36 	bl	8000248 <__aeabi_uidivmod>
 80085dc:	2200      	movs	r2, #0
 80085de:	9104      	str	r1, [sp, #16]
 80085e0:	2101      	movs	r1, #1
 80085e2:	4684      	mov	ip, r0
 80085e4:	0010      	movs	r0, r2
 80085e6:	4249      	negs	r1, r1
 80085e8:	0023      	movs	r3, r4
 80085ea:	3b30      	subs	r3, #48	; 0x30
 80085ec:	2b09      	cmp	r3, #9
 80085ee:	d903      	bls.n	80085f8 <_strtol_l.constprop.0+0x80>
 80085f0:	3b11      	subs	r3, #17
 80085f2:	2b19      	cmp	r3, #25
 80085f4:	d81d      	bhi.n	8008632 <_strtol_l.constprop.0+0xba>
 80085f6:	330a      	adds	r3, #10
 80085f8:	429e      	cmp	r6, r3
 80085fa:	dd1e      	ble.n	800863a <_strtol_l.constprop.0+0xc2>
 80085fc:	1c54      	adds	r4, r2, #1
 80085fe:	d009      	beq.n	8008614 <_strtol_l.constprop.0+0x9c>
 8008600:	000a      	movs	r2, r1
 8008602:	4584      	cmp	ip, r0
 8008604:	d306      	bcc.n	8008614 <_strtol_l.constprop.0+0x9c>
 8008606:	d102      	bne.n	800860e <_strtol_l.constprop.0+0x96>
 8008608:	9c04      	ldr	r4, [sp, #16]
 800860a:	429c      	cmp	r4, r3
 800860c:	db02      	blt.n	8008614 <_strtol_l.constprop.0+0x9c>
 800860e:	2201      	movs	r2, #1
 8008610:	4370      	muls	r0, r6
 8008612:	1818      	adds	r0, r3, r0
 8008614:	782c      	ldrb	r4, [r5, #0]
 8008616:	3501      	adds	r5, #1
 8008618:	e7e6      	b.n	80085e8 <_strtol_l.constprop.0+0x70>
 800861a:	f000 fa33 	bl	8008a84 <__errno>
 800861e:	2316      	movs	r3, #22
 8008620:	6003      	str	r3, [r0, #0]
 8008622:	2000      	movs	r0, #0
 8008624:	b007      	add	sp, #28
 8008626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008628:	2c2b      	cmp	r4, #43	; 0x2b
 800862a:	d1c2      	bne.n	80085b2 <_strtol_l.constprop.0+0x3a>
 800862c:	781c      	ldrb	r4, [r3, #0]
 800862e:	1c95      	adds	r5, r2, #2
 8008630:	e7bf      	b.n	80085b2 <_strtol_l.constprop.0+0x3a>
 8008632:	0023      	movs	r3, r4
 8008634:	3b61      	subs	r3, #97	; 0x61
 8008636:	2b19      	cmp	r3, #25
 8008638:	d9dd      	bls.n	80085f6 <_strtol_l.constprop.0+0x7e>
 800863a:	1c53      	adds	r3, r2, #1
 800863c:	d109      	bne.n	8008652 <_strtol_l.constprop.0+0xda>
 800863e:	2322      	movs	r3, #34	; 0x22
 8008640:	9a05      	ldr	r2, [sp, #20]
 8008642:	9803      	ldr	r0, [sp, #12]
 8008644:	6013      	str	r3, [r2, #0]
 8008646:	9b02      	ldr	r3, [sp, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d0eb      	beq.n	8008624 <_strtol_l.constprop.0+0xac>
 800864c:	1e6b      	subs	r3, r5, #1
 800864e:	9301      	str	r3, [sp, #4]
 8008650:	e007      	b.n	8008662 <_strtol_l.constprop.0+0xea>
 8008652:	2f00      	cmp	r7, #0
 8008654:	d000      	beq.n	8008658 <_strtol_l.constprop.0+0xe0>
 8008656:	4240      	negs	r0, r0
 8008658:	9b02      	ldr	r3, [sp, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d0e2      	beq.n	8008624 <_strtol_l.constprop.0+0xac>
 800865e:	2a00      	cmp	r2, #0
 8008660:	d1f4      	bne.n	800864c <_strtol_l.constprop.0+0xd4>
 8008662:	9b02      	ldr	r3, [sp, #8]
 8008664:	9a01      	ldr	r2, [sp, #4]
 8008666:	601a      	str	r2, [r3, #0]
 8008668:	e7dc      	b.n	8008624 <_strtol_l.constprop.0+0xac>
 800866a:	2430      	movs	r4, #48	; 0x30
 800866c:	2e00      	cmp	r6, #0
 800866e:	d1ae      	bne.n	80085ce <_strtol_l.constprop.0+0x56>
 8008670:	3608      	adds	r6, #8
 8008672:	e7ac      	b.n	80085ce <_strtol_l.constprop.0+0x56>
 8008674:	2c30      	cmp	r4, #48	; 0x30
 8008676:	d0a2      	beq.n	80085be <_strtol_l.constprop.0+0x46>
 8008678:	260a      	movs	r6, #10
 800867a:	e7a8      	b.n	80085ce <_strtol_l.constprop.0+0x56>
 800867c:	0800f6d9 	.word	0x0800f6d9
 8008680:	7fffffff 	.word	0x7fffffff

08008684 <_strtol_r>:
 8008684:	b510      	push	{r4, lr}
 8008686:	f7ff ff77 	bl	8008578 <_strtol_l.constprop.0>
 800868a:	bd10      	pop	{r4, pc}

0800868c <strtol>:
 800868c:	b510      	push	{r4, lr}
 800868e:	4c04      	ldr	r4, [pc, #16]	; (80086a0 <strtol+0x14>)
 8008690:	0013      	movs	r3, r2
 8008692:	000a      	movs	r2, r1
 8008694:	0001      	movs	r1, r0
 8008696:	6820      	ldr	r0, [r4, #0]
 8008698:	f7ff ff6e 	bl	8008578 <_strtol_l.constprop.0>
 800869c:	bd10      	pop	{r4, pc}
 800869e:	46c0      	nop			; (mov r8, r8)
 80086a0:	200006b8 	.word	0x200006b8

080086a4 <std>:
 80086a4:	2300      	movs	r3, #0
 80086a6:	b510      	push	{r4, lr}
 80086a8:	0004      	movs	r4, r0
 80086aa:	6003      	str	r3, [r0, #0]
 80086ac:	6043      	str	r3, [r0, #4]
 80086ae:	6083      	str	r3, [r0, #8]
 80086b0:	8181      	strh	r1, [r0, #12]
 80086b2:	6643      	str	r3, [r0, #100]	; 0x64
 80086b4:	81c2      	strh	r2, [r0, #14]
 80086b6:	6103      	str	r3, [r0, #16]
 80086b8:	6143      	str	r3, [r0, #20]
 80086ba:	6183      	str	r3, [r0, #24]
 80086bc:	0019      	movs	r1, r3
 80086be:	2208      	movs	r2, #8
 80086c0:	305c      	adds	r0, #92	; 0x5c
 80086c2:	f000 f949 	bl	8008958 <memset>
 80086c6:	4b0b      	ldr	r3, [pc, #44]	; (80086f4 <std+0x50>)
 80086c8:	61e4      	str	r4, [r4, #28]
 80086ca:	6223      	str	r3, [r4, #32]
 80086cc:	4b0a      	ldr	r3, [pc, #40]	; (80086f8 <std+0x54>)
 80086ce:	6263      	str	r3, [r4, #36]	; 0x24
 80086d0:	4b0a      	ldr	r3, [pc, #40]	; (80086fc <std+0x58>)
 80086d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80086d4:	4b0a      	ldr	r3, [pc, #40]	; (8008700 <std+0x5c>)
 80086d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086d8:	4b0a      	ldr	r3, [pc, #40]	; (8008704 <std+0x60>)
 80086da:	429c      	cmp	r4, r3
 80086dc:	d005      	beq.n	80086ea <std+0x46>
 80086de:	4b0a      	ldr	r3, [pc, #40]	; (8008708 <std+0x64>)
 80086e0:	429c      	cmp	r4, r3
 80086e2:	d002      	beq.n	80086ea <std+0x46>
 80086e4:	4b09      	ldr	r3, [pc, #36]	; (800870c <std+0x68>)
 80086e6:	429c      	cmp	r4, r3
 80086e8:	d103      	bne.n	80086f2 <std+0x4e>
 80086ea:	0020      	movs	r0, r4
 80086ec:	3058      	adds	r0, #88	; 0x58
 80086ee:	f000 f9f3 	bl	8008ad8 <__retarget_lock_init_recursive>
 80086f2:	bd10      	pop	{r4, pc}
 80086f4:	080088bd 	.word	0x080088bd
 80086f8:	080088e9 	.word	0x080088e9
 80086fc:	08008921 	.word	0x08008921
 8008700:	0800894d 	.word	0x0800894d
 8008704:	20000a78 	.word	0x20000a78
 8008708:	20000ae0 	.word	0x20000ae0
 800870c:	20000b48 	.word	0x20000b48

08008710 <stdio_exit_handler>:
 8008710:	b510      	push	{r4, lr}
 8008712:	4a03      	ldr	r2, [pc, #12]	; (8008720 <stdio_exit_handler+0x10>)
 8008714:	4903      	ldr	r1, [pc, #12]	; (8008724 <stdio_exit_handler+0x14>)
 8008716:	4804      	ldr	r0, [pc, #16]	; (8008728 <stdio_exit_handler+0x18>)
 8008718:	f000 f86c 	bl	80087f4 <_fwalk_sglue>
 800871c:	bd10      	pop	{r4, pc}
 800871e:	46c0      	nop			; (mov r8, r8)
 8008720:	20000420 	.word	0x20000420
 8008724:	0800c5d9 	.word	0x0800c5d9
 8008728:	20000598 	.word	0x20000598

0800872c <cleanup_stdio>:
 800872c:	6841      	ldr	r1, [r0, #4]
 800872e:	4b0b      	ldr	r3, [pc, #44]	; (800875c <cleanup_stdio+0x30>)
 8008730:	b510      	push	{r4, lr}
 8008732:	0004      	movs	r4, r0
 8008734:	4299      	cmp	r1, r3
 8008736:	d001      	beq.n	800873c <cleanup_stdio+0x10>
 8008738:	f003 ff4e 	bl	800c5d8 <_fclose_r>
 800873c:	68a1      	ldr	r1, [r4, #8]
 800873e:	4b08      	ldr	r3, [pc, #32]	; (8008760 <cleanup_stdio+0x34>)
 8008740:	4299      	cmp	r1, r3
 8008742:	d002      	beq.n	800874a <cleanup_stdio+0x1e>
 8008744:	0020      	movs	r0, r4
 8008746:	f003 ff47 	bl	800c5d8 <_fclose_r>
 800874a:	68e1      	ldr	r1, [r4, #12]
 800874c:	4b05      	ldr	r3, [pc, #20]	; (8008764 <cleanup_stdio+0x38>)
 800874e:	4299      	cmp	r1, r3
 8008750:	d002      	beq.n	8008758 <cleanup_stdio+0x2c>
 8008752:	0020      	movs	r0, r4
 8008754:	f003 ff40 	bl	800c5d8 <_fclose_r>
 8008758:	bd10      	pop	{r4, pc}
 800875a:	46c0      	nop			; (mov r8, r8)
 800875c:	20000a78 	.word	0x20000a78
 8008760:	20000ae0 	.word	0x20000ae0
 8008764:	20000b48 	.word	0x20000b48

08008768 <global_stdio_init.part.0>:
 8008768:	b510      	push	{r4, lr}
 800876a:	4b09      	ldr	r3, [pc, #36]	; (8008790 <global_stdio_init.part.0+0x28>)
 800876c:	4a09      	ldr	r2, [pc, #36]	; (8008794 <global_stdio_init.part.0+0x2c>)
 800876e:	2104      	movs	r1, #4
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	4809      	ldr	r0, [pc, #36]	; (8008798 <global_stdio_init.part.0+0x30>)
 8008774:	2200      	movs	r2, #0
 8008776:	f7ff ff95 	bl	80086a4 <std>
 800877a:	2201      	movs	r2, #1
 800877c:	2109      	movs	r1, #9
 800877e:	4807      	ldr	r0, [pc, #28]	; (800879c <global_stdio_init.part.0+0x34>)
 8008780:	f7ff ff90 	bl	80086a4 <std>
 8008784:	2202      	movs	r2, #2
 8008786:	2112      	movs	r1, #18
 8008788:	4805      	ldr	r0, [pc, #20]	; (80087a0 <global_stdio_init.part.0+0x38>)
 800878a:	f7ff ff8b 	bl	80086a4 <std>
 800878e:	bd10      	pop	{r4, pc}
 8008790:	20000bb0 	.word	0x20000bb0
 8008794:	08008711 	.word	0x08008711
 8008798:	20000a78 	.word	0x20000a78
 800879c:	20000ae0 	.word	0x20000ae0
 80087a0:	20000b48 	.word	0x20000b48

080087a4 <__sfp_lock_acquire>:
 80087a4:	b510      	push	{r4, lr}
 80087a6:	4802      	ldr	r0, [pc, #8]	; (80087b0 <__sfp_lock_acquire+0xc>)
 80087a8:	f000 f998 	bl	8008adc <__retarget_lock_acquire_recursive>
 80087ac:	bd10      	pop	{r4, pc}
 80087ae:	46c0      	nop			; (mov r8, r8)
 80087b0:	20000bba 	.word	0x20000bba

080087b4 <__sfp_lock_release>:
 80087b4:	b510      	push	{r4, lr}
 80087b6:	4802      	ldr	r0, [pc, #8]	; (80087c0 <__sfp_lock_release+0xc>)
 80087b8:	f000 f991 	bl	8008ade <__retarget_lock_release_recursive>
 80087bc:	bd10      	pop	{r4, pc}
 80087be:	46c0      	nop			; (mov r8, r8)
 80087c0:	20000bba 	.word	0x20000bba

080087c4 <__sinit>:
 80087c4:	b510      	push	{r4, lr}
 80087c6:	0004      	movs	r4, r0
 80087c8:	f7ff ffec 	bl	80087a4 <__sfp_lock_acquire>
 80087cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <__sinit+0x14>
 80087d2:	f7ff ffef 	bl	80087b4 <__sfp_lock_release>
 80087d6:	bd10      	pop	{r4, pc}
 80087d8:	4b04      	ldr	r3, [pc, #16]	; (80087ec <__sinit+0x28>)
 80087da:	6363      	str	r3, [r4, #52]	; 0x34
 80087dc:	4b04      	ldr	r3, [pc, #16]	; (80087f0 <__sinit+0x2c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1f6      	bne.n	80087d2 <__sinit+0xe>
 80087e4:	f7ff ffc0 	bl	8008768 <global_stdio_init.part.0>
 80087e8:	e7f3      	b.n	80087d2 <__sinit+0xe>
 80087ea:	46c0      	nop			; (mov r8, r8)
 80087ec:	0800872d 	.word	0x0800872d
 80087f0:	20000bb0 	.word	0x20000bb0

080087f4 <_fwalk_sglue>:
 80087f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087f6:	0014      	movs	r4, r2
 80087f8:	2600      	movs	r6, #0
 80087fa:	9000      	str	r0, [sp, #0]
 80087fc:	9101      	str	r1, [sp, #4]
 80087fe:	68a5      	ldr	r5, [r4, #8]
 8008800:	6867      	ldr	r7, [r4, #4]
 8008802:	3f01      	subs	r7, #1
 8008804:	d504      	bpl.n	8008810 <_fwalk_sglue+0x1c>
 8008806:	6824      	ldr	r4, [r4, #0]
 8008808:	2c00      	cmp	r4, #0
 800880a:	d1f8      	bne.n	80087fe <_fwalk_sglue+0xa>
 800880c:	0030      	movs	r0, r6
 800880e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008810:	89ab      	ldrh	r3, [r5, #12]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d908      	bls.n	8008828 <_fwalk_sglue+0x34>
 8008816:	220e      	movs	r2, #14
 8008818:	5eab      	ldrsh	r3, [r5, r2]
 800881a:	3301      	adds	r3, #1
 800881c:	d004      	beq.n	8008828 <_fwalk_sglue+0x34>
 800881e:	0029      	movs	r1, r5
 8008820:	9800      	ldr	r0, [sp, #0]
 8008822:	9b01      	ldr	r3, [sp, #4]
 8008824:	4798      	blx	r3
 8008826:	4306      	orrs	r6, r0
 8008828:	3568      	adds	r5, #104	; 0x68
 800882a:	e7ea      	b.n	8008802 <_fwalk_sglue+0xe>

0800882c <sprintf>:
 800882c:	b40e      	push	{r1, r2, r3}
 800882e:	b500      	push	{lr}
 8008830:	490b      	ldr	r1, [pc, #44]	; (8008860 <sprintf+0x34>)
 8008832:	b09c      	sub	sp, #112	; 0x70
 8008834:	ab1d      	add	r3, sp, #116	; 0x74
 8008836:	9002      	str	r0, [sp, #8]
 8008838:	9006      	str	r0, [sp, #24]
 800883a:	9107      	str	r1, [sp, #28]
 800883c:	9104      	str	r1, [sp, #16]
 800883e:	4809      	ldr	r0, [pc, #36]	; (8008864 <sprintf+0x38>)
 8008840:	4909      	ldr	r1, [pc, #36]	; (8008868 <sprintf+0x3c>)
 8008842:	cb04      	ldmia	r3!, {r2}
 8008844:	9105      	str	r1, [sp, #20]
 8008846:	6800      	ldr	r0, [r0, #0]
 8008848:	a902      	add	r1, sp, #8
 800884a:	9301      	str	r3, [sp, #4]
 800884c:	f001 fa66 	bl	8009d1c <_svfprintf_r>
 8008850:	2200      	movs	r2, #0
 8008852:	9b02      	ldr	r3, [sp, #8]
 8008854:	701a      	strb	r2, [r3, #0]
 8008856:	b01c      	add	sp, #112	; 0x70
 8008858:	bc08      	pop	{r3}
 800885a:	b003      	add	sp, #12
 800885c:	4718      	bx	r3
 800885e:	46c0      	nop			; (mov r8, r8)
 8008860:	7fffffff 	.word	0x7fffffff
 8008864:	200006b8 	.word	0x200006b8
 8008868:	ffff0208 	.word	0xffff0208

0800886c <sscanf>:
 800886c:	b40e      	push	{r1, r2, r3}
 800886e:	b530      	push	{r4, r5, lr}
 8008870:	2381      	movs	r3, #129	; 0x81
 8008872:	b09c      	sub	sp, #112	; 0x70
 8008874:	466a      	mov	r2, sp
 8008876:	ac1f      	add	r4, sp, #124	; 0x7c
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	cc20      	ldmia	r4!, {r5}
 800887c:	8293      	strh	r3, [r2, #20]
 800887e:	9002      	str	r0, [sp, #8]
 8008880:	9006      	str	r0, [sp, #24]
 8008882:	f7f7 fc3f 	bl	8000104 <strlen>
 8008886:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <sscanf+0x48>)
 8008888:	466a      	mov	r2, sp
 800888a:	930a      	str	r3, [sp, #40]	; 0x28
 800888c:	2300      	movs	r3, #0
 800888e:	9003      	str	r0, [sp, #12]
 8008890:	9007      	str	r0, [sp, #28]
 8008892:	4809      	ldr	r0, [pc, #36]	; (80088b8 <sscanf+0x4c>)
 8008894:	930e      	str	r3, [sp, #56]	; 0x38
 8008896:	9313      	str	r3, [sp, #76]	; 0x4c
 8008898:	3b01      	subs	r3, #1
 800889a:	82d3      	strh	r3, [r2, #22]
 800889c:	a902      	add	r1, sp, #8
 800889e:	0023      	movs	r3, r4
 80088a0:	002a      	movs	r2, r5
 80088a2:	6800      	ldr	r0, [r0, #0]
 80088a4:	9401      	str	r4, [sp, #4]
 80088a6:	f002 fc7b 	bl	800b1a0 <__ssvfscanf_r>
 80088aa:	b01c      	add	sp, #112	; 0x70
 80088ac:	bc30      	pop	{r4, r5}
 80088ae:	bc08      	pop	{r3}
 80088b0:	b003      	add	sp, #12
 80088b2:	4718      	bx	r3
 80088b4:	080088e5 	.word	0x080088e5
 80088b8:	200006b8 	.word	0x200006b8

080088bc <__sread>:
 80088bc:	b570      	push	{r4, r5, r6, lr}
 80088be:	000c      	movs	r4, r1
 80088c0:	250e      	movs	r5, #14
 80088c2:	5f49      	ldrsh	r1, [r1, r5]
 80088c4:	f000 f8a4 	bl	8008a10 <_read_r>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	db03      	blt.n	80088d4 <__sread+0x18>
 80088cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80088ce:	181b      	adds	r3, r3, r0
 80088d0:	6523      	str	r3, [r4, #80]	; 0x50
 80088d2:	bd70      	pop	{r4, r5, r6, pc}
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	4a02      	ldr	r2, [pc, #8]	; (80088e0 <__sread+0x24>)
 80088d8:	4013      	ands	r3, r2
 80088da:	81a3      	strh	r3, [r4, #12]
 80088dc:	e7f9      	b.n	80088d2 <__sread+0x16>
 80088de:	46c0      	nop			; (mov r8, r8)
 80088e0:	ffffefff 	.word	0xffffefff

080088e4 <__seofread>:
 80088e4:	2000      	movs	r0, #0
 80088e6:	4770      	bx	lr

080088e8 <__swrite>:
 80088e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ea:	001f      	movs	r7, r3
 80088ec:	898b      	ldrh	r3, [r1, #12]
 80088ee:	0005      	movs	r5, r0
 80088f0:	000c      	movs	r4, r1
 80088f2:	0016      	movs	r6, r2
 80088f4:	05db      	lsls	r3, r3, #23
 80088f6:	d505      	bpl.n	8008904 <__swrite+0x1c>
 80088f8:	230e      	movs	r3, #14
 80088fa:	5ec9      	ldrsh	r1, [r1, r3]
 80088fc:	2200      	movs	r2, #0
 80088fe:	2302      	movs	r3, #2
 8008900:	f000 f872 	bl	80089e8 <_lseek_r>
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	4a05      	ldr	r2, [pc, #20]	; (800891c <__swrite+0x34>)
 8008908:	0028      	movs	r0, r5
 800890a:	4013      	ands	r3, r2
 800890c:	81a3      	strh	r3, [r4, #12]
 800890e:	0032      	movs	r2, r6
 8008910:	230e      	movs	r3, #14
 8008912:	5ee1      	ldrsh	r1, [r4, r3]
 8008914:	003b      	movs	r3, r7
 8008916:	f000 f8a1 	bl	8008a5c <_write_r>
 800891a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800891c:	ffffefff 	.word	0xffffefff

08008920 <__sseek>:
 8008920:	b570      	push	{r4, r5, r6, lr}
 8008922:	000c      	movs	r4, r1
 8008924:	250e      	movs	r5, #14
 8008926:	5f49      	ldrsh	r1, [r1, r5]
 8008928:	f000 f85e 	bl	80089e8 <_lseek_r>
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	1c42      	adds	r2, r0, #1
 8008930:	d103      	bne.n	800893a <__sseek+0x1a>
 8008932:	4a05      	ldr	r2, [pc, #20]	; (8008948 <__sseek+0x28>)
 8008934:	4013      	ands	r3, r2
 8008936:	81a3      	strh	r3, [r4, #12]
 8008938:	bd70      	pop	{r4, r5, r6, pc}
 800893a:	2280      	movs	r2, #128	; 0x80
 800893c:	0152      	lsls	r2, r2, #5
 800893e:	4313      	orrs	r3, r2
 8008940:	81a3      	strh	r3, [r4, #12]
 8008942:	6520      	str	r0, [r4, #80]	; 0x50
 8008944:	e7f8      	b.n	8008938 <__sseek+0x18>
 8008946:	46c0      	nop			; (mov r8, r8)
 8008948:	ffffefff 	.word	0xffffefff

0800894c <__sclose>:
 800894c:	b510      	push	{r4, lr}
 800894e:	230e      	movs	r3, #14
 8008950:	5ec9      	ldrsh	r1, [r1, r3]
 8008952:	f000 f837 	bl	80089c4 <_close_r>
 8008956:	bd10      	pop	{r4, pc}

08008958 <memset>:
 8008958:	0003      	movs	r3, r0
 800895a:	1882      	adds	r2, r0, r2
 800895c:	4293      	cmp	r3, r2
 800895e:	d100      	bne.n	8008962 <memset+0xa>
 8008960:	4770      	bx	lr
 8008962:	7019      	strb	r1, [r3, #0]
 8008964:	3301      	adds	r3, #1
 8008966:	e7f9      	b.n	800895c <memset+0x4>

08008968 <strncmp>:
 8008968:	b530      	push	{r4, r5, lr}
 800896a:	0005      	movs	r5, r0
 800896c:	1e10      	subs	r0, r2, #0
 800896e:	d00b      	beq.n	8008988 <strncmp+0x20>
 8008970:	2400      	movs	r4, #0
 8008972:	3a01      	subs	r2, #1
 8008974:	5d2b      	ldrb	r3, [r5, r4]
 8008976:	5d08      	ldrb	r0, [r1, r4]
 8008978:	4283      	cmp	r3, r0
 800897a:	d104      	bne.n	8008986 <strncmp+0x1e>
 800897c:	42a2      	cmp	r2, r4
 800897e:	d002      	beq.n	8008986 <strncmp+0x1e>
 8008980:	3401      	adds	r4, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1f6      	bne.n	8008974 <strncmp+0xc>
 8008986:	1a18      	subs	r0, r3, r0
 8008988:	bd30      	pop	{r4, r5, pc}

0800898a <strncpy>:
 800898a:	0003      	movs	r3, r0
 800898c:	b530      	push	{r4, r5, lr}
 800898e:	001d      	movs	r5, r3
 8008990:	2a00      	cmp	r2, #0
 8008992:	d006      	beq.n	80089a2 <strncpy+0x18>
 8008994:	780c      	ldrb	r4, [r1, #0]
 8008996:	3a01      	subs	r2, #1
 8008998:	3301      	adds	r3, #1
 800899a:	702c      	strb	r4, [r5, #0]
 800899c:	3101      	adds	r1, #1
 800899e:	2c00      	cmp	r4, #0
 80089a0:	d1f5      	bne.n	800898e <strncpy+0x4>
 80089a2:	2100      	movs	r1, #0
 80089a4:	189a      	adds	r2, r3, r2
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d100      	bne.n	80089ac <strncpy+0x22>
 80089aa:	bd30      	pop	{r4, r5, pc}
 80089ac:	7019      	strb	r1, [r3, #0]
 80089ae:	3301      	adds	r3, #1
 80089b0:	e7f9      	b.n	80089a6 <strncpy+0x1c>
	...

080089b4 <__locale_mb_cur_max>:
 80089b4:	2294      	movs	r2, #148	; 0x94
 80089b6:	4b02      	ldr	r3, [pc, #8]	; (80089c0 <__locale_mb_cur_max+0xc>)
 80089b8:	0052      	lsls	r2, r2, #1
 80089ba:	5c98      	ldrb	r0, [r3, r2]
 80089bc:	4770      	bx	lr
 80089be:	46c0      	nop			; (mov r8, r8)
 80089c0:	2000042c 	.word	0x2000042c

080089c4 <_close_r>:
 80089c4:	2300      	movs	r3, #0
 80089c6:	b570      	push	{r4, r5, r6, lr}
 80089c8:	4d06      	ldr	r5, [pc, #24]	; (80089e4 <_close_r+0x20>)
 80089ca:	0004      	movs	r4, r0
 80089cc:	0008      	movs	r0, r1
 80089ce:	602b      	str	r3, [r5, #0]
 80089d0:	f7fa fd65 	bl	800349e <_close>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d103      	bne.n	80089e0 <_close_r+0x1c>
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d000      	beq.n	80089e0 <_close_r+0x1c>
 80089de:	6023      	str	r3, [r4, #0]
 80089e0:	bd70      	pop	{r4, r5, r6, pc}
 80089e2:	46c0      	nop			; (mov r8, r8)
 80089e4:	20000bb4 	.word	0x20000bb4

080089e8 <_lseek_r>:
 80089e8:	b570      	push	{r4, r5, r6, lr}
 80089ea:	0004      	movs	r4, r0
 80089ec:	0008      	movs	r0, r1
 80089ee:	0011      	movs	r1, r2
 80089f0:	001a      	movs	r2, r3
 80089f2:	2300      	movs	r3, #0
 80089f4:	4d05      	ldr	r5, [pc, #20]	; (8008a0c <_lseek_r+0x24>)
 80089f6:	602b      	str	r3, [r5, #0]
 80089f8:	f7fa fd72 	bl	80034e0 <_lseek>
 80089fc:	1c43      	adds	r3, r0, #1
 80089fe:	d103      	bne.n	8008a08 <_lseek_r+0x20>
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d000      	beq.n	8008a08 <_lseek_r+0x20>
 8008a06:	6023      	str	r3, [r4, #0]
 8008a08:	bd70      	pop	{r4, r5, r6, pc}
 8008a0a:	46c0      	nop			; (mov r8, r8)
 8008a0c:	20000bb4 	.word	0x20000bb4

08008a10 <_read_r>:
 8008a10:	b570      	push	{r4, r5, r6, lr}
 8008a12:	0004      	movs	r4, r0
 8008a14:	0008      	movs	r0, r1
 8008a16:	0011      	movs	r1, r2
 8008a18:	001a      	movs	r2, r3
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	4d05      	ldr	r5, [pc, #20]	; (8008a34 <_read_r+0x24>)
 8008a1e:	602b      	str	r3, [r5, #0]
 8008a20:	f7fa fd04 	bl	800342c <_read>
 8008a24:	1c43      	adds	r3, r0, #1
 8008a26:	d103      	bne.n	8008a30 <_read_r+0x20>
 8008a28:	682b      	ldr	r3, [r5, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d000      	beq.n	8008a30 <_read_r+0x20>
 8008a2e:	6023      	str	r3, [r4, #0]
 8008a30:	bd70      	pop	{r4, r5, r6, pc}
 8008a32:	46c0      	nop			; (mov r8, r8)
 8008a34:	20000bb4 	.word	0x20000bb4

08008a38 <_sbrk_r>:
 8008a38:	2300      	movs	r3, #0
 8008a3a:	b570      	push	{r4, r5, r6, lr}
 8008a3c:	4d06      	ldr	r5, [pc, #24]	; (8008a58 <_sbrk_r+0x20>)
 8008a3e:	0004      	movs	r4, r0
 8008a40:	0008      	movs	r0, r1
 8008a42:	602b      	str	r3, [r5, #0]
 8008a44:	f7fa fd58 	bl	80034f8 <_sbrk>
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	d103      	bne.n	8008a54 <_sbrk_r+0x1c>
 8008a4c:	682b      	ldr	r3, [r5, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d000      	beq.n	8008a54 <_sbrk_r+0x1c>
 8008a52:	6023      	str	r3, [r4, #0]
 8008a54:	bd70      	pop	{r4, r5, r6, pc}
 8008a56:	46c0      	nop			; (mov r8, r8)
 8008a58:	20000bb4 	.word	0x20000bb4

08008a5c <_write_r>:
 8008a5c:	b570      	push	{r4, r5, r6, lr}
 8008a5e:	0004      	movs	r4, r0
 8008a60:	0008      	movs	r0, r1
 8008a62:	0011      	movs	r1, r2
 8008a64:	001a      	movs	r2, r3
 8008a66:	2300      	movs	r3, #0
 8008a68:	4d05      	ldr	r5, [pc, #20]	; (8008a80 <_write_r+0x24>)
 8008a6a:	602b      	str	r3, [r5, #0]
 8008a6c:	f7fa fcfb 	bl	8003466 <_write>
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	d103      	bne.n	8008a7c <_write_r+0x20>
 8008a74:	682b      	ldr	r3, [r5, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d000      	beq.n	8008a7c <_write_r+0x20>
 8008a7a:	6023      	str	r3, [r4, #0]
 8008a7c:	bd70      	pop	{r4, r5, r6, pc}
 8008a7e:	46c0      	nop			; (mov r8, r8)
 8008a80:	20000bb4 	.word	0x20000bb4

08008a84 <__errno>:
 8008a84:	4b01      	ldr	r3, [pc, #4]	; (8008a8c <__errno+0x8>)
 8008a86:	6818      	ldr	r0, [r3, #0]
 8008a88:	4770      	bx	lr
 8008a8a:	46c0      	nop			; (mov r8, r8)
 8008a8c:	200006b8 	.word	0x200006b8

08008a90 <__libc_init_array>:
 8008a90:	b570      	push	{r4, r5, r6, lr}
 8008a92:	2600      	movs	r6, #0
 8008a94:	4c0c      	ldr	r4, [pc, #48]	; (8008ac8 <__libc_init_array+0x38>)
 8008a96:	4d0d      	ldr	r5, [pc, #52]	; (8008acc <__libc_init_array+0x3c>)
 8008a98:	1b64      	subs	r4, r4, r5
 8008a9a:	10a4      	asrs	r4, r4, #2
 8008a9c:	42a6      	cmp	r6, r4
 8008a9e:	d109      	bne.n	8008ab4 <__libc_init_array+0x24>
 8008aa0:	2600      	movs	r6, #0
 8008aa2:	f006 fcc5 	bl	800f430 <_init>
 8008aa6:	4c0a      	ldr	r4, [pc, #40]	; (8008ad0 <__libc_init_array+0x40>)
 8008aa8:	4d0a      	ldr	r5, [pc, #40]	; (8008ad4 <__libc_init_array+0x44>)
 8008aaa:	1b64      	subs	r4, r4, r5
 8008aac:	10a4      	asrs	r4, r4, #2
 8008aae:	42a6      	cmp	r6, r4
 8008ab0:	d105      	bne.n	8008abe <__libc_init_array+0x2e>
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}
 8008ab4:	00b3      	lsls	r3, r6, #2
 8008ab6:	58eb      	ldr	r3, [r5, r3]
 8008ab8:	4798      	blx	r3
 8008aba:	3601      	adds	r6, #1
 8008abc:	e7ee      	b.n	8008a9c <__libc_init_array+0xc>
 8008abe:	00b3      	lsls	r3, r6, #2
 8008ac0:	58eb      	ldr	r3, [r5, r3]
 8008ac2:	4798      	blx	r3
 8008ac4:	3601      	adds	r6, #1
 8008ac6:	e7f2      	b.n	8008aae <__libc_init_array+0x1e>
 8008ac8:	0800faf4 	.word	0x0800faf4
 8008acc:	0800faf4 	.word	0x0800faf4
 8008ad0:	0800fafc 	.word	0x0800fafc
 8008ad4:	0800faf4 	.word	0x0800faf4

08008ad8 <__retarget_lock_init_recursive>:
 8008ad8:	4770      	bx	lr

08008ada <__retarget_lock_close_recursive>:
 8008ada:	4770      	bx	lr

08008adc <__retarget_lock_acquire_recursive>:
 8008adc:	4770      	bx	lr

08008ade <__retarget_lock_release_recursive>:
 8008ade:	4770      	bx	lr

08008ae0 <sysconf>:
 8008ae0:	2380      	movs	r3, #128	; 0x80
 8008ae2:	b510      	push	{r4, lr}
 8008ae4:	2808      	cmp	r0, #8
 8008ae6:	d004      	beq.n	8008af2 <sysconf+0x12>
 8008ae8:	f7ff ffcc 	bl	8008a84 <__errno>
 8008aec:	2316      	movs	r3, #22
 8008aee:	6003      	str	r3, [r0, #0]
 8008af0:	3b17      	subs	r3, #23
 8008af2:	0018      	movs	r0, r3
 8008af4:	bd10      	pop	{r4, pc}

08008af6 <memcpy>:
 8008af6:	2300      	movs	r3, #0
 8008af8:	b510      	push	{r4, lr}
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d100      	bne.n	8008b00 <memcpy+0xa>
 8008afe:	bd10      	pop	{r4, pc}
 8008b00:	5ccc      	ldrb	r4, [r1, r3]
 8008b02:	54c4      	strb	r4, [r0, r3]
 8008b04:	3301      	adds	r3, #1
 8008b06:	e7f8      	b.n	8008afa <memcpy+0x4>

08008b08 <nan>:
 8008b08:	2000      	movs	r0, #0
 8008b0a:	4901      	ldr	r1, [pc, #4]	; (8008b10 <nan+0x8>)
 8008b0c:	4770      	bx	lr
 8008b0e:	46c0      	nop			; (mov r8, r8)
 8008b10:	7ff80000 	.word	0x7ff80000

08008b14 <nanf>:
 8008b14:	4800      	ldr	r0, [pc, #0]	; (8008b18 <nanf+0x4>)
 8008b16:	4770      	bx	lr
 8008b18:	7fc00000 	.word	0x7fc00000

08008b1c <register_fini>:
 8008b1c:	4b03      	ldr	r3, [pc, #12]	; (8008b2c <register_fini+0x10>)
 8008b1e:	b510      	push	{r4, lr}
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <register_fini+0xe>
 8008b24:	4802      	ldr	r0, [pc, #8]	; (8008b30 <register_fini+0x14>)
 8008b26:	f000 f805 	bl	8008b34 <atexit>
 8008b2a:	bd10      	pop	{r4, pc}
 8008b2c:	00000000 	.word	0x00000000
 8008b30:	0800c891 	.word	0x0800c891

08008b34 <atexit>:
 8008b34:	2300      	movs	r3, #0
 8008b36:	b510      	push	{r4, lr}
 8008b38:	0001      	movs	r1, r0
 8008b3a:	001a      	movs	r2, r3
 8008b3c:	0018      	movs	r0, r3
 8008b3e:	f003 fef9 	bl	800c934 <__register_exitproc>
 8008b42:	bd10      	pop	{r4, pc}

08008b44 <_malloc_trim_r>:
 8008b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b46:	0004      	movs	r4, r0
 8008b48:	2008      	movs	r0, #8
 8008b4a:	000d      	movs	r5, r1
 8008b4c:	f7ff ffc8 	bl	8008ae0 <sysconf>
 8008b50:	0006      	movs	r6, r0
 8008b52:	0020      	movs	r0, r4
 8008b54:	f7fe fed6 	bl	8007904 <__malloc_lock>
 8008b58:	2203      	movs	r2, #3
 8008b5a:	4f21      	ldr	r7, [pc, #132]	; (8008be0 <_malloc_trim_r+0x9c>)
 8008b5c:	0031      	movs	r1, r6
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	4393      	bics	r3, r2
 8008b64:	1b58      	subs	r0, r3, r5
 8008b66:	3811      	subs	r0, #17
 8008b68:	1980      	adds	r0, r0, r6
 8008b6a:	9301      	str	r3, [sp, #4]
 8008b6c:	f7f7 fae6 	bl	800013c <__udivsi3>
 8008b70:	1e45      	subs	r5, r0, #1
 8008b72:	4375      	muls	r5, r6
 8008b74:	42ae      	cmp	r6, r5
 8008b76:	dd04      	ble.n	8008b82 <_malloc_trim_r+0x3e>
 8008b78:	0020      	movs	r0, r4
 8008b7a:	f7fe fecb 	bl	8007914 <__malloc_unlock>
 8008b7e:	2000      	movs	r0, #0
 8008b80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b82:	2100      	movs	r1, #0
 8008b84:	0020      	movs	r0, r4
 8008b86:	f7ff ff57 	bl	8008a38 <_sbrk_r>
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	9a01      	ldr	r2, [sp, #4]
 8008b8e:	189b      	adds	r3, r3, r2
 8008b90:	4298      	cmp	r0, r3
 8008b92:	d1f1      	bne.n	8008b78 <_malloc_trim_r+0x34>
 8008b94:	0020      	movs	r0, r4
 8008b96:	4269      	negs	r1, r5
 8008b98:	f7ff ff4e 	bl	8008a38 <_sbrk_r>
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	d110      	bne.n	8008bc2 <_malloc_trim_r+0x7e>
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	0020      	movs	r0, r4
 8008ba4:	f7ff ff48 	bl	8008a38 <_sbrk_r>
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	1a81      	subs	r1, r0, r2
 8008bac:	290f      	cmp	r1, #15
 8008bae:	dde3      	ble.n	8008b78 <_malloc_trim_r+0x34>
 8008bb0:	4d0c      	ldr	r5, [pc, #48]	; (8008be4 <_malloc_trim_r+0xa0>)
 8008bb2:	4b0d      	ldr	r3, [pc, #52]	; (8008be8 <_malloc_trim_r+0xa4>)
 8008bb4:	682d      	ldr	r5, [r5, #0]
 8008bb6:	1b40      	subs	r0, r0, r5
 8008bb8:	6018      	str	r0, [r3, #0]
 8008bba:	2301      	movs	r3, #1
 8008bbc:	430b      	orrs	r3, r1
 8008bbe:	6053      	str	r3, [r2, #4]
 8008bc0:	e7da      	b.n	8008b78 <_malloc_trim_r+0x34>
 8008bc2:	2601      	movs	r6, #1
 8008bc4:	9b01      	ldr	r3, [sp, #4]
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	1b5b      	subs	r3, r3, r5
 8008bca:	4333      	orrs	r3, r6
 8008bcc:	6053      	str	r3, [r2, #4]
 8008bce:	4a06      	ldr	r2, [pc, #24]	; (8008be8 <_malloc_trim_r+0xa4>)
 8008bd0:	0020      	movs	r0, r4
 8008bd2:	6813      	ldr	r3, [r2, #0]
 8008bd4:	1b5b      	subs	r3, r3, r5
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	f7fe fe9c 	bl	8007914 <__malloc_unlock>
 8008bdc:	0030      	movs	r0, r6
 8008bde:	e7cf      	b.n	8008b80 <_malloc_trim_r+0x3c>
 8008be0:	20000010 	.word	0x20000010
 8008be4:	20000418 	.word	0x20000418
 8008be8:	20000a44 	.word	0x20000a44

08008bec <_free_r>:
 8008bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bee:	1e0d      	subs	r5, r1, #0
 8008bf0:	9001      	str	r0, [sp, #4]
 8008bf2:	d02d      	beq.n	8008c50 <_free_r+0x64>
 8008bf4:	f7fe fe86 	bl	8007904 <__malloc_lock>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	0029      	movs	r1, r5
 8008bfc:	469c      	mov	ip, r3
 8008bfe:	3908      	subs	r1, #8
 8008c00:	684f      	ldr	r7, [r1, #4]
 8008c02:	4662      	mov	r2, ip
 8008c04:	003b      	movs	r3, r7
 8008c06:	4664      	mov	r4, ip
 8008c08:	4393      	bics	r3, r2
 8008c0a:	18c8      	adds	r0, r1, r3
 8008c0c:	6845      	ldr	r5, [r0, #4]
 8008c0e:	3202      	adds	r2, #2
 8008c10:	4395      	bics	r5, r2
 8008c12:	4a4a      	ldr	r2, [pc, #296]	; (8008d3c <_free_r+0x150>)
 8008c14:	4027      	ands	r7, r4
 8008c16:	6896      	ldr	r6, [r2, #8]
 8008c18:	4286      	cmp	r6, r0
 8008c1a:	d11a      	bne.n	8008c52 <_free_r+0x66>
 8008c1c:	195b      	adds	r3, r3, r5
 8008c1e:	2f00      	cmp	r7, #0
 8008c20:	d106      	bne.n	8008c30 <_free_r+0x44>
 8008c22:	6808      	ldr	r0, [r1, #0]
 8008c24:	1a09      	subs	r1, r1, r0
 8008c26:	688d      	ldr	r5, [r1, #8]
 8008c28:	181b      	adds	r3, r3, r0
 8008c2a:	68c8      	ldr	r0, [r1, #12]
 8008c2c:	60e8      	str	r0, [r5, #12]
 8008c2e:	6085      	str	r5, [r0, #8]
 8008c30:	2001      	movs	r0, #1
 8008c32:	4318      	orrs	r0, r3
 8008c34:	6048      	str	r0, [r1, #4]
 8008c36:	6091      	str	r1, [r2, #8]
 8008c38:	4a41      	ldr	r2, [pc, #260]	; (8008d40 <_free_r+0x154>)
 8008c3a:	6812      	ldr	r2, [r2, #0]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d804      	bhi.n	8008c4a <_free_r+0x5e>
 8008c40:	4b40      	ldr	r3, [pc, #256]	; (8008d44 <_free_r+0x158>)
 8008c42:	9801      	ldr	r0, [sp, #4]
 8008c44:	6819      	ldr	r1, [r3, #0]
 8008c46:	f7ff ff7d 	bl	8008b44 <_malloc_trim_r>
 8008c4a:	9801      	ldr	r0, [sp, #4]
 8008c4c:	f7fe fe62 	bl	8007914 <__malloc_unlock>
 8008c50:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008c52:	2600      	movs	r6, #0
 8008c54:	6045      	str	r5, [r0, #4]
 8008c56:	42b7      	cmp	r7, r6
 8008c58:	d109      	bne.n	8008c6e <_free_r+0x82>
 8008c5a:	680f      	ldr	r7, [r1, #0]
 8008c5c:	4c3a      	ldr	r4, [pc, #232]	; (8008d48 <_free_r+0x15c>)
 8008c5e:	1bc9      	subs	r1, r1, r7
 8008c60:	19db      	adds	r3, r3, r7
 8008c62:	688f      	ldr	r7, [r1, #8]
 8008c64:	42a7      	cmp	r7, r4
 8008c66:	d02c      	beq.n	8008cc2 <_free_r+0xd6>
 8008c68:	68cc      	ldr	r4, [r1, #12]
 8008c6a:	60fc      	str	r4, [r7, #12]
 8008c6c:	60a7      	str	r7, [r4, #8]
 8008c6e:	1947      	adds	r7, r0, r5
 8008c70:	687c      	ldr	r4, [r7, #4]
 8008c72:	2701      	movs	r7, #1
 8008c74:	423c      	tst	r4, r7
 8008c76:	d10b      	bne.n	8008c90 <_free_r+0xa4>
 8008c78:	195b      	adds	r3, r3, r5
 8008c7a:	6885      	ldr	r5, [r0, #8]
 8008c7c:	2e00      	cmp	r6, #0
 8008c7e:	d122      	bne.n	8008cc6 <_free_r+0xda>
 8008c80:	4c31      	ldr	r4, [pc, #196]	; (8008d48 <_free_r+0x15c>)
 8008c82:	42a5      	cmp	r5, r4
 8008c84:	d11f      	bne.n	8008cc6 <_free_r+0xda>
 8008c86:	003e      	movs	r6, r7
 8008c88:	6151      	str	r1, [r2, #20]
 8008c8a:	6111      	str	r1, [r2, #16]
 8008c8c:	60cd      	str	r5, [r1, #12]
 8008c8e:	608d      	str	r5, [r1, #8]
 8008c90:	2501      	movs	r5, #1
 8008c92:	0028      	movs	r0, r5
 8008c94:	4318      	orrs	r0, r3
 8008c96:	6048      	str	r0, [r1, #4]
 8008c98:	50cb      	str	r3, [r1, r3]
 8008c9a:	2e00      	cmp	r6, #0
 8008c9c:	d1d5      	bne.n	8008c4a <_free_r+0x5e>
 8008c9e:	2080      	movs	r0, #128	; 0x80
 8008ca0:	0080      	lsls	r0, r0, #2
 8008ca2:	4283      	cmp	r3, r0
 8008ca4:	d213      	bcs.n	8008cce <_free_r+0xe2>
 8008ca6:	08d8      	lsrs	r0, r3, #3
 8008ca8:	095b      	lsrs	r3, r3, #5
 8008caa:	409d      	lsls	r5, r3
 8008cac:	6853      	ldr	r3, [r2, #4]
 8008cae:	431d      	orrs	r5, r3
 8008cb0:	00c3      	lsls	r3, r0, #3
 8008cb2:	189b      	adds	r3, r3, r2
 8008cb4:	6055      	str	r5, [r2, #4]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	60cb      	str	r3, [r1, #12]
 8008cba:	608a      	str	r2, [r1, #8]
 8008cbc:	6099      	str	r1, [r3, #8]
 8008cbe:	60d1      	str	r1, [r2, #12]
 8008cc0:	e7c3      	b.n	8008c4a <_free_r+0x5e>
 8008cc2:	4666      	mov	r6, ip
 8008cc4:	e7d3      	b.n	8008c6e <_free_r+0x82>
 8008cc6:	68c0      	ldr	r0, [r0, #12]
 8008cc8:	60e8      	str	r0, [r5, #12]
 8008cca:	6085      	str	r5, [r0, #8]
 8008ccc:	e7e0      	b.n	8008c90 <_free_r+0xa4>
 8008cce:	0a5d      	lsrs	r5, r3, #9
 8008cd0:	2d04      	cmp	r5, #4
 8008cd2:	d812      	bhi.n	8008cfa <_free_r+0x10e>
 8008cd4:	0998      	lsrs	r0, r3, #6
 8008cd6:	3038      	adds	r0, #56	; 0x38
 8008cd8:	00c6      	lsls	r6, r0, #3
 8008cda:	18b6      	adds	r6, r6, r2
 8008cdc:	68b5      	ldr	r5, [r6, #8]
 8008cde:	2703      	movs	r7, #3
 8008ce0:	42ae      	cmp	r6, r5
 8008ce2:	d125      	bne.n	8008d30 <_free_r+0x144>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	1080      	asrs	r0, r0, #2
 8008ce8:	4083      	lsls	r3, r0
 8008cea:	6850      	ldr	r0, [r2, #4]
 8008cec:	4303      	orrs	r3, r0
 8008cee:	6053      	str	r3, [r2, #4]
 8008cf0:	60ce      	str	r6, [r1, #12]
 8008cf2:	608d      	str	r5, [r1, #8]
 8008cf4:	60b1      	str	r1, [r6, #8]
 8008cf6:	60e9      	str	r1, [r5, #12]
 8008cf8:	e7a7      	b.n	8008c4a <_free_r+0x5e>
 8008cfa:	2d14      	cmp	r5, #20
 8008cfc:	d802      	bhi.n	8008d04 <_free_r+0x118>
 8008cfe:	0028      	movs	r0, r5
 8008d00:	305b      	adds	r0, #91	; 0x5b
 8008d02:	e7e9      	b.n	8008cd8 <_free_r+0xec>
 8008d04:	2d54      	cmp	r5, #84	; 0x54
 8008d06:	d802      	bhi.n	8008d0e <_free_r+0x122>
 8008d08:	0b18      	lsrs	r0, r3, #12
 8008d0a:	306e      	adds	r0, #110	; 0x6e
 8008d0c:	e7e4      	b.n	8008cd8 <_free_r+0xec>
 8008d0e:	20aa      	movs	r0, #170	; 0xaa
 8008d10:	0040      	lsls	r0, r0, #1
 8008d12:	4285      	cmp	r5, r0
 8008d14:	d802      	bhi.n	8008d1c <_free_r+0x130>
 8008d16:	0bd8      	lsrs	r0, r3, #15
 8008d18:	3077      	adds	r0, #119	; 0x77
 8008d1a:	e7dd      	b.n	8008cd8 <_free_r+0xec>
 8008d1c:	4e0b      	ldr	r6, [pc, #44]	; (8008d4c <_free_r+0x160>)
 8008d1e:	207e      	movs	r0, #126	; 0x7e
 8008d20:	42b5      	cmp	r5, r6
 8008d22:	d8d9      	bhi.n	8008cd8 <_free_r+0xec>
 8008d24:	0c98      	lsrs	r0, r3, #18
 8008d26:	307c      	adds	r0, #124	; 0x7c
 8008d28:	e7d6      	b.n	8008cd8 <_free_r+0xec>
 8008d2a:	68ad      	ldr	r5, [r5, #8]
 8008d2c:	42ae      	cmp	r6, r5
 8008d2e:	d003      	beq.n	8008d38 <_free_r+0x14c>
 8008d30:	686a      	ldr	r2, [r5, #4]
 8008d32:	43ba      	bics	r2, r7
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d8f8      	bhi.n	8008d2a <_free_r+0x13e>
 8008d38:	68ee      	ldr	r6, [r5, #12]
 8008d3a:	e7d9      	b.n	8008cf0 <_free_r+0x104>
 8008d3c:	20000010 	.word	0x20000010
 8008d40:	2000041c 	.word	0x2000041c
 8008d44:	20000a74 	.word	0x20000a74
 8008d48:	20000018 	.word	0x20000018
 8008d4c:	00000554 	.word	0x00000554

08008d50 <rshift>:
 8008d50:	0002      	movs	r2, r0
 8008d52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d54:	6904      	ldr	r4, [r0, #16]
 8008d56:	114b      	asrs	r3, r1, #5
 8008d58:	b085      	sub	sp, #20
 8008d5a:	3214      	adds	r2, #20
 8008d5c:	9302      	str	r3, [sp, #8]
 8008d5e:	114d      	asrs	r5, r1, #5
 8008d60:	0013      	movs	r3, r2
 8008d62:	42ac      	cmp	r4, r5
 8008d64:	dd32      	ble.n	8008dcc <rshift+0x7c>
 8008d66:	261f      	movs	r6, #31
 8008d68:	000f      	movs	r7, r1
 8008d6a:	114b      	asrs	r3, r1, #5
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	00a5      	lsls	r5, r4, #2
 8008d70:	18d3      	adds	r3, r2, r3
 8008d72:	4037      	ands	r7, r6
 8008d74:	1955      	adds	r5, r2, r5
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	9701      	str	r7, [sp, #4]
 8008d7a:	4231      	tst	r1, r6
 8008d7c:	d10d      	bne.n	8008d9a <rshift+0x4a>
 8008d7e:	0016      	movs	r6, r2
 8008d80:	0019      	movs	r1, r3
 8008d82:	428d      	cmp	r5, r1
 8008d84:	d836      	bhi.n	8008df4 <rshift+0xa4>
 8008d86:	9900      	ldr	r1, [sp, #0]
 8008d88:	2300      	movs	r3, #0
 8008d8a:	3903      	subs	r1, #3
 8008d8c:	428d      	cmp	r5, r1
 8008d8e:	d302      	bcc.n	8008d96 <rshift+0x46>
 8008d90:	9b02      	ldr	r3, [sp, #8]
 8008d92:	1ae4      	subs	r4, r4, r3
 8008d94:	00a3      	lsls	r3, r4, #2
 8008d96:	18d3      	adds	r3, r2, r3
 8008d98:	e018      	b.n	8008dcc <rshift+0x7c>
 8008d9a:	2120      	movs	r1, #32
 8008d9c:	9e01      	ldr	r6, [sp, #4]
 8008d9e:	9f01      	ldr	r7, [sp, #4]
 8008da0:	1b89      	subs	r1, r1, r6
 8008da2:	9e00      	ldr	r6, [sp, #0]
 8008da4:	9103      	str	r1, [sp, #12]
 8008da6:	ce02      	ldmia	r6!, {r1}
 8008da8:	4694      	mov	ip, r2
 8008daa:	40f9      	lsrs	r1, r7
 8008dac:	42b5      	cmp	r5, r6
 8008dae:	d816      	bhi.n	8008dde <rshift+0x8e>
 8008db0:	9e00      	ldr	r6, [sp, #0]
 8008db2:	2300      	movs	r3, #0
 8008db4:	3601      	adds	r6, #1
 8008db6:	42b5      	cmp	r5, r6
 8008db8:	d303      	bcc.n	8008dc2 <rshift+0x72>
 8008dba:	9b02      	ldr	r3, [sp, #8]
 8008dbc:	1ae3      	subs	r3, r4, r3
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	3b04      	subs	r3, #4
 8008dc2:	18d3      	adds	r3, r2, r3
 8008dc4:	6019      	str	r1, [r3, #0]
 8008dc6:	2900      	cmp	r1, #0
 8008dc8:	d000      	beq.n	8008dcc <rshift+0x7c>
 8008dca:	3304      	adds	r3, #4
 8008dcc:	1a99      	subs	r1, r3, r2
 8008dce:	1089      	asrs	r1, r1, #2
 8008dd0:	6101      	str	r1, [r0, #16]
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d101      	bne.n	8008dda <rshift+0x8a>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	6143      	str	r3, [r0, #20]
 8008dda:	b005      	add	sp, #20
 8008ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dde:	6837      	ldr	r7, [r6, #0]
 8008de0:	9b03      	ldr	r3, [sp, #12]
 8008de2:	409f      	lsls	r7, r3
 8008de4:	430f      	orrs	r7, r1
 8008de6:	4661      	mov	r1, ip
 8008de8:	c180      	stmia	r1!, {r7}
 8008dea:	468c      	mov	ip, r1
 8008dec:	9b01      	ldr	r3, [sp, #4]
 8008dee:	ce02      	ldmia	r6!, {r1}
 8008df0:	40d9      	lsrs	r1, r3
 8008df2:	e7db      	b.n	8008dac <rshift+0x5c>
 8008df4:	c980      	ldmia	r1!, {r7}
 8008df6:	c680      	stmia	r6!, {r7}
 8008df8:	e7c3      	b.n	8008d82 <rshift+0x32>

08008dfa <__hexdig_fun>:
 8008dfa:	0002      	movs	r2, r0
 8008dfc:	3a30      	subs	r2, #48	; 0x30
 8008dfe:	0003      	movs	r3, r0
 8008e00:	2a09      	cmp	r2, #9
 8008e02:	d802      	bhi.n	8008e0a <__hexdig_fun+0x10>
 8008e04:	3b20      	subs	r3, #32
 8008e06:	b2d8      	uxtb	r0, r3
 8008e08:	4770      	bx	lr
 8008e0a:	0002      	movs	r2, r0
 8008e0c:	3a61      	subs	r2, #97	; 0x61
 8008e0e:	2a05      	cmp	r2, #5
 8008e10:	d801      	bhi.n	8008e16 <__hexdig_fun+0x1c>
 8008e12:	3b47      	subs	r3, #71	; 0x47
 8008e14:	e7f7      	b.n	8008e06 <__hexdig_fun+0xc>
 8008e16:	001a      	movs	r2, r3
 8008e18:	3a41      	subs	r2, #65	; 0x41
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	2a05      	cmp	r2, #5
 8008e1e:	d8f3      	bhi.n	8008e08 <__hexdig_fun+0xe>
 8008e20:	3b27      	subs	r3, #39	; 0x27
 8008e22:	e7f0      	b.n	8008e06 <__hexdig_fun+0xc>

08008e24 <__gethex>:
 8008e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e26:	b089      	sub	sp, #36	; 0x24
 8008e28:	9307      	str	r3, [sp, #28]
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	9201      	str	r2, [sp, #4]
 8008e2e:	680a      	ldr	r2, [r1, #0]
 8008e30:	425b      	negs	r3, r3
 8008e32:	9003      	str	r0, [sp, #12]
 8008e34:	9106      	str	r1, [sp, #24]
 8008e36:	1c96      	adds	r6, r2, #2
 8008e38:	1a9b      	subs	r3, r3, r2
 8008e3a:	199a      	adds	r2, r3, r6
 8008e3c:	9600      	str	r6, [sp, #0]
 8008e3e:	9205      	str	r2, [sp, #20]
 8008e40:	9a00      	ldr	r2, [sp, #0]
 8008e42:	3601      	adds	r6, #1
 8008e44:	7810      	ldrb	r0, [r2, #0]
 8008e46:	2830      	cmp	r0, #48	; 0x30
 8008e48:	d0f7      	beq.n	8008e3a <__gethex+0x16>
 8008e4a:	f7ff ffd6 	bl	8008dfa <__hexdig_fun>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	001d      	movs	r5, r3
 8008e52:	9302      	str	r3, [sp, #8]
 8008e54:	4298      	cmp	r0, r3
 8008e56:	d11d      	bne.n	8008e94 <__gethex+0x70>
 8008e58:	2201      	movs	r2, #1
 8008e5a:	49a6      	ldr	r1, [pc, #664]	; (80090f4 <__gethex+0x2d0>)
 8008e5c:	9800      	ldr	r0, [sp, #0]
 8008e5e:	f7ff fd83 	bl	8008968 <strncmp>
 8008e62:	0007      	movs	r7, r0
 8008e64:	42a8      	cmp	r0, r5
 8008e66:	d169      	bne.n	8008f3c <__gethex+0x118>
 8008e68:	9b00      	ldr	r3, [sp, #0]
 8008e6a:	0034      	movs	r4, r6
 8008e6c:	7858      	ldrb	r0, [r3, #1]
 8008e6e:	f7ff ffc4 	bl	8008dfa <__hexdig_fun>
 8008e72:	2301      	movs	r3, #1
 8008e74:	9302      	str	r3, [sp, #8]
 8008e76:	42a8      	cmp	r0, r5
 8008e78:	d02f      	beq.n	8008eda <__gethex+0xb6>
 8008e7a:	9600      	str	r6, [sp, #0]
 8008e7c:	9b00      	ldr	r3, [sp, #0]
 8008e7e:	7818      	ldrb	r0, [r3, #0]
 8008e80:	2830      	cmp	r0, #48	; 0x30
 8008e82:	d009      	beq.n	8008e98 <__gethex+0x74>
 8008e84:	f7ff ffb9 	bl	8008dfa <__hexdig_fun>
 8008e88:	4242      	negs	r2, r0
 8008e8a:	4142      	adcs	r2, r0
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	0035      	movs	r5, r6
 8008e90:	9202      	str	r2, [sp, #8]
 8008e92:	9305      	str	r3, [sp, #20]
 8008e94:	9c00      	ldr	r4, [sp, #0]
 8008e96:	e004      	b.n	8008ea2 <__gethex+0x7e>
 8008e98:	9b00      	ldr	r3, [sp, #0]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	e7ed      	b.n	8008e7c <__gethex+0x58>
 8008ea0:	3401      	adds	r4, #1
 8008ea2:	7820      	ldrb	r0, [r4, #0]
 8008ea4:	f7ff ffa9 	bl	8008dfa <__hexdig_fun>
 8008ea8:	1e07      	subs	r7, r0, #0
 8008eaa:	d1f9      	bne.n	8008ea0 <__gethex+0x7c>
 8008eac:	2201      	movs	r2, #1
 8008eae:	0020      	movs	r0, r4
 8008eb0:	4990      	ldr	r1, [pc, #576]	; (80090f4 <__gethex+0x2d0>)
 8008eb2:	f7ff fd59 	bl	8008968 <strncmp>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d10d      	bne.n	8008ed6 <__gethex+0xb2>
 8008eba:	2d00      	cmp	r5, #0
 8008ebc:	d106      	bne.n	8008ecc <__gethex+0xa8>
 8008ebe:	3401      	adds	r4, #1
 8008ec0:	0025      	movs	r5, r4
 8008ec2:	7820      	ldrb	r0, [r4, #0]
 8008ec4:	f7ff ff99 	bl	8008dfa <__hexdig_fun>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d102      	bne.n	8008ed2 <__gethex+0xae>
 8008ecc:	1b2d      	subs	r5, r5, r4
 8008ece:	00af      	lsls	r7, r5, #2
 8008ed0:	e003      	b.n	8008eda <__gethex+0xb6>
 8008ed2:	3401      	adds	r4, #1
 8008ed4:	e7f5      	b.n	8008ec2 <__gethex+0x9e>
 8008ed6:	2d00      	cmp	r5, #0
 8008ed8:	d1f8      	bne.n	8008ecc <__gethex+0xa8>
 8008eda:	2220      	movs	r2, #32
 8008edc:	7823      	ldrb	r3, [r4, #0]
 8008ede:	0026      	movs	r6, r4
 8008ee0:	4393      	bics	r3, r2
 8008ee2:	2b50      	cmp	r3, #80	; 0x50
 8008ee4:	d11d      	bne.n	8008f22 <__gethex+0xfe>
 8008ee6:	7863      	ldrb	r3, [r4, #1]
 8008ee8:	2b2b      	cmp	r3, #43	; 0x2b
 8008eea:	d02c      	beq.n	8008f46 <__gethex+0x122>
 8008eec:	2b2d      	cmp	r3, #45	; 0x2d
 8008eee:	d02e      	beq.n	8008f4e <__gethex+0x12a>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	1c66      	adds	r6, r4, #1
 8008ef4:	9304      	str	r3, [sp, #16]
 8008ef6:	7830      	ldrb	r0, [r6, #0]
 8008ef8:	f7ff ff7f 	bl	8008dfa <__hexdig_fun>
 8008efc:	1e43      	subs	r3, r0, #1
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b18      	cmp	r3, #24
 8008f02:	d82b      	bhi.n	8008f5c <__gethex+0x138>
 8008f04:	3810      	subs	r0, #16
 8008f06:	0005      	movs	r5, r0
 8008f08:	7870      	ldrb	r0, [r6, #1]
 8008f0a:	f7ff ff76 	bl	8008dfa <__hexdig_fun>
 8008f0e:	1e43      	subs	r3, r0, #1
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	3601      	adds	r6, #1
 8008f14:	2b18      	cmp	r3, #24
 8008f16:	d91c      	bls.n	8008f52 <__gethex+0x12e>
 8008f18:	9b04      	ldr	r3, [sp, #16]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d000      	beq.n	8008f20 <__gethex+0xfc>
 8008f1e:	426d      	negs	r5, r5
 8008f20:	197f      	adds	r7, r7, r5
 8008f22:	9b06      	ldr	r3, [sp, #24]
 8008f24:	601e      	str	r6, [r3, #0]
 8008f26:	9b02      	ldr	r3, [sp, #8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d019      	beq.n	8008f60 <__gethex+0x13c>
 8008f2c:	2600      	movs	r6, #0
 8008f2e:	9b05      	ldr	r3, [sp, #20]
 8008f30:	42b3      	cmp	r3, r6
 8008f32:	d100      	bne.n	8008f36 <__gethex+0x112>
 8008f34:	3606      	adds	r6, #6
 8008f36:	0030      	movs	r0, r6
 8008f38:	b009      	add	sp, #36	; 0x24
 8008f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	2700      	movs	r7, #0
 8008f40:	9c00      	ldr	r4, [sp, #0]
 8008f42:	9302      	str	r3, [sp, #8]
 8008f44:	e7c9      	b.n	8008eda <__gethex+0xb6>
 8008f46:	2300      	movs	r3, #0
 8008f48:	9304      	str	r3, [sp, #16]
 8008f4a:	1ca6      	adds	r6, r4, #2
 8008f4c:	e7d3      	b.n	8008ef6 <__gethex+0xd2>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e7fa      	b.n	8008f48 <__gethex+0x124>
 8008f52:	230a      	movs	r3, #10
 8008f54:	435d      	muls	r5, r3
 8008f56:	182d      	adds	r5, r5, r0
 8008f58:	3d10      	subs	r5, #16
 8008f5a:	e7d5      	b.n	8008f08 <__gethex+0xe4>
 8008f5c:	0026      	movs	r6, r4
 8008f5e:	e7e0      	b.n	8008f22 <__gethex+0xfe>
 8008f60:	9b00      	ldr	r3, [sp, #0]
 8008f62:	9902      	ldr	r1, [sp, #8]
 8008f64:	1ae3      	subs	r3, r4, r3
 8008f66:	3b01      	subs	r3, #1
 8008f68:	2b07      	cmp	r3, #7
 8008f6a:	dc0a      	bgt.n	8008f82 <__gethex+0x15e>
 8008f6c:	9803      	ldr	r0, [sp, #12]
 8008f6e:	f000 fa5d 	bl	800942c <_Balloc>
 8008f72:	1e05      	subs	r5, r0, #0
 8008f74:	d108      	bne.n	8008f88 <__gethex+0x164>
 8008f76:	002a      	movs	r2, r5
 8008f78:	21e4      	movs	r1, #228	; 0xe4
 8008f7a:	4b5f      	ldr	r3, [pc, #380]	; (80090f8 <__gethex+0x2d4>)
 8008f7c:	485f      	ldr	r0, [pc, #380]	; (80090fc <__gethex+0x2d8>)
 8008f7e:	f003 fd19 	bl	800c9b4 <__assert_func>
 8008f82:	3101      	adds	r1, #1
 8008f84:	105b      	asrs	r3, r3, #1
 8008f86:	e7ef      	b.n	8008f68 <__gethex+0x144>
 8008f88:	0003      	movs	r3, r0
 8008f8a:	3314      	adds	r3, #20
 8008f8c:	9302      	str	r3, [sp, #8]
 8008f8e:	9305      	str	r3, [sp, #20]
 8008f90:	2300      	movs	r3, #0
 8008f92:	001e      	movs	r6, r3
 8008f94:	9304      	str	r3, [sp, #16]
 8008f96:	9b00      	ldr	r3, [sp, #0]
 8008f98:	42a3      	cmp	r3, r4
 8008f9a:	d33f      	bcc.n	800901c <__gethex+0x1f8>
 8008f9c:	9c05      	ldr	r4, [sp, #20]
 8008f9e:	9b02      	ldr	r3, [sp, #8]
 8008fa0:	c440      	stmia	r4!, {r6}
 8008fa2:	1ae4      	subs	r4, r4, r3
 8008fa4:	10a4      	asrs	r4, r4, #2
 8008fa6:	0030      	movs	r0, r6
 8008fa8:	612c      	str	r4, [r5, #16]
 8008faa:	f000 fb01 	bl	80095b0 <__hi0bits>
 8008fae:	9b01      	ldr	r3, [sp, #4]
 8008fb0:	0164      	lsls	r4, r4, #5
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	1a26      	subs	r6, r4, r0
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	429e      	cmp	r6, r3
 8008fba:	dd51      	ble.n	8009060 <__gethex+0x23c>
 8008fbc:	1af6      	subs	r6, r6, r3
 8008fbe:	0031      	movs	r1, r6
 8008fc0:	0028      	movs	r0, r5
 8008fc2:	f000 fe7b 	bl	8009cbc <__any_on>
 8008fc6:	1e04      	subs	r4, r0, #0
 8008fc8:	d016      	beq.n	8008ff8 <__gethex+0x1d4>
 8008fca:	2401      	movs	r4, #1
 8008fcc:	231f      	movs	r3, #31
 8008fce:	0020      	movs	r0, r4
 8008fd0:	1e72      	subs	r2, r6, #1
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	4098      	lsls	r0, r3
 8008fd6:	0003      	movs	r3, r0
 8008fd8:	1151      	asrs	r1, r2, #5
 8008fda:	9802      	ldr	r0, [sp, #8]
 8008fdc:	0089      	lsls	r1, r1, #2
 8008fde:	5809      	ldr	r1, [r1, r0]
 8008fe0:	4219      	tst	r1, r3
 8008fe2:	d009      	beq.n	8008ff8 <__gethex+0x1d4>
 8008fe4:	42a2      	cmp	r2, r4
 8008fe6:	dd06      	ble.n	8008ff6 <__gethex+0x1d2>
 8008fe8:	0028      	movs	r0, r5
 8008fea:	1eb1      	subs	r1, r6, #2
 8008fec:	f000 fe66 	bl	8009cbc <__any_on>
 8008ff0:	3402      	adds	r4, #2
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	d100      	bne.n	8008ff8 <__gethex+0x1d4>
 8008ff6:	2402      	movs	r4, #2
 8008ff8:	0031      	movs	r1, r6
 8008ffa:	0028      	movs	r0, r5
 8008ffc:	f7ff fea8 	bl	8008d50 <rshift>
 8009000:	19bf      	adds	r7, r7, r6
 8009002:	9b01      	ldr	r3, [sp, #4]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	42bb      	cmp	r3, r7
 8009008:	da3a      	bge.n	8009080 <__gethex+0x25c>
 800900a:	0029      	movs	r1, r5
 800900c:	9803      	ldr	r0, [sp, #12]
 800900e:	f000 fa35 	bl	800947c <_Bfree>
 8009012:	2300      	movs	r3, #0
 8009014:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009016:	26a3      	movs	r6, #163	; 0xa3
 8009018:	6013      	str	r3, [r2, #0]
 800901a:	e78c      	b.n	8008f36 <__gethex+0x112>
 800901c:	3c01      	subs	r4, #1
 800901e:	7823      	ldrb	r3, [r4, #0]
 8009020:	2b2e      	cmp	r3, #46	; 0x2e
 8009022:	d012      	beq.n	800904a <__gethex+0x226>
 8009024:	9b04      	ldr	r3, [sp, #16]
 8009026:	2b20      	cmp	r3, #32
 8009028:	d104      	bne.n	8009034 <__gethex+0x210>
 800902a:	9b05      	ldr	r3, [sp, #20]
 800902c:	c340      	stmia	r3!, {r6}
 800902e:	2600      	movs	r6, #0
 8009030:	9305      	str	r3, [sp, #20]
 8009032:	9604      	str	r6, [sp, #16]
 8009034:	7820      	ldrb	r0, [r4, #0]
 8009036:	f7ff fee0 	bl	8008dfa <__hexdig_fun>
 800903a:	230f      	movs	r3, #15
 800903c:	4018      	ands	r0, r3
 800903e:	9b04      	ldr	r3, [sp, #16]
 8009040:	4098      	lsls	r0, r3
 8009042:	3304      	adds	r3, #4
 8009044:	4306      	orrs	r6, r0
 8009046:	9304      	str	r3, [sp, #16]
 8009048:	e7a5      	b.n	8008f96 <__gethex+0x172>
 800904a:	9b00      	ldr	r3, [sp, #0]
 800904c:	42a3      	cmp	r3, r4
 800904e:	d8e9      	bhi.n	8009024 <__gethex+0x200>
 8009050:	2201      	movs	r2, #1
 8009052:	0020      	movs	r0, r4
 8009054:	4927      	ldr	r1, [pc, #156]	; (80090f4 <__gethex+0x2d0>)
 8009056:	f7ff fc87 	bl	8008968 <strncmp>
 800905a:	2800      	cmp	r0, #0
 800905c:	d1e2      	bne.n	8009024 <__gethex+0x200>
 800905e:	e79a      	b.n	8008f96 <__gethex+0x172>
 8009060:	9b00      	ldr	r3, [sp, #0]
 8009062:	2400      	movs	r4, #0
 8009064:	429e      	cmp	r6, r3
 8009066:	dacc      	bge.n	8009002 <__gethex+0x1de>
 8009068:	1b9e      	subs	r6, r3, r6
 800906a:	0029      	movs	r1, r5
 800906c:	0032      	movs	r2, r6
 800906e:	9803      	ldr	r0, [sp, #12]
 8009070:	f000 fbf0 	bl	8009854 <__lshift>
 8009074:	0003      	movs	r3, r0
 8009076:	3314      	adds	r3, #20
 8009078:	0005      	movs	r5, r0
 800907a:	1bbf      	subs	r7, r7, r6
 800907c:	9302      	str	r3, [sp, #8]
 800907e:	e7c0      	b.n	8009002 <__gethex+0x1de>
 8009080:	9b01      	ldr	r3, [sp, #4]
 8009082:	685e      	ldr	r6, [r3, #4]
 8009084:	42be      	cmp	r6, r7
 8009086:	dd70      	ble.n	800916a <__gethex+0x346>
 8009088:	9b00      	ldr	r3, [sp, #0]
 800908a:	1bf6      	subs	r6, r6, r7
 800908c:	42b3      	cmp	r3, r6
 800908e:	dc37      	bgt.n	8009100 <__gethex+0x2dc>
 8009090:	9b01      	ldr	r3, [sp, #4]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	2b02      	cmp	r3, #2
 8009096:	d024      	beq.n	80090e2 <__gethex+0x2be>
 8009098:	2b03      	cmp	r3, #3
 800909a:	d026      	beq.n	80090ea <__gethex+0x2c6>
 800909c:	2b01      	cmp	r3, #1
 800909e:	d117      	bne.n	80090d0 <__gethex+0x2ac>
 80090a0:	9b00      	ldr	r3, [sp, #0]
 80090a2:	42b3      	cmp	r3, r6
 80090a4:	d114      	bne.n	80090d0 <__gethex+0x2ac>
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d10b      	bne.n	80090c2 <__gethex+0x29e>
 80090aa:	9b01      	ldr	r3, [sp, #4]
 80090ac:	9a07      	ldr	r2, [sp, #28]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	2662      	movs	r6, #98	; 0x62
 80090b2:	6013      	str	r3, [r2, #0]
 80090b4:	2301      	movs	r3, #1
 80090b6:	9a02      	ldr	r2, [sp, #8]
 80090b8:	612b      	str	r3, [r5, #16]
 80090ba:	6013      	str	r3, [r2, #0]
 80090bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090be:	601d      	str	r5, [r3, #0]
 80090c0:	e739      	b.n	8008f36 <__gethex+0x112>
 80090c2:	9900      	ldr	r1, [sp, #0]
 80090c4:	0028      	movs	r0, r5
 80090c6:	3901      	subs	r1, #1
 80090c8:	f000 fdf8 	bl	8009cbc <__any_on>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d1ec      	bne.n	80090aa <__gethex+0x286>
 80090d0:	0029      	movs	r1, r5
 80090d2:	9803      	ldr	r0, [sp, #12]
 80090d4:	f000 f9d2 	bl	800947c <_Bfree>
 80090d8:	2300      	movs	r3, #0
 80090da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090dc:	2650      	movs	r6, #80	; 0x50
 80090de:	6013      	str	r3, [r2, #0]
 80090e0:	e729      	b.n	8008f36 <__gethex+0x112>
 80090e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1f3      	bne.n	80090d0 <__gethex+0x2ac>
 80090e8:	e7df      	b.n	80090aa <__gethex+0x286>
 80090ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1dc      	bne.n	80090aa <__gethex+0x286>
 80090f0:	e7ee      	b.n	80090d0 <__gethex+0x2ac>
 80090f2:	46c0      	nop			; (mov r8, r8)
 80090f4:	0800f680 	.word	0x0800f680
 80090f8:	0800f7e1 	.word	0x0800f7e1
 80090fc:	0800f7f2 	.word	0x0800f7f2
 8009100:	1e77      	subs	r7, r6, #1
 8009102:	2c00      	cmp	r4, #0
 8009104:	d12f      	bne.n	8009166 <__gethex+0x342>
 8009106:	2f00      	cmp	r7, #0
 8009108:	d004      	beq.n	8009114 <__gethex+0x2f0>
 800910a:	0039      	movs	r1, r7
 800910c:	0028      	movs	r0, r5
 800910e:	f000 fdd5 	bl	8009cbc <__any_on>
 8009112:	0004      	movs	r4, r0
 8009114:	231f      	movs	r3, #31
 8009116:	117a      	asrs	r2, r7, #5
 8009118:	401f      	ands	r7, r3
 800911a:	3b1e      	subs	r3, #30
 800911c:	40bb      	lsls	r3, r7
 800911e:	9902      	ldr	r1, [sp, #8]
 8009120:	0092      	lsls	r2, r2, #2
 8009122:	5852      	ldr	r2, [r2, r1]
 8009124:	421a      	tst	r2, r3
 8009126:	d001      	beq.n	800912c <__gethex+0x308>
 8009128:	2302      	movs	r3, #2
 800912a:	431c      	orrs	r4, r3
 800912c:	9b00      	ldr	r3, [sp, #0]
 800912e:	0031      	movs	r1, r6
 8009130:	1b9b      	subs	r3, r3, r6
 8009132:	2602      	movs	r6, #2
 8009134:	0028      	movs	r0, r5
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	f7ff fe0a 	bl	8008d50 <rshift>
 800913c:	9b01      	ldr	r3, [sp, #4]
 800913e:	685f      	ldr	r7, [r3, #4]
 8009140:	2c00      	cmp	r4, #0
 8009142:	d041      	beq.n	80091c8 <__gethex+0x3a4>
 8009144:	9b01      	ldr	r3, [sp, #4]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	2b02      	cmp	r3, #2
 800914a:	d010      	beq.n	800916e <__gethex+0x34a>
 800914c:	2b03      	cmp	r3, #3
 800914e:	d012      	beq.n	8009176 <__gethex+0x352>
 8009150:	2b01      	cmp	r3, #1
 8009152:	d106      	bne.n	8009162 <__gethex+0x33e>
 8009154:	07a2      	lsls	r2, r4, #30
 8009156:	d504      	bpl.n	8009162 <__gethex+0x33e>
 8009158:	9a02      	ldr	r2, [sp, #8]
 800915a:	6812      	ldr	r2, [r2, #0]
 800915c:	4314      	orrs	r4, r2
 800915e:	421c      	tst	r4, r3
 8009160:	d10c      	bne.n	800917c <__gethex+0x358>
 8009162:	2310      	movs	r3, #16
 8009164:	e02f      	b.n	80091c6 <__gethex+0x3a2>
 8009166:	2401      	movs	r4, #1
 8009168:	e7d4      	b.n	8009114 <__gethex+0x2f0>
 800916a:	2601      	movs	r6, #1
 800916c:	e7e8      	b.n	8009140 <__gethex+0x31c>
 800916e:	2301      	movs	r3, #1
 8009170:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009172:	1a9b      	subs	r3, r3, r2
 8009174:	930f      	str	r3, [sp, #60]	; 0x3c
 8009176:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009178:	2b00      	cmp	r3, #0
 800917a:	d0f2      	beq.n	8009162 <__gethex+0x33e>
 800917c:	692b      	ldr	r3, [r5, #16]
 800917e:	2000      	movs	r0, #0
 8009180:	9302      	str	r3, [sp, #8]
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	9304      	str	r3, [sp, #16]
 8009186:	002b      	movs	r3, r5
 8009188:	9a04      	ldr	r2, [sp, #16]
 800918a:	3314      	adds	r3, #20
 800918c:	1899      	adds	r1, r3, r2
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	1c54      	adds	r4, r2, #1
 8009192:	d01e      	beq.n	80091d2 <__gethex+0x3ae>
 8009194:	3201      	adds	r2, #1
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	002b      	movs	r3, r5
 800919a:	3314      	adds	r3, #20
 800919c:	2e02      	cmp	r6, #2
 800919e:	d141      	bne.n	8009224 <__gethex+0x400>
 80091a0:	9a01      	ldr	r2, [sp, #4]
 80091a2:	9900      	ldr	r1, [sp, #0]
 80091a4:	6812      	ldr	r2, [r2, #0]
 80091a6:	3a01      	subs	r2, #1
 80091a8:	428a      	cmp	r2, r1
 80091aa:	d10b      	bne.n	80091c4 <__gethex+0x3a0>
 80091ac:	221f      	movs	r2, #31
 80091ae:	9800      	ldr	r0, [sp, #0]
 80091b0:	1149      	asrs	r1, r1, #5
 80091b2:	4002      	ands	r2, r0
 80091b4:	2001      	movs	r0, #1
 80091b6:	0004      	movs	r4, r0
 80091b8:	4094      	lsls	r4, r2
 80091ba:	0089      	lsls	r1, r1, #2
 80091bc:	58cb      	ldr	r3, [r1, r3]
 80091be:	4223      	tst	r3, r4
 80091c0:	d000      	beq.n	80091c4 <__gethex+0x3a0>
 80091c2:	2601      	movs	r6, #1
 80091c4:	2320      	movs	r3, #32
 80091c6:	431e      	orrs	r6, r3
 80091c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091ca:	601d      	str	r5, [r3, #0]
 80091cc:	9b07      	ldr	r3, [sp, #28]
 80091ce:	601f      	str	r7, [r3, #0]
 80091d0:	e6b1      	b.n	8008f36 <__gethex+0x112>
 80091d2:	c301      	stmia	r3!, {r0}
 80091d4:	4299      	cmp	r1, r3
 80091d6:	d8da      	bhi.n	800918e <__gethex+0x36a>
 80091d8:	68ab      	ldr	r3, [r5, #8]
 80091da:	9a02      	ldr	r2, [sp, #8]
 80091dc:	429a      	cmp	r2, r3
 80091de:	db18      	blt.n	8009212 <__gethex+0x3ee>
 80091e0:	6869      	ldr	r1, [r5, #4]
 80091e2:	9803      	ldr	r0, [sp, #12]
 80091e4:	3101      	adds	r1, #1
 80091e6:	f000 f921 	bl	800942c <_Balloc>
 80091ea:	1e04      	subs	r4, r0, #0
 80091ec:	d104      	bne.n	80091f8 <__gethex+0x3d4>
 80091ee:	0022      	movs	r2, r4
 80091f0:	2184      	movs	r1, #132	; 0x84
 80091f2:	4b1c      	ldr	r3, [pc, #112]	; (8009264 <__gethex+0x440>)
 80091f4:	481c      	ldr	r0, [pc, #112]	; (8009268 <__gethex+0x444>)
 80091f6:	e6c2      	b.n	8008f7e <__gethex+0x15a>
 80091f8:	0029      	movs	r1, r5
 80091fa:	692a      	ldr	r2, [r5, #16]
 80091fc:	310c      	adds	r1, #12
 80091fe:	3202      	adds	r2, #2
 8009200:	0092      	lsls	r2, r2, #2
 8009202:	300c      	adds	r0, #12
 8009204:	f7ff fc77 	bl	8008af6 <memcpy>
 8009208:	0029      	movs	r1, r5
 800920a:	9803      	ldr	r0, [sp, #12]
 800920c:	f000 f936 	bl	800947c <_Bfree>
 8009210:	0025      	movs	r5, r4
 8009212:	692b      	ldr	r3, [r5, #16]
 8009214:	1c5a      	adds	r2, r3, #1
 8009216:	612a      	str	r2, [r5, #16]
 8009218:	2201      	movs	r2, #1
 800921a:	3304      	adds	r3, #4
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	18eb      	adds	r3, r5, r3
 8009220:	605a      	str	r2, [r3, #4]
 8009222:	e7b9      	b.n	8009198 <__gethex+0x374>
 8009224:	692a      	ldr	r2, [r5, #16]
 8009226:	9902      	ldr	r1, [sp, #8]
 8009228:	428a      	cmp	r2, r1
 800922a:	dd09      	ble.n	8009240 <__gethex+0x41c>
 800922c:	2101      	movs	r1, #1
 800922e:	0028      	movs	r0, r5
 8009230:	f7ff fd8e 	bl	8008d50 <rshift>
 8009234:	9b01      	ldr	r3, [sp, #4]
 8009236:	3701      	adds	r7, #1
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	42bb      	cmp	r3, r7
 800923c:	dac1      	bge.n	80091c2 <__gethex+0x39e>
 800923e:	e6e4      	b.n	800900a <__gethex+0x1e6>
 8009240:	221f      	movs	r2, #31
 8009242:	9c00      	ldr	r4, [sp, #0]
 8009244:	9900      	ldr	r1, [sp, #0]
 8009246:	2601      	movs	r6, #1
 8009248:	4014      	ands	r4, r2
 800924a:	4211      	tst	r1, r2
 800924c:	d0ba      	beq.n	80091c4 <__gethex+0x3a0>
 800924e:	9a04      	ldr	r2, [sp, #16]
 8009250:	189b      	adds	r3, r3, r2
 8009252:	3b04      	subs	r3, #4
 8009254:	6818      	ldr	r0, [r3, #0]
 8009256:	f000 f9ab 	bl	80095b0 <__hi0bits>
 800925a:	2320      	movs	r3, #32
 800925c:	1b1b      	subs	r3, r3, r4
 800925e:	4298      	cmp	r0, r3
 8009260:	dbe4      	blt.n	800922c <__gethex+0x408>
 8009262:	e7af      	b.n	80091c4 <__gethex+0x3a0>
 8009264:	0800f7e1 	.word	0x0800f7e1
 8009268:	0800f7f2 	.word	0x0800f7f2

0800926c <L_shift>:
 800926c:	2308      	movs	r3, #8
 800926e:	b570      	push	{r4, r5, r6, lr}
 8009270:	2520      	movs	r5, #32
 8009272:	1a9a      	subs	r2, r3, r2
 8009274:	0092      	lsls	r2, r2, #2
 8009276:	1aad      	subs	r5, r5, r2
 8009278:	6843      	ldr	r3, [r0, #4]
 800927a:	6804      	ldr	r4, [r0, #0]
 800927c:	001e      	movs	r6, r3
 800927e:	40ae      	lsls	r6, r5
 8009280:	40d3      	lsrs	r3, r2
 8009282:	4334      	orrs	r4, r6
 8009284:	6004      	str	r4, [r0, #0]
 8009286:	6043      	str	r3, [r0, #4]
 8009288:	3004      	adds	r0, #4
 800928a:	4288      	cmp	r0, r1
 800928c:	d3f4      	bcc.n	8009278 <L_shift+0xc>
 800928e:	bd70      	pop	{r4, r5, r6, pc}

08009290 <__match>:
 8009290:	b530      	push	{r4, r5, lr}
 8009292:	6803      	ldr	r3, [r0, #0]
 8009294:	780c      	ldrb	r4, [r1, #0]
 8009296:	3301      	adds	r3, #1
 8009298:	2c00      	cmp	r4, #0
 800929a:	d102      	bne.n	80092a2 <__match+0x12>
 800929c:	6003      	str	r3, [r0, #0]
 800929e:	2001      	movs	r0, #1
 80092a0:	bd30      	pop	{r4, r5, pc}
 80092a2:	781a      	ldrb	r2, [r3, #0]
 80092a4:	0015      	movs	r5, r2
 80092a6:	3d41      	subs	r5, #65	; 0x41
 80092a8:	2d19      	cmp	r5, #25
 80092aa:	d800      	bhi.n	80092ae <__match+0x1e>
 80092ac:	3220      	adds	r2, #32
 80092ae:	3101      	adds	r1, #1
 80092b0:	42a2      	cmp	r2, r4
 80092b2:	d0ef      	beq.n	8009294 <__match+0x4>
 80092b4:	2000      	movs	r0, #0
 80092b6:	e7f3      	b.n	80092a0 <__match+0x10>

080092b8 <__hexnan>:
 80092b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ba:	680b      	ldr	r3, [r1, #0]
 80092bc:	b08b      	sub	sp, #44	; 0x2c
 80092be:	9201      	str	r2, [sp, #4]
 80092c0:	9901      	ldr	r1, [sp, #4]
 80092c2:	115a      	asrs	r2, r3, #5
 80092c4:	0092      	lsls	r2, r2, #2
 80092c6:	188a      	adds	r2, r1, r2
 80092c8:	9202      	str	r2, [sp, #8]
 80092ca:	0019      	movs	r1, r3
 80092cc:	221f      	movs	r2, #31
 80092ce:	4011      	ands	r1, r2
 80092d0:	9008      	str	r0, [sp, #32]
 80092d2:	9106      	str	r1, [sp, #24]
 80092d4:	4213      	tst	r3, r2
 80092d6:	d002      	beq.n	80092de <__hexnan+0x26>
 80092d8:	9b02      	ldr	r3, [sp, #8]
 80092da:	3304      	adds	r3, #4
 80092dc:	9302      	str	r3, [sp, #8]
 80092de:	9b02      	ldr	r3, [sp, #8]
 80092e0:	2500      	movs	r5, #0
 80092e2:	1f1f      	subs	r7, r3, #4
 80092e4:	003e      	movs	r6, r7
 80092e6:	003c      	movs	r4, r7
 80092e8:	9b08      	ldr	r3, [sp, #32]
 80092ea:	603d      	str	r5, [r7, #0]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	9507      	str	r5, [sp, #28]
 80092f0:	9305      	str	r3, [sp, #20]
 80092f2:	9503      	str	r5, [sp, #12]
 80092f4:	9b05      	ldr	r3, [sp, #20]
 80092f6:	3301      	adds	r3, #1
 80092f8:	9309      	str	r3, [sp, #36]	; 0x24
 80092fa:	9b05      	ldr	r3, [sp, #20]
 80092fc:	785b      	ldrb	r3, [r3, #1]
 80092fe:	9304      	str	r3, [sp, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d028      	beq.n	8009356 <__hexnan+0x9e>
 8009304:	9804      	ldr	r0, [sp, #16]
 8009306:	f7ff fd78 	bl	8008dfa <__hexdig_fun>
 800930a:	2800      	cmp	r0, #0
 800930c:	d154      	bne.n	80093b8 <__hexnan+0x100>
 800930e:	9b04      	ldr	r3, [sp, #16]
 8009310:	2b20      	cmp	r3, #32
 8009312:	d819      	bhi.n	8009348 <__hexnan+0x90>
 8009314:	9b03      	ldr	r3, [sp, #12]
 8009316:	9a07      	ldr	r2, [sp, #28]
 8009318:	4293      	cmp	r3, r2
 800931a:	dd12      	ble.n	8009342 <__hexnan+0x8a>
 800931c:	42b4      	cmp	r4, r6
 800931e:	d206      	bcs.n	800932e <__hexnan+0x76>
 8009320:	2d07      	cmp	r5, #7
 8009322:	dc04      	bgt.n	800932e <__hexnan+0x76>
 8009324:	002a      	movs	r2, r5
 8009326:	0031      	movs	r1, r6
 8009328:	0020      	movs	r0, r4
 800932a:	f7ff ff9f 	bl	800926c <L_shift>
 800932e:	9b01      	ldr	r3, [sp, #4]
 8009330:	2508      	movs	r5, #8
 8009332:	429c      	cmp	r4, r3
 8009334:	d905      	bls.n	8009342 <__hexnan+0x8a>
 8009336:	1f26      	subs	r6, r4, #4
 8009338:	2500      	movs	r5, #0
 800933a:	0034      	movs	r4, r6
 800933c:	9b03      	ldr	r3, [sp, #12]
 800933e:	6035      	str	r5, [r6, #0]
 8009340:	9307      	str	r3, [sp, #28]
 8009342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009344:	9305      	str	r3, [sp, #20]
 8009346:	e7d5      	b.n	80092f4 <__hexnan+0x3c>
 8009348:	9b04      	ldr	r3, [sp, #16]
 800934a:	2b29      	cmp	r3, #41	; 0x29
 800934c:	d159      	bne.n	8009402 <__hexnan+0x14a>
 800934e:	9b05      	ldr	r3, [sp, #20]
 8009350:	9a08      	ldr	r2, [sp, #32]
 8009352:	3302      	adds	r3, #2
 8009354:	6013      	str	r3, [r2, #0]
 8009356:	9b03      	ldr	r3, [sp, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d052      	beq.n	8009402 <__hexnan+0x14a>
 800935c:	42b4      	cmp	r4, r6
 800935e:	d206      	bcs.n	800936e <__hexnan+0xb6>
 8009360:	2d07      	cmp	r5, #7
 8009362:	dc04      	bgt.n	800936e <__hexnan+0xb6>
 8009364:	002a      	movs	r2, r5
 8009366:	0031      	movs	r1, r6
 8009368:	0020      	movs	r0, r4
 800936a:	f7ff ff7f 	bl	800926c <L_shift>
 800936e:	9b01      	ldr	r3, [sp, #4]
 8009370:	429c      	cmp	r4, r3
 8009372:	d935      	bls.n	80093e0 <__hexnan+0x128>
 8009374:	001a      	movs	r2, r3
 8009376:	0023      	movs	r3, r4
 8009378:	cb02      	ldmia	r3!, {r1}
 800937a:	c202      	stmia	r2!, {r1}
 800937c:	429f      	cmp	r7, r3
 800937e:	d2fb      	bcs.n	8009378 <__hexnan+0xc0>
 8009380:	9b02      	ldr	r3, [sp, #8]
 8009382:	1c62      	adds	r2, r4, #1
 8009384:	1ed9      	subs	r1, r3, #3
 8009386:	2304      	movs	r3, #4
 8009388:	4291      	cmp	r1, r2
 800938a:	d305      	bcc.n	8009398 <__hexnan+0xe0>
 800938c:	9b02      	ldr	r3, [sp, #8]
 800938e:	3b04      	subs	r3, #4
 8009390:	1b1b      	subs	r3, r3, r4
 8009392:	089b      	lsrs	r3, r3, #2
 8009394:	3301      	adds	r3, #1
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	9a01      	ldr	r2, [sp, #4]
 800939a:	18d3      	adds	r3, r2, r3
 800939c:	2200      	movs	r2, #0
 800939e:	c304      	stmia	r3!, {r2}
 80093a0:	429f      	cmp	r7, r3
 80093a2:	d2fc      	bcs.n	800939e <__hexnan+0xe6>
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d104      	bne.n	80093b4 <__hexnan+0xfc>
 80093aa:	9b01      	ldr	r3, [sp, #4]
 80093ac:	429f      	cmp	r7, r3
 80093ae:	d126      	bne.n	80093fe <__hexnan+0x146>
 80093b0:	2301      	movs	r3, #1
 80093b2:	603b      	str	r3, [r7, #0]
 80093b4:	2005      	movs	r0, #5
 80093b6:	e025      	b.n	8009404 <__hexnan+0x14c>
 80093b8:	9b03      	ldr	r3, [sp, #12]
 80093ba:	3501      	adds	r5, #1
 80093bc:	3301      	adds	r3, #1
 80093be:	9303      	str	r3, [sp, #12]
 80093c0:	2d08      	cmp	r5, #8
 80093c2:	dd06      	ble.n	80093d2 <__hexnan+0x11a>
 80093c4:	9b01      	ldr	r3, [sp, #4]
 80093c6:	429c      	cmp	r4, r3
 80093c8:	d9bb      	bls.n	8009342 <__hexnan+0x8a>
 80093ca:	2300      	movs	r3, #0
 80093cc:	2501      	movs	r5, #1
 80093ce:	3c04      	subs	r4, #4
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	220f      	movs	r2, #15
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	4010      	ands	r0, r2
 80093d8:	011b      	lsls	r3, r3, #4
 80093da:	4303      	orrs	r3, r0
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	e7b0      	b.n	8009342 <__hexnan+0x8a>
 80093e0:	9b06      	ldr	r3, [sp, #24]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0de      	beq.n	80093a4 <__hexnan+0xec>
 80093e6:	2320      	movs	r3, #32
 80093e8:	9a06      	ldr	r2, [sp, #24]
 80093ea:	9902      	ldr	r1, [sp, #8]
 80093ec:	1a9b      	subs	r3, r3, r2
 80093ee:	2201      	movs	r2, #1
 80093f0:	4252      	negs	r2, r2
 80093f2:	40da      	lsrs	r2, r3
 80093f4:	3904      	subs	r1, #4
 80093f6:	680b      	ldr	r3, [r1, #0]
 80093f8:	4013      	ands	r3, r2
 80093fa:	600b      	str	r3, [r1, #0]
 80093fc:	e7d2      	b.n	80093a4 <__hexnan+0xec>
 80093fe:	3f04      	subs	r7, #4
 8009400:	e7d0      	b.n	80093a4 <__hexnan+0xec>
 8009402:	2004      	movs	r0, #4
 8009404:	b00b      	add	sp, #44	; 0x2c
 8009406:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009408 <__ascii_mbtowc>:
 8009408:	b082      	sub	sp, #8
 800940a:	2900      	cmp	r1, #0
 800940c:	d100      	bne.n	8009410 <__ascii_mbtowc+0x8>
 800940e:	a901      	add	r1, sp, #4
 8009410:	1e10      	subs	r0, r2, #0
 8009412:	d006      	beq.n	8009422 <__ascii_mbtowc+0x1a>
 8009414:	2b00      	cmp	r3, #0
 8009416:	d006      	beq.n	8009426 <__ascii_mbtowc+0x1e>
 8009418:	7813      	ldrb	r3, [r2, #0]
 800941a:	600b      	str	r3, [r1, #0]
 800941c:	7810      	ldrb	r0, [r2, #0]
 800941e:	1e43      	subs	r3, r0, #1
 8009420:	4198      	sbcs	r0, r3
 8009422:	b002      	add	sp, #8
 8009424:	4770      	bx	lr
 8009426:	2002      	movs	r0, #2
 8009428:	4240      	negs	r0, r0
 800942a:	e7fa      	b.n	8009422 <__ascii_mbtowc+0x1a>

0800942c <_Balloc>:
 800942c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800942e:	b570      	push	{r4, r5, r6, lr}
 8009430:	0006      	movs	r6, r0
 8009432:	000c      	movs	r4, r1
 8009434:	2b00      	cmp	r3, #0
 8009436:	d012      	beq.n	800945e <_Balloc+0x32>
 8009438:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800943a:	00a2      	lsls	r2, r4, #2
 800943c:	189b      	adds	r3, r3, r2
 800943e:	6818      	ldr	r0, [r3, #0]
 8009440:	2800      	cmp	r0, #0
 8009442:	d115      	bne.n	8009470 <_Balloc+0x44>
 8009444:	2101      	movs	r1, #1
 8009446:	000d      	movs	r5, r1
 8009448:	40a5      	lsls	r5, r4
 800944a:	1d6a      	adds	r2, r5, #5
 800944c:	0030      	movs	r0, r6
 800944e:	0092      	lsls	r2, r2, #2
 8009450:	f003 face 	bl	800c9f0 <_calloc_r>
 8009454:	2800      	cmp	r0, #0
 8009456:	d009      	beq.n	800946c <_Balloc+0x40>
 8009458:	6044      	str	r4, [r0, #4]
 800945a:	6085      	str	r5, [r0, #8]
 800945c:	e00a      	b.n	8009474 <_Balloc+0x48>
 800945e:	2221      	movs	r2, #33	; 0x21
 8009460:	2104      	movs	r1, #4
 8009462:	f003 fac5 	bl	800c9f0 <_calloc_r>
 8009466:	6470      	str	r0, [r6, #68]	; 0x44
 8009468:	2800      	cmp	r0, #0
 800946a:	d1e5      	bne.n	8009438 <_Balloc+0xc>
 800946c:	2000      	movs	r0, #0
 800946e:	bd70      	pop	{r4, r5, r6, pc}
 8009470:	6802      	ldr	r2, [r0, #0]
 8009472:	601a      	str	r2, [r3, #0]
 8009474:	2300      	movs	r3, #0
 8009476:	6103      	str	r3, [r0, #16]
 8009478:	60c3      	str	r3, [r0, #12]
 800947a:	e7f8      	b.n	800946e <_Balloc+0x42>

0800947c <_Bfree>:
 800947c:	2900      	cmp	r1, #0
 800947e:	d006      	beq.n	800948e <_Bfree+0x12>
 8009480:	684a      	ldr	r2, [r1, #4]
 8009482:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009484:	0092      	lsls	r2, r2, #2
 8009486:	189b      	adds	r3, r3, r2
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	600a      	str	r2, [r1, #0]
 800948c:	6019      	str	r1, [r3, #0]
 800948e:	4770      	bx	lr

08009490 <__multadd>:
 8009490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009492:	000e      	movs	r6, r1
 8009494:	9001      	str	r0, [sp, #4]
 8009496:	000c      	movs	r4, r1
 8009498:	001d      	movs	r5, r3
 800949a:	2000      	movs	r0, #0
 800949c:	690f      	ldr	r7, [r1, #16]
 800949e:	3614      	adds	r6, #20
 80094a0:	6833      	ldr	r3, [r6, #0]
 80094a2:	3001      	adds	r0, #1
 80094a4:	b299      	uxth	r1, r3
 80094a6:	4351      	muls	r1, r2
 80094a8:	0c1b      	lsrs	r3, r3, #16
 80094aa:	4353      	muls	r3, r2
 80094ac:	1949      	adds	r1, r1, r5
 80094ae:	0c0d      	lsrs	r5, r1, #16
 80094b0:	195b      	adds	r3, r3, r5
 80094b2:	0c1d      	lsrs	r5, r3, #16
 80094b4:	b289      	uxth	r1, r1
 80094b6:	041b      	lsls	r3, r3, #16
 80094b8:	185b      	adds	r3, r3, r1
 80094ba:	c608      	stmia	r6!, {r3}
 80094bc:	4287      	cmp	r7, r0
 80094be:	dcef      	bgt.n	80094a0 <__multadd+0x10>
 80094c0:	2d00      	cmp	r5, #0
 80094c2:	d022      	beq.n	800950a <__multadd+0x7a>
 80094c4:	68a3      	ldr	r3, [r4, #8]
 80094c6:	42bb      	cmp	r3, r7
 80094c8:	dc19      	bgt.n	80094fe <__multadd+0x6e>
 80094ca:	6861      	ldr	r1, [r4, #4]
 80094cc:	9801      	ldr	r0, [sp, #4]
 80094ce:	3101      	adds	r1, #1
 80094d0:	f7ff ffac 	bl	800942c <_Balloc>
 80094d4:	1e06      	subs	r6, r0, #0
 80094d6:	d105      	bne.n	80094e4 <__multadd+0x54>
 80094d8:	0032      	movs	r2, r6
 80094da:	21ba      	movs	r1, #186	; 0xba
 80094dc:	4b0c      	ldr	r3, [pc, #48]	; (8009510 <__multadd+0x80>)
 80094de:	480d      	ldr	r0, [pc, #52]	; (8009514 <__multadd+0x84>)
 80094e0:	f003 fa68 	bl	800c9b4 <__assert_func>
 80094e4:	0021      	movs	r1, r4
 80094e6:	6922      	ldr	r2, [r4, #16]
 80094e8:	310c      	adds	r1, #12
 80094ea:	3202      	adds	r2, #2
 80094ec:	0092      	lsls	r2, r2, #2
 80094ee:	300c      	adds	r0, #12
 80094f0:	f7ff fb01 	bl	8008af6 <memcpy>
 80094f4:	0021      	movs	r1, r4
 80094f6:	9801      	ldr	r0, [sp, #4]
 80094f8:	f7ff ffc0 	bl	800947c <_Bfree>
 80094fc:	0034      	movs	r4, r6
 80094fe:	1d3b      	adds	r3, r7, #4
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	18e3      	adds	r3, r4, r3
 8009504:	605d      	str	r5, [r3, #4]
 8009506:	1c7b      	adds	r3, r7, #1
 8009508:	6123      	str	r3, [r4, #16]
 800950a:	0020      	movs	r0, r4
 800950c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800950e:	46c0      	nop			; (mov r8, r8)
 8009510:	0800f7e1 	.word	0x0800f7e1
 8009514:	0800f852 	.word	0x0800f852

08009518 <__s2b>:
 8009518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800951a:	0006      	movs	r6, r0
 800951c:	0018      	movs	r0, r3
 800951e:	000c      	movs	r4, r1
 8009520:	3008      	adds	r0, #8
 8009522:	2109      	movs	r1, #9
 8009524:	9301      	str	r3, [sp, #4]
 8009526:	0015      	movs	r5, r2
 8009528:	f7f6 fe92 	bl	8000250 <__divsi3>
 800952c:	2301      	movs	r3, #1
 800952e:	2100      	movs	r1, #0
 8009530:	4283      	cmp	r3, r0
 8009532:	db0a      	blt.n	800954a <__s2b+0x32>
 8009534:	0030      	movs	r0, r6
 8009536:	f7ff ff79 	bl	800942c <_Balloc>
 800953a:	1e01      	subs	r1, r0, #0
 800953c:	d108      	bne.n	8009550 <__s2b+0x38>
 800953e:	000a      	movs	r2, r1
 8009540:	4b19      	ldr	r3, [pc, #100]	; (80095a8 <__s2b+0x90>)
 8009542:	481a      	ldr	r0, [pc, #104]	; (80095ac <__s2b+0x94>)
 8009544:	31d3      	adds	r1, #211	; 0xd3
 8009546:	f003 fa35 	bl	800c9b4 <__assert_func>
 800954a:	005b      	lsls	r3, r3, #1
 800954c:	3101      	adds	r1, #1
 800954e:	e7ef      	b.n	8009530 <__s2b+0x18>
 8009550:	9b08      	ldr	r3, [sp, #32]
 8009552:	6143      	str	r3, [r0, #20]
 8009554:	2301      	movs	r3, #1
 8009556:	6103      	str	r3, [r0, #16]
 8009558:	2d09      	cmp	r5, #9
 800955a:	dd18      	ble.n	800958e <__s2b+0x76>
 800955c:	0023      	movs	r3, r4
 800955e:	3309      	adds	r3, #9
 8009560:	001f      	movs	r7, r3
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	1964      	adds	r4, r4, r5
 8009566:	783b      	ldrb	r3, [r7, #0]
 8009568:	220a      	movs	r2, #10
 800956a:	0030      	movs	r0, r6
 800956c:	3b30      	subs	r3, #48	; 0x30
 800956e:	f7ff ff8f 	bl	8009490 <__multadd>
 8009572:	3701      	adds	r7, #1
 8009574:	0001      	movs	r1, r0
 8009576:	42a7      	cmp	r7, r4
 8009578:	d1f5      	bne.n	8009566 <__s2b+0x4e>
 800957a:	002c      	movs	r4, r5
 800957c:	9b00      	ldr	r3, [sp, #0]
 800957e:	3c08      	subs	r4, #8
 8009580:	191c      	adds	r4, r3, r4
 8009582:	002f      	movs	r7, r5
 8009584:	9b01      	ldr	r3, [sp, #4]
 8009586:	429f      	cmp	r7, r3
 8009588:	db04      	blt.n	8009594 <__s2b+0x7c>
 800958a:	0008      	movs	r0, r1
 800958c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800958e:	2509      	movs	r5, #9
 8009590:	340a      	adds	r4, #10
 8009592:	e7f6      	b.n	8009582 <__s2b+0x6a>
 8009594:	1b63      	subs	r3, r4, r5
 8009596:	5ddb      	ldrb	r3, [r3, r7]
 8009598:	220a      	movs	r2, #10
 800959a:	0030      	movs	r0, r6
 800959c:	3b30      	subs	r3, #48	; 0x30
 800959e:	f7ff ff77 	bl	8009490 <__multadd>
 80095a2:	3701      	adds	r7, #1
 80095a4:	0001      	movs	r1, r0
 80095a6:	e7ed      	b.n	8009584 <__s2b+0x6c>
 80095a8:	0800f7e1 	.word	0x0800f7e1
 80095ac:	0800f852 	.word	0x0800f852

080095b0 <__hi0bits>:
 80095b0:	0003      	movs	r3, r0
 80095b2:	0c02      	lsrs	r2, r0, #16
 80095b4:	2000      	movs	r0, #0
 80095b6:	4282      	cmp	r2, r0
 80095b8:	d101      	bne.n	80095be <__hi0bits+0xe>
 80095ba:	041b      	lsls	r3, r3, #16
 80095bc:	3010      	adds	r0, #16
 80095be:	0e1a      	lsrs	r2, r3, #24
 80095c0:	d101      	bne.n	80095c6 <__hi0bits+0x16>
 80095c2:	3008      	adds	r0, #8
 80095c4:	021b      	lsls	r3, r3, #8
 80095c6:	0f1a      	lsrs	r2, r3, #28
 80095c8:	d101      	bne.n	80095ce <__hi0bits+0x1e>
 80095ca:	3004      	adds	r0, #4
 80095cc:	011b      	lsls	r3, r3, #4
 80095ce:	0f9a      	lsrs	r2, r3, #30
 80095d0:	d101      	bne.n	80095d6 <__hi0bits+0x26>
 80095d2:	3002      	adds	r0, #2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	db03      	blt.n	80095e2 <__hi0bits+0x32>
 80095da:	3001      	adds	r0, #1
 80095dc:	005b      	lsls	r3, r3, #1
 80095de:	d400      	bmi.n	80095e2 <__hi0bits+0x32>
 80095e0:	2020      	movs	r0, #32
 80095e2:	4770      	bx	lr

080095e4 <__lo0bits>:
 80095e4:	6803      	ldr	r3, [r0, #0]
 80095e6:	0001      	movs	r1, r0
 80095e8:	2207      	movs	r2, #7
 80095ea:	0018      	movs	r0, r3
 80095ec:	4010      	ands	r0, r2
 80095ee:	4213      	tst	r3, r2
 80095f0:	d00d      	beq.n	800960e <__lo0bits+0x2a>
 80095f2:	3a06      	subs	r2, #6
 80095f4:	2000      	movs	r0, #0
 80095f6:	4213      	tst	r3, r2
 80095f8:	d105      	bne.n	8009606 <__lo0bits+0x22>
 80095fa:	3002      	adds	r0, #2
 80095fc:	4203      	tst	r3, r0
 80095fe:	d003      	beq.n	8009608 <__lo0bits+0x24>
 8009600:	40d3      	lsrs	r3, r2
 8009602:	0010      	movs	r0, r2
 8009604:	600b      	str	r3, [r1, #0]
 8009606:	4770      	bx	lr
 8009608:	089b      	lsrs	r3, r3, #2
 800960a:	600b      	str	r3, [r1, #0]
 800960c:	e7fb      	b.n	8009606 <__lo0bits+0x22>
 800960e:	b29a      	uxth	r2, r3
 8009610:	2a00      	cmp	r2, #0
 8009612:	d101      	bne.n	8009618 <__lo0bits+0x34>
 8009614:	2010      	movs	r0, #16
 8009616:	0c1b      	lsrs	r3, r3, #16
 8009618:	b2da      	uxtb	r2, r3
 800961a:	2a00      	cmp	r2, #0
 800961c:	d101      	bne.n	8009622 <__lo0bits+0x3e>
 800961e:	3008      	adds	r0, #8
 8009620:	0a1b      	lsrs	r3, r3, #8
 8009622:	071a      	lsls	r2, r3, #28
 8009624:	d101      	bne.n	800962a <__lo0bits+0x46>
 8009626:	3004      	adds	r0, #4
 8009628:	091b      	lsrs	r3, r3, #4
 800962a:	079a      	lsls	r2, r3, #30
 800962c:	d101      	bne.n	8009632 <__lo0bits+0x4e>
 800962e:	3002      	adds	r0, #2
 8009630:	089b      	lsrs	r3, r3, #2
 8009632:	07da      	lsls	r2, r3, #31
 8009634:	d4e9      	bmi.n	800960a <__lo0bits+0x26>
 8009636:	3001      	adds	r0, #1
 8009638:	085b      	lsrs	r3, r3, #1
 800963a:	d1e6      	bne.n	800960a <__lo0bits+0x26>
 800963c:	2020      	movs	r0, #32
 800963e:	e7e2      	b.n	8009606 <__lo0bits+0x22>

08009640 <__i2b>:
 8009640:	b510      	push	{r4, lr}
 8009642:	000c      	movs	r4, r1
 8009644:	2101      	movs	r1, #1
 8009646:	f7ff fef1 	bl	800942c <_Balloc>
 800964a:	2800      	cmp	r0, #0
 800964c:	d107      	bne.n	800965e <__i2b+0x1e>
 800964e:	2146      	movs	r1, #70	; 0x46
 8009650:	4c05      	ldr	r4, [pc, #20]	; (8009668 <__i2b+0x28>)
 8009652:	0002      	movs	r2, r0
 8009654:	4b05      	ldr	r3, [pc, #20]	; (800966c <__i2b+0x2c>)
 8009656:	0020      	movs	r0, r4
 8009658:	31ff      	adds	r1, #255	; 0xff
 800965a:	f003 f9ab 	bl	800c9b4 <__assert_func>
 800965e:	2301      	movs	r3, #1
 8009660:	6144      	str	r4, [r0, #20]
 8009662:	6103      	str	r3, [r0, #16]
 8009664:	bd10      	pop	{r4, pc}
 8009666:	46c0      	nop			; (mov r8, r8)
 8009668:	0800f852 	.word	0x0800f852
 800966c:	0800f7e1 	.word	0x0800f7e1

08009670 <__multiply>:
 8009670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009672:	0015      	movs	r5, r2
 8009674:	690a      	ldr	r2, [r1, #16]
 8009676:	692b      	ldr	r3, [r5, #16]
 8009678:	000c      	movs	r4, r1
 800967a:	b08b      	sub	sp, #44	; 0x2c
 800967c:	429a      	cmp	r2, r3
 800967e:	da01      	bge.n	8009684 <__multiply+0x14>
 8009680:	002c      	movs	r4, r5
 8009682:	000d      	movs	r5, r1
 8009684:	6927      	ldr	r7, [r4, #16]
 8009686:	692e      	ldr	r6, [r5, #16]
 8009688:	6861      	ldr	r1, [r4, #4]
 800968a:	19bb      	adds	r3, r7, r6
 800968c:	9303      	str	r3, [sp, #12]
 800968e:	68a3      	ldr	r3, [r4, #8]
 8009690:	19ba      	adds	r2, r7, r6
 8009692:	4293      	cmp	r3, r2
 8009694:	da00      	bge.n	8009698 <__multiply+0x28>
 8009696:	3101      	adds	r1, #1
 8009698:	f7ff fec8 	bl	800942c <_Balloc>
 800969c:	9002      	str	r0, [sp, #8]
 800969e:	2800      	cmp	r0, #0
 80096a0:	d106      	bne.n	80096b0 <__multiply+0x40>
 80096a2:	21b1      	movs	r1, #177	; 0xb1
 80096a4:	4b48      	ldr	r3, [pc, #288]	; (80097c8 <__multiply+0x158>)
 80096a6:	4849      	ldr	r0, [pc, #292]	; (80097cc <__multiply+0x15c>)
 80096a8:	9a02      	ldr	r2, [sp, #8]
 80096aa:	0049      	lsls	r1, r1, #1
 80096ac:	f003 f982 	bl	800c9b4 <__assert_func>
 80096b0:	9b02      	ldr	r3, [sp, #8]
 80096b2:	2200      	movs	r2, #0
 80096b4:	3314      	adds	r3, #20
 80096b6:	469c      	mov	ip, r3
 80096b8:	19bb      	adds	r3, r7, r6
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4463      	add	r3, ip
 80096be:	9304      	str	r3, [sp, #16]
 80096c0:	4663      	mov	r3, ip
 80096c2:	9904      	ldr	r1, [sp, #16]
 80096c4:	428b      	cmp	r3, r1
 80096c6:	d32a      	bcc.n	800971e <__multiply+0xae>
 80096c8:	0023      	movs	r3, r4
 80096ca:	00bf      	lsls	r7, r7, #2
 80096cc:	3314      	adds	r3, #20
 80096ce:	3514      	adds	r5, #20
 80096d0:	9308      	str	r3, [sp, #32]
 80096d2:	00b6      	lsls	r6, r6, #2
 80096d4:	19db      	adds	r3, r3, r7
 80096d6:	9305      	str	r3, [sp, #20]
 80096d8:	19ab      	adds	r3, r5, r6
 80096da:	9309      	str	r3, [sp, #36]	; 0x24
 80096dc:	2304      	movs	r3, #4
 80096de:	9306      	str	r3, [sp, #24]
 80096e0:	0023      	movs	r3, r4
 80096e2:	9a05      	ldr	r2, [sp, #20]
 80096e4:	3315      	adds	r3, #21
 80096e6:	9501      	str	r5, [sp, #4]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d305      	bcc.n	80096f8 <__multiply+0x88>
 80096ec:	1b13      	subs	r3, r2, r4
 80096ee:	3b15      	subs	r3, #21
 80096f0:	089b      	lsrs	r3, r3, #2
 80096f2:	3301      	adds	r3, #1
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	9306      	str	r3, [sp, #24]
 80096f8:	9b01      	ldr	r3, [sp, #4]
 80096fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d310      	bcc.n	8009722 <__multiply+0xb2>
 8009700:	9b03      	ldr	r3, [sp, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	dd05      	ble.n	8009712 <__multiply+0xa2>
 8009706:	9b04      	ldr	r3, [sp, #16]
 8009708:	3b04      	subs	r3, #4
 800970a:	9304      	str	r3, [sp, #16]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d056      	beq.n	80097c0 <__multiply+0x150>
 8009712:	9b02      	ldr	r3, [sp, #8]
 8009714:	9a03      	ldr	r2, [sp, #12]
 8009716:	0018      	movs	r0, r3
 8009718:	611a      	str	r2, [r3, #16]
 800971a:	b00b      	add	sp, #44	; 0x2c
 800971c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800971e:	c304      	stmia	r3!, {r2}
 8009720:	e7cf      	b.n	80096c2 <__multiply+0x52>
 8009722:	9b01      	ldr	r3, [sp, #4]
 8009724:	6818      	ldr	r0, [r3, #0]
 8009726:	b280      	uxth	r0, r0
 8009728:	2800      	cmp	r0, #0
 800972a:	d01e      	beq.n	800976a <__multiply+0xfa>
 800972c:	4667      	mov	r7, ip
 800972e:	2500      	movs	r5, #0
 8009730:	9e08      	ldr	r6, [sp, #32]
 8009732:	ce02      	ldmia	r6!, {r1}
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	9307      	str	r3, [sp, #28]
 8009738:	b28b      	uxth	r3, r1
 800973a:	4343      	muls	r3, r0
 800973c:	001a      	movs	r2, r3
 800973e:	466b      	mov	r3, sp
 8009740:	8b9b      	ldrh	r3, [r3, #28]
 8009742:	18d3      	adds	r3, r2, r3
 8009744:	195b      	adds	r3, r3, r5
 8009746:	0c0d      	lsrs	r5, r1, #16
 8009748:	4345      	muls	r5, r0
 800974a:	9a07      	ldr	r2, [sp, #28]
 800974c:	0c11      	lsrs	r1, r2, #16
 800974e:	1869      	adds	r1, r5, r1
 8009750:	0c1a      	lsrs	r2, r3, #16
 8009752:	188a      	adds	r2, r1, r2
 8009754:	b29b      	uxth	r3, r3
 8009756:	0c15      	lsrs	r5, r2, #16
 8009758:	0412      	lsls	r2, r2, #16
 800975a:	431a      	orrs	r2, r3
 800975c:	9b05      	ldr	r3, [sp, #20]
 800975e:	c704      	stmia	r7!, {r2}
 8009760:	42b3      	cmp	r3, r6
 8009762:	d8e6      	bhi.n	8009732 <__multiply+0xc2>
 8009764:	4663      	mov	r3, ip
 8009766:	9a06      	ldr	r2, [sp, #24]
 8009768:	509d      	str	r5, [r3, r2]
 800976a:	9b01      	ldr	r3, [sp, #4]
 800976c:	6818      	ldr	r0, [r3, #0]
 800976e:	0c00      	lsrs	r0, r0, #16
 8009770:	d020      	beq.n	80097b4 <__multiply+0x144>
 8009772:	4663      	mov	r3, ip
 8009774:	0025      	movs	r5, r4
 8009776:	4661      	mov	r1, ip
 8009778:	2700      	movs	r7, #0
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	3514      	adds	r5, #20
 800977e:	682a      	ldr	r2, [r5, #0]
 8009780:	680e      	ldr	r6, [r1, #0]
 8009782:	b292      	uxth	r2, r2
 8009784:	4342      	muls	r2, r0
 8009786:	0c36      	lsrs	r6, r6, #16
 8009788:	1992      	adds	r2, r2, r6
 800978a:	19d2      	adds	r2, r2, r7
 800978c:	0416      	lsls	r6, r2, #16
 800978e:	b29b      	uxth	r3, r3
 8009790:	431e      	orrs	r6, r3
 8009792:	600e      	str	r6, [r1, #0]
 8009794:	cd40      	ldmia	r5!, {r6}
 8009796:	684b      	ldr	r3, [r1, #4]
 8009798:	0c36      	lsrs	r6, r6, #16
 800979a:	4346      	muls	r6, r0
 800979c:	b29b      	uxth	r3, r3
 800979e:	0c12      	lsrs	r2, r2, #16
 80097a0:	18f3      	adds	r3, r6, r3
 80097a2:	189b      	adds	r3, r3, r2
 80097a4:	9a05      	ldr	r2, [sp, #20]
 80097a6:	0c1f      	lsrs	r7, r3, #16
 80097a8:	3104      	adds	r1, #4
 80097aa:	42aa      	cmp	r2, r5
 80097ac:	d8e7      	bhi.n	800977e <__multiply+0x10e>
 80097ae:	4662      	mov	r2, ip
 80097b0:	9906      	ldr	r1, [sp, #24]
 80097b2:	5053      	str	r3, [r2, r1]
 80097b4:	9b01      	ldr	r3, [sp, #4]
 80097b6:	3304      	adds	r3, #4
 80097b8:	9301      	str	r3, [sp, #4]
 80097ba:	2304      	movs	r3, #4
 80097bc:	449c      	add	ip, r3
 80097be:	e79b      	b.n	80096f8 <__multiply+0x88>
 80097c0:	9b03      	ldr	r3, [sp, #12]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	9303      	str	r3, [sp, #12]
 80097c6:	e79b      	b.n	8009700 <__multiply+0x90>
 80097c8:	0800f7e1 	.word	0x0800f7e1
 80097cc:	0800f852 	.word	0x0800f852

080097d0 <__pow5mult>:
 80097d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097d2:	2303      	movs	r3, #3
 80097d4:	0015      	movs	r5, r2
 80097d6:	0007      	movs	r7, r0
 80097d8:	000e      	movs	r6, r1
 80097da:	401a      	ands	r2, r3
 80097dc:	421d      	tst	r5, r3
 80097de:	d008      	beq.n	80097f2 <__pow5mult+0x22>
 80097e0:	491a      	ldr	r1, [pc, #104]	; (800984c <__pow5mult+0x7c>)
 80097e2:	3a01      	subs	r2, #1
 80097e4:	0092      	lsls	r2, r2, #2
 80097e6:	5852      	ldr	r2, [r2, r1]
 80097e8:	2300      	movs	r3, #0
 80097ea:	0031      	movs	r1, r6
 80097ec:	f7ff fe50 	bl	8009490 <__multadd>
 80097f0:	0006      	movs	r6, r0
 80097f2:	10ad      	asrs	r5, r5, #2
 80097f4:	d027      	beq.n	8009846 <__pow5mult+0x76>
 80097f6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80097f8:	2c00      	cmp	r4, #0
 80097fa:	d107      	bne.n	800980c <__pow5mult+0x3c>
 80097fc:	0038      	movs	r0, r7
 80097fe:	4914      	ldr	r1, [pc, #80]	; (8009850 <__pow5mult+0x80>)
 8009800:	f7ff ff1e 	bl	8009640 <__i2b>
 8009804:	2300      	movs	r3, #0
 8009806:	0004      	movs	r4, r0
 8009808:	6438      	str	r0, [r7, #64]	; 0x40
 800980a:	6003      	str	r3, [r0, #0]
 800980c:	2301      	movs	r3, #1
 800980e:	421d      	tst	r5, r3
 8009810:	d00a      	beq.n	8009828 <__pow5mult+0x58>
 8009812:	0031      	movs	r1, r6
 8009814:	0022      	movs	r2, r4
 8009816:	0038      	movs	r0, r7
 8009818:	f7ff ff2a 	bl	8009670 <__multiply>
 800981c:	0031      	movs	r1, r6
 800981e:	9001      	str	r0, [sp, #4]
 8009820:	0038      	movs	r0, r7
 8009822:	f7ff fe2b 	bl	800947c <_Bfree>
 8009826:	9e01      	ldr	r6, [sp, #4]
 8009828:	106d      	asrs	r5, r5, #1
 800982a:	d00c      	beq.n	8009846 <__pow5mult+0x76>
 800982c:	6820      	ldr	r0, [r4, #0]
 800982e:	2800      	cmp	r0, #0
 8009830:	d107      	bne.n	8009842 <__pow5mult+0x72>
 8009832:	0022      	movs	r2, r4
 8009834:	0021      	movs	r1, r4
 8009836:	0038      	movs	r0, r7
 8009838:	f7ff ff1a 	bl	8009670 <__multiply>
 800983c:	2300      	movs	r3, #0
 800983e:	6020      	str	r0, [r4, #0]
 8009840:	6003      	str	r3, [r0, #0]
 8009842:	0004      	movs	r4, r0
 8009844:	e7e2      	b.n	800980c <__pow5mult+0x3c>
 8009846:	0030      	movs	r0, r6
 8009848:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800984a:	46c0      	nop			; (mov r8, r8)
 800984c:	0800f9a0 	.word	0x0800f9a0
 8009850:	00000271 	.word	0x00000271

08009854 <__lshift>:
 8009854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009856:	000c      	movs	r4, r1
 8009858:	0017      	movs	r7, r2
 800985a:	6923      	ldr	r3, [r4, #16]
 800985c:	1155      	asrs	r5, r2, #5
 800985e:	b087      	sub	sp, #28
 8009860:	18eb      	adds	r3, r5, r3
 8009862:	9302      	str	r3, [sp, #8]
 8009864:	3301      	adds	r3, #1
 8009866:	9301      	str	r3, [sp, #4]
 8009868:	6849      	ldr	r1, [r1, #4]
 800986a:	68a3      	ldr	r3, [r4, #8]
 800986c:	9004      	str	r0, [sp, #16]
 800986e:	9a01      	ldr	r2, [sp, #4]
 8009870:	4293      	cmp	r3, r2
 8009872:	db10      	blt.n	8009896 <__lshift+0x42>
 8009874:	9804      	ldr	r0, [sp, #16]
 8009876:	f7ff fdd9 	bl	800942c <_Balloc>
 800987a:	2300      	movs	r3, #0
 800987c:	0002      	movs	r2, r0
 800987e:	0006      	movs	r6, r0
 8009880:	0019      	movs	r1, r3
 8009882:	3214      	adds	r2, #20
 8009884:	4298      	cmp	r0, r3
 8009886:	d10c      	bne.n	80098a2 <__lshift+0x4e>
 8009888:	31df      	adds	r1, #223	; 0xdf
 800988a:	0032      	movs	r2, r6
 800988c:	4b26      	ldr	r3, [pc, #152]	; (8009928 <__lshift+0xd4>)
 800988e:	4827      	ldr	r0, [pc, #156]	; (800992c <__lshift+0xd8>)
 8009890:	31ff      	adds	r1, #255	; 0xff
 8009892:	f003 f88f 	bl	800c9b4 <__assert_func>
 8009896:	3101      	adds	r1, #1
 8009898:	005b      	lsls	r3, r3, #1
 800989a:	e7e8      	b.n	800986e <__lshift+0x1a>
 800989c:	0098      	lsls	r0, r3, #2
 800989e:	5011      	str	r1, [r2, r0]
 80098a0:	3301      	adds	r3, #1
 80098a2:	42ab      	cmp	r3, r5
 80098a4:	dbfa      	blt.n	800989c <__lshift+0x48>
 80098a6:	43eb      	mvns	r3, r5
 80098a8:	17db      	asrs	r3, r3, #31
 80098aa:	401d      	ands	r5, r3
 80098ac:	211f      	movs	r1, #31
 80098ae:	0023      	movs	r3, r4
 80098b0:	0038      	movs	r0, r7
 80098b2:	00ad      	lsls	r5, r5, #2
 80098b4:	1955      	adds	r5, r2, r5
 80098b6:	6922      	ldr	r2, [r4, #16]
 80098b8:	3314      	adds	r3, #20
 80098ba:	0092      	lsls	r2, r2, #2
 80098bc:	4008      	ands	r0, r1
 80098be:	4684      	mov	ip, r0
 80098c0:	189a      	adds	r2, r3, r2
 80098c2:	420f      	tst	r7, r1
 80098c4:	d02a      	beq.n	800991c <__lshift+0xc8>
 80098c6:	3101      	adds	r1, #1
 80098c8:	1a09      	subs	r1, r1, r0
 80098ca:	9105      	str	r1, [sp, #20]
 80098cc:	2100      	movs	r1, #0
 80098ce:	9503      	str	r5, [sp, #12]
 80098d0:	4667      	mov	r7, ip
 80098d2:	6818      	ldr	r0, [r3, #0]
 80098d4:	40b8      	lsls	r0, r7
 80098d6:	4308      	orrs	r0, r1
 80098d8:	9903      	ldr	r1, [sp, #12]
 80098da:	c101      	stmia	r1!, {r0}
 80098dc:	9103      	str	r1, [sp, #12]
 80098de:	9805      	ldr	r0, [sp, #20]
 80098e0:	cb02      	ldmia	r3!, {r1}
 80098e2:	40c1      	lsrs	r1, r0
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d8f3      	bhi.n	80098d0 <__lshift+0x7c>
 80098e8:	0020      	movs	r0, r4
 80098ea:	3015      	adds	r0, #21
 80098ec:	2304      	movs	r3, #4
 80098ee:	4282      	cmp	r2, r0
 80098f0:	d304      	bcc.n	80098fc <__lshift+0xa8>
 80098f2:	1b13      	subs	r3, r2, r4
 80098f4:	3b15      	subs	r3, #21
 80098f6:	089b      	lsrs	r3, r3, #2
 80098f8:	3301      	adds	r3, #1
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	50e9      	str	r1, [r5, r3]
 80098fe:	2900      	cmp	r1, #0
 8009900:	d002      	beq.n	8009908 <__lshift+0xb4>
 8009902:	9b02      	ldr	r3, [sp, #8]
 8009904:	3302      	adds	r3, #2
 8009906:	9301      	str	r3, [sp, #4]
 8009908:	9b01      	ldr	r3, [sp, #4]
 800990a:	9804      	ldr	r0, [sp, #16]
 800990c:	3b01      	subs	r3, #1
 800990e:	0021      	movs	r1, r4
 8009910:	6133      	str	r3, [r6, #16]
 8009912:	f7ff fdb3 	bl	800947c <_Bfree>
 8009916:	0030      	movs	r0, r6
 8009918:	b007      	add	sp, #28
 800991a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800991c:	cb02      	ldmia	r3!, {r1}
 800991e:	c502      	stmia	r5!, {r1}
 8009920:	429a      	cmp	r2, r3
 8009922:	d8fb      	bhi.n	800991c <__lshift+0xc8>
 8009924:	e7f0      	b.n	8009908 <__lshift+0xb4>
 8009926:	46c0      	nop			; (mov r8, r8)
 8009928:	0800f7e1 	.word	0x0800f7e1
 800992c:	0800f852 	.word	0x0800f852

08009930 <__mcmp>:
 8009930:	b530      	push	{r4, r5, lr}
 8009932:	690b      	ldr	r3, [r1, #16]
 8009934:	6904      	ldr	r4, [r0, #16]
 8009936:	0002      	movs	r2, r0
 8009938:	1ae0      	subs	r0, r4, r3
 800993a:	429c      	cmp	r4, r3
 800993c:	d10e      	bne.n	800995c <__mcmp+0x2c>
 800993e:	3214      	adds	r2, #20
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	3114      	adds	r1, #20
 8009944:	0014      	movs	r4, r2
 8009946:	18c9      	adds	r1, r1, r3
 8009948:	18d2      	adds	r2, r2, r3
 800994a:	3a04      	subs	r2, #4
 800994c:	3904      	subs	r1, #4
 800994e:	6815      	ldr	r5, [r2, #0]
 8009950:	680b      	ldr	r3, [r1, #0]
 8009952:	429d      	cmp	r5, r3
 8009954:	d003      	beq.n	800995e <__mcmp+0x2e>
 8009956:	2001      	movs	r0, #1
 8009958:	429d      	cmp	r5, r3
 800995a:	d303      	bcc.n	8009964 <__mcmp+0x34>
 800995c:	bd30      	pop	{r4, r5, pc}
 800995e:	4294      	cmp	r4, r2
 8009960:	d3f3      	bcc.n	800994a <__mcmp+0x1a>
 8009962:	e7fb      	b.n	800995c <__mcmp+0x2c>
 8009964:	4240      	negs	r0, r0
 8009966:	e7f9      	b.n	800995c <__mcmp+0x2c>

08009968 <__mdiff>:
 8009968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800996a:	000e      	movs	r6, r1
 800996c:	0007      	movs	r7, r0
 800996e:	0011      	movs	r1, r2
 8009970:	0030      	movs	r0, r6
 8009972:	b087      	sub	sp, #28
 8009974:	0014      	movs	r4, r2
 8009976:	f7ff ffdb 	bl	8009930 <__mcmp>
 800997a:	1e05      	subs	r5, r0, #0
 800997c:	d110      	bne.n	80099a0 <__mdiff+0x38>
 800997e:	0001      	movs	r1, r0
 8009980:	0038      	movs	r0, r7
 8009982:	f7ff fd53 	bl	800942c <_Balloc>
 8009986:	1e02      	subs	r2, r0, #0
 8009988:	d104      	bne.n	8009994 <__mdiff+0x2c>
 800998a:	4b3f      	ldr	r3, [pc, #252]	; (8009a88 <__mdiff+0x120>)
 800998c:	483f      	ldr	r0, [pc, #252]	; (8009a8c <__mdiff+0x124>)
 800998e:	4940      	ldr	r1, [pc, #256]	; (8009a90 <__mdiff+0x128>)
 8009990:	f003 f810 	bl	800c9b4 <__assert_func>
 8009994:	2301      	movs	r3, #1
 8009996:	6145      	str	r5, [r0, #20]
 8009998:	6103      	str	r3, [r0, #16]
 800999a:	0010      	movs	r0, r2
 800999c:	b007      	add	sp, #28
 800999e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099a0:	2301      	movs	r3, #1
 80099a2:	9301      	str	r3, [sp, #4]
 80099a4:	2800      	cmp	r0, #0
 80099a6:	db04      	blt.n	80099b2 <__mdiff+0x4a>
 80099a8:	0023      	movs	r3, r4
 80099aa:	0034      	movs	r4, r6
 80099ac:	001e      	movs	r6, r3
 80099ae:	2300      	movs	r3, #0
 80099b0:	9301      	str	r3, [sp, #4]
 80099b2:	0038      	movs	r0, r7
 80099b4:	6861      	ldr	r1, [r4, #4]
 80099b6:	f7ff fd39 	bl	800942c <_Balloc>
 80099ba:	1e02      	subs	r2, r0, #0
 80099bc:	d103      	bne.n	80099c6 <__mdiff+0x5e>
 80099be:	4b32      	ldr	r3, [pc, #200]	; (8009a88 <__mdiff+0x120>)
 80099c0:	4832      	ldr	r0, [pc, #200]	; (8009a8c <__mdiff+0x124>)
 80099c2:	4934      	ldr	r1, [pc, #208]	; (8009a94 <__mdiff+0x12c>)
 80099c4:	e7e4      	b.n	8009990 <__mdiff+0x28>
 80099c6:	9b01      	ldr	r3, [sp, #4]
 80099c8:	2700      	movs	r7, #0
 80099ca:	60c3      	str	r3, [r0, #12]
 80099cc:	6920      	ldr	r0, [r4, #16]
 80099ce:	3414      	adds	r4, #20
 80099d0:	0083      	lsls	r3, r0, #2
 80099d2:	18e3      	adds	r3, r4, r3
 80099d4:	0021      	movs	r1, r4
 80099d6:	9401      	str	r4, [sp, #4]
 80099d8:	0034      	movs	r4, r6
 80099da:	9302      	str	r3, [sp, #8]
 80099dc:	6933      	ldr	r3, [r6, #16]
 80099de:	3414      	adds	r4, #20
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	18e3      	adds	r3, r4, r3
 80099e4:	9303      	str	r3, [sp, #12]
 80099e6:	0013      	movs	r3, r2
 80099e8:	3314      	adds	r3, #20
 80099ea:	469c      	mov	ip, r3
 80099ec:	9305      	str	r3, [sp, #20]
 80099ee:	9104      	str	r1, [sp, #16]
 80099f0:	9b04      	ldr	r3, [sp, #16]
 80099f2:	cc02      	ldmia	r4!, {r1}
 80099f4:	cb20      	ldmia	r3!, {r5}
 80099f6:	9304      	str	r3, [sp, #16]
 80099f8:	b2ab      	uxth	r3, r5
 80099fa:	19df      	adds	r7, r3, r7
 80099fc:	b28b      	uxth	r3, r1
 80099fe:	1afb      	subs	r3, r7, r3
 8009a00:	0c09      	lsrs	r1, r1, #16
 8009a02:	0c2d      	lsrs	r5, r5, #16
 8009a04:	1a6d      	subs	r5, r5, r1
 8009a06:	1419      	asrs	r1, r3, #16
 8009a08:	1869      	adds	r1, r5, r1
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	140f      	asrs	r7, r1, #16
 8009a0e:	0409      	lsls	r1, r1, #16
 8009a10:	4319      	orrs	r1, r3
 8009a12:	4663      	mov	r3, ip
 8009a14:	c302      	stmia	r3!, {r1}
 8009a16:	469c      	mov	ip, r3
 8009a18:	9b03      	ldr	r3, [sp, #12]
 8009a1a:	42a3      	cmp	r3, r4
 8009a1c:	d8e8      	bhi.n	80099f0 <__mdiff+0x88>
 8009a1e:	0031      	movs	r1, r6
 8009a20:	9c03      	ldr	r4, [sp, #12]
 8009a22:	3115      	adds	r1, #21
 8009a24:	2304      	movs	r3, #4
 8009a26:	428c      	cmp	r4, r1
 8009a28:	d304      	bcc.n	8009a34 <__mdiff+0xcc>
 8009a2a:	1ba3      	subs	r3, r4, r6
 8009a2c:	3b15      	subs	r3, #21
 8009a2e:	089b      	lsrs	r3, r3, #2
 8009a30:	3301      	adds	r3, #1
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	9901      	ldr	r1, [sp, #4]
 8009a36:	18cd      	adds	r5, r1, r3
 8009a38:	9905      	ldr	r1, [sp, #20]
 8009a3a:	002e      	movs	r6, r5
 8009a3c:	18cb      	adds	r3, r1, r3
 8009a3e:	469c      	mov	ip, r3
 8009a40:	9902      	ldr	r1, [sp, #8]
 8009a42:	428e      	cmp	r6, r1
 8009a44:	d310      	bcc.n	8009a68 <__mdiff+0x100>
 8009a46:	9e02      	ldr	r6, [sp, #8]
 8009a48:	1ee9      	subs	r1, r5, #3
 8009a4a:	2400      	movs	r4, #0
 8009a4c:	428e      	cmp	r6, r1
 8009a4e:	d304      	bcc.n	8009a5a <__mdiff+0xf2>
 8009a50:	0031      	movs	r1, r6
 8009a52:	3103      	adds	r1, #3
 8009a54:	1b49      	subs	r1, r1, r5
 8009a56:	0889      	lsrs	r1, r1, #2
 8009a58:	008c      	lsls	r4, r1, #2
 8009a5a:	191b      	adds	r3, r3, r4
 8009a5c:	3b04      	subs	r3, #4
 8009a5e:	6819      	ldr	r1, [r3, #0]
 8009a60:	2900      	cmp	r1, #0
 8009a62:	d00f      	beq.n	8009a84 <__mdiff+0x11c>
 8009a64:	6110      	str	r0, [r2, #16]
 8009a66:	e798      	b.n	800999a <__mdiff+0x32>
 8009a68:	ce02      	ldmia	r6!, {r1}
 8009a6a:	b28c      	uxth	r4, r1
 8009a6c:	19e4      	adds	r4, r4, r7
 8009a6e:	0c0f      	lsrs	r7, r1, #16
 8009a70:	1421      	asrs	r1, r4, #16
 8009a72:	1879      	adds	r1, r7, r1
 8009a74:	b2a4      	uxth	r4, r4
 8009a76:	140f      	asrs	r7, r1, #16
 8009a78:	0409      	lsls	r1, r1, #16
 8009a7a:	4321      	orrs	r1, r4
 8009a7c:	4664      	mov	r4, ip
 8009a7e:	c402      	stmia	r4!, {r1}
 8009a80:	46a4      	mov	ip, r4
 8009a82:	e7dd      	b.n	8009a40 <__mdiff+0xd8>
 8009a84:	3801      	subs	r0, #1
 8009a86:	e7e9      	b.n	8009a5c <__mdiff+0xf4>
 8009a88:	0800f7e1 	.word	0x0800f7e1
 8009a8c:	0800f852 	.word	0x0800f852
 8009a90:	00000237 	.word	0x00000237
 8009a94:	00000245 	.word	0x00000245

08009a98 <__ulp>:
 8009a98:	2000      	movs	r0, #0
 8009a9a:	4b0b      	ldr	r3, [pc, #44]	; (8009ac8 <__ulp+0x30>)
 8009a9c:	4019      	ands	r1, r3
 8009a9e:	4b0b      	ldr	r3, [pc, #44]	; (8009acc <__ulp+0x34>)
 8009aa0:	18c9      	adds	r1, r1, r3
 8009aa2:	4281      	cmp	r1, r0
 8009aa4:	dc06      	bgt.n	8009ab4 <__ulp+0x1c>
 8009aa6:	4249      	negs	r1, r1
 8009aa8:	150b      	asrs	r3, r1, #20
 8009aaa:	2b13      	cmp	r3, #19
 8009aac:	dc03      	bgt.n	8009ab6 <__ulp+0x1e>
 8009aae:	2180      	movs	r1, #128	; 0x80
 8009ab0:	0309      	lsls	r1, r1, #12
 8009ab2:	4119      	asrs	r1, r3
 8009ab4:	4770      	bx	lr
 8009ab6:	3b14      	subs	r3, #20
 8009ab8:	2001      	movs	r0, #1
 8009aba:	2b1e      	cmp	r3, #30
 8009abc:	dc02      	bgt.n	8009ac4 <__ulp+0x2c>
 8009abe:	2080      	movs	r0, #128	; 0x80
 8009ac0:	0600      	lsls	r0, r0, #24
 8009ac2:	40d8      	lsrs	r0, r3
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	e7f5      	b.n	8009ab4 <__ulp+0x1c>
 8009ac8:	7ff00000 	.word	0x7ff00000
 8009acc:	fcc00000 	.word	0xfcc00000

08009ad0 <__b2d>:
 8009ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ad2:	0006      	movs	r6, r0
 8009ad4:	6903      	ldr	r3, [r0, #16]
 8009ad6:	3614      	adds	r6, #20
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	18f3      	adds	r3, r6, r3
 8009adc:	1f1d      	subs	r5, r3, #4
 8009ade:	682c      	ldr	r4, [r5, #0]
 8009ae0:	000f      	movs	r7, r1
 8009ae2:	0020      	movs	r0, r4
 8009ae4:	9301      	str	r3, [sp, #4]
 8009ae6:	f7ff fd63 	bl	80095b0 <__hi0bits>
 8009aea:	2220      	movs	r2, #32
 8009aec:	1a12      	subs	r2, r2, r0
 8009aee:	603a      	str	r2, [r7, #0]
 8009af0:	0003      	movs	r3, r0
 8009af2:	4a1c      	ldr	r2, [pc, #112]	; (8009b64 <__b2d+0x94>)
 8009af4:	280a      	cmp	r0, #10
 8009af6:	dc15      	bgt.n	8009b24 <__b2d+0x54>
 8009af8:	210b      	movs	r1, #11
 8009afa:	0027      	movs	r7, r4
 8009afc:	1a09      	subs	r1, r1, r0
 8009afe:	40cf      	lsrs	r7, r1
 8009b00:	433a      	orrs	r2, r7
 8009b02:	468c      	mov	ip, r1
 8009b04:	0011      	movs	r1, r2
 8009b06:	2200      	movs	r2, #0
 8009b08:	42ae      	cmp	r6, r5
 8009b0a:	d202      	bcs.n	8009b12 <__b2d+0x42>
 8009b0c:	9a01      	ldr	r2, [sp, #4]
 8009b0e:	3a08      	subs	r2, #8
 8009b10:	6812      	ldr	r2, [r2, #0]
 8009b12:	3315      	adds	r3, #21
 8009b14:	409c      	lsls	r4, r3
 8009b16:	4663      	mov	r3, ip
 8009b18:	0027      	movs	r7, r4
 8009b1a:	40da      	lsrs	r2, r3
 8009b1c:	4317      	orrs	r7, r2
 8009b1e:	0038      	movs	r0, r7
 8009b20:	b003      	add	sp, #12
 8009b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b24:	2700      	movs	r7, #0
 8009b26:	42ae      	cmp	r6, r5
 8009b28:	d202      	bcs.n	8009b30 <__b2d+0x60>
 8009b2a:	9d01      	ldr	r5, [sp, #4]
 8009b2c:	3d08      	subs	r5, #8
 8009b2e:	682f      	ldr	r7, [r5, #0]
 8009b30:	210b      	movs	r1, #11
 8009b32:	4249      	negs	r1, r1
 8009b34:	468c      	mov	ip, r1
 8009b36:	449c      	add	ip, r3
 8009b38:	2b0b      	cmp	r3, #11
 8009b3a:	d010      	beq.n	8009b5e <__b2d+0x8e>
 8009b3c:	4661      	mov	r1, ip
 8009b3e:	2320      	movs	r3, #32
 8009b40:	408c      	lsls	r4, r1
 8009b42:	1a5b      	subs	r3, r3, r1
 8009b44:	0039      	movs	r1, r7
 8009b46:	40d9      	lsrs	r1, r3
 8009b48:	430c      	orrs	r4, r1
 8009b4a:	4322      	orrs	r2, r4
 8009b4c:	0011      	movs	r1, r2
 8009b4e:	2200      	movs	r2, #0
 8009b50:	42b5      	cmp	r5, r6
 8009b52:	d901      	bls.n	8009b58 <__b2d+0x88>
 8009b54:	3d04      	subs	r5, #4
 8009b56:	682a      	ldr	r2, [r5, #0]
 8009b58:	4664      	mov	r4, ip
 8009b5a:	40a7      	lsls	r7, r4
 8009b5c:	e7dd      	b.n	8009b1a <__b2d+0x4a>
 8009b5e:	4322      	orrs	r2, r4
 8009b60:	0011      	movs	r1, r2
 8009b62:	e7dc      	b.n	8009b1e <__b2d+0x4e>
 8009b64:	3ff00000 	.word	0x3ff00000

08009b68 <__d2b>:
 8009b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	0014      	movs	r4, r2
 8009b6e:	001d      	movs	r5, r3
 8009b70:	9f08      	ldr	r7, [sp, #32]
 8009b72:	f7ff fc5b 	bl	800942c <_Balloc>
 8009b76:	1e06      	subs	r6, r0, #0
 8009b78:	d105      	bne.n	8009b86 <__d2b+0x1e>
 8009b7a:	0032      	movs	r2, r6
 8009b7c:	4b24      	ldr	r3, [pc, #144]	; (8009c10 <__d2b+0xa8>)
 8009b7e:	4825      	ldr	r0, [pc, #148]	; (8009c14 <__d2b+0xac>)
 8009b80:	4925      	ldr	r1, [pc, #148]	; (8009c18 <__d2b+0xb0>)
 8009b82:	f002 ff17 	bl	800c9b4 <__assert_func>
 8009b86:	032b      	lsls	r3, r5, #12
 8009b88:	006d      	lsls	r5, r5, #1
 8009b8a:	0b1b      	lsrs	r3, r3, #12
 8009b8c:	0d6d      	lsrs	r5, r5, #21
 8009b8e:	d125      	bne.n	8009bdc <__d2b+0x74>
 8009b90:	9301      	str	r3, [sp, #4]
 8009b92:	2c00      	cmp	r4, #0
 8009b94:	d028      	beq.n	8009be8 <__d2b+0x80>
 8009b96:	4668      	mov	r0, sp
 8009b98:	9400      	str	r4, [sp, #0]
 8009b9a:	f7ff fd23 	bl	80095e4 <__lo0bits>
 8009b9e:	9b01      	ldr	r3, [sp, #4]
 8009ba0:	9900      	ldr	r1, [sp, #0]
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	d01e      	beq.n	8009be4 <__d2b+0x7c>
 8009ba6:	2220      	movs	r2, #32
 8009ba8:	001c      	movs	r4, r3
 8009baa:	1a12      	subs	r2, r2, r0
 8009bac:	4094      	lsls	r4, r2
 8009bae:	0022      	movs	r2, r4
 8009bb0:	40c3      	lsrs	r3, r0
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	6172      	str	r2, [r6, #20]
 8009bb6:	9301      	str	r3, [sp, #4]
 8009bb8:	9c01      	ldr	r4, [sp, #4]
 8009bba:	61b4      	str	r4, [r6, #24]
 8009bbc:	1e63      	subs	r3, r4, #1
 8009bbe:	419c      	sbcs	r4, r3
 8009bc0:	3401      	adds	r4, #1
 8009bc2:	6134      	str	r4, [r6, #16]
 8009bc4:	2d00      	cmp	r5, #0
 8009bc6:	d017      	beq.n	8009bf8 <__d2b+0x90>
 8009bc8:	2435      	movs	r4, #53	; 0x35
 8009bca:	4b14      	ldr	r3, [pc, #80]	; (8009c1c <__d2b+0xb4>)
 8009bcc:	18ed      	adds	r5, r5, r3
 8009bce:	182d      	adds	r5, r5, r0
 8009bd0:	603d      	str	r5, [r7, #0]
 8009bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd4:	1a24      	subs	r4, r4, r0
 8009bd6:	601c      	str	r4, [r3, #0]
 8009bd8:	0030      	movs	r0, r6
 8009bda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009bdc:	2280      	movs	r2, #128	; 0x80
 8009bde:	0352      	lsls	r2, r2, #13
 8009be0:	4313      	orrs	r3, r2
 8009be2:	e7d5      	b.n	8009b90 <__d2b+0x28>
 8009be4:	6171      	str	r1, [r6, #20]
 8009be6:	e7e7      	b.n	8009bb8 <__d2b+0x50>
 8009be8:	a801      	add	r0, sp, #4
 8009bea:	f7ff fcfb 	bl	80095e4 <__lo0bits>
 8009bee:	9b01      	ldr	r3, [sp, #4]
 8009bf0:	2401      	movs	r4, #1
 8009bf2:	6173      	str	r3, [r6, #20]
 8009bf4:	3020      	adds	r0, #32
 8009bf6:	e7e4      	b.n	8009bc2 <__d2b+0x5a>
 8009bf8:	4b09      	ldr	r3, [pc, #36]	; (8009c20 <__d2b+0xb8>)
 8009bfa:	18c0      	adds	r0, r0, r3
 8009bfc:	4b09      	ldr	r3, [pc, #36]	; (8009c24 <__d2b+0xbc>)
 8009bfe:	6038      	str	r0, [r7, #0]
 8009c00:	18e3      	adds	r3, r4, r3
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	18f3      	adds	r3, r6, r3
 8009c06:	6958      	ldr	r0, [r3, #20]
 8009c08:	f7ff fcd2 	bl	80095b0 <__hi0bits>
 8009c0c:	0164      	lsls	r4, r4, #5
 8009c0e:	e7e0      	b.n	8009bd2 <__d2b+0x6a>
 8009c10:	0800f7e1 	.word	0x0800f7e1
 8009c14:	0800f852 	.word	0x0800f852
 8009c18:	0000030f 	.word	0x0000030f
 8009c1c:	fffffbcd 	.word	0xfffffbcd
 8009c20:	fffffbce 	.word	0xfffffbce
 8009c24:	3fffffff 	.word	0x3fffffff

08009c28 <__ratio>:
 8009c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	000f      	movs	r7, r1
 8009c2e:	a904      	add	r1, sp, #16
 8009c30:	0006      	movs	r6, r0
 8009c32:	f7ff ff4d 	bl	8009ad0 <__b2d>
 8009c36:	9000      	str	r0, [sp, #0]
 8009c38:	9101      	str	r1, [sp, #4]
 8009c3a:	9c00      	ldr	r4, [sp, #0]
 8009c3c:	9d01      	ldr	r5, [sp, #4]
 8009c3e:	0038      	movs	r0, r7
 8009c40:	a905      	add	r1, sp, #20
 8009c42:	f7ff ff45 	bl	8009ad0 <__b2d>
 8009c46:	9002      	str	r0, [sp, #8]
 8009c48:	9103      	str	r1, [sp, #12]
 8009c4a:	9a02      	ldr	r2, [sp, #8]
 8009c4c:	9b03      	ldr	r3, [sp, #12]
 8009c4e:	6930      	ldr	r0, [r6, #16]
 8009c50:	6939      	ldr	r1, [r7, #16]
 8009c52:	9e04      	ldr	r6, [sp, #16]
 8009c54:	1a40      	subs	r0, r0, r1
 8009c56:	9905      	ldr	r1, [sp, #20]
 8009c58:	0140      	lsls	r0, r0, #5
 8009c5a:	1a71      	subs	r1, r6, r1
 8009c5c:	1841      	adds	r1, r0, r1
 8009c5e:	0508      	lsls	r0, r1, #20
 8009c60:	2900      	cmp	r1, #0
 8009c62:	dd07      	ble.n	8009c74 <__ratio+0x4c>
 8009c64:	9901      	ldr	r1, [sp, #4]
 8009c66:	1845      	adds	r5, r0, r1
 8009c68:	0020      	movs	r0, r4
 8009c6a:	0029      	movs	r1, r5
 8009c6c:	f7f7 f904 	bl	8000e78 <__aeabi_ddiv>
 8009c70:	b007      	add	sp, #28
 8009c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c74:	9903      	ldr	r1, [sp, #12]
 8009c76:	1a0b      	subs	r3, r1, r0
 8009c78:	e7f6      	b.n	8009c68 <__ratio+0x40>

08009c7a <__copybits>:
 8009c7a:	b570      	push	{r4, r5, r6, lr}
 8009c7c:	0014      	movs	r4, r2
 8009c7e:	0005      	movs	r5, r0
 8009c80:	3901      	subs	r1, #1
 8009c82:	6913      	ldr	r3, [r2, #16]
 8009c84:	1149      	asrs	r1, r1, #5
 8009c86:	3101      	adds	r1, #1
 8009c88:	0089      	lsls	r1, r1, #2
 8009c8a:	3414      	adds	r4, #20
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	1841      	adds	r1, r0, r1
 8009c90:	18e3      	adds	r3, r4, r3
 8009c92:	42a3      	cmp	r3, r4
 8009c94:	d80d      	bhi.n	8009cb2 <__copybits+0x38>
 8009c96:	0014      	movs	r4, r2
 8009c98:	3411      	adds	r4, #17
 8009c9a:	2500      	movs	r5, #0
 8009c9c:	429c      	cmp	r4, r3
 8009c9e:	d803      	bhi.n	8009ca8 <__copybits+0x2e>
 8009ca0:	1a9b      	subs	r3, r3, r2
 8009ca2:	3b11      	subs	r3, #17
 8009ca4:	089b      	lsrs	r3, r3, #2
 8009ca6:	009d      	lsls	r5, r3, #2
 8009ca8:	2300      	movs	r3, #0
 8009caa:	1940      	adds	r0, r0, r5
 8009cac:	4281      	cmp	r1, r0
 8009cae:	d803      	bhi.n	8009cb8 <__copybits+0x3e>
 8009cb0:	bd70      	pop	{r4, r5, r6, pc}
 8009cb2:	cc40      	ldmia	r4!, {r6}
 8009cb4:	c540      	stmia	r5!, {r6}
 8009cb6:	e7ec      	b.n	8009c92 <__copybits+0x18>
 8009cb8:	c008      	stmia	r0!, {r3}
 8009cba:	e7f7      	b.n	8009cac <__copybits+0x32>

08009cbc <__any_on>:
 8009cbc:	0002      	movs	r2, r0
 8009cbe:	6900      	ldr	r0, [r0, #16]
 8009cc0:	b510      	push	{r4, lr}
 8009cc2:	3214      	adds	r2, #20
 8009cc4:	114b      	asrs	r3, r1, #5
 8009cc6:	4298      	cmp	r0, r3
 8009cc8:	db13      	blt.n	8009cf2 <__any_on+0x36>
 8009cca:	dd0c      	ble.n	8009ce6 <__any_on+0x2a>
 8009ccc:	241f      	movs	r4, #31
 8009cce:	0008      	movs	r0, r1
 8009cd0:	4020      	ands	r0, r4
 8009cd2:	4221      	tst	r1, r4
 8009cd4:	d007      	beq.n	8009ce6 <__any_on+0x2a>
 8009cd6:	0099      	lsls	r1, r3, #2
 8009cd8:	588c      	ldr	r4, [r1, r2]
 8009cda:	0021      	movs	r1, r4
 8009cdc:	40c1      	lsrs	r1, r0
 8009cde:	4081      	lsls	r1, r0
 8009ce0:	2001      	movs	r0, #1
 8009ce2:	428c      	cmp	r4, r1
 8009ce4:	d104      	bne.n	8009cf0 <__any_on+0x34>
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	18d3      	adds	r3, r2, r3
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d803      	bhi.n	8009cf6 <__any_on+0x3a>
 8009cee:	2000      	movs	r0, #0
 8009cf0:	bd10      	pop	{r4, pc}
 8009cf2:	0003      	movs	r3, r0
 8009cf4:	e7f7      	b.n	8009ce6 <__any_on+0x2a>
 8009cf6:	3b04      	subs	r3, #4
 8009cf8:	6819      	ldr	r1, [r3, #0]
 8009cfa:	2900      	cmp	r1, #0
 8009cfc:	d0f5      	beq.n	8009cea <__any_on+0x2e>
 8009cfe:	2001      	movs	r0, #1
 8009d00:	e7f6      	b.n	8009cf0 <__any_on+0x34>

08009d02 <__ascii_wctomb>:
 8009d02:	0003      	movs	r3, r0
 8009d04:	1e08      	subs	r0, r1, #0
 8009d06:	d005      	beq.n	8009d14 <__ascii_wctomb+0x12>
 8009d08:	2aff      	cmp	r2, #255	; 0xff
 8009d0a:	d904      	bls.n	8009d16 <__ascii_wctomb+0x14>
 8009d0c:	228a      	movs	r2, #138	; 0x8a
 8009d0e:	2001      	movs	r0, #1
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	4240      	negs	r0, r0
 8009d14:	4770      	bx	lr
 8009d16:	2001      	movs	r0, #1
 8009d18:	700a      	strb	r2, [r1, #0]
 8009d1a:	e7fb      	b.n	8009d14 <__ascii_wctomb+0x12>

08009d1c <_svfprintf_r>:
 8009d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d1e:	b0d9      	sub	sp, #356	; 0x164
 8009d20:	001c      	movs	r4, r3
 8009d22:	910b      	str	r1, [sp, #44]	; 0x2c
 8009d24:	9208      	str	r2, [sp, #32]
 8009d26:	900a      	str	r0, [sp, #40]	; 0x28
 8009d28:	f002 fdae 	bl	800c888 <_localeconv_r>
 8009d2c:	6803      	ldr	r3, [r0, #0]
 8009d2e:	0018      	movs	r0, r3
 8009d30:	931c      	str	r3, [sp, #112]	; 0x70
 8009d32:	f7f6 f9e7 	bl	8000104 <strlen>
 8009d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d38:	9016      	str	r0, [sp, #88]	; 0x58
 8009d3a:	899b      	ldrh	r3, [r3, #12]
 8009d3c:	061b      	lsls	r3, r3, #24
 8009d3e:	d517      	bpl.n	8009d70 <_svfprintf_r+0x54>
 8009d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d113      	bne.n	8009d70 <_svfprintf_r+0x54>
 8009d48:	2140      	movs	r1, #64	; 0x40
 8009d4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d4c:	f7fd fbc6 	bl	80074dc <_malloc_r>
 8009d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d52:	6018      	str	r0, [r3, #0]
 8009d54:	6118      	str	r0, [r3, #16]
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d107      	bne.n	8009d6a <_svfprintf_r+0x4e>
 8009d5a:	230c      	movs	r3, #12
 8009d5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d5e:	6013      	str	r3, [r2, #0]
 8009d60:	3b0d      	subs	r3, #13
 8009d62:	9317      	str	r3, [sp, #92]	; 0x5c
 8009d64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009d66:	b059      	add	sp, #356	; 0x164
 8009d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d6a:	2340      	movs	r3, #64	; 0x40
 8009d6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d6e:	6153      	str	r3, [r2, #20]
 8009d70:	2300      	movs	r3, #0
 8009d72:	2200      	movs	r2, #0
 8009d74:	932e      	str	r3, [sp, #184]	; 0xb8
 8009d76:	932d      	str	r3, [sp, #180]	; 0xb4
 8009d78:	930e      	str	r3, [sp, #56]	; 0x38
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	9214      	str	r2, [sp, #80]	; 0x50
 8009d7e:	9315      	str	r3, [sp, #84]	; 0x54
 8009d80:	2300      	movs	r3, #0
 8009d82:	af2f      	add	r7, sp, #188	; 0xbc
 8009d84:	972c      	str	r7, [sp, #176]	; 0xb0
 8009d86:	931f      	str	r3, [sp, #124]	; 0x7c
 8009d88:	931e      	str	r3, [sp, #120]	; 0x78
 8009d8a:	9312      	str	r3, [sp, #72]	; 0x48
 8009d8c:	931b      	str	r3, [sp, #108]	; 0x6c
 8009d8e:	931d      	str	r3, [sp, #116]	; 0x74
 8009d90:	9317      	str	r3, [sp, #92]	; 0x5c
 8009d92:	9d08      	ldr	r5, [sp, #32]
 8009d94:	782b      	ldrb	r3, [r5, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d002      	beq.n	8009da0 <_svfprintf_r+0x84>
 8009d9a:	2b25      	cmp	r3, #37	; 0x25
 8009d9c:	d000      	beq.n	8009da0 <_svfprintf_r+0x84>
 8009d9e:	e091      	b.n	8009ec4 <_svfprintf_r+0x1a8>
 8009da0:	9b08      	ldr	r3, [sp, #32]
 8009da2:	1aee      	subs	r6, r5, r3
 8009da4:	429d      	cmp	r5, r3
 8009da6:	d016      	beq.n	8009dd6 <_svfprintf_r+0xba>
 8009da8:	603b      	str	r3, [r7, #0]
 8009daa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009dac:	607e      	str	r6, [r7, #4]
 8009dae:	199b      	adds	r3, r3, r6
 8009db0:	932e      	str	r3, [sp, #184]	; 0xb8
 8009db2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009db4:	3708      	adds	r7, #8
 8009db6:	3301      	adds	r3, #1
 8009db8:	932d      	str	r3, [sp, #180]	; 0xb4
 8009dba:	2b07      	cmp	r3, #7
 8009dbc:	dd08      	ble.n	8009dd0 <_svfprintf_r+0xb4>
 8009dbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dc0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009dc2:	aa2c      	add	r2, sp, #176	; 0xb0
 8009dc4:	f004 f8c0 	bl	800df48 <__ssprint_r>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d000      	beq.n	8009dce <_svfprintf_r+0xb2>
 8009dcc:	e1cf      	b.n	800a16e <_svfprintf_r+0x452>
 8009dce:	af2f      	add	r7, sp, #188	; 0xbc
 8009dd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dd2:	199b      	adds	r3, r3, r6
 8009dd4:	9317      	str	r3, [sp, #92]	; 0x5c
 8009dd6:	782b      	ldrb	r3, [r5, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <_svfprintf_r+0xc4>
 8009ddc:	f001 f99e 	bl	800b11c <_svfprintf_r+0x1400>
 8009de0:	221b      	movs	r2, #27
 8009de2:	2300      	movs	r3, #0
 8009de4:	a91e      	add	r1, sp, #120	; 0x78
 8009de6:	1852      	adds	r2, r2, r1
 8009de8:	7013      	strb	r3, [r2, #0]
 8009dea:	2201      	movs	r2, #1
 8009dec:	001e      	movs	r6, r3
 8009dee:	4252      	negs	r2, r2
 8009df0:	3501      	adds	r5, #1
 8009df2:	9209      	str	r2, [sp, #36]	; 0x24
 8009df4:	9318      	str	r3, [sp, #96]	; 0x60
 8009df6:	1c6b      	adds	r3, r5, #1
 8009df8:	9313      	str	r3, [sp, #76]	; 0x4c
 8009dfa:	782b      	ldrb	r3, [r5, #0]
 8009dfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dfe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009e00:	3820      	subs	r0, #32
 8009e02:	285a      	cmp	r0, #90	; 0x5a
 8009e04:	d901      	bls.n	8009e0a <_svfprintf_r+0xee>
 8009e06:	f000 fe20 	bl	800aa4a <_svfprintf_r+0xd2e>
 8009e0a:	f7f6 f98d 	bl	8000128 <__gnu_thumb1_case_uhi>
 8009e0e:	0078      	.short	0x0078
 8009e10:	061e061e 	.word	0x061e061e
 8009e14:	061e0082 	.word	0x061e0082
 8009e18:	061e061e 	.word	0x061e061e
 8009e1c:	061e005d 	.word	0x061e005d
 8009e20:	0084061e 	.word	0x0084061e
 8009e24:	061e008c 	.word	0x061e008c
 8009e28:	0091008a 	.word	0x0091008a
 8009e2c:	00b2061e 	.word	0x00b2061e
 8009e30:	00b400b4 	.word	0x00b400b4
 8009e34:	00b400b4 	.word	0x00b400b4
 8009e38:	00b400b4 	.word	0x00b400b4
 8009e3c:	00b400b4 	.word	0x00b400b4
 8009e40:	061e00b4 	.word	0x061e00b4
 8009e44:	061e061e 	.word	0x061e061e
 8009e48:	061e061e 	.word	0x061e061e
 8009e4c:	061e061e 	.word	0x061e061e
 8009e50:	061e013b 	.word	0x061e013b
 8009e54:	00f400e0 	.word	0x00f400e0
 8009e58:	013b013b 	.word	0x013b013b
 8009e5c:	061e013b 	.word	0x061e013b
 8009e60:	061e061e 	.word	0x061e061e
 8009e64:	00c7061e 	.word	0x00c7061e
 8009e68:	061e061e 	.word	0x061e061e
 8009e6c:	061e04c7 	.word	0x061e04c7
 8009e70:	061e061e 	.word	0x061e061e
 8009e74:	061e050a 	.word	0x061e050a
 8009e78:	061e052a 	.word	0x061e052a
 8009e7c:	055c061e 	.word	0x055c061e
 8009e80:	061e061e 	.word	0x061e061e
 8009e84:	061e061e 	.word	0x061e061e
 8009e88:	061e061e 	.word	0x061e061e
 8009e8c:	061e061e 	.word	0x061e061e
 8009e90:	061e013b 	.word	0x061e013b
 8009e94:	00f600e0 	.word	0x00f600e0
 8009e98:	013b013b 	.word	0x013b013b
 8009e9c:	00c9013b 	.word	0x00c9013b
 8009ea0:	00dc00f6 	.word	0x00dc00f6
 8009ea4:	00d5061e 	.word	0x00d5061e
 8009ea8:	04a7061e 	.word	0x04a7061e
 8009eac:	04fa04c9 	.word	0x04fa04c9
 8009eb0:	061e00dc 	.word	0x061e00dc
 8009eb4:	0080050a 	.word	0x0080050a
 8009eb8:	061e052c 	.word	0x061e052c
 8009ebc:	057c061e 	.word	0x057c061e
 8009ec0:	0080061e 	.word	0x0080061e
 8009ec4:	3501      	adds	r5, #1
 8009ec6:	e765      	b.n	8009d94 <_svfprintf_r+0x78>
 8009ec8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009eca:	f002 fcdd 	bl	800c888 <_localeconv_r>
 8009ece:	6843      	ldr	r3, [r0, #4]
 8009ed0:	0018      	movs	r0, r3
 8009ed2:	931d      	str	r3, [sp, #116]	; 0x74
 8009ed4:	f7f6 f916 	bl	8000104 <strlen>
 8009ed8:	901b      	str	r0, [sp, #108]	; 0x6c
 8009eda:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009edc:	f002 fcd4 	bl	800c888 <_localeconv_r>
 8009ee0:	6883      	ldr	r3, [r0, #8]
 8009ee2:	9312      	str	r3, [sp, #72]	; 0x48
 8009ee4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d011      	beq.n	8009f0e <_svfprintf_r+0x1f2>
 8009eea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00e      	beq.n	8009f0e <_svfprintf_r+0x1f2>
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00b      	beq.n	8009f0e <_svfprintf_r+0x1f2>
 8009ef6:	2380      	movs	r3, #128	; 0x80
 8009ef8:	00db      	lsls	r3, r3, #3
 8009efa:	431e      	orrs	r6, r3
 8009efc:	e007      	b.n	8009f0e <_svfprintf_r+0x1f2>
 8009efe:	231b      	movs	r3, #27
 8009f00:	aa1e      	add	r2, sp, #120	; 0x78
 8009f02:	189b      	adds	r3, r3, r2
 8009f04:	781a      	ldrb	r2, [r3, #0]
 8009f06:	2a00      	cmp	r2, #0
 8009f08:	d101      	bne.n	8009f0e <_svfprintf_r+0x1f2>
 8009f0a:	3220      	adds	r2, #32
 8009f0c:	701a      	strb	r2, [r3, #0]
 8009f0e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8009f10:	e771      	b.n	8009df6 <_svfprintf_r+0xda>
 8009f12:	2301      	movs	r3, #1
 8009f14:	e7f1      	b.n	8009efa <_svfprintf_r+0x1de>
 8009f16:	cc08      	ldmia	r4!, {r3}
 8009f18:	9318      	str	r3, [sp, #96]	; 0x60
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	daf7      	bge.n	8009f0e <_svfprintf_r+0x1f2>
 8009f1e:	425b      	negs	r3, r3
 8009f20:	9318      	str	r3, [sp, #96]	; 0x60
 8009f22:	2304      	movs	r3, #4
 8009f24:	e7e9      	b.n	8009efa <_svfprintf_r+0x1de>
 8009f26:	231b      	movs	r3, #27
 8009f28:	aa1e      	add	r2, sp, #120	; 0x78
 8009f2a:	189b      	adds	r3, r3, r2
 8009f2c:	222b      	movs	r2, #43	; 0x2b
 8009f2e:	e7ed      	b.n	8009f0c <_svfprintf_r+0x1f0>
 8009f30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f34:	7812      	ldrb	r2, [r2, #0]
 8009f36:	3301      	adds	r3, #1
 8009f38:	920f      	str	r2, [sp, #60]	; 0x3c
 8009f3a:	2a2a      	cmp	r2, #42	; 0x2a
 8009f3c:	d010      	beq.n	8009f60 <_svfprintf_r+0x244>
 8009f3e:	2200      	movs	r2, #0
 8009f40:	9209      	str	r2, [sp, #36]	; 0x24
 8009f42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f44:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f46:	3a30      	subs	r2, #48	; 0x30
 8009f48:	2a09      	cmp	r2, #9
 8009f4a:	d900      	bls.n	8009f4e <_svfprintf_r+0x232>
 8009f4c:	e757      	b.n	8009dfe <_svfprintf_r+0xe2>
 8009f4e:	200a      	movs	r0, #10
 8009f50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f52:	4341      	muls	r1, r0
 8009f54:	188a      	adds	r2, r1, r2
 8009f56:	9209      	str	r2, [sp, #36]	; 0x24
 8009f58:	781a      	ldrb	r2, [r3, #0]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	920f      	str	r2, [sp, #60]	; 0x3c
 8009f5e:	e7f0      	b.n	8009f42 <_svfprintf_r+0x226>
 8009f60:	cc04      	ldmia	r4!, {r2}
 8009f62:	9209      	str	r2, [sp, #36]	; 0x24
 8009f64:	2a00      	cmp	r2, #0
 8009f66:	da02      	bge.n	8009f6e <_svfprintf_r+0x252>
 8009f68:	2201      	movs	r2, #1
 8009f6a:	4252      	negs	r2, r2
 8009f6c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f70:	e7cd      	b.n	8009f0e <_svfprintf_r+0x1f2>
 8009f72:	2380      	movs	r3, #128	; 0x80
 8009f74:	e7c1      	b.n	8009efa <_svfprintf_r+0x1de>
 8009f76:	2200      	movs	r2, #0
 8009f78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f7a:	9218      	str	r2, [sp, #96]	; 0x60
 8009f7c:	210a      	movs	r1, #10
 8009f7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009f80:	434a      	muls	r2, r1
 8009f82:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009f84:	3930      	subs	r1, #48	; 0x30
 8009f86:	188a      	adds	r2, r1, r2
 8009f88:	9218      	str	r2, [sp, #96]	; 0x60
 8009f8a:	001a      	movs	r2, r3
 8009f8c:	7812      	ldrb	r2, [r2, #0]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	920f      	str	r2, [sp, #60]	; 0x3c
 8009f92:	3a30      	subs	r2, #48	; 0x30
 8009f94:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f96:	2a09      	cmp	r2, #9
 8009f98:	d9f0      	bls.n	8009f7c <_svfprintf_r+0x260>
 8009f9a:	e730      	b.n	8009dfe <_svfprintf_r+0xe2>
 8009f9c:	2308      	movs	r3, #8
 8009f9e:	e7ac      	b.n	8009efa <_svfprintf_r+0x1de>
 8009fa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	2b68      	cmp	r3, #104	; 0x68
 8009fa6:	d105      	bne.n	8009fb4 <_svfprintf_r+0x298>
 8009fa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009faa:	3301      	adds	r3, #1
 8009fac:	9313      	str	r3, [sp, #76]	; 0x4c
 8009fae:	2380      	movs	r3, #128	; 0x80
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	e7a2      	b.n	8009efa <_svfprintf_r+0x1de>
 8009fb4:	2340      	movs	r3, #64	; 0x40
 8009fb6:	e7a0      	b.n	8009efa <_svfprintf_r+0x1de>
 8009fb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	2b6c      	cmp	r3, #108	; 0x6c
 8009fbe:	d104      	bne.n	8009fca <_svfprintf_r+0x2ae>
 8009fc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8009fc6:	2320      	movs	r3, #32
 8009fc8:	e797      	b.n	8009efa <_svfprintf_r+0x1de>
 8009fca:	2310      	movs	r3, #16
 8009fcc:	e795      	b.n	8009efa <_svfprintf_r+0x1de>
 8009fce:	0021      	movs	r1, r4
 8009fd0:	c904      	ldmia	r1!, {r2}
 8009fd2:	ab3f      	add	r3, sp, #252	; 0xfc
 8009fd4:	910d      	str	r1, [sp, #52]	; 0x34
 8009fd6:	211b      	movs	r1, #27
 8009fd8:	701a      	strb	r2, [r3, #0]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	a81e      	add	r0, sp, #120	; 0x78
 8009fde:	1809      	adds	r1, r1, r0
 8009fe0:	700a      	strb	r2, [r1, #0]
 8009fe2:	920c      	str	r2, [sp, #48]	; 0x30
 8009fe4:	3201      	adds	r2, #1
 8009fe6:	9209      	str	r2, [sp, #36]	; 0x24
 8009fe8:	2200      	movs	r2, #0
 8009fea:	9308      	str	r3, [sp, #32]
 8009fec:	0015      	movs	r5, r2
 8009fee:	9219      	str	r2, [sp, #100]	; 0x64
 8009ff0:	9210      	str	r2, [sp, #64]	; 0x40
 8009ff2:	9211      	str	r2, [sp, #68]	; 0x44
 8009ff4:	e1f1      	b.n	800a3da <_svfprintf_r+0x6be>
 8009ff6:	2310      	movs	r3, #16
 8009ff8:	431e      	orrs	r6, r3
 8009ffa:	06b3      	lsls	r3, r6, #26
 8009ffc:	d531      	bpl.n	800a062 <_svfprintf_r+0x346>
 8009ffe:	2307      	movs	r3, #7
 800a000:	3407      	adds	r4, #7
 800a002:	439c      	bics	r4, r3
 800a004:	0022      	movs	r2, r4
 800a006:	ca18      	ldmia	r2!, {r3, r4}
 800a008:	9306      	str	r3, [sp, #24]
 800a00a:	9407      	str	r4, [sp, #28]
 800a00c:	920d      	str	r2, [sp, #52]	; 0x34
 800a00e:	9a07      	ldr	r2, [sp, #28]
 800a010:	2301      	movs	r3, #1
 800a012:	2a00      	cmp	r2, #0
 800a014:	da0b      	bge.n	800a02e <_svfprintf_r+0x312>
 800a016:	9c06      	ldr	r4, [sp, #24]
 800a018:	9d07      	ldr	r5, [sp, #28]
 800a01a:	2200      	movs	r2, #0
 800a01c:	4261      	negs	r1, r4
 800a01e:	41aa      	sbcs	r2, r5
 800a020:	9106      	str	r1, [sp, #24]
 800a022:	9207      	str	r2, [sp, #28]
 800a024:	221b      	movs	r2, #27
 800a026:	a91e      	add	r1, sp, #120	; 0x78
 800a028:	1852      	adds	r2, r2, r1
 800a02a:	212d      	movs	r1, #45	; 0x2d
 800a02c:	7011      	strb	r1, [r2, #0]
 800a02e:	9907      	ldr	r1, [sp, #28]
 800a030:	9a06      	ldr	r2, [sp, #24]
 800a032:	430a      	orrs	r2, r1
 800a034:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a036:	3101      	adds	r1, #1
 800a038:	d101      	bne.n	800a03e <_svfprintf_r+0x322>
 800a03a:	f001 f87b 	bl	800b134 <_svfprintf_r+0x1418>
 800a03e:	2180      	movs	r1, #128	; 0x80
 800a040:	0034      	movs	r4, r6
 800a042:	438c      	bics	r4, r1
 800a044:	2a00      	cmp	r2, #0
 800a046:	d001      	beq.n	800a04c <_svfprintf_r+0x330>
 800a048:	f001 f879 	bl	800b13e <_svfprintf_r+0x1422>
 800a04c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a04e:	2a00      	cmp	r2, #0
 800a050:	d101      	bne.n	800a056 <_svfprintf_r+0x33a>
 800a052:	f000 fcef 	bl	800aa34 <_svfprintf_r+0xd18>
 800a056:	2b01      	cmp	r3, #1
 800a058:	d001      	beq.n	800a05e <_svfprintf_r+0x342>
 800a05a:	f001 f874 	bl	800b146 <_svfprintf_r+0x142a>
 800a05e:	f000 fc79 	bl	800a954 <_svfprintf_r+0xc38>
 800a062:	0022      	movs	r2, r4
 800a064:	ca08      	ldmia	r2!, {r3}
 800a066:	920d      	str	r2, [sp, #52]	; 0x34
 800a068:	06f2      	lsls	r2, r6, #27
 800a06a:	d503      	bpl.n	800a074 <_svfprintf_r+0x358>
 800a06c:	9306      	str	r3, [sp, #24]
 800a06e:	17db      	asrs	r3, r3, #31
 800a070:	9307      	str	r3, [sp, #28]
 800a072:	e7cc      	b.n	800a00e <_svfprintf_r+0x2f2>
 800a074:	0672      	lsls	r2, r6, #25
 800a076:	d501      	bpl.n	800a07c <_svfprintf_r+0x360>
 800a078:	b21b      	sxth	r3, r3
 800a07a:	e7f7      	b.n	800a06c <_svfprintf_r+0x350>
 800a07c:	05b2      	lsls	r2, r6, #22
 800a07e:	d5f5      	bpl.n	800a06c <_svfprintf_r+0x350>
 800a080:	b25b      	sxtb	r3, r3
 800a082:	e7f3      	b.n	800a06c <_svfprintf_r+0x350>
 800a084:	2307      	movs	r3, #7
 800a086:	3407      	adds	r4, #7
 800a088:	439c      	bics	r4, r3
 800a08a:	0022      	movs	r2, r4
 800a08c:	ca18      	ldmia	r2!, {r3, r4}
 800a08e:	920d      	str	r2, [sp, #52]	; 0x34
 800a090:	2201      	movs	r2, #1
 800a092:	9314      	str	r3, [sp, #80]	; 0x50
 800a094:	9415      	str	r4, [sp, #84]	; 0x54
 800a096:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a098:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a09a:	005c      	lsls	r4, r3, #1
 800a09c:	0864      	lsrs	r4, r4, #1
 800a09e:	0028      	movs	r0, r5
 800a0a0:	0021      	movs	r1, r4
 800a0a2:	4b3e      	ldr	r3, [pc, #248]	; (800a19c <_svfprintf_r+0x480>)
 800a0a4:	4252      	negs	r2, r2
 800a0a6:	f7f8 f925 	bl	80022f4 <__aeabi_dcmpun>
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d126      	bne.n	800a0fc <_svfprintf_r+0x3e0>
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	0028      	movs	r0, r5
 800a0b2:	0021      	movs	r1, r4
 800a0b4:	4b39      	ldr	r3, [pc, #228]	; (800a19c <_svfprintf_r+0x480>)
 800a0b6:	4252      	negs	r2, r2
 800a0b8:	f7f6 f9d6 	bl	8000468 <__aeabi_dcmple>
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	d11d      	bne.n	800a0fc <_svfprintf_r+0x3e0>
 800a0c0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a0c2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	f7f6 f9c4 	bl	8000454 <__aeabi_dcmplt>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d004      	beq.n	800a0da <_svfprintf_r+0x3be>
 800a0d0:	231b      	movs	r3, #27
 800a0d2:	aa1e      	add	r2, sp, #120	; 0x78
 800a0d4:	189b      	adds	r3, r3, r2
 800a0d6:	222d      	movs	r2, #45	; 0x2d
 800a0d8:	701a      	strb	r2, [r3, #0]
 800a0da:	4b31      	ldr	r3, [pc, #196]	; (800a1a0 <_svfprintf_r+0x484>)
 800a0dc:	9308      	str	r3, [sp, #32]
 800a0de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0e0:	2b47      	cmp	r3, #71	; 0x47
 800a0e2:	dd01      	ble.n	800a0e8 <_svfprintf_r+0x3cc>
 800a0e4:	4b2f      	ldr	r3, [pc, #188]	; (800a1a4 <_svfprintf_r+0x488>)
 800a0e6:	9308      	str	r3, [sp, #32]
 800a0e8:	2380      	movs	r3, #128	; 0x80
 800a0ea:	439e      	bics	r6, r3
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a0f0:	3303      	adds	r3, #3
 800a0f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	9319      	str	r3, [sp, #100]	; 0x64
 800a0f8:	f000 fc78 	bl	800a9ec <_svfprintf_r+0xcd0>
 800a0fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a0fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a100:	0010      	movs	r0, r2
 800a102:	0019      	movs	r1, r3
 800a104:	f7f8 f8f6 	bl	80022f4 <__aeabi_dcmpun>
 800a108:	2800      	cmp	r0, #0
 800a10a:	d00e      	beq.n	800a12a <_svfprintf_r+0x40e>
 800a10c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a10e:	2b00      	cmp	r3, #0
 800a110:	da04      	bge.n	800a11c <_svfprintf_r+0x400>
 800a112:	231b      	movs	r3, #27
 800a114:	aa1e      	add	r2, sp, #120	; 0x78
 800a116:	189b      	adds	r3, r3, r2
 800a118:	222d      	movs	r2, #45	; 0x2d
 800a11a:	701a      	strb	r2, [r3, #0]
 800a11c:	4b22      	ldr	r3, [pc, #136]	; (800a1a8 <_svfprintf_r+0x48c>)
 800a11e:	9308      	str	r3, [sp, #32]
 800a120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a122:	2b47      	cmp	r3, #71	; 0x47
 800a124:	dde0      	ble.n	800a0e8 <_svfprintf_r+0x3cc>
 800a126:	4b21      	ldr	r3, [pc, #132]	; (800a1ac <_svfprintf_r+0x490>)
 800a128:	e7dd      	b.n	800a0e6 <_svfprintf_r+0x3ca>
 800a12a:	2320      	movs	r3, #32
 800a12c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a12e:	439a      	bics	r2, r3
 800a130:	9210      	str	r2, [sp, #64]	; 0x40
 800a132:	2a41      	cmp	r2, #65	; 0x41
 800a134:	d123      	bne.n	800a17e <_svfprintf_r+0x462>
 800a136:	2230      	movs	r2, #48	; 0x30
 800a138:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a13a:	ab25      	add	r3, sp, #148	; 0x94
 800a13c:	701a      	strb	r2, [r3, #0]
 800a13e:	3248      	adds	r2, #72	; 0x48
 800a140:	2961      	cmp	r1, #97	; 0x61
 800a142:	d000      	beq.n	800a146 <_svfprintf_r+0x42a>
 800a144:	3a20      	subs	r2, #32
 800a146:	705a      	strb	r2, [r3, #1]
 800a148:	2302      	movs	r3, #2
 800a14a:	431e      	orrs	r6, r3
 800a14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a14e:	2b63      	cmp	r3, #99	; 0x63
 800a150:	dd2e      	ble.n	800a1b0 <_svfprintf_r+0x494>
 800a152:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a154:	1c59      	adds	r1, r3, #1
 800a156:	f7fd f9c1 	bl	80074dc <_malloc_r>
 800a15a:	9008      	str	r0, [sp, #32]
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d000      	beq.n	800a162 <_svfprintf_r+0x446>
 800a160:	e216      	b.n	800a590 <_svfprintf_r+0x874>
 800a162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a164:	899a      	ldrh	r2, [r3, #12]
 800a166:	2340      	movs	r3, #64	; 0x40
 800a168:	4313      	orrs	r3, r2
 800a16a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a16c:	8193      	strh	r3, [r2, #12]
 800a16e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a170:	899b      	ldrh	r3, [r3, #12]
 800a172:	065b      	lsls	r3, r3, #25
 800a174:	d400      	bmi.n	800a178 <_svfprintf_r+0x45c>
 800a176:	e5f5      	b.n	8009d64 <_svfprintf_r+0x48>
 800a178:	2301      	movs	r3, #1
 800a17a:	425b      	negs	r3, r3
 800a17c:	e5f1      	b.n	8009d62 <_svfprintf_r+0x46>
 800a17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a180:	900c      	str	r0, [sp, #48]	; 0x30
 800a182:	3301      	adds	r3, #1
 800a184:	d100      	bne.n	800a188 <_svfprintf_r+0x46c>
 800a186:	e206      	b.n	800a596 <_svfprintf_r+0x87a>
 800a188:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a18a:	2b47      	cmp	r3, #71	; 0x47
 800a18c:	d114      	bne.n	800a1b8 <_svfprintf_r+0x49c>
 800a18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a190:	2b00      	cmp	r3, #0
 800a192:	d111      	bne.n	800a1b8 <_svfprintf_r+0x49c>
 800a194:	3301      	adds	r3, #1
 800a196:	9309      	str	r3, [sp, #36]	; 0x24
 800a198:	e00e      	b.n	800a1b8 <_svfprintf_r+0x49c>
 800a19a:	46c0      	nop			; (mov r8, r8)
 800a19c:	7fefffff 	.word	0x7fefffff
 800a1a0:	0800f9ac 	.word	0x0800f9ac
 800a1a4:	0800f9b0 	.word	0x0800f9b0
 800a1a8:	0800f9b4 	.word	0x0800f9b4
 800a1ac:	0800f9b8 	.word	0x0800f9b8
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	930c      	str	r3, [sp, #48]	; 0x30
 800a1b4:	ab3f      	add	r3, sp, #252	; 0xfc
 800a1b6:	9308      	str	r3, [sp, #32]
 800a1b8:	2380      	movs	r3, #128	; 0x80
 800a1ba:	005b      	lsls	r3, r3, #1
 800a1bc:	4333      	orrs	r3, r6
 800a1be:	931a      	str	r3, [sp, #104]	; 0x68
 800a1c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1c2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	db00      	blt.n	800a1ca <_svfprintf_r+0x4ae>
 800a1c8:	e1e7      	b.n	800a59a <_svfprintf_r+0x87e>
 800a1ca:	2280      	movs	r2, #128	; 0x80
 800a1cc:	0612      	lsls	r2, r2, #24
 800a1ce:	4694      	mov	ip, r2
 800a1d0:	4463      	add	r3, ip
 800a1d2:	930e      	str	r3, [sp, #56]	; 0x38
 800a1d4:	232d      	movs	r3, #45	; 0x2d
 800a1d6:	9322      	str	r3, [sp, #136]	; 0x88
 800a1d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1da:	2b41      	cmp	r3, #65	; 0x41
 800a1dc:	d000      	beq.n	800a1e0 <_svfprintf_r+0x4c4>
 800a1de:	e1f5      	b.n	800a5cc <_svfprintf_r+0x8b0>
 800a1e0:	0028      	movs	r0, r5
 800a1e2:	aa26      	add	r2, sp, #152	; 0x98
 800a1e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a1e6:	f002 fb73 	bl	800c8d0 <frexp>
 800a1ea:	23ff      	movs	r3, #255	; 0xff
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	059b      	lsls	r3, r3, #22
 800a1f0:	f7f7 fa3c 	bl	800166c <__aeabi_dmul>
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	0004      	movs	r4, r0
 800a1fa:	000d      	movs	r5, r1
 800a1fc:	f7f6 f924 	bl	8000448 <__aeabi_dcmpeq>
 800a200:	2800      	cmp	r0, #0
 800a202:	d001      	beq.n	800a208 <_svfprintf_r+0x4ec>
 800a204:	2301      	movs	r3, #1
 800a206:	9326      	str	r3, [sp, #152]	; 0x98
 800a208:	4bda      	ldr	r3, [pc, #872]	; (800a574 <_svfprintf_r+0x858>)
 800a20a:	9319      	str	r3, [sp, #100]	; 0x64
 800a20c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a20e:	2b61      	cmp	r3, #97	; 0x61
 800a210:	d001      	beq.n	800a216 <_svfprintf_r+0x4fa>
 800a212:	4bd9      	ldr	r3, [pc, #868]	; (800a578 <_svfprintf_r+0x85c>)
 800a214:	9319      	str	r3, [sp, #100]	; 0x64
 800a216:	9b08      	ldr	r3, [sp, #32]
 800a218:	930e      	str	r3, [sp, #56]	; 0x38
 800a21a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a21c:	3b01      	subs	r3, #1
 800a21e:	9311      	str	r3, [sp, #68]	; 0x44
 800a220:	2200      	movs	r2, #0
 800a222:	4bd6      	ldr	r3, [pc, #856]	; (800a57c <_svfprintf_r+0x860>)
 800a224:	0020      	movs	r0, r4
 800a226:	0029      	movs	r1, r5
 800a228:	f7f7 fa20 	bl	800166c <__aeabi_dmul>
 800a22c:	000d      	movs	r5, r1
 800a22e:	0004      	movs	r4, r0
 800a230:	f7f8 f87e 	bl	8002330 <__aeabi_d2iz>
 800a234:	9021      	str	r0, [sp, #132]	; 0x84
 800a236:	f7f8 f8b1 	bl	800239c <__aeabi_i2d>
 800a23a:	0002      	movs	r2, r0
 800a23c:	000b      	movs	r3, r1
 800a23e:	0020      	movs	r0, r4
 800a240:	0029      	movs	r1, r5
 800a242:	f7f7 fcd5 	bl	8001bf0 <__aeabi_dsub>
 800a246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a248:	000d      	movs	r5, r1
 800a24a:	001a      	movs	r2, r3
 800a24c:	3201      	adds	r2, #1
 800a24e:	9921      	ldr	r1, [sp, #132]	; 0x84
 800a250:	920e      	str	r2, [sp, #56]	; 0x38
 800a252:	9223      	str	r2, [sp, #140]	; 0x8c
 800a254:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a256:	0004      	movs	r4, r0
 800a258:	5c52      	ldrb	r2, [r2, r1]
 800a25a:	701a      	strb	r2, [r3, #0]
 800a25c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a25e:	9320      	str	r3, [sp, #128]	; 0x80
 800a260:	3301      	adds	r3, #1
 800a262:	d00a      	beq.n	800a27a <_svfprintf_r+0x55e>
 800a264:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a266:	2200      	movs	r2, #0
 800a268:	3b01      	subs	r3, #1
 800a26a:	9311      	str	r3, [sp, #68]	; 0x44
 800a26c:	0020      	movs	r0, r4
 800a26e:	2300      	movs	r3, #0
 800a270:	0029      	movs	r1, r5
 800a272:	f7f6 f8e9 	bl	8000448 <__aeabi_dcmpeq>
 800a276:	2800      	cmp	r0, #0
 800a278:	d0d2      	beq.n	800a220 <_svfprintf_r+0x504>
 800a27a:	2200      	movs	r2, #0
 800a27c:	0020      	movs	r0, r4
 800a27e:	0029      	movs	r1, r5
 800a280:	4bbf      	ldr	r3, [pc, #764]	; (800a580 <_svfprintf_r+0x864>)
 800a282:	f7f6 f8fb 	bl	800047c <__aeabi_dcmpgt>
 800a286:	2800      	cmp	r0, #0
 800a288:	d10c      	bne.n	800a2a4 <_svfprintf_r+0x588>
 800a28a:	2200      	movs	r2, #0
 800a28c:	0020      	movs	r0, r4
 800a28e:	0029      	movs	r1, r5
 800a290:	4bbb      	ldr	r3, [pc, #748]	; (800a580 <_svfprintf_r+0x864>)
 800a292:	f7f6 f8d9 	bl	8000448 <__aeabi_dcmpeq>
 800a296:	2800      	cmp	r0, #0
 800a298:	d100      	bne.n	800a29c <_svfprintf_r+0x580>
 800a29a:	e191      	b.n	800a5c0 <_svfprintf_r+0x8a4>
 800a29c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a29e:	07db      	lsls	r3, r3, #31
 800a2a0:	d400      	bmi.n	800a2a4 <_svfprintf_r+0x588>
 800a2a2:	e18d      	b.n	800a5c0 <_svfprintf_r+0x8a4>
 800a2a4:	2030      	movs	r0, #48	; 0x30
 800a2a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2a8:	932a      	str	r3, [sp, #168]	; 0xa8
 800a2aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a2ac:	7bdb      	ldrb	r3, [r3, #15]
 800a2ae:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a2b0:	3a01      	subs	r2, #1
 800a2b2:	922a      	str	r2, [sp, #168]	; 0xa8
 800a2b4:	7811      	ldrb	r1, [r2, #0]
 800a2b6:	4299      	cmp	r1, r3
 800a2b8:	d100      	bne.n	800a2bc <_svfprintf_r+0x5a0>
 800a2ba:	e171      	b.n	800a5a0 <_svfprintf_r+0x884>
 800a2bc:	1c4b      	adds	r3, r1, #1
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	2939      	cmp	r1, #57	; 0x39
 800a2c2:	d101      	bne.n	800a2c8 <_svfprintf_r+0x5ac>
 800a2c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a2c6:	7a9b      	ldrb	r3, [r3, #10]
 800a2c8:	7013      	strb	r3, [r2, #0]
 800a2ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a2cc:	9a08      	ldr	r2, [sp, #32]
 800a2ce:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a2d0:	1a9b      	subs	r3, r3, r2
 800a2d2:	930e      	str	r3, [sp, #56]	; 0x38
 800a2d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2d6:	2b47      	cmp	r3, #71	; 0x47
 800a2d8:	d000      	beq.n	800a2dc <_svfprintf_r+0x5c0>
 800a2da:	e1c4      	b.n	800a666 <_svfprintf_r+0x94a>
 800a2dc:	1ceb      	adds	r3, r5, #3
 800a2de:	db03      	blt.n	800a2e8 <_svfprintf_r+0x5cc>
 800a2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e2:	42ab      	cmp	r3, r5
 800a2e4:	db00      	blt.n	800a2e8 <_svfprintf_r+0x5cc>
 800a2e6:	e1e6      	b.n	800a6b6 <_svfprintf_r+0x99a>
 800a2e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2ea:	3b02      	subs	r3, #2
 800a2ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2ee:	223c      	movs	r2, #60	; 0x3c
 800a2f0:	466b      	mov	r3, sp
 800a2f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a2f4:	189b      	adds	r3, r3, r2
 800a2f6:	1e6c      	subs	r4, r5, #1
 800a2f8:	3a1c      	subs	r2, #28
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	9426      	str	r4, [sp, #152]	; 0x98
 800a300:	4391      	bics	r1, r2
 800a302:	2941      	cmp	r1, #65	; 0x41
 800a304:	d102      	bne.n	800a30c <_svfprintf_r+0x5f0>
 800a306:	330f      	adds	r3, #15
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	3001      	adds	r0, #1
 800a30c:	a928      	add	r1, sp, #160	; 0xa0
 800a30e:	700b      	strb	r3, [r1, #0]
 800a310:	232b      	movs	r3, #43	; 0x2b
 800a312:	2c00      	cmp	r4, #0
 800a314:	da02      	bge.n	800a31c <_svfprintf_r+0x600>
 800a316:	2401      	movs	r4, #1
 800a318:	3302      	adds	r3, #2
 800a31a:	1b64      	subs	r4, r4, r5
 800a31c:	704b      	strb	r3, [r1, #1]
 800a31e:	2c09      	cmp	r4, #9
 800a320:	dc00      	bgt.n	800a324 <_svfprintf_r+0x608>
 800a322:	e1ba      	b.n	800a69a <_svfprintf_r+0x97e>
 800a324:	2337      	movs	r3, #55	; 0x37
 800a326:	250a      	movs	r5, #10
 800a328:	aa1e      	add	r2, sp, #120	; 0x78
 800a32a:	189b      	adds	r3, r3, r2
 800a32c:	9310      	str	r3, [sp, #64]	; 0x40
 800a32e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a330:	0020      	movs	r0, r4
 800a332:	9309      	str	r3, [sp, #36]	; 0x24
 800a334:	0029      	movs	r1, r5
 800a336:	3b01      	subs	r3, #1
 800a338:	9310      	str	r3, [sp, #64]	; 0x40
 800a33a:	f7f6 f86f 	bl	800041c <__aeabi_idivmod>
 800a33e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a340:	3130      	adds	r1, #48	; 0x30
 800a342:	7019      	strb	r1, [r3, #0]
 800a344:	0020      	movs	r0, r4
 800a346:	0029      	movs	r1, r5
 800a348:	9411      	str	r4, [sp, #68]	; 0x44
 800a34a:	f7f5 ff81 	bl	8000250 <__divsi3>
 800a34e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a350:	0004      	movs	r4, r0
 800a352:	2b63      	cmp	r3, #99	; 0x63
 800a354:	dceb      	bgt.n	800a32e <_svfprintf_r+0x612>
 800a356:	222a      	movs	r2, #42	; 0x2a
 800a358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a35a:	a81e      	add	r0, sp, #120	; 0x78
 800a35c:	1e99      	subs	r1, r3, #2
 800a35e:	1812      	adds	r2, r2, r0
 800a360:	2037      	movs	r0, #55	; 0x37
 800a362:	000b      	movs	r3, r1
 800a364:	3430      	adds	r4, #48	; 0x30
 800a366:	700c      	strb	r4, [r1, #0]
 800a368:	ac1e      	add	r4, sp, #120	; 0x78
 800a36a:	1900      	adds	r0, r0, r4
 800a36c:	4283      	cmp	r3, r0
 800a36e:	d200      	bcs.n	800a372 <_svfprintf_r+0x656>
 800a370:	e18e      	b.n	800a690 <_svfprintf_r+0x974>
 800a372:	2300      	movs	r3, #0
 800a374:	4281      	cmp	r1, r0
 800a376:	d804      	bhi.n	800a382 <_svfprintf_r+0x666>
 800a378:	aa1e      	add	r2, sp, #120	; 0x78
 800a37a:	3339      	adds	r3, #57	; 0x39
 800a37c:	189b      	adds	r3, r3, r2
 800a37e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a380:	1a9b      	subs	r3, r3, r2
 800a382:	222a      	movs	r2, #42	; 0x2a
 800a384:	a91e      	add	r1, sp, #120	; 0x78
 800a386:	1852      	adds	r2, r2, r1
 800a388:	18d3      	adds	r3, r2, r3
 800a38a:	aa28      	add	r2, sp, #160	; 0xa0
 800a38c:	1a9b      	subs	r3, r3, r2
 800a38e:	931e      	str	r3, [sp, #120]	; 0x78
 800a390:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a394:	4694      	mov	ip, r2
 800a396:	4463      	add	r3, ip
 800a398:	9309      	str	r3, [sp, #36]	; 0x24
 800a39a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	dc01      	bgt.n	800a3a4 <_svfprintf_r+0x688>
 800a3a0:	07f3      	lsls	r3, r6, #31
 800a3a2:	d504      	bpl.n	800a3ae <_svfprintf_r+0x692>
 800a3a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a8:	4694      	mov	ip, r2
 800a3aa:	4463      	add	r3, ip
 800a3ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ae:	2280      	movs	r2, #128	; 0x80
 800a3b0:	4b74      	ldr	r3, [pc, #464]	; (800a584 <_svfprintf_r+0x868>)
 800a3b2:	0052      	lsls	r2, r2, #1
 800a3b4:	4033      	ands	r3, r6
 800a3b6:	431a      	orrs	r2, r3
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	001d      	movs	r5, r3
 800a3bc:	921a      	str	r2, [sp, #104]	; 0x68
 800a3be:	9310      	str	r3, [sp, #64]	; 0x40
 800a3c0:	9311      	str	r3, [sp, #68]	; 0x44
 800a3c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3c4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a3c6:	9319      	str	r3, [sp, #100]	; 0x64
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d006      	beq.n	800a3da <_svfprintf_r+0x6be>
 800a3cc:	231b      	movs	r3, #27
 800a3ce:	aa1e      	add	r2, sp, #120	; 0x78
 800a3d0:	189b      	adds	r3, r3, r2
 800a3d2:	222d      	movs	r2, #45	; 0x2d
 800a3d4:	701a      	strb	r2, [r3, #0]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	9319      	str	r3, [sp, #100]	; 0x64
 800a3da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a3dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3de:	931a      	str	r3, [sp, #104]	; 0x68
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	da00      	bge.n	800a3e6 <_svfprintf_r+0x6ca>
 800a3e4:	921a      	str	r2, [sp, #104]	; 0x68
 800a3e6:	231b      	movs	r3, #27
 800a3e8:	aa1e      	add	r2, sp, #120	; 0x78
 800a3ea:	189b      	adds	r3, r3, r2
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	1e5a      	subs	r2, r3, #1
 800a3f0:	4193      	sbcs	r3, r2
 800a3f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a3f4:	18d3      	adds	r3, r2, r3
 800a3f6:	931a      	str	r3, [sp, #104]	; 0x68
 800a3f8:	0032      	movs	r2, r6
 800a3fa:	2302      	movs	r3, #2
 800a3fc:	401a      	ands	r2, r3
 800a3fe:	9220      	str	r2, [sp, #128]	; 0x80
 800a400:	421e      	tst	r6, r3
 800a402:	d002      	beq.n	800a40a <_svfprintf_r+0x6ee>
 800a404:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a406:	3302      	adds	r3, #2
 800a408:	931a      	str	r3, [sp, #104]	; 0x68
 800a40a:	2384      	movs	r3, #132	; 0x84
 800a40c:	0032      	movs	r2, r6
 800a40e:	401a      	ands	r2, r3
 800a410:	9221      	str	r2, [sp, #132]	; 0x84
 800a412:	421e      	tst	r6, r3
 800a414:	d11f      	bne.n	800a456 <_svfprintf_r+0x73a>
 800a416:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a418:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a41a:	1a9c      	subs	r4, r3, r2
 800a41c:	2c00      	cmp	r4, #0
 800a41e:	dd1a      	ble.n	800a456 <_svfprintf_r+0x73a>
 800a420:	0039      	movs	r1, r7
 800a422:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a424:	4858      	ldr	r0, [pc, #352]	; (800a588 <_svfprintf_r+0x86c>)
 800a426:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a428:	3301      	adds	r3, #1
 800a42a:	3108      	adds	r1, #8
 800a42c:	6038      	str	r0, [r7, #0]
 800a42e:	2c10      	cmp	r4, #16
 800a430:	dd00      	ble.n	800a434 <_svfprintf_r+0x718>
 800a432:	e31c      	b.n	800aa6e <_svfprintf_r+0xd52>
 800a434:	607c      	str	r4, [r7, #4]
 800a436:	18a4      	adds	r4, r4, r2
 800a438:	000f      	movs	r7, r1
 800a43a:	942e      	str	r4, [sp, #184]	; 0xb8
 800a43c:	932d      	str	r3, [sp, #180]	; 0xb4
 800a43e:	2b07      	cmp	r3, #7
 800a440:	dd09      	ble.n	800a456 <_svfprintf_r+0x73a>
 800a442:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a444:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a446:	aa2c      	add	r2, sp, #176	; 0xb0
 800a448:	f003 fd7e 	bl	800df48 <__ssprint_r>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d001      	beq.n	800a454 <_svfprintf_r+0x738>
 800a450:	f000 fe43 	bl	800b0da <_svfprintf_r+0x13be>
 800a454:	af2f      	add	r7, sp, #188	; 0xbc
 800a456:	221b      	movs	r2, #27
 800a458:	a91e      	add	r1, sp, #120	; 0x78
 800a45a:	1852      	adds	r2, r2, r1
 800a45c:	7811      	ldrb	r1, [r2, #0]
 800a45e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a460:	2900      	cmp	r1, #0
 800a462:	d014      	beq.n	800a48e <_svfprintf_r+0x772>
 800a464:	603a      	str	r2, [r7, #0]
 800a466:	2201      	movs	r2, #1
 800a468:	189b      	adds	r3, r3, r2
 800a46a:	932e      	str	r3, [sp, #184]	; 0xb8
 800a46c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a46e:	607a      	str	r2, [r7, #4]
 800a470:	189b      	adds	r3, r3, r2
 800a472:	932d      	str	r3, [sp, #180]	; 0xb4
 800a474:	3708      	adds	r7, #8
 800a476:	2b07      	cmp	r3, #7
 800a478:	dd09      	ble.n	800a48e <_svfprintf_r+0x772>
 800a47a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a47c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a47e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a480:	f003 fd62 	bl	800df48 <__ssprint_r>
 800a484:	2800      	cmp	r0, #0
 800a486:	d001      	beq.n	800a48c <_svfprintf_r+0x770>
 800a488:	f000 fe27 	bl	800b0da <_svfprintf_r+0x13be>
 800a48c:	af2f      	add	r7, sp, #188	; 0xbc
 800a48e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a490:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a492:	2a00      	cmp	r2, #0
 800a494:	d015      	beq.n	800a4c2 <_svfprintf_r+0x7a6>
 800a496:	aa25      	add	r2, sp, #148	; 0x94
 800a498:	603a      	str	r2, [r7, #0]
 800a49a:	2202      	movs	r2, #2
 800a49c:	189b      	adds	r3, r3, r2
 800a49e:	932e      	str	r3, [sp, #184]	; 0xb8
 800a4a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a4a2:	607a      	str	r2, [r7, #4]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	932d      	str	r3, [sp, #180]	; 0xb4
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	2b07      	cmp	r3, #7
 800a4ac:	dd09      	ble.n	800a4c2 <_svfprintf_r+0x7a6>
 800a4ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a4b2:	aa2c      	add	r2, sp, #176	; 0xb0
 800a4b4:	f003 fd48 	bl	800df48 <__ssprint_r>
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	d001      	beq.n	800a4c0 <_svfprintf_r+0x7a4>
 800a4bc:	f000 fe0d 	bl	800b0da <_svfprintf_r+0x13be>
 800a4c0:	af2f      	add	r7, sp, #188	; 0xbc
 800a4c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4c4:	2b80      	cmp	r3, #128	; 0x80
 800a4c6:	d11f      	bne.n	800a508 <_svfprintf_r+0x7ec>
 800a4c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a4ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a4cc:	1a9c      	subs	r4, r3, r2
 800a4ce:	2c00      	cmp	r4, #0
 800a4d0:	dd1a      	ble.n	800a508 <_svfprintf_r+0x7ec>
 800a4d2:	0039      	movs	r1, r7
 800a4d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a4d6:	482d      	ldr	r0, [pc, #180]	; (800a58c <_svfprintf_r+0x870>)
 800a4d8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a4da:	3301      	adds	r3, #1
 800a4dc:	3108      	adds	r1, #8
 800a4de:	6038      	str	r0, [r7, #0]
 800a4e0:	2c10      	cmp	r4, #16
 800a4e2:	dd00      	ble.n	800a4e6 <_svfprintf_r+0x7ca>
 800a4e4:	e2d6      	b.n	800aa94 <_svfprintf_r+0xd78>
 800a4e6:	607c      	str	r4, [r7, #4]
 800a4e8:	18a4      	adds	r4, r4, r2
 800a4ea:	000f      	movs	r7, r1
 800a4ec:	942e      	str	r4, [sp, #184]	; 0xb8
 800a4ee:	932d      	str	r3, [sp, #180]	; 0xb4
 800a4f0:	2b07      	cmp	r3, #7
 800a4f2:	dd09      	ble.n	800a508 <_svfprintf_r+0x7ec>
 800a4f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a4f8:	aa2c      	add	r2, sp, #176	; 0xb0
 800a4fa:	f003 fd25 	bl	800df48 <__ssprint_r>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d001      	beq.n	800a506 <_svfprintf_r+0x7ea>
 800a502:	f000 fdea 	bl	800b0da <_svfprintf_r+0x13be>
 800a506:	af2f      	add	r7, sp, #188	; 0xbc
 800a508:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a50a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a50c:	1a9c      	subs	r4, r3, r2
 800a50e:	2c00      	cmp	r4, #0
 800a510:	dd1a      	ble.n	800a548 <_svfprintf_r+0x82c>
 800a512:	0039      	movs	r1, r7
 800a514:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a516:	481d      	ldr	r0, [pc, #116]	; (800a58c <_svfprintf_r+0x870>)
 800a518:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a51a:	3301      	adds	r3, #1
 800a51c:	3108      	adds	r1, #8
 800a51e:	6038      	str	r0, [r7, #0]
 800a520:	2c10      	cmp	r4, #16
 800a522:	dd00      	ble.n	800a526 <_svfprintf_r+0x80a>
 800a524:	e2c9      	b.n	800aaba <_svfprintf_r+0xd9e>
 800a526:	18a2      	adds	r2, r4, r2
 800a528:	607c      	str	r4, [r7, #4]
 800a52a:	922e      	str	r2, [sp, #184]	; 0xb8
 800a52c:	000f      	movs	r7, r1
 800a52e:	932d      	str	r3, [sp, #180]	; 0xb4
 800a530:	2b07      	cmp	r3, #7
 800a532:	dd09      	ble.n	800a548 <_svfprintf_r+0x82c>
 800a534:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a536:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a538:	aa2c      	add	r2, sp, #176	; 0xb0
 800a53a:	f003 fd05 	bl	800df48 <__ssprint_r>
 800a53e:	2800      	cmp	r0, #0
 800a540:	d001      	beq.n	800a546 <_svfprintf_r+0x82a>
 800a542:	f000 fdca 	bl	800b0da <_svfprintf_r+0x13be>
 800a546:	af2f      	add	r7, sp, #188	; 0xbc
 800a548:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a54a:	9319      	str	r3, [sp, #100]	; 0x64
 800a54c:	05f3      	lsls	r3, r6, #23
 800a54e:	d500      	bpl.n	800a552 <_svfprintf_r+0x836>
 800a550:	e2ce      	b.n	800aaf0 <_svfprintf_r+0xdd4>
 800a552:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a554:	9b08      	ldr	r3, [sp, #32]
 800a556:	4694      	mov	ip, r2
 800a558:	603b      	str	r3, [r7, #0]
 800a55a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a55c:	607b      	str	r3, [r7, #4]
 800a55e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a560:	4463      	add	r3, ip
 800a562:	932e      	str	r3, [sp, #184]	; 0xb8
 800a564:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a566:	3301      	adds	r3, #1
 800a568:	932d      	str	r3, [sp, #180]	; 0xb4
 800a56a:	2b07      	cmp	r3, #7
 800a56c:	dd00      	ble.n	800a570 <_svfprintf_r+0x854>
 800a56e:	e3a3      	b.n	800acb8 <_svfprintf_r+0xf9c>
 800a570:	3708      	adds	r7, #8
 800a572:	e301      	b.n	800ab78 <_svfprintf_r+0xe5c>
 800a574:	0800f9bc 	.word	0x0800f9bc
 800a578:	0800f9cd 	.word	0x0800f9cd
 800a57c:	40300000 	.word	0x40300000
 800a580:	3fe00000 	.word	0x3fe00000
 800a584:	fffffbff 	.word	0xfffffbff
 800a588:	0800f9e0 	.word	0x0800f9e0
 800a58c:	0800f9f0 	.word	0x0800f9f0
 800a590:	9b08      	ldr	r3, [sp, #32]
 800a592:	930c      	str	r3, [sp, #48]	; 0x30
 800a594:	e610      	b.n	800a1b8 <_svfprintf_r+0x49c>
 800a596:	2306      	movs	r3, #6
 800a598:	e5fd      	b.n	800a196 <_svfprintf_r+0x47a>
 800a59a:	930e      	str	r3, [sp, #56]	; 0x38
 800a59c:	2300      	movs	r3, #0
 800a59e:	e61a      	b.n	800a1d6 <_svfprintf_r+0x4ba>
 800a5a0:	7010      	strb	r0, [r2, #0]
 800a5a2:	e684      	b.n	800a2ae <_svfprintf_r+0x592>
 800a5a4:	7018      	strb	r0, [r3, #0]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	1aca      	subs	r2, r1, r3
 800a5aa:	d5fb      	bpl.n	800a5a4 <_svfprintf_r+0x888>
 800a5ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	3201      	adds	r2, #1
 800a5b2:	db01      	blt.n	800a5b8 <_svfprintf_r+0x89c>
 800a5b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5ba:	18d3      	adds	r3, r2, r3
 800a5bc:	9323      	str	r3, [sp, #140]	; 0x8c
 800a5be:	e684      	b.n	800a2ca <_svfprintf_r+0x5ae>
 800a5c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5c2:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a5c4:	2030      	movs	r0, #48	; 0x30
 800a5c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5c8:	1851      	adds	r1, r2, r1
 800a5ca:	e7ed      	b.n	800a5a8 <_svfprintf_r+0x88c>
 800a5cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a5ce:	2303      	movs	r3, #3
 800a5d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a5d2:	2a46      	cmp	r2, #70	; 0x46
 800a5d4:	d006      	beq.n	800a5e4 <_svfprintf_r+0x8c8>
 800a5d6:	0014      	movs	r4, r2
 800a5d8:	3c45      	subs	r4, #69	; 0x45
 800a5da:	4262      	negs	r2, r4
 800a5dc:	4154      	adcs	r4, r2
 800a5de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	1914      	adds	r4, r2, r4
 800a5e4:	aa2a      	add	r2, sp, #168	; 0xa8
 800a5e6:	9204      	str	r2, [sp, #16]
 800a5e8:	aa27      	add	r2, sp, #156	; 0x9c
 800a5ea:	9203      	str	r2, [sp, #12]
 800a5ec:	aa26      	add	r2, sp, #152	; 0x98
 800a5ee:	9202      	str	r2, [sp, #8]
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	002a      	movs	r2, r5
 800a5f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a5f8:	9401      	str	r4, [sp, #4]
 800a5fa:	f002 fad7 	bl	800cbac <_dtoa_r>
 800a5fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a600:	9008      	str	r0, [sp, #32]
 800a602:	2b47      	cmp	r3, #71	; 0x47
 800a604:	d103      	bne.n	800a60e <_svfprintf_r+0x8f2>
 800a606:	07f3      	lsls	r3, r6, #31
 800a608:	d401      	bmi.n	800a60e <_svfprintf_r+0x8f2>
 800a60a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800a60c:	e65e      	b.n	800a2cc <_svfprintf_r+0x5b0>
 800a60e:	9b08      	ldr	r3, [sp, #32]
 800a610:	191b      	adds	r3, r3, r4
 800a612:	9311      	str	r3, [sp, #68]	; 0x44
 800a614:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a616:	2b46      	cmp	r3, #70	; 0x46
 800a618:	d112      	bne.n	800a640 <_svfprintf_r+0x924>
 800a61a:	9b08      	ldr	r3, [sp, #32]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	2b30      	cmp	r3, #48	; 0x30
 800a620:	d10a      	bne.n	800a638 <_svfprintf_r+0x91c>
 800a622:	2200      	movs	r2, #0
 800a624:	2300      	movs	r3, #0
 800a626:	0028      	movs	r0, r5
 800a628:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a62a:	f7f5 ff0d 	bl	8000448 <__aeabi_dcmpeq>
 800a62e:	2800      	cmp	r0, #0
 800a630:	d102      	bne.n	800a638 <_svfprintf_r+0x91c>
 800a632:	2301      	movs	r3, #1
 800a634:	1b1b      	subs	r3, r3, r4
 800a636:	9326      	str	r3, [sp, #152]	; 0x98
 800a638:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a63a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a63c:	18d3      	adds	r3, r2, r3
 800a63e:	9311      	str	r3, [sp, #68]	; 0x44
 800a640:	2200      	movs	r2, #0
 800a642:	2300      	movs	r3, #0
 800a644:	0028      	movs	r0, r5
 800a646:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a648:	f7f5 fefe 	bl	8000448 <__aeabi_dcmpeq>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d001      	beq.n	800a654 <_svfprintf_r+0x938>
 800a650:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a652:	932a      	str	r3, [sp, #168]	; 0xa8
 800a654:	2230      	movs	r2, #48	; 0x30
 800a656:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800a658:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a65a:	4299      	cmp	r1, r3
 800a65c:	d9d5      	bls.n	800a60a <_svfprintf_r+0x8ee>
 800a65e:	1c59      	adds	r1, r3, #1
 800a660:	912a      	str	r1, [sp, #168]	; 0xa8
 800a662:	701a      	strb	r2, [r3, #0]
 800a664:	e7f7      	b.n	800a656 <_svfprintf_r+0x93a>
 800a666:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a668:	2b46      	cmp	r3, #70	; 0x46
 800a66a:	d000      	beq.n	800a66e <_svfprintf_r+0x952>
 800a66c:	e63f      	b.n	800a2ee <_svfprintf_r+0x5d2>
 800a66e:	2201      	movs	r2, #1
 800a670:	0033      	movs	r3, r6
 800a672:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a674:	4013      	ands	r3, r2
 800a676:	430b      	orrs	r3, r1
 800a678:	2d00      	cmp	r5, #0
 800a67a:	dd2c      	ble.n	800a6d6 <_svfprintf_r+0x9ba>
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d046      	beq.n	800a70e <_svfprintf_r+0x9f2>
 800a680:	000a      	movs	r2, r1
 800a682:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a684:	18eb      	adds	r3, r5, r3
 800a686:	18d3      	adds	r3, r2, r3
 800a688:	9309      	str	r3, [sp, #36]	; 0x24
 800a68a:	2366      	movs	r3, #102	; 0x66
 800a68c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a68e:	e030      	b.n	800a6f2 <_svfprintf_r+0x9d6>
 800a690:	781c      	ldrb	r4, [r3, #0]
 800a692:	3301      	adds	r3, #1
 800a694:	7014      	strb	r4, [r2, #0]
 800a696:	3201      	adds	r2, #1
 800a698:	e668      	b.n	800a36c <_svfprintf_r+0x650>
 800a69a:	222a      	movs	r2, #42	; 0x2a
 800a69c:	ab1e      	add	r3, sp, #120	; 0x78
 800a69e:	18d2      	adds	r2, r2, r3
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d104      	bne.n	800a6ae <_svfprintf_r+0x992>
 800a6a4:	2330      	movs	r3, #48	; 0x30
 800a6a6:	222b      	movs	r2, #43	; 0x2b
 800a6a8:	708b      	strb	r3, [r1, #2]
 800a6aa:	ab1e      	add	r3, sp, #120	; 0x78
 800a6ac:	18d2      	adds	r2, r2, r3
 800a6ae:	3430      	adds	r4, #48	; 0x30
 800a6b0:	1c53      	adds	r3, r2, #1
 800a6b2:	7014      	strb	r4, [r2, #0]
 800a6b4:	e669      	b.n	800a38a <_svfprintf_r+0x66e>
 800a6b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6b8:	42ab      	cmp	r3, r5
 800a6ba:	dd12      	ble.n	800a6e2 <_svfprintf_r+0x9c6>
 800a6bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a6be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6c0:	4694      	mov	ip, r2
 800a6c2:	4463      	add	r3, ip
 800a6c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c6:	2367      	movs	r3, #103	; 0x67
 800a6c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6ca:	2d00      	cmp	r5, #0
 800a6cc:	dc11      	bgt.n	800a6f2 <_svfprintf_r+0x9d6>
 800a6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d0:	1b5b      	subs	r3, r3, r5
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	e00c      	b.n	800a6f0 <_svfprintf_r+0x9d4>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d01b      	beq.n	800a712 <_svfprintf_r+0x9f6>
 800a6da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a6dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6de:	3301      	adds	r3, #1
 800a6e0:	e7d1      	b.n	800a686 <_svfprintf_r+0x96a>
 800a6e2:	2367      	movs	r3, #103	; 0x67
 800a6e4:	9509      	str	r5, [sp, #36]	; 0x24
 800a6e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6e8:	07f3      	lsls	r3, r6, #31
 800a6ea:	d502      	bpl.n	800a6f2 <_svfprintf_r+0x9d6>
 800a6ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a6ee:	18eb      	adds	r3, r5, r3
 800a6f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f2:	2380      	movs	r3, #128	; 0x80
 800a6f4:	0032      	movs	r2, r6
 800a6f6:	00db      	lsls	r3, r3, #3
 800a6f8:	401a      	ands	r2, r3
 800a6fa:	9211      	str	r2, [sp, #68]	; 0x44
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	9210      	str	r2, [sp, #64]	; 0x40
 800a700:	421e      	tst	r6, r3
 800a702:	d100      	bne.n	800a706 <_svfprintf_r+0x9ea>
 800a704:	e65d      	b.n	800a3c2 <_svfprintf_r+0x6a6>
 800a706:	4295      	cmp	r5, r2
 800a708:	dc25      	bgt.n	800a756 <_svfprintf_r+0xa3a>
 800a70a:	9211      	str	r2, [sp, #68]	; 0x44
 800a70c:	e659      	b.n	800a3c2 <_svfprintf_r+0x6a6>
 800a70e:	9509      	str	r5, [sp, #36]	; 0x24
 800a710:	e7bb      	b.n	800a68a <_svfprintf_r+0x96e>
 800a712:	2366      	movs	r3, #102	; 0x66
 800a714:	9209      	str	r2, [sp, #36]	; 0x24
 800a716:	930f      	str	r3, [sp, #60]	; 0x3c
 800a718:	e7eb      	b.n	800a6f2 <_svfprintf_r+0x9d6>
 800a71a:	42ab      	cmp	r3, r5
 800a71c:	da0e      	bge.n	800a73c <_svfprintf_r+0xa20>
 800a71e:	1aed      	subs	r5, r5, r3
 800a720:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a722:	785b      	ldrb	r3, [r3, #1]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d012      	beq.n	800a74e <_svfprintf_r+0xa32>
 800a728:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a72a:	3301      	adds	r3, #1
 800a72c:	9311      	str	r3, [sp, #68]	; 0x44
 800a72e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a730:	3301      	adds	r3, #1
 800a732:	9312      	str	r3, [sp, #72]	; 0x48
 800a734:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	2bff      	cmp	r3, #255	; 0xff
 800a73a:	d1ee      	bne.n	800a71a <_svfprintf_r+0x9fe>
 800a73c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a73e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a740:	189b      	adds	r3, r3, r2
 800a742:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a744:	4353      	muls	r3, r2
 800a746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a748:	189b      	adds	r3, r3, r2
 800a74a:	9309      	str	r3, [sp, #36]	; 0x24
 800a74c:	e639      	b.n	800a3c2 <_svfprintf_r+0x6a6>
 800a74e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a750:	3301      	adds	r3, #1
 800a752:	9310      	str	r3, [sp, #64]	; 0x40
 800a754:	e7ee      	b.n	800a734 <_svfprintf_r+0xa18>
 800a756:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a758:	9311      	str	r3, [sp, #68]	; 0x44
 800a75a:	e7eb      	b.n	800a734 <_svfprintf_r+0xa18>
 800a75c:	1d23      	adds	r3, r4, #4
 800a75e:	930d      	str	r3, [sp, #52]	; 0x34
 800a760:	06b3      	lsls	r3, r6, #26
 800a762:	d509      	bpl.n	800a778 <_svfprintf_r+0xa5c>
 800a764:	6823      	ldr	r3, [r4, #0]
 800a766:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	17d2      	asrs	r2, r2, #31
 800a76c:	605a      	str	r2, [r3, #4]
 800a76e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a770:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a772:	9308      	str	r3, [sp, #32]
 800a774:	f7ff fb0d 	bl	8009d92 <_svfprintf_r+0x76>
 800a778:	06f3      	lsls	r3, r6, #27
 800a77a:	d503      	bpl.n	800a784 <_svfprintf_r+0xa68>
 800a77c:	6823      	ldr	r3, [r4, #0]
 800a77e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a780:	601a      	str	r2, [r3, #0]
 800a782:	e7f4      	b.n	800a76e <_svfprintf_r+0xa52>
 800a784:	0673      	lsls	r3, r6, #25
 800a786:	d503      	bpl.n	800a790 <_svfprintf_r+0xa74>
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a78c:	801a      	strh	r2, [r3, #0]
 800a78e:	e7ee      	b.n	800a76e <_svfprintf_r+0xa52>
 800a790:	05b6      	lsls	r6, r6, #22
 800a792:	d5f3      	bpl.n	800a77c <_svfprintf_r+0xa60>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a798:	701a      	strb	r2, [r3, #0]
 800a79a:	e7e8      	b.n	800a76e <_svfprintf_r+0xa52>
 800a79c:	2310      	movs	r3, #16
 800a79e:	431e      	orrs	r6, r3
 800a7a0:	2320      	movs	r3, #32
 800a7a2:	0030      	movs	r0, r6
 800a7a4:	4018      	ands	r0, r3
 800a7a6:	421e      	tst	r6, r3
 800a7a8:	d00f      	beq.n	800a7ca <_svfprintf_r+0xaae>
 800a7aa:	3b19      	subs	r3, #25
 800a7ac:	3407      	adds	r4, #7
 800a7ae:	439c      	bics	r4, r3
 800a7b0:	0022      	movs	r2, r4
 800a7b2:	ca18      	ldmia	r2!, {r3, r4}
 800a7b4:	9306      	str	r3, [sp, #24]
 800a7b6:	9407      	str	r4, [sp, #28]
 800a7b8:	920d      	str	r2, [sp, #52]	; 0x34
 800a7ba:	4bc9      	ldr	r3, [pc, #804]	; (800aae0 <_svfprintf_r+0xdc4>)
 800a7bc:	401e      	ands	r6, r3
 800a7be:	2300      	movs	r3, #0
 800a7c0:	221b      	movs	r2, #27
 800a7c2:	a91e      	add	r1, sp, #120	; 0x78
 800a7c4:	1852      	adds	r2, r2, r1
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	e430      	b.n	800a02c <_svfprintf_r+0x310>
 800a7ca:	0022      	movs	r2, r4
 800a7cc:	ca08      	ldmia	r2!, {r3}
 800a7ce:	0031      	movs	r1, r6
 800a7d0:	920d      	str	r2, [sp, #52]	; 0x34
 800a7d2:	2210      	movs	r2, #16
 800a7d4:	4011      	ands	r1, r2
 800a7d6:	4216      	tst	r6, r2
 800a7d8:	d002      	beq.n	800a7e0 <_svfprintf_r+0xac4>
 800a7da:	9306      	str	r3, [sp, #24]
 800a7dc:	9007      	str	r0, [sp, #28]
 800a7de:	e7ec      	b.n	800a7ba <_svfprintf_r+0xa9e>
 800a7e0:	2240      	movs	r2, #64	; 0x40
 800a7e2:	0030      	movs	r0, r6
 800a7e4:	4010      	ands	r0, r2
 800a7e6:	4216      	tst	r6, r2
 800a7e8:	d003      	beq.n	800a7f2 <_svfprintf_r+0xad6>
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	9306      	str	r3, [sp, #24]
 800a7ee:	9107      	str	r1, [sp, #28]
 800a7f0:	e7e3      	b.n	800a7ba <_svfprintf_r+0xa9e>
 800a7f2:	2280      	movs	r2, #128	; 0x80
 800a7f4:	0031      	movs	r1, r6
 800a7f6:	0092      	lsls	r2, r2, #2
 800a7f8:	4011      	ands	r1, r2
 800a7fa:	4216      	tst	r6, r2
 800a7fc:	d0f6      	beq.n	800a7ec <_svfprintf_r+0xad0>
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	e7eb      	b.n	800a7da <_svfprintf_r+0xabe>
 800a802:	0023      	movs	r3, r4
 800a804:	cb04      	ldmia	r3!, {r2}
 800a806:	49b7      	ldr	r1, [pc, #732]	; (800aae4 <_svfprintf_r+0xdc8>)
 800a808:	9206      	str	r2, [sp, #24]
 800a80a:	aa25      	add	r2, sp, #148	; 0x94
 800a80c:	8011      	strh	r1, [r2, #0]
 800a80e:	4ab6      	ldr	r2, [pc, #728]	; (800aae8 <_svfprintf_r+0xdcc>)
 800a810:	930d      	str	r3, [sp, #52]	; 0x34
 800a812:	2300      	movs	r3, #0
 800a814:	921f      	str	r2, [sp, #124]	; 0x7c
 800a816:	2278      	movs	r2, #120	; 0x78
 800a818:	9307      	str	r3, [sp, #28]
 800a81a:	3302      	adds	r3, #2
 800a81c:	431e      	orrs	r6, r3
 800a81e:	920f      	str	r2, [sp, #60]	; 0x3c
 800a820:	e7ce      	b.n	800a7c0 <_svfprintf_r+0xaa4>
 800a822:	0023      	movs	r3, r4
 800a824:	cb04      	ldmia	r3!, {r2}
 800a826:	2400      	movs	r4, #0
 800a828:	930d      	str	r3, [sp, #52]	; 0x34
 800a82a:	231b      	movs	r3, #27
 800a82c:	9208      	str	r2, [sp, #32]
 800a82e:	aa1e      	add	r2, sp, #120	; 0x78
 800a830:	189b      	adds	r3, r3, r2
 800a832:	701c      	strb	r4, [r3, #0]
 800a834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a836:	3301      	adds	r3, #1
 800a838:	d00e      	beq.n	800a858 <_svfprintf_r+0xb3c>
 800a83a:	0021      	movs	r1, r4
 800a83c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a83e:	9808      	ldr	r0, [sp, #32]
 800a840:	f002 f83a 	bl	800c8b8 <memchr>
 800a844:	900c      	str	r0, [sp, #48]	; 0x30
 800a846:	42a0      	cmp	r0, r4
 800a848:	d100      	bne.n	800a84c <_svfprintf_r+0xb30>
 800a84a:	e10d      	b.n	800aa68 <_svfprintf_r+0xd4c>
 800a84c:	9a08      	ldr	r2, [sp, #32]
 800a84e:	1a83      	subs	r3, r0, r2
 800a850:	9309      	str	r3, [sp, #36]	; 0x24
 800a852:	0023      	movs	r3, r4
 800a854:	940c      	str	r4, [sp, #48]	; 0x30
 800a856:	e44e      	b.n	800a0f6 <_svfprintf_r+0x3da>
 800a858:	9808      	ldr	r0, [sp, #32]
 800a85a:	f7f5 fc53 	bl	8000104 <strlen>
 800a85e:	9009      	str	r0, [sp, #36]	; 0x24
 800a860:	e7f7      	b.n	800a852 <_svfprintf_r+0xb36>
 800a862:	2310      	movs	r3, #16
 800a864:	431e      	orrs	r6, r3
 800a866:	2320      	movs	r3, #32
 800a868:	0030      	movs	r0, r6
 800a86a:	4018      	ands	r0, r3
 800a86c:	421e      	tst	r6, r3
 800a86e:	d009      	beq.n	800a884 <_svfprintf_r+0xb68>
 800a870:	3b19      	subs	r3, #25
 800a872:	3407      	adds	r4, #7
 800a874:	439c      	bics	r4, r3
 800a876:	0022      	movs	r2, r4
 800a878:	ca18      	ldmia	r2!, {r3, r4}
 800a87a:	9306      	str	r3, [sp, #24]
 800a87c:	9407      	str	r4, [sp, #28]
 800a87e:	920d      	str	r2, [sp, #52]	; 0x34
 800a880:	2301      	movs	r3, #1
 800a882:	e79d      	b.n	800a7c0 <_svfprintf_r+0xaa4>
 800a884:	0023      	movs	r3, r4
 800a886:	cb04      	ldmia	r3!, {r2}
 800a888:	0031      	movs	r1, r6
 800a88a:	930d      	str	r3, [sp, #52]	; 0x34
 800a88c:	2310      	movs	r3, #16
 800a88e:	4019      	ands	r1, r3
 800a890:	421e      	tst	r6, r3
 800a892:	d003      	beq.n	800a89c <_svfprintf_r+0xb80>
 800a894:	9206      	str	r2, [sp, #24]
 800a896:	9007      	str	r0, [sp, #28]
 800a898:	3b0f      	subs	r3, #15
 800a89a:	e791      	b.n	800a7c0 <_svfprintf_r+0xaa4>
 800a89c:	2340      	movs	r3, #64	; 0x40
 800a89e:	0030      	movs	r0, r6
 800a8a0:	4018      	ands	r0, r3
 800a8a2:	421e      	tst	r6, r3
 800a8a4:	d003      	beq.n	800a8ae <_svfprintf_r+0xb92>
 800a8a6:	b293      	uxth	r3, r2
 800a8a8:	9306      	str	r3, [sp, #24]
 800a8aa:	9107      	str	r1, [sp, #28]
 800a8ac:	e7e8      	b.n	800a880 <_svfprintf_r+0xb64>
 800a8ae:	2380      	movs	r3, #128	; 0x80
 800a8b0:	0031      	movs	r1, r6
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4019      	ands	r1, r3
 800a8b6:	421e      	tst	r6, r3
 800a8b8:	d003      	beq.n	800a8c2 <_svfprintf_r+0xba6>
 800a8ba:	b2d3      	uxtb	r3, r2
 800a8bc:	9306      	str	r3, [sp, #24]
 800a8be:	9007      	str	r0, [sp, #28]
 800a8c0:	e7de      	b.n	800a880 <_svfprintf_r+0xb64>
 800a8c2:	9206      	str	r2, [sp, #24]
 800a8c4:	e7f1      	b.n	800a8aa <_svfprintf_r+0xb8e>
 800a8c6:	4b89      	ldr	r3, [pc, #548]	; (800aaec <_svfprintf_r+0xdd0>)
 800a8c8:	0030      	movs	r0, r6
 800a8ca:	931f      	str	r3, [sp, #124]	; 0x7c
 800a8cc:	2320      	movs	r3, #32
 800a8ce:	4018      	ands	r0, r3
 800a8d0:	421e      	tst	r6, r3
 800a8d2:	d01a      	beq.n	800a90a <_svfprintf_r+0xbee>
 800a8d4:	3b19      	subs	r3, #25
 800a8d6:	3407      	adds	r4, #7
 800a8d8:	439c      	bics	r4, r3
 800a8da:	0022      	movs	r2, r4
 800a8dc:	ca18      	ldmia	r2!, {r3, r4}
 800a8de:	9306      	str	r3, [sp, #24]
 800a8e0:	9407      	str	r4, [sp, #28]
 800a8e2:	920d      	str	r2, [sp, #52]	; 0x34
 800a8e4:	07f3      	lsls	r3, r6, #31
 800a8e6:	d50a      	bpl.n	800a8fe <_svfprintf_r+0xbe2>
 800a8e8:	9b06      	ldr	r3, [sp, #24]
 800a8ea:	9a07      	ldr	r2, [sp, #28]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	d006      	beq.n	800a8fe <_svfprintf_r+0xbe2>
 800a8f0:	2230      	movs	r2, #48	; 0x30
 800a8f2:	ab25      	add	r3, sp, #148	; 0x94
 800a8f4:	701a      	strb	r2, [r3, #0]
 800a8f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a8f8:	705a      	strb	r2, [r3, #1]
 800a8fa:	2302      	movs	r3, #2
 800a8fc:	431e      	orrs	r6, r3
 800a8fe:	4b78      	ldr	r3, [pc, #480]	; (800aae0 <_svfprintf_r+0xdc4>)
 800a900:	401e      	ands	r6, r3
 800a902:	2302      	movs	r3, #2
 800a904:	e75c      	b.n	800a7c0 <_svfprintf_r+0xaa4>
 800a906:	4b78      	ldr	r3, [pc, #480]	; (800aae8 <_svfprintf_r+0xdcc>)
 800a908:	e7de      	b.n	800a8c8 <_svfprintf_r+0xbac>
 800a90a:	0023      	movs	r3, r4
 800a90c:	cb04      	ldmia	r3!, {r2}
 800a90e:	0031      	movs	r1, r6
 800a910:	930d      	str	r3, [sp, #52]	; 0x34
 800a912:	2310      	movs	r3, #16
 800a914:	4019      	ands	r1, r3
 800a916:	421e      	tst	r6, r3
 800a918:	d002      	beq.n	800a920 <_svfprintf_r+0xc04>
 800a91a:	9206      	str	r2, [sp, #24]
 800a91c:	9007      	str	r0, [sp, #28]
 800a91e:	e7e1      	b.n	800a8e4 <_svfprintf_r+0xbc8>
 800a920:	2340      	movs	r3, #64	; 0x40
 800a922:	0030      	movs	r0, r6
 800a924:	4018      	ands	r0, r3
 800a926:	421e      	tst	r6, r3
 800a928:	d003      	beq.n	800a932 <_svfprintf_r+0xc16>
 800a92a:	b293      	uxth	r3, r2
 800a92c:	9306      	str	r3, [sp, #24]
 800a92e:	9107      	str	r1, [sp, #28]
 800a930:	e7d8      	b.n	800a8e4 <_svfprintf_r+0xbc8>
 800a932:	2380      	movs	r3, #128	; 0x80
 800a934:	0031      	movs	r1, r6
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4019      	ands	r1, r3
 800a93a:	421e      	tst	r6, r3
 800a93c:	d002      	beq.n	800a944 <_svfprintf_r+0xc28>
 800a93e:	b2d3      	uxtb	r3, r2
 800a940:	9306      	str	r3, [sp, #24]
 800a942:	e7eb      	b.n	800a91c <_svfprintf_r+0xc00>
 800a944:	9206      	str	r2, [sp, #24]
 800a946:	e7f2      	b.n	800a92e <_svfprintf_r+0xc12>
 800a948:	9b07      	ldr	r3, [sp, #28]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d10a      	bne.n	800a964 <_svfprintf_r+0xc48>
 800a94e:	9b06      	ldr	r3, [sp, #24]
 800a950:	2b09      	cmp	r3, #9
 800a952:	d807      	bhi.n	800a964 <_svfprintf_r+0xc48>
 800a954:	23e7      	movs	r3, #231	; 0xe7
 800a956:	aa1e      	add	r2, sp, #120	; 0x78
 800a958:	189b      	adds	r3, r3, r2
 800a95a:	9a06      	ldr	r2, [sp, #24]
 800a95c:	3230      	adds	r2, #48	; 0x30
 800a95e:	701a      	strb	r2, [r3, #0]
 800a960:	f000 fc18 	bl	800b194 <_svfprintf_r+0x1478>
 800a964:	2680      	movs	r6, #128	; 0x80
 800a966:	2300      	movs	r3, #0
 800a968:	00f6      	lsls	r6, r6, #3
 800a96a:	930e      	str	r3, [sp, #56]	; 0x38
 800a96c:	ad58      	add	r5, sp, #352	; 0x160
 800a96e:	4026      	ands	r6, r4
 800a970:	220a      	movs	r2, #10
 800a972:	9806      	ldr	r0, [sp, #24]
 800a974:	9907      	ldr	r1, [sp, #28]
 800a976:	2300      	movs	r3, #0
 800a978:	f7f5 fd94 	bl	80004a4 <__aeabi_uldivmod>
 800a97c:	1e6b      	subs	r3, r5, #1
 800a97e:	3230      	adds	r2, #48	; 0x30
 800a980:	9308      	str	r3, [sp, #32]
 800a982:	701a      	strb	r2, [r3, #0]
 800a984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a986:	900c      	str	r0, [sp, #48]	; 0x30
 800a988:	3301      	adds	r3, #1
 800a98a:	9110      	str	r1, [sp, #64]	; 0x40
 800a98c:	930e      	str	r3, [sp, #56]	; 0x38
 800a98e:	2e00      	cmp	r6, #0
 800a990:	d01d      	beq.n	800a9ce <_svfprintf_r+0xcb2>
 800a992:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a994:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d118      	bne.n	800a9ce <_svfprintf_r+0xcb2>
 800a99c:	2aff      	cmp	r2, #255	; 0xff
 800a99e:	d016      	beq.n	800a9ce <_svfprintf_r+0xcb2>
 800a9a0:	9b07      	ldr	r3, [sp, #28]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d102      	bne.n	800a9ac <_svfprintf_r+0xc90>
 800a9a6:	9b06      	ldr	r3, [sp, #24]
 800a9a8:	2b09      	cmp	r3, #9
 800a9aa:	d910      	bls.n	800a9ce <_svfprintf_r+0xcb2>
 800a9ac:	9b08      	ldr	r3, [sp, #32]
 800a9ae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a9b0:	991d      	ldr	r1, [sp, #116]	; 0x74
 800a9b2:	1a9b      	subs	r3, r3, r2
 800a9b4:	0018      	movs	r0, r3
 800a9b6:	9308      	str	r3, [sp, #32]
 800a9b8:	f7fd ffe7 	bl	800898a <strncpy>
 800a9bc:	2200      	movs	r2, #0
 800a9be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9c0:	920e      	str	r2, [sp, #56]	; 0x38
 800a9c2:	785b      	ldrb	r3, [r3, #1]
 800a9c4:	1e5a      	subs	r2, r3, #1
 800a9c6:	4193      	sbcs	r3, r2
 800a9c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9ca:	18d3      	adds	r3, r2, r3
 800a9cc:	9312      	str	r3, [sp, #72]	; 0x48
 800a9ce:	9b07      	ldr	r3, [sp, #28]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10f      	bne.n	800a9f4 <_svfprintf_r+0xcd8>
 800a9d4:	9b06      	ldr	r3, [sp, #24]
 800a9d6:	2b09      	cmp	r3, #9
 800a9d8:	d80c      	bhi.n	800a9f4 <_svfprintf_r+0xcd8>
 800a9da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9dc:	9a08      	ldr	r2, [sp, #32]
 800a9de:	9319      	str	r3, [sp, #100]	; 0x64
 800a9e0:	ab58      	add	r3, sp, #352	; 0x160
 800a9e2:	1a9b      	subs	r3, r3, r2
 800a9e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	0026      	movs	r6, r4
 800a9ea:	930c      	str	r3, [sp, #48]	; 0x30
 800a9ec:	001d      	movs	r5, r3
 800a9ee:	9310      	str	r3, [sp, #64]	; 0x40
 800a9f0:	9311      	str	r3, [sp, #68]	; 0x44
 800a9f2:	e4f2      	b.n	800a3da <_svfprintf_r+0x6be>
 800a9f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9f6:	9d08      	ldr	r5, [sp, #32]
 800a9f8:	9306      	str	r3, [sp, #24]
 800a9fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9fc:	9307      	str	r3, [sp, #28]
 800a9fe:	e7b7      	b.n	800a970 <_svfprintf_r+0xc54>
 800aa00:	200f      	movs	r0, #15
 800aa02:	ab58      	add	r3, sp, #352	; 0x160
 800aa04:	9308      	str	r3, [sp, #32]
 800aa06:	9b08      	ldr	r3, [sp, #32]
 800aa08:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	9308      	str	r3, [sp, #32]
 800aa0e:	9b06      	ldr	r3, [sp, #24]
 800aa10:	4003      	ands	r3, r0
 800aa12:	5cd3      	ldrb	r3, [r2, r3]
 800aa14:	9a08      	ldr	r2, [sp, #32]
 800aa16:	7013      	strb	r3, [r2, #0]
 800aa18:	9b07      	ldr	r3, [sp, #28]
 800aa1a:	0719      	lsls	r1, r3, #28
 800aa1c:	9b06      	ldr	r3, [sp, #24]
 800aa1e:	091a      	lsrs	r2, r3, #4
 800aa20:	9b07      	ldr	r3, [sp, #28]
 800aa22:	4311      	orrs	r1, r2
 800aa24:	091b      	lsrs	r3, r3, #4
 800aa26:	9307      	str	r3, [sp, #28]
 800aa28:	000b      	movs	r3, r1
 800aa2a:	9a07      	ldr	r2, [sp, #28]
 800aa2c:	9106      	str	r1, [sp, #24]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	d1e9      	bne.n	800aa06 <_svfprintf_r+0xcea>
 800aa32:	e7d2      	b.n	800a9da <_svfprintf_r+0xcbe>
 800aa34:	aa58      	add	r2, sp, #352	; 0x160
 800aa36:	9208      	str	r2, [sp, #32]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1ce      	bne.n	800a9da <_svfprintf_r+0xcbe>
 800aa3c:	07f6      	lsls	r6, r6, #31
 800aa3e:	d5cc      	bpl.n	800a9da <_svfprintf_r+0xcbe>
 800aa40:	aa1e      	add	r2, sp, #120	; 0x78
 800aa42:	33e7      	adds	r3, #231	; 0xe7
 800aa44:	189b      	adds	r3, r3, r2
 800aa46:	2230      	movs	r2, #48	; 0x30
 800aa48:	e789      	b.n	800a95e <_svfprintf_r+0xc42>
 800aa4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d100      	bne.n	800aa52 <_svfprintf_r+0xd36>
 800aa50:	e364      	b.n	800b11c <_svfprintf_r+0x1400>
 800aa52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa54:	211b      	movs	r1, #27
 800aa56:	ab3f      	add	r3, sp, #252	; 0xfc
 800aa58:	701a      	strb	r2, [r3, #0]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	a81e      	add	r0, sp, #120	; 0x78
 800aa5e:	1809      	adds	r1, r1, r0
 800aa60:	700a      	strb	r2, [r1, #0]
 800aa62:	940d      	str	r4, [sp, #52]	; 0x34
 800aa64:	f7ff fabd 	bl	8009fe2 <_svfprintf_r+0x2c6>
 800aa68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa6a:	f7ff fb44 	bl	800a0f6 <_svfprintf_r+0x3da>
 800aa6e:	2010      	movs	r0, #16
 800aa70:	1812      	adds	r2, r2, r0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	922e      	str	r2, [sp, #184]	; 0xb8
 800aa76:	932d      	str	r3, [sp, #180]	; 0xb4
 800aa78:	2b07      	cmp	r3, #7
 800aa7a:	dd08      	ble.n	800aa8e <_svfprintf_r+0xd72>
 800aa7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa80:	aa2c      	add	r2, sp, #176	; 0xb0
 800aa82:	f003 fa61 	bl	800df48 <__ssprint_r>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	d000      	beq.n	800aa8c <_svfprintf_r+0xd70>
 800aa8a:	e326      	b.n	800b0da <_svfprintf_r+0x13be>
 800aa8c:	a92f      	add	r1, sp, #188	; 0xbc
 800aa8e:	000f      	movs	r7, r1
 800aa90:	3c10      	subs	r4, #16
 800aa92:	e4c5      	b.n	800a420 <_svfprintf_r+0x704>
 800aa94:	2010      	movs	r0, #16
 800aa96:	1812      	adds	r2, r2, r0
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	922e      	str	r2, [sp, #184]	; 0xb8
 800aa9c:	932d      	str	r3, [sp, #180]	; 0xb4
 800aa9e:	2b07      	cmp	r3, #7
 800aaa0:	dd08      	ble.n	800aab4 <_svfprintf_r+0xd98>
 800aaa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aaa4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aaa6:	aa2c      	add	r2, sp, #176	; 0xb0
 800aaa8:	f003 fa4e 	bl	800df48 <__ssprint_r>
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d000      	beq.n	800aab2 <_svfprintf_r+0xd96>
 800aab0:	e313      	b.n	800b0da <_svfprintf_r+0x13be>
 800aab2:	a92f      	add	r1, sp, #188	; 0xbc
 800aab4:	000f      	movs	r7, r1
 800aab6:	3c10      	subs	r4, #16
 800aab8:	e50b      	b.n	800a4d2 <_svfprintf_r+0x7b6>
 800aaba:	2010      	movs	r0, #16
 800aabc:	1812      	adds	r2, r2, r0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	922e      	str	r2, [sp, #184]	; 0xb8
 800aac2:	932d      	str	r3, [sp, #180]	; 0xb4
 800aac4:	2b07      	cmp	r3, #7
 800aac6:	dd08      	ble.n	800aada <_svfprintf_r+0xdbe>
 800aac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aaca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aacc:	aa2c      	add	r2, sp, #176	; 0xb0
 800aace:	f003 fa3b 	bl	800df48 <__ssprint_r>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	d000      	beq.n	800aad8 <_svfprintf_r+0xdbc>
 800aad6:	e300      	b.n	800b0da <_svfprintf_r+0x13be>
 800aad8:	a92f      	add	r1, sp, #188	; 0xbc
 800aada:	000f      	movs	r7, r1
 800aadc:	3c10      	subs	r4, #16
 800aade:	e518      	b.n	800a512 <_svfprintf_r+0x7f6>
 800aae0:	fffffbff 	.word	0xfffffbff
 800aae4:	00007830 	.word	0x00007830
 800aae8:	0800f9bc 	.word	0x0800f9bc
 800aaec:	0800f9cd 	.word	0x0800f9cd
 800aaf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aaf2:	2b65      	cmp	r3, #101	; 0x65
 800aaf4:	dc00      	bgt.n	800aaf8 <_svfprintf_r+0xddc>
 800aaf6:	e241      	b.n	800af7c <_svfprintf_r+0x1260>
 800aaf8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800aafa:	9915      	ldr	r1, [sp, #84]	; 0x54
 800aafc:	2200      	movs	r2, #0
 800aafe:	2300      	movs	r3, #0
 800ab00:	f7f5 fca2 	bl	8000448 <__aeabi_dcmpeq>
 800ab04:	2800      	cmp	r0, #0
 800ab06:	d077      	beq.n	800abf8 <_svfprintf_r+0xedc>
 800ab08:	4bca      	ldr	r3, [pc, #808]	; (800ae34 <_svfprintf_r+0x1118>)
 800ab0a:	603b      	str	r3, [r7, #0]
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	607b      	str	r3, [r7, #4]
 800ab10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab12:	3708      	adds	r7, #8
 800ab14:	3301      	adds	r3, #1
 800ab16:	932e      	str	r3, [sp, #184]	; 0xb8
 800ab18:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	932d      	str	r3, [sp, #180]	; 0xb4
 800ab1e:	2b07      	cmp	r3, #7
 800ab20:	dd08      	ble.n	800ab34 <_svfprintf_r+0xe18>
 800ab22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab24:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab26:	aa2c      	add	r2, sp, #176	; 0xb0
 800ab28:	f003 fa0e 	bl	800df48 <__ssprint_r>
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	d000      	beq.n	800ab32 <_svfprintf_r+0xe16>
 800ab30:	e2d3      	b.n	800b0da <_svfprintf_r+0x13be>
 800ab32:	af2f      	add	r7, sp, #188	; 0xbc
 800ab34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	db01      	blt.n	800ab40 <_svfprintf_r+0xe24>
 800ab3c:	07f3      	lsls	r3, r6, #31
 800ab3e:	d51b      	bpl.n	800ab78 <_svfprintf_r+0xe5c>
 800ab40:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ab42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab44:	603b      	str	r3, [r7, #0]
 800ab46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ab48:	607b      	str	r3, [r7, #4]
 800ab4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	189b      	adds	r3, r3, r2
 800ab50:	932e      	str	r3, [sp, #184]	; 0xb8
 800ab52:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ab54:	3301      	adds	r3, #1
 800ab56:	932d      	str	r3, [sp, #180]	; 0xb4
 800ab58:	2b07      	cmp	r3, #7
 800ab5a:	dd08      	ble.n	800ab6e <_svfprintf_r+0xe52>
 800ab5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab60:	aa2c      	add	r2, sp, #176	; 0xb0
 800ab62:	f003 f9f1 	bl	800df48 <__ssprint_r>
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d000      	beq.n	800ab6c <_svfprintf_r+0xe50>
 800ab6a:	e2b6      	b.n	800b0da <_svfprintf_r+0x13be>
 800ab6c:	af2f      	add	r7, sp, #188	; 0xbc
 800ab6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab70:	2510      	movs	r5, #16
 800ab72:	1e5c      	subs	r4, r3, #1
 800ab74:	2c00      	cmp	r4, #0
 800ab76:	dc2e      	bgt.n	800abd6 <_svfprintf_r+0xeba>
 800ab78:	0776      	lsls	r6, r6, #29
 800ab7a:	d500      	bpl.n	800ab7e <_svfprintf_r+0xe62>
 800ab7c:	e290      	b.n	800b0a0 <_svfprintf_r+0x1384>
 800ab7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ab80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ab82:	4293      	cmp	r3, r2
 800ab84:	da00      	bge.n	800ab88 <_svfprintf_r+0xe6c>
 800ab86:	0013      	movs	r3, r2
 800ab88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab8a:	18d3      	adds	r3, r2, r3
 800ab8c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab8e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d007      	beq.n	800aba4 <_svfprintf_r+0xe88>
 800ab94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab96:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab98:	aa2c      	add	r2, sp, #176	; 0xb0
 800ab9a:	f003 f9d5 	bl	800df48 <__ssprint_r>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d000      	beq.n	800aba4 <_svfprintf_r+0xe88>
 800aba2:	e29a      	b.n	800b0da <_svfprintf_r+0x13be>
 800aba4:	2300      	movs	r3, #0
 800aba6:	932d      	str	r3, [sp, #180]	; 0xb4
 800aba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d000      	beq.n	800abb0 <_svfprintf_r+0xe94>
 800abae:	e2b0      	b.n	800b112 <_svfprintf_r+0x13f6>
 800abb0:	af2f      	add	r7, sp, #188	; 0xbc
 800abb2:	e5dc      	b.n	800a76e <_svfprintf_r+0xa52>
 800abb4:	3210      	adds	r2, #16
 800abb6:	607d      	str	r5, [r7, #4]
 800abb8:	922e      	str	r2, [sp, #184]	; 0xb8
 800abba:	932d      	str	r3, [sp, #180]	; 0xb4
 800abbc:	2b07      	cmp	r3, #7
 800abbe:	dd08      	ble.n	800abd2 <_svfprintf_r+0xeb6>
 800abc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800abc4:	aa2c      	add	r2, sp, #176	; 0xb0
 800abc6:	f003 f9bf 	bl	800df48 <__ssprint_r>
 800abca:	2800      	cmp	r0, #0
 800abcc:	d000      	beq.n	800abd0 <_svfprintf_r+0xeb4>
 800abce:	e284      	b.n	800b0da <_svfprintf_r+0x13be>
 800abd0:	a92f      	add	r1, sp, #188	; 0xbc
 800abd2:	000f      	movs	r7, r1
 800abd4:	3c10      	subs	r4, #16
 800abd6:	0039      	movs	r1, r7
 800abd8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800abda:	4897      	ldr	r0, [pc, #604]	; (800ae38 <_svfprintf_r+0x111c>)
 800abdc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800abde:	3301      	adds	r3, #1
 800abe0:	3108      	adds	r1, #8
 800abe2:	6038      	str	r0, [r7, #0]
 800abe4:	2c10      	cmp	r4, #16
 800abe6:	dce5      	bgt.n	800abb4 <_svfprintf_r+0xe98>
 800abe8:	607c      	str	r4, [r7, #4]
 800abea:	18a4      	adds	r4, r4, r2
 800abec:	942e      	str	r4, [sp, #184]	; 0xb8
 800abee:	000f      	movs	r7, r1
 800abf0:	932d      	str	r3, [sp, #180]	; 0xb4
 800abf2:	2b07      	cmp	r3, #7
 800abf4:	ddc0      	ble.n	800ab78 <_svfprintf_r+0xe5c>
 800abf6:	e05f      	b.n	800acb8 <_svfprintf_r+0xf9c>
 800abf8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	dc78      	bgt.n	800acf0 <_svfprintf_r+0xfd4>
 800abfe:	4b8d      	ldr	r3, [pc, #564]	; (800ae34 <_svfprintf_r+0x1118>)
 800ac00:	603b      	str	r3, [r7, #0]
 800ac02:	2301      	movs	r3, #1
 800ac04:	607b      	str	r3, [r7, #4]
 800ac06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac08:	3708      	adds	r7, #8
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	932e      	str	r3, [sp, #184]	; 0xb8
 800ac0e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ac10:	3301      	adds	r3, #1
 800ac12:	932d      	str	r3, [sp, #180]	; 0xb4
 800ac14:	2b07      	cmp	r3, #7
 800ac16:	dd08      	ble.n	800ac2a <_svfprintf_r+0xf0e>
 800ac18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac1c:	aa2c      	add	r2, sp, #176	; 0xb0
 800ac1e:	f003 f993 	bl	800df48 <__ssprint_r>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	d000      	beq.n	800ac28 <_svfprintf_r+0xf0c>
 800ac26:	e258      	b.n	800b0da <_svfprintf_r+0x13be>
 800ac28:	af2f      	add	r7, sp, #188	; 0xbc
 800ac2a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ac2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac2e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ac30:	430b      	orrs	r3, r1
 800ac32:	2101      	movs	r1, #1
 800ac34:	4031      	ands	r1, r6
 800ac36:	430b      	orrs	r3, r1
 800ac38:	d09e      	beq.n	800ab78 <_svfprintf_r+0xe5c>
 800ac3a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ac3c:	603b      	str	r3, [r7, #0]
 800ac3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ac40:	607b      	str	r3, [r7, #4]
 800ac42:	189a      	adds	r2, r3, r2
 800ac44:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ac46:	922e      	str	r2, [sp, #184]	; 0xb8
 800ac48:	3301      	adds	r3, #1
 800ac4a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	2b07      	cmp	r3, #7
 800ac50:	dd08      	ble.n	800ac64 <_svfprintf_r+0xf48>
 800ac52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac54:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac56:	aa2c      	add	r2, sp, #176	; 0xb0
 800ac58:	f003 f976 	bl	800df48 <__ssprint_r>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d000      	beq.n	800ac62 <_svfprintf_r+0xf46>
 800ac60:	e23b      	b.n	800b0da <_svfprintf_r+0x13be>
 800ac62:	af2f      	add	r7, sp, #188	; 0xbc
 800ac64:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800ac66:	2c00      	cmp	r4, #0
 800ac68:	da19      	bge.n	800ac9e <_svfprintf_r+0xf82>
 800ac6a:	0038      	movs	r0, r7
 800ac6c:	2510      	movs	r5, #16
 800ac6e:	4264      	negs	r4, r4
 800ac70:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800ac72:	4a71      	ldr	r2, [pc, #452]	; (800ae38 <_svfprintf_r+0x111c>)
 800ac74:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ac76:	3101      	adds	r1, #1
 800ac78:	3708      	adds	r7, #8
 800ac7a:	6002      	str	r2, [r0, #0]
 800ac7c:	2c10      	cmp	r4, #16
 800ac7e:	dc25      	bgt.n	800accc <_svfprintf_r+0xfb0>
 800ac80:	6044      	str	r4, [r0, #4]
 800ac82:	18e4      	adds	r4, r4, r3
 800ac84:	942e      	str	r4, [sp, #184]	; 0xb8
 800ac86:	912d      	str	r1, [sp, #180]	; 0xb4
 800ac88:	2907      	cmp	r1, #7
 800ac8a:	dd08      	ble.n	800ac9e <_svfprintf_r+0xf82>
 800ac8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac90:	aa2c      	add	r2, sp, #176	; 0xb0
 800ac92:	f003 f959 	bl	800df48 <__ssprint_r>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d000      	beq.n	800ac9c <_svfprintf_r+0xf80>
 800ac9a:	e21e      	b.n	800b0da <_svfprintf_r+0x13be>
 800ac9c:	af2f      	add	r7, sp, #188	; 0xbc
 800ac9e:	9b08      	ldr	r3, [sp, #32]
 800aca0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800aca2:	603b      	str	r3, [r7, #0]
 800aca4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aca6:	18d2      	adds	r2, r2, r3
 800aca8:	922e      	str	r2, [sp, #184]	; 0xb8
 800acaa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800acac:	607b      	str	r3, [r7, #4]
 800acae:	3201      	adds	r2, #1
 800acb0:	922d      	str	r2, [sp, #180]	; 0xb4
 800acb2:	2a07      	cmp	r2, #7
 800acb4:	dc00      	bgt.n	800acb8 <_svfprintf_r+0xf9c>
 800acb6:	e45b      	b.n	800a570 <_svfprintf_r+0x854>
 800acb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800acba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800acbc:	aa2c      	add	r2, sp, #176	; 0xb0
 800acbe:	f003 f943 	bl	800df48 <__ssprint_r>
 800acc2:	2800      	cmp	r0, #0
 800acc4:	d000      	beq.n	800acc8 <_svfprintf_r+0xfac>
 800acc6:	e208      	b.n	800b0da <_svfprintf_r+0x13be>
 800acc8:	af2f      	add	r7, sp, #188	; 0xbc
 800acca:	e755      	b.n	800ab78 <_svfprintf_r+0xe5c>
 800accc:	3310      	adds	r3, #16
 800acce:	6045      	str	r5, [r0, #4]
 800acd0:	932e      	str	r3, [sp, #184]	; 0xb8
 800acd2:	912d      	str	r1, [sp, #180]	; 0xb4
 800acd4:	2907      	cmp	r1, #7
 800acd6:	dd08      	ble.n	800acea <_svfprintf_r+0xfce>
 800acd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800acda:	980a      	ldr	r0, [sp, #40]	; 0x28
 800acdc:	aa2c      	add	r2, sp, #176	; 0xb0
 800acde:	f003 f933 	bl	800df48 <__ssprint_r>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d000      	beq.n	800ace8 <_svfprintf_r+0xfcc>
 800ace6:	e1f8      	b.n	800b0da <_svfprintf_r+0x13be>
 800ace8:	af2f      	add	r7, sp, #188	; 0xbc
 800acea:	0038      	movs	r0, r7
 800acec:	3c10      	subs	r4, #16
 800acee:	e7bf      	b.n	800ac70 <_svfprintf_r+0xf54>
 800acf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acf2:	002c      	movs	r4, r5
 800acf4:	429d      	cmp	r5, r3
 800acf6:	dd00      	ble.n	800acfa <_svfprintf_r+0xfde>
 800acf8:	001c      	movs	r4, r3
 800acfa:	2c00      	cmp	r4, #0
 800acfc:	dd14      	ble.n	800ad28 <_svfprintf_r+0x100c>
 800acfe:	9b08      	ldr	r3, [sp, #32]
 800ad00:	607c      	str	r4, [r7, #4]
 800ad02:	603b      	str	r3, [r7, #0]
 800ad04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad06:	3708      	adds	r7, #8
 800ad08:	18e3      	adds	r3, r4, r3
 800ad0a:	932e      	str	r3, [sp, #184]	; 0xb8
 800ad0c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ad0e:	3301      	adds	r3, #1
 800ad10:	932d      	str	r3, [sp, #180]	; 0xb4
 800ad12:	2b07      	cmp	r3, #7
 800ad14:	dd08      	ble.n	800ad28 <_svfprintf_r+0x100c>
 800ad16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad18:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad1a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ad1c:	f003 f914 	bl	800df48 <__ssprint_r>
 800ad20:	2800      	cmp	r0, #0
 800ad22:	d000      	beq.n	800ad26 <_svfprintf_r+0x100a>
 800ad24:	e1d9      	b.n	800b0da <_svfprintf_r+0x13be>
 800ad26:	af2f      	add	r7, sp, #188	; 0xbc
 800ad28:	43e3      	mvns	r3, r4
 800ad2a:	17db      	asrs	r3, r3, #31
 800ad2c:	401c      	ands	r4, r3
 800ad2e:	1b2c      	subs	r4, r5, r4
 800ad30:	2c00      	cmp	r4, #0
 800ad32:	dd18      	ble.n	800ad66 <_svfprintf_r+0x104a>
 800ad34:	0039      	movs	r1, r7
 800ad36:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ad38:	483f      	ldr	r0, [pc, #252]	; (800ae38 <_svfprintf_r+0x111c>)
 800ad3a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	3108      	adds	r1, #8
 800ad40:	6038      	str	r0, [r7, #0]
 800ad42:	2c10      	cmp	r4, #16
 800ad44:	dc7a      	bgt.n	800ae3c <_svfprintf_r+0x1120>
 800ad46:	607c      	str	r4, [r7, #4]
 800ad48:	18a4      	adds	r4, r4, r2
 800ad4a:	000f      	movs	r7, r1
 800ad4c:	942e      	str	r4, [sp, #184]	; 0xb8
 800ad4e:	932d      	str	r3, [sp, #180]	; 0xb4
 800ad50:	2b07      	cmp	r3, #7
 800ad52:	dd08      	ble.n	800ad66 <_svfprintf_r+0x104a>
 800ad54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad56:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad58:	aa2c      	add	r2, sp, #176	; 0xb0
 800ad5a:	f003 f8f5 	bl	800df48 <__ssprint_r>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	d000      	beq.n	800ad64 <_svfprintf_r+0x1048>
 800ad62:	e1ba      	b.n	800b0da <_svfprintf_r+0x13be>
 800ad64:	af2f      	add	r7, sp, #188	; 0xbc
 800ad66:	9b08      	ldr	r3, [sp, #32]
 800ad68:	195d      	adds	r5, r3, r5
 800ad6a:	0573      	lsls	r3, r6, #21
 800ad6c:	d50b      	bpl.n	800ad86 <_svfprintf_r+0x106a>
 800ad6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d176      	bne.n	800ae62 <_svfprintf_r+0x1146>
 800ad74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d176      	bne.n	800ae68 <_svfprintf_r+0x114c>
 800ad7a:	9b08      	ldr	r3, [sp, #32]
 800ad7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad7e:	189b      	adds	r3, r3, r2
 800ad80:	429d      	cmp	r5, r3
 800ad82:	d900      	bls.n	800ad86 <_svfprintf_r+0x106a>
 800ad84:	001d      	movs	r5, r3
 800ad86:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	db01      	blt.n	800ad92 <_svfprintf_r+0x1076>
 800ad8e:	07f3      	lsls	r3, r6, #31
 800ad90:	d516      	bpl.n	800adc0 <_svfprintf_r+0x10a4>
 800ad92:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ad94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ad96:	603b      	str	r3, [r7, #0]
 800ad98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ad9a:	607b      	str	r3, [r7, #4]
 800ad9c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ad9e:	3708      	adds	r7, #8
 800ada0:	189b      	adds	r3, r3, r2
 800ada2:	932e      	str	r3, [sp, #184]	; 0xb8
 800ada4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ada6:	3301      	adds	r3, #1
 800ada8:	932d      	str	r3, [sp, #180]	; 0xb4
 800adaa:	2b07      	cmp	r3, #7
 800adac:	dd08      	ble.n	800adc0 <_svfprintf_r+0x10a4>
 800adae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800adb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800adb2:	aa2c      	add	r2, sp, #176	; 0xb0
 800adb4:	f003 f8c8 	bl	800df48 <__ssprint_r>
 800adb8:	2800      	cmp	r0, #0
 800adba:	d000      	beq.n	800adbe <_svfprintf_r+0x10a2>
 800adbc:	e18d      	b.n	800b0da <_svfprintf_r+0x13be>
 800adbe:	af2f      	add	r7, sp, #188	; 0xbc
 800adc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adc2:	9b08      	ldr	r3, [sp, #32]
 800adc4:	4694      	mov	ip, r2
 800adc6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800adc8:	4463      	add	r3, ip
 800adca:	1b5b      	subs	r3, r3, r5
 800adcc:	1b14      	subs	r4, r2, r4
 800adce:	429c      	cmp	r4, r3
 800add0:	dd00      	ble.n	800add4 <_svfprintf_r+0x10b8>
 800add2:	001c      	movs	r4, r3
 800add4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800add6:	2c00      	cmp	r4, #0
 800add8:	dd12      	ble.n	800ae00 <_svfprintf_r+0x10e4>
 800adda:	18e3      	adds	r3, r4, r3
 800addc:	932e      	str	r3, [sp, #184]	; 0xb8
 800adde:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ade0:	603d      	str	r5, [r7, #0]
 800ade2:	3301      	adds	r3, #1
 800ade4:	607c      	str	r4, [r7, #4]
 800ade6:	932d      	str	r3, [sp, #180]	; 0xb4
 800ade8:	3708      	adds	r7, #8
 800adea:	2b07      	cmp	r3, #7
 800adec:	dd08      	ble.n	800ae00 <_svfprintf_r+0x10e4>
 800adee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800adf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800adf2:	aa2c      	add	r2, sp, #176	; 0xb0
 800adf4:	f003 f8a8 	bl	800df48 <__ssprint_r>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d000      	beq.n	800adfe <_svfprintf_r+0x10e2>
 800adfc:	e16d      	b.n	800b0da <_svfprintf_r+0x13be>
 800adfe:	af2f      	add	r7, sp, #188	; 0xbc
 800ae00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ae04:	2510      	movs	r5, #16
 800ae06:	1ad3      	subs	r3, r2, r3
 800ae08:	43e2      	mvns	r2, r4
 800ae0a:	17d2      	asrs	r2, r2, #31
 800ae0c:	4014      	ands	r4, r2
 800ae0e:	1b1c      	subs	r4, r3, r4
 800ae10:	2c00      	cmp	r4, #0
 800ae12:	dc00      	bgt.n	800ae16 <_svfprintf_r+0x10fa>
 800ae14:	e6b0      	b.n	800ab78 <_svfprintf_r+0xe5c>
 800ae16:	0039      	movs	r1, r7
 800ae18:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ae1a:	4807      	ldr	r0, [pc, #28]	; (800ae38 <_svfprintf_r+0x111c>)
 800ae1c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ae1e:	3301      	adds	r3, #1
 800ae20:	3108      	adds	r1, #8
 800ae22:	6038      	str	r0, [r7, #0]
 800ae24:	2c10      	cmp	r4, #16
 800ae26:	dd00      	ble.n	800ae2a <_svfprintf_r+0x110e>
 800ae28:	e096      	b.n	800af58 <_svfprintf_r+0x123c>
 800ae2a:	1912      	adds	r2, r2, r4
 800ae2c:	607c      	str	r4, [r7, #4]
 800ae2e:	922e      	str	r2, [sp, #184]	; 0xb8
 800ae30:	e6dd      	b.n	800abee <_svfprintf_r+0xed2>
 800ae32:	46c0      	nop			; (mov r8, r8)
 800ae34:	0800f9de 	.word	0x0800f9de
 800ae38:	0800f9f0 	.word	0x0800f9f0
 800ae3c:	2010      	movs	r0, #16
 800ae3e:	1812      	adds	r2, r2, r0
 800ae40:	6078      	str	r0, [r7, #4]
 800ae42:	922e      	str	r2, [sp, #184]	; 0xb8
 800ae44:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae46:	2b07      	cmp	r3, #7
 800ae48:	dd08      	ble.n	800ae5c <_svfprintf_r+0x1140>
 800ae4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae4e:	aa2c      	add	r2, sp, #176	; 0xb0
 800ae50:	f003 f87a 	bl	800df48 <__ssprint_r>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d000      	beq.n	800ae5a <_svfprintf_r+0x113e>
 800ae58:	e13f      	b.n	800b0da <_svfprintf_r+0x13be>
 800ae5a:	a92f      	add	r1, sp, #188	; 0xbc
 800ae5c:	000f      	movs	r7, r1
 800ae5e:	3c10      	subs	r4, #16
 800ae60:	e768      	b.n	800ad34 <_svfprintf_r+0x1018>
 800ae62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d05d      	beq.n	800af24 <_svfprintf_r+0x1208>
 800ae68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	9310      	str	r3, [sp, #64]	; 0x40
 800ae6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae70:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ae72:	603b      	str	r3, [r7, #0]
 800ae74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae76:	607b      	str	r3, [r7, #4]
 800ae78:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	189b      	adds	r3, r3, r2
 800ae7e:	932e      	str	r3, [sp, #184]	; 0xb8
 800ae80:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ae82:	3301      	adds	r3, #1
 800ae84:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae86:	2b07      	cmp	r3, #7
 800ae88:	dd08      	ble.n	800ae9c <_svfprintf_r+0x1180>
 800ae8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae8e:	aa2c      	add	r2, sp, #176	; 0xb0
 800ae90:	f003 f85a 	bl	800df48 <__ssprint_r>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	d000      	beq.n	800ae9a <_svfprintf_r+0x117e>
 800ae98:	e11f      	b.n	800b0da <_svfprintf_r+0x13be>
 800ae9a:	af2f      	add	r7, sp, #188	; 0xbc
 800ae9c:	9b08      	ldr	r3, [sp, #32]
 800ae9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aea0:	189c      	adds	r4, r3, r2
 800aea2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aea4:	1b64      	subs	r4, r4, r5
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	429c      	cmp	r4, r3
 800aeaa:	dd00      	ble.n	800aeae <_svfprintf_r+0x1192>
 800aeac:	001c      	movs	r4, r3
 800aeae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800aeb0:	2c00      	cmp	r4, #0
 800aeb2:	dd12      	ble.n	800aeda <_svfprintf_r+0x11be>
 800aeb4:	18e3      	adds	r3, r4, r3
 800aeb6:	932e      	str	r3, [sp, #184]	; 0xb8
 800aeb8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800aeba:	603d      	str	r5, [r7, #0]
 800aebc:	3301      	adds	r3, #1
 800aebe:	607c      	str	r4, [r7, #4]
 800aec0:	932d      	str	r3, [sp, #180]	; 0xb4
 800aec2:	3708      	adds	r7, #8
 800aec4:	2b07      	cmp	r3, #7
 800aec6:	dd08      	ble.n	800aeda <_svfprintf_r+0x11be>
 800aec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aeca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aecc:	aa2c      	add	r2, sp, #176	; 0xb0
 800aece:	f003 f83b 	bl	800df48 <__ssprint_r>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d000      	beq.n	800aed8 <_svfprintf_r+0x11bc>
 800aed6:	e100      	b.n	800b0da <_svfprintf_r+0x13be>
 800aed8:	af2f      	add	r7, sp, #188	; 0xbc
 800aeda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aedc:	781a      	ldrb	r2, [r3, #0]
 800aede:	43e3      	mvns	r3, r4
 800aee0:	17db      	asrs	r3, r3, #31
 800aee2:	401c      	ands	r4, r3
 800aee4:	1b14      	subs	r4, r2, r4
 800aee6:	2c00      	cmp	r4, #0
 800aee8:	dd18      	ble.n	800af1c <_svfprintf_r+0x1200>
 800aeea:	0039      	movs	r1, r7
 800aeec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800aeee:	48aa      	ldr	r0, [pc, #680]	; (800b198 <_svfprintf_r+0x147c>)
 800aef0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800aef2:	3301      	adds	r3, #1
 800aef4:	3108      	adds	r1, #8
 800aef6:	6038      	str	r0, [r7, #0]
 800aef8:	2c10      	cmp	r4, #16
 800aefa:	dc1a      	bgt.n	800af32 <_svfprintf_r+0x1216>
 800aefc:	1912      	adds	r2, r2, r4
 800aefe:	607c      	str	r4, [r7, #4]
 800af00:	922e      	str	r2, [sp, #184]	; 0xb8
 800af02:	000f      	movs	r7, r1
 800af04:	932d      	str	r3, [sp, #180]	; 0xb4
 800af06:	2b07      	cmp	r3, #7
 800af08:	dd08      	ble.n	800af1c <_svfprintf_r+0x1200>
 800af0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af0e:	aa2c      	add	r2, sp, #176	; 0xb0
 800af10:	f003 f81a 	bl	800df48 <__ssprint_r>
 800af14:	2800      	cmp	r0, #0
 800af16:	d000      	beq.n	800af1a <_svfprintf_r+0x11fe>
 800af18:	e0df      	b.n	800b0da <_svfprintf_r+0x13be>
 800af1a:	af2f      	add	r7, sp, #188	; 0xbc
 800af1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	18ed      	adds	r5, r5, r3
 800af22:	e724      	b.n	800ad6e <_svfprintf_r+0x1052>
 800af24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af26:	3b01      	subs	r3, #1
 800af28:	9312      	str	r3, [sp, #72]	; 0x48
 800af2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af2c:	3b01      	subs	r3, #1
 800af2e:	9311      	str	r3, [sp, #68]	; 0x44
 800af30:	e79d      	b.n	800ae6e <_svfprintf_r+0x1152>
 800af32:	2010      	movs	r0, #16
 800af34:	1812      	adds	r2, r2, r0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	922e      	str	r2, [sp, #184]	; 0xb8
 800af3a:	932d      	str	r3, [sp, #180]	; 0xb4
 800af3c:	2b07      	cmp	r3, #7
 800af3e:	dd08      	ble.n	800af52 <_svfprintf_r+0x1236>
 800af40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af42:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af44:	aa2c      	add	r2, sp, #176	; 0xb0
 800af46:	f002 ffff 	bl	800df48 <__ssprint_r>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d000      	beq.n	800af50 <_svfprintf_r+0x1234>
 800af4e:	e0c4      	b.n	800b0da <_svfprintf_r+0x13be>
 800af50:	a92f      	add	r1, sp, #188	; 0xbc
 800af52:	000f      	movs	r7, r1
 800af54:	3c10      	subs	r4, #16
 800af56:	e7c8      	b.n	800aeea <_svfprintf_r+0x11ce>
 800af58:	3210      	adds	r2, #16
 800af5a:	607d      	str	r5, [r7, #4]
 800af5c:	922e      	str	r2, [sp, #184]	; 0xb8
 800af5e:	932d      	str	r3, [sp, #180]	; 0xb4
 800af60:	2b07      	cmp	r3, #7
 800af62:	dd08      	ble.n	800af76 <_svfprintf_r+0x125a>
 800af64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af66:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af68:	aa2c      	add	r2, sp, #176	; 0xb0
 800af6a:	f002 ffed 	bl	800df48 <__ssprint_r>
 800af6e:	2800      	cmp	r0, #0
 800af70:	d000      	beq.n	800af74 <_svfprintf_r+0x1258>
 800af72:	e0b2      	b.n	800b0da <_svfprintf_r+0x13be>
 800af74:	a92f      	add	r1, sp, #188	; 0xbc
 800af76:	000f      	movs	r7, r1
 800af78:	3c10      	subs	r4, #16
 800af7a:	e74c      	b.n	800ae16 <_svfprintf_r+0x10fa>
 800af7c:	003c      	movs	r4, r7
 800af7e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800af80:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800af82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af84:	3101      	adds	r1, #1
 800af86:	3301      	adds	r3, #1
 800af88:	3408      	adds	r4, #8
 800af8a:	2a01      	cmp	r2, #1
 800af8c:	dc03      	bgt.n	800af96 <_svfprintf_r+0x127a>
 800af8e:	2201      	movs	r2, #1
 800af90:	4216      	tst	r6, r2
 800af92:	d100      	bne.n	800af96 <_svfprintf_r+0x127a>
 800af94:	e07f      	b.n	800b096 <_svfprintf_r+0x137a>
 800af96:	9a08      	ldr	r2, [sp, #32]
 800af98:	912e      	str	r1, [sp, #184]	; 0xb8
 800af9a:	603a      	str	r2, [r7, #0]
 800af9c:	2201      	movs	r2, #1
 800af9e:	932d      	str	r3, [sp, #180]	; 0xb4
 800afa0:	607a      	str	r2, [r7, #4]
 800afa2:	2b07      	cmp	r3, #7
 800afa4:	dd08      	ble.n	800afb8 <_svfprintf_r+0x129c>
 800afa6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afa8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800afaa:	aa2c      	add	r2, sp, #176	; 0xb0
 800afac:	f002 ffcc 	bl	800df48 <__ssprint_r>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d000      	beq.n	800afb6 <_svfprintf_r+0x129a>
 800afb4:	e091      	b.n	800b0da <_svfprintf_r+0x13be>
 800afb6:	ac2f      	add	r4, sp, #188	; 0xbc
 800afb8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800afba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800afbc:	6023      	str	r3, [r4, #0]
 800afbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800afc0:	6063      	str	r3, [r4, #4]
 800afc2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800afc4:	3408      	adds	r4, #8
 800afc6:	189b      	adds	r3, r3, r2
 800afc8:	932e      	str	r3, [sp, #184]	; 0xb8
 800afca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800afcc:	3301      	adds	r3, #1
 800afce:	932d      	str	r3, [sp, #180]	; 0xb4
 800afd0:	2b07      	cmp	r3, #7
 800afd2:	dd07      	ble.n	800afe4 <_svfprintf_r+0x12c8>
 800afd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afd6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800afd8:	aa2c      	add	r2, sp, #176	; 0xb0
 800afda:	f002 ffb5 	bl	800df48 <__ssprint_r>
 800afde:	2800      	cmp	r0, #0
 800afe0:	d17b      	bne.n	800b0da <_svfprintf_r+0x13be>
 800afe2:	ac2f      	add	r4, sp, #188	; 0xbc
 800afe4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800afe6:	2200      	movs	r2, #0
 800afe8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800afea:	9915      	ldr	r1, [sp, #84]	; 0x54
 800afec:	9309      	str	r3, [sp, #36]	; 0x24
 800afee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aff0:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800aff2:	1e5d      	subs	r5, r3, #1
 800aff4:	2300      	movs	r3, #0
 800aff6:	f7f5 fa27 	bl	8000448 <__aeabi_dcmpeq>
 800affa:	2800      	cmp	r0, #0
 800affc:	d126      	bne.n	800b04c <_svfprintf_r+0x1330>
 800affe:	9b08      	ldr	r3, [sp, #32]
 800b000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b002:	3301      	adds	r3, #1
 800b004:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b006:	6023      	str	r3, [r4, #0]
 800b008:	1e7b      	subs	r3, r7, #1
 800b00a:	3201      	adds	r2, #1
 800b00c:	185b      	adds	r3, r3, r1
 800b00e:	6065      	str	r5, [r4, #4]
 800b010:	932e      	str	r3, [sp, #184]	; 0xb8
 800b012:	922d      	str	r2, [sp, #180]	; 0xb4
 800b014:	3408      	adds	r4, #8
 800b016:	2a07      	cmp	r2, #7
 800b018:	dd07      	ble.n	800b02a <_svfprintf_r+0x130e>
 800b01a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b01c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b01e:	aa2c      	add	r2, sp, #176	; 0xb0
 800b020:	f002 ff92 	bl	800df48 <__ssprint_r>
 800b024:	2800      	cmp	r0, #0
 800b026:	d158      	bne.n	800b0da <_svfprintf_r+0x13be>
 800b028:	ac2f      	add	r4, sp, #188	; 0xbc
 800b02a:	ab28      	add	r3, sp, #160	; 0xa0
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b030:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b032:	6063      	str	r3, [r4, #4]
 800b034:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b036:	189b      	adds	r3, r3, r2
 800b038:	932e      	str	r3, [sp, #184]	; 0xb8
 800b03a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b03c:	3301      	adds	r3, #1
 800b03e:	932d      	str	r3, [sp, #180]	; 0xb4
 800b040:	2b07      	cmp	r3, #7
 800b042:	dd00      	ble.n	800b046 <_svfprintf_r+0x132a>
 800b044:	e638      	b.n	800acb8 <_svfprintf_r+0xf9c>
 800b046:	3408      	adds	r4, #8
 800b048:	0027      	movs	r7, r4
 800b04a:	e595      	b.n	800ab78 <_svfprintf_r+0xe5c>
 800b04c:	2710      	movs	r7, #16
 800b04e:	2d00      	cmp	r5, #0
 800b050:	ddeb      	ble.n	800b02a <_svfprintf_r+0x130e>
 800b052:	0021      	movs	r1, r4
 800b054:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b056:	4850      	ldr	r0, [pc, #320]	; (800b198 <_svfprintf_r+0x147c>)
 800b058:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b05a:	3301      	adds	r3, #1
 800b05c:	3108      	adds	r1, #8
 800b05e:	6020      	str	r0, [r4, #0]
 800b060:	2d10      	cmp	r5, #16
 800b062:	dc07      	bgt.n	800b074 <_svfprintf_r+0x1358>
 800b064:	6065      	str	r5, [r4, #4]
 800b066:	000c      	movs	r4, r1
 800b068:	18ad      	adds	r5, r5, r2
 800b06a:	952e      	str	r5, [sp, #184]	; 0xb8
 800b06c:	932d      	str	r3, [sp, #180]	; 0xb4
 800b06e:	2b07      	cmp	r3, #7
 800b070:	dddb      	ble.n	800b02a <_svfprintf_r+0x130e>
 800b072:	e7d2      	b.n	800b01a <_svfprintf_r+0x12fe>
 800b074:	3210      	adds	r2, #16
 800b076:	6067      	str	r7, [r4, #4]
 800b078:	922e      	str	r2, [sp, #184]	; 0xb8
 800b07a:	932d      	str	r3, [sp, #180]	; 0xb4
 800b07c:	2b07      	cmp	r3, #7
 800b07e:	dd07      	ble.n	800b090 <_svfprintf_r+0x1374>
 800b080:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b082:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b084:	aa2c      	add	r2, sp, #176	; 0xb0
 800b086:	f002 ff5f 	bl	800df48 <__ssprint_r>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d125      	bne.n	800b0da <_svfprintf_r+0x13be>
 800b08e:	a92f      	add	r1, sp, #188	; 0xbc
 800b090:	000c      	movs	r4, r1
 800b092:	3d10      	subs	r5, #16
 800b094:	e7dd      	b.n	800b052 <_svfprintf_r+0x1336>
 800b096:	9808      	ldr	r0, [sp, #32]
 800b098:	912e      	str	r1, [sp, #184]	; 0xb8
 800b09a:	c705      	stmia	r7!, {r0, r2}
 800b09c:	932d      	str	r3, [sp, #180]	; 0xb4
 800b09e:	e7e6      	b.n	800b06e <_svfprintf_r+0x1352>
 800b0a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b0a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b0a4:	2510      	movs	r5, #16
 800b0a6:	1a9c      	subs	r4, r3, r2
 800b0a8:	2c00      	cmp	r4, #0
 800b0aa:	dc00      	bgt.n	800b0ae <_svfprintf_r+0x1392>
 800b0ac:	e567      	b.n	800ab7e <_svfprintf_r+0xe62>
 800b0ae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b0b0:	493a      	ldr	r1, [pc, #232]	; (800b19c <_svfprintf_r+0x1480>)
 800b0b2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	6039      	str	r1, [r7, #0]
 800b0b8:	2c10      	cmp	r4, #16
 800b0ba:	dc19      	bgt.n	800b0f0 <_svfprintf_r+0x13d4>
 800b0bc:	607c      	str	r4, [r7, #4]
 800b0be:	18a4      	adds	r4, r4, r2
 800b0c0:	942e      	str	r4, [sp, #184]	; 0xb8
 800b0c2:	932d      	str	r3, [sp, #180]	; 0xb4
 800b0c4:	2b07      	cmp	r3, #7
 800b0c6:	dc00      	bgt.n	800b0ca <_svfprintf_r+0x13ae>
 800b0c8:	e559      	b.n	800ab7e <_svfprintf_r+0xe62>
 800b0ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b0ce:	aa2c      	add	r2, sp, #176	; 0xb0
 800b0d0:	f002 ff3a 	bl	800df48 <__ssprint_r>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d100      	bne.n	800b0da <_svfprintf_r+0x13be>
 800b0d8:	e551      	b.n	800ab7e <_svfprintf_r+0xe62>
 800b0da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d101      	bne.n	800b0e4 <_svfprintf_r+0x13c8>
 800b0e0:	f7ff f845 	bl	800a16e <_svfprintf_r+0x452>
 800b0e4:	0019      	movs	r1, r3
 800b0e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b0e8:	f7fd fd80 	bl	8008bec <_free_r>
 800b0ec:	f7ff f83f 	bl	800a16e <_svfprintf_r+0x452>
 800b0f0:	3210      	adds	r2, #16
 800b0f2:	607d      	str	r5, [r7, #4]
 800b0f4:	922e      	str	r2, [sp, #184]	; 0xb8
 800b0f6:	932d      	str	r3, [sp, #180]	; 0xb4
 800b0f8:	3708      	adds	r7, #8
 800b0fa:	2b07      	cmp	r3, #7
 800b0fc:	dd07      	ble.n	800b10e <_svfprintf_r+0x13f2>
 800b0fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b100:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b102:	aa2c      	add	r2, sp, #176	; 0xb0
 800b104:	f002 ff20 	bl	800df48 <__ssprint_r>
 800b108:	2800      	cmp	r0, #0
 800b10a:	d1e6      	bne.n	800b0da <_svfprintf_r+0x13be>
 800b10c:	af2f      	add	r7, sp, #188	; 0xbc
 800b10e:	3c10      	subs	r4, #16
 800b110:	e7cd      	b.n	800b0ae <_svfprintf_r+0x1392>
 800b112:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b114:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b116:	f7fd fd69 	bl	8008bec <_free_r>
 800b11a:	e549      	b.n	800abb0 <_svfprintf_r+0xe94>
 800b11c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d101      	bne.n	800b126 <_svfprintf_r+0x140a>
 800b122:	f7ff f824 	bl	800a16e <_svfprintf_r+0x452>
 800b126:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b128:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b12a:	aa2c      	add	r2, sp, #176	; 0xb0
 800b12c:	f002 ff0c 	bl	800df48 <__ssprint_r>
 800b130:	f7ff f81d 	bl	800a16e <_svfprintf_r+0x452>
 800b134:	0034      	movs	r4, r6
 800b136:	2a00      	cmp	r2, #0
 800b138:	d101      	bne.n	800b13e <_svfprintf_r+0x1422>
 800b13a:	f7fe ff8c 	bl	800a056 <_svfprintf_r+0x33a>
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d101      	bne.n	800b146 <_svfprintf_r+0x142a>
 800b142:	f7ff fc01 	bl	800a948 <_svfprintf_r+0xc2c>
 800b146:	2b02      	cmp	r3, #2
 800b148:	d100      	bne.n	800b14c <_svfprintf_r+0x1430>
 800b14a:	e459      	b.n	800aa00 <_svfprintf_r+0xce4>
 800b14c:	2507      	movs	r5, #7
 800b14e:	ab58      	add	r3, sp, #352	; 0x160
 800b150:	9308      	str	r3, [sp, #32]
 800b152:	9a08      	ldr	r2, [sp, #32]
 800b154:	0013      	movs	r3, r2
 800b156:	3b01      	subs	r3, #1
 800b158:	9308      	str	r3, [sp, #32]
 800b15a:	9b06      	ldr	r3, [sp, #24]
 800b15c:	9908      	ldr	r1, [sp, #32]
 800b15e:	402b      	ands	r3, r5
 800b160:	3330      	adds	r3, #48	; 0x30
 800b162:	700b      	strb	r3, [r1, #0]
 800b164:	9907      	ldr	r1, [sp, #28]
 800b166:	074e      	lsls	r6, r1, #29
 800b168:	9906      	ldr	r1, [sp, #24]
 800b16a:	08c8      	lsrs	r0, r1, #3
 800b16c:	9907      	ldr	r1, [sp, #28]
 800b16e:	4306      	orrs	r6, r0
 800b170:	08c9      	lsrs	r1, r1, #3
 800b172:	9107      	str	r1, [sp, #28]
 800b174:	0031      	movs	r1, r6
 800b176:	9807      	ldr	r0, [sp, #28]
 800b178:	9606      	str	r6, [sp, #24]
 800b17a:	4301      	orrs	r1, r0
 800b17c:	d1e9      	bne.n	800b152 <_svfprintf_r+0x1436>
 800b17e:	07e1      	lsls	r1, r4, #31
 800b180:	d400      	bmi.n	800b184 <_svfprintf_r+0x1468>
 800b182:	e42a      	b.n	800a9da <_svfprintf_r+0xcbe>
 800b184:	2b30      	cmp	r3, #48	; 0x30
 800b186:	d100      	bne.n	800b18a <_svfprintf_r+0x146e>
 800b188:	e427      	b.n	800a9da <_svfprintf_r+0xcbe>
 800b18a:	2130      	movs	r1, #48	; 0x30
 800b18c:	9b08      	ldr	r3, [sp, #32]
 800b18e:	3b01      	subs	r3, #1
 800b190:	7019      	strb	r1, [r3, #0]
 800b192:	1e93      	subs	r3, r2, #2
 800b194:	9308      	str	r3, [sp, #32]
 800b196:	e420      	b.n	800a9da <_svfprintf_r+0xcbe>
 800b198:	0800f9f0 	.word	0x0800f9f0
 800b19c:	0800f9e0 	.word	0x0800f9e0

0800b1a0 <__ssvfscanf_r>:
 800b1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1a2:	4ca7      	ldr	r4, [pc, #668]	; (800b440 <__ssvfscanf_r+0x2a0>)
 800b1a4:	44a5      	add	sp, r4
 800b1a6:	af02      	add	r7, sp, #8
 800b1a8:	633b      	str	r3, [r7, #48]	; 0x30
 800b1aa:	000b      	movs	r3, r1
 800b1ac:	6378      	str	r0, [r7, #52]	; 0x34
 800b1ae:	6479      	str	r1, [r7, #68]	; 0x44
 800b1b0:	61ba      	str	r2, [r7, #24]
 800b1b2:	220c      	movs	r2, #12
 800b1b4:	5e9a      	ldrsh	r2, [r3, r2]
 800b1b6:	2380      	movs	r3, #128	; 0x80
 800b1b8:	019b      	lsls	r3, r3, #6
 800b1ba:	421a      	tst	r2, r3
 800b1bc:	d105      	bne.n	800b1ca <__ssvfscanf_r+0x2a>
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	818b      	strh	r3, [r1, #12]
 800b1c2:	4aa0      	ldr	r2, [pc, #640]	; (800b444 <__ssvfscanf_r+0x2a4>)
 800b1c4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	664b      	str	r3, [r1, #100]	; 0x64
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	617b      	str	r3, [r7, #20]
 800b1ce:	643b      	str	r3, [r7, #64]	; 0x40
 800b1d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1d2:	627b      	str	r3, [r7, #36]	; 0x24
 800b1d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	69ba      	ldr	r2, [r7, #24]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	3201      	adds	r2, #1
 800b1e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1e2:	61ba      	str	r2, [r7, #24]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d100      	bne.n	800b1ea <__ssvfscanf_r+0x4a>
 800b1e8:	e0d7      	b.n	800b39a <__ssvfscanf_r+0x1fa>
 800b1ea:	2608      	movs	r6, #8
 800b1ec:	2108      	movs	r1, #8
 800b1ee:	4a96      	ldr	r2, [pc, #600]	; (800b448 <__ssvfscanf_r+0x2a8>)
 800b1f0:	5cd2      	ldrb	r2, [r2, r3]
 800b1f2:	4016      	ands	r6, r2
 800b1f4:	420a      	tst	r2, r1
 800b1f6:	d01d      	beq.n	800b234 <__ssvfscanf_r+0x94>
 800b1f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	dd12      	ble.n	800b226 <__ssvfscanf_r+0x86>
 800b200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b202:	4991      	ldr	r1, [pc, #580]	; (800b448 <__ssvfscanf_r+0x2a8>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	781a      	ldrb	r2, [r3, #0]
 800b208:	5c8a      	ldrb	r2, [r1, r2]
 800b20a:	2108      	movs	r1, #8
 800b20c:	420a      	tst	r2, r1
 800b20e:	d0e3      	beq.n	800b1d8 <__ssvfscanf_r+0x38>
 800b210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b214:	3201      	adds	r2, #1
 800b216:	63ba      	str	r2, [r7, #56]	; 0x38
 800b218:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b21a:	3301      	adds	r3, #1
 800b21c:	6852      	ldr	r2, [r2, #4]
 800b21e:	600b      	str	r3, [r1, #0]
 800b220:	3a01      	subs	r2, #1
 800b222:	604a      	str	r2, [r1, #4]
 800b224:	e7e8      	b.n	800b1f8 <__ssvfscanf_r+0x58>
 800b226:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b228:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b22a:	f002 ff4d 	bl	800e0c8 <__ssrefill_r>
 800b22e:	2800      	cmp	r0, #0
 800b230:	d0e6      	beq.n	800b200 <__ssvfscanf_r+0x60>
 800b232:	e7d1      	b.n	800b1d8 <__ssvfscanf_r+0x38>
 800b234:	2b25      	cmp	r3, #37	; 0x25
 800b236:	d165      	bne.n	800b304 <__ssvfscanf_r+0x164>
 800b238:	250a      	movs	r5, #10
 800b23a:	2480      	movs	r4, #128	; 0x80
 800b23c:	69ba      	ldr	r2, [r7, #24]
 800b23e:	63fe      	str	r6, [r7, #60]	; 0x3c
 800b240:	3b16      	subs	r3, #22
 800b242:	69b9      	ldr	r1, [r7, #24]
 800b244:	3101      	adds	r1, #1
 800b246:	61b9      	str	r1, [r7, #24]
 800b248:	7811      	ldrb	r1, [r2, #0]
 800b24a:	0008      	movs	r0, r1
 800b24c:	3825      	subs	r0, #37	; 0x25
 800b24e:	2855      	cmp	r0, #85	; 0x55
 800b250:	d900      	bls.n	800b254 <__ssvfscanf_r+0xb4>
 800b252:	e170      	b.n	800b536 <__ssvfscanf_r+0x396>
 800b254:	f7f4 ff68 	bl	8000128 <__gnu_thumb1_case_uhi>
 800b258:	016f0056 	.word	0x016f0056
 800b25c:	016f016f 	.word	0x016f016f
 800b260:	0081016f 	.word	0x0081016f
 800b264:	016f016f 	.word	0x016f016f
 800b268:	016f016f 	.word	0x016f016f
 800b26c:	00b8016f 	.word	0x00b8016f
 800b270:	00b800b8 	.word	0x00b800b8
 800b274:	00b800b8 	.word	0x00b800b8
 800b278:	00b800b8 	.word	0x00b800b8
 800b27c:	00b800b8 	.word	0x00b800b8
 800b280:	016f00b8 	.word	0x016f00b8
 800b284:	016f016f 	.word	0x016f016f
 800b288:	016f016f 	.word	0x016f016f
 800b28c:	016f016f 	.word	0x016f016f
 800b290:	016f00d8 	.word	0x016f00d8
 800b294:	00c1010a 	.word	0x00c1010a
 800b298:	00d800d8 	.word	0x00d800d8
 800b29c:	016f00d8 	.word	0x016f00d8
 800b2a0:	016f016f 	.word	0x016f016f
 800b2a4:	009f016f 	.word	0x009f016f
 800b2a8:	016f016f 	.word	0x016f016f
 800b2ac:	016f00c9 	.word	0x016f00c9
 800b2b0:	016f016f 	.word	0x016f016f
 800b2b4:	016f00f0 	.word	0x016f00f0
 800b2b8:	016f016f 	.word	0x016f016f
 800b2bc:	00d1016f 	.word	0x00d1016f
 800b2c0:	016f016f 	.word	0x016f016f
 800b2c4:	016f00fe 	.word	0x016f00fe
 800b2c8:	016f016f 	.word	0x016f016f
 800b2cc:	016f016f 	.word	0x016f016f
 800b2d0:	016f00d8 	.word	0x016f00d8
 800b2d4:	00c3010c 	.word	0x00c3010c
 800b2d8:	00d800d8 	.word	0x00d800d8
 800b2dc:	009400d8 	.word	0x009400d8
 800b2e0:	009f012f 	.word	0x009f012f
 800b2e4:	0088016f 	.word	0x0088016f
 800b2e8:	011200a9 	.word	0x011200a9
 800b2ec:	011000cb 	.word	0x011000cb
 800b2f0:	016f016f 	.word	0x016f016f
 800b2f4:	00a600f2 	.word	0x00a600f2
 800b2f8:	016f00cf 	.word	0x016f00cf
 800b2fc:	00d1016f 	.word	0x00d1016f
 800b300:	00a6016f 	.word	0x00a6016f
 800b304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	dd12      	ble.n	800b332 <__ssvfscanf_r+0x192>
 800b30c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b30e:	69ba      	ldr	r2, [r7, #24]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3a01      	subs	r2, #1
 800b314:	7819      	ldrb	r1, [r3, #0]
 800b316:	7812      	ldrb	r2, [r2, #0]
 800b318:	4291      	cmp	r1, r2
 800b31a:	d13e      	bne.n	800b39a <__ssvfscanf_r+0x1fa>
 800b31c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b31e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b320:	6852      	ldr	r2, [r2, #4]
 800b322:	3301      	adds	r3, #1
 800b324:	600b      	str	r3, [r1, #0]
 800b326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b328:	3a01      	subs	r2, #1
 800b32a:	604a      	str	r2, [r1, #4]
 800b32c:	3301      	adds	r3, #1
 800b32e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b330:	e752      	b.n	800b1d8 <__ssvfscanf_r+0x38>
 800b332:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b334:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b336:	f002 fec7 	bl	800e0c8 <__ssrefill_r>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d0e6      	beq.n	800b30c <__ssvfscanf_r+0x16c>
 800b33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b340:	2b00      	cmp	r3, #0
 800b342:	d003      	beq.n	800b34c <__ssvfscanf_r+0x1ac>
 800b344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b346:	899b      	ldrh	r3, [r3, #12]
 800b348:	065b      	lsls	r3, r3, #25
 800b34a:	d526      	bpl.n	800b39a <__ssvfscanf_r+0x1fa>
 800b34c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d000      	beq.n	800b354 <__ssvfscanf_r+0x1b4>
 800b352:	e0f6      	b.n	800b542 <__ssvfscanf_r+0x3a2>
 800b354:	3b01      	subs	r3, #1
 800b356:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b358:	e104      	b.n	800b564 <__ssvfscanf_r+0x3c4>
 800b35a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b35c:	4332      	orrs	r2, r6
 800b35e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b360:	d11b      	bne.n	800b39a <__ssvfscanf_r+0x1fa>
 800b362:	2610      	movs	r6, #16
 800b364:	69ba      	ldr	r2, [r7, #24]
 800b366:	e76c      	b.n	800b242 <__ssvfscanf_r+0xa2>
 800b368:	421e      	tst	r6, r3
 800b36a:	d116      	bne.n	800b39a <__ssvfscanf_r+0x1fa>
 800b36c:	7851      	ldrb	r1, [r2, #1]
 800b36e:	296c      	cmp	r1, #108	; 0x6c
 800b370:	d103      	bne.n	800b37a <__ssvfscanf_r+0x1da>
 800b372:	3202      	adds	r2, #2
 800b374:	61ba      	str	r2, [r7, #24]
 800b376:	2202      	movs	r2, #2
 800b378:	e000      	b.n	800b37c <__ssvfscanf_r+0x1dc>
 800b37a:	2201      	movs	r2, #1
 800b37c:	4316      	orrs	r6, r2
 800b37e:	e7f1      	b.n	800b364 <__ssvfscanf_r+0x1c4>
 800b380:	421e      	tst	r6, r3
 800b382:	d10a      	bne.n	800b39a <__ssvfscanf_r+0x1fa>
 800b384:	7851      	ldrb	r1, [r2, #1]
 800b386:	2968      	cmp	r1, #104	; 0x68
 800b388:	d103      	bne.n	800b392 <__ssvfscanf_r+0x1f2>
 800b38a:	3202      	adds	r2, #2
 800b38c:	61ba      	str	r2, [r7, #24]
 800b38e:	2208      	movs	r2, #8
 800b390:	e7f4      	b.n	800b37c <__ssvfscanf_r+0x1dc>
 800b392:	2204      	movs	r2, #4
 800b394:	e7f2      	b.n	800b37c <__ssvfscanf_r+0x1dc>
 800b396:	421e      	tst	r6, r3
 800b398:	d0ed      	beq.n	800b376 <__ssvfscanf_r+0x1d6>
 800b39a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d000      	beq.n	800b3a2 <__ssvfscanf_r+0x202>
 800b3a0:	e0da      	b.n	800b558 <__ssvfscanf_r+0x3b8>
 800b3a2:	e0df      	b.n	800b564 <__ssvfscanf_r+0x3c4>
 800b3a4:	421e      	tst	r6, r3
 800b3a6:	d0dd      	beq.n	800b364 <__ssvfscanf_r+0x1c4>
 800b3a8:	e7f7      	b.n	800b39a <__ssvfscanf_r+0x1fa>
 800b3aa:	228f      	movs	r2, #143	; 0x8f
 800b3ac:	218f      	movs	r1, #143	; 0x8f
 800b3ae:	4032      	ands	r2, r6
 800b3b0:	420e      	tst	r6, r1
 800b3b2:	d1f2      	bne.n	800b39a <__ssvfscanf_r+0x1fa>
 800b3b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b3b6:	2900      	cmp	r1, #0
 800b3b8:	d104      	bne.n	800b3c4 <__ssvfscanf_r+0x224>
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	a902      	add	r1, sp, #8
 800b3be:	6439      	str	r1, [r7, #64]	; 0x40
 800b3c0:	600a      	str	r2, [r1, #0]
 800b3c2:	604a      	str	r2, [r1, #4]
 800b3c4:	4326      	orrs	r6, r4
 800b3c6:	e7cd      	b.n	800b364 <__ssvfscanf_r+0x1c4>
 800b3c8:	228f      	movs	r2, #143	; 0x8f
 800b3ca:	4216      	tst	r6, r2
 800b3cc:	d1e5      	bne.n	800b39a <__ssvfscanf_r+0x1fa>
 800b3ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3d0:	436a      	muls	r2, r5
 800b3d2:	3a30      	subs	r2, #48	; 0x30
 800b3d4:	188a      	adds	r2, r1, r2
 800b3d6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b3d8:	e7c4      	b.n	800b364 <__ssvfscanf_r+0x1c4>
 800b3da:	2301      	movs	r3, #1
 800b3dc:	431e      	orrs	r6, r3
 800b3de:	4b1b      	ldr	r3, [pc, #108]	; (800b44c <__ssvfscanf_r+0x2ac>)
 800b3e0:	617b      	str	r3, [r7, #20]
 800b3e2:	230a      	movs	r3, #10
 800b3e4:	2403      	movs	r4, #3
 800b3e6:	627b      	str	r3, [r7, #36]	; 0x24
 800b3e8:	e00f      	b.n	800b40a <__ssvfscanf_r+0x26a>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	431e      	orrs	r6, r3
 800b3ee:	4b18      	ldr	r3, [pc, #96]	; (800b450 <__ssvfscanf_r+0x2b0>)
 800b3f0:	617b      	str	r3, [r7, #20]
 800b3f2:	2308      	movs	r3, #8
 800b3f4:	e7f6      	b.n	800b3e4 <__ssvfscanf_r+0x244>
 800b3f6:	4b16      	ldr	r3, [pc, #88]	; (800b450 <__ssvfscanf_r+0x2b0>)
 800b3f8:	e7f2      	b.n	800b3e0 <__ssvfscanf_r+0x240>
 800b3fa:	2380      	movs	r3, #128	; 0x80
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	431e      	orrs	r6, r3
 800b400:	4b13      	ldr	r3, [pc, #76]	; (800b450 <__ssvfscanf_r+0x2b0>)
 800b402:	617b      	str	r3, [r7, #20]
 800b404:	2310      	movs	r3, #16
 800b406:	e7ed      	b.n	800b3e4 <__ssvfscanf_r+0x244>
 800b408:	2404      	movs	r4, #4
 800b40a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	dd55      	ble.n	800b4be <__ssvfscanf_r+0x31e>
 800b412:	0673      	lsls	r3, r6, #25
 800b414:	d407      	bmi.n	800b426 <__ssvfscanf_r+0x286>
 800b416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b418:	490b      	ldr	r1, [pc, #44]	; (800b448 <__ssvfscanf_r+0x2a8>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	781a      	ldrb	r2, [r3, #0]
 800b41e:	5c8a      	ldrb	r2, [r1, r2]
 800b420:	2108      	movs	r1, #8
 800b422:	420a      	tst	r2, r1
 800b424:	d152      	bne.n	800b4cc <__ssvfscanf_r+0x32c>
 800b426:	1e60      	subs	r0, r4, #1
 800b428:	2803      	cmp	r0, #3
 800b42a:	d863      	bhi.n	800b4f4 <__ssvfscanf_r+0x354>
 800b42c:	f7f4 fe7c 	bl	8000128 <__gnu_thumb1_case_uhi>
 800b430:	03bd01da 	.word	0x03bd01da
 800b434:	068a0579 	.word	0x068a0579
 800b438:	2301      	movs	r3, #1
 800b43a:	431e      	orrs	r6, r3
 800b43c:	2402      	movs	r4, #2
 800b43e:	e7e4      	b.n	800b40a <__ssvfscanf_r+0x26a>
 800b440:	fffffd34 	.word	0xfffffd34
 800b444:	ffffdfff 	.word	0xffffdfff
 800b448:	0800f6d9 	.word	0x0800f6d9
 800b44c:	08008685 	.word	0x08008685
 800b450:	0800dbf9 	.word	0x0800dbf9
 800b454:	2248      	movs	r2, #72	; 0x48
 800b456:	2318      	movs	r3, #24
 800b458:	189b      	adds	r3, r3, r2
 800b45a:	19d8      	adds	r0, r3, r7
 800b45c:	69b9      	ldr	r1, [r7, #24]
 800b45e:	f001 f9d7 	bl	800c810 <__sccl>
 800b462:	2340      	movs	r3, #64	; 0x40
 800b464:	2401      	movs	r4, #1
 800b466:	61b8      	str	r0, [r7, #24]
 800b468:	431e      	orrs	r6, r3
 800b46a:	e7ce      	b.n	800b40a <__ssvfscanf_r+0x26a>
 800b46c:	2301      	movs	r3, #1
 800b46e:	431e      	orrs	r6, r3
 800b470:	2340      	movs	r3, #64	; 0x40
 800b472:	2400      	movs	r4, #0
 800b474:	431e      	orrs	r6, r3
 800b476:	e7c8      	b.n	800b40a <__ssvfscanf_r+0x26a>
 800b478:	2388      	movs	r3, #136	; 0x88
 800b47a:	e7bf      	b.n	800b3fc <__ssvfscanf_r+0x25c>
 800b47c:	06f3      	lsls	r3, r6, #27
 800b47e:	d500      	bpl.n	800b482 <__ssvfscanf_r+0x2e2>
 800b480:	e6aa      	b.n	800b1d8 <__ssvfscanf_r+0x38>
 800b482:	2108      	movs	r1, #8
 800b484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b486:	cb04      	ldmia	r3!, {r2}
 800b488:	420e      	tst	r6, r1
 800b48a:	d003      	beq.n	800b494 <__ssvfscanf_r+0x2f4>
 800b48c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b48e:	7011      	strb	r1, [r2, #0]
 800b490:	633b      	str	r3, [r7, #48]	; 0x30
 800b492:	e6a1      	b.n	800b1d8 <__ssvfscanf_r+0x38>
 800b494:	0771      	lsls	r1, r6, #29
 800b496:	d502      	bpl.n	800b49e <__ssvfscanf_r+0x2fe>
 800b498:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b49a:	8011      	strh	r1, [r2, #0]
 800b49c:	e7f8      	b.n	800b490 <__ssvfscanf_r+0x2f0>
 800b49e:	07f1      	lsls	r1, r6, #31
 800b4a0:	d502      	bpl.n	800b4a8 <__ssvfscanf_r+0x308>
 800b4a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b4a4:	6011      	str	r1, [r2, #0]
 800b4a6:	e7f3      	b.n	800b490 <__ssvfscanf_r+0x2f0>
 800b4a8:	07b6      	lsls	r6, r6, #30
 800b4aa:	d5fa      	bpl.n	800b4a2 <__ssvfscanf_r+0x302>
 800b4ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b4ae:	6011      	str	r1, [r2, #0]
 800b4b0:	17c9      	asrs	r1, r1, #31
 800b4b2:	6051      	str	r1, [r2, #4]
 800b4b4:	e7ec      	b.n	800b490 <__ssvfscanf_r+0x2f0>
 800b4b6:	4ba2      	ldr	r3, [pc, #648]	; (800b740 <__ssvfscanf_r+0x5a0>)
 800b4b8:	617b      	str	r3, [r7, #20]
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	e792      	b.n	800b3e4 <__ssvfscanf_r+0x244>
 800b4be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b4c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b4c2:	f002 fe01 	bl	800e0c8 <__ssrefill_r>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	d0a3      	beq.n	800b412 <__ssvfscanf_r+0x272>
 800b4ca:	e738      	b.n	800b33e <__ssvfscanf_r+0x19e>
 800b4cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b4d0:	3201      	adds	r2, #1
 800b4d2:	63ba      	str	r2, [r7, #56]	; 0x38
 800b4d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4d6:	6852      	ldr	r2, [r2, #4]
 800b4d8:	3a01      	subs	r2, #1
 800b4da:	604a      	str	r2, [r1, #4]
 800b4dc:	2a00      	cmp	r2, #0
 800b4de:	dd02      	ble.n	800b4e6 <__ssvfscanf_r+0x346>
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	600b      	str	r3, [r1, #0]
 800b4e4:	e797      	b.n	800b416 <__ssvfscanf_r+0x276>
 800b4e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b4e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b4ea:	f002 fded 	bl	800e0c8 <__ssrefill_r>
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	d091      	beq.n	800b416 <__ssvfscanf_r+0x276>
 800b4f2:	e724      	b.n	800b33e <__ssvfscanf_r+0x19e>
 800b4f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	2a00      	cmp	r2, #0
 800b4fa:	d100      	bne.n	800b4fe <__ssvfscanf_r+0x35e>
 800b4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4fe:	2210      	movs	r2, #16
 800b500:	0034      	movs	r4, r6
 800b502:	4032      	ands	r2, r6
 800b504:	623a      	str	r2, [r7, #32]
 800b506:	401c      	ands	r4, r3
 800b508:	421e      	tst	r6, r3
 800b50a:	d100      	bne.n	800b50e <__ssvfscanf_r+0x36e>
 800b50c:	e0f3      	b.n	800b6f6 <__ssvfscanf_r+0x556>
 800b50e:	2a00      	cmp	r2, #0
 800b510:	d000      	beq.n	800b514 <__ssvfscanf_r+0x374>
 800b512:	e0b6      	b.n	800b682 <__ssvfscanf_r+0x4e2>
 800b514:	2080      	movs	r0, #128	; 0x80
 800b516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b518:	cb10      	ldmia	r3!, {r4}
 800b51a:	613b      	str	r3, [r7, #16]
 800b51c:	4206      	tst	r6, r0
 800b51e:	d100      	bne.n	800b522 <__ssvfscanf_r+0x382>
 800b520:	e0b7      	b.n	800b692 <__ssvfscanf_r+0x4f2>
 800b522:	2c00      	cmp	r4, #0
 800b524:	d007      	beq.n	800b536 <__ssvfscanf_r+0x396>
 800b526:	f7fb ffc5 	bl	80074b4 <malloc>
 800b52a:	6338      	str	r0, [r7, #48]	; 0x30
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d11f      	bne.n	800b570 <__ssvfscanf_r+0x3d0>
 800b530:	2301      	movs	r3, #1
 800b532:	425b      	negs	r3, r3
 800b534:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d013      	beq.n	800b564 <__ssvfscanf_r+0x3c4>
 800b53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53e:	3301      	adds	r3, #1
 800b540:	d10a      	bne.n	800b558 <__ssvfscanf_r+0x3b8>
 800b542:	2400      	movs	r4, #0
 800b544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b546:	681d      	ldr	r5, [r3, #0]
 800b548:	88db      	ldrh	r3, [r3, #6]
 800b54a:	42a3      	cmp	r3, r4
 800b54c:	dd01      	ble.n	800b552 <__ssvfscanf_r+0x3b2>
 800b54e:	f001 f82a 	bl	800c5a6 <__ssvfscanf_r+0x1406>
 800b552:	2301      	movs	r3, #1
 800b554:	425b      	negs	r3, r3
 800b556:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b55a:	6818      	ldr	r0, [r3, #0]
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d001      	beq.n	800b564 <__ssvfscanf_r+0x3c4>
 800b560:	f7fb ffb2 	bl	80074c8 <free>
 800b564:	46bd      	mov	sp, r7
 800b566:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b568:	23b1      	movs	r3, #177	; 0xb1
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	449d      	add	sp, r3
 800b56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b572:	6023      	str	r3, [r4, #0]
 800b574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b576:	88de      	ldrh	r6, [r3, #6]
 800b578:	889d      	ldrh	r5, [r3, #4]
 800b57a:	42ae      	cmp	r6, r5
 800b57c:	d30e      	bcc.n	800b59c <__ssvfscanf_r+0x3fc>
 800b57e:	4b71      	ldr	r3, [pc, #452]	; (800b744 <__ssvfscanf_r+0x5a4>)
 800b580:	429d      	cmp	r5, r3
 800b582:	d8d5      	bhi.n	800b530 <__ssvfscanf_r+0x390>
 800b584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b586:	3508      	adds	r5, #8
 800b588:	b2ad      	uxth	r5, r5
 800b58a:	6818      	ldr	r0, [r3, #0]
 800b58c:	00a9      	lsls	r1, r5, #2
 800b58e:	f002 f901 	bl	800d794 <realloc>
 800b592:	2800      	cmp	r0, #0
 800b594:	d0cc      	beq.n	800b530 <__ssvfscanf_r+0x390>
 800b596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b598:	6018      	str	r0, [r3, #0]
 800b59a:	809d      	strh	r5, [r3, #4]
 800b59c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b59e:	1c72      	adds	r2, r6, #1
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	00b6      	lsls	r6, r6, #2
 800b5a4:	50f4      	str	r4, [r6, r3]
 800b5a6:	2320      	movs	r3, #32
 800b5a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b5aa:	0026      	movs	r6, r4
 800b5ac:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800b5ae:	80ca      	strh	r2, [r1, #6]
 800b5b0:	61fb      	str	r3, [r7, #28]
 800b5b2:	2500      	movs	r5, #0
 800b5b4:	f7fd f9fe 	bl	80089b4 <__locale_mb_cur_max>
 800b5b8:	42a8      	cmp	r0, r5
 800b5ba:	d100      	bne.n	800b5be <__ssvfscanf_r+0x41e>
 800b5bc:	e6bf      	b.n	800b33e <__ssvfscanf_r+0x19e>
 800b5be:	1c6a      	adds	r2, r5, #1
 800b5c0:	60fa      	str	r2, [r7, #12]
 800b5c2:	228c      	movs	r2, #140	; 0x8c
 800b5c4:	2048      	movs	r0, #72	; 0x48
 800b5c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5c8:	0052      	lsls	r2, r2, #1
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	1812      	adds	r2, r2, r0
 800b5ce:	7819      	ldrb	r1, [r3, #0]
 800b5d0:	19d2      	adds	r2, r2, r7
 800b5d2:	5551      	strb	r1, [r2, r5]
 800b5d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b5d8:	6852      	ldr	r2, [r2, #4]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	600b      	str	r3, [r1, #0]
 800b5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e0:	3a01      	subs	r2, #1
 800b5e2:	604a      	str	r2, [r1, #4]
 800b5e4:	2b03      	cmp	r3, #3
 800b5e6:	d102      	bne.n	800b5ee <__ssvfscanf_r+0x44e>
 800b5e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5ea:	2b04      	cmp	r3, #4
 800b5ec:	d007      	beq.n	800b5fe <__ssvfscanf_r+0x45e>
 800b5ee:	2048      	movs	r0, #72	; 0x48
 800b5f0:	2310      	movs	r3, #16
 800b5f2:	181b      	adds	r3, r3, r0
 800b5f4:	2208      	movs	r2, #8
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	19d8      	adds	r0, r3, r7
 800b5fa:	f7fd f9ad 	bl	8008958 <memset>
 800b5fe:	2148      	movs	r1, #72	; 0x48
 800b600:	2310      	movs	r3, #16
 800b602:	228c      	movs	r2, #140	; 0x8c
 800b604:	185b      	adds	r3, r3, r1
 800b606:	0052      	lsls	r2, r2, #1
 800b608:	19db      	adds	r3, r3, r7
 800b60a:	1852      	adds	r2, r2, r1
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	0021      	movs	r1, r4
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b614:	19d2      	adds	r2, r2, r7
 800b616:	f002 fc57 	bl	800dec8 <_mbrtowc_r>
 800b61a:	0003      	movs	r3, r0
 800b61c:	62b8      	str	r0, [r7, #40]	; 0x28
 800b61e:	3301      	adds	r3, #1
 800b620:	d100      	bne.n	800b624 <__ssvfscanf_r+0x484>
 800b622:	e68c      	b.n	800b33e <__ssvfscanf_r+0x19e>
 800b624:	2800      	cmp	r0, #0
 800b626:	d139      	bne.n	800b69c <__ssvfscanf_r+0x4fc>
 800b628:	6a3b      	ldr	r3, [r7, #32]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d100      	bne.n	800b630 <__ssvfscanf_r+0x490>
 800b62e:	6023      	str	r3, [r4, #0]
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b634:	4694      	mov	ip, r2
 800b636:	4463      	add	r3, ip
 800b638:	63bb      	str	r3, [r7, #56]	; 0x38
 800b63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63c:	2b03      	cmp	r3, #3
 800b63e:	d102      	bne.n	800b646 <__ssvfscanf_r+0x4a6>
 800b640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b642:	2b04      	cmp	r3, #4
 800b644:	d002      	beq.n	800b64c <__ssvfscanf_r+0x4ac>
 800b646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b648:	3b01      	subs	r3, #1
 800b64a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b64c:	6a3b      	ldr	r3, [r7, #32]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d115      	bne.n	800b67e <__ssvfscanf_r+0x4de>
 800b652:	2e00      	cmp	r6, #0
 800b654:	d012      	beq.n	800b67c <__ssvfscanf_r+0x4dc>
 800b656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b658:	69fa      	ldr	r2, [r7, #28]
 800b65a:	1ae5      	subs	r5, r4, r3
 800b65c:	10ab      	asrs	r3, r5, #2
 800b65e:	4293      	cmp	r3, r2
 800b660:	d30c      	bcc.n	800b67c <__ssvfscanf_r+0x4dc>
 800b662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b664:	00d1      	lsls	r1, r2, #3
 800b666:	f002 f895 	bl	800d794 <realloc>
 800b66a:	6338      	str	r0, [r7, #48]	; 0x30
 800b66c:	2800      	cmp	r0, #0
 800b66e:	d100      	bne.n	800b672 <__ssvfscanf_r+0x4d2>
 800b670:	e75e      	b.n	800b530 <__ssvfscanf_r+0x390>
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	1944      	adds	r4, r0, r5
 800b676:	005b      	lsls	r3, r3, #1
 800b678:	6030      	str	r0, [r6, #0]
 800b67a:	61fb      	str	r3, [r7, #28]
 800b67c:	3404      	adds	r4, #4
 800b67e:	2500      	movs	r5, #0
 800b680:	e010      	b.n	800b6a4 <__ssvfscanf_r+0x504>
 800b682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b684:	613b      	str	r3, [r7, #16]
 800b686:	2300      	movs	r3, #0
 800b688:	001e      	movs	r6, r3
 800b68a:	001c      	movs	r4, r3
 800b68c:	61fb      	str	r3, [r7, #28]
 800b68e:	633b      	str	r3, [r7, #48]	; 0x30
 800b690:	e78f      	b.n	800b5b2 <__ssvfscanf_r+0x412>
 800b692:	6a3b      	ldr	r3, [r7, #32]
 800b694:	001e      	movs	r6, r3
 800b696:	61fb      	str	r3, [r7, #28]
 800b698:	633b      	str	r3, [r7, #48]	; 0x30
 800b69a:	e78a      	b.n	800b5b2 <__ssvfscanf_r+0x412>
 800b69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69e:	68fd      	ldr	r5, [r7, #12]
 800b6a0:	3302      	adds	r3, #2
 800b6a2:	d1c5      	bne.n	800b630 <__ssvfscanf_r+0x490>
 800b6a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	dc12      	bgt.n	800b6d2 <__ssvfscanf_r+0x532>
 800b6ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b6ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b6b0:	f002 fd0a 	bl	800e0c8 <__ssrefill_r>
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	d00c      	beq.n	800b6d2 <__ssvfscanf_r+0x532>
 800b6b8:	2d00      	cmp	r5, #0
 800b6ba:	d000      	beq.n	800b6be <__ssvfscanf_r+0x51e>
 800b6bc:	e63f      	b.n	800b33e <__ssvfscanf_r+0x19e>
 800b6be:	2e00      	cmp	r6, #0
 800b6c0:	d10c      	bne.n	800b6dc <__ssvfscanf_r+0x53c>
 800b6c2:	6a3b      	ldr	r3, [r7, #32]
 800b6c4:	425a      	negs	r2, r3
 800b6c6:	4153      	adcs	r3, r2
 800b6c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6ca:	18d3      	adds	r3, r2, r3
 800b6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	e6de      	b.n	800b490 <__ssvfscanf_r+0x2f0>
 800b6d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d000      	beq.n	800b6da <__ssvfscanf_r+0x53a>
 800b6d8:	e76c      	b.n	800b5b4 <__ssvfscanf_r+0x414>
 800b6da:	e7f0      	b.n	800b6be <__ssvfscanf_r+0x51e>
 800b6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6de:	69fa      	ldr	r2, [r7, #28]
 800b6e0:	1ae1      	subs	r1, r4, r3
 800b6e2:	108b      	asrs	r3, r1, #2
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d9ec      	bls.n	800b6c2 <__ssvfscanf_r+0x522>
 800b6e8:	6830      	ldr	r0, [r6, #0]
 800b6ea:	f002 f853 	bl	800d794 <realloc>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d0e7      	beq.n	800b6c2 <__ssvfscanf_r+0x522>
 800b6f2:	6030      	str	r0, [r6, #0]
 800b6f4:	e7e5      	b.n	800b6c2 <__ssvfscanf_r+0x522>
 800b6f6:	6a3b      	ldr	r3, [r7, #32]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d025      	beq.n	800b748 <__ssvfscanf_r+0x5a8>
 800b6fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b704:	6812      	ldr	r2, [r2, #0]
 800b706:	4299      	cmp	r1, r3
 800b708:	dd11      	ble.n	800b72e <__ssvfscanf_r+0x58e>
 800b70a:	1ac9      	subs	r1, r1, r3
 800b70c:	18d2      	adds	r2, r2, r3
 800b70e:	18e4      	adds	r4, r4, r3
 800b710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b712:	63f9      	str	r1, [r7, #60]	; 0x3c
 800b714:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b716:	0019      	movs	r1, r3
 800b718:	601a      	str	r2, [r3, #0]
 800b71a:	f002 fcd5 	bl	800e0c8 <__ssrefill_r>
 800b71e:	2800      	cmp	r0, #0
 800b720:	d0ec      	beq.n	800b6fc <__ssvfscanf_r+0x55c>
 800b722:	2c00      	cmp	r4, #0
 800b724:	d100      	bne.n	800b728 <__ssvfscanf_r+0x588>
 800b726:	e60a      	b.n	800b33e <__ssvfscanf_r+0x19e>
 800b728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72a:	191b      	adds	r3, r3, r4
 800b72c:	e5ff      	b.n	800b32e <__ssvfscanf_r+0x18e>
 800b72e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b730:	1a5b      	subs	r3, r3, r1
 800b732:	1864      	adds	r4, r4, r1
 800b734:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b736:	604b      	str	r3, [r1, #4]
 800b738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b73a:	18d2      	adds	r2, r2, r3
 800b73c:	600a      	str	r2, [r1, #0]
 800b73e:	e7f3      	b.n	800b728 <__ssvfscanf_r+0x588>
 800b740:	08008685 	.word	0x08008685
 800b744:	0000fff6 	.word	0x0000fff6
 800b748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74a:	0034      	movs	r4, r6
 800b74c:	cb20      	ldmia	r3!, {r5}
 800b74e:	633b      	str	r3, [r7, #48]	; 0x30
 800b750:	2380      	movs	r3, #128	; 0x80
 800b752:	401c      	ands	r4, r3
 800b754:	421e      	tst	r6, r3
 800b756:	d028      	beq.n	800b7aa <__ssvfscanf_r+0x60a>
 800b758:	2d00      	cmp	r5, #0
 800b75a:	d100      	bne.n	800b75e <__ssvfscanf_r+0x5be>
 800b75c:	e61d      	b.n	800b39a <__ssvfscanf_r+0x1fa>
 800b75e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b760:	f7fb fea8 	bl	80074b4 <malloc>
 800b764:	6238      	str	r0, [r7, #32]
 800b766:	2800      	cmp	r0, #0
 800b768:	d100      	bne.n	800b76c <__ssvfscanf_r+0x5cc>
 800b76a:	e5ef      	b.n	800b34c <__ssvfscanf_r+0x1ac>
 800b76c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b76e:	6028      	str	r0, [r5, #0]
 800b770:	88de      	ldrh	r6, [r3, #6]
 800b772:	889c      	ldrh	r4, [r3, #4]
 800b774:	6818      	ldr	r0, [r3, #0]
 800b776:	42a6      	cmp	r6, r4
 800b778:	d30e      	bcc.n	800b798 <__ssvfscanf_r+0x5f8>
 800b77a:	4bbf      	ldr	r3, [pc, #764]	; (800ba78 <__ssvfscanf_r+0x8d8>)
 800b77c:	429c      	cmp	r4, r3
 800b77e:	d900      	bls.n	800b782 <__ssvfscanf_r+0x5e2>
 800b780:	e6df      	b.n	800b542 <__ssvfscanf_r+0x3a2>
 800b782:	3408      	adds	r4, #8
 800b784:	b2a4      	uxth	r4, r4
 800b786:	00a1      	lsls	r1, r4, #2
 800b788:	f002 f804 	bl	800d794 <realloc>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d100      	bne.n	800b792 <__ssvfscanf_r+0x5f2>
 800b790:	e6d7      	b.n	800b542 <__ssvfscanf_r+0x3a2>
 800b792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b794:	6018      	str	r0, [r3, #0]
 800b796:	809c      	strh	r4, [r3, #4]
 800b798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b79a:	1c72      	adds	r2, r6, #1
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b7a0:	00b6      	lsls	r6, r6, #2
 800b7a2:	002c      	movs	r4, r5
 800b7a4:	50f5      	str	r5, [r6, r3]
 800b7a6:	6a3d      	ldr	r5, [r7, #32]
 800b7a8:	80ca      	strh	r2, [r1, #6]
 800b7aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ac:	0029      	movs	r1, r5
 800b7ae:	9300      	str	r3, [sp, #0]
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b7b6:	f002 fca6 	bl	800e106 <_sfread_r>
 800b7ba:	1e05      	subs	r5, r0, #0
 800b7bc:	d100      	bne.n	800b7c0 <__ssvfscanf_r+0x620>
 800b7be:	e5be      	b.n	800b33e <__ssvfscanf_r+0x19e>
 800b7c0:	2c00      	cmp	r4, #0
 800b7c2:	d009      	beq.n	800b7d8 <__ssvfscanf_r+0x638>
 800b7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c6:	4283      	cmp	r3, r0
 800b7c8:	d906      	bls.n	800b7d8 <__ssvfscanf_r+0x638>
 800b7ca:	0001      	movs	r1, r0
 800b7cc:	6820      	ldr	r0, [r4, #0]
 800b7ce:	f001 ffe1 	bl	800d794 <realloc>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	d000      	beq.n	800b7d8 <__ssvfscanf_r+0x638>
 800b7d6:	6020      	str	r0, [r4, #0]
 800b7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7da:	195b      	adds	r3, r3, r5
 800b7dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	e4f8      	b.n	800b1d6 <__ssvfscanf_r+0x36>
 800b7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d101      	bne.n	800b7ee <__ssvfscanf_r+0x64e>
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7ee:	2210      	movs	r2, #16
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	0034      	movs	r4, r6
 800b7f4:	4032      	ands	r2, r6
 800b7f6:	401c      	ands	r4, r3
 800b7f8:	623a      	str	r2, [r7, #32]
 800b7fa:	421e      	tst	r6, r3
 800b7fc:	d100      	bne.n	800b800 <__ssvfscanf_r+0x660>
 800b7fe:	e116      	b.n	800ba2e <__ssvfscanf_r+0x88e>
 800b800:	2a00      	cmp	r2, #0
 800b802:	d000      	beq.n	800b806 <__ssvfscanf_r+0x666>
 800b804:	e0b0      	b.n	800b968 <__ssvfscanf_r+0x7c8>
 800b806:	2080      	movs	r0, #128	; 0x80
 800b808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80a:	cb10      	ldmia	r3!, {r4}
 800b80c:	60fb      	str	r3, [r7, #12]
 800b80e:	4206      	tst	r6, r0
 800b810:	d100      	bne.n	800b814 <__ssvfscanf_r+0x674>
 800b812:	e0b2      	b.n	800b97a <__ssvfscanf_r+0x7da>
 800b814:	2c00      	cmp	r4, #0
 800b816:	d100      	bne.n	800b81a <__ssvfscanf_r+0x67a>
 800b818:	e68d      	b.n	800b536 <__ssvfscanf_r+0x396>
 800b81a:	f7fb fe4b 	bl	80074b4 <malloc>
 800b81e:	6338      	str	r0, [r7, #48]	; 0x30
 800b820:	2800      	cmp	r0, #0
 800b822:	d100      	bne.n	800b826 <__ssvfscanf_r+0x686>
 800b824:	e684      	b.n	800b530 <__ssvfscanf_r+0x390>
 800b826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b82c:	88de      	ldrh	r6, [r3, #6]
 800b82e:	889d      	ldrh	r5, [r3, #4]
 800b830:	42ae      	cmp	r6, r5
 800b832:	d310      	bcc.n	800b856 <__ssvfscanf_r+0x6b6>
 800b834:	4b90      	ldr	r3, [pc, #576]	; (800ba78 <__ssvfscanf_r+0x8d8>)
 800b836:	429d      	cmp	r5, r3
 800b838:	d900      	bls.n	800b83c <__ssvfscanf_r+0x69c>
 800b83a:	e679      	b.n	800b530 <__ssvfscanf_r+0x390>
 800b83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b83e:	3508      	adds	r5, #8
 800b840:	b2ad      	uxth	r5, r5
 800b842:	6818      	ldr	r0, [r3, #0]
 800b844:	00a9      	lsls	r1, r5, #2
 800b846:	f001 ffa5 	bl	800d794 <realloc>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	d100      	bne.n	800b850 <__ssvfscanf_r+0x6b0>
 800b84e:	e66f      	b.n	800b530 <__ssvfscanf_r+0x390>
 800b850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b852:	6018      	str	r0, [r3, #0]
 800b854:	809d      	strh	r5, [r3, #4]
 800b856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b858:	1c72      	adds	r2, r6, #1
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	00b6      	lsls	r6, r6, #2
 800b85e:	50f4      	str	r4, [r6, r3]
 800b860:	2320      	movs	r3, #32
 800b862:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b864:	0026      	movs	r6, r4
 800b866:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800b868:	80ca      	strh	r2, [r1, #6]
 800b86a:	613b      	str	r3, [r7, #16]
 800b86c:	2500      	movs	r5, #0
 800b86e:	f7fd f8a1 	bl	80089b4 <__locale_mb_cur_max>
 800b872:	42a8      	cmp	r0, r5
 800b874:	d100      	bne.n	800b878 <__ssvfscanf_r+0x6d8>
 800b876:	e562      	b.n	800b33e <__ssvfscanf_r+0x19e>
 800b878:	1c6a      	adds	r2, r5, #1
 800b87a:	61fa      	str	r2, [r7, #28]
 800b87c:	228c      	movs	r2, #140	; 0x8c
 800b87e:	2048      	movs	r0, #72	; 0x48
 800b880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b882:	0052      	lsls	r2, r2, #1
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	1812      	adds	r2, r2, r0
 800b888:	7819      	ldrb	r1, [r3, #0]
 800b88a:	19d2      	adds	r2, r2, r7
 800b88c:	5551      	strb	r1, [r2, r5]
 800b88e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b890:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b892:	6852      	ldr	r2, [r2, #4]
 800b894:	3301      	adds	r3, #1
 800b896:	600b      	str	r3, [r1, #0]
 800b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89a:	3a01      	subs	r2, #1
 800b89c:	604a      	str	r2, [r1, #4]
 800b89e:	2b03      	cmp	r3, #3
 800b8a0:	d102      	bne.n	800b8a8 <__ssvfscanf_r+0x708>
 800b8a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8a4:	2b04      	cmp	r3, #4
 800b8a6:	d006      	beq.n	800b8b6 <__ssvfscanf_r+0x716>
 800b8a8:	2048      	movs	r0, #72	; 0x48
 800b8aa:	2208      	movs	r2, #8
 800b8ac:	1813      	adds	r3, r2, r0
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	19d8      	adds	r0, r3, r7
 800b8b2:	f7fd f851 	bl	8008958 <memset>
 800b8b6:	2148      	movs	r1, #72	; 0x48
 800b8b8:	2308      	movs	r3, #8
 800b8ba:	228c      	movs	r2, #140	; 0x8c
 800b8bc:	185b      	adds	r3, r3, r1
 800b8be:	0052      	lsls	r2, r2, #1
 800b8c0:	19db      	adds	r3, r3, r7
 800b8c2:	1852      	adds	r2, r2, r1
 800b8c4:	9300      	str	r3, [sp, #0]
 800b8c6:	0021      	movs	r1, r4
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b8cc:	19d2      	adds	r2, r2, r7
 800b8ce:	f002 fafb 	bl	800dec8 <_mbrtowc_r>
 800b8d2:	0003      	movs	r3, r0
 800b8d4:	62b8      	str	r0, [r7, #40]	; 0x28
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	d100      	bne.n	800b8dc <__ssvfscanf_r+0x73c>
 800b8da:	e530      	b.n	800b33e <__ssvfscanf_r+0x19e>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	d151      	bne.n	800b984 <__ssvfscanf_r+0x7e4>
 800b8e0:	6020      	str	r0, [r4, #0]
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	6825      	ldr	r5, [r4, #0]
 800b8e6:	425b      	negs	r3, r3
 800b8e8:	1c6a      	adds	r2, r5, #1
 800b8ea:	d01a      	beq.n	800b922 <__ssvfscanf_r+0x782>
 800b8ec:	2048      	movs	r0, #72	; 0x48
 800b8ee:	3311      	adds	r3, #17
 800b8f0:	181b      	adds	r3, r3, r0
 800b8f2:	2208      	movs	r2, #8
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	19d8      	adds	r0, r3, r7
 800b8f8:	f7fd f82e 	bl	8008958 <memset>
 800b8fc:	4b5f      	ldr	r3, [pc, #380]	; (800ba7c <__ssvfscanf_r+0x8dc>)
 800b8fe:	2148      	movs	r1, #72	; 0x48
 800b900:	33e0      	adds	r3, #224	; 0xe0
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	2310      	movs	r3, #16
 800b906:	4694      	mov	ip, r2
 800b908:	185b      	adds	r3, r3, r1
 800b90a:	002a      	movs	r2, r5
 800b90c:	19db      	adds	r3, r3, r7
 800b90e:	4665      	mov	r5, ip
 800b910:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b912:	1879      	adds	r1, r7, r1
 800b914:	47a8      	blx	r5
 800b916:	2300      	movs	r3, #0
 800b918:	2801      	cmp	r0, #1
 800b91a:	d102      	bne.n	800b922 <__ssvfscanf_r+0x782>
 800b91c:	3348      	adds	r3, #72	; 0x48
 800b91e:	18fb      	adds	r3, r7, r3
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	2218      	movs	r2, #24
 800b924:	2148      	movs	r1, #72	; 0x48
 800b926:	1852      	adds	r2, r2, r1
 800b928:	19d2      	adds	r2, r2, r7
 800b92a:	5cd3      	ldrb	r3, [r2, r3]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d149      	bne.n	800b9c4 <__ssvfscanf_r+0x824>
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d137      	bne.n	800b9a6 <__ssvfscanf_r+0x806>
 800b936:	6a3b      	ldr	r3, [r7, #32]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d113      	bne.n	800b964 <__ssvfscanf_r+0x7c4>
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	2e00      	cmp	r6, #0
 800b940:	d00d      	beq.n	800b95e <__ssvfscanf_r+0x7be>
 800b942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b944:	693a      	ldr	r2, [r7, #16]
 800b946:	1ae4      	subs	r4, r4, r3
 800b948:	10a3      	asrs	r3, r4, #2
 800b94a:	3301      	adds	r3, #1
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d906      	bls.n	800b95e <__ssvfscanf_r+0x7be>
 800b950:	6830      	ldr	r0, [r6, #0]
 800b952:	1d21      	adds	r1, r4, #4
 800b954:	f001 ff1e 	bl	800d794 <realloc>
 800b958:	2800      	cmp	r0, #0
 800b95a:	d000      	beq.n	800b95e <__ssvfscanf_r+0x7be>
 800b95c:	6030      	str	r0, [r6, #0]
 800b95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b960:	3301      	adds	r3, #1
 800b962:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	e593      	b.n	800b490 <__ssvfscanf_r+0x2f0>
 800b968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96a:	60fb      	str	r3, [r7, #12]
 800b96c:	2300      	movs	r3, #0
 800b96e:	001e      	movs	r6, r3
 800b970:	613b      	str	r3, [r7, #16]
 800b972:	633b      	str	r3, [r7, #48]	; 0x30
 800b974:	334c      	adds	r3, #76	; 0x4c
 800b976:	18fc      	adds	r4, r7, r3
 800b978:	e778      	b.n	800b86c <__ssvfscanf_r+0x6cc>
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	001e      	movs	r6, r3
 800b97e:	613b      	str	r3, [r7, #16]
 800b980:	633b      	str	r3, [r7, #48]	; 0x30
 800b982:	e773      	b.n	800b86c <__ssvfscanf_r+0x6cc>
 800b984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b986:	69fd      	ldr	r5, [r7, #28]
 800b988:	3302      	adds	r3, #2
 800b98a:	d1aa      	bne.n	800b8e2 <__ssvfscanf_r+0x742>
 800b98c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	2b00      	cmp	r3, #0
 800b992:	dc47      	bgt.n	800ba24 <__ssvfscanf_r+0x884>
 800b994:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b996:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b998:	f002 fb96 	bl	800e0c8 <__ssrefill_r>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d041      	beq.n	800ba24 <__ssvfscanf_r+0x884>
 800b9a0:	2d00      	cmp	r5, #0
 800b9a2:	d0c8      	beq.n	800b936 <__ssvfscanf_r+0x796>
 800b9a4:	e4cb      	b.n	800b33e <__ssvfscanf_r+0x19e>
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	2248      	movs	r2, #72	; 0x48
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	61fb      	str	r3, [r7, #28]
 800b9ae:	238c      	movs	r3, #140	; 0x8c
 800b9b0:	005b      	lsls	r3, r3, #1
 800b9b2:	189b      	adds	r3, r3, r2
 800b9b4:	69fa      	ldr	r2, [r7, #28]
 800b9b6:	19db      	adds	r3, r3, r7
 800b9b8:	5cd1      	ldrb	r1, [r2, r3]
 800b9ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b9bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9be:	f002 fb47 	bl	800e050 <_sungetc_r>
 800b9c2:	e7b5      	b.n	800b930 <__ssvfscanf_r+0x790>
 800b9c4:	69fa      	ldr	r2, [r7, #28]
 800b9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c8:	4694      	mov	ip, r2
 800b9ca:	4463      	add	r3, ip
 800b9cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d0:	2b03      	cmp	r3, #3
 800b9d2:	d102      	bne.n	800b9da <__ssvfscanf_r+0x83a>
 800b9d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	d002      	beq.n	800b9e0 <__ssvfscanf_r+0x840>
 800b9da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9e0:	6a3b      	ldr	r3, [r7, #32]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d11a      	bne.n	800ba1c <__ssvfscanf_r+0x87c>
 800b9e6:	3404      	adds	r4, #4
 800b9e8:	2e00      	cmp	r6, #0
 800b9ea:	d019      	beq.n	800ba20 <__ssvfscanf_r+0x880>
 800b9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ee:	693a      	ldr	r2, [r7, #16]
 800b9f0:	1ae3      	subs	r3, r4, r3
 800b9f2:	61fb      	str	r3, [r7, #28]
 800b9f4:	6a3d      	ldr	r5, [r7, #32]
 800b9f6:	109b      	asrs	r3, r3, #2
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d3c7      	bcc.n	800b98c <__ssvfscanf_r+0x7ec>
 800b9fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9fe:	00d1      	lsls	r1, r2, #3
 800ba00:	f001 fec8 	bl	800d794 <realloc>
 800ba04:	6338      	str	r0, [r7, #48]	; 0x30
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d100      	bne.n	800ba0c <__ssvfscanf_r+0x86c>
 800ba0a:	e591      	b.n	800b530 <__ssvfscanf_r+0x390>
 800ba0c:	4684      	mov	ip, r0
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	69fc      	ldr	r4, [r7, #28]
 800ba12:	005b      	lsls	r3, r3, #1
 800ba14:	4464      	add	r4, ip
 800ba16:	6030      	str	r0, [r6, #0]
 800ba18:	613b      	str	r3, [r7, #16]
 800ba1a:	e7b7      	b.n	800b98c <__ssvfscanf_r+0x7ec>
 800ba1c:	2500      	movs	r5, #0
 800ba1e:	e7b5      	b.n	800b98c <__ssvfscanf_r+0x7ec>
 800ba20:	0035      	movs	r5, r6
 800ba22:	e7b3      	b.n	800b98c <__ssvfscanf_r+0x7ec>
 800ba24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d000      	beq.n	800ba2c <__ssvfscanf_r+0x88c>
 800ba2a:	e720      	b.n	800b86e <__ssvfscanf_r+0x6ce>
 800ba2c:	e783      	b.n	800b936 <__ssvfscanf_r+0x796>
 800ba2e:	6a3b      	ldr	r3, [r7, #32]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d025      	beq.n	800ba80 <__ssvfscanf_r+0x8e0>
 800ba34:	2118      	movs	r1, #24
 800ba36:	2048      	movs	r0, #72	; 0x48
 800ba38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba3a:	1809      	adds	r1, r1, r0
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	19c9      	adds	r1, r1, r7
 800ba40:	781a      	ldrb	r2, [r3, #0]
 800ba42:	5c8a      	ldrb	r2, [r1, r2]
 800ba44:	2a00      	cmp	r2, #0
 800ba46:	d103      	bne.n	800ba50 <__ssvfscanf_r+0x8b0>
 800ba48:	2c00      	cmp	r4, #0
 800ba4a:	d000      	beq.n	800ba4e <__ssvfscanf_r+0x8ae>
 800ba4c:	e66c      	b.n	800b728 <__ssvfscanf_r+0x588>
 800ba4e:	e4a4      	b.n	800b39a <__ssvfscanf_r+0x1fa>
 800ba50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba54:	6852      	ldr	r2, [r2, #4]
 800ba56:	3301      	adds	r3, #1
 800ba58:	600b      	str	r3, [r1, #0]
 800ba5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba5c:	3a01      	subs	r2, #1
 800ba5e:	3401      	adds	r4, #1
 800ba60:	604a      	str	r2, [r1, #4]
 800ba62:	429c      	cmp	r4, r3
 800ba64:	d100      	bne.n	800ba68 <__ssvfscanf_r+0x8c8>
 800ba66:	e65f      	b.n	800b728 <__ssvfscanf_r+0x588>
 800ba68:	2a00      	cmp	r2, #0
 800ba6a:	dce3      	bgt.n	800ba34 <__ssvfscanf_r+0x894>
 800ba6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ba6e:	f002 fb2b 	bl	800e0c8 <__ssrefill_r>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	d0de      	beq.n	800ba34 <__ssvfscanf_r+0x894>
 800ba76:	e657      	b.n	800b728 <__ssvfscanf_r+0x588>
 800ba78:	0000fff6 	.word	0x0000fff6
 800ba7c:	2000042c 	.word	0x2000042c
 800ba80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba82:	0032      	movs	r2, r6
 800ba84:	cb20      	ldmia	r3!, {r5}
 800ba86:	61fb      	str	r3, [r7, #28]
 800ba88:	2380      	movs	r3, #128	; 0x80
 800ba8a:	401a      	ands	r2, r3
 800ba8c:	421e      	tst	r6, r3
 800ba8e:	d100      	bne.n	800ba92 <__ssvfscanf_r+0x8f2>
 800ba90:	e086      	b.n	800bba0 <__ssvfscanf_r+0xa00>
 800ba92:	2d00      	cmp	r5, #0
 800ba94:	d100      	bne.n	800ba98 <__ssvfscanf_r+0x8f8>
 800ba96:	e480      	b.n	800b39a <__ssvfscanf_r+0x1fa>
 800ba98:	2020      	movs	r0, #32
 800ba9a:	f7fb fd0b 	bl	80074b4 <malloc>
 800ba9e:	6338      	str	r0, [r7, #48]	; 0x30
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d100      	bne.n	800baa6 <__ssvfscanf_r+0x906>
 800baa4:	e452      	b.n	800b34c <__ssvfscanf_r+0x1ac>
 800baa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baa8:	6028      	str	r0, [r5, #0]
 800baaa:	88de      	ldrh	r6, [r3, #6]
 800baac:	889c      	ldrh	r4, [r3, #4]
 800baae:	6818      	ldr	r0, [r3, #0]
 800bab0:	42a6      	cmp	r6, r4
 800bab2:	d30e      	bcc.n	800bad2 <__ssvfscanf_r+0x932>
 800bab4:	4bc3      	ldr	r3, [pc, #780]	; (800bdc4 <__ssvfscanf_r+0xc24>)
 800bab6:	429c      	cmp	r4, r3
 800bab8:	d900      	bls.n	800babc <__ssvfscanf_r+0x91c>
 800baba:	e542      	b.n	800b542 <__ssvfscanf_r+0x3a2>
 800babc:	3408      	adds	r4, #8
 800babe:	b2a4      	uxth	r4, r4
 800bac0:	00a1      	lsls	r1, r4, #2
 800bac2:	f001 fe67 	bl	800d794 <realloc>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d100      	bne.n	800bacc <__ssvfscanf_r+0x92c>
 800baca:	e53a      	b.n	800b542 <__ssvfscanf_r+0x3a2>
 800bacc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bace:	6018      	str	r0, [r3, #0]
 800bad0:	809c      	strh	r4, [r3, #4]
 800bad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bad4:	1c72      	adds	r2, r6, #1
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	00b6      	lsls	r6, r6, #2
 800bada:	50f5      	str	r5, [r6, r3]
 800badc:	2320      	movs	r3, #32
 800bade:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bae0:	002e      	movs	r6, r5
 800bae2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800bae4:	80ca      	strh	r2, [r1, #6]
 800bae6:	623b      	str	r3, [r7, #32]
 800bae8:	002c      	movs	r4, r5
 800baea:	2118      	movs	r1, #24
 800baec:	2048      	movs	r0, #72	; 0x48
 800baee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baf0:	1809      	adds	r1, r1, r0
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	19c9      	adds	r1, r1, r7
 800baf6:	781a      	ldrb	r2, [r3, #0]
 800baf8:	5c8a      	ldrb	r2, [r1, r2]
 800bafa:	2a00      	cmp	r2, #0
 800bafc:	d101      	bne.n	800bb02 <__ssvfscanf_r+0x962>
 800bafe:	633d      	str	r5, [r7, #48]	; 0x30
 800bb00:	e031      	b.n	800bb66 <__ssvfscanf_r+0x9c6>
 800bb02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb06:	6852      	ldr	r2, [r2, #4]
 800bb08:	3a01      	subs	r2, #1
 800bb0a:	604a      	str	r2, [r1, #4]
 800bb0c:	1c5a      	adds	r2, r3, #1
 800bb0e:	600a      	str	r2, [r1, #0]
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	1c6a      	adds	r2, r5, #1
 800bb14:	633a      	str	r2, [r7, #48]	; 0x30
 800bb16:	702b      	strb	r3, [r5, #0]
 800bb18:	2e00      	cmp	r6, #0
 800bb1a:	d010      	beq.n	800bb3e <__ssvfscanf_r+0x99e>
 800bb1c:	6a3b      	ldr	r3, [r7, #32]
 800bb1e:	1b15      	subs	r5, r2, r4
 800bb20:	429d      	cmp	r5, r3
 800bb22:	d30c      	bcc.n	800bb3e <__ssvfscanf_r+0x99e>
 800bb24:	005b      	lsls	r3, r3, #1
 800bb26:	0020      	movs	r0, r4
 800bb28:	0019      	movs	r1, r3
 800bb2a:	623b      	str	r3, [r7, #32]
 800bb2c:	f001 fe32 	bl	800d794 <realloc>
 800bb30:	1e04      	subs	r4, r0, #0
 800bb32:	d101      	bne.n	800bb38 <__ssvfscanf_r+0x998>
 800bb34:	f7ff fc0a 	bl	800b34c <__ssvfscanf_r+0x1ac>
 800bb38:	1943      	adds	r3, r0, r5
 800bb3a:	633b      	str	r3, [r7, #48]	; 0x30
 800bb3c:	6030      	str	r0, [r6, #0]
 800bb3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb40:	3b01      	subs	r3, #1
 800bb42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d00e      	beq.n	800bb66 <__ssvfscanf_r+0x9c6>
 800bb48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	dc2a      	bgt.n	800bba6 <__ssvfscanf_r+0xa06>
 800bb50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bb54:	f002 fab8 	bl	800e0c8 <__ssrefill_r>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d024      	beq.n	800bba6 <__ssvfscanf_r+0xa06>
 800bb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5e:	42a3      	cmp	r3, r4
 800bb60:	d101      	bne.n	800bb66 <__ssvfscanf_r+0x9c6>
 800bb62:	f7ff fbec 	bl	800b33e <__ssvfscanf_r+0x19e>
 800bb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb68:	1b1d      	subs	r5, r3, r4
 800bb6a:	42a3      	cmp	r3, r4
 800bb6c:	d101      	bne.n	800bb72 <__ssvfscanf_r+0x9d2>
 800bb6e:	f7ff fc14 	bl	800b39a <__ssvfscanf_r+0x1fa>
 800bb72:	2300      	movs	r3, #0
 800bb74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb76:	7013      	strb	r3, [r2, #0]
 800bb78:	429e      	cmp	r6, r3
 800bb7a:	d009      	beq.n	800bb90 <__ssvfscanf_r+0x9f0>
 800bb7c:	6a3b      	ldr	r3, [r7, #32]
 800bb7e:	1c69      	adds	r1, r5, #1
 800bb80:	428b      	cmp	r3, r1
 800bb82:	d905      	bls.n	800bb90 <__ssvfscanf_r+0x9f0>
 800bb84:	6830      	ldr	r0, [r6, #0]
 800bb86:	f001 fe05 	bl	800d794 <realloc>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d000      	beq.n	800bb90 <__ssvfscanf_r+0x9f0>
 800bb8e:	6030      	str	r0, [r6, #0]
 800bb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb92:	3301      	adds	r3, #1
 800bb94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb98:	195b      	adds	r3, r3, r5
 800bb9a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	e477      	b.n	800b490 <__ssvfscanf_r+0x2f0>
 800bba0:	0016      	movs	r6, r2
 800bba2:	623a      	str	r2, [r7, #32]
 800bba4:	e7a0      	b.n	800bae8 <__ssvfscanf_r+0x948>
 800bba6:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800bba8:	e79f      	b.n	800baea <__ssvfscanf_r+0x94a>
 800bbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d101      	bne.n	800bbb4 <__ssvfscanf_r+0xa14>
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbb4:	2210      	movs	r2, #16
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	0034      	movs	r4, r6
 800bbba:	4032      	ands	r2, r6
 800bbbc:	401c      	ands	r4, r3
 800bbbe:	61fa      	str	r2, [r7, #28]
 800bbc0:	421e      	tst	r6, r3
 800bbc2:	d100      	bne.n	800bbc6 <__ssvfscanf_r+0xa26>
 800bbc4:	e102      	b.n	800bdcc <__ssvfscanf_r+0xc2c>
 800bbc6:	2a00      	cmp	r2, #0
 800bbc8:	d000      	beq.n	800bbcc <__ssvfscanf_r+0xa2c>
 800bbca:	e09f      	b.n	800bd0c <__ssvfscanf_r+0xb6c>
 800bbcc:	2080      	movs	r0, #128	; 0x80
 800bbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd0:	cb10      	ldmia	r3!, {r4}
 800bbd2:	60fb      	str	r3, [r7, #12]
 800bbd4:	4206      	tst	r6, r0
 800bbd6:	d100      	bne.n	800bbda <__ssvfscanf_r+0xa3a>
 800bbd8:	e0a1      	b.n	800bd1e <__ssvfscanf_r+0xb7e>
 800bbda:	2c00      	cmp	r4, #0
 800bbdc:	d100      	bne.n	800bbe0 <__ssvfscanf_r+0xa40>
 800bbde:	e4aa      	b.n	800b536 <__ssvfscanf_r+0x396>
 800bbe0:	f7fb fc68 	bl	80074b4 <malloc>
 800bbe4:	6338      	str	r0, [r7, #48]	; 0x30
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d100      	bne.n	800bbec <__ssvfscanf_r+0xa4c>
 800bbea:	e4a1      	b.n	800b530 <__ssvfscanf_r+0x390>
 800bbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbee:	6023      	str	r3, [r4, #0]
 800bbf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbf2:	88de      	ldrh	r6, [r3, #6]
 800bbf4:	889d      	ldrh	r5, [r3, #4]
 800bbf6:	42ae      	cmp	r6, r5
 800bbf8:	d310      	bcc.n	800bc1c <__ssvfscanf_r+0xa7c>
 800bbfa:	4b72      	ldr	r3, [pc, #456]	; (800bdc4 <__ssvfscanf_r+0xc24>)
 800bbfc:	429d      	cmp	r5, r3
 800bbfe:	d900      	bls.n	800bc02 <__ssvfscanf_r+0xa62>
 800bc00:	e496      	b.n	800b530 <__ssvfscanf_r+0x390>
 800bc02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc04:	3508      	adds	r5, #8
 800bc06:	b2ad      	uxth	r5, r5
 800bc08:	6818      	ldr	r0, [r3, #0]
 800bc0a:	00a9      	lsls	r1, r5, #2
 800bc0c:	f001 fdc2 	bl	800d794 <realloc>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d100      	bne.n	800bc16 <__ssvfscanf_r+0xa76>
 800bc14:	e48c      	b.n	800b530 <__ssvfscanf_r+0x390>
 800bc16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc18:	6018      	str	r0, [r3, #0]
 800bc1a:	809d      	strh	r5, [r3, #4]
 800bc1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc1e:	1c72      	adds	r2, r6, #1
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	00b6      	lsls	r6, r6, #2
 800bc24:	50f4      	str	r4, [r6, r3]
 800bc26:	2320      	movs	r3, #32
 800bc28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc2a:	0025      	movs	r5, r4
 800bc2c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800bc2e:	80ca      	strh	r2, [r1, #6]
 800bc30:	613b      	str	r3, [r7, #16]
 800bc32:	2300      	movs	r3, #0
 800bc34:	623b      	str	r3, [r7, #32]
 800bc36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc38:	4a63      	ldr	r2, [pc, #396]	; (800bdc8 <__ssvfscanf_r+0xc28>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	5cd3      	ldrb	r3, [r2, r3]
 800bc40:	2208      	movs	r2, #8
 800bc42:	4213      	tst	r3, r2
 800bc44:	d149      	bne.n	800bcda <__ssvfscanf_r+0xb3a>
 800bc46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d046      	beq.n	800bcda <__ssvfscanf_r+0xb3a>
 800bc4c:	f7fc feb2 	bl	80089b4 <__locale_mb_cur_max>
 800bc50:	6a3b      	ldr	r3, [r7, #32]
 800bc52:	4298      	cmp	r0, r3
 800bc54:	d101      	bne.n	800bc5a <__ssvfscanf_r+0xaba>
 800bc56:	f7ff fb72 	bl	800b33e <__ssvfscanf_r+0x19e>
 800bc5a:	6a3a      	ldr	r2, [r7, #32]
 800bc5c:	2048      	movs	r0, #72	; 0x48
 800bc5e:	1c56      	adds	r6, r2, #1
 800bc60:	228c      	movs	r2, #140	; 0x8c
 800bc62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc64:	0052      	lsls	r2, r2, #1
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	1812      	adds	r2, r2, r0
 800bc6a:	7819      	ldrb	r1, [r3, #0]
 800bc6c:	6a38      	ldr	r0, [r7, #32]
 800bc6e:	19d2      	adds	r2, r2, r7
 800bc70:	5411      	strb	r1, [r2, r0]
 800bc72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc76:	6852      	ldr	r2, [r2, #4]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	600b      	str	r3, [r1, #0]
 800bc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7e:	3a01      	subs	r2, #1
 800bc80:	604a      	str	r2, [r1, #4]
 800bc82:	2b03      	cmp	r3, #3
 800bc84:	d102      	bne.n	800bc8c <__ssvfscanf_r+0xaec>
 800bc86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc88:	2b04      	cmp	r3, #4
 800bc8a:	d007      	beq.n	800bc9c <__ssvfscanf_r+0xafc>
 800bc8c:	2048      	movs	r0, #72	; 0x48
 800bc8e:	2310      	movs	r3, #16
 800bc90:	181b      	adds	r3, r3, r0
 800bc92:	2208      	movs	r2, #8
 800bc94:	2100      	movs	r1, #0
 800bc96:	19d8      	adds	r0, r3, r7
 800bc98:	f7fc fe5e 	bl	8008958 <memset>
 800bc9c:	2148      	movs	r1, #72	; 0x48
 800bc9e:	2310      	movs	r3, #16
 800bca0:	228c      	movs	r2, #140	; 0x8c
 800bca2:	185b      	adds	r3, r3, r1
 800bca4:	0052      	lsls	r2, r2, #1
 800bca6:	19db      	adds	r3, r3, r7
 800bca8:	1852      	adds	r2, r2, r1
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	0021      	movs	r1, r4
 800bcae:	0033      	movs	r3, r6
 800bcb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bcb2:	19d2      	adds	r2, r2, r7
 800bcb4:	f002 f908 	bl	800dec8 <_mbrtowc_r>
 800bcb8:	0003      	movs	r3, r0
 800bcba:	62b8      	str	r0, [r7, #40]	; 0x28
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	d101      	bne.n	800bcc4 <__ssvfscanf_r+0xb24>
 800bcc0:	f7ff fb3d 	bl	800b33e <__ssvfscanf_r+0x19e>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d12f      	bne.n	800bd28 <__ssvfscanf_r+0xb88>
 800bcc8:	6020      	str	r0, [r4, #0]
 800bcca:	6820      	ldr	r0, [r4, #0]
 800bccc:	f002 f91a 	bl	800df04 <iswspace>
 800bcd0:	6238      	str	r0, [r7, #32]
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d04a      	beq.n	800bd6c <__ssvfscanf_r+0xbcc>
 800bcd6:	2e00      	cmp	r6, #0
 800bcd8:	d13c      	bne.n	800bd54 <__ssvfscanf_r+0xbb4>
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d000      	beq.n	800bce2 <__ssvfscanf_r+0xb42>
 800bce0:	e640      	b.n	800b964 <__ssvfscanf_r+0x7c4>
 800bce2:	6023      	str	r3, [r4, #0]
 800bce4:	2d00      	cmp	r5, #0
 800bce6:	d100      	bne.n	800bcea <__ssvfscanf_r+0xb4a>
 800bce8:	e639      	b.n	800b95e <__ssvfscanf_r+0x7be>
 800bcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcec:	693a      	ldr	r2, [r7, #16]
 800bcee:	1ae4      	subs	r4, r4, r3
 800bcf0:	10a3      	asrs	r3, r4, #2
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d800      	bhi.n	800bcfa <__ssvfscanf_r+0xb5a>
 800bcf8:	e631      	b.n	800b95e <__ssvfscanf_r+0x7be>
 800bcfa:	6828      	ldr	r0, [r5, #0]
 800bcfc:	1d21      	adds	r1, r4, #4
 800bcfe:	f001 fd49 	bl	800d794 <realloc>
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d100      	bne.n	800bd08 <__ssvfscanf_r+0xb68>
 800bd06:	e62a      	b.n	800b95e <__ssvfscanf_r+0x7be>
 800bd08:	6028      	str	r0, [r5, #0]
 800bd0a:	e628      	b.n	800b95e <__ssvfscanf_r+0x7be>
 800bd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0e:	60fb      	str	r3, [r7, #12]
 800bd10:	2300      	movs	r3, #0
 800bd12:	001d      	movs	r5, r3
 800bd14:	613b      	str	r3, [r7, #16]
 800bd16:	633b      	str	r3, [r7, #48]	; 0x30
 800bd18:	334c      	adds	r3, #76	; 0x4c
 800bd1a:	18fc      	adds	r4, r7, r3
 800bd1c:	e789      	b.n	800bc32 <__ssvfscanf_r+0xa92>
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	001d      	movs	r5, r3
 800bd22:	613b      	str	r3, [r7, #16]
 800bd24:	633b      	str	r3, [r7, #48]	; 0x30
 800bd26:	e784      	b.n	800bc32 <__ssvfscanf_r+0xa92>
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	623e      	str	r6, [r7, #32]
 800bd2c:	3302      	adds	r3, #2
 800bd2e:	d1cc      	bne.n	800bcca <__ssvfscanf_r+0xb2a>
 800bd30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	dd00      	ble.n	800bd3a <__ssvfscanf_r+0xb9a>
 800bd38:	e77d      	b.n	800bc36 <__ssvfscanf_r+0xa96>
 800bd3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bd3e:	f002 f9c3 	bl	800e0c8 <__ssrefill_r>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d100      	bne.n	800bd48 <__ssvfscanf_r+0xba8>
 800bd46:	e776      	b.n	800bc36 <__ssvfscanf_r+0xa96>
 800bd48:	6a3b      	ldr	r3, [r7, #32]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d001      	beq.n	800bd52 <__ssvfscanf_r+0xbb2>
 800bd4e:	f7ff faf6 	bl	800b33e <__ssvfscanf_r+0x19e>
 800bd52:	e7c2      	b.n	800bcda <__ssvfscanf_r+0xb3a>
 800bd54:	238c      	movs	r3, #140	; 0x8c
 800bd56:	2248      	movs	r2, #72	; 0x48
 800bd58:	005b      	lsls	r3, r3, #1
 800bd5a:	189b      	adds	r3, r3, r2
 800bd5c:	3e01      	subs	r6, #1
 800bd5e:	19db      	adds	r3, r3, r7
 800bd60:	5cf1      	ldrb	r1, [r6, r3]
 800bd62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bd66:	f002 f973 	bl	800e050 <_sungetc_r>
 800bd6a:	e7b4      	b.n	800bcd6 <__ssvfscanf_r+0xb36>
 800bd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd6e:	199b      	adds	r3, r3, r6
 800bd70:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd74:	2b03      	cmp	r3, #3
 800bd76:	d102      	bne.n	800bd7e <__ssvfscanf_r+0xbde>
 800bd78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd7a:	2b04      	cmp	r3, #4
 800bd7c:	d002      	beq.n	800bd84 <__ssvfscanf_r+0xbe4>
 800bd7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd80:	3b01      	subs	r3, #1
 800bd82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1d2      	bne.n	800bd30 <__ssvfscanf_r+0xb90>
 800bd8a:	3404      	adds	r4, #4
 800bd8c:	2d00      	cmp	r5, #0
 800bd8e:	d016      	beq.n	800bdbe <__ssvfscanf_r+0xc1e>
 800bd90:	69fa      	ldr	r2, [r7, #28]
 800bd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd94:	623a      	str	r2, [r7, #32]
 800bd96:	693a      	ldr	r2, [r7, #16]
 800bd98:	1ae6      	subs	r6, r4, r3
 800bd9a:	10b3      	asrs	r3, r6, #2
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d3c7      	bcc.n	800bd30 <__ssvfscanf_r+0xb90>
 800bda0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bda2:	00d1      	lsls	r1, r2, #3
 800bda4:	f001 fcf6 	bl	800d794 <realloc>
 800bda8:	6338      	str	r0, [r7, #48]	; 0x30
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	d101      	bne.n	800bdb2 <__ssvfscanf_r+0xc12>
 800bdae:	f7ff fbbf 	bl	800b530 <__ssvfscanf_r+0x390>
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	1984      	adds	r4, r0, r6
 800bdb6:	005b      	lsls	r3, r3, #1
 800bdb8:	6028      	str	r0, [r5, #0]
 800bdba:	613b      	str	r3, [r7, #16]
 800bdbc:	e7b8      	b.n	800bd30 <__ssvfscanf_r+0xb90>
 800bdbe:	623d      	str	r5, [r7, #32]
 800bdc0:	e7b6      	b.n	800bd30 <__ssvfscanf_r+0xb90>
 800bdc2:	46c0      	nop			; (mov r8, r8)
 800bdc4:	0000fff6 	.word	0x0000fff6
 800bdc8:	0800f6d9 	.word	0x0800f6d9
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d01c      	beq.n	800be0c <__ssvfscanf_r+0xc6c>
 800bdd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdd4:	49bf      	ldr	r1, [pc, #764]	; (800c0d4 <__ssvfscanf_r+0xf34>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	781a      	ldrb	r2, [r3, #0]
 800bdda:	5c8a      	ldrb	r2, [r1, r2]
 800bddc:	2108      	movs	r1, #8
 800bdde:	420a      	tst	r2, r1
 800bde0:	d000      	beq.n	800bde4 <__ssvfscanf_r+0xc44>
 800bde2:	e4a1      	b.n	800b728 <__ssvfscanf_r+0x588>
 800bde4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bde6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bde8:	6852      	ldr	r2, [r2, #4]
 800bdea:	3301      	adds	r3, #1
 800bdec:	600b      	str	r3, [r1, #0]
 800bdee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdf0:	3a01      	subs	r2, #1
 800bdf2:	3401      	adds	r4, #1
 800bdf4:	604a      	str	r2, [r1, #4]
 800bdf6:	429c      	cmp	r4, r3
 800bdf8:	d100      	bne.n	800bdfc <__ssvfscanf_r+0xc5c>
 800bdfa:	e495      	b.n	800b728 <__ssvfscanf_r+0x588>
 800bdfc:	2a00      	cmp	r2, #0
 800bdfe:	dce8      	bgt.n	800bdd2 <__ssvfscanf_r+0xc32>
 800be00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800be02:	f002 f961 	bl	800e0c8 <__ssrefill_r>
 800be06:	2800      	cmp	r0, #0
 800be08:	d0e3      	beq.n	800bdd2 <__ssvfscanf_r+0xc32>
 800be0a:	e48d      	b.n	800b728 <__ssvfscanf_r+0x588>
 800be0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0e:	0032      	movs	r2, r6
 800be10:	cb10      	ldmia	r3!, {r4}
 800be12:	61fb      	str	r3, [r7, #28]
 800be14:	2380      	movs	r3, #128	; 0x80
 800be16:	401a      	ands	r2, r3
 800be18:	421e      	tst	r6, r3
 800be1a:	d039      	beq.n	800be90 <__ssvfscanf_r+0xcf0>
 800be1c:	2c00      	cmp	r4, #0
 800be1e:	d101      	bne.n	800be24 <__ssvfscanf_r+0xc84>
 800be20:	f7ff fabb 	bl	800b39a <__ssvfscanf_r+0x1fa>
 800be24:	2020      	movs	r0, #32
 800be26:	f7fb fb45 	bl	80074b4 <malloc>
 800be2a:	6338      	str	r0, [r7, #48]	; 0x30
 800be2c:	2800      	cmp	r0, #0
 800be2e:	d101      	bne.n	800be34 <__ssvfscanf_r+0xc94>
 800be30:	f7ff fa8c 	bl	800b34c <__ssvfscanf_r+0x1ac>
 800be34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be36:	6020      	str	r0, [r4, #0]
 800be38:	88de      	ldrh	r6, [r3, #6]
 800be3a:	889d      	ldrh	r5, [r3, #4]
 800be3c:	6818      	ldr	r0, [r3, #0]
 800be3e:	42ae      	cmp	r6, r5
 800be40:	d310      	bcc.n	800be64 <__ssvfscanf_r+0xcc4>
 800be42:	4ba5      	ldr	r3, [pc, #660]	; (800c0d8 <__ssvfscanf_r+0xf38>)
 800be44:	429d      	cmp	r5, r3
 800be46:	d901      	bls.n	800be4c <__ssvfscanf_r+0xcac>
 800be48:	f7ff fb7b 	bl	800b542 <__ssvfscanf_r+0x3a2>
 800be4c:	3508      	adds	r5, #8
 800be4e:	b2ad      	uxth	r5, r5
 800be50:	00a9      	lsls	r1, r5, #2
 800be52:	f001 fc9f 	bl	800d794 <realloc>
 800be56:	2800      	cmp	r0, #0
 800be58:	d101      	bne.n	800be5e <__ssvfscanf_r+0xcbe>
 800be5a:	f7ff fb72 	bl	800b542 <__ssvfscanf_r+0x3a2>
 800be5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be60:	6018      	str	r0, [r3, #0]
 800be62:	809d      	strh	r5, [r3, #4]
 800be64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be66:	1c72      	adds	r2, r6, #1
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	00b6      	lsls	r6, r6, #2
 800be6c:	50f4      	str	r4, [r6, r3]
 800be6e:	2320      	movs	r3, #32
 800be70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be72:	0026      	movs	r6, r4
 800be74:	80ca      	strh	r2, [r1, #6]
 800be76:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800be78:	633b      	str	r3, [r7, #48]	; 0x30
 800be7a:	0025      	movs	r5, r4
 800be7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be7e:	4995      	ldr	r1, [pc, #596]	; (800c0d4 <__ssvfscanf_r+0xf34>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	781a      	ldrb	r2, [r3, #0]
 800be84:	5c8a      	ldrb	r2, [r1, r2]
 800be86:	2108      	movs	r1, #8
 800be88:	420a      	tst	r2, r1
 800be8a:	d004      	beq.n	800be96 <__ssvfscanf_r+0xcf6>
 800be8c:	623c      	str	r4, [r7, #32]
 800be8e:	e031      	b.n	800bef4 <__ssvfscanf_r+0xd54>
 800be90:	0016      	movs	r6, r2
 800be92:	633a      	str	r2, [r7, #48]	; 0x30
 800be94:	e7f1      	b.n	800be7a <__ssvfscanf_r+0xcda>
 800be96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be9a:	6852      	ldr	r2, [r2, #4]
 800be9c:	3a01      	subs	r2, #1
 800be9e:	604a      	str	r2, [r1, #4]
 800bea0:	1c5a      	adds	r2, r3, #1
 800bea2:	600a      	str	r2, [r1, #0]
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	1c62      	adds	r2, r4, #1
 800bea8:	623a      	str	r2, [r7, #32]
 800beaa:	7023      	strb	r3, [r4, #0]
 800beac:	2e00      	cmp	r6, #0
 800beae:	d010      	beq.n	800bed2 <__ssvfscanf_r+0xd32>
 800beb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb2:	1b54      	subs	r4, r2, r5
 800beb4:	429c      	cmp	r4, r3
 800beb6:	d30c      	bcc.n	800bed2 <__ssvfscanf_r+0xd32>
 800beb8:	005b      	lsls	r3, r3, #1
 800beba:	0028      	movs	r0, r5
 800bebc:	0019      	movs	r1, r3
 800bebe:	633b      	str	r3, [r7, #48]	; 0x30
 800bec0:	f001 fc68 	bl	800d794 <realloc>
 800bec4:	1e05      	subs	r5, r0, #0
 800bec6:	d101      	bne.n	800becc <__ssvfscanf_r+0xd2c>
 800bec8:	f7ff fa40 	bl	800b34c <__ssvfscanf_r+0x1ac>
 800becc:	1903      	adds	r3, r0, r4
 800bece:	623b      	str	r3, [r7, #32]
 800bed0:	6030      	str	r0, [r6, #0]
 800bed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bed4:	3b01      	subs	r3, #1
 800bed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d00b      	beq.n	800bef4 <__ssvfscanf_r+0xd54>
 800bedc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	dd01      	ble.n	800bee8 <__ssvfscanf_r+0xd48>
 800bee4:	6a3c      	ldr	r4, [r7, #32]
 800bee6:	e7c9      	b.n	800be7c <__ssvfscanf_r+0xcdc>
 800bee8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800beea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800beec:	f002 f8ec 	bl	800e0c8 <__ssrefill_r>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	d0f7      	beq.n	800bee4 <__ssvfscanf_r+0xd44>
 800bef4:	2300      	movs	r3, #0
 800bef6:	6a3a      	ldr	r2, [r7, #32]
 800bef8:	7013      	strb	r3, [r2, #0]
 800befa:	1b55      	subs	r5, r2, r5
 800befc:	2e00      	cmp	r6, #0
 800befe:	d009      	beq.n	800bf14 <__ssvfscanf_r+0xd74>
 800bf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf02:	1c69      	adds	r1, r5, #1
 800bf04:	428b      	cmp	r3, r1
 800bf06:	d905      	bls.n	800bf14 <__ssvfscanf_r+0xd74>
 800bf08:	6830      	ldr	r0, [r6, #0]
 800bf0a:	f001 fc43 	bl	800d794 <realloc>
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	d000      	beq.n	800bf14 <__ssvfscanf_r+0xd74>
 800bf12:	6030      	str	r0, [r6, #0]
 800bf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf16:	195b      	adds	r3, r3, r5
 800bf18:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf20:	e63c      	b.n	800bb9c <__ssvfscanf_r+0x9fc>
 800bf22:	22ae      	movs	r2, #174	; 0xae
 800bf24:	2100      	movs	r1, #0
 800bf26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf28:	0052      	lsls	r2, r2, #1
 800bf2a:	3b01      	subs	r3, #1
 800bf2c:	6239      	str	r1, [r7, #32]
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d906      	bls.n	800bf40 <__ssvfscanf_r+0xda0>
 800bf32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf34:	3b5e      	subs	r3, #94	; 0x5e
 800bf36:	3bff      	subs	r3, #255	; 0xff
 800bf38:	623b      	str	r3, [r7, #32]
 800bf3a:	235e      	movs	r3, #94	; 0x5e
 800bf3c:	33ff      	adds	r3, #255	; 0xff
 800bf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf40:	24d8      	movs	r4, #216	; 0xd8
 800bf42:	2300      	movs	r3, #0
 800bf44:	2248      	movs	r2, #72	; 0x48
 800bf46:	0124      	lsls	r4, r4, #4
 800bf48:	4334      	orrs	r4, r6
 800bf4a:	2680      	movs	r6, #128	; 0x80
 800bf4c:	61fb      	str	r3, [r7, #28]
 800bf4e:	3319      	adds	r3, #25
 800bf50:	33ff      	adds	r3, #255	; 0xff
 800bf52:	189b      	adds	r3, r3, r2
 800bf54:	19dd      	adds	r5, r3, r7
 800bf56:	00b6      	lsls	r6, r6, #2
 800bf58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	7813      	ldrb	r3, [r2, #0]
 800bf5e:	2b39      	cmp	r3, #57	; 0x39
 800bf60:	d80f      	bhi.n	800bf82 <__ssvfscanf_r+0xde2>
 800bf62:	2b2a      	cmp	r3, #42	; 0x2a
 800bf64:	d91b      	bls.n	800bf9e <__ssvfscanf_r+0xdfe>
 800bf66:	0018      	movs	r0, r3
 800bf68:	382b      	subs	r0, #43	; 0x2b
 800bf6a:	280e      	cmp	r0, #14
 800bf6c:	d817      	bhi.n	800bf9e <__ssvfscanf_r+0xdfe>
 800bf6e:	f7f4 f8d1 	bl	8000114 <__gnu_thumb1_case_uqi>
 800bf72:	168f      	.short	0x168f
 800bf74:	5416168f 	.word	0x5416168f
 800bf78:	80808080 	.word	0x80808080
 800bf7c:	87808080 	.word	0x87808080
 800bf80:	87          	.byte	0x87
 800bf81:	00          	.byte	0x00
 800bf82:	2b66      	cmp	r3, #102	; 0x66
 800bf84:	d83a      	bhi.n	800bffc <__ssvfscanf_r+0xe5c>
 800bf86:	2b60      	cmp	r3, #96	; 0x60
 800bf88:	d803      	bhi.n	800bf92 <__ssvfscanf_r+0xdf2>
 800bf8a:	2b46      	cmp	r3, #70	; 0x46
 800bf8c:	d805      	bhi.n	800bf9a <__ssvfscanf_r+0xdfa>
 800bf8e:	2b40      	cmp	r3, #64	; 0x40
 800bf90:	d905      	bls.n	800bf9e <__ssvfscanf_r+0xdfe>
 800bf92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf94:	290a      	cmp	r1, #10
 800bf96:	dc71      	bgt.n	800c07c <__ssvfscanf_r+0xedc>
 800bf98:	e001      	b.n	800bf9e <__ssvfscanf_r+0xdfe>
 800bf9a:	2b58      	cmp	r3, #88	; 0x58
 800bf9c:	d030      	beq.n	800c000 <__ssvfscanf_r+0xe60>
 800bf9e:	05e3      	lsls	r3, r4, #23
 800bfa0:	d515      	bpl.n	800bfce <__ssvfscanf_r+0xe2e>
 800bfa2:	238c      	movs	r3, #140	; 0x8c
 800bfa4:	2248      	movs	r2, #72	; 0x48
 800bfa6:	005b      	lsls	r3, r3, #1
 800bfa8:	189b      	adds	r3, r3, r2
 800bfaa:	19db      	adds	r3, r3, r7
 800bfac:	429d      	cmp	r5, r3
 800bfae:	d905      	bls.n	800bfbc <__ssvfscanf_r+0xe1c>
 800bfb0:	3d01      	subs	r5, #1
 800bfb2:	7829      	ldrb	r1, [r5, #0]
 800bfb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bfb8:	f002 f84a 	bl	800e050 <_sungetc_r>
 800bfbc:	238c      	movs	r3, #140	; 0x8c
 800bfbe:	2248      	movs	r2, #72	; 0x48
 800bfc0:	005b      	lsls	r3, r3, #1
 800bfc2:	189b      	adds	r3, r3, r2
 800bfc4:	19db      	adds	r3, r3, r7
 800bfc6:	429d      	cmp	r5, r3
 800bfc8:	d101      	bne.n	800bfce <__ssvfscanf_r+0xe2e>
 800bfca:	f7ff f9e6 	bl	800b39a <__ssvfscanf_r+0x1fa>
 800bfce:	2310      	movs	r3, #16
 800bfd0:	0022      	movs	r2, r4
 800bfd2:	401a      	ands	r2, r3
 800bfd4:	421c      	tst	r4, r3
 800bfd6:	d171      	bne.n	800c0bc <__ssvfscanf_r+0xf1c>
 800bfd8:	218c      	movs	r1, #140	; 0x8c
 800bfda:	2048      	movs	r0, #72	; 0x48
 800bfdc:	0049      	lsls	r1, r1, #1
 800bfde:	1809      	adds	r1, r1, r0
 800bfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe2:	697e      	ldr	r6, [r7, #20]
 800bfe4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bfe6:	19c9      	adds	r1, r1, r7
 800bfe8:	702a      	strb	r2, [r5, #0]
 800bfea:	47b0      	blx	r6
 800bfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfee:	1d1e      	adds	r6, r3, #4
 800bff0:	06a3      	lsls	r3, r4, #26
 800bff2:	d559      	bpl.n	800c0a8 <__ssvfscanf_r+0xf08>
 800bff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	6018      	str	r0, [r3, #0]
 800bffa:	e05b      	b.n	800c0b4 <__ssvfscanf_r+0xf14>
 800bffc:	2b78      	cmp	r3, #120	; 0x78
 800bffe:	d1ce      	bne.n	800bf9e <__ssvfscanf_r+0xdfe>
 800c000:	21c0      	movs	r1, #192	; 0xc0
 800c002:	00c9      	lsls	r1, r1, #3
 800c004:	4021      	ands	r1, r4
 800c006:	42b1      	cmp	r1, r6
 800c008:	d1c9      	bne.n	800bf9e <__ssvfscanf_r+0xdfe>
 800c00a:	4934      	ldr	r1, [pc, #208]	; (800c0dc <__ssvfscanf_r+0xf3c>)
 800c00c:	4021      	ands	r1, r4
 800c00e:	24a0      	movs	r4, #160	; 0xa0
 800c010:	00e4      	lsls	r4, r4, #3
 800c012:	430c      	orrs	r4, r1
 800c014:	2110      	movs	r1, #16
 800c016:	6279      	str	r1, [r7, #36]	; 0x24
 800c018:	e00b      	b.n	800c032 <__ssvfscanf_r+0xe92>
 800c01a:	0521      	lsls	r1, r4, #20
 800c01c:	d509      	bpl.n	800c032 <__ssvfscanf_r+0xe92>
 800c01e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c020:	2900      	cmp	r1, #0
 800c022:	d102      	bne.n	800c02a <__ssvfscanf_r+0xe8a>
 800c024:	3108      	adds	r1, #8
 800c026:	4334      	orrs	r4, r6
 800c028:	6279      	str	r1, [r7, #36]	; 0x24
 800c02a:	0561      	lsls	r1, r4, #21
 800c02c:	d504      	bpl.n	800c038 <__ssvfscanf_r+0xe98>
 800c02e:	492c      	ldr	r1, [pc, #176]	; (800c0e0 <__ssvfscanf_r+0xf40>)
 800c030:	400c      	ands	r4, r1
 800c032:	702b      	strb	r3, [r5, #0]
 800c034:	3501      	adds	r5, #1
 800c036:	e00c      	b.n	800c052 <__ssvfscanf_r+0xeb2>
 800c038:	4b2a      	ldr	r3, [pc, #168]	; (800c0e4 <__ssvfscanf_r+0xf44>)
 800c03a:	401c      	ands	r4, r3
 800c03c:	6a3b      	ldr	r3, [r7, #32]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d004      	beq.n	800c04c <__ssvfscanf_r+0xeac>
 800c042:	3b01      	subs	r3, #1
 800c044:	623b      	str	r3, [r7, #32]
 800c046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c048:	3301      	adds	r3, #1
 800c04a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	3301      	adds	r3, #1
 800c050:	61fb      	str	r3, [r7, #28]
 800c052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c054:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	3b01      	subs	r3, #1
 800c05a:	604b      	str	r3, [r1, #4]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	dd1c      	ble.n	800c09a <__ssvfscanf_r+0xefa>
 800c060:	3201      	adds	r2, #1
 800c062:	600a      	str	r2, [r1, #0]
 800c064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c066:	3b01      	subs	r3, #1
 800c068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d000      	beq.n	800c070 <__ssvfscanf_r+0xed0>
 800c06e:	e773      	b.n	800bf58 <__ssvfscanf_r+0xdb8>
 800c070:	e795      	b.n	800bf9e <__ssvfscanf_r+0xdfe>
 800c072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c074:	491c      	ldr	r1, [pc, #112]	; (800c0e8 <__ssvfscanf_r+0xf48>)
 800c076:	0040      	lsls	r0, r0, #1
 800c078:	5e41      	ldrsh	r1, [r0, r1]
 800c07a:	6279      	str	r1, [r7, #36]	; 0x24
 800c07c:	491b      	ldr	r1, [pc, #108]	; (800c0ec <__ssvfscanf_r+0xf4c>)
 800c07e:	e7d7      	b.n	800c030 <__ssvfscanf_r+0xe90>
 800c080:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c082:	4919      	ldr	r1, [pc, #100]	; (800c0e8 <__ssvfscanf_r+0xf48>)
 800c084:	0040      	lsls	r0, r0, #1
 800c086:	5e41      	ldrsh	r1, [r0, r1]
 800c088:	6279      	str	r1, [r7, #36]	; 0x24
 800c08a:	2908      	cmp	r1, #8
 800c08c:	dcf6      	bgt.n	800c07c <__ssvfscanf_r+0xedc>
 800c08e:	e786      	b.n	800bf9e <__ssvfscanf_r+0xdfe>
 800c090:	2180      	movs	r1, #128	; 0x80
 800c092:	420c      	tst	r4, r1
 800c094:	d083      	beq.n	800bf9e <__ssvfscanf_r+0xdfe>
 800c096:	438c      	bics	r4, r1
 800c098:	e7cb      	b.n	800c032 <__ssvfscanf_r+0xe92>
 800c09a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c09c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c09e:	f002 f813 	bl	800e0c8 <__ssrefill_r>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d0de      	beq.n	800c064 <__ssvfscanf_r+0xec4>
 800c0a6:	e77a      	b.n	800bf9e <__ssvfscanf_r+0xdfe>
 800c0a8:	2308      	movs	r3, #8
 800c0aa:	421c      	tst	r4, r3
 800c0ac:	d020      	beq.n	800c0f0 <__ssvfscanf_r+0xf50>
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	7018      	strb	r0, [r3, #0]
 800c0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b6:	633e      	str	r6, [r7, #48]	; 0x30
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0bc:	238c      	movs	r3, #140	; 0x8c
 800c0be:	2248      	movs	r2, #72	; 0x48
 800c0c0:	005b      	lsls	r3, r3, #1
 800c0c2:	189b      	adds	r3, r3, r2
 800c0c4:	19db      	adds	r3, r3, r7
 800c0c6:	1aed      	subs	r5, r5, r3
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	18ed      	adds	r5, r5, r3
 800c0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ce:	195b      	adds	r3, r3, r5
 800c0d0:	f7ff f92d 	bl	800b32e <__ssvfscanf_r+0x18e>
 800c0d4:	0800f6d9 	.word	0x0800f6d9
 800c0d8:	0000fff6 	.word	0x0000fff6
 800c0dc:	fffffdff 	.word	0xfffffdff
 800c0e0:	fffffa7f 	.word	0xfffffa7f
 800c0e4:	fffffc7f 	.word	0xfffffc7f
 800c0e8:	0800fa06 	.word	0x0800fa06
 800c0ec:	fffff47f 	.word	0xfffff47f
 800c0f0:	0763      	lsls	r3, r4, #29
 800c0f2:	d503      	bpl.n	800c0fc <__ssvfscanf_r+0xf5c>
 800c0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	8018      	strh	r0, [r3, #0]
 800c0fa:	e7db      	b.n	800c0b4 <__ssvfscanf_r+0xf14>
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	0022      	movs	r2, r4
 800c100:	401a      	ands	r2, r3
 800c102:	421c      	tst	r4, r3
 800c104:	d000      	beq.n	800c108 <__ssvfscanf_r+0xf68>
 800c106:	e775      	b.n	800bff4 <__ssvfscanf_r+0xe54>
 800c108:	07a4      	lsls	r4, r4, #30
 800c10a:	d400      	bmi.n	800c10e <__ssvfscanf_r+0xf6e>
 800c10c:	e772      	b.n	800bff4 <__ssvfscanf_r+0xe54>
 800c10e:	4ba8      	ldr	r3, [pc, #672]	; (800c3b0 <__ssvfscanf_r+0x1210>)
 800c110:	6979      	ldr	r1, [r7, #20]
 800c112:	4299      	cmp	r1, r3
 800c114:	d10c      	bne.n	800c130 <__ssvfscanf_r+0xf90>
 800c116:	218c      	movs	r1, #140	; 0x8c
 800c118:	2048      	movs	r0, #72	; 0x48
 800c11a:	0049      	lsls	r1, r1, #1
 800c11c:	1809      	adds	r1, r1, r0
 800c11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c120:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c122:	19c9      	adds	r1, r1, r7
 800c124:	f001 fecc 	bl	800dec0 <_strtoull_r>
 800c128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	c303      	stmia	r3!, {r0, r1}
 800c12e:	e7c1      	b.n	800c0b4 <__ssvfscanf_r+0xf14>
 800c130:	218c      	movs	r1, #140	; 0x8c
 800c132:	2048      	movs	r0, #72	; 0x48
 800c134:	0049      	lsls	r1, r1, #1
 800c136:	1809      	adds	r1, r1, r0
 800c138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c13c:	19c9      	adds	r1, r1, r7
 800c13e:	f001 fe0d 	bl	800dd5c <_strtoll_r>
 800c142:	e7f1      	b.n	800c128 <__ssvfscanf_r+0xf88>
 800c144:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c146:	f000 fb9f 	bl	800c888 <_localeconv_r>
 800c14a:	22ae      	movs	r2, #174	; 0xae
 800c14c:	2100      	movs	r1, #0
 800c14e:	6803      	ldr	r3, [r0, #0]
 800c150:	0052      	lsls	r2, r2, #1
 800c152:	603b      	str	r3, [r7, #0]
 800c154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c156:	60f9      	str	r1, [r7, #12]
 800c158:	3b01      	subs	r3, #1
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d906      	bls.n	800c16c <__ssvfscanf_r+0xfcc>
 800c15e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c160:	3b5e      	subs	r3, #94	; 0x5e
 800c162:	3bff      	subs	r3, #255	; 0xff
 800c164:	60fb      	str	r3, [r7, #12]
 800c166:	235e      	movs	r3, #94	; 0x5e
 800c168:	33ff      	adds	r3, #255	; 0xff
 800c16a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c16c:	23f0      	movs	r3, #240	; 0xf0
 800c16e:	00db      	lsls	r3, r3, #3
 800c170:	431e      	orrs	r6, r3
 800c172:	238c      	movs	r3, #140	; 0x8c
 800c174:	2248      	movs	r2, #72	; 0x48
 800c176:	2400      	movs	r4, #0
 800c178:	005b      	lsls	r3, r3, #1
 800c17a:	189b      	adds	r3, r3, r2
 800c17c:	623c      	str	r4, [r7, #32]
 800c17e:	607c      	str	r4, [r7, #4]
 800c180:	60bc      	str	r4, [r7, #8]
 800c182:	61fc      	str	r4, [r7, #28]
 800c184:	613c      	str	r4, [r7, #16]
 800c186:	19dd      	adds	r5, r3, r7
 800c188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	781a      	ldrb	r2, [r3, #0]
 800c18e:	0010      	movs	r0, r2
 800c190:	382b      	subs	r0, #43	; 0x2b
 800c192:	284e      	cmp	r0, #78	; 0x4e
 800c194:	d900      	bls.n	800c198 <__ssvfscanf_r+0xff8>
 800c196:	e133      	b.n	800c400 <__ssvfscanf_r+0x1260>
 800c198:	f7f3 ffc6 	bl	8000128 <__gnu_thumb1_case_uhi>
 800c19c:	0132009b 	.word	0x0132009b
 800c1a0:	0132009b 	.word	0x0132009b
 800c1a4:	004f0132 	.word	0x004f0132
 800c1a8:	00720072 	.word	0x00720072
 800c1ac:	00720072 	.word	0x00720072
 800c1b0:	00720072 	.word	0x00720072
 800c1b4:	00720072 	.word	0x00720072
 800c1b8:	01320072 	.word	0x01320072
 800c1bc:	01320132 	.word	0x01320132
 800c1c0:	01320132 	.word	0x01320132
 800c1c4:	01320132 	.word	0x01320132
 800c1c8:	007b00bc 	.word	0x007b00bc
 800c1cc:	007b007b 	.word	0x007b007b
 800c1d0:	00f7012f 	.word	0x00f7012f
 800c1d4:	01320132 	.word	0x01320132
 800c1d8:	013200e3 	.word	0x013200e3
 800c1dc:	01320132 	.word	0x01320132
 800c1e0:	00a00132 	.word	0x00a00132
 800c1e4:	01120132 	.word	0x01120132
 800c1e8:	01320132 	.word	0x01320132
 800c1ec:	01010132 	.word	0x01010132
 800c1f0:	01320132 	.word	0x01320132
 800c1f4:	00820132 	.word	0x00820132
 800c1f8:	01320105 	.word	0x01320105
 800c1fc:	01320132 	.word	0x01320132
 800c200:	01320132 	.word	0x01320132
 800c204:	01320132 	.word	0x01320132
 800c208:	007b00bc 	.word	0x007b00bc
 800c20c:	007b007b 	.word	0x007b007b
 800c210:	00f7012f 	.word	0x00f7012f
 800c214:	01320132 	.word	0x01320132
 800c218:	013200e3 	.word	0x013200e3
 800c21c:	01320132 	.word	0x01320132
 800c220:	00a00132 	.word	0x00a00132
 800c224:	01120132 	.word	0x01120132
 800c228:	01320132 	.word	0x01320132
 800c22c:	01010132 	.word	0x01010132
 800c230:	01320132 	.word	0x01320132
 800c234:	00820132 	.word	0x00820132
 800c238:	0105      	.short	0x0105
 800c23a:	05f1      	lsls	r1, r6, #23
 800c23c:	d520      	bpl.n	800c280 <__ssvfscanf_r+0x10e0>
 800c23e:	2280      	movs	r2, #128	; 0x80
 800c240:	4396      	bics	r6, r2
 800c242:	69fa      	ldr	r2, [r7, #28]
 800c244:	3201      	adds	r2, #1
 800c246:	61fa      	str	r2, [r7, #28]
 800c248:	68fa      	ldr	r2, [r7, #12]
 800c24a:	2a00      	cmp	r2, #0
 800c24c:	d004      	beq.n	800c258 <__ssvfscanf_r+0x10b8>
 800c24e:	3a01      	subs	r2, #1
 800c250:	60fa      	str	r2, [r7, #12]
 800c252:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c254:	3201      	adds	r2, #1
 800c256:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c258:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c25a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c25c:	3a01      	subs	r2, #1
 800c25e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c262:	3201      	adds	r2, #1
 800c264:	63ba      	str	r2, [r7, #56]	; 0x38
 800c266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c268:	6852      	ldr	r2, [r2, #4]
 800c26a:	3a01      	subs	r2, #1
 800c26c:	604a      	str	r2, [r1, #4]
 800c26e:	2a00      	cmp	r2, #0
 800c270:	dc00      	bgt.n	800c274 <__ssvfscanf_r+0x10d4>
 800c272:	e0d6      	b.n	800c422 <__ssvfscanf_r+0x1282>
 800c274:	3301      	adds	r3, #1
 800c276:	600b      	str	r3, [r1, #0]
 800c278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d184      	bne.n	800c188 <__ssvfscanf_r+0xfe8>
 800c27e:	e057      	b.n	800c330 <__ssvfscanf_r+0x1190>
 800c280:	6a39      	ldr	r1, [r7, #32]
 800c282:	1909      	adds	r1, r1, r4
 800c284:	2900      	cmp	r1, #0
 800c286:	d153      	bne.n	800c330 <__ssvfscanf_r+0x1190>
 800c288:	494a      	ldr	r1, [pc, #296]	; (800c3b4 <__ssvfscanf_r+0x1214>)
 800c28a:	400e      	ands	r6, r1
 800c28c:	702a      	strb	r2, [r5, #0]
 800c28e:	3501      	adds	r5, #1
 800c290:	e7e2      	b.n	800c258 <__ssvfscanf_r+0x10b8>
 800c292:	0531      	lsls	r1, r6, #20
 800c294:	d54c      	bpl.n	800c330 <__ssvfscanf_r+0x1190>
 800c296:	6a39      	ldr	r1, [r7, #32]
 800c298:	1909      	adds	r1, r1, r4
 800c29a:	2900      	cmp	r1, #0
 800c29c:	d040      	beq.n	800c320 <__ssvfscanf_r+0x1180>
 800c29e:	e047      	b.n	800c330 <__ssvfscanf_r+0x1190>
 800c2a0:	2198      	movs	r1, #152	; 0x98
 800c2a2:	2080      	movs	r0, #128	; 0x80
 800c2a4:	0109      	lsls	r1, r1, #4
 800c2a6:	4031      	ands	r1, r6
 800c2a8:	0040      	lsls	r0, r0, #1
 800c2aa:	4281      	cmp	r1, r0
 800c2ac:	d140      	bne.n	800c330 <__ssvfscanf_r+0x1190>
 800c2ae:	69f9      	ldr	r1, [r7, #28]
 800c2b0:	2901      	cmp	r1, #1
 800c2b2:	d13d      	bne.n	800c330 <__ssvfscanf_r+0x1190>
 800c2b4:	2080      	movs	r0, #128	; 0x80
 800c2b6:	4940      	ldr	r1, [pc, #256]	; (800c3b8 <__ssvfscanf_r+0x1218>)
 800c2b8:	0100      	lsls	r0, r0, #4
 800c2ba:	400e      	ands	r6, r1
 800c2bc:	3132      	adds	r1, #50	; 0x32
 800c2be:	31ff      	adds	r1, #255	; 0xff
 800c2c0:	7029      	strb	r1, [r5, #0]
 800c2c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c2c4:	4306      	orrs	r6, r0
 800c2c6:	3901      	subs	r1, #1
 800c2c8:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c2ca:	3501      	adds	r5, #1
 800c2cc:	2100      	movs	r1, #0
 800c2ce:	61f9      	str	r1, [r7, #28]
 800c2d0:	e7dc      	b.n	800c28c <__ssvfscanf_r+0x10ec>
 800c2d2:	2180      	movs	r1, #128	; 0x80
 800c2d4:	420e      	tst	r6, r1
 800c2d6:	d02b      	beq.n	800c330 <__ssvfscanf_r+0x1190>
 800c2d8:	438e      	bics	r6, r1
 800c2da:	e7d7      	b.n	800c28c <__ssvfscanf_r+0x10ec>
 800c2dc:	6a39      	ldr	r1, [r7, #32]
 800c2de:	2900      	cmp	r1, #0
 800c2e0:	d10d      	bne.n	800c2fe <__ssvfscanf_r+0x115e>
 800c2e2:	69f9      	ldr	r1, [r7, #28]
 800c2e4:	2900      	cmp	r1, #0
 800c2e6:	d10e      	bne.n	800c306 <__ssvfscanf_r+0x1166>
 800c2e8:	21e0      	movs	r1, #224	; 0xe0
 800c2ea:	0030      	movs	r0, r6
 800c2ec:	00c9      	lsls	r1, r1, #3
 800c2ee:	4008      	ands	r0, r1
 800c2f0:	4288      	cmp	r0, r1
 800c2f2:	d108      	bne.n	800c306 <__ssvfscanf_r+0x1166>
 800c2f4:	4931      	ldr	r1, [pc, #196]	; (800c3bc <__ssvfscanf_r+0x121c>)
 800c2f6:	400e      	ands	r6, r1
 800c2f8:	2101      	movs	r1, #1
 800c2fa:	6239      	str	r1, [r7, #32]
 800c2fc:	e7c6      	b.n	800c28c <__ssvfscanf_r+0x10ec>
 800c2fe:	6a39      	ldr	r1, [r7, #32]
 800c300:	2902      	cmp	r1, #2
 800c302:	d100      	bne.n	800c306 <__ssvfscanf_r+0x1166>
 800c304:	e089      	b.n	800c41a <__ssvfscanf_r+0x127a>
 800c306:	2c01      	cmp	r4, #1
 800c308:	d001      	beq.n	800c30e <__ssvfscanf_r+0x116e>
 800c30a:	2c04      	cmp	r4, #4
 800c30c:	d110      	bne.n	800c330 <__ssvfscanf_r+0x1190>
 800c30e:	3401      	adds	r4, #1
 800c310:	b2e4      	uxtb	r4, r4
 800c312:	e7bb      	b.n	800c28c <__ssvfscanf_r+0x10ec>
 800c314:	0531      	lsls	r1, r6, #20
 800c316:	d508      	bpl.n	800c32a <__ssvfscanf_r+0x118a>
 800c318:	6a39      	ldr	r1, [r7, #32]
 800c31a:	1909      	adds	r1, r1, r4
 800c31c:	2900      	cmp	r1, #0
 800c31e:	d104      	bne.n	800c32a <__ssvfscanf_r+0x118a>
 800c320:	4824      	ldr	r0, [pc, #144]	; (800c3b4 <__ssvfscanf_r+0x1214>)
 800c322:	000c      	movs	r4, r1
 800c324:	4006      	ands	r6, r0
 800c326:	6239      	str	r1, [r7, #32]
 800c328:	e7b0      	b.n	800c28c <__ssvfscanf_r+0x10ec>
 800c32a:	6a39      	ldr	r1, [r7, #32]
 800c32c:	2901      	cmp	r1, #1
 800c32e:	d076      	beq.n	800c41e <__ssvfscanf_r+0x127e>
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d001      	beq.n	800c33a <__ssvfscanf_r+0x119a>
 800c336:	4b20      	ldr	r3, [pc, #128]	; (800c3b8 <__ssvfscanf_r+0x1218>)
 800c338:	401e      	ands	r6, r3
 800c33a:	6a3b      	ldr	r3, [r7, #32]
 800c33c:	3b01      	subs	r3, #1
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d877      	bhi.n	800c432 <__ssvfscanf_r+0x1292>
 800c342:	238c      	movs	r3, #140	; 0x8c
 800c344:	2248      	movs	r2, #72	; 0x48
 800c346:	005b      	lsls	r3, r3, #1
 800c348:	189b      	adds	r3, r3, r2
 800c34a:	19db      	adds	r3, r3, r7
 800c34c:	429d      	cmp	r5, r3
 800c34e:	d801      	bhi.n	800c354 <__ssvfscanf_r+0x11b4>
 800c350:	f7ff f823 	bl	800b39a <__ssvfscanf_r+0x1fa>
 800c354:	3d01      	subs	r5, #1
 800c356:	7829      	ldrb	r1, [r5, #0]
 800c358:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c35a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c35c:	f001 fe78 	bl	800e050 <_sungetc_r>
 800c360:	e7ef      	b.n	800c342 <__ssvfscanf_r+0x11a2>
 800c362:	2c00      	cmp	r4, #0
 800c364:	d10c      	bne.n	800c380 <__ssvfscanf_r+0x11e0>
 800c366:	69f9      	ldr	r1, [r7, #28]
 800c368:	2900      	cmp	r1, #0
 800c36a:	d1e4      	bne.n	800c336 <__ssvfscanf_r+0x1196>
 800c36c:	21e0      	movs	r1, #224	; 0xe0
 800c36e:	0030      	movs	r0, r6
 800c370:	00c9      	lsls	r1, r1, #3
 800c372:	4008      	ands	r0, r1
 800c374:	4288      	cmp	r0, r1
 800c376:	d1e0      	bne.n	800c33a <__ssvfscanf_r+0x119a>
 800c378:	4910      	ldr	r1, [pc, #64]	; (800c3bc <__ssvfscanf_r+0x121c>)
 800c37a:	3401      	adds	r4, #1
 800c37c:	400e      	ands	r6, r1
 800c37e:	e785      	b.n	800c28c <__ssvfscanf_r+0x10ec>
 800c380:	20fd      	movs	r0, #253	; 0xfd
 800c382:	1ee1      	subs	r1, r4, #3
 800c384:	4201      	tst	r1, r0
 800c386:	d1d3      	bne.n	800c330 <__ssvfscanf_r+0x1190>
 800c388:	e7c1      	b.n	800c30e <__ssvfscanf_r+0x116e>
 800c38a:	0531      	lsls	r1, r6, #20
 800c38c:	d503      	bpl.n	800c396 <__ssvfscanf_r+0x11f6>
 800c38e:	6a39      	ldr	r1, [r7, #32]
 800c390:	1909      	adds	r1, r1, r4
 800c392:	2900      	cmp	r1, #0
 800c394:	d0c4      	beq.n	800c320 <__ssvfscanf_r+0x1180>
 800c396:	2c02      	cmp	r4, #2
 800c398:	d1ca      	bne.n	800c330 <__ssvfscanf_r+0x1190>
 800c39a:	2403      	movs	r4, #3
 800c39c:	e776      	b.n	800c28c <__ssvfscanf_r+0x10ec>
 800c39e:	2c06      	cmp	r4, #6
 800c3a0:	d1c6      	bne.n	800c330 <__ssvfscanf_r+0x1190>
 800c3a2:	2407      	movs	r4, #7
 800c3a4:	e772      	b.n	800c28c <__ssvfscanf_r+0x10ec>
 800c3a6:	2c07      	cmp	r4, #7
 800c3a8:	d1c2      	bne.n	800c330 <__ssvfscanf_r+0x1190>
 800c3aa:	2408      	movs	r4, #8
 800c3ac:	e76e      	b.n	800c28c <__ssvfscanf_r+0x10ec>
 800c3ae:	46c0      	nop			; (mov r8, r8)
 800c3b0:	0800dbf9 	.word	0x0800dbf9
 800c3b4:	fffffe7f 	.word	0xfffffe7f
 800c3b8:	fffffeff 	.word	0xfffffeff
 800c3bc:	fffff87f 	.word	0xfffff87f
 800c3c0:	0531      	lsls	r1, r6, #20
 800c3c2:	d5b5      	bpl.n	800c330 <__ssvfscanf_r+0x1190>
 800c3c4:	21a0      	movs	r1, #160	; 0xa0
 800c3c6:	2080      	movs	r0, #128	; 0x80
 800c3c8:	00c9      	lsls	r1, r1, #3
 800c3ca:	00c0      	lsls	r0, r0, #3
 800c3cc:	4031      	ands	r1, r6
 800c3ce:	4281      	cmp	r1, r0
 800c3d0:	d004      	beq.n	800c3dc <__ssvfscanf_r+0x123c>
 800c3d2:	4206      	tst	r6, r0
 800c3d4:	d0ac      	beq.n	800c330 <__ssvfscanf_r+0x1190>
 800c3d6:	69f9      	ldr	r1, [r7, #28]
 800c3d8:	2900      	cmp	r1, #0
 800c3da:	d0ae      	beq.n	800c33a <__ssvfscanf_r+0x119a>
 800c3dc:	2180      	movs	r1, #128	; 0x80
 800c3de:	0089      	lsls	r1, r1, #2
 800c3e0:	420e      	tst	r6, r1
 800c3e2:	d104      	bne.n	800c3ee <__ssvfscanf_r+0x124e>
 800c3e4:	69f9      	ldr	r1, [r7, #28]
 800c3e6:	6938      	ldr	r0, [r7, #16]
 800c3e8:	607d      	str	r5, [r7, #4]
 800c3ea:	1a09      	subs	r1, r1, r0
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	20c0      	movs	r0, #192	; 0xc0
 800c3f0:	4973      	ldr	r1, [pc, #460]	; (800c5c0 <__ssvfscanf_r+0x1420>)
 800c3f2:	0040      	lsls	r0, r0, #1
 800c3f4:	400e      	ands	r6, r1
 800c3f6:	4306      	orrs	r6, r0
 800c3f8:	e768      	b.n	800c2cc <__ssvfscanf_r+0x112c>
 800c3fa:	0531      	lsls	r1, r6, #20
 800c3fc:	d5e2      	bpl.n	800c3c4 <__ssvfscanf_r+0x1224>
 800c3fe:	e74a      	b.n	800c296 <__ssvfscanf_r+0x10f6>
 800c400:	6839      	ldr	r1, [r7, #0]
 800c402:	7809      	ldrb	r1, [r1, #0]
 800c404:	4291      	cmp	r1, r2
 800c406:	d193      	bne.n	800c330 <__ssvfscanf_r+0x1190>
 800c408:	2180      	movs	r1, #128	; 0x80
 800c40a:	0089      	lsls	r1, r1, #2
 800c40c:	420e      	tst	r6, r1
 800c40e:	d08f      	beq.n	800c330 <__ssvfscanf_r+0x1190>
 800c410:	496c      	ldr	r1, [pc, #432]	; (800c5c4 <__ssvfscanf_r+0x1424>)
 800c412:	400e      	ands	r6, r1
 800c414:	69f9      	ldr	r1, [r7, #28]
 800c416:	6139      	str	r1, [r7, #16]
 800c418:	e738      	b.n	800c28c <__ssvfscanf_r+0x10ec>
 800c41a:	2103      	movs	r1, #3
 800c41c:	e76d      	b.n	800c2fa <__ssvfscanf_r+0x115a>
 800c41e:	2102      	movs	r1, #2
 800c420:	e76b      	b.n	800c2fa <__ssvfscanf_r+0x115a>
 800c422:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c424:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c426:	f001 fe4f 	bl	800e0c8 <__ssrefill_r>
 800c42a:	2800      	cmp	r0, #0
 800c42c:	d100      	bne.n	800c430 <__ssvfscanf_r+0x1290>
 800c42e:	e723      	b.n	800c278 <__ssvfscanf_r+0x10d8>
 800c430:	e77e      	b.n	800c330 <__ssvfscanf_r+0x1190>
 800c432:	1e63      	subs	r3, r4, #1
 800c434:	2b06      	cmp	r3, #6
 800c436:	d825      	bhi.n	800c484 <__ssvfscanf_r+0x12e4>
 800c438:	2c02      	cmp	r4, #2
 800c43a:	d837      	bhi.n	800c4ac <__ssvfscanf_r+0x130c>
 800c43c:	238c      	movs	r3, #140	; 0x8c
 800c43e:	2248      	movs	r2, #72	; 0x48
 800c440:	005b      	lsls	r3, r3, #1
 800c442:	189b      	adds	r3, r3, r2
 800c444:	19db      	adds	r3, r3, r7
 800c446:	429d      	cmp	r5, r3
 800c448:	d801      	bhi.n	800c44e <__ssvfscanf_r+0x12ae>
 800c44a:	f7fe ffa6 	bl	800b39a <__ssvfscanf_r+0x1fa>
 800c44e:	3d01      	subs	r5, #1
 800c450:	7829      	ldrb	r1, [r5, #0]
 800c452:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c454:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c456:	f001 fdfb 	bl	800e050 <_sungetc_r>
 800c45a:	e7ef      	b.n	800c43c <__ssvfscanf_r+0x129c>
 800c45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c45e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c460:	3b01      	subs	r3, #1
 800c462:	7819      	ldrb	r1, [r3, #0]
 800c464:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c466:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c468:	f001 fdf2 	bl	800e050 <_sungetc_r>
 800c46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c46e:	6a3a      	ldr	r2, [r7, #32]
 800c470:	189b      	adds	r3, r3, r2
 800c472:	b2db      	uxtb	r3, r3
 800c474:	2b03      	cmp	r3, #3
 800c476:	d8f1      	bhi.n	800c45c <__ssvfscanf_r+0x12bc>
 800c478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47a:	3c03      	subs	r4, #3
 800c47c:	b2e4      	uxtb	r4, r4
 800c47e:	1b1b      	subs	r3, r3, r4
 800c480:	1b2d      	subs	r5, r5, r4
 800c482:	63bb      	str	r3, [r7, #56]	; 0x38
 800c484:	05f3      	lsls	r3, r6, #23
 800c486:	d52f      	bpl.n	800c4e8 <__ssvfscanf_r+0x1348>
 800c488:	0573      	lsls	r3, r6, #21
 800c48a:	d514      	bpl.n	800c4b6 <__ssvfscanf_r+0x1316>
 800c48c:	238c      	movs	r3, #140	; 0x8c
 800c48e:	2248      	movs	r2, #72	; 0x48
 800c490:	005b      	lsls	r3, r3, #1
 800c492:	189b      	adds	r3, r3, r2
 800c494:	19db      	adds	r3, r3, r7
 800c496:	429d      	cmp	r5, r3
 800c498:	d801      	bhi.n	800c49e <__ssvfscanf_r+0x12fe>
 800c49a:	f7fe ff7e 	bl	800b39a <__ssvfscanf_r+0x1fa>
 800c49e:	3d01      	subs	r5, #1
 800c4a0:	7829      	ldrb	r1, [r5, #0]
 800c4a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c4a6:	f001 fdd3 	bl	800e050 <_sungetc_r>
 800c4aa:	e7ef      	b.n	800c48c <__ssvfscanf_r+0x12ec>
 800c4ac:	1b63      	subs	r3, r4, r5
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	63fd      	str	r5, [r7, #60]	; 0x3c
 800c4b2:	623b      	str	r3, [r7, #32]
 800c4b4:	e7da      	b.n	800c46c <__ssvfscanf_r+0x12cc>
 800c4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b8:	1e6c      	subs	r4, r5, #1
 800c4ba:	7821      	ldrb	r1, [r4, #0]
 800c4bc:	3b01      	subs	r3, #1
 800c4be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4c0:	2965      	cmp	r1, #101	; 0x65
 800c4c2:	d00a      	beq.n	800c4da <__ssvfscanf_r+0x133a>
 800c4c4:	2945      	cmp	r1, #69	; 0x45
 800c4c6:	d008      	beq.n	800c4da <__ssvfscanf_r+0x133a>
 800c4c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c4cc:	f001 fdc0 	bl	800e050 <_sungetc_r>
 800c4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d2:	1eac      	subs	r4, r5, #2
 800c4d4:	3b02      	subs	r3, #2
 800c4d6:	7821      	ldrb	r1, [r4, #0]
 800c4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4da:	0025      	movs	r5, r4
 800c4dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c4e0:	f001 fdb6 	bl	800e050 <_sungetc_r>
 800c4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4e8:	2310      	movs	r3, #16
 800c4ea:	0032      	movs	r2, r6
 800c4ec:	401a      	ands	r2, r3
 800c4ee:	421e      	tst	r6, r3
 800c4f0:	d001      	beq.n	800c4f6 <__ssvfscanf_r+0x1356>
 800c4f2:	f7fe fe71 	bl	800b1d8 <__ssvfscanf_r+0x38>
 800c4f6:	23c0      	movs	r3, #192	; 0xc0
 800c4f8:	2180      	movs	r1, #128	; 0x80
 800c4fa:	00db      	lsls	r3, r3, #3
 800c4fc:	702a      	strb	r2, [r5, #0]
 800c4fe:	4033      	ands	r3, r6
 800c500:	00c9      	lsls	r1, r1, #3
 800c502:	428b      	cmp	r3, r1
 800c504:	d11f      	bne.n	800c546 <__ssvfscanf_r+0x13a6>
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	69fa      	ldr	r2, [r7, #28]
 800c50a:	69f9      	ldr	r1, [r7, #28]
 800c50c:	1a9a      	subs	r2, r3, r2
 800c50e:	428b      	cmp	r3, r1
 800c510:	d125      	bne.n	800c55e <__ssvfscanf_r+0x13be>
 800c512:	238c      	movs	r3, #140	; 0x8c
 800c514:	2148      	movs	r1, #72	; 0x48
 800c516:	005b      	lsls	r3, r3, #1
 800c518:	185b      	adds	r3, r3, r1
 800c51a:	19d9      	adds	r1, r3, r7
 800c51c:	2200      	movs	r2, #0
 800c51e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c520:	f7fc f822 	bl	8008568 <_strtod_r>
 800c524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c526:	0004      	movs	r4, r0
 800c528:	3304      	adds	r3, #4
 800c52a:	000d      	movs	r5, r1
 800c52c:	623b      	str	r3, [r7, #32]
 800c52e:	07f3      	lsls	r3, r6, #31
 800c530:	d523      	bpl.n	800c57a <__ssvfscanf_r+0x13da>
 800c532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	601c      	str	r4, [r3, #0]
 800c538:	605d      	str	r5, [r3, #4]
 800c53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53c:	3301      	adds	r3, #1
 800c53e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c540:	6a3b      	ldr	r3, [r7, #32]
 800c542:	f7fe ffa5 	bl	800b490 <__ssvfscanf_r+0x2f0>
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d0e2      	beq.n	800c512 <__ssvfscanf_r+0x1372>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c550:	1c59      	adds	r1, r3, #1
 800c552:	230a      	movs	r3, #10
 800c554:	f7fc f896 	bl	8008684 <_strtol_r>
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	687d      	ldr	r5, [r7, #4]
 800c55c:	1ac2      	subs	r2, r0, r3
 800c55e:	2148      	movs	r1, #72	; 0x48
 800c560:	4b19      	ldr	r3, [pc, #100]	; (800c5c8 <__ssvfscanf_r+0x1428>)
 800c562:	185b      	adds	r3, r3, r1
 800c564:	19db      	adds	r3, r3, r7
 800c566:	429d      	cmp	r5, r3
 800c568:	d302      	bcc.n	800c570 <__ssvfscanf_r+0x13d0>
 800c56a:	4b18      	ldr	r3, [pc, #96]	; (800c5cc <__ssvfscanf_r+0x142c>)
 800c56c:	185b      	adds	r3, r3, r1
 800c56e:	19dd      	adds	r5, r3, r7
 800c570:	0028      	movs	r0, r5
 800c572:	4917      	ldr	r1, [pc, #92]	; (800c5d0 <__ssvfscanf_r+0x1430>)
 800c574:	f7fc f95a 	bl	800882c <sprintf>
 800c578:	e7cb      	b.n	800c512 <__ssvfscanf_r+0x1372>
 800c57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c580:	07b6      	lsls	r6, r6, #30
 800c582:	d4d8      	bmi.n	800c536 <__ssvfscanf_r+0x1396>
 800c584:	0002      	movs	r2, r0
 800c586:	000b      	movs	r3, r1
 800c588:	f7f5 feb4 	bl	80022f4 <__aeabi_dcmpun>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	d005      	beq.n	800c59c <__ssvfscanf_r+0x13fc>
 800c590:	4810      	ldr	r0, [pc, #64]	; (800c5d4 <__ssvfscanf_r+0x1434>)
 800c592:	f7fc fabf 	bl	8008b14 <nanf>
 800c596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c598:	6018      	str	r0, [r3, #0]
 800c59a:	e7ce      	b.n	800c53a <__ssvfscanf_r+0x139a>
 800c59c:	0020      	movs	r0, r4
 800c59e:	0029      	movs	r1, r5
 800c5a0:	f7f5 ff52 	bl	8002448 <__aeabi_d2f>
 800c5a4:	e7f7      	b.n	800c596 <__ssvfscanf_r+0x13f6>
 800c5a6:	00a3      	lsls	r3, r4, #2
 800c5a8:	18ed      	adds	r5, r5, r3
 800c5aa:	682b      	ldr	r3, [r5, #0]
 800c5ac:	3401      	adds	r4, #1
 800c5ae:	6818      	ldr	r0, [r3, #0]
 800c5b0:	f7fa ff8a 	bl	80074c8 <free>
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	682b      	ldr	r3, [r5, #0]
 800c5b8:	601a      	str	r2, [r3, #0]
 800c5ba:	f7fe ffc3 	bl	800b544 <__ssvfscanf_r+0x3a4>
 800c5be:	46c0      	nop			; (mov r8, r8)
 800c5c0:	fffff07f 	.word	0xfffff07f
 800c5c4:	fffffd7f 	.word	0xfffffd7f
 800c5c8:	0000026b 	.word	0x0000026b
 800c5cc:	0000026a 	.word	0x0000026a
 800c5d0:	0800fa00 	.word	0x0800fa00
 800c5d4:	0800fa63 	.word	0x0800fa63

0800c5d8 <_fclose_r>:
 800c5d8:	b570      	push	{r4, r5, r6, lr}
 800c5da:	0005      	movs	r5, r0
 800c5dc:	1e0c      	subs	r4, r1, #0
 800c5de:	d102      	bne.n	800c5e6 <_fclose_r+0xe>
 800c5e0:	2600      	movs	r6, #0
 800c5e2:	0030      	movs	r0, r6
 800c5e4:	bd70      	pop	{r4, r5, r6, pc}
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d004      	beq.n	800c5f4 <_fclose_r+0x1c>
 800c5ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d101      	bne.n	800c5f4 <_fclose_r+0x1c>
 800c5f0:	f7fc f8e8 	bl	80087c4 <__sinit>
 800c5f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5f6:	07db      	lsls	r3, r3, #31
 800c5f8:	d405      	bmi.n	800c606 <_fclose_r+0x2e>
 800c5fa:	89a3      	ldrh	r3, [r4, #12]
 800c5fc:	059b      	lsls	r3, r3, #22
 800c5fe:	d402      	bmi.n	800c606 <_fclose_r+0x2e>
 800c600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c602:	f7fc fa6b 	bl	8008adc <__retarget_lock_acquire_recursive>
 800c606:	220c      	movs	r2, #12
 800c608:	5ea3      	ldrsh	r3, [r4, r2]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d109      	bne.n	800c622 <_fclose_r+0x4a>
 800c60e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c610:	3301      	adds	r3, #1
 800c612:	0016      	movs	r6, r2
 800c614:	401e      	ands	r6, r3
 800c616:	421a      	tst	r2, r3
 800c618:	d1e2      	bne.n	800c5e0 <_fclose_r+0x8>
 800c61a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c61c:	f7fc fa5f 	bl	8008ade <__retarget_lock_release_recursive>
 800c620:	e7df      	b.n	800c5e2 <_fclose_r+0xa>
 800c622:	0021      	movs	r1, r4
 800c624:	0028      	movs	r0, r5
 800c626:	f000 f837 	bl	800c698 <__sflush_r>
 800c62a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c62c:	0006      	movs	r6, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d006      	beq.n	800c640 <_fclose_r+0x68>
 800c632:	0028      	movs	r0, r5
 800c634:	69e1      	ldr	r1, [r4, #28]
 800c636:	4798      	blx	r3
 800c638:	2800      	cmp	r0, #0
 800c63a:	da01      	bge.n	800c640 <_fclose_r+0x68>
 800c63c:	2601      	movs	r6, #1
 800c63e:	4276      	negs	r6, r6
 800c640:	89a3      	ldrh	r3, [r4, #12]
 800c642:	061b      	lsls	r3, r3, #24
 800c644:	d503      	bpl.n	800c64e <_fclose_r+0x76>
 800c646:	0028      	movs	r0, r5
 800c648:	6921      	ldr	r1, [r4, #16]
 800c64a:	f7fc facf 	bl	8008bec <_free_r>
 800c64e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c650:	2900      	cmp	r1, #0
 800c652:	d008      	beq.n	800c666 <_fclose_r+0x8e>
 800c654:	0023      	movs	r3, r4
 800c656:	3340      	adds	r3, #64	; 0x40
 800c658:	4299      	cmp	r1, r3
 800c65a:	d002      	beq.n	800c662 <_fclose_r+0x8a>
 800c65c:	0028      	movs	r0, r5
 800c65e:	f7fc fac5 	bl	8008bec <_free_r>
 800c662:	2300      	movs	r3, #0
 800c664:	6323      	str	r3, [r4, #48]	; 0x30
 800c666:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c668:	2900      	cmp	r1, #0
 800c66a:	d004      	beq.n	800c676 <_fclose_r+0x9e>
 800c66c:	0028      	movs	r0, r5
 800c66e:	f7fc fabd 	bl	8008bec <_free_r>
 800c672:	2300      	movs	r3, #0
 800c674:	6463      	str	r3, [r4, #68]	; 0x44
 800c676:	f7fc f895 	bl	80087a4 <__sfp_lock_acquire>
 800c67a:	2300      	movs	r3, #0
 800c67c:	81a3      	strh	r3, [r4, #12]
 800c67e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c680:	07db      	lsls	r3, r3, #31
 800c682:	d402      	bmi.n	800c68a <_fclose_r+0xb2>
 800c684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c686:	f7fc fa2a 	bl	8008ade <__retarget_lock_release_recursive>
 800c68a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c68c:	f7fc fa25 	bl	8008ada <__retarget_lock_close_recursive>
 800c690:	f7fc f890 	bl	80087b4 <__sfp_lock_release>
 800c694:	e7a5      	b.n	800c5e2 <_fclose_r+0xa>
	...

0800c698 <__sflush_r>:
 800c698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c69a:	230c      	movs	r3, #12
 800c69c:	5eca      	ldrsh	r2, [r1, r3]
 800c69e:	000c      	movs	r4, r1
 800c6a0:	0005      	movs	r5, r0
 800c6a2:	b291      	uxth	r1, r2
 800c6a4:	0713      	lsls	r3, r2, #28
 800c6a6:	d464      	bmi.n	800c772 <__sflush_r+0xda>
 800c6a8:	2380      	movs	r3, #128	; 0x80
 800c6aa:	011b      	lsls	r3, r3, #4
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	6862      	ldr	r2, [r4, #4]
 800c6b0:	81a3      	strh	r3, [r4, #12]
 800c6b2:	2a00      	cmp	r2, #0
 800c6b4:	dc04      	bgt.n	800c6c0 <__sflush_r+0x28>
 800c6b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c6b8:	2a00      	cmp	r2, #0
 800c6ba:	dc01      	bgt.n	800c6c0 <__sflush_r+0x28>
 800c6bc:	2000      	movs	r0, #0
 800c6be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c6c0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800c6c2:	2f00      	cmp	r7, #0
 800c6c4:	d0fa      	beq.n	800c6bc <__sflush_r+0x24>
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	2080      	movs	r0, #128	; 0x80
 800c6ca:	682e      	ldr	r6, [r5, #0]
 800c6cc:	602a      	str	r2, [r5, #0]
 800c6ce:	001a      	movs	r2, r3
 800c6d0:	0140      	lsls	r0, r0, #5
 800c6d2:	69e1      	ldr	r1, [r4, #28]
 800c6d4:	4002      	ands	r2, r0
 800c6d6:	4203      	tst	r3, r0
 800c6d8:	d038      	beq.n	800c74c <__sflush_r+0xb4>
 800c6da:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c6dc:	89a3      	ldrh	r3, [r4, #12]
 800c6de:	075b      	lsls	r3, r3, #29
 800c6e0:	d506      	bpl.n	800c6f0 <__sflush_r+0x58>
 800c6e2:	6863      	ldr	r3, [r4, #4]
 800c6e4:	1ac0      	subs	r0, r0, r3
 800c6e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d001      	beq.n	800c6f0 <__sflush_r+0x58>
 800c6ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c6ee:	1ac0      	subs	r0, r0, r3
 800c6f0:	0002      	movs	r2, r0
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	0028      	movs	r0, r5
 800c6f6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800c6f8:	69e1      	ldr	r1, [r4, #28]
 800c6fa:	47b8      	blx	r7
 800c6fc:	89a2      	ldrh	r2, [r4, #12]
 800c6fe:	1c43      	adds	r3, r0, #1
 800c700:	d106      	bne.n	800c710 <__sflush_r+0x78>
 800c702:	6829      	ldr	r1, [r5, #0]
 800c704:	291d      	cmp	r1, #29
 800c706:	d830      	bhi.n	800c76a <__sflush_r+0xd2>
 800c708:	4b2c      	ldr	r3, [pc, #176]	; (800c7bc <__sflush_r+0x124>)
 800c70a:	410b      	asrs	r3, r1
 800c70c:	07db      	lsls	r3, r3, #31
 800c70e:	d42c      	bmi.n	800c76a <__sflush_r+0xd2>
 800c710:	4b2b      	ldr	r3, [pc, #172]	; (800c7c0 <__sflush_r+0x128>)
 800c712:	4013      	ands	r3, r2
 800c714:	2200      	movs	r2, #0
 800c716:	6062      	str	r2, [r4, #4]
 800c718:	6922      	ldr	r2, [r4, #16]
 800c71a:	b21b      	sxth	r3, r3
 800c71c:	81a3      	strh	r3, [r4, #12]
 800c71e:	6022      	str	r2, [r4, #0]
 800c720:	04db      	lsls	r3, r3, #19
 800c722:	d505      	bpl.n	800c730 <__sflush_r+0x98>
 800c724:	1c43      	adds	r3, r0, #1
 800c726:	d102      	bne.n	800c72e <__sflush_r+0x96>
 800c728:	682b      	ldr	r3, [r5, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d100      	bne.n	800c730 <__sflush_r+0x98>
 800c72e:	6520      	str	r0, [r4, #80]	; 0x50
 800c730:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c732:	602e      	str	r6, [r5, #0]
 800c734:	2900      	cmp	r1, #0
 800c736:	d0c1      	beq.n	800c6bc <__sflush_r+0x24>
 800c738:	0023      	movs	r3, r4
 800c73a:	3340      	adds	r3, #64	; 0x40
 800c73c:	4299      	cmp	r1, r3
 800c73e:	d002      	beq.n	800c746 <__sflush_r+0xae>
 800c740:	0028      	movs	r0, r5
 800c742:	f7fc fa53 	bl	8008bec <_free_r>
 800c746:	2000      	movs	r0, #0
 800c748:	6320      	str	r0, [r4, #48]	; 0x30
 800c74a:	e7b8      	b.n	800c6be <__sflush_r+0x26>
 800c74c:	2301      	movs	r3, #1
 800c74e:	0028      	movs	r0, r5
 800c750:	47b8      	blx	r7
 800c752:	1c43      	adds	r3, r0, #1
 800c754:	d1c2      	bne.n	800c6dc <__sflush_r+0x44>
 800c756:	682b      	ldr	r3, [r5, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d0bf      	beq.n	800c6dc <__sflush_r+0x44>
 800c75c:	2b1d      	cmp	r3, #29
 800c75e:	d001      	beq.n	800c764 <__sflush_r+0xcc>
 800c760:	2b16      	cmp	r3, #22
 800c762:	d101      	bne.n	800c768 <__sflush_r+0xd0>
 800c764:	602e      	str	r6, [r5, #0]
 800c766:	e7a9      	b.n	800c6bc <__sflush_r+0x24>
 800c768:	89a2      	ldrh	r2, [r4, #12]
 800c76a:	2340      	movs	r3, #64	; 0x40
 800c76c:	4313      	orrs	r3, r2
 800c76e:	81a3      	strh	r3, [r4, #12]
 800c770:	e7a5      	b.n	800c6be <__sflush_r+0x26>
 800c772:	6926      	ldr	r6, [r4, #16]
 800c774:	2e00      	cmp	r6, #0
 800c776:	d0a1      	beq.n	800c6bc <__sflush_r+0x24>
 800c778:	6827      	ldr	r7, [r4, #0]
 800c77a:	6026      	str	r6, [r4, #0]
 800c77c:	1bbb      	subs	r3, r7, r6
 800c77e:	9301      	str	r3, [sp, #4]
 800c780:	2300      	movs	r3, #0
 800c782:	0789      	lsls	r1, r1, #30
 800c784:	d100      	bne.n	800c788 <__sflush_r+0xf0>
 800c786:	6963      	ldr	r3, [r4, #20]
 800c788:	60a3      	str	r3, [r4, #8]
 800c78a:	9b01      	ldr	r3, [sp, #4]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	dc00      	bgt.n	800c792 <__sflush_r+0xfa>
 800c790:	e794      	b.n	800c6bc <__sflush_r+0x24>
 800c792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c794:	0032      	movs	r2, r6
 800c796:	001f      	movs	r7, r3
 800c798:	0028      	movs	r0, r5
 800c79a:	9b01      	ldr	r3, [sp, #4]
 800c79c:	69e1      	ldr	r1, [r4, #28]
 800c79e:	47b8      	blx	r7
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	dc06      	bgt.n	800c7b2 <__sflush_r+0x11a>
 800c7a4:	2340      	movs	r3, #64	; 0x40
 800c7a6:	2001      	movs	r0, #1
 800c7a8:	89a2      	ldrh	r2, [r4, #12]
 800c7aa:	4240      	negs	r0, r0
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	81a3      	strh	r3, [r4, #12]
 800c7b0:	e785      	b.n	800c6be <__sflush_r+0x26>
 800c7b2:	9b01      	ldr	r3, [sp, #4]
 800c7b4:	1836      	adds	r6, r6, r0
 800c7b6:	1a1b      	subs	r3, r3, r0
 800c7b8:	9301      	str	r3, [sp, #4]
 800c7ba:	e7e6      	b.n	800c78a <__sflush_r+0xf2>
 800c7bc:	dfbffffe 	.word	0xdfbffffe
 800c7c0:	fffff7ff 	.word	0xfffff7ff

0800c7c4 <_fflush_r>:
 800c7c4:	b570      	push	{r4, r5, r6, lr}
 800c7c6:	0005      	movs	r5, r0
 800c7c8:	000c      	movs	r4, r1
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d004      	beq.n	800c7d8 <_fflush_r+0x14>
 800c7ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d101      	bne.n	800c7d8 <_fflush_r+0x14>
 800c7d4:	f7fb fff6 	bl	80087c4 <__sinit>
 800c7d8:	220c      	movs	r2, #12
 800c7da:	5ea3      	ldrsh	r3, [r4, r2]
 800c7dc:	1e1e      	subs	r6, r3, #0
 800c7de:	d015      	beq.n	800c80c <_fflush_r+0x48>
 800c7e0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c7e2:	07d2      	lsls	r2, r2, #31
 800c7e4:	d404      	bmi.n	800c7f0 <_fflush_r+0x2c>
 800c7e6:	059b      	lsls	r3, r3, #22
 800c7e8:	d402      	bmi.n	800c7f0 <_fflush_r+0x2c>
 800c7ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7ec:	f7fc f976 	bl	8008adc <__retarget_lock_acquire_recursive>
 800c7f0:	0021      	movs	r1, r4
 800c7f2:	0028      	movs	r0, r5
 800c7f4:	f7ff ff50 	bl	800c698 <__sflush_r>
 800c7f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7fa:	0006      	movs	r6, r0
 800c7fc:	07db      	lsls	r3, r3, #31
 800c7fe:	d405      	bmi.n	800c80c <_fflush_r+0x48>
 800c800:	89a3      	ldrh	r3, [r4, #12]
 800c802:	059b      	lsls	r3, r3, #22
 800c804:	d402      	bmi.n	800c80c <_fflush_r+0x48>
 800c806:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c808:	f7fc f969 	bl	8008ade <__retarget_lock_release_recursive>
 800c80c:	0030      	movs	r0, r6
 800c80e:	bd70      	pop	{r4, r5, r6, pc}

0800c810 <__sccl>:
 800c810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c812:	780b      	ldrb	r3, [r1, #0]
 800c814:	0004      	movs	r4, r0
 800c816:	2b5e      	cmp	r3, #94	; 0x5e
 800c818:	d019      	beq.n	800c84e <__sccl+0x3e>
 800c81a:	2200      	movs	r2, #0
 800c81c:	1c4d      	adds	r5, r1, #1
 800c81e:	0021      	movs	r1, r4
 800c820:	1c60      	adds	r0, r4, #1
 800c822:	30ff      	adds	r0, #255	; 0xff
 800c824:	700a      	strb	r2, [r1, #0]
 800c826:	3101      	adds	r1, #1
 800c828:	4281      	cmp	r1, r0
 800c82a:	d1fb      	bne.n	800c824 <__sccl+0x14>
 800c82c:	1e68      	subs	r0, r5, #1
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00c      	beq.n	800c84c <__sccl+0x3c>
 800c832:	2101      	movs	r1, #1
 800c834:	262d      	movs	r6, #45	; 0x2d
 800c836:	404a      	eors	r2, r1
 800c838:	0028      	movs	r0, r5
 800c83a:	54e2      	strb	r2, [r4, r3]
 800c83c:	7801      	ldrb	r1, [r0, #0]
 800c83e:	1c45      	adds	r5, r0, #1
 800c840:	292d      	cmp	r1, #45	; 0x2d
 800c842:	d00c      	beq.n	800c85e <__sccl+0x4e>
 800c844:	295d      	cmp	r1, #93	; 0x5d
 800c846:	d01d      	beq.n	800c884 <__sccl+0x74>
 800c848:	2900      	cmp	r1, #0
 800c84a:	d104      	bne.n	800c856 <__sccl+0x46>
 800c84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c84e:	2201      	movs	r2, #1
 800c850:	784b      	ldrb	r3, [r1, #1]
 800c852:	1c8d      	adds	r5, r1, #2
 800c854:	e7e3      	b.n	800c81e <__sccl+0xe>
 800c856:	000b      	movs	r3, r1
 800c858:	e7ee      	b.n	800c838 <__sccl+0x28>
 800c85a:	0033      	movs	r3, r6
 800c85c:	e7ec      	b.n	800c838 <__sccl+0x28>
 800c85e:	7841      	ldrb	r1, [r0, #1]
 800c860:	295d      	cmp	r1, #93	; 0x5d
 800c862:	d0fa      	beq.n	800c85a <__sccl+0x4a>
 800c864:	428b      	cmp	r3, r1
 800c866:	dcf8      	bgt.n	800c85a <__sccl+0x4a>
 800c868:	001d      	movs	r5, r3
 800c86a:	3002      	adds	r0, #2
 800c86c:	3501      	adds	r5, #1
 800c86e:	5562      	strb	r2, [r4, r5]
 800c870:	42a9      	cmp	r1, r5
 800c872:	dcfb      	bgt.n	800c86c <__sccl+0x5c>
 800c874:	2500      	movs	r5, #0
 800c876:	1c5f      	adds	r7, r3, #1
 800c878:	428b      	cmp	r3, r1
 800c87a:	da01      	bge.n	800c880 <__sccl+0x70>
 800c87c:	1acd      	subs	r5, r1, r3
 800c87e:	3d01      	subs	r5, #1
 800c880:	197b      	adds	r3, r7, r5
 800c882:	e7db      	b.n	800c83c <__sccl+0x2c>
 800c884:	0028      	movs	r0, r5
 800c886:	e7e1      	b.n	800c84c <__sccl+0x3c>

0800c888 <_localeconv_r>:
 800c888:	4800      	ldr	r0, [pc, #0]	; (800c88c <_localeconv_r+0x4>)
 800c88a:	4770      	bx	lr
 800c88c:	2000051c 	.word	0x2000051c

0800c890 <__libc_fini_array>:
 800c890:	b570      	push	{r4, r5, r6, lr}
 800c892:	4c07      	ldr	r4, [pc, #28]	; (800c8b0 <__libc_fini_array+0x20>)
 800c894:	4d07      	ldr	r5, [pc, #28]	; (800c8b4 <__libc_fini_array+0x24>)
 800c896:	1b64      	subs	r4, r4, r5
 800c898:	10a4      	asrs	r4, r4, #2
 800c89a:	2c00      	cmp	r4, #0
 800c89c:	d102      	bne.n	800c8a4 <__libc_fini_array+0x14>
 800c89e:	f002 fdcd 	bl	800f43c <_fini>
 800c8a2:	bd70      	pop	{r4, r5, r6, pc}
 800c8a4:	3c01      	subs	r4, #1
 800c8a6:	00a3      	lsls	r3, r4, #2
 800c8a8:	58eb      	ldr	r3, [r5, r3]
 800c8aa:	4798      	blx	r3
 800c8ac:	e7f5      	b.n	800c89a <__libc_fini_array+0xa>
 800c8ae:	46c0      	nop			; (mov r8, r8)
 800c8b0:	0800fb00 	.word	0x0800fb00
 800c8b4:	0800fafc 	.word	0x0800fafc

0800c8b8 <memchr>:
 800c8b8:	b2c9      	uxtb	r1, r1
 800c8ba:	1882      	adds	r2, r0, r2
 800c8bc:	4290      	cmp	r0, r2
 800c8be:	d101      	bne.n	800c8c4 <memchr+0xc>
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	4770      	bx	lr
 800c8c4:	7803      	ldrb	r3, [r0, #0]
 800c8c6:	428b      	cmp	r3, r1
 800c8c8:	d0fb      	beq.n	800c8c2 <memchr+0xa>
 800c8ca:	3001      	adds	r0, #1
 800c8cc:	e7f6      	b.n	800c8bc <memchr+0x4>
	...

0800c8d0 <frexp>:
 800c8d0:	b570      	push	{r4, r5, r6, lr}
 800c8d2:	0014      	movs	r4, r2
 800c8d4:	2500      	movs	r5, #0
 800c8d6:	6025      	str	r5, [r4, #0]
 800c8d8:	4d10      	ldr	r5, [pc, #64]	; (800c91c <frexp+0x4c>)
 800c8da:	004b      	lsls	r3, r1, #1
 800c8dc:	000a      	movs	r2, r1
 800c8de:	085b      	lsrs	r3, r3, #1
 800c8e0:	42ab      	cmp	r3, r5
 800c8e2:	dc1a      	bgt.n	800c91a <frexp+0x4a>
 800c8e4:	001d      	movs	r5, r3
 800c8e6:	4305      	orrs	r5, r0
 800c8e8:	d017      	beq.n	800c91a <frexp+0x4a>
 800c8ea:	4d0d      	ldr	r5, [pc, #52]	; (800c920 <frexp+0x50>)
 800c8ec:	4229      	tst	r1, r5
 800c8ee:	d109      	bne.n	800c904 <frexp+0x34>
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	4b0c      	ldr	r3, [pc, #48]	; (800c924 <frexp+0x54>)
 800c8f4:	f7f4 feba 	bl	800166c <__aeabi_dmul>
 800c8f8:	2536      	movs	r5, #54	; 0x36
 800c8fa:	000a      	movs	r2, r1
 800c8fc:	004b      	lsls	r3, r1, #1
 800c8fe:	426d      	negs	r5, r5
 800c900:	085b      	lsrs	r3, r3, #1
 800c902:	6025      	str	r5, [r4, #0]
 800c904:	4d08      	ldr	r5, [pc, #32]	; (800c928 <frexp+0x58>)
 800c906:	151b      	asrs	r3, r3, #20
 800c908:	195b      	adds	r3, r3, r5
 800c90a:	6825      	ldr	r5, [r4, #0]
 800c90c:	18eb      	adds	r3, r5, r3
 800c90e:	6023      	str	r3, [r4, #0]
 800c910:	4b06      	ldr	r3, [pc, #24]	; (800c92c <frexp+0x5c>)
 800c912:	401a      	ands	r2, r3
 800c914:	4b06      	ldr	r3, [pc, #24]	; (800c930 <frexp+0x60>)
 800c916:	4313      	orrs	r3, r2
 800c918:	0019      	movs	r1, r3
 800c91a:	bd70      	pop	{r4, r5, r6, pc}
 800c91c:	7fefffff 	.word	0x7fefffff
 800c920:	7ff00000 	.word	0x7ff00000
 800c924:	43500000 	.word	0x43500000
 800c928:	fffffc02 	.word	0xfffffc02
 800c92c:	800fffff 	.word	0x800fffff
 800c930:	3fe00000 	.word	0x3fe00000

0800c934 <__register_exitproc>:
 800c934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c936:	4f1c      	ldr	r7, [pc, #112]	; (800c9a8 <__register_exitproc+0x74>)
 800c938:	0004      	movs	r4, r0
 800c93a:	6838      	ldr	r0, [r7, #0]
 800c93c:	0016      	movs	r6, r2
 800c93e:	9301      	str	r3, [sp, #4]
 800c940:	9100      	str	r1, [sp, #0]
 800c942:	f7fc f8cb 	bl	8008adc <__retarget_lock_acquire_recursive>
 800c946:	4a19      	ldr	r2, [pc, #100]	; (800c9ac <__register_exitproc+0x78>)
 800c948:	6813      	ldr	r3, [r2, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d101      	bne.n	800c952 <__register_exitproc+0x1e>
 800c94e:	4b18      	ldr	r3, [pc, #96]	; (800c9b0 <__register_exitproc+0x7c>)
 800c950:	6013      	str	r3, [r2, #0]
 800c952:	685a      	ldr	r2, [r3, #4]
 800c954:	6838      	ldr	r0, [r7, #0]
 800c956:	2a1f      	cmp	r2, #31
 800c958:	dd04      	ble.n	800c964 <__register_exitproc+0x30>
 800c95a:	f7fc f8c0 	bl	8008ade <__retarget_lock_release_recursive>
 800c95e:	2001      	movs	r0, #1
 800c960:	4240      	negs	r0, r0
 800c962:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c964:	2c00      	cmp	r4, #0
 800c966:	d014      	beq.n	800c992 <__register_exitproc+0x5e>
 800c968:	0091      	lsls	r1, r2, #2
 800c96a:	1859      	adds	r1, r3, r1
 800c96c:	000f      	movs	r7, r1
 800c96e:	3788      	adds	r7, #136	; 0x88
 800c970:	603e      	str	r6, [r7, #0]
 800c972:	2701      	movs	r7, #1
 800c974:	001e      	movs	r6, r3
 800c976:	4097      	lsls	r7, r2
 800c978:	3685      	adds	r6, #133	; 0x85
 800c97a:	36ff      	adds	r6, #255	; 0xff
 800c97c:	6875      	ldr	r5, [r6, #4]
 800c97e:	31fc      	adds	r1, #252	; 0xfc
 800c980:	433d      	orrs	r5, r7
 800c982:	6075      	str	r5, [r6, #4]
 800c984:	9d01      	ldr	r5, [sp, #4]
 800c986:	60cd      	str	r5, [r1, #12]
 800c988:	2c02      	cmp	r4, #2
 800c98a:	d102      	bne.n	800c992 <__register_exitproc+0x5e>
 800c98c:	68b1      	ldr	r1, [r6, #8]
 800c98e:	4339      	orrs	r1, r7
 800c990:	60b1      	str	r1, [r6, #8]
 800c992:	1c51      	adds	r1, r2, #1
 800c994:	6059      	str	r1, [r3, #4]
 800c996:	3202      	adds	r2, #2
 800c998:	9900      	ldr	r1, [sp, #0]
 800c99a:	0092      	lsls	r2, r2, #2
 800c99c:	50d1      	str	r1, [r2, r3]
 800c99e:	f7fc f89e 	bl	8008ade <__retarget_lock_release_recursive>
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	e7dd      	b.n	800c962 <__register_exitproc+0x2e>
 800c9a6:	46c0      	nop			; (mov r8, r8)
 800c9a8:	200006bc 	.word	0x200006bc
 800c9ac:	20000bbc 	.word	0x20000bbc
 800c9b0:	20000bc0 	.word	0x20000bc0

0800c9b4 <__assert_func>:
 800c9b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c9b6:	0014      	movs	r4, r2
 800c9b8:	001a      	movs	r2, r3
 800c9ba:	4b09      	ldr	r3, [pc, #36]	; (800c9e0 <__assert_func+0x2c>)
 800c9bc:	0005      	movs	r5, r0
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	000e      	movs	r6, r1
 800c9c2:	68d8      	ldr	r0, [r3, #12]
 800c9c4:	4b07      	ldr	r3, [pc, #28]	; (800c9e4 <__assert_func+0x30>)
 800c9c6:	2c00      	cmp	r4, #0
 800c9c8:	d101      	bne.n	800c9ce <__assert_func+0x1a>
 800c9ca:	4b07      	ldr	r3, [pc, #28]	; (800c9e8 <__assert_func+0x34>)
 800c9cc:	001c      	movs	r4, r3
 800c9ce:	4907      	ldr	r1, [pc, #28]	; (800c9ec <__assert_func+0x38>)
 800c9d0:	9301      	str	r3, [sp, #4]
 800c9d2:	9402      	str	r4, [sp, #8]
 800c9d4:	002b      	movs	r3, r5
 800c9d6:	9600      	str	r6, [sp, #0]
 800c9d8:	f001 faa6 	bl	800df28 <fiprintf>
 800c9dc:	f002 fb8e 	bl	800f0fc <abort>
 800c9e0:	200006b8 	.word	0x200006b8
 800c9e4:	0800fa28 	.word	0x0800fa28
 800c9e8:	0800fa63 	.word	0x0800fa63
 800c9ec:	0800fa35 	.word	0x0800fa35

0800c9f0 <_calloc_r>:
 800c9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f2:	2400      	movs	r4, #0
 800c9f4:	0c0b      	lsrs	r3, r1, #16
 800c9f6:	0c16      	lsrs	r6, r2, #16
 800c9f8:	42a3      	cmp	r3, r4
 800c9fa:	d133      	bne.n	800ca64 <_calloc_r+0x74>
 800c9fc:	42a6      	cmp	r6, r4
 800c9fe:	d121      	bne.n	800ca44 <_calloc_r+0x54>
 800ca00:	b28b      	uxth	r3, r1
 800ca02:	b291      	uxth	r1, r2
 800ca04:	4359      	muls	r1, r3
 800ca06:	f7fa fd69 	bl	80074dc <_malloc_r>
 800ca0a:	1e05      	subs	r5, r0, #0
 800ca0c:	d033      	beq.n	800ca76 <_calloc_r+0x86>
 800ca0e:	0003      	movs	r3, r0
 800ca10:	3b08      	subs	r3, #8
 800ca12:	685a      	ldr	r2, [r3, #4]
 800ca14:	2303      	movs	r3, #3
 800ca16:	439a      	bics	r2, r3
 800ca18:	3a04      	subs	r2, #4
 800ca1a:	2a24      	cmp	r2, #36	; 0x24
 800ca1c:	d832      	bhi.n	800ca84 <_calloc_r+0x94>
 800ca1e:	0003      	movs	r3, r0
 800ca20:	2a13      	cmp	r2, #19
 800ca22:	d90a      	bls.n	800ca3a <_calloc_r+0x4a>
 800ca24:	6004      	str	r4, [r0, #0]
 800ca26:	6044      	str	r4, [r0, #4]
 800ca28:	3308      	adds	r3, #8
 800ca2a:	2a1b      	cmp	r2, #27
 800ca2c:	d905      	bls.n	800ca3a <_calloc_r+0x4a>
 800ca2e:	6084      	str	r4, [r0, #8]
 800ca30:	60c4      	str	r4, [r0, #12]
 800ca32:	2a24      	cmp	r2, #36	; 0x24
 800ca34:	d021      	beq.n	800ca7a <_calloc_r+0x8a>
 800ca36:	0003      	movs	r3, r0
 800ca38:	3310      	adds	r3, #16
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	601a      	str	r2, [r3, #0]
 800ca3e:	605a      	str	r2, [r3, #4]
 800ca40:	609a      	str	r2, [r3, #8]
 800ca42:	e018      	b.n	800ca76 <_calloc_r+0x86>
 800ca44:	1c33      	adds	r3, r6, #0
 800ca46:	1c0d      	adds	r5, r1, #0
 800ca48:	b289      	uxth	r1, r1
 800ca4a:	b292      	uxth	r2, r2
 800ca4c:	434a      	muls	r2, r1
 800ca4e:	b2ad      	uxth	r5, r5
 800ca50:	b299      	uxth	r1, r3
 800ca52:	4369      	muls	r1, r5
 800ca54:	0c13      	lsrs	r3, r2, #16
 800ca56:	18c9      	adds	r1, r1, r3
 800ca58:	0c0b      	lsrs	r3, r1, #16
 800ca5a:	d107      	bne.n	800ca6c <_calloc_r+0x7c>
 800ca5c:	0409      	lsls	r1, r1, #16
 800ca5e:	b292      	uxth	r2, r2
 800ca60:	4311      	orrs	r1, r2
 800ca62:	e7d0      	b.n	800ca06 <_calloc_r+0x16>
 800ca64:	2e00      	cmp	r6, #0
 800ca66:	d101      	bne.n	800ca6c <_calloc_r+0x7c>
 800ca68:	1c15      	adds	r5, r2, #0
 800ca6a:	e7ed      	b.n	800ca48 <_calloc_r+0x58>
 800ca6c:	f7fc f80a 	bl	8008a84 <__errno>
 800ca70:	230c      	movs	r3, #12
 800ca72:	2500      	movs	r5, #0
 800ca74:	6003      	str	r3, [r0, #0]
 800ca76:	0028      	movs	r0, r5
 800ca78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca7a:	0003      	movs	r3, r0
 800ca7c:	6104      	str	r4, [r0, #16]
 800ca7e:	3318      	adds	r3, #24
 800ca80:	6144      	str	r4, [r0, #20]
 800ca82:	e7da      	b.n	800ca3a <_calloc_r+0x4a>
 800ca84:	2100      	movs	r1, #0
 800ca86:	f7fb ff67 	bl	8008958 <memset>
 800ca8a:	e7f4      	b.n	800ca76 <_calloc_r+0x86>

0800ca8c <quorem>:
 800ca8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca8e:	6902      	ldr	r2, [r0, #16]
 800ca90:	690b      	ldr	r3, [r1, #16]
 800ca92:	b089      	sub	sp, #36	; 0x24
 800ca94:	0007      	movs	r7, r0
 800ca96:	9104      	str	r1, [sp, #16]
 800ca98:	2000      	movs	r0, #0
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	db69      	blt.n	800cb72 <quorem+0xe6>
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	009c      	lsls	r4, r3, #2
 800caa2:	9301      	str	r3, [sp, #4]
 800caa4:	000b      	movs	r3, r1
 800caa6:	3314      	adds	r3, #20
 800caa8:	9306      	str	r3, [sp, #24]
 800caaa:	191b      	adds	r3, r3, r4
 800caac:	9305      	str	r3, [sp, #20]
 800caae:	003b      	movs	r3, r7
 800cab0:	3314      	adds	r3, #20
 800cab2:	9303      	str	r3, [sp, #12]
 800cab4:	191c      	adds	r4, r3, r4
 800cab6:	9b05      	ldr	r3, [sp, #20]
 800cab8:	6826      	ldr	r6, [r4, #0]
 800caba:	681d      	ldr	r5, [r3, #0]
 800cabc:	0030      	movs	r0, r6
 800cabe:	3501      	adds	r5, #1
 800cac0:	0029      	movs	r1, r5
 800cac2:	f7f3 fb3b 	bl	800013c <__udivsi3>
 800cac6:	9002      	str	r0, [sp, #8]
 800cac8:	42ae      	cmp	r6, r5
 800caca:	d329      	bcc.n	800cb20 <quorem+0x94>
 800cacc:	9b06      	ldr	r3, [sp, #24]
 800cace:	2600      	movs	r6, #0
 800cad0:	469c      	mov	ip, r3
 800cad2:	9d03      	ldr	r5, [sp, #12]
 800cad4:	9606      	str	r6, [sp, #24]
 800cad6:	4662      	mov	r2, ip
 800cad8:	ca08      	ldmia	r2!, {r3}
 800cada:	6828      	ldr	r0, [r5, #0]
 800cadc:	4694      	mov	ip, r2
 800cade:	9a02      	ldr	r2, [sp, #8]
 800cae0:	b299      	uxth	r1, r3
 800cae2:	4351      	muls	r1, r2
 800cae4:	0c1b      	lsrs	r3, r3, #16
 800cae6:	4353      	muls	r3, r2
 800cae8:	1989      	adds	r1, r1, r6
 800caea:	0c0a      	lsrs	r2, r1, #16
 800caec:	189b      	adds	r3, r3, r2
 800caee:	9307      	str	r3, [sp, #28]
 800caf0:	0c1e      	lsrs	r6, r3, #16
 800caf2:	9b06      	ldr	r3, [sp, #24]
 800caf4:	b282      	uxth	r2, r0
 800caf6:	18d2      	adds	r2, r2, r3
 800caf8:	466b      	mov	r3, sp
 800cafa:	b289      	uxth	r1, r1
 800cafc:	8b9b      	ldrh	r3, [r3, #28]
 800cafe:	1a52      	subs	r2, r2, r1
 800cb00:	0c01      	lsrs	r1, r0, #16
 800cb02:	1ac9      	subs	r1, r1, r3
 800cb04:	1413      	asrs	r3, r2, #16
 800cb06:	18cb      	adds	r3, r1, r3
 800cb08:	1419      	asrs	r1, r3, #16
 800cb0a:	b292      	uxth	r2, r2
 800cb0c:	041b      	lsls	r3, r3, #16
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	c508      	stmia	r5!, {r3}
 800cb12:	9b05      	ldr	r3, [sp, #20]
 800cb14:	9106      	str	r1, [sp, #24]
 800cb16:	4563      	cmp	r3, ip
 800cb18:	d2dd      	bcs.n	800cad6 <quorem+0x4a>
 800cb1a:	6823      	ldr	r3, [r4, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d030      	beq.n	800cb82 <quorem+0xf6>
 800cb20:	0038      	movs	r0, r7
 800cb22:	9904      	ldr	r1, [sp, #16]
 800cb24:	f7fc ff04 	bl	8009930 <__mcmp>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	db21      	blt.n	800cb70 <quorem+0xe4>
 800cb2c:	0038      	movs	r0, r7
 800cb2e:	2600      	movs	r6, #0
 800cb30:	9b02      	ldr	r3, [sp, #8]
 800cb32:	9c04      	ldr	r4, [sp, #16]
 800cb34:	3301      	adds	r3, #1
 800cb36:	9302      	str	r3, [sp, #8]
 800cb38:	3014      	adds	r0, #20
 800cb3a:	3414      	adds	r4, #20
 800cb3c:	6803      	ldr	r3, [r0, #0]
 800cb3e:	cc02      	ldmia	r4!, {r1}
 800cb40:	b29d      	uxth	r5, r3
 800cb42:	19ad      	adds	r5, r5, r6
 800cb44:	b28a      	uxth	r2, r1
 800cb46:	1aaa      	subs	r2, r5, r2
 800cb48:	0c09      	lsrs	r1, r1, #16
 800cb4a:	0c1b      	lsrs	r3, r3, #16
 800cb4c:	1a5b      	subs	r3, r3, r1
 800cb4e:	1411      	asrs	r1, r2, #16
 800cb50:	185b      	adds	r3, r3, r1
 800cb52:	141e      	asrs	r6, r3, #16
 800cb54:	b292      	uxth	r2, r2
 800cb56:	041b      	lsls	r3, r3, #16
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	c008      	stmia	r0!, {r3}
 800cb5c:	9b05      	ldr	r3, [sp, #20]
 800cb5e:	42a3      	cmp	r3, r4
 800cb60:	d2ec      	bcs.n	800cb3c <quorem+0xb0>
 800cb62:	9b01      	ldr	r3, [sp, #4]
 800cb64:	9a03      	ldr	r2, [sp, #12]
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	18d3      	adds	r3, r2, r3
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	2a00      	cmp	r2, #0
 800cb6e:	d015      	beq.n	800cb9c <quorem+0x110>
 800cb70:	9802      	ldr	r0, [sp, #8]
 800cb72:	b009      	add	sp, #36	; 0x24
 800cb74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb76:	6823      	ldr	r3, [r4, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d106      	bne.n	800cb8a <quorem+0xfe>
 800cb7c:	9b01      	ldr	r3, [sp, #4]
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	9301      	str	r3, [sp, #4]
 800cb82:	9b03      	ldr	r3, [sp, #12]
 800cb84:	3c04      	subs	r4, #4
 800cb86:	42a3      	cmp	r3, r4
 800cb88:	d3f5      	bcc.n	800cb76 <quorem+0xea>
 800cb8a:	9b01      	ldr	r3, [sp, #4]
 800cb8c:	613b      	str	r3, [r7, #16]
 800cb8e:	e7c7      	b.n	800cb20 <quorem+0x94>
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	2a00      	cmp	r2, #0
 800cb94:	d106      	bne.n	800cba4 <quorem+0x118>
 800cb96:	9a01      	ldr	r2, [sp, #4]
 800cb98:	3a01      	subs	r2, #1
 800cb9a:	9201      	str	r2, [sp, #4]
 800cb9c:	9a03      	ldr	r2, [sp, #12]
 800cb9e:	3b04      	subs	r3, #4
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d3f5      	bcc.n	800cb90 <quorem+0x104>
 800cba4:	9b01      	ldr	r3, [sp, #4]
 800cba6:	613b      	str	r3, [r7, #16]
 800cba8:	e7e2      	b.n	800cb70 <quorem+0xe4>
	...

0800cbac <_dtoa_r>:
 800cbac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbae:	0014      	movs	r4, r2
 800cbb0:	001d      	movs	r5, r3
 800cbb2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800cbb4:	b09d      	sub	sp, #116	; 0x74
 800cbb6:	9408      	str	r4, [sp, #32]
 800cbb8:	9509      	str	r5, [sp, #36]	; 0x24
 800cbba:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800cbbc:	9004      	str	r0, [sp, #16]
 800cbbe:	2900      	cmp	r1, #0
 800cbc0:	d009      	beq.n	800cbd6 <_dtoa_r+0x2a>
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cbc6:	4093      	lsls	r3, r2
 800cbc8:	604a      	str	r2, [r1, #4]
 800cbca:	608b      	str	r3, [r1, #8]
 800cbcc:	f7fc fc56 	bl	800947c <_Bfree>
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	9a04      	ldr	r2, [sp, #16]
 800cbd4:	6393      	str	r3, [r2, #56]	; 0x38
 800cbd6:	2d00      	cmp	r5, #0
 800cbd8:	da1e      	bge.n	800cc18 <_dtoa_r+0x6c>
 800cbda:	2301      	movs	r3, #1
 800cbdc:	6033      	str	r3, [r6, #0]
 800cbde:	006b      	lsls	r3, r5, #1
 800cbe0:	085b      	lsrs	r3, r3, #1
 800cbe2:	9309      	str	r3, [sp, #36]	; 0x24
 800cbe4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cbe6:	4bb5      	ldr	r3, [pc, #724]	; (800cebc <_dtoa_r+0x310>)
 800cbe8:	4ab4      	ldr	r2, [pc, #720]	; (800cebc <_dtoa_r+0x310>)
 800cbea:	403b      	ands	r3, r7
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d116      	bne.n	800cc1e <_dtoa_r+0x72>
 800cbf0:	4bb3      	ldr	r3, [pc, #716]	; (800cec0 <_dtoa_r+0x314>)
 800cbf2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cbf4:	6013      	str	r3, [r2, #0]
 800cbf6:	033b      	lsls	r3, r7, #12
 800cbf8:	0b1b      	lsrs	r3, r3, #12
 800cbfa:	4323      	orrs	r3, r4
 800cbfc:	d101      	bne.n	800cc02 <_dtoa_r+0x56>
 800cbfe:	f000 fdb2 	bl	800d766 <_dtoa_r+0xbba>
 800cc02:	4bb0      	ldr	r3, [pc, #704]	; (800cec4 <_dtoa_r+0x318>)
 800cc04:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cc06:	9306      	str	r3, [sp, #24]
 800cc08:	2a00      	cmp	r2, #0
 800cc0a:	d002      	beq.n	800cc12 <_dtoa_r+0x66>
 800cc0c:	4bae      	ldr	r3, [pc, #696]	; (800cec8 <_dtoa_r+0x31c>)
 800cc0e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cc10:	6013      	str	r3, [r2, #0]
 800cc12:	9806      	ldr	r0, [sp, #24]
 800cc14:	b01d      	add	sp, #116	; 0x74
 800cc16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc18:	2300      	movs	r3, #0
 800cc1a:	6033      	str	r3, [r6, #0]
 800cc1c:	e7e2      	b.n	800cbe4 <_dtoa_r+0x38>
 800cc1e:	9a08      	ldr	r2, [sp, #32]
 800cc20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc22:	9210      	str	r2, [sp, #64]	; 0x40
 800cc24:	9311      	str	r3, [sp, #68]	; 0x44
 800cc26:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cc28:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	f7f3 fc0b 	bl	8000448 <__aeabi_dcmpeq>
 800cc32:	1e06      	subs	r6, r0, #0
 800cc34:	d009      	beq.n	800cc4a <_dtoa_r+0x9e>
 800cc36:	2301      	movs	r3, #1
 800cc38:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cc3a:	6013      	str	r3, [r2, #0]
 800cc3c:	4ba3      	ldr	r3, [pc, #652]	; (800cecc <_dtoa_r+0x320>)
 800cc3e:	9306      	str	r3, [sp, #24]
 800cc40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d0e5      	beq.n	800cc12 <_dtoa_r+0x66>
 800cc46:	4ba2      	ldr	r3, [pc, #648]	; (800ced0 <_dtoa_r+0x324>)
 800cc48:	e7e1      	b.n	800cc0e <_dtoa_r+0x62>
 800cc4a:	ab1a      	add	r3, sp, #104	; 0x68
 800cc4c:	9301      	str	r3, [sp, #4]
 800cc4e:	ab1b      	add	r3, sp, #108	; 0x6c
 800cc50:	9300      	str	r3, [sp, #0]
 800cc52:	9804      	ldr	r0, [sp, #16]
 800cc54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cc56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc58:	f7fc ff86 	bl	8009b68 <__d2b>
 800cc5c:	007a      	lsls	r2, r7, #1
 800cc5e:	9005      	str	r0, [sp, #20]
 800cc60:	0d52      	lsrs	r2, r2, #21
 800cc62:	d100      	bne.n	800cc66 <_dtoa_r+0xba>
 800cc64:	e07b      	b.n	800cd5e <_dtoa_r+0x1b2>
 800cc66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc68:	9617      	str	r6, [sp, #92]	; 0x5c
 800cc6a:	0319      	lsls	r1, r3, #12
 800cc6c:	4b99      	ldr	r3, [pc, #612]	; (800ced4 <_dtoa_r+0x328>)
 800cc6e:	0b09      	lsrs	r1, r1, #12
 800cc70:	430b      	orrs	r3, r1
 800cc72:	4999      	ldr	r1, [pc, #612]	; (800ced8 <_dtoa_r+0x32c>)
 800cc74:	1857      	adds	r7, r2, r1
 800cc76:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cc78:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cc7a:	0019      	movs	r1, r3
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	4b97      	ldr	r3, [pc, #604]	; (800cedc <_dtoa_r+0x330>)
 800cc80:	f7f4 ffb6 	bl	8001bf0 <__aeabi_dsub>
 800cc84:	4a96      	ldr	r2, [pc, #600]	; (800cee0 <_dtoa_r+0x334>)
 800cc86:	4b97      	ldr	r3, [pc, #604]	; (800cee4 <_dtoa_r+0x338>)
 800cc88:	f7f4 fcf0 	bl	800166c <__aeabi_dmul>
 800cc8c:	4a96      	ldr	r2, [pc, #600]	; (800cee8 <_dtoa_r+0x33c>)
 800cc8e:	4b97      	ldr	r3, [pc, #604]	; (800ceec <_dtoa_r+0x340>)
 800cc90:	f7f3 fd92 	bl	80007b8 <__aeabi_dadd>
 800cc94:	0004      	movs	r4, r0
 800cc96:	0038      	movs	r0, r7
 800cc98:	000d      	movs	r5, r1
 800cc9a:	f7f5 fb7f 	bl	800239c <__aeabi_i2d>
 800cc9e:	4a94      	ldr	r2, [pc, #592]	; (800cef0 <_dtoa_r+0x344>)
 800cca0:	4b94      	ldr	r3, [pc, #592]	; (800cef4 <_dtoa_r+0x348>)
 800cca2:	f7f4 fce3 	bl	800166c <__aeabi_dmul>
 800cca6:	0002      	movs	r2, r0
 800cca8:	000b      	movs	r3, r1
 800ccaa:	0020      	movs	r0, r4
 800ccac:	0029      	movs	r1, r5
 800ccae:	f7f3 fd83 	bl	80007b8 <__aeabi_dadd>
 800ccb2:	0004      	movs	r4, r0
 800ccb4:	000d      	movs	r5, r1
 800ccb6:	f7f5 fb3b 	bl	8002330 <__aeabi_d2iz>
 800ccba:	2200      	movs	r2, #0
 800ccbc:	9003      	str	r0, [sp, #12]
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	0020      	movs	r0, r4
 800ccc2:	0029      	movs	r1, r5
 800ccc4:	f7f3 fbc6 	bl	8000454 <__aeabi_dcmplt>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d00b      	beq.n	800cce4 <_dtoa_r+0x138>
 800cccc:	9803      	ldr	r0, [sp, #12]
 800ccce:	f7f5 fb65 	bl	800239c <__aeabi_i2d>
 800ccd2:	002b      	movs	r3, r5
 800ccd4:	0022      	movs	r2, r4
 800ccd6:	f7f3 fbb7 	bl	8000448 <__aeabi_dcmpeq>
 800ccda:	4243      	negs	r3, r0
 800ccdc:	4158      	adcs	r0, r3
 800ccde:	9b03      	ldr	r3, [sp, #12]
 800cce0:	1a1b      	subs	r3, r3, r0
 800cce2:	9303      	str	r3, [sp, #12]
 800cce4:	2301      	movs	r3, #1
 800cce6:	9316      	str	r3, [sp, #88]	; 0x58
 800cce8:	9b03      	ldr	r3, [sp, #12]
 800ccea:	2b16      	cmp	r3, #22
 800ccec:	d810      	bhi.n	800cd10 <_dtoa_r+0x164>
 800ccee:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ccf0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ccf2:	9a03      	ldr	r2, [sp, #12]
 800ccf4:	4b80      	ldr	r3, [pc, #512]	; (800cef8 <_dtoa_r+0x34c>)
 800ccf6:	00d2      	lsls	r2, r2, #3
 800ccf8:	189b      	adds	r3, r3, r2
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	f7f3 fba9 	bl	8000454 <__aeabi_dcmplt>
 800cd02:	2800      	cmp	r0, #0
 800cd04:	d047      	beq.n	800cd96 <_dtoa_r+0x1ea>
 800cd06:	9b03      	ldr	r3, [sp, #12]
 800cd08:	3b01      	subs	r3, #1
 800cd0a:	9303      	str	r3, [sp, #12]
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	9316      	str	r3, [sp, #88]	; 0x58
 800cd10:	2200      	movs	r2, #0
 800cd12:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cd14:	920a      	str	r2, [sp, #40]	; 0x28
 800cd16:	1bdb      	subs	r3, r3, r7
 800cd18:	1e5a      	subs	r2, r3, #1
 800cd1a:	d53e      	bpl.n	800cd9a <_dtoa_r+0x1ee>
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	1ad3      	subs	r3, r2, r3
 800cd20:	930a      	str	r3, [sp, #40]	; 0x28
 800cd22:	2300      	movs	r3, #0
 800cd24:	930c      	str	r3, [sp, #48]	; 0x30
 800cd26:	9b03      	ldr	r3, [sp, #12]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	db38      	blt.n	800cd9e <_dtoa_r+0x1f2>
 800cd2c:	9a03      	ldr	r2, [sp, #12]
 800cd2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd30:	4694      	mov	ip, r2
 800cd32:	4463      	add	r3, ip
 800cd34:	930c      	str	r3, [sp, #48]	; 0x30
 800cd36:	2300      	movs	r3, #0
 800cd38:	9213      	str	r2, [sp, #76]	; 0x4c
 800cd3a:	930d      	str	r3, [sp, #52]	; 0x34
 800cd3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cd3e:	2401      	movs	r4, #1
 800cd40:	2b09      	cmp	r3, #9
 800cd42:	d867      	bhi.n	800ce14 <_dtoa_r+0x268>
 800cd44:	2b05      	cmp	r3, #5
 800cd46:	dd02      	ble.n	800cd4e <_dtoa_r+0x1a2>
 800cd48:	2400      	movs	r4, #0
 800cd4a:	3b04      	subs	r3, #4
 800cd4c:	9322      	str	r3, [sp, #136]	; 0x88
 800cd4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cd50:	1e98      	subs	r0, r3, #2
 800cd52:	2803      	cmp	r0, #3
 800cd54:	d867      	bhi.n	800ce26 <_dtoa_r+0x27a>
 800cd56:	f7f3 f9dd 	bl	8000114 <__gnu_thumb1_case_uqi>
 800cd5a:	3a2b      	.short	0x3a2b
 800cd5c:	5b38      	.short	0x5b38
 800cd5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd60:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800cd62:	18f6      	adds	r6, r6, r3
 800cd64:	4b65      	ldr	r3, [pc, #404]	; (800cefc <_dtoa_r+0x350>)
 800cd66:	18f2      	adds	r2, r6, r3
 800cd68:	2a20      	cmp	r2, #32
 800cd6a:	dd0f      	ble.n	800cd8c <_dtoa_r+0x1e0>
 800cd6c:	2340      	movs	r3, #64	; 0x40
 800cd6e:	1a9b      	subs	r3, r3, r2
 800cd70:	409f      	lsls	r7, r3
 800cd72:	4b63      	ldr	r3, [pc, #396]	; (800cf00 <_dtoa_r+0x354>)
 800cd74:	0038      	movs	r0, r7
 800cd76:	18f3      	adds	r3, r6, r3
 800cd78:	40dc      	lsrs	r4, r3
 800cd7a:	4320      	orrs	r0, r4
 800cd7c:	f7f5 fb3e 	bl	80023fc <__aeabi_ui2d>
 800cd80:	2201      	movs	r2, #1
 800cd82:	4b60      	ldr	r3, [pc, #384]	; (800cf04 <_dtoa_r+0x358>)
 800cd84:	1e77      	subs	r7, r6, #1
 800cd86:	18cb      	adds	r3, r1, r3
 800cd88:	9217      	str	r2, [sp, #92]	; 0x5c
 800cd8a:	e776      	b.n	800cc7a <_dtoa_r+0xce>
 800cd8c:	2320      	movs	r3, #32
 800cd8e:	0020      	movs	r0, r4
 800cd90:	1a9b      	subs	r3, r3, r2
 800cd92:	4098      	lsls	r0, r3
 800cd94:	e7f2      	b.n	800cd7c <_dtoa_r+0x1d0>
 800cd96:	9016      	str	r0, [sp, #88]	; 0x58
 800cd98:	e7ba      	b.n	800cd10 <_dtoa_r+0x164>
 800cd9a:	920c      	str	r2, [sp, #48]	; 0x30
 800cd9c:	e7c3      	b.n	800cd26 <_dtoa_r+0x17a>
 800cd9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cda0:	9a03      	ldr	r2, [sp, #12]
 800cda2:	1a9b      	subs	r3, r3, r2
 800cda4:	930a      	str	r3, [sp, #40]	; 0x28
 800cda6:	4253      	negs	r3, r2
 800cda8:	930d      	str	r3, [sp, #52]	; 0x34
 800cdaa:	2300      	movs	r3, #0
 800cdac:	9313      	str	r3, [sp, #76]	; 0x4c
 800cdae:	e7c5      	b.n	800cd3c <_dtoa_r+0x190>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cdb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdb8:	9307      	str	r3, [sp, #28]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	dc13      	bgt.n	800cde6 <_dtoa_r+0x23a>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	001a      	movs	r2, r3
 800cdc2:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdc4:	9307      	str	r3, [sp, #28]
 800cdc6:	9223      	str	r2, [sp, #140]	; 0x8c
 800cdc8:	e00d      	b.n	800cde6 <_dtoa_r+0x23a>
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e7f1      	b.n	800cdb2 <_dtoa_r+0x206>
 800cdce:	2300      	movs	r3, #0
 800cdd0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800cdd2:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdd4:	4694      	mov	ip, r2
 800cdd6:	9b03      	ldr	r3, [sp, #12]
 800cdd8:	4463      	add	r3, ip
 800cdda:	930b      	str	r3, [sp, #44]	; 0x2c
 800cddc:	3301      	adds	r3, #1
 800cdde:	9307      	str	r3, [sp, #28]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	dc00      	bgt.n	800cde6 <_dtoa_r+0x23a>
 800cde4:	2301      	movs	r3, #1
 800cde6:	2100      	movs	r1, #0
 800cde8:	2204      	movs	r2, #4
 800cdea:	0010      	movs	r0, r2
 800cdec:	3014      	adds	r0, #20
 800cdee:	4298      	cmp	r0, r3
 800cdf0:	d91d      	bls.n	800ce2e <_dtoa_r+0x282>
 800cdf2:	9b04      	ldr	r3, [sp, #16]
 800cdf4:	0018      	movs	r0, r3
 800cdf6:	63d9      	str	r1, [r3, #60]	; 0x3c
 800cdf8:	f7fc fb18 	bl	800942c <_Balloc>
 800cdfc:	9006      	str	r0, [sp, #24]
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	d118      	bne.n	800ce34 <_dtoa_r+0x288>
 800ce02:	21b0      	movs	r1, #176	; 0xb0
 800ce04:	4b40      	ldr	r3, [pc, #256]	; (800cf08 <_dtoa_r+0x35c>)
 800ce06:	4841      	ldr	r0, [pc, #260]	; (800cf0c <_dtoa_r+0x360>)
 800ce08:	9a06      	ldr	r2, [sp, #24]
 800ce0a:	31ff      	adds	r1, #255	; 0xff
 800ce0c:	f7ff fdd2 	bl	800c9b4 <__assert_func>
 800ce10:	2301      	movs	r3, #1
 800ce12:	e7dd      	b.n	800cdd0 <_dtoa_r+0x224>
 800ce14:	2300      	movs	r3, #0
 800ce16:	940f      	str	r4, [sp, #60]	; 0x3c
 800ce18:	9322      	str	r3, [sp, #136]	; 0x88
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce1e:	9307      	str	r3, [sp, #28]
 800ce20:	2200      	movs	r2, #0
 800ce22:	3313      	adds	r3, #19
 800ce24:	e7cf      	b.n	800cdc6 <_dtoa_r+0x21a>
 800ce26:	2301      	movs	r3, #1
 800ce28:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce2a:	3b02      	subs	r3, #2
 800ce2c:	e7f6      	b.n	800ce1c <_dtoa_r+0x270>
 800ce2e:	3101      	adds	r1, #1
 800ce30:	0052      	lsls	r2, r2, #1
 800ce32:	e7da      	b.n	800cdea <_dtoa_r+0x23e>
 800ce34:	9b04      	ldr	r3, [sp, #16]
 800ce36:	9a06      	ldr	r2, [sp, #24]
 800ce38:	639a      	str	r2, [r3, #56]	; 0x38
 800ce3a:	9b07      	ldr	r3, [sp, #28]
 800ce3c:	2b0e      	cmp	r3, #14
 800ce3e:	d900      	bls.n	800ce42 <_dtoa_r+0x296>
 800ce40:	e0e3      	b.n	800d00a <_dtoa_r+0x45e>
 800ce42:	2c00      	cmp	r4, #0
 800ce44:	d100      	bne.n	800ce48 <_dtoa_r+0x29c>
 800ce46:	e0e0      	b.n	800d00a <_dtoa_r+0x45e>
 800ce48:	9b03      	ldr	r3, [sp, #12]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	dd62      	ble.n	800cf14 <_dtoa_r+0x368>
 800ce4e:	210f      	movs	r1, #15
 800ce50:	9a03      	ldr	r2, [sp, #12]
 800ce52:	4b29      	ldr	r3, [pc, #164]	; (800cef8 <_dtoa_r+0x34c>)
 800ce54:	400a      	ands	r2, r1
 800ce56:	00d2      	lsls	r2, r2, #3
 800ce58:	189b      	adds	r3, r3, r2
 800ce5a:	681e      	ldr	r6, [r3, #0]
 800ce5c:	685f      	ldr	r7, [r3, #4]
 800ce5e:	9b03      	ldr	r3, [sp, #12]
 800ce60:	2402      	movs	r4, #2
 800ce62:	111d      	asrs	r5, r3, #4
 800ce64:	05db      	lsls	r3, r3, #23
 800ce66:	d50a      	bpl.n	800ce7e <_dtoa_r+0x2d2>
 800ce68:	4b29      	ldr	r3, [pc, #164]	; (800cf10 <_dtoa_r+0x364>)
 800ce6a:	400d      	ands	r5, r1
 800ce6c:	6a1a      	ldr	r2, [r3, #32]
 800ce6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce70:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce72:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ce74:	f7f4 f800 	bl	8000e78 <__aeabi_ddiv>
 800ce78:	9008      	str	r0, [sp, #32]
 800ce7a:	9109      	str	r1, [sp, #36]	; 0x24
 800ce7c:	3401      	adds	r4, #1
 800ce7e:	4b24      	ldr	r3, [pc, #144]	; (800cf10 <_dtoa_r+0x364>)
 800ce80:	930e      	str	r3, [sp, #56]	; 0x38
 800ce82:	2d00      	cmp	r5, #0
 800ce84:	d108      	bne.n	800ce98 <_dtoa_r+0x2ec>
 800ce86:	9808      	ldr	r0, [sp, #32]
 800ce88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce8a:	0032      	movs	r2, r6
 800ce8c:	003b      	movs	r3, r7
 800ce8e:	f7f3 fff3 	bl	8000e78 <__aeabi_ddiv>
 800ce92:	9008      	str	r0, [sp, #32]
 800ce94:	9109      	str	r1, [sp, #36]	; 0x24
 800ce96:	e058      	b.n	800cf4a <_dtoa_r+0x39e>
 800ce98:	2301      	movs	r3, #1
 800ce9a:	421d      	tst	r5, r3
 800ce9c:	d009      	beq.n	800ceb2 <_dtoa_r+0x306>
 800ce9e:	18e4      	adds	r4, r4, r3
 800cea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cea2:	0030      	movs	r0, r6
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	0039      	movs	r1, r7
 800ceaa:	f7f4 fbdf 	bl	800166c <__aeabi_dmul>
 800ceae:	0006      	movs	r6, r0
 800ceb0:	000f      	movs	r7, r1
 800ceb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ceb4:	106d      	asrs	r5, r5, #1
 800ceb6:	3308      	adds	r3, #8
 800ceb8:	e7e2      	b.n	800ce80 <_dtoa_r+0x2d4>
 800ceba:	46c0      	nop			; (mov r8, r8)
 800cebc:	7ff00000 	.word	0x7ff00000
 800cec0:	0000270f 	.word	0x0000270f
 800cec4:	0800fa6d 	.word	0x0800fa6d
 800cec8:	0800fa70 	.word	0x0800fa70
 800cecc:	0800f9de 	.word	0x0800f9de
 800ced0:	0800f9df 	.word	0x0800f9df
 800ced4:	3ff00000 	.word	0x3ff00000
 800ced8:	fffffc01 	.word	0xfffffc01
 800cedc:	3ff80000 	.word	0x3ff80000
 800cee0:	636f4361 	.word	0x636f4361
 800cee4:	3fd287a7 	.word	0x3fd287a7
 800cee8:	8b60c8b3 	.word	0x8b60c8b3
 800ceec:	3fc68a28 	.word	0x3fc68a28
 800cef0:	509f79fb 	.word	0x509f79fb
 800cef4:	3fd34413 	.word	0x3fd34413
 800cef8:	0800f8d8 	.word	0x0800f8d8
 800cefc:	00000432 	.word	0x00000432
 800cf00:	00000412 	.word	0x00000412
 800cf04:	fe100000 	.word	0xfe100000
 800cf08:	0800f7e1 	.word	0x0800f7e1
 800cf0c:	0800fa71 	.word	0x0800fa71
 800cf10:	0800f8b0 	.word	0x0800f8b0
 800cf14:	9b03      	ldr	r3, [sp, #12]
 800cf16:	2402      	movs	r4, #2
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d016      	beq.n	800cf4a <_dtoa_r+0x39e>
 800cf1c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cf1e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cf20:	220f      	movs	r2, #15
 800cf22:	425d      	negs	r5, r3
 800cf24:	402a      	ands	r2, r5
 800cf26:	4bdd      	ldr	r3, [pc, #884]	; (800d29c <_dtoa_r+0x6f0>)
 800cf28:	00d2      	lsls	r2, r2, #3
 800cf2a:	189b      	adds	r3, r3, r2
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	685b      	ldr	r3, [r3, #4]
 800cf30:	f7f4 fb9c 	bl	800166c <__aeabi_dmul>
 800cf34:	2701      	movs	r7, #1
 800cf36:	2300      	movs	r3, #0
 800cf38:	9008      	str	r0, [sp, #32]
 800cf3a:	9109      	str	r1, [sp, #36]	; 0x24
 800cf3c:	4ed8      	ldr	r6, [pc, #864]	; (800d2a0 <_dtoa_r+0x6f4>)
 800cf3e:	112d      	asrs	r5, r5, #4
 800cf40:	2d00      	cmp	r5, #0
 800cf42:	d000      	beq.n	800cf46 <_dtoa_r+0x39a>
 800cf44:	e091      	b.n	800d06a <_dtoa_r+0x4be>
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d1a3      	bne.n	800ce92 <_dtoa_r+0x2e6>
 800cf4a:	9e08      	ldr	r6, [sp, #32]
 800cf4c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cf4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d100      	bne.n	800cf56 <_dtoa_r+0x3aa>
 800cf54:	e094      	b.n	800d080 <_dtoa_r+0x4d4>
 800cf56:	2200      	movs	r2, #0
 800cf58:	0030      	movs	r0, r6
 800cf5a:	0039      	movs	r1, r7
 800cf5c:	4bd1      	ldr	r3, [pc, #836]	; (800d2a4 <_dtoa_r+0x6f8>)
 800cf5e:	f7f3 fa79 	bl	8000454 <__aeabi_dcmplt>
 800cf62:	2800      	cmp	r0, #0
 800cf64:	d100      	bne.n	800cf68 <_dtoa_r+0x3bc>
 800cf66:	e08b      	b.n	800d080 <_dtoa_r+0x4d4>
 800cf68:	9b07      	ldr	r3, [sp, #28]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d100      	bne.n	800cf70 <_dtoa_r+0x3c4>
 800cf6e:	e087      	b.n	800d080 <_dtoa_r+0x4d4>
 800cf70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	dd45      	ble.n	800d002 <_dtoa_r+0x456>
 800cf76:	9b03      	ldr	r3, [sp, #12]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	930e      	str	r3, [sp, #56]	; 0x38
 800cf7e:	0030      	movs	r0, r6
 800cf80:	4bc9      	ldr	r3, [pc, #804]	; (800d2a8 <_dtoa_r+0x6fc>)
 800cf82:	0039      	movs	r1, r7
 800cf84:	f7f4 fb72 	bl	800166c <__aeabi_dmul>
 800cf88:	9008      	str	r0, [sp, #32]
 800cf8a:	9109      	str	r1, [sp, #36]	; 0x24
 800cf8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf8e:	3401      	adds	r4, #1
 800cf90:	0020      	movs	r0, r4
 800cf92:	9e08      	ldr	r6, [sp, #32]
 800cf94:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cf96:	9312      	str	r3, [sp, #72]	; 0x48
 800cf98:	f7f5 fa00 	bl	800239c <__aeabi_i2d>
 800cf9c:	0032      	movs	r2, r6
 800cf9e:	003b      	movs	r3, r7
 800cfa0:	f7f4 fb64 	bl	800166c <__aeabi_dmul>
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	4bc1      	ldr	r3, [pc, #772]	; (800d2ac <_dtoa_r+0x700>)
 800cfa8:	f7f3 fc06 	bl	80007b8 <__aeabi_dadd>
 800cfac:	4ac0      	ldr	r2, [pc, #768]	; (800d2b0 <_dtoa_r+0x704>)
 800cfae:	9014      	str	r0, [sp, #80]	; 0x50
 800cfb0:	9115      	str	r1, [sp, #84]	; 0x54
 800cfb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cfb4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800cfb6:	4694      	mov	ip, r2
 800cfb8:	9308      	str	r3, [sp, #32]
 800cfba:	9409      	str	r4, [sp, #36]	; 0x24
 800cfbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfbe:	4463      	add	r3, ip
 800cfc0:	9318      	str	r3, [sp, #96]	; 0x60
 800cfc2:	9309      	str	r3, [sp, #36]	; 0x24
 800cfc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d15e      	bne.n	800d088 <_dtoa_r+0x4dc>
 800cfca:	2200      	movs	r2, #0
 800cfcc:	4bb9      	ldr	r3, [pc, #740]	; (800d2b4 <_dtoa_r+0x708>)
 800cfce:	0030      	movs	r0, r6
 800cfd0:	0039      	movs	r1, r7
 800cfd2:	f7f4 fe0d 	bl	8001bf0 <__aeabi_dsub>
 800cfd6:	9a08      	ldr	r2, [sp, #32]
 800cfd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cfda:	0004      	movs	r4, r0
 800cfdc:	000d      	movs	r5, r1
 800cfde:	f7f3 fa4d 	bl	800047c <__aeabi_dcmpgt>
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	d000      	beq.n	800cfe8 <_dtoa_r+0x43c>
 800cfe6:	e2b3      	b.n	800d550 <_dtoa_r+0x9a4>
 800cfe8:	48b3      	ldr	r0, [pc, #716]	; (800d2b8 <_dtoa_r+0x70c>)
 800cfea:	9915      	ldr	r1, [sp, #84]	; 0x54
 800cfec:	4684      	mov	ip, r0
 800cfee:	4461      	add	r1, ip
 800cff0:	000b      	movs	r3, r1
 800cff2:	0020      	movs	r0, r4
 800cff4:	0029      	movs	r1, r5
 800cff6:	9a08      	ldr	r2, [sp, #32]
 800cff8:	f7f3 fa2c 	bl	8000454 <__aeabi_dcmplt>
 800cffc:	2800      	cmp	r0, #0
 800cffe:	d000      	beq.n	800d002 <_dtoa_r+0x456>
 800d000:	e2a3      	b.n	800d54a <_dtoa_r+0x99e>
 800d002:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d004:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800d006:	9308      	str	r3, [sp, #32]
 800d008:	9409      	str	r4, [sp, #36]	; 0x24
 800d00a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	da00      	bge.n	800d012 <_dtoa_r+0x466>
 800d010:	e179      	b.n	800d306 <_dtoa_r+0x75a>
 800d012:	9a03      	ldr	r2, [sp, #12]
 800d014:	2a0e      	cmp	r2, #14
 800d016:	dd00      	ble.n	800d01a <_dtoa_r+0x46e>
 800d018:	e175      	b.n	800d306 <_dtoa_r+0x75a>
 800d01a:	4ba0      	ldr	r3, [pc, #640]	; (800d29c <_dtoa_r+0x6f0>)
 800d01c:	00d2      	lsls	r2, r2, #3
 800d01e:	189b      	adds	r3, r3, r2
 800d020:	681e      	ldr	r6, [r3, #0]
 800d022:	685f      	ldr	r7, [r3, #4]
 800d024:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d026:	2b00      	cmp	r3, #0
 800d028:	db00      	blt.n	800d02c <_dtoa_r+0x480>
 800d02a:	e0e5      	b.n	800d1f8 <_dtoa_r+0x64c>
 800d02c:	9b07      	ldr	r3, [sp, #28]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	dd00      	ble.n	800d034 <_dtoa_r+0x488>
 800d032:	e0e1      	b.n	800d1f8 <_dtoa_r+0x64c>
 800d034:	d000      	beq.n	800d038 <_dtoa_r+0x48c>
 800d036:	e288      	b.n	800d54a <_dtoa_r+0x99e>
 800d038:	2200      	movs	r2, #0
 800d03a:	0030      	movs	r0, r6
 800d03c:	0039      	movs	r1, r7
 800d03e:	4b9d      	ldr	r3, [pc, #628]	; (800d2b4 <_dtoa_r+0x708>)
 800d040:	f7f4 fb14 	bl	800166c <__aeabi_dmul>
 800d044:	9a08      	ldr	r2, [sp, #32]
 800d046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d048:	f7f3 fa22 	bl	8000490 <__aeabi_dcmpge>
 800d04c:	9e07      	ldr	r6, [sp, #28]
 800d04e:	0037      	movs	r7, r6
 800d050:	2800      	cmp	r0, #0
 800d052:	d000      	beq.n	800d056 <_dtoa_r+0x4aa>
 800d054:	e25f      	b.n	800d516 <_dtoa_r+0x96a>
 800d056:	9b06      	ldr	r3, [sp, #24]
 800d058:	9a06      	ldr	r2, [sp, #24]
 800d05a:	3301      	adds	r3, #1
 800d05c:	9308      	str	r3, [sp, #32]
 800d05e:	2331      	movs	r3, #49	; 0x31
 800d060:	7013      	strb	r3, [r2, #0]
 800d062:	9b03      	ldr	r3, [sp, #12]
 800d064:	3301      	adds	r3, #1
 800d066:	9303      	str	r3, [sp, #12]
 800d068:	e25a      	b.n	800d520 <_dtoa_r+0x974>
 800d06a:	423d      	tst	r5, r7
 800d06c:	d005      	beq.n	800d07a <_dtoa_r+0x4ce>
 800d06e:	6832      	ldr	r2, [r6, #0]
 800d070:	6873      	ldr	r3, [r6, #4]
 800d072:	f7f4 fafb 	bl	800166c <__aeabi_dmul>
 800d076:	003b      	movs	r3, r7
 800d078:	3401      	adds	r4, #1
 800d07a:	106d      	asrs	r5, r5, #1
 800d07c:	3608      	adds	r6, #8
 800d07e:	e75f      	b.n	800cf40 <_dtoa_r+0x394>
 800d080:	9b03      	ldr	r3, [sp, #12]
 800d082:	930e      	str	r3, [sp, #56]	; 0x38
 800d084:	9b07      	ldr	r3, [sp, #28]
 800d086:	e783      	b.n	800cf90 <_dtoa_r+0x3e4>
 800d088:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d08a:	4b84      	ldr	r3, [pc, #528]	; (800d29c <_dtoa_r+0x6f0>)
 800d08c:	3a01      	subs	r2, #1
 800d08e:	00d2      	lsls	r2, r2, #3
 800d090:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d092:	189b      	adds	r3, r3, r2
 800d094:	9c08      	ldr	r4, [sp, #32]
 800d096:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	2900      	cmp	r1, #0
 800d09e:	d051      	beq.n	800d144 <_dtoa_r+0x598>
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	4986      	ldr	r1, [pc, #536]	; (800d2bc <_dtoa_r+0x710>)
 800d0a4:	f7f3 fee8 	bl	8000e78 <__aeabi_ddiv>
 800d0a8:	0022      	movs	r2, r4
 800d0aa:	002b      	movs	r3, r5
 800d0ac:	f7f4 fda0 	bl	8001bf0 <__aeabi_dsub>
 800d0b0:	9a06      	ldr	r2, [sp, #24]
 800d0b2:	0004      	movs	r4, r0
 800d0b4:	4694      	mov	ip, r2
 800d0b6:	000d      	movs	r5, r1
 800d0b8:	9b06      	ldr	r3, [sp, #24]
 800d0ba:	9314      	str	r3, [sp, #80]	; 0x50
 800d0bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d0be:	4463      	add	r3, ip
 800d0c0:	9318      	str	r3, [sp, #96]	; 0x60
 800d0c2:	0039      	movs	r1, r7
 800d0c4:	0030      	movs	r0, r6
 800d0c6:	f7f5 f933 	bl	8002330 <__aeabi_d2iz>
 800d0ca:	9012      	str	r0, [sp, #72]	; 0x48
 800d0cc:	f7f5 f966 	bl	800239c <__aeabi_i2d>
 800d0d0:	0002      	movs	r2, r0
 800d0d2:	000b      	movs	r3, r1
 800d0d4:	0030      	movs	r0, r6
 800d0d6:	0039      	movs	r1, r7
 800d0d8:	f7f4 fd8a 	bl	8001bf0 <__aeabi_dsub>
 800d0dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d0de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	9308      	str	r3, [sp, #32]
 800d0e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d0e6:	0006      	movs	r6, r0
 800d0e8:	3330      	adds	r3, #48	; 0x30
 800d0ea:	7013      	strb	r3, [r2, #0]
 800d0ec:	0022      	movs	r2, r4
 800d0ee:	002b      	movs	r3, r5
 800d0f0:	000f      	movs	r7, r1
 800d0f2:	f7f3 f9af 	bl	8000454 <__aeabi_dcmplt>
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	d174      	bne.n	800d1e4 <_dtoa_r+0x638>
 800d0fa:	0032      	movs	r2, r6
 800d0fc:	003b      	movs	r3, r7
 800d0fe:	2000      	movs	r0, #0
 800d100:	4968      	ldr	r1, [pc, #416]	; (800d2a4 <_dtoa_r+0x6f8>)
 800d102:	f7f4 fd75 	bl	8001bf0 <__aeabi_dsub>
 800d106:	0022      	movs	r2, r4
 800d108:	002b      	movs	r3, r5
 800d10a:	f7f3 f9a3 	bl	8000454 <__aeabi_dcmplt>
 800d10e:	2800      	cmp	r0, #0
 800d110:	d000      	beq.n	800d114 <_dtoa_r+0x568>
 800d112:	e0d7      	b.n	800d2c4 <_dtoa_r+0x718>
 800d114:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d116:	9a08      	ldr	r2, [sp, #32]
 800d118:	4293      	cmp	r3, r2
 800d11a:	d100      	bne.n	800d11e <_dtoa_r+0x572>
 800d11c:	e771      	b.n	800d002 <_dtoa_r+0x456>
 800d11e:	2200      	movs	r2, #0
 800d120:	0020      	movs	r0, r4
 800d122:	0029      	movs	r1, r5
 800d124:	4b60      	ldr	r3, [pc, #384]	; (800d2a8 <_dtoa_r+0x6fc>)
 800d126:	f7f4 faa1 	bl	800166c <__aeabi_dmul>
 800d12a:	4b5f      	ldr	r3, [pc, #380]	; (800d2a8 <_dtoa_r+0x6fc>)
 800d12c:	0004      	movs	r4, r0
 800d12e:	000d      	movs	r5, r1
 800d130:	0030      	movs	r0, r6
 800d132:	0039      	movs	r1, r7
 800d134:	2200      	movs	r2, #0
 800d136:	f7f4 fa99 	bl	800166c <__aeabi_dmul>
 800d13a:	9b08      	ldr	r3, [sp, #32]
 800d13c:	0006      	movs	r6, r0
 800d13e:	000f      	movs	r7, r1
 800d140:	9314      	str	r3, [sp, #80]	; 0x50
 800d142:	e7be      	b.n	800d0c2 <_dtoa_r+0x516>
 800d144:	0020      	movs	r0, r4
 800d146:	0029      	movs	r1, r5
 800d148:	f7f4 fa90 	bl	800166c <__aeabi_dmul>
 800d14c:	9a06      	ldr	r2, [sp, #24]
 800d14e:	9b06      	ldr	r3, [sp, #24]
 800d150:	4694      	mov	ip, r2
 800d152:	9308      	str	r3, [sp, #32]
 800d154:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d156:	9014      	str	r0, [sp, #80]	; 0x50
 800d158:	9115      	str	r1, [sp, #84]	; 0x54
 800d15a:	4463      	add	r3, ip
 800d15c:	9319      	str	r3, [sp, #100]	; 0x64
 800d15e:	0030      	movs	r0, r6
 800d160:	0039      	movs	r1, r7
 800d162:	f7f5 f8e5 	bl	8002330 <__aeabi_d2iz>
 800d166:	9018      	str	r0, [sp, #96]	; 0x60
 800d168:	f7f5 f918 	bl	800239c <__aeabi_i2d>
 800d16c:	0002      	movs	r2, r0
 800d16e:	000b      	movs	r3, r1
 800d170:	0030      	movs	r0, r6
 800d172:	0039      	movs	r1, r7
 800d174:	f7f4 fd3c 	bl	8001bf0 <__aeabi_dsub>
 800d178:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800d17a:	9b08      	ldr	r3, [sp, #32]
 800d17c:	3630      	adds	r6, #48	; 0x30
 800d17e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d180:	701e      	strb	r6, [r3, #0]
 800d182:	3301      	adds	r3, #1
 800d184:	0004      	movs	r4, r0
 800d186:	000d      	movs	r5, r1
 800d188:	9308      	str	r3, [sp, #32]
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d12d      	bne.n	800d1ea <_dtoa_r+0x63e>
 800d18e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d190:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d192:	9a06      	ldr	r2, [sp, #24]
 800d194:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d196:	4694      	mov	ip, r2
 800d198:	4463      	add	r3, ip
 800d19a:	2200      	movs	r2, #0
 800d19c:	9308      	str	r3, [sp, #32]
 800d19e:	4b47      	ldr	r3, [pc, #284]	; (800d2bc <_dtoa_r+0x710>)
 800d1a0:	f7f3 fb0a 	bl	80007b8 <__aeabi_dadd>
 800d1a4:	0002      	movs	r2, r0
 800d1a6:	000b      	movs	r3, r1
 800d1a8:	0020      	movs	r0, r4
 800d1aa:	0029      	movs	r1, r5
 800d1ac:	f7f3 f966 	bl	800047c <__aeabi_dcmpgt>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	d000      	beq.n	800d1b6 <_dtoa_r+0x60a>
 800d1b4:	e086      	b.n	800d2c4 <_dtoa_r+0x718>
 800d1b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d1b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	493f      	ldr	r1, [pc, #252]	; (800d2bc <_dtoa_r+0x710>)
 800d1be:	f7f4 fd17 	bl	8001bf0 <__aeabi_dsub>
 800d1c2:	0002      	movs	r2, r0
 800d1c4:	000b      	movs	r3, r1
 800d1c6:	0020      	movs	r0, r4
 800d1c8:	0029      	movs	r1, r5
 800d1ca:	f7f3 f943 	bl	8000454 <__aeabi_dcmplt>
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	d100      	bne.n	800d1d4 <_dtoa_r+0x628>
 800d1d2:	e716      	b.n	800d002 <_dtoa_r+0x456>
 800d1d4:	9b08      	ldr	r3, [sp, #32]
 800d1d6:	001a      	movs	r2, r3
 800d1d8:	3a01      	subs	r2, #1
 800d1da:	9208      	str	r2, [sp, #32]
 800d1dc:	7812      	ldrb	r2, [r2, #0]
 800d1de:	2a30      	cmp	r2, #48	; 0x30
 800d1e0:	d0f8      	beq.n	800d1d4 <_dtoa_r+0x628>
 800d1e2:	9308      	str	r3, [sp, #32]
 800d1e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1e6:	9303      	str	r3, [sp, #12]
 800d1e8:	e046      	b.n	800d278 <_dtoa_r+0x6cc>
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	4b2e      	ldr	r3, [pc, #184]	; (800d2a8 <_dtoa_r+0x6fc>)
 800d1ee:	f7f4 fa3d 	bl	800166c <__aeabi_dmul>
 800d1f2:	0006      	movs	r6, r0
 800d1f4:	000f      	movs	r7, r1
 800d1f6:	e7b2      	b.n	800d15e <_dtoa_r+0x5b2>
 800d1f8:	9b06      	ldr	r3, [sp, #24]
 800d1fa:	9a06      	ldr	r2, [sp, #24]
 800d1fc:	930a      	str	r3, [sp, #40]	; 0x28
 800d1fe:	9b07      	ldr	r3, [sp, #28]
 800d200:	9c08      	ldr	r4, [sp, #32]
 800d202:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d204:	3b01      	subs	r3, #1
 800d206:	189b      	adds	r3, r3, r2
 800d208:	930b      	str	r3, [sp, #44]	; 0x2c
 800d20a:	0032      	movs	r2, r6
 800d20c:	003b      	movs	r3, r7
 800d20e:	0020      	movs	r0, r4
 800d210:	0029      	movs	r1, r5
 800d212:	f7f3 fe31 	bl	8000e78 <__aeabi_ddiv>
 800d216:	f7f5 f88b 	bl	8002330 <__aeabi_d2iz>
 800d21a:	9007      	str	r0, [sp, #28]
 800d21c:	f7f5 f8be 	bl	800239c <__aeabi_i2d>
 800d220:	0032      	movs	r2, r6
 800d222:	003b      	movs	r3, r7
 800d224:	f7f4 fa22 	bl	800166c <__aeabi_dmul>
 800d228:	0002      	movs	r2, r0
 800d22a:	000b      	movs	r3, r1
 800d22c:	0020      	movs	r0, r4
 800d22e:	0029      	movs	r1, r5
 800d230:	f7f4 fcde 	bl	8001bf0 <__aeabi_dsub>
 800d234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d236:	001a      	movs	r2, r3
 800d238:	3201      	adds	r2, #1
 800d23a:	920a      	str	r2, [sp, #40]	; 0x28
 800d23c:	9208      	str	r2, [sp, #32]
 800d23e:	9a07      	ldr	r2, [sp, #28]
 800d240:	3230      	adds	r2, #48	; 0x30
 800d242:	701a      	strb	r2, [r3, #0]
 800d244:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d246:	429a      	cmp	r2, r3
 800d248:	d14f      	bne.n	800d2ea <_dtoa_r+0x73e>
 800d24a:	0002      	movs	r2, r0
 800d24c:	000b      	movs	r3, r1
 800d24e:	f7f3 fab3 	bl	80007b8 <__aeabi_dadd>
 800d252:	0032      	movs	r2, r6
 800d254:	003b      	movs	r3, r7
 800d256:	0004      	movs	r4, r0
 800d258:	000d      	movs	r5, r1
 800d25a:	f7f3 f90f 	bl	800047c <__aeabi_dcmpgt>
 800d25e:	2800      	cmp	r0, #0
 800d260:	d12e      	bne.n	800d2c0 <_dtoa_r+0x714>
 800d262:	0032      	movs	r2, r6
 800d264:	003b      	movs	r3, r7
 800d266:	0020      	movs	r0, r4
 800d268:	0029      	movs	r1, r5
 800d26a:	f7f3 f8ed 	bl	8000448 <__aeabi_dcmpeq>
 800d26e:	2800      	cmp	r0, #0
 800d270:	d002      	beq.n	800d278 <_dtoa_r+0x6cc>
 800d272:	9b07      	ldr	r3, [sp, #28]
 800d274:	07de      	lsls	r6, r3, #31
 800d276:	d423      	bmi.n	800d2c0 <_dtoa_r+0x714>
 800d278:	9905      	ldr	r1, [sp, #20]
 800d27a:	9804      	ldr	r0, [sp, #16]
 800d27c:	f7fc f8fe 	bl	800947c <_Bfree>
 800d280:	2300      	movs	r3, #0
 800d282:	9a08      	ldr	r2, [sp, #32]
 800d284:	7013      	strb	r3, [r2, #0]
 800d286:	9b03      	ldr	r3, [sp, #12]
 800d288:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d28a:	3301      	adds	r3, #1
 800d28c:	6013      	str	r3, [r2, #0]
 800d28e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d290:	2b00      	cmp	r3, #0
 800d292:	d100      	bne.n	800d296 <_dtoa_r+0x6ea>
 800d294:	e4bd      	b.n	800cc12 <_dtoa_r+0x66>
 800d296:	9a08      	ldr	r2, [sp, #32]
 800d298:	601a      	str	r2, [r3, #0]
 800d29a:	e4ba      	b.n	800cc12 <_dtoa_r+0x66>
 800d29c:	0800f8d8 	.word	0x0800f8d8
 800d2a0:	0800f8b0 	.word	0x0800f8b0
 800d2a4:	3ff00000 	.word	0x3ff00000
 800d2a8:	40240000 	.word	0x40240000
 800d2ac:	401c0000 	.word	0x401c0000
 800d2b0:	fcc00000 	.word	0xfcc00000
 800d2b4:	40140000 	.word	0x40140000
 800d2b8:	7cc00000 	.word	0x7cc00000
 800d2bc:	3fe00000 	.word	0x3fe00000
 800d2c0:	9b03      	ldr	r3, [sp, #12]
 800d2c2:	930e      	str	r3, [sp, #56]	; 0x38
 800d2c4:	9b08      	ldr	r3, [sp, #32]
 800d2c6:	9308      	str	r3, [sp, #32]
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	781a      	ldrb	r2, [r3, #0]
 800d2cc:	2a39      	cmp	r2, #57	; 0x39
 800d2ce:	d108      	bne.n	800d2e2 <_dtoa_r+0x736>
 800d2d0:	9a06      	ldr	r2, [sp, #24]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d1f7      	bne.n	800d2c6 <_dtoa_r+0x71a>
 800d2d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2d8:	9906      	ldr	r1, [sp, #24]
 800d2da:	3201      	adds	r2, #1
 800d2dc:	920e      	str	r2, [sp, #56]	; 0x38
 800d2de:	2230      	movs	r2, #48	; 0x30
 800d2e0:	700a      	strb	r2, [r1, #0]
 800d2e2:	781a      	ldrb	r2, [r3, #0]
 800d2e4:	3201      	adds	r2, #1
 800d2e6:	701a      	strb	r2, [r3, #0]
 800d2e8:	e77c      	b.n	800d1e4 <_dtoa_r+0x638>
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	4ba9      	ldr	r3, [pc, #676]	; (800d594 <_dtoa_r+0x9e8>)
 800d2ee:	f7f4 f9bd 	bl	800166c <__aeabi_dmul>
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	0004      	movs	r4, r0
 800d2f8:	000d      	movs	r5, r1
 800d2fa:	f7f3 f8a5 	bl	8000448 <__aeabi_dcmpeq>
 800d2fe:	2800      	cmp	r0, #0
 800d300:	d100      	bne.n	800d304 <_dtoa_r+0x758>
 800d302:	e782      	b.n	800d20a <_dtoa_r+0x65e>
 800d304:	e7b8      	b.n	800d278 <_dtoa_r+0x6cc>
 800d306:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800d308:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d30a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d30c:	2f00      	cmp	r7, #0
 800d30e:	d012      	beq.n	800d336 <_dtoa_r+0x78a>
 800d310:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d312:	2a01      	cmp	r2, #1
 800d314:	dc6e      	bgt.n	800d3f4 <_dtoa_r+0x848>
 800d316:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d318:	2a00      	cmp	r2, #0
 800d31a:	d065      	beq.n	800d3e8 <_dtoa_r+0x83c>
 800d31c:	4a9e      	ldr	r2, [pc, #632]	; (800d598 <_dtoa_r+0x9ec>)
 800d31e:	189b      	adds	r3, r3, r2
 800d320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d322:	2101      	movs	r1, #1
 800d324:	18d2      	adds	r2, r2, r3
 800d326:	920a      	str	r2, [sp, #40]	; 0x28
 800d328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d32a:	9804      	ldr	r0, [sp, #16]
 800d32c:	18d3      	adds	r3, r2, r3
 800d32e:	930c      	str	r3, [sp, #48]	; 0x30
 800d330:	f7fc f986 	bl	8009640 <__i2b>
 800d334:	0007      	movs	r7, r0
 800d336:	2c00      	cmp	r4, #0
 800d338:	d00e      	beq.n	800d358 <_dtoa_r+0x7ac>
 800d33a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	dd0b      	ble.n	800d358 <_dtoa_r+0x7ac>
 800d340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d342:	0023      	movs	r3, r4
 800d344:	4294      	cmp	r4, r2
 800d346:	dd00      	ble.n	800d34a <_dtoa_r+0x79e>
 800d348:	0013      	movs	r3, r2
 800d34a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d34c:	1ae4      	subs	r4, r4, r3
 800d34e:	1ad2      	subs	r2, r2, r3
 800d350:	920a      	str	r2, [sp, #40]	; 0x28
 800d352:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d354:	1ad3      	subs	r3, r2, r3
 800d356:	930c      	str	r3, [sp, #48]	; 0x30
 800d358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d01e      	beq.n	800d39c <_dtoa_r+0x7f0>
 800d35e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d360:	2b00      	cmp	r3, #0
 800d362:	d05c      	beq.n	800d41e <_dtoa_r+0x872>
 800d364:	2d00      	cmp	r5, #0
 800d366:	dd10      	ble.n	800d38a <_dtoa_r+0x7de>
 800d368:	0039      	movs	r1, r7
 800d36a:	002a      	movs	r2, r5
 800d36c:	9804      	ldr	r0, [sp, #16]
 800d36e:	f7fc fa2f 	bl	80097d0 <__pow5mult>
 800d372:	9a05      	ldr	r2, [sp, #20]
 800d374:	0001      	movs	r1, r0
 800d376:	0007      	movs	r7, r0
 800d378:	9804      	ldr	r0, [sp, #16]
 800d37a:	f7fc f979 	bl	8009670 <__multiply>
 800d37e:	0006      	movs	r6, r0
 800d380:	9905      	ldr	r1, [sp, #20]
 800d382:	9804      	ldr	r0, [sp, #16]
 800d384:	f7fc f87a 	bl	800947c <_Bfree>
 800d388:	9605      	str	r6, [sp, #20]
 800d38a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d38c:	1b5a      	subs	r2, r3, r5
 800d38e:	42ab      	cmp	r3, r5
 800d390:	d004      	beq.n	800d39c <_dtoa_r+0x7f0>
 800d392:	9905      	ldr	r1, [sp, #20]
 800d394:	9804      	ldr	r0, [sp, #16]
 800d396:	f7fc fa1b 	bl	80097d0 <__pow5mult>
 800d39a:	9005      	str	r0, [sp, #20]
 800d39c:	2101      	movs	r1, #1
 800d39e:	9804      	ldr	r0, [sp, #16]
 800d3a0:	f7fc f94e 	bl	8009640 <__i2b>
 800d3a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d3a6:	0006      	movs	r6, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	dd3a      	ble.n	800d422 <_dtoa_r+0x876>
 800d3ac:	001a      	movs	r2, r3
 800d3ae:	0001      	movs	r1, r0
 800d3b0:	9804      	ldr	r0, [sp, #16]
 800d3b2:	f7fc fa0d 	bl	80097d0 <__pow5mult>
 800d3b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d3b8:	0006      	movs	r6, r0
 800d3ba:	2500      	movs	r5, #0
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	dc38      	bgt.n	800d432 <_dtoa_r+0x886>
 800d3c0:	2500      	movs	r5, #0
 800d3c2:	9b08      	ldr	r3, [sp, #32]
 800d3c4:	42ab      	cmp	r3, r5
 800d3c6:	d130      	bne.n	800d42a <_dtoa_r+0x87e>
 800d3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3ca:	031b      	lsls	r3, r3, #12
 800d3cc:	42ab      	cmp	r3, r5
 800d3ce:	d12c      	bne.n	800d42a <_dtoa_r+0x87e>
 800d3d0:	4b72      	ldr	r3, [pc, #456]	; (800d59c <_dtoa_r+0x9f0>)
 800d3d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3d4:	4213      	tst	r3, r2
 800d3d6:	d028      	beq.n	800d42a <_dtoa_r+0x87e>
 800d3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3da:	3501      	adds	r5, #1
 800d3dc:	3301      	adds	r3, #1
 800d3de:	930a      	str	r3, [sp, #40]	; 0x28
 800d3e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	930c      	str	r3, [sp, #48]	; 0x30
 800d3e6:	e020      	b.n	800d42a <_dtoa_r+0x87e>
 800d3e8:	2336      	movs	r3, #54	; 0x36
 800d3ea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d3ec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d3ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d3f0:	1a9b      	subs	r3, r3, r2
 800d3f2:	e795      	b.n	800d320 <_dtoa_r+0x774>
 800d3f4:	9b07      	ldr	r3, [sp, #28]
 800d3f6:	1e5d      	subs	r5, r3, #1
 800d3f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3fa:	42ab      	cmp	r3, r5
 800d3fc:	db07      	blt.n	800d40e <_dtoa_r+0x862>
 800d3fe:	1b5d      	subs	r5, r3, r5
 800d400:	9b07      	ldr	r3, [sp, #28]
 800d402:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d404:	2b00      	cmp	r3, #0
 800d406:	da8b      	bge.n	800d320 <_dtoa_r+0x774>
 800d408:	1ae4      	subs	r4, r4, r3
 800d40a:	2300      	movs	r3, #0
 800d40c:	e788      	b.n	800d320 <_dtoa_r+0x774>
 800d40e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d410:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d412:	1aeb      	subs	r3, r5, r3
 800d414:	18d3      	adds	r3, r2, r3
 800d416:	950d      	str	r5, [sp, #52]	; 0x34
 800d418:	9313      	str	r3, [sp, #76]	; 0x4c
 800d41a:	2500      	movs	r5, #0
 800d41c:	e7f0      	b.n	800d400 <_dtoa_r+0x854>
 800d41e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d420:	e7b7      	b.n	800d392 <_dtoa_r+0x7e6>
 800d422:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d424:	2500      	movs	r5, #0
 800d426:	2b01      	cmp	r3, #1
 800d428:	ddca      	ble.n	800d3c0 <_dtoa_r+0x814>
 800d42a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d42c:	2001      	movs	r0, #1
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d008      	beq.n	800d444 <_dtoa_r+0x898>
 800d432:	6933      	ldr	r3, [r6, #16]
 800d434:	3303      	adds	r3, #3
 800d436:	009b      	lsls	r3, r3, #2
 800d438:	18f3      	adds	r3, r6, r3
 800d43a:	6858      	ldr	r0, [r3, #4]
 800d43c:	f7fc f8b8 	bl	80095b0 <__hi0bits>
 800d440:	2320      	movs	r3, #32
 800d442:	1a18      	subs	r0, r3, r0
 800d444:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d446:	1818      	adds	r0, r3, r0
 800d448:	0002      	movs	r2, r0
 800d44a:	231f      	movs	r3, #31
 800d44c:	401a      	ands	r2, r3
 800d44e:	4218      	tst	r0, r3
 800d450:	d047      	beq.n	800d4e2 <_dtoa_r+0x936>
 800d452:	3301      	adds	r3, #1
 800d454:	1a9b      	subs	r3, r3, r2
 800d456:	2b04      	cmp	r3, #4
 800d458:	dd3f      	ble.n	800d4da <_dtoa_r+0x92e>
 800d45a:	231c      	movs	r3, #28
 800d45c:	1a9b      	subs	r3, r3, r2
 800d45e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d460:	18e4      	adds	r4, r4, r3
 800d462:	18d2      	adds	r2, r2, r3
 800d464:	920a      	str	r2, [sp, #40]	; 0x28
 800d466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d468:	18d3      	adds	r3, r2, r3
 800d46a:	930c      	str	r3, [sp, #48]	; 0x30
 800d46c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d46e:	2b00      	cmp	r3, #0
 800d470:	dd05      	ble.n	800d47e <_dtoa_r+0x8d2>
 800d472:	001a      	movs	r2, r3
 800d474:	9905      	ldr	r1, [sp, #20]
 800d476:	9804      	ldr	r0, [sp, #16]
 800d478:	f7fc f9ec 	bl	8009854 <__lshift>
 800d47c:	9005      	str	r0, [sp, #20]
 800d47e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d480:	2b00      	cmp	r3, #0
 800d482:	dd05      	ble.n	800d490 <_dtoa_r+0x8e4>
 800d484:	0031      	movs	r1, r6
 800d486:	001a      	movs	r2, r3
 800d488:	9804      	ldr	r0, [sp, #16]
 800d48a:	f7fc f9e3 	bl	8009854 <__lshift>
 800d48e:	0006      	movs	r6, r0
 800d490:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d492:	2b00      	cmp	r3, #0
 800d494:	d027      	beq.n	800d4e6 <_dtoa_r+0x93a>
 800d496:	0031      	movs	r1, r6
 800d498:	9805      	ldr	r0, [sp, #20]
 800d49a:	f7fc fa49 	bl	8009930 <__mcmp>
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	da21      	bge.n	800d4e6 <_dtoa_r+0x93a>
 800d4a2:	9b03      	ldr	r3, [sp, #12]
 800d4a4:	220a      	movs	r2, #10
 800d4a6:	3b01      	subs	r3, #1
 800d4a8:	9303      	str	r3, [sp, #12]
 800d4aa:	9905      	ldr	r1, [sp, #20]
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	9804      	ldr	r0, [sp, #16]
 800d4b0:	f7fb ffee 	bl	8009490 <__multadd>
 800d4b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4b6:	9005      	str	r0, [sp, #20]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d100      	bne.n	800d4be <_dtoa_r+0x912>
 800d4bc:	e15d      	b.n	800d77a <_dtoa_r+0xbce>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	0039      	movs	r1, r7
 800d4c2:	220a      	movs	r2, #10
 800d4c4:	9804      	ldr	r0, [sp, #16]
 800d4c6:	f7fb ffe3 	bl	8009490 <__multadd>
 800d4ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4cc:	0007      	movs	r7, r0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	dc49      	bgt.n	800d566 <_dtoa_r+0x9ba>
 800d4d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d4d4:	2b02      	cmp	r3, #2
 800d4d6:	dc0e      	bgt.n	800d4f6 <_dtoa_r+0x94a>
 800d4d8:	e045      	b.n	800d566 <_dtoa_r+0x9ba>
 800d4da:	2b04      	cmp	r3, #4
 800d4dc:	d0c6      	beq.n	800d46c <_dtoa_r+0x8c0>
 800d4de:	331c      	adds	r3, #28
 800d4e0:	e7bd      	b.n	800d45e <_dtoa_r+0x8b2>
 800d4e2:	0013      	movs	r3, r2
 800d4e4:	e7fb      	b.n	800d4de <_dtoa_r+0x932>
 800d4e6:	9b07      	ldr	r3, [sp, #28]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	dc36      	bgt.n	800d55a <_dtoa_r+0x9ae>
 800d4ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d4ee:	2b02      	cmp	r3, #2
 800d4f0:	dd33      	ble.n	800d55a <_dtoa_r+0x9ae>
 800d4f2:	9b07      	ldr	r3, [sp, #28]
 800d4f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d10c      	bne.n	800d516 <_dtoa_r+0x96a>
 800d4fc:	0031      	movs	r1, r6
 800d4fe:	2205      	movs	r2, #5
 800d500:	9804      	ldr	r0, [sp, #16]
 800d502:	f7fb ffc5 	bl	8009490 <__multadd>
 800d506:	0006      	movs	r6, r0
 800d508:	0001      	movs	r1, r0
 800d50a:	9805      	ldr	r0, [sp, #20]
 800d50c:	f7fc fa10 	bl	8009930 <__mcmp>
 800d510:	2800      	cmp	r0, #0
 800d512:	dd00      	ble.n	800d516 <_dtoa_r+0x96a>
 800d514:	e59f      	b.n	800d056 <_dtoa_r+0x4aa>
 800d516:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d518:	43db      	mvns	r3, r3
 800d51a:	9303      	str	r3, [sp, #12]
 800d51c:	9b06      	ldr	r3, [sp, #24]
 800d51e:	9308      	str	r3, [sp, #32]
 800d520:	2500      	movs	r5, #0
 800d522:	0031      	movs	r1, r6
 800d524:	9804      	ldr	r0, [sp, #16]
 800d526:	f7fb ffa9 	bl	800947c <_Bfree>
 800d52a:	2f00      	cmp	r7, #0
 800d52c:	d100      	bne.n	800d530 <_dtoa_r+0x984>
 800d52e:	e6a3      	b.n	800d278 <_dtoa_r+0x6cc>
 800d530:	2d00      	cmp	r5, #0
 800d532:	d005      	beq.n	800d540 <_dtoa_r+0x994>
 800d534:	42bd      	cmp	r5, r7
 800d536:	d003      	beq.n	800d540 <_dtoa_r+0x994>
 800d538:	0029      	movs	r1, r5
 800d53a:	9804      	ldr	r0, [sp, #16]
 800d53c:	f7fb ff9e 	bl	800947c <_Bfree>
 800d540:	0039      	movs	r1, r7
 800d542:	9804      	ldr	r0, [sp, #16]
 800d544:	f7fb ff9a 	bl	800947c <_Bfree>
 800d548:	e696      	b.n	800d278 <_dtoa_r+0x6cc>
 800d54a:	2600      	movs	r6, #0
 800d54c:	0037      	movs	r7, r6
 800d54e:	e7e2      	b.n	800d516 <_dtoa_r+0x96a>
 800d550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d552:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d554:	9303      	str	r3, [sp, #12]
 800d556:	0037      	movs	r7, r6
 800d558:	e57d      	b.n	800d056 <_dtoa_r+0x4aa>
 800d55a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d100      	bne.n	800d562 <_dtoa_r+0x9b6>
 800d560:	e0c3      	b.n	800d6ea <_dtoa_r+0xb3e>
 800d562:	9b07      	ldr	r3, [sp, #28]
 800d564:	930b      	str	r3, [sp, #44]	; 0x2c
 800d566:	2c00      	cmp	r4, #0
 800d568:	dd05      	ble.n	800d576 <_dtoa_r+0x9ca>
 800d56a:	0039      	movs	r1, r7
 800d56c:	0022      	movs	r2, r4
 800d56e:	9804      	ldr	r0, [sp, #16]
 800d570:	f7fc f970 	bl	8009854 <__lshift>
 800d574:	0007      	movs	r7, r0
 800d576:	0038      	movs	r0, r7
 800d578:	2d00      	cmp	r5, #0
 800d57a:	d024      	beq.n	800d5c6 <_dtoa_r+0xa1a>
 800d57c:	6879      	ldr	r1, [r7, #4]
 800d57e:	9804      	ldr	r0, [sp, #16]
 800d580:	f7fb ff54 	bl	800942c <_Balloc>
 800d584:	1e04      	subs	r4, r0, #0
 800d586:	d111      	bne.n	800d5ac <_dtoa_r+0xa00>
 800d588:	0022      	movs	r2, r4
 800d58a:	4b05      	ldr	r3, [pc, #20]	; (800d5a0 <_dtoa_r+0x9f4>)
 800d58c:	4805      	ldr	r0, [pc, #20]	; (800d5a4 <_dtoa_r+0x9f8>)
 800d58e:	4906      	ldr	r1, [pc, #24]	; (800d5a8 <_dtoa_r+0x9fc>)
 800d590:	e43c      	b.n	800ce0c <_dtoa_r+0x260>
 800d592:	46c0      	nop			; (mov r8, r8)
 800d594:	40240000 	.word	0x40240000
 800d598:	00000433 	.word	0x00000433
 800d59c:	7ff00000 	.word	0x7ff00000
 800d5a0:	0800f7e1 	.word	0x0800f7e1
 800d5a4:	0800fa71 	.word	0x0800fa71
 800d5a8:	000002ef 	.word	0x000002ef
 800d5ac:	0039      	movs	r1, r7
 800d5ae:	693a      	ldr	r2, [r7, #16]
 800d5b0:	310c      	adds	r1, #12
 800d5b2:	3202      	adds	r2, #2
 800d5b4:	0092      	lsls	r2, r2, #2
 800d5b6:	300c      	adds	r0, #12
 800d5b8:	f7fb fa9d 	bl	8008af6 <memcpy>
 800d5bc:	2201      	movs	r2, #1
 800d5be:	0021      	movs	r1, r4
 800d5c0:	9804      	ldr	r0, [sp, #16]
 800d5c2:	f7fc f947 	bl	8009854 <__lshift>
 800d5c6:	9b06      	ldr	r3, [sp, #24]
 800d5c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d5ca:	9307      	str	r3, [sp, #28]
 800d5cc:	3b01      	subs	r3, #1
 800d5ce:	189b      	adds	r3, r3, r2
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	003d      	movs	r5, r7
 800d5d4:	0007      	movs	r7, r0
 800d5d6:	930e      	str	r3, [sp, #56]	; 0x38
 800d5d8:	9b08      	ldr	r3, [sp, #32]
 800d5da:	4013      	ands	r3, r2
 800d5dc:	930d      	str	r3, [sp, #52]	; 0x34
 800d5de:	0031      	movs	r1, r6
 800d5e0:	9805      	ldr	r0, [sp, #20]
 800d5e2:	f7ff fa53 	bl	800ca8c <quorem>
 800d5e6:	0029      	movs	r1, r5
 800d5e8:	0004      	movs	r4, r0
 800d5ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800d5ec:	9805      	ldr	r0, [sp, #20]
 800d5ee:	f7fc f99f 	bl	8009930 <__mcmp>
 800d5f2:	003a      	movs	r2, r7
 800d5f4:	900c      	str	r0, [sp, #48]	; 0x30
 800d5f6:	0031      	movs	r1, r6
 800d5f8:	9804      	ldr	r0, [sp, #16]
 800d5fa:	f7fc f9b5 	bl	8009968 <__mdiff>
 800d5fe:	2201      	movs	r2, #1
 800d600:	68c3      	ldr	r3, [r0, #12]
 800d602:	3430      	adds	r4, #48	; 0x30
 800d604:	9008      	str	r0, [sp, #32]
 800d606:	920a      	str	r2, [sp, #40]	; 0x28
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d104      	bne.n	800d616 <_dtoa_r+0xa6a>
 800d60c:	0001      	movs	r1, r0
 800d60e:	9805      	ldr	r0, [sp, #20]
 800d610:	f7fc f98e 	bl	8009930 <__mcmp>
 800d614:	900a      	str	r0, [sp, #40]	; 0x28
 800d616:	9908      	ldr	r1, [sp, #32]
 800d618:	9804      	ldr	r0, [sp, #16]
 800d61a:	f7fb ff2f 	bl	800947c <_Bfree>
 800d61e:	9b07      	ldr	r3, [sp, #28]
 800d620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d622:	3301      	adds	r3, #1
 800d624:	9308      	str	r3, [sp, #32]
 800d626:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d628:	4313      	orrs	r3, r2
 800d62a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d62c:	4313      	orrs	r3, r2
 800d62e:	d109      	bne.n	800d644 <_dtoa_r+0xa98>
 800d630:	2c39      	cmp	r4, #57	; 0x39
 800d632:	d022      	beq.n	800d67a <_dtoa_r+0xace>
 800d634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d636:	2b00      	cmp	r3, #0
 800d638:	dd01      	ble.n	800d63e <_dtoa_r+0xa92>
 800d63a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d63c:	3431      	adds	r4, #49	; 0x31
 800d63e:	9b07      	ldr	r3, [sp, #28]
 800d640:	701c      	strb	r4, [r3, #0]
 800d642:	e76e      	b.n	800d522 <_dtoa_r+0x976>
 800d644:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d646:	2b00      	cmp	r3, #0
 800d648:	db04      	blt.n	800d654 <_dtoa_r+0xaa8>
 800d64a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d64c:	4313      	orrs	r3, r2
 800d64e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d650:	4313      	orrs	r3, r2
 800d652:	d11e      	bne.n	800d692 <_dtoa_r+0xae6>
 800d654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d656:	2b00      	cmp	r3, #0
 800d658:	ddf1      	ble.n	800d63e <_dtoa_r+0xa92>
 800d65a:	9905      	ldr	r1, [sp, #20]
 800d65c:	2201      	movs	r2, #1
 800d65e:	9804      	ldr	r0, [sp, #16]
 800d660:	f7fc f8f8 	bl	8009854 <__lshift>
 800d664:	0031      	movs	r1, r6
 800d666:	9005      	str	r0, [sp, #20]
 800d668:	f7fc f962 	bl	8009930 <__mcmp>
 800d66c:	2800      	cmp	r0, #0
 800d66e:	dc02      	bgt.n	800d676 <_dtoa_r+0xaca>
 800d670:	d1e5      	bne.n	800d63e <_dtoa_r+0xa92>
 800d672:	07e3      	lsls	r3, r4, #31
 800d674:	d5e3      	bpl.n	800d63e <_dtoa_r+0xa92>
 800d676:	2c39      	cmp	r4, #57	; 0x39
 800d678:	d1df      	bne.n	800d63a <_dtoa_r+0xa8e>
 800d67a:	2339      	movs	r3, #57	; 0x39
 800d67c:	9a07      	ldr	r2, [sp, #28]
 800d67e:	7013      	strb	r3, [r2, #0]
 800d680:	9b08      	ldr	r3, [sp, #32]
 800d682:	9308      	str	r3, [sp, #32]
 800d684:	3b01      	subs	r3, #1
 800d686:	781a      	ldrb	r2, [r3, #0]
 800d688:	2a39      	cmp	r2, #57	; 0x39
 800d68a:	d063      	beq.n	800d754 <_dtoa_r+0xba8>
 800d68c:	3201      	adds	r2, #1
 800d68e:	701a      	strb	r2, [r3, #0]
 800d690:	e747      	b.n	800d522 <_dtoa_r+0x976>
 800d692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d694:	2b00      	cmp	r3, #0
 800d696:	dd03      	ble.n	800d6a0 <_dtoa_r+0xaf4>
 800d698:	2c39      	cmp	r4, #57	; 0x39
 800d69a:	d0ee      	beq.n	800d67a <_dtoa_r+0xace>
 800d69c:	3401      	adds	r4, #1
 800d69e:	e7ce      	b.n	800d63e <_dtoa_r+0xa92>
 800d6a0:	9b07      	ldr	r3, [sp, #28]
 800d6a2:	9a07      	ldr	r2, [sp, #28]
 800d6a4:	701c      	strb	r4, [r3, #0]
 800d6a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d03e      	beq.n	800d72a <_dtoa_r+0xb7e>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	220a      	movs	r2, #10
 800d6b0:	9905      	ldr	r1, [sp, #20]
 800d6b2:	9804      	ldr	r0, [sp, #16]
 800d6b4:	f7fb feec 	bl	8009490 <__multadd>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	9005      	str	r0, [sp, #20]
 800d6bc:	220a      	movs	r2, #10
 800d6be:	0029      	movs	r1, r5
 800d6c0:	9804      	ldr	r0, [sp, #16]
 800d6c2:	42bd      	cmp	r5, r7
 800d6c4:	d106      	bne.n	800d6d4 <_dtoa_r+0xb28>
 800d6c6:	f7fb fee3 	bl	8009490 <__multadd>
 800d6ca:	0005      	movs	r5, r0
 800d6cc:	0007      	movs	r7, r0
 800d6ce:	9b08      	ldr	r3, [sp, #32]
 800d6d0:	9307      	str	r3, [sp, #28]
 800d6d2:	e784      	b.n	800d5de <_dtoa_r+0xa32>
 800d6d4:	f7fb fedc 	bl	8009490 <__multadd>
 800d6d8:	0039      	movs	r1, r7
 800d6da:	0005      	movs	r5, r0
 800d6dc:	2300      	movs	r3, #0
 800d6de:	220a      	movs	r2, #10
 800d6e0:	9804      	ldr	r0, [sp, #16]
 800d6e2:	f7fb fed5 	bl	8009490 <__multadd>
 800d6e6:	0007      	movs	r7, r0
 800d6e8:	e7f1      	b.n	800d6ce <_dtoa_r+0xb22>
 800d6ea:	9b07      	ldr	r3, [sp, #28]
 800d6ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6ee:	2500      	movs	r5, #0
 800d6f0:	0031      	movs	r1, r6
 800d6f2:	9805      	ldr	r0, [sp, #20]
 800d6f4:	f7ff f9ca 	bl	800ca8c <quorem>
 800d6f8:	9b06      	ldr	r3, [sp, #24]
 800d6fa:	3030      	adds	r0, #48	; 0x30
 800d6fc:	5558      	strb	r0, [r3, r5]
 800d6fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d700:	3501      	adds	r5, #1
 800d702:	0004      	movs	r4, r0
 800d704:	42ab      	cmp	r3, r5
 800d706:	dd07      	ble.n	800d718 <_dtoa_r+0xb6c>
 800d708:	2300      	movs	r3, #0
 800d70a:	220a      	movs	r2, #10
 800d70c:	9905      	ldr	r1, [sp, #20]
 800d70e:	9804      	ldr	r0, [sp, #16]
 800d710:	f7fb febe 	bl	8009490 <__multadd>
 800d714:	9005      	str	r0, [sp, #20]
 800d716:	e7eb      	b.n	800d6f0 <_dtoa_r+0xb44>
 800d718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d71a:	2301      	movs	r3, #1
 800d71c:	2a00      	cmp	r2, #0
 800d71e:	dd00      	ble.n	800d722 <_dtoa_r+0xb76>
 800d720:	0013      	movs	r3, r2
 800d722:	2500      	movs	r5, #0
 800d724:	9a06      	ldr	r2, [sp, #24]
 800d726:	18d3      	adds	r3, r2, r3
 800d728:	9308      	str	r3, [sp, #32]
 800d72a:	9905      	ldr	r1, [sp, #20]
 800d72c:	2201      	movs	r2, #1
 800d72e:	9804      	ldr	r0, [sp, #16]
 800d730:	f7fc f890 	bl	8009854 <__lshift>
 800d734:	0031      	movs	r1, r6
 800d736:	9005      	str	r0, [sp, #20]
 800d738:	f7fc f8fa 	bl	8009930 <__mcmp>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	dc9f      	bgt.n	800d680 <_dtoa_r+0xad4>
 800d740:	d101      	bne.n	800d746 <_dtoa_r+0xb9a>
 800d742:	07e4      	lsls	r4, r4, #31
 800d744:	d49c      	bmi.n	800d680 <_dtoa_r+0xad4>
 800d746:	9b08      	ldr	r3, [sp, #32]
 800d748:	9308      	str	r3, [sp, #32]
 800d74a:	3b01      	subs	r3, #1
 800d74c:	781a      	ldrb	r2, [r3, #0]
 800d74e:	2a30      	cmp	r2, #48	; 0x30
 800d750:	d0fa      	beq.n	800d748 <_dtoa_r+0xb9c>
 800d752:	e6e6      	b.n	800d522 <_dtoa_r+0x976>
 800d754:	9a06      	ldr	r2, [sp, #24]
 800d756:	429a      	cmp	r2, r3
 800d758:	d193      	bne.n	800d682 <_dtoa_r+0xad6>
 800d75a:	9b03      	ldr	r3, [sp, #12]
 800d75c:	3301      	adds	r3, #1
 800d75e:	9303      	str	r3, [sp, #12]
 800d760:	2331      	movs	r3, #49	; 0x31
 800d762:	7013      	strb	r3, [r2, #0]
 800d764:	e6dd      	b.n	800d522 <_dtoa_r+0x976>
 800d766:	4b09      	ldr	r3, [pc, #36]	; (800d78c <_dtoa_r+0xbe0>)
 800d768:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d76a:	9306      	str	r3, [sp, #24]
 800d76c:	4b08      	ldr	r3, [pc, #32]	; (800d790 <_dtoa_r+0xbe4>)
 800d76e:	2a00      	cmp	r2, #0
 800d770:	d001      	beq.n	800d776 <_dtoa_r+0xbca>
 800d772:	f7ff fa4c 	bl	800cc0e <_dtoa_r+0x62>
 800d776:	f7ff fa4c 	bl	800cc12 <_dtoa_r+0x66>
 800d77a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	dcb6      	bgt.n	800d6ee <_dtoa_r+0xb42>
 800d780:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d782:	2b02      	cmp	r3, #2
 800d784:	dd00      	ble.n	800d788 <_dtoa_r+0xbdc>
 800d786:	e6b6      	b.n	800d4f6 <_dtoa_r+0x94a>
 800d788:	e7b1      	b.n	800d6ee <_dtoa_r+0xb42>
 800d78a:	46c0      	nop			; (mov r8, r8)
 800d78c:	0800fa64 	.word	0x0800fa64
 800d790:	0800fa6c 	.word	0x0800fa6c

0800d794 <realloc>:
 800d794:	b510      	push	{r4, lr}
 800d796:	4b03      	ldr	r3, [pc, #12]	; (800d7a4 <realloc+0x10>)
 800d798:	000a      	movs	r2, r1
 800d79a:	0001      	movs	r1, r0
 800d79c:	6818      	ldr	r0, [r3, #0]
 800d79e:	f000 f803 	bl	800d7a8 <_realloc_r>
 800d7a2:	bd10      	pop	{r4, pc}
 800d7a4:	200006b8 	.word	0x200006b8

0800d7a8 <_realloc_r>:
 800d7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7aa:	b087      	sub	sp, #28
 800d7ac:	1e0c      	subs	r4, r1, #0
 800d7ae:	9001      	str	r0, [sp, #4]
 800d7b0:	9205      	str	r2, [sp, #20]
 800d7b2:	d106      	bne.n	800d7c2 <_realloc_r+0x1a>
 800d7b4:	0011      	movs	r1, r2
 800d7b6:	f7f9 fe91 	bl	80074dc <_malloc_r>
 800d7ba:	0007      	movs	r7, r0
 800d7bc:	0038      	movs	r0, r7
 800d7be:	b007      	add	sp, #28
 800d7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7c2:	9801      	ldr	r0, [sp, #4]
 800d7c4:	f7fa f89e 	bl	8007904 <__malloc_lock>
 800d7c8:	0023      	movs	r3, r4
 800d7ca:	3b08      	subs	r3, #8
 800d7cc:	685f      	ldr	r7, [r3, #4]
 800d7ce:	9304      	str	r3, [sp, #16]
 800d7d0:	9b05      	ldr	r3, [sp, #20]
 800d7d2:	330b      	adds	r3, #11
 800d7d4:	2b16      	cmp	r3, #22
 800d7d6:	d908      	bls.n	800d7ea <_realloc_r+0x42>
 800d7d8:	2207      	movs	r2, #7
 800d7da:	4393      	bics	r3, r2
 800d7dc:	9300      	str	r3, [sp, #0]
 800d7de:	d506      	bpl.n	800d7ee <_realloc_r+0x46>
 800d7e0:	230c      	movs	r3, #12
 800d7e2:	9a01      	ldr	r2, [sp, #4]
 800d7e4:	2700      	movs	r7, #0
 800d7e6:	6013      	str	r3, [r2, #0]
 800d7e8:	e7e8      	b.n	800d7bc <_realloc_r+0x14>
 800d7ea:	2310      	movs	r3, #16
 800d7ec:	9300      	str	r3, [sp, #0]
 800d7ee:	9b00      	ldr	r3, [sp, #0]
 800d7f0:	9a05      	ldr	r2, [sp, #20]
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d3f4      	bcc.n	800d7e0 <_realloc_r+0x38>
 800d7f6:	9b04      	ldr	r3, [sp, #16]
 800d7f8:	003a      	movs	r2, r7
 800d7fa:	9302      	str	r3, [sp, #8]
 800d7fc:	2303      	movs	r3, #3
 800d7fe:	439a      	bics	r2, r3
 800d800:	9b00      	ldr	r3, [sp, #0]
 800d802:	9203      	str	r2, [sp, #12]
 800d804:	4293      	cmp	r3, r2
 800d806:	dc00      	bgt.n	800d80a <_realloc_r+0x62>
 800d808:	e169      	b.n	800dade <_realloc_r+0x336>
 800d80a:	9b04      	ldr	r3, [sp, #16]
 800d80c:	48b8      	ldr	r0, [pc, #736]	; (800daf0 <_realloc_r+0x348>)
 800d80e:	189b      	adds	r3, r3, r2
 800d810:	6882      	ldr	r2, [r0, #8]
 800d812:	4694      	mov	ip, r2
 800d814:	685a      	ldr	r2, [r3, #4]
 800d816:	459c      	cmp	ip, r3
 800d818:	d006      	beq.n	800d828 <_realloc_r+0x80>
 800d81a:	2501      	movs	r5, #1
 800d81c:	0011      	movs	r1, r2
 800d81e:	43a9      	bics	r1, r5
 800d820:	1859      	adds	r1, r3, r1
 800d822:	6849      	ldr	r1, [r1, #4]
 800d824:	4229      	tst	r1, r5
 800d826:	d144      	bne.n	800d8b2 <_realloc_r+0x10a>
 800d828:	2103      	movs	r1, #3
 800d82a:	438a      	bics	r2, r1
 800d82c:	9903      	ldr	r1, [sp, #12]
 800d82e:	188e      	adds	r6, r1, r2
 800d830:	9900      	ldr	r1, [sp, #0]
 800d832:	459c      	cmp	ip, r3
 800d834:	d117      	bne.n	800d866 <_realloc_r+0xbe>
 800d836:	3110      	adds	r1, #16
 800d838:	42b1      	cmp	r1, r6
 800d83a:	dc3c      	bgt.n	800d8b6 <_realloc_r+0x10e>
 800d83c:	9a00      	ldr	r2, [sp, #0]
 800d83e:	2101      	movs	r1, #1
 800d840:	4694      	mov	ip, r2
 800d842:	1ab6      	subs	r6, r6, r2
 800d844:	0022      	movs	r2, r4
 800d846:	9b04      	ldr	r3, [sp, #16]
 800d848:	430e      	orrs	r6, r1
 800d84a:	4463      	add	r3, ip
 800d84c:	6083      	str	r3, [r0, #8]
 800d84e:	3a08      	subs	r2, #8
 800d850:	605e      	str	r6, [r3, #4]
 800d852:	6853      	ldr	r3, [r2, #4]
 800d854:	9801      	ldr	r0, [sp, #4]
 800d856:	400b      	ands	r3, r1
 800d858:	4661      	mov	r1, ip
 800d85a:	430b      	orrs	r3, r1
 800d85c:	6053      	str	r3, [r2, #4]
 800d85e:	f7fa f859 	bl	8007914 <__malloc_unlock>
 800d862:	0027      	movs	r7, r4
 800d864:	e7aa      	b.n	800d7bc <_realloc_r+0x14>
 800d866:	42b1      	cmp	r1, r6
 800d868:	dc25      	bgt.n	800d8b6 <_realloc_r+0x10e>
 800d86a:	68da      	ldr	r2, [r3, #12]
 800d86c:	689b      	ldr	r3, [r3, #8]
 800d86e:	60da      	str	r2, [r3, #12]
 800d870:	6093      	str	r3, [r2, #8]
 800d872:	9b00      	ldr	r3, [sp, #0]
 800d874:	9a02      	ldr	r2, [sp, #8]
 800d876:	1af4      	subs	r4, r6, r3
 800d878:	9b02      	ldr	r3, [sp, #8]
 800d87a:	1992      	adds	r2, r2, r6
 800d87c:	6858      	ldr	r0, [r3, #4]
 800d87e:	2301      	movs	r3, #1
 800d880:	4018      	ands	r0, r3
 800d882:	2c0f      	cmp	r4, #15
 800d884:	d800      	bhi.n	800d888 <_realloc_r+0xe0>
 800d886:	e12c      	b.n	800dae2 <_realloc_r+0x33a>
 800d888:	9d00      	ldr	r5, [sp, #0]
 800d88a:	9902      	ldr	r1, [sp, #8]
 800d88c:	4328      	orrs	r0, r5
 800d88e:	1949      	adds	r1, r1, r5
 800d890:	9d02      	ldr	r5, [sp, #8]
 800d892:	431c      	orrs	r4, r3
 800d894:	6068      	str	r0, [r5, #4]
 800d896:	604c      	str	r4, [r1, #4]
 800d898:	6850      	ldr	r0, [r2, #4]
 800d89a:	3108      	adds	r1, #8
 800d89c:	4303      	orrs	r3, r0
 800d89e:	6053      	str	r3, [r2, #4]
 800d8a0:	9801      	ldr	r0, [sp, #4]
 800d8a2:	f7fb f9a3 	bl	8008bec <_free_r>
 800d8a6:	9801      	ldr	r0, [sp, #4]
 800d8a8:	f7fa f834 	bl	8007914 <__malloc_unlock>
 800d8ac:	9f02      	ldr	r7, [sp, #8]
 800d8ae:	3708      	adds	r7, #8
 800d8b0:	e784      	b.n	800d7bc <_realloc_r+0x14>
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	0013      	movs	r3, r2
 800d8b6:	07ff      	lsls	r7, r7, #31
 800d8b8:	d500      	bpl.n	800d8bc <_realloc_r+0x114>
 800d8ba:	e0c6      	b.n	800da4a <_realloc_r+0x2a2>
 800d8bc:	0021      	movs	r1, r4
 800d8be:	2003      	movs	r0, #3
 800d8c0:	3908      	subs	r1, #8
 800d8c2:	680d      	ldr	r5, [r1, #0]
 800d8c4:	9904      	ldr	r1, [sp, #16]
 800d8c6:	1b4d      	subs	r5, r1, r5
 800d8c8:	6869      	ldr	r1, [r5, #4]
 800d8ca:	4381      	bics	r1, r0
 800d8cc:	9803      	ldr	r0, [sp, #12]
 800d8ce:	180f      	adds	r7, r1, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d100      	bne.n	800d8d6 <_realloc_r+0x12e>
 800d8d4:	e084      	b.n	800d9e0 <_realloc_r+0x238>
 800d8d6:	19d6      	adds	r6, r2, r7
 800d8d8:	459c      	cmp	ip, r3
 800d8da:	d148      	bne.n	800d96e <_realloc_r+0x1c6>
 800d8dc:	9b00      	ldr	r3, [sp, #0]
 800d8de:	3310      	adds	r3, #16
 800d8e0:	42b3      	cmp	r3, r6
 800d8e2:	dc7d      	bgt.n	800d9e0 <_realloc_r+0x238>
 800d8e4:	68aa      	ldr	r2, [r5, #8]
 800d8e6:	68eb      	ldr	r3, [r5, #12]
 800d8e8:	002f      	movs	r7, r5
 800d8ea:	60d3      	str	r3, [r2, #12]
 800d8ec:	609a      	str	r2, [r3, #8]
 800d8ee:	0002      	movs	r2, r0
 800d8f0:	3a04      	subs	r2, #4
 800d8f2:	3708      	adds	r7, #8
 800d8f4:	2a24      	cmp	r2, #36	; 0x24
 800d8f6:	d835      	bhi.n	800d964 <_realloc_r+0x1bc>
 800d8f8:	003b      	movs	r3, r7
 800d8fa:	2a13      	cmp	r2, #19
 800d8fc:	d908      	bls.n	800d910 <_realloc_r+0x168>
 800d8fe:	6823      	ldr	r3, [r4, #0]
 800d900:	60ab      	str	r3, [r5, #8]
 800d902:	6863      	ldr	r3, [r4, #4]
 800d904:	60eb      	str	r3, [r5, #12]
 800d906:	2a1b      	cmp	r2, #27
 800d908:	d81a      	bhi.n	800d940 <_realloc_r+0x198>
 800d90a:	002b      	movs	r3, r5
 800d90c:	3408      	adds	r4, #8
 800d90e:	3310      	adds	r3, #16
 800d910:	6822      	ldr	r2, [r4, #0]
 800d912:	601a      	str	r2, [r3, #0]
 800d914:	6862      	ldr	r2, [r4, #4]
 800d916:	605a      	str	r2, [r3, #4]
 800d918:	68a2      	ldr	r2, [r4, #8]
 800d91a:	609a      	str	r2, [r3, #8]
 800d91c:	9b00      	ldr	r3, [sp, #0]
 800d91e:	4a74      	ldr	r2, [pc, #464]	; (800daf0 <_realloc_r+0x348>)
 800d920:	18eb      	adds	r3, r5, r3
 800d922:	6093      	str	r3, [r2, #8]
 800d924:	9a00      	ldr	r2, [sp, #0]
 800d926:	1ab6      	subs	r6, r6, r2
 800d928:	2201      	movs	r2, #1
 800d92a:	4316      	orrs	r6, r2
 800d92c:	605e      	str	r6, [r3, #4]
 800d92e:	686b      	ldr	r3, [r5, #4]
 800d930:	4013      	ands	r3, r2
 800d932:	9a00      	ldr	r2, [sp, #0]
 800d934:	4313      	orrs	r3, r2
 800d936:	606b      	str	r3, [r5, #4]
 800d938:	9801      	ldr	r0, [sp, #4]
 800d93a:	f7f9 ffeb 	bl	8007914 <__malloc_unlock>
 800d93e:	e73d      	b.n	800d7bc <_realloc_r+0x14>
 800d940:	68a3      	ldr	r3, [r4, #8]
 800d942:	612b      	str	r3, [r5, #16]
 800d944:	68e3      	ldr	r3, [r4, #12]
 800d946:	616b      	str	r3, [r5, #20]
 800d948:	2a24      	cmp	r2, #36	; 0x24
 800d94a:	d003      	beq.n	800d954 <_realloc_r+0x1ac>
 800d94c:	002b      	movs	r3, r5
 800d94e:	3410      	adds	r4, #16
 800d950:	3318      	adds	r3, #24
 800d952:	e7dd      	b.n	800d910 <_realloc_r+0x168>
 800d954:	6923      	ldr	r3, [r4, #16]
 800d956:	61ab      	str	r3, [r5, #24]
 800d958:	002b      	movs	r3, r5
 800d95a:	6962      	ldr	r2, [r4, #20]
 800d95c:	3320      	adds	r3, #32
 800d95e:	61ea      	str	r2, [r5, #28]
 800d960:	3418      	adds	r4, #24
 800d962:	e7d5      	b.n	800d910 <_realloc_r+0x168>
 800d964:	0021      	movs	r1, r4
 800d966:	0038      	movs	r0, r7
 800d968:	f001 fbb5 	bl	800f0d6 <memmove>
 800d96c:	e7d6      	b.n	800d91c <_realloc_r+0x174>
 800d96e:	9a00      	ldr	r2, [sp, #0]
 800d970:	42b2      	cmp	r2, r6
 800d972:	dc35      	bgt.n	800d9e0 <_realloc_r+0x238>
 800d974:	0028      	movs	r0, r5
 800d976:	68da      	ldr	r2, [r3, #12]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	3008      	adds	r0, #8
 800d97c:	60da      	str	r2, [r3, #12]
 800d97e:	6093      	str	r3, [r2, #8]
 800d980:	68aa      	ldr	r2, [r5, #8]
 800d982:	68eb      	ldr	r3, [r5, #12]
 800d984:	60d3      	str	r3, [r2, #12]
 800d986:	609a      	str	r2, [r3, #8]
 800d988:	9a03      	ldr	r2, [sp, #12]
 800d98a:	3a04      	subs	r2, #4
 800d98c:	2a24      	cmp	r2, #36	; 0x24
 800d98e:	d823      	bhi.n	800d9d8 <_realloc_r+0x230>
 800d990:	2a13      	cmp	r2, #19
 800d992:	d907      	bls.n	800d9a4 <_realloc_r+0x1fc>
 800d994:	6823      	ldr	r3, [r4, #0]
 800d996:	60ab      	str	r3, [r5, #8]
 800d998:	6863      	ldr	r3, [r4, #4]
 800d99a:	60eb      	str	r3, [r5, #12]
 800d99c:	2a1b      	cmp	r2, #27
 800d99e:	d809      	bhi.n	800d9b4 <_realloc_r+0x20c>
 800d9a0:	3408      	adds	r4, #8
 800d9a2:	3008      	adds	r0, #8
 800d9a4:	6823      	ldr	r3, [r4, #0]
 800d9a6:	6003      	str	r3, [r0, #0]
 800d9a8:	6863      	ldr	r3, [r4, #4]
 800d9aa:	6043      	str	r3, [r0, #4]
 800d9ac:	68a3      	ldr	r3, [r4, #8]
 800d9ae:	6083      	str	r3, [r0, #8]
 800d9b0:	9502      	str	r5, [sp, #8]
 800d9b2:	e75e      	b.n	800d872 <_realloc_r+0xca>
 800d9b4:	68a3      	ldr	r3, [r4, #8]
 800d9b6:	612b      	str	r3, [r5, #16]
 800d9b8:	68e3      	ldr	r3, [r4, #12]
 800d9ba:	616b      	str	r3, [r5, #20]
 800d9bc:	2a24      	cmp	r2, #36	; 0x24
 800d9be:	d003      	beq.n	800d9c8 <_realloc_r+0x220>
 800d9c0:	0028      	movs	r0, r5
 800d9c2:	3410      	adds	r4, #16
 800d9c4:	3018      	adds	r0, #24
 800d9c6:	e7ed      	b.n	800d9a4 <_realloc_r+0x1fc>
 800d9c8:	0028      	movs	r0, r5
 800d9ca:	6923      	ldr	r3, [r4, #16]
 800d9cc:	3020      	adds	r0, #32
 800d9ce:	61ab      	str	r3, [r5, #24]
 800d9d0:	6963      	ldr	r3, [r4, #20]
 800d9d2:	3418      	adds	r4, #24
 800d9d4:	61eb      	str	r3, [r5, #28]
 800d9d6:	e7e5      	b.n	800d9a4 <_realloc_r+0x1fc>
 800d9d8:	0021      	movs	r1, r4
 800d9da:	f001 fb7c 	bl	800f0d6 <memmove>
 800d9de:	e7e7      	b.n	800d9b0 <_realloc_r+0x208>
 800d9e0:	9b00      	ldr	r3, [sp, #0]
 800d9e2:	42bb      	cmp	r3, r7
 800d9e4:	dc31      	bgt.n	800da4a <_realloc_r+0x2a2>
 800d9e6:	0028      	movs	r0, r5
 800d9e8:	68aa      	ldr	r2, [r5, #8]
 800d9ea:	68eb      	ldr	r3, [r5, #12]
 800d9ec:	3008      	adds	r0, #8
 800d9ee:	60d3      	str	r3, [r2, #12]
 800d9f0:	609a      	str	r2, [r3, #8]
 800d9f2:	9a03      	ldr	r2, [sp, #12]
 800d9f4:	3a04      	subs	r2, #4
 800d9f6:	2a24      	cmp	r2, #36	; 0x24
 800d9f8:	d823      	bhi.n	800da42 <_realloc_r+0x29a>
 800d9fa:	2a13      	cmp	r2, #19
 800d9fc:	d907      	bls.n	800da0e <_realloc_r+0x266>
 800d9fe:	6823      	ldr	r3, [r4, #0]
 800da00:	60ab      	str	r3, [r5, #8]
 800da02:	6863      	ldr	r3, [r4, #4]
 800da04:	60eb      	str	r3, [r5, #12]
 800da06:	2a1b      	cmp	r2, #27
 800da08:	d809      	bhi.n	800da1e <_realloc_r+0x276>
 800da0a:	3408      	adds	r4, #8
 800da0c:	3008      	adds	r0, #8
 800da0e:	6823      	ldr	r3, [r4, #0]
 800da10:	6003      	str	r3, [r0, #0]
 800da12:	6863      	ldr	r3, [r4, #4]
 800da14:	6043      	str	r3, [r0, #4]
 800da16:	68a3      	ldr	r3, [r4, #8]
 800da18:	6083      	str	r3, [r0, #8]
 800da1a:	003e      	movs	r6, r7
 800da1c:	e7c8      	b.n	800d9b0 <_realloc_r+0x208>
 800da1e:	68a3      	ldr	r3, [r4, #8]
 800da20:	612b      	str	r3, [r5, #16]
 800da22:	68e3      	ldr	r3, [r4, #12]
 800da24:	616b      	str	r3, [r5, #20]
 800da26:	2a24      	cmp	r2, #36	; 0x24
 800da28:	d003      	beq.n	800da32 <_realloc_r+0x28a>
 800da2a:	0028      	movs	r0, r5
 800da2c:	3410      	adds	r4, #16
 800da2e:	3018      	adds	r0, #24
 800da30:	e7ed      	b.n	800da0e <_realloc_r+0x266>
 800da32:	0028      	movs	r0, r5
 800da34:	6923      	ldr	r3, [r4, #16]
 800da36:	3020      	adds	r0, #32
 800da38:	61ab      	str	r3, [r5, #24]
 800da3a:	6963      	ldr	r3, [r4, #20]
 800da3c:	3418      	adds	r4, #24
 800da3e:	61eb      	str	r3, [r5, #28]
 800da40:	e7e5      	b.n	800da0e <_realloc_r+0x266>
 800da42:	0021      	movs	r1, r4
 800da44:	f001 fb47 	bl	800f0d6 <memmove>
 800da48:	e7e7      	b.n	800da1a <_realloc_r+0x272>
 800da4a:	9905      	ldr	r1, [sp, #20]
 800da4c:	9801      	ldr	r0, [sp, #4]
 800da4e:	f7f9 fd45 	bl	80074dc <_malloc_r>
 800da52:	1e07      	subs	r7, r0, #0
 800da54:	d100      	bne.n	800da58 <_realloc_r+0x2b0>
 800da56:	e76f      	b.n	800d938 <_realloc_r+0x190>
 800da58:	0023      	movs	r3, r4
 800da5a:	2201      	movs	r2, #1
 800da5c:	3b08      	subs	r3, #8
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	4393      	bics	r3, r2
 800da62:	9a04      	ldr	r2, [sp, #16]
 800da64:	18d3      	adds	r3, r2, r3
 800da66:	0002      	movs	r2, r0
 800da68:	3a08      	subs	r2, #8
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d105      	bne.n	800da7a <_realloc_r+0x2d2>
 800da6e:	685e      	ldr	r6, [r3, #4]
 800da70:	2303      	movs	r3, #3
 800da72:	439e      	bics	r6, r3
 800da74:	9b03      	ldr	r3, [sp, #12]
 800da76:	18f6      	adds	r6, r6, r3
 800da78:	e6fb      	b.n	800d872 <_realloc_r+0xca>
 800da7a:	9a03      	ldr	r2, [sp, #12]
 800da7c:	3a04      	subs	r2, #4
 800da7e:	2a24      	cmp	r2, #36	; 0x24
 800da80:	d829      	bhi.n	800dad6 <_realloc_r+0x32e>
 800da82:	0003      	movs	r3, r0
 800da84:	0021      	movs	r1, r4
 800da86:	2a13      	cmp	r2, #19
 800da88:	d908      	bls.n	800da9c <_realloc_r+0x2f4>
 800da8a:	6823      	ldr	r3, [r4, #0]
 800da8c:	6003      	str	r3, [r0, #0]
 800da8e:	6863      	ldr	r3, [r4, #4]
 800da90:	6043      	str	r3, [r0, #4]
 800da92:	2a1b      	cmp	r2, #27
 800da94:	d80d      	bhi.n	800dab2 <_realloc_r+0x30a>
 800da96:	0003      	movs	r3, r0
 800da98:	3108      	adds	r1, #8
 800da9a:	3308      	adds	r3, #8
 800da9c:	680a      	ldr	r2, [r1, #0]
 800da9e:	601a      	str	r2, [r3, #0]
 800daa0:	684a      	ldr	r2, [r1, #4]
 800daa2:	605a      	str	r2, [r3, #4]
 800daa4:	688a      	ldr	r2, [r1, #8]
 800daa6:	609a      	str	r2, [r3, #8]
 800daa8:	0021      	movs	r1, r4
 800daaa:	9801      	ldr	r0, [sp, #4]
 800daac:	f7fb f89e 	bl	8008bec <_free_r>
 800dab0:	e742      	b.n	800d938 <_realloc_r+0x190>
 800dab2:	68a3      	ldr	r3, [r4, #8]
 800dab4:	6083      	str	r3, [r0, #8]
 800dab6:	68e3      	ldr	r3, [r4, #12]
 800dab8:	60c3      	str	r3, [r0, #12]
 800daba:	2a24      	cmp	r2, #36	; 0x24
 800dabc:	d003      	beq.n	800dac6 <_realloc_r+0x31e>
 800dabe:	0003      	movs	r3, r0
 800dac0:	3110      	adds	r1, #16
 800dac2:	3310      	adds	r3, #16
 800dac4:	e7ea      	b.n	800da9c <_realloc_r+0x2f4>
 800dac6:	6923      	ldr	r3, [r4, #16]
 800dac8:	3118      	adds	r1, #24
 800daca:	6103      	str	r3, [r0, #16]
 800dacc:	0003      	movs	r3, r0
 800dace:	6962      	ldr	r2, [r4, #20]
 800dad0:	3318      	adds	r3, #24
 800dad2:	6142      	str	r2, [r0, #20]
 800dad4:	e7e2      	b.n	800da9c <_realloc_r+0x2f4>
 800dad6:	0021      	movs	r1, r4
 800dad8:	f001 fafd 	bl	800f0d6 <memmove>
 800dadc:	e7e4      	b.n	800daa8 <_realloc_r+0x300>
 800dade:	9e03      	ldr	r6, [sp, #12]
 800dae0:	e6c7      	b.n	800d872 <_realloc_r+0xca>
 800dae2:	9902      	ldr	r1, [sp, #8]
 800dae4:	4306      	orrs	r6, r0
 800dae6:	604e      	str	r6, [r1, #4]
 800dae8:	6851      	ldr	r1, [r2, #4]
 800daea:	430b      	orrs	r3, r1
 800daec:	6053      	str	r3, [r2, #4]
 800daee:	e6da      	b.n	800d8a6 <_realloc_r+0xfe>
 800daf0:	20000010 	.word	0x20000010

0800daf4 <_strtoul_l.constprop.0>:
 800daf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daf6:	b087      	sub	sp, #28
 800daf8:	9202      	str	r2, [sp, #8]
 800dafa:	4a3e      	ldr	r2, [pc, #248]	; (800dbf4 <_strtoul_l.constprop.0+0x100>)
 800dafc:	001e      	movs	r6, r3
 800dafe:	9101      	str	r1, [sp, #4]
 800db00:	000b      	movs	r3, r1
 800db02:	4694      	mov	ip, r2
 800db04:	2108      	movs	r1, #8
 800db06:	9005      	str	r0, [sp, #20]
 800db08:	001a      	movs	r2, r3
 800db0a:	4660      	mov	r0, ip
 800db0c:	7814      	ldrb	r4, [r2, #0]
 800db0e:	3301      	adds	r3, #1
 800db10:	5d00      	ldrb	r0, [r0, r4]
 800db12:	001d      	movs	r5, r3
 800db14:	0007      	movs	r7, r0
 800db16:	400f      	ands	r7, r1
 800db18:	4208      	tst	r0, r1
 800db1a:	d1f5      	bne.n	800db08 <_strtoul_l.constprop.0+0x14>
 800db1c:	2c2d      	cmp	r4, #45	; 0x2d
 800db1e:	d13d      	bne.n	800db9c <_strtoul_l.constprop.0+0xa8>
 800db20:	2701      	movs	r7, #1
 800db22:	781c      	ldrb	r4, [r3, #0]
 800db24:	1c95      	adds	r5, r2, #2
 800db26:	2e00      	cmp	r6, #0
 800db28:	d05f      	beq.n	800dbea <_strtoul_l.constprop.0+0xf6>
 800db2a:	2e10      	cmp	r6, #16
 800db2c:	d109      	bne.n	800db42 <_strtoul_l.constprop.0+0x4e>
 800db2e:	2c30      	cmp	r4, #48	; 0x30
 800db30:	d107      	bne.n	800db42 <_strtoul_l.constprop.0+0x4e>
 800db32:	2220      	movs	r2, #32
 800db34:	782b      	ldrb	r3, [r5, #0]
 800db36:	4393      	bics	r3, r2
 800db38:	2b58      	cmp	r3, #88	; 0x58
 800db3a:	d151      	bne.n	800dbe0 <_strtoul_l.constprop.0+0xec>
 800db3c:	2610      	movs	r6, #16
 800db3e:	786c      	ldrb	r4, [r5, #1]
 800db40:	3502      	adds	r5, #2
 800db42:	2001      	movs	r0, #1
 800db44:	0031      	movs	r1, r6
 800db46:	4240      	negs	r0, r0
 800db48:	f7f2 faf8 	bl	800013c <__udivsi3>
 800db4c:	9003      	str	r0, [sp, #12]
 800db4e:	2001      	movs	r0, #1
 800db50:	0031      	movs	r1, r6
 800db52:	4240      	negs	r0, r0
 800db54:	f7f2 fb78 	bl	8000248 <__aeabi_uidivmod>
 800db58:	2300      	movs	r3, #0
 800db5a:	2201      	movs	r2, #1
 800db5c:	9104      	str	r1, [sp, #16]
 800db5e:	2101      	movs	r1, #1
 800db60:	0018      	movs	r0, r3
 800db62:	4694      	mov	ip, r2
 800db64:	4249      	negs	r1, r1
 800db66:	0022      	movs	r2, r4
 800db68:	3a30      	subs	r2, #48	; 0x30
 800db6a:	2a09      	cmp	r2, #9
 800db6c:	d903      	bls.n	800db76 <_strtoul_l.constprop.0+0x82>
 800db6e:	3a11      	subs	r2, #17
 800db70:	2a19      	cmp	r2, #25
 800db72:	d818      	bhi.n	800dba6 <_strtoul_l.constprop.0+0xb2>
 800db74:	320a      	adds	r2, #10
 800db76:	4296      	cmp	r6, r2
 800db78:	dd19      	ble.n	800dbae <_strtoul_l.constprop.0+0xba>
 800db7a:	1c5c      	adds	r4, r3, #1
 800db7c:	d00b      	beq.n	800db96 <_strtoul_l.constprop.0+0xa2>
 800db7e:	9c03      	ldr	r4, [sp, #12]
 800db80:	000b      	movs	r3, r1
 800db82:	4284      	cmp	r4, r0
 800db84:	d307      	bcc.n	800db96 <_strtoul_l.constprop.0+0xa2>
 800db86:	d103      	bne.n	800db90 <_strtoul_l.constprop.0+0x9c>
 800db88:	9c04      	ldr	r4, [sp, #16]
 800db8a:	000b      	movs	r3, r1
 800db8c:	4294      	cmp	r4, r2
 800db8e:	db02      	blt.n	800db96 <_strtoul_l.constprop.0+0xa2>
 800db90:	4663      	mov	r3, ip
 800db92:	4370      	muls	r0, r6
 800db94:	1810      	adds	r0, r2, r0
 800db96:	782c      	ldrb	r4, [r5, #0]
 800db98:	3501      	adds	r5, #1
 800db9a:	e7e4      	b.n	800db66 <_strtoul_l.constprop.0+0x72>
 800db9c:	2c2b      	cmp	r4, #43	; 0x2b
 800db9e:	d1c2      	bne.n	800db26 <_strtoul_l.constprop.0+0x32>
 800dba0:	781c      	ldrb	r4, [r3, #0]
 800dba2:	1c95      	adds	r5, r2, #2
 800dba4:	e7bf      	b.n	800db26 <_strtoul_l.constprop.0+0x32>
 800dba6:	0022      	movs	r2, r4
 800dba8:	3a61      	subs	r2, #97	; 0x61
 800dbaa:	2a19      	cmp	r2, #25
 800dbac:	d9e2      	bls.n	800db74 <_strtoul_l.constprop.0+0x80>
 800dbae:	1c5a      	adds	r2, r3, #1
 800dbb0:	d108      	bne.n	800dbc4 <_strtoul_l.constprop.0+0xd0>
 800dbb2:	2222      	movs	r2, #34	; 0x22
 800dbb4:	9905      	ldr	r1, [sp, #20]
 800dbb6:	0018      	movs	r0, r3
 800dbb8:	600a      	str	r2, [r1, #0]
 800dbba:	9a02      	ldr	r2, [sp, #8]
 800dbbc:	2a00      	cmp	r2, #0
 800dbbe:	d109      	bne.n	800dbd4 <_strtoul_l.constprop.0+0xe0>
 800dbc0:	b007      	add	sp, #28
 800dbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbc4:	2f00      	cmp	r7, #0
 800dbc6:	d000      	beq.n	800dbca <_strtoul_l.constprop.0+0xd6>
 800dbc8:	4240      	negs	r0, r0
 800dbca:	9a02      	ldr	r2, [sp, #8]
 800dbcc:	2a00      	cmp	r2, #0
 800dbce:	d0f7      	beq.n	800dbc0 <_strtoul_l.constprop.0+0xcc>
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d001      	beq.n	800dbd8 <_strtoul_l.constprop.0+0xe4>
 800dbd4:	1e6b      	subs	r3, r5, #1
 800dbd6:	9301      	str	r3, [sp, #4]
 800dbd8:	9b02      	ldr	r3, [sp, #8]
 800dbda:	9a01      	ldr	r2, [sp, #4]
 800dbdc:	601a      	str	r2, [r3, #0]
 800dbde:	e7ef      	b.n	800dbc0 <_strtoul_l.constprop.0+0xcc>
 800dbe0:	2430      	movs	r4, #48	; 0x30
 800dbe2:	2e00      	cmp	r6, #0
 800dbe4:	d1ad      	bne.n	800db42 <_strtoul_l.constprop.0+0x4e>
 800dbe6:	3608      	adds	r6, #8
 800dbe8:	e7ab      	b.n	800db42 <_strtoul_l.constprop.0+0x4e>
 800dbea:	2c30      	cmp	r4, #48	; 0x30
 800dbec:	d0a1      	beq.n	800db32 <_strtoul_l.constprop.0+0x3e>
 800dbee:	260a      	movs	r6, #10
 800dbf0:	e7a7      	b.n	800db42 <_strtoul_l.constprop.0+0x4e>
 800dbf2:	46c0      	nop			; (mov r8, r8)
 800dbf4:	0800f6d9 	.word	0x0800f6d9

0800dbf8 <_strtoul_r>:
 800dbf8:	b510      	push	{r4, lr}
 800dbfa:	f7ff ff7b 	bl	800daf4 <_strtoul_l.constprop.0>
 800dbfe:	bd10      	pop	{r4, pc}

0800dc00 <_strtoll_l.constprop.0>:
 800dc00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc02:	b08d      	sub	sp, #52	; 0x34
 800dc04:	9203      	str	r2, [sp, #12]
 800dc06:	4a53      	ldr	r2, [pc, #332]	; (800dd54 <_strtoll_l.constprop.0+0x154>)
 800dc08:	001e      	movs	r6, r3
 800dc0a:	9102      	str	r1, [sp, #8]
 800dc0c:	000b      	movs	r3, r1
 800dc0e:	4694      	mov	ip, r2
 800dc10:	2108      	movs	r1, #8
 800dc12:	900a      	str	r0, [sp, #40]	; 0x28
 800dc14:	001a      	movs	r2, r3
 800dc16:	4660      	mov	r0, ip
 800dc18:	7814      	ldrb	r4, [r2, #0]
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	5d00      	ldrb	r0, [r0, r4]
 800dc1e:	001d      	movs	r5, r3
 800dc20:	0007      	movs	r7, r0
 800dc22:	400f      	ands	r7, r1
 800dc24:	4208      	tst	r0, r1
 800dc26:	d1f5      	bne.n	800dc14 <_strtoll_l.constprop.0+0x14>
 800dc28:	2c2d      	cmp	r4, #45	; 0x2d
 800dc2a:	d153      	bne.n	800dcd4 <_strtoll_l.constprop.0+0xd4>
 800dc2c:	781c      	ldrb	r4, [r3, #0]
 800dc2e:	2301      	movs	r3, #1
 800dc30:	1c95      	adds	r5, r2, #2
 800dc32:	9301      	str	r3, [sp, #4]
 800dc34:	2e00      	cmp	r6, #0
 800dc36:	d100      	bne.n	800dc3a <_strtoll_l.constprop.0+0x3a>
 800dc38:	e086      	b.n	800dd48 <_strtoll_l.constprop.0+0x148>
 800dc3a:	2e10      	cmp	r6, #16
 800dc3c:	d10a      	bne.n	800dc54 <_strtoll_l.constprop.0+0x54>
 800dc3e:	2c30      	cmp	r4, #48	; 0x30
 800dc40:	d108      	bne.n	800dc54 <_strtoll_l.constprop.0+0x54>
 800dc42:	2220      	movs	r2, #32
 800dc44:	782b      	ldrb	r3, [r5, #0]
 800dc46:	4393      	bics	r3, r2
 800dc48:	2b58      	cmp	r3, #88	; 0x58
 800dc4a:	d000      	beq.n	800dc4e <_strtoll_l.constprop.0+0x4e>
 800dc4c:	e076      	b.n	800dd3c <_strtoll_l.constprop.0+0x13c>
 800dc4e:	2610      	movs	r6, #16
 800dc50:	786c      	ldrb	r4, [r5, #1]
 800dc52:	3502      	adds	r5, #2
 800dc54:	2001      	movs	r0, #1
 800dc56:	2300      	movs	r3, #0
 800dc58:	493f      	ldr	r1, [pc, #252]	; (800dd58 <_strtoll_l.constprop.0+0x158>)
 800dc5a:	9a01      	ldr	r2, [sp, #4]
 800dc5c:	4240      	negs	r0, r0
 800dc5e:	1812      	adds	r2, r2, r0
 800dc60:	414b      	adcs	r3, r1
 800dc62:	9204      	str	r2, [sp, #16]
 800dc64:	9305      	str	r3, [sp, #20]
 800dc66:	9804      	ldr	r0, [sp, #16]
 800dc68:	9905      	ldr	r1, [sp, #20]
 800dc6a:	17f3      	asrs	r3, r6, #31
 800dc6c:	0032      	movs	r2, r6
 800dc6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc70:	f7f2 fc18 	bl	80004a4 <__aeabi_uldivmod>
 800dc74:	2300      	movs	r3, #0
 800dc76:	000f      	movs	r7, r1
 800dc78:	9008      	str	r0, [sp, #32]
 800dc7a:	2100      	movs	r1, #0
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	9209      	str	r2, [sp, #36]	; 0x24
 800dc80:	0022      	movs	r2, r4
 800dc82:	3a30      	subs	r2, #48	; 0x30
 800dc84:	2a09      	cmp	r2, #9
 800dc86:	d82b      	bhi.n	800dce0 <_strtoll_l.constprop.0+0xe0>
 800dc88:	0014      	movs	r4, r2
 800dc8a:	42a6      	cmp	r6, r4
 800dc8c:	dd37      	ble.n	800dcfe <_strtoll_l.constprop.0+0xfe>
 800dc8e:	1c5a      	adds	r2, r3, #1
 800dc90:	d01d      	beq.n	800dcce <_strtoll_l.constprop.0+0xce>
 800dc92:	42b9      	cmp	r1, r7
 800dc94:	d830      	bhi.n	800dcf8 <_strtoll_l.constprop.0+0xf8>
 800dc96:	d102      	bne.n	800dc9e <_strtoll_l.constprop.0+0x9e>
 800dc98:	9b08      	ldr	r3, [sp, #32]
 800dc9a:	4298      	cmp	r0, r3
 800dc9c:	d82c      	bhi.n	800dcf8 <_strtoll_l.constprop.0+0xf8>
 800dc9e:	9b08      	ldr	r3, [sp, #32]
 800dca0:	4283      	cmp	r3, r0
 800dca2:	d106      	bne.n	800dcb2 <_strtoll_l.constprop.0+0xb2>
 800dca4:	428f      	cmp	r7, r1
 800dca6:	d104      	bne.n	800dcb2 <_strtoll_l.constprop.0+0xb2>
 800dca8:	2301      	movs	r3, #1
 800dcaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcac:	425b      	negs	r3, r3
 800dcae:	42a2      	cmp	r2, r4
 800dcb0:	db0d      	blt.n	800dcce <_strtoll_l.constprop.0+0xce>
 800dcb2:	000b      	movs	r3, r1
 800dcb4:	0002      	movs	r2, r0
 800dcb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcb8:	0030      	movs	r0, r6
 800dcba:	f7f2 fc13 	bl	80004e4 <__aeabi_lmul>
 800dcbe:	17e3      	asrs	r3, r4, #31
 800dcc0:	9406      	str	r4, [sp, #24]
 800dcc2:	9307      	str	r3, [sp, #28]
 800dcc4:	9b06      	ldr	r3, [sp, #24]
 800dcc6:	9c07      	ldr	r4, [sp, #28]
 800dcc8:	18c0      	adds	r0, r0, r3
 800dcca:	4161      	adcs	r1, r4
 800dccc:	2301      	movs	r3, #1
 800dcce:	782c      	ldrb	r4, [r5, #0]
 800dcd0:	3501      	adds	r5, #1
 800dcd2:	e7d5      	b.n	800dc80 <_strtoll_l.constprop.0+0x80>
 800dcd4:	9701      	str	r7, [sp, #4]
 800dcd6:	2c2b      	cmp	r4, #43	; 0x2b
 800dcd8:	d1ac      	bne.n	800dc34 <_strtoll_l.constprop.0+0x34>
 800dcda:	781c      	ldrb	r4, [r3, #0]
 800dcdc:	1c95      	adds	r5, r2, #2
 800dcde:	e7a9      	b.n	800dc34 <_strtoll_l.constprop.0+0x34>
 800dce0:	0022      	movs	r2, r4
 800dce2:	3a41      	subs	r2, #65	; 0x41
 800dce4:	2a19      	cmp	r2, #25
 800dce6:	d801      	bhi.n	800dcec <_strtoll_l.constprop.0+0xec>
 800dce8:	3c37      	subs	r4, #55	; 0x37
 800dcea:	e7ce      	b.n	800dc8a <_strtoll_l.constprop.0+0x8a>
 800dcec:	0022      	movs	r2, r4
 800dcee:	3a61      	subs	r2, #97	; 0x61
 800dcf0:	2a19      	cmp	r2, #25
 800dcf2:	d804      	bhi.n	800dcfe <_strtoll_l.constprop.0+0xfe>
 800dcf4:	3c57      	subs	r4, #87	; 0x57
 800dcf6:	e7c8      	b.n	800dc8a <_strtoll_l.constprop.0+0x8a>
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	425b      	negs	r3, r3
 800dcfc:	e7e7      	b.n	800dcce <_strtoll_l.constprop.0+0xce>
 800dcfe:	1c5a      	adds	r2, r3, #1
 800dd00:	d109      	bne.n	800dd16 <_strtoll_l.constprop.0+0x116>
 800dd02:	9804      	ldr	r0, [sp, #16]
 800dd04:	9905      	ldr	r1, [sp, #20]
 800dd06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd08:	3323      	adds	r3, #35	; 0x23
 800dd0a:	6013      	str	r3, [r2, #0]
 800dd0c:	9b03      	ldr	r3, [sp, #12]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d10e      	bne.n	800dd30 <_strtoll_l.constprop.0+0x130>
 800dd12:	b00d      	add	sp, #52	; 0x34
 800dd14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd16:	9a01      	ldr	r2, [sp, #4]
 800dd18:	2a00      	cmp	r2, #0
 800dd1a:	d004      	beq.n	800dd26 <_strtoll_l.constprop.0+0x126>
 800dd1c:	0006      	movs	r6, r0
 800dd1e:	000f      	movs	r7, r1
 800dd20:	2100      	movs	r1, #0
 800dd22:	4270      	negs	r0, r6
 800dd24:	41b9      	sbcs	r1, r7
 800dd26:	9a03      	ldr	r2, [sp, #12]
 800dd28:	2a00      	cmp	r2, #0
 800dd2a:	d0f2      	beq.n	800dd12 <_strtoll_l.constprop.0+0x112>
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d001      	beq.n	800dd34 <_strtoll_l.constprop.0+0x134>
 800dd30:	1e6b      	subs	r3, r5, #1
 800dd32:	9302      	str	r3, [sp, #8]
 800dd34:	9b03      	ldr	r3, [sp, #12]
 800dd36:	9a02      	ldr	r2, [sp, #8]
 800dd38:	601a      	str	r2, [r3, #0]
 800dd3a:	e7ea      	b.n	800dd12 <_strtoll_l.constprop.0+0x112>
 800dd3c:	2430      	movs	r4, #48	; 0x30
 800dd3e:	2e00      	cmp	r6, #0
 800dd40:	d000      	beq.n	800dd44 <_strtoll_l.constprop.0+0x144>
 800dd42:	e787      	b.n	800dc54 <_strtoll_l.constprop.0+0x54>
 800dd44:	3608      	adds	r6, #8
 800dd46:	e785      	b.n	800dc54 <_strtoll_l.constprop.0+0x54>
 800dd48:	2c30      	cmp	r4, #48	; 0x30
 800dd4a:	d100      	bne.n	800dd4e <_strtoll_l.constprop.0+0x14e>
 800dd4c:	e779      	b.n	800dc42 <_strtoll_l.constprop.0+0x42>
 800dd4e:	260a      	movs	r6, #10
 800dd50:	e780      	b.n	800dc54 <_strtoll_l.constprop.0+0x54>
 800dd52:	46c0      	nop			; (mov r8, r8)
 800dd54:	0800f6d9 	.word	0x0800f6d9
 800dd58:	7fffffff 	.word	0x7fffffff

0800dd5c <_strtoll_r>:
 800dd5c:	b510      	push	{r4, lr}
 800dd5e:	f7ff ff4f 	bl	800dc00 <_strtoll_l.constprop.0>
 800dd62:	bd10      	pop	{r4, pc}

0800dd64 <_strtoull_l.constprop.0>:
 800dd64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd66:	b08b      	sub	sp, #44	; 0x2c
 800dd68:	9202      	str	r2, [sp, #8]
 800dd6a:	4a54      	ldr	r2, [pc, #336]	; (800debc <_strtoull_l.constprop.0+0x158>)
 800dd6c:	001e      	movs	r6, r3
 800dd6e:	9101      	str	r1, [sp, #4]
 800dd70:	000b      	movs	r3, r1
 800dd72:	4694      	mov	ip, r2
 800dd74:	2108      	movs	r1, #8
 800dd76:	9009      	str	r0, [sp, #36]	; 0x24
 800dd78:	001a      	movs	r2, r3
 800dd7a:	4660      	mov	r0, ip
 800dd7c:	7814      	ldrb	r4, [r2, #0]
 800dd7e:	3301      	adds	r3, #1
 800dd80:	5d00      	ldrb	r0, [r0, r4]
 800dd82:	001d      	movs	r5, r3
 800dd84:	0007      	movs	r7, r0
 800dd86:	400f      	ands	r7, r1
 800dd88:	4208      	tst	r0, r1
 800dd8a:	d1f5      	bne.n	800dd78 <_strtoull_l.constprop.0+0x14>
 800dd8c:	2c2d      	cmp	r4, #45	; 0x2d
 800dd8e:	d154      	bne.n	800de3a <_strtoull_l.constprop.0+0xd6>
 800dd90:	781c      	ldrb	r4, [r3, #0]
 800dd92:	2301      	movs	r3, #1
 800dd94:	1c95      	adds	r5, r2, #2
 800dd96:	9306      	str	r3, [sp, #24]
 800dd98:	2e00      	cmp	r6, #0
 800dd9a:	d100      	bne.n	800dd9e <_strtoull_l.constprop.0+0x3a>
 800dd9c:	e088      	b.n	800deb0 <_strtoull_l.constprop.0+0x14c>
 800dd9e:	2e10      	cmp	r6, #16
 800dda0:	d10a      	bne.n	800ddb8 <_strtoull_l.constprop.0+0x54>
 800dda2:	2c30      	cmp	r4, #48	; 0x30
 800dda4:	d108      	bne.n	800ddb8 <_strtoull_l.constprop.0+0x54>
 800dda6:	2220      	movs	r2, #32
 800dda8:	782b      	ldrb	r3, [r5, #0]
 800ddaa:	4393      	bics	r3, r2
 800ddac:	2b58      	cmp	r3, #88	; 0x58
 800ddae:	d000      	beq.n	800ddb2 <_strtoull_l.constprop.0+0x4e>
 800ddb0:	e078      	b.n	800dea4 <_strtoull_l.constprop.0+0x140>
 800ddb2:	2610      	movs	r6, #16
 800ddb4:	786c      	ldrb	r4, [r5, #1]
 800ddb6:	3502      	adds	r5, #2
 800ddb8:	17f7      	asrs	r7, r6, #31
 800ddba:	0032      	movs	r2, r6
 800ddbc:	003b      	movs	r3, r7
 800ddbe:	2001      	movs	r0, #1
 800ddc0:	4240      	negs	r0, r0
 800ddc2:	17c1      	asrs	r1, r0, #31
 800ddc4:	f7f2 fb6e 	bl	80004a4 <__aeabi_uldivmod>
 800ddc8:	0032      	movs	r2, r6
 800ddca:	9007      	str	r0, [sp, #28]
 800ddcc:	9103      	str	r1, [sp, #12]
 800ddce:	003b      	movs	r3, r7
 800ddd0:	2001      	movs	r0, #1
 800ddd2:	4240      	negs	r0, r0
 800ddd4:	17c1      	asrs	r1, r0, #31
 800ddd6:	f7f2 fb65 	bl	80004a4 <__aeabi_uldivmod>
 800ddda:	2300      	movs	r3, #0
 800dddc:	2000      	movs	r0, #0
 800ddde:	2100      	movs	r1, #0
 800dde0:	9208      	str	r2, [sp, #32]
 800dde2:	0022      	movs	r2, r4
 800dde4:	3a30      	subs	r2, #48	; 0x30
 800dde6:	2a09      	cmp	r2, #9
 800dde8:	d82d      	bhi.n	800de46 <_strtoull_l.constprop.0+0xe2>
 800ddea:	0014      	movs	r4, r2
 800ddec:	42a6      	cmp	r6, r4
 800ddee:	dd39      	ble.n	800de64 <_strtoull_l.constprop.0+0x100>
 800ddf0:	1c5a      	adds	r2, r3, #1
 800ddf2:	d01f      	beq.n	800de34 <_strtoull_l.constprop.0+0xd0>
 800ddf4:	9b03      	ldr	r3, [sp, #12]
 800ddf6:	4299      	cmp	r1, r3
 800ddf8:	d831      	bhi.n	800de5e <_strtoull_l.constprop.0+0xfa>
 800ddfa:	d102      	bne.n	800de02 <_strtoull_l.constprop.0+0x9e>
 800ddfc:	9b07      	ldr	r3, [sp, #28]
 800ddfe:	4298      	cmp	r0, r3
 800de00:	d82d      	bhi.n	800de5e <_strtoull_l.constprop.0+0xfa>
 800de02:	9b07      	ldr	r3, [sp, #28]
 800de04:	4283      	cmp	r3, r0
 800de06:	d107      	bne.n	800de18 <_strtoull_l.constprop.0+0xb4>
 800de08:	9b03      	ldr	r3, [sp, #12]
 800de0a:	428b      	cmp	r3, r1
 800de0c:	d104      	bne.n	800de18 <_strtoull_l.constprop.0+0xb4>
 800de0e:	2301      	movs	r3, #1
 800de10:	9a08      	ldr	r2, [sp, #32]
 800de12:	425b      	negs	r3, r3
 800de14:	42a2      	cmp	r2, r4
 800de16:	db0d      	blt.n	800de34 <_strtoull_l.constprop.0+0xd0>
 800de18:	000b      	movs	r3, r1
 800de1a:	0002      	movs	r2, r0
 800de1c:	0039      	movs	r1, r7
 800de1e:	0030      	movs	r0, r6
 800de20:	f7f2 fb60 	bl	80004e4 <__aeabi_lmul>
 800de24:	17e3      	asrs	r3, r4, #31
 800de26:	9404      	str	r4, [sp, #16]
 800de28:	9305      	str	r3, [sp, #20]
 800de2a:	9b04      	ldr	r3, [sp, #16]
 800de2c:	9c05      	ldr	r4, [sp, #20]
 800de2e:	18c0      	adds	r0, r0, r3
 800de30:	4161      	adcs	r1, r4
 800de32:	2301      	movs	r3, #1
 800de34:	782c      	ldrb	r4, [r5, #0]
 800de36:	3501      	adds	r5, #1
 800de38:	e7d3      	b.n	800dde2 <_strtoull_l.constprop.0+0x7e>
 800de3a:	9706      	str	r7, [sp, #24]
 800de3c:	2c2b      	cmp	r4, #43	; 0x2b
 800de3e:	d1ab      	bne.n	800dd98 <_strtoull_l.constprop.0+0x34>
 800de40:	781c      	ldrb	r4, [r3, #0]
 800de42:	1c95      	adds	r5, r2, #2
 800de44:	e7a8      	b.n	800dd98 <_strtoull_l.constprop.0+0x34>
 800de46:	0022      	movs	r2, r4
 800de48:	3a41      	subs	r2, #65	; 0x41
 800de4a:	2a19      	cmp	r2, #25
 800de4c:	d801      	bhi.n	800de52 <_strtoull_l.constprop.0+0xee>
 800de4e:	3c37      	subs	r4, #55	; 0x37
 800de50:	e7cc      	b.n	800ddec <_strtoull_l.constprop.0+0x88>
 800de52:	0022      	movs	r2, r4
 800de54:	3a61      	subs	r2, #97	; 0x61
 800de56:	2a19      	cmp	r2, #25
 800de58:	d804      	bhi.n	800de64 <_strtoull_l.constprop.0+0x100>
 800de5a:	3c57      	subs	r4, #87	; 0x57
 800de5c:	e7c6      	b.n	800ddec <_strtoull_l.constprop.0+0x88>
 800de5e:	2301      	movs	r3, #1
 800de60:	425b      	negs	r3, r3
 800de62:	e7e7      	b.n	800de34 <_strtoull_l.constprop.0+0xd0>
 800de64:	1c5a      	adds	r2, r3, #1
 800de66:	d10a      	bne.n	800de7e <_strtoull_l.constprop.0+0x11a>
 800de68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de6a:	3323      	adds	r3, #35	; 0x23
 800de6c:	6013      	str	r3, [r2, #0]
 800de6e:	9b02      	ldr	r3, [sp, #8]
 800de70:	2001      	movs	r0, #1
 800de72:	4240      	negs	r0, r0
 800de74:	17c1      	asrs	r1, r0, #31
 800de76:	2b00      	cmp	r3, #0
 800de78:	d10e      	bne.n	800de98 <_strtoull_l.constprop.0+0x134>
 800de7a:	b00b      	add	sp, #44	; 0x2c
 800de7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de7e:	9a06      	ldr	r2, [sp, #24]
 800de80:	2a00      	cmp	r2, #0
 800de82:	d004      	beq.n	800de8e <_strtoull_l.constprop.0+0x12a>
 800de84:	0006      	movs	r6, r0
 800de86:	000f      	movs	r7, r1
 800de88:	2100      	movs	r1, #0
 800de8a:	4270      	negs	r0, r6
 800de8c:	41b9      	sbcs	r1, r7
 800de8e:	9a02      	ldr	r2, [sp, #8]
 800de90:	2a00      	cmp	r2, #0
 800de92:	d0f2      	beq.n	800de7a <_strtoull_l.constprop.0+0x116>
 800de94:	2b00      	cmp	r3, #0
 800de96:	d001      	beq.n	800de9c <_strtoull_l.constprop.0+0x138>
 800de98:	1e6b      	subs	r3, r5, #1
 800de9a:	9301      	str	r3, [sp, #4]
 800de9c:	9b02      	ldr	r3, [sp, #8]
 800de9e:	9a01      	ldr	r2, [sp, #4]
 800dea0:	601a      	str	r2, [r3, #0]
 800dea2:	e7ea      	b.n	800de7a <_strtoull_l.constprop.0+0x116>
 800dea4:	2430      	movs	r4, #48	; 0x30
 800dea6:	2e00      	cmp	r6, #0
 800dea8:	d000      	beq.n	800deac <_strtoull_l.constprop.0+0x148>
 800deaa:	e785      	b.n	800ddb8 <_strtoull_l.constprop.0+0x54>
 800deac:	3608      	adds	r6, #8
 800deae:	e783      	b.n	800ddb8 <_strtoull_l.constprop.0+0x54>
 800deb0:	2c30      	cmp	r4, #48	; 0x30
 800deb2:	d100      	bne.n	800deb6 <_strtoull_l.constprop.0+0x152>
 800deb4:	e777      	b.n	800dda6 <_strtoull_l.constprop.0+0x42>
 800deb6:	260a      	movs	r6, #10
 800deb8:	e77e      	b.n	800ddb8 <_strtoull_l.constprop.0+0x54>
 800deba:	46c0      	nop			; (mov r8, r8)
 800debc:	0800f6d9 	.word	0x0800f6d9

0800dec0 <_strtoull_r>:
 800dec0:	b510      	push	{r4, lr}
 800dec2:	f7ff ff4f 	bl	800dd64 <_strtoull_l.constprop.0>
 800dec6:	bd10      	pop	{r4, pc}

0800dec8 <_mbrtowc_r>:
 800dec8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800deca:	0004      	movs	r4, r0
 800decc:	0010      	movs	r0, r2
 800dece:	4a0b      	ldr	r2, [pc, #44]	; (800defc <_mbrtowc_r+0x34>)
 800ded0:	9d06      	ldr	r5, [sp, #24]
 800ded2:	32e4      	adds	r2, #228	; 0xe4
 800ded4:	6816      	ldr	r6, [r2, #0]
 800ded6:	2800      	cmp	r0, #0
 800ded8:	d10c      	bne.n	800def4 <_mbrtowc_r+0x2c>
 800deda:	2301      	movs	r3, #1
 800dedc:	0001      	movs	r1, r0
 800dede:	4a08      	ldr	r2, [pc, #32]	; (800df00 <_mbrtowc_r+0x38>)
 800dee0:	9500      	str	r5, [sp, #0]
 800dee2:	0020      	movs	r0, r4
 800dee4:	47b0      	blx	r6
 800dee6:	1c43      	adds	r3, r0, #1
 800dee8:	d103      	bne.n	800def2 <_mbrtowc_r+0x2a>
 800deea:	2300      	movs	r3, #0
 800deec:	602b      	str	r3, [r5, #0]
 800deee:	338a      	adds	r3, #138	; 0x8a
 800def0:	6023      	str	r3, [r4, #0]
 800def2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800def4:	0002      	movs	r2, r0
 800def6:	9500      	str	r5, [sp, #0]
 800def8:	e7f3      	b.n	800dee2 <_mbrtowc_r+0x1a>
 800defa:	46c0      	nop			; (mov r8, r8)
 800defc:	2000042c 	.word	0x2000042c
 800df00:	0800fa63 	.word	0x0800fa63

0800df04 <iswspace>:
 800df04:	b510      	push	{r4, lr}
 800df06:	2100      	movs	r1, #0
 800df08:	f000 f802 	bl	800df10 <iswspace_l>
 800df0c:	bd10      	pop	{r4, pc}
	...

0800df10 <iswspace_l>:
 800df10:	0003      	movs	r3, r0
 800df12:	2000      	movs	r0, #0
 800df14:	2bff      	cmp	r3, #255	; 0xff
 800df16:	d803      	bhi.n	800df20 <iswspace_l+0x10>
 800df18:	4a02      	ldr	r2, [pc, #8]	; (800df24 <iswspace_l+0x14>)
 800df1a:	5cd0      	ldrb	r0, [r2, r3]
 800df1c:	2308      	movs	r3, #8
 800df1e:	4018      	ands	r0, r3
 800df20:	4770      	bx	lr
 800df22:	46c0      	nop			; (mov r8, r8)
 800df24:	0800f6d9 	.word	0x0800f6d9

0800df28 <fiprintf>:
 800df28:	b40e      	push	{r1, r2, r3}
 800df2a:	b517      	push	{r0, r1, r2, r4, lr}
 800df2c:	4c05      	ldr	r4, [pc, #20]	; (800df44 <fiprintf+0x1c>)
 800df2e:	ab05      	add	r3, sp, #20
 800df30:	cb04      	ldmia	r3!, {r2}
 800df32:	0001      	movs	r1, r0
 800df34:	6820      	ldr	r0, [r4, #0]
 800df36:	9301      	str	r3, [sp, #4]
 800df38:	f000 f954 	bl	800e1e4 <_vfiprintf_r>
 800df3c:	bc1e      	pop	{r1, r2, r3, r4}
 800df3e:	bc08      	pop	{r3}
 800df40:	b003      	add	sp, #12
 800df42:	4718      	bx	r3
 800df44:	200006b8 	.word	0x200006b8

0800df48 <__ssprint_r>:
 800df48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df4a:	6813      	ldr	r3, [r2, #0]
 800df4c:	b087      	sub	sp, #28
 800df4e:	0017      	movs	r7, r2
 800df50:	9303      	str	r3, [sp, #12]
 800df52:	6893      	ldr	r3, [r2, #8]
 800df54:	2200      	movs	r2, #0
 800df56:	000c      	movs	r4, r1
 800df58:	9005      	str	r0, [sp, #20]
 800df5a:	9202      	str	r2, [sp, #8]
 800df5c:	9201      	str	r2, [sp, #4]
 800df5e:	4293      	cmp	r3, r2
 800df60:	d10d      	bne.n	800df7e <__ssprint_r+0x36>
 800df62:	2000      	movs	r0, #0
 800df64:	2300      	movs	r3, #0
 800df66:	607b      	str	r3, [r7, #4]
 800df68:	b007      	add	sp, #28
 800df6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df6c:	9b03      	ldr	r3, [sp, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	9302      	str	r3, [sp, #8]
 800df72:	9b03      	ldr	r3, [sp, #12]
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	9301      	str	r3, [sp, #4]
 800df78:	9b03      	ldr	r3, [sp, #12]
 800df7a:	3308      	adds	r3, #8
 800df7c:	9303      	str	r3, [sp, #12]
 800df7e:	9a01      	ldr	r2, [sp, #4]
 800df80:	68a6      	ldr	r6, [r4, #8]
 800df82:	6823      	ldr	r3, [r4, #0]
 800df84:	2a00      	cmp	r2, #0
 800df86:	d0f1      	beq.n	800df6c <__ssprint_r+0x24>
 800df88:	42b2      	cmp	r2, r6
 800df8a:	d32e      	bcc.n	800dfea <__ssprint_r+0xa2>
 800df8c:	2190      	movs	r1, #144	; 0x90
 800df8e:	89a2      	ldrh	r2, [r4, #12]
 800df90:	00c9      	lsls	r1, r1, #3
 800df92:	420a      	tst	r2, r1
 800df94:	d029      	beq.n	800dfea <__ssprint_r+0xa2>
 800df96:	2003      	movs	r0, #3
 800df98:	6921      	ldr	r1, [r4, #16]
 800df9a:	1a5b      	subs	r3, r3, r1
 800df9c:	9304      	str	r3, [sp, #16]
 800df9e:	6963      	ldr	r3, [r4, #20]
 800dfa0:	4343      	muls	r3, r0
 800dfa2:	0fdd      	lsrs	r5, r3, #31
 800dfa4:	18ed      	adds	r5, r5, r3
 800dfa6:	9b04      	ldr	r3, [sp, #16]
 800dfa8:	9801      	ldr	r0, [sp, #4]
 800dfaa:	3301      	adds	r3, #1
 800dfac:	181b      	adds	r3, r3, r0
 800dfae:	106d      	asrs	r5, r5, #1
 800dfb0:	42ab      	cmp	r3, r5
 800dfb2:	d900      	bls.n	800dfb6 <__ssprint_r+0x6e>
 800dfb4:	001d      	movs	r5, r3
 800dfb6:	0552      	lsls	r2, r2, #21
 800dfb8:	d532      	bpl.n	800e020 <__ssprint_r+0xd8>
 800dfba:	0029      	movs	r1, r5
 800dfbc:	9805      	ldr	r0, [sp, #20]
 800dfbe:	f7f9 fa8d 	bl	80074dc <_malloc_r>
 800dfc2:	1e06      	subs	r6, r0, #0
 800dfc4:	d036      	beq.n	800e034 <__ssprint_r+0xec>
 800dfc6:	9a04      	ldr	r2, [sp, #16]
 800dfc8:	6921      	ldr	r1, [r4, #16]
 800dfca:	f7fa fd94 	bl	8008af6 <memcpy>
 800dfce:	89a2      	ldrh	r2, [r4, #12]
 800dfd0:	4b1e      	ldr	r3, [pc, #120]	; (800e04c <__ssprint_r+0x104>)
 800dfd2:	401a      	ands	r2, r3
 800dfd4:	2380      	movs	r3, #128	; 0x80
 800dfd6:	4313      	orrs	r3, r2
 800dfd8:	81a3      	strh	r3, [r4, #12]
 800dfda:	9b04      	ldr	r3, [sp, #16]
 800dfdc:	6126      	str	r6, [r4, #16]
 800dfde:	18f6      	adds	r6, r6, r3
 800dfe0:	6026      	str	r6, [r4, #0]
 800dfe2:	6165      	str	r5, [r4, #20]
 800dfe4:	9e01      	ldr	r6, [sp, #4]
 800dfe6:	1aed      	subs	r5, r5, r3
 800dfe8:	60a5      	str	r5, [r4, #8]
 800dfea:	9b01      	ldr	r3, [sp, #4]
 800dfec:	429e      	cmp	r6, r3
 800dfee:	d900      	bls.n	800dff2 <__ssprint_r+0xaa>
 800dff0:	001e      	movs	r6, r3
 800dff2:	0032      	movs	r2, r6
 800dff4:	9902      	ldr	r1, [sp, #8]
 800dff6:	6820      	ldr	r0, [r4, #0]
 800dff8:	f001 f86d 	bl	800f0d6 <memmove>
 800dffc:	9a01      	ldr	r2, [sp, #4]
 800dffe:	68a3      	ldr	r3, [r4, #8]
 800e000:	4694      	mov	ip, r2
 800e002:	1b9b      	subs	r3, r3, r6
 800e004:	60a3      	str	r3, [r4, #8]
 800e006:	6823      	ldr	r3, [r4, #0]
 800e008:	199b      	adds	r3, r3, r6
 800e00a:	6023      	str	r3, [r4, #0]
 800e00c:	9b02      	ldr	r3, [sp, #8]
 800e00e:	4463      	add	r3, ip
 800e010:	9302      	str	r3, [sp, #8]
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	1a9b      	subs	r3, r3, r2
 800e016:	60bb      	str	r3, [r7, #8]
 800e018:	d0a3      	beq.n	800df62 <__ssprint_r+0x1a>
 800e01a:	2300      	movs	r3, #0
 800e01c:	9301      	str	r3, [sp, #4]
 800e01e:	e7ae      	b.n	800df7e <__ssprint_r+0x36>
 800e020:	002a      	movs	r2, r5
 800e022:	9805      	ldr	r0, [sp, #20]
 800e024:	f7ff fbc0 	bl	800d7a8 <_realloc_r>
 800e028:	1e06      	subs	r6, r0, #0
 800e02a:	d1d6      	bne.n	800dfda <__ssprint_r+0x92>
 800e02c:	6921      	ldr	r1, [r4, #16]
 800e02e:	9805      	ldr	r0, [sp, #20]
 800e030:	f7fa fddc 	bl	8008bec <_free_r>
 800e034:	230c      	movs	r3, #12
 800e036:	9a05      	ldr	r2, [sp, #20]
 800e038:	2001      	movs	r0, #1
 800e03a:	6013      	str	r3, [r2, #0]
 800e03c:	89a2      	ldrh	r2, [r4, #12]
 800e03e:	3334      	adds	r3, #52	; 0x34
 800e040:	4313      	orrs	r3, r2
 800e042:	81a3      	strh	r3, [r4, #12]
 800e044:	2300      	movs	r3, #0
 800e046:	4240      	negs	r0, r0
 800e048:	60bb      	str	r3, [r7, #8]
 800e04a:	e78b      	b.n	800df64 <__ssprint_r+0x1c>
 800e04c:	fffffb7f 	.word	0xfffffb7f

0800e050 <_sungetc_r>:
 800e050:	b570      	push	{r4, r5, r6, lr}
 800e052:	0014      	movs	r4, r2
 800e054:	1c4b      	adds	r3, r1, #1
 800e056:	d103      	bne.n	800e060 <_sungetc_r+0x10>
 800e058:	2501      	movs	r5, #1
 800e05a:	426d      	negs	r5, r5
 800e05c:	0028      	movs	r0, r5
 800e05e:	bd70      	pop	{r4, r5, r6, pc}
 800e060:	8993      	ldrh	r3, [r2, #12]
 800e062:	2220      	movs	r2, #32
 800e064:	4393      	bics	r3, r2
 800e066:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e068:	81a3      	strh	r3, [r4, #12]
 800e06a:	b2ce      	uxtb	r6, r1
 800e06c:	6863      	ldr	r3, [r4, #4]
 800e06e:	b2cd      	uxtb	r5, r1
 800e070:	2a00      	cmp	r2, #0
 800e072:	d010      	beq.n	800e096 <_sungetc_r+0x46>
 800e074:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e076:	429a      	cmp	r2, r3
 800e078:	dd07      	ble.n	800e08a <_sungetc_r+0x3a>
 800e07a:	6823      	ldr	r3, [r4, #0]
 800e07c:	3b01      	subs	r3, #1
 800e07e:	6023      	str	r3, [r4, #0]
 800e080:	701e      	strb	r6, [r3, #0]
 800e082:	6863      	ldr	r3, [r4, #4]
 800e084:	3301      	adds	r3, #1
 800e086:	6063      	str	r3, [r4, #4]
 800e088:	e7e8      	b.n	800e05c <_sungetc_r+0xc>
 800e08a:	0021      	movs	r1, r4
 800e08c:	f000 ff1a 	bl	800eec4 <__submore>
 800e090:	2800      	cmp	r0, #0
 800e092:	d0f2      	beq.n	800e07a <_sungetc_r+0x2a>
 800e094:	e7e0      	b.n	800e058 <_sungetc_r+0x8>
 800e096:	6921      	ldr	r1, [r4, #16]
 800e098:	6822      	ldr	r2, [r4, #0]
 800e09a:	2900      	cmp	r1, #0
 800e09c:	d007      	beq.n	800e0ae <_sungetc_r+0x5e>
 800e09e:	4291      	cmp	r1, r2
 800e0a0:	d205      	bcs.n	800e0ae <_sungetc_r+0x5e>
 800e0a2:	1e51      	subs	r1, r2, #1
 800e0a4:	7808      	ldrb	r0, [r1, #0]
 800e0a6:	42a8      	cmp	r0, r5
 800e0a8:	d101      	bne.n	800e0ae <_sungetc_r+0x5e>
 800e0aa:	6021      	str	r1, [r4, #0]
 800e0ac:	e7ea      	b.n	800e084 <_sungetc_r+0x34>
 800e0ae:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e0b0:	0023      	movs	r3, r4
 800e0b2:	3340      	adds	r3, #64	; 0x40
 800e0b4:	6323      	str	r3, [r4, #48]	; 0x30
 800e0b6:	2303      	movs	r3, #3
 800e0b8:	6363      	str	r3, [r4, #52]	; 0x34
 800e0ba:	0023      	movs	r3, r4
 800e0bc:	3342      	adds	r3, #66	; 0x42
 800e0be:	63a2      	str	r2, [r4, #56]	; 0x38
 800e0c0:	701e      	strb	r6, [r3, #0]
 800e0c2:	6023      	str	r3, [r4, #0]
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	e7de      	b.n	800e086 <_sungetc_r+0x36>

0800e0c8 <__ssrefill_r>:
 800e0c8:	b510      	push	{r4, lr}
 800e0ca:	000c      	movs	r4, r1
 800e0cc:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800e0ce:	2900      	cmp	r1, #0
 800e0d0:	d00e      	beq.n	800e0f0 <__ssrefill_r+0x28>
 800e0d2:	0023      	movs	r3, r4
 800e0d4:	3340      	adds	r3, #64	; 0x40
 800e0d6:	4299      	cmp	r1, r3
 800e0d8:	d001      	beq.n	800e0de <__ssrefill_r+0x16>
 800e0da:	f7fa fd87 	bl	8008bec <_free_r>
 800e0de:	2000      	movs	r0, #0
 800e0e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e0e2:	6320      	str	r0, [r4, #48]	; 0x30
 800e0e4:	6063      	str	r3, [r4, #4]
 800e0e6:	4283      	cmp	r3, r0
 800e0e8:	d002      	beq.n	800e0f0 <__ssrefill_r+0x28>
 800e0ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e0ec:	6023      	str	r3, [r4, #0]
 800e0ee:	bd10      	pop	{r4, pc}
 800e0f0:	6923      	ldr	r3, [r4, #16]
 800e0f2:	2001      	movs	r0, #1
 800e0f4:	6023      	str	r3, [r4, #0]
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	89a2      	ldrh	r2, [r4, #12]
 800e0fa:	6063      	str	r3, [r4, #4]
 800e0fc:	3320      	adds	r3, #32
 800e0fe:	4313      	orrs	r3, r2
 800e100:	81a3      	strh	r3, [r4, #12]
 800e102:	4240      	negs	r0, r0
 800e104:	e7f3      	b.n	800e0ee <__ssrefill_r+0x26>

0800e106 <_sfread_r>:
 800e106:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e108:	0014      	movs	r4, r2
 800e10a:	435c      	muls	r4, r3
 800e10c:	b087      	sub	sp, #28
 800e10e:	1e26      	subs	r6, r4, #0
 800e110:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e112:	9005      	str	r0, [sp, #20]
 800e114:	9101      	str	r1, [sp, #4]
 800e116:	9202      	str	r2, [sp, #8]
 800e118:	9303      	str	r3, [sp, #12]
 800e11a:	d11e      	bne.n	800e15a <_sfread_r+0x54>
 800e11c:	0020      	movs	r0, r4
 800e11e:	b007      	add	sp, #28
 800e120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e122:	003a      	movs	r2, r7
 800e124:	9801      	ldr	r0, [sp, #4]
 800e126:	f7fa fce6 	bl	8008af6 <memcpy>
 800e12a:	682b      	ldr	r3, [r5, #0]
 800e12c:	0029      	movs	r1, r5
 800e12e:	19db      	adds	r3, r3, r7
 800e130:	602b      	str	r3, [r5, #0]
 800e132:	2300      	movs	r3, #0
 800e134:	606b      	str	r3, [r5, #4]
 800e136:	9b01      	ldr	r3, [sp, #4]
 800e138:	9805      	ldr	r0, [sp, #20]
 800e13a:	19db      	adds	r3, r3, r7
 800e13c:	9301      	str	r3, [sp, #4]
 800e13e:	1bf3      	subs	r3, r6, r7
 800e140:	9304      	str	r3, [sp, #16]
 800e142:	f7ff ffc1 	bl	800e0c8 <__ssrefill_r>
 800e146:	2800      	cmp	r0, #0
 800e148:	d006      	beq.n	800e158 <_sfread_r+0x52>
 800e14a:	193c      	adds	r4, r7, r4
 800e14c:	1ba0      	subs	r0, r4, r6
 800e14e:	9902      	ldr	r1, [sp, #8]
 800e150:	f7f1 fff4 	bl	800013c <__udivsi3>
 800e154:	0004      	movs	r4, r0
 800e156:	e7e1      	b.n	800e11c <_sfread_r+0x16>
 800e158:	9e04      	ldr	r6, [sp, #16]
 800e15a:	686f      	ldr	r7, [r5, #4]
 800e15c:	6829      	ldr	r1, [r5, #0]
 800e15e:	42b7      	cmp	r7, r6
 800e160:	d3df      	bcc.n	800e122 <_sfread_r+0x1c>
 800e162:	0032      	movs	r2, r6
 800e164:	9801      	ldr	r0, [sp, #4]
 800e166:	f7fa fcc6 	bl	8008af6 <memcpy>
 800e16a:	686b      	ldr	r3, [r5, #4]
 800e16c:	9c03      	ldr	r4, [sp, #12]
 800e16e:	1b9b      	subs	r3, r3, r6
 800e170:	606b      	str	r3, [r5, #4]
 800e172:	682b      	ldr	r3, [r5, #0]
 800e174:	199b      	adds	r3, r3, r6
 800e176:	602b      	str	r3, [r5, #0]
 800e178:	e7d0      	b.n	800e11c <_sfread_r+0x16>

0800e17a <__sprint_r>:
 800e17a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e17c:	6893      	ldr	r3, [r2, #8]
 800e17e:	b085      	sub	sp, #20
 800e180:	9001      	str	r0, [sp, #4]
 800e182:	000d      	movs	r5, r1
 800e184:	0014      	movs	r4, r2
 800e186:	1e18      	subs	r0, r3, #0
 800e188:	d018      	beq.n	800e1bc <__sprint_r+0x42>
 800e18a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e18c:	049b      	lsls	r3, r3, #18
 800e18e:	d524      	bpl.n	800e1da <__sprint_r+0x60>
 800e190:	6817      	ldr	r7, [r2, #0]
 800e192:	2600      	movs	r6, #0
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	9302      	str	r3, [sp, #8]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	9300      	str	r3, [sp, #0]
 800e19c:	089b      	lsrs	r3, r3, #2
 800e19e:	9303      	str	r3, [sp, #12]
 800e1a0:	9b03      	ldr	r3, [sp, #12]
 800e1a2:	42b3      	cmp	r3, r6
 800e1a4:	dc0e      	bgt.n	800e1c4 <__sprint_r+0x4a>
 800e1a6:	2203      	movs	r2, #3
 800e1a8:	9b00      	ldr	r3, [sp, #0]
 800e1aa:	68a0      	ldr	r0, [r4, #8]
 800e1ac:	4393      	bics	r3, r2
 800e1ae:	1ac0      	subs	r0, r0, r3
 800e1b0:	60a0      	str	r0, [r4, #8]
 800e1b2:	3708      	adds	r7, #8
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	d1ec      	bne.n	800e192 <__sprint_r+0x18>
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	60a3      	str	r3, [r4, #8]
 800e1bc:	2300      	movs	r3, #0
 800e1be:	6063      	str	r3, [r4, #4]
 800e1c0:	b005      	add	sp, #20
 800e1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1c4:	9902      	ldr	r1, [sp, #8]
 800e1c6:	00b3      	lsls	r3, r6, #2
 800e1c8:	58c9      	ldr	r1, [r1, r3]
 800e1ca:	002a      	movs	r2, r5
 800e1cc:	9801      	ldr	r0, [sp, #4]
 800e1ce:	f000 ff59 	bl	800f084 <_fputwc_r>
 800e1d2:	1c43      	adds	r3, r0, #1
 800e1d4:	d0f0      	beq.n	800e1b8 <__sprint_r+0x3e>
 800e1d6:	3601      	adds	r6, #1
 800e1d8:	e7e2      	b.n	800e1a0 <__sprint_r+0x26>
 800e1da:	9801      	ldr	r0, [sp, #4]
 800e1dc:	f000 fd14 	bl	800ec08 <__sfvwrite_r>
 800e1e0:	e7ea      	b.n	800e1b8 <__sprint_r+0x3e>
	...

0800e1e4 <_vfiprintf_r>:
 800e1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1e6:	b0c1      	sub	sp, #260	; 0x104
 800e1e8:	001c      	movs	r4, r3
 800e1ea:	001f      	movs	r7, r3
 800e1ec:	9006      	str	r0, [sp, #24]
 800e1ee:	9103      	str	r1, [sp, #12]
 800e1f0:	9207      	str	r2, [sp, #28]
 800e1f2:	2800      	cmp	r0, #0
 800e1f4:	d004      	beq.n	800e200 <_vfiprintf_r+0x1c>
 800e1f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d101      	bne.n	800e200 <_vfiprintf_r+0x1c>
 800e1fc:	f7fa fae2 	bl	80087c4 <__sinit>
 800e200:	9b03      	ldr	r3, [sp, #12]
 800e202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e204:	07db      	lsls	r3, r3, #31
 800e206:	d407      	bmi.n	800e218 <_vfiprintf_r+0x34>
 800e208:	9b03      	ldr	r3, [sp, #12]
 800e20a:	899b      	ldrh	r3, [r3, #12]
 800e20c:	059b      	lsls	r3, r3, #22
 800e20e:	d403      	bmi.n	800e218 <_vfiprintf_r+0x34>
 800e210:	9b03      	ldr	r3, [sp, #12]
 800e212:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e214:	f7fa fc62 	bl	8008adc <__retarget_lock_acquire_recursive>
 800e218:	9b03      	ldr	r3, [sp, #12]
 800e21a:	220c      	movs	r2, #12
 800e21c:	5e9a      	ldrsh	r2, [r3, r2]
 800e21e:	2380      	movs	r3, #128	; 0x80
 800e220:	019b      	lsls	r3, r3, #6
 800e222:	421a      	tst	r2, r3
 800e224:	d107      	bne.n	800e236 <_vfiprintf_r+0x52>
 800e226:	4313      	orrs	r3, r2
 800e228:	9a03      	ldr	r2, [sp, #12]
 800e22a:	8193      	strh	r3, [r2, #12]
 800e22c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800e22e:	4aa3      	ldr	r2, [pc, #652]	; (800e4bc <_vfiprintf_r+0x2d8>)
 800e230:	4013      	ands	r3, r2
 800e232:	9a03      	ldr	r2, [sp, #12]
 800e234:	6653      	str	r3, [r2, #100]	; 0x64
 800e236:	9b03      	ldr	r3, [sp, #12]
 800e238:	899b      	ldrh	r3, [r3, #12]
 800e23a:	071b      	lsls	r3, r3, #28
 800e23c:	d503      	bpl.n	800e246 <_vfiprintf_r+0x62>
 800e23e:	9b03      	ldr	r3, [sp, #12]
 800e240:	691b      	ldr	r3, [r3, #16]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d118      	bne.n	800e278 <_vfiprintf_r+0x94>
 800e246:	9903      	ldr	r1, [sp, #12]
 800e248:	9806      	ldr	r0, [sp, #24]
 800e24a:	f000 fe79 	bl	800ef40 <__swsetup_r>
 800e24e:	2800      	cmp	r0, #0
 800e250:	d012      	beq.n	800e278 <_vfiprintf_r+0x94>
 800e252:	9b03      	ldr	r3, [sp, #12]
 800e254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e256:	07db      	lsls	r3, r3, #31
 800e258:	d505      	bpl.n	800e266 <_vfiprintf_r+0x82>
 800e25a:	2301      	movs	r3, #1
 800e25c:	425b      	negs	r3, r3
 800e25e:	9308      	str	r3, [sp, #32]
 800e260:	9808      	ldr	r0, [sp, #32]
 800e262:	b041      	add	sp, #260	; 0x104
 800e264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e266:	9b03      	ldr	r3, [sp, #12]
 800e268:	899b      	ldrh	r3, [r3, #12]
 800e26a:	059b      	lsls	r3, r3, #22
 800e26c:	d4f5      	bmi.n	800e25a <_vfiprintf_r+0x76>
 800e26e:	9b03      	ldr	r3, [sp, #12]
 800e270:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e272:	f7fa fc34 	bl	8008ade <__retarget_lock_release_recursive>
 800e276:	e7f0      	b.n	800e25a <_vfiprintf_r+0x76>
 800e278:	221a      	movs	r2, #26
 800e27a:	9b03      	ldr	r3, [sp, #12]
 800e27c:	899b      	ldrh	r3, [r3, #12]
 800e27e:	401a      	ands	r2, r3
 800e280:	2a0a      	cmp	r2, #10
 800e282:	d116      	bne.n	800e2b2 <_vfiprintf_r+0xce>
 800e284:	9a03      	ldr	r2, [sp, #12]
 800e286:	210e      	movs	r1, #14
 800e288:	5e52      	ldrsh	r2, [r2, r1]
 800e28a:	2a00      	cmp	r2, #0
 800e28c:	db11      	blt.n	800e2b2 <_vfiprintf_r+0xce>
 800e28e:	9a03      	ldr	r2, [sp, #12]
 800e290:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e292:	07d2      	lsls	r2, r2, #31
 800e294:	d405      	bmi.n	800e2a2 <_vfiprintf_r+0xbe>
 800e296:	059b      	lsls	r3, r3, #22
 800e298:	d403      	bmi.n	800e2a2 <_vfiprintf_r+0xbe>
 800e29a:	9b03      	ldr	r3, [sp, #12]
 800e29c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e29e:	f7fa fc1e 	bl	8008ade <__retarget_lock_release_recursive>
 800e2a2:	0023      	movs	r3, r4
 800e2a4:	9a07      	ldr	r2, [sp, #28]
 800e2a6:	9903      	ldr	r1, [sp, #12]
 800e2a8:	9806      	ldr	r0, [sp, #24]
 800e2aa:	f000 fc69 	bl	800eb80 <__sbprintf>
 800e2ae:	9008      	str	r0, [sp, #32]
 800e2b0:	e7d6      	b.n	800e260 <_vfiprintf_r+0x7c>
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	ad17      	add	r5, sp, #92	; 0x5c
 800e2b6:	9514      	str	r5, [sp, #80]	; 0x50
 800e2b8:	9316      	str	r3, [sp, #88]	; 0x58
 800e2ba:	9315      	str	r3, [sp, #84]	; 0x54
 800e2bc:	930c      	str	r3, [sp, #48]	; 0x30
 800e2be:	930d      	str	r3, [sp, #52]	; 0x34
 800e2c0:	930e      	str	r3, [sp, #56]	; 0x38
 800e2c2:	930f      	str	r3, [sp, #60]	; 0x3c
 800e2c4:	9308      	str	r3, [sp, #32]
 800e2c6:	9c07      	ldr	r4, [sp, #28]
 800e2c8:	7823      	ldrb	r3, [r4, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d002      	beq.n	800e2d4 <_vfiprintf_r+0xf0>
 800e2ce:	2b25      	cmp	r3, #37	; 0x25
 800e2d0:	d000      	beq.n	800e2d4 <_vfiprintf_r+0xf0>
 800e2d2:	e08d      	b.n	800e3f0 <_vfiprintf_r+0x20c>
 800e2d4:	9b07      	ldr	r3, [sp, #28]
 800e2d6:	1ae6      	subs	r6, r4, r3
 800e2d8:	429c      	cmp	r4, r3
 800e2da:	d016      	beq.n	800e30a <_vfiprintf_r+0x126>
 800e2dc:	602b      	str	r3, [r5, #0]
 800e2de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e2e0:	606e      	str	r6, [r5, #4]
 800e2e2:	199b      	adds	r3, r3, r6
 800e2e4:	9316      	str	r3, [sp, #88]	; 0x58
 800e2e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e2e8:	3508      	adds	r5, #8
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	9315      	str	r3, [sp, #84]	; 0x54
 800e2ee:	2b07      	cmp	r3, #7
 800e2f0:	dd08      	ble.n	800e304 <_vfiprintf_r+0x120>
 800e2f2:	9903      	ldr	r1, [sp, #12]
 800e2f4:	9806      	ldr	r0, [sp, #24]
 800e2f6:	aa14      	add	r2, sp, #80	; 0x50
 800e2f8:	f7ff ff3f 	bl	800e17a <__sprint_r>
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	d000      	beq.n	800e302 <_vfiprintf_r+0x11e>
 800e300:	e3d9      	b.n	800eab6 <_vfiprintf_r+0x8d2>
 800e302:	ad17      	add	r5, sp, #92	; 0x5c
 800e304:	9b08      	ldr	r3, [sp, #32]
 800e306:	199b      	adds	r3, r3, r6
 800e308:	9308      	str	r3, [sp, #32]
 800e30a:	7823      	ldrb	r3, [r4, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d101      	bne.n	800e314 <_vfiprintf_r+0x130>
 800e310:	f000 fbf6 	bl	800eb00 <_vfiprintf_r+0x91c>
 800e314:	2200      	movs	r2, #0
 800e316:	a912      	add	r1, sp, #72	; 0x48
 800e318:	70ca      	strb	r2, [r1, #3]
 800e31a:	2101      	movs	r1, #1
 800e31c:	1c63      	adds	r3, r4, #1
 800e31e:	0014      	movs	r4, r2
 800e320:	4249      	negs	r1, r1
 800e322:	9105      	str	r1, [sp, #20]
 800e324:	9209      	str	r2, [sp, #36]	; 0x24
 800e326:	1c5a      	adds	r2, r3, #1
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	9207      	str	r2, [sp, #28]
 800e32c:	0018      	movs	r0, r3
 800e32e:	3820      	subs	r0, #32
 800e330:	285a      	cmp	r0, #90	; 0x5a
 800e332:	d900      	bls.n	800e336 <_vfiprintf_r+0x152>
 800e334:	e362      	b.n	800e9fc <_vfiprintf_r+0x818>
 800e336:	f7f1 fef7 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e33a:	0078      	.short	0x0078
 800e33c:	03610361 	.word	0x03610361
 800e340:	03610081 	.word	0x03610081
 800e344:	03610361 	.word	0x03610361
 800e348:	0361005d 	.word	0x0361005d
 800e34c:	00830361 	.word	0x00830361
 800e350:	0361008b 	.word	0x0361008b
 800e354:	008f0089 	.word	0x008f0089
 800e358:	00ad0361 	.word	0x00ad0361
 800e35c:	00af00af 	.word	0x00af00af
 800e360:	00af00af 	.word	0x00af00af
 800e364:	00af00af 	.word	0x00af00af
 800e368:	00af00af 	.word	0x00af00af
 800e36c:	036100af 	.word	0x036100af
 800e370:	03610361 	.word	0x03610361
 800e374:	03610361 	.word	0x03610361
 800e378:	03610361 	.word	0x03610361
 800e37c:	03610361 	.word	0x03610361
 800e380:	00e600da 	.word	0x00e600da
 800e384:	03610361 	.word	0x03610361
 800e388:	03610361 	.word	0x03610361
 800e38c:	03610361 	.word	0x03610361
 800e390:	03610361 	.word	0x03610361
 800e394:	03610361 	.word	0x03610361
 800e398:	03610143 	.word	0x03610143
 800e39c:	03610361 	.word	0x03610361
 800e3a0:	03610182 	.word	0x03610182
 800e3a4:	0361027c 	.word	0x0361027c
 800e3a8:	02ae0361 	.word	0x02ae0361
 800e3ac:	03610361 	.word	0x03610361
 800e3b0:	03610361 	.word	0x03610361
 800e3b4:	03610361 	.word	0x03610361
 800e3b8:	03610361 	.word	0x03610361
 800e3bc:	03610361 	.word	0x03610361
 800e3c0:	00e800da 	.word	0x00e800da
 800e3c4:	03610361 	.word	0x03610361
 800e3c8:	00c30361 	.word	0x00c30361
 800e3cc:	00d600e8 	.word	0x00d600e8
 800e3d0:	00cf0361 	.word	0x00cf0361
 800e3d4:	01260361 	.word	0x01260361
 800e3d8:	01740145 	.word	0x01740145
 800e3dc:	036100d6 	.word	0x036100d6
 800e3e0:	007f0182 	.word	0x007f0182
 800e3e4:	0361027e 	.word	0x0361027e
 800e3e8:	02cd0361 	.word	0x02cd0361
 800e3ec:	007f0361 	.word	0x007f0361
 800e3f0:	3401      	adds	r4, #1
 800e3f2:	e769      	b.n	800e2c8 <_vfiprintf_r+0xe4>
 800e3f4:	9806      	ldr	r0, [sp, #24]
 800e3f6:	f7fe fa47 	bl	800c888 <_localeconv_r>
 800e3fa:	6843      	ldr	r3, [r0, #4]
 800e3fc:	0018      	movs	r0, r3
 800e3fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800e400:	f7f1 fe80 	bl	8000104 <strlen>
 800e404:	900e      	str	r0, [sp, #56]	; 0x38
 800e406:	9806      	ldr	r0, [sp, #24]
 800e408:	f7fe fa3e 	bl	800c888 <_localeconv_r>
 800e40c:	6883      	ldr	r3, [r0, #8]
 800e40e:	930d      	str	r3, [sp, #52]	; 0x34
 800e410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e412:	2b00      	cmp	r3, #0
 800e414:	d010      	beq.n	800e438 <_vfiprintf_r+0x254>
 800e416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d00d      	beq.n	800e438 <_vfiprintf_r+0x254>
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d00a      	beq.n	800e438 <_vfiprintf_r+0x254>
 800e422:	2380      	movs	r3, #128	; 0x80
 800e424:	00db      	lsls	r3, r3, #3
 800e426:	431c      	orrs	r4, r3
 800e428:	e006      	b.n	800e438 <_vfiprintf_r+0x254>
 800e42a:	ab12      	add	r3, sp, #72	; 0x48
 800e42c:	78da      	ldrb	r2, [r3, #3]
 800e42e:	3303      	adds	r3, #3
 800e430:	2a00      	cmp	r2, #0
 800e432:	d101      	bne.n	800e438 <_vfiprintf_r+0x254>
 800e434:	3220      	adds	r2, #32
 800e436:	701a      	strb	r2, [r3, #0]
 800e438:	9b07      	ldr	r3, [sp, #28]
 800e43a:	e774      	b.n	800e326 <_vfiprintf_r+0x142>
 800e43c:	2301      	movs	r3, #1
 800e43e:	e7f2      	b.n	800e426 <_vfiprintf_r+0x242>
 800e440:	cf08      	ldmia	r7!, {r3}
 800e442:	9309      	str	r3, [sp, #36]	; 0x24
 800e444:	2b00      	cmp	r3, #0
 800e446:	daf7      	bge.n	800e438 <_vfiprintf_r+0x254>
 800e448:	425b      	negs	r3, r3
 800e44a:	9309      	str	r3, [sp, #36]	; 0x24
 800e44c:	2304      	movs	r3, #4
 800e44e:	e7ea      	b.n	800e426 <_vfiprintf_r+0x242>
 800e450:	222b      	movs	r2, #43	; 0x2b
 800e452:	ab12      	add	r3, sp, #72	; 0x48
 800e454:	70da      	strb	r2, [r3, #3]
 800e456:	e7ef      	b.n	800e438 <_vfiprintf_r+0x254>
 800e458:	9b07      	ldr	r3, [sp, #28]
 800e45a:	1c5a      	adds	r2, r3, #1
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	2b2a      	cmp	r3, #42	; 0x2a
 800e460:	d00f      	beq.n	800e482 <_vfiprintf_r+0x29e>
 800e462:	2100      	movs	r1, #0
 800e464:	9105      	str	r1, [sp, #20]
 800e466:	0019      	movs	r1, r3
 800e468:	3930      	subs	r1, #48	; 0x30
 800e46a:	9207      	str	r2, [sp, #28]
 800e46c:	2909      	cmp	r1, #9
 800e46e:	d900      	bls.n	800e472 <_vfiprintf_r+0x28e>
 800e470:	e75c      	b.n	800e32c <_vfiprintf_r+0x148>
 800e472:	200a      	movs	r0, #10
 800e474:	9b05      	ldr	r3, [sp, #20]
 800e476:	4343      	muls	r3, r0
 800e478:	185b      	adds	r3, r3, r1
 800e47a:	9305      	str	r3, [sp, #20]
 800e47c:	7813      	ldrb	r3, [r2, #0]
 800e47e:	3201      	adds	r2, #1
 800e480:	e7f1      	b.n	800e466 <_vfiprintf_r+0x282>
 800e482:	cf08      	ldmia	r7!, {r3}
 800e484:	9305      	str	r3, [sp, #20]
 800e486:	2b00      	cmp	r3, #0
 800e488:	da02      	bge.n	800e490 <_vfiprintf_r+0x2ac>
 800e48a:	2301      	movs	r3, #1
 800e48c:	425b      	negs	r3, r3
 800e48e:	9305      	str	r3, [sp, #20]
 800e490:	9207      	str	r2, [sp, #28]
 800e492:	e7d1      	b.n	800e438 <_vfiprintf_r+0x254>
 800e494:	2380      	movs	r3, #128	; 0x80
 800e496:	e7c6      	b.n	800e426 <_vfiprintf_r+0x242>
 800e498:	2100      	movs	r1, #0
 800e49a:	9a07      	ldr	r2, [sp, #28]
 800e49c:	9109      	str	r1, [sp, #36]	; 0x24
 800e49e:	200a      	movs	r0, #10
 800e4a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e4a2:	3b30      	subs	r3, #48	; 0x30
 800e4a4:	4341      	muls	r1, r0
 800e4a6:	185b      	adds	r3, r3, r1
 800e4a8:	9309      	str	r3, [sp, #36]	; 0x24
 800e4aa:	0013      	movs	r3, r2
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	3201      	adds	r2, #1
 800e4b0:	0019      	movs	r1, r3
 800e4b2:	3930      	subs	r1, #48	; 0x30
 800e4b4:	9207      	str	r2, [sp, #28]
 800e4b6:	2909      	cmp	r1, #9
 800e4b8:	d9f1      	bls.n	800e49e <_vfiprintf_r+0x2ba>
 800e4ba:	e737      	b.n	800e32c <_vfiprintf_r+0x148>
 800e4bc:	ffffdfff 	.word	0xffffdfff
 800e4c0:	9b07      	ldr	r3, [sp, #28]
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	2b68      	cmp	r3, #104	; 0x68
 800e4c6:	d105      	bne.n	800e4d4 <_vfiprintf_r+0x2f0>
 800e4c8:	9b07      	ldr	r3, [sp, #28]
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	9307      	str	r3, [sp, #28]
 800e4ce:	2380      	movs	r3, #128	; 0x80
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	e7a8      	b.n	800e426 <_vfiprintf_r+0x242>
 800e4d4:	2340      	movs	r3, #64	; 0x40
 800e4d6:	e7a6      	b.n	800e426 <_vfiprintf_r+0x242>
 800e4d8:	9b07      	ldr	r3, [sp, #28]
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	2b6c      	cmp	r3, #108	; 0x6c
 800e4de:	d104      	bne.n	800e4ea <_vfiprintf_r+0x306>
 800e4e0:	9b07      	ldr	r3, [sp, #28]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	9307      	str	r3, [sp, #28]
 800e4e6:	2320      	movs	r3, #32
 800e4e8:	e79d      	b.n	800e426 <_vfiprintf_r+0x242>
 800e4ea:	2310      	movs	r3, #16
 800e4ec:	e79b      	b.n	800e426 <_vfiprintf_r+0x242>
 800e4ee:	003a      	movs	r2, r7
 800e4f0:	ca08      	ldmia	r2!, {r3}
 800e4f2:	ae27      	add	r6, sp, #156	; 0x9c
 800e4f4:	7033      	strb	r3, [r6, #0]
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	9204      	str	r2, [sp, #16]
 800e4fa:	aa12      	add	r2, sp, #72	; 0x48
 800e4fc:	70d3      	strb	r3, [r2, #3]
 800e4fe:	2201      	movs	r2, #1
 800e500:	930b      	str	r3, [sp, #44]	; 0x2c
 800e502:	9205      	str	r2, [sp, #20]
 800e504:	e0b0      	b.n	800e668 <_vfiprintf_r+0x484>
 800e506:	2310      	movs	r3, #16
 800e508:	431c      	orrs	r4, r3
 800e50a:	06a3      	lsls	r3, r4, #26
 800e50c:	d52a      	bpl.n	800e564 <_vfiprintf_r+0x380>
 800e50e:	2307      	movs	r3, #7
 800e510:	3707      	adds	r7, #7
 800e512:	439f      	bics	r7, r3
 800e514:	0039      	movs	r1, r7
 800e516:	c90c      	ldmia	r1!, {r2, r3}
 800e518:	9200      	str	r2, [sp, #0]
 800e51a:	9301      	str	r3, [sp, #4]
 800e51c:	9104      	str	r1, [sp, #16]
 800e51e:	9a01      	ldr	r2, [sp, #4]
 800e520:	2301      	movs	r3, #1
 800e522:	2a00      	cmp	r2, #0
 800e524:	da09      	bge.n	800e53a <_vfiprintf_r+0x356>
 800e526:	9e00      	ldr	r6, [sp, #0]
 800e528:	9f01      	ldr	r7, [sp, #4]
 800e52a:	2200      	movs	r2, #0
 800e52c:	4271      	negs	r1, r6
 800e52e:	41ba      	sbcs	r2, r7
 800e530:	9100      	str	r1, [sp, #0]
 800e532:	9201      	str	r2, [sp, #4]
 800e534:	212d      	movs	r1, #45	; 0x2d
 800e536:	aa12      	add	r2, sp, #72	; 0x48
 800e538:	70d1      	strb	r1, [r2, #3]
 800e53a:	9901      	ldr	r1, [sp, #4]
 800e53c:	9a00      	ldr	r2, [sp, #0]
 800e53e:	430a      	orrs	r2, r1
 800e540:	9905      	ldr	r1, [sp, #20]
 800e542:	3101      	adds	r1, #1
 800e544:	d100      	bne.n	800e548 <_vfiprintf_r+0x364>
 800e546:	e2e9      	b.n	800eb1c <_vfiprintf_r+0x938>
 800e548:	2180      	movs	r1, #128	; 0x80
 800e54a:	0027      	movs	r7, r4
 800e54c:	438f      	bics	r7, r1
 800e54e:	2a00      	cmp	r2, #0
 800e550:	d000      	beq.n	800e554 <_vfiprintf_r+0x370>
 800e552:	e2e7      	b.n	800eb24 <_vfiprintf_r+0x940>
 800e554:	9a05      	ldr	r2, [sp, #20]
 800e556:	2a00      	cmp	r2, #0
 800e558:	d100      	bne.n	800e55c <_vfiprintf_r+0x378>
 800e55a:	e243      	b.n	800e9e4 <_vfiprintf_r+0x800>
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	d000      	beq.n	800e562 <_vfiprintf_r+0x37e>
 800e560:	e2e3      	b.n	800eb2a <_vfiprintf_r+0x946>
 800e562:	e1e7      	b.n	800e934 <_vfiprintf_r+0x750>
 800e564:	003a      	movs	r2, r7
 800e566:	ca08      	ldmia	r2!, {r3}
 800e568:	9204      	str	r2, [sp, #16]
 800e56a:	06e2      	lsls	r2, r4, #27
 800e56c:	d503      	bpl.n	800e576 <_vfiprintf_r+0x392>
 800e56e:	9300      	str	r3, [sp, #0]
 800e570:	17db      	asrs	r3, r3, #31
 800e572:	9301      	str	r3, [sp, #4]
 800e574:	e7d3      	b.n	800e51e <_vfiprintf_r+0x33a>
 800e576:	0662      	lsls	r2, r4, #25
 800e578:	d501      	bpl.n	800e57e <_vfiprintf_r+0x39a>
 800e57a:	b21b      	sxth	r3, r3
 800e57c:	e7f7      	b.n	800e56e <_vfiprintf_r+0x38a>
 800e57e:	05a2      	lsls	r2, r4, #22
 800e580:	d5f5      	bpl.n	800e56e <_vfiprintf_r+0x38a>
 800e582:	b25b      	sxtb	r3, r3
 800e584:	e7f3      	b.n	800e56e <_vfiprintf_r+0x38a>
 800e586:	1d3b      	adds	r3, r7, #4
 800e588:	9304      	str	r3, [sp, #16]
 800e58a:	06a3      	lsls	r3, r4, #26
 800e58c:	d506      	bpl.n	800e59c <_vfiprintf_r+0x3b8>
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	9a08      	ldr	r2, [sp, #32]
 800e592:	601a      	str	r2, [r3, #0]
 800e594:	17d2      	asrs	r2, r2, #31
 800e596:	605a      	str	r2, [r3, #4]
 800e598:	9f04      	ldr	r7, [sp, #16]
 800e59a:	e694      	b.n	800e2c6 <_vfiprintf_r+0xe2>
 800e59c:	06e3      	lsls	r3, r4, #27
 800e59e:	d503      	bpl.n	800e5a8 <_vfiprintf_r+0x3c4>
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	9a08      	ldr	r2, [sp, #32]
 800e5a4:	601a      	str	r2, [r3, #0]
 800e5a6:	e7f7      	b.n	800e598 <_vfiprintf_r+0x3b4>
 800e5a8:	0663      	lsls	r3, r4, #25
 800e5aa:	d503      	bpl.n	800e5b4 <_vfiprintf_r+0x3d0>
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	9a08      	ldr	r2, [sp, #32]
 800e5b0:	801a      	strh	r2, [r3, #0]
 800e5b2:	e7f1      	b.n	800e598 <_vfiprintf_r+0x3b4>
 800e5b4:	05a4      	lsls	r4, r4, #22
 800e5b6:	d5f3      	bpl.n	800e5a0 <_vfiprintf_r+0x3bc>
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	9a08      	ldr	r2, [sp, #32]
 800e5bc:	701a      	strb	r2, [r3, #0]
 800e5be:	e7eb      	b.n	800e598 <_vfiprintf_r+0x3b4>
 800e5c0:	2310      	movs	r3, #16
 800e5c2:	431c      	orrs	r4, r3
 800e5c4:	2320      	movs	r3, #32
 800e5c6:	0020      	movs	r0, r4
 800e5c8:	4018      	ands	r0, r3
 800e5ca:	421c      	tst	r4, r3
 800e5cc:	d00d      	beq.n	800e5ea <_vfiprintf_r+0x406>
 800e5ce:	3b19      	subs	r3, #25
 800e5d0:	3707      	adds	r7, #7
 800e5d2:	439f      	bics	r7, r3
 800e5d4:	0039      	movs	r1, r7
 800e5d6:	c90c      	ldmia	r1!, {r2, r3}
 800e5d8:	9200      	str	r2, [sp, #0]
 800e5da:	9301      	str	r3, [sp, #4]
 800e5dc:	9104      	str	r1, [sp, #16]
 800e5de:	4bcc      	ldr	r3, [pc, #816]	; (800e910 <_vfiprintf_r+0x72c>)
 800e5e0:	401c      	ands	r4, r3
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	2100      	movs	r1, #0
 800e5e6:	aa12      	add	r2, sp, #72	; 0x48
 800e5e8:	e7a6      	b.n	800e538 <_vfiprintf_r+0x354>
 800e5ea:	003a      	movs	r2, r7
 800e5ec:	ca08      	ldmia	r2!, {r3}
 800e5ee:	0021      	movs	r1, r4
 800e5f0:	9204      	str	r2, [sp, #16]
 800e5f2:	2210      	movs	r2, #16
 800e5f4:	4011      	ands	r1, r2
 800e5f6:	4214      	tst	r4, r2
 800e5f8:	d002      	beq.n	800e600 <_vfiprintf_r+0x41c>
 800e5fa:	9300      	str	r3, [sp, #0]
 800e5fc:	9001      	str	r0, [sp, #4]
 800e5fe:	e7ee      	b.n	800e5de <_vfiprintf_r+0x3fa>
 800e600:	2240      	movs	r2, #64	; 0x40
 800e602:	0020      	movs	r0, r4
 800e604:	4010      	ands	r0, r2
 800e606:	4214      	tst	r4, r2
 800e608:	d003      	beq.n	800e612 <_vfiprintf_r+0x42e>
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	9300      	str	r3, [sp, #0]
 800e60e:	9101      	str	r1, [sp, #4]
 800e610:	e7e5      	b.n	800e5de <_vfiprintf_r+0x3fa>
 800e612:	2280      	movs	r2, #128	; 0x80
 800e614:	0021      	movs	r1, r4
 800e616:	0092      	lsls	r2, r2, #2
 800e618:	4011      	ands	r1, r2
 800e61a:	4214      	tst	r4, r2
 800e61c:	d0f6      	beq.n	800e60c <_vfiprintf_r+0x428>
 800e61e:	b2db      	uxtb	r3, r3
 800e620:	e7eb      	b.n	800e5fa <_vfiprintf_r+0x416>
 800e622:	003b      	movs	r3, r7
 800e624:	cb04      	ldmia	r3!, {r2}
 800e626:	49bb      	ldr	r1, [pc, #748]	; (800e914 <_vfiprintf_r+0x730>)
 800e628:	9304      	str	r3, [sp, #16]
 800e62a:	2300      	movs	r3, #0
 800e62c:	9200      	str	r2, [sp, #0]
 800e62e:	aa13      	add	r2, sp, #76	; 0x4c
 800e630:	8011      	strh	r1, [r2, #0]
 800e632:	4ab9      	ldr	r2, [pc, #740]	; (800e918 <_vfiprintf_r+0x734>)
 800e634:	9301      	str	r3, [sp, #4]
 800e636:	3302      	adds	r3, #2
 800e638:	431c      	orrs	r4, r3
 800e63a:	920c      	str	r2, [sp, #48]	; 0x30
 800e63c:	e7d2      	b.n	800e5e4 <_vfiprintf_r+0x400>
 800e63e:	003b      	movs	r3, r7
 800e640:	2700      	movs	r7, #0
 800e642:	cb40      	ldmia	r3!, {r6}
 800e644:	9304      	str	r3, [sp, #16]
 800e646:	ab12      	add	r3, sp, #72	; 0x48
 800e648:	70df      	strb	r7, [r3, #3]
 800e64a:	9b05      	ldr	r3, [sp, #20]
 800e64c:	3301      	adds	r3, #1
 800e64e:	d100      	bne.n	800e652 <_vfiprintf_r+0x46e>
 800e650:	e0ea      	b.n	800e828 <_vfiprintf_r+0x644>
 800e652:	0039      	movs	r1, r7
 800e654:	0030      	movs	r0, r6
 800e656:	9a05      	ldr	r2, [sp, #20]
 800e658:	f7fe f92e 	bl	800c8b8 <memchr>
 800e65c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e65e:	42b8      	cmp	r0, r7
 800e660:	d002      	beq.n	800e668 <_vfiprintf_r+0x484>
 800e662:	1b83      	subs	r3, r0, r6
 800e664:	9305      	str	r3, [sp, #20]
 800e666:	970b      	str	r7, [sp, #44]	; 0x2c
 800e668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e66a:	9a05      	ldr	r2, [sp, #20]
 800e66c:	930a      	str	r3, [sp, #40]	; 0x28
 800e66e:	4293      	cmp	r3, r2
 800e670:	da00      	bge.n	800e674 <_vfiprintf_r+0x490>
 800e672:	920a      	str	r2, [sp, #40]	; 0x28
 800e674:	ab12      	add	r3, sp, #72	; 0x48
 800e676:	3303      	adds	r3, #3
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	1e5a      	subs	r2, r3, #1
 800e67c:	4193      	sbcs	r3, r2
 800e67e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e680:	18d3      	adds	r3, r2, r3
 800e682:	930a      	str	r3, [sp, #40]	; 0x28
 800e684:	0022      	movs	r2, r4
 800e686:	2302      	movs	r3, #2
 800e688:	401a      	ands	r2, r3
 800e68a:	9210      	str	r2, [sp, #64]	; 0x40
 800e68c:	421c      	tst	r4, r3
 800e68e:	d002      	beq.n	800e696 <_vfiprintf_r+0x4b2>
 800e690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e692:	3302      	adds	r3, #2
 800e694:	930a      	str	r3, [sp, #40]	; 0x28
 800e696:	2384      	movs	r3, #132	; 0x84
 800e698:	0022      	movs	r2, r4
 800e69a:	401a      	ands	r2, r3
 800e69c:	9211      	str	r2, [sp, #68]	; 0x44
 800e69e:	421c      	tst	r4, r3
 800e6a0:	d11e      	bne.n	800e6e0 <_vfiprintf_r+0x4fc>
 800e6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6a6:	1a9f      	subs	r7, r3, r2
 800e6a8:	2f00      	cmp	r7, #0
 800e6aa:	dd19      	ble.n	800e6e0 <_vfiprintf_r+0x4fc>
 800e6ac:	0029      	movs	r1, r5
 800e6ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e6b0:	489a      	ldr	r0, [pc, #616]	; (800e91c <_vfiprintf_r+0x738>)
 800e6b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	3108      	adds	r1, #8
 800e6b8:	6028      	str	r0, [r5, #0]
 800e6ba:	2f10      	cmp	r7, #16
 800e6bc:	dd00      	ble.n	800e6c0 <_vfiprintf_r+0x4dc>
 800e6be:	e1a7      	b.n	800ea10 <_vfiprintf_r+0x82c>
 800e6c0:	606f      	str	r7, [r5, #4]
 800e6c2:	18bf      	adds	r7, r7, r2
 800e6c4:	000d      	movs	r5, r1
 800e6c6:	9716      	str	r7, [sp, #88]	; 0x58
 800e6c8:	9315      	str	r3, [sp, #84]	; 0x54
 800e6ca:	2b07      	cmp	r3, #7
 800e6cc:	dd08      	ble.n	800e6e0 <_vfiprintf_r+0x4fc>
 800e6ce:	9903      	ldr	r1, [sp, #12]
 800e6d0:	9806      	ldr	r0, [sp, #24]
 800e6d2:	aa14      	add	r2, sp, #80	; 0x50
 800e6d4:	f7ff fd51 	bl	800e17a <__sprint_r>
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	d000      	beq.n	800e6de <_vfiprintf_r+0x4fa>
 800e6dc:	e1eb      	b.n	800eab6 <_vfiprintf_r+0x8d2>
 800e6de:	ad17      	add	r5, sp, #92	; 0x5c
 800e6e0:	a912      	add	r1, sp, #72	; 0x48
 800e6e2:	78c8      	ldrb	r0, [r1, #3]
 800e6e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e6e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e6e8:	3103      	adds	r1, #3
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	d012      	beq.n	800e714 <_vfiprintf_r+0x530>
 800e6ee:	6029      	str	r1, [r5, #0]
 800e6f0:	2101      	movs	r1, #1
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	1852      	adds	r2, r2, r1
 800e6f6:	6069      	str	r1, [r5, #4]
 800e6f8:	9216      	str	r2, [sp, #88]	; 0x58
 800e6fa:	9315      	str	r3, [sp, #84]	; 0x54
 800e6fc:	3508      	adds	r5, #8
 800e6fe:	2b07      	cmp	r3, #7
 800e700:	dd08      	ble.n	800e714 <_vfiprintf_r+0x530>
 800e702:	9903      	ldr	r1, [sp, #12]
 800e704:	9806      	ldr	r0, [sp, #24]
 800e706:	aa14      	add	r2, sp, #80	; 0x50
 800e708:	f7ff fd37 	bl	800e17a <__sprint_r>
 800e70c:	2800      	cmp	r0, #0
 800e70e:	d000      	beq.n	800e712 <_vfiprintf_r+0x52e>
 800e710:	e1d1      	b.n	800eab6 <_vfiprintf_r+0x8d2>
 800e712:	ad17      	add	r5, sp, #92	; 0x5c
 800e714:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e716:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e718:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e71a:	2900      	cmp	r1, #0
 800e71c:	d013      	beq.n	800e746 <_vfiprintf_r+0x562>
 800e71e:	a913      	add	r1, sp, #76	; 0x4c
 800e720:	6029      	str	r1, [r5, #0]
 800e722:	2102      	movs	r1, #2
 800e724:	3301      	adds	r3, #1
 800e726:	1852      	adds	r2, r2, r1
 800e728:	6069      	str	r1, [r5, #4]
 800e72a:	9216      	str	r2, [sp, #88]	; 0x58
 800e72c:	9315      	str	r3, [sp, #84]	; 0x54
 800e72e:	3508      	adds	r5, #8
 800e730:	2b07      	cmp	r3, #7
 800e732:	dd08      	ble.n	800e746 <_vfiprintf_r+0x562>
 800e734:	9903      	ldr	r1, [sp, #12]
 800e736:	9806      	ldr	r0, [sp, #24]
 800e738:	aa14      	add	r2, sp, #80	; 0x50
 800e73a:	f7ff fd1e 	bl	800e17a <__sprint_r>
 800e73e:	2800      	cmp	r0, #0
 800e740:	d000      	beq.n	800e744 <_vfiprintf_r+0x560>
 800e742:	e1b8      	b.n	800eab6 <_vfiprintf_r+0x8d2>
 800e744:	ad17      	add	r5, sp, #92	; 0x5c
 800e746:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e748:	2b80      	cmp	r3, #128	; 0x80
 800e74a:	d11e      	bne.n	800e78a <_vfiprintf_r+0x5a6>
 800e74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e74e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e750:	1a9f      	subs	r7, r3, r2
 800e752:	2f00      	cmp	r7, #0
 800e754:	dd19      	ble.n	800e78a <_vfiprintf_r+0x5a6>
 800e756:	0029      	movs	r1, r5
 800e758:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e75a:	4871      	ldr	r0, [pc, #452]	; (800e920 <_vfiprintf_r+0x73c>)
 800e75c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e75e:	3301      	adds	r3, #1
 800e760:	3108      	adds	r1, #8
 800e762:	6028      	str	r0, [r5, #0]
 800e764:	2f10      	cmp	r7, #16
 800e766:	dd00      	ble.n	800e76a <_vfiprintf_r+0x586>
 800e768:	e164      	b.n	800ea34 <_vfiprintf_r+0x850>
 800e76a:	606f      	str	r7, [r5, #4]
 800e76c:	18bf      	adds	r7, r7, r2
 800e76e:	000d      	movs	r5, r1
 800e770:	9716      	str	r7, [sp, #88]	; 0x58
 800e772:	9315      	str	r3, [sp, #84]	; 0x54
 800e774:	2b07      	cmp	r3, #7
 800e776:	dd08      	ble.n	800e78a <_vfiprintf_r+0x5a6>
 800e778:	9903      	ldr	r1, [sp, #12]
 800e77a:	9806      	ldr	r0, [sp, #24]
 800e77c:	aa14      	add	r2, sp, #80	; 0x50
 800e77e:	f7ff fcfc 	bl	800e17a <__sprint_r>
 800e782:	2800      	cmp	r0, #0
 800e784:	d000      	beq.n	800e788 <_vfiprintf_r+0x5a4>
 800e786:	e196      	b.n	800eab6 <_vfiprintf_r+0x8d2>
 800e788:	ad17      	add	r5, sp, #92	; 0x5c
 800e78a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e78c:	9a05      	ldr	r2, [sp, #20]
 800e78e:	1a9f      	subs	r7, r3, r2
 800e790:	2f00      	cmp	r7, #0
 800e792:	dd19      	ble.n	800e7c8 <_vfiprintf_r+0x5e4>
 800e794:	0029      	movs	r1, r5
 800e796:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e798:	4861      	ldr	r0, [pc, #388]	; (800e920 <_vfiprintf_r+0x73c>)
 800e79a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e79c:	3301      	adds	r3, #1
 800e79e:	3108      	adds	r1, #8
 800e7a0:	6028      	str	r0, [r5, #0]
 800e7a2:	2f10      	cmp	r7, #16
 800e7a4:	dd00      	ble.n	800e7a8 <_vfiprintf_r+0x5c4>
 800e7a6:	e157      	b.n	800ea58 <_vfiprintf_r+0x874>
 800e7a8:	606f      	str	r7, [r5, #4]
 800e7aa:	18bf      	adds	r7, r7, r2
 800e7ac:	000d      	movs	r5, r1
 800e7ae:	9716      	str	r7, [sp, #88]	; 0x58
 800e7b0:	9315      	str	r3, [sp, #84]	; 0x54
 800e7b2:	2b07      	cmp	r3, #7
 800e7b4:	dd08      	ble.n	800e7c8 <_vfiprintf_r+0x5e4>
 800e7b6:	9903      	ldr	r1, [sp, #12]
 800e7b8:	9806      	ldr	r0, [sp, #24]
 800e7ba:	aa14      	add	r2, sp, #80	; 0x50
 800e7bc:	f7ff fcdd 	bl	800e17a <__sprint_r>
 800e7c0:	2800      	cmp	r0, #0
 800e7c2:	d000      	beq.n	800e7c6 <_vfiprintf_r+0x5e2>
 800e7c4:	e177      	b.n	800eab6 <_vfiprintf_r+0x8d2>
 800e7c6:	ad17      	add	r5, sp, #92	; 0x5c
 800e7c8:	9b05      	ldr	r3, [sp, #20]
 800e7ca:	9a05      	ldr	r2, [sp, #20]
 800e7cc:	606b      	str	r3, [r5, #4]
 800e7ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e7d0:	602e      	str	r6, [r5, #0]
 800e7d2:	189b      	adds	r3, r3, r2
 800e7d4:	9316      	str	r3, [sp, #88]	; 0x58
 800e7d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7d8:	3508      	adds	r5, #8
 800e7da:	3301      	adds	r3, #1
 800e7dc:	9315      	str	r3, [sp, #84]	; 0x54
 800e7de:	2b07      	cmp	r3, #7
 800e7e0:	dd08      	ble.n	800e7f4 <_vfiprintf_r+0x610>
 800e7e2:	9903      	ldr	r1, [sp, #12]
 800e7e4:	9806      	ldr	r0, [sp, #24]
 800e7e6:	aa14      	add	r2, sp, #80	; 0x50
 800e7e8:	f7ff fcc7 	bl	800e17a <__sprint_r>
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	d000      	beq.n	800e7f2 <_vfiprintf_r+0x60e>
 800e7f0:	e161      	b.n	800eab6 <_vfiprintf_r+0x8d2>
 800e7f2:	ad17      	add	r5, sp, #92	; 0x5c
 800e7f4:	0764      	lsls	r4, r4, #29
 800e7f6:	d500      	bpl.n	800e7fa <_vfiprintf_r+0x616>
 800e7f8:	e140      	b.n	800ea7c <_vfiprintf_r+0x898>
 800e7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7fe:	4293      	cmp	r3, r2
 800e800:	da00      	bge.n	800e804 <_vfiprintf_r+0x620>
 800e802:	0013      	movs	r3, r2
 800e804:	9a08      	ldr	r2, [sp, #32]
 800e806:	18d3      	adds	r3, r2, r3
 800e808:	9308      	str	r3, [sp, #32]
 800e80a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d007      	beq.n	800e820 <_vfiprintf_r+0x63c>
 800e810:	9903      	ldr	r1, [sp, #12]
 800e812:	9806      	ldr	r0, [sp, #24]
 800e814:	aa14      	add	r2, sp, #80	; 0x50
 800e816:	f7ff fcb0 	bl	800e17a <__sprint_r>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	d000      	beq.n	800e820 <_vfiprintf_r+0x63c>
 800e81e:	e14a      	b.n	800eab6 <_vfiprintf_r+0x8d2>
 800e820:	2300      	movs	r3, #0
 800e822:	ad17      	add	r5, sp, #92	; 0x5c
 800e824:	9315      	str	r3, [sp, #84]	; 0x54
 800e826:	e6b7      	b.n	800e598 <_vfiprintf_r+0x3b4>
 800e828:	0030      	movs	r0, r6
 800e82a:	f7f1 fc6b 	bl	8000104 <strlen>
 800e82e:	9005      	str	r0, [sp, #20]
 800e830:	e719      	b.n	800e666 <_vfiprintf_r+0x482>
 800e832:	2310      	movs	r3, #16
 800e834:	431c      	orrs	r4, r3
 800e836:	2320      	movs	r3, #32
 800e838:	0020      	movs	r0, r4
 800e83a:	4018      	ands	r0, r3
 800e83c:	421c      	tst	r4, r3
 800e83e:	d009      	beq.n	800e854 <_vfiprintf_r+0x670>
 800e840:	3b19      	subs	r3, #25
 800e842:	3707      	adds	r7, #7
 800e844:	439f      	bics	r7, r3
 800e846:	0039      	movs	r1, r7
 800e848:	c90c      	ldmia	r1!, {r2, r3}
 800e84a:	9200      	str	r2, [sp, #0]
 800e84c:	9301      	str	r3, [sp, #4]
 800e84e:	9104      	str	r1, [sp, #16]
 800e850:	2301      	movs	r3, #1
 800e852:	e6c7      	b.n	800e5e4 <_vfiprintf_r+0x400>
 800e854:	003b      	movs	r3, r7
 800e856:	cb04      	ldmia	r3!, {r2}
 800e858:	0021      	movs	r1, r4
 800e85a:	9304      	str	r3, [sp, #16]
 800e85c:	2310      	movs	r3, #16
 800e85e:	4019      	ands	r1, r3
 800e860:	421c      	tst	r4, r3
 800e862:	d003      	beq.n	800e86c <_vfiprintf_r+0x688>
 800e864:	9200      	str	r2, [sp, #0]
 800e866:	9001      	str	r0, [sp, #4]
 800e868:	3b0f      	subs	r3, #15
 800e86a:	e6bb      	b.n	800e5e4 <_vfiprintf_r+0x400>
 800e86c:	2340      	movs	r3, #64	; 0x40
 800e86e:	0020      	movs	r0, r4
 800e870:	4018      	ands	r0, r3
 800e872:	421c      	tst	r4, r3
 800e874:	d003      	beq.n	800e87e <_vfiprintf_r+0x69a>
 800e876:	b293      	uxth	r3, r2
 800e878:	9300      	str	r3, [sp, #0]
 800e87a:	9101      	str	r1, [sp, #4]
 800e87c:	e7e8      	b.n	800e850 <_vfiprintf_r+0x66c>
 800e87e:	2380      	movs	r3, #128	; 0x80
 800e880:	0021      	movs	r1, r4
 800e882:	009b      	lsls	r3, r3, #2
 800e884:	4019      	ands	r1, r3
 800e886:	421c      	tst	r4, r3
 800e888:	d003      	beq.n	800e892 <_vfiprintf_r+0x6ae>
 800e88a:	b2d3      	uxtb	r3, r2
 800e88c:	9300      	str	r3, [sp, #0]
 800e88e:	9001      	str	r0, [sp, #4]
 800e890:	e7de      	b.n	800e850 <_vfiprintf_r+0x66c>
 800e892:	9200      	str	r2, [sp, #0]
 800e894:	e7f1      	b.n	800e87a <_vfiprintf_r+0x696>
 800e896:	4a23      	ldr	r2, [pc, #140]	; (800e924 <_vfiprintf_r+0x740>)
 800e898:	0020      	movs	r0, r4
 800e89a:	920c      	str	r2, [sp, #48]	; 0x30
 800e89c:	2220      	movs	r2, #32
 800e89e:	4010      	ands	r0, r2
 800e8a0:	4214      	tst	r4, r2
 800e8a2:	d019      	beq.n	800e8d8 <_vfiprintf_r+0x6f4>
 800e8a4:	3a19      	subs	r2, #25
 800e8a6:	3707      	adds	r7, #7
 800e8a8:	4397      	bics	r7, r2
 800e8aa:	0038      	movs	r0, r7
 800e8ac:	c806      	ldmia	r0!, {r1, r2}
 800e8ae:	9100      	str	r1, [sp, #0]
 800e8b0:	9201      	str	r2, [sp, #4]
 800e8b2:	9004      	str	r0, [sp, #16]
 800e8b4:	07e2      	lsls	r2, r4, #31
 800e8b6:	d509      	bpl.n	800e8cc <_vfiprintf_r+0x6e8>
 800e8b8:	9a00      	ldr	r2, [sp, #0]
 800e8ba:	9901      	ldr	r1, [sp, #4]
 800e8bc:	430a      	orrs	r2, r1
 800e8be:	d005      	beq.n	800e8cc <_vfiprintf_r+0x6e8>
 800e8c0:	aa13      	add	r2, sp, #76	; 0x4c
 800e8c2:	2130      	movs	r1, #48	; 0x30
 800e8c4:	7053      	strb	r3, [r2, #1]
 800e8c6:	2302      	movs	r3, #2
 800e8c8:	7011      	strb	r1, [r2, #0]
 800e8ca:	431c      	orrs	r4, r3
 800e8cc:	4b10      	ldr	r3, [pc, #64]	; (800e910 <_vfiprintf_r+0x72c>)
 800e8ce:	401c      	ands	r4, r3
 800e8d0:	2302      	movs	r3, #2
 800e8d2:	e687      	b.n	800e5e4 <_vfiprintf_r+0x400>
 800e8d4:	4a10      	ldr	r2, [pc, #64]	; (800e918 <_vfiprintf_r+0x734>)
 800e8d6:	e7df      	b.n	800e898 <_vfiprintf_r+0x6b4>
 800e8d8:	0039      	movs	r1, r7
 800e8da:	c904      	ldmia	r1!, {r2}
 800e8dc:	0026      	movs	r6, r4
 800e8de:	9104      	str	r1, [sp, #16]
 800e8e0:	2110      	movs	r1, #16
 800e8e2:	400e      	ands	r6, r1
 800e8e4:	420c      	tst	r4, r1
 800e8e6:	d002      	beq.n	800e8ee <_vfiprintf_r+0x70a>
 800e8e8:	9200      	str	r2, [sp, #0]
 800e8ea:	9001      	str	r0, [sp, #4]
 800e8ec:	e7e2      	b.n	800e8b4 <_vfiprintf_r+0x6d0>
 800e8ee:	2140      	movs	r1, #64	; 0x40
 800e8f0:	0020      	movs	r0, r4
 800e8f2:	4008      	ands	r0, r1
 800e8f4:	420c      	tst	r4, r1
 800e8f6:	d003      	beq.n	800e900 <_vfiprintf_r+0x71c>
 800e8f8:	b292      	uxth	r2, r2
 800e8fa:	9200      	str	r2, [sp, #0]
 800e8fc:	9601      	str	r6, [sp, #4]
 800e8fe:	e7d9      	b.n	800e8b4 <_vfiprintf_r+0x6d0>
 800e900:	2180      	movs	r1, #128	; 0x80
 800e902:	0026      	movs	r6, r4
 800e904:	0089      	lsls	r1, r1, #2
 800e906:	400e      	ands	r6, r1
 800e908:	420c      	tst	r4, r1
 800e90a:	d0f6      	beq.n	800e8fa <_vfiprintf_r+0x716>
 800e90c:	b2d2      	uxtb	r2, r2
 800e90e:	e7eb      	b.n	800e8e8 <_vfiprintf_r+0x704>
 800e910:	fffffbff 	.word	0xfffffbff
 800e914:	00007830 	.word	0x00007830
 800e918:	0800f9bc 	.word	0x0800f9bc
 800e91c:	0800fac9 	.word	0x0800fac9
 800e920:	0800fad9 	.word	0x0800fad9
 800e924:	0800f9cd 	.word	0x0800f9cd
 800e928:	9b01      	ldr	r3, [sp, #4]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d109      	bne.n	800e942 <_vfiprintf_r+0x75e>
 800e92e:	9b00      	ldr	r3, [sp, #0]
 800e930:	2b09      	cmp	r3, #9
 800e932:	d806      	bhi.n	800e942 <_vfiprintf_r+0x75e>
 800e934:	26b7      	movs	r6, #183	; 0xb7
 800e936:	ab12      	add	r3, sp, #72	; 0x48
 800e938:	18f6      	adds	r6, r6, r3
 800e93a:	9b00      	ldr	r3, [sp, #0]
 800e93c:	3330      	adds	r3, #48	; 0x30
 800e93e:	7033      	strb	r3, [r6, #0]
 800e940:	e115      	b.n	800eb6e <_vfiprintf_r+0x98a>
 800e942:	2380      	movs	r3, #128	; 0x80
 800e944:	2400      	movs	r4, #0
 800e946:	00db      	lsls	r3, r3, #3
 800e948:	403b      	ands	r3, r7
 800e94a:	ae40      	add	r6, sp, #256	; 0x100
 800e94c:	930a      	str	r3, [sp, #40]	; 0x28
 800e94e:	220a      	movs	r2, #10
 800e950:	9800      	ldr	r0, [sp, #0]
 800e952:	9901      	ldr	r1, [sp, #4]
 800e954:	2300      	movs	r3, #0
 800e956:	f7f1 fda5 	bl	80004a4 <__aeabi_uldivmod>
 800e95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e95c:	3e01      	subs	r6, #1
 800e95e:	3230      	adds	r2, #48	; 0x30
 800e960:	900b      	str	r0, [sp, #44]	; 0x2c
 800e962:	9110      	str	r1, [sp, #64]	; 0x40
 800e964:	7032      	strb	r2, [r6, #0]
 800e966:	3401      	adds	r4, #1
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d01a      	beq.n	800e9a2 <_vfiprintf_r+0x7be>
 800e96c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	42a3      	cmp	r3, r4
 800e972:	d116      	bne.n	800e9a2 <_vfiprintf_r+0x7be>
 800e974:	2cff      	cmp	r4, #255	; 0xff
 800e976:	d014      	beq.n	800e9a2 <_vfiprintf_r+0x7be>
 800e978:	9b01      	ldr	r3, [sp, #4]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d102      	bne.n	800e984 <_vfiprintf_r+0x7a0>
 800e97e:	9b00      	ldr	r3, [sp, #0]
 800e980:	2b09      	cmp	r3, #9
 800e982:	d90e      	bls.n	800e9a2 <_vfiprintf_r+0x7be>
 800e984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e986:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e988:	1af6      	subs	r6, r6, r3
 800e98a:	001a      	movs	r2, r3
 800e98c:	0030      	movs	r0, r6
 800e98e:	f7f9 fffc 	bl	800898a <strncpy>
 800e992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e994:	2400      	movs	r4, #0
 800e996:	785b      	ldrb	r3, [r3, #1]
 800e998:	1e5a      	subs	r2, r3, #1
 800e99a:	4193      	sbcs	r3, r2
 800e99c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e99e:	18d3      	adds	r3, r2, r3
 800e9a0:	930d      	str	r3, [sp, #52]	; 0x34
 800e9a2:	9b01      	ldr	r3, [sp, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d103      	bne.n	800e9b0 <_vfiprintf_r+0x7cc>
 800e9a8:	9b00      	ldr	r3, [sp, #0]
 800e9aa:	2b09      	cmp	r3, #9
 800e9ac:	d800      	bhi.n	800e9b0 <_vfiprintf_r+0x7cc>
 800e9ae:	e0de      	b.n	800eb6e <_vfiprintf_r+0x98a>
 800e9b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9b2:	9300      	str	r3, [sp, #0]
 800e9b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e9b6:	9301      	str	r3, [sp, #4]
 800e9b8:	e7c9      	b.n	800e94e <_vfiprintf_r+0x76a>
 800e9ba:	200f      	movs	r0, #15
 800e9bc:	9b00      	ldr	r3, [sp, #0]
 800e9be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9c0:	4003      	ands	r3, r0
 800e9c2:	5cd3      	ldrb	r3, [r2, r3]
 800e9c4:	3e01      	subs	r6, #1
 800e9c6:	7033      	strb	r3, [r6, #0]
 800e9c8:	9b01      	ldr	r3, [sp, #4]
 800e9ca:	0719      	lsls	r1, r3, #28
 800e9cc:	9b00      	ldr	r3, [sp, #0]
 800e9ce:	091a      	lsrs	r2, r3, #4
 800e9d0:	9b01      	ldr	r3, [sp, #4]
 800e9d2:	4311      	orrs	r1, r2
 800e9d4:	091b      	lsrs	r3, r3, #4
 800e9d6:	9301      	str	r3, [sp, #4]
 800e9d8:	000b      	movs	r3, r1
 800e9da:	9a01      	ldr	r2, [sp, #4]
 800e9dc:	9100      	str	r1, [sp, #0]
 800e9de:	4313      	orrs	r3, r2
 800e9e0:	d1ec      	bne.n	800e9bc <_vfiprintf_r+0x7d8>
 800e9e2:	e0c4      	b.n	800eb6e <_vfiprintf_r+0x98a>
 800e9e4:	ae40      	add	r6, sp, #256	; 0x100
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d000      	beq.n	800e9ec <_vfiprintf_r+0x808>
 800e9ea:	e0c0      	b.n	800eb6e <_vfiprintf_r+0x98a>
 800e9ec:	07e4      	lsls	r4, r4, #31
 800e9ee:	d400      	bmi.n	800e9f2 <_vfiprintf_r+0x80e>
 800e9f0:	e0bd      	b.n	800eb6e <_vfiprintf_r+0x98a>
 800e9f2:	26b7      	movs	r6, #183	; 0xb7
 800e9f4:	ab12      	add	r3, sp, #72	; 0x48
 800e9f6:	18f6      	adds	r6, r6, r3
 800e9f8:	2330      	movs	r3, #48	; 0x30
 800e9fa:	e7a0      	b.n	800e93e <_vfiprintf_r+0x75a>
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d100      	bne.n	800ea02 <_vfiprintf_r+0x81e>
 800ea00:	e07e      	b.n	800eb00 <_vfiprintf_r+0x91c>
 800ea02:	ae27      	add	r6, sp, #156	; 0x9c
 800ea04:	7033      	strb	r3, [r6, #0]
 800ea06:	2300      	movs	r3, #0
 800ea08:	aa12      	add	r2, sp, #72	; 0x48
 800ea0a:	70d3      	strb	r3, [r2, #3]
 800ea0c:	9704      	str	r7, [sp, #16]
 800ea0e:	e576      	b.n	800e4fe <_vfiprintf_r+0x31a>
 800ea10:	2010      	movs	r0, #16
 800ea12:	1812      	adds	r2, r2, r0
 800ea14:	6068      	str	r0, [r5, #4]
 800ea16:	9216      	str	r2, [sp, #88]	; 0x58
 800ea18:	9315      	str	r3, [sp, #84]	; 0x54
 800ea1a:	2b07      	cmp	r3, #7
 800ea1c:	dd07      	ble.n	800ea2e <_vfiprintf_r+0x84a>
 800ea1e:	9903      	ldr	r1, [sp, #12]
 800ea20:	9806      	ldr	r0, [sp, #24]
 800ea22:	aa14      	add	r2, sp, #80	; 0x50
 800ea24:	f7ff fba9 	bl	800e17a <__sprint_r>
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	d144      	bne.n	800eab6 <_vfiprintf_r+0x8d2>
 800ea2c:	a917      	add	r1, sp, #92	; 0x5c
 800ea2e:	000d      	movs	r5, r1
 800ea30:	3f10      	subs	r7, #16
 800ea32:	e63b      	b.n	800e6ac <_vfiprintf_r+0x4c8>
 800ea34:	2010      	movs	r0, #16
 800ea36:	1812      	adds	r2, r2, r0
 800ea38:	6068      	str	r0, [r5, #4]
 800ea3a:	9216      	str	r2, [sp, #88]	; 0x58
 800ea3c:	9315      	str	r3, [sp, #84]	; 0x54
 800ea3e:	2b07      	cmp	r3, #7
 800ea40:	dd07      	ble.n	800ea52 <_vfiprintf_r+0x86e>
 800ea42:	9903      	ldr	r1, [sp, #12]
 800ea44:	9806      	ldr	r0, [sp, #24]
 800ea46:	aa14      	add	r2, sp, #80	; 0x50
 800ea48:	f7ff fb97 	bl	800e17a <__sprint_r>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d132      	bne.n	800eab6 <_vfiprintf_r+0x8d2>
 800ea50:	a917      	add	r1, sp, #92	; 0x5c
 800ea52:	000d      	movs	r5, r1
 800ea54:	3f10      	subs	r7, #16
 800ea56:	e67e      	b.n	800e756 <_vfiprintf_r+0x572>
 800ea58:	2010      	movs	r0, #16
 800ea5a:	1812      	adds	r2, r2, r0
 800ea5c:	6068      	str	r0, [r5, #4]
 800ea5e:	9216      	str	r2, [sp, #88]	; 0x58
 800ea60:	9315      	str	r3, [sp, #84]	; 0x54
 800ea62:	2b07      	cmp	r3, #7
 800ea64:	dd07      	ble.n	800ea76 <_vfiprintf_r+0x892>
 800ea66:	9903      	ldr	r1, [sp, #12]
 800ea68:	9806      	ldr	r0, [sp, #24]
 800ea6a:	aa14      	add	r2, sp, #80	; 0x50
 800ea6c:	f7ff fb85 	bl	800e17a <__sprint_r>
 800ea70:	2800      	cmp	r0, #0
 800ea72:	d120      	bne.n	800eab6 <_vfiprintf_r+0x8d2>
 800ea74:	a917      	add	r1, sp, #92	; 0x5c
 800ea76:	000d      	movs	r5, r1
 800ea78:	3f10      	subs	r7, #16
 800ea7a:	e68b      	b.n	800e794 <_vfiprintf_r+0x5b0>
 800ea7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea80:	2610      	movs	r6, #16
 800ea82:	1a9c      	subs	r4, r3, r2
 800ea84:	2c00      	cmp	r4, #0
 800ea86:	dc00      	bgt.n	800ea8a <_vfiprintf_r+0x8a6>
 800ea88:	e6b7      	b.n	800e7fa <_vfiprintf_r+0x616>
 800ea8a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ea8c:	4a3b      	ldr	r2, [pc, #236]	; (800eb7c <_vfiprintf_r+0x998>)
 800ea8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ea90:	3101      	adds	r1, #1
 800ea92:	602a      	str	r2, [r5, #0]
 800ea94:	2c10      	cmp	r4, #16
 800ea96:	dc22      	bgt.n	800eade <_vfiprintf_r+0x8fa>
 800ea98:	606c      	str	r4, [r5, #4]
 800ea9a:	18e4      	adds	r4, r4, r3
 800ea9c:	9416      	str	r4, [sp, #88]	; 0x58
 800ea9e:	9115      	str	r1, [sp, #84]	; 0x54
 800eaa0:	2907      	cmp	r1, #7
 800eaa2:	dc00      	bgt.n	800eaa6 <_vfiprintf_r+0x8c2>
 800eaa4:	e6a9      	b.n	800e7fa <_vfiprintf_r+0x616>
 800eaa6:	9903      	ldr	r1, [sp, #12]
 800eaa8:	9806      	ldr	r0, [sp, #24]
 800eaaa:	aa14      	add	r2, sp, #80	; 0x50
 800eaac:	f7ff fb65 	bl	800e17a <__sprint_r>
 800eab0:	2800      	cmp	r0, #0
 800eab2:	d100      	bne.n	800eab6 <_vfiprintf_r+0x8d2>
 800eab4:	e6a1      	b.n	800e7fa <_vfiprintf_r+0x616>
 800eab6:	9b03      	ldr	r3, [sp, #12]
 800eab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eaba:	07db      	lsls	r3, r3, #31
 800eabc:	d407      	bmi.n	800eace <_vfiprintf_r+0x8ea>
 800eabe:	9b03      	ldr	r3, [sp, #12]
 800eac0:	899b      	ldrh	r3, [r3, #12]
 800eac2:	059b      	lsls	r3, r3, #22
 800eac4:	d403      	bmi.n	800eace <_vfiprintf_r+0x8ea>
 800eac6:	9b03      	ldr	r3, [sp, #12]
 800eac8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800eaca:	f7fa f808 	bl	8008ade <__retarget_lock_release_recursive>
 800eace:	9b03      	ldr	r3, [sp, #12]
 800ead0:	899b      	ldrh	r3, [r3, #12]
 800ead2:	065b      	lsls	r3, r3, #25
 800ead4:	d401      	bmi.n	800eada <_vfiprintf_r+0x8f6>
 800ead6:	f7ff fbc3 	bl	800e260 <_vfiprintf_r+0x7c>
 800eada:	f7ff fbbe 	bl	800e25a <_vfiprintf_r+0x76>
 800eade:	3310      	adds	r3, #16
 800eae0:	606e      	str	r6, [r5, #4]
 800eae2:	9316      	str	r3, [sp, #88]	; 0x58
 800eae4:	9115      	str	r1, [sp, #84]	; 0x54
 800eae6:	3508      	adds	r5, #8
 800eae8:	2907      	cmp	r1, #7
 800eaea:	dd07      	ble.n	800eafc <_vfiprintf_r+0x918>
 800eaec:	9903      	ldr	r1, [sp, #12]
 800eaee:	9806      	ldr	r0, [sp, #24]
 800eaf0:	aa14      	add	r2, sp, #80	; 0x50
 800eaf2:	f7ff fb42 	bl	800e17a <__sprint_r>
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	d1dd      	bne.n	800eab6 <_vfiprintf_r+0x8d2>
 800eafa:	ad17      	add	r5, sp, #92	; 0x5c
 800eafc:	3c10      	subs	r4, #16
 800eafe:	e7c4      	b.n	800ea8a <_vfiprintf_r+0x8a6>
 800eb00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d102      	bne.n	800eb0c <_vfiprintf_r+0x928>
 800eb06:	2300      	movs	r3, #0
 800eb08:	9315      	str	r3, [sp, #84]	; 0x54
 800eb0a:	e7d4      	b.n	800eab6 <_vfiprintf_r+0x8d2>
 800eb0c:	9903      	ldr	r1, [sp, #12]
 800eb0e:	9806      	ldr	r0, [sp, #24]
 800eb10:	aa14      	add	r2, sp, #80	; 0x50
 800eb12:	f7ff fb32 	bl	800e17a <__sprint_r>
 800eb16:	2800      	cmp	r0, #0
 800eb18:	d0f5      	beq.n	800eb06 <_vfiprintf_r+0x922>
 800eb1a:	e7cc      	b.n	800eab6 <_vfiprintf_r+0x8d2>
 800eb1c:	0027      	movs	r7, r4
 800eb1e:	2a00      	cmp	r2, #0
 800eb20:	d100      	bne.n	800eb24 <_vfiprintf_r+0x940>
 800eb22:	e51b      	b.n	800e55c <_vfiprintf_r+0x378>
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d100      	bne.n	800eb2a <_vfiprintf_r+0x946>
 800eb28:	e6fe      	b.n	800e928 <_vfiprintf_r+0x744>
 800eb2a:	ae40      	add	r6, sp, #256	; 0x100
 800eb2c:	2b02      	cmp	r3, #2
 800eb2e:	d100      	bne.n	800eb32 <_vfiprintf_r+0x94e>
 800eb30:	e743      	b.n	800e9ba <_vfiprintf_r+0x7d6>
 800eb32:	2307      	movs	r3, #7
 800eb34:	469c      	mov	ip, r3
 800eb36:	4663      	mov	r3, ip
 800eb38:	9900      	ldr	r1, [sp, #0]
 800eb3a:	0032      	movs	r2, r6
 800eb3c:	400b      	ands	r3, r1
 800eb3e:	9901      	ldr	r1, [sp, #4]
 800eb40:	3e01      	subs	r6, #1
 800eb42:	074c      	lsls	r4, r1, #29
 800eb44:	9900      	ldr	r1, [sp, #0]
 800eb46:	3330      	adds	r3, #48	; 0x30
 800eb48:	08c8      	lsrs	r0, r1, #3
 800eb4a:	9901      	ldr	r1, [sp, #4]
 800eb4c:	4304      	orrs	r4, r0
 800eb4e:	08c9      	lsrs	r1, r1, #3
 800eb50:	9101      	str	r1, [sp, #4]
 800eb52:	0021      	movs	r1, r4
 800eb54:	9801      	ldr	r0, [sp, #4]
 800eb56:	7033      	strb	r3, [r6, #0]
 800eb58:	9400      	str	r4, [sp, #0]
 800eb5a:	4301      	orrs	r1, r0
 800eb5c:	d1eb      	bne.n	800eb36 <_vfiprintf_r+0x952>
 800eb5e:	07f9      	lsls	r1, r7, #31
 800eb60:	d505      	bpl.n	800eb6e <_vfiprintf_r+0x98a>
 800eb62:	2b30      	cmp	r3, #48	; 0x30
 800eb64:	d003      	beq.n	800eb6e <_vfiprintf_r+0x98a>
 800eb66:	2330      	movs	r3, #48	; 0x30
 800eb68:	3e01      	subs	r6, #1
 800eb6a:	7033      	strb	r3, [r6, #0]
 800eb6c:	1e96      	subs	r6, r2, #2
 800eb6e:	9b05      	ldr	r3, [sp, #20]
 800eb70:	003c      	movs	r4, r7
 800eb72:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb74:	ab40      	add	r3, sp, #256	; 0x100
 800eb76:	1b9b      	subs	r3, r3, r6
 800eb78:	9305      	str	r3, [sp, #20]
 800eb7a:	e575      	b.n	800e668 <_vfiprintf_r+0x484>
 800eb7c:	0800fac9 	.word	0x0800fac9

0800eb80 <__sbprintf>:
 800eb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb82:	0015      	movs	r5, r2
 800eb84:	2202      	movs	r2, #2
 800eb86:	4c1e      	ldr	r4, [pc, #120]	; (800ec00 <__sbprintf+0x80>)
 800eb88:	001f      	movs	r7, r3
 800eb8a:	898b      	ldrh	r3, [r1, #12]
 800eb8c:	44a5      	add	sp, r4
 800eb8e:	4393      	bics	r3, r2
 800eb90:	466a      	mov	r2, sp
 800eb92:	8193      	strh	r3, [r2, #12]
 800eb94:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800eb96:	0006      	movs	r6, r0
 800eb98:	9319      	str	r3, [sp, #100]	; 0x64
 800eb9a:	89cb      	ldrh	r3, [r1, #14]
 800eb9c:	a816      	add	r0, sp, #88	; 0x58
 800eb9e:	81d3      	strh	r3, [r2, #14]
 800eba0:	69cb      	ldr	r3, [r1, #28]
 800eba2:	000c      	movs	r4, r1
 800eba4:	9307      	str	r3, [sp, #28]
 800eba6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800eba8:	9309      	str	r3, [sp, #36]	; 0x24
 800ebaa:	ab1a      	add	r3, sp, #104	; 0x68
 800ebac:	9300      	str	r3, [sp, #0]
 800ebae:	9304      	str	r3, [sp, #16]
 800ebb0:	2380      	movs	r3, #128	; 0x80
 800ebb2:	00db      	lsls	r3, r3, #3
 800ebb4:	9302      	str	r3, [sp, #8]
 800ebb6:	9305      	str	r3, [sp, #20]
 800ebb8:	2300      	movs	r3, #0
 800ebba:	9306      	str	r3, [sp, #24]
 800ebbc:	f7f9 ff8c 	bl	8008ad8 <__retarget_lock_init_recursive>
 800ebc0:	002a      	movs	r2, r5
 800ebc2:	003b      	movs	r3, r7
 800ebc4:	4669      	mov	r1, sp
 800ebc6:	0030      	movs	r0, r6
 800ebc8:	f7ff fb0c 	bl	800e1e4 <_vfiprintf_r>
 800ebcc:	1e05      	subs	r5, r0, #0
 800ebce:	db07      	blt.n	800ebe0 <__sbprintf+0x60>
 800ebd0:	4669      	mov	r1, sp
 800ebd2:	0030      	movs	r0, r6
 800ebd4:	f7fd fdf6 	bl	800c7c4 <_fflush_r>
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	d001      	beq.n	800ebe0 <__sbprintf+0x60>
 800ebdc:	2501      	movs	r5, #1
 800ebde:	426d      	negs	r5, r5
 800ebe0:	466b      	mov	r3, sp
 800ebe2:	899a      	ldrh	r2, [r3, #12]
 800ebe4:	2340      	movs	r3, #64	; 0x40
 800ebe6:	421a      	tst	r2, r3
 800ebe8:	d002      	beq.n	800ebf0 <__sbprintf+0x70>
 800ebea:	89a2      	ldrh	r2, [r4, #12]
 800ebec:	4313      	orrs	r3, r2
 800ebee:	81a3      	strh	r3, [r4, #12]
 800ebf0:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ebf2:	f7f9 ff72 	bl	8008ada <__retarget_lock_close_recursive>
 800ebf6:	0028      	movs	r0, r5
 800ebf8:	4b02      	ldr	r3, [pc, #8]	; (800ec04 <__sbprintf+0x84>)
 800ebfa:	449d      	add	sp, r3
 800ebfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebfe:	46c0      	nop			; (mov r8, r8)
 800ec00:	fffffb94 	.word	0xfffffb94
 800ec04:	0000046c 	.word	0x0000046c

0800ec08 <__sfvwrite_r>:
 800ec08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec0a:	6893      	ldr	r3, [r2, #8]
 800ec0c:	b087      	sub	sp, #28
 800ec0e:	000c      	movs	r4, r1
 800ec10:	9002      	str	r0, [sp, #8]
 800ec12:	9204      	str	r2, [sp, #16]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d102      	bne.n	800ec1e <__sfvwrite_r+0x16>
 800ec18:	2000      	movs	r0, #0
 800ec1a:	b007      	add	sp, #28
 800ec1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec1e:	898b      	ldrh	r3, [r1, #12]
 800ec20:	071b      	lsls	r3, r3, #28
 800ec22:	d557      	bpl.n	800ecd4 <__sfvwrite_r+0xcc>
 800ec24:	690b      	ldr	r3, [r1, #16]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d054      	beq.n	800ecd4 <__sfvwrite_r+0xcc>
 800ec2a:	9b04      	ldr	r3, [sp, #16]
 800ec2c:	2202      	movs	r2, #2
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	9301      	str	r3, [sp, #4]
 800ec32:	89a3      	ldrh	r3, [r4, #12]
 800ec34:	001f      	movs	r7, r3
 800ec36:	4017      	ands	r7, r2
 800ec38:	4213      	tst	r3, r2
 800ec3a:	d171      	bne.n	800ed20 <__sfvwrite_r+0x118>
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	2101      	movs	r1, #1
 800ec40:	401a      	ands	r2, r3
 800ec42:	420b      	tst	r3, r1
 800ec44:	d100      	bne.n	800ec48 <__sfvwrite_r+0x40>
 800ec46:	e0a5      	b.n	800ed94 <__sfvwrite_r+0x18c>
 800ec48:	0038      	movs	r0, r7
 800ec4a:	003e      	movs	r6, r7
 800ec4c:	9703      	str	r7, [sp, #12]
 800ec4e:	9b03      	ldr	r3, [sp, #12]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d100      	bne.n	800ec56 <__sfvwrite_r+0x4e>
 800ec54:	e10b      	b.n	800ee6e <__sfvwrite_r+0x266>
 800ec56:	2800      	cmp	r0, #0
 800ec58:	d10a      	bne.n	800ec70 <__sfvwrite_r+0x68>
 800ec5a:	001a      	movs	r2, r3
 800ec5c:	210a      	movs	r1, #10
 800ec5e:	0030      	movs	r0, r6
 800ec60:	f7fd fe2a 	bl	800c8b8 <memchr>
 800ec64:	9b03      	ldr	r3, [sp, #12]
 800ec66:	1c5f      	adds	r7, r3, #1
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	d001      	beq.n	800ec70 <__sfvwrite_r+0x68>
 800ec6c:	3001      	adds	r0, #1
 800ec6e:	1b87      	subs	r7, r0, r6
 800ec70:	9b03      	ldr	r3, [sp, #12]
 800ec72:	9705      	str	r7, [sp, #20]
 800ec74:	429f      	cmp	r7, r3
 800ec76:	d900      	bls.n	800ec7a <__sfvwrite_r+0x72>
 800ec78:	9305      	str	r3, [sp, #20]
 800ec7a:	6820      	ldr	r0, [r4, #0]
 800ec7c:	6922      	ldr	r2, [r4, #16]
 800ec7e:	68a5      	ldr	r5, [r4, #8]
 800ec80:	6963      	ldr	r3, [r4, #20]
 800ec82:	4290      	cmp	r0, r2
 800ec84:	d800      	bhi.n	800ec88 <__sfvwrite_r+0x80>
 800ec86:	e0fb      	b.n	800ee80 <__sfvwrite_r+0x278>
 800ec88:	9a05      	ldr	r2, [sp, #20]
 800ec8a:	18ed      	adds	r5, r5, r3
 800ec8c:	42aa      	cmp	r2, r5
 800ec8e:	dc00      	bgt.n	800ec92 <__sfvwrite_r+0x8a>
 800ec90:	e0f6      	b.n	800ee80 <__sfvwrite_r+0x278>
 800ec92:	0031      	movs	r1, r6
 800ec94:	002a      	movs	r2, r5
 800ec96:	f000 fa1e 	bl	800f0d6 <memmove>
 800ec9a:	6823      	ldr	r3, [r4, #0]
 800ec9c:	0021      	movs	r1, r4
 800ec9e:	195b      	adds	r3, r3, r5
 800eca0:	9802      	ldr	r0, [sp, #8]
 800eca2:	6023      	str	r3, [r4, #0]
 800eca4:	f7fd fd8e 	bl	800c7c4 <_fflush_r>
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	d16e      	bne.n	800ed8a <__sfvwrite_r+0x182>
 800ecac:	2001      	movs	r0, #1
 800ecae:	1b7f      	subs	r7, r7, r5
 800ecb0:	d105      	bne.n	800ecbe <__sfvwrite_r+0xb6>
 800ecb2:	0021      	movs	r1, r4
 800ecb4:	9802      	ldr	r0, [sp, #8]
 800ecb6:	f7fd fd85 	bl	800c7c4 <_fflush_r>
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	d165      	bne.n	800ed8a <__sfvwrite_r+0x182>
 800ecbe:	9b03      	ldr	r3, [sp, #12]
 800ecc0:	9a04      	ldr	r2, [sp, #16]
 800ecc2:	1b5b      	subs	r3, r3, r5
 800ecc4:	9303      	str	r3, [sp, #12]
 800ecc6:	9b04      	ldr	r3, [sp, #16]
 800ecc8:	1976      	adds	r6, r6, r5
 800ecca:	689b      	ldr	r3, [r3, #8]
 800eccc:	1b5b      	subs	r3, r3, r5
 800ecce:	6093      	str	r3, [r2, #8]
 800ecd0:	d1bd      	bne.n	800ec4e <__sfvwrite_r+0x46>
 800ecd2:	e7a1      	b.n	800ec18 <__sfvwrite_r+0x10>
 800ecd4:	0021      	movs	r1, r4
 800ecd6:	9802      	ldr	r0, [sp, #8]
 800ecd8:	f000 f932 	bl	800ef40 <__swsetup_r>
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	d0a4      	beq.n	800ec2a <__sfvwrite_r+0x22>
 800ece0:	2001      	movs	r0, #1
 800ece2:	4240      	negs	r0, r0
 800ece4:	e799      	b.n	800ec1a <__sfvwrite_r+0x12>
 800ece6:	9b01      	ldr	r3, [sp, #4]
 800ece8:	681e      	ldr	r6, [r3, #0]
 800ecea:	685d      	ldr	r5, [r3, #4]
 800ecec:	3308      	adds	r3, #8
 800ecee:	9301      	str	r3, [sp, #4]
 800ecf0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800ecf2:	69e1      	ldr	r1, [r4, #28]
 800ecf4:	2d00      	cmp	r5, #0
 800ecf6:	d0f6      	beq.n	800ece6 <__sfvwrite_r+0xde>
 800ecf8:	4a6e      	ldr	r2, [pc, #440]	; (800eeb4 <__sfvwrite_r+0x2ac>)
 800ecfa:	002b      	movs	r3, r5
 800ecfc:	4295      	cmp	r5, r2
 800ecfe:	d900      	bls.n	800ed02 <__sfvwrite_r+0xfa>
 800ed00:	0013      	movs	r3, r2
 800ed02:	0032      	movs	r2, r6
 800ed04:	9802      	ldr	r0, [sp, #8]
 800ed06:	47b8      	blx	r7
 800ed08:	2800      	cmp	r0, #0
 800ed0a:	dd3e      	ble.n	800ed8a <__sfvwrite_r+0x182>
 800ed0c:	9b04      	ldr	r3, [sp, #16]
 800ed0e:	9a04      	ldr	r2, [sp, #16]
 800ed10:	689b      	ldr	r3, [r3, #8]
 800ed12:	1836      	adds	r6, r6, r0
 800ed14:	1a1b      	subs	r3, r3, r0
 800ed16:	1a2d      	subs	r5, r5, r0
 800ed18:	6093      	str	r3, [r2, #8]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d1e8      	bne.n	800ecf0 <__sfvwrite_r+0xe8>
 800ed1e:	e77b      	b.n	800ec18 <__sfvwrite_r+0x10>
 800ed20:	2600      	movs	r6, #0
 800ed22:	0035      	movs	r5, r6
 800ed24:	e7e4      	b.n	800ecf0 <__sfvwrite_r+0xe8>
 800ed26:	9b01      	ldr	r3, [sp, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	9303      	str	r3, [sp, #12]
 800ed2c:	9b01      	ldr	r3, [sp, #4]
 800ed2e:	685d      	ldr	r5, [r3, #4]
 800ed30:	3308      	adds	r3, #8
 800ed32:	9301      	str	r3, [sp, #4]
 800ed34:	220c      	movs	r2, #12
 800ed36:	5ea3      	ldrsh	r3, [r4, r2]
 800ed38:	6820      	ldr	r0, [r4, #0]
 800ed3a:	68a6      	ldr	r6, [r4, #8]
 800ed3c:	2d00      	cmp	r5, #0
 800ed3e:	d0f2      	beq.n	800ed26 <__sfvwrite_r+0x11e>
 800ed40:	2180      	movs	r1, #128	; 0x80
 800ed42:	0089      	lsls	r1, r1, #2
 800ed44:	b29a      	uxth	r2, r3
 800ed46:	420b      	tst	r3, r1
 800ed48:	d062      	beq.n	800ee10 <__sfvwrite_r+0x208>
 800ed4a:	42ae      	cmp	r6, r5
 800ed4c:	d837      	bhi.n	800edbe <__sfvwrite_r+0x1b6>
 800ed4e:	2390      	movs	r3, #144	; 0x90
 800ed50:	00db      	lsls	r3, r3, #3
 800ed52:	421a      	tst	r2, r3
 800ed54:	d033      	beq.n	800edbe <__sfvwrite_r+0x1b6>
 800ed56:	6921      	ldr	r1, [r4, #16]
 800ed58:	1a43      	subs	r3, r0, r1
 800ed5a:	2003      	movs	r0, #3
 800ed5c:	9305      	str	r3, [sp, #20]
 800ed5e:	6963      	ldr	r3, [r4, #20]
 800ed60:	4343      	muls	r3, r0
 800ed62:	0fdf      	lsrs	r7, r3, #31
 800ed64:	18ff      	adds	r7, r7, r3
 800ed66:	9b05      	ldr	r3, [sp, #20]
 800ed68:	107f      	asrs	r7, r7, #1
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	195b      	adds	r3, r3, r5
 800ed6e:	42bb      	cmp	r3, r7
 800ed70:	d900      	bls.n	800ed74 <__sfvwrite_r+0x16c>
 800ed72:	001f      	movs	r7, r3
 800ed74:	0552      	lsls	r2, r2, #21
 800ed76:	d53c      	bpl.n	800edf2 <__sfvwrite_r+0x1ea>
 800ed78:	0039      	movs	r1, r7
 800ed7a:	9802      	ldr	r0, [sp, #8]
 800ed7c:	f7f8 fbae 	bl	80074dc <_malloc_r>
 800ed80:	1e06      	subs	r6, r0, #0
 800ed82:	d10a      	bne.n	800ed9a <__sfvwrite_r+0x192>
 800ed84:	230c      	movs	r3, #12
 800ed86:	9a02      	ldr	r2, [sp, #8]
 800ed88:	6013      	str	r3, [r2, #0]
 800ed8a:	2340      	movs	r3, #64	; 0x40
 800ed8c:	89a2      	ldrh	r2, [r4, #12]
 800ed8e:	4313      	orrs	r3, r2
 800ed90:	81a3      	strh	r3, [r4, #12]
 800ed92:	e7a5      	b.n	800ece0 <__sfvwrite_r+0xd8>
 800ed94:	0015      	movs	r5, r2
 800ed96:	9203      	str	r2, [sp, #12]
 800ed98:	e7cc      	b.n	800ed34 <__sfvwrite_r+0x12c>
 800ed9a:	9a05      	ldr	r2, [sp, #20]
 800ed9c:	6921      	ldr	r1, [r4, #16]
 800ed9e:	f7f9 feaa 	bl	8008af6 <memcpy>
 800eda2:	89a2      	ldrh	r2, [r4, #12]
 800eda4:	4b44      	ldr	r3, [pc, #272]	; (800eeb8 <__sfvwrite_r+0x2b0>)
 800eda6:	401a      	ands	r2, r3
 800eda8:	2380      	movs	r3, #128	; 0x80
 800edaa:	4313      	orrs	r3, r2
 800edac:	81a3      	strh	r3, [r4, #12]
 800edae:	9b05      	ldr	r3, [sp, #20]
 800edb0:	6126      	str	r6, [r4, #16]
 800edb2:	18f6      	adds	r6, r6, r3
 800edb4:	6026      	str	r6, [r4, #0]
 800edb6:	002e      	movs	r6, r5
 800edb8:	6167      	str	r7, [r4, #20]
 800edba:	1aff      	subs	r7, r7, r3
 800edbc:	60a7      	str	r7, [r4, #8]
 800edbe:	002f      	movs	r7, r5
 800edc0:	42ae      	cmp	r6, r5
 800edc2:	d900      	bls.n	800edc6 <__sfvwrite_r+0x1be>
 800edc4:	002e      	movs	r6, r5
 800edc6:	0032      	movs	r2, r6
 800edc8:	9903      	ldr	r1, [sp, #12]
 800edca:	6820      	ldr	r0, [r4, #0]
 800edcc:	f000 f983 	bl	800f0d6 <memmove>
 800edd0:	68a3      	ldr	r3, [r4, #8]
 800edd2:	1b9b      	subs	r3, r3, r6
 800edd4:	60a3      	str	r3, [r4, #8]
 800edd6:	6823      	ldr	r3, [r4, #0]
 800edd8:	199b      	adds	r3, r3, r6
 800edda:	6023      	str	r3, [r4, #0]
 800eddc:	9b03      	ldr	r3, [sp, #12]
 800edde:	9a04      	ldr	r2, [sp, #16]
 800ede0:	19db      	adds	r3, r3, r7
 800ede2:	9303      	str	r3, [sp, #12]
 800ede4:	9b04      	ldr	r3, [sp, #16]
 800ede6:	1bed      	subs	r5, r5, r7
 800ede8:	689b      	ldr	r3, [r3, #8]
 800edea:	1bdb      	subs	r3, r3, r7
 800edec:	6093      	str	r3, [r2, #8]
 800edee:	d1a1      	bne.n	800ed34 <__sfvwrite_r+0x12c>
 800edf0:	e712      	b.n	800ec18 <__sfvwrite_r+0x10>
 800edf2:	003a      	movs	r2, r7
 800edf4:	9802      	ldr	r0, [sp, #8]
 800edf6:	f7fe fcd7 	bl	800d7a8 <_realloc_r>
 800edfa:	1e06      	subs	r6, r0, #0
 800edfc:	d1d7      	bne.n	800edae <__sfvwrite_r+0x1a6>
 800edfe:	6921      	ldr	r1, [r4, #16]
 800ee00:	9802      	ldr	r0, [sp, #8]
 800ee02:	f7f9 fef3 	bl	8008bec <_free_r>
 800ee06:	2280      	movs	r2, #128	; 0x80
 800ee08:	89a3      	ldrh	r3, [r4, #12]
 800ee0a:	4393      	bics	r3, r2
 800ee0c:	81a3      	strh	r3, [r4, #12]
 800ee0e:	e7b9      	b.n	800ed84 <__sfvwrite_r+0x17c>
 800ee10:	6923      	ldr	r3, [r4, #16]
 800ee12:	4283      	cmp	r3, r0
 800ee14:	d302      	bcc.n	800ee1c <__sfvwrite_r+0x214>
 800ee16:	6967      	ldr	r7, [r4, #20]
 800ee18:	42af      	cmp	r7, r5
 800ee1a:	d916      	bls.n	800ee4a <__sfvwrite_r+0x242>
 800ee1c:	42ae      	cmp	r6, r5
 800ee1e:	d900      	bls.n	800ee22 <__sfvwrite_r+0x21a>
 800ee20:	002e      	movs	r6, r5
 800ee22:	0032      	movs	r2, r6
 800ee24:	9903      	ldr	r1, [sp, #12]
 800ee26:	f000 f956 	bl	800f0d6 <memmove>
 800ee2a:	68a3      	ldr	r3, [r4, #8]
 800ee2c:	6822      	ldr	r2, [r4, #0]
 800ee2e:	1b9b      	subs	r3, r3, r6
 800ee30:	1992      	adds	r2, r2, r6
 800ee32:	0037      	movs	r7, r6
 800ee34:	60a3      	str	r3, [r4, #8]
 800ee36:	6022      	str	r2, [r4, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d1cf      	bne.n	800eddc <__sfvwrite_r+0x1d4>
 800ee3c:	0021      	movs	r1, r4
 800ee3e:	9802      	ldr	r0, [sp, #8]
 800ee40:	f7fd fcc0 	bl	800c7c4 <_fflush_r>
 800ee44:	2800      	cmp	r0, #0
 800ee46:	d0c9      	beq.n	800eddc <__sfvwrite_r+0x1d4>
 800ee48:	e79f      	b.n	800ed8a <__sfvwrite_r+0x182>
 800ee4a:	4b1c      	ldr	r3, [pc, #112]	; (800eebc <__sfvwrite_r+0x2b4>)
 800ee4c:	0028      	movs	r0, r5
 800ee4e:	429d      	cmp	r5, r3
 800ee50:	d900      	bls.n	800ee54 <__sfvwrite_r+0x24c>
 800ee52:	481b      	ldr	r0, [pc, #108]	; (800eec0 <__sfvwrite_r+0x2b8>)
 800ee54:	0039      	movs	r1, r7
 800ee56:	f7f1 f9fb 	bl	8000250 <__divsi3>
 800ee5a:	003b      	movs	r3, r7
 800ee5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ee5e:	4343      	muls	r3, r0
 800ee60:	9a03      	ldr	r2, [sp, #12]
 800ee62:	69e1      	ldr	r1, [r4, #28]
 800ee64:	9802      	ldr	r0, [sp, #8]
 800ee66:	47b0      	blx	r6
 800ee68:	1e07      	subs	r7, r0, #0
 800ee6a:	dcb7      	bgt.n	800eddc <__sfvwrite_r+0x1d4>
 800ee6c:	e78d      	b.n	800ed8a <__sfvwrite_r+0x182>
 800ee6e:	9b01      	ldr	r3, [sp, #4]
 800ee70:	2000      	movs	r0, #0
 800ee72:	681e      	ldr	r6, [r3, #0]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	9303      	str	r3, [sp, #12]
 800ee78:	9b01      	ldr	r3, [sp, #4]
 800ee7a:	3308      	adds	r3, #8
 800ee7c:	9301      	str	r3, [sp, #4]
 800ee7e:	e6e6      	b.n	800ec4e <__sfvwrite_r+0x46>
 800ee80:	9a05      	ldr	r2, [sp, #20]
 800ee82:	4293      	cmp	r3, r2
 800ee84:	dc08      	bgt.n	800ee98 <__sfvwrite_r+0x290>
 800ee86:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ee88:	0032      	movs	r2, r6
 800ee8a:	69e1      	ldr	r1, [r4, #28]
 800ee8c:	9802      	ldr	r0, [sp, #8]
 800ee8e:	47a8      	blx	r5
 800ee90:	1e05      	subs	r5, r0, #0
 800ee92:	dd00      	ble.n	800ee96 <__sfvwrite_r+0x28e>
 800ee94:	e70a      	b.n	800ecac <__sfvwrite_r+0xa4>
 800ee96:	e778      	b.n	800ed8a <__sfvwrite_r+0x182>
 800ee98:	9a05      	ldr	r2, [sp, #20]
 800ee9a:	0031      	movs	r1, r6
 800ee9c:	f000 f91b 	bl	800f0d6 <memmove>
 800eea0:	9a05      	ldr	r2, [sp, #20]
 800eea2:	68a3      	ldr	r3, [r4, #8]
 800eea4:	0015      	movs	r5, r2
 800eea6:	1a9b      	subs	r3, r3, r2
 800eea8:	60a3      	str	r3, [r4, #8]
 800eeaa:	6823      	ldr	r3, [r4, #0]
 800eeac:	189b      	adds	r3, r3, r2
 800eeae:	6023      	str	r3, [r4, #0]
 800eeb0:	e6fc      	b.n	800ecac <__sfvwrite_r+0xa4>
 800eeb2:	46c0      	nop			; (mov r8, r8)
 800eeb4:	7ffffc00 	.word	0x7ffffc00
 800eeb8:	fffffb7f 	.word	0xfffffb7f
 800eebc:	7ffffffe 	.word	0x7ffffffe
 800eec0:	7fffffff 	.word	0x7fffffff

0800eec4 <__submore>:
 800eec4:	000b      	movs	r3, r1
 800eec6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eec8:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800eeca:	3340      	adds	r3, #64	; 0x40
 800eecc:	000c      	movs	r4, r1
 800eece:	429d      	cmp	r5, r3
 800eed0:	d11c      	bne.n	800ef0c <__submore+0x48>
 800eed2:	2680      	movs	r6, #128	; 0x80
 800eed4:	00f6      	lsls	r6, r6, #3
 800eed6:	0031      	movs	r1, r6
 800eed8:	f7f8 fb00 	bl	80074dc <_malloc_r>
 800eedc:	2800      	cmp	r0, #0
 800eede:	d102      	bne.n	800eee6 <__submore+0x22>
 800eee0:	2001      	movs	r0, #1
 800eee2:	4240      	negs	r0, r0
 800eee4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800eee6:	0023      	movs	r3, r4
 800eee8:	6320      	str	r0, [r4, #48]	; 0x30
 800eeea:	6366      	str	r6, [r4, #52]	; 0x34
 800eeec:	3342      	adds	r3, #66	; 0x42
 800eeee:	781a      	ldrb	r2, [r3, #0]
 800eef0:	4b10      	ldr	r3, [pc, #64]	; (800ef34 <__submore+0x70>)
 800eef2:	54c2      	strb	r2, [r0, r3]
 800eef4:	0023      	movs	r3, r4
 800eef6:	3341      	adds	r3, #65	; 0x41
 800eef8:	781a      	ldrb	r2, [r3, #0]
 800eefa:	4b0f      	ldr	r3, [pc, #60]	; (800ef38 <__submore+0x74>)
 800eefc:	54c2      	strb	r2, [r0, r3]
 800eefe:	782a      	ldrb	r2, [r5, #0]
 800ef00:	4b0e      	ldr	r3, [pc, #56]	; (800ef3c <__submore+0x78>)
 800ef02:	54c2      	strb	r2, [r0, r3]
 800ef04:	18c0      	adds	r0, r0, r3
 800ef06:	6020      	str	r0, [r4, #0]
 800ef08:	2000      	movs	r0, #0
 800ef0a:	e7eb      	b.n	800eee4 <__submore+0x20>
 800ef0c:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800ef0e:	0029      	movs	r1, r5
 800ef10:	0073      	lsls	r3, r6, #1
 800ef12:	001a      	movs	r2, r3
 800ef14:	9301      	str	r3, [sp, #4]
 800ef16:	f7fe fc47 	bl	800d7a8 <_realloc_r>
 800ef1a:	1e05      	subs	r5, r0, #0
 800ef1c:	d0e0      	beq.n	800eee0 <__submore+0x1c>
 800ef1e:	1987      	adds	r7, r0, r6
 800ef20:	0001      	movs	r1, r0
 800ef22:	0032      	movs	r2, r6
 800ef24:	0038      	movs	r0, r7
 800ef26:	f7f9 fde6 	bl	8008af6 <memcpy>
 800ef2a:	9b01      	ldr	r3, [sp, #4]
 800ef2c:	6027      	str	r7, [r4, #0]
 800ef2e:	6325      	str	r5, [r4, #48]	; 0x30
 800ef30:	6363      	str	r3, [r4, #52]	; 0x34
 800ef32:	e7e9      	b.n	800ef08 <__submore+0x44>
 800ef34:	000003ff 	.word	0x000003ff
 800ef38:	000003fe 	.word	0x000003fe
 800ef3c:	000003fd 	.word	0x000003fd

0800ef40 <__swsetup_r>:
 800ef40:	4b30      	ldr	r3, [pc, #192]	; (800f004 <__swsetup_r+0xc4>)
 800ef42:	b570      	push	{r4, r5, r6, lr}
 800ef44:	0005      	movs	r5, r0
 800ef46:	6818      	ldr	r0, [r3, #0]
 800ef48:	000c      	movs	r4, r1
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	d004      	beq.n	800ef58 <__swsetup_r+0x18>
 800ef4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d101      	bne.n	800ef58 <__swsetup_r+0x18>
 800ef54:	f7f9 fc36 	bl	80087c4 <__sinit>
 800ef58:	230c      	movs	r3, #12
 800ef5a:	5ee2      	ldrsh	r2, [r4, r3]
 800ef5c:	b293      	uxth	r3, r2
 800ef5e:	0711      	lsls	r1, r2, #28
 800ef60:	d423      	bmi.n	800efaa <__swsetup_r+0x6a>
 800ef62:	06d9      	lsls	r1, r3, #27
 800ef64:	d407      	bmi.n	800ef76 <__swsetup_r+0x36>
 800ef66:	2309      	movs	r3, #9
 800ef68:	2001      	movs	r0, #1
 800ef6a:	602b      	str	r3, [r5, #0]
 800ef6c:	3337      	adds	r3, #55	; 0x37
 800ef6e:	4313      	orrs	r3, r2
 800ef70:	81a3      	strh	r3, [r4, #12]
 800ef72:	4240      	negs	r0, r0
 800ef74:	bd70      	pop	{r4, r5, r6, pc}
 800ef76:	075b      	lsls	r3, r3, #29
 800ef78:	d513      	bpl.n	800efa2 <__swsetup_r+0x62>
 800ef7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ef7c:	2900      	cmp	r1, #0
 800ef7e:	d008      	beq.n	800ef92 <__swsetup_r+0x52>
 800ef80:	0023      	movs	r3, r4
 800ef82:	3340      	adds	r3, #64	; 0x40
 800ef84:	4299      	cmp	r1, r3
 800ef86:	d002      	beq.n	800ef8e <__swsetup_r+0x4e>
 800ef88:	0028      	movs	r0, r5
 800ef8a:	f7f9 fe2f 	bl	8008bec <_free_r>
 800ef8e:	2300      	movs	r3, #0
 800ef90:	6323      	str	r3, [r4, #48]	; 0x30
 800ef92:	2224      	movs	r2, #36	; 0x24
 800ef94:	89a3      	ldrh	r3, [r4, #12]
 800ef96:	4393      	bics	r3, r2
 800ef98:	81a3      	strh	r3, [r4, #12]
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	6063      	str	r3, [r4, #4]
 800ef9e:	6923      	ldr	r3, [r4, #16]
 800efa0:	6023      	str	r3, [r4, #0]
 800efa2:	2308      	movs	r3, #8
 800efa4:	89a2      	ldrh	r2, [r4, #12]
 800efa6:	4313      	orrs	r3, r2
 800efa8:	81a3      	strh	r3, [r4, #12]
 800efaa:	6923      	ldr	r3, [r4, #16]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d10b      	bne.n	800efc8 <__swsetup_r+0x88>
 800efb0:	21a0      	movs	r1, #160	; 0xa0
 800efb2:	2280      	movs	r2, #128	; 0x80
 800efb4:	89a3      	ldrh	r3, [r4, #12]
 800efb6:	0089      	lsls	r1, r1, #2
 800efb8:	0092      	lsls	r2, r2, #2
 800efba:	400b      	ands	r3, r1
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d003      	beq.n	800efc8 <__swsetup_r+0x88>
 800efc0:	0021      	movs	r1, r4
 800efc2:	0028      	movs	r0, r5
 800efc4:	f000 f8e8 	bl	800f198 <__smakebuf_r>
 800efc8:	220c      	movs	r2, #12
 800efca:	5ea3      	ldrsh	r3, [r4, r2]
 800efcc:	2001      	movs	r0, #1
 800efce:	001a      	movs	r2, r3
 800efd0:	b299      	uxth	r1, r3
 800efd2:	4002      	ands	r2, r0
 800efd4:	4203      	tst	r3, r0
 800efd6:	d00f      	beq.n	800eff8 <__swsetup_r+0xb8>
 800efd8:	2200      	movs	r2, #0
 800efda:	60a2      	str	r2, [r4, #8]
 800efdc:	6962      	ldr	r2, [r4, #20]
 800efde:	4252      	negs	r2, r2
 800efe0:	61a2      	str	r2, [r4, #24]
 800efe2:	2000      	movs	r0, #0
 800efe4:	6922      	ldr	r2, [r4, #16]
 800efe6:	4282      	cmp	r2, r0
 800efe8:	d1c4      	bne.n	800ef74 <__swsetup_r+0x34>
 800efea:	0609      	lsls	r1, r1, #24
 800efec:	d5c2      	bpl.n	800ef74 <__swsetup_r+0x34>
 800efee:	2240      	movs	r2, #64	; 0x40
 800eff0:	4313      	orrs	r3, r2
 800eff2:	81a3      	strh	r3, [r4, #12]
 800eff4:	3801      	subs	r0, #1
 800eff6:	e7bd      	b.n	800ef74 <__swsetup_r+0x34>
 800eff8:	0788      	lsls	r0, r1, #30
 800effa:	d400      	bmi.n	800effe <__swsetup_r+0xbe>
 800effc:	6962      	ldr	r2, [r4, #20]
 800effe:	60a2      	str	r2, [r4, #8]
 800f000:	e7ef      	b.n	800efe2 <__swsetup_r+0xa2>
 800f002:	46c0      	nop			; (mov r8, r8)
 800f004:	200006b8 	.word	0x200006b8

0800f008 <__fputwc>:
 800f008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f00a:	b085      	sub	sp, #20
 800f00c:	000e      	movs	r6, r1
 800f00e:	0015      	movs	r5, r2
 800f010:	9001      	str	r0, [sp, #4]
 800f012:	f7f9 fccf 	bl	80089b4 <__locale_mb_cur_max>
 800f016:	0004      	movs	r4, r0
 800f018:	2801      	cmp	r0, #1
 800f01a:	d119      	bne.n	800f050 <__fputwc+0x48>
 800f01c:	1e73      	subs	r3, r6, #1
 800f01e:	2bfe      	cmp	r3, #254	; 0xfe
 800f020:	d816      	bhi.n	800f050 <__fputwc+0x48>
 800f022:	ab02      	add	r3, sp, #8
 800f024:	711e      	strb	r6, [r3, #4]
 800f026:	2700      	movs	r7, #0
 800f028:	42a7      	cmp	r7, r4
 800f02a:	d020      	beq.n	800f06e <__fputwc+0x66>
 800f02c:	ab03      	add	r3, sp, #12
 800f02e:	5dd9      	ldrb	r1, [r3, r7]
 800f030:	68ab      	ldr	r3, [r5, #8]
 800f032:	3b01      	subs	r3, #1
 800f034:	60ab      	str	r3, [r5, #8]
 800f036:	2b00      	cmp	r3, #0
 800f038:	da04      	bge.n	800f044 <__fputwc+0x3c>
 800f03a:	69aa      	ldr	r2, [r5, #24]
 800f03c:	4293      	cmp	r3, r2
 800f03e:	db19      	blt.n	800f074 <__fputwc+0x6c>
 800f040:	290a      	cmp	r1, #10
 800f042:	d017      	beq.n	800f074 <__fputwc+0x6c>
 800f044:	682b      	ldr	r3, [r5, #0]
 800f046:	1c5a      	adds	r2, r3, #1
 800f048:	602a      	str	r2, [r5, #0]
 800f04a:	7019      	strb	r1, [r3, #0]
 800f04c:	3701      	adds	r7, #1
 800f04e:	e7eb      	b.n	800f028 <__fputwc+0x20>
 800f050:	002b      	movs	r3, r5
 800f052:	0032      	movs	r2, r6
 800f054:	9801      	ldr	r0, [sp, #4]
 800f056:	335c      	adds	r3, #92	; 0x5c
 800f058:	a903      	add	r1, sp, #12
 800f05a:	f000 f857 	bl	800f10c <_wcrtomb_r>
 800f05e:	0004      	movs	r4, r0
 800f060:	1c43      	adds	r3, r0, #1
 800f062:	d1e0      	bne.n	800f026 <__fputwc+0x1e>
 800f064:	2340      	movs	r3, #64	; 0x40
 800f066:	0006      	movs	r6, r0
 800f068:	89aa      	ldrh	r2, [r5, #12]
 800f06a:	4313      	orrs	r3, r2
 800f06c:	81ab      	strh	r3, [r5, #12]
 800f06e:	0030      	movs	r0, r6
 800f070:	b005      	add	sp, #20
 800f072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f074:	002a      	movs	r2, r5
 800f076:	9801      	ldr	r0, [sp, #4]
 800f078:	f000 f8cc 	bl	800f214 <__swbuf_r>
 800f07c:	1c43      	adds	r3, r0, #1
 800f07e:	d1e5      	bne.n	800f04c <__fputwc+0x44>
 800f080:	0006      	movs	r6, r0
 800f082:	e7f4      	b.n	800f06e <__fputwc+0x66>

0800f084 <_fputwc_r>:
 800f084:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800f086:	b570      	push	{r4, r5, r6, lr}
 800f088:	0005      	movs	r5, r0
 800f08a:	000e      	movs	r6, r1
 800f08c:	0014      	movs	r4, r2
 800f08e:	07db      	lsls	r3, r3, #31
 800f090:	d405      	bmi.n	800f09e <_fputwc_r+0x1a>
 800f092:	8993      	ldrh	r3, [r2, #12]
 800f094:	059b      	lsls	r3, r3, #22
 800f096:	d402      	bmi.n	800f09e <_fputwc_r+0x1a>
 800f098:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800f09a:	f7f9 fd1f 	bl	8008adc <__retarget_lock_acquire_recursive>
 800f09e:	230c      	movs	r3, #12
 800f0a0:	5ee2      	ldrsh	r2, [r4, r3]
 800f0a2:	2380      	movs	r3, #128	; 0x80
 800f0a4:	019b      	lsls	r3, r3, #6
 800f0a6:	421a      	tst	r2, r3
 800f0a8:	d104      	bne.n	800f0b4 <_fputwc_r+0x30>
 800f0aa:	431a      	orrs	r2, r3
 800f0ac:	81a2      	strh	r2, [r4, #12]
 800f0ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f0b0:	4313      	orrs	r3, r2
 800f0b2:	6663      	str	r3, [r4, #100]	; 0x64
 800f0b4:	0028      	movs	r0, r5
 800f0b6:	0022      	movs	r2, r4
 800f0b8:	0031      	movs	r1, r6
 800f0ba:	f7ff ffa5 	bl	800f008 <__fputwc>
 800f0be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0c0:	0005      	movs	r5, r0
 800f0c2:	07db      	lsls	r3, r3, #31
 800f0c4:	d405      	bmi.n	800f0d2 <_fputwc_r+0x4e>
 800f0c6:	89a3      	ldrh	r3, [r4, #12]
 800f0c8:	059b      	lsls	r3, r3, #22
 800f0ca:	d402      	bmi.n	800f0d2 <_fputwc_r+0x4e>
 800f0cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0ce:	f7f9 fd06 	bl	8008ade <__retarget_lock_release_recursive>
 800f0d2:	0028      	movs	r0, r5
 800f0d4:	bd70      	pop	{r4, r5, r6, pc}

0800f0d6 <memmove>:
 800f0d6:	b510      	push	{r4, lr}
 800f0d8:	4288      	cmp	r0, r1
 800f0da:	d902      	bls.n	800f0e2 <memmove+0xc>
 800f0dc:	188b      	adds	r3, r1, r2
 800f0de:	4298      	cmp	r0, r3
 800f0e0:	d303      	bcc.n	800f0ea <memmove+0x14>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	e007      	b.n	800f0f6 <memmove+0x20>
 800f0e6:	5c8b      	ldrb	r3, [r1, r2]
 800f0e8:	5483      	strb	r3, [r0, r2]
 800f0ea:	3a01      	subs	r2, #1
 800f0ec:	d2fb      	bcs.n	800f0e6 <memmove+0x10>
 800f0ee:	bd10      	pop	{r4, pc}
 800f0f0:	5ccc      	ldrb	r4, [r1, r3]
 800f0f2:	54c4      	strb	r4, [r0, r3]
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d1fa      	bne.n	800f0f0 <memmove+0x1a>
 800f0fa:	e7f8      	b.n	800f0ee <memmove+0x18>

0800f0fc <abort>:
 800f0fc:	2006      	movs	r0, #6
 800f0fe:	b510      	push	{r4, lr}
 800f100:	f000 f906 	bl	800f310 <raise>
 800f104:	2001      	movs	r0, #1
 800f106:	f7f4 f985 	bl	8003414 <_exit>
	...

0800f10c <_wcrtomb_r>:
 800f10c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f10e:	001d      	movs	r5, r3
 800f110:	4b09      	ldr	r3, [pc, #36]	; (800f138 <_wcrtomb_r+0x2c>)
 800f112:	0004      	movs	r4, r0
 800f114:	33e0      	adds	r3, #224	; 0xe0
 800f116:	681e      	ldr	r6, [r3, #0]
 800f118:	002b      	movs	r3, r5
 800f11a:	2900      	cmp	r1, #0
 800f11c:	d101      	bne.n	800f122 <_wcrtomb_r+0x16>
 800f11e:	000a      	movs	r2, r1
 800f120:	a901      	add	r1, sp, #4
 800f122:	0020      	movs	r0, r4
 800f124:	47b0      	blx	r6
 800f126:	1c43      	adds	r3, r0, #1
 800f128:	d103      	bne.n	800f132 <_wcrtomb_r+0x26>
 800f12a:	2300      	movs	r3, #0
 800f12c:	602b      	str	r3, [r5, #0]
 800f12e:	338a      	adds	r3, #138	; 0x8a
 800f130:	6023      	str	r3, [r4, #0]
 800f132:	b004      	add	sp, #16
 800f134:	bd70      	pop	{r4, r5, r6, pc}
 800f136:	46c0      	nop			; (mov r8, r8)
 800f138:	2000042c 	.word	0x2000042c

0800f13c <__swhatbuf_r>:
 800f13c:	b570      	push	{r4, r5, r6, lr}
 800f13e:	000e      	movs	r6, r1
 800f140:	001d      	movs	r5, r3
 800f142:	230e      	movs	r3, #14
 800f144:	5ec9      	ldrsh	r1, [r1, r3]
 800f146:	0014      	movs	r4, r2
 800f148:	b096      	sub	sp, #88	; 0x58
 800f14a:	2900      	cmp	r1, #0
 800f14c:	da09      	bge.n	800f162 <__swhatbuf_r+0x26>
 800f14e:	89b2      	ldrh	r2, [r6, #12]
 800f150:	2380      	movs	r3, #128	; 0x80
 800f152:	0011      	movs	r1, r2
 800f154:	4019      	ands	r1, r3
 800f156:	421a      	tst	r2, r3
 800f158:	d018      	beq.n	800f18c <__swhatbuf_r+0x50>
 800f15a:	2100      	movs	r1, #0
 800f15c:	3b40      	subs	r3, #64	; 0x40
 800f15e:	0008      	movs	r0, r1
 800f160:	e010      	b.n	800f184 <__swhatbuf_r+0x48>
 800f162:	466a      	mov	r2, sp
 800f164:	f000 f8de 	bl	800f324 <_fstat_r>
 800f168:	2800      	cmp	r0, #0
 800f16a:	dbf0      	blt.n	800f14e <__swhatbuf_r+0x12>
 800f16c:	23f0      	movs	r3, #240	; 0xf0
 800f16e:	9901      	ldr	r1, [sp, #4]
 800f170:	021b      	lsls	r3, r3, #8
 800f172:	4019      	ands	r1, r3
 800f174:	4b07      	ldr	r3, [pc, #28]	; (800f194 <__swhatbuf_r+0x58>)
 800f176:	2080      	movs	r0, #128	; 0x80
 800f178:	18c9      	adds	r1, r1, r3
 800f17a:	424b      	negs	r3, r1
 800f17c:	4159      	adcs	r1, r3
 800f17e:	2380      	movs	r3, #128	; 0x80
 800f180:	0100      	lsls	r0, r0, #4
 800f182:	00db      	lsls	r3, r3, #3
 800f184:	6029      	str	r1, [r5, #0]
 800f186:	6023      	str	r3, [r4, #0]
 800f188:	b016      	add	sp, #88	; 0x58
 800f18a:	bd70      	pop	{r4, r5, r6, pc}
 800f18c:	2380      	movs	r3, #128	; 0x80
 800f18e:	00db      	lsls	r3, r3, #3
 800f190:	e7e5      	b.n	800f15e <__swhatbuf_r+0x22>
 800f192:	46c0      	nop			; (mov r8, r8)
 800f194:	ffffe000 	.word	0xffffe000

0800f198 <__smakebuf_r>:
 800f198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f19a:	2602      	movs	r6, #2
 800f19c:	898b      	ldrh	r3, [r1, #12]
 800f19e:	0005      	movs	r5, r0
 800f1a0:	000c      	movs	r4, r1
 800f1a2:	4233      	tst	r3, r6
 800f1a4:	d006      	beq.n	800f1b4 <__smakebuf_r+0x1c>
 800f1a6:	0023      	movs	r3, r4
 800f1a8:	3343      	adds	r3, #67	; 0x43
 800f1aa:	6023      	str	r3, [r4, #0]
 800f1ac:	6123      	str	r3, [r4, #16]
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	6163      	str	r3, [r4, #20]
 800f1b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f1b4:	466a      	mov	r2, sp
 800f1b6:	ab01      	add	r3, sp, #4
 800f1b8:	f7ff ffc0 	bl	800f13c <__swhatbuf_r>
 800f1bc:	9900      	ldr	r1, [sp, #0]
 800f1be:	0007      	movs	r7, r0
 800f1c0:	0028      	movs	r0, r5
 800f1c2:	f7f8 f98b 	bl	80074dc <_malloc_r>
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	d108      	bne.n	800f1dc <__smakebuf_r+0x44>
 800f1ca:	220c      	movs	r2, #12
 800f1cc:	5ea3      	ldrsh	r3, [r4, r2]
 800f1ce:	059a      	lsls	r2, r3, #22
 800f1d0:	d4ef      	bmi.n	800f1b2 <__smakebuf_r+0x1a>
 800f1d2:	2203      	movs	r2, #3
 800f1d4:	4393      	bics	r3, r2
 800f1d6:	431e      	orrs	r6, r3
 800f1d8:	81a6      	strh	r6, [r4, #12]
 800f1da:	e7e4      	b.n	800f1a6 <__smakebuf_r+0xe>
 800f1dc:	2380      	movs	r3, #128	; 0x80
 800f1de:	89a2      	ldrh	r2, [r4, #12]
 800f1e0:	6020      	str	r0, [r4, #0]
 800f1e2:	4313      	orrs	r3, r2
 800f1e4:	81a3      	strh	r3, [r4, #12]
 800f1e6:	9b00      	ldr	r3, [sp, #0]
 800f1e8:	6120      	str	r0, [r4, #16]
 800f1ea:	6163      	str	r3, [r4, #20]
 800f1ec:	9b01      	ldr	r3, [sp, #4]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d00c      	beq.n	800f20c <__smakebuf_r+0x74>
 800f1f2:	0028      	movs	r0, r5
 800f1f4:	230e      	movs	r3, #14
 800f1f6:	5ee1      	ldrsh	r1, [r4, r3]
 800f1f8:	f000 f8a6 	bl	800f348 <_isatty_r>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	d005      	beq.n	800f20c <__smakebuf_r+0x74>
 800f200:	2303      	movs	r3, #3
 800f202:	89a2      	ldrh	r2, [r4, #12]
 800f204:	439a      	bics	r2, r3
 800f206:	3b02      	subs	r3, #2
 800f208:	4313      	orrs	r3, r2
 800f20a:	81a3      	strh	r3, [r4, #12]
 800f20c:	89a3      	ldrh	r3, [r4, #12]
 800f20e:	433b      	orrs	r3, r7
 800f210:	81a3      	strh	r3, [r4, #12]
 800f212:	e7ce      	b.n	800f1b2 <__smakebuf_r+0x1a>

0800f214 <__swbuf_r>:
 800f214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f216:	0006      	movs	r6, r0
 800f218:	000d      	movs	r5, r1
 800f21a:	0014      	movs	r4, r2
 800f21c:	2800      	cmp	r0, #0
 800f21e:	d004      	beq.n	800f22a <__swbuf_r+0x16>
 800f220:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f222:	2b00      	cmp	r3, #0
 800f224:	d101      	bne.n	800f22a <__swbuf_r+0x16>
 800f226:	f7f9 facd 	bl	80087c4 <__sinit>
 800f22a:	69a3      	ldr	r3, [r4, #24]
 800f22c:	60a3      	str	r3, [r4, #8]
 800f22e:	89a3      	ldrh	r3, [r4, #12]
 800f230:	071b      	lsls	r3, r3, #28
 800f232:	d52e      	bpl.n	800f292 <__swbuf_r+0x7e>
 800f234:	6923      	ldr	r3, [r4, #16]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d02b      	beq.n	800f292 <__swbuf_r+0x7e>
 800f23a:	230c      	movs	r3, #12
 800f23c:	5ee2      	ldrsh	r2, [r4, r3]
 800f23e:	2380      	movs	r3, #128	; 0x80
 800f240:	019b      	lsls	r3, r3, #6
 800f242:	b2ef      	uxtb	r7, r5
 800f244:	b2ed      	uxtb	r5, r5
 800f246:	421a      	tst	r2, r3
 800f248:	d02c      	beq.n	800f2a4 <__swbuf_r+0x90>
 800f24a:	6923      	ldr	r3, [r4, #16]
 800f24c:	6820      	ldr	r0, [r4, #0]
 800f24e:	1ac0      	subs	r0, r0, r3
 800f250:	6963      	ldr	r3, [r4, #20]
 800f252:	4283      	cmp	r3, r0
 800f254:	dc05      	bgt.n	800f262 <__swbuf_r+0x4e>
 800f256:	0021      	movs	r1, r4
 800f258:	0030      	movs	r0, r6
 800f25a:	f7fd fab3 	bl	800c7c4 <_fflush_r>
 800f25e:	2800      	cmp	r0, #0
 800f260:	d11d      	bne.n	800f29e <__swbuf_r+0x8a>
 800f262:	68a3      	ldr	r3, [r4, #8]
 800f264:	3001      	adds	r0, #1
 800f266:	3b01      	subs	r3, #1
 800f268:	60a3      	str	r3, [r4, #8]
 800f26a:	6823      	ldr	r3, [r4, #0]
 800f26c:	1c5a      	adds	r2, r3, #1
 800f26e:	6022      	str	r2, [r4, #0]
 800f270:	701f      	strb	r7, [r3, #0]
 800f272:	6963      	ldr	r3, [r4, #20]
 800f274:	4283      	cmp	r3, r0
 800f276:	d004      	beq.n	800f282 <__swbuf_r+0x6e>
 800f278:	89a3      	ldrh	r3, [r4, #12]
 800f27a:	07db      	lsls	r3, r3, #31
 800f27c:	d507      	bpl.n	800f28e <__swbuf_r+0x7a>
 800f27e:	2d0a      	cmp	r5, #10
 800f280:	d105      	bne.n	800f28e <__swbuf_r+0x7a>
 800f282:	0021      	movs	r1, r4
 800f284:	0030      	movs	r0, r6
 800f286:	f7fd fa9d 	bl	800c7c4 <_fflush_r>
 800f28a:	2800      	cmp	r0, #0
 800f28c:	d107      	bne.n	800f29e <__swbuf_r+0x8a>
 800f28e:	0028      	movs	r0, r5
 800f290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f292:	0021      	movs	r1, r4
 800f294:	0030      	movs	r0, r6
 800f296:	f7ff fe53 	bl	800ef40 <__swsetup_r>
 800f29a:	2800      	cmp	r0, #0
 800f29c:	d0cd      	beq.n	800f23a <__swbuf_r+0x26>
 800f29e:	2501      	movs	r5, #1
 800f2a0:	426d      	negs	r5, r5
 800f2a2:	e7f4      	b.n	800f28e <__swbuf_r+0x7a>
 800f2a4:	4313      	orrs	r3, r2
 800f2a6:	81a3      	strh	r3, [r4, #12]
 800f2a8:	4a02      	ldr	r2, [pc, #8]	; (800f2b4 <__swbuf_r+0xa0>)
 800f2aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2ac:	4013      	ands	r3, r2
 800f2ae:	6663      	str	r3, [r4, #100]	; 0x64
 800f2b0:	e7cb      	b.n	800f24a <__swbuf_r+0x36>
 800f2b2:	46c0      	nop			; (mov r8, r8)
 800f2b4:	ffffdfff 	.word	0xffffdfff

0800f2b8 <_raise_r>:
 800f2b8:	b570      	push	{r4, r5, r6, lr}
 800f2ba:	0004      	movs	r4, r0
 800f2bc:	000d      	movs	r5, r1
 800f2be:	291f      	cmp	r1, #31
 800f2c0:	d904      	bls.n	800f2cc <_raise_r+0x14>
 800f2c2:	2316      	movs	r3, #22
 800f2c4:	6003      	str	r3, [r0, #0]
 800f2c6:	2001      	movs	r0, #1
 800f2c8:	4240      	negs	r0, r0
 800f2ca:	bd70      	pop	{r4, r5, r6, pc}
 800f2cc:	0003      	movs	r3, r0
 800f2ce:	33fc      	adds	r3, #252	; 0xfc
 800f2d0:	69db      	ldr	r3, [r3, #28]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d004      	beq.n	800f2e0 <_raise_r+0x28>
 800f2d6:	008a      	lsls	r2, r1, #2
 800f2d8:	189b      	adds	r3, r3, r2
 800f2da:	681a      	ldr	r2, [r3, #0]
 800f2dc:	2a00      	cmp	r2, #0
 800f2de:	d108      	bne.n	800f2f2 <_raise_r+0x3a>
 800f2e0:	0020      	movs	r0, r4
 800f2e2:	f000 f855 	bl	800f390 <_getpid_r>
 800f2e6:	002a      	movs	r2, r5
 800f2e8:	0001      	movs	r1, r0
 800f2ea:	0020      	movs	r0, r4
 800f2ec:	f000 f83e 	bl	800f36c <_kill_r>
 800f2f0:	e7eb      	b.n	800f2ca <_raise_r+0x12>
 800f2f2:	2000      	movs	r0, #0
 800f2f4:	2a01      	cmp	r2, #1
 800f2f6:	d0e8      	beq.n	800f2ca <_raise_r+0x12>
 800f2f8:	1c51      	adds	r1, r2, #1
 800f2fa:	d103      	bne.n	800f304 <_raise_r+0x4c>
 800f2fc:	2316      	movs	r3, #22
 800f2fe:	3001      	adds	r0, #1
 800f300:	6023      	str	r3, [r4, #0]
 800f302:	e7e2      	b.n	800f2ca <_raise_r+0x12>
 800f304:	2400      	movs	r4, #0
 800f306:	0028      	movs	r0, r5
 800f308:	601c      	str	r4, [r3, #0]
 800f30a:	4790      	blx	r2
 800f30c:	0020      	movs	r0, r4
 800f30e:	e7dc      	b.n	800f2ca <_raise_r+0x12>

0800f310 <raise>:
 800f310:	b510      	push	{r4, lr}
 800f312:	4b03      	ldr	r3, [pc, #12]	; (800f320 <raise+0x10>)
 800f314:	0001      	movs	r1, r0
 800f316:	6818      	ldr	r0, [r3, #0]
 800f318:	f7ff ffce 	bl	800f2b8 <_raise_r>
 800f31c:	bd10      	pop	{r4, pc}
 800f31e:	46c0      	nop			; (mov r8, r8)
 800f320:	200006b8 	.word	0x200006b8

0800f324 <_fstat_r>:
 800f324:	2300      	movs	r3, #0
 800f326:	b570      	push	{r4, r5, r6, lr}
 800f328:	4d06      	ldr	r5, [pc, #24]	; (800f344 <_fstat_r+0x20>)
 800f32a:	0004      	movs	r4, r0
 800f32c:	0008      	movs	r0, r1
 800f32e:	0011      	movs	r1, r2
 800f330:	602b      	str	r3, [r5, #0]
 800f332:	f7f4 f8be 	bl	80034b2 <_fstat>
 800f336:	1c43      	adds	r3, r0, #1
 800f338:	d103      	bne.n	800f342 <_fstat_r+0x1e>
 800f33a:	682b      	ldr	r3, [r5, #0]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d000      	beq.n	800f342 <_fstat_r+0x1e>
 800f340:	6023      	str	r3, [r4, #0]
 800f342:	bd70      	pop	{r4, r5, r6, pc}
 800f344:	20000bb4 	.word	0x20000bb4

0800f348 <_isatty_r>:
 800f348:	2300      	movs	r3, #0
 800f34a:	b570      	push	{r4, r5, r6, lr}
 800f34c:	4d06      	ldr	r5, [pc, #24]	; (800f368 <_isatty_r+0x20>)
 800f34e:	0004      	movs	r4, r0
 800f350:	0008      	movs	r0, r1
 800f352:	602b      	str	r3, [r5, #0]
 800f354:	f7f4 f8bb 	bl	80034ce <_isatty>
 800f358:	1c43      	adds	r3, r0, #1
 800f35a:	d103      	bne.n	800f364 <_isatty_r+0x1c>
 800f35c:	682b      	ldr	r3, [r5, #0]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d000      	beq.n	800f364 <_isatty_r+0x1c>
 800f362:	6023      	str	r3, [r4, #0]
 800f364:	bd70      	pop	{r4, r5, r6, pc}
 800f366:	46c0      	nop			; (mov r8, r8)
 800f368:	20000bb4 	.word	0x20000bb4

0800f36c <_kill_r>:
 800f36c:	2300      	movs	r3, #0
 800f36e:	b570      	push	{r4, r5, r6, lr}
 800f370:	4d06      	ldr	r5, [pc, #24]	; (800f38c <_kill_r+0x20>)
 800f372:	0004      	movs	r4, r0
 800f374:	0008      	movs	r0, r1
 800f376:	0011      	movs	r1, r2
 800f378:	602b      	str	r3, [r5, #0]
 800f37a:	f7f4 f83b 	bl	80033f4 <_kill>
 800f37e:	1c43      	adds	r3, r0, #1
 800f380:	d103      	bne.n	800f38a <_kill_r+0x1e>
 800f382:	682b      	ldr	r3, [r5, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d000      	beq.n	800f38a <_kill_r+0x1e>
 800f388:	6023      	str	r3, [r4, #0]
 800f38a:	bd70      	pop	{r4, r5, r6, pc}
 800f38c:	20000bb4 	.word	0x20000bb4

0800f390 <_getpid_r>:
 800f390:	b510      	push	{r4, lr}
 800f392:	f7f4 f829 	bl	80033e8 <_getpid>
 800f396:	bd10      	pop	{r4, pc}

0800f398 <round>:
 800f398:	b570      	push	{r4, r5, r6, lr}
 800f39a:	004a      	lsls	r2, r1, #1
 800f39c:	000d      	movs	r5, r1
 800f39e:	4920      	ldr	r1, [pc, #128]	; (800f420 <round+0x88>)
 800f3a0:	0d52      	lsrs	r2, r2, #21
 800f3a2:	1851      	adds	r1, r2, r1
 800f3a4:	0006      	movs	r6, r0
 800f3a6:	2913      	cmp	r1, #19
 800f3a8:	dc18      	bgt.n	800f3dc <round+0x44>
 800f3aa:	2900      	cmp	r1, #0
 800f3ac:	da09      	bge.n	800f3c2 <round+0x2a>
 800f3ae:	0feb      	lsrs	r3, r5, #31
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	07db      	lsls	r3, r3, #31
 800f3b4:	3101      	adds	r1, #1
 800f3b6:	d101      	bne.n	800f3bc <round+0x24>
 800f3b8:	491a      	ldr	r1, [pc, #104]	; (800f424 <round+0x8c>)
 800f3ba:	430b      	orrs	r3, r1
 800f3bc:	0019      	movs	r1, r3
 800f3be:	0010      	movs	r0, r2
 800f3c0:	e017      	b.n	800f3f2 <round+0x5a>
 800f3c2:	4c19      	ldr	r4, [pc, #100]	; (800f428 <round+0x90>)
 800f3c4:	410c      	asrs	r4, r1
 800f3c6:	0022      	movs	r2, r4
 800f3c8:	402a      	ands	r2, r5
 800f3ca:	4302      	orrs	r2, r0
 800f3cc:	d013      	beq.n	800f3f6 <round+0x5e>
 800f3ce:	2280      	movs	r2, #128	; 0x80
 800f3d0:	0312      	lsls	r2, r2, #12
 800f3d2:	410a      	asrs	r2, r1
 800f3d4:	1953      	adds	r3, r2, r5
 800f3d6:	43a3      	bics	r3, r4
 800f3d8:	2200      	movs	r2, #0
 800f3da:	e7ef      	b.n	800f3bc <round+0x24>
 800f3dc:	2933      	cmp	r1, #51	; 0x33
 800f3de:	dd0d      	ble.n	800f3fc <round+0x64>
 800f3e0:	2380      	movs	r3, #128	; 0x80
 800f3e2:	00db      	lsls	r3, r3, #3
 800f3e4:	4299      	cmp	r1, r3
 800f3e6:	d106      	bne.n	800f3f6 <round+0x5e>
 800f3e8:	0002      	movs	r2, r0
 800f3ea:	002b      	movs	r3, r5
 800f3ec:	0029      	movs	r1, r5
 800f3ee:	f7f1 f9e3 	bl	80007b8 <__aeabi_dadd>
 800f3f2:	0006      	movs	r6, r0
 800f3f4:	000d      	movs	r5, r1
 800f3f6:	0030      	movs	r0, r6
 800f3f8:	0029      	movs	r1, r5
 800f3fa:	bd70      	pop	{r4, r5, r6, pc}
 800f3fc:	4c0b      	ldr	r4, [pc, #44]	; (800f42c <round+0x94>)
 800f3fe:	1912      	adds	r2, r2, r4
 800f400:	2401      	movs	r4, #1
 800f402:	4264      	negs	r4, r4
 800f404:	40d4      	lsrs	r4, r2
 800f406:	4220      	tst	r0, r4
 800f408:	d0f5      	beq.n	800f3f6 <round+0x5e>
 800f40a:	2233      	movs	r2, #51	; 0x33
 800f40c:	1a51      	subs	r1, r2, r1
 800f40e:	3a32      	subs	r2, #50	; 0x32
 800f410:	408a      	lsls	r2, r1
 800f412:	1812      	adds	r2, r2, r0
 800f414:	4282      	cmp	r2, r0
 800f416:	4180      	sbcs	r0, r0
 800f418:	4240      	negs	r0, r0
 800f41a:	182b      	adds	r3, r5, r0
 800f41c:	43a2      	bics	r2, r4
 800f41e:	e7cd      	b.n	800f3bc <round+0x24>
 800f420:	fffffc01 	.word	0xfffffc01
 800f424:	3ff00000 	.word	0x3ff00000
 800f428:	000fffff 	.word	0x000fffff
 800f42c:	fffffbed 	.word	0xfffffbed

0800f430 <_init>:
 800f430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f432:	46c0      	nop			; (mov r8, r8)
 800f434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f436:	bc08      	pop	{r3}
 800f438:	469e      	mov	lr, r3
 800f43a:	4770      	bx	lr

0800f43c <_fini>:
 800f43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f43e:	46c0      	nop			; (mov r8, r8)
 800f440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f442:	bc08      	pop	{r3}
 800f444:	469e      	mov	lr, r3
 800f446:	4770      	bx	lr
